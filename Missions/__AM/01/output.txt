// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6078 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6056
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 17091 0 0
5948: GO 6056
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 17224 0 0
5963: GO 6056
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 17309 0 0
5978: GO 6056
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 5 :
5989: CALL 17757 0 0
5993: GO 6056
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 6 :
6004: CALL 17868 0 0
6008: GO 6056
6010: LD_INT 6
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 7 :
6019: CALL 17925 0 0
6023: GO 6056
6025: LD_INT 7
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 8 :
6034: CALL 17967 0 0
6038: GO 6056
6040: LD_INT 8
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; end ;
6049: CALL 18068 0 0
6053: GO 6056
6055: POP
// end ; end ;
6056: PPOPN 6
6058: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6059: GO 6061
6061: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6062: LD_STRING initStreamRollete();
6064: PPUSH
6065: CALL_OW 559
// InitStreamMode ;
6069: CALL 6078 0 0
// DefineStreamItems ( ) ;
6073: CALL 6518 0 0
// end ;
6077: END
// function InitStreamMode ; begin
6078: LD_INT 0
6080: PPUSH
// streamModeActive := false ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// normalCounter := 36 ;
6089: LD_ADDR_EXP 16
6093: PUSH
6094: LD_INT 36
6096: ST_TO_ADDR
// hardcoreCounter := 16 ;
6097: LD_ADDR_EXP 17
6101: PUSH
6102: LD_INT 16
6104: ST_TO_ADDR
// sRocket := false ;
6105: LD_ADDR_EXP 20
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sSpeed := false ;
6113: LD_ADDR_EXP 19
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sEngine := false ;
6121: LD_ADDR_EXP 21
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sSpec := false ;
6129: LD_ADDR_EXP 18
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sLevel := false ;
6137: LD_ADDR_EXP 22
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sArmoury := false ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sRadar := false ;
6153: LD_ADDR_EXP 24
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sBunker := false ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sHack := false ;
6169: LD_ADDR_EXP 26
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sFire := false ;
6177: LD_ADDR_EXP 27
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sRefresh := false ;
6185: LD_ADDR_EXP 28
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sExp := false ;
6193: LD_ADDR_EXP 29
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sDepot := false ;
6201: LD_ADDR_EXP 30
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sFlag := false ;
6209: LD_ADDR_EXP 31
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sKamikadze := false ;
6217: LD_ADDR_EXP 39
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTroll := false ;
6225: LD_ADDR_EXP 40
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSlow := false ;
6233: LD_ADDR_EXP 41
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLack := false ;
6241: LD_ADDR_EXP 42
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sTank := false ;
6249: LD_ADDR_EXP 44
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRemote := false ;
6257: LD_ADDR_EXP 45
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sPowell := false ;
6265: LD_ADDR_EXP 46
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sTeleport := false ;
6273: LD_ADDR_EXP 49
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sOilTower := false ;
6281: LD_ADDR_EXP 51
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sShovel := false ;
6289: LD_ADDR_EXP 52
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sSheik := false ;
6297: LD_ADDR_EXP 53
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sEarthquake := false ;
6305: LD_ADDR_EXP 55
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sAI := false ;
6313: LD_ADDR_EXP 56
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sCargo := false ;
6321: LD_ADDR_EXP 59
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sDLaser := false ;
6329: LD_ADDR_EXP 60
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sExchange := false ;
6337: LD_ADDR_EXP 61
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sFac := false ;
6345: LD_ADDR_EXP 62
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sPower := false ;
6353: LD_ADDR_EXP 63
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRandom := false ;
6361: LD_ADDR_EXP 64
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sShield := false ;
6369: LD_ADDR_EXP 65
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTime := false ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTools := false ;
6385: LD_ADDR_EXP 67
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sSold := false ;
6393: LD_ADDR_EXP 32
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sDiff := false ;
6401: LD_ADDR_EXP 33
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sFog := false ;
6409: LD_ADDR_EXP 36
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sReset := false ;
6417: LD_ADDR_EXP 37
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSun := false ;
6425: LD_ADDR_EXP 38
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sTiger := false ;
6433: LD_ADDR_EXP 34
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBomb := false ;
6441: LD_ADDR_EXP 35
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sWound := false ;
6449: LD_ADDR_EXP 43
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBetray := false ;
6457: LD_ADDR_EXP 47
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sContamin := false ;
6465: LD_ADDR_EXP 48
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sOil := false ;
6473: LD_ADDR_EXP 50
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sStu := false ;
6481: LD_ADDR_EXP 54
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sBazooka := false ;
6489: LD_ADDR_EXP 57
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sMortar := false ;
6497: LD_ADDR_EXP 58
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sRanger := false ;
6505: LD_ADDR_EXP 68
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// result := [ ] ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: EMPTY
6531: ST_TO_ADDR
// if campaign_id = 1 then
6532: LD_OWVAR 69
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: IFFALSE 9478
// begin case mission_number of 1 :
6542: LD_OWVAR 70
6546: PUSH
6547: LD_INT 1
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6619
6555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 26
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 106
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 9476
6619: LD_INT 2
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6699
6627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 4
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 101
6673: PUSH
6674: LD_INT 102
6676: PUSH
6677: LD_INT 105
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: LD_INT 108
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9476
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6783
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9476
6783: LD_INT 4
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6875
6791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 8
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: LD_INT 16
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 101
6849: PUSH
6850: LD_INT 102
6852: PUSH
6853: LD_INT 105
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 108
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9476
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6983
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 8
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: LD_INT 16
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 25
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 105
6955: PUSH
6956: LD_INT 106
6958: PUSH
6959: LD_INT 108
6961: PUSH
6962: LD_INT 109
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 9476
6983: LD_INT 6
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7111
6991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 32
7050: PUSH
7051: LD_INT 36
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 105
7083: PUSH
7084: LD_INT 106
7086: PUSH
7087: LD_INT 108
7089: PUSH
7090: LD_INT 109
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 9476
7111: LD_INT 7
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7219
7119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 4
7130: PUSH
7131: LD_INT 5
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 11
7139: PUSH
7140: LD_INT 12
7142: PUSH
7143: LD_INT 15
7145: PUSH
7146: LD_INT 16
7148: PUSH
7149: LD_INT 20
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 112
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 9476
7219: LD_INT 8
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7355
7227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 6
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 105
7326: PUSH
7327: LD_INT 106
7329: PUSH
7330: LD_INT 108
7332: PUSH
7333: LD_INT 109
7335: PUSH
7336: LD_INT 112
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 9476
7355: LD_INT 9
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7499
7363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7364: LD_ADDR_VAR 0 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 4
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 7
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 28
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 36
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 103
7463: PUSH
7464: LD_INT 105
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: LD_INT 108
7472: PUSH
7473: LD_INT 109
7475: PUSH
7476: LD_INT 112
7478: PUSH
7479: LD_INT 114
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 9476
7499: LD_INT 10
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7691
7507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 7
7527: PUSH
7528: LD_INT 8
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: LD_INT 10
7536: PUSH
7537: LD_INT 11
7539: PUSH
7540: LD_INT 12
7542: PUSH
7543: LD_INT 13
7545: PUSH
7546: LD_INT 14
7548: PUSH
7549: LD_INT 15
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: LD_INT 17
7557: PUSH
7558: LD_INT 18
7560: PUSH
7561: LD_INT 19
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 23
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 28
7587: PUSH
7588: LD_INT 30
7590: PUSH
7591: LD_INT 31
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 36
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 9476
7691: LD_INT 11
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7891
7699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 6
7719: PUSH
7720: LD_INT 7
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: LD_INT 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 11
7734: PUSH
7735: LD_INT 12
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 28
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 31
7788: PUSH
7789: LD_INT 32
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 101
7833: PUSH
7834: LD_INT 102
7836: PUSH
7837: LD_INT 103
7839: PUSH
7840: LD_INT 104
7842: PUSH
7843: LD_INT 105
7845: PUSH
7846: LD_INT 106
7848: PUSH
7849: LD_INT 107
7851: PUSH
7852: LD_INT 108
7854: PUSH
7855: LD_INT 109
7857: PUSH
7858: LD_INT 110
7860: PUSH
7861: LD_INT 111
7863: PUSH
7864: LD_INT 112
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9476
7891: LD_INT 12
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8107
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 31
7994: PUSH
7995: LD_INT 32
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 36
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 9476
8107: LD_INT 13
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8311
8115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 14
8153: PUSH
8154: LD_INT 15
8156: PUSH
8157: LD_INT 16
8159: PUSH
8160: LD_INT 17
8162: PUSH
8163: LD_INT 18
8165: PUSH
8166: LD_INT 19
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 24
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 27
8192: PUSH
8193: LD_INT 28
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 33
8207: PUSH
8208: LD_INT 34
8210: PUSH
8211: LD_INT 36
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 104
8258: PUSH
8259: LD_INT 105
8261: PUSH
8262: LD_INT 106
8264: PUSH
8265: LD_INT 107
8267: PUSH
8268: LD_INT 108
8270: PUSH
8271: LD_INT 109
8273: PUSH
8274: LD_INT 110
8276: PUSH
8277: LD_INT 111
8279: PUSH
8280: LD_INT 112
8282: PUSH
8283: LD_INT 113
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 9476
8311: LD_INT 14
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8531
8319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 4
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: LD_INT 7
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: LD_INT 9
8351: PUSH
8352: LD_INT 10
8354: PUSH
8355: LD_INT 11
8357: PUSH
8358: LD_INT 12
8360: PUSH
8361: LD_INT 13
8363: PUSH
8364: LD_INT 14
8366: PUSH
8367: LD_INT 15
8369: PUSH
8370: LD_INT 16
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 28
8408: PUSH
8409: LD_INT 29
8411: PUSH
8412: LD_INT 30
8414: PUSH
8415: LD_INT 31
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 33
8423: PUSH
8424: LD_INT 34
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 102
8472: PUSH
8473: LD_INT 103
8475: PUSH
8476: LD_INT 104
8478: PUSH
8479: LD_INT 105
8481: PUSH
8482: LD_INT 106
8484: PUSH
8485: LD_INT 107
8487: PUSH
8488: LD_INT 108
8490: PUSH
8491: LD_INT 109
8493: PUSH
8494: LD_INT 110
8496: PUSH
8497: LD_INT 111
8499: PUSH
8500: LD_INT 112
8502: PUSH
8503: LD_INT 113
8505: PUSH
8506: LD_INT 114
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9476
8531: LD_INT 15
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8751
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9476
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8883
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 9476
8883: LD_INT 17
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9103
8891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_INT 7
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 9
8923: PUSH
8924: LD_INT 10
8926: PUSH
8927: LD_INT 11
8929: PUSH
8930: LD_INT 12
8932: PUSH
8933: LD_INT 13
8935: PUSH
8936: LD_INT 14
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 17
8947: PUSH
8948: LD_INT 18
8950: PUSH
8951: LD_INT 19
8953: PUSH
8954: LD_INT 20
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 26
8974: PUSH
8975: LD_INT 27
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 29
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 36
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 101
9041: PUSH
9042: LD_INT 102
9044: PUSH
9045: LD_INT 103
9047: PUSH
9048: LD_INT 104
9050: PUSH
9051: LD_INT 105
9053: PUSH
9054: LD_INT 106
9056: PUSH
9057: LD_INT 107
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 109
9065: PUSH
9066: LD_INT 110
9068: PUSH
9069: LD_INT 111
9071: PUSH
9072: LD_INT 112
9074: PUSH
9075: LD_INT 113
9077: PUSH
9078: LD_INT 114
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9476
9103: LD_INT 18
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9247
9111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 12
9134: PUSH
9135: LD_INT 15
9137: PUSH
9138: LD_INT 16
9140: PUSH
9141: LD_INT 20
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 34
9173: PUSH
9174: LD_INT 35
9176: PUSH
9177: LD_INT 36
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 103
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 115
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: ST_TO_ADDR
9245: GO 9476
9247: LD_INT 19
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9475
9255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 7
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: LD_INT 10
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: LD_INT 15
9305: PUSH
9306: LD_INT 16
9308: PUSH
9309: LD_INT 17
9311: PUSH
9312: LD_INT 18
9314: PUSH
9315: LD_INT 19
9317: PUSH
9318: LD_INT 20
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 24
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 29
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 31
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 33
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 36
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 101
9409: PUSH
9410: LD_INT 102
9412: PUSH
9413: LD_INT 103
9415: PUSH
9416: LD_INT 104
9418: PUSH
9419: LD_INT 105
9421: PUSH
9422: LD_INT 106
9424: PUSH
9425: LD_INT 107
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 109
9433: PUSH
9434: LD_INT 110
9436: PUSH
9437: LD_INT 111
9439: PUSH
9440: LD_INT 112
9442: PUSH
9443: LD_INT 113
9445: PUSH
9446: LD_INT 114
9448: PUSH
9449: LD_INT 115
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// end else
9476: GO 9695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 6
9500: PUSH
9501: LD_INT 7
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 17
9533: PUSH
9534: LD_INT 18
9536: PUSH
9537: LD_INT 19
9539: PUSH
9540: LD_INT 20
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 27
9563: PUSH
9564: LD_INT 28
9566: PUSH
9567: LD_INT 29
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 33
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 36
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 103
9637: PUSH
9638: LD_INT 104
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 107
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 110
9658: PUSH
9659: LD_INT 111
9661: PUSH
9662: LD_INT 112
9664: PUSH
9665: LD_INT 113
9667: PUSH
9668: LD_INT 114
9670: PUSH
9671: LD_INT 115
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: ST_TO_ADDR
// if result then
9695: LD_VAR 0 1
9699: IFFALSE 9988
// begin normal :=  ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_STRING 
9708: ST_TO_ADDR
// hardcore :=  ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// for i = 1 to normalCounter do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_EXP 16
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9834
// begin tmp := 0 ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_STRING 0
9742: ST_TO_ADDR
// if result [ 1 ] then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: IFFALSE 9816
// if result [ 1 ] [ 1 ] = i then
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PUSH
9766: LD_VAR 0 5
9770: EQUAL
9771: IFFALSE 9816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 3
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// tmp := 1 ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_STRING 1
9815: ST_TO_ADDR
// end ; normal := normal & tmp ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_VAR 0 2
9830: STR
9831: ST_TO_ADDR
// end ;
9832: GO 9732
9834: POP
9835: POP
// for i = 1 to hardcoreCounter do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_EXP 17
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9957
// begin tmp := 0 ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_STRING 0
9861: ST_TO_ADDR
// if result [ 2 ] then
9862: LD_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: IFFALSE 9939
// if result [ 2 ] [ 1 ] = 100 + i then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 2
9879: ARRAY
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PUSH
9885: LD_INT 100
9887: PUSH
9888: LD_VAR 0 5
9892: PLUS
9893: EQUAL
9894: IFFALSE 9939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 3
9925: PPUSH
9926: CALL_OW 1
9930: ST_TO_ADDR
// tmp := 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_STRING 1
9938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_VAR 0 2
9953: STR
9954: ST_TO_ADDR
// end ;
9955: GO 9851
9957: POP
9958: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9959: LD_STRING getStreamItemsFromMission("
9961: PUSH
9962: LD_VAR 0 3
9966: STR
9967: PUSH
9968: LD_STRING ","
9970: STR
9971: PUSH
9972: LD_VAR 0 4
9976: STR
9977: PUSH
9978: LD_STRING ")
9980: STR
9981: PPUSH
9982: CALL_OW 559
// end else
9986: GO 9995
// ToLua ( getStreamItemsFromMission("","") ) ;
9988: LD_STRING getStreamItemsFromMission("","")
9990: PPUSH
9991: CALL_OW 559
// end ;
9995: LD_VAR 0 1
9999: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10000: LD_EXP 15
10004: PUSH
10005: LD_EXP 20
10009: AND
10010: IFFALSE 10134
10012: GO 10014
10014: DISABLE
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// begin enable ;
10019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 45
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 47
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if not tmp then
10096: LD_VAR 0 2
10100: NOT
10101: IFFALSE 10105
// exit ;
10103: GO 10134
// for i in tmp do
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_VAR 0 2
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10132
// begin SetLives ( i , 0 ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 234
// end ;
10130: GO 10115
10132: POP
10133: POP
// end ;
10134: PPOPN 2
10136: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10137: LD_EXP 15
10141: PUSH
10142: LD_EXP 21
10146: AND
10147: IFFALSE 10231
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin enable ;
10156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_OWVAR 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 2
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10231
// for i in tmp do
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: FOR_IN
10213: IFFALSE 10229
// begin SetLives ( i , 0 ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 0
10222: PPUSH
10223: CALL_OW 234
// end ;
10227: GO 10212
10229: POP
10230: POP
// end ;
10231: PPOPN 2
10233: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10234: LD_EXP 15
10238: PUSH
10239: LD_EXP 18
10243: AND
10244: IFFALSE 10337
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
// begin enable ;
10252: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10253: LD_ADDR_VAR 0 1
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_OWVAR 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10335
// begin SetClass ( i , 1 ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: GO 10318
10335: POP
10336: POP
// end ;
10337: PPOPN 1
10339: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10340: LD_EXP 15
10344: PUSH
10345: LD_EXP 19
10349: AND
10350: PUSH
10351: LD_OWVAR 65
10355: PUSH
10356: LD_INT 7
10358: LESS
10359: AND
10360: IFFALSE 10374
10362: GO 10364
10364: DISABLE
// begin enable ;
10365: ENABLE
// game_speed := 7 ;
10366: LD_ADDR_OWVAR 65
10370: PUSH
10371: LD_INT 7
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10375: LD_EXP 15
10379: PUSH
10380: LD_EXP 22
10384: AND
10385: IFFALSE 10587
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 81
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10587
// if tmp > 5 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 5
10447: GREATER
10448: IFFALSE 10460
// k := 5 else
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: ST_TO_ADDR
10458: GO 10470
// k := tmp ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_VAR 0 3
10469: ST_TO_ADDR
// for i := 1 to k do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10585
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_VAR 0 1
10497: ARRAY
10498: PPUSH
10499: LD_VAR 0 1
10503: PUSH
10504: LD_INT 4
10506: MOD
10507: PUSH
10508: LD_INT 1
10510: PLUS
10511: PPUSH
10512: CALL_OW 259
10516: PUSH
10517: LD_INT 10
10519: LESS
10520: IFFALSE 10583
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 1
10531: ARRAY
10532: PPUSH
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 4
10540: MOD
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_VAR 0 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 4
10564: MOD
10565: PUSH
10566: LD_INT 1
10568: PLUS
10569: PPUSH
10570: CALL_OW 259
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PPUSH
10579: CALL_OW 237
10583: GO 10485
10585: POP
10586: POP
// end ;
10587: PPOPN 3
10589: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10590: LD_EXP 15
10594: PUSH
10595: LD_EXP 23
10599: AND
10600: IFFALSE 10620
10602: GO 10604
10604: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10605: LD_INT 4
10607: PPUSH
10608: LD_OWVAR 2
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 324
10620: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10621: LD_EXP 15
10625: PUSH
10626: LD_EXP 52
10630: AND
10631: IFFALSE 10651
10633: GO 10635
10635: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10636: LD_INT 19
10638: PPUSH
10639: LD_OWVAR 2
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 324
10651: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10652: LD_EXP 15
10656: PUSH
10657: LD_EXP 24
10661: AND
10662: IFFALSE 10764
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
// begin enable ;
10671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 34
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 34
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10767: LD_EXP 15
10771: PUSH
10772: LD_EXP 25
10776: AND
10777: IFFALSE 10797
10779: GO 10781
10781: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10782: LD_INT 32
10784: PPUSH
10785: LD_OWVAR 2
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 324
10797: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10798: LD_EXP 15
10802: PUSH
10803: LD_EXP 26
10807: AND
10808: IFFALSE 10989
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 33
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 2
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10989
// side := 0 ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10933
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10887: LD_OWVAR 2
10891: PUSH
10892: LD_VAR 0 1
10896: NONEQUAL
10897: PUSH
10898: LD_OWVAR 2
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 81
10912: PUSH
10913: LD_INT 2
10915: EQUAL
10916: AND
10917: IFFALSE 10931
// begin side := i ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// break ;
10929: GO 10933
// end ;
10931: GO 10884
10933: POP
10934: POP
// if not side then
10935: LD_VAR 0 3
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 10989
// for i := 1 to tmp do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: FOR_TO
10960: IFFALSE 10987
// if Prob ( 60 ) then
10962: LD_INT 60
10964: PPUSH
10965: CALL_OW 13
10969: IFFALSE 10985
// SetSide ( i , side ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 235
10985: GO 10959
10987: POP
10988: POP
// end ;
10989: PPOPN 3
10991: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10992: LD_EXP 15
10996: PUSH
10997: LD_EXP 28
11001: AND
11002: IFFALSE 11121
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11119
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 257
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: IN
11095: IFFALSE 11117
// SetClass ( un , rand ( 1 , 4 ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 336
11117: GO 11064
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11124: LD_EXP 15
11128: PUSH
11129: LD_EXP 27
11133: AND
11134: IFFALSE 11213
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_OWVAR 2
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 12
11204: ARRAY
11205: PPUSH
11206: LD_INT 100
11208: PPUSH
11209: CALL_OW 234
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 29
11225: AND
11226: IFFALSE 11324
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11324
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 3000
11311: PPUSH
11312: LD_INT 9000
11314: PPUSH
11315: CALL_OW 12
11319: PPUSH
11320: CALL_OW 492
// end ;
11324: PPOPN 1
11326: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11327: LD_EXP 15
11331: PUSH
11332: LD_EXP 30
11336: AND
11337: IFFALSE 11357
11339: GO 11341
11341: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11342: LD_INT 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 324
11357: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11358: LD_EXP 15
11362: PUSH
11363: LD_EXP 31
11367: AND
11368: IFFALSE 11451
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// if not tmp then
11413: LD_VAR 0 2
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11451
// for i in tmp do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_VAR 0 2
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetBLevel ( i , 10 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 10
11442: PPUSH
11443: CALL_OW 241
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 2
11453: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11454: LD_EXP 15
11458: PUSH
11459: LD_EXP 32
11463: AND
11464: IFFALSE 11575
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_OWVAR 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 25
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 3
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11575
// un := tmp [ rand ( 1 , tmp ) ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 12
11541: ARRAY
11542: ST_TO_ADDR
// if Crawls ( un ) then
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 318
11552: IFFALSE 11563
// ComWalk ( un ) ;
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 5
11570: PPUSH
11571: CALL_OW 336
// end ;
11575: PPOPN 3
11577: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11578: LD_EXP 15
11582: PUSH
11583: LD_EXP 33
11587: AND
11588: PUSH
11589: LD_OWVAR 67
11593: PUSH
11594: LD_INT 3
11596: LESS
11597: AND
11598: IFFALSE 11617
11600: GO 11602
11602: DISABLE
// Difficulty := Difficulty + 1 ;
11603: LD_ADDR_OWVAR 67
11607: PUSH
11608: LD_OWVAR 67
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
11617: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11618: LD_EXP 15
11622: PUSH
11623: LD_EXP 34
11627: AND
11628: IFFALSE 11731
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin for i := 1 to 5 do
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 5
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11729
// begin uc_nation := nation_nature ;
11652: LD_ADDR_OWVAR 21
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// uc_side := 0 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11668: LD_ADDR_OWVAR 29
11672: PUSH
11673: LD_INT 12
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
// hc_agressivity := 20 ;
11683: LD_ADDR_OWVAR 35
11687: PUSH
11688: LD_INT 20
11690: ST_TO_ADDR
// hc_class := class_tiger ;
11691: LD_ADDR_OWVAR 28
11695: PUSH
11696: LD_INT 14
11698: ST_TO_ADDR
// hc_gallery :=  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// hc_name :=  ;
11707: LD_ADDR_OWVAR 26
11711: PUSH
11712: LD_STRING 
11714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11715: CALL_OW 44
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 51
// end ;
11727: GO 11649
11729: POP
11730: POP
// end ;
11731: PPOPN 1
11733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11734: LD_EXP 15
11738: PUSH
11739: LD_EXP 35
11743: AND
11744: IFFALSE 11753
11746: GO 11748
11748: DISABLE
// StreamSibBomb ;
11749: CALL 11754 0 0
11753: END
// export function StreamSibBomb ; var i , x , y ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// result := false ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// for i := 1 to 16 do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 16
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11981
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 20
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 40
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 60
11806: PUSH
11807: LD_INT 70
11809: PUSH
11810: LD_INT 80
11812: PUSH
11813: LD_INT 90
11815: PUSH
11816: LD_INT 100
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 120
11824: PUSH
11825: LD_INT 130
11827: PUSH
11828: LD_INT 140
11830: PUSH
11831: LD_INT 150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 15
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_INT 10
11870: PUSH
11871: LD_INT 20
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 40
11879: PUSH
11880: LD_INT 50
11882: PUSH
11883: LD_INT 60
11885: PUSH
11886: LD_INT 70
11888: PUSH
11889: LD_INT 80
11891: PUSH
11892: LD_INT 90
11894: PUSH
11895: LD_INT 100
11897: PUSH
11898: LD_INT 110
11900: PUSH
11901: LD_INT 120
11903: PUSH
11904: LD_INT 130
11906: PUSH
11907: LD_INT 140
11909: PUSH
11910: LD_INT 150
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 15
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if ValidHex ( x , y ) then
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 488
11956: IFFALSE 11979
// begin result := [ x , y ] ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// break ;
11977: GO 11981
// end ; end ;
11979: GO 11781
11981: POP
11982: POP
// if result then
11983: LD_VAR 0 1
11987: IFFALSE 12047
// begin ToLua ( playSibBomb() ) ;
11989: LD_STRING playSibBomb()
11991: PPUSH
11992: CALL_OW 559
// wait ( 0 0$14 ) ;
11996: LD_INT 490
11998: PPUSH
11999: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PPUSH
12021: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 429
// end ; end ;
12047: LD_VAR 0 1
12051: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12052: LD_EXP 15
12056: PUSH
12057: LD_EXP 37
12061: AND
12062: IFFALSE 12074
12064: GO 12066
12066: DISABLE
// YouLost (  ) ;
12067: LD_STRING 
12069: PPUSH
12070: CALL_OW 104
12074: END
// every 0 0$1 trigger StreamModeActive and sFog do
12075: LD_EXP 15
12079: PUSH
12080: LD_EXP 36
12084: AND
12085: IFFALSE 12099
12087: GO 12089
12089: DISABLE
// FogOff ( your_side ) ;
12090: LD_OWVAR 2
12094: PPUSH
12095: CALL_OW 344
12099: END
// every 0 0$1 trigger StreamModeActive and sSun do
12100: LD_EXP 15
12104: PUSH
12105: LD_EXP 38
12109: AND
12110: IFFALSE 12138
12112: GO 12114
12114: DISABLE
// begin solar_recharge_percent := 0 ;
12115: LD_ADDR_OWVAR 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12123: LD_INT 10500
12125: PPUSH
12126: CALL_OW 67
// solar_recharge_percent := 100 ;
12130: LD_ADDR_OWVAR 79
12134: PUSH
12135: LD_INT 100
12137: ST_TO_ADDR
// end ;
12138: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12139: LD_EXP 15
12143: PUSH
12144: LD_EXP 39
12148: AND
12149: IFFALSE 12388
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
12158: PPUSH
// begin tmp := [ ] ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// for i := 1 to 6 do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12285
// begin uc_nation := nation_nature ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 0
12189: ST_TO_ADDR
// uc_side := 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12198: LD_ADDR_OWVAR 29
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: ST_TO_ADDR
// hc_agressivity := 20 ;
12213: LD_ADDR_OWVAR 35
12217: PUSH
12218: LD_INT 20
12220: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 17
12228: ST_TO_ADDR
// hc_gallery :=  ;
12229: LD_ADDR_OWVAR 33
12233: PUSH
12234: LD_STRING 
12236: ST_TO_ADDR
// hc_name :=  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// un := CreateHuman ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: CALL_OW 44
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 51
// tmp := tmp ^ un ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: ADD
12282: ST_TO_ADDR
// end ;
12283: GO 12179
12285: POP
12286: POP
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// for un in tmp do
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12379
// begin if IsDead ( un ) then
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL_OW 301
12316: IFFALSE 12336
// begin tmp := tmp diff un ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_VAR 0 2
12332: DIFF
12333: ST_TO_ADDR
// continue ;
12334: GO 12304
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12336: LD_VAR 0 2
12340: PPUSH
12341: LD_INT 3
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_VAR 0 2
12367: PPUSH
12368: CALL_OW 74
12372: PPUSH
12373: CALL_OW 115
// end ;
12377: GO 12304
12379: POP
12380: POP
// until not tmp ;
12381: LD_VAR 0 3
12385: NOT
12386: IFFALSE 12287
// end ;
12388: PPOPN 3
12390: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12391: LD_EXP 15
12395: PUSH
12396: LD_EXP 40
12400: AND
12401: IFFALSE 12455
12403: GO 12405
12405: DISABLE
// begin ToLua ( displayTroll(); ) ;
12406: LD_STRING displayTroll();
12408: PPUSH
12409: CALL_OW 559
// wait ( 3 3$00 ) ;
12413: LD_INT 6300
12415: PPUSH
12416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12420: LD_STRING hideTroll();
12422: PPUSH
12423: CALL_OW 559
// wait ( 1 1$00 ) ;
12427: LD_INT 2100
12429: PPUSH
12430: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12434: LD_STRING displayTroll();
12436: PPUSH
12437: CALL_OW 559
// wait ( 1 1$00 ) ;
12441: LD_INT 2100
12443: PPUSH
12444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12448: LD_STRING hideTroll();
12450: PPUSH
12451: CALL_OW 559
// end ;
12455: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12456: LD_EXP 15
12460: PUSH
12461: LD_EXP 41
12465: AND
12466: IFFALSE 12529
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin p := 0 ;
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// repeat game_speed := 1 ;
12482: LD_ADDR_OWVAR 65
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12490: LD_INT 35
12492: PPUSH
12493: CALL_OW 67
// p := p + 1 ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// until p >= 60 ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 60
12518: GREATEREQUAL
12519: IFFALSE 12482
// game_speed := 4 ;
12521: LD_ADDR_OWVAR 65
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// end ;
12529: PPOPN 1
12531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 42
12541: AND
12542: IFFALSE 12688
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_OWVAR 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not depot then
12605: LD_VAR 0 1
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12643: LD_VAR 0 2
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 3
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12691: LD_EXP 15
12695: PUSH
12696: LD_EXP 43
12700: AND
12701: IFFALSE 12798
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 1
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 12
12789: ARRAY
12790: PPUSH
12791: LD_INT 200
12793: PPUSH
12794: CALL_OW 234
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12801: LD_EXP 15
12805: PUSH
12806: LD_EXP 44
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 60
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12893: LD_EXP 15
12897: PUSH
12898: LD_EXP 45
12902: AND
12903: IFFALSE 13002
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 61
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13002
// for i in tmp do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13000
// if IsControledBy ( i ) then
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 312
12987: IFFALSE 12998
// ComUnlink ( i ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: CALL_OW 136
12998: GO 12975
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13005: LD_EXP 15
13009: PUSH
13010: LD_EXP 46
13014: AND
13015: IFFALSE 13155
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
// begin ToLua ( displayPowell(); ) ;
13024: LD_STRING displayPowell();
13026: PPUSH
13027: CALL_OW 559
// uc_side := 0 ;
13031: LD_ADDR_OWVAR 20
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_nation := 2 ;
13039: LD_ADDR_OWVAR 21
13043: PUSH
13044: LD_INT 2
13046: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13047: LD_ADDR_OWVAR 37
13051: PUSH
13052: LD_INT 14
13054: ST_TO_ADDR
// vc_engine := engine_siberite ;
13055: LD_ADDR_OWVAR 39
13059: PUSH
13060: LD_INT 3
13062: ST_TO_ADDR
// vc_control := control_apeman ;
13063: LD_ADDR_OWVAR 38
13067: PUSH
13068: LD_INT 5
13070: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_INT 29
13078: ST_TO_ADDR
// un := CreateVehicle ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13101: LD_INT 35
13103: PPUSH
13104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13108: LD_VAR 0 2
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 74
13139: PPUSH
13140: CALL_OW 115
// until IsDead ( un ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: CALL_OW 301
13153: IFFALSE 13101
// end ;
13155: PPOPN 2
13157: END
// every 0 0$1 trigger StreamModeActive and sStu do
13158: LD_EXP 15
13162: PUSH
13163: LD_EXP 54
13167: AND
13168: IFFALSE 13184
13170: GO 13172
13172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13173: LD_STRING displayStucuk();
13175: PPUSH
13176: CALL_OW 559
// ResetFog ;
13180: CALL_OW 335
// end ;
13184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13185: LD_EXP 15
13189: PUSH
13190: LD_EXP 47
13194: AND
13195: IFFALSE 13336
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: ST_TO_ADDR
// if not tmp then
13240: LD_VAR 0 2
13244: NOT
13245: IFFALSE 13249
// exit ;
13247: GO 13336
// un := tmp [ rand ( 1 , tmp ) ] ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PPUSH
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 12
13271: ARRAY
13272: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_OWVAR 3
13294: PUSH
13295: LD_VAR 0 1
13299: DIFF
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 74
13310: PPUSH
13311: CALL_OW 115
// wait ( 0 0$20 ) ;
13315: LD_INT 700
13317: PPUSH
13318: CALL_OW 67
// SetSide ( un , your_side ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_OWVAR 2
13331: PPUSH
13332: CALL_OW 235
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13339: LD_EXP 15
13343: PUSH
13344: LD_EXP 48
13348: AND
13349: IFFALSE 13455
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_OWVAR 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not depot then
13411: LD_VAR 0 1
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13455
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 251
13447: PPUSH
13448: LD_INT 70
13450: PPUSH
13451: CALL_OW 495
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13458: LD_EXP 15
13462: PUSH
13463: LD_EXP 49
13467: AND
13468: IFFALSE 13679
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 5
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13679
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13677
// begin d := rand ( 0 , 5 ) ;
13538: LD_ADDR_VAR 0 4
13542: PUSH
13543: LD_INT 0
13545: PPUSH
13546: LD_INT 5
13548: PPUSH
13549: CALL_OW 12
13553: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13554: LD_ADDR_VAR 0 2
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 250
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: LD_INT 12
13579: PPUSH
13580: CALL_OW 12
13584: PPUSH
13585: CALL_OW 272
13589: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 251
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: LD_INT 12
13615: PPUSH
13616: CALL_OW 12
13620: PPUSH
13621: CALL_OW 273
13625: ST_TO_ADDR
// if ValidHex ( x , y ) then
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 488
13640: IFFALSE 13675
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_INT 6
13662: PPUSH
13663: CALL_OW 12
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 483
// end ;
13675: GO 13535
13677: POP
13678: POP
// end ;
13679: PPOPN 5
13681: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13682: LD_EXP 15
13686: PUSH
13687: LD_EXP 50
13691: AND
13692: IFFALSE 13786
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_OWVAR 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: ST_TO_ADDR
// if not tmp then
13748: LD_VAR 0 2
13752: NOT
13753: IFFALSE 13757
// exit ;
13755: GO 13786
// for i in tmp do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13784
// SetFuel ( i , 0 ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 240
13782: GO 13767
13784: POP
13785: POP
// end ;
13786: PPOPN 2
13788: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 51
13798: AND
13799: IFFALSE 13865
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 29
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13865
// DestroyUnit ( tmp [ 1 ] ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: CALL_OW 65
// end ;
13865: PPOPN 1
13867: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 53
13877: AND
13878: IFFALSE 14007
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin uc_side := 0 ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// uc_nation := nation_arabian ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_INT 2
13901: ST_TO_ADDR
// hc_gallery :=  ;
13902: LD_ADDR_OWVAR 33
13906: PUSH
13907: LD_STRING 
13909: ST_TO_ADDR
// hc_name :=  ;
13910: LD_ADDR_OWVAR 26
13914: PUSH
13915: LD_STRING 
13917: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 11
13923: PPUSH
13924: LD_INT 10
13926: PPUSH
13927: CALL_OW 380
// un := CreateHuman ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: CALL_OW 44
13940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 74
13991: PPUSH
13992: CALL_OW 115
// until IsDead ( un ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 301
14005: IFFALSE 13953
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14010: LD_EXP 15
14014: PUSH
14015: LD_EXP 55
14019: AND
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14025: LD_STRING earthquake(getX(game), 0, 32)
14027: PPUSH
14028: CALL_OW 559
14032: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14033: LD_EXP 15
14037: PUSH
14038: LD_EXP 56
14042: AND
14043: IFFALSE 14134
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 33
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if not tmp then
14099: LD_VAR 0 1
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14108: LD_VAR 0 1
14112: PUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 12
14125: ARRAY
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 234
// end ;
14134: PPOPN 1
14136: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14137: LD_EXP 15
14141: PUSH
14142: LD_EXP 57
14146: AND
14147: IFFALSE 14288
14149: GO 14151
14151: DISABLE
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// if not tmp then
14193: LD_VAR 0 3
14197: NOT
14198: IFFALSE 14202
// exit ;
14200: GO 14288
// un := tmp [ rand ( 1 , tmp ) ] ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// if Crawls ( un ) then
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 318
14235: IFFALSE 14246
// ComWalk ( un ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 9
14253: PPUSH
14254: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14258: LD_INT 28
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14273: LD_INT 29
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ;
14288: PPOPN 3
14290: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14291: LD_EXP 15
14295: PUSH
14296: LD_EXP 58
14300: AND
14301: IFFALSE 14412
14303: GO 14305
14305: DISABLE
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if not tmp then
14347: LD_VAR 0 3
14351: NOT
14352: IFFALSE 14356
// exit ;
14354: GO 14412
// un := tmp [ rand ( 1 , tmp ) ] ;
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 12
14378: ARRAY
14379: ST_TO_ADDR
// if Crawls ( un ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 318
14389: IFFALSE 14400
// ComWalk ( un ) ;
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_INT 8
14407: PPUSH
14408: CALL_OW 336
// end ;
14412: PPOPN 3
14414: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14415: LD_EXP 15
14419: PUSH
14420: LD_EXP 59
14424: AND
14425: IFFALSE 14569
14427: GO 14429
14429: DISABLE
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 51
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 34
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14569
// for i in tmp do
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14567
// if GetCargo ( i , mat_artifact ) = 0 then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 4
14539: PPUSH
14540: CALL_OW 289
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14565
// SetCargo ( i , mat_siberit , 100 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 3
14557: PPUSH
14558: LD_INT 100
14560: PPUSH
14561: CALL_OW 290
14565: GO 14529
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14572: LD_EXP 15
14576: PUSH
14577: LD_EXP 60
14581: AND
14582: IFFALSE 14765
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// if not tmp then
14613: LD_VAR 0 2
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14765
// for i := 1 to 2 do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 2
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14763
// begin uc_side := your_side ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_OWVAR 2
14647: ST_TO_ADDR
// uc_nation := nation_american ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// vc_chassis := us_morphling ;
14656: LD_ADDR_OWVAR 37
14660: PUSH
14661: LD_INT 5
14663: ST_TO_ADDR
// vc_engine := engine_siberite ;
14664: LD_ADDR_OWVAR 39
14668: PUSH
14669: LD_INT 3
14671: ST_TO_ADDR
// vc_control := control_computer ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_INT 3
14679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14680: LD_ADDR_OWVAR 40
14684: PUSH
14685: LD_INT 10
14687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: CALL_OW 310
14701: NOT
14702: IFFALSE 14749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14704: CALL_OW 45
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 250
14722: PPUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 50
14747: GO 14761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14749: CALL_OW 45
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 51
// end ;
14761: GO 14635
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14768: LD_EXP 15
14772: PUSH
14773: LD_EXP 61
14777: AND
14778: IFFALSE 15000
14780: GO 14782
14782: DISABLE
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15000
// s1 := rand ( 1 , 4 ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 4
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14870: LD_ADDR_VAR 0 4
14874: PUSH
14875: LD_VAR 0 6
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 2
14888: PPUSH
14889: CALL_OW 259
14893: ST_TO_ADDR
// if s1 = 1 then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_INT 1
14901: EQUAL
14902: IFFALSE 14922
// s2 := rand ( 2 , 4 ) else
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_INT 2
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
14920: GO 14930
// s2 := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 6
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: CALL_OW 259
14953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14954: LD_VAR 0 6
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 5
14972: PPUSH
14973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14977: LD_VAR 0 6
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: CALL_OW 237
// end ;
15000: PPOPN 6
15002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15003: LD_EXP 15
15007: PUSH
15008: LD_EXP 62
15012: AND
15013: IFFALSE 15092
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 1
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 234
// end ;
15092: PPOPN 1
15094: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15095: LD_EXP 15
15099: PUSH
15100: LD_EXP 63
15104: AND
15105: IFFALSE 15217
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: LD_INT 26
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15217
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 2
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15215
// SetLives ( i , 1 ) ;
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 234
15213: GO 15198
15215: POP
15216: POP
// end ;
15217: PPOPN 2
15219: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 64
15229: AND
15230: IFFALSE 15504
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin i := rand ( 1 , 7 ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 7
15250: PPUSH
15251: CALL_OW 12
15255: ST_TO_ADDR
// case i of 1 :
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15279
15269: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15270: LD_STRING earthquake(getX(game), 0, 32)
15272: PPUSH
15273: CALL_OW 559
15277: GO 15504
15279: LD_INT 2
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15301
15287: POP
// begin ToLua ( displayStucuk(); ) ;
15288: LD_STRING displayStucuk();
15290: PPUSH
15291: CALL_OW 559
// ResetFog ;
15295: CALL_OW 335
// end ; 3 :
15299: GO 15504
15301: LD_INT 3
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15413
15309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15504
// un := tmp [ rand ( 1 , tmp ) ] ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// if Crawls ( un ) then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 318
15388: IFFALSE 15399
// ComWalk ( un ) ;
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 8
15406: PPUSH
15407: CALL_OW 336
// end ; 4 :
15411: GO 15504
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15482
15421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_OWVAR 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 29
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 2
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15504
// DestroyUnit ( tmp [ 1 ] ) ;
15467: LD_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 65
// end ; 5 .. 7 :
15480: GO 15504
15482: LD_INT 5
15484: DOUBLE
15485: GREATEREQUAL
15486: IFFALSE 15494
15488: LD_INT 7
15490: DOUBLE
15491: LESSEQUAL
15492: IFTRUE 15496
15494: GO 15503
15496: POP
// StreamSibBomb ; end ;
15497: CALL 11754 0 0
15501: GO 15504
15503: POP
// end ;
15504: PPOPN 3
15506: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15507: LD_EXP 15
15511: PUSH
15512: LD_EXP 65
15516: AND
15517: IFFALSE 15673
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
// if not tmp then
15581: LD_VAR 0 2
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15673
// p := 0 ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// p := p + 1 ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 1
15617: PLUS
15618: ST_TO_ADDR
// for i in tmp do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: FOR_IN
15630: IFFALSE 15661
// if GetLives ( i ) < 1000 then
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 256
15641: PUSH
15642: LD_INT 1000
15644: LESS
15645: IFFALSE 15659
// SetLives ( i , 1000 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 1000
15654: PPUSH
15655: CALL_OW 234
15659: GO 15629
15661: POP
15662: POP
// until p > 20 ;
15663: LD_VAR 0 3
15667: PUSH
15668: LD_INT 20
15670: GREATER
15671: IFFALSE 15598
// end ;
15673: PPOPN 3
15675: END
// every 0 0$1 trigger StreamModeActive and sTime do
15676: LD_EXP 15
15680: PUSH
15681: LD_EXP 66
15685: AND
15686: IFFALSE 15721
15688: GO 15690
15690: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15691: LD_INT 28
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15706: LD_INT 30
15708: PPUSH
15709: LD_OWVAR 2
15713: PPUSH
15714: LD_INT 2
15716: PPUSH
15717: CALL_OW 322
// end ;
15721: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15722: LD_EXP 15
15726: PUSH
15727: LD_EXP 67
15731: AND
15732: IFFALSE 15853
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_OWVAR 2
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15853
// for i in tmp do
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: FOR_IN
15815: IFFALSE 15851
// begin if Crawls ( i ) then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( i ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 138
// SetClass ( i , 2 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: GO 15814
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15856: LD_EXP 15
15860: PUSH
15861: LD_EXP 68
15865: AND
15866: IFFALSE 16147
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 9
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15894: LD_INT 9
15896: PPUSH
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 343
// uc_side := 9 ;
15906: LD_ADDR_OWVAR 20
15910: PUSH
15911: LD_INT 9
15913: ST_TO_ADDR
// uc_nation := 2 ;
15914: LD_ADDR_OWVAR 21
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// hc_name := Dark Warrior ;
15922: LD_ADDR_OWVAR 26
15926: PUSH
15927: LD_STRING Dark Warrior
15929: ST_TO_ADDR
// hc_gallery :=  ;
15930: LD_ADDR_OWVAR 33
15934: PUSH
15935: LD_STRING 
15937: ST_TO_ADDR
// hc_noskilllimit := true ;
15938: LD_ADDR_OWVAR 76
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15946: LD_ADDR_OWVAR 31
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// un := CreateHuman ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: CALL_OW 44
15978: ST_TO_ADDR
// hc_noskilllimit := false ;
15979: LD_ADDR_OWVAR 76
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 51
// p := 0 ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16007: LD_INT 35
16009: PPUSH
16010: CALL_OW 67
// p := p + 1 ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PLUS
16027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL_OW 256
16037: PUSH
16038: LD_INT 1000
16040: LESS
16041: IFFALSE 16055
// SetLives ( un , 1000 ) ;
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1000
16050: PPUSH
16051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 81
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 91
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 74
16106: PPUSH
16107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 60
16118: GREATER
16119: PUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 301
16129: OR
16130: IFFALSE 16007
// if un then
16132: LD_VAR 0 3
16136: IFFALSE 16147
// RemoveUnit ( un ) ;
16138: LD_VAR 0 3
16142: PPUSH
16143: CALL_OW 64
// end ;
16147: PPOPN 3
16149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16150: LD_INT 0
16152: PPUSH
// case cmd of 301 :
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 301
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16198
16166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 7
16176: PPUSH
16177: LD_VAR 0 8
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 17399 0 5
16196: GO 16319
16198: LD_INT 302
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16243
16206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16207: LD_VAR 0 6
16211: PPUSH
16212: LD_VAR 0 7
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 9
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 17490 0 6
16241: GO 16319
16243: LD_INT 303
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16288
16251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16252: LD_VAR 0 6
16256: PPUSH
16257: LD_VAR 0 7
16261: PPUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: CALL 16324 0 6
16286: GO 16319
16288: LD_INT 304
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16318
16296: POP
// hHackTeleport ( unit , x , y ) ; end ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL 18083 0 3
16316: GO 16319
16318: POP
// end ;
16319: LD_VAR 0 12
16323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: LESS
16336: PUSH
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 3
16344: GREATER
16345: OR
16346: PUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: LD_VAR 0 6
16356: PPUSH
16357: CALL_OW 428
16361: OR
16362: IFFALSE 16366
// exit ;
16364: GO 17086
// uc_side := your_side ;
16366: LD_ADDR_OWVAR 20
16370: PUSH
16371: LD_OWVAR 2
16375: ST_TO_ADDR
// uc_nation := nation ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_VAR 0 1
16385: ST_TO_ADDR
// bc_level = 1 ;
16386: LD_ADDR_OWVAR 43
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// case btype of 1 :
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_depot ; 2 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
16416: GO 17030
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_warehouse ; 3 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
16435: GO 17030
16437: LD_INT 3
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16456
16445: POP
// bc_type := b_lab ; 4 .. 9 :
16446: LD_ADDR_OWVAR 42
16450: PUSH
16451: LD_INT 6
16453: ST_TO_ADDR
16454: GO 17030
16456: LD_INT 4
16458: DOUBLE
16459: GREATEREQUAL
16460: IFFALSE 16468
16462: LD_INT 9
16464: DOUBLE
16465: LESSEQUAL
16466: IFTRUE 16470
16468: GO 16522
16470: POP
// begin bc_type := b_lab_half ;
16471: LD_ADDR_OWVAR 42
16475: PUSH
16476: LD_INT 7
16478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16479: LD_ADDR_OWVAR 44
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 13
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 3
16517: MINUS
16518: ARRAY
16519: ST_TO_ADDR
// end ; 10 .. 13 :
16520: GO 17030
16522: LD_INT 10
16524: DOUBLE
16525: GREATEREQUAL
16526: IFFALSE 16534
16528: LD_INT 13
16530: DOUBLE
16531: LESSEQUAL
16532: IFTRUE 16536
16534: GO 16613
16536: POP
// begin bc_type := b_lab_full ;
16537: LD_ADDR_OWVAR 42
16541: PUSH
16542: LD_INT 8
16544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16545: LD_ADDR_OWVAR 44
16549: PUSH
16550: LD_INT 10
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 14
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 9
16575: MINUS
16576: ARRAY
16577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16578: LD_ADDR_OWVAR 45
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 15
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 9
16608: MINUS
16609: ARRAY
16610: ST_TO_ADDR
// end ; 14 :
16611: GO 17030
16613: LD_INT 14
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_workshop ; 15 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 2
16629: ST_TO_ADDR
16630: GO 17030
16632: LD_INT 15
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_factory ; 16 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 3
16648: ST_TO_ADDR
16649: GO 17030
16651: LD_INT 16
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16670
16659: POP
// bc_type := b_ext_gun ; 17 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 17
16667: ST_TO_ADDR
16668: GO 17030
16670: LD_INT 17
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16706
16678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16679: LD_ADDR_OWVAR 42
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 19
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: ST_TO_ADDR
16704: GO 17030
16706: LD_INT 18
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radar ; 19 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 20
16722: ST_TO_ADDR
16723: GO 17030
16725: LD_INT 19
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_radio ; 20 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 22
16741: ST_TO_ADDR
16742: GO 17030
16744: LD_INT 20
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_siberium ; 21 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 21
16760: ST_TO_ADDR
16761: GO 17030
16763: LD_INT 21
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_computer ; 22 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 24
16779: ST_TO_ADDR
16780: GO 17030
16782: LD_INT 22
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_track ; 23 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 16
16798: ST_TO_ADDR
16799: GO 17030
16801: LD_INT 23
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_ext_laser ; 24 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 25
16817: ST_TO_ADDR
16818: GO 17030
16820: LD_INT 24
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_control_tower ; 25 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 36
16836: ST_TO_ADDR
16837: GO 17030
16839: LD_INT 25
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_breastwork ; 26 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 31
16855: ST_TO_ADDR
16856: GO 17030
16858: LD_INT 26
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_bunker ; 27 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 32
16874: ST_TO_ADDR
16875: GO 17030
16877: LD_INT 27
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_turret ; 28 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 33
16893: ST_TO_ADDR
16894: GO 17030
16896: LD_INT 28
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_armoury ; 29 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 4
16912: ST_TO_ADDR
16913: GO 17030
16915: LD_INT 29
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_barracks ; 30 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 5
16931: ST_TO_ADDR
16932: GO 17030
16934: LD_INT 30
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_solar_power ; 31 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 27
16950: ST_TO_ADDR
16951: GO 17030
16953: LD_INT 31
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_oil_power ; 32 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 26
16969: ST_TO_ADDR
16970: GO 17030
16972: LD_INT 32
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_siberite_power ; 33 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 28
16988: ST_TO_ADDR
16989: GO 17030
16991: LD_INT 33
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_oil_mine ; 34 :
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 29
17007: ST_TO_ADDR
17008: GO 17030
17010: LD_INT 34
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17029
17018: POP
// bc_type := b_siberite_mine ; end ;
17019: LD_ADDR_OWVAR 42
17023: PUSH
17024: LD_INT 30
17026: ST_TO_ADDR
17027: GO 17030
17029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: CALL_OW 47
17054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17055: LD_OWVAR 42
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: IN
17070: IFFALSE 17086
// PlaceWeaponTurret ( b , weapon ) ;
17072: LD_VAR 0 8
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 431
// end ;
17086: LD_VAR 0 7
17090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 4
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17219
// for i in tmp do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17217
// for j = 1 to 3 do
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_INT 3
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 274
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 99999
17206: PPUSH
17207: CALL_OW 277
17211: GO 17186
17213: POP
17214: POP
17215: GO 17170
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 1
17223: RET
// export function hHackSetLevel10 ; var i , j ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17302
// if IsSelected ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 306
17261: IFFALSE 17300
// begin for j := 1 to 4 do
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 4
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17298
// SetSkill ( i , j , 10 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 237
17296: GO 17276
17298: POP
17299: POP
// end ;
17300: GO 17249
17302: POP
17303: POP
// end ;
17304: LD_VAR 0 1
17308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17392
// begin for j := 1 to 4 do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 4
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17388
// SetSkill ( i , j , 10 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 10
17381: PPUSH
17382: CALL_OW 237
17386: GO 17366
17388: POP
17389: POP
// end ;
17390: GO 17350
17392: POP
17393: POP
// end ;
17394: LD_VAR 0 1
17398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17399: LD_INT 0
17401: PPUSH
// uc_side := your_side ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_OWVAR 2
17411: ST_TO_ADDR
// uc_nation := nation ;
17412: LD_ADDR_OWVAR 21
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// InitHc ;
17422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17426: LD_INT 0
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL_OW 428
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17463: CALL_OW 44
17467: PPUSH
17468: LD_VAR 0 4
17472: PPUSH
17473: LD_VAR 0 5
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 48
// end ;
17485: LD_VAR 0 6
17489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: IN
17531: IFFALSE 17543
// uc_nation := nation_american else
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
17541: GO 17586
// if chassis in [ 11 , 12 , 13 , 14 ] then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17578
// uc_nation := nation_arabian else
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
17576: GO 17586
// uc_nation := nation_russian ;
17578: LD_ADDR_OWVAR 21
17582: PUSH
17583: LD_INT 3
17585: ST_TO_ADDR
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// un := CreateVehicle ;
17626: LD_ADDR_VAR 0 8
17630: PUSH
17631: CALL_OW 45
17635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 12
17651: PPUSH
17652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17656: LD_VAR 0 8
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 48
// end ;
17678: LD_VAR 0 7
17682: RET
// export hInvincible ; every 1 do
17683: GO 17685
17685: DISABLE
// hInvincible := [ ] ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
17693: END
// every 10 do var i ;
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin enable ;
17700: ENABLE
// if not hInvincible then
17701: LD_EXP 69
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17754
// for i in hInvincible do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_EXP 69
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17752
// if GetLives ( i ) < 1000 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 256
17732: PUSH
17733: LD_INT 1000
17735: LESS
17736: IFFALSE 17750
// SetLives ( i , 1000 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 1000
17745: PPUSH
17746: CALL_OW 234
17750: GO 17720
17752: POP
17753: POP
// end ;
17754: PPOPN 1
17756: END
// export function hHackInvincible ; var i ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17861
// if IsSelected ( i ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 306
17811: IFFALSE 17859
// begin if i in hInvincible then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_EXP 69
17822: IN
17823: IFFALSE 17843
// hInvincible := hInvincible diff i else
17825: LD_ADDR_EXP 69
17829: PUSH
17830: LD_EXP 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: ST_TO_ADDR
17841: GO 17859
// hInvincible := hInvincible union i ;
17843: LD_ADDR_EXP 69
17847: PUSH
17848: LD_EXP 69
17852: PUSH
17853: LD_VAR 0 2
17857: UNION
17858: ST_TO_ADDR
// end ;
17859: GO 17799
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackInvisible ; var i , j ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17918
// if IsSelected ( i ) then
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 306
17905: IFFALSE 17916
// ComForceInvisible ( i ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 496
17916: GO 17893
17918: POP
17919: POP
// end ;
17920: LD_VAR 0 1
17924: RET
// export function hHackChangeYourSide ; begin
17925: LD_INT 0
17927: PPUSH
// if your_side = 8 then
17928: LD_OWVAR 2
17932: PUSH
17933: LD_INT 8
17935: EQUAL
17936: IFFALSE 17948
// your_side := 0 else
17938: LD_ADDR_OWVAR 2
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
17946: GO 17962
// your_side := your_side + 1 ;
17948: LD_ADDR_OWVAR 2
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 1
17966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// for i in all_units do
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_OWVAR 3
17981: PUSH
17982: FOR_IN
17983: IFFALSE 18061
// if IsSelected ( i ) then
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 306
17994: IFFALSE 18059
// begin j := GetSide ( i ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// if j = 8 then
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 8
18018: EQUAL
18019: IFFALSE 18031
// j := 0 else
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
18029: GO 18045
// j := j + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// SetSide ( i , j ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 235
// end ;
18059: GO 17982
18061: POP
18062: POP
// end ;
18063: LD_VAR 0 1
18067: RET
// export function hHackFog ; begin
18068: LD_INT 0
18070: PPUSH
// FogOff ( true ) ;
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 344
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 483
// CenterOnXY ( x , y ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 84
// end ; end_of_file
18125: LD_VAR 0 4
18129: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_EXP 84
18150: EQUAL
18151: IFFALSE 18223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 4
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 495
// end ; end ;
18223: LD_VAR 0 2
18227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18228: LD_INT 0
18230: PPUSH
// end ;
18231: LD_VAR 0 4
18235: RET
// export function SOS_Command ( cmd ) ; begin
18236: LD_INT 0
18238: PPUSH
// end ;
18239: LD_VAR 0 2
18243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18244: LD_INT 0
18246: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 250
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_EXP 87
18270: EQUAL
18271: AND
18272: IFFALSE 18293
// MinerPlaceMine ( unit , x , y ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_VAR 0 5
18288: PPUSH
18289: CALL 20232 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18293: LD_VAR 0 1
18297: PUSH
18298: LD_INT 251
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 264
18311: PUSH
18312: LD_EXP 87
18316: EQUAL
18317: AND
18318: IFFALSE 18339
// MinerDetoneMine ( unit , x , y ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: LD_VAR 0 5
18334: PPUSH
18335: CALL 20450 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 252
18346: EQUAL
18347: PUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_EXP 87
18362: EQUAL
18363: AND
18364: IFFALSE 18385
// MinerCreateMinefield ( unit , x , y ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 4
18375: PPUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: CALL 20458 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 254
18392: EQUAL
18393: PUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 264
18403: PUSH
18404: LD_EXP 82
18408: EQUAL
18409: AND
18410: PUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: CALL_OW 263
18420: PUSH
18421: LD_INT 3
18423: EQUAL
18424: AND
18425: IFFALSE 18441
// HackDestroyVehicle ( unit , selectedUnit ) ;
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: CALL 19950 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18441: LD_VAR 0 1
18445: PUSH
18446: LD_INT 255
18448: EQUAL
18449: PUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: CALL_OW 264
18459: PUSH
18460: LD_INT 14
18462: PUSH
18463: LD_INT 53
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: IN
18470: AND
18471: PUSH
18472: LD_VAR 0 4
18476: PPUSH
18477: LD_VAR 0 5
18481: PPUSH
18482: CALL_OW 488
18486: AND
18487: IFFALSE 18511
// CutTreeXYR ( unit , x , y , 12 ) ;
18489: LD_VAR 0 2
18493: PPUSH
18494: LD_VAR 0 4
18498: PPUSH
18499: LD_VAR 0 5
18503: PPUSH
18504: LD_INT 12
18506: PPUSH
18507: CALL 18516 0 4
// end ;
18511: LD_VAR 0 6
18515: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18527: LD_VAR 0 1
18531: NOT
18532: PUSH
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: CALL_OW 488
18547: NOT
18548: OR
18549: PUSH
18550: LD_VAR 0 4
18554: NOT
18555: OR
18556: IFFALSE 18560
// exit ;
18558: GO 18900
// list := [ ] ;
18560: LD_ADDR_VAR 0 13
18564: PUSH
18565: EMPTY
18566: ST_TO_ADDR
// if x - r < 0 then
18567: LD_VAR 0 2
18571: PUSH
18572: LD_VAR 0 4
18576: MINUS
18577: PUSH
18578: LD_INT 0
18580: LESS
18581: IFFALSE 18593
// min_x := 0 else
18583: LD_ADDR_VAR 0 7
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
18591: GO 18609
// min_x := x - r ;
18593: LD_ADDR_VAR 0 7
18597: PUSH
18598: LD_VAR 0 2
18602: PUSH
18603: LD_VAR 0 4
18607: MINUS
18608: ST_TO_ADDR
// if y - r < 0 then
18609: LD_VAR 0 3
18613: PUSH
18614: LD_VAR 0 4
18618: MINUS
18619: PUSH
18620: LD_INT 0
18622: LESS
18623: IFFALSE 18635
// min_y := 0 else
18625: LD_ADDR_VAR 0 8
18629: PUSH
18630: LD_INT 0
18632: ST_TO_ADDR
18633: GO 18651
// min_y := y - r ;
18635: LD_ADDR_VAR 0 8
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: LD_VAR 0 4
18649: MINUS
18650: ST_TO_ADDR
// max_x := x + r ;
18651: LD_ADDR_VAR 0 9
18655: PUSH
18656: LD_VAR 0 2
18660: PUSH
18661: LD_VAR 0 4
18665: PLUS
18666: ST_TO_ADDR
// max_y := y + r ;
18667: LD_ADDR_VAR 0 10
18671: PUSH
18672: LD_VAR 0 3
18676: PUSH
18677: LD_VAR 0 4
18681: PLUS
18682: ST_TO_ADDR
// for _x = min_x to max_x do
18683: LD_ADDR_VAR 0 11
18687: PUSH
18688: DOUBLE
18689: LD_VAR 0 7
18693: DEC
18694: ST_TO_ADDR
18695: LD_VAR 0 9
18699: PUSH
18700: FOR_TO
18701: IFFALSE 18818
// for _y = min_y to max_y do
18703: LD_ADDR_VAR 0 12
18707: PUSH
18708: DOUBLE
18709: LD_VAR 0 8
18713: DEC
18714: ST_TO_ADDR
18715: LD_VAR 0 10
18719: PUSH
18720: FOR_TO
18721: IFFALSE 18814
// begin if not ValidHex ( _x , _y ) then
18723: LD_VAR 0 11
18727: PPUSH
18728: LD_VAR 0 12
18732: PPUSH
18733: CALL_OW 488
18737: NOT
18738: IFFALSE 18742
// continue ;
18740: GO 18720
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18742: LD_VAR 0 11
18746: PPUSH
18747: LD_VAR 0 12
18751: PPUSH
18752: CALL_OW 351
18756: PUSH
18757: LD_VAR 0 11
18761: PPUSH
18762: LD_VAR 0 12
18766: PPUSH
18767: CALL_OW 554
18771: AND
18772: IFFALSE 18812
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18774: LD_ADDR_VAR 0 13
18778: PUSH
18779: LD_VAR 0 13
18783: PPUSH
18784: LD_VAR 0 13
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: PPUSH
18793: LD_VAR 0 11
18797: PUSH
18798: LD_VAR 0 12
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 2
18811: ST_TO_ADDR
// end ;
18812: GO 18720
18814: POP
18815: POP
18816: GO 18700
18818: POP
18819: POP
// if not list then
18820: LD_VAR 0 13
18824: NOT
18825: IFFALSE 18829
// exit ;
18827: GO 18900
// for i in list do
18829: LD_ADDR_VAR 0 6
18833: PUSH
18834: LD_VAR 0 13
18838: PUSH
18839: FOR_IN
18840: IFFALSE 18898
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18842: LD_VAR 0 1
18846: PPUSH
18847: LD_STRING M
18849: PUSH
18850: LD_VAR 0 6
18854: PUSH
18855: LD_INT 1
18857: ARRAY
18858: PUSH
18859: LD_VAR 0 6
18863: PUSH
18864: LD_INT 2
18866: ARRAY
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: PPUSH
18892: CALL_OW 447
18896: GO 18839
18898: POP
18899: POP
// end ;
18900: LD_VAR 0 5
18904: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18905: LD_EXP 70
18909: NOT
18910: IFFALSE 18960
18912: GO 18914
18914: DISABLE
// begin initHack := true ;
18915: LD_ADDR_EXP 70
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// hackTanks := [ ] ;
18923: LD_ADDR_EXP 71
18927: PUSH
18928: EMPTY
18929: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18930: LD_ADDR_EXP 72
18934: PUSH
18935: EMPTY
18936: ST_TO_ADDR
// hackLimit := 3 ;
18937: LD_ADDR_EXP 73
18941: PUSH
18942: LD_INT 3
18944: ST_TO_ADDR
// hackDist := 12 ;
18945: LD_ADDR_EXP 74
18949: PUSH
18950: LD_INT 12
18952: ST_TO_ADDR
// hackCounter := [ ] ;
18953: LD_ADDR_EXP 75
18957: PUSH
18958: EMPTY
18959: ST_TO_ADDR
// end ;
18960: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18961: LD_EXP 70
18965: PUSH
18966: LD_INT 34
18968: PUSH
18969: LD_EXP 82
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: AND
18983: IFFALSE 19238
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
// begin enable ;
18992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18993: LD_ADDR_VAR 0 1
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_EXP 82
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: PUSH
19015: FOR_IN
19016: IFFALSE 19236
// begin if not i in hackTanks then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 71
19027: IN
19028: NOT
19029: IFFALSE 19112
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19031: LD_ADDR_EXP 71
19035: PUSH
19036: LD_EXP 71
19040: PPUSH
19041: LD_EXP 71
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19060: LD_ADDR_EXP 72
19064: PUSH
19065: LD_EXP 72
19069: PPUSH
19070: LD_EXP 72
19074: PUSH
19075: LD_INT 1
19077: PLUS
19078: PPUSH
19079: EMPTY
19080: PPUSH
19081: CALL_OW 1
19085: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19086: LD_ADDR_EXP 75
19090: PUSH
19091: LD_EXP 75
19095: PPUSH
19096: LD_EXP 75
19100: PUSH
19101: LD_INT 1
19103: PLUS
19104: PPUSH
19105: EMPTY
19106: PPUSH
19107: CALL_OW 1
19111: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL_OW 302
19121: NOT
19122: IFFALSE 19135
// begin HackUnlinkAll ( i ) ;
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL 19241 0 1
// continue ;
19133: GO 19015
// end ; HackCheckCapturedStatus ( i ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: CALL 19684 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19144: LD_ADDR_VAR 0 2
19148: PUSH
19149: LD_INT 81
19151: PUSH
19152: LD_VAR 0 1
19156: PPUSH
19157: CALL_OW 255
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 33
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 91
19178: PUSH
19179: LD_VAR 0 1
19183: PUSH
19184: LD_EXP 74
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 50
19196: PUSH
19197: EMPTY
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: ST_TO_ADDR
// if not tmp then
19211: LD_VAR 0 2
19215: NOT
19216: IFFALSE 19220
// continue ;
19218: GO 19015
// HackLink ( i , tmp ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL 19377 0 2
// end ;
19234: GO 19015
19236: POP
19237: POP
// end ;
19238: PPOPN 2
19240: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19241: LD_INT 0
19243: PPUSH
19244: PPUSH
19245: PPUSH
// if not hack in hackTanks then
19246: LD_VAR 0 1
19250: PUSH
19251: LD_EXP 71
19255: IN
19256: NOT
19257: IFFALSE 19261
// exit ;
19259: GO 19372
// index := GetElementIndex ( hackTanks , hack ) ;
19261: LD_ADDR_VAR 0 4
19265: PUSH
19266: LD_EXP 71
19270: PPUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: CALL 25472 0 2
19280: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19281: LD_EXP 72
19285: PUSH
19286: LD_VAR 0 4
19290: ARRAY
19291: IFFALSE 19372
// begin for i in hackTanksCaptured [ index ] do
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_EXP 72
19302: PUSH
19303: LD_VAR 0 4
19307: ARRAY
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19336
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: ARRAY
19320: PPUSH
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 2
19328: ARRAY
19329: PPUSH
19330: CALL_OW 235
19334: GO 19309
19336: POP
19337: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19338: LD_ADDR_EXP 72
19342: PUSH
19343: LD_EXP 72
19347: PPUSH
19348: LD_VAR 0 4
19352: PPUSH
19353: EMPTY
19354: PPUSH
19355: CALL_OW 1
19359: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19360: LD_VAR 0 1
19364: PPUSH
19365: LD_INT 0
19367: PPUSH
19368: CALL_OW 505
// end ; end ;
19372: LD_VAR 0 2
19376: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
19381: PPUSH
// if not hack in hackTanks or not vehicles then
19382: LD_VAR 0 1
19386: PUSH
19387: LD_EXP 71
19391: IN
19392: NOT
19393: PUSH
19394: LD_VAR 0 2
19398: NOT
19399: OR
19400: IFFALSE 19404
// exit ;
19402: GO 19679
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_VAR 0 2
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: CALL 26122 0 4
19429: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19430: LD_ADDR_VAR 0 5
19434: PUSH
19435: LD_EXP 71
19439: PPUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: CALL 25472 0 2
19449: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19450: LD_EXP 72
19454: PUSH
19455: LD_VAR 0 5
19459: ARRAY
19460: PUSH
19461: LD_EXP 73
19465: LESS
19466: IFFALSE 19655
// begin for i := 1 to vehicles do
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: DOUBLE
19474: LD_INT 1
19476: DEC
19477: ST_TO_ADDR
19478: LD_VAR 0 2
19482: PUSH
19483: FOR_TO
19484: IFFALSE 19653
// begin if hackTanksCaptured [ index ] = hackLimit then
19486: LD_EXP 72
19490: PUSH
19491: LD_VAR 0 5
19495: ARRAY
19496: PUSH
19497: LD_EXP 73
19501: EQUAL
19502: IFFALSE 19506
// break ;
19504: GO 19653
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19506: LD_ADDR_EXP 75
19510: PUSH
19511: LD_EXP 75
19515: PPUSH
19516: LD_VAR 0 5
19520: PPUSH
19521: LD_EXP 75
19525: PUSH
19526: LD_VAR 0 5
19530: ARRAY
19531: PUSH
19532: LD_INT 1
19534: PLUS
19535: PPUSH
19536: CALL_OW 1
19540: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19541: LD_ADDR_EXP 72
19545: PUSH
19546: LD_EXP 72
19550: PPUSH
19551: LD_VAR 0 5
19555: PUSH
19556: LD_EXP 72
19560: PUSH
19561: LD_VAR 0 5
19565: ARRAY
19566: PUSH
19567: LD_INT 1
19569: PLUS
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PPUSH
19575: LD_VAR 0 2
19579: PUSH
19580: LD_VAR 0 4
19584: ARRAY
19585: PUSH
19586: LD_VAR 0 2
19590: PUSH
19591: LD_VAR 0 4
19595: ARRAY
19596: PPUSH
19597: CALL_OW 255
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL 25687 0 3
19610: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19611: LD_VAR 0 2
19615: PUSH
19616: LD_VAR 0 4
19620: ARRAY
19621: PPUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 255
19631: PPUSH
19632: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19636: LD_VAR 0 2
19640: PUSH
19641: LD_VAR 0 4
19645: ARRAY
19646: PPUSH
19647: CALL_OW 141
// end ;
19651: GO 19483
19653: POP
19654: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19655: LD_VAR 0 1
19659: PPUSH
19660: LD_EXP 72
19664: PUSH
19665: LD_VAR 0 5
19669: ARRAY
19670: PUSH
19671: LD_INT 0
19673: PLUS
19674: PPUSH
19675: CALL_OW 505
// end ;
19679: LD_VAR 0 3
19683: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19684: LD_INT 0
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
// if not hack in hackTanks then
19690: LD_VAR 0 1
19694: PUSH
19695: LD_EXP 71
19699: IN
19700: NOT
19701: IFFALSE 19705
// exit ;
19703: GO 19945
// index := GetElementIndex ( hackTanks , hack ) ;
19705: LD_ADDR_VAR 0 4
19709: PUSH
19710: LD_EXP 71
19714: PPUSH
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL 25472 0 2
19724: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: DOUBLE
19731: LD_EXP 72
19735: PUSH
19736: LD_VAR 0 4
19740: ARRAY
19741: INC
19742: ST_TO_ADDR
19743: LD_INT 1
19745: PUSH
19746: FOR_DOWNTO
19747: IFFALSE 19919
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19749: LD_ADDR_VAR 0 5
19753: PUSH
19754: LD_EXP 72
19758: PUSH
19759: LD_VAR 0 4
19763: ARRAY
19764: PUSH
19765: LD_VAR 0 3
19769: ARRAY
19770: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19771: LD_VAR 0 5
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: PPUSH
19780: CALL_OW 302
19784: NOT
19785: PUSH
19786: LD_VAR 0 5
19790: PUSH
19791: LD_INT 1
19793: ARRAY
19794: PPUSH
19795: CALL_OW 255
19799: PUSH
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 255
19809: NONEQUAL
19810: OR
19811: IFFALSE 19917
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19813: LD_VAR 0 5
19817: PUSH
19818: LD_INT 1
19820: ARRAY
19821: PPUSH
19822: CALL_OW 305
19826: PUSH
19827: LD_VAR 0 5
19831: PUSH
19832: LD_INT 1
19834: ARRAY
19835: PPUSH
19836: CALL_OW 255
19840: PUSH
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 255
19850: EQUAL
19851: AND
19852: IFFALSE 19876
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19854: LD_VAR 0 5
19858: PUSH
19859: LD_INT 1
19861: ARRAY
19862: PPUSH
19863: LD_VAR 0 5
19867: PUSH
19868: LD_INT 2
19870: ARRAY
19871: PPUSH
19872: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19876: LD_ADDR_EXP 72
19880: PUSH
19881: LD_EXP 72
19885: PPUSH
19886: LD_VAR 0 4
19890: PPUSH
19891: LD_EXP 72
19895: PUSH
19896: LD_VAR 0 4
19900: ARRAY
19901: PPUSH
19902: LD_VAR 0 3
19906: PPUSH
19907: CALL_OW 3
19911: PPUSH
19912: CALL_OW 1
19916: ST_TO_ADDR
// end ; end ;
19917: GO 19746
19919: POP
19920: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_EXP 72
19930: PUSH
19931: LD_VAR 0 4
19935: ARRAY
19936: PUSH
19937: LD_INT 0
19939: PLUS
19940: PPUSH
19941: CALL_OW 505
// end ;
19945: LD_VAR 0 2
19949: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19950: LD_INT 0
19952: PPUSH
19953: PPUSH
19954: PPUSH
19955: PPUSH
// if not hack in hackTanks then
19956: LD_VAR 0 1
19960: PUSH
19961: LD_EXP 71
19965: IN
19966: NOT
19967: IFFALSE 19971
// exit ;
19969: GO 20056
// index := GetElementIndex ( hackTanks , hack ) ;
19971: LD_ADDR_VAR 0 5
19975: PUSH
19976: LD_EXP 71
19980: PPUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL 25472 0 2
19990: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19991: LD_ADDR_VAR 0 4
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_EXP 72
20005: PUSH
20006: LD_VAR 0 5
20010: ARRAY
20011: PUSH
20012: FOR_TO
20013: IFFALSE 20054
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20015: LD_EXP 72
20019: PUSH
20020: LD_VAR 0 5
20024: ARRAY
20025: PUSH
20026: LD_VAR 0 4
20030: ARRAY
20031: PUSH
20032: LD_INT 1
20034: ARRAY
20035: PUSH
20036: LD_VAR 0 2
20040: EQUAL
20041: IFFALSE 20052
// KillUnit ( vehicle ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: CALL_OW 66
20052: GO 20012
20054: POP
20055: POP
// end ;
20056: LD_VAR 0 3
20060: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20061: LD_EXP 76
20065: NOT
20066: IFFALSE 20101
20068: GO 20070
20070: DISABLE
// begin initMiner := true ;
20071: LD_ADDR_EXP 76
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// minersList := [ ] ;
20079: LD_ADDR_EXP 77
20083: PUSH
20084: EMPTY
20085: ST_TO_ADDR
// minerMinesList := [ ] ;
20086: LD_ADDR_EXP 78
20090: PUSH
20091: EMPTY
20092: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20093: LD_ADDR_EXP 79
20097: PUSH
20098: LD_INT 5
20100: ST_TO_ADDR
// end ;
20101: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i ;
20102: LD_EXP 76
20106: PUSH
20107: LD_INT 34
20109: PUSH
20110: LD_EXP 87
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: AND
20124: IFFALSE 20229
20126: GO 20128
20128: DISABLE
20129: LD_INT 0
20131: PPUSH
// begin for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_INT 34
20139: PUSH
20140: LD_EXP 87
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PPUSH
20149: CALL_OW 69
20153: PUSH
20154: FOR_IN
20155: IFFALSE 20227
// begin if not i in minersList then
20157: LD_VAR 0 1
20161: PUSH
20162: LD_EXP 77
20166: IN
20167: NOT
20168: IFFALSE 20225
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20170: LD_ADDR_EXP 77
20174: PUSH
20175: LD_EXP 77
20179: PPUSH
20180: LD_EXP 77
20184: PUSH
20185: LD_INT 1
20187: PLUS
20188: PPUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20199: LD_ADDR_EXP 78
20203: PUSH
20204: LD_EXP 78
20208: PPUSH
20209: LD_EXP 78
20213: PUSH
20214: LD_INT 1
20216: PLUS
20217: PPUSH
20218: EMPTY
20219: PPUSH
20220: CALL_OW 1
20224: ST_TO_ADDR
// end ; end ;
20225: GO 20154
20227: POP
20228: POP
// end ;
20229: PPOPN 1
20231: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20232: LD_INT 0
20234: PPUSH
20235: PPUSH
// if not GetWeapon ( unit ) = ar_miner then
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 264
20245: PUSH
20246: LD_EXP 87
20250: EQUAL
20251: NOT
20252: IFFALSE 20256
// exit ;
20254: GO 20445
// ComMoveXY ( unit , x , y ) ;
20256: LD_VAR 0 1
20260: PPUSH
20261: LD_VAR 0 2
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20275: LD_INT 35
20277: PPUSH
20278: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20282: LD_VAR 0 1
20286: PPUSH
20287: LD_VAR 0 2
20291: PPUSH
20292: LD_VAR 0 3
20296: PPUSH
20297: CALL 55536 0 3
20301: NOT
20302: IFFALSE 20306
// exit ;
20304: GO 20445
// until HexInfo ( x , y ) = unit ;
20306: LD_VAR 0 2
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: CALL_OW 428
20320: PUSH
20321: LD_VAR 0 1
20325: EQUAL
20326: IFFALSE 20275
// PlaySoundXY ( x , y , PlantMine ) ;
20328: LD_VAR 0 2
20332: PPUSH
20333: LD_VAR 0 3
20337: PPUSH
20338: LD_STRING PlantMine
20340: PPUSH
20341: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20345: LD_VAR 0 2
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 255
20364: PPUSH
20365: LD_INT 0
20367: PPUSH
20368: CALL_OW 454
// index := GetElementIndex ( minersList , unit ) ;
20372: LD_ADDR_VAR 0 5
20376: PUSH
20377: LD_EXP 77
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL 25472 0 2
20391: ST_TO_ADDR
// minerMinesList := ReplaceIn ( minersList , [ index , minersList [ index ] + 1 ] , [ x , y ] ) ;
20392: LD_ADDR_EXP 78
20396: PUSH
20397: LD_EXP 77
20401: PPUSH
20402: LD_VAR 0 5
20406: PUSH
20407: LD_EXP 77
20411: PUSH
20412: LD_VAR 0 5
20416: ARRAY
20417: PUSH
20418: LD_INT 1
20420: PLUS
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PPUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_VAR 0 3
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL 25687 0 3
20444: ST_TO_ADDR
// end ;
20445: LD_VAR 0 4
20449: RET
// export function MinerDetoneMine ( unit , x , y ) ; begin
20450: LD_INT 0
20452: PPUSH
// end ;
20453: LD_VAR 0 4
20457: RET
// export function MinerCreateMinefield ( unit , x , y ) ; begin
20458: LD_INT 0
20460: PPUSH
// end ; end_of_file
20461: LD_VAR 0 4
20465: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20466: LD_VAR 0 1
20470: PUSH
20471: LD_INT 200
20473: DOUBLE
20474: GREATEREQUAL
20475: IFFALSE 20483
20477: LD_INT 299
20479: DOUBLE
20480: LESSEQUAL
20481: IFTRUE 20485
20483: GO 20517
20485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_VAR 0 5
20510: PPUSH
20511: CALL 18244 0 5
20515: GO 20594
20517: LD_INT 300
20519: DOUBLE
20520: GREATEREQUAL
20521: IFFALSE 20529
20523: LD_INT 399
20525: DOUBLE
20526: LESSEQUAL
20527: IFTRUE 20531
20529: GO 20593
20531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_VAR 0 2
20541: PPUSH
20542: LD_VAR 0 3
20546: PPUSH
20547: LD_VAR 0 4
20551: PPUSH
20552: LD_VAR 0 5
20556: PPUSH
20557: LD_VAR 0 6
20561: PPUSH
20562: LD_VAR 0 7
20566: PPUSH
20567: LD_VAR 0 8
20571: PPUSH
20572: LD_VAR 0 9
20576: PPUSH
20577: LD_VAR 0 10
20581: PPUSH
20582: LD_VAR 0 11
20586: PPUSH
20587: CALL 16150 0 11
20591: GO 20594
20593: POP
// end ; end_of_file
20594: PPOPN 11
20596: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20597: LD_INT 0
20599: PPUSH
// ar_miner := 81 ;
20600: LD_ADDR_EXP 87
20604: PUSH
20605: LD_INT 81
20607: ST_TO_ADDR
// ar_crane := 88 ;
20608: LD_ADDR_EXP 86
20612: PUSH
20613: LD_INT 88
20615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20616: LD_ADDR_EXP 81
20620: PUSH
20621: LD_INT 89
20623: ST_TO_ADDR
// us_hack := 99 ;
20624: LD_ADDR_EXP 82
20628: PUSH
20629: LD_INT 99
20631: ST_TO_ADDR
// us_artillery := 97 ;
20632: LD_ADDR_EXP 83
20636: PUSH
20637: LD_INT 97
20639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20640: LD_ADDR_EXP 84
20644: PUSH
20645: LD_INT 91
20647: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20648: LD_ADDR_EXP 85
20652: PUSH
20653: LD_INT 92
20655: ST_TO_ADDR
// ru_radar := 98 ;
20656: LD_ADDR_EXP 80
20660: PUSH
20661: LD_INT 98
20663: ST_TO_ADDR
// tech_Artillery := 80 ;
20664: LD_ADDR_EXP 88
20668: PUSH
20669: LD_INT 80
20671: ST_TO_ADDR
// tech_RadMat := 81 ;
20672: LD_ADDR_EXP 89
20676: PUSH
20677: LD_INT 81
20679: ST_TO_ADDR
// tech_BasicTools := 82 ;
20680: LD_ADDR_EXP 90
20684: PUSH
20685: LD_INT 82
20687: ST_TO_ADDR
// tech_Cargo := 83 ;
20688: LD_ADDR_EXP 91
20692: PUSH
20693: LD_INT 83
20695: ST_TO_ADDR
// tech_Track := 84 ;
20696: LD_ADDR_EXP 92
20700: PUSH
20701: LD_INT 84
20703: ST_TO_ADDR
// tech_Crane := 85 ;
20704: LD_ADDR_EXP 93
20708: PUSH
20709: LD_INT 85
20711: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20712: LD_ADDR_EXP 94
20716: PUSH
20717: LD_INT 86
20719: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20720: LD_ADDR_EXP 95
20724: PUSH
20725: LD_INT 87
20727: ST_TO_ADDR
// end ;
20728: LD_VAR 0 1
20732: RET
// every 1 do
20733: GO 20735
20735: DISABLE
// InitGlobalVariables ; end_of_file
20736: CALL 20597 0 0
20740: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20741: LD_INT 0
20743: PPUSH
20744: PPUSH
// if exist_mode then
20745: LD_VAR 0 2
20749: IFFALSE 20774
// unit := CreateCharacter ( prefix & ident ) else
20751: LD_ADDR_VAR 0 5
20755: PUSH
20756: LD_VAR 0 3
20760: PUSH
20761: LD_VAR 0 1
20765: STR
20766: PPUSH
20767: CALL_OW 34
20771: ST_TO_ADDR
20772: GO 20789
// unit := NewCharacter ( ident ) ;
20774: LD_ADDR_VAR 0 5
20778: PUSH
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 25
20788: ST_TO_ADDR
// result := unit ;
20789: LD_ADDR_VAR 0 4
20793: PUSH
20794: LD_VAR 0 5
20798: ST_TO_ADDR
// end ;
20799: LD_VAR 0 4
20803: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20804: LD_INT 0
20806: PPUSH
20807: PPUSH
// if not side or not nation then
20808: LD_VAR 0 1
20812: NOT
20813: PUSH
20814: LD_VAR 0 2
20818: NOT
20819: OR
20820: IFFALSE 20824
// exit ;
20822: GO 21588
// case nation of nation_american :
20824: LD_VAR 0 2
20828: PUSH
20829: LD_INT 1
20831: DOUBLE
20832: EQUAL
20833: IFTRUE 20837
20835: GO 21051
20837: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20838: LD_ADDR_VAR 0 4
20842: PUSH
20843: LD_INT 35
20845: PUSH
20846: LD_INT 45
20848: PUSH
20849: LD_INT 46
20851: PUSH
20852: LD_INT 47
20854: PUSH
20855: LD_INT 82
20857: PUSH
20858: LD_INT 83
20860: PUSH
20861: LD_INT 84
20863: PUSH
20864: LD_INT 85
20866: PUSH
20867: LD_INT 86
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 6
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 7
20887: PUSH
20888: LD_INT 12
20890: PUSH
20891: LD_INT 13
20893: PUSH
20894: LD_INT 10
20896: PUSH
20897: LD_INT 14
20899: PUSH
20900: LD_INT 20
20902: PUSH
20903: LD_INT 21
20905: PUSH
20906: LD_INT 22
20908: PUSH
20909: LD_INT 25
20911: PUSH
20912: LD_INT 32
20914: PUSH
20915: LD_INT 27
20917: PUSH
20918: LD_INT 36
20920: PUSH
20921: LD_INT 69
20923: PUSH
20924: LD_INT 39
20926: PUSH
20927: LD_INT 34
20929: PUSH
20930: LD_INT 40
20932: PUSH
20933: LD_INT 48
20935: PUSH
20936: LD_INT 49
20938: PUSH
20939: LD_INT 50
20941: PUSH
20942: LD_INT 51
20944: PUSH
20945: LD_INT 52
20947: PUSH
20948: LD_INT 53
20950: PUSH
20951: LD_INT 54
20953: PUSH
20954: LD_INT 55
20956: PUSH
20957: LD_INT 56
20959: PUSH
20960: LD_INT 57
20962: PUSH
20963: LD_INT 58
20965: PUSH
20966: LD_INT 59
20968: PUSH
20969: LD_INT 60
20971: PUSH
20972: LD_INT 61
20974: PUSH
20975: LD_INT 62
20977: PUSH
20978: LD_INT 80
20980: PUSH
20981: LD_INT 82
20983: PUSH
20984: LD_INT 83
20986: PUSH
20987: LD_INT 84
20989: PUSH
20990: LD_INT 85
20992: PUSH
20993: LD_INT 86
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 21512
21051: LD_INT 2
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21281
21059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21060: LD_ADDR_VAR 0 4
21064: PUSH
21065: LD_INT 35
21067: PUSH
21068: LD_INT 45
21070: PUSH
21071: LD_INT 46
21073: PUSH
21074: LD_INT 47
21076: PUSH
21077: LD_INT 82
21079: PUSH
21080: LD_INT 83
21082: PUSH
21083: LD_INT 84
21085: PUSH
21086: LD_INT 85
21088: PUSH
21089: LD_INT 87
21091: PUSH
21092: LD_INT 70
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 11
21100: PUSH
21101: LD_INT 3
21103: PUSH
21104: LD_INT 4
21106: PUSH
21107: LD_INT 5
21109: PUSH
21110: LD_INT 6
21112: PUSH
21113: LD_INT 15
21115: PUSH
21116: LD_INT 18
21118: PUSH
21119: LD_INT 7
21121: PUSH
21122: LD_INT 17
21124: PUSH
21125: LD_INT 8
21127: PUSH
21128: LD_INT 20
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 22
21136: PUSH
21137: LD_INT 72
21139: PUSH
21140: LD_INT 26
21142: PUSH
21143: LD_INT 69
21145: PUSH
21146: LD_INT 39
21148: PUSH
21149: LD_INT 40
21151: PUSH
21152: LD_INT 41
21154: PUSH
21155: LD_INT 42
21157: PUSH
21158: LD_INT 43
21160: PUSH
21161: LD_INT 48
21163: PUSH
21164: LD_INT 49
21166: PUSH
21167: LD_INT 50
21169: PUSH
21170: LD_INT 51
21172: PUSH
21173: LD_INT 52
21175: PUSH
21176: LD_INT 53
21178: PUSH
21179: LD_INT 54
21181: PUSH
21182: LD_INT 55
21184: PUSH
21185: LD_INT 56
21187: PUSH
21188: LD_INT 60
21190: PUSH
21191: LD_INT 61
21193: PUSH
21194: LD_INT 62
21196: PUSH
21197: LD_INT 66
21199: PUSH
21200: LD_INT 67
21202: PUSH
21203: LD_INT 68
21205: PUSH
21206: LD_INT 81
21208: PUSH
21209: LD_INT 82
21211: PUSH
21212: LD_INT 83
21214: PUSH
21215: LD_INT 84
21217: PUSH
21218: LD_INT 85
21220: PUSH
21221: LD_INT 87
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
21279: GO 21512
21281: LD_INT 3
21283: DOUBLE
21284: EQUAL
21285: IFTRUE 21289
21287: GO 21511
21289: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: LD_INT 46
21297: PUSH
21298: LD_INT 47
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: LD_INT 82
21309: PUSH
21310: LD_INT 83
21312: PUSH
21313: LD_INT 84
21315: PUSH
21316: LD_INT 85
21318: PUSH
21319: LD_INT 86
21321: PUSH
21322: LD_INT 11
21324: PUSH
21325: LD_INT 9
21327: PUSH
21328: LD_INT 20
21330: PUSH
21331: LD_INT 19
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 24
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_INT 25
21345: PUSH
21346: LD_INT 28
21348: PUSH
21349: LD_INT 29
21351: PUSH
21352: LD_INT 30
21354: PUSH
21355: LD_INT 31
21357: PUSH
21358: LD_INT 37
21360: PUSH
21361: LD_INT 38
21363: PUSH
21364: LD_INT 32
21366: PUSH
21367: LD_INT 27
21369: PUSH
21370: LD_INT 33
21372: PUSH
21373: LD_INT 69
21375: PUSH
21376: LD_INT 39
21378: PUSH
21379: LD_INT 34
21381: PUSH
21382: LD_INT 40
21384: PUSH
21385: LD_INT 71
21387: PUSH
21388: LD_INT 23
21390: PUSH
21391: LD_INT 44
21393: PUSH
21394: LD_INT 48
21396: PUSH
21397: LD_INT 49
21399: PUSH
21400: LD_INT 50
21402: PUSH
21403: LD_INT 51
21405: PUSH
21406: LD_INT 52
21408: PUSH
21409: LD_INT 53
21411: PUSH
21412: LD_INT 54
21414: PUSH
21415: LD_INT 55
21417: PUSH
21418: LD_INT 56
21420: PUSH
21421: LD_INT 57
21423: PUSH
21424: LD_INT 58
21426: PUSH
21427: LD_INT 59
21429: PUSH
21430: LD_INT 63
21432: PUSH
21433: LD_INT 64
21435: PUSH
21436: LD_INT 65
21438: PUSH
21439: LD_INT 82
21441: PUSH
21442: LD_INT 83
21444: PUSH
21445: LD_INT 84
21447: PUSH
21448: LD_INT 85
21450: PUSH
21451: LD_INT 86
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: ST_TO_ADDR
21509: GO 21512
21511: POP
// if state > - 1 and state < 3 then
21512: LD_VAR 0 3
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: GREATER
21521: PUSH
21522: LD_VAR 0 3
21526: PUSH
21527: LD_INT 3
21529: LESS
21530: AND
21531: IFFALSE 21588
// for i in result do
21533: LD_ADDR_VAR 0 5
21537: PUSH
21538: LD_VAR 0 4
21542: PUSH
21543: FOR_IN
21544: IFFALSE 21586
// if GetTech ( i , side ) <> state then
21546: LD_VAR 0 5
21550: PPUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL_OW 321
21560: PUSH
21561: LD_VAR 0 3
21565: NONEQUAL
21566: IFFALSE 21584
// result := result diff i ;
21568: LD_ADDR_VAR 0 4
21572: PUSH
21573: LD_VAR 0 4
21577: PUSH
21578: LD_VAR 0 5
21582: DIFF
21583: ST_TO_ADDR
21584: GO 21543
21586: POP
21587: POP
// end ;
21588: LD_VAR 0 4
21592: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21593: LD_INT 0
21595: PPUSH
21596: PPUSH
21597: PPUSH
// result := true ;
21598: LD_ADDR_VAR 0 3
21602: PUSH
21603: LD_INT 1
21605: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21606: LD_ADDR_VAR 0 5
21610: PUSH
21611: LD_VAR 0 2
21615: PPUSH
21616: CALL_OW 480
21620: ST_TO_ADDR
// if not tmp then
21621: LD_VAR 0 5
21625: NOT
21626: IFFALSE 21630
// exit ;
21628: GO 21679
// for i in tmp do
21630: LD_ADDR_VAR 0 4
21634: PUSH
21635: LD_VAR 0 5
21639: PUSH
21640: FOR_IN
21641: IFFALSE 21677
// if GetTech ( i , side ) <> state_researched then
21643: LD_VAR 0 4
21647: PPUSH
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 321
21657: PUSH
21658: LD_INT 2
21660: NONEQUAL
21661: IFFALSE 21675
// begin result := false ;
21663: LD_ADDR_VAR 0 3
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// exit ;
21671: POP
21672: POP
21673: GO 21679
// end ;
21675: GO 21640
21677: POP
21678: POP
// end ;
21679: LD_VAR 0 3
21683: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21684: LD_INT 0
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21699: LD_VAR 0 1
21703: NOT
21704: PUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: CALL_OW 257
21714: PUSH
21715: LD_INT 9
21717: NONEQUAL
21718: OR
21719: IFFALSE 21723
// exit ;
21721: GO 22296
// side := GetSide ( unit ) ;
21723: LD_ADDR_VAR 0 9
21727: PUSH
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 255
21737: ST_TO_ADDR
// tech_space := tech_spacanom ;
21738: LD_ADDR_VAR 0 12
21742: PUSH
21743: LD_INT 29
21745: ST_TO_ADDR
// tech_time := tech_taurad ;
21746: LD_ADDR_VAR 0 13
21750: PUSH
21751: LD_INT 28
21753: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21754: LD_ADDR_VAR 0 11
21758: PUSH
21759: LD_VAR 0 1
21763: PPUSH
21764: CALL_OW 310
21768: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21769: LD_VAR 0 11
21773: PPUSH
21774: CALL_OW 247
21778: PUSH
21779: LD_INT 2
21781: EQUAL
21782: IFFALSE 21786
// exit ;
21784: GO 22296
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21786: LD_ADDR_VAR 0 8
21790: PUSH
21791: LD_INT 81
21793: PUSH
21794: LD_VAR 0 9
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 3
21805: PUSH
21806: LD_INT 21
21808: PUSH
21809: LD_INT 3
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: CALL_OW 69
21828: ST_TO_ADDR
// if not tmp then
21829: LD_VAR 0 8
21833: NOT
21834: IFFALSE 21838
// exit ;
21836: GO 22296
// if in_unit then
21838: LD_VAR 0 11
21842: IFFALSE 21866
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21844: LD_ADDR_VAR 0 10
21848: PUSH
21849: LD_VAR 0 8
21853: PPUSH
21854: LD_VAR 0 11
21858: PPUSH
21859: CALL_OW 74
21863: ST_TO_ADDR
21864: GO 21886
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21866: LD_ADDR_VAR 0 10
21870: PUSH
21871: LD_VAR 0 8
21875: PPUSH
21876: LD_VAR 0 1
21880: PPUSH
21881: CALL_OW 74
21885: ST_TO_ADDR
// if not enemy then
21886: LD_VAR 0 10
21890: NOT
21891: IFFALSE 21895
// exit ;
21893: GO 22296
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21895: LD_VAR 0 11
21899: PUSH
21900: LD_VAR 0 11
21904: PPUSH
21905: LD_VAR 0 10
21909: PPUSH
21910: CALL_OW 296
21914: PUSH
21915: LD_INT 13
21917: GREATER
21918: AND
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: LD_VAR 0 10
21929: PPUSH
21930: CALL_OW 296
21934: PUSH
21935: LD_INT 12
21937: GREATER
21938: OR
21939: IFFALSE 21943
// exit ;
21941: GO 22296
// missile := [ 1 ] ;
21943: LD_ADDR_VAR 0 14
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21954: LD_VAR 0 9
21958: PPUSH
21959: LD_VAR 0 12
21963: PPUSH
21964: CALL_OW 325
21968: IFFALSE 21997
// missile := Insert ( missile , missile + 1 , 2 ) ;
21970: LD_ADDR_VAR 0 14
21974: PUSH
21975: LD_VAR 0 14
21979: PPUSH
21980: LD_VAR 0 14
21984: PUSH
21985: LD_INT 1
21987: PLUS
21988: PPUSH
21989: LD_INT 2
21991: PPUSH
21992: CALL_OW 2
21996: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21997: LD_VAR 0 9
22001: PPUSH
22002: LD_VAR 0 13
22006: PPUSH
22007: CALL_OW 325
22011: PUSH
22012: LD_VAR 0 10
22016: PPUSH
22017: CALL_OW 255
22021: PPUSH
22022: LD_VAR 0 13
22026: PPUSH
22027: CALL_OW 325
22031: NOT
22032: AND
22033: IFFALSE 22062
// missile := Insert ( missile , missile + 1 , 3 ) ;
22035: LD_ADDR_VAR 0 14
22039: PUSH
22040: LD_VAR 0 14
22044: PPUSH
22045: LD_VAR 0 14
22049: PUSH
22050: LD_INT 1
22052: PLUS
22053: PPUSH
22054: LD_INT 3
22056: PPUSH
22057: CALL_OW 2
22061: ST_TO_ADDR
// if missile < 2 then
22062: LD_VAR 0 14
22066: PUSH
22067: LD_INT 2
22069: LESS
22070: IFFALSE 22074
// exit ;
22072: GO 22296
// x := GetX ( enemy ) ;
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_VAR 0 10
22083: PPUSH
22084: CALL_OW 250
22088: ST_TO_ADDR
// y := GetY ( enemy ) ;
22089: LD_ADDR_VAR 0 5
22093: PUSH
22094: LD_VAR 0 10
22098: PPUSH
22099: CALL_OW 251
22103: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22104: LD_ADDR_VAR 0 6
22108: PUSH
22109: LD_VAR 0 4
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PPUSH
22118: LD_INT 1
22120: PPUSH
22121: CALL_OW 12
22125: PLUS
22126: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22127: LD_ADDR_VAR 0 7
22131: PUSH
22132: LD_VAR 0 5
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 12
22148: PLUS
22149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22150: LD_VAR 0 6
22154: PPUSH
22155: LD_VAR 0 7
22159: PPUSH
22160: CALL_OW 488
22164: NOT
22165: IFFALSE 22187
// begin _x := x ;
22167: LD_ADDR_VAR 0 6
22171: PUSH
22172: LD_VAR 0 4
22176: ST_TO_ADDR
// _y := y ;
22177: LD_ADDR_VAR 0 7
22181: PUSH
22182: LD_VAR 0 5
22186: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22187: LD_ADDR_VAR 0 3
22191: PUSH
22192: LD_INT 1
22194: PPUSH
22195: LD_VAR 0 14
22199: PPUSH
22200: CALL_OW 12
22204: ST_TO_ADDR
// case i of 1 :
22205: LD_VAR 0 3
22209: PUSH
22210: LD_INT 1
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 22235
22218: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22219: LD_VAR 0 1
22223: PPUSH
22224: LD_VAR 0 10
22228: PPUSH
22229: CALL_OW 115
22233: GO 22296
22235: LD_INT 2
22237: DOUBLE
22238: EQUAL
22239: IFTRUE 22243
22241: GO 22265
22243: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22244: LD_VAR 0 1
22248: PPUSH
22249: LD_VAR 0 6
22253: PPUSH
22254: LD_VAR 0 7
22258: PPUSH
22259: CALL_OW 153
22263: GO 22296
22265: LD_INT 3
22267: DOUBLE
22268: EQUAL
22269: IFTRUE 22273
22271: GO 22295
22273: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22274: LD_VAR 0 1
22278: PPUSH
22279: LD_VAR 0 6
22283: PPUSH
22284: LD_VAR 0 7
22288: PPUSH
22289: CALL_OW 154
22293: GO 22296
22295: POP
// end ;
22296: LD_VAR 0 2
22300: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22301: LD_INT 0
22303: PPUSH
22304: PPUSH
22305: PPUSH
22306: PPUSH
22307: PPUSH
22308: PPUSH
// if not unit or not building then
22309: LD_VAR 0 1
22313: NOT
22314: PUSH
22315: LD_VAR 0 2
22319: NOT
22320: OR
22321: IFFALSE 22325
// exit ;
22323: GO 22483
// x := GetX ( building ) ;
22325: LD_ADDR_VAR 0 5
22329: PUSH
22330: LD_VAR 0 2
22334: PPUSH
22335: CALL_OW 250
22339: ST_TO_ADDR
// y := GetY ( building ) ;
22340: LD_ADDR_VAR 0 6
22344: PUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: CALL_OW 251
22354: ST_TO_ADDR
// for i = 0 to 5 do
22355: LD_ADDR_VAR 0 4
22359: PUSH
22360: DOUBLE
22361: LD_INT 0
22363: DEC
22364: ST_TO_ADDR
22365: LD_INT 5
22367: PUSH
22368: FOR_TO
22369: IFFALSE 22481
// begin _x := ShiftX ( x , i , 3 ) ;
22371: LD_ADDR_VAR 0 7
22375: PUSH
22376: LD_VAR 0 5
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: LD_INT 3
22388: PPUSH
22389: CALL_OW 272
22393: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22394: LD_ADDR_VAR 0 8
22398: PUSH
22399: LD_VAR 0 6
22403: PPUSH
22404: LD_VAR 0 4
22408: PPUSH
22409: LD_INT 3
22411: PPUSH
22412: CALL_OW 273
22416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22417: LD_VAR 0 7
22421: PPUSH
22422: LD_VAR 0 8
22426: PPUSH
22427: CALL_OW 488
22431: NOT
22432: IFFALSE 22436
// continue ;
22434: GO 22368
// if HexInfo ( _x , _y ) = 0 then
22436: LD_VAR 0 7
22440: PPUSH
22441: LD_VAR 0 8
22445: PPUSH
22446: CALL_OW 428
22450: PUSH
22451: LD_INT 0
22453: EQUAL
22454: IFFALSE 22479
// begin ComMoveXY ( unit , _x , _y ) ;
22456: LD_VAR 0 1
22460: PPUSH
22461: LD_VAR 0 7
22465: PPUSH
22466: LD_VAR 0 8
22470: PPUSH
22471: CALL_OW 111
// exit ;
22475: POP
22476: POP
22477: GO 22483
// end ; end ;
22479: GO 22368
22481: POP
22482: POP
// end ;
22483: LD_VAR 0 3
22487: RET
// export function ScanBase ( side , base_area ) ; begin
22488: LD_INT 0
22490: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_VAR 0 2
22500: PPUSH
22501: LD_INT 81
22503: PUSH
22504: LD_VAR 0 1
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL_OW 70
22517: ST_TO_ADDR
// end ;
22518: LD_VAR 0 3
22522: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22523: LD_INT 0
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
// result := false ;
22529: LD_ADDR_VAR 0 2
22533: PUSH
22534: LD_INT 0
22536: ST_TO_ADDR
// side := GetSide ( unit ) ;
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22552: LD_ADDR_VAR 0 4
22556: PUSH
22557: LD_VAR 0 1
22561: PPUSH
22562: CALL_OW 248
22566: ST_TO_ADDR
// case nat of 1 :
22567: LD_VAR 0 4
22571: PUSH
22572: LD_INT 1
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22591
22580: POP
// tech := tech_lassight ; 2 :
22581: LD_ADDR_VAR 0 5
22585: PUSH
22586: LD_INT 12
22588: ST_TO_ADDR
22589: GO 22630
22591: LD_INT 2
22593: DOUBLE
22594: EQUAL
22595: IFTRUE 22599
22597: GO 22610
22599: POP
// tech := tech_mortar ; 3 :
22600: LD_ADDR_VAR 0 5
22604: PUSH
22605: LD_INT 41
22607: ST_TO_ADDR
22608: GO 22630
22610: LD_INT 3
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22629
22618: POP
// tech := tech_bazooka ; end ;
22619: LD_ADDR_VAR 0 5
22623: PUSH
22624: LD_INT 44
22626: ST_TO_ADDR
22627: GO 22630
22629: POP
// if Researched ( side , tech ) then
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_VAR 0 5
22639: PPUSH
22640: CALL_OW 325
22644: IFFALSE 22671
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22646: LD_ADDR_VAR 0 2
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 8
22656: PUSH
22657: LD_INT 9
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: LD_VAR 0 4
22669: ARRAY
22670: ST_TO_ADDR
// end ;
22671: LD_VAR 0 2
22675: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
22680: PPUSH
// if not mines then
22681: LD_VAR 0 2
22685: NOT
22686: IFFALSE 22690
// exit ;
22688: GO 22834
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22690: LD_ADDR_VAR 0 5
22694: PUSH
22695: LD_INT 81
22697: PUSH
22698: LD_VAR 0 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 3
22709: PUSH
22710: LD_INT 21
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 69
22732: ST_TO_ADDR
// for i in mines do
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22832
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22746: LD_VAR 0 4
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: PPUSH
22755: LD_VAR 0 4
22759: PUSH
22760: LD_INT 2
22762: ARRAY
22763: PPUSH
22764: CALL_OW 458
22768: NOT
22769: IFFALSE 22773
// continue ;
22771: GO 22743
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22773: LD_VAR 0 4
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: PPUSH
22782: LD_VAR 0 4
22786: PUSH
22787: LD_INT 2
22789: ARRAY
22790: PPUSH
22791: CALL_OW 428
22795: PUSH
22796: LD_VAR 0 5
22800: IN
22801: IFFALSE 22830
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22803: LD_VAR 0 4
22807: PUSH
22808: LD_INT 1
22810: ARRAY
22811: PPUSH
22812: LD_VAR 0 4
22816: PUSH
22817: LD_INT 2
22819: ARRAY
22820: PPUSH
22821: LD_VAR 0 1
22825: PPUSH
22826: CALL_OW 456
// end ;
22830: GO 22743
22832: POP
22833: POP
// end ;
22834: LD_VAR 0 3
22838: RET
// export function Count ( array ) ; var i ; begin
22839: LD_INT 0
22841: PPUSH
22842: PPUSH
// result := 0 ;
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_INT 0
22850: ST_TO_ADDR
// for i in array do
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_VAR 0 1
22860: PUSH
22861: FOR_IN
22862: IFFALSE 22886
// if i then
22864: LD_VAR 0 3
22868: IFFALSE 22884
// result := result + 1 ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: LD_VAR 0 2
22879: PUSH
22880: LD_INT 1
22882: PLUS
22883: ST_TO_ADDR
22884: GO 22861
22886: POP
22887: POP
// end ;
22888: LD_VAR 0 2
22892: RET
// export function IsEmpty ( building ) ; begin
22893: LD_INT 0
22895: PPUSH
// if not building then
22896: LD_VAR 0 1
22900: NOT
22901: IFFALSE 22905
// exit ;
22903: GO 22948
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_VAR 0 1
22914: PUSH
22915: LD_INT 22
22917: PUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 255
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 58
22934: PUSH
22935: EMPTY
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 69
22946: IN
22947: ST_TO_ADDR
// end ;
22948: LD_VAR 0 2
22952: RET
// export function IsNotFull ( building ) ; begin
22953: LD_INT 0
22955: PPUSH
// if not building then
22956: LD_VAR 0 1
22960: NOT
22961: IFFALSE 22965
// exit ;
22963: GO 22984
// result := UnitsInside ( building ) < 6 ;
22965: LD_ADDR_VAR 0 2
22969: PUSH
22970: LD_VAR 0 1
22974: PPUSH
22975: CALL_OW 313
22979: PUSH
22980: LD_INT 6
22982: LESS
22983: ST_TO_ADDR
// end ;
22984: LD_VAR 0 2
22988: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22989: LD_INT 0
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
// tmp := [ ] ;
22995: LD_ADDR_VAR 0 3
22999: PUSH
23000: EMPTY
23001: ST_TO_ADDR
// list := [ ] ;
23002: LD_ADDR_VAR 0 5
23006: PUSH
23007: EMPTY
23008: ST_TO_ADDR
// for i = 16 to 25 do
23009: LD_ADDR_VAR 0 4
23013: PUSH
23014: DOUBLE
23015: LD_INT 16
23017: DEC
23018: ST_TO_ADDR
23019: LD_INT 25
23021: PUSH
23022: FOR_TO
23023: IFFALSE 23096
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_INT 22
23037: PUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 255
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 91
23054: PUSH
23055: LD_VAR 0 1
23059: PUSH
23060: LD_INT 6
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 30
23070: PUSH
23071: LD_VAR 0 4
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: PPUSH
23088: CALL_OW 69
23092: ADD
23093: ST_TO_ADDR
23094: GO 23022
23096: POP
23097: POP
// for i = 1 to tmp do
23098: LD_ADDR_VAR 0 4
23102: PUSH
23103: DOUBLE
23104: LD_INT 1
23106: DEC
23107: ST_TO_ADDR
23108: LD_VAR 0 3
23112: PUSH
23113: FOR_TO
23114: IFFALSE 23202
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23116: LD_ADDR_VAR 0 5
23120: PUSH
23121: LD_VAR 0 5
23125: PUSH
23126: LD_VAR 0 3
23130: PUSH
23131: LD_VAR 0 4
23135: ARRAY
23136: PPUSH
23137: CALL_OW 266
23141: PUSH
23142: LD_VAR 0 3
23146: PUSH
23147: LD_VAR 0 4
23151: ARRAY
23152: PPUSH
23153: CALL_OW 250
23157: PUSH
23158: LD_VAR 0 3
23162: PUSH
23163: LD_VAR 0 4
23167: ARRAY
23168: PPUSH
23169: CALL_OW 251
23173: PUSH
23174: LD_VAR 0 3
23178: PUSH
23179: LD_VAR 0 4
23183: ARRAY
23184: PPUSH
23185: CALL_OW 254
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: ADD
23199: ST_TO_ADDR
23200: GO 23113
23202: POP
23203: POP
// result := list ;
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: LD_VAR 0 5
23213: ST_TO_ADDR
// end ;
23214: LD_VAR 0 2
23218: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23219: LD_INT 0
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
// if not factory then
23228: LD_VAR 0 1
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23830
// if control = control_apeman then
23237: LD_VAR 0 4
23241: PUSH
23242: LD_INT 5
23244: EQUAL
23245: IFFALSE 23354
// begin tmp := UnitsInside ( factory ) ;
23247: LD_ADDR_VAR 0 8
23251: PUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: CALL_OW 313
23261: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23262: LD_VAR 0 8
23266: PPUSH
23267: LD_INT 25
23269: PUSH
23270: LD_INT 12
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PPUSH
23277: CALL_OW 72
23281: NOT
23282: IFFALSE 23292
// control := control_manual ;
23284: LD_ADDR_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23292: LD_ADDR_VAR 0 8
23296: PUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL 22989 0 1
23306: ST_TO_ADDR
// if tmp then
23307: LD_VAR 0 8
23311: IFFALSE 23354
// begin for i in tmp do
23313: LD_ADDR_VAR 0 7
23317: PUSH
23318: LD_VAR 0 8
23322: PUSH
23323: FOR_IN
23324: IFFALSE 23352
// if i [ 1 ] = b_ext_radio then
23326: LD_VAR 0 7
23330: PUSH
23331: LD_INT 1
23333: ARRAY
23334: PUSH
23335: LD_INT 22
23337: EQUAL
23338: IFFALSE 23350
// begin control := control_remote ;
23340: LD_ADDR_VAR 0 4
23344: PUSH
23345: LD_INT 2
23347: ST_TO_ADDR
// break ;
23348: GO 23352
// end ;
23350: GO 23323
23352: POP
23353: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_VAR 0 4
23373: PPUSH
23374: LD_VAR 0 5
23378: PPUSH
23379: CALL_OW 448
23383: IFFALSE 23418
// begin result := [ chassis , engine , control , weapon ] ;
23385: LD_ADDR_VAR 0 6
23389: PUSH
23390: LD_VAR 0 2
23394: PUSH
23395: LD_VAR 0 3
23399: PUSH
23400: LD_VAR 0 4
23404: PUSH
23405: LD_VAR 0 5
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: ST_TO_ADDR
// exit ;
23416: GO 23830
// end ; _chassis := AvailableChassisList ( factory ) ;
23418: LD_ADDR_VAR 0 9
23422: PUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 475
23432: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23433: LD_ADDR_VAR 0 11
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 476
23447: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23448: LD_ADDR_VAR 0 12
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 477
23462: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23463: LD_ADDR_VAR 0 10
23467: PUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 478
23477: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23478: LD_VAR 0 9
23482: NOT
23483: PUSH
23484: LD_VAR 0 11
23488: NOT
23489: OR
23490: PUSH
23491: LD_VAR 0 12
23495: NOT
23496: OR
23497: PUSH
23498: LD_VAR 0 10
23502: NOT
23503: OR
23504: IFFALSE 23539
// begin result := [ chassis , engine , control , weapon ] ;
23506: LD_ADDR_VAR 0 6
23510: PUSH
23511: LD_VAR 0 2
23515: PUSH
23516: LD_VAR 0 3
23520: PUSH
23521: LD_VAR 0 4
23525: PUSH
23526: LD_VAR 0 5
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// exit ;
23537: GO 23830
// end ; if not chassis in _chassis then
23539: LD_VAR 0 2
23543: PUSH
23544: LD_VAR 0 9
23548: IN
23549: NOT
23550: IFFALSE 23576
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23552: LD_ADDR_VAR 0 2
23556: PUSH
23557: LD_VAR 0 9
23561: PUSH
23562: LD_INT 1
23564: PPUSH
23565: LD_VAR 0 9
23569: PPUSH
23570: CALL_OW 12
23574: ARRAY
23575: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_VAR 0 3
23585: PPUSH
23586: CALL 23835 0 2
23590: NOT
23591: IFFALSE 23650
// repeat engine := _engine [ 1 ] ;
23593: LD_ADDR_VAR 0 3
23597: PUSH
23598: LD_VAR 0 11
23602: PUSH
23603: LD_INT 1
23605: ARRAY
23606: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23607: LD_ADDR_VAR 0 11
23611: PUSH
23612: LD_VAR 0 11
23616: PPUSH
23617: LD_INT 1
23619: PPUSH
23620: CALL_OW 3
23624: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23625: LD_VAR 0 2
23629: PPUSH
23630: LD_VAR 0 3
23634: PPUSH
23635: CALL 23835 0 2
23639: PUSH
23640: LD_VAR 0 11
23644: PUSH
23645: EMPTY
23646: EQUAL
23647: OR
23648: IFFALSE 23593
// if not control in _control then
23650: LD_VAR 0 4
23654: PUSH
23655: LD_VAR 0 12
23659: IN
23660: NOT
23661: IFFALSE 23687
// control := _control [ rand ( 1 , _control ) ] ;
23663: LD_ADDR_VAR 0 4
23667: PUSH
23668: LD_VAR 0 12
23672: PUSH
23673: LD_INT 1
23675: PPUSH
23676: LD_VAR 0 12
23680: PPUSH
23681: CALL_OW 12
23685: ARRAY
23686: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_VAR 0 5
23696: PPUSH
23697: CALL 24055 0 2
23701: NOT
23702: IFFALSE 23761
// repeat weapon := _weapon [ 1 ] ;
23704: LD_ADDR_VAR 0 5
23708: PUSH
23709: LD_VAR 0 10
23713: PUSH
23714: LD_INT 1
23716: ARRAY
23717: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23718: LD_ADDR_VAR 0 10
23722: PUSH
23723: LD_VAR 0 10
23727: PPUSH
23728: LD_INT 1
23730: PPUSH
23731: CALL_OW 3
23735: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23736: LD_VAR 0 2
23740: PPUSH
23741: LD_VAR 0 5
23745: PPUSH
23746: CALL 24055 0 2
23750: PUSH
23751: LD_VAR 0 10
23755: PUSH
23756: EMPTY
23757: EQUAL
23758: OR
23759: IFFALSE 23704
// result := [ ] ;
23761: LD_ADDR_VAR 0 6
23765: PUSH
23766: EMPTY
23767: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23768: LD_VAR 0 1
23772: PPUSH
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 3
23782: PPUSH
23783: LD_VAR 0 4
23787: PPUSH
23788: LD_VAR 0 5
23792: PPUSH
23793: CALL_OW 448
23797: IFFALSE 23830
// result := [ chassis , engine , control , weapon ] ;
23799: LD_ADDR_VAR 0 6
23803: PUSH
23804: LD_VAR 0 2
23808: PUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_VAR 0 4
23818: PUSH
23819: LD_VAR 0 5
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// end ;
23830: LD_VAR 0 6
23834: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23835: LD_INT 0
23837: PPUSH
// if not chassis or not engine then
23838: LD_VAR 0 1
23842: NOT
23843: PUSH
23844: LD_VAR 0 2
23848: NOT
23849: OR
23850: IFFALSE 23854
// exit ;
23852: GO 24050
// case engine of engine_solar :
23854: LD_VAR 0 2
23858: PUSH
23859: LD_INT 2
23861: DOUBLE
23862: EQUAL
23863: IFTRUE 23867
23865: GO 23905
23867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23868: LD_ADDR_VAR 0 3
23872: PUSH
23873: LD_INT 11
23875: PUSH
23876: LD_INT 12
23878: PUSH
23879: LD_INT 13
23881: PUSH
23882: LD_INT 14
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: LD_INT 3
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: ST_TO_ADDR
23903: GO 24034
23905: LD_INT 1
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 23975
23913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23914: LD_ADDR_VAR 0 3
23918: PUSH
23919: LD_INT 11
23921: PUSH
23922: LD_INT 12
23924: PUSH
23925: LD_INT 13
23927: PUSH
23928: LD_INT 14
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: LD_INT 4
23942: PUSH
23943: LD_INT 5
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 23
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_INT 24
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: ST_TO_ADDR
23973: GO 24034
23975: LD_INT 3
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 24033
23983: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23984: LD_ADDR_VAR 0 3
23988: PUSH
23989: LD_INT 13
23991: PUSH
23992: LD_INT 14
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 3
24000: PUSH
24001: LD_INT 4
24003: PUSH
24004: LD_INT 5
24006: PUSH
24007: LD_INT 21
24009: PUSH
24010: LD_INT 22
24012: PUSH
24013: LD_INT 23
24015: PUSH
24016: LD_INT 24
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
24031: GO 24034
24033: POP
// result := ( chassis in result ) ;
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_VAR 0 1
24043: PUSH
24044: LD_VAR 0 3
24048: IN
24049: ST_TO_ADDR
// end ;
24050: LD_VAR 0 3
24054: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24055: LD_INT 0
24057: PPUSH
// if not chassis or not weapon then
24058: LD_VAR 0 1
24062: NOT
24063: PUSH
24064: LD_VAR 0 2
24068: NOT
24069: OR
24070: IFFALSE 24074
// exit ;
24072: GO 25100
// case weapon of us_machine_gun :
24074: LD_VAR 0 2
24078: PUSH
24079: LD_INT 2
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24117
24087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24088: LD_ADDR_VAR 0 3
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 3
24101: PUSH
24102: LD_INT 4
24104: PUSH
24105: LD_INT 5
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: ST_TO_ADDR
24115: GO 25084
24117: LD_INT 3
24119: DOUBLE
24120: EQUAL
24121: IFTRUE 24125
24123: GO 24155
24125: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24126: LD_ADDR_VAR 0 3
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: LD_INT 3
24139: PUSH
24140: LD_INT 4
24142: PUSH
24143: LD_INT 5
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
24153: GO 25084
24155: LD_INT 11
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24193
24163: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24164: LD_ADDR_VAR 0 3
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: LD_INT 4
24180: PUSH
24181: LD_INT 5
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: ST_TO_ADDR
24191: GO 25084
24193: LD_INT 4
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24227
24201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 3
24212: PUSH
24213: LD_INT 4
24215: PUSH
24216: LD_INT 5
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: ST_TO_ADDR
24225: GO 25084
24227: LD_INT 5
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24261
24235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 4
24249: PUSH
24250: LD_INT 5
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: ST_TO_ADDR
24259: GO 25084
24261: LD_INT 9
24263: DOUBLE
24264: EQUAL
24265: IFTRUE 24269
24267: GO 24295
24269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24270: LD_ADDR_VAR 0 3
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 4
24283: PUSH
24284: LD_INT 5
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: ST_TO_ADDR
24293: GO 25084
24295: LD_INT 7
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24329
24303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 3
24314: PUSH
24315: LD_INT 4
24317: PUSH
24318: LD_INT 5
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: ST_TO_ADDR
24327: GO 25084
24329: LD_INT 12
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24363
24337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 3
24348: PUSH
24349: LD_INT 4
24351: PUSH
24352: LD_INT 5
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: ST_TO_ADDR
24361: GO 25084
24363: LD_INT 13
24365: DOUBLE
24366: EQUAL
24367: IFTRUE 24371
24369: GO 24397
24371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: LD_INT 4
24385: PUSH
24386: LD_INT 5
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
24395: GO 25084
24397: LD_INT 14
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24405
24403: GO 24423
24405: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24406: LD_ADDR_VAR 0 3
24410: PUSH
24411: LD_INT 4
24413: PUSH
24414: LD_INT 5
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: ST_TO_ADDR
24421: GO 25084
24423: LD_INT 6
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24449
24431: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24432: LD_ADDR_VAR 0 3
24436: PUSH
24437: LD_INT 4
24439: PUSH
24440: LD_INT 5
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: ST_TO_ADDR
24447: GO 25084
24449: LD_INT 10
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24475
24457: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24458: LD_ADDR_VAR 0 3
24462: PUSH
24463: LD_INT 4
24465: PUSH
24466: LD_INT 5
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 25084
24475: LD_INT 22
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24509
24483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 11
24491: PUSH
24492: LD_INT 12
24494: PUSH
24495: LD_INT 13
24497: PUSH
24498: LD_INT 14
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 25084
24509: LD_INT 23
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24543
24517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_INT 11
24525: PUSH
24526: LD_INT 12
24528: PUSH
24529: LD_INT 13
24531: PUSH
24532: LD_INT 14
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
24541: GO 25084
24543: LD_INT 24
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24577
24551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_INT 11
24559: PUSH
24560: LD_INT 12
24562: PUSH
24563: LD_INT 13
24565: PUSH
24566: LD_INT 14
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 25084
24577: LD_INT 30
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24611
24585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 11
24593: PUSH
24594: LD_INT 12
24596: PUSH
24597: LD_INT 13
24599: PUSH
24600: LD_INT 14
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: ST_TO_ADDR
24609: GO 25084
24611: LD_INT 25
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24637
24619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24620: LD_ADDR_VAR 0 3
24624: PUSH
24625: LD_INT 13
24627: PUSH
24628: LD_INT 14
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: ST_TO_ADDR
24635: GO 25084
24637: LD_INT 27
24639: DOUBLE
24640: EQUAL
24641: IFTRUE 24645
24643: GO 24663
24645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_INT 13
24653: PUSH
24654: LD_INT 14
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: ST_TO_ADDR
24661: GO 25084
24663: LD_INT 28
24665: DOUBLE
24666: EQUAL
24667: IFTRUE 24671
24669: GO 24689
24671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 13
24679: PUSH
24680: LD_INT 14
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: ST_TO_ADDR
24687: GO 25084
24689: LD_INT 29
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24715
24697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 13
24705: PUSH
24706: LD_INT 14
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 25084
24715: LD_INT 31
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24741
24723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 13
24731: PUSH
24732: LD_INT 14
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 25084
24741: LD_INT 26
24743: DOUBLE
24744: EQUAL
24745: IFTRUE 24749
24747: GO 24767
24749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: LD_INT 14
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 25084
24767: LD_INT 42
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24801
24775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_INT 23
24789: PUSH
24790: LD_INT 24
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 25084
24801: LD_INT 43
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24835
24809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_INT 21
24817: PUSH
24818: LD_INT 22
24820: PUSH
24821: LD_INT 23
24823: PUSH
24824: LD_INT 24
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: ST_TO_ADDR
24833: GO 25084
24835: LD_INT 44
24837: DOUBLE
24838: EQUAL
24839: IFTRUE 24843
24841: GO 24869
24843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24844: LD_ADDR_VAR 0 3
24848: PUSH
24849: LD_INT 21
24851: PUSH
24852: LD_INT 22
24854: PUSH
24855: LD_INT 23
24857: PUSH
24858: LD_INT 24
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
24867: GO 25084
24869: LD_INT 45
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24903
24877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 21
24885: PUSH
24886: LD_INT 22
24888: PUSH
24889: LD_INT 23
24891: PUSH
24892: LD_INT 24
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
24901: GO 25084
24903: LD_INT 49
24905: DOUBLE
24906: EQUAL
24907: IFTRUE 24911
24909: GO 24937
24911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 21
24919: PUSH
24920: LD_INT 22
24922: PUSH
24923: LD_INT 23
24925: PUSH
24926: LD_INT 24
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
24935: GO 25084
24937: LD_INT 51
24939: DOUBLE
24940: EQUAL
24941: IFTRUE 24945
24943: GO 24971
24945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_INT 21
24953: PUSH
24954: LD_INT 22
24956: PUSH
24957: LD_INT 23
24959: PUSH
24960: LD_INT 24
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: ST_TO_ADDR
24969: GO 25084
24971: LD_INT 52
24973: DOUBLE
24974: EQUAL
24975: IFTRUE 24979
24977: GO 25005
24979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_INT 21
24987: PUSH
24988: LD_INT 22
24990: PUSH
24991: LD_INT 23
24993: PUSH
24994: LD_INT 24
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: ST_TO_ADDR
25003: GO 25084
25005: LD_INT 53
25007: DOUBLE
25008: EQUAL
25009: IFTRUE 25013
25011: GO 25031
25013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: LD_INT 23
25021: PUSH
25022: LD_INT 24
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: ST_TO_ADDR
25029: GO 25084
25031: LD_INT 46
25033: DOUBLE
25034: EQUAL
25035: IFTRUE 25039
25037: GO 25057
25039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25040: LD_ADDR_VAR 0 3
25044: PUSH
25045: LD_INT 23
25047: PUSH
25048: LD_INT 24
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25084
25057: LD_INT 47
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25083
25065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 23
25073: PUSH
25074: LD_INT 24
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25084
25083: POP
// result := ( chassis in result ) ;
25084: LD_ADDR_VAR 0 3
25088: PUSH
25089: LD_VAR 0 1
25093: PUSH
25094: LD_VAR 0 3
25098: IN
25099: ST_TO_ADDR
// end ;
25100: LD_VAR 0 3
25104: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25105: LD_INT 0
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
// result := array ;
25114: LD_ADDR_VAR 0 5
25118: PUSH
25119: LD_VAR 0 1
25123: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25124: LD_VAR 0 1
25128: NOT
25129: PUSH
25130: LD_VAR 0 2
25134: NOT
25135: OR
25136: PUSH
25137: LD_VAR 0 3
25141: NOT
25142: OR
25143: PUSH
25144: LD_VAR 0 2
25148: PUSH
25149: LD_VAR 0 1
25153: GREATER
25154: OR
25155: PUSH
25156: LD_VAR 0 3
25160: PUSH
25161: LD_VAR 0 1
25165: GREATER
25166: OR
25167: IFFALSE 25171
// exit ;
25169: GO 25467
// if direction then
25171: LD_VAR 0 4
25175: IFFALSE 25239
// begin d := 1 ;
25177: LD_ADDR_VAR 0 9
25181: PUSH
25182: LD_INT 1
25184: ST_TO_ADDR
// if i_from > i_to then
25185: LD_VAR 0 2
25189: PUSH
25190: LD_VAR 0 3
25194: GREATER
25195: IFFALSE 25221
// length := ( array - i_from ) + i_to else
25197: LD_ADDR_VAR 0 11
25201: PUSH
25202: LD_VAR 0 1
25206: PUSH
25207: LD_VAR 0 2
25211: MINUS
25212: PUSH
25213: LD_VAR 0 3
25217: PLUS
25218: ST_TO_ADDR
25219: GO 25237
// length := i_to - i_from ;
25221: LD_ADDR_VAR 0 11
25225: PUSH
25226: LD_VAR 0 3
25230: PUSH
25231: LD_VAR 0 2
25235: MINUS
25236: ST_TO_ADDR
// end else
25237: GO 25300
// begin d := - 1 ;
25239: LD_ADDR_VAR 0 9
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: ST_TO_ADDR
// if i_from > i_to then
25248: LD_VAR 0 2
25252: PUSH
25253: LD_VAR 0 3
25257: GREATER
25258: IFFALSE 25278
// length := i_from - i_to else
25260: LD_ADDR_VAR 0 11
25264: PUSH
25265: LD_VAR 0 2
25269: PUSH
25270: LD_VAR 0 3
25274: MINUS
25275: ST_TO_ADDR
25276: GO 25300
// length := ( array - i_to ) + i_from ;
25278: LD_ADDR_VAR 0 11
25282: PUSH
25283: LD_VAR 0 1
25287: PUSH
25288: LD_VAR 0 3
25292: MINUS
25293: PUSH
25294: LD_VAR 0 2
25298: PLUS
25299: ST_TO_ADDR
// end ; if not length then
25300: LD_VAR 0 11
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25467
// tmp := array ;
25309: LD_ADDR_VAR 0 10
25313: PUSH
25314: LD_VAR 0 1
25318: ST_TO_ADDR
// for i = 1 to length do
25319: LD_ADDR_VAR 0 6
25323: PUSH
25324: DOUBLE
25325: LD_INT 1
25327: DEC
25328: ST_TO_ADDR
25329: LD_VAR 0 11
25333: PUSH
25334: FOR_TO
25335: IFFALSE 25455
// begin for j = 1 to array do
25337: LD_ADDR_VAR 0 7
25341: PUSH
25342: DOUBLE
25343: LD_INT 1
25345: DEC
25346: ST_TO_ADDR
25347: LD_VAR 0 1
25351: PUSH
25352: FOR_TO
25353: IFFALSE 25441
// begin k := j + d ;
25355: LD_ADDR_VAR 0 8
25359: PUSH
25360: LD_VAR 0 7
25364: PUSH
25365: LD_VAR 0 9
25369: PLUS
25370: ST_TO_ADDR
// if k > array then
25371: LD_VAR 0 8
25375: PUSH
25376: LD_VAR 0 1
25380: GREATER
25381: IFFALSE 25391
// k := 1 ;
25383: LD_ADDR_VAR 0 8
25387: PUSH
25388: LD_INT 1
25390: ST_TO_ADDR
// if not k then
25391: LD_VAR 0 8
25395: NOT
25396: IFFALSE 25408
// k := array ;
25398: LD_ADDR_VAR 0 8
25402: PUSH
25403: LD_VAR 0 1
25407: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25408: LD_ADDR_VAR 0 10
25412: PUSH
25413: LD_VAR 0 10
25417: PPUSH
25418: LD_VAR 0 8
25422: PPUSH
25423: LD_VAR 0 1
25427: PUSH
25428: LD_VAR 0 7
25432: ARRAY
25433: PPUSH
25434: CALL_OW 1
25438: ST_TO_ADDR
// end ;
25439: GO 25352
25441: POP
25442: POP
// array := tmp ;
25443: LD_ADDR_VAR 0 1
25447: PUSH
25448: LD_VAR 0 10
25452: ST_TO_ADDR
// end ;
25453: GO 25334
25455: POP
25456: POP
// result := array ;
25457: LD_ADDR_VAR 0 5
25461: PUSH
25462: LD_VAR 0 1
25466: ST_TO_ADDR
// end ;
25467: LD_VAR 0 5
25471: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25472: LD_INT 0
25474: PPUSH
25475: PPUSH
// result := 0 ;
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_INT 0
25483: ST_TO_ADDR
// if not array or not value in array then
25484: LD_VAR 0 1
25488: NOT
25489: PUSH
25490: LD_VAR 0 2
25494: PUSH
25495: LD_VAR 0 1
25499: IN
25500: NOT
25501: OR
25502: IFFALSE 25506
// exit ;
25504: GO 25560
// for i = 1 to array do
25506: LD_ADDR_VAR 0 4
25510: PUSH
25511: DOUBLE
25512: LD_INT 1
25514: DEC
25515: ST_TO_ADDR
25516: LD_VAR 0 1
25520: PUSH
25521: FOR_TO
25522: IFFALSE 25558
// if value = array [ i ] then
25524: LD_VAR 0 2
25528: PUSH
25529: LD_VAR 0 1
25533: PUSH
25534: LD_VAR 0 4
25538: ARRAY
25539: EQUAL
25540: IFFALSE 25556
// begin result := i ;
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_VAR 0 4
25551: ST_TO_ADDR
// exit ;
25552: POP
25553: POP
25554: GO 25560
// end ;
25556: GO 25521
25558: POP
25559: POP
// end ;
25560: LD_VAR 0 3
25564: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25565: LD_INT 0
25567: PPUSH
// vc_chassis := chassis ;
25568: LD_ADDR_OWVAR 37
25572: PUSH
25573: LD_VAR 0 1
25577: ST_TO_ADDR
// vc_engine := engine ;
25578: LD_ADDR_OWVAR 39
25582: PUSH
25583: LD_VAR 0 2
25587: ST_TO_ADDR
// vc_control := control ;
25588: LD_ADDR_OWVAR 38
25592: PUSH
25593: LD_VAR 0 3
25597: ST_TO_ADDR
// vc_weapon := weapon ;
25598: LD_ADDR_OWVAR 40
25602: PUSH
25603: LD_VAR 0 4
25607: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25608: LD_ADDR_OWVAR 41
25612: PUSH
25613: LD_VAR 0 5
25617: ST_TO_ADDR
// end ;
25618: LD_VAR 0 6
25622: RET
// export function WantPlant ( unit ) ; var task ; begin
25623: LD_INT 0
25625: PPUSH
25626: PPUSH
// result := false ;
25627: LD_ADDR_VAR 0 2
25631: PUSH
25632: LD_INT 0
25634: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25635: LD_ADDR_VAR 0 3
25639: PUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 437
25649: ST_TO_ADDR
// if task then
25650: LD_VAR 0 3
25654: IFFALSE 25682
// if task [ 1 ] [ 1 ] = p then
25656: LD_VAR 0 3
25660: PUSH
25661: LD_INT 1
25663: ARRAY
25664: PUSH
25665: LD_INT 1
25667: ARRAY
25668: PUSH
25669: LD_STRING p
25671: EQUAL
25672: IFFALSE 25682
// result := true ;
25674: LD_ADDR_VAR 0 2
25678: PUSH
25679: LD_INT 1
25681: ST_TO_ADDR
// end ;
25682: LD_VAR 0 2
25686: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
// if pos < 1 then
25693: LD_VAR 0 2
25697: PUSH
25698: LD_INT 1
25700: LESS
25701: IFFALSE 25705
// exit ;
25703: GO 26008
// if pos = 1 then
25705: LD_VAR 0 2
25709: PUSH
25710: LD_INT 1
25712: EQUAL
25713: IFFALSE 25746
// result := Replace ( arr , pos [ 1 ] , value ) else
25715: LD_ADDR_VAR 0 4
25719: PUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_VAR 0 2
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_VAR 0 3
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
25744: GO 26008
// begin tmp := arr ;
25746: LD_ADDR_VAR 0 6
25750: PUSH
25751: LD_VAR 0 1
25755: ST_TO_ADDR
// s_arr := [ tmp ] ;
25756: LD_ADDR_VAR 0 7
25760: PUSH
25761: LD_VAR 0 6
25765: PUSH
25766: EMPTY
25767: LIST
25768: ST_TO_ADDR
// for i = 1 to pos - 1 do
25769: LD_ADDR_VAR 0 5
25773: PUSH
25774: DOUBLE
25775: LD_INT 1
25777: DEC
25778: ST_TO_ADDR
25779: LD_VAR 0 2
25783: PUSH
25784: LD_INT 1
25786: MINUS
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25834
// begin tmp := tmp [ pos [ i ] ] ;
25791: LD_ADDR_VAR 0 6
25795: PUSH
25796: LD_VAR 0 6
25800: PUSH
25801: LD_VAR 0 2
25805: PUSH
25806: LD_VAR 0 5
25810: ARRAY
25811: ARRAY
25812: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25813: LD_ADDR_VAR 0 7
25817: PUSH
25818: LD_VAR 0 7
25822: PUSH
25823: LD_VAR 0 6
25827: PUSH
25828: EMPTY
25829: LIST
25830: ADD
25831: ST_TO_ADDR
// end ;
25832: GO 25788
25834: POP
25835: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25836: LD_ADDR_VAR 0 6
25840: PUSH
25841: LD_VAR 0 6
25845: PPUSH
25846: LD_VAR 0 2
25850: PUSH
25851: LD_VAR 0 2
25855: ARRAY
25856: PPUSH
25857: LD_VAR 0 3
25861: PPUSH
25862: CALL_OW 1
25866: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25867: LD_ADDR_VAR 0 7
25871: PUSH
25872: LD_VAR 0 7
25876: PPUSH
25877: LD_VAR 0 7
25881: PPUSH
25882: LD_VAR 0 6
25886: PPUSH
25887: CALL_OW 1
25891: ST_TO_ADDR
// for i = s_arr downto 2 do
25892: LD_ADDR_VAR 0 5
25896: PUSH
25897: DOUBLE
25898: LD_VAR 0 7
25902: INC
25903: ST_TO_ADDR
25904: LD_INT 2
25906: PUSH
25907: FOR_DOWNTO
25908: IFFALSE 25992
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25910: LD_ADDR_VAR 0 6
25914: PUSH
25915: LD_VAR 0 7
25919: PUSH
25920: LD_VAR 0 5
25924: PUSH
25925: LD_INT 1
25927: MINUS
25928: ARRAY
25929: PPUSH
25930: LD_VAR 0 2
25934: PUSH
25935: LD_VAR 0 5
25939: PUSH
25940: LD_INT 1
25942: MINUS
25943: ARRAY
25944: PPUSH
25945: LD_VAR 0 7
25949: PUSH
25950: LD_VAR 0 5
25954: ARRAY
25955: PPUSH
25956: CALL_OW 1
25960: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25961: LD_ADDR_VAR 0 7
25965: PUSH
25966: LD_VAR 0 7
25970: PPUSH
25971: LD_VAR 0 5
25975: PUSH
25976: LD_INT 1
25978: MINUS
25979: PPUSH
25980: LD_VAR 0 6
25984: PPUSH
25985: CALL_OW 1
25989: ST_TO_ADDR
// end ;
25990: GO 25907
25992: POP
25993: POP
// result := s_arr [ 1 ] ;
25994: LD_ADDR_VAR 0 4
25998: PUSH
25999: LD_VAR 0 7
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: ST_TO_ADDR
// end ; end ;
26008: LD_VAR 0 4
26012: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
// if not list then
26017: LD_VAR 0 1
26021: NOT
26022: IFFALSE 26026
// exit ;
26024: GO 26117
// i := list [ pos1 ] ;
26026: LD_ADDR_VAR 0 5
26030: PUSH
26031: LD_VAR 0 1
26035: PUSH
26036: LD_VAR 0 2
26040: ARRAY
26041: ST_TO_ADDR
// if not i then
26042: LD_VAR 0 5
26046: NOT
26047: IFFALSE 26051
// exit ;
26049: GO 26117
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26051: LD_ADDR_VAR 0 1
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: LD_VAR 0 2
26065: PPUSH
26066: LD_VAR 0 1
26070: PUSH
26071: LD_VAR 0 3
26075: ARRAY
26076: PPUSH
26077: CALL_OW 1
26081: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26082: LD_ADDR_VAR 0 1
26086: PUSH
26087: LD_VAR 0 1
26091: PPUSH
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_VAR 0 5
26101: PPUSH
26102: CALL_OW 1
26106: ST_TO_ADDR
// result := list ;
26107: LD_ADDR_VAR 0 4
26111: PUSH
26112: LD_VAR 0 1
26116: ST_TO_ADDR
// end ;
26117: LD_VAR 0 4
26121: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26122: LD_INT 0
26124: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26125: LD_ADDR_VAR 0 5
26129: PUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: CALL_OW 250
26139: PPUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 251
26149: PPUSH
26150: LD_VAR 0 2
26154: PPUSH
26155: LD_VAR 0 3
26159: PPUSH
26160: LD_VAR 0 4
26164: PPUSH
26165: CALL 26175 0 5
26169: ST_TO_ADDR
// end ;
26170: LD_VAR 0 5
26174: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26175: LD_INT 0
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
// if not list then
26181: LD_VAR 0 3
26185: NOT
26186: IFFALSE 26190
// exit ;
26188: GO 26578
// result := [ ] ;
26190: LD_ADDR_VAR 0 6
26194: PUSH
26195: EMPTY
26196: ST_TO_ADDR
// for i in list do
26197: LD_ADDR_VAR 0 7
26201: PUSH
26202: LD_VAR 0 3
26206: PUSH
26207: FOR_IN
26208: IFFALSE 26410
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26210: LD_ADDR_VAR 0 9
26214: PUSH
26215: LD_VAR 0 7
26219: PPUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: LD_VAR 0 2
26229: PPUSH
26230: CALL_OW 297
26234: ST_TO_ADDR
// if not result then
26235: LD_VAR 0 6
26239: NOT
26240: IFFALSE 26266
// result := [ [ i , tmp ] ] else
26242: LD_ADDR_VAR 0 6
26246: PUSH
26247: LD_VAR 0 7
26251: PUSH
26252: LD_VAR 0 9
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: ST_TO_ADDR
26264: GO 26408
// begin if result [ result ] [ 2 ] < tmp then
26266: LD_VAR 0 6
26270: PUSH
26271: LD_VAR 0 6
26275: ARRAY
26276: PUSH
26277: LD_INT 2
26279: ARRAY
26280: PUSH
26281: LD_VAR 0 9
26285: LESS
26286: IFFALSE 26328
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26288: LD_ADDR_VAR 0 6
26292: PUSH
26293: LD_VAR 0 6
26297: PPUSH
26298: LD_VAR 0 6
26302: PUSH
26303: LD_INT 1
26305: PLUS
26306: PPUSH
26307: LD_VAR 0 7
26311: PUSH
26312: LD_VAR 0 9
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PPUSH
26321: CALL_OW 2
26325: ST_TO_ADDR
26326: GO 26408
// for j = 1 to result do
26328: LD_ADDR_VAR 0 8
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_VAR 0 6
26342: PUSH
26343: FOR_TO
26344: IFFALSE 26406
// begin if tmp < result [ j ] [ 2 ] then
26346: LD_VAR 0 9
26350: PUSH
26351: LD_VAR 0 6
26355: PUSH
26356: LD_VAR 0 8
26360: ARRAY
26361: PUSH
26362: LD_INT 2
26364: ARRAY
26365: LESS
26366: IFFALSE 26404
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26368: LD_ADDR_VAR 0 6
26372: PUSH
26373: LD_VAR 0 6
26377: PPUSH
26378: LD_VAR 0 8
26382: PPUSH
26383: LD_VAR 0 7
26387: PUSH
26388: LD_VAR 0 9
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PPUSH
26397: CALL_OW 2
26401: ST_TO_ADDR
// break ;
26402: GO 26406
// end ; end ;
26404: GO 26343
26406: POP
26407: POP
// end ; end ;
26408: GO 26207
26410: POP
26411: POP
// if result and not asc then
26412: LD_VAR 0 6
26416: PUSH
26417: LD_VAR 0 4
26421: NOT
26422: AND
26423: IFFALSE 26498
// begin tmp := result ;
26425: LD_ADDR_VAR 0 9
26429: PUSH
26430: LD_VAR 0 6
26434: ST_TO_ADDR
// for i = tmp downto 1 do
26435: LD_ADDR_VAR 0 7
26439: PUSH
26440: DOUBLE
26441: LD_VAR 0 9
26445: INC
26446: ST_TO_ADDR
26447: LD_INT 1
26449: PUSH
26450: FOR_DOWNTO
26451: IFFALSE 26496
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26453: LD_ADDR_VAR 0 6
26457: PUSH
26458: LD_VAR 0 6
26462: PPUSH
26463: LD_VAR 0 9
26467: PUSH
26468: LD_VAR 0 7
26472: MINUS
26473: PUSH
26474: LD_INT 1
26476: PLUS
26477: PPUSH
26478: LD_VAR 0 9
26482: PUSH
26483: LD_VAR 0 7
26487: ARRAY
26488: PPUSH
26489: CALL_OW 1
26493: ST_TO_ADDR
26494: GO 26450
26496: POP
26497: POP
// end ; tmp := [ ] ;
26498: LD_ADDR_VAR 0 9
26502: PUSH
26503: EMPTY
26504: ST_TO_ADDR
// if mode then
26505: LD_VAR 0 5
26509: IFFALSE 26578
// begin for i = 1 to result do
26511: LD_ADDR_VAR 0 7
26515: PUSH
26516: DOUBLE
26517: LD_INT 1
26519: DEC
26520: ST_TO_ADDR
26521: LD_VAR 0 6
26525: PUSH
26526: FOR_TO
26527: IFFALSE 26566
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26529: LD_ADDR_VAR 0 9
26533: PUSH
26534: LD_VAR 0 9
26538: PPUSH
26539: LD_VAR 0 7
26543: PPUSH
26544: LD_VAR 0 6
26548: PUSH
26549: LD_VAR 0 7
26553: ARRAY
26554: PUSH
26555: LD_INT 1
26557: ARRAY
26558: PPUSH
26559: CALL_OW 1
26563: ST_TO_ADDR
26564: GO 26526
26566: POP
26567: POP
// result := tmp ;
26568: LD_ADDR_VAR 0 6
26572: PUSH
26573: LD_VAR 0 9
26577: ST_TO_ADDR
// end ; end ;
26578: LD_VAR 0 6
26582: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
26588: PPUSH
26589: PPUSH
26590: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26591: LD_ADDR_VAR 0 5
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// if not x or not y then
26613: LD_VAR 0 2
26617: NOT
26618: PUSH
26619: LD_VAR 0 3
26623: NOT
26624: OR
26625: IFFALSE 26629
// exit ;
26627: GO 28275
// if not range then
26629: LD_VAR 0 4
26633: NOT
26634: IFFALSE 26644
// range := 10 ;
26636: LD_ADDR_VAR 0 4
26640: PUSH
26641: LD_INT 10
26643: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26644: LD_ADDR_VAR 0 8
26648: PUSH
26649: LD_INT 81
26651: PUSH
26652: LD_VAR 0 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 92
26663: PUSH
26664: LD_VAR 0 2
26668: PUSH
26669: LD_VAR 0 3
26673: PUSH
26674: LD_VAR 0 4
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: LD_INT 21
26690: PUSH
26691: LD_INT 3
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 69
26711: ST_TO_ADDR
// if not tmp then
26712: LD_VAR 0 8
26716: NOT
26717: IFFALSE 26721
// exit ;
26719: GO 28275
// for i in tmp do
26721: LD_ADDR_VAR 0 6
26725: PUSH
26726: LD_VAR 0 8
26730: PUSH
26731: FOR_IN
26732: IFFALSE 28250
// begin points := [ 0 , 0 , 0 ] ;
26734: LD_ADDR_VAR 0 9
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
// bpoints := 1 ;
26753: LD_ADDR_VAR 0 10
26757: PUSH
26758: LD_INT 1
26760: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26761: LD_VAR 0 6
26765: PPUSH
26766: CALL_OW 247
26770: PUSH
26771: LD_INT 1
26773: DOUBLE
26774: EQUAL
26775: IFTRUE 26779
26777: GO 27357
26779: POP
// begin if GetClass ( i ) = 1 then
26780: LD_VAR 0 6
26784: PPUSH
26785: CALL_OW 257
26789: PUSH
26790: LD_INT 1
26792: EQUAL
26793: IFFALSE 26814
// points := [ 10 , 5 , 3 ] ;
26795: LD_ADDR_VAR 0 9
26799: PUSH
26800: LD_INT 10
26802: PUSH
26803: LD_INT 5
26805: PUSH
26806: LD_INT 3
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26814: LD_VAR 0 6
26818: PPUSH
26819: CALL_OW 257
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 3
26829: PUSH
26830: LD_INT 4
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: IN
26838: IFFALSE 26859
// points := [ 3 , 2 , 1 ] ;
26840: LD_ADDR_VAR 0 9
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26859: LD_VAR 0 6
26863: PPUSH
26864: CALL_OW 257
26868: PUSH
26869: LD_INT 5
26871: EQUAL
26872: IFFALSE 26893
// points := [ 130 , 5 , 2 ] ;
26874: LD_ADDR_VAR 0 9
26878: PUSH
26879: LD_INT 130
26881: PUSH
26882: LD_INT 5
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26893: LD_VAR 0 6
26897: PPUSH
26898: CALL_OW 257
26902: PUSH
26903: LD_INT 8
26905: EQUAL
26906: IFFALSE 26927
// points := [ 35 , 35 , 30 ] ;
26908: LD_ADDR_VAR 0 9
26912: PUSH
26913: LD_INT 35
26915: PUSH
26916: LD_INT 35
26918: PUSH
26919: LD_INT 30
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26927: LD_VAR 0 6
26931: PPUSH
26932: CALL_OW 257
26936: PUSH
26937: LD_INT 9
26939: EQUAL
26940: IFFALSE 26961
// points := [ 20 , 55 , 40 ] ;
26942: LD_ADDR_VAR 0 9
26946: PUSH
26947: LD_INT 20
26949: PUSH
26950: LD_INT 55
26952: PUSH
26953: LD_INT 40
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26961: LD_VAR 0 6
26965: PPUSH
26966: CALL_OW 257
26970: PUSH
26971: LD_INT 12
26973: PUSH
26974: LD_INT 16
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: IN
26981: IFFALSE 27002
// points := [ 5 , 3 , 2 ] ;
26983: LD_ADDR_VAR 0 9
26987: PUSH
26988: LD_INT 5
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27002: LD_VAR 0 6
27006: PPUSH
27007: CALL_OW 257
27011: PUSH
27012: LD_INT 17
27014: EQUAL
27015: IFFALSE 27036
// points := [ 100 , 50 , 75 ] ;
27017: LD_ADDR_VAR 0 9
27021: PUSH
27022: LD_INT 100
27024: PUSH
27025: LD_INT 50
27027: PUSH
27028: LD_INT 75
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27036: LD_VAR 0 6
27040: PPUSH
27041: CALL_OW 257
27045: PUSH
27046: LD_INT 15
27048: EQUAL
27049: IFFALSE 27070
// points := [ 10 , 5 , 3 ] ;
27051: LD_ADDR_VAR 0 9
27055: PUSH
27056: LD_INT 10
27058: PUSH
27059: LD_INT 5
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27070: LD_VAR 0 6
27074: PPUSH
27075: CALL_OW 257
27079: PUSH
27080: LD_INT 14
27082: EQUAL
27083: IFFALSE 27104
// points := [ 10 , 0 , 0 ] ;
27085: LD_ADDR_VAR 0 9
27089: PUSH
27090: LD_INT 10
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27104: LD_VAR 0 6
27108: PPUSH
27109: CALL_OW 257
27113: PUSH
27114: LD_INT 11
27116: EQUAL
27117: IFFALSE 27138
// points := [ 30 , 10 , 5 ] ;
27119: LD_ADDR_VAR 0 9
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: LD_INT 10
27129: PUSH
27130: LD_INT 5
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27138: LD_VAR 0 1
27142: PPUSH
27143: LD_INT 5
27145: PPUSH
27146: CALL_OW 321
27150: PUSH
27151: LD_INT 2
27153: EQUAL
27154: IFFALSE 27171
// bpoints := bpoints * 1.8 ;
27156: LD_ADDR_VAR 0 10
27160: PUSH
27161: LD_VAR 0 10
27165: PUSH
27166: LD_REAL  1.80000000000000E+0000
27169: MUL
27170: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27171: LD_VAR 0 6
27175: PPUSH
27176: CALL_OW 257
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: LD_INT 3
27189: PUSH
27190: LD_INT 4
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: IN
27199: PUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_INT 51
27207: PPUSH
27208: CALL_OW 321
27212: PUSH
27213: LD_INT 2
27215: EQUAL
27216: AND
27217: IFFALSE 27234
// bpoints := bpoints * 1.2 ;
27219: LD_ADDR_VAR 0 10
27223: PUSH
27224: LD_VAR 0 10
27228: PUSH
27229: LD_REAL  1.20000000000000E+0000
27232: MUL
27233: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27234: LD_VAR 0 6
27238: PPUSH
27239: CALL_OW 257
27243: PUSH
27244: LD_INT 5
27246: PUSH
27247: LD_INT 7
27249: PUSH
27250: LD_INT 9
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: IN
27258: PUSH
27259: LD_VAR 0 1
27263: PPUSH
27264: LD_INT 52
27266: PPUSH
27267: CALL_OW 321
27271: PUSH
27272: LD_INT 2
27274: EQUAL
27275: AND
27276: IFFALSE 27293
// bpoints := bpoints * 1.5 ;
27278: LD_ADDR_VAR 0 10
27282: PUSH
27283: LD_VAR 0 10
27287: PUSH
27288: LD_REAL  1.50000000000000E+0000
27291: MUL
27292: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_INT 66
27300: PPUSH
27301: CALL_OW 321
27305: PUSH
27306: LD_INT 2
27308: EQUAL
27309: IFFALSE 27326
// bpoints := bpoints * 1.1 ;
27311: LD_ADDR_VAR 0 10
27315: PUSH
27316: LD_VAR 0 10
27320: PUSH
27321: LD_REAL  1.10000000000000E+0000
27324: MUL
27325: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27326: LD_ADDR_VAR 0 10
27330: PUSH
27331: LD_VAR 0 10
27335: PUSH
27336: LD_VAR 0 6
27340: PPUSH
27341: LD_INT 1
27343: PPUSH
27344: CALL_OW 259
27348: PUSH
27349: LD_REAL  1.15000000000000E+0000
27352: MUL
27353: MUL
27354: ST_TO_ADDR
// end ; unit_vehicle :
27355: GO 28179
27357: LD_INT 2
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 28167
27365: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 264
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 42
27381: PUSH
27382: LD_INT 24
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: IN
27390: IFFALSE 27411
// points := [ 25 , 5 , 3 ] ;
27392: LD_ADDR_VAR 0 9
27396: PUSH
27397: LD_INT 25
27399: PUSH
27400: LD_INT 5
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27411: LD_VAR 0 6
27415: PPUSH
27416: CALL_OW 264
27420: PUSH
27421: LD_INT 4
27423: PUSH
27424: LD_INT 43
27426: PUSH
27427: LD_INT 25
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: IN
27435: IFFALSE 27456
// points := [ 40 , 15 , 5 ] ;
27437: LD_ADDR_VAR 0 9
27441: PUSH
27442: LD_INT 40
27444: PUSH
27445: LD_INT 15
27447: PUSH
27448: LD_INT 5
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27456: LD_VAR 0 6
27460: PPUSH
27461: CALL_OW 264
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 23
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: IN
27476: IFFALSE 27497
// points := [ 7 , 25 , 8 ] ;
27478: LD_ADDR_VAR 0 9
27482: PUSH
27483: LD_INT 7
27485: PUSH
27486: LD_INT 25
27488: PUSH
27489: LD_INT 8
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27497: LD_VAR 0 6
27501: PPUSH
27502: CALL_OW 264
27506: PUSH
27507: LD_INT 5
27509: PUSH
27510: LD_INT 27
27512: PUSH
27513: LD_INT 44
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: IN
27521: IFFALSE 27542
// points := [ 14 , 50 , 16 ] ;
27523: LD_ADDR_VAR 0 9
27527: PUSH
27528: LD_INT 14
27530: PUSH
27531: LD_INT 50
27533: PUSH
27534: LD_INT 16
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27542: LD_VAR 0 6
27546: PPUSH
27547: CALL_OW 264
27551: PUSH
27552: LD_INT 6
27554: PUSH
27555: LD_INT 46
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: IN
27562: IFFALSE 27583
// points := [ 32 , 120 , 70 ] ;
27564: LD_ADDR_VAR 0 9
27568: PUSH
27569: LD_INT 32
27571: PUSH
27572: LD_INT 120
27574: PUSH
27575: LD_INT 70
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27583: LD_VAR 0 6
27587: PPUSH
27588: CALL_OW 264
27592: PUSH
27593: LD_INT 7
27595: PUSH
27596: LD_INT 28
27598: PUSH
27599: LD_INT 45
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: IN
27607: IFFALSE 27628
// points := [ 35 , 20 , 45 ] ;
27609: LD_ADDR_VAR 0 9
27613: PUSH
27614: LD_INT 35
27616: PUSH
27617: LD_INT 20
27619: PUSH
27620: LD_INT 45
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 264
27637: PUSH
27638: LD_INT 47
27640: PUSH
27641: EMPTY
27642: LIST
27643: IN
27644: IFFALSE 27665
// points := [ 67 , 45 , 75 ] ;
27646: LD_ADDR_VAR 0 9
27650: PUSH
27651: LD_INT 67
27653: PUSH
27654: LD_INT 45
27656: PUSH
27657: LD_INT 75
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27665: LD_VAR 0 6
27669: PPUSH
27670: CALL_OW 264
27674: PUSH
27675: LD_INT 26
27677: PUSH
27678: EMPTY
27679: LIST
27680: IN
27681: IFFALSE 27702
// points := [ 120 , 30 , 80 ] ;
27683: LD_ADDR_VAR 0 9
27687: PUSH
27688: LD_INT 120
27690: PUSH
27691: LD_INT 30
27693: PUSH
27694: LD_INT 80
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27702: LD_VAR 0 6
27706: PPUSH
27707: CALL_OW 264
27711: PUSH
27712: LD_INT 22
27714: PUSH
27715: EMPTY
27716: LIST
27717: IN
27718: IFFALSE 27739
// points := [ 40 , 1 , 1 ] ;
27720: LD_ADDR_VAR 0 9
27724: PUSH
27725: LD_INT 40
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27739: LD_VAR 0 6
27743: PPUSH
27744: CALL_OW 264
27748: PUSH
27749: LD_INT 29
27751: PUSH
27752: EMPTY
27753: LIST
27754: IN
27755: IFFALSE 27776
// points := [ 70 , 200 , 400 ] ;
27757: LD_ADDR_VAR 0 9
27761: PUSH
27762: LD_INT 70
27764: PUSH
27765: LD_INT 200
27767: PUSH
27768: LD_INT 400
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27776: LD_VAR 0 6
27780: PPUSH
27781: CALL_OW 264
27785: PUSH
27786: LD_INT 14
27788: PUSH
27789: LD_INT 53
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: IN
27796: IFFALSE 27817
// points := [ 40 , 10 , 20 ] ;
27798: LD_ADDR_VAR 0 9
27802: PUSH
27803: LD_INT 40
27805: PUSH
27806: LD_INT 10
27808: PUSH
27809: LD_INT 20
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27817: LD_VAR 0 6
27821: PPUSH
27822: CALL_OW 264
27826: PUSH
27827: LD_INT 9
27829: PUSH
27830: EMPTY
27831: LIST
27832: IN
27833: IFFALSE 27854
// points := [ 5 , 70 , 20 ] ;
27835: LD_ADDR_VAR 0 9
27839: PUSH
27840: LD_INT 5
27842: PUSH
27843: LD_INT 70
27845: PUSH
27846: LD_INT 20
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27854: LD_VAR 0 6
27858: PPUSH
27859: CALL_OW 264
27863: PUSH
27864: LD_INT 10
27866: PUSH
27867: EMPTY
27868: LIST
27869: IN
27870: IFFALSE 27891
// points := [ 35 , 110 , 70 ] ;
27872: LD_ADDR_VAR 0 9
27876: PUSH
27877: LD_INT 35
27879: PUSH
27880: LD_INT 110
27882: PUSH
27883: LD_INT 70
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 265
27900: PUSH
27901: LD_INT 25
27903: EQUAL
27904: IFFALSE 27925
// points := [ 80 , 65 , 100 ] ;
27906: LD_ADDR_VAR 0 9
27910: PUSH
27911: LD_INT 80
27913: PUSH
27914: LD_INT 65
27916: PUSH
27917: LD_INT 100
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27925: LD_VAR 0 6
27929: PPUSH
27930: CALL_OW 263
27934: PUSH
27935: LD_INT 1
27937: EQUAL
27938: IFFALSE 27973
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27940: LD_ADDR_VAR 0 10
27944: PUSH
27945: LD_VAR 0 10
27949: PUSH
27950: LD_VAR 0 6
27954: PPUSH
27955: CALL_OW 311
27959: PPUSH
27960: LD_INT 3
27962: PPUSH
27963: CALL_OW 259
27967: PUSH
27968: LD_INT 4
27970: MUL
27971: MUL
27972: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27973: LD_VAR 0 6
27977: PPUSH
27978: CALL_OW 263
27982: PUSH
27983: LD_INT 2
27985: EQUAL
27986: IFFALSE 28037
// begin j := IsControledBy ( i ) ;
27988: LD_ADDR_VAR 0 7
27992: PUSH
27993: LD_VAR 0 6
27997: PPUSH
27998: CALL_OW 312
28002: ST_TO_ADDR
// if j then
28003: LD_VAR 0 7
28007: IFFALSE 28037
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28009: LD_ADDR_VAR 0 10
28013: PUSH
28014: LD_VAR 0 10
28018: PUSH
28019: LD_VAR 0 7
28023: PPUSH
28024: LD_INT 3
28026: PPUSH
28027: CALL_OW 259
28031: PUSH
28032: LD_INT 3
28034: MUL
28035: MUL
28036: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28037: LD_VAR 0 6
28041: PPUSH
28042: CALL_OW 264
28046: PUSH
28047: LD_INT 5
28049: PUSH
28050: LD_INT 6
28052: PUSH
28053: LD_INT 46
28055: PUSH
28056: LD_INT 44
28058: PUSH
28059: LD_INT 47
28061: PUSH
28062: LD_INT 45
28064: PUSH
28065: LD_INT 28
28067: PUSH
28068: LD_INT 7
28070: PUSH
28071: LD_INT 27
28073: PUSH
28074: LD_INT 29
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: IN
28089: PUSH
28090: LD_VAR 0 1
28094: PPUSH
28095: LD_INT 52
28097: PPUSH
28098: CALL_OW 321
28102: PUSH
28103: LD_INT 2
28105: EQUAL
28106: AND
28107: IFFALSE 28124
// bpoints := bpoints * 1.2 ;
28109: LD_ADDR_VAR 0 10
28113: PUSH
28114: LD_VAR 0 10
28118: PUSH
28119: LD_REAL  1.20000000000000E+0000
28122: MUL
28123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28124: LD_VAR 0 6
28128: PPUSH
28129: CALL_OW 264
28133: PUSH
28134: LD_INT 6
28136: PUSH
28137: LD_INT 46
28139: PUSH
28140: LD_INT 47
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: IN
28148: IFFALSE 28165
// bpoints := bpoints * 1.2 ;
28150: LD_ADDR_VAR 0 10
28154: PUSH
28155: LD_VAR 0 10
28159: PUSH
28160: LD_REAL  1.20000000000000E+0000
28163: MUL
28164: ST_TO_ADDR
// end ; unit_building :
28165: GO 28179
28167: LD_INT 3
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28178
28175: POP
// ; end ;
28176: GO 28179
28178: POP
// for j = 1 to 3 do
28179: LD_ADDR_VAR 0 7
28183: PUSH
28184: DOUBLE
28185: LD_INT 1
28187: DEC
28188: ST_TO_ADDR
28189: LD_INT 3
28191: PUSH
28192: FOR_TO
28193: IFFALSE 28246
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28195: LD_ADDR_VAR 0 5
28199: PUSH
28200: LD_VAR 0 5
28204: PPUSH
28205: LD_VAR 0 7
28209: PPUSH
28210: LD_VAR 0 5
28214: PUSH
28215: LD_VAR 0 7
28219: ARRAY
28220: PUSH
28221: LD_VAR 0 9
28225: PUSH
28226: LD_VAR 0 7
28230: ARRAY
28231: PUSH
28232: LD_VAR 0 10
28236: MUL
28237: PLUS
28238: PPUSH
28239: CALL_OW 1
28243: ST_TO_ADDR
28244: GO 28192
28246: POP
28247: POP
// end ;
28248: GO 26731
28250: POP
28251: POP
// result := Replace ( result , 4 , tmp ) ;
28252: LD_ADDR_VAR 0 5
28256: PUSH
28257: LD_VAR 0 5
28261: PPUSH
28262: LD_INT 4
28264: PPUSH
28265: LD_VAR 0 8
28269: PPUSH
28270: CALL_OW 1
28274: ST_TO_ADDR
// end ;
28275: LD_VAR 0 5
28279: RET
// export function DangerAtRange ( unit , range ) ; begin
28280: LD_INT 0
28282: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 255
28297: PPUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 250
28307: PPUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 251
28317: PPUSH
28318: LD_VAR 0 2
28322: PPUSH
28323: CALL 26583 0 4
28327: ST_TO_ADDR
// end ;
28328: LD_VAR 0 3
28332: RET
// export function DangerInArea ( side , area ) ; begin
28333: LD_INT 0
28335: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_VAR 0 2
28345: PPUSH
28346: LD_INT 81
28348: PUSH
28349: LD_VAR 0 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 70
28362: ST_TO_ADDR
// end ;
28363: LD_VAR 0 3
28367: RET
// export function IsExtension ( b ) ; begin
28368: LD_INT 0
28370: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28371: LD_ADDR_VAR 0 2
28375: PUSH
28376: LD_VAR 0 1
28380: PUSH
28381: LD_INT 23
28383: PUSH
28384: LD_INT 20
28386: PUSH
28387: LD_INT 22
28389: PUSH
28390: LD_INT 17
28392: PUSH
28393: LD_INT 24
28395: PUSH
28396: LD_INT 21
28398: PUSH
28399: LD_INT 19
28401: PUSH
28402: LD_INT 16
28404: PUSH
28405: LD_INT 25
28407: PUSH
28408: LD_INT 18
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: IN
28423: ST_TO_ADDR
// end ;
28424: LD_VAR 0 2
28428: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28429: LD_INT 0
28431: PPUSH
28432: PPUSH
28433: PPUSH
// result := [ ] ;
28434: LD_ADDR_VAR 0 3
28438: PUSH
28439: EMPTY
28440: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28441: LD_ADDR_VAR 0 4
28445: PUSH
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_INT 21
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 70
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 4
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28533
// for i in tmp do
28475: LD_ADDR_VAR 0 5
28479: PUSH
28480: LD_VAR 0 4
28484: PUSH
28485: FOR_IN
28486: IFFALSE 28521
// if GetBase ( i ) <> base then
28488: LD_VAR 0 5
28492: PPUSH
28493: CALL_OW 274
28497: PUSH
28498: LD_VAR 0 1
28502: NONEQUAL
28503: IFFALSE 28519
// ComLinkToBase ( base , i ) ;
28505: LD_VAR 0 1
28509: PPUSH
28510: LD_VAR 0 5
28514: PPUSH
28515: CALL_OW 169
28519: GO 28485
28521: POP
28522: POP
// result := tmp ;
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_VAR 0 4
28532: ST_TO_ADDR
// end ;
28533: LD_VAR 0 3
28537: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28538: LD_INT 0
28540: PPUSH
28541: PPUSH
// if BuildingStatus ( b ) = bs_build then
28542: LD_VAR 0 2
28546: PPUSH
28547: CALL_OW 461
28551: PUSH
28552: LD_INT 1
28554: EQUAL
28555: IFFALSE 28615
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28557: LD_VAR 0 1
28561: PPUSH
28562: LD_STRING h
28564: PUSH
28565: LD_VAR 0 2
28569: PPUSH
28570: CALL_OW 250
28574: PUSH
28575: LD_VAR 0 2
28579: PPUSH
28580: CALL_OW 251
28584: PUSH
28585: LD_VAR 0 2
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: PPUSH
28611: CALL_OW 446
// end ;
28615: LD_VAR 0 3
28619: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28620: LD_INT 0
28622: PPUSH
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
28627: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28628: LD_VAR 0 1
28632: NOT
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 263
28643: PUSH
28644: LD_INT 2
28646: EQUAL
28647: NOT
28648: OR
28649: IFFALSE 28653
// exit ;
28651: GO 28969
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_INT 22
28660: PUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL_OW 255
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 30
28680: PUSH
28681: LD_INT 36
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 34
28690: PUSH
28691: LD_INT 31
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: ST_TO_ADDR
// if not tmp then
28712: LD_VAR 0 6
28716: NOT
28717: IFFALSE 28721
// exit ;
28719: GO 28969
// result := [ ] ;
28721: LD_ADDR_VAR 0 2
28725: PUSH
28726: EMPTY
28727: ST_TO_ADDR
// for i in tmp do
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_VAR 0 6
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28810
// begin t := UnitsInside ( i ) ;
28741: LD_ADDR_VAR 0 4
28745: PUSH
28746: LD_VAR 0 3
28750: PPUSH
28751: CALL_OW 313
28755: ST_TO_ADDR
// if t then
28756: LD_VAR 0 4
28760: IFFALSE 28808
// for j in t do
28762: LD_ADDR_VAR 0 7
28766: PUSH
28767: LD_VAR 0 4
28771: PUSH
28772: FOR_IN
28773: IFFALSE 28806
// result := Insert ( result , result + 1 , j ) ;
28775: LD_ADDR_VAR 0 2
28779: PUSH
28780: LD_VAR 0 2
28784: PPUSH
28785: LD_VAR 0 2
28789: PUSH
28790: LD_INT 1
28792: PLUS
28793: PPUSH
28794: LD_VAR 0 7
28798: PPUSH
28799: CALL_OW 2
28803: ST_TO_ADDR
28804: GO 28772
28806: POP
28807: POP
// end ;
28808: GO 28738
28810: POP
28811: POP
// if not result then
28812: LD_VAR 0 2
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 28969
// mech := result [ 1 ] ;
28821: LD_ADDR_VAR 0 5
28825: PUSH
28826: LD_VAR 0 2
28830: PUSH
28831: LD_INT 1
28833: ARRAY
28834: ST_TO_ADDR
// if result > 1 then
28835: LD_VAR 0 2
28839: PUSH
28840: LD_INT 1
28842: GREATER
28843: IFFALSE 28955
// for i = 2 to result do
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: DOUBLE
28851: LD_INT 2
28853: DEC
28854: ST_TO_ADDR
28855: LD_VAR 0 2
28859: PUSH
28860: FOR_TO
28861: IFFALSE 28953
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28863: LD_ADDR_VAR 0 4
28867: PUSH
28868: LD_VAR 0 2
28872: PUSH
28873: LD_VAR 0 3
28877: ARRAY
28878: PPUSH
28879: LD_INT 3
28881: PPUSH
28882: CALL_OW 259
28886: PUSH
28887: LD_VAR 0 2
28891: PUSH
28892: LD_VAR 0 3
28896: ARRAY
28897: PPUSH
28898: CALL_OW 432
28902: MINUS
28903: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28904: LD_VAR 0 4
28908: PUSH
28909: LD_VAR 0 5
28913: PPUSH
28914: LD_INT 3
28916: PPUSH
28917: CALL_OW 259
28921: PUSH
28922: LD_VAR 0 5
28926: PPUSH
28927: CALL_OW 432
28931: MINUS
28932: GREATEREQUAL
28933: IFFALSE 28951
// mech := result [ i ] ;
28935: LD_ADDR_VAR 0 5
28939: PUSH
28940: LD_VAR 0 2
28944: PUSH
28945: LD_VAR 0 3
28949: ARRAY
28950: ST_TO_ADDR
// end ;
28951: GO 28860
28953: POP
28954: POP
// ComLinkTo ( vehicle , mech ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_VAR 0 5
28964: PPUSH
28965: CALL_OW 135
// end ;
28969: LD_VAR 0 2
28973: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
// result := [ ] ;
28989: LD_ADDR_VAR 0 7
28993: PUSH
28994: EMPTY
28995: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28996: LD_VAR 0 1
29000: PPUSH
29001: CALL_OW 266
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: IN
29016: NOT
29017: IFFALSE 29021
// exit ;
29019: GO 30652
// if name then
29021: LD_VAR 0 3
29025: IFFALSE 29041
// SetBName ( base_dep , name ) ;
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_VAR 0 3
29036: PPUSH
29037: CALL_OW 500
// base := GetBase ( base_dep ) ;
29041: LD_ADDR_VAR 0 15
29045: PUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 274
29055: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29056: LD_ADDR_VAR 0 16
29060: PUSH
29061: LD_VAR 0 1
29065: PPUSH
29066: CALL_OW 255
29070: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29071: LD_ADDR_VAR 0 17
29075: PUSH
29076: LD_VAR 0 1
29080: PPUSH
29081: CALL_OW 248
29085: ST_TO_ADDR
// if sources then
29086: LD_VAR 0 5
29090: IFFALSE 29137
// for i = 1 to 3 do
29092: LD_ADDR_VAR 0 8
29096: PUSH
29097: DOUBLE
29098: LD_INT 1
29100: DEC
29101: ST_TO_ADDR
29102: LD_INT 3
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29135
// AddResourceType ( base , i , sources [ i ] ) ;
29108: LD_VAR 0 15
29112: PPUSH
29113: LD_VAR 0 8
29117: PPUSH
29118: LD_VAR 0 5
29122: PUSH
29123: LD_VAR 0 8
29127: ARRAY
29128: PPUSH
29129: CALL_OW 276
29133: GO 29105
29135: POP
29136: POP
// buildings := GetBaseBuildings ( base , area ) ;
29137: LD_ADDR_VAR 0 18
29141: PUSH
29142: LD_VAR 0 15
29146: PPUSH
29147: LD_VAR 0 2
29151: PPUSH
29152: CALL 28429 0 2
29156: ST_TO_ADDR
// InitHc ;
29157: CALL_OW 19
// InitUc ;
29161: CALL_OW 18
// uc_side := side ;
29165: LD_ADDR_OWVAR 20
29169: PUSH
29170: LD_VAR 0 16
29174: ST_TO_ADDR
// uc_nation := nation ;
29175: LD_ADDR_OWVAR 21
29179: PUSH
29180: LD_VAR 0 17
29184: ST_TO_ADDR
// if buildings then
29185: LD_VAR 0 18
29189: IFFALSE 30511
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29191: LD_ADDR_VAR 0 19
29195: PUSH
29196: LD_VAR 0 18
29200: PPUSH
29201: LD_INT 2
29203: PUSH
29204: LD_INT 30
29206: PUSH
29207: LD_INT 29
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 30
29216: PUSH
29217: LD_INT 30
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: PPUSH
29229: CALL_OW 72
29233: ST_TO_ADDR
// if tmp then
29234: LD_VAR 0 19
29238: IFFALSE 29286
// for i in tmp do
29240: LD_ADDR_VAR 0 8
29244: PUSH
29245: LD_VAR 0 19
29249: PUSH
29250: FOR_IN
29251: IFFALSE 29284
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29253: LD_VAR 0 8
29257: PPUSH
29258: CALL_OW 250
29262: PPUSH
29263: LD_VAR 0 8
29267: PPUSH
29268: CALL_OW 251
29272: PPUSH
29273: LD_VAR 0 16
29277: PPUSH
29278: CALL_OW 441
29282: GO 29250
29284: POP
29285: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29286: LD_VAR 0 18
29290: PPUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 30
29296: PUSH
29297: LD_INT 32
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 30
29306: PUSH
29307: LD_INT 33
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 72
29323: IFFALSE 29411
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29325: LD_ADDR_VAR 0 8
29329: PUSH
29330: LD_VAR 0 18
29334: PPUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 30
29340: PUSH
29341: LD_INT 32
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 30
29350: PUSH
29351: LD_INT 33
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 72
29367: PUSH
29368: FOR_IN
29369: IFFALSE 29409
// begin if not GetBWeapon ( i ) then
29371: LD_VAR 0 8
29375: PPUSH
29376: CALL_OW 269
29380: NOT
29381: IFFALSE 29407
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29383: LD_VAR 0 8
29387: PPUSH
29388: LD_VAR 0 8
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: CALL 30657 0 2
29402: PPUSH
29403: CALL_OW 431
// end ;
29407: GO 29368
29409: POP
29410: POP
// end ; for i = 1 to personel do
29411: LD_ADDR_VAR 0 8
29415: PUSH
29416: DOUBLE
29417: LD_INT 1
29419: DEC
29420: ST_TO_ADDR
29421: LD_VAR 0 6
29425: PUSH
29426: FOR_TO
29427: IFFALSE 30491
// begin if i > 4 then
29429: LD_VAR 0 8
29433: PUSH
29434: LD_INT 4
29436: GREATER
29437: IFFALSE 29441
// break ;
29439: GO 30491
// case i of 1 :
29441: LD_VAR 0 8
29445: PUSH
29446: LD_INT 1
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29454
29452: GO 29534
29454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29455: LD_ADDR_VAR 0 12
29459: PUSH
29460: LD_VAR 0 18
29464: PPUSH
29465: LD_INT 22
29467: PUSH
29468: LD_VAR 0 16
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 58
29479: PUSH
29480: EMPTY
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 30
29488: PUSH
29489: LD_INT 32
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 30
29498: PUSH
29499: LD_INT 4
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 30
29508: PUSH
29509: LD_INT 5
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: PPUSH
29527: CALL_OW 72
29531: ST_TO_ADDR
29532: GO 29756
29534: LD_INT 2
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 29604
29542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29543: LD_ADDR_VAR 0 12
29547: PUSH
29548: LD_VAR 0 18
29552: PPUSH
29553: LD_INT 22
29555: PUSH
29556: LD_VAR 0 16
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PPUSH
29597: CALL_OW 72
29601: ST_TO_ADDR
29602: GO 29756
29604: LD_INT 3
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29612
29610: GO 29674
29612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29613: LD_ADDR_VAR 0 12
29617: PUSH
29618: LD_VAR 0 18
29622: PPUSH
29623: LD_INT 22
29625: PUSH
29626: LD_VAR 0 16
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 30
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 30
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 72
29671: ST_TO_ADDR
29672: GO 29756
29674: LD_INT 4
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29755
29682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29683: LD_ADDR_VAR 0 12
29687: PUSH
29688: LD_VAR 0 18
29692: PPUSH
29693: LD_INT 22
29695: PUSH
29696: LD_VAR 0 16
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 30
29710: PUSH
29711: LD_INT 6
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 30
29720: PUSH
29721: LD_INT 7
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: LD_INT 8
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 72
29752: ST_TO_ADDR
29753: GO 29756
29755: POP
// if i = 1 then
29756: LD_VAR 0 8
29760: PUSH
29761: LD_INT 1
29763: EQUAL
29764: IFFALSE 29875
// begin tmp := [ ] ;
29766: LD_ADDR_VAR 0 19
29770: PUSH
29771: EMPTY
29772: ST_TO_ADDR
// for j in f do
29773: LD_ADDR_VAR 0 9
29777: PUSH
29778: LD_VAR 0 12
29782: PUSH
29783: FOR_IN
29784: IFFALSE 29857
// if GetBType ( j ) = b_bunker then
29786: LD_VAR 0 9
29790: PPUSH
29791: CALL_OW 266
29795: PUSH
29796: LD_INT 32
29798: EQUAL
29799: IFFALSE 29826
// tmp := Insert ( tmp , 1 , j ) else
29801: LD_ADDR_VAR 0 19
29805: PUSH
29806: LD_VAR 0 19
29810: PPUSH
29811: LD_INT 1
29813: PPUSH
29814: LD_VAR 0 9
29818: PPUSH
29819: CALL_OW 2
29823: ST_TO_ADDR
29824: GO 29855
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29826: LD_ADDR_VAR 0 19
29830: PUSH
29831: LD_VAR 0 19
29835: PPUSH
29836: LD_VAR 0 19
29840: PUSH
29841: LD_INT 1
29843: PLUS
29844: PPUSH
29845: LD_VAR 0 9
29849: PPUSH
29850: CALL_OW 2
29854: ST_TO_ADDR
29855: GO 29783
29857: POP
29858: POP
// if tmp then
29859: LD_VAR 0 19
29863: IFFALSE 29875
// f := tmp ;
29865: LD_ADDR_VAR 0 12
29869: PUSH
29870: LD_VAR 0 19
29874: ST_TO_ADDR
// end ; x := personel [ i ] ;
29875: LD_ADDR_VAR 0 13
29879: PUSH
29880: LD_VAR 0 6
29884: PUSH
29885: LD_VAR 0 8
29889: ARRAY
29890: ST_TO_ADDR
// if x = - 1 then
29891: LD_VAR 0 13
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: EQUAL
29900: IFFALSE 30109
// begin for j in f do
29902: LD_ADDR_VAR 0 9
29906: PUSH
29907: LD_VAR 0 12
29911: PUSH
29912: FOR_IN
29913: IFFALSE 30105
// repeat InitHc ;
29915: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29919: LD_VAR 0 9
29923: PPUSH
29924: CALL_OW 266
29928: PUSH
29929: LD_INT 5
29931: EQUAL
29932: IFFALSE 30002
// begin if UnitsInside ( j ) < 3 then
29934: LD_VAR 0 9
29938: PPUSH
29939: CALL_OW 313
29943: PUSH
29944: LD_INT 3
29946: LESS
29947: IFFALSE 29983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29949: LD_INT 0
29951: PPUSH
29952: LD_INT 5
29954: PUSH
29955: LD_INT 8
29957: PUSH
29958: LD_INT 9
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PUSH
29966: LD_VAR 0 17
29970: ARRAY
29971: PPUSH
29972: LD_VAR 0 4
29976: PPUSH
29977: CALL_OW 380
29981: GO 30000
// PrepareHuman ( false , i , skill ) ;
29983: LD_INT 0
29985: PPUSH
29986: LD_VAR 0 8
29990: PPUSH
29991: LD_VAR 0 4
29995: PPUSH
29996: CALL_OW 380
// end else
30000: GO 30019
// PrepareHuman ( false , i , skill ) ;
30002: LD_INT 0
30004: PPUSH
30005: LD_VAR 0 8
30009: PPUSH
30010: LD_VAR 0 4
30014: PPUSH
30015: CALL_OW 380
// un := CreateHuman ;
30019: LD_ADDR_VAR 0 14
30023: PUSH
30024: CALL_OW 44
30028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30029: LD_ADDR_VAR 0 7
30033: PUSH
30034: LD_VAR 0 7
30038: PPUSH
30039: LD_INT 1
30041: PPUSH
30042: LD_VAR 0 14
30046: PPUSH
30047: CALL_OW 2
30051: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30052: LD_VAR 0 14
30056: PPUSH
30057: LD_VAR 0 9
30061: PPUSH
30062: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30066: LD_VAR 0 9
30070: PPUSH
30071: CALL_OW 313
30075: PUSH
30076: LD_INT 6
30078: EQUAL
30079: PUSH
30080: LD_VAR 0 9
30084: PPUSH
30085: CALL_OW 266
30089: PUSH
30090: LD_INT 32
30092: PUSH
30093: LD_INT 31
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: IN
30100: OR
30101: IFFALSE 29915
30103: GO 29912
30105: POP
30106: POP
// end else
30107: GO 30489
// for j = 1 to x do
30109: LD_ADDR_VAR 0 9
30113: PUSH
30114: DOUBLE
30115: LD_INT 1
30117: DEC
30118: ST_TO_ADDR
30119: LD_VAR 0 13
30123: PUSH
30124: FOR_TO
30125: IFFALSE 30487
// begin InitHc ;
30127: CALL_OW 19
// if not f then
30131: LD_VAR 0 12
30135: NOT
30136: IFFALSE 30225
// begin PrepareHuman ( false , i , skill ) ;
30138: LD_INT 0
30140: PPUSH
30141: LD_VAR 0 8
30145: PPUSH
30146: LD_VAR 0 4
30150: PPUSH
30151: CALL_OW 380
// un := CreateHuman ;
30155: LD_ADDR_VAR 0 14
30159: PUSH
30160: CALL_OW 44
30164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30165: LD_ADDR_VAR 0 7
30169: PUSH
30170: LD_VAR 0 7
30174: PPUSH
30175: LD_INT 1
30177: PPUSH
30178: LD_VAR 0 14
30182: PPUSH
30183: CALL_OW 2
30187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30188: LD_VAR 0 14
30192: PPUSH
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 250
30202: PPUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 251
30212: PPUSH
30213: LD_INT 10
30215: PPUSH
30216: LD_INT 0
30218: PPUSH
30219: CALL_OW 50
// continue ;
30223: GO 30124
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30225: LD_VAR 0 12
30229: PUSH
30230: LD_INT 1
30232: ARRAY
30233: PPUSH
30234: CALL_OW 313
30238: PUSH
30239: LD_VAR 0 12
30243: PUSH
30244: LD_INT 1
30246: ARRAY
30247: PPUSH
30248: CALL_OW 266
30252: PUSH
30253: LD_INT 32
30255: PUSH
30256: LD_INT 31
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: IN
30263: AND
30264: PUSH
30265: LD_VAR 0 12
30269: PUSH
30270: LD_INT 1
30272: ARRAY
30273: PPUSH
30274: CALL_OW 313
30278: PUSH
30279: LD_INT 6
30281: EQUAL
30282: OR
30283: IFFALSE 30303
// f := Delete ( f , 1 ) ;
30285: LD_ADDR_VAR 0 12
30289: PUSH
30290: LD_VAR 0 12
30294: PPUSH
30295: LD_INT 1
30297: PPUSH
30298: CALL_OW 3
30302: ST_TO_ADDR
// if not f then
30303: LD_VAR 0 12
30307: NOT
30308: IFFALSE 30326
// begin x := x + 2 ;
30310: LD_ADDR_VAR 0 13
30314: PUSH
30315: LD_VAR 0 13
30319: PUSH
30320: LD_INT 2
30322: PLUS
30323: ST_TO_ADDR
// continue ;
30324: GO 30124
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30326: LD_VAR 0 12
30330: PUSH
30331: LD_INT 1
30333: ARRAY
30334: PPUSH
30335: CALL_OW 266
30339: PUSH
30340: LD_INT 5
30342: EQUAL
30343: IFFALSE 30417
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30345: LD_VAR 0 12
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: CALL_OW 313
30358: PUSH
30359: LD_INT 3
30361: LESS
30362: IFFALSE 30398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30364: LD_INT 0
30366: PPUSH
30367: LD_INT 5
30369: PUSH
30370: LD_INT 8
30372: PUSH
30373: LD_INT 9
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: LD_VAR 0 17
30385: ARRAY
30386: PPUSH
30387: LD_VAR 0 4
30391: PPUSH
30392: CALL_OW 380
30396: GO 30415
// PrepareHuman ( false , i , skill ) ;
30398: LD_INT 0
30400: PPUSH
30401: LD_VAR 0 8
30405: PPUSH
30406: LD_VAR 0 4
30410: PPUSH
30411: CALL_OW 380
// end else
30415: GO 30434
// PrepareHuman ( false , i , skill ) ;
30417: LD_INT 0
30419: PPUSH
30420: LD_VAR 0 8
30424: PPUSH
30425: LD_VAR 0 4
30429: PPUSH
30430: CALL_OW 380
// un := CreateHuman ;
30434: LD_ADDR_VAR 0 14
30438: PUSH
30439: CALL_OW 44
30443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30444: LD_ADDR_VAR 0 7
30448: PUSH
30449: LD_VAR 0 7
30453: PPUSH
30454: LD_INT 1
30456: PPUSH
30457: LD_VAR 0 14
30461: PPUSH
30462: CALL_OW 2
30466: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30467: LD_VAR 0 14
30471: PPUSH
30472: LD_VAR 0 12
30476: PUSH
30477: LD_INT 1
30479: ARRAY
30480: PPUSH
30481: CALL_OW 52
// end ;
30485: GO 30124
30487: POP
30488: POP
// end ;
30489: GO 29426
30491: POP
30492: POP
// result := result ^ buildings ;
30493: LD_ADDR_VAR 0 7
30497: PUSH
30498: LD_VAR 0 7
30502: PUSH
30503: LD_VAR 0 18
30507: ADD
30508: ST_TO_ADDR
// end else
30509: GO 30652
// begin for i = 1 to personel do
30511: LD_ADDR_VAR 0 8
30515: PUSH
30516: DOUBLE
30517: LD_INT 1
30519: DEC
30520: ST_TO_ADDR
30521: LD_VAR 0 6
30525: PUSH
30526: FOR_TO
30527: IFFALSE 30650
// begin if i > 4 then
30529: LD_VAR 0 8
30533: PUSH
30534: LD_INT 4
30536: GREATER
30537: IFFALSE 30541
// break ;
30539: GO 30650
// x := personel [ i ] ;
30541: LD_ADDR_VAR 0 13
30545: PUSH
30546: LD_VAR 0 6
30550: PUSH
30551: LD_VAR 0 8
30555: ARRAY
30556: ST_TO_ADDR
// if x = - 1 then
30557: LD_VAR 0 13
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: EQUAL
30566: IFFALSE 30570
// continue ;
30568: GO 30526
// PrepareHuman ( false , i , skill ) ;
30570: LD_INT 0
30572: PPUSH
30573: LD_VAR 0 8
30577: PPUSH
30578: LD_VAR 0 4
30582: PPUSH
30583: CALL_OW 380
// un := CreateHuman ;
30587: LD_ADDR_VAR 0 14
30591: PUSH
30592: CALL_OW 44
30596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30597: LD_VAR 0 14
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL_OW 250
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 251
30621: PPUSH
30622: LD_INT 10
30624: PPUSH
30625: LD_INT 0
30627: PPUSH
30628: CALL_OW 50
// result := result ^ un ;
30632: LD_ADDR_VAR 0 7
30636: PUSH
30637: LD_VAR 0 7
30641: PUSH
30642: LD_VAR 0 14
30646: ADD
30647: ST_TO_ADDR
// end ;
30648: GO 30526
30650: POP
30651: POP
// end ; end ;
30652: LD_VAR 0 7
30656: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30657: LD_INT 0
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// result := false ;
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 0
30682: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30683: LD_VAR 0 1
30687: NOT
30688: PUSH
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 266
30698: PUSH
30699: LD_INT 32
30701: PUSH
30702: LD_INT 33
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: IN
30709: NOT
30710: OR
30711: IFFALSE 30715
// exit ;
30713: GO 31851
// nat := GetNation ( tower ) ;
30715: LD_ADDR_VAR 0 12
30719: PUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 248
30729: ST_TO_ADDR
// side := GetSide ( tower ) ;
30730: LD_ADDR_VAR 0 16
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 255
30744: ST_TO_ADDR
// x := GetX ( tower ) ;
30745: LD_ADDR_VAR 0 10
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 250
30759: ST_TO_ADDR
// y := GetY ( tower ) ;
30760: LD_ADDR_VAR 0 11
30764: PUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: CALL_OW 251
30774: ST_TO_ADDR
// if not x or not y then
30775: LD_VAR 0 10
30779: NOT
30780: PUSH
30781: LD_VAR 0 11
30785: NOT
30786: OR
30787: IFFALSE 30791
// exit ;
30789: GO 31851
// weapon := 0 ;
30791: LD_ADDR_VAR 0 18
30795: PUSH
30796: LD_INT 0
30798: ST_TO_ADDR
// fac_list := [ ] ;
30799: LD_ADDR_VAR 0 17
30803: PUSH
30804: EMPTY
30805: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30806: LD_ADDR_VAR 0 6
30810: PUSH
30811: LD_VAR 0 1
30815: PPUSH
30816: CALL_OW 274
30820: PPUSH
30821: LD_VAR 0 2
30825: PPUSH
30826: CALL 28429 0 2
30830: PPUSH
30831: LD_INT 30
30833: PUSH
30834: LD_INT 3
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PPUSH
30841: CALL_OW 72
30845: ST_TO_ADDR
// if not factories then
30846: LD_VAR 0 6
30850: NOT
30851: IFFALSE 30855
// exit ;
30853: GO 31851
// for i in factories do
30855: LD_ADDR_VAR 0 8
30859: PUSH
30860: LD_VAR 0 6
30864: PUSH
30865: FOR_IN
30866: IFFALSE 30891
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30868: LD_ADDR_VAR 0 17
30872: PUSH
30873: LD_VAR 0 17
30877: PUSH
30878: LD_VAR 0 8
30882: PPUSH
30883: CALL_OW 478
30887: UNION
30888: ST_TO_ADDR
30889: GO 30865
30891: POP
30892: POP
// if not fac_list then
30893: LD_VAR 0 17
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 31851
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30902: LD_ADDR_VAR 0 5
30906: PUSH
30907: LD_INT 4
30909: PUSH
30910: LD_INT 5
30912: PUSH
30913: LD_INT 9
30915: PUSH
30916: LD_INT 10
30918: PUSH
30919: LD_INT 6
30921: PUSH
30922: LD_INT 7
30924: PUSH
30925: LD_INT 11
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 27
30939: PUSH
30940: LD_INT 28
30942: PUSH
30943: LD_INT 26
30945: PUSH
30946: LD_INT 30
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 43
30957: PUSH
30958: LD_INT 44
30960: PUSH
30961: LD_INT 46
30963: PUSH
30964: LD_INT 45
30966: PUSH
30967: LD_INT 47
30969: PUSH
30970: LD_INT 49
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: PUSH
30986: LD_VAR 0 12
30990: ARRAY
30991: ST_TO_ADDR
// for i in list do
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: LD_VAR 0 5
31001: PUSH
31002: FOR_IN
31003: IFFALSE 31036
// if not i in fac_list then
31005: LD_VAR 0 8
31009: PUSH
31010: LD_VAR 0 17
31014: IN
31015: NOT
31016: IFFALSE 31034
// list := list diff i ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: LD_VAR 0 5
31027: PUSH
31028: LD_VAR 0 8
31032: DIFF
31033: ST_TO_ADDR
31034: GO 31002
31036: POP
31037: POP
// if not list then
31038: LD_VAR 0 5
31042: NOT
31043: IFFALSE 31047
// exit ;
31045: GO 31851
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31047: LD_VAR 0 12
31051: PUSH
31052: LD_INT 3
31054: EQUAL
31055: PUSH
31056: LD_INT 49
31058: PUSH
31059: LD_VAR 0 5
31063: IN
31064: AND
31065: PUSH
31066: LD_INT 31
31068: PPUSH
31069: LD_VAR 0 16
31073: PPUSH
31074: CALL_OW 321
31078: PUSH
31079: LD_INT 2
31081: EQUAL
31082: AND
31083: IFFALSE 31143
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31085: LD_INT 22
31087: PUSH
31088: LD_VAR 0 16
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 35
31099: PUSH
31100: LD_INT 49
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 91
31109: PUSH
31110: LD_VAR 0 1
31114: PUSH
31115: LD_INT 10
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 69
31132: NOT
31133: IFFALSE 31143
// weapon := ru_time_lapser ;
31135: LD_ADDR_VAR 0 18
31139: PUSH
31140: LD_INT 49
31142: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31143: LD_VAR 0 12
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: IN
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_VAR 0 5
31166: IN
31167: PUSH
31168: LD_INT 30
31170: PUSH
31171: LD_VAR 0 5
31175: IN
31176: OR
31177: AND
31178: PUSH
31179: LD_INT 6
31181: PPUSH
31182: LD_VAR 0 16
31186: PPUSH
31187: CALL_OW 321
31191: PUSH
31192: LD_INT 2
31194: EQUAL
31195: AND
31196: IFFALSE 31361
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31198: LD_INT 22
31200: PUSH
31201: LD_VAR 0 16
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 35
31215: PUSH
31216: LD_INT 11
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 35
31225: PUSH
31226: LD_INT 30
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 91
31240: PUSH
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 18
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PPUSH
31259: CALL_OW 69
31263: NOT
31264: PUSH
31265: LD_INT 22
31267: PUSH
31268: LD_VAR 0 16
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 30
31282: PUSH
31283: LD_INT 32
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 30
31292: PUSH
31293: LD_INT 33
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 91
31307: PUSH
31308: LD_VAR 0 1
31312: PUSH
31313: LD_INT 12
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: PPUSH
31329: CALL_OW 69
31333: PUSH
31334: LD_INT 2
31336: GREATER
31337: AND
31338: IFFALSE 31361
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31340: LD_ADDR_VAR 0 18
31344: PUSH
31345: LD_INT 11
31347: PUSH
31348: LD_INT 30
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_VAR 0 12
31359: ARRAY
31360: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31361: LD_VAR 0 18
31365: NOT
31366: PUSH
31367: LD_INT 40
31369: PPUSH
31370: LD_VAR 0 16
31374: PPUSH
31375: CALL_OW 321
31379: PUSH
31380: LD_INT 2
31382: EQUAL
31383: AND
31384: PUSH
31385: LD_INT 7
31387: PUSH
31388: LD_VAR 0 5
31392: IN
31393: PUSH
31394: LD_INT 28
31396: PUSH
31397: LD_VAR 0 5
31401: IN
31402: OR
31403: PUSH
31404: LD_INT 45
31406: PUSH
31407: LD_VAR 0 5
31411: IN
31412: OR
31413: AND
31414: IFFALSE 31668
// begin hex := GetHexInfo ( x , y ) ;
31416: LD_ADDR_VAR 0 4
31420: PUSH
31421: LD_VAR 0 10
31425: PPUSH
31426: LD_VAR 0 11
31430: PPUSH
31431: CALL_OW 546
31435: ST_TO_ADDR
// if hex [ 1 ] then
31436: LD_VAR 0 4
31440: PUSH
31441: LD_INT 1
31443: ARRAY
31444: IFFALSE 31448
// exit ;
31446: GO 31851
// height := hex [ 2 ] ;
31448: LD_ADDR_VAR 0 15
31452: PUSH
31453: LD_VAR 0 4
31457: PUSH
31458: LD_INT 2
31460: ARRAY
31461: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31462: LD_ADDR_VAR 0 14
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 3
31475: PUSH
31476: LD_INT 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// for i in tmp do
31485: LD_ADDR_VAR 0 8
31489: PUSH
31490: LD_VAR 0 14
31494: PUSH
31495: FOR_IN
31496: IFFALSE 31666
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_VAR 0 10
31507: PPUSH
31508: LD_VAR 0 8
31512: PPUSH
31513: LD_INT 5
31515: PPUSH
31516: CALL_OW 272
31520: PUSH
31521: LD_VAR 0 11
31525: PPUSH
31526: LD_VAR 0 8
31530: PPUSH
31531: LD_INT 5
31533: PPUSH
31534: CALL_OW 273
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31543: LD_VAR 0 9
31547: PUSH
31548: LD_INT 1
31550: ARRAY
31551: PPUSH
31552: LD_VAR 0 9
31556: PUSH
31557: LD_INT 2
31559: ARRAY
31560: PPUSH
31561: CALL_OW 488
31565: IFFALSE 31664
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31567: LD_ADDR_VAR 0 4
31571: PUSH
31572: LD_VAR 0 9
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 9
31585: PUSH
31586: LD_INT 2
31588: ARRAY
31589: PPUSH
31590: CALL_OW 546
31594: ST_TO_ADDR
// if hex [ 1 ] then
31595: LD_VAR 0 4
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: IFFALSE 31607
// continue ;
31605: GO 31495
// h := hex [ 2 ] ;
31607: LD_ADDR_VAR 0 13
31611: PUSH
31612: LD_VAR 0 4
31616: PUSH
31617: LD_INT 2
31619: ARRAY
31620: ST_TO_ADDR
// if h + 7 < height then
31621: LD_VAR 0 13
31625: PUSH
31626: LD_INT 7
31628: PLUS
31629: PUSH
31630: LD_VAR 0 15
31634: LESS
31635: IFFALSE 31664
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31637: LD_ADDR_VAR 0 18
31641: PUSH
31642: LD_INT 7
31644: PUSH
31645: LD_INT 28
31647: PUSH
31648: LD_INT 45
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: LD_VAR 0 12
31660: ARRAY
31661: ST_TO_ADDR
// break ;
31662: GO 31666
// end ; end ; end ;
31664: GO 31495
31666: POP
31667: POP
// end ; if not weapon then
31668: LD_VAR 0 18
31672: NOT
31673: IFFALSE 31733
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31675: LD_ADDR_VAR 0 5
31679: PUSH
31680: LD_VAR 0 5
31684: PUSH
31685: LD_INT 11
31687: PUSH
31688: LD_INT 30
31690: PUSH
31691: LD_INT 49
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: DIFF
31699: ST_TO_ADDR
// if not list then
31700: LD_VAR 0 5
31704: NOT
31705: IFFALSE 31709
// exit ;
31707: GO 31851
// weapon := list [ rand ( 1 , list ) ] ;
31709: LD_ADDR_VAR 0 18
31713: PUSH
31714: LD_VAR 0 5
31718: PUSH
31719: LD_INT 1
31721: PPUSH
31722: LD_VAR 0 5
31726: PPUSH
31727: CALL_OW 12
31731: ARRAY
31732: ST_TO_ADDR
// end ; if weapon then
31733: LD_VAR 0 18
31737: IFFALSE 31851
// begin tmp := CostOfWeapon ( weapon ) ;
31739: LD_ADDR_VAR 0 14
31743: PUSH
31744: LD_VAR 0 18
31748: PPUSH
31749: CALL_OW 451
31753: ST_TO_ADDR
// j := GetBase ( tower ) ;
31754: LD_ADDR_VAR 0 9
31758: PUSH
31759: LD_VAR 0 1
31763: PPUSH
31764: CALL_OW 274
31768: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31769: LD_VAR 0 9
31773: PPUSH
31774: LD_INT 1
31776: PPUSH
31777: CALL_OW 275
31781: PUSH
31782: LD_VAR 0 14
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: GREATEREQUAL
31791: PUSH
31792: LD_VAR 0 9
31796: PPUSH
31797: LD_INT 2
31799: PPUSH
31800: CALL_OW 275
31804: PUSH
31805: LD_VAR 0 14
31809: PUSH
31810: LD_INT 2
31812: ARRAY
31813: GREATEREQUAL
31814: AND
31815: PUSH
31816: LD_VAR 0 9
31820: PPUSH
31821: LD_INT 3
31823: PPUSH
31824: CALL_OW 275
31828: PUSH
31829: LD_VAR 0 14
31833: PUSH
31834: LD_INT 3
31836: ARRAY
31837: GREATEREQUAL
31838: AND
31839: IFFALSE 31851
// result := weapon ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 18
31850: ST_TO_ADDR
// end ; end ;
31851: LD_VAR 0 3
31855: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31856: LD_INT 0
31858: PPUSH
31859: PPUSH
// result := true ;
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_INT 1
31867: ST_TO_ADDR
// if array1 = array2 then
31868: LD_VAR 0 1
31872: PUSH
31873: LD_VAR 0 2
31877: EQUAL
31878: IFFALSE 31938
// begin for i = 1 to array1 do
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: DOUBLE
31886: LD_INT 1
31888: DEC
31889: ST_TO_ADDR
31890: LD_VAR 0 1
31894: PUSH
31895: FOR_TO
31896: IFFALSE 31934
// if array1 [ i ] <> array2 [ i ] then
31898: LD_VAR 0 1
31902: PUSH
31903: LD_VAR 0 4
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 2
31913: PUSH
31914: LD_VAR 0 4
31918: ARRAY
31919: NONEQUAL
31920: IFFALSE 31932
// begin result := false ;
31922: LD_ADDR_VAR 0 3
31926: PUSH
31927: LD_INT 0
31929: ST_TO_ADDR
// break ;
31930: GO 31934
// end ;
31932: GO 31895
31934: POP
31935: POP
// end else
31936: GO 31946
// result := false ;
31938: LD_ADDR_VAR 0 3
31942: PUSH
31943: LD_INT 0
31945: ST_TO_ADDR
// end ;
31946: LD_VAR 0 3
31950: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31951: LD_INT 0
31953: PPUSH
31954: PPUSH
31955: PPUSH
// pom := GetBase ( fac ) ;
31956: LD_ADDR_VAR 0 5
31960: PUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 274
31970: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31971: LD_ADDR_VAR 0 4
31975: PUSH
31976: LD_VAR 0 2
31980: PUSH
31981: LD_INT 1
31983: ARRAY
31984: PPUSH
31985: LD_VAR 0 2
31989: PUSH
31990: LD_INT 2
31992: ARRAY
31993: PPUSH
31994: LD_VAR 0 2
31998: PUSH
31999: LD_INT 3
32001: ARRAY
32002: PPUSH
32003: LD_VAR 0 2
32007: PUSH
32008: LD_INT 4
32010: ARRAY
32011: PPUSH
32012: CALL_OW 449
32016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_VAR 0 5
32026: PPUSH
32027: LD_INT 1
32029: PPUSH
32030: CALL_OW 275
32034: PUSH
32035: LD_VAR 0 4
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: GREATEREQUAL
32044: PUSH
32045: LD_VAR 0 5
32049: PPUSH
32050: LD_INT 2
32052: PPUSH
32053: CALL_OW 275
32057: PUSH
32058: LD_VAR 0 4
32062: PUSH
32063: LD_INT 2
32065: ARRAY
32066: GREATEREQUAL
32067: AND
32068: PUSH
32069: LD_VAR 0 5
32073: PPUSH
32074: LD_INT 3
32076: PPUSH
32077: CALL_OW 275
32081: PUSH
32082: LD_VAR 0 4
32086: PUSH
32087: LD_INT 3
32089: ARRAY
32090: GREATEREQUAL
32091: AND
32092: ST_TO_ADDR
// end ;
32093: LD_VAR 0 3
32097: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
// pom := GetBase ( building ) ;
32104: LD_ADDR_VAR 0 3
32108: PUSH
32109: LD_VAR 0 1
32113: PPUSH
32114: CALL_OW 274
32118: ST_TO_ADDR
// if not pom then
32119: LD_VAR 0 3
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32298
// btype := GetBType ( building ) ;
32128: LD_ADDR_VAR 0 5
32132: PUSH
32133: LD_VAR 0 1
32137: PPUSH
32138: CALL_OW 266
32142: ST_TO_ADDR
// if btype = b_armoury then
32143: LD_VAR 0 5
32147: PUSH
32148: LD_INT 4
32150: EQUAL
32151: IFFALSE 32161
// btype := b_barracks ;
32153: LD_ADDR_VAR 0 5
32157: PUSH
32158: LD_INT 5
32160: ST_TO_ADDR
// if btype = b_depot then
32161: LD_VAR 0 5
32165: PUSH
32166: LD_INT 0
32168: EQUAL
32169: IFFALSE 32179
// btype := b_warehouse ;
32171: LD_ADDR_VAR 0 5
32175: PUSH
32176: LD_INT 1
32178: ST_TO_ADDR
// if btype = b_workshop then
32179: LD_VAR 0 5
32183: PUSH
32184: LD_INT 2
32186: EQUAL
32187: IFFALSE 32197
// btype := b_factory ;
32189: LD_ADDR_VAR 0 5
32193: PUSH
32194: LD_INT 3
32196: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32197: LD_ADDR_VAR 0 4
32201: PUSH
32202: LD_VAR 0 5
32206: PPUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: CALL_OW 248
32216: PPUSH
32217: CALL_OW 450
32221: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32222: LD_ADDR_VAR 0 2
32226: PUSH
32227: LD_VAR 0 3
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: CALL_OW 275
32239: PUSH
32240: LD_VAR 0 4
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: GREATEREQUAL
32249: PUSH
32250: LD_VAR 0 3
32254: PPUSH
32255: LD_INT 2
32257: PPUSH
32258: CALL_OW 275
32262: PUSH
32263: LD_VAR 0 4
32267: PUSH
32268: LD_INT 2
32270: ARRAY
32271: GREATEREQUAL
32272: AND
32273: PUSH
32274: LD_VAR 0 3
32278: PPUSH
32279: LD_INT 3
32281: PPUSH
32282: CALL_OW 275
32286: PUSH
32287: LD_VAR 0 4
32291: PUSH
32292: LD_INT 3
32294: ARRAY
32295: GREATEREQUAL
32296: AND
32297: ST_TO_ADDR
// end ;
32298: LD_VAR 0 2
32302: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32303: LD_INT 0
32305: PPUSH
32306: PPUSH
32307: PPUSH
// pom := GetBase ( building ) ;
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 274
32322: ST_TO_ADDR
// if not pom then
32323: LD_VAR 0 4
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32433
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32332: LD_ADDR_VAR 0 5
32336: PUSH
32337: LD_VAR 0 2
32341: PPUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 248
32351: PPUSH
32352: CALL_OW 450
32356: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: LD_VAR 0 4
32366: PPUSH
32367: LD_INT 1
32369: PPUSH
32370: CALL_OW 275
32374: PUSH
32375: LD_VAR 0 5
32379: PUSH
32380: LD_INT 1
32382: ARRAY
32383: GREATEREQUAL
32384: PUSH
32385: LD_VAR 0 4
32389: PPUSH
32390: LD_INT 2
32392: PPUSH
32393: CALL_OW 275
32397: PUSH
32398: LD_VAR 0 5
32402: PUSH
32403: LD_INT 2
32405: ARRAY
32406: GREATEREQUAL
32407: AND
32408: PUSH
32409: LD_VAR 0 4
32413: PPUSH
32414: LD_INT 3
32416: PPUSH
32417: CALL_OW 275
32421: PUSH
32422: LD_VAR 0 5
32426: PUSH
32427: LD_INT 3
32429: ARRAY
32430: GREATEREQUAL
32431: AND
32432: ST_TO_ADDR
// end ;
32433: LD_VAR 0 3
32437: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32438: LD_INT 0
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
// result := false ;
32450: LD_ADDR_VAR 0 6
32454: PUSH
32455: LD_INT 0
32457: ST_TO_ADDR
// if not base or not btype or not x or not y then
32458: LD_VAR 0 1
32462: NOT
32463: PUSH
32464: LD_VAR 0 2
32468: NOT
32469: OR
32470: PUSH
32471: LD_VAR 0 3
32475: NOT
32476: OR
32477: PUSH
32478: LD_VAR 0 4
32482: NOT
32483: OR
32484: IFFALSE 32488
// exit ;
32486: GO 33097
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32488: LD_ADDR_VAR 0 12
32492: PUSH
32493: LD_VAR 0 2
32497: PPUSH
32498: LD_VAR 0 3
32502: PPUSH
32503: LD_VAR 0 4
32507: PPUSH
32508: LD_VAR 0 5
32512: PPUSH
32513: LD_VAR 0 1
32517: PUSH
32518: LD_INT 1
32520: ARRAY
32521: PPUSH
32522: CALL_OW 248
32526: PPUSH
32527: LD_INT 0
32529: PPUSH
32530: CALL 33934 0 6
32534: ST_TO_ADDR
// if not hexes then
32535: LD_VAR 0 12
32539: NOT
32540: IFFALSE 32544
// exit ;
32542: GO 33097
// for i = 1 to hexes do
32544: LD_ADDR_VAR 0 7
32548: PUSH
32549: DOUBLE
32550: LD_INT 1
32552: DEC
32553: ST_TO_ADDR
32554: LD_VAR 0 12
32558: PUSH
32559: FOR_TO
32560: IFFALSE 33095
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32562: LD_ADDR_VAR 0 11
32566: PUSH
32567: LD_VAR 0 12
32571: PUSH
32572: LD_VAR 0 7
32576: ARRAY
32577: PUSH
32578: LD_INT 1
32580: ARRAY
32581: PPUSH
32582: LD_VAR 0 12
32586: PUSH
32587: LD_VAR 0 7
32591: ARRAY
32592: PUSH
32593: LD_INT 2
32595: ARRAY
32596: PPUSH
32597: CALL_OW 428
32601: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32602: LD_VAR 0 12
32606: PUSH
32607: LD_VAR 0 7
32611: ARRAY
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PPUSH
32617: LD_VAR 0 12
32621: PUSH
32622: LD_VAR 0 7
32626: ARRAY
32627: PUSH
32628: LD_INT 2
32630: ARRAY
32631: PPUSH
32632: CALL_OW 351
32636: PUSH
32637: LD_VAR 0 12
32641: PUSH
32642: LD_VAR 0 7
32646: ARRAY
32647: PUSH
32648: LD_INT 1
32650: ARRAY
32651: PPUSH
32652: LD_VAR 0 12
32656: PUSH
32657: LD_VAR 0 7
32661: ARRAY
32662: PUSH
32663: LD_INT 2
32665: ARRAY
32666: PPUSH
32667: CALL_OW 488
32671: NOT
32672: OR
32673: PUSH
32674: LD_VAR 0 11
32678: PPUSH
32679: CALL_OW 247
32683: PUSH
32684: LD_INT 3
32686: EQUAL
32687: OR
32688: IFFALSE 32694
// exit ;
32690: POP
32691: POP
32692: GO 33097
// if not tmp or not tmp in base then
32694: LD_VAR 0 11
32698: NOT
32699: PUSH
32700: LD_VAR 0 11
32704: PUSH
32705: LD_VAR 0 1
32709: IN
32710: NOT
32711: OR
32712: IFFALSE 32716
// continue ;
32714: GO 32559
// result := true ;
32716: LD_ADDR_VAR 0 6
32720: PUSH
32721: LD_INT 1
32723: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32724: LD_ADDR_VAR 0 15
32728: PUSH
32729: LD_VAR 0 1
32733: PPUSH
32734: LD_INT 22
32736: PUSH
32737: LD_VAR 0 11
32741: PPUSH
32742: CALL_OW 255
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 30
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 30
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PPUSH
32783: CALL_OW 72
32787: ST_TO_ADDR
// if dep then
32788: LD_VAR 0 15
32792: IFFALSE 32928
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32794: LD_ADDR_VAR 0 14
32798: PUSH
32799: LD_VAR 0 15
32803: PUSH
32804: LD_INT 1
32806: ARRAY
32807: PPUSH
32808: CALL_OW 250
32812: PPUSH
32813: LD_VAR 0 15
32817: PUSH
32818: LD_INT 1
32820: ARRAY
32821: PPUSH
32822: CALL_OW 254
32826: PPUSH
32827: LD_INT 5
32829: PPUSH
32830: CALL_OW 272
32834: PUSH
32835: LD_VAR 0 15
32839: PUSH
32840: LD_INT 1
32842: ARRAY
32843: PPUSH
32844: CALL_OW 251
32848: PPUSH
32849: LD_VAR 0 15
32853: PUSH
32854: LD_INT 1
32856: ARRAY
32857: PPUSH
32858: CALL_OW 254
32862: PPUSH
32863: LD_INT 5
32865: PPUSH
32866: CALL_OW 273
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32875: LD_VAR 0 14
32879: PUSH
32880: LD_INT 1
32882: ARRAY
32883: PPUSH
32884: LD_VAR 0 14
32888: PUSH
32889: LD_INT 2
32891: ARRAY
32892: PPUSH
32893: CALL_OW 488
32897: IFFALSE 32928
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32899: LD_VAR 0 11
32903: PPUSH
32904: LD_VAR 0 14
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: LD_VAR 0 14
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: PPUSH
32922: CALL_OW 111
// continue ;
32926: GO 32559
// end ; end ; r := GetDir ( tmp ) ;
32928: LD_ADDR_VAR 0 13
32932: PUSH
32933: LD_VAR 0 11
32937: PPUSH
32938: CALL_OW 254
32942: ST_TO_ADDR
// if r = 5 then
32943: LD_VAR 0 13
32947: PUSH
32948: LD_INT 5
32950: EQUAL
32951: IFFALSE 32961
// r := 0 ;
32953: LD_ADDR_VAR 0 13
32957: PUSH
32958: LD_INT 0
32960: ST_TO_ADDR
// for j = r to 5 do
32961: LD_ADDR_VAR 0 8
32965: PUSH
32966: DOUBLE
32967: LD_VAR 0 13
32971: DEC
32972: ST_TO_ADDR
32973: LD_INT 5
32975: PUSH
32976: FOR_TO
32977: IFFALSE 33091
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32979: LD_ADDR_VAR 0 9
32983: PUSH
32984: LD_VAR 0 11
32988: PPUSH
32989: CALL_OW 250
32993: PPUSH
32994: LD_VAR 0 8
32998: PPUSH
32999: LD_INT 2
33001: PPUSH
33002: CALL_OW 272
33006: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33007: LD_ADDR_VAR 0 10
33011: PUSH
33012: LD_VAR 0 11
33016: PPUSH
33017: CALL_OW 251
33021: PPUSH
33022: LD_VAR 0 8
33026: PPUSH
33027: LD_INT 2
33029: PPUSH
33030: CALL_OW 273
33034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33035: LD_VAR 0 9
33039: PPUSH
33040: LD_VAR 0 10
33044: PPUSH
33045: CALL_OW 488
33049: PUSH
33050: LD_VAR 0 9
33054: PPUSH
33055: LD_VAR 0 10
33059: PPUSH
33060: CALL_OW 428
33064: NOT
33065: AND
33066: IFFALSE 33089
// begin ComMoveXY ( tmp , _x , _y ) ;
33068: LD_VAR 0 11
33072: PPUSH
33073: LD_VAR 0 9
33077: PPUSH
33078: LD_VAR 0 10
33082: PPUSH
33083: CALL_OW 111
// break ;
33087: GO 33091
// end ; end ;
33089: GO 32976
33091: POP
33092: POP
// end ;
33093: GO 32559
33095: POP
33096: POP
// end ;
33097: LD_VAR 0 6
33101: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
33113: PPUSH
// result := false ;
33114: LD_ADDR_VAR 0 6
33118: PUSH
33119: LD_INT 0
33121: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33122: LD_VAR 0 1
33126: NOT
33127: PUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL_OW 266
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: IN
33148: NOT
33149: OR
33150: PUSH
33151: LD_VAR 0 2
33155: NOT
33156: OR
33157: PUSH
33158: LD_VAR 0 5
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: IN
33189: NOT
33190: OR
33191: PUSH
33192: LD_VAR 0 3
33196: PPUSH
33197: LD_VAR 0 4
33201: PPUSH
33202: CALL_OW 488
33206: NOT
33207: OR
33208: IFFALSE 33212
// exit ;
33210: GO 33929
// pom := GetBase ( depot ) ;
33212: LD_ADDR_VAR 0 10
33216: PUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 274
33226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: LD_VAR 0 2
33236: PPUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: CALL_OW 248
33246: PPUSH
33247: CALL_OW 450
33251: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33252: LD_VAR 0 10
33256: PPUSH
33257: LD_INT 1
33259: PPUSH
33260: CALL_OW 275
33264: PUSH
33265: LD_VAR 0 11
33269: PUSH
33270: LD_INT 1
33272: ARRAY
33273: GREATEREQUAL
33274: PUSH
33275: LD_VAR 0 10
33279: PPUSH
33280: LD_INT 2
33282: PPUSH
33283: CALL_OW 275
33287: PUSH
33288: LD_VAR 0 11
33292: PUSH
33293: LD_INT 2
33295: ARRAY
33296: GREATEREQUAL
33297: AND
33298: PUSH
33299: LD_VAR 0 10
33303: PPUSH
33304: LD_INT 3
33306: PPUSH
33307: CALL_OW 275
33311: PUSH
33312: LD_VAR 0 11
33316: PUSH
33317: LD_INT 3
33319: ARRAY
33320: GREATEREQUAL
33321: AND
33322: NOT
33323: IFFALSE 33327
// exit ;
33325: GO 33929
// if GetBType ( depot ) = b_depot then
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 266
33336: PUSH
33337: LD_INT 0
33339: EQUAL
33340: IFFALSE 33352
// dist := 28 else
33342: LD_ADDR_VAR 0 14
33346: PUSH
33347: LD_INT 28
33349: ST_TO_ADDR
33350: GO 33360
// dist := 36 ;
33352: LD_ADDR_VAR 0 14
33356: PUSH
33357: LD_INT 36
33359: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33360: LD_VAR 0 1
33364: PPUSH
33365: LD_VAR 0 3
33369: PPUSH
33370: LD_VAR 0 4
33374: PPUSH
33375: CALL_OW 297
33379: PUSH
33380: LD_VAR 0 14
33384: GREATER
33385: IFFALSE 33389
// exit ;
33387: GO 33929
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33389: LD_ADDR_VAR 0 12
33393: PUSH
33394: LD_VAR 0 2
33398: PPUSH
33399: LD_VAR 0 3
33403: PPUSH
33404: LD_VAR 0 4
33408: PPUSH
33409: LD_VAR 0 5
33413: PPUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: CALL_OW 248
33423: PPUSH
33424: LD_INT 0
33426: PPUSH
33427: CALL 33934 0 6
33431: ST_TO_ADDR
// if not hexes then
33432: LD_VAR 0 12
33436: NOT
33437: IFFALSE 33441
// exit ;
33439: GO 33929
// hex := GetHexInfo ( x , y ) ;
33441: LD_ADDR_VAR 0 15
33445: PUSH
33446: LD_VAR 0 3
33450: PPUSH
33451: LD_VAR 0 4
33455: PPUSH
33456: CALL_OW 546
33460: ST_TO_ADDR
// if hex [ 1 ] then
33461: LD_VAR 0 15
33465: PUSH
33466: LD_INT 1
33468: ARRAY
33469: IFFALSE 33473
// exit ;
33471: GO 33929
// height := hex [ 2 ] ;
33473: LD_ADDR_VAR 0 13
33477: PUSH
33478: LD_VAR 0 15
33482: PUSH
33483: LD_INT 2
33485: ARRAY
33486: ST_TO_ADDR
// for i = 1 to hexes do
33487: LD_ADDR_VAR 0 7
33491: PUSH
33492: DOUBLE
33493: LD_INT 1
33495: DEC
33496: ST_TO_ADDR
33497: LD_VAR 0 12
33501: PUSH
33502: FOR_TO
33503: IFFALSE 33833
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33505: LD_VAR 0 12
33509: PUSH
33510: LD_VAR 0 7
33514: ARRAY
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 12
33524: PUSH
33525: LD_VAR 0 7
33529: ARRAY
33530: PUSH
33531: LD_INT 2
33533: ARRAY
33534: PPUSH
33535: CALL_OW 488
33539: NOT
33540: PUSH
33541: LD_VAR 0 12
33545: PUSH
33546: LD_VAR 0 7
33550: ARRAY
33551: PUSH
33552: LD_INT 1
33554: ARRAY
33555: PPUSH
33556: LD_VAR 0 12
33560: PUSH
33561: LD_VAR 0 7
33565: ARRAY
33566: PUSH
33567: LD_INT 2
33569: ARRAY
33570: PPUSH
33571: CALL_OW 428
33575: PUSH
33576: LD_INT 0
33578: GREATER
33579: OR
33580: PUSH
33581: LD_VAR 0 12
33585: PUSH
33586: LD_VAR 0 7
33590: ARRAY
33591: PUSH
33592: LD_INT 1
33594: ARRAY
33595: PPUSH
33596: LD_VAR 0 12
33600: PUSH
33601: LD_VAR 0 7
33605: ARRAY
33606: PUSH
33607: LD_INT 2
33609: ARRAY
33610: PPUSH
33611: CALL_OW 351
33615: OR
33616: IFFALSE 33622
// exit ;
33618: POP
33619: POP
33620: GO 33929
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33622: LD_ADDR_VAR 0 8
33626: PUSH
33627: LD_VAR 0 12
33631: PUSH
33632: LD_VAR 0 7
33636: ARRAY
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 12
33646: PUSH
33647: LD_VAR 0 7
33651: ARRAY
33652: PUSH
33653: LD_INT 2
33655: ARRAY
33656: PPUSH
33657: CALL_OW 546
33661: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33662: LD_VAR 0 8
33666: PUSH
33667: LD_INT 1
33669: ARRAY
33670: PUSH
33671: LD_VAR 0 8
33675: PUSH
33676: LD_INT 2
33678: ARRAY
33679: PUSH
33680: LD_VAR 0 13
33684: PUSH
33685: LD_INT 2
33687: PLUS
33688: GREATER
33689: OR
33690: PUSH
33691: LD_VAR 0 8
33695: PUSH
33696: LD_INT 2
33698: ARRAY
33699: PUSH
33700: LD_VAR 0 13
33704: PUSH
33705: LD_INT 2
33707: MINUS
33708: LESS
33709: OR
33710: PUSH
33711: LD_VAR 0 8
33715: PUSH
33716: LD_INT 3
33718: ARRAY
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: LD_INT 8
33725: PUSH
33726: LD_INT 9
33728: PUSH
33729: LD_INT 10
33731: PUSH
33732: LD_INT 11
33734: PUSH
33735: LD_INT 12
33737: PUSH
33738: LD_INT 13
33740: PUSH
33741: LD_INT 16
33743: PUSH
33744: LD_INT 17
33746: PUSH
33747: LD_INT 18
33749: PUSH
33750: LD_INT 19
33752: PUSH
33753: LD_INT 20
33755: PUSH
33756: LD_INT 21
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: IN
33774: NOT
33775: OR
33776: PUSH
33777: LD_VAR 0 8
33781: PUSH
33782: LD_INT 5
33784: ARRAY
33785: NOT
33786: OR
33787: PUSH
33788: LD_VAR 0 8
33792: PUSH
33793: LD_INT 6
33795: ARRAY
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 7
33805: PUSH
33806: LD_INT 9
33808: PUSH
33809: LD_INT 10
33811: PUSH
33812: LD_INT 11
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: IN
33823: NOT
33824: OR
33825: IFFALSE 33831
// exit ;
33827: POP
33828: POP
33829: GO 33929
// end ;
33831: GO 33502
33833: POP
33834: POP
// side := GetSide ( depot ) ;
33835: LD_ADDR_VAR 0 9
33839: PUSH
33840: LD_VAR 0 1
33844: PPUSH
33845: CALL_OW 255
33849: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33850: LD_VAR 0 9
33854: PPUSH
33855: LD_VAR 0 3
33859: PPUSH
33860: LD_VAR 0 4
33864: PPUSH
33865: LD_INT 20
33867: PPUSH
33868: CALL 26583 0 4
33872: PUSH
33873: LD_INT 4
33875: ARRAY
33876: IFFALSE 33880
// exit ;
33878: GO 33929
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33880: LD_VAR 0 2
33884: PUSH
33885: LD_INT 29
33887: PUSH
33888: LD_INT 30
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: IN
33895: PUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: LD_VAR 0 4
33905: PPUSH
33906: LD_VAR 0 9
33910: PPUSH
33911: CALL_OW 440
33915: NOT
33916: AND
33917: IFFALSE 33921
// exit ;
33919: GO 33929
// result := true ;
33921: LD_ADDR_VAR 0 6
33925: PUSH
33926: LD_INT 1
33928: ST_TO_ADDR
// end ;
33929: LD_VAR 0 6
33933: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
// result = [ ] ;
33994: LD_ADDR_VAR 0 7
33998: PUSH
33999: EMPTY
34000: ST_TO_ADDR
// temp_list = [ ] ;
34001: LD_ADDR_VAR 0 9
34005: PUSH
34006: EMPTY
34007: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34008: LD_VAR 0 4
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: LD_INT 4
34027: PUSH
34028: LD_INT 5
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: IN
34039: NOT
34040: PUSH
34041: LD_VAR 0 1
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: IN
34056: PUSH
34057: LD_VAR 0 5
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: IN
34076: NOT
34077: AND
34078: OR
34079: IFFALSE 34083
// exit ;
34081: GO 52474
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34083: LD_VAR 0 1
34087: PUSH
34088: LD_INT 6
34090: PUSH
34091: LD_INT 7
34093: PUSH
34094: LD_INT 8
34096: PUSH
34097: LD_INT 13
34099: PUSH
34100: LD_INT 12
34102: PUSH
34103: LD_INT 15
34105: PUSH
34106: LD_INT 11
34108: PUSH
34109: LD_INT 14
34111: PUSH
34112: LD_INT 10
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: IN
34126: IFFALSE 34136
// btype = b_lab ;
34128: LD_ADDR_VAR 0 1
34132: PUSH
34133: LD_INT 6
34135: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34136: LD_VAR 0 6
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: IN
34155: NOT
34156: PUSH
34157: LD_VAR 0 1
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 6
34176: PUSH
34177: LD_INT 36
34179: PUSH
34180: LD_INT 4
34182: PUSH
34183: LD_INT 5
34185: PUSH
34186: LD_INT 31
34188: PUSH
34189: LD_INT 32
34191: PUSH
34192: LD_INT 33
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: IN
34208: NOT
34209: PUSH
34210: LD_VAR 0 6
34214: PUSH
34215: LD_INT 1
34217: EQUAL
34218: AND
34219: OR
34220: PUSH
34221: LD_VAR 0 1
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: IN
34236: NOT
34237: PUSH
34238: LD_VAR 0 6
34242: PUSH
34243: LD_INT 2
34245: EQUAL
34246: AND
34247: OR
34248: IFFALSE 34258
// mode = 0 ;
34250: LD_ADDR_VAR 0 6
34254: PUSH
34255: LD_INT 0
34257: ST_TO_ADDR
// case mode of 0 :
34258: LD_VAR 0 6
34262: PUSH
34263: LD_INT 0
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34271
34269: GO 45724
34271: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34272: LD_ADDR_VAR 0 11
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 3
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34465: LD_ADDR_VAR 0 12
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: NEG
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34661: LD_ADDR_VAR 0 13
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 3
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 3
34832: NEG
34833: PUSH
34834: LD_INT 3
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34860: LD_ADDR_VAR 0 14
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 2
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 3
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 3
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35056: LD_ADDR_VAR 0 15
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35249: LD_ADDR_VAR 0 16
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 2
35372: NEG
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35442: LD_ADDR_VAR 0 17
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35672: LD_ADDR_VAR 0 18
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: NEG
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35902: LD_ADDR_VAR 0 19
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36132: LD_ADDR_VAR 0 20
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 2
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36362: LD_ADDR_VAR 0 21
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36592: LD_ADDR_VAR 0 22
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 2
36768: NEG
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36822: LD_ADDR_VAR 0 23
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 3
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37102: LD_ADDR_VAR 0 24
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 3
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 3
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37378: LD_ADDR_VAR 0 25
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37652: LD_ADDR_VAR 0 26
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 3
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37928: LD_ADDR_VAR 0 27
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: NEG
38174: PUSH
38175: LD_INT 2
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38208: LD_ADDR_VAR 0 28
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 3
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 3
38455: NEG
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38490: LD_ADDR_VAR 0 29
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38769: LD_ADDR_VAR 0 30
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 3
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39047: LD_ADDR_VAR 0 31
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: LD_INT 3
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39325: LD_ADDR_VAR 0 32
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39603: LD_ADDR_VAR 0 33
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 3
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39882: LD_ADDR_VAR 0 34
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40162: LD_ADDR_VAR 0 35
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40274: LD_ADDR_VAR 0 36
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40386: LD_ADDR_VAR 0 37
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40498: LD_ADDR_VAR 0 38
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40610: LD_ADDR_VAR 0 39
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40722: LD_ADDR_VAR 0 40
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40834: LD_ADDR_VAR 0 41
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 3
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: LD_INT 3
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41184: LD_ADDR_VAR 0 42
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 3
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 3
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 3
41481: NEG
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: LD_INT 3
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41534: LD_ADDR_VAR 0 43
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: NEG
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41882: LD_ADDR_VAR 0 44
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 3
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 3
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42232: LD_ADDR_VAR 0 45
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 3
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 3
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 3
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: LD_INT 3
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42582: LD_ADDR_VAR 0 46
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42930: LD_ADDR_VAR 0 47
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43081: LD_ADDR_VAR 0 48
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43228: LD_ADDR_VAR 0 49
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43372: LD_ADDR_VAR 0 50
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43516: LD_ADDR_VAR 0 51
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43663: LD_ADDR_VAR 0 52
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43814: LD_ADDR_VAR 0 53
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44044: LD_ADDR_VAR 0 54
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44274: LD_ADDR_VAR 0 55
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44504: LD_ADDR_VAR 0 56
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44734: LD_ADDR_VAR 0 57
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44964: LD_ADDR_VAR 0 58
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45194: LD_ADDR_VAR 0 59
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45282: LD_ADDR_VAR 0 60
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45370: LD_ADDR_VAR 0 61
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45458: LD_ADDR_VAR 0 62
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45546: LD_ADDR_VAR 0 63
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45634: LD_ADDR_VAR 0 64
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// end ; 1 :
45722: GO 51619
45724: LD_INT 1
45726: DOUBLE
45727: EQUAL
45728: IFTRUE 45732
45730: GO 48355
45732: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45733: LD_ADDR_VAR 0 11
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45777: LD_ADDR_VAR 0 12
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45818: LD_ADDR_VAR 0 13
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45858: LD_ADDR_VAR 0 14
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45899: LD_ADDR_VAR 0 15
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45943: LD_ADDR_VAR 0 16
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 3
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45989: LD_ADDR_VAR 0 17
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 3
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46033: LD_ADDR_VAR 0 18
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46074: LD_ADDR_VAR 0 19
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46114: LD_ADDR_VAR 0 20
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46155: LD_ADDR_VAR 0 21
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46199: LD_ADDR_VAR 0 22
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 3
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46245: LD_ADDR_VAR 0 23
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 4
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46289: LD_ADDR_VAR 0 24
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46330: LD_ADDR_VAR 0 25
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 4
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46370: LD_ADDR_VAR 0 26
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 4
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46411: LD_ADDR_VAR 0 27
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 4
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46455: LD_ADDR_VAR 0 28
46459: PUSH
46460: LD_INT 3
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: NEG
46475: PUSH
46476: LD_INT 4
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 4
46486: NEG
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46501: LD_ADDR_VAR 0 29
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 4
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 4
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 5
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 5
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 4
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 6
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 6
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 5
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46656: LD_ADDR_VAR 0 30
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 5
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 5
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 5
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 6
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 6
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46799: LD_ADDR_VAR 0 31
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 4
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 4
46846: PUSH
46847: LD_INT 4
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: LD_INT 4
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 5
46866: PUSH
46867: LD_INT 4
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 5
46876: PUSH
46877: LD_INT 5
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 4
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 6
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 6
46906: PUSH
46907: LD_INT 6
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 5
46916: PUSH
46917: LD_INT 6
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46938: LD_ADDR_VAR 0 32
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 4
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 5
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 5
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 4
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 6
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 6
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 5
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47081: LD_ADDR_VAR 0 33
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 4
47133: NEG
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 4
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 4
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 5
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 5
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 5
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 6
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 6
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47236: LD_ADDR_VAR 0 34
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 4
47291: NEG
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 4
47303: NEG
47304: PUSH
47305: LD_INT 4
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: NEG
47316: PUSH
47317: LD_INT 5
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 5
47327: NEG
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 5
47339: NEG
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 5
47351: NEG
47352: PUSH
47353: LD_INT 6
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 6
47363: NEG
47364: PUSH
47365: LD_INT 5
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 6
47375: NEG
47376: PUSH
47377: LD_INT 6
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47399: LD_ADDR_VAR 0 41
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47443: LD_ADDR_VAR 0 42
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47484: LD_ADDR_VAR 0 43
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47524: LD_ADDR_VAR 0 44
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47565: LD_ADDR_VAR 0 45
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47609: LD_ADDR_VAR 0 46
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47655: LD_ADDR_VAR 0 47
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47688: LD_ADDR_VAR 0 48
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47719: LD_ADDR_VAR 0 49
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47748: LD_ADDR_VAR 0 50
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47777: LD_ADDR_VAR 0 51
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47808: LD_ADDR_VAR 0 52
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 3
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47841: LD_ADDR_VAR 0 53
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47885: LD_ADDR_VAR 0 54
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47926: LD_ADDR_VAR 0 55
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47966: LD_ADDR_VAR 0 56
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48007: LD_ADDR_VAR 0 57
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48051: LD_ADDR_VAR 0 58
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 3
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48097: LD_ADDR_VAR 0 59
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48141: LD_ADDR_VAR 0 60
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48182: LD_ADDR_VAR 0 61
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48222: LD_ADDR_VAR 0 62
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48263: LD_ADDR_VAR 0 63
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48307: LD_ADDR_VAR 0 64
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// end ; 2 :
48353: GO 51619
48355: LD_INT 2
48357: DOUBLE
48358: EQUAL
48359: IFTRUE 48363
48361: GO 51618
48363: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48364: LD_ADDR_VAR 0 29
48368: PUSH
48369: LD_INT 4
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 5
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 5
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 4
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 5
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 4
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 4
48494: PUSH
48495: LD_INT 4
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 4
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 4
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 4
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 4
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 4
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 5
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 5
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 5
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 4
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 4
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 4
48749: NEG
48750: PUSH
48751: LD_INT 4
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 4
48761: NEG
48762: PUSH
48763: LD_INT 5
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: LD_INT 4
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 5
48809: NEG
48810: PUSH
48811: LD_INT 4
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 5
48821: NEG
48822: PUSH
48823: LD_INT 5
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 5
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 5
48845: NEG
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48902: LD_ADDR_VAR 0 30
48906: PUSH
48907: LD_INT 4
48909: PUSH
48910: LD_INT 4
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 4
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 5
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 5
48939: PUSH
48940: LD_INT 5
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 4
48949: PUSH
48950: LD_INT 5
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: LD_INT 4
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 3
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 5
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 5
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 4
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 4
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 4
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 4
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 4
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 4
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 5
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 5
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 5
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: LD_INT 4
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 4
49254: NEG
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 4
49266: NEG
49267: PUSH
49268: LD_INT 4
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 4
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 4
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 5
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 4
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 3
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 4
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 5
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 3
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 5
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49449: LD_ADDR_VAR 0 31
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 4
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 5
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 5
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 4
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 5
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 3
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 4
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 4
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 4
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 4
49651: NEG
49652: PUSH
49653: LD_INT 4
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 4
49663: NEG
49664: PUSH
49665: LD_INT 5
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: NEG
49676: PUSH
49677: LD_INT 4
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 3
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 4
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 5
49711: NEG
49712: PUSH
49713: LD_INT 4
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 5
49723: NEG
49724: PUSH
49725: LD_INT 5
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: LD_INT 5
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 5
49747: NEG
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 4
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 4
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 4
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 4
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 5
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 5
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 4
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49999: LD_ADDR_VAR 0 32
50003: PUSH
50004: LD_INT 4
50006: NEG
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 4
50017: NEG
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 5
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 5
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 3
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 4
50168: NEG
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 4
50180: NEG
50181: PUSH
50182: LD_INT 4
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: LD_INT 4
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 4
50204: NEG
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 4
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 5
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 4
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 4
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 5
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 5
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 4
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 4
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 4
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: LD_INT 4
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 5
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 5
50441: PUSH
50442: LD_INT 5
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: LD_INT 5
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 4
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 5
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50546: LD_ADDR_VAR 0 33
50550: PUSH
50551: LD_INT 4
50553: NEG
50554: PUSH
50555: LD_INT 4
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 4
50565: NEG
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: LD_INT 4
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 4
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 5
50613: NEG
50614: PUSH
50615: LD_INT 4
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 5
50625: NEG
50626: PUSH
50627: LD_INT 5
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 5
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 3
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 4
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 4
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: LD_INT 4
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 4
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 4
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 5
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 5
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 4
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 5
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 4
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 4
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 4
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 4
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 5
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 5
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51084: LD_ADDR_VAR 0 34
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 4
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 4
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 5
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 5
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 4
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 4
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 4
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: LD_INT 4
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 5
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 4
51326: PUSH
51327: LD_INT 5
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: LD_INT 4
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 5
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: LD_INT 5
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 4
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 4
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 4
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 4
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 5
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 5
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// end ; end ;
51616: GO 51619
51618: POP
// case btype of b_depot , b_warehouse :
51619: LD_VAR 0 1
51623: PUSH
51624: LD_INT 0
51626: DOUBLE
51627: EQUAL
51628: IFTRUE 51638
51630: LD_INT 1
51632: DOUBLE
51633: EQUAL
51634: IFTRUE 51638
51636: GO 51839
51638: POP
// case nation of nation_american :
51639: LD_VAR 0 5
51643: PUSH
51644: LD_INT 1
51646: DOUBLE
51647: EQUAL
51648: IFTRUE 51652
51650: GO 51708
51652: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51653: LD_ADDR_VAR 0 9
51657: PUSH
51658: LD_VAR 0 11
51662: PUSH
51663: LD_VAR 0 12
51667: PUSH
51668: LD_VAR 0 13
51672: PUSH
51673: LD_VAR 0 14
51677: PUSH
51678: LD_VAR 0 15
51682: PUSH
51683: LD_VAR 0 16
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 4
51700: PUSH
51701: LD_INT 1
51703: PLUS
51704: ARRAY
51705: ST_TO_ADDR
51706: GO 51837
51708: LD_INT 2
51710: DOUBLE
51711: EQUAL
51712: IFTRUE 51716
51714: GO 51772
51716: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51717: LD_ADDR_VAR 0 9
51721: PUSH
51722: LD_VAR 0 17
51726: PUSH
51727: LD_VAR 0 18
51731: PUSH
51732: LD_VAR 0 19
51736: PUSH
51737: LD_VAR 0 20
51741: PUSH
51742: LD_VAR 0 21
51746: PUSH
51747: LD_VAR 0 22
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: PUSH
51760: LD_VAR 0 4
51764: PUSH
51765: LD_INT 1
51767: PLUS
51768: ARRAY
51769: ST_TO_ADDR
51770: GO 51837
51772: LD_INT 3
51774: DOUBLE
51775: EQUAL
51776: IFTRUE 51780
51778: GO 51836
51780: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51781: LD_ADDR_VAR 0 9
51785: PUSH
51786: LD_VAR 0 23
51790: PUSH
51791: LD_VAR 0 24
51795: PUSH
51796: LD_VAR 0 25
51800: PUSH
51801: LD_VAR 0 26
51805: PUSH
51806: LD_VAR 0 27
51810: PUSH
51811: LD_VAR 0 28
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: PUSH
51824: LD_VAR 0 4
51828: PUSH
51829: LD_INT 1
51831: PLUS
51832: ARRAY
51833: ST_TO_ADDR
51834: GO 51837
51836: POP
51837: GO 52392
51839: LD_INT 2
51841: DOUBLE
51842: EQUAL
51843: IFTRUE 51853
51845: LD_INT 3
51847: DOUBLE
51848: EQUAL
51849: IFTRUE 51853
51851: GO 51909
51853: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51854: LD_ADDR_VAR 0 9
51858: PUSH
51859: LD_VAR 0 29
51863: PUSH
51864: LD_VAR 0 30
51868: PUSH
51869: LD_VAR 0 31
51873: PUSH
51874: LD_VAR 0 32
51878: PUSH
51879: LD_VAR 0 33
51883: PUSH
51884: LD_VAR 0 34
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: PUSH
51897: LD_VAR 0 4
51901: PUSH
51902: LD_INT 1
51904: PLUS
51905: ARRAY
51906: ST_TO_ADDR
51907: GO 52392
51909: LD_INT 16
51911: DOUBLE
51912: EQUAL
51913: IFTRUE 51971
51915: LD_INT 17
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51971
51921: LD_INT 18
51923: DOUBLE
51924: EQUAL
51925: IFTRUE 51971
51927: LD_INT 19
51929: DOUBLE
51930: EQUAL
51931: IFTRUE 51971
51933: LD_INT 22
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51971
51939: LD_INT 20
51941: DOUBLE
51942: EQUAL
51943: IFTRUE 51971
51945: LD_INT 21
51947: DOUBLE
51948: EQUAL
51949: IFTRUE 51971
51951: LD_INT 23
51953: DOUBLE
51954: EQUAL
51955: IFTRUE 51971
51957: LD_INT 24
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51971
51963: LD_INT 25
51965: DOUBLE
51966: EQUAL
51967: IFTRUE 51971
51969: GO 52027
51971: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51972: LD_ADDR_VAR 0 9
51976: PUSH
51977: LD_VAR 0 35
51981: PUSH
51982: LD_VAR 0 36
51986: PUSH
51987: LD_VAR 0 37
51991: PUSH
51992: LD_VAR 0 38
51996: PUSH
51997: LD_VAR 0 39
52001: PUSH
52002: LD_VAR 0 40
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: PUSH
52015: LD_VAR 0 4
52019: PUSH
52020: LD_INT 1
52022: PLUS
52023: ARRAY
52024: ST_TO_ADDR
52025: GO 52392
52027: LD_INT 6
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52083
52033: LD_INT 7
52035: DOUBLE
52036: EQUAL
52037: IFTRUE 52083
52039: LD_INT 8
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52083
52045: LD_INT 13
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52083
52051: LD_INT 12
52053: DOUBLE
52054: EQUAL
52055: IFTRUE 52083
52057: LD_INT 15
52059: DOUBLE
52060: EQUAL
52061: IFTRUE 52083
52063: LD_INT 11
52065: DOUBLE
52066: EQUAL
52067: IFTRUE 52083
52069: LD_INT 14
52071: DOUBLE
52072: EQUAL
52073: IFTRUE 52083
52075: LD_INT 10
52077: DOUBLE
52078: EQUAL
52079: IFTRUE 52083
52081: GO 52139
52083: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52084: LD_ADDR_VAR 0 9
52088: PUSH
52089: LD_VAR 0 41
52093: PUSH
52094: LD_VAR 0 42
52098: PUSH
52099: LD_VAR 0 43
52103: PUSH
52104: LD_VAR 0 44
52108: PUSH
52109: LD_VAR 0 45
52113: PUSH
52114: LD_VAR 0 46
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: LD_VAR 0 4
52131: PUSH
52132: LD_INT 1
52134: PLUS
52135: ARRAY
52136: ST_TO_ADDR
52137: GO 52392
52139: LD_INT 36
52141: DOUBLE
52142: EQUAL
52143: IFTRUE 52147
52145: GO 52203
52147: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52148: LD_ADDR_VAR 0 9
52152: PUSH
52153: LD_VAR 0 47
52157: PUSH
52158: LD_VAR 0 48
52162: PUSH
52163: LD_VAR 0 49
52167: PUSH
52168: LD_VAR 0 50
52172: PUSH
52173: LD_VAR 0 51
52177: PUSH
52178: LD_VAR 0 52
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: PUSH
52191: LD_VAR 0 4
52195: PUSH
52196: LD_INT 1
52198: PLUS
52199: ARRAY
52200: ST_TO_ADDR
52201: GO 52392
52203: LD_INT 4
52205: DOUBLE
52206: EQUAL
52207: IFTRUE 52229
52209: LD_INT 5
52211: DOUBLE
52212: EQUAL
52213: IFTRUE 52229
52215: LD_INT 34
52217: DOUBLE
52218: EQUAL
52219: IFTRUE 52229
52221: LD_INT 37
52223: DOUBLE
52224: EQUAL
52225: IFTRUE 52229
52227: GO 52285
52229: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52230: LD_ADDR_VAR 0 9
52234: PUSH
52235: LD_VAR 0 53
52239: PUSH
52240: LD_VAR 0 54
52244: PUSH
52245: LD_VAR 0 55
52249: PUSH
52250: LD_VAR 0 56
52254: PUSH
52255: LD_VAR 0 57
52259: PUSH
52260: LD_VAR 0 58
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: PUSH
52273: LD_VAR 0 4
52277: PUSH
52278: LD_INT 1
52280: PLUS
52281: ARRAY
52282: ST_TO_ADDR
52283: GO 52392
52285: LD_INT 31
52287: DOUBLE
52288: EQUAL
52289: IFTRUE 52335
52291: LD_INT 32
52293: DOUBLE
52294: EQUAL
52295: IFTRUE 52335
52297: LD_INT 33
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52335
52303: LD_INT 27
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52335
52309: LD_INT 26
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52335
52315: LD_INT 28
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52335
52321: LD_INT 29
52323: DOUBLE
52324: EQUAL
52325: IFTRUE 52335
52327: LD_INT 30
52329: DOUBLE
52330: EQUAL
52331: IFTRUE 52335
52333: GO 52391
52335: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52336: LD_ADDR_VAR 0 9
52340: PUSH
52341: LD_VAR 0 59
52345: PUSH
52346: LD_VAR 0 60
52350: PUSH
52351: LD_VAR 0 61
52355: PUSH
52356: LD_VAR 0 62
52360: PUSH
52361: LD_VAR 0 63
52365: PUSH
52366: LD_VAR 0 64
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: LD_VAR 0 4
52383: PUSH
52384: LD_INT 1
52386: PLUS
52387: ARRAY
52388: ST_TO_ADDR
52389: GO 52392
52391: POP
// temp_list2 = [ ] ;
52392: LD_ADDR_VAR 0 10
52396: PUSH
52397: EMPTY
52398: ST_TO_ADDR
// for i in temp_list do
52399: LD_ADDR_VAR 0 8
52403: PUSH
52404: LD_VAR 0 9
52408: PUSH
52409: FOR_IN
52410: IFFALSE 52462
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52412: LD_ADDR_VAR 0 10
52416: PUSH
52417: LD_VAR 0 10
52421: PUSH
52422: LD_VAR 0 8
52426: PUSH
52427: LD_INT 1
52429: ARRAY
52430: PUSH
52431: LD_VAR 0 2
52435: PLUS
52436: PUSH
52437: LD_VAR 0 8
52441: PUSH
52442: LD_INT 2
52444: ARRAY
52445: PUSH
52446: LD_VAR 0 3
52450: PLUS
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: ADD
52459: ST_TO_ADDR
52460: GO 52409
52462: POP
52463: POP
// result = temp_list2 ;
52464: LD_ADDR_VAR 0 7
52468: PUSH
52469: LD_VAR 0 10
52473: ST_TO_ADDR
// end ;
52474: LD_VAR 0 7
52478: RET
// export function EnemyInRange ( unit , dist ) ; begin
52479: LD_INT 0
52481: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52482: LD_ADDR_VAR 0 3
52486: PUSH
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 255
52496: PPUSH
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 250
52506: PPUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 251
52516: PPUSH
52517: LD_VAR 0 2
52521: PPUSH
52522: CALL 26583 0 4
52526: PUSH
52527: LD_INT 4
52529: ARRAY
52530: ST_TO_ADDR
// end ;
52531: LD_VAR 0 3
52535: RET
// export function PlayerSeeMe ( unit ) ; begin
52536: LD_INT 0
52538: PPUSH
// result := See ( your_side , unit ) ;
52539: LD_ADDR_VAR 0 2
52543: PUSH
52544: LD_OWVAR 2
52548: PPUSH
52549: LD_VAR 0 1
52553: PPUSH
52554: CALL_OW 292
52558: ST_TO_ADDR
// end ;
52559: LD_VAR 0 2
52563: RET
// export function ReverseDir ( unit ) ; begin
52564: LD_INT 0
52566: PPUSH
// if not unit then
52567: LD_VAR 0 1
52571: NOT
52572: IFFALSE 52576
// exit ;
52574: GO 52599
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52576: LD_ADDR_VAR 0 2
52580: PUSH
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 254
52590: PUSH
52591: LD_INT 3
52593: PLUS
52594: PUSH
52595: LD_INT 6
52597: MOD
52598: ST_TO_ADDR
// end ;
52599: LD_VAR 0 2
52603: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52604: LD_INT 0
52606: PPUSH
52607: PPUSH
52608: PPUSH
52609: PPUSH
52610: PPUSH
// if not hexes then
52611: LD_VAR 0 2
52615: NOT
52616: IFFALSE 52620
// exit ;
52618: GO 52768
// dist := 9999 ;
52620: LD_ADDR_VAR 0 5
52624: PUSH
52625: LD_INT 9999
52627: ST_TO_ADDR
// for i = 1 to hexes do
52628: LD_ADDR_VAR 0 4
52632: PUSH
52633: DOUBLE
52634: LD_INT 1
52636: DEC
52637: ST_TO_ADDR
52638: LD_VAR 0 2
52642: PUSH
52643: FOR_TO
52644: IFFALSE 52756
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52646: LD_VAR 0 1
52650: PPUSH
52651: LD_VAR 0 2
52655: PUSH
52656: LD_VAR 0 4
52660: ARRAY
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PPUSH
52666: LD_VAR 0 2
52670: PUSH
52671: LD_VAR 0 4
52675: ARRAY
52676: PUSH
52677: LD_INT 2
52679: ARRAY
52680: PPUSH
52681: CALL_OW 297
52685: PUSH
52686: LD_VAR 0 5
52690: LESS
52691: IFFALSE 52754
// begin hex := hexes [ i ] ;
52693: LD_ADDR_VAR 0 7
52697: PUSH
52698: LD_VAR 0 2
52702: PUSH
52703: LD_VAR 0 4
52707: ARRAY
52708: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52709: LD_ADDR_VAR 0 5
52713: PUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: LD_VAR 0 2
52723: PUSH
52724: LD_VAR 0 4
52728: ARRAY
52729: PUSH
52730: LD_INT 1
52732: ARRAY
52733: PPUSH
52734: LD_VAR 0 2
52738: PUSH
52739: LD_VAR 0 4
52743: ARRAY
52744: PUSH
52745: LD_INT 2
52747: ARRAY
52748: PPUSH
52749: CALL_OW 297
52753: ST_TO_ADDR
// end ; end ;
52754: GO 52643
52756: POP
52757: POP
// result := hex ;
52758: LD_ADDR_VAR 0 3
52762: PUSH
52763: LD_VAR 0 7
52767: ST_TO_ADDR
// end ;
52768: LD_VAR 0 3
52772: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52773: LD_INT 0
52775: PPUSH
52776: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52777: LD_VAR 0 1
52781: NOT
52782: PUSH
52783: LD_VAR 0 1
52787: PUSH
52788: LD_INT 21
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 23
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PPUSH
52812: CALL_OW 69
52816: IN
52817: NOT
52818: OR
52819: IFFALSE 52823
// exit ;
52821: GO 52870
// for i = 1 to 3 do
52823: LD_ADDR_VAR 0 3
52827: PUSH
52828: DOUBLE
52829: LD_INT 1
52831: DEC
52832: ST_TO_ADDR
52833: LD_INT 3
52835: PUSH
52836: FOR_TO
52837: IFFALSE 52868
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 250
52848: PPUSH
52849: LD_VAR 0 1
52853: PPUSH
52854: CALL_OW 251
52858: PPUSH
52859: LD_INT 1
52861: PPUSH
52862: CALL_OW 453
52866: GO 52836
52868: POP
52869: POP
// end ;
52870: LD_VAR 0 2
52874: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52875: LD_INT 0
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
52881: PPUSH
52882: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52883: LD_VAR 0 1
52887: NOT
52888: PUSH
52889: LD_VAR 0 2
52893: NOT
52894: OR
52895: PUSH
52896: LD_VAR 0 1
52900: PPUSH
52901: CALL_OW 314
52905: OR
52906: IFFALSE 52910
// exit ;
52908: GO 53351
// x := GetX ( enemy_unit ) ;
52910: LD_ADDR_VAR 0 7
52914: PUSH
52915: LD_VAR 0 2
52919: PPUSH
52920: CALL_OW 250
52924: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52925: LD_ADDR_VAR 0 8
52929: PUSH
52930: LD_VAR 0 2
52934: PPUSH
52935: CALL_OW 251
52939: ST_TO_ADDR
// if not x or not y then
52940: LD_VAR 0 7
52944: NOT
52945: PUSH
52946: LD_VAR 0 8
52950: NOT
52951: OR
52952: IFFALSE 52956
// exit ;
52954: GO 53351
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52956: LD_ADDR_VAR 0 6
52960: PUSH
52961: LD_VAR 0 7
52965: PPUSH
52966: LD_INT 0
52968: PPUSH
52969: LD_INT 4
52971: PPUSH
52972: CALL_OW 272
52976: PUSH
52977: LD_VAR 0 8
52981: PPUSH
52982: LD_INT 0
52984: PPUSH
52985: LD_INT 4
52987: PPUSH
52988: CALL_OW 273
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_VAR 0 7
53001: PPUSH
53002: LD_INT 1
53004: PPUSH
53005: LD_INT 4
53007: PPUSH
53008: CALL_OW 272
53012: PUSH
53013: LD_VAR 0 8
53017: PPUSH
53018: LD_INT 1
53020: PPUSH
53021: LD_INT 4
53023: PPUSH
53024: CALL_OW 273
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_VAR 0 7
53037: PPUSH
53038: LD_INT 2
53040: PPUSH
53041: LD_INT 4
53043: PPUSH
53044: CALL_OW 272
53048: PUSH
53049: LD_VAR 0 8
53053: PPUSH
53054: LD_INT 2
53056: PPUSH
53057: LD_INT 4
53059: PPUSH
53060: CALL_OW 273
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_VAR 0 7
53073: PPUSH
53074: LD_INT 3
53076: PPUSH
53077: LD_INT 4
53079: PPUSH
53080: CALL_OW 272
53084: PUSH
53085: LD_VAR 0 8
53089: PPUSH
53090: LD_INT 3
53092: PPUSH
53093: LD_INT 4
53095: PPUSH
53096: CALL_OW 273
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_VAR 0 7
53109: PPUSH
53110: LD_INT 4
53112: PPUSH
53113: LD_INT 4
53115: PPUSH
53116: CALL_OW 272
53120: PUSH
53121: LD_VAR 0 8
53125: PPUSH
53126: LD_INT 4
53128: PPUSH
53129: LD_INT 4
53131: PPUSH
53132: CALL_OW 273
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_VAR 0 7
53145: PPUSH
53146: LD_INT 5
53148: PPUSH
53149: LD_INT 4
53151: PPUSH
53152: CALL_OW 272
53156: PUSH
53157: LD_VAR 0 8
53161: PPUSH
53162: LD_INT 5
53164: PPUSH
53165: LD_INT 4
53167: PPUSH
53168: CALL_OW 273
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// for i = tmp downto 1 do
53185: LD_ADDR_VAR 0 4
53189: PUSH
53190: DOUBLE
53191: LD_VAR 0 6
53195: INC
53196: ST_TO_ADDR
53197: LD_INT 1
53199: PUSH
53200: FOR_DOWNTO
53201: IFFALSE 53302
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53203: LD_VAR 0 6
53207: PUSH
53208: LD_VAR 0 4
53212: ARRAY
53213: PUSH
53214: LD_INT 1
53216: ARRAY
53217: PPUSH
53218: LD_VAR 0 6
53222: PUSH
53223: LD_VAR 0 4
53227: ARRAY
53228: PUSH
53229: LD_INT 2
53231: ARRAY
53232: PPUSH
53233: CALL_OW 488
53237: NOT
53238: PUSH
53239: LD_VAR 0 6
53243: PUSH
53244: LD_VAR 0 4
53248: ARRAY
53249: PUSH
53250: LD_INT 1
53252: ARRAY
53253: PPUSH
53254: LD_VAR 0 6
53258: PUSH
53259: LD_VAR 0 4
53263: ARRAY
53264: PUSH
53265: LD_INT 2
53267: ARRAY
53268: PPUSH
53269: CALL_OW 428
53273: PUSH
53274: LD_INT 0
53276: NONEQUAL
53277: OR
53278: IFFALSE 53300
// tmp := Delete ( tmp , i ) ;
53280: LD_ADDR_VAR 0 6
53284: PUSH
53285: LD_VAR 0 6
53289: PPUSH
53290: LD_VAR 0 4
53294: PPUSH
53295: CALL_OW 3
53299: ST_TO_ADDR
53300: GO 53200
53302: POP
53303: POP
// j := GetClosestHex ( unit , tmp ) ;
53304: LD_ADDR_VAR 0 5
53308: PUSH
53309: LD_VAR 0 1
53313: PPUSH
53314: LD_VAR 0 6
53318: PPUSH
53319: CALL 52604 0 2
53323: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53324: LD_VAR 0 1
53328: PPUSH
53329: LD_VAR 0 5
53333: PUSH
53334: LD_INT 1
53336: ARRAY
53337: PPUSH
53338: LD_VAR 0 5
53342: PUSH
53343: LD_INT 2
53345: ARRAY
53346: PPUSH
53347: CALL_OW 111
// end ;
53351: LD_VAR 0 3
53355: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53356: LD_INT 0
53358: PPUSH
53359: PPUSH
53360: PPUSH
// uc_side = 0 ;
53361: LD_ADDR_OWVAR 20
53365: PUSH
53366: LD_INT 0
53368: ST_TO_ADDR
// uc_nation = 0 ;
53369: LD_ADDR_OWVAR 21
53373: PUSH
53374: LD_INT 0
53376: ST_TO_ADDR
// InitHc ;
53377: CALL_OW 19
// InitVc ;
53381: CALL_OW 20
// if mastodonts then
53385: LD_VAR 0 6
53389: IFFALSE 53456
// for i = 1 to mastodonts do
53391: LD_ADDR_VAR 0 11
53395: PUSH
53396: DOUBLE
53397: LD_INT 1
53399: DEC
53400: ST_TO_ADDR
53401: LD_VAR 0 6
53405: PUSH
53406: FOR_TO
53407: IFFALSE 53454
// begin vc_chassis := 31 ;
53409: LD_ADDR_OWVAR 37
53413: PUSH
53414: LD_INT 31
53416: ST_TO_ADDR
// vc_control := control_rider ;
53417: LD_ADDR_OWVAR 38
53421: PUSH
53422: LD_INT 4
53424: ST_TO_ADDR
// animal := CreateVehicle ;
53425: LD_ADDR_VAR 0 12
53429: PUSH
53430: CALL_OW 45
53434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53435: LD_VAR 0 12
53439: PPUSH
53440: LD_VAR 0 8
53444: PPUSH
53445: LD_INT 0
53447: PPUSH
53448: CALL 55644 0 3
// end ;
53452: GO 53406
53454: POP
53455: POP
// if horses then
53456: LD_VAR 0 5
53460: IFFALSE 53527
// for i = 1 to horses do
53462: LD_ADDR_VAR 0 11
53466: PUSH
53467: DOUBLE
53468: LD_INT 1
53470: DEC
53471: ST_TO_ADDR
53472: LD_VAR 0 5
53476: PUSH
53477: FOR_TO
53478: IFFALSE 53525
// begin hc_class := 21 ;
53480: LD_ADDR_OWVAR 28
53484: PUSH
53485: LD_INT 21
53487: ST_TO_ADDR
// hc_gallery :=  ;
53488: LD_ADDR_OWVAR 33
53492: PUSH
53493: LD_STRING 
53495: ST_TO_ADDR
// animal := CreateHuman ;
53496: LD_ADDR_VAR 0 12
53500: PUSH
53501: CALL_OW 44
53505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53506: LD_VAR 0 12
53510: PPUSH
53511: LD_VAR 0 8
53515: PPUSH
53516: LD_INT 0
53518: PPUSH
53519: CALL 55644 0 3
// end ;
53523: GO 53477
53525: POP
53526: POP
// if birds then
53527: LD_VAR 0 1
53531: IFFALSE 53598
// for i = 1 to birds do
53533: LD_ADDR_VAR 0 11
53537: PUSH
53538: DOUBLE
53539: LD_INT 1
53541: DEC
53542: ST_TO_ADDR
53543: LD_VAR 0 1
53547: PUSH
53548: FOR_TO
53549: IFFALSE 53596
// begin hc_class = 18 ;
53551: LD_ADDR_OWVAR 28
53555: PUSH
53556: LD_INT 18
53558: ST_TO_ADDR
// hc_gallery =  ;
53559: LD_ADDR_OWVAR 33
53563: PUSH
53564: LD_STRING 
53566: ST_TO_ADDR
// animal := CreateHuman ;
53567: LD_ADDR_VAR 0 12
53571: PUSH
53572: CALL_OW 44
53576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53577: LD_VAR 0 12
53581: PPUSH
53582: LD_VAR 0 8
53586: PPUSH
53587: LD_INT 0
53589: PPUSH
53590: CALL 55644 0 3
// end ;
53594: GO 53548
53596: POP
53597: POP
// if tigers then
53598: LD_VAR 0 2
53602: IFFALSE 53686
// for i = 1 to tigers do
53604: LD_ADDR_VAR 0 11
53608: PUSH
53609: DOUBLE
53610: LD_INT 1
53612: DEC
53613: ST_TO_ADDR
53614: LD_VAR 0 2
53618: PUSH
53619: FOR_TO
53620: IFFALSE 53684
// begin hc_class = class_tiger ;
53622: LD_ADDR_OWVAR 28
53626: PUSH
53627: LD_INT 14
53629: ST_TO_ADDR
// hc_gallery =  ;
53630: LD_ADDR_OWVAR 33
53634: PUSH
53635: LD_STRING 
53637: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53638: LD_ADDR_OWVAR 35
53642: PUSH
53643: LD_INT 7
53645: NEG
53646: PPUSH
53647: LD_INT 7
53649: PPUSH
53650: CALL_OW 12
53654: ST_TO_ADDR
// animal := CreateHuman ;
53655: LD_ADDR_VAR 0 12
53659: PUSH
53660: CALL_OW 44
53664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53665: LD_VAR 0 12
53669: PPUSH
53670: LD_VAR 0 8
53674: PPUSH
53675: LD_INT 0
53677: PPUSH
53678: CALL 55644 0 3
// end ;
53682: GO 53619
53684: POP
53685: POP
// if apemans then
53686: LD_VAR 0 3
53690: IFFALSE 53813
// for i = 1 to apemans do
53692: LD_ADDR_VAR 0 11
53696: PUSH
53697: DOUBLE
53698: LD_INT 1
53700: DEC
53701: ST_TO_ADDR
53702: LD_VAR 0 3
53706: PUSH
53707: FOR_TO
53708: IFFALSE 53811
// begin hc_class = class_apeman ;
53710: LD_ADDR_OWVAR 28
53714: PUSH
53715: LD_INT 12
53717: ST_TO_ADDR
// hc_gallery =  ;
53718: LD_ADDR_OWVAR 33
53722: PUSH
53723: LD_STRING 
53725: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53726: LD_ADDR_OWVAR 35
53730: PUSH
53731: LD_INT 5
53733: NEG
53734: PPUSH
53735: LD_INT 5
53737: PPUSH
53738: CALL_OW 12
53742: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53743: LD_ADDR_OWVAR 31
53747: PUSH
53748: LD_INT 1
53750: PPUSH
53751: LD_INT 3
53753: PPUSH
53754: CALL_OW 12
53758: PUSH
53759: LD_INT 1
53761: PPUSH
53762: LD_INT 3
53764: PPUSH
53765: CALL_OW 12
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// animal := CreateHuman ;
53782: LD_ADDR_VAR 0 12
53786: PUSH
53787: CALL_OW 44
53791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53792: LD_VAR 0 12
53796: PPUSH
53797: LD_VAR 0 8
53801: PPUSH
53802: LD_INT 0
53804: PPUSH
53805: CALL 55644 0 3
// end ;
53809: GO 53707
53811: POP
53812: POP
// if enchidnas then
53813: LD_VAR 0 4
53817: IFFALSE 53884
// for i = 1 to enchidnas do
53819: LD_ADDR_VAR 0 11
53823: PUSH
53824: DOUBLE
53825: LD_INT 1
53827: DEC
53828: ST_TO_ADDR
53829: LD_VAR 0 4
53833: PUSH
53834: FOR_TO
53835: IFFALSE 53882
// begin hc_class = 13 ;
53837: LD_ADDR_OWVAR 28
53841: PUSH
53842: LD_INT 13
53844: ST_TO_ADDR
// hc_gallery =  ;
53845: LD_ADDR_OWVAR 33
53849: PUSH
53850: LD_STRING 
53852: ST_TO_ADDR
// animal := CreateHuman ;
53853: LD_ADDR_VAR 0 12
53857: PUSH
53858: CALL_OW 44
53862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53863: LD_VAR 0 12
53867: PPUSH
53868: LD_VAR 0 8
53872: PPUSH
53873: LD_INT 0
53875: PPUSH
53876: CALL 55644 0 3
// end ;
53880: GO 53834
53882: POP
53883: POP
// if fishes then
53884: LD_VAR 0 7
53888: IFFALSE 53955
// for i = 1 to fishes do
53890: LD_ADDR_VAR 0 11
53894: PUSH
53895: DOUBLE
53896: LD_INT 1
53898: DEC
53899: ST_TO_ADDR
53900: LD_VAR 0 7
53904: PUSH
53905: FOR_TO
53906: IFFALSE 53953
// begin hc_class = 20 ;
53908: LD_ADDR_OWVAR 28
53912: PUSH
53913: LD_INT 20
53915: ST_TO_ADDR
// hc_gallery =  ;
53916: LD_ADDR_OWVAR 33
53920: PUSH
53921: LD_STRING 
53923: ST_TO_ADDR
// animal := CreateHuman ;
53924: LD_ADDR_VAR 0 12
53928: PUSH
53929: CALL_OW 44
53933: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53934: LD_VAR 0 12
53938: PPUSH
53939: LD_VAR 0 9
53943: PPUSH
53944: LD_INT 0
53946: PPUSH
53947: CALL 55644 0 3
// end ;
53951: GO 53905
53953: POP
53954: POP
// end ;
53955: LD_VAR 0 10
53959: RET
// export function WantHeal ( sci , unit ) ; begin
53960: LD_INT 0
53962: PPUSH
// if GetTaskList ( sci ) > 0 then
53963: LD_VAR 0 1
53967: PPUSH
53968: CALL_OW 437
53972: PUSH
53973: LD_INT 0
53975: GREATER
53976: IFFALSE 54046
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53978: LD_VAR 0 1
53982: PPUSH
53983: CALL_OW 437
53987: PUSH
53988: LD_INT 1
53990: ARRAY
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: PUSH
53996: LD_STRING l
53998: EQUAL
53999: PUSH
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL_OW 437
54009: PUSH
54010: LD_INT 1
54012: ARRAY
54013: PUSH
54014: LD_INT 4
54016: ARRAY
54017: PUSH
54018: LD_VAR 0 2
54022: EQUAL
54023: AND
54024: IFFALSE 54036
// result := true else
54026: LD_ADDR_VAR 0 3
54030: PUSH
54031: LD_INT 1
54033: ST_TO_ADDR
54034: GO 54044
// result := false ;
54036: LD_ADDR_VAR 0 3
54040: PUSH
54041: LD_INT 0
54043: ST_TO_ADDR
// end else
54044: GO 54054
// result := false ;
54046: LD_ADDR_VAR 0 3
54050: PUSH
54051: LD_INT 0
54053: ST_TO_ADDR
// end ;
54054: LD_VAR 0 3
54058: RET
// export function HealTarget ( sci ) ; begin
54059: LD_INT 0
54061: PPUSH
// if not sci then
54062: LD_VAR 0 1
54066: NOT
54067: IFFALSE 54071
// exit ;
54069: GO 54136
// result := 0 ;
54071: LD_ADDR_VAR 0 2
54075: PUSH
54076: LD_INT 0
54078: ST_TO_ADDR
// if GetTaskList ( sci ) then
54079: LD_VAR 0 1
54083: PPUSH
54084: CALL_OW 437
54088: IFFALSE 54136
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54090: LD_VAR 0 1
54094: PPUSH
54095: CALL_OW 437
54099: PUSH
54100: LD_INT 1
54102: ARRAY
54103: PUSH
54104: LD_INT 1
54106: ARRAY
54107: PUSH
54108: LD_STRING l
54110: EQUAL
54111: IFFALSE 54136
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54113: LD_ADDR_VAR 0 2
54117: PUSH
54118: LD_VAR 0 1
54122: PPUSH
54123: CALL_OW 437
54127: PUSH
54128: LD_INT 1
54130: ARRAY
54131: PUSH
54132: LD_INT 4
54134: ARRAY
54135: ST_TO_ADDR
// end ;
54136: LD_VAR 0 2
54140: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54141: LD_INT 0
54143: PPUSH
54144: PPUSH
54145: PPUSH
54146: PPUSH
// if not base_units then
54147: LD_VAR 0 1
54151: NOT
54152: IFFALSE 54156
// exit ;
54154: GO 54243
// result := false ;
54156: LD_ADDR_VAR 0 2
54160: PUSH
54161: LD_INT 0
54163: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54164: LD_ADDR_VAR 0 5
54168: PUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: LD_INT 21
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 72
54188: ST_TO_ADDR
// if not tmp then
54189: LD_VAR 0 5
54193: NOT
54194: IFFALSE 54198
// exit ;
54196: GO 54243
// for i in tmp do
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_VAR 0 5
54207: PUSH
54208: FOR_IN
54209: IFFALSE 54241
// begin result := EnemyInRange ( i , 22 ) ;
54211: LD_ADDR_VAR 0 2
54215: PUSH
54216: LD_VAR 0 3
54220: PPUSH
54221: LD_INT 22
54223: PPUSH
54224: CALL 52479 0 2
54228: ST_TO_ADDR
// if result then
54229: LD_VAR 0 2
54233: IFFALSE 54239
// exit ;
54235: POP
54236: POP
54237: GO 54243
// end ;
54239: GO 54208
54241: POP
54242: POP
// end ;
54243: LD_VAR 0 2
54247: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54248: LD_INT 0
54250: PPUSH
54251: PPUSH
// if not units then
54252: LD_VAR 0 1
54256: NOT
54257: IFFALSE 54261
// exit ;
54259: GO 54331
// result := [ ] ;
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: EMPTY
54267: ST_TO_ADDR
// for i in units do
54268: LD_ADDR_VAR 0 4
54272: PUSH
54273: LD_VAR 0 1
54277: PUSH
54278: FOR_IN
54279: IFFALSE 54329
// if GetTag ( i ) = tag then
54281: LD_VAR 0 4
54285: PPUSH
54286: CALL_OW 110
54290: PUSH
54291: LD_VAR 0 2
54295: EQUAL
54296: IFFALSE 54327
// result := Insert ( result , result + 1 , i ) ;
54298: LD_ADDR_VAR 0 3
54302: PUSH
54303: LD_VAR 0 3
54307: PPUSH
54308: LD_VAR 0 3
54312: PUSH
54313: LD_INT 1
54315: PLUS
54316: PPUSH
54317: LD_VAR 0 4
54321: PPUSH
54322: CALL_OW 2
54326: ST_TO_ADDR
54327: GO 54278
54329: POP
54330: POP
// end ;
54331: LD_VAR 0 3
54335: RET
// export function IsDriver ( un ) ; begin
54336: LD_INT 0
54338: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54339: LD_ADDR_VAR 0 2
54343: PUSH
54344: LD_VAR 0 1
54348: PUSH
54349: LD_INT 55
54351: PUSH
54352: EMPTY
54353: LIST
54354: PPUSH
54355: CALL_OW 69
54359: IN
54360: ST_TO_ADDR
// end ;
54361: LD_VAR 0 2
54365: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54366: LD_INT 0
54368: PPUSH
54369: PPUSH
// list := [ ] ;
54370: LD_ADDR_VAR 0 5
54374: PUSH
54375: EMPTY
54376: ST_TO_ADDR
// case d of 0 :
54377: LD_VAR 0 3
54381: PUSH
54382: LD_INT 0
54384: DOUBLE
54385: EQUAL
54386: IFTRUE 54390
54388: GO 54523
54390: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54391: LD_ADDR_VAR 0 5
54395: PUSH
54396: LD_VAR 0 1
54400: PUSH
54401: LD_INT 4
54403: MINUS
54404: PUSH
54405: LD_VAR 0 2
54409: PUSH
54410: LD_INT 4
54412: MINUS
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: PUSH
54422: LD_VAR 0 1
54426: PUSH
54427: LD_INT 3
54429: MINUS
54430: PUSH
54431: LD_VAR 0 2
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: PUSH
54444: LD_VAR 0 1
54448: PUSH
54449: LD_INT 4
54451: PLUS
54452: PUSH
54453: LD_VAR 0 2
54457: PUSH
54458: LD_INT 4
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: PUSH
54466: LD_VAR 0 1
54470: PUSH
54471: LD_INT 3
54473: PLUS
54474: PUSH
54475: LD_VAR 0 2
54479: PUSH
54480: LD_INT 3
54482: PLUS
54483: PUSH
54484: LD_INT 5
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: LD_VAR 0 1
54496: PUSH
54497: LD_VAR 0 2
54501: PUSH
54502: LD_INT 4
54504: PLUS
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// end ; 1 :
54521: GO 55221
54523: LD_INT 1
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54664
54531: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54532: LD_ADDR_VAR 0 5
54536: PUSH
54537: LD_VAR 0 1
54541: PUSH
54542: LD_VAR 0 2
54546: PUSH
54547: LD_INT 4
54549: MINUS
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: PUSH
54559: LD_VAR 0 1
54563: PUSH
54564: LD_INT 3
54566: MINUS
54567: PUSH
54568: LD_VAR 0 2
54572: PUSH
54573: LD_INT 3
54575: MINUS
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_INT 4
54592: MINUS
54593: PUSH
54594: LD_VAR 0 2
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: PUSH
54607: LD_VAR 0 1
54611: PUSH
54612: LD_VAR 0 2
54616: PUSH
54617: LD_INT 3
54619: PLUS
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: PUSH
54629: LD_VAR 0 1
54633: PUSH
54634: LD_INT 4
54636: PLUS
54637: PUSH
54638: LD_VAR 0 2
54642: PUSH
54643: LD_INT 4
54645: PLUS
54646: PUSH
54647: LD_INT 5
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: ST_TO_ADDR
// end ; 2 :
54662: GO 55221
54664: LD_INT 2
54666: DOUBLE
54667: EQUAL
54668: IFTRUE 54672
54670: GO 54801
54672: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54673: LD_ADDR_VAR 0 5
54677: PUSH
54678: LD_VAR 0 1
54682: PUSH
54683: LD_VAR 0 2
54687: PUSH
54688: LD_INT 3
54690: MINUS
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: PUSH
54700: LD_VAR 0 1
54704: PUSH
54705: LD_INT 4
54707: PLUS
54708: PUSH
54709: LD_VAR 0 2
54713: PUSH
54714: LD_INT 4
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: PUSH
54722: LD_VAR 0 1
54726: PUSH
54727: LD_VAR 0 2
54731: PUSH
54732: LD_INT 4
54734: PLUS
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: PUSH
54744: LD_VAR 0 1
54748: PUSH
54749: LD_INT 3
54751: MINUS
54752: PUSH
54753: LD_VAR 0 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 4
54773: MINUS
54774: PUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_INT 4
54782: MINUS
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// end ; 3 :
54799: GO 55221
54801: LD_INT 3
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54809
54807: GO 54942
54809: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54810: LD_ADDR_VAR 0 5
54814: PUSH
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 3
54822: PLUS
54823: PUSH
54824: LD_VAR 0 2
54828: PUSH
54829: LD_INT 4
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 1
54841: PUSH
54842: LD_INT 4
54844: PLUS
54845: PUSH
54846: LD_VAR 0 2
54850: PUSH
54851: LD_INT 4
54853: PLUS
54854: PUSH
54855: LD_INT 5
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: PUSH
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 4
54870: MINUS
54871: PUSH
54872: LD_VAR 0 2
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_VAR 0 2
54894: PUSH
54895: LD_INT 4
54897: MINUS
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: PUSH
54907: LD_VAR 0 1
54911: PUSH
54912: LD_INT 3
54914: MINUS
54915: PUSH
54916: LD_VAR 0 2
54920: PUSH
54921: LD_INT 3
54923: MINUS
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: ST_TO_ADDR
// end ; 4 :
54940: GO 55221
54942: LD_INT 4
54944: DOUBLE
54945: EQUAL
54946: IFTRUE 54950
54948: GO 55083
54950: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54951: LD_ADDR_VAR 0 5
54955: PUSH
54956: LD_VAR 0 1
54960: PUSH
54961: LD_VAR 0 2
54965: PUSH
54966: LD_INT 4
54968: PLUS
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: PUSH
54978: LD_VAR 0 1
54982: PUSH
54983: LD_INT 3
54985: PLUS
54986: PUSH
54987: LD_VAR 0 2
54991: PUSH
54992: LD_INT 3
54994: PLUS
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: PUSH
55004: LD_VAR 0 1
55008: PUSH
55009: LD_INT 4
55011: PLUS
55012: PUSH
55013: LD_VAR 0 2
55017: PUSH
55018: LD_INT 4
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: PUSH
55026: LD_VAR 0 1
55030: PUSH
55031: LD_VAR 0 2
55035: PUSH
55036: LD_INT 3
55038: MINUS
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: PUSH
55048: LD_VAR 0 1
55052: PUSH
55053: LD_INT 4
55055: MINUS
55056: PUSH
55057: LD_VAR 0 2
55061: PUSH
55062: LD_INT 4
55064: MINUS
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// end ; 5 :
55081: GO 55221
55083: LD_INT 5
55085: DOUBLE
55086: EQUAL
55087: IFTRUE 55091
55089: GO 55220
55091: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55092: LD_ADDR_VAR 0 5
55096: PUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_INT 4
55104: MINUS
55105: PUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: PUSH
55119: LD_VAR 0 1
55123: PUSH
55124: LD_VAR 0 2
55128: PUSH
55129: LD_INT 4
55131: MINUS
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: PUSH
55141: LD_VAR 0 1
55145: PUSH
55146: LD_INT 4
55148: PLUS
55149: PUSH
55150: LD_VAR 0 2
55154: PUSH
55155: LD_INT 4
55157: PLUS
55158: PUSH
55159: LD_INT 5
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: LD_INT 3
55174: PLUS
55175: PUSH
55176: LD_VAR 0 2
55180: PUSH
55181: LD_INT 4
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: PUSH
55189: LD_VAR 0 1
55193: PUSH
55194: LD_VAR 0 2
55198: PUSH
55199: LD_INT 3
55201: PLUS
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// end ; end ;
55218: GO 55221
55220: POP
// result := list ;
55221: LD_ADDR_VAR 0 4
55225: PUSH
55226: LD_VAR 0 5
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 4
55235: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55236: LD_INT 0
55238: PPUSH
55239: PPUSH
55240: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55241: LD_VAR 0 1
55245: NOT
55246: PUSH
55247: LD_VAR 0 2
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: IN
55270: NOT
55271: OR
55272: IFFALSE 55276
// exit ;
55274: GO 55368
// tmp := [ ] ;
55276: LD_ADDR_VAR 0 5
55280: PUSH
55281: EMPTY
55282: ST_TO_ADDR
// for i in units do
55283: LD_ADDR_VAR 0 4
55287: PUSH
55288: LD_VAR 0 1
55292: PUSH
55293: FOR_IN
55294: IFFALSE 55337
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55296: LD_ADDR_VAR 0 5
55300: PUSH
55301: LD_VAR 0 5
55305: PPUSH
55306: LD_VAR 0 5
55310: PUSH
55311: LD_INT 1
55313: PLUS
55314: PPUSH
55315: LD_VAR 0 4
55319: PPUSH
55320: LD_VAR 0 2
55324: PPUSH
55325: CALL_OW 259
55329: PPUSH
55330: CALL_OW 2
55334: ST_TO_ADDR
55335: GO 55293
55337: POP
55338: POP
// if not tmp then
55339: LD_VAR 0 5
55343: NOT
55344: IFFALSE 55348
// exit ;
55346: GO 55368
// result := SortListByListDesc ( units , tmp ) ;
55348: LD_ADDR_VAR 0 3
55352: PUSH
55353: LD_VAR 0 1
55357: PPUSH
55358: LD_VAR 0 5
55362: PPUSH
55363: CALL_OW 77
55367: ST_TO_ADDR
// end ;
55368: LD_VAR 0 3
55372: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55373: LD_INT 0
55375: PPUSH
55376: PPUSH
55377: PPUSH
// result := false ;
55378: LD_ADDR_VAR 0 3
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// x := GetX ( building ) ;
55386: LD_ADDR_VAR 0 4
55390: PUSH
55391: LD_VAR 0 2
55395: PPUSH
55396: CALL_OW 250
55400: ST_TO_ADDR
// y := GetY ( building ) ;
55401: LD_ADDR_VAR 0 5
55405: PUSH
55406: LD_VAR 0 2
55410: PPUSH
55411: CALL_OW 251
55415: ST_TO_ADDR
// if not building or not x or not y then
55416: LD_VAR 0 2
55420: NOT
55421: PUSH
55422: LD_VAR 0 4
55426: NOT
55427: OR
55428: PUSH
55429: LD_VAR 0 5
55433: NOT
55434: OR
55435: IFFALSE 55439
// exit ;
55437: GO 55531
// if GetTaskList ( unit ) then
55439: LD_VAR 0 1
55443: PPUSH
55444: CALL_OW 437
55448: IFFALSE 55531
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55450: LD_STRING e
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: CALL_OW 437
55462: PUSH
55463: LD_INT 1
55465: ARRAY
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: EQUAL
55471: PUSH
55472: LD_VAR 0 4
55476: PUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: CALL_OW 437
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: PUSH
55491: LD_INT 2
55493: ARRAY
55494: EQUAL
55495: AND
55496: PUSH
55497: LD_VAR 0 5
55501: PUSH
55502: LD_VAR 0 1
55506: PPUSH
55507: CALL_OW 437
55511: PUSH
55512: LD_INT 1
55514: ARRAY
55515: PUSH
55516: LD_INT 3
55518: ARRAY
55519: EQUAL
55520: AND
55521: IFFALSE 55531
// result := true end ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_INT 1
55530: ST_TO_ADDR
// end ;
55531: LD_VAR 0 3
55535: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55536: LD_INT 0
55538: PPUSH
// result := false ;
55539: LD_ADDR_VAR 0 4
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
// if GetTaskList ( unit ) then
55547: LD_VAR 0 1
55551: PPUSH
55552: CALL_OW 437
55556: IFFALSE 55639
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55558: LD_STRING M
55560: PUSH
55561: LD_VAR 0 1
55565: PPUSH
55566: CALL_OW 437
55570: PUSH
55571: LD_INT 1
55573: ARRAY
55574: PUSH
55575: LD_INT 1
55577: ARRAY
55578: EQUAL
55579: PUSH
55580: LD_VAR 0 2
55584: PUSH
55585: LD_VAR 0 1
55589: PPUSH
55590: CALL_OW 437
55594: PUSH
55595: LD_INT 1
55597: ARRAY
55598: PUSH
55599: LD_INT 2
55601: ARRAY
55602: EQUAL
55603: AND
55604: PUSH
55605: LD_VAR 0 3
55609: PUSH
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 437
55619: PUSH
55620: LD_INT 1
55622: ARRAY
55623: PUSH
55624: LD_INT 3
55626: ARRAY
55627: EQUAL
55628: AND
55629: IFFALSE 55639
// result := true ;
55631: LD_ADDR_VAR 0 4
55635: PUSH
55636: LD_INT 1
55638: ST_TO_ADDR
// end ; end ;
55639: LD_VAR 0 4
55643: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55644: LD_INT 0
55646: PPUSH
55647: PPUSH
55648: PPUSH
55649: PPUSH
// if not unit or not area then
55650: LD_VAR 0 1
55654: NOT
55655: PUSH
55656: LD_VAR 0 2
55660: NOT
55661: OR
55662: IFFALSE 55666
// exit ;
55664: GO 55830
// tmp := AreaToList ( area , i ) ;
55666: LD_ADDR_VAR 0 6
55670: PUSH
55671: LD_VAR 0 2
55675: PPUSH
55676: LD_VAR 0 5
55680: PPUSH
55681: CALL_OW 517
55685: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55686: LD_ADDR_VAR 0 5
55690: PUSH
55691: DOUBLE
55692: LD_INT 1
55694: DEC
55695: ST_TO_ADDR
55696: LD_VAR 0 6
55700: PUSH
55701: LD_INT 1
55703: ARRAY
55704: PUSH
55705: FOR_TO
55706: IFFALSE 55828
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55708: LD_ADDR_VAR 0 7
55712: PUSH
55713: LD_VAR 0 6
55717: PUSH
55718: LD_INT 1
55720: ARRAY
55721: PUSH
55722: LD_VAR 0 5
55726: ARRAY
55727: PUSH
55728: LD_VAR 0 6
55732: PUSH
55733: LD_INT 2
55735: ARRAY
55736: PUSH
55737: LD_VAR 0 5
55741: ARRAY
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55747: LD_VAR 0 7
55751: PUSH
55752: LD_INT 1
55754: ARRAY
55755: PPUSH
55756: LD_VAR 0 7
55760: PUSH
55761: LD_INT 2
55763: ARRAY
55764: PPUSH
55765: CALL_OW 428
55769: PUSH
55770: LD_INT 0
55772: EQUAL
55773: IFFALSE 55826
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55775: LD_VAR 0 1
55779: PPUSH
55780: LD_VAR 0 7
55784: PUSH
55785: LD_INT 1
55787: ARRAY
55788: PPUSH
55789: LD_VAR 0 7
55793: PUSH
55794: LD_INT 2
55796: ARRAY
55797: PPUSH
55798: LD_VAR 0 3
55802: PPUSH
55803: CALL_OW 48
// result := IsPlaced ( unit ) ;
55807: LD_ADDR_VAR 0 4
55811: PUSH
55812: LD_VAR 0 1
55816: PPUSH
55817: CALL_OW 305
55821: ST_TO_ADDR
// exit ;
55822: POP
55823: POP
55824: GO 55830
// end ; end ;
55826: GO 55705
55828: POP
55829: POP
// end ;
55830: LD_VAR 0 4
55834: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
55839: PPUSH
// if not side or side > 8 then
55840: LD_VAR 0 1
55844: NOT
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 8
55853: GREATER
55854: OR
55855: IFFALSE 55859
// exit ;
55857: GO 56046
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55859: LD_ADDR_VAR 0 4
55863: PUSH
55864: LD_INT 22
55866: PUSH
55867: LD_VAR 0 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 21
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PPUSH
55890: CALL_OW 69
55894: ST_TO_ADDR
// if not tmp then
55895: LD_VAR 0 4
55899: NOT
55900: IFFALSE 55904
// exit ;
55902: GO 56046
// enable_addtolog := true ;
55904: LD_ADDR_OWVAR 81
55908: PUSH
55909: LD_INT 1
55911: ST_TO_ADDR
// AddToLog ( [ ) ;
55912: LD_STRING [
55914: PPUSH
55915: CALL_OW 561
// for i in tmp do
55919: LD_ADDR_VAR 0 3
55923: PUSH
55924: LD_VAR 0 4
55928: PUSH
55929: FOR_IN
55930: IFFALSE 56037
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55932: LD_STRING [
55934: PUSH
55935: LD_VAR 0 3
55939: PPUSH
55940: CALL_OW 266
55944: STR
55945: PUSH
55946: LD_STRING , 
55948: STR
55949: PUSH
55950: LD_VAR 0 3
55954: PPUSH
55955: CALL_OW 250
55959: STR
55960: PUSH
55961: LD_STRING , 
55963: STR
55964: PUSH
55965: LD_VAR 0 3
55969: PPUSH
55970: CALL_OW 251
55974: STR
55975: PUSH
55976: LD_STRING , 
55978: STR
55979: PUSH
55980: LD_VAR 0 3
55984: PPUSH
55985: CALL_OW 254
55989: STR
55990: PUSH
55991: LD_STRING , 
55993: STR
55994: PUSH
55995: LD_VAR 0 3
55999: PPUSH
56000: LD_INT 1
56002: PPUSH
56003: CALL_OW 268
56007: STR
56008: PUSH
56009: LD_STRING , 
56011: STR
56012: PUSH
56013: LD_VAR 0 3
56017: PPUSH
56018: LD_INT 2
56020: PPUSH
56021: CALL_OW 268
56025: STR
56026: PUSH
56027: LD_STRING ],
56029: STR
56030: PPUSH
56031: CALL_OW 561
// end ;
56035: GO 55929
56037: POP
56038: POP
// AddToLog ( ]; ) ;
56039: LD_STRING ];
56041: PPUSH
56042: CALL_OW 561
// end ;
56046: LD_VAR 0 2
56050: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56051: LD_INT 0
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
// if not area or not rate or not max then
56058: LD_VAR 0 1
56062: NOT
56063: PUSH
56064: LD_VAR 0 2
56068: NOT
56069: OR
56070: PUSH
56071: LD_VAR 0 4
56075: NOT
56076: OR
56077: IFFALSE 56081
// exit ;
56079: GO 56273
// while 1 do
56081: LD_INT 1
56083: IFFALSE 56273
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56085: LD_ADDR_VAR 0 9
56089: PUSH
56090: LD_VAR 0 1
56094: PPUSH
56095: LD_INT 1
56097: PPUSH
56098: CALL_OW 287
56102: PUSH
56103: LD_INT 10
56105: MUL
56106: ST_TO_ADDR
// r := rate / 10 ;
56107: LD_ADDR_VAR 0 7
56111: PUSH
56112: LD_VAR 0 2
56116: PUSH
56117: LD_INT 10
56119: DIVREAL
56120: ST_TO_ADDR
// time := 1 1$00 ;
56121: LD_ADDR_VAR 0 8
56125: PUSH
56126: LD_INT 2100
56128: ST_TO_ADDR
// if amount < min then
56129: LD_VAR 0 9
56133: PUSH
56134: LD_VAR 0 3
56138: LESS
56139: IFFALSE 56157
// r := r * 2 else
56141: LD_ADDR_VAR 0 7
56145: PUSH
56146: LD_VAR 0 7
56150: PUSH
56151: LD_INT 2
56153: MUL
56154: ST_TO_ADDR
56155: GO 56183
// if amount > max then
56157: LD_VAR 0 9
56161: PUSH
56162: LD_VAR 0 4
56166: GREATER
56167: IFFALSE 56183
// r := r / 2 ;
56169: LD_ADDR_VAR 0 7
56173: PUSH
56174: LD_VAR 0 7
56178: PUSH
56179: LD_INT 2
56181: DIVREAL
56182: ST_TO_ADDR
// time := time / r ;
56183: LD_ADDR_VAR 0 8
56187: PUSH
56188: LD_VAR 0 8
56192: PUSH
56193: LD_VAR 0 7
56197: DIVREAL
56198: ST_TO_ADDR
// if time < 0 then
56199: LD_VAR 0 8
56203: PUSH
56204: LD_INT 0
56206: LESS
56207: IFFALSE 56224
// time := time * - 1 ;
56209: LD_ADDR_VAR 0 8
56213: PUSH
56214: LD_VAR 0 8
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: MUL
56223: ST_TO_ADDR
// wait ( time ) ;
56224: LD_VAR 0 8
56228: PPUSH
56229: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56233: LD_INT 35
56235: PPUSH
56236: LD_INT 875
56238: PPUSH
56239: CALL_OW 12
56243: PPUSH
56244: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56248: LD_INT 1
56250: PPUSH
56251: LD_INT 5
56253: PPUSH
56254: CALL_OW 12
56258: PPUSH
56259: LD_VAR 0 1
56263: PPUSH
56264: LD_INT 1
56266: PPUSH
56267: CALL_OW 55
// end ;
56271: GO 56081
// end ;
56273: LD_VAR 0 5
56277: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
56282: PPUSH
56283: PPUSH
56284: PPUSH
56285: PPUSH
56286: PPUSH
56287: PPUSH
// if not turrets or not factories then
56288: LD_VAR 0 1
56292: NOT
56293: PUSH
56294: LD_VAR 0 2
56298: NOT
56299: OR
56300: IFFALSE 56304
// exit ;
56302: GO 56611
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56304: LD_ADDR_VAR 0 10
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: LD_INT 6
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 5
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 24
56346: PUSH
56347: LD_INT 25
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 23
56356: PUSH
56357: LD_INT 27
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 42
56370: PUSH
56371: LD_INT 43
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 44
56380: PUSH
56381: LD_INT 46
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 45
56390: PUSH
56391: LD_INT 47
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// result := [ ] ;
56408: LD_ADDR_VAR 0 3
56412: PUSH
56413: EMPTY
56414: ST_TO_ADDR
// for i in turrets do
56415: LD_ADDR_VAR 0 4
56419: PUSH
56420: LD_VAR 0 1
56424: PUSH
56425: FOR_IN
56426: IFFALSE 56609
// begin nat := GetNation ( i ) ;
56428: LD_ADDR_VAR 0 7
56432: PUSH
56433: LD_VAR 0 4
56437: PPUSH
56438: CALL_OW 248
56442: ST_TO_ADDR
// weapon := 0 ;
56443: LD_ADDR_VAR 0 8
56447: PUSH
56448: LD_INT 0
56450: ST_TO_ADDR
// if not nat then
56451: LD_VAR 0 7
56455: NOT
56456: IFFALSE 56460
// continue ;
56458: GO 56425
// for j in list [ nat ] do
56460: LD_ADDR_VAR 0 5
56464: PUSH
56465: LD_VAR 0 10
56469: PUSH
56470: LD_VAR 0 7
56474: ARRAY
56475: PUSH
56476: FOR_IN
56477: IFFALSE 56518
// if GetBWeapon ( i ) = j [ 1 ] then
56479: LD_VAR 0 4
56483: PPUSH
56484: CALL_OW 269
56488: PUSH
56489: LD_VAR 0 5
56493: PUSH
56494: LD_INT 1
56496: ARRAY
56497: EQUAL
56498: IFFALSE 56516
// begin weapon := j [ 2 ] ;
56500: LD_ADDR_VAR 0 8
56504: PUSH
56505: LD_VAR 0 5
56509: PUSH
56510: LD_INT 2
56512: ARRAY
56513: ST_TO_ADDR
// break ;
56514: GO 56518
// end ;
56516: GO 56476
56518: POP
56519: POP
// if not weapon then
56520: LD_VAR 0 8
56524: NOT
56525: IFFALSE 56529
// continue ;
56527: GO 56425
// for k in factories do
56529: LD_ADDR_VAR 0 6
56533: PUSH
56534: LD_VAR 0 2
56538: PUSH
56539: FOR_IN
56540: IFFALSE 56605
// begin weapons := AvailableWeaponList ( k ) ;
56542: LD_ADDR_VAR 0 9
56546: PUSH
56547: LD_VAR 0 6
56551: PPUSH
56552: CALL_OW 478
56556: ST_TO_ADDR
// if not weapons then
56557: LD_VAR 0 9
56561: NOT
56562: IFFALSE 56566
// continue ;
56564: GO 56539
// if weapon in weapons then
56566: LD_VAR 0 8
56570: PUSH
56571: LD_VAR 0 9
56575: IN
56576: IFFALSE 56603
// begin result := [ i , weapon ] ;
56578: LD_ADDR_VAR 0 3
56582: PUSH
56583: LD_VAR 0 4
56587: PUSH
56588: LD_VAR 0 8
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// exit ;
56597: POP
56598: POP
56599: POP
56600: POP
56601: GO 56611
// end ; end ;
56603: GO 56539
56605: POP
56606: POP
// end ;
56607: GO 56425
56609: POP
56610: POP
// end ;
56611: LD_VAR 0 3
56615: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56616: LD_INT 0
56618: PPUSH
// if not side or side > 8 then
56619: LD_VAR 0 3
56623: NOT
56624: PUSH
56625: LD_VAR 0 3
56629: PUSH
56630: LD_INT 8
56632: GREATER
56633: OR
56634: IFFALSE 56638
// exit ;
56636: GO 56697
// if not range then
56638: LD_VAR 0 4
56642: NOT
56643: IFFALSE 56654
// range := - 12 ;
56645: LD_ADDR_VAR 0 4
56649: PUSH
56650: LD_INT 12
56652: NEG
56653: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56654: LD_VAR 0 1
56658: PPUSH
56659: LD_VAR 0 2
56663: PPUSH
56664: LD_VAR 0 3
56668: PPUSH
56669: LD_VAR 0 4
56673: PPUSH
56674: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56678: LD_VAR 0 1
56682: PPUSH
56683: LD_VAR 0 2
56687: PPUSH
56688: LD_VAR 0 3
56692: PPUSH
56693: CALL_OW 331
// end ;
56697: LD_VAR 0 5
56701: RET
// export function Video ( mode ) ; begin
56702: LD_INT 0
56704: PPUSH
// ingame_video = mode ;
56705: LD_ADDR_OWVAR 52
56709: PUSH
56710: LD_VAR 0 1
56714: ST_TO_ADDR
// interface_hidden = mode ;
56715: LD_ADDR_OWVAR 54
56719: PUSH
56720: LD_VAR 0 1
56724: ST_TO_ADDR
// end ;
56725: LD_VAR 0 2
56729: RET
// export function Join ( array , element ) ; begin
56730: LD_INT 0
56732: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56733: LD_ADDR_VAR 0 3
56737: PUSH
56738: LD_VAR 0 1
56742: PPUSH
56743: LD_VAR 0 1
56747: PUSH
56748: LD_INT 1
56750: PLUS
56751: PPUSH
56752: LD_VAR 0 2
56756: PPUSH
56757: CALL_OW 1
56761: ST_TO_ADDR
// end ;
56762: LD_VAR 0 3
56766: RET
// export function JoinUnion ( array , element ) ; begin
56767: LD_INT 0
56769: PPUSH
// result := array union element ;
56770: LD_ADDR_VAR 0 3
56774: PUSH
56775: LD_VAR 0 1
56779: PUSH
56780: LD_VAR 0 2
56784: UNION
56785: ST_TO_ADDR
// end ;
56786: LD_VAR 0 3
56790: RET
// export function GetBehemoths ( side ) ; begin
56791: LD_INT 0
56793: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56794: LD_ADDR_VAR 0 2
56798: PUSH
56799: LD_INT 22
56801: PUSH
56802: LD_VAR 0 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 31
56813: PUSH
56814: LD_INT 25
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PPUSH
56825: CALL_OW 69
56829: ST_TO_ADDR
// end ;
56830: LD_VAR 0 2
56834: RET
// export function Shuffle ( array ) ; var i , index ; begin
56835: LD_INT 0
56837: PPUSH
56838: PPUSH
56839: PPUSH
// result := [ ] ;
56840: LD_ADDR_VAR 0 2
56844: PUSH
56845: EMPTY
56846: ST_TO_ADDR
// if not array then
56847: LD_VAR 0 1
56851: NOT
56852: IFFALSE 56856
// exit ;
56854: GO 56955
// Randomize ;
56856: CALL_OW 10
// for i = array downto 1 do
56860: LD_ADDR_VAR 0 3
56864: PUSH
56865: DOUBLE
56866: LD_VAR 0 1
56870: INC
56871: ST_TO_ADDR
56872: LD_INT 1
56874: PUSH
56875: FOR_DOWNTO
56876: IFFALSE 56953
// begin index := rand ( 1 , array ) ;
56878: LD_ADDR_VAR 0 4
56882: PUSH
56883: LD_INT 1
56885: PPUSH
56886: LD_VAR 0 1
56890: PPUSH
56891: CALL_OW 12
56895: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56896: LD_ADDR_VAR 0 2
56900: PUSH
56901: LD_VAR 0 2
56905: PPUSH
56906: LD_VAR 0 2
56910: PUSH
56911: LD_INT 1
56913: PLUS
56914: PPUSH
56915: LD_VAR 0 1
56919: PUSH
56920: LD_VAR 0 4
56924: ARRAY
56925: PPUSH
56926: CALL_OW 2
56930: ST_TO_ADDR
// array := Delete ( array , index ) ;
56931: LD_ADDR_VAR 0 1
56935: PUSH
56936: LD_VAR 0 1
56940: PPUSH
56941: LD_VAR 0 4
56945: PPUSH
56946: CALL_OW 3
56950: ST_TO_ADDR
// end ;
56951: GO 56875
56953: POP
56954: POP
// end ;
56955: LD_VAR 0 2
56959: RET
// export function GetBaseMaterials ( base ) ; begin
56960: LD_INT 0
56962: PPUSH
// result := [ 0 , 0 , 0 ] ;
56963: LD_ADDR_VAR 0 2
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// if not base then
56982: LD_VAR 0 1
56986: NOT
56987: IFFALSE 56991
// exit ;
56989: GO 57040
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56991: LD_ADDR_VAR 0 2
56995: PUSH
56996: LD_VAR 0 1
57000: PPUSH
57001: LD_INT 1
57003: PPUSH
57004: CALL_OW 275
57008: PUSH
57009: LD_VAR 0 1
57013: PPUSH
57014: LD_INT 2
57016: PPUSH
57017: CALL_OW 275
57021: PUSH
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_INT 3
57029: PPUSH
57030: CALL_OW 275
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: ST_TO_ADDR
// end ;
57040: LD_VAR 0 2
57044: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57045: LD_INT 0
57047: PPUSH
57048: PPUSH
// result := array ;
57049: LD_ADDR_VAR 0 3
57053: PUSH
57054: LD_VAR 0 1
57058: ST_TO_ADDR
// if size > 0 then
57059: LD_VAR 0 2
57063: PUSH
57064: LD_INT 0
57066: GREATER
57067: IFFALSE 57113
// for i := array downto size do
57069: LD_ADDR_VAR 0 4
57073: PUSH
57074: DOUBLE
57075: LD_VAR 0 1
57079: INC
57080: ST_TO_ADDR
57081: LD_VAR 0 2
57085: PUSH
57086: FOR_DOWNTO
57087: IFFALSE 57111
// result := Delete ( result , result ) ;
57089: LD_ADDR_VAR 0 3
57093: PUSH
57094: LD_VAR 0 3
57098: PPUSH
57099: LD_VAR 0 3
57103: PPUSH
57104: CALL_OW 3
57108: ST_TO_ADDR
57109: GO 57086
57111: POP
57112: POP
// end ;
57113: LD_VAR 0 3
57117: RET
// export function ComExit ( unit ) ; var tmp ; begin
57118: LD_INT 0
57120: PPUSH
57121: PPUSH
// if not IsInUnit ( unit ) then
57122: LD_VAR 0 1
57126: PPUSH
57127: CALL_OW 310
57131: NOT
57132: IFFALSE 57136
// exit ;
57134: GO 57196
// tmp := IsInUnit ( unit ) ;
57136: LD_ADDR_VAR 0 3
57140: PUSH
57141: LD_VAR 0 1
57145: PPUSH
57146: CALL_OW 310
57150: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57151: LD_VAR 0 3
57155: PPUSH
57156: CALL_OW 247
57160: PUSH
57161: LD_INT 2
57163: EQUAL
57164: IFFALSE 57177
// ComExitVehicle ( unit ) else
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 121
57175: GO 57186
// ComExitBuilding ( unit ) ;
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL_OW 122
// result := tmp ;
57186: LD_ADDR_VAR 0 2
57190: PUSH
57191: LD_VAR 0 3
57195: ST_TO_ADDR
// end ;
57196: LD_VAR 0 2
57200: RET
// export function ResetHc ; begin
57201: LD_INT 0
57203: PPUSH
// InitHc ;
57204: CALL_OW 19
// hc_importance := 0 ;
57208: LD_ADDR_OWVAR 32
57212: PUSH
57213: LD_INT 0
57215: ST_TO_ADDR
// end ;
57216: LD_VAR 0 1
57220: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57221: LD_INT 0
57223: PPUSH
57224: PPUSH
57225: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57226: LD_ADDR_VAR 0 6
57230: PUSH
57231: LD_VAR 0 1
57235: PUSH
57236: LD_VAR 0 3
57240: PLUS
57241: PUSH
57242: LD_INT 2
57244: DIV
57245: ST_TO_ADDR
// if _x < 0 then
57246: LD_VAR 0 6
57250: PUSH
57251: LD_INT 0
57253: LESS
57254: IFFALSE 57271
// _x := _x * - 1 ;
57256: LD_ADDR_VAR 0 6
57260: PUSH
57261: LD_VAR 0 6
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: MUL
57270: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57271: LD_ADDR_VAR 0 7
57275: PUSH
57276: LD_VAR 0 2
57280: PUSH
57281: LD_VAR 0 4
57285: PLUS
57286: PUSH
57287: LD_INT 2
57289: DIV
57290: ST_TO_ADDR
// if _y < 0 then
57291: LD_VAR 0 7
57295: PUSH
57296: LD_INT 0
57298: LESS
57299: IFFALSE 57316
// _y := _y * - 1 ;
57301: LD_ADDR_VAR 0 7
57305: PUSH
57306: LD_VAR 0 7
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: MUL
57315: ST_TO_ADDR
// result := [ _x , _y ] ;
57316: LD_ADDR_VAR 0 5
57320: PUSH
57321: LD_VAR 0 6
57325: PUSH
57326: LD_VAR 0 7
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// end ;
57335: LD_VAR 0 5
57339: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57340: LD_INT 0
57342: PPUSH
57343: PPUSH
57344: PPUSH
57345: PPUSH
// task := GetTaskList ( unit ) ;
57346: LD_ADDR_VAR 0 7
57350: PUSH
57351: LD_VAR 0 1
57355: PPUSH
57356: CALL_OW 437
57360: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57361: LD_VAR 0 7
57365: NOT
57366: PUSH
57367: LD_VAR 0 1
57371: PPUSH
57372: LD_VAR 0 2
57376: PPUSH
57377: CALL_OW 308
57381: NOT
57382: AND
57383: IFFALSE 57387
// exit ;
57385: GO 57505
// if IsInArea ( unit , area ) then
57387: LD_VAR 0 1
57391: PPUSH
57392: LD_VAR 0 2
57396: PPUSH
57397: CALL_OW 308
57401: IFFALSE 57419
// begin ComMoveToArea ( unit , goAway ) ;
57403: LD_VAR 0 1
57407: PPUSH
57408: LD_VAR 0 3
57412: PPUSH
57413: CALL_OW 113
// exit ;
57417: GO 57505
// end ; if task [ 1 ] [ 1 ] <> M then
57419: LD_VAR 0 7
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PUSH
57432: LD_STRING M
57434: NONEQUAL
57435: IFFALSE 57439
// exit ;
57437: GO 57505
// x := task [ 1 ] [ 2 ] ;
57439: LD_ADDR_VAR 0 5
57443: PUSH
57444: LD_VAR 0 7
57448: PUSH
57449: LD_INT 1
57451: ARRAY
57452: PUSH
57453: LD_INT 2
57455: ARRAY
57456: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57457: LD_ADDR_VAR 0 6
57461: PUSH
57462: LD_VAR 0 7
57466: PUSH
57467: LD_INT 1
57469: ARRAY
57470: PUSH
57471: LD_INT 3
57473: ARRAY
57474: ST_TO_ADDR
// if InArea ( x , y , area ) then
57475: LD_VAR 0 5
57479: PPUSH
57480: LD_VAR 0 6
57484: PPUSH
57485: LD_VAR 0 2
57489: PPUSH
57490: CALL_OW 309
57494: IFFALSE 57505
// ComStop ( unit ) ;
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 141
// end ;
57505: LD_VAR 0 4
57509: RET
