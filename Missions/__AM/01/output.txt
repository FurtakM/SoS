// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4874 0 0
// DefineStreamItems ( ) ;
4869: CALL 5314 0 0
// end ;
4873: END
// function InitStreamMode ; begin
4874: LD_INT 0
4876: PPUSH
// streamModeActive := false ;
4877: LD_ADDR_EXP 15
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// normalCounter := 26 ;
4885: LD_ADDR_EXP 16
4889: PUSH
4890: LD_INT 26
4892: ST_TO_ADDR
// hardcoreCounter := 12 ;
4893: LD_ADDR_EXP 17
4897: PUSH
4898: LD_INT 12
4900: ST_TO_ADDR
// sRocket := false ;
4901: LD_ADDR_EXP 20
4905: PUSH
4906: LD_INT 0
4908: ST_TO_ADDR
// sSpeed := false ;
4909: LD_ADDR_EXP 19
4913: PUSH
4914: LD_INT 0
4916: ST_TO_ADDR
// sEngine := false ;
4917: LD_ADDR_EXP 21
4921: PUSH
4922: LD_INT 0
4924: ST_TO_ADDR
// sSpec := false ;
4925: LD_ADDR_EXP 18
4929: PUSH
4930: LD_INT 0
4932: ST_TO_ADDR
// sLevel := false ;
4933: LD_ADDR_EXP 22
4937: PUSH
4938: LD_INT 0
4940: ST_TO_ADDR
// sArmoury := false ;
4941: LD_ADDR_EXP 23
4945: PUSH
4946: LD_INT 0
4948: ST_TO_ADDR
// sRadar := false ;
4949: LD_ADDR_EXP 24
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// sBunker := false ;
4957: LD_ADDR_EXP 25
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// sHack := false ;
4965: LD_ADDR_EXP 26
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// sFire := false ;
4973: LD_ADDR_EXP 27
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// sRefresh := false ;
4981: LD_ADDR_EXP 28
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// sExp := false ;
4989: LD_ADDR_EXP 29
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// sDepot := false ;
4997: LD_ADDR_EXP 30
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// sFlag := false ;
5005: LD_ADDR_EXP 31
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// sKamikadze := false ;
5013: LD_ADDR_EXP 39
5017: PUSH
5018: LD_INT 0
5020: ST_TO_ADDR
// sTroll := false ;
5021: LD_ADDR_EXP 40
5025: PUSH
5026: LD_INT 0
5028: ST_TO_ADDR
// sSlow := false ;
5029: LD_ADDR_EXP 41
5033: PUSH
5034: LD_INT 0
5036: ST_TO_ADDR
// sLack := false ;
5037: LD_ADDR_EXP 42
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// sTank := false ;
5045: LD_ADDR_EXP 44
5049: PUSH
5050: LD_INT 0
5052: ST_TO_ADDR
// sRemote := false ;
5053: LD_ADDR_EXP 45
5057: PUSH
5058: LD_INT 0
5060: ST_TO_ADDR
// sPowell := false ;
5061: LD_ADDR_EXP 46
5065: PUSH
5066: LD_INT 0
5068: ST_TO_ADDR
// sTeleport := false ;
5069: LD_ADDR_EXP 49
5073: PUSH
5074: LD_INT 0
5076: ST_TO_ADDR
// sOilTower := false ;
5077: LD_ADDR_EXP 51
5081: PUSH
5082: LD_INT 0
5084: ST_TO_ADDR
// sShovel := false ;
5085: LD_ADDR_EXP 52
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
// sSheik := false ;
5093: LD_ADDR_EXP 53
5097: PUSH
5098: LD_INT 0
5100: ST_TO_ADDR
// sEarthquake := false ;
5101: LD_ADDR_EXP 55
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// sAI := false ;
5109: LD_ADDR_EXP 56
5113: PUSH
5114: LD_INT 0
5116: ST_TO_ADDR
// sCargo := false ;
5117: LD_ADDR_EXP 59
5121: PUSH
5122: LD_INT 0
5124: ST_TO_ADDR
// sDLaser := false ;
5125: LD_ADDR_EXP 60
5129: PUSH
5130: LD_INT 0
5132: ST_TO_ADDR
// sExchange := false ;
5133: LD_ADDR_EXP 61
5137: PUSH
5138: LD_INT 0
5140: ST_TO_ADDR
// sFac := false ;
5141: LD_ADDR_EXP 62
5145: PUSH
5146: LD_INT 0
5148: ST_TO_ADDR
// sPower := false ;
5149: LD_ADDR_EXP 63
5153: PUSH
5154: LD_INT 0
5156: ST_TO_ADDR
// sRandom := false ;
5157: LD_ADDR_EXP 64
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// sShield := false ;
5165: LD_ADDR_EXP 65
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// sTime := false ;
5173: LD_ADDR_EXP 66
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
// sTools := false ;
5181: LD_ADDR_EXP 67
5185: PUSH
5186: LD_INT 0
5188: ST_TO_ADDR
// sSold := false ;
5189: LD_ADDR_EXP 32
5193: PUSH
5194: LD_INT 0
5196: ST_TO_ADDR
// sDiff := false ;
5197: LD_ADDR_EXP 33
5201: PUSH
5202: LD_INT 0
5204: ST_TO_ADDR
// sFog := false ;
5205: LD_ADDR_EXP 36
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// sReset := false ;
5213: LD_ADDR_EXP 37
5217: PUSH
5218: LD_INT 0
5220: ST_TO_ADDR
// sSun := false ;
5221: LD_ADDR_EXP 38
5225: PUSH
5226: LD_INT 0
5228: ST_TO_ADDR
// sTiger := false ;
5229: LD_ADDR_EXP 34
5233: PUSH
5234: LD_INT 0
5236: ST_TO_ADDR
// sBomb := false ;
5237: LD_ADDR_EXP 35
5241: PUSH
5242: LD_INT 0
5244: ST_TO_ADDR
// sWound := false ;
5245: LD_ADDR_EXP 43
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// sBetray := false ;
5253: LD_ADDR_EXP 47
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// sContamin := false ;
5261: LD_ADDR_EXP 48
5265: PUSH
5266: LD_INT 0
5268: ST_TO_ADDR
// sOil := false ;
5269: LD_ADDR_EXP 50
5273: PUSH
5274: LD_INT 0
5276: ST_TO_ADDR
// sStu := false ;
5277: LD_ADDR_EXP 54
5281: PUSH
5282: LD_INT 0
5284: ST_TO_ADDR
// sBazooka := false ;
5285: LD_ADDR_EXP 57
5289: PUSH
5290: LD_INT 0
5292: ST_TO_ADDR
// sMortar := false ;
5293: LD_ADDR_EXP 58
5297: PUSH
5298: LD_INT 0
5300: ST_TO_ADDR
// sRanger := false ;
5301: LD_ADDR_EXP 68
5305: PUSH
5306: LD_INT 0
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 1
5313: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
5319: PPUSH
5320: PPUSH
// result := [ ] ;
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// if campaign_id = 1 then
5328: LD_OWVAR 69
5332: PUSH
5333: LD_INT 1
5335: EQUAL
5336: IFFALSE 8272
// begin case mission_number of 1 :
5338: LD_OWVAR 70
5342: PUSH
5343: LD_INT 1
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5415
5351: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 15
5371: PUSH
5372: LD_INT 16
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 26
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 101
5397: PUSH
5398: LD_INT 102
5400: PUSH
5401: LD_INT 106
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 8272
5415: LD_INT 2
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5495
5423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 11
5437: PUSH
5438: LD_INT 12
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: LD_INT 16
5446: PUSH
5447: LD_INT 22
5449: PUSH
5450: LD_INT 23
5452: PUSH
5453: LD_INT 26
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 101
5469: PUSH
5470: LD_INT 102
5472: PUSH
5473: LD_INT 105
5475: PUSH
5476: LD_INT 106
5478: PUSH
5479: LD_INT 108
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 8272
5495: LD_INT 3
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5579
5503: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5504: LD_ADDR_VAR 0 1
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: LD_INT 5
5517: PUSH
5518: LD_INT 11
5520: PUSH
5521: LD_INT 12
5523: PUSH
5524: LD_INT 15
5526: PUSH
5527: LD_INT 16
5529: PUSH
5530: LD_INT 22
5532: PUSH
5533: LD_INT 26
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 101
5553: PUSH
5554: LD_INT 102
5556: PUSH
5557: LD_INT 105
5559: PUSH
5560: LD_INT 106
5562: PUSH
5563: LD_INT 108
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: ST_TO_ADDR
5577: GO 8272
5579: LD_INT 4
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 5671
5587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 4
5598: PUSH
5599: LD_INT 5
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 11
5607: PUSH
5608: LD_INT 12
5610: PUSH
5611: LD_INT 15
5613: PUSH
5614: LD_INT 16
5616: PUSH
5617: LD_INT 22
5619: PUSH
5620: LD_INT 23
5622: PUSH
5623: LD_INT 26
5625: PUSH
5626: LD_INT 36
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 101
5645: PUSH
5646: LD_INT 102
5648: PUSH
5649: LD_INT 105
5651: PUSH
5652: LD_INT 106
5654: PUSH
5655: LD_INT 108
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 8272
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5779
5679: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5680: LD_ADDR_VAR 0 1
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: LD_INT 6
5696: PUSH
5697: LD_INT 8
5699: PUSH
5700: LD_INT 11
5702: PUSH
5703: LD_INT 12
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: LD_INT 16
5711: PUSH
5712: LD_INT 22
5714: PUSH
5715: LD_INT 23
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 36
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 105
5751: PUSH
5752: LD_INT 106
5754: PUSH
5755: LD_INT 108
5757: PUSH
5758: LD_INT 109
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8272
5779: LD_INT 6
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5907
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 8
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 15
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: LD_INT 20
5822: PUSH
5823: LD_INT 21
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 23
5831: PUSH
5832: LD_INT 25
5834: PUSH
5835: LD_INT 26
5837: PUSH
5838: LD_INT 30
5840: PUSH
5841: LD_INT 31
5843: PUSH
5844: LD_INT 32
5846: PUSH
5847: LD_INT 36
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 105
5879: PUSH
5880: LD_INT 106
5882: PUSH
5883: LD_INT 108
5885: PUSH
5886: LD_INT 109
5888: PUSH
5889: LD_INT 112
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 8272
5907: LD_INT 7
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 6015
5915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: LD_INT 2
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 15
5941: PUSH
5942: LD_INT 16
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 21
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 23
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 101
5981: PUSH
5982: LD_INT 102
5984: PUSH
5985: LD_INT 103
5987: PUSH
5988: LD_INT 105
5990: PUSH
5991: LD_INT 106
5993: PUSH
5994: LD_INT 108
5996: PUSH
5997: LD_INT 112
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8272
6015: LD_INT 8
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6151
6023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 6
6040: PUSH
6041: LD_INT 7
6043: PUSH
6044: LD_INT 8
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 20
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 23
6070: PUSH
6071: LD_INT 25
6073: PUSH
6074: LD_INT 26
6076: PUSH
6077: LD_INT 30
6079: PUSH
6080: LD_INT 31
6082: PUSH
6083: LD_INT 32
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 101
6113: PUSH
6114: LD_INT 102
6116: PUSH
6117: LD_INT 103
6119: PUSH
6120: LD_INT 105
6122: PUSH
6123: LD_INT 106
6125: PUSH
6126: LD_INT 108
6128: PUSH
6129: LD_INT 109
6131: PUSH
6132: LD_INT 112
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 8272
6151: LD_INT 9
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6295
6159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6160: LD_ADDR_VAR 0 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: LD_INT 8
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 20
6197: PUSH
6198: LD_INT 21
6200: PUSH
6201: LD_INT 22
6203: PUSH
6204: LD_INT 23
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 28
6215: PUSH
6216: LD_INT 30
6218: PUSH
6219: LD_INT 31
6221: PUSH
6222: LD_INT 32
6224: PUSH
6225: LD_INT 36
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 101
6253: PUSH
6254: LD_INT 102
6256: PUSH
6257: LD_INT 103
6259: PUSH
6260: LD_INT 105
6262: PUSH
6263: LD_INT 106
6265: PUSH
6266: LD_INT 108
6268: PUSH
6269: LD_INT 109
6271: PUSH
6272: LD_INT 112
6274: PUSH
6275: LD_INT 114
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: ST_TO_ADDR
6293: GO 8272
6295: LD_INT 10
6297: DOUBLE
6298: EQUAL
6299: IFTRUE 6303
6301: GO 6487
6303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 5
6317: PUSH
6318: LD_INT 6
6320: PUSH
6321: LD_INT 7
6323: PUSH
6324: LD_INT 8
6326: PUSH
6327: LD_INT 9
6329: PUSH
6330: LD_INT 10
6332: PUSH
6333: LD_INT 11
6335: PUSH
6336: LD_INT 12
6338: PUSH
6339: LD_INT 13
6341: PUSH
6342: LD_INT 14
6344: PUSH
6345: LD_INT 15
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: LD_INT 17
6353: PUSH
6354: LD_INT 18
6356: PUSH
6357: LD_INT 19
6359: PUSH
6360: LD_INT 20
6362: PUSH
6363: LD_INT 21
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 24
6374: PUSH
6375: LD_INT 25
6377: PUSH
6378: LD_INT 26
6380: PUSH
6381: LD_INT 28
6383: PUSH
6384: LD_INT 30
6386: PUSH
6387: LD_INT 31
6389: PUSH
6390: LD_INT 32
6392: PUSH
6393: LD_INT 36
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 101
6429: PUSH
6430: LD_INT 102
6432: PUSH
6433: LD_INT 103
6435: PUSH
6436: LD_INT 104
6438: PUSH
6439: LD_INT 105
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 107
6447: PUSH
6448: LD_INT 108
6450: PUSH
6451: LD_INT 109
6453: PUSH
6454: LD_INT 110
6456: PUSH
6457: LD_INT 111
6459: PUSH
6460: LD_INT 112
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 8272
6487: LD_INT 11
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6687
6495: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: LD_INT 6
6515: PUSH
6516: LD_INT 7
6518: PUSH
6519: LD_INT 8
6521: PUSH
6522: LD_INT 9
6524: PUSH
6525: LD_INT 10
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: LD_INT 15
6542: PUSH
6543: LD_INT 16
6545: PUSH
6546: LD_INT 17
6548: PUSH
6549: LD_INT 18
6551: PUSH
6552: LD_INT 19
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 24
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 26
6575: PUSH
6576: LD_INT 28
6578: PUSH
6579: LD_INT 30
6581: PUSH
6582: LD_INT 31
6584: PUSH
6585: LD_INT 32
6587: PUSH
6588: LD_INT 34
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 101
6629: PUSH
6630: LD_INT 102
6632: PUSH
6633: LD_INT 103
6635: PUSH
6636: LD_INT 104
6638: PUSH
6639: LD_INT 105
6641: PUSH
6642: LD_INT 106
6644: PUSH
6645: LD_INT 107
6647: PUSH
6648: LD_INT 108
6650: PUSH
6651: LD_INT 109
6653: PUSH
6654: LD_INT 110
6656: PUSH
6657: LD_INT 111
6659: PUSH
6660: LD_INT 112
6662: PUSH
6663: LD_INT 114
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 8272
6687: LD_INT 12
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6903
6695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: LD_INT 6
6718: PUSH
6719: LD_INT 7
6721: PUSH
6722: LD_INT 8
6724: PUSH
6725: LD_INT 9
6727: PUSH
6728: LD_INT 10
6730: PUSH
6731: LD_INT 11
6733: PUSH
6734: LD_INT 12
6736: PUSH
6737: LD_INT 13
6739: PUSH
6740: LD_INT 14
6742: PUSH
6743: LD_INT 15
6745: PUSH
6746: LD_INT 16
6748: PUSH
6749: LD_INT 17
6751: PUSH
6752: LD_INT 18
6754: PUSH
6755: LD_INT 19
6757: PUSH
6758: LD_INT 20
6760: PUSH
6761: LD_INT 21
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 23
6769: PUSH
6770: LD_INT 24
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 28
6784: PUSH
6785: LD_INT 30
6787: PUSH
6788: LD_INT 31
6790: PUSH
6791: LD_INT 32
6793: PUSH
6794: LD_INT 33
6796: PUSH
6797: LD_INT 34
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 101
6841: PUSH
6842: LD_INT 102
6844: PUSH
6845: LD_INT 103
6847: PUSH
6848: LD_INT 104
6850: PUSH
6851: LD_INT 105
6853: PUSH
6854: LD_INT 106
6856: PUSH
6857: LD_INT 107
6859: PUSH
6860: LD_INT 108
6862: PUSH
6863: LD_INT 109
6865: PUSH
6866: LD_INT 110
6868: PUSH
6869: LD_INT 111
6871: PUSH
6872: LD_INT 112
6874: PUSH
6875: LD_INT 113
6877: PUSH
6878: LD_INT 114
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
6901: GO 8272
6903: LD_INT 13
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7107
6911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: LD_INT 5
6931: PUSH
6932: LD_INT 8
6934: PUSH
6935: LD_INT 9
6937: PUSH
6938: LD_INT 10
6940: PUSH
6941: LD_INT 11
6943: PUSH
6944: LD_INT 12
6946: PUSH
6947: LD_INT 14
6949: PUSH
6950: LD_INT 15
6952: PUSH
6953: LD_INT 16
6955: PUSH
6956: LD_INT 17
6958: PUSH
6959: LD_INT 18
6961: PUSH
6962: LD_INT 19
6964: PUSH
6965: LD_INT 20
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 26
6985: PUSH
6986: LD_INT 27
6988: PUSH
6989: LD_INT 28
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 31
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: LD_INT 33
7003: PUSH
7004: LD_INT 34
7006: PUSH
7007: LD_INT 36
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 101
7045: PUSH
7046: LD_INT 102
7048: PUSH
7049: LD_INT 103
7051: PUSH
7052: LD_INT 104
7054: PUSH
7055: LD_INT 105
7057: PUSH
7058: LD_INT 106
7060: PUSH
7061: LD_INT 107
7063: PUSH
7064: LD_INT 108
7066: PUSH
7067: LD_INT 109
7069: PUSH
7070: LD_INT 110
7072: PUSH
7073: LD_INT 111
7075: PUSH
7076: LD_INT 112
7078: PUSH
7079: LD_INT 113
7081: PUSH
7082: LD_INT 114
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: ST_TO_ADDR
7105: GO 8272
7107: LD_INT 14
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7327
7115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7116: LD_ADDR_VAR 0 1
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: LD_INT 2
7126: PUSH
7127: LD_INT 3
7129: PUSH
7130: LD_INT 4
7132: PUSH
7133: LD_INT 5
7135: PUSH
7136: LD_INT 6
7138: PUSH
7139: LD_INT 7
7141: PUSH
7142: LD_INT 8
7144: PUSH
7145: LD_INT 9
7147: PUSH
7148: LD_INT 10
7150: PUSH
7151: LD_INT 11
7153: PUSH
7154: LD_INT 12
7156: PUSH
7157: LD_INT 13
7159: PUSH
7160: LD_INT 14
7162: PUSH
7163: LD_INT 15
7165: PUSH
7166: LD_INT 16
7168: PUSH
7169: LD_INT 17
7171: PUSH
7172: LD_INT 18
7174: PUSH
7175: LD_INT 19
7177: PUSH
7178: LD_INT 20
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 26
7198: PUSH
7199: LD_INT 27
7201: PUSH
7202: LD_INT 28
7204: PUSH
7205: LD_INT 29
7207: PUSH
7208: LD_INT 30
7210: PUSH
7211: LD_INT 31
7213: PUSH
7214: LD_INT 32
7216: PUSH
7217: LD_INT 33
7219: PUSH
7220: LD_INT 34
7222: PUSH
7223: LD_INT 36
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 102
7268: PUSH
7269: LD_INT 103
7271: PUSH
7272: LD_INT 104
7274: PUSH
7275: LD_INT 105
7277: PUSH
7278: LD_INT 106
7280: PUSH
7281: LD_INT 107
7283: PUSH
7284: LD_INT 108
7286: PUSH
7287: LD_INT 109
7289: PUSH
7290: LD_INT 110
7292: PUSH
7293: LD_INT 111
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 113
7301: PUSH
7302: LD_INT 114
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 8272
7327: LD_INT 15
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7547
7335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: LD_INT 6
7358: PUSH
7359: LD_INT 7
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 9
7367: PUSH
7368: LD_INT 10
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: LD_INT 15
7385: PUSH
7386: LD_INT 16
7388: PUSH
7389: LD_INT 17
7391: PUSH
7392: LD_INT 18
7394: PUSH
7395: LD_INT 19
7397: PUSH
7398: LD_INT 20
7400: PUSH
7401: LD_INT 21
7403: PUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 26
7418: PUSH
7419: LD_INT 27
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 29
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: LD_INT 33
7439: PUSH
7440: LD_INT 34
7442: PUSH
7443: LD_INT 36
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 101
7485: PUSH
7486: LD_INT 102
7488: PUSH
7489: LD_INT 103
7491: PUSH
7492: LD_INT 104
7494: PUSH
7495: LD_INT 105
7497: PUSH
7498: LD_INT 106
7500: PUSH
7501: LD_INT 107
7503: PUSH
7504: LD_INT 108
7506: PUSH
7507: LD_INT 109
7509: PUSH
7510: LD_INT 110
7512: PUSH
7513: LD_INT 111
7515: PUSH
7516: LD_INT 112
7518: PUSH
7519: LD_INT 113
7521: PUSH
7522: LD_INT 114
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
7545: GO 8272
7547: LD_INT 16
7549: DOUBLE
7550: EQUAL
7551: IFTRUE 7555
7553: GO 7679
7555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7556: LD_ADDR_VAR 0 1
7560: PUSH
7561: LD_INT 2
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: LD_INT 7
7572: PUSH
7573: LD_INT 11
7575: PUSH
7576: LD_INT 12
7578: PUSH
7579: LD_INT 15
7581: PUSH
7582: LD_INT 16
7584: PUSH
7585: LD_INT 20
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 22
7593: PUSH
7594: LD_INT 23
7596: PUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 26
7602: PUSH
7603: LD_INT 30
7605: PUSH
7606: LD_INT 31
7608: PUSH
7609: LD_INT 32
7611: PUSH
7612: LD_INT 33
7614: PUSH
7615: LD_INT 34
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 101
7641: PUSH
7642: LD_INT 102
7644: PUSH
7645: LD_INT 103
7647: PUSH
7648: LD_INT 106
7650: PUSH
7651: LD_INT 108
7653: PUSH
7654: LD_INT 112
7656: PUSH
7657: LD_INT 113
7659: PUSH
7660: LD_INT 114
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: ST_TO_ADDR
7677: GO 8272
7679: LD_INT 17
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7899
7687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7688: LD_ADDR_VAR 0 1
7692: PUSH
7693: LD_INT 1
7695: PUSH
7696: LD_INT 2
7698: PUSH
7699: LD_INT 3
7701: PUSH
7702: LD_INT 4
7704: PUSH
7705: LD_INT 5
7707: PUSH
7708: LD_INT 6
7710: PUSH
7711: LD_INT 7
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 9
7719: PUSH
7720: LD_INT 10
7722: PUSH
7723: LD_INT 11
7725: PUSH
7726: LD_INT 12
7728: PUSH
7729: LD_INT 13
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 29
7779: PUSH
7780: LD_INT 30
7782: PUSH
7783: LD_INT 31
7785: PUSH
7786: LD_INT 32
7788: PUSH
7789: LD_INT 33
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 104
7846: PUSH
7847: LD_INT 105
7849: PUSH
7850: LD_INT 106
7852: PUSH
7853: LD_INT 107
7855: PUSH
7856: LD_INT 108
7858: PUSH
7859: LD_INT 109
7861: PUSH
7862: LD_INT 110
7864: PUSH
7865: LD_INT 111
7867: PUSH
7868: LD_INT 112
7870: PUSH
7871: LD_INT 113
7873: PUSH
7874: LD_INT 114
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 8272
7899: LD_INT 18
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8043
7907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7908: LD_ADDR_VAR 0 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 4
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: LD_INT 7
7924: PUSH
7925: LD_INT 11
7927: PUSH
7928: LD_INT 12
7930: PUSH
7931: LD_INT 15
7933: PUSH
7934: LD_INT 16
7936: PUSH
7937: LD_INT 20
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 23
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 26
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 31
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 35
7972: PUSH
7973: LD_INT 36
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 101
8001: PUSH
8002: LD_INT 102
8004: PUSH
8005: LD_INT 103
8007: PUSH
8008: LD_INT 106
8010: PUSH
8011: LD_INT 108
8013: PUSH
8014: LD_INT 112
8016: PUSH
8017: LD_INT 113
8019: PUSH
8020: LD_INT 114
8022: PUSH
8023: LD_INT 115
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: ST_TO_ADDR
8041: GO 8272
8043: LD_INT 19
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8271
8051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: LD_INT 4
8068: PUSH
8069: LD_INT 5
8071: PUSH
8072: LD_INT 6
8074: PUSH
8075: LD_INT 7
8077: PUSH
8078: LD_INT 8
8080: PUSH
8081: LD_INT 9
8083: PUSH
8084: LD_INT 10
8086: PUSH
8087: LD_INT 11
8089: PUSH
8090: LD_INT 12
8092: PUSH
8093: LD_INT 13
8095: PUSH
8096: LD_INT 14
8098: PUSH
8099: LD_INT 15
8101: PUSH
8102: LD_INT 16
8104: PUSH
8105: LD_INT 17
8107: PUSH
8108: LD_INT 18
8110: PUSH
8111: LD_INT 19
8113: PUSH
8114: LD_INT 20
8116: PUSH
8117: LD_INT 21
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 23
8125: PUSH
8126: LD_INT 24
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 27
8137: PUSH
8138: LD_INT 28
8140: PUSH
8141: LD_INT 29
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 31
8149: PUSH
8150: LD_INT 32
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 34
8158: PUSH
8159: LD_INT 35
8161: PUSH
8162: LD_INT 36
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 101
8205: PUSH
8206: LD_INT 102
8208: PUSH
8209: LD_INT 103
8211: PUSH
8212: LD_INT 104
8214: PUSH
8215: LD_INT 105
8217: PUSH
8218: LD_INT 106
8220: PUSH
8221: LD_INT 107
8223: PUSH
8224: LD_INT 108
8226: PUSH
8227: LD_INT 109
8229: PUSH
8230: LD_INT 110
8232: PUSH
8233: LD_INT 111
8235: PUSH
8236: LD_INT 112
8238: PUSH
8239: LD_INT 113
8241: PUSH
8242: LD_INT 114
8244: PUSH
8245: LD_INT 115
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: ST_TO_ADDR
8269: GO 8272
8271: POP
// end ; if result then
8272: LD_VAR 0 1
8276: IFFALSE 8565
// begin normal :=  ;
8278: LD_ADDR_VAR 0 3
8282: PUSH
8283: LD_STRING 
8285: ST_TO_ADDR
// hardcore :=  ;
8286: LD_ADDR_VAR 0 4
8290: PUSH
8291: LD_STRING 
8293: ST_TO_ADDR
// for i = 1 to normalCounter do
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: DOUBLE
8300: LD_INT 1
8302: DEC
8303: ST_TO_ADDR
8304: LD_EXP 16
8308: PUSH
8309: FOR_TO
8310: IFFALSE 8411
// begin tmp := 0 ;
8312: LD_ADDR_VAR 0 2
8316: PUSH
8317: LD_STRING 0
8319: ST_TO_ADDR
// if result [ 1 ] then
8320: LD_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: ARRAY
8328: IFFALSE 8393
// if result [ 1 ] [ 1 ] = i then
8330: LD_VAR 0 1
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 5
8347: EQUAL
8348: IFFALSE 8393
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 1
8362: PPUSH
8363: LD_VAR 0 1
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_INT 1
8374: PPUSH
8375: CALL_OW 3
8379: PPUSH
8380: CALL_OW 1
8384: ST_TO_ADDR
// tmp := 1 ;
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_STRING 1
8392: ST_TO_ADDR
// end ; normal := normal & tmp ;
8393: LD_ADDR_VAR 0 3
8397: PUSH
8398: LD_VAR 0 3
8402: PUSH
8403: LD_VAR 0 2
8407: STR
8408: ST_TO_ADDR
// end ;
8409: GO 8309
8411: POP
8412: POP
// for i = 1 to hardcoreCounter do
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: DOUBLE
8419: LD_INT 1
8421: DEC
8422: ST_TO_ADDR
8423: LD_EXP 17
8427: PUSH
8428: FOR_TO
8429: IFFALSE 8534
// begin tmp := 0 ;
8431: LD_ADDR_VAR 0 2
8435: PUSH
8436: LD_STRING 0
8438: ST_TO_ADDR
// if result [ 2 ] then
8439: LD_VAR 0 1
8443: PUSH
8444: LD_INT 2
8446: ARRAY
8447: IFFALSE 8516
// if result [ 2 ] [ 1 ] = 100 + i then
8449: LD_VAR 0 1
8453: PUSH
8454: LD_INT 2
8456: ARRAY
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PUSH
8462: LD_INT 100
8464: PUSH
8465: LD_VAR 0 5
8469: PLUS
8470: EQUAL
8471: IFFALSE 8516
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8473: LD_ADDR_VAR 0 1
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 2
8485: PPUSH
8486: LD_VAR 0 1
8490: PUSH
8491: LD_INT 2
8493: ARRAY
8494: PPUSH
8495: LD_INT 1
8497: PPUSH
8498: CALL_OW 3
8502: PPUSH
8503: CALL_OW 1
8507: ST_TO_ADDR
// tmp := 1 ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: LD_STRING 1
8515: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_VAR 0 4
8525: PUSH
8526: LD_VAR 0 2
8530: STR
8531: ST_TO_ADDR
// end ;
8532: GO 8428
8534: POP
8535: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8536: LD_STRING getStreamItemsFromMission("
8538: PUSH
8539: LD_VAR 0 3
8543: STR
8544: PUSH
8545: LD_STRING ","
8547: STR
8548: PUSH
8549: LD_VAR 0 4
8553: STR
8554: PUSH
8555: LD_STRING ")
8557: STR
8558: PPUSH
8559: CALL_OW 559
// end else
8563: GO 8572
// ToLua ( getStreamItemsFromMission("","") ) ;
8565: LD_STRING getStreamItemsFromMission("","")
8567: PPUSH
8568: CALL_OW 559
// end ;
8572: LD_VAR 0 1
8576: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8577: LD_VAR 0 2
8581: PUSH
8582: LD_INT 100
8584: EQUAL
8585: IFFALSE 9534
// begin if not StreamModeActive then
8587: LD_EXP 15
8591: NOT
8592: IFFALSE 8602
// StreamModeActive := true ;
8594: LD_ADDR_EXP 15
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 0 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 0
8609: EQUAL
8610: IFFALSE 8616
// InitStreamMode ;
8612: CALL 4874 0 0
// if p3 = 1 then
8616: LD_VAR 0 3
8620: PUSH
8621: LD_INT 1
8623: EQUAL
8624: IFFALSE 8634
// sRocket := true ;
8626: LD_ADDR_EXP 20
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// if p3 = 2 then
8634: LD_VAR 0 3
8638: PUSH
8639: LD_INT 2
8641: EQUAL
8642: IFFALSE 8652
// sSpeed := true ;
8644: LD_ADDR_EXP 19
8648: PUSH
8649: LD_INT 1
8651: ST_TO_ADDR
// if p3 = 3 then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8670
// sEngine := true ;
8662: LD_ADDR_EXP 21
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// if p3 = 4 then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_INT 4
8677: EQUAL
8678: IFFALSE 8688
// sSpec := true ;
8680: LD_ADDR_EXP 18
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// if p3 = 5 then
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 5
8695: EQUAL
8696: IFFALSE 8706
// sLevel := true ;
8698: LD_ADDR_EXP 22
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// if p3 = 6 then
8706: LD_VAR 0 3
8710: PUSH
8711: LD_INT 6
8713: EQUAL
8714: IFFALSE 8724
// sArmoury := true ;
8716: LD_ADDR_EXP 23
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
// if p3 = 7 then
8724: LD_VAR 0 3
8728: PUSH
8729: LD_INT 7
8731: EQUAL
8732: IFFALSE 8742
// sRadar := true ;
8734: LD_ADDR_EXP 24
8738: PUSH
8739: LD_INT 1
8741: ST_TO_ADDR
// if p3 = 8 then
8742: LD_VAR 0 3
8746: PUSH
8747: LD_INT 8
8749: EQUAL
8750: IFFALSE 8760
// sBunker := true ;
8752: LD_ADDR_EXP 25
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if p3 = 9 then
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 9
8767: EQUAL
8768: IFFALSE 8778
// sHack := true ;
8770: LD_ADDR_EXP 26
8774: PUSH
8775: LD_INT 1
8777: ST_TO_ADDR
// if p3 = 10 then
8778: LD_VAR 0 3
8782: PUSH
8783: LD_INT 10
8785: EQUAL
8786: IFFALSE 8796
// sFire := true ;
8788: LD_ADDR_EXP 27
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// if p3 = 11 then
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 11
8803: EQUAL
8804: IFFALSE 8814
// sRefresh := true ;
8806: LD_ADDR_EXP 28
8810: PUSH
8811: LD_INT 1
8813: ST_TO_ADDR
// if p3 = 12 then
8814: LD_VAR 0 3
8818: PUSH
8819: LD_INT 12
8821: EQUAL
8822: IFFALSE 8832
// sExp := true ;
8824: LD_ADDR_EXP 29
8828: PUSH
8829: LD_INT 1
8831: ST_TO_ADDR
// if p3 = 13 then
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 13
8839: EQUAL
8840: IFFALSE 8850
// sDepot := true ;
8842: LD_ADDR_EXP 30
8846: PUSH
8847: LD_INT 1
8849: ST_TO_ADDR
// if p3 = 14 then
8850: LD_VAR 0 3
8854: PUSH
8855: LD_INT 14
8857: EQUAL
8858: IFFALSE 8868
// sFlag := true ;
8860: LD_ADDR_EXP 31
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// if p3 = 15 then
8868: LD_VAR 0 3
8872: PUSH
8873: LD_INT 15
8875: EQUAL
8876: IFFALSE 8886
// sKamikadze := true ;
8878: LD_ADDR_EXP 39
8882: PUSH
8883: LD_INT 1
8885: ST_TO_ADDR
// if p3 = 16 then
8886: LD_VAR 0 3
8890: PUSH
8891: LD_INT 16
8893: EQUAL
8894: IFFALSE 8904
// sTroll := true ;
8896: LD_ADDR_EXP 40
8900: PUSH
8901: LD_INT 1
8903: ST_TO_ADDR
// if p3 = 17 then
8904: LD_VAR 0 3
8908: PUSH
8909: LD_INT 17
8911: EQUAL
8912: IFFALSE 8922
// sSlow := true ;
8914: LD_ADDR_EXP 41
8918: PUSH
8919: LD_INT 1
8921: ST_TO_ADDR
// if p3 = 18 then
8922: LD_VAR 0 3
8926: PUSH
8927: LD_INT 18
8929: EQUAL
8930: IFFALSE 8940
// sLack := true ;
8932: LD_ADDR_EXP 42
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// if p3 = 19 then
8940: LD_VAR 0 3
8944: PUSH
8945: LD_INT 19
8947: EQUAL
8948: IFFALSE 8958
// sTank := true ;
8950: LD_ADDR_EXP 44
8954: PUSH
8955: LD_INT 1
8957: ST_TO_ADDR
// if p3 = 20 then
8958: LD_VAR 0 3
8962: PUSH
8963: LD_INT 20
8965: EQUAL
8966: IFFALSE 8976
// sRemote := true ;
8968: LD_ADDR_EXP 45
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// if p3 = 21 then
8976: LD_VAR 0 3
8980: PUSH
8981: LD_INT 21
8983: EQUAL
8984: IFFALSE 8994
// sPowell := true ;
8986: LD_ADDR_EXP 46
8990: PUSH
8991: LD_INT 1
8993: ST_TO_ADDR
// if p3 = 22 then
8994: LD_VAR 0 3
8998: PUSH
8999: LD_INT 22
9001: EQUAL
9002: IFFALSE 9012
// sTeleport := true ;
9004: LD_ADDR_EXP 49
9008: PUSH
9009: LD_INT 1
9011: ST_TO_ADDR
// if p3 = 23 then
9012: LD_VAR 0 3
9016: PUSH
9017: LD_INT 23
9019: EQUAL
9020: IFFALSE 9030
// sOilTower := true ;
9022: LD_ADDR_EXP 51
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// if p3 = 24 then
9030: LD_VAR 0 3
9034: PUSH
9035: LD_INT 24
9037: EQUAL
9038: IFFALSE 9048
// sShovel := true ;
9040: LD_ADDR_EXP 52
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// if p3 = 25 then
9048: LD_VAR 0 3
9052: PUSH
9053: LD_INT 25
9055: EQUAL
9056: IFFALSE 9066
// sSheik := true ;
9058: LD_ADDR_EXP 53
9062: PUSH
9063: LD_INT 1
9065: ST_TO_ADDR
// if p3 = 26 then
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 26
9073: EQUAL
9074: IFFALSE 9084
// sEarthquake := true ;
9076: LD_ADDR_EXP 55
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// if p3 = 27 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 27
9091: EQUAL
9092: IFFALSE 9102
// sAI := true ;
9094: LD_ADDR_EXP 56
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 28 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 28
9109: EQUAL
9110: IFFALSE 9120
// sCargo := true ;
9112: LD_ADDR_EXP 59
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 29 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 29
9127: EQUAL
9128: IFFALSE 9138
// sDLaser := true ;
9130: LD_ADDR_EXP 60
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 30 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 30
9145: EQUAL
9146: IFFALSE 9156
// sExchange := true ;
9148: LD_ADDR_EXP 61
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 31 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 31
9163: EQUAL
9164: IFFALSE 9174
// sFac := true ;
9166: LD_ADDR_EXP 62
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 32 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 32
9181: EQUAL
9182: IFFALSE 9192
// sPower := true ;
9184: LD_ADDR_EXP 63
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 33 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 33
9199: EQUAL
9200: IFFALSE 9210
// sRandom := true ;
9202: LD_ADDR_EXP 64
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 34 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 34
9217: EQUAL
9218: IFFALSE 9228
// sShield := true ;
9220: LD_ADDR_EXP 65
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 35 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 35
9235: EQUAL
9236: IFFALSE 9246
// sTime := true ;
9238: LD_ADDR_EXP 66
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 36 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 36
9253: EQUAL
9254: IFFALSE 9264
// sTools := true ;
9256: LD_ADDR_EXP 67
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 101 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 101
9271: EQUAL
9272: IFFALSE 9282
// sSold := true ;
9274: LD_ADDR_EXP 32
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 102 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 102
9289: EQUAL
9290: IFFALSE 9300
// sDiff := true ;
9292: LD_ADDR_EXP 33
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 103 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 103
9307: EQUAL
9308: IFFALSE 9318
// sFog := true ;
9310: LD_ADDR_EXP 36
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 104 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 104
9325: EQUAL
9326: IFFALSE 9336
// sReset := true ;
9328: LD_ADDR_EXP 37
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 105 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 105
9343: EQUAL
9344: IFFALSE 9354
// sSun := true ;
9346: LD_ADDR_EXP 38
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 106 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 106
9361: EQUAL
9362: IFFALSE 9372
// sTiger := true ;
9364: LD_ADDR_EXP 34
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 107 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 107
9379: EQUAL
9380: IFFALSE 9390
// sBomb := true ;
9382: LD_ADDR_EXP 35
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 108 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 108
9397: EQUAL
9398: IFFALSE 9408
// sWound := true ;
9400: LD_ADDR_EXP 43
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 109 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 109
9415: EQUAL
9416: IFFALSE 9426
// sBetray := true ;
9418: LD_ADDR_EXP 47
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// if p3 = 110 then
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 110
9433: EQUAL
9434: IFFALSE 9444
// sContamin := true ;
9436: LD_ADDR_EXP 48
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// if p3 = 111 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 111
9451: EQUAL
9452: IFFALSE 9462
// sOil := true ;
9454: LD_ADDR_EXP 50
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// if p3 = 112 then
9462: LD_VAR 0 3
9466: PUSH
9467: LD_INT 112
9469: EQUAL
9470: IFFALSE 9480
// sStu := true ;
9472: LD_ADDR_EXP 54
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if p3 = 113 then
9480: LD_VAR 0 3
9484: PUSH
9485: LD_INT 113
9487: EQUAL
9488: IFFALSE 9498
// sBazooka := true ;
9490: LD_ADDR_EXP 57
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// if p3 = 114 then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 114
9505: EQUAL
9506: IFFALSE 9516
// sMortar := true ;
9508: LD_ADDR_EXP 58
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if p3 = 115 then
9516: LD_VAR 0 3
9520: PUSH
9521: LD_INT 115
9523: EQUAL
9524: IFFALSE 9534
// sRanger := true ;
9526: LD_ADDR_EXP 68
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// end ; end ;
9534: PPOPN 6
9536: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9537: LD_EXP 15
9541: PUSH
9542: LD_EXP 20
9546: AND
9547: IFFALSE 9671
9549: GO 9551
9551: DISABLE
9552: LD_INT 0
9554: PPUSH
9555: PPUSH
// begin enable ;
9556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9557: LD_ADDR_VAR 0 2
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_OWVAR 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 7
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 34
9589: PUSH
9590: LD_INT 45
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 34
9599: PUSH
9600: LD_INT 28
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 34
9609: PUSH
9610: LD_INT 47
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: ST_TO_ADDR
// if not tmp then
9633: LD_VAR 0 2
9637: NOT
9638: IFFALSE 9642
// exit ;
9640: GO 9671
// for i in tmp do
9642: LD_ADDR_VAR 0 1
9646: PUSH
9647: LD_VAR 0 2
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9669
// begin SetLives ( i , 0 ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: LD_INT 0
9662: PPUSH
9663: CALL_OW 234
// end ;
9667: GO 9652
9669: POP
9670: POP
// end ;
9671: PPOPN 2
9673: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9674: LD_EXP 15
9678: PUSH
9679: LD_EXP 21
9683: AND
9684: IFFALSE 9768
9686: GO 9688
9688: DISABLE
9689: LD_INT 0
9691: PPUSH
9692: PPUSH
// begin enable ;
9693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9694: LD_ADDR_VAR 0 2
9698: PUSH
9699: LD_INT 22
9701: PUSH
9702: LD_OWVAR 2
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 32
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: ST_TO_ADDR
// if not tmp then
9730: LD_VAR 0 2
9734: NOT
9735: IFFALSE 9739
// exit ;
9737: GO 9768
// for i in tmp do
9739: LD_ADDR_VAR 0 1
9743: PUSH
9744: LD_VAR 0 2
9748: PUSH
9749: FOR_IN
9750: IFFALSE 9766
// begin SetLives ( i , 0 ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_INT 0
9759: PPUSH
9760: CALL_OW 234
// end ;
9764: GO 9749
9766: POP
9767: POP
// end ;
9768: PPOPN 2
9770: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9771: LD_EXP 15
9775: PUSH
9776: LD_EXP 18
9780: AND
9781: IFFALSE 9874
9783: GO 9785
9785: DISABLE
9786: LD_INT 0
9788: PPUSH
// begin enable ;
9789: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 22
9797: PUSH
9798: LD_OWVAR 2
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: LD_INT 25
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 25
9822: PUSH
9823: LD_INT 9
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 25
9832: PUSH
9833: LD_INT 8
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: PUSH
9855: FOR_IN
9856: IFFALSE 9872
// begin SetClass ( i , 1 ) ;
9858: LD_VAR 0 1
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 336
// end ;
9870: GO 9855
9872: POP
9873: POP
// end ;
9874: PPOPN 1
9876: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9877: LD_EXP 15
9881: PUSH
9882: LD_EXP 19
9886: AND
9887: PUSH
9888: LD_OWVAR 65
9892: PUSH
9893: LD_INT 7
9895: LESS
9896: AND
9897: IFFALSE 9911
9899: GO 9901
9901: DISABLE
// begin enable ;
9902: ENABLE
// game_speed := 7 ;
9903: LD_ADDR_OWVAR 65
9907: PUSH
9908: LD_INT 7
9910: ST_TO_ADDR
// end ;
9911: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9912: LD_EXP 15
9916: PUSH
9917: LD_EXP 22
9921: AND
9922: IFFALSE 10124
9924: GO 9926
9926: DISABLE
9927: LD_INT 0
9929: PPUSH
9930: PPUSH
9931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9932: LD_ADDR_VAR 0 3
9936: PUSH
9937: LD_INT 81
9939: PUSH
9940: LD_OWVAR 2
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 69
9967: ST_TO_ADDR
// if not tmp then
9968: LD_VAR 0 3
9972: NOT
9973: IFFALSE 9977
// exit ;
9975: GO 10124
// if tmp > 5 then
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 5
9984: GREATER
9985: IFFALSE 9997
// k := 5 else
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 5
9994: ST_TO_ADDR
9995: GO 10007
// k := tmp ;
9997: LD_ADDR_VAR 0 2
10001: PUSH
10002: LD_VAR 0 3
10006: ST_TO_ADDR
// for i := 1 to k do
10007: LD_ADDR_VAR 0 1
10011: PUSH
10012: DOUBLE
10013: LD_INT 1
10015: DEC
10016: ST_TO_ADDR
10017: LD_VAR 0 2
10021: PUSH
10022: FOR_TO
10023: IFFALSE 10122
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_VAR 0 1
10034: ARRAY
10035: PPUSH
10036: LD_VAR 0 1
10040: PUSH
10041: LD_INT 4
10043: MOD
10044: PUSH
10045: LD_INT 1
10047: PLUS
10048: PPUSH
10049: CALL_OW 259
10053: PUSH
10054: LD_INT 10
10056: LESS
10057: IFFALSE 10120
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10059: LD_VAR 0 3
10063: PUSH
10064: LD_VAR 0 1
10068: ARRAY
10069: PPUSH
10070: LD_VAR 0 1
10074: PUSH
10075: LD_INT 4
10077: MOD
10078: PUSH
10079: LD_INT 1
10081: PLUS
10082: PPUSH
10083: LD_VAR 0 3
10087: PUSH
10088: LD_VAR 0 1
10092: ARRAY
10093: PPUSH
10094: LD_VAR 0 1
10098: PUSH
10099: LD_INT 4
10101: MOD
10102: PUSH
10103: LD_INT 1
10105: PLUS
10106: PPUSH
10107: CALL_OW 259
10111: PUSH
10112: LD_INT 1
10114: PLUS
10115: PPUSH
10116: CALL_OW 237
10120: GO 10022
10122: POP
10123: POP
// end ;
10124: PPOPN 3
10126: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10127: LD_EXP 15
10131: PUSH
10132: LD_EXP 23
10136: AND
10137: IFFALSE 10157
10139: GO 10141
10141: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10142: LD_INT 4
10144: PPUSH
10145: LD_OWVAR 2
10149: PPUSH
10150: LD_INT 0
10152: PPUSH
10153: CALL_OW 324
10157: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10158: LD_EXP 15
10162: PUSH
10163: LD_EXP 52
10167: AND
10168: IFFALSE 10188
10170: GO 10172
10172: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10173: LD_INT 19
10175: PPUSH
10176: LD_OWVAR 2
10180: PPUSH
10181: LD_INT 0
10183: PPUSH
10184: CALL_OW 324
10188: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10189: LD_EXP 15
10193: PUSH
10194: LD_EXP 24
10198: AND
10199: IFFALSE 10301
10201: GO 10203
10203: DISABLE
10204: LD_INT 0
10206: PPUSH
10207: PPUSH
// begin enable ;
10208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10209: LD_ADDR_VAR 0 2
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_OWVAR 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 2
10228: PUSH
10229: LD_INT 34
10231: PUSH
10232: LD_INT 11
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 34
10241: PUSH
10242: LD_INT 30
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: ST_TO_ADDR
// if not tmp then
10263: LD_VAR 0 2
10267: NOT
10268: IFFALSE 10272
// exit ;
10270: GO 10301
// for i in tmp do
10272: LD_ADDR_VAR 0 1
10276: PUSH
10277: LD_VAR 0 2
10281: PUSH
10282: FOR_IN
10283: IFFALSE 10299
// begin SetLives ( i , 0 ) ;
10285: LD_VAR 0 1
10289: PPUSH
10290: LD_INT 0
10292: PPUSH
10293: CALL_OW 234
// end ;
10297: GO 10282
10299: POP
10300: POP
// end ;
10301: PPOPN 2
10303: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10304: LD_EXP 15
10308: PUSH
10309: LD_EXP 25
10313: AND
10314: IFFALSE 10334
10316: GO 10318
10318: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10319: LD_INT 32
10321: PPUSH
10322: LD_OWVAR 2
10326: PPUSH
10327: LD_INT 0
10329: PPUSH
10330: CALL_OW 324
10334: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10335: LD_EXP 15
10339: PUSH
10340: LD_EXP 26
10344: AND
10345: IFFALSE 10526
10347: GO 10349
10349: DISABLE
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
10354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 33
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: ST_TO_ADDR
// if not tmp then
10391: LD_VAR 0 2
10395: NOT
10396: IFFALSE 10400
// exit ;
10398: GO 10526
// side := 0 ;
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_INT 0
10407: ST_TO_ADDR
// for i := 1 to 8 do
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: DOUBLE
10414: LD_INT 1
10416: DEC
10417: ST_TO_ADDR
10418: LD_INT 8
10420: PUSH
10421: FOR_TO
10422: IFFALSE 10470
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10424: LD_OWVAR 2
10428: PUSH
10429: LD_VAR 0 1
10433: NONEQUAL
10434: PUSH
10435: LD_OWVAR 2
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 81
10449: PUSH
10450: LD_INT 2
10452: EQUAL
10453: AND
10454: IFFALSE 10468
// begin side := i ;
10456: LD_ADDR_VAR 0 3
10460: PUSH
10461: LD_VAR 0 1
10465: ST_TO_ADDR
// break ;
10466: GO 10470
// end ;
10468: GO 10421
10470: POP
10471: POP
// if not side then
10472: LD_VAR 0 3
10476: NOT
10477: IFFALSE 10481
// exit ;
10479: GO 10526
// for i := 1 to tmp do
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: DOUBLE
10487: LD_INT 1
10489: DEC
10490: ST_TO_ADDR
10491: LD_VAR 0 2
10495: PUSH
10496: FOR_TO
10497: IFFALSE 10524
// if Prob ( 60 ) then
10499: LD_INT 60
10501: PPUSH
10502: CALL_OW 13
10506: IFFALSE 10522
// SetSide ( i , side ) ;
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: CALL_OW 235
10522: GO 10496
10524: POP
10525: POP
// end ;
10526: PPOPN 3
10528: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10529: LD_EXP 15
10533: PUSH
10534: LD_EXP 28
10538: AND
10539: IFFALSE 10658
10541: GO 10543
10543: DISABLE
10544: LD_INT 0
10546: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_OWVAR 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: LD_INT 23
10579: PUSH
10580: LD_INT 0
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10656
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 257
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 3
10622: PUSH
10623: LD_INT 4
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: IN
10632: IFFALSE 10654
// SetClass ( un , rand ( 1 , 4 ) ) ;
10634: LD_VAR 0 1
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: LD_INT 4
10644: PPUSH
10645: CALL_OW 12
10649: PPUSH
10650: CALL_OW 336
10654: GO 10601
10656: POP
10657: POP
// end ;
10658: PPOPN 1
10660: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10661: LD_EXP 15
10665: PUSH
10666: LD_EXP 27
10670: AND
10671: IFFALSE 10750
10673: GO 10675
10675: DISABLE
10676: LD_INT 0
10678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10679: LD_ADDR_VAR 0 1
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_OWVAR 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 69
10714: ST_TO_ADDR
// if not tmp then
10715: LD_VAR 0 1
10719: NOT
10720: IFFALSE 10724
// exit ;
10722: GO 10750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 1
10731: PPUSH
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 12
10741: ARRAY
10742: PPUSH
10743: LD_INT 100
10745: PPUSH
10746: CALL_OW 234
// end ;
10750: PPOPN 1
10752: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10753: LD_EXP 15
10757: PUSH
10758: LD_EXP 29
10762: AND
10763: IFFALSE 10861
10765: GO 10767
10767: DISABLE
10768: LD_INT 0
10770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10771: LD_ADDR_VAR 0 1
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_OWVAR 2
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 21
10790: PUSH
10791: LD_INT 1
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: ST_TO_ADDR
// if not tmp then
10807: LD_VAR 0 1
10811: NOT
10812: IFFALSE 10816
// exit ;
10814: GO 10861
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10816: LD_VAR 0 1
10820: PUSH
10821: LD_INT 1
10823: PPUSH
10824: LD_VAR 0 1
10828: PPUSH
10829: CALL_OW 12
10833: ARRAY
10834: PPUSH
10835: LD_INT 1
10837: PPUSH
10838: LD_INT 4
10840: PPUSH
10841: CALL_OW 12
10845: PPUSH
10846: LD_INT 3000
10848: PPUSH
10849: LD_INT 9000
10851: PPUSH
10852: CALL_OW 12
10856: PPUSH
10857: CALL_OW 492
// end ;
10861: PPOPN 1
10863: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10864: LD_EXP 15
10868: PUSH
10869: LD_EXP 30
10873: AND
10874: IFFALSE 10894
10876: GO 10878
10878: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10879: LD_INT 1
10881: PPUSH
10882: LD_OWVAR 2
10886: PPUSH
10887: LD_INT 0
10889: PPUSH
10890: CALL_OW 324
10894: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10895: LD_EXP 15
10899: PUSH
10900: LD_EXP 31
10904: AND
10905: IFFALSE 10988
10907: GO 10909
10909: DISABLE
10910: LD_INT 0
10912: PPUSH
10913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10914: LD_ADDR_VAR 0 2
10918: PUSH
10919: LD_INT 22
10921: PUSH
10922: LD_OWVAR 2
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 21
10933: PUSH
10934: LD_INT 3
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PPUSH
10945: CALL_OW 69
10949: ST_TO_ADDR
// if not tmp then
10950: LD_VAR 0 2
10954: NOT
10955: IFFALSE 10959
// exit ;
10957: GO 10988
// for i in tmp do
10959: LD_ADDR_VAR 0 1
10963: PUSH
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_IN
10970: IFFALSE 10986
// SetBLevel ( i , 10 ) ;
10972: LD_VAR 0 1
10976: PPUSH
10977: LD_INT 10
10979: PPUSH
10980: CALL_OW 241
10984: GO 10969
10986: POP
10987: POP
// end ;
10988: PPOPN 2
10990: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10991: LD_EXP 15
10995: PUSH
10996: LD_EXP 32
11000: AND
11001: IFFALSE 11112
11003: GO 11005
11005: DISABLE
11006: LD_INT 0
11008: PPUSH
11009: PPUSH
11010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_OWVAR 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: ST_TO_ADDR
// if not tmp then
11047: LD_VAR 0 3
11051: NOT
11052: IFFALSE 11056
// exit ;
11054: GO 11112
// un := tmp [ rand ( 1 , tmp ) ] ;
11056: LD_ADDR_VAR 0 2
11060: PUSH
11061: LD_VAR 0 3
11065: PUSH
11066: LD_INT 1
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: CALL_OW 12
11078: ARRAY
11079: ST_TO_ADDR
// if Crawls ( un ) then
11080: LD_VAR 0 2
11084: PPUSH
11085: CALL_OW 318
11089: IFFALSE 11100
// ComWalk ( un ) ;
11091: LD_VAR 0 2
11095: PPUSH
11096: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_INT 5
11107: PPUSH
11108: CALL_OW 336
// end ;
11112: PPOPN 3
11114: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11115: LD_EXP 15
11119: PUSH
11120: LD_EXP 33
11124: AND
11125: PUSH
11126: LD_OWVAR 67
11130: PUSH
11131: LD_INT 3
11133: LESS
11134: AND
11135: IFFALSE 11154
11137: GO 11139
11139: DISABLE
// Difficulty := Difficulty + 1 ;
11140: LD_ADDR_OWVAR 67
11144: PUSH
11145: LD_OWVAR 67
11149: PUSH
11150: LD_INT 1
11152: PLUS
11153: ST_TO_ADDR
11154: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11155: LD_EXP 15
11159: PUSH
11160: LD_EXP 34
11164: AND
11165: IFFALSE 11268
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
// begin for i := 1 to 5 do
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: DOUBLE
11179: LD_INT 1
11181: DEC
11182: ST_TO_ADDR
11183: LD_INT 5
11185: PUSH
11186: FOR_TO
11187: IFFALSE 11266
// begin uc_nation := nation_nature ;
11189: LD_ADDR_OWVAR 21
11193: PUSH
11194: LD_INT 0
11196: ST_TO_ADDR
// uc_side := 0 ;
11197: LD_ADDR_OWVAR 20
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11205: LD_ADDR_OWVAR 29
11209: PUSH
11210: LD_INT 12
11212: PUSH
11213: LD_INT 12
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: ST_TO_ADDR
// hc_agressivity := 20 ;
11220: LD_ADDR_OWVAR 35
11224: PUSH
11225: LD_INT 20
11227: ST_TO_ADDR
// hc_class := class_tiger ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 14
11235: ST_TO_ADDR
// hc_gallery :=  ;
11236: LD_ADDR_OWVAR 33
11240: PUSH
11241: LD_STRING 
11243: ST_TO_ADDR
// hc_name :=  ;
11244: LD_ADDR_OWVAR 26
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11252: CALL_OW 44
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 51
// end ;
11264: GO 11186
11266: POP
11267: POP
// end ;
11268: PPOPN 1
11270: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11271: LD_EXP 15
11275: PUSH
11276: LD_EXP 35
11280: AND
11281: IFFALSE 11290
11283: GO 11285
11285: DISABLE
// StreamSibBomb ;
11286: CALL 11291 0 0
11290: END
// export function StreamSibBomb ; var i , x , y ; begin
11291: LD_INT 0
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
// result := false ;
11297: LD_ADDR_VAR 0 1
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// for i := 1 to 16 do
11305: LD_ADDR_VAR 0 2
11309: PUSH
11310: DOUBLE
11311: LD_INT 1
11313: DEC
11314: ST_TO_ADDR
11315: LD_INT 16
11317: PUSH
11318: FOR_TO
11319: IFFALSE 11518
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 10
11328: PUSH
11329: LD_INT 20
11331: PUSH
11332: LD_INT 30
11334: PUSH
11335: LD_INT 40
11337: PUSH
11338: LD_INT 50
11340: PUSH
11341: LD_INT 60
11343: PUSH
11344: LD_INT 70
11346: PUSH
11347: LD_INT 80
11349: PUSH
11350: LD_INT 90
11352: PUSH
11353: LD_INT 100
11355: PUSH
11356: LD_INT 110
11358: PUSH
11359: LD_INT 120
11361: PUSH
11362: LD_INT 130
11364: PUSH
11365: LD_INT 140
11367: PUSH
11368: LD_INT 150
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 1
11390: PPUSH
11391: LD_INT 15
11393: PPUSH
11394: CALL_OW 12
11398: ARRAY
11399: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: LD_INT 10
11407: PUSH
11408: LD_INT 20
11410: PUSH
11411: LD_INT 30
11413: PUSH
11414: LD_INT 40
11416: PUSH
11417: LD_INT 50
11419: PUSH
11420: LD_INT 60
11422: PUSH
11423: LD_INT 70
11425: PUSH
11426: LD_INT 80
11428: PUSH
11429: LD_INT 90
11431: PUSH
11432: LD_INT 100
11434: PUSH
11435: LD_INT 110
11437: PUSH
11438: LD_INT 120
11440: PUSH
11441: LD_INT 130
11443: PUSH
11444: LD_INT 140
11446: PUSH
11447: LD_INT 150
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 1
11469: PPUSH
11470: LD_INT 15
11472: PPUSH
11473: CALL_OW 12
11477: ARRAY
11478: ST_TO_ADDR
// if ValidHex ( x , y ) then
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_VAR 0 4
11488: PPUSH
11489: CALL_OW 488
11493: IFFALSE 11516
// begin result := [ x , y ] ;
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_VAR 0 3
11504: PUSH
11505: LD_VAR 0 4
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: ST_TO_ADDR
// break ;
11514: GO 11518
// end ; end ;
11516: GO 11318
11518: POP
11519: POP
// if result then
11520: LD_VAR 0 1
11524: IFFALSE 11584
// begin ToLua ( playSibBomb() ) ;
11526: LD_STRING playSibBomb()
11528: PPUSH
11529: CALL_OW 559
// wait ( 0 0$14 ) ;
11533: LD_INT 490
11535: PPUSH
11536: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11540: LD_VAR 0 1
11544: PUSH
11545: LD_INT 1
11547: ARRAY
11548: PPUSH
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 2
11556: ARRAY
11557: PPUSH
11558: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11562: LD_VAR 0 1
11566: PUSH
11567: LD_INT 1
11569: ARRAY
11570: PPUSH
11571: LD_VAR 0 1
11575: PUSH
11576: LD_INT 2
11578: ARRAY
11579: PPUSH
11580: CALL_OW 429
// end ; end ;
11584: LD_VAR 0 1
11588: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11589: LD_EXP 15
11593: PUSH
11594: LD_EXP 37
11598: AND
11599: IFFALSE 11611
11601: GO 11603
11603: DISABLE
// YouLost (  ) ;
11604: LD_STRING 
11606: PPUSH
11607: CALL_OW 104
11611: END
// every 0 0$1 trigger StreamModeActive and sFog do
11612: LD_EXP 15
11616: PUSH
11617: LD_EXP 36
11621: AND
11622: IFFALSE 11636
11624: GO 11626
11626: DISABLE
// FogOff ( your_side ) ;
11627: LD_OWVAR 2
11631: PPUSH
11632: CALL_OW 344
11636: END
// every 0 0$1 trigger StreamModeActive and sSun do
11637: LD_EXP 15
11641: PUSH
11642: LD_EXP 38
11646: AND
11647: IFFALSE 11675
11649: GO 11651
11651: DISABLE
// begin solar_recharge_percent := 0 ;
11652: LD_ADDR_OWVAR 79
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11660: LD_INT 10500
11662: PPUSH
11663: CALL_OW 67
// solar_recharge_percent := 100 ;
11667: LD_ADDR_OWVAR 79
11671: PUSH
11672: LD_INT 100
11674: ST_TO_ADDR
// end ;
11675: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11676: LD_EXP 15
11680: PUSH
11681: LD_EXP 39
11685: AND
11686: IFFALSE 11925
11688: GO 11690
11690: DISABLE
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
11695: PPUSH
// begin tmp := [ ] ;
11696: LD_ADDR_VAR 0 3
11700: PUSH
11701: EMPTY
11702: ST_TO_ADDR
// for i := 1 to 6 do
11703: LD_ADDR_VAR 0 1
11707: PUSH
11708: DOUBLE
11709: LD_INT 1
11711: DEC
11712: ST_TO_ADDR
11713: LD_INT 6
11715: PUSH
11716: FOR_TO
11717: IFFALSE 11822
// begin uc_nation := nation_nature ;
11719: LD_ADDR_OWVAR 21
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// uc_side := 0 ;
11727: LD_ADDR_OWVAR 20
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11735: LD_ADDR_OWVAR 29
11739: PUSH
11740: LD_INT 12
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: ST_TO_ADDR
// hc_agressivity := 20 ;
11750: LD_ADDR_OWVAR 35
11754: PUSH
11755: LD_INT 20
11757: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11758: LD_ADDR_OWVAR 28
11762: PUSH
11763: LD_INT 17
11765: ST_TO_ADDR
// hc_gallery :=  ;
11766: LD_ADDR_OWVAR 33
11770: PUSH
11771: LD_STRING 
11773: ST_TO_ADDR
// hc_name :=  ;
11774: LD_ADDR_OWVAR 26
11778: PUSH
11779: LD_STRING 
11781: ST_TO_ADDR
// un := CreateHuman ;
11782: LD_ADDR_VAR 0 2
11786: PUSH
11787: CALL_OW 44
11791: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11792: LD_VAR 0 2
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 51
// tmp := tmp ^ un ;
11804: LD_ADDR_VAR 0 3
11808: PUSH
11809: LD_VAR 0 3
11813: PUSH
11814: LD_VAR 0 2
11818: ADD
11819: ST_TO_ADDR
// end ;
11820: GO 11716
11822: POP
11823: POP
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// for un in tmp do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: LD_VAR 0 3
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11916
// begin if IsDead ( un ) then
11844: LD_VAR 0 2
11848: PPUSH
11849: CALL_OW 301
11853: IFFALSE 11873
// begin tmp := tmp diff un ;
11855: LD_ADDR_VAR 0 3
11859: PUSH
11860: LD_VAR 0 3
11864: PUSH
11865: LD_VAR 0 2
11869: DIFF
11870: ST_TO_ADDR
// continue ;
11871: GO 11841
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11873: LD_VAR 0 2
11877: PPUSH
11878: LD_INT 3
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_INT 0
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: PPUSH
11900: LD_VAR 0 2
11904: PPUSH
11905: CALL_OW 74
11909: PPUSH
11910: CALL_OW 115
// end ;
11914: GO 11841
11916: POP
11917: POP
// until not tmp ;
11918: LD_VAR 0 3
11922: NOT
11923: IFFALSE 11824
// end ;
11925: PPOPN 3
11927: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11928: LD_EXP 15
11932: PUSH
11933: LD_EXP 40
11937: AND
11938: IFFALSE 11992
11940: GO 11942
11942: DISABLE
// begin ToLua ( displayTroll(); ) ;
11943: LD_STRING displayTroll();
11945: PPUSH
11946: CALL_OW 559
// wait ( 3 3$00 ) ;
11950: LD_INT 6300
11952: PPUSH
11953: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11957: LD_STRING hideTroll();
11959: PPUSH
11960: CALL_OW 559
// wait ( 1 1$00 ) ;
11964: LD_INT 2100
11966: PPUSH
11967: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11971: LD_STRING displayTroll();
11973: PPUSH
11974: CALL_OW 559
// wait ( 1 1$00 ) ;
11978: LD_INT 2100
11980: PPUSH
11981: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11985: LD_STRING hideTroll();
11987: PPUSH
11988: CALL_OW 559
// end ;
11992: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11993: LD_EXP 15
11997: PUSH
11998: LD_EXP 41
12002: AND
12003: IFFALSE 12066
12005: GO 12007
12007: DISABLE
12008: LD_INT 0
12010: PPUSH
// begin p := 0 ;
12011: LD_ADDR_VAR 0 1
12015: PUSH
12016: LD_INT 0
12018: ST_TO_ADDR
// repeat game_speed := 1 ;
12019: LD_ADDR_OWVAR 65
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12027: LD_INT 35
12029: PPUSH
12030: CALL_OW 67
// p := p + 1 ;
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_VAR 0 1
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: ST_TO_ADDR
// until p >= 60 ;
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 60
12055: GREATEREQUAL
12056: IFFALSE 12019
// game_speed := 4 ;
12058: LD_ADDR_OWVAR 65
12062: PUSH
12063: LD_INT 4
12065: ST_TO_ADDR
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12069: LD_EXP 15
12073: PUSH
12074: LD_EXP 42
12078: AND
12079: IFFALSE 12225
12081: GO 12083
12083: DISABLE
12084: LD_INT 0
12086: PPUSH
12087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_OWVAR 2
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 0
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PPUSH
12137: CALL_OW 69
12141: ST_TO_ADDR
// if not depot then
12142: LD_VAR 0 1
12146: NOT
12147: IFFALSE 12151
// exit ;
12149: GO 12225
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: LD_VAR 0 1
12160: PUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 12
12173: ARRAY
12174: PPUSH
12175: CALL_OW 274
12179: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12195: LD_VAR 0 2
12199: PPUSH
12200: LD_INT 2
12202: PPUSH
12203: LD_INT 0
12205: PPUSH
12206: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12210: LD_VAR 0 2
12214: PPUSH
12215: LD_INT 3
12217: PPUSH
12218: LD_INT 0
12220: PPUSH
12221: CALL_OW 277
// end ;
12225: PPOPN 2
12227: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12228: LD_EXP 15
12232: PUSH
12233: LD_EXP 43
12237: AND
12238: IFFALSE 12335
12240: GO 12242
12242: DISABLE
12243: LD_INT 0
12245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12246: LD_ADDR_VAR 0 1
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_OWVAR 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 0
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: ST_TO_ADDR
// if not tmp then
12300: LD_VAR 0 1
12304: NOT
12305: IFFALSE 12309
// exit ;
12307: GO 12335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12309: LD_VAR 0 1
12313: PUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 12
12326: ARRAY
12327: PPUSH
12328: LD_INT 200
12330: PPUSH
12331: CALL_OW 234
// end ;
12335: PPOPN 1
12337: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12338: LD_EXP 15
12342: PUSH
12343: LD_EXP 44
12347: AND
12348: IFFALSE 12427
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: LD_INT 22
12363: PUSH
12364: LD_OWVAR 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: ST_TO_ADDR
// if not tmp then
12392: LD_VAR 0 1
12396: NOT
12397: IFFALSE 12401
// exit ;
12399: GO 12427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12401: LD_VAR 0 1
12405: PUSH
12406: LD_INT 1
12408: PPUSH
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL_OW 12
12418: ARRAY
12419: PPUSH
12420: LD_INT 60
12422: PPUSH
12423: CALL_OW 234
// end ;
12427: PPOPN 1
12429: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12430: LD_EXP 15
12434: PUSH
12435: LD_EXP 45
12439: AND
12440: IFFALSE 12539
12442: GO 12444
12444: DISABLE
12445: LD_INT 0
12447: PPUSH
12448: PPUSH
// begin enable ;
12449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12450: LD_ADDR_VAR 0 1
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_OWVAR 2
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 61
12469: PUSH
12470: EMPTY
12471: LIST
12472: PUSH
12473: LD_INT 33
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: PPUSH
12488: CALL_OW 69
12492: ST_TO_ADDR
// if not tmp then
12493: LD_VAR 0 1
12497: NOT
12498: IFFALSE 12502
// exit ;
12500: GO 12539
// for i in tmp do
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_VAR 0 1
12511: PUSH
12512: FOR_IN
12513: IFFALSE 12537
// if IsControledBy ( i ) then
12515: LD_VAR 0 2
12519: PPUSH
12520: CALL_OW 312
12524: IFFALSE 12535
// ComUnlink ( i ) ;
12526: LD_VAR 0 2
12530: PPUSH
12531: CALL_OW 136
12535: GO 12512
12537: POP
12538: POP
// end ;
12539: PPOPN 2
12541: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12542: LD_EXP 15
12546: PUSH
12547: LD_EXP 46
12551: AND
12552: IFFALSE 12692
12554: GO 12556
12556: DISABLE
12557: LD_INT 0
12559: PPUSH
12560: PPUSH
// begin ToLua ( displayPowell(); ) ;
12561: LD_STRING displayPowell();
12563: PPUSH
12564: CALL_OW 559
// uc_side := 0 ;
12568: LD_ADDR_OWVAR 20
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// uc_nation := 2 ;
12576: LD_ADDR_OWVAR 21
12580: PUSH
12581: LD_INT 2
12583: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12584: LD_ADDR_OWVAR 37
12588: PUSH
12589: LD_INT 14
12591: ST_TO_ADDR
// vc_engine := engine_siberite ;
12592: LD_ADDR_OWVAR 39
12596: PUSH
12597: LD_INT 3
12599: ST_TO_ADDR
// vc_control := control_apeman ;
12600: LD_ADDR_OWVAR 38
12604: PUSH
12605: LD_INT 5
12607: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12608: LD_ADDR_OWVAR 40
12612: PUSH
12613: LD_INT 29
12615: ST_TO_ADDR
// un := CreateVehicle ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: CALL_OW 45
12625: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12626: LD_VAR 0 2
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12638: LD_INT 35
12640: PPUSH
12641: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12645: LD_VAR 0 2
12649: PPUSH
12650: LD_INT 22
12652: PUSH
12653: LD_OWVAR 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PPUSH
12662: CALL_OW 69
12666: PPUSH
12667: LD_VAR 0 2
12671: PPUSH
12672: CALL_OW 74
12676: PPUSH
12677: CALL_OW 115
// until IsDead ( un ) ;
12681: LD_VAR 0 2
12685: PPUSH
12686: CALL_OW 301
12690: IFFALSE 12638
// end ;
12692: PPOPN 2
12694: END
// every 0 0$1 trigger StreamModeActive and sStu do
12695: LD_EXP 15
12699: PUSH
12700: LD_EXP 54
12704: AND
12705: IFFALSE 12721
12707: GO 12709
12709: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12710: LD_STRING displayStucuk();
12712: PPUSH
12713: CALL_OW 559
// ResetFog ;
12717: CALL_OW 335
// end ;
12721: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12722: LD_EXP 15
12726: PUSH
12727: LD_EXP 47
12731: AND
12732: IFFALSE 12873
12734: GO 12736
12736: DISABLE
12737: LD_INT 0
12739: PPUSH
12740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12741: LD_ADDR_VAR 0 2
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: LD_OWVAR 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 21
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PPUSH
12772: CALL_OW 69
12776: ST_TO_ADDR
// if not tmp then
12777: LD_VAR 0 2
12781: NOT
12782: IFFALSE 12786
// exit ;
12784: GO 12873
// un := tmp [ rand ( 1 , tmp ) ] ;
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: LD_INT 1
12798: PPUSH
12799: LD_VAR 0 2
12803: PPUSH
12804: CALL_OW 12
12808: ARRAY
12809: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_INT 0
12817: PPUSH
12818: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12822: LD_VAR 0 1
12826: PPUSH
12827: LD_OWVAR 3
12831: PUSH
12832: LD_VAR 0 1
12836: DIFF
12837: PPUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: CALL_OW 74
12847: PPUSH
12848: CALL_OW 115
// wait ( 0 0$20 ) ;
12852: LD_INT 700
12854: PPUSH
12855: CALL_OW 67
// SetSide ( un , your_side ) ;
12859: LD_VAR 0 1
12863: PPUSH
12864: LD_OWVAR 2
12868: PPUSH
12869: CALL_OW 235
// end ;
12873: PPOPN 2
12875: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12876: LD_EXP 15
12880: PUSH
12881: LD_EXP 48
12885: AND
12886: IFFALSE 12992
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_INT 22
12901: PUSH
12902: LD_OWVAR 2
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 2
12913: PUSH
12914: LD_INT 30
12916: PUSH
12917: LD_INT 0
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL_OW 69
12947: ST_TO_ADDR
// if not depot then
12948: LD_VAR 0 1
12952: NOT
12953: IFFALSE 12957
// exit ;
12955: GO 12992
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12957: LD_VAR 0 1
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: PPUSH
12966: CALL_OW 250
12970: PPUSH
12971: LD_VAR 0 1
12975: PUSH
12976: LD_INT 1
12978: ARRAY
12979: PPUSH
12980: CALL_OW 251
12984: PPUSH
12985: LD_INT 70
12987: PPUSH
12988: CALL_OW 495
// end ;
12992: PPOPN 1
12994: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12995: LD_EXP 15
12999: PUSH
13000: LD_EXP 49
13004: AND
13005: IFFALSE 13216
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13017: LD_ADDR_VAR 0 5
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_OWVAR 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 1
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 69
13052: ST_TO_ADDR
// if not tmp then
13053: LD_VAR 0 5
13057: NOT
13058: IFFALSE 13062
// exit ;
13060: GO 13216
// for i in tmp do
13062: LD_ADDR_VAR 0 1
13066: PUSH
13067: LD_VAR 0 5
13071: PUSH
13072: FOR_IN
13073: IFFALSE 13214
// begin d := rand ( 0 , 5 ) ;
13075: LD_ADDR_VAR 0 4
13079: PUSH
13080: LD_INT 0
13082: PPUSH
13083: LD_INT 5
13085: PPUSH
13086: CALL_OW 12
13090: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13091: LD_ADDR_VAR 0 2
13095: PUSH
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 250
13105: PPUSH
13106: LD_VAR 0 4
13110: PPUSH
13111: LD_INT 3
13113: PPUSH
13114: LD_INT 12
13116: PPUSH
13117: CALL_OW 12
13121: PPUSH
13122: CALL_OW 272
13126: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13127: LD_ADDR_VAR 0 3
13131: PUSH
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL_OW 251
13141: PPUSH
13142: LD_VAR 0 4
13146: PPUSH
13147: LD_INT 3
13149: PPUSH
13150: LD_INT 12
13152: PPUSH
13153: CALL_OW 12
13157: PPUSH
13158: CALL_OW 273
13162: ST_TO_ADDR
// if ValidHex ( x , y ) then
13163: LD_VAR 0 2
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: CALL_OW 488
13177: IFFALSE 13212
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_VAR 0 2
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: LD_INT 3
13196: PPUSH
13197: LD_INT 6
13199: PPUSH
13200: CALL_OW 12
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 483
// end ;
13212: GO 13072
13214: POP
13215: POP
// end ;
13216: PPOPN 5
13218: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13219: LD_EXP 15
13223: PUSH
13224: LD_EXP 50
13228: AND
13229: IFFALSE 13323
13231: GO 13233
13233: DISABLE
13234: LD_INT 0
13236: PPUSH
13237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_OWVAR 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 32
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: ST_TO_ADDR
// if not tmp then
13285: LD_VAR 0 2
13289: NOT
13290: IFFALSE 13294
// exit ;
13292: GO 13323
// for i in tmp do
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_VAR 0 2
13303: PUSH
13304: FOR_IN
13305: IFFALSE 13321
// SetFuel ( i , 0 ) ;
13307: LD_VAR 0 1
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 240
13319: GO 13304
13321: POP
13322: POP
// end ;
13323: PPOPN 2
13325: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13326: LD_EXP 15
13330: PUSH
13331: LD_EXP 51
13335: AND
13336: IFFALSE 13402
13338: GO 13340
13340: DISABLE
13341: LD_INT 0
13343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_OWVAR 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 29
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 1
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13402
// DestroyUnit ( tmp [ 1 ] ) ;
13389: LD_VAR 0 1
13393: PUSH
13394: LD_INT 1
13396: ARRAY
13397: PPUSH
13398: CALL_OW 65
// end ;
13402: PPOPN 1
13404: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13405: LD_EXP 15
13409: PUSH
13410: LD_EXP 53
13414: AND
13415: IFFALSE 13544
13417: GO 13419
13419: DISABLE
13420: LD_INT 0
13422: PPUSH
// begin uc_side := 0 ;
13423: LD_ADDR_OWVAR 20
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// uc_nation := nation_arabian ;
13431: LD_ADDR_OWVAR 21
13435: PUSH
13436: LD_INT 2
13438: ST_TO_ADDR
// hc_gallery :=  ;
13439: LD_ADDR_OWVAR 33
13443: PUSH
13444: LD_STRING 
13446: ST_TO_ADDR
// hc_name :=  ;
13447: LD_ADDR_OWVAR 26
13451: PUSH
13452: LD_STRING 
13454: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13455: LD_INT 1
13457: PPUSH
13458: LD_INT 11
13460: PPUSH
13461: LD_INT 10
13463: PPUSH
13464: CALL_OW 380
// un := CreateHuman ;
13468: LD_ADDR_VAR 0 1
13472: PUSH
13473: CALL_OW 44
13477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13497: LD_VAR 0 1
13501: PPUSH
13502: LD_INT 22
13504: PUSH
13505: LD_OWVAR 2
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: PPUSH
13519: LD_VAR 0 1
13523: PPUSH
13524: CALL_OW 74
13528: PPUSH
13529: CALL_OW 115
// until IsDead ( un ) ;
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 301
13542: IFFALSE 13490
// end ;
13544: PPOPN 1
13546: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13547: LD_EXP 15
13551: PUSH
13552: LD_EXP 55
13556: AND
13557: IFFALSE 13569
13559: GO 13561
13561: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13562: LD_STRING earthquake(getX(game), 0, 32)
13564: PPUSH
13565: CALL_OW 559
13569: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13570: LD_EXP 15
13574: PUSH
13575: LD_EXP 56
13579: AND
13580: IFFALSE 13671
13582: GO 13584
13584: DISABLE
13585: LD_INT 0
13587: PPUSH
// begin enable ;
13588: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_OWVAR 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 2
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 33
13618: PUSH
13619: LD_INT 3
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: ST_TO_ADDR
// if not tmp then
13636: LD_VAR 0 1
13640: NOT
13641: IFFALSE 13645
// exit ;
13643: GO 13671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13645: LD_VAR 0 1
13649: PUSH
13650: LD_INT 1
13652: PPUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 12
13662: ARRAY
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: CALL_OW 234
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13674: LD_EXP 15
13678: PUSH
13679: LD_EXP 57
13683: AND
13684: IFFALSE 13825
13686: GO 13688
13688: DISABLE
13689: LD_INT 0
13691: PPUSH
13692: PPUSH
13693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_INT 22
13701: PUSH
13702: LD_OWVAR 2
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 25
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 69
13729: ST_TO_ADDR
// if not tmp then
13730: LD_VAR 0 3
13734: NOT
13735: IFFALSE 13739
// exit ;
13737: GO 13825
// un := tmp [ rand ( 1 , tmp ) ] ;
13739: LD_ADDR_VAR 0 2
13743: PUSH
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 1
13751: PPUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: CALL_OW 12
13761: ARRAY
13762: ST_TO_ADDR
// if Crawls ( un ) then
13763: LD_VAR 0 2
13767: PPUSH
13768: CALL_OW 318
13772: IFFALSE 13783
// ComWalk ( un ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13783: LD_VAR 0 2
13787: PPUSH
13788: LD_INT 9
13790: PPUSH
13791: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13795: LD_INT 28
13797: PPUSH
13798: LD_OWVAR 2
13802: PPUSH
13803: LD_INT 2
13805: PPUSH
13806: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13810: LD_INT 29
13812: PPUSH
13813: LD_OWVAR 2
13817: PPUSH
13818: LD_INT 2
13820: PPUSH
13821: CALL_OW 322
// end ;
13825: PPOPN 3
13827: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13828: LD_EXP 15
13832: PUSH
13833: LD_EXP 58
13837: AND
13838: IFFALSE 13949
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13848: LD_ADDR_VAR 0 3
13852: PUSH
13853: LD_INT 22
13855: PUSH
13856: LD_OWVAR 2
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 69
13883: ST_TO_ADDR
// if not tmp then
13884: LD_VAR 0 3
13888: NOT
13889: IFFALSE 13893
// exit ;
13891: GO 13949
// un := tmp [ rand ( 1 , tmp ) ] ;
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_VAR 0 3
13902: PUSH
13903: LD_INT 1
13905: PPUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: CALL_OW 12
13915: ARRAY
13916: ST_TO_ADDR
// if Crawls ( un ) then
13917: LD_VAR 0 2
13921: PPUSH
13922: CALL_OW 318
13926: IFFALSE 13937
// ComWalk ( un ) ;
13928: LD_VAR 0 2
13932: PPUSH
13933: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13937: LD_VAR 0 2
13941: PPUSH
13942: LD_INT 8
13944: PPUSH
13945: CALL_OW 336
// end ;
13949: PPOPN 3
13951: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13952: LD_EXP 15
13956: PUSH
13957: LD_EXP 59
13961: AND
13962: IFFALSE 14106
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
13970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13971: LD_ADDR_VAR 0 2
13975: PUSH
13976: LD_INT 22
13978: PUSH
13979: LD_OWVAR 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 2
14000: PUSH
14001: LD_INT 34
14003: PUSH
14004: LD_INT 12
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 34
14013: PUSH
14014: LD_INT 51
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 34
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: PPUSH
14042: CALL_OW 69
14046: ST_TO_ADDR
// if not tmp then
14047: LD_VAR 0 2
14051: NOT
14052: IFFALSE 14056
// exit ;
14054: GO 14106
// for i in tmp do
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_VAR 0 2
14065: PUSH
14066: FOR_IN
14067: IFFALSE 14104
// if GetCargo ( i , mat_artifact ) = 0 then
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 4
14076: PPUSH
14077: CALL_OW 289
14081: PUSH
14082: LD_INT 0
14084: EQUAL
14085: IFFALSE 14102
// SetCargo ( i , mat_siberit , 100 ) ;
14087: LD_VAR 0 1
14091: PPUSH
14092: LD_INT 3
14094: PPUSH
14095: LD_INT 100
14097: PPUSH
14098: CALL_OW 290
14102: GO 14066
14104: POP
14105: POP
// end ;
14106: PPOPN 2
14108: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14109: LD_EXP 15
14113: PUSH
14114: LD_EXP 60
14118: AND
14119: IFFALSE 14272
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_OWVAR 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PPUSH
14145: CALL_OW 69
14149: ST_TO_ADDR
// if not tmp then
14150: LD_VAR 0 2
14154: NOT
14155: IFFALSE 14159
// exit ;
14157: GO 14272
// for i := 1 to 2 do
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: DOUBLE
14165: LD_INT 1
14167: DEC
14168: ST_TO_ADDR
14169: LD_INT 2
14171: PUSH
14172: FOR_TO
14173: IFFALSE 14270
// begin uc_side := your_side ;
14175: LD_ADDR_OWVAR 20
14179: PUSH
14180: LD_OWVAR 2
14184: ST_TO_ADDR
// uc_nation := nation_american ;
14185: LD_ADDR_OWVAR 21
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// vc_chassis := us_morphling ;
14193: LD_ADDR_OWVAR 37
14197: PUSH
14198: LD_INT 5
14200: ST_TO_ADDR
// vc_engine := engine_siberite ;
14201: LD_ADDR_OWVAR 39
14205: PUSH
14206: LD_INT 3
14208: ST_TO_ADDR
// vc_control := control_computer ;
14209: LD_ADDR_OWVAR 38
14213: PUSH
14214: LD_INT 3
14216: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14217: LD_ADDR_OWVAR 40
14221: PUSH
14222: LD_INT 10
14224: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14225: CALL_OW 45
14229: PPUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 250
14243: PPUSH
14244: LD_VAR 0 2
14248: PUSH
14249: LD_INT 1
14251: ARRAY
14252: PPUSH
14253: CALL_OW 251
14257: PPUSH
14258: LD_INT 12
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 50
// end ;
14268: GO 14172
14270: POP
14271: POP
// end ;
14272: PPOPN 2
14274: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14275: LD_EXP 15
14279: PUSH
14280: LD_EXP 61
14284: AND
14285: IFFALSE 14507
14287: GO 14289
14289: DISABLE
14290: LD_INT 0
14292: PPUSH
14293: PPUSH
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14298: LD_ADDR_VAR 0 6
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_OWVAR 2
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 21
14317: PUSH
14318: LD_INT 1
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: LD_INT 23
14330: PUSH
14331: LD_INT 0
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 69
14351: ST_TO_ADDR
// if not tmp then
14352: LD_VAR 0 6
14356: NOT
14357: IFFALSE 14361
// exit ;
14359: GO 14507
// s1 := rand ( 1 , 4 ) ;
14361: LD_ADDR_VAR 0 2
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 12
14376: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14377: LD_ADDR_VAR 0 4
14381: PUSH
14382: LD_VAR 0 6
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 259
14400: ST_TO_ADDR
// if s1 = 1 then
14401: LD_VAR 0 2
14405: PUSH
14406: LD_INT 1
14408: EQUAL
14409: IFFALSE 14429
// s2 := rand ( 2 , 4 ) else
14411: LD_ADDR_VAR 0 3
14415: PUSH
14416: LD_INT 2
14418: PPUSH
14419: LD_INT 4
14421: PPUSH
14422: CALL_OW 12
14426: ST_TO_ADDR
14427: GO 14437
// s2 := 1 ;
14429: LD_ADDR_VAR 0 3
14433: PUSH
14434: LD_INT 1
14436: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14437: LD_ADDR_VAR 0 5
14441: PUSH
14442: LD_VAR 0 6
14446: PUSH
14447: LD_INT 1
14449: ARRAY
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: CALL_OW 259
14460: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14461: LD_VAR 0 6
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 2
14474: PPUSH
14475: LD_VAR 0 5
14479: PPUSH
14480: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14484: LD_VAR 0 6
14488: PUSH
14489: LD_INT 1
14491: ARRAY
14492: PPUSH
14493: LD_VAR 0 3
14497: PPUSH
14498: LD_VAR 0 4
14502: PPUSH
14503: CALL_OW 237
// end ;
14507: PPOPN 6
14509: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14510: LD_EXP 15
14514: PUSH
14515: LD_EXP 62
14519: AND
14520: IFFALSE 14599
14522: GO 14524
14524: DISABLE
14525: LD_INT 0
14527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14528: LD_ADDR_VAR 0 1
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 30
14547: PUSH
14548: LD_INT 3
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 1
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14573: LD_VAR 0 1
14577: PUSH
14578: LD_INT 1
14580: PPUSH
14581: LD_VAR 0 1
14585: PPUSH
14586: CALL_OW 12
14590: ARRAY
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 234
// end ;
14599: PPOPN 1
14601: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14602: LD_EXP 15
14606: PUSH
14607: LD_EXP 63
14611: AND
14612: IFFALSE 14724
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_OWVAR 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 27
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 30
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: LD_INT 28
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 69
14685: ST_TO_ADDR
// if not tmp then
14686: LD_VAR 0 2
14690: NOT
14691: IFFALSE 14695
// exit ;
14693: GO 14724
// for i in tmp do
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_VAR 0 2
14704: PUSH
14705: FOR_IN
14706: IFFALSE 14722
// SetLives ( i , 1 ) ;
14708: LD_VAR 0 1
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 234
14720: GO 14705
14722: POP
14723: POP
// end ;
14724: PPOPN 2
14726: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14727: LD_EXP 15
14731: PUSH
14732: LD_EXP 64
14736: AND
14737: IFFALSE 15011
14739: GO 14741
14741: DISABLE
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
14746: PPUSH
// begin i := rand ( 1 , 7 ) ;
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_INT 7
14757: PPUSH
14758: CALL_OW 12
14762: ST_TO_ADDR
// case i of 1 :
14763: LD_VAR 0 1
14767: PUSH
14768: LD_INT 1
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 14786
14776: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14777: LD_STRING earthquake(getX(game), 0, 32)
14779: PPUSH
14780: CALL_OW 559
14784: GO 15011
14786: LD_INT 2
14788: DOUBLE
14789: EQUAL
14790: IFTRUE 14794
14792: GO 14808
14794: POP
// begin ToLua ( displayStucuk(); ) ;
14795: LD_STRING displayStucuk();
14797: PPUSH
14798: CALL_OW 559
// ResetFog ;
14802: CALL_OW 335
// end ; 3 :
14806: GO 15011
14808: LD_INT 3
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 14920
14816: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14817: LD_ADDR_VAR 0 2
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_OWVAR 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 25
14836: PUSH
14837: LD_INT 1
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// if not tmp then
14853: LD_VAR 0 2
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 15011
// un := tmp [ rand ( 1 , tmp ) ] ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_VAR 0 2
14871: PUSH
14872: LD_INT 1
14874: PPUSH
14875: LD_VAR 0 2
14879: PPUSH
14880: CALL_OW 12
14884: ARRAY
14885: ST_TO_ADDR
// if Crawls ( un ) then
14886: LD_VAR 0 3
14890: PPUSH
14891: CALL_OW 318
14895: IFFALSE 14906
// ComWalk ( un ) ;
14897: LD_VAR 0 3
14901: PPUSH
14902: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14906: LD_VAR 0 3
14910: PPUSH
14911: LD_INT 8
14913: PPUSH
14914: CALL_OW 336
// end ; 4 :
14918: GO 15011
14920: LD_INT 4
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14928
14926: GO 14989
14928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_OWVAR 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 29
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// if not tmp then
14965: LD_VAR 0 2
14969: NOT
14970: IFFALSE 14974
// exit ;
14972: GO 15011
// DestroyUnit ( tmp [ 1 ] ) ;
14974: LD_VAR 0 2
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: CALL_OW 65
// end ; 5 .. 7 :
14987: GO 15011
14989: LD_INT 5
14991: DOUBLE
14992: GREATEREQUAL
14993: IFFALSE 15001
14995: LD_INT 7
14997: DOUBLE
14998: LESSEQUAL
14999: IFTRUE 15003
15001: GO 15010
15003: POP
// StreamSibBomb ; end ;
15004: CALL 11291 0 0
15008: GO 15011
15010: POP
// end ;
15011: PPOPN 3
15013: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15014: LD_EXP 15
15018: PUSH
15019: LD_EXP 65
15023: AND
15024: IFFALSE 15180
15026: GO 15028
15028: DISABLE
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
15033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15034: LD_ADDR_VAR 0 2
15038: PUSH
15039: LD_INT 81
15041: PUSH
15042: LD_OWVAR 2
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 21
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: ST_TO_ADDR
// if not tmp then
15088: LD_VAR 0 2
15092: NOT
15093: IFFALSE 15097
// exit ;
15095: GO 15180
// p := 0 ;
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: LD_INT 0
15104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15105: LD_INT 35
15107: PPUSH
15108: CALL_OW 67
// p := p + 1 ;
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 1
15124: PLUS
15125: ST_TO_ADDR
// for i in tmp do
15126: LD_ADDR_VAR 0 1
15130: PUSH
15131: LD_VAR 0 2
15135: PUSH
15136: FOR_IN
15137: IFFALSE 15168
// if GetLives ( i ) < 1000 then
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 256
15148: PUSH
15149: LD_INT 1000
15151: LESS
15152: IFFALSE 15166
// SetLives ( i , 1000 ) ;
15154: LD_VAR 0 1
15158: PPUSH
15159: LD_INT 1000
15161: PPUSH
15162: CALL_OW 234
15166: GO 15136
15168: POP
15169: POP
// until p > 20 ;
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 20
15177: GREATER
15178: IFFALSE 15105
// end ;
15180: PPOPN 3
15182: END
// every 0 0$1 trigger StreamModeActive and sTime do
15183: LD_EXP 15
15187: PUSH
15188: LD_EXP 66
15192: AND
15193: IFFALSE 15228
15195: GO 15197
15197: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15198: LD_INT 28
15200: PPUSH
15201: LD_OWVAR 2
15205: PPUSH
15206: LD_INT 2
15208: PPUSH
15209: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15213: LD_INT 30
15215: PPUSH
15216: LD_OWVAR 2
15220: PPUSH
15221: LD_INT 2
15223: PPUSH
15224: CALL_OW 322
// end ;
15228: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15229: LD_EXP 15
15233: PUSH
15234: LD_EXP 67
15238: AND
15239: IFFALSE 15360
15241: GO 15243
15243: DISABLE
15244: LD_INT 0
15246: PPUSH
15247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15248: LD_ADDR_VAR 0 2
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_OWVAR 2
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 3
15277: PUSH
15278: LD_INT 23
15280: PUSH
15281: LD_INT 0
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 69
15301: ST_TO_ADDR
// if not tmp then
15302: LD_VAR 0 2
15306: NOT
15307: IFFALSE 15311
// exit ;
15309: GO 15360
// for i in tmp do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_VAR 0 2
15320: PUSH
15321: FOR_IN
15322: IFFALSE 15358
// begin if Crawls ( i ) then
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 318
15333: IFFALSE 15344
// ComWalk ( i ) ;
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 138
// SetClass ( i , 2 ) ;
15344: LD_VAR 0 1
15348: PPUSH
15349: LD_INT 2
15351: PPUSH
15352: CALL_OW 336
// end ;
15356: GO 15321
15358: POP
15359: POP
// end ;
15360: PPOPN 2
15362: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15363: LD_EXP 15
15367: PUSH
15368: LD_EXP 68
15372: AND
15373: IFFALSE 15594
15375: GO 15377
15377: DISABLE
15378: LD_INT 0
15380: PPUSH
15381: PPUSH
15382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15383: LD_OWVAR 2
15387: PPUSH
15388: LD_INT 9
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15401: LD_INT 9
15403: PPUSH
15404: LD_OWVAR 2
15408: PPUSH
15409: CALL_OW 343
// uc_side := 9 ;
15413: LD_ADDR_OWVAR 20
15417: PUSH
15418: LD_INT 9
15420: ST_TO_ADDR
// uc_nation := 2 ;
15421: LD_ADDR_OWVAR 21
15425: PUSH
15426: LD_INT 2
15428: ST_TO_ADDR
// hc_name := Dark Warrior ;
15429: LD_ADDR_OWVAR 26
15433: PUSH
15434: LD_STRING Dark Warrior
15436: ST_TO_ADDR
// hc_gallery :=  ;
15437: LD_ADDR_OWVAR 33
15441: PUSH
15442: LD_STRING 
15444: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
15445: LD_INT 1
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: LD_INT 10
15453: PPUSH
15454: CALL_OW 380
// un := CreateHuman ;
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: CALL_OW 44
15467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15468: LD_VAR 0 3
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 51
// p := 0 ;
15480: LD_ADDR_VAR 0 2
15484: PUSH
15485: LD_INT 0
15487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15488: LD_INT 35
15490: PPUSH
15491: CALL_OW 67
// if GetLives ( un ) < 1000 then
15495: LD_VAR 0 3
15499: PPUSH
15500: CALL_OW 256
15504: PUSH
15505: LD_INT 1000
15507: LESS
15508: IFFALSE 15522
// SetLives ( un , 1000 ) ;
15510: LD_VAR 0 3
15514: PPUSH
15515: LD_INT 1000
15517: PPUSH
15518: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 81
15529: PUSH
15530: LD_OWVAR 2
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: PPUSH
15544: LD_VAR 0 3
15548: PPUSH
15549: CALL_OW 74
15553: PPUSH
15554: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15558: LD_VAR 0 2
15562: PUSH
15563: LD_INT 60
15565: GREATER
15566: PUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: CALL_OW 301
15576: OR
15577: IFFALSE 15488
// if un then
15579: LD_VAR 0 3
15583: IFFALSE 15594
// RemoveUnit ( un ) ;
15585: LD_VAR 0 3
15589: PPUSH
15590: CALL_OW 64
// end ;
15594: PPOPN 3
15596: END
