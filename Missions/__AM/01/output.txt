// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4963: LD_INT 0
4965: PPUSH
// if p2 = 100 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 100
4973: EQUAL
4974: IFFALSE 5977
// begin if not StreamModeActive then
4976: LD_EXP 15
4980: NOT
4981: IFFALSE 4991
// StreamModeActive := true ;
4983: LD_ADDR_EXP 15
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 0 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 0
4998: EQUAL
4999: IFFALSE 5005
// InitStreamMode ;
5001: CALL 6137 0 0
// if p3 = 1 then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 1
5012: EQUAL
5013: IFFALSE 5023
// sRocket := true ;
5015: LD_ADDR_EXP 20
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// if p3 = 2 then
5023: LD_VAR 0 3
5027: PUSH
5028: LD_INT 2
5030: EQUAL
5031: IFFALSE 5041
// sSpeed := true ;
5033: LD_ADDR_EXP 19
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// if p3 = 3 then
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 3
5048: EQUAL
5049: IFFALSE 5059
// sEngine := true ;
5051: LD_ADDR_EXP 21
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// if p3 = 4 then
5059: LD_VAR 0 3
5063: PUSH
5064: LD_INT 4
5066: EQUAL
5067: IFFALSE 5077
// sSpec := true ;
5069: LD_ADDR_EXP 18
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// if p3 = 5 then
5077: LD_VAR 0 3
5081: PUSH
5082: LD_INT 5
5084: EQUAL
5085: IFFALSE 5095
// sLevel := true ;
5087: LD_ADDR_EXP 22
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// if p3 = 6 then
5095: LD_VAR 0 3
5099: PUSH
5100: LD_INT 6
5102: EQUAL
5103: IFFALSE 5113
// sArmoury := true ;
5105: LD_ADDR_EXP 23
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// if p3 = 7 then
5113: LD_VAR 0 3
5117: PUSH
5118: LD_INT 7
5120: EQUAL
5121: IFFALSE 5131
// sRadar := true ;
5123: LD_ADDR_EXP 24
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// if p3 = 8 then
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 8
5138: EQUAL
5139: IFFALSE 5149
// sBunker := true ;
5141: LD_ADDR_EXP 25
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// if p3 = 9 then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 9
5156: EQUAL
5157: IFFALSE 5167
// sHack := true ;
5159: LD_ADDR_EXP 26
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// if p3 = 10 then
5167: LD_VAR 0 3
5171: PUSH
5172: LD_INT 10
5174: EQUAL
5175: IFFALSE 5185
// sFire := true ;
5177: LD_ADDR_EXP 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// if p3 = 11 then
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 11
5192: EQUAL
5193: IFFALSE 5203
// sRefresh := true ;
5195: LD_ADDR_EXP 28
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if p3 = 12 then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 12
5210: EQUAL
5211: IFFALSE 5221
// sExp := true ;
5213: LD_ADDR_EXP 29
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// if p3 = 13 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 13
5228: EQUAL
5229: IFFALSE 5239
// sDepot := true ;
5231: LD_ADDR_EXP 30
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 14 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 14
5246: EQUAL
5247: IFFALSE 5257
// sFlag := true ;
5249: LD_ADDR_EXP 31
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 15 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 15
5264: EQUAL
5265: IFFALSE 5275
// sKamikadze := true ;
5267: LD_ADDR_EXP 39
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 16 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 16
5282: EQUAL
5283: IFFALSE 5293
// sTroll := true ;
5285: LD_ADDR_EXP 40
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 17 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 17
5300: EQUAL
5301: IFFALSE 5311
// sSlow := true ;
5303: LD_ADDR_EXP 41
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 18 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 18
5318: EQUAL
5319: IFFALSE 5329
// sLack := true ;
5321: LD_ADDR_EXP 42
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 19 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 19
5336: EQUAL
5337: IFFALSE 5347
// sTank := true ;
5339: LD_ADDR_EXP 44
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 20 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 20
5354: EQUAL
5355: IFFALSE 5365
// sRemote := true ;
5357: LD_ADDR_EXP 45
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 21 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 21
5372: EQUAL
5373: IFFALSE 5383
// sPowell := true ;
5375: LD_ADDR_EXP 46
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 22 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 22
5390: EQUAL
5391: IFFALSE 5401
// sTeleport := true ;
5393: LD_ADDR_EXP 49
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 23 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 23
5408: EQUAL
5409: IFFALSE 5419
// sOilTower := true ;
5411: LD_ADDR_EXP 51
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 24 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 24
5426: EQUAL
5427: IFFALSE 5437
// sShovel := true ;
5429: LD_ADDR_EXP 52
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 25 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 25
5444: EQUAL
5445: IFFALSE 5455
// sSheik := true ;
5447: LD_ADDR_EXP 53
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 26 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 26
5462: EQUAL
5463: IFFALSE 5473
// sEarthquake := true ;
5465: LD_ADDR_EXP 55
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 27 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 27
5480: EQUAL
5481: IFFALSE 5491
// sAI := true ;
5483: LD_ADDR_EXP 56
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 28 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 28
5498: EQUAL
5499: IFFALSE 5509
// sCargo := true ;
5501: LD_ADDR_EXP 59
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 29 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 29
5516: EQUAL
5517: IFFALSE 5527
// sDLaser := true ;
5519: LD_ADDR_EXP 60
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 30 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 30
5534: EQUAL
5535: IFFALSE 5545
// sExchange := true ;
5537: LD_ADDR_EXP 61
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 31 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 31
5552: EQUAL
5553: IFFALSE 5563
// sFac := true ;
5555: LD_ADDR_EXP 62
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 32 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 32
5570: EQUAL
5571: IFFALSE 5581
// sPower := true ;
5573: LD_ADDR_EXP 63
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 33 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 33
5588: EQUAL
5589: IFFALSE 5599
// sRandom := true ;
5591: LD_ADDR_EXP 64
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 34 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 34
5606: EQUAL
5607: IFFALSE 5617
// sShield := true ;
5609: LD_ADDR_EXP 65
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 35 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 35
5624: EQUAL
5625: IFFALSE 5635
// sTime := true ;
5627: LD_ADDR_EXP 66
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 36 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 36
5642: EQUAL
5643: IFFALSE 5653
// sTools := true ;
5645: LD_ADDR_EXP 67
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// if p3 = 101 then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 101
5660: EQUAL
5661: IFFALSE 5671
// sSold := true ;
5663: LD_ADDR_EXP 32
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// if p3 = 102 then
5671: LD_VAR 0 3
5675: PUSH
5676: LD_INT 102
5678: EQUAL
5679: IFFALSE 5689
// sDiff := true ;
5681: LD_ADDR_EXP 33
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// if p3 = 103 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 103
5696: EQUAL
5697: IFFALSE 5707
// sFog := true ;
5699: LD_ADDR_EXP 36
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// if p3 = 104 then
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 104
5714: EQUAL
5715: IFFALSE 5725
// sReset := true ;
5717: LD_ADDR_EXP 37
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// if p3 = 105 then
5725: LD_VAR 0 3
5729: PUSH
5730: LD_INT 105
5732: EQUAL
5733: IFFALSE 5743
// sSun := true ;
5735: LD_ADDR_EXP 38
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// if p3 = 106 then
5743: LD_VAR 0 3
5747: PUSH
5748: LD_INT 106
5750: EQUAL
5751: IFFALSE 5761
// sTiger := true ;
5753: LD_ADDR_EXP 34
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// if p3 = 107 then
5761: LD_VAR 0 3
5765: PUSH
5766: LD_INT 107
5768: EQUAL
5769: IFFALSE 5779
// sBomb := true ;
5771: LD_ADDR_EXP 35
5775: PUSH
5776: LD_INT 1
5778: ST_TO_ADDR
// if p3 = 108 then
5779: LD_VAR 0 3
5783: PUSH
5784: LD_INT 108
5786: EQUAL
5787: IFFALSE 5797
// sWound := true ;
5789: LD_ADDR_EXP 43
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// if p3 = 109 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 109
5804: EQUAL
5805: IFFALSE 5815
// sBetray := true ;
5807: LD_ADDR_EXP 47
5811: PUSH
5812: LD_INT 1
5814: ST_TO_ADDR
// if p3 = 110 then
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 110
5822: EQUAL
5823: IFFALSE 5833
// sContamin := true ;
5825: LD_ADDR_EXP 48
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 111 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 111
5840: EQUAL
5841: IFFALSE 5851
// sOil := true ;
5843: LD_ADDR_EXP 50
5847: PUSH
5848: LD_INT 1
5850: ST_TO_ADDR
// if p3 = 112 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 112
5858: EQUAL
5859: IFFALSE 5869
// sStu := true ;
5861: LD_ADDR_EXP 54
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// if p3 = 113 then
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 113
5876: EQUAL
5877: IFFALSE 5887
// sBazooka := true ;
5879: LD_ADDR_EXP 57
5883: PUSH
5884: LD_INT 1
5886: ST_TO_ADDR
// if p3 = 114 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 114
5894: EQUAL
5895: IFFALSE 5905
// sMortar := true ;
5897: LD_ADDR_EXP 58
5901: PUSH
5902: LD_INT 1
5904: ST_TO_ADDR
// if p3 = 115 then
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 115
5912: EQUAL
5913: IFFALSE 5923
// sRanger := true ;
5915: LD_ADDR_EXP 68
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// if p3 = 116 then
5923: LD_VAR 0 3
5927: PUSH
5928: LD_INT 116
5930: EQUAL
5931: IFFALSE 5941
// sComputer := true ;
5933: LD_ADDR_EXP 69
5937: PUSH
5938: LD_INT 1
5940: ST_TO_ADDR
// if p3 = 117 then
5941: LD_VAR 0 3
5945: PUSH
5946: LD_INT 117
5948: EQUAL
5949: IFFALSE 5959
// s30 := true ;
5951: LD_ADDR_EXP 70
5955: PUSH
5956: LD_INT 1
5958: ST_TO_ADDR
// if p3 = 118 then
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 118
5966: EQUAL
5967: IFFALSE 5977
// s60 := true ;
5969: LD_ADDR_EXP 71
5973: PUSH
5974: LD_INT 1
5976: ST_TO_ADDR
// end ; if p2 = 101 then
5977: LD_VAR 0 2
5981: PUSH
5982: LD_INT 101
5984: EQUAL
5985: IFFALSE 6113
// begin case p3 of 1 :
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 1
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6000
5998: GO 6007
6000: POP
// hHackUnlimitedResources ; 2 :
6001: CALL 17709 0 0
6005: GO 6113
6007: LD_INT 2
6009: DOUBLE
6010: EQUAL
6011: IFTRUE 6015
6013: GO 6022
6015: POP
// hHackSetLevel10 ; 3 :
6016: CALL 17842 0 0
6020: GO 6113
6022: LD_INT 3
6024: DOUBLE
6025: EQUAL
6026: IFTRUE 6030
6028: GO 6037
6030: POP
// hHackSetLevel10YourUnits ; 4 :
6031: CALL 17927 0 0
6035: GO 6113
6037: LD_INT 4
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6052
6045: POP
// hHackInvincible ; 5 :
6046: CALL 18375 0 0
6050: GO 6113
6052: LD_INT 5
6054: DOUBLE
6055: EQUAL
6056: IFTRUE 6060
6058: GO 6067
6060: POP
// hHackInvisible ; 6 :
6061: CALL 18486 0 0
6065: GO 6113
6067: LD_INT 6
6069: DOUBLE
6070: EQUAL
6071: IFTRUE 6075
6073: GO 6082
6075: POP
// hHackChangeYourSide ; 7 :
6076: CALL 18543 0 0
6080: GO 6113
6082: LD_INT 7
6084: DOUBLE
6085: EQUAL
6086: IFTRUE 6090
6088: GO 6097
6090: POP
// hHackChangeUnitSide ; 8 :
6091: CALL 18585 0 0
6095: GO 6113
6097: LD_INT 8
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6105
6103: GO 6112
6105: POP
// hHackFog ; end ;
6106: CALL 18686 0 0
6110: GO 6113
6112: POP
// end ; end ;
6113: LD_VAR 0 7
6117: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6118: GO 6120
6120: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6121: LD_STRING initStreamRollete();
6123: PPUSH
6124: CALL_OW 559
// InitStreamMode ;
6128: CALL 6137 0 0
// DefineStreamItems ( ) ;
6132: CALL 6601 0 0
// end ;
6136: END
// function InitStreamMode ; begin
6137: LD_INT 0
6139: PPUSH
// streamModeActive := false ;
6140: LD_ADDR_EXP 15
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// normalCounter := 36 ;
6148: LD_ADDR_EXP 16
6152: PUSH
6153: LD_INT 36
6155: ST_TO_ADDR
// hardcoreCounter := 16 ;
6156: LD_ADDR_EXP 17
6160: PUSH
6161: LD_INT 16
6163: ST_TO_ADDR
// sRocket := false ;
6164: LD_ADDR_EXP 20
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sSpeed := false ;
6172: LD_ADDR_EXP 19
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sEngine := false ;
6180: LD_ADDR_EXP 21
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sSpec := false ;
6188: LD_ADDR_EXP 18
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sLevel := false ;
6196: LD_ADDR_EXP 22
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sArmoury := false ;
6204: LD_ADDR_EXP 23
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sRadar := false ;
6212: LD_ADDR_EXP 24
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sBunker := false ;
6220: LD_ADDR_EXP 25
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sHack := false ;
6228: LD_ADDR_EXP 26
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sFire := false ;
6236: LD_ADDR_EXP 27
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sRefresh := false ;
6244: LD_ADDR_EXP 28
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sExp := false ;
6252: LD_ADDR_EXP 29
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sDepot := false ;
6260: LD_ADDR_EXP 30
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sFlag := false ;
6268: LD_ADDR_EXP 31
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sKamikadze := false ;
6276: LD_ADDR_EXP 39
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sTroll := false ;
6284: LD_ADDR_EXP 40
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sSlow := false ;
6292: LD_ADDR_EXP 41
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sLack := false ;
6300: LD_ADDR_EXP 42
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sTank := false ;
6308: LD_ADDR_EXP 44
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sRemote := false ;
6316: LD_ADDR_EXP 45
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sPowell := false ;
6324: LD_ADDR_EXP 46
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sTeleport := false ;
6332: LD_ADDR_EXP 49
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sOilTower := false ;
6340: LD_ADDR_EXP 51
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sShovel := false ;
6348: LD_ADDR_EXP 52
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sSheik := false ;
6356: LD_ADDR_EXP 53
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sEarthquake := false ;
6364: LD_ADDR_EXP 55
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sAI := false ;
6372: LD_ADDR_EXP 56
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sCargo := false ;
6380: LD_ADDR_EXP 59
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sDLaser := false ;
6388: LD_ADDR_EXP 60
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sExchange := false ;
6396: LD_ADDR_EXP 61
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sFac := false ;
6404: LD_ADDR_EXP 62
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sPower := false ;
6412: LD_ADDR_EXP 63
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sRandom := false ;
6420: LD_ADDR_EXP 64
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sShield := false ;
6428: LD_ADDR_EXP 65
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sTime := false ;
6436: LD_ADDR_EXP 66
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sTools := false ;
6444: LD_ADDR_EXP 67
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sSold := false ;
6452: LD_ADDR_EXP 32
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sDiff := false ;
6460: LD_ADDR_EXP 33
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sFog := false ;
6468: LD_ADDR_EXP 36
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sReset := false ;
6476: LD_ADDR_EXP 37
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sSun := false ;
6484: LD_ADDR_EXP 38
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// sTiger := false ;
6492: LD_ADDR_EXP 34
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// sBomb := false ;
6500: LD_ADDR_EXP 35
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// sWound := false ;
6508: LD_ADDR_EXP 43
6512: PUSH
6513: LD_INT 0
6515: ST_TO_ADDR
// sBetray := false ;
6516: LD_ADDR_EXP 47
6520: PUSH
6521: LD_INT 0
6523: ST_TO_ADDR
// sContamin := false ;
6524: LD_ADDR_EXP 48
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sOil := false ;
6532: LD_ADDR_EXP 50
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sStu := false ;
6540: LD_ADDR_EXP 54
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sBazooka := false ;
6548: LD_ADDR_EXP 57
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sMortar := false ;
6556: LD_ADDR_EXP 58
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sRanger := false ;
6564: LD_ADDR_EXP 68
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sComputer := false ;
6572: LD_ADDR_EXP 69
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// s30 := false ;
6580: LD_ADDR_EXP 70
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// s60 := false ;
6588: LD_ADDR_EXP 71
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// end ;
6596: LD_VAR 0 1
6600: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6601: LD_INT 0
6603: PPUSH
6604: PPUSH
6605: PPUSH
6606: PPUSH
6607: PPUSH
// result := [ ] ;
6608: LD_ADDR_VAR 0 1
6612: PUSH
6613: EMPTY
6614: ST_TO_ADDR
// if campaign_id = 1 then
6615: LD_OWVAR 69
6619: PUSH
6620: LD_INT 1
6622: EQUAL
6623: IFFALSE 9789
// begin case mission_number of 1 :
6625: LD_OWVAR 70
6629: PUSH
6630: LD_INT 1
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6714
6638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 11
6652: PUSH
6653: LD_INT 12
6655: PUSH
6656: LD_INT 15
6658: PUSH
6659: LD_INT 16
6661: PUSH
6662: LD_INT 22
6664: PUSH
6665: LD_INT 23
6667: PUSH
6668: LD_INT 26
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 101
6684: PUSH
6685: LD_INT 102
6687: PUSH
6688: LD_INT 106
6690: PUSH
6691: LD_INT 116
6693: PUSH
6694: LD_INT 117
6696: PUSH
6697: LD_INT 118
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: ST_TO_ADDR
6712: GO 9787
6714: LD_INT 2
6716: DOUBLE
6717: EQUAL
6718: IFTRUE 6722
6720: GO 6806
6722: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6723: LD_ADDR_VAR 0 1
6727: PUSH
6728: LD_INT 2
6730: PUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 11
6736: PUSH
6737: LD_INT 12
6739: PUSH
6740: LD_INT 15
6742: PUSH
6743: LD_INT 16
6745: PUSH
6746: LD_INT 22
6748: PUSH
6749: LD_INT 23
6751: PUSH
6752: LD_INT 26
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 101
6768: PUSH
6769: LD_INT 102
6771: PUSH
6772: LD_INT 105
6774: PUSH
6775: LD_INT 106
6777: PUSH
6778: LD_INT 108
6780: PUSH
6781: LD_INT 116
6783: PUSH
6784: LD_INT 117
6786: PUSH
6787: LD_INT 118
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: ST_TO_ADDR
6804: GO 9787
6806: LD_INT 3
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6902
6814: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6815: LD_ADDR_VAR 0 1
6819: PUSH
6820: LD_INT 2
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: LD_INT 11
6831: PUSH
6832: LD_INT 12
6834: PUSH
6835: LD_INT 15
6837: PUSH
6838: LD_INT 16
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 26
6846: PUSH
6847: LD_INT 36
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 101
6864: PUSH
6865: LD_INT 102
6867: PUSH
6868: LD_INT 105
6870: PUSH
6871: LD_INT 106
6873: PUSH
6874: LD_INT 108
6876: PUSH
6877: LD_INT 116
6879: PUSH
6880: LD_INT 117
6882: PUSH
6883: LD_INT 118
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: ST_TO_ADDR
6900: GO 9787
6902: LD_INT 4
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 7006
6910: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6911: LD_ADDR_VAR 0 1
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: LD_INT 4
6921: PUSH
6922: LD_INT 5
6924: PUSH
6925: LD_INT 8
6927: PUSH
6928: LD_INT 11
6930: PUSH
6931: LD_INT 12
6933: PUSH
6934: LD_INT 15
6936: PUSH
6937: LD_INT 16
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 23
6945: PUSH
6946: LD_INT 26
6948: PUSH
6949: LD_INT 36
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 101
6968: PUSH
6969: LD_INT 102
6971: PUSH
6972: LD_INT 105
6974: PUSH
6975: LD_INT 106
6977: PUSH
6978: LD_INT 108
6980: PUSH
6981: LD_INT 116
6983: PUSH
6984: LD_INT 117
6986: PUSH
6987: LD_INT 118
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: ST_TO_ADDR
7004: GO 9787
7006: LD_INT 5
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7126
7014: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7015: LD_ADDR_VAR 0 1
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 4
7025: PUSH
7026: LD_INT 5
7028: PUSH
7029: LD_INT 6
7031: PUSH
7032: LD_INT 8
7034: PUSH
7035: LD_INT 11
7037: PUSH
7038: LD_INT 12
7040: PUSH
7041: LD_INT 15
7043: PUSH
7044: LD_INT 16
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_INT 23
7052: PUSH
7053: LD_INT 25
7055: PUSH
7056: LD_INT 26
7058: PUSH
7059: LD_INT 36
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 101
7080: PUSH
7081: LD_INT 102
7083: PUSH
7084: LD_INT 105
7086: PUSH
7087: LD_INT 106
7089: PUSH
7090: LD_INT 108
7092: PUSH
7093: LD_INT 109
7095: PUSH
7096: LD_INT 112
7098: PUSH
7099: LD_INT 116
7101: PUSH
7102: LD_INT 117
7104: PUSH
7105: LD_INT 118
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: ST_TO_ADDR
7124: GO 9787
7126: LD_INT 6
7128: DOUBLE
7129: EQUAL
7130: IFTRUE 7134
7132: GO 7266
7134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: LD_INT 4
7145: PUSH
7146: LD_INT 5
7148: PUSH
7149: LD_INT 6
7151: PUSH
7152: LD_INT 8
7154: PUSH
7155: LD_INT 11
7157: PUSH
7158: LD_INT 12
7160: PUSH
7161: LD_INT 15
7163: PUSH
7164: LD_INT 16
7166: PUSH
7167: LD_INT 20
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 23
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 26
7184: PUSH
7185: LD_INT 30
7187: PUSH
7188: LD_INT 31
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: LD_INT 36
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 101
7220: PUSH
7221: LD_INT 102
7223: PUSH
7224: LD_INT 105
7226: PUSH
7227: LD_INT 106
7229: PUSH
7230: LD_INT 108
7232: PUSH
7233: LD_INT 109
7235: PUSH
7236: LD_INT 112
7238: PUSH
7239: LD_INT 116
7241: PUSH
7242: LD_INT 117
7244: PUSH
7245: LD_INT 118
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: ST_TO_ADDR
7264: GO 9787
7266: LD_INT 7
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7386
7274: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_INT 2
7282: PUSH
7283: LD_INT 4
7285: PUSH
7286: LD_INT 5
7288: PUSH
7289: LD_INT 7
7291: PUSH
7292: LD_INT 11
7294: PUSH
7295: LD_INT 12
7297: PUSH
7298: LD_INT 15
7300: PUSH
7301: LD_INT 16
7303: PUSH
7304: LD_INT 20
7306: PUSH
7307: LD_INT 21
7309: PUSH
7310: LD_INT 22
7312: PUSH
7313: LD_INT 23
7315: PUSH
7316: LD_INT 25
7318: PUSH
7319: LD_INT 26
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 101
7340: PUSH
7341: LD_INT 102
7343: PUSH
7344: LD_INT 103
7346: PUSH
7347: LD_INT 105
7349: PUSH
7350: LD_INT 106
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 112
7358: PUSH
7359: LD_INT 116
7361: PUSH
7362: LD_INT 117
7364: PUSH
7365: LD_INT 118
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: ST_TO_ADDR
7384: GO 9787
7386: LD_INT 8
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7534
7394: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7395: LD_ADDR_VAR 0 1
7399: PUSH
7400: LD_INT 2
7402: PUSH
7403: LD_INT 4
7405: PUSH
7406: LD_INT 5
7408: PUSH
7409: LD_INT 6
7411: PUSH
7412: LD_INT 7
7414: PUSH
7415: LD_INT 8
7417: PUSH
7418: LD_INT 11
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: LD_INT 15
7426: PUSH
7427: LD_INT 16
7429: PUSH
7430: LD_INT 20
7432: PUSH
7433: LD_INT 21
7435: PUSH
7436: LD_INT 22
7438: PUSH
7439: LD_INT 23
7441: PUSH
7442: LD_INT 25
7444: PUSH
7445: LD_INT 26
7447: PUSH
7448: LD_INT 30
7450: PUSH
7451: LD_INT 31
7453: PUSH
7454: LD_INT 32
7456: PUSH
7457: LD_INT 36
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 101
7484: PUSH
7485: LD_INT 102
7487: PUSH
7488: LD_INT 103
7490: PUSH
7491: LD_INT 105
7493: PUSH
7494: LD_INT 106
7496: PUSH
7497: LD_INT 108
7499: PUSH
7500: LD_INT 109
7502: PUSH
7503: LD_INT 112
7505: PUSH
7506: LD_INT 116
7508: PUSH
7509: LD_INT 117
7511: PUSH
7512: LD_INT 118
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
7532: GO 9787
7534: LD_INT 9
7536: DOUBLE
7537: EQUAL
7538: IFTRUE 7542
7540: GO 7690
7542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7543: LD_ADDR_VAR 0 1
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: LD_INT 5
7556: PUSH
7557: LD_INT 6
7559: PUSH
7560: LD_INT 7
7562: PUSH
7563: LD_INT 8
7565: PUSH
7566: LD_INT 11
7568: PUSH
7569: LD_INT 12
7571: PUSH
7572: LD_INT 15
7574: PUSH
7575: LD_INT 16
7577: PUSH
7578: LD_INT 20
7580: PUSH
7581: LD_INT 21
7583: PUSH
7584: LD_INT 22
7586: PUSH
7587: LD_INT 23
7589: PUSH
7590: LD_INT 25
7592: PUSH
7593: LD_INT 26
7595: PUSH
7596: LD_INT 28
7598: PUSH
7599: LD_INT 30
7601: PUSH
7602: LD_INT 31
7604: PUSH
7605: LD_INT 32
7607: PUSH
7608: LD_INT 36
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 101
7636: PUSH
7637: LD_INT 102
7639: PUSH
7640: LD_INT 103
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 108
7651: PUSH
7652: LD_INT 109
7654: PUSH
7655: LD_INT 112
7657: PUSH
7658: LD_INT 114
7660: PUSH
7661: LD_INT 116
7663: PUSH
7664: LD_INT 117
7666: PUSH
7667: LD_INT 118
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: ST_TO_ADDR
7688: GO 9787
7690: LD_INT 10
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7894
7698: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7699: LD_ADDR_VAR 0 1
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 4
7709: PUSH
7710: LD_INT 5
7712: PUSH
7713: LD_INT 6
7715: PUSH
7716: LD_INT 7
7718: PUSH
7719: LD_INT 8
7721: PUSH
7722: LD_INT 9
7724: PUSH
7725: LD_INT 10
7727: PUSH
7728: LD_INT 11
7730: PUSH
7731: LD_INT 12
7733: PUSH
7734: LD_INT 13
7736: PUSH
7737: LD_INT 14
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 17
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 28
7778: PUSH
7779: LD_INT 30
7781: PUSH
7782: LD_INT 31
7784: PUSH
7785: LD_INT 32
7787: PUSH
7788: LD_INT 36
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 101
7824: PUSH
7825: LD_INT 102
7827: PUSH
7828: LD_INT 103
7830: PUSH
7831: LD_INT 104
7833: PUSH
7834: LD_INT 105
7836: PUSH
7837: LD_INT 106
7839: PUSH
7840: LD_INT 107
7842: PUSH
7843: LD_INT 108
7845: PUSH
7846: LD_INT 109
7848: PUSH
7849: LD_INT 110
7851: PUSH
7852: LD_INT 111
7854: PUSH
7855: LD_INT 112
7857: PUSH
7858: LD_INT 114
7860: PUSH
7861: LD_INT 116
7863: PUSH
7864: LD_INT 117
7866: PUSH
7867: LD_INT 118
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: ST_TO_ADDR
7892: GO 9787
7894: LD_INT 11
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 8106
7902: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7903: LD_ADDR_VAR 0 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 28
7985: PUSH
7986: LD_INT 30
7988: PUSH
7989: LD_INT 31
7991: PUSH
7992: LD_INT 32
7994: PUSH
7995: LD_INT 34
7997: PUSH
7998: LD_INT 36
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 101
8036: PUSH
8037: LD_INT 102
8039: PUSH
8040: LD_INT 103
8042: PUSH
8043: LD_INT 104
8045: PUSH
8046: LD_INT 105
8048: PUSH
8049: LD_INT 106
8051: PUSH
8052: LD_INT 107
8054: PUSH
8055: LD_INT 108
8057: PUSH
8058: LD_INT 109
8060: PUSH
8061: LD_INT 110
8063: PUSH
8064: LD_INT 111
8066: PUSH
8067: LD_INT 112
8069: PUSH
8070: LD_INT 114
8072: PUSH
8073: LD_INT 116
8075: PUSH
8076: LD_INT 117
8078: PUSH
8079: LD_INT 118
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: ST_TO_ADDR
8104: GO 9787
8106: LD_INT 12
8108: DOUBLE
8109: EQUAL
8110: IFTRUE 8114
8112: GO 8334
8114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 3
8128: PUSH
8129: LD_INT 4
8131: PUSH
8132: LD_INT 5
8134: PUSH
8135: LD_INT 6
8137: PUSH
8138: LD_INT 7
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 9
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: LD_INT 11
8152: PUSH
8153: LD_INT 12
8155: PUSH
8156: LD_INT 13
8158: PUSH
8159: LD_INT 14
8161: PUSH
8162: LD_INT 15
8164: PUSH
8165: LD_INT 16
8167: PUSH
8168: LD_INT 17
8170: PUSH
8171: LD_INT 18
8173: PUSH
8174: LD_INT 19
8176: PUSH
8177: LD_INT 20
8179: PUSH
8180: LD_INT 21
8182: PUSH
8183: LD_INT 22
8185: PUSH
8186: LD_INT 23
8188: PUSH
8189: LD_INT 24
8191: PUSH
8192: LD_INT 25
8194: PUSH
8195: LD_INT 26
8197: PUSH
8198: LD_INT 27
8200: PUSH
8201: LD_INT 28
8203: PUSH
8204: LD_INT 30
8206: PUSH
8207: LD_INT 31
8209: PUSH
8210: LD_INT 32
8212: PUSH
8213: LD_INT 33
8215: PUSH
8216: LD_INT 34
8218: PUSH
8219: LD_INT 36
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 101
8260: PUSH
8261: LD_INT 102
8263: PUSH
8264: LD_INT 103
8266: PUSH
8267: LD_INT 104
8269: PUSH
8270: LD_INT 105
8272: PUSH
8273: LD_INT 106
8275: PUSH
8276: LD_INT 107
8278: PUSH
8279: LD_INT 108
8281: PUSH
8282: LD_INT 109
8284: PUSH
8285: LD_INT 110
8287: PUSH
8288: LD_INT 111
8290: PUSH
8291: LD_INT 112
8293: PUSH
8294: LD_INT 113
8296: PUSH
8297: LD_INT 114
8299: PUSH
8300: LD_INT 116
8302: PUSH
8303: LD_INT 117
8305: PUSH
8306: LD_INT 118
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
8332: GO 9787
8334: LD_INT 13
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8550
8342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: LD_INT 4
8359: PUSH
8360: LD_INT 5
8362: PUSH
8363: LD_INT 8
8365: PUSH
8366: LD_INT 9
8368: PUSH
8369: LD_INT 10
8371: PUSH
8372: LD_INT 11
8374: PUSH
8375: LD_INT 12
8377: PUSH
8378: LD_INT 14
8380: PUSH
8381: LD_INT 15
8383: PUSH
8384: LD_INT 16
8386: PUSH
8387: LD_INT 17
8389: PUSH
8390: LD_INT 18
8392: PUSH
8393: LD_INT 19
8395: PUSH
8396: LD_INT 20
8398: PUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 22
8404: PUSH
8405: LD_INT 23
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 25
8413: PUSH
8414: LD_INT 26
8416: PUSH
8417: LD_INT 27
8419: PUSH
8420: LD_INT 28
8422: PUSH
8423: LD_INT 30
8425: PUSH
8426: LD_INT 31
8428: PUSH
8429: LD_INT 32
8431: PUSH
8432: LD_INT 33
8434: PUSH
8435: LD_INT 34
8437: PUSH
8438: LD_INT 36
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 101
8476: PUSH
8477: LD_INT 102
8479: PUSH
8480: LD_INT 103
8482: PUSH
8483: LD_INT 104
8485: PUSH
8486: LD_INT 105
8488: PUSH
8489: LD_INT 106
8491: PUSH
8492: LD_INT 107
8494: PUSH
8495: LD_INT 108
8497: PUSH
8498: LD_INT 109
8500: PUSH
8501: LD_INT 110
8503: PUSH
8504: LD_INT 111
8506: PUSH
8507: LD_INT 112
8509: PUSH
8510: LD_INT 113
8512: PUSH
8513: LD_INT 114
8515: PUSH
8516: LD_INT 116
8518: PUSH
8519: LD_INT 117
8521: PUSH
8522: LD_INT 118
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: ST_TO_ADDR
8548: GO 9787
8550: LD_INT 14
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8782
8558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: LD_INT 2
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: LD_INT 4
8575: PUSH
8576: LD_INT 5
8578: PUSH
8579: LD_INT 6
8581: PUSH
8582: LD_INT 7
8584: PUSH
8585: LD_INT 8
8587: PUSH
8588: LD_INT 9
8590: PUSH
8591: LD_INT 10
8593: PUSH
8594: LD_INT 11
8596: PUSH
8597: LD_INT 12
8599: PUSH
8600: LD_INT 13
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: LD_INT 15
8608: PUSH
8609: LD_INT 16
8611: PUSH
8612: LD_INT 17
8614: PUSH
8615: LD_INT 18
8617: PUSH
8618: LD_INT 19
8620: PUSH
8621: LD_INT 20
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 23
8632: PUSH
8633: LD_INT 24
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 26
8641: PUSH
8642: LD_INT 27
8644: PUSH
8645: LD_INT 28
8647: PUSH
8648: LD_INT 29
8650: PUSH
8651: LD_INT 30
8653: PUSH
8654: LD_INT 31
8656: PUSH
8657: LD_INT 32
8659: PUSH
8660: LD_INT 33
8662: PUSH
8663: LD_INT 34
8665: PUSH
8666: LD_INT 36
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 101
8708: PUSH
8709: LD_INT 102
8711: PUSH
8712: LD_INT 103
8714: PUSH
8715: LD_INT 104
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 107
8726: PUSH
8727: LD_INT 108
8729: PUSH
8730: LD_INT 109
8732: PUSH
8733: LD_INT 110
8735: PUSH
8736: LD_INT 111
8738: PUSH
8739: LD_INT 112
8741: PUSH
8742: LD_INT 113
8744: PUSH
8745: LD_INT 114
8747: PUSH
8748: LD_INT 116
8750: PUSH
8751: LD_INT 117
8753: PUSH
8754: LD_INT 118
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 9787
8782: LD_INT 15
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 9014
8790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8791: LD_ADDR_VAR 0 1
8795: PUSH
8796: LD_INT 1
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: LD_INT 3
8804: PUSH
8805: LD_INT 4
8807: PUSH
8808: LD_INT 5
8810: PUSH
8811: LD_INT 6
8813: PUSH
8814: LD_INT 7
8816: PUSH
8817: LD_INT 8
8819: PUSH
8820: LD_INT 9
8822: PUSH
8823: LD_INT 10
8825: PUSH
8826: LD_INT 11
8828: PUSH
8829: LD_INT 12
8831: PUSH
8832: LD_INT 13
8834: PUSH
8835: LD_INT 14
8837: PUSH
8838: LD_INT 15
8840: PUSH
8841: LD_INT 16
8843: PUSH
8844: LD_INT 17
8846: PUSH
8847: LD_INT 18
8849: PUSH
8850: LD_INT 19
8852: PUSH
8853: LD_INT 20
8855: PUSH
8856: LD_INT 21
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_INT 23
8864: PUSH
8865: LD_INT 24
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 26
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 28
8879: PUSH
8880: LD_INT 29
8882: PUSH
8883: LD_INT 30
8885: PUSH
8886: LD_INT 31
8888: PUSH
8889: LD_INT 32
8891: PUSH
8892: LD_INT 33
8894: PUSH
8895: LD_INT 34
8897: PUSH
8898: LD_INT 36
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 101
8940: PUSH
8941: LD_INT 102
8943: PUSH
8944: LD_INT 103
8946: PUSH
8947: LD_INT 104
8949: PUSH
8950: LD_INT 105
8952: PUSH
8953: LD_INT 106
8955: PUSH
8956: LD_INT 107
8958: PUSH
8959: LD_INT 108
8961: PUSH
8962: LD_INT 109
8964: PUSH
8965: LD_INT 110
8967: PUSH
8968: LD_INT 111
8970: PUSH
8971: LD_INT 112
8973: PUSH
8974: LD_INT 113
8976: PUSH
8977: LD_INT 114
8979: PUSH
8980: LD_INT 116
8982: PUSH
8983: LD_INT 117
8985: PUSH
8986: LD_INT 118
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: ST_TO_ADDR
9012: GO 9787
9014: LD_INT 16
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9158
9022: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9023: LD_ADDR_VAR 0 1
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: LD_INT 4
9033: PUSH
9034: LD_INT 5
9036: PUSH
9037: LD_INT 7
9039: PUSH
9040: LD_INT 11
9042: PUSH
9043: LD_INT 12
9045: PUSH
9046: LD_INT 15
9048: PUSH
9049: LD_INT 16
9051: PUSH
9052: LD_INT 20
9054: PUSH
9055: LD_INT 21
9057: PUSH
9058: LD_INT 22
9060: PUSH
9061: LD_INT 23
9063: PUSH
9064: LD_INT 25
9066: PUSH
9067: LD_INT 26
9069: PUSH
9070: LD_INT 30
9072: PUSH
9073: LD_INT 31
9075: PUSH
9076: LD_INT 32
9078: PUSH
9079: LD_INT 33
9081: PUSH
9082: LD_INT 34
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 101
9108: PUSH
9109: LD_INT 102
9111: PUSH
9112: LD_INT 103
9114: PUSH
9115: LD_INT 106
9117: PUSH
9118: LD_INT 108
9120: PUSH
9121: LD_INT 112
9123: PUSH
9124: LD_INT 113
9126: PUSH
9127: LD_INT 114
9129: PUSH
9130: LD_INT 116
9132: PUSH
9133: LD_INT 117
9135: PUSH
9136: LD_INT 118
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: ST_TO_ADDR
9156: GO 9787
9158: LD_INT 17
9160: DOUBLE
9161: EQUAL
9162: IFTRUE 9166
9164: GO 9390
9166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9167: LD_ADDR_VAR 0 1
9171: PUSH
9172: LD_INT 1
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: LD_INT 4
9183: PUSH
9184: LD_INT 5
9186: PUSH
9187: LD_INT 6
9189: PUSH
9190: LD_INT 7
9192: PUSH
9193: LD_INT 8
9195: PUSH
9196: LD_INT 9
9198: PUSH
9199: LD_INT 10
9201: PUSH
9202: LD_INT 11
9204: PUSH
9205: LD_INT 12
9207: PUSH
9208: LD_INT 13
9210: PUSH
9211: LD_INT 14
9213: PUSH
9214: LD_INT 15
9216: PUSH
9217: LD_INT 16
9219: PUSH
9220: LD_INT 17
9222: PUSH
9223: LD_INT 18
9225: PUSH
9226: LD_INT 19
9228: PUSH
9229: LD_INT 20
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 22
9237: PUSH
9238: LD_INT 23
9240: PUSH
9241: LD_INT 24
9243: PUSH
9244: LD_INT 25
9246: PUSH
9247: LD_INT 26
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 28
9255: PUSH
9256: LD_INT 29
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 31
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: LD_INT 33
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 36
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 101
9316: PUSH
9317: LD_INT 102
9319: PUSH
9320: LD_INT 103
9322: PUSH
9323: LD_INT 104
9325: PUSH
9326: LD_INT 105
9328: PUSH
9329: LD_INT 106
9331: PUSH
9332: LD_INT 107
9334: PUSH
9335: LD_INT 108
9337: PUSH
9338: LD_INT 109
9340: PUSH
9341: LD_INT 110
9343: PUSH
9344: LD_INT 111
9346: PUSH
9347: LD_INT 112
9349: PUSH
9350: LD_INT 113
9352: PUSH
9353: LD_INT 114
9355: PUSH
9356: LD_INT 116
9358: PUSH
9359: LD_INT 117
9361: PUSH
9362: LD_INT 118
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: ST_TO_ADDR
9388: GO 9787
9390: LD_INT 18
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9546
9398: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9399: LD_ADDR_VAR 0 1
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 4
9409: PUSH
9410: LD_INT 5
9412: PUSH
9413: LD_INT 7
9415: PUSH
9416: LD_INT 11
9418: PUSH
9419: LD_INT 12
9421: PUSH
9422: LD_INT 15
9424: PUSH
9425: LD_INT 16
9427: PUSH
9428: LD_INT 20
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 22
9436: PUSH
9437: LD_INT 23
9439: PUSH
9440: LD_INT 25
9442: PUSH
9443: LD_INT 26
9445: PUSH
9446: LD_INT 30
9448: PUSH
9449: LD_INT 31
9451: PUSH
9452: LD_INT 32
9454: PUSH
9455: LD_INT 33
9457: PUSH
9458: LD_INT 34
9460: PUSH
9461: LD_INT 35
9463: PUSH
9464: LD_INT 36
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 101
9492: PUSH
9493: LD_INT 102
9495: PUSH
9496: LD_INT 103
9498: PUSH
9499: LD_INT 106
9501: PUSH
9502: LD_INT 108
9504: PUSH
9505: LD_INT 112
9507: PUSH
9508: LD_INT 113
9510: PUSH
9511: LD_INT 114
9513: PUSH
9514: LD_INT 115
9516: PUSH
9517: LD_INT 116
9519: PUSH
9520: LD_INT 117
9522: PUSH
9523: LD_INT 118
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: ST_TO_ADDR
9544: GO 9787
9546: LD_INT 19
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9786
9554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_INT 1
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 3
9568: PUSH
9569: LD_INT 4
9571: PUSH
9572: LD_INT 5
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: LD_INT 8
9583: PUSH
9584: LD_INT 9
9586: PUSH
9587: LD_INT 10
9589: PUSH
9590: LD_INT 11
9592: PUSH
9593: LD_INT 12
9595: PUSH
9596: LD_INT 13
9598: PUSH
9599: LD_INT 14
9601: PUSH
9602: LD_INT 15
9604: PUSH
9605: LD_INT 16
9607: PUSH
9608: LD_INT 17
9610: PUSH
9611: LD_INT 18
9613: PUSH
9614: LD_INT 19
9616: PUSH
9617: LD_INT 20
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 26
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 28
9643: PUSH
9644: LD_INT 29
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: LD_INT 31
9652: PUSH
9653: LD_INT 32
9655: PUSH
9656: LD_INT 33
9658: PUSH
9659: LD_INT 34
9661: PUSH
9662: LD_INT 35
9664: PUSH
9665: LD_INT 36
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 101
9708: PUSH
9709: LD_INT 102
9711: PUSH
9712: LD_INT 103
9714: PUSH
9715: LD_INT 104
9717: PUSH
9718: LD_INT 105
9720: PUSH
9721: LD_INT 106
9723: PUSH
9724: LD_INT 107
9726: PUSH
9727: LD_INT 108
9729: PUSH
9730: LD_INT 109
9732: PUSH
9733: LD_INT 110
9735: PUSH
9736: LD_INT 111
9738: PUSH
9739: LD_INT 112
9741: PUSH
9742: LD_INT 113
9744: PUSH
9745: LD_INT 114
9747: PUSH
9748: LD_INT 115
9750: PUSH
9751: LD_INT 116
9753: PUSH
9754: LD_INT 117
9756: PUSH
9757: LD_INT 118
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
9784: GO 9787
9786: POP
// end else
9787: GO 10018
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9789: LD_ADDR_VAR 0 1
9793: PUSH
9794: LD_INT 1
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 3
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: LD_INT 7
9814: PUSH
9815: LD_INT 8
9817: PUSH
9818: LD_INT 9
9820: PUSH
9821: LD_INT 10
9823: PUSH
9824: LD_INT 11
9826: PUSH
9827: LD_INT 12
9829: PUSH
9830: LD_INT 13
9832: PUSH
9833: LD_INT 14
9835: PUSH
9836: LD_INT 15
9838: PUSH
9839: LD_INT 16
9841: PUSH
9842: LD_INT 17
9844: PUSH
9845: LD_INT 18
9847: PUSH
9848: LD_INT 19
9850: PUSH
9851: LD_INT 20
9853: PUSH
9854: LD_INT 21
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 23
9862: PUSH
9863: LD_INT 24
9865: PUSH
9866: LD_INT 25
9868: PUSH
9869: LD_INT 26
9871: PUSH
9872: LD_INT 27
9874: PUSH
9875: LD_INT 28
9877: PUSH
9878: LD_INT 29
9880: PUSH
9881: LD_INT 30
9883: PUSH
9884: LD_INT 31
9886: PUSH
9887: LD_INT 32
9889: PUSH
9890: LD_INT 33
9892: PUSH
9893: LD_INT 34
9895: PUSH
9896: LD_INT 35
9898: PUSH
9899: LD_INT 36
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 101
9942: PUSH
9943: LD_INT 102
9945: PUSH
9946: LD_INT 103
9948: PUSH
9949: LD_INT 104
9951: PUSH
9952: LD_INT 105
9954: PUSH
9955: LD_INT 106
9957: PUSH
9958: LD_INT 107
9960: PUSH
9961: LD_INT 108
9963: PUSH
9964: LD_INT 109
9966: PUSH
9967: LD_INT 110
9969: PUSH
9970: LD_INT 111
9972: PUSH
9973: LD_INT 112
9975: PUSH
9976: LD_INT 113
9978: PUSH
9979: LD_INT 114
9981: PUSH
9982: LD_INT 115
9984: PUSH
9985: LD_INT 116
9987: PUSH
9988: LD_INT 117
9990: PUSH
9991: LD_INT 118
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: ST_TO_ADDR
// if result then
10018: LD_VAR 0 1
10022: IFFALSE 10311
// begin normal :=  ;
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_STRING 
10031: ST_TO_ADDR
// hardcore :=  ;
10032: LD_ADDR_VAR 0 4
10036: PUSH
10037: LD_STRING 
10039: ST_TO_ADDR
// for i = 1 to normalCounter do
10040: LD_ADDR_VAR 0 5
10044: PUSH
10045: DOUBLE
10046: LD_INT 1
10048: DEC
10049: ST_TO_ADDR
10050: LD_EXP 16
10054: PUSH
10055: FOR_TO
10056: IFFALSE 10157
// begin tmp := 0 ;
10058: LD_ADDR_VAR 0 2
10062: PUSH
10063: LD_STRING 0
10065: ST_TO_ADDR
// if result [ 1 ] then
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 1
10073: ARRAY
10074: IFFALSE 10139
// if result [ 1 ] [ 1 ] = i then
10076: LD_VAR 0 1
10080: PUSH
10081: LD_INT 1
10083: ARRAY
10084: PUSH
10085: LD_INT 1
10087: ARRAY
10088: PUSH
10089: LD_VAR 0 5
10093: EQUAL
10094: IFFALSE 10139
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10096: LD_ADDR_VAR 0 1
10100: PUSH
10101: LD_VAR 0 1
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_INT 1
10116: ARRAY
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 3
10125: PPUSH
10126: CALL_OW 1
10130: ST_TO_ADDR
// tmp := 1 ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_STRING 1
10138: ST_TO_ADDR
// end ; normal := normal & tmp ;
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_VAR 0 3
10148: PUSH
10149: LD_VAR 0 2
10153: STR
10154: ST_TO_ADDR
// end ;
10155: GO 10055
10157: POP
10158: POP
// for i = 1 to hardcoreCounter do
10159: LD_ADDR_VAR 0 5
10163: PUSH
10164: DOUBLE
10165: LD_INT 1
10167: DEC
10168: ST_TO_ADDR
10169: LD_EXP 17
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10280
// begin tmp := 0 ;
10177: LD_ADDR_VAR 0 2
10181: PUSH
10182: LD_STRING 0
10184: ST_TO_ADDR
// if result [ 2 ] then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 2
10192: ARRAY
10193: IFFALSE 10262
// if result [ 2 ] [ 1 ] = 100 + i then
10195: LD_VAR 0 1
10199: PUSH
10200: LD_INT 2
10202: ARRAY
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PUSH
10208: LD_INT 100
10210: PUSH
10211: LD_VAR 0 5
10215: PLUS
10216: EQUAL
10217: IFFALSE 10262
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_VAR 0 1
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: LD_VAR 0 1
10236: PUSH
10237: LD_INT 2
10239: ARRAY
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 3
10248: PPUSH
10249: CALL_OW 1
10253: ST_TO_ADDR
// tmp := 1 ;
10254: LD_ADDR_VAR 0 2
10258: PUSH
10259: LD_STRING 1
10261: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10262: LD_ADDR_VAR 0 4
10266: PUSH
10267: LD_VAR 0 4
10271: PUSH
10272: LD_VAR 0 2
10276: STR
10277: ST_TO_ADDR
// end ;
10278: GO 10174
10280: POP
10281: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10282: LD_STRING getStreamItemsFromMission("
10284: PUSH
10285: LD_VAR 0 3
10289: STR
10290: PUSH
10291: LD_STRING ","
10293: STR
10294: PUSH
10295: LD_VAR 0 4
10299: STR
10300: PUSH
10301: LD_STRING ")
10303: STR
10304: PPUSH
10305: CALL_OW 559
// end else
10309: GO 10318
// ToLua ( getStreamItemsFromMission("","") ) ;
10311: LD_STRING getStreamItemsFromMission("","")
10313: PPUSH
10314: CALL_OW 559
// end ;
10318: LD_VAR 0 1
10322: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10323: LD_EXP 15
10327: PUSH
10328: LD_EXP 20
10332: AND
10333: IFFALSE 10457
10335: GO 10337
10337: DISABLE
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
// begin enable ;
10342: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_OWVAR 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 34
10365: PUSH
10366: LD_INT 7
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 34
10375: PUSH
10376: LD_INT 45
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 34
10385: PUSH
10386: LD_INT 28
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 34
10395: PUSH
10396: LD_INT 47
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 69
10418: ST_TO_ADDR
// if not tmp then
10419: LD_VAR 0 2
10423: NOT
10424: IFFALSE 10428
// exit ;
10426: GO 10457
// for i in tmp do
10428: LD_ADDR_VAR 0 1
10432: PUSH
10433: LD_VAR 0 2
10437: PUSH
10438: FOR_IN
10439: IFFALSE 10455
// begin SetLives ( i , 0 ) ;
10441: LD_VAR 0 1
10445: PPUSH
10446: LD_INT 0
10448: PPUSH
10449: CALL_OW 234
// end ;
10453: GO 10438
10455: POP
10456: POP
// end ;
10457: PPOPN 2
10459: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10460: LD_EXP 15
10464: PUSH
10465: LD_EXP 21
10469: AND
10470: IFFALSE 10554
10472: GO 10474
10474: DISABLE
10475: LD_INT 0
10477: PPUSH
10478: PPUSH
// begin enable ;
10479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10480: LD_ADDR_VAR 0 2
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_OWVAR 2
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 32
10499: PUSH
10500: LD_INT 3
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ST_TO_ADDR
// if not tmp then
10516: LD_VAR 0 2
10520: NOT
10521: IFFALSE 10525
// exit ;
10523: GO 10554
// for i in tmp do
10525: LD_ADDR_VAR 0 1
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10552
// begin SetLives ( i , 0 ) ;
10538: LD_VAR 0 1
10542: PPUSH
10543: LD_INT 0
10545: PPUSH
10546: CALL_OW 234
// end ;
10550: GO 10535
10552: POP
10553: POP
// end ;
10554: PPOPN 2
10556: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10557: LD_EXP 15
10561: PUSH
10562: LD_EXP 18
10566: AND
10567: IFFALSE 10660
10569: GO 10571
10571: DISABLE
10572: LD_INT 0
10574: PPUSH
// begin enable ;
10575: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_OWVAR 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 25
10598: PUSH
10599: LD_INT 5
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 25
10608: PUSH
10609: LD_INT 9
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 25
10618: PUSH
10619: LD_INT 8
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 69
10640: PUSH
10641: FOR_IN
10642: IFFALSE 10658
// begin SetClass ( i , 1 ) ;
10644: LD_VAR 0 1
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 336
// end ;
10656: GO 10641
10658: POP
10659: POP
// end ;
10660: PPOPN 1
10662: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10663: LD_EXP 15
10667: PUSH
10668: LD_EXP 19
10672: AND
10673: PUSH
10674: LD_OWVAR 65
10678: PUSH
10679: LD_INT 7
10681: LESS
10682: AND
10683: IFFALSE 10697
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// game_speed := 7 ;
10689: LD_ADDR_OWVAR 65
10693: PUSH
10694: LD_INT 7
10696: ST_TO_ADDR
// end ;
10697: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10698: LD_EXP 15
10702: PUSH
10703: LD_EXP 22
10707: AND
10708: IFFALSE 10910
10710: GO 10712
10712: DISABLE
10713: LD_INT 0
10715: PPUSH
10716: PPUSH
10717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10718: LD_ADDR_VAR 0 3
10722: PUSH
10723: LD_INT 81
10725: PUSH
10726: LD_OWVAR 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 21
10737: PUSH
10738: LD_INT 1
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: ST_TO_ADDR
// if not tmp then
10754: LD_VAR 0 3
10758: NOT
10759: IFFALSE 10763
// exit ;
10761: GO 10910
// if tmp > 5 then
10763: LD_VAR 0 3
10767: PUSH
10768: LD_INT 5
10770: GREATER
10771: IFFALSE 10783
// k := 5 else
10773: LD_ADDR_VAR 0 2
10777: PUSH
10778: LD_INT 5
10780: ST_TO_ADDR
10781: GO 10793
// k := tmp ;
10783: LD_ADDR_VAR 0 2
10787: PUSH
10788: LD_VAR 0 3
10792: ST_TO_ADDR
// for i := 1 to k do
10793: LD_ADDR_VAR 0 1
10797: PUSH
10798: DOUBLE
10799: LD_INT 1
10801: DEC
10802: ST_TO_ADDR
10803: LD_VAR 0 2
10807: PUSH
10808: FOR_TO
10809: IFFALSE 10908
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_VAR 0 1
10820: ARRAY
10821: PPUSH
10822: LD_VAR 0 1
10826: PUSH
10827: LD_INT 4
10829: MOD
10830: PUSH
10831: LD_INT 1
10833: PLUS
10834: PPUSH
10835: CALL_OW 259
10839: PUSH
10840: LD_INT 10
10842: LESS
10843: IFFALSE 10906
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10845: LD_VAR 0 3
10849: PUSH
10850: LD_VAR 0 1
10854: ARRAY
10855: PPUSH
10856: LD_VAR 0 1
10860: PUSH
10861: LD_INT 4
10863: MOD
10864: PUSH
10865: LD_INT 1
10867: PLUS
10868: PPUSH
10869: LD_VAR 0 3
10873: PUSH
10874: LD_VAR 0 1
10878: ARRAY
10879: PPUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 4
10887: MOD
10888: PUSH
10889: LD_INT 1
10891: PLUS
10892: PPUSH
10893: CALL_OW 259
10897: PUSH
10898: LD_INT 1
10900: PLUS
10901: PPUSH
10902: CALL_OW 237
10906: GO 10808
10908: POP
10909: POP
// end ;
10910: PPOPN 3
10912: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10913: LD_EXP 15
10917: PUSH
10918: LD_EXP 23
10922: AND
10923: IFFALSE 10943
10925: GO 10927
10927: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10928: LD_INT 4
10930: PPUSH
10931: LD_OWVAR 2
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 324
10943: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10944: LD_EXP 15
10948: PUSH
10949: LD_EXP 52
10953: AND
10954: IFFALSE 10974
10956: GO 10958
10958: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10959: LD_INT 19
10961: PPUSH
10962: LD_OWVAR 2
10966: PPUSH
10967: LD_INT 0
10969: PPUSH
10970: CALL_OW 324
10974: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10975: LD_EXP 15
10979: PUSH
10980: LD_EXP 24
10984: AND
10985: IFFALSE 11087
10987: GO 10989
10989: DISABLE
10990: LD_INT 0
10992: PPUSH
10993: PPUSH
// begin enable ;
10994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: LD_INT 22
11002: PUSH
11003: LD_OWVAR 2
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 2
11014: PUSH
11015: LD_INT 34
11017: PUSH
11018: LD_INT 11
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 34
11027: PUSH
11028: LD_INT 30
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: ST_TO_ADDR
// if not tmp then
11049: LD_VAR 0 2
11053: NOT
11054: IFFALSE 11058
// exit ;
11056: GO 11087
// for i in tmp do
11058: LD_ADDR_VAR 0 1
11062: PUSH
11063: LD_VAR 0 2
11067: PUSH
11068: FOR_IN
11069: IFFALSE 11085
// begin SetLives ( i , 0 ) ;
11071: LD_VAR 0 1
11075: PPUSH
11076: LD_INT 0
11078: PPUSH
11079: CALL_OW 234
// end ;
11083: GO 11068
11085: POP
11086: POP
// end ;
11087: PPOPN 2
11089: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11090: LD_EXP 15
11094: PUSH
11095: LD_EXP 25
11099: AND
11100: IFFALSE 11120
11102: GO 11104
11104: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11105: LD_INT 32
11107: PPUSH
11108: LD_OWVAR 2
11112: PPUSH
11113: LD_INT 0
11115: PPUSH
11116: CALL_OW 324
11120: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11121: LD_EXP 15
11125: PUSH
11126: LD_EXP 26
11130: AND
11131: IFFALSE 11312
11133: GO 11135
11135: DISABLE
11136: LD_INT 0
11138: PPUSH
11139: PPUSH
11140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_INT 22
11148: PUSH
11149: LD_OWVAR 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 33
11160: PUSH
11161: LD_INT 3
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: ST_TO_ADDR
// if not tmp then
11177: LD_VAR 0 2
11181: NOT
11182: IFFALSE 11186
// exit ;
11184: GO 11312
// side := 0 ;
11186: LD_ADDR_VAR 0 3
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// for i := 1 to 8 do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: DOUBLE
11200: LD_INT 1
11202: DEC
11203: ST_TO_ADDR
11204: LD_INT 8
11206: PUSH
11207: FOR_TO
11208: IFFALSE 11256
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11210: LD_OWVAR 2
11214: PUSH
11215: LD_VAR 0 1
11219: NONEQUAL
11220: PUSH
11221: LD_OWVAR 2
11225: PPUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 81
11235: PUSH
11236: LD_INT 2
11238: EQUAL
11239: AND
11240: IFFALSE 11254
// begin side := i ;
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_VAR 0 1
11251: ST_TO_ADDR
// break ;
11252: GO 11256
// end ;
11254: GO 11207
11256: POP
11257: POP
// if not side then
11258: LD_VAR 0 3
11262: NOT
11263: IFFALSE 11267
// exit ;
11265: GO 11312
// for i := 1 to tmp do
11267: LD_ADDR_VAR 0 1
11271: PUSH
11272: DOUBLE
11273: LD_INT 1
11275: DEC
11276: ST_TO_ADDR
11277: LD_VAR 0 2
11281: PUSH
11282: FOR_TO
11283: IFFALSE 11310
// if Prob ( 60 ) then
11285: LD_INT 60
11287: PPUSH
11288: CALL_OW 13
11292: IFFALSE 11308
// SetSide ( i , side ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: CALL_OW 235
11308: GO 11282
11310: POP
11311: POP
// end ;
11312: PPOPN 3
11314: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11315: LD_EXP 15
11319: PUSH
11320: LD_EXP 28
11324: AND
11325: IFFALSE 11444
11327: GO 11329
11329: DISABLE
11330: LD_INT 0
11332: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_OWVAR 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 3
11362: PUSH
11363: LD_INT 23
11365: PUSH
11366: LD_INT 0
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 69
11386: PUSH
11387: FOR_IN
11388: IFFALSE 11442
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11390: LD_VAR 0 1
11394: PPUSH
11395: CALL_OW 257
11399: PUSH
11400: LD_INT 1
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: LD_INT 4
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: IN
11418: IFFALSE 11440
// SetClass ( un , rand ( 1 , 4 ) ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: LD_INT 4
11430: PPUSH
11431: CALL_OW 12
11435: PPUSH
11436: CALL_OW 336
11440: GO 11387
11442: POP
11443: POP
// end ;
11444: PPOPN 1
11446: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11447: LD_EXP 15
11451: PUSH
11452: LD_EXP 27
11456: AND
11457: IFFALSE 11536
11459: GO 11461
11461: DISABLE
11462: LD_INT 0
11464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11465: LD_ADDR_VAR 0 1
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_OWVAR 2
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 21
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// if not tmp then
11501: LD_VAR 0 1
11505: NOT
11506: IFFALSE 11510
// exit ;
11508: GO 11536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11510: LD_VAR 0 1
11514: PUSH
11515: LD_INT 1
11517: PPUSH
11518: LD_VAR 0 1
11522: PPUSH
11523: CALL_OW 12
11527: ARRAY
11528: PPUSH
11529: LD_INT 100
11531: PPUSH
11532: CALL_OW 234
// end ;
11536: PPOPN 1
11538: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11539: LD_EXP 15
11543: PUSH
11544: LD_EXP 29
11548: AND
11549: IFFALSE 11647
11551: GO 11553
11553: DISABLE
11554: LD_INT 0
11556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 22
11564: PUSH
11565: LD_OWVAR 2
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 21
11576: PUSH
11577: LD_INT 1
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 1
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11647
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11602: LD_VAR 0 1
11606: PUSH
11607: LD_INT 1
11609: PPUSH
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 12
11619: ARRAY
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: LD_INT 4
11626: PPUSH
11627: CALL_OW 12
11631: PPUSH
11632: LD_INT 3000
11634: PPUSH
11635: LD_INT 9000
11637: PPUSH
11638: CALL_OW 12
11642: PPUSH
11643: CALL_OW 492
// end ;
11647: PPOPN 1
11649: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11650: LD_EXP 15
11654: PUSH
11655: LD_EXP 30
11659: AND
11660: IFFALSE 11680
11662: GO 11664
11664: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11665: LD_INT 1
11667: PPUSH
11668: LD_OWVAR 2
11672: PPUSH
11673: LD_INT 0
11675: PPUSH
11676: CALL_OW 324
11680: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11681: LD_EXP 15
11685: PUSH
11686: LD_EXP 31
11690: AND
11691: IFFALSE 11774
11693: GO 11695
11695: DISABLE
11696: LD_INT 0
11698: PPUSH
11699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11700: LD_ADDR_VAR 0 2
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_OWVAR 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 21
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PPUSH
11731: CALL_OW 69
11735: ST_TO_ADDR
// if not tmp then
11736: LD_VAR 0 2
11740: NOT
11741: IFFALSE 11745
// exit ;
11743: GO 11774
// for i in tmp do
11745: LD_ADDR_VAR 0 1
11749: PUSH
11750: LD_VAR 0 2
11754: PUSH
11755: FOR_IN
11756: IFFALSE 11772
// SetBLevel ( i , 10 ) ;
11758: LD_VAR 0 1
11762: PPUSH
11763: LD_INT 10
11765: PPUSH
11766: CALL_OW 241
11770: GO 11755
11772: POP
11773: POP
// end ;
11774: PPOPN 2
11776: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11777: LD_EXP 15
11781: PUSH
11782: LD_EXP 32
11786: AND
11787: IFFALSE 11898
11789: GO 11791
11791: DISABLE
11792: LD_INT 0
11794: PPUSH
11795: PPUSH
11796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 22
11804: PUSH
11805: LD_OWVAR 2
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 25
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 69
11832: ST_TO_ADDR
// if not tmp then
11833: LD_VAR 0 3
11837: NOT
11838: IFFALSE 11842
// exit ;
11840: GO 11898
// un := tmp [ rand ( 1 , tmp ) ] ;
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: CALL_OW 12
11864: ARRAY
11865: ST_TO_ADDR
// if Crawls ( un ) then
11866: LD_VAR 0 2
11870: PPUSH
11871: CALL_OW 318
11875: IFFALSE 11886
// ComWalk ( un ) ;
11877: LD_VAR 0 2
11881: PPUSH
11882: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11886: LD_VAR 0 2
11890: PPUSH
11891: LD_INT 5
11893: PPUSH
11894: CALL_OW 336
// end ;
11898: PPOPN 3
11900: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11901: LD_EXP 15
11905: PUSH
11906: LD_EXP 33
11910: AND
11911: PUSH
11912: LD_OWVAR 67
11916: PUSH
11917: LD_INT 4
11919: LESS
11920: AND
11921: IFFALSE 11940
11923: GO 11925
11925: DISABLE
// begin Difficulty := Difficulty + 1 ;
11926: LD_ADDR_OWVAR 67
11930: PUSH
11931: LD_OWVAR 67
11935: PUSH
11936: LD_INT 1
11938: PLUS
11939: ST_TO_ADDR
// end ;
11940: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11941: LD_EXP 15
11945: PUSH
11946: LD_EXP 34
11950: AND
11951: IFFALSE 12054
11953: GO 11955
11955: DISABLE
11956: LD_INT 0
11958: PPUSH
// begin for i := 1 to 5 do
11959: LD_ADDR_VAR 0 1
11963: PUSH
11964: DOUBLE
11965: LD_INT 1
11967: DEC
11968: ST_TO_ADDR
11969: LD_INT 5
11971: PUSH
11972: FOR_TO
11973: IFFALSE 12052
// begin uc_nation := nation_nature ;
11975: LD_ADDR_OWVAR 21
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// uc_side := 0 ;
11983: LD_ADDR_OWVAR 20
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11991: LD_ADDR_OWVAR 29
11995: PUSH
11996: LD_INT 12
11998: PUSH
11999: LD_INT 12
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: ST_TO_ADDR
// hc_agressivity := 20 ;
12006: LD_ADDR_OWVAR 35
12010: PUSH
12011: LD_INT 20
12013: ST_TO_ADDR
// hc_class := class_tiger ;
12014: LD_ADDR_OWVAR 28
12018: PUSH
12019: LD_INT 14
12021: ST_TO_ADDR
// hc_gallery :=  ;
12022: LD_ADDR_OWVAR 33
12026: PUSH
12027: LD_STRING 
12029: ST_TO_ADDR
// hc_name :=  ;
12030: LD_ADDR_OWVAR 26
12034: PUSH
12035: LD_STRING 
12037: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12038: CALL_OW 44
12042: PPUSH
12043: LD_INT 0
12045: PPUSH
12046: CALL_OW 51
// end ;
12050: GO 11972
12052: POP
12053: POP
// end ;
12054: PPOPN 1
12056: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12057: LD_EXP 15
12061: PUSH
12062: LD_EXP 35
12066: AND
12067: IFFALSE 12076
12069: GO 12071
12071: DISABLE
// StreamSibBomb ;
12072: CALL 12077 0 0
12076: END
// export function StreamSibBomb ; var i , x , y ; begin
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
// result := false ;
12083: LD_ADDR_VAR 0 1
12087: PUSH
12088: LD_INT 0
12090: ST_TO_ADDR
// for i := 1 to 16 do
12091: LD_ADDR_VAR 0 2
12095: PUSH
12096: DOUBLE
12097: LD_INT 1
12099: DEC
12100: ST_TO_ADDR
12101: LD_INT 16
12103: PUSH
12104: FOR_TO
12105: IFFALSE 12304
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12107: LD_ADDR_VAR 0 3
12111: PUSH
12112: LD_INT 10
12114: PUSH
12115: LD_INT 20
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 40
12123: PUSH
12124: LD_INT 50
12126: PUSH
12127: LD_INT 60
12129: PUSH
12130: LD_INT 70
12132: PUSH
12133: LD_INT 80
12135: PUSH
12136: LD_INT 90
12138: PUSH
12139: LD_INT 100
12141: PUSH
12142: LD_INT 110
12144: PUSH
12145: LD_INT 120
12147: PUSH
12148: LD_INT 130
12150: PUSH
12151: LD_INT 140
12153: PUSH
12154: LD_INT 150
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 1
12176: PPUSH
12177: LD_INT 15
12179: PPUSH
12180: CALL_OW 12
12184: ARRAY
12185: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12186: LD_ADDR_VAR 0 4
12190: PUSH
12191: LD_INT 10
12193: PUSH
12194: LD_INT 20
12196: PUSH
12197: LD_INT 30
12199: PUSH
12200: LD_INT 40
12202: PUSH
12203: LD_INT 50
12205: PUSH
12206: LD_INT 60
12208: PUSH
12209: LD_INT 70
12211: PUSH
12212: LD_INT 80
12214: PUSH
12215: LD_INT 90
12217: PUSH
12218: LD_INT 100
12220: PUSH
12221: LD_INT 110
12223: PUSH
12224: LD_INT 120
12226: PUSH
12227: LD_INT 130
12229: PUSH
12230: LD_INT 140
12232: PUSH
12233: LD_INT 150
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 1
12255: PPUSH
12256: LD_INT 15
12258: PPUSH
12259: CALL_OW 12
12263: ARRAY
12264: ST_TO_ADDR
// if ValidHex ( x , y ) then
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_VAR 0 4
12274: PPUSH
12275: CALL_OW 488
12279: IFFALSE 12302
// begin result := [ x , y ] ;
12281: LD_ADDR_VAR 0 1
12285: PUSH
12286: LD_VAR 0 3
12290: PUSH
12291: LD_VAR 0 4
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: ST_TO_ADDR
// break ;
12300: GO 12304
// end ; end ;
12302: GO 12104
12304: POP
12305: POP
// if result then
12306: LD_VAR 0 1
12310: IFFALSE 12370
// begin ToLua ( playSibBomb() ) ;
12312: LD_STRING playSibBomb()
12314: PPUSH
12315: CALL_OW 559
// wait ( 0 0$14 ) ;
12319: LD_INT 490
12321: PPUSH
12322: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_VAR 0 1
12339: PUSH
12340: LD_INT 2
12342: ARRAY
12343: PPUSH
12344: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12348: LD_VAR 0 1
12352: PUSH
12353: LD_INT 1
12355: ARRAY
12356: PPUSH
12357: LD_VAR 0 1
12361: PUSH
12362: LD_INT 2
12364: ARRAY
12365: PPUSH
12366: CALL_OW 429
// end ; end ;
12370: LD_VAR 0 1
12374: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12375: LD_EXP 15
12379: PUSH
12380: LD_EXP 37
12384: AND
12385: IFFALSE 12397
12387: GO 12389
12389: DISABLE
// YouLost (  ) ;
12390: LD_STRING 
12392: PPUSH
12393: CALL_OW 104
12397: END
// every 0 0$1 trigger StreamModeActive and sFog do
12398: LD_EXP 15
12402: PUSH
12403: LD_EXP 36
12407: AND
12408: IFFALSE 12422
12410: GO 12412
12412: DISABLE
// FogOff ( your_side ) ;
12413: LD_OWVAR 2
12417: PPUSH
12418: CALL_OW 344
12422: END
// every 0 0$1 trigger StreamModeActive and sSun do
12423: LD_EXP 15
12427: PUSH
12428: LD_EXP 38
12432: AND
12433: IFFALSE 12461
12435: GO 12437
12437: DISABLE
// begin solar_recharge_percent := 0 ;
12438: LD_ADDR_OWVAR 79
12442: PUSH
12443: LD_INT 0
12445: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12446: LD_INT 10500
12448: PPUSH
12449: CALL_OW 67
// solar_recharge_percent := 100 ;
12453: LD_ADDR_OWVAR 79
12457: PUSH
12458: LD_INT 100
12460: ST_TO_ADDR
// end ;
12461: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12462: LD_EXP 15
12466: PUSH
12467: LD_EXP 39
12471: AND
12472: IFFALSE 12711
12474: GO 12476
12476: DISABLE
12477: LD_INT 0
12479: PPUSH
12480: PPUSH
12481: PPUSH
// begin tmp := [ ] ;
12482: LD_ADDR_VAR 0 3
12486: PUSH
12487: EMPTY
12488: ST_TO_ADDR
// for i := 1 to 6 do
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 6
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12608
// begin uc_nation := nation_nature ;
12505: LD_ADDR_OWVAR 21
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// uc_side := 0 ;
12513: LD_ADDR_OWVAR 20
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12521: LD_ADDR_OWVAR 29
12525: PUSH
12526: LD_INT 12
12528: PUSH
12529: LD_INT 12
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: ST_TO_ADDR
// hc_agressivity := 20 ;
12536: LD_ADDR_OWVAR 35
12540: PUSH
12541: LD_INT 20
12543: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12544: LD_ADDR_OWVAR 28
12548: PUSH
12549: LD_INT 17
12551: ST_TO_ADDR
// hc_gallery :=  ;
12552: LD_ADDR_OWVAR 33
12556: PUSH
12557: LD_STRING 
12559: ST_TO_ADDR
// hc_name :=  ;
12560: LD_ADDR_OWVAR 26
12564: PUSH
12565: LD_STRING 
12567: ST_TO_ADDR
// un := CreateHuman ;
12568: LD_ADDR_VAR 0 2
12572: PUSH
12573: CALL_OW 44
12577: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12578: LD_VAR 0 2
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 51
// tmp := tmp ^ un ;
12590: LD_ADDR_VAR 0 3
12594: PUSH
12595: LD_VAR 0 3
12599: PUSH
12600: LD_VAR 0 2
12604: ADD
12605: ST_TO_ADDR
// end ;
12606: GO 12502
12608: POP
12609: POP
// repeat wait ( 0 0$1 ) ;
12610: LD_INT 35
12612: PPUSH
12613: CALL_OW 67
// for un in tmp do
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_VAR 0 3
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12702
// begin if IsDead ( un ) then
12630: LD_VAR 0 2
12634: PPUSH
12635: CALL_OW 301
12639: IFFALSE 12659
// begin tmp := tmp diff un ;
12641: LD_ADDR_VAR 0 3
12645: PUSH
12646: LD_VAR 0 3
12650: PUSH
12651: LD_VAR 0 2
12655: DIFF
12656: ST_TO_ADDR
// continue ;
12657: GO 12627
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12659: LD_VAR 0 2
12663: PPUSH
12664: LD_INT 3
12666: PUSH
12667: LD_INT 22
12669: PUSH
12670: LD_INT 0
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PPUSH
12686: LD_VAR 0 2
12690: PPUSH
12691: CALL_OW 74
12695: PPUSH
12696: CALL_OW 115
// end ;
12700: GO 12627
12702: POP
12703: POP
// until not tmp ;
12704: LD_VAR 0 3
12708: NOT
12709: IFFALSE 12610
// end ;
12711: PPOPN 3
12713: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12714: LD_EXP 15
12718: PUSH
12719: LD_EXP 40
12723: AND
12724: IFFALSE 12778
12726: GO 12728
12728: DISABLE
// begin ToLua ( displayTroll(); ) ;
12729: LD_STRING displayTroll();
12731: PPUSH
12732: CALL_OW 559
// wait ( 3 3$00 ) ;
12736: LD_INT 6300
12738: PPUSH
12739: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12743: LD_STRING hideTroll();
12745: PPUSH
12746: CALL_OW 559
// wait ( 1 1$00 ) ;
12750: LD_INT 2100
12752: PPUSH
12753: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12757: LD_STRING displayTroll();
12759: PPUSH
12760: CALL_OW 559
// wait ( 1 1$00 ) ;
12764: LD_INT 2100
12766: PPUSH
12767: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12771: LD_STRING hideTroll();
12773: PPUSH
12774: CALL_OW 559
// end ;
12778: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12779: LD_EXP 15
12783: PUSH
12784: LD_EXP 41
12788: AND
12789: IFFALSE 12852
12791: GO 12793
12793: DISABLE
12794: LD_INT 0
12796: PPUSH
// begin p := 0 ;
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// repeat game_speed := 1 ;
12805: LD_ADDR_OWVAR 65
12809: PUSH
12810: LD_INT 1
12812: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12813: LD_INT 35
12815: PPUSH
12816: CALL_OW 67
// p := p + 1 ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_VAR 0 1
12829: PUSH
12830: LD_INT 1
12832: PLUS
12833: ST_TO_ADDR
// until p >= 60 ;
12834: LD_VAR 0 1
12838: PUSH
12839: LD_INT 60
12841: GREATEREQUAL
12842: IFFALSE 12805
// game_speed := 4 ;
12844: LD_ADDR_OWVAR 65
12848: PUSH
12849: LD_INT 4
12851: ST_TO_ADDR
// end ;
12852: PPOPN 1
12854: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12855: LD_EXP 15
12859: PUSH
12860: LD_EXP 42
12864: AND
12865: IFFALSE 13011
12867: GO 12869
12869: DISABLE
12870: LD_INT 0
12872: PPUSH
12873: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12874: LD_ADDR_VAR 0 1
12878: PUSH
12879: LD_INT 22
12881: PUSH
12882: LD_OWVAR 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 2
12893: PUSH
12894: LD_INT 30
12896: PUSH
12897: LD_INT 0
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 30
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PPUSH
12923: CALL_OW 69
12927: ST_TO_ADDR
// if not depot then
12928: LD_VAR 0 1
12932: NOT
12933: IFFALSE 12937
// exit ;
12935: GO 13011
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_VAR 0 1
12946: PUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_VAR 0 1
12954: PPUSH
12955: CALL_OW 12
12959: ARRAY
12960: PPUSH
12961: CALL_OW 274
12965: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12966: LD_VAR 0 2
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: LD_INT 0
12976: PPUSH
12977: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12981: LD_VAR 0 2
12985: PPUSH
12986: LD_INT 2
12988: PPUSH
12989: LD_INT 0
12991: PPUSH
12992: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12996: LD_VAR 0 2
13000: PPUSH
13001: LD_INT 3
13003: PPUSH
13004: LD_INT 0
13006: PPUSH
13007: CALL_OW 277
// end ;
13011: PPOPN 2
13013: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13014: LD_EXP 15
13018: PUSH
13019: LD_EXP 43
13023: AND
13024: IFFALSE 13121
13026: GO 13028
13028: DISABLE
13029: LD_INT 0
13031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13032: LD_ADDR_VAR 0 1
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_OWVAR 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 21
13051: PUSH
13052: LD_INT 1
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: LD_INT 23
13064: PUSH
13065: LD_INT 0
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: ST_TO_ADDR
// if not tmp then
13086: LD_VAR 0 1
13090: NOT
13091: IFFALSE 13095
// exit ;
13093: GO 13121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13095: LD_VAR 0 1
13099: PUSH
13100: LD_INT 1
13102: PPUSH
13103: LD_VAR 0 1
13107: PPUSH
13108: CALL_OW 12
13112: ARRAY
13113: PPUSH
13114: LD_INT 200
13116: PPUSH
13117: CALL_OW 234
// end ;
13121: PPOPN 1
13123: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13124: LD_EXP 15
13128: PUSH
13129: LD_EXP 44
13133: AND
13134: IFFALSE 13213
13136: GO 13138
13138: DISABLE
13139: LD_INT 0
13141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13142: LD_ADDR_VAR 0 1
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_OWVAR 2
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 21
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// if not tmp then
13178: LD_VAR 0 1
13182: NOT
13183: IFFALSE 13187
// exit ;
13185: GO 13213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13187: LD_VAR 0 1
13191: PUSH
13192: LD_INT 1
13194: PPUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: PPUSH
13206: LD_INT 60
13208: PPUSH
13209: CALL_OW 234
// end ;
13213: PPOPN 1
13215: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13216: LD_EXP 15
13220: PUSH
13221: LD_EXP 45
13225: AND
13226: IFFALSE 13325
13228: GO 13230
13230: DISABLE
13231: LD_INT 0
13233: PPUSH
13234: PPUSH
// begin enable ;
13235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: LD_OWVAR 2
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 61
13255: PUSH
13256: EMPTY
13257: LIST
13258: PUSH
13259: LD_INT 33
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: ST_TO_ADDR
// if not tmp then
13279: LD_VAR 0 1
13283: NOT
13284: IFFALSE 13288
// exit ;
13286: GO 13325
// for i in tmp do
13288: LD_ADDR_VAR 0 2
13292: PUSH
13293: LD_VAR 0 1
13297: PUSH
13298: FOR_IN
13299: IFFALSE 13323
// if IsControledBy ( i ) then
13301: LD_VAR 0 2
13305: PPUSH
13306: CALL_OW 312
13310: IFFALSE 13321
// ComUnlink ( i ) ;
13312: LD_VAR 0 2
13316: PPUSH
13317: CALL_OW 136
13321: GO 13298
13323: POP
13324: POP
// end ;
13325: PPOPN 2
13327: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13328: LD_EXP 15
13332: PUSH
13333: LD_EXP 46
13337: AND
13338: IFFALSE 13478
13340: GO 13342
13342: DISABLE
13343: LD_INT 0
13345: PPUSH
13346: PPUSH
// begin ToLua ( displayPowell(); ) ;
13347: LD_STRING displayPowell();
13349: PPUSH
13350: CALL_OW 559
// uc_side := 0 ;
13354: LD_ADDR_OWVAR 20
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// uc_nation := 2 ;
13362: LD_ADDR_OWVAR 21
13366: PUSH
13367: LD_INT 2
13369: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13370: LD_ADDR_OWVAR 37
13374: PUSH
13375: LD_INT 14
13377: ST_TO_ADDR
// vc_engine := engine_siberite ;
13378: LD_ADDR_OWVAR 39
13382: PUSH
13383: LD_INT 3
13385: ST_TO_ADDR
// vc_control := control_apeman ;
13386: LD_ADDR_OWVAR 38
13390: PUSH
13391: LD_INT 5
13393: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13394: LD_ADDR_OWVAR 40
13398: PUSH
13399: LD_INT 29
13401: ST_TO_ADDR
// un := CreateVehicle ;
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: CALL_OW 45
13411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13412: LD_VAR 0 2
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13424: LD_INT 35
13426: PPUSH
13427: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13431: LD_VAR 0 2
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_OWVAR 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PPUSH
13453: LD_VAR 0 2
13457: PPUSH
13458: CALL_OW 74
13462: PPUSH
13463: CALL_OW 115
// until IsDead ( un ) ;
13467: LD_VAR 0 2
13471: PPUSH
13472: CALL_OW 301
13476: IFFALSE 13424
// end ;
13478: PPOPN 2
13480: END
// every 0 0$1 trigger StreamModeActive and sStu do
13481: LD_EXP 15
13485: PUSH
13486: LD_EXP 54
13490: AND
13491: IFFALSE 13507
13493: GO 13495
13495: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13496: LD_STRING displayStucuk();
13498: PPUSH
13499: CALL_OW 559
// ResetFog ;
13503: CALL_OW 335
// end ;
13507: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13508: LD_EXP 15
13512: PUSH
13513: LD_EXP 47
13517: AND
13518: IFFALSE 13659
13520: GO 13522
13522: DISABLE
13523: LD_INT 0
13525: PPUSH
13526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_OWVAR 2
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 21
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PPUSH
13558: CALL_OW 69
13562: ST_TO_ADDR
// if not tmp then
13563: LD_VAR 0 2
13567: NOT
13568: IFFALSE 13572
// exit ;
13570: GO 13659
// un := tmp [ rand ( 1 , tmp ) ] ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_VAR 0 2
13581: PUSH
13582: LD_INT 1
13584: PPUSH
13585: LD_VAR 0 2
13589: PPUSH
13590: CALL_OW 12
13594: ARRAY
13595: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13596: LD_VAR 0 1
13600: PPUSH
13601: LD_INT 0
13603: PPUSH
13604: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_OWVAR 3
13617: PUSH
13618: LD_VAR 0 1
13622: DIFF
13623: PPUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL_OW 74
13633: PPUSH
13634: CALL_OW 115
// wait ( 0 0$20 ) ;
13638: LD_INT 700
13640: PPUSH
13641: CALL_OW 67
// SetSide ( un , your_side ) ;
13645: LD_VAR 0 1
13649: PPUSH
13650: LD_OWVAR 2
13654: PPUSH
13655: CALL_OW 235
// end ;
13659: PPOPN 2
13661: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13662: LD_EXP 15
13666: PUSH
13667: LD_EXP 48
13671: AND
13672: IFFALSE 13778
13674: GO 13676
13676: DISABLE
13677: LD_INT 0
13679: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13680: LD_ADDR_VAR 0 1
13684: PUSH
13685: LD_INT 22
13687: PUSH
13688: LD_OWVAR 2
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 2
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 0
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PPUSH
13729: CALL_OW 69
13733: ST_TO_ADDR
// if not depot then
13734: LD_VAR 0 1
13738: NOT
13739: IFFALSE 13743
// exit ;
13741: GO 13778
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13743: LD_VAR 0 1
13747: PUSH
13748: LD_INT 1
13750: ARRAY
13751: PPUSH
13752: CALL_OW 250
13756: PPUSH
13757: LD_VAR 0 1
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: CALL_OW 251
13770: PPUSH
13771: LD_INT 70
13773: PPUSH
13774: CALL_OW 495
// end ;
13778: PPOPN 1
13780: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13781: LD_EXP 15
13785: PUSH
13786: LD_EXP 49
13790: AND
13791: IFFALSE 14002
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13803: LD_ADDR_VAR 0 5
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_OWVAR 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: ST_TO_ADDR
// if not tmp then
13839: LD_VAR 0 5
13843: NOT
13844: IFFALSE 13848
// exit ;
13846: GO 14002
// for i in tmp do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_VAR 0 5
13857: PUSH
13858: FOR_IN
13859: IFFALSE 14000
// begin d := rand ( 0 , 5 ) ;
13861: LD_ADDR_VAR 0 4
13865: PUSH
13866: LD_INT 0
13868: PPUSH
13869: LD_INT 5
13871: PPUSH
13872: CALL_OW 12
13876: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13877: LD_ADDR_VAR 0 2
13881: PUSH
13882: LD_VAR 0 1
13886: PPUSH
13887: CALL_OW 250
13891: PPUSH
13892: LD_VAR 0 4
13896: PPUSH
13897: LD_INT 3
13899: PPUSH
13900: LD_INT 12
13902: PPUSH
13903: CALL_OW 12
13907: PPUSH
13908: CALL_OW 272
13912: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13913: LD_ADDR_VAR 0 3
13917: PUSH
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 251
13927: PPUSH
13928: LD_VAR 0 4
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 12
13938: PPUSH
13939: CALL_OW 12
13943: PPUSH
13944: CALL_OW 273
13948: ST_TO_ADDR
// if ValidHex ( x , y ) then
13949: LD_VAR 0 2
13953: PPUSH
13954: LD_VAR 0 3
13958: PPUSH
13959: CALL_OW 488
13963: IFFALSE 13998
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13965: LD_VAR 0 1
13969: PPUSH
13970: LD_VAR 0 2
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 3
13982: PPUSH
13983: LD_INT 6
13985: PPUSH
13986: CALL_OW 12
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 483
// end ;
13998: GO 13858
14000: POP
14001: POP
// end ;
14002: PPOPN 5
14004: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14005: LD_EXP 15
14009: PUSH
14010: LD_EXP 50
14014: AND
14015: IFFALSE 14109
14017: GO 14019
14019: DISABLE
14020: LD_INT 0
14022: PPUSH
14023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14024: LD_ADDR_VAR 0 2
14028: PUSH
14029: LD_INT 22
14031: PUSH
14032: LD_OWVAR 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 32
14043: PUSH
14044: LD_INT 1
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 21
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 69
14070: ST_TO_ADDR
// if not tmp then
14071: LD_VAR 0 2
14075: NOT
14076: IFFALSE 14080
// exit ;
14078: GO 14109
// for i in tmp do
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: LD_VAR 0 2
14089: PUSH
14090: FOR_IN
14091: IFFALSE 14107
// SetFuel ( i , 0 ) ;
14093: LD_VAR 0 1
14097: PPUSH
14098: LD_INT 0
14100: PPUSH
14101: CALL_OW 240
14105: GO 14090
14107: POP
14108: POP
// end ;
14109: PPOPN 2
14111: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14112: LD_EXP 15
14116: PUSH
14117: LD_EXP 51
14121: AND
14122: IFFALSE 14188
14124: GO 14126
14126: DISABLE
14127: LD_INT 0
14129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14130: LD_ADDR_VAR 0 1
14134: PUSH
14135: LD_INT 22
14137: PUSH
14138: LD_OWVAR 2
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 30
14149: PUSH
14150: LD_INT 29
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PPUSH
14161: CALL_OW 69
14165: ST_TO_ADDR
// if not tmp then
14166: LD_VAR 0 1
14170: NOT
14171: IFFALSE 14175
// exit ;
14173: GO 14188
// DestroyUnit ( tmp [ 1 ] ) ;
14175: LD_VAR 0 1
14179: PUSH
14180: LD_INT 1
14182: ARRAY
14183: PPUSH
14184: CALL_OW 65
// end ;
14188: PPOPN 1
14190: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14191: LD_EXP 15
14195: PUSH
14196: LD_EXP 53
14200: AND
14201: IFFALSE 14330
14203: GO 14205
14205: DISABLE
14206: LD_INT 0
14208: PPUSH
// begin uc_side := 0 ;
14209: LD_ADDR_OWVAR 20
14213: PUSH
14214: LD_INT 0
14216: ST_TO_ADDR
// uc_nation := nation_arabian ;
14217: LD_ADDR_OWVAR 21
14221: PUSH
14222: LD_INT 2
14224: ST_TO_ADDR
// hc_gallery :=  ;
14225: LD_ADDR_OWVAR 33
14229: PUSH
14230: LD_STRING 
14232: ST_TO_ADDR
// hc_name :=  ;
14233: LD_ADDR_OWVAR 26
14237: PUSH
14238: LD_STRING 
14240: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14241: LD_INT 1
14243: PPUSH
14244: LD_INT 11
14246: PPUSH
14247: LD_INT 10
14249: PPUSH
14250: CALL_OW 380
// un := CreateHuman ;
14254: LD_ADDR_VAR 0 1
14258: PUSH
14259: CALL_OW 44
14263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14264: LD_VAR 0 1
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14276: LD_INT 35
14278: PPUSH
14279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_INT 22
14290: PUSH
14291: LD_OWVAR 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 69
14304: PPUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 74
14314: PPUSH
14315: CALL_OW 115
// until IsDead ( un ) ;
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 301
14328: IFFALSE 14276
// end ;
14330: PPOPN 1
14332: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14333: LD_EXP 15
14337: PUSH
14338: LD_EXP 55
14342: AND
14343: IFFALSE 14355
14345: GO 14347
14347: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14348: LD_STRING earthquake(getX(game), 0, 32)
14350: PPUSH
14351: CALL_OW 559
14355: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14356: LD_EXP 15
14360: PUSH
14361: LD_EXP 56
14365: AND
14366: IFFALSE 14457
14368: GO 14370
14370: DISABLE
14371: LD_INT 0
14373: PPUSH
// begin enable ;
14374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_OWVAR 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 33
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if not tmp then
14422: LD_VAR 0 1
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14457
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14431: LD_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 12
14448: ARRAY
14449: PPUSH
14450: LD_INT 1
14452: PPUSH
14453: CALL_OW 234
// end ;
14457: PPOPN 1
14459: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14460: LD_EXP 15
14464: PUSH
14465: LD_EXP 57
14469: AND
14470: IFFALSE 14611
14472: GO 14474
14474: DISABLE
14475: LD_INT 0
14477: PPUSH
14478: PPUSH
14479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14480: LD_ADDR_VAR 0 3
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_OWVAR 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 25
14499: PUSH
14500: LD_INT 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: ST_TO_ADDR
// if not tmp then
14516: LD_VAR 0 3
14520: NOT
14521: IFFALSE 14525
// exit ;
14523: GO 14611
// un := tmp [ rand ( 1 , tmp ) ] ;
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: LD_INT 1
14537: PPUSH
14538: LD_VAR 0 3
14542: PPUSH
14543: CALL_OW 12
14547: ARRAY
14548: ST_TO_ADDR
// if Crawls ( un ) then
14549: LD_VAR 0 2
14553: PPUSH
14554: CALL_OW 318
14558: IFFALSE 14569
// ComWalk ( un ) ;
14560: LD_VAR 0 2
14564: PPUSH
14565: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14569: LD_VAR 0 2
14573: PPUSH
14574: LD_INT 9
14576: PPUSH
14577: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14581: LD_INT 28
14583: PPUSH
14584: LD_OWVAR 2
14588: PPUSH
14589: LD_INT 2
14591: PPUSH
14592: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14596: LD_INT 29
14598: PPUSH
14599: LD_OWVAR 2
14603: PPUSH
14604: LD_INT 2
14606: PPUSH
14607: CALL_OW 322
// end ;
14611: PPOPN 3
14613: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14614: LD_EXP 15
14618: PUSH
14619: LD_EXP 58
14623: AND
14624: IFFALSE 14735
14626: GO 14628
14628: DISABLE
14629: LD_INT 0
14631: PPUSH
14632: PPUSH
14633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14634: LD_ADDR_VAR 0 3
14638: PUSH
14639: LD_INT 22
14641: PUSH
14642: LD_OWVAR 2
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 25
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 69
14669: ST_TO_ADDR
// if not tmp then
14670: LD_VAR 0 3
14674: NOT
14675: IFFALSE 14679
// exit ;
14677: GO 14735
// un := tmp [ rand ( 1 , tmp ) ] ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_VAR 0 3
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_VAR 0 3
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: ST_TO_ADDR
// if Crawls ( un ) then
14703: LD_VAR 0 2
14707: PPUSH
14708: CALL_OW 318
14712: IFFALSE 14723
// ComWalk ( un ) ;
14714: LD_VAR 0 2
14718: PPUSH
14719: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14723: LD_VAR 0 2
14727: PPUSH
14728: LD_INT 8
14730: PPUSH
14731: CALL_OW 336
// end ;
14735: PPOPN 3
14737: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14738: LD_EXP 15
14742: PUSH
14743: LD_EXP 59
14747: AND
14748: IFFALSE 14892
14750: GO 14752
14752: DISABLE
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14757: LD_ADDR_VAR 0 2
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_OWVAR 2
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 12
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 34
14799: PUSH
14800: LD_INT 51
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 34
14809: PUSH
14810: LD_INT 32
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: ST_TO_ADDR
// if not tmp then
14833: LD_VAR 0 2
14837: NOT
14838: IFFALSE 14842
// exit ;
14840: GO 14892
// for i in tmp do
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_VAR 0 2
14851: PUSH
14852: FOR_IN
14853: IFFALSE 14890
// if GetCargo ( i , mat_artifact ) = 0 then
14855: LD_VAR 0 1
14859: PPUSH
14860: LD_INT 4
14862: PPUSH
14863: CALL_OW 289
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14888
// SetCargo ( i , mat_siberit , 100 ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_INT 3
14880: PPUSH
14881: LD_INT 100
14883: PPUSH
14884: CALL_OW 290
14888: GO 14852
14890: POP
14891: POP
// end ;
14892: PPOPN 2
14894: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14895: LD_EXP 15
14899: PUSH
14900: LD_EXP 60
14904: AND
14905: IFFALSE 15088
14907: GO 14909
14909: DISABLE
14910: LD_INT 0
14912: PPUSH
14913: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_OWVAR 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: ST_TO_ADDR
// if not tmp then
14936: LD_VAR 0 2
14940: NOT
14941: IFFALSE 14945
// exit ;
14943: GO 15088
// for i := 1 to 2 do
14945: LD_ADDR_VAR 0 1
14949: PUSH
14950: DOUBLE
14951: LD_INT 1
14953: DEC
14954: ST_TO_ADDR
14955: LD_INT 2
14957: PUSH
14958: FOR_TO
14959: IFFALSE 15086
// begin uc_side := your_side ;
14961: LD_ADDR_OWVAR 20
14965: PUSH
14966: LD_OWVAR 2
14970: ST_TO_ADDR
// uc_nation := nation_american ;
14971: LD_ADDR_OWVAR 21
14975: PUSH
14976: LD_INT 1
14978: ST_TO_ADDR
// vc_chassis := us_morphling ;
14979: LD_ADDR_OWVAR 37
14983: PUSH
14984: LD_INT 5
14986: ST_TO_ADDR
// vc_engine := engine_siberite ;
14987: LD_ADDR_OWVAR 39
14991: PUSH
14992: LD_INT 3
14994: ST_TO_ADDR
// vc_control := control_computer ;
14995: LD_ADDR_OWVAR 38
14999: PUSH
15000: LD_INT 3
15002: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15003: LD_ADDR_OWVAR 40
15007: PUSH
15008: LD_INT 10
15010: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15011: LD_VAR 0 2
15015: PUSH
15016: LD_INT 1
15018: ARRAY
15019: PPUSH
15020: CALL_OW 310
15024: NOT
15025: IFFALSE 15072
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15027: CALL_OW 45
15031: PPUSH
15032: LD_VAR 0 2
15036: PUSH
15037: LD_INT 1
15039: ARRAY
15040: PPUSH
15041: CALL_OW 250
15045: PPUSH
15046: LD_VAR 0 2
15050: PUSH
15051: LD_INT 1
15053: ARRAY
15054: PPUSH
15055: CALL_OW 251
15059: PPUSH
15060: LD_INT 12
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 50
15070: GO 15084
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15072: CALL_OW 45
15076: PPUSH
15077: LD_INT 1
15079: PPUSH
15080: CALL_OW 51
// end ;
15084: GO 14958
15086: POP
15087: POP
// end ;
15088: PPOPN 2
15090: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15091: LD_EXP 15
15095: PUSH
15096: LD_EXP 61
15100: AND
15101: IFFALSE 15323
15103: GO 15105
15105: DISABLE
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15114: LD_ADDR_VAR 0 6
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 21
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: LD_INT 23
15146: PUSH
15147: LD_INT 0
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: PPUSH
15163: CALL_OW 69
15167: ST_TO_ADDR
// if not tmp then
15168: LD_VAR 0 6
15172: NOT
15173: IFFALSE 15177
// exit ;
15175: GO 15323
// s1 := rand ( 1 , 4 ) ;
15177: LD_ADDR_VAR 0 2
15181: PUSH
15182: LD_INT 1
15184: PPUSH
15185: LD_INT 4
15187: PPUSH
15188: CALL_OW 12
15192: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15193: LD_ADDR_VAR 0 4
15197: PUSH
15198: LD_VAR 0 6
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 2
15211: PPUSH
15212: CALL_OW 259
15216: ST_TO_ADDR
// if s1 = 1 then
15217: LD_VAR 0 2
15221: PUSH
15222: LD_INT 1
15224: EQUAL
15225: IFFALSE 15245
// s2 := rand ( 2 , 4 ) else
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: LD_INT 2
15234: PPUSH
15235: LD_INT 4
15237: PPUSH
15238: CALL_OW 12
15242: ST_TO_ADDR
15243: GO 15253
// s2 := 1 ;
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15253: LD_ADDR_VAR 0 5
15257: PUSH
15258: LD_VAR 0 6
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: CALL_OW 259
15276: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15277: LD_VAR 0 6
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: PPUSH
15286: LD_VAR 0 2
15290: PPUSH
15291: LD_VAR 0 5
15295: PPUSH
15296: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15300: LD_VAR 0 6
15304: PUSH
15305: LD_INT 1
15307: ARRAY
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: LD_VAR 0 4
15318: PPUSH
15319: CALL_OW 237
// end ;
15323: PPOPN 6
15325: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15326: LD_EXP 15
15330: PUSH
15331: LD_EXP 62
15335: AND
15336: IFFALSE 15415
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15344: LD_ADDR_VAR 0 1
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 30
15363: PUSH
15364: LD_INT 3
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PPUSH
15375: CALL_OW 69
15379: ST_TO_ADDR
// if not tmp then
15380: LD_VAR 0 1
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15389: LD_VAR 0 1
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 12
15406: ARRAY
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 234
// end ;
15415: PPOPN 1
15417: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15418: LD_EXP 15
15422: PUSH
15423: LD_EXP 63
15427: AND
15428: IFFALSE 15540
15430: GO 15432
15432: DISABLE
15433: LD_INT 0
15435: PPUSH
15436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 22
15444: PUSH
15445: LD_OWVAR 2
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 27
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 26
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 28
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: ST_TO_ADDR
// if not tmp then
15502: LD_VAR 0 2
15506: NOT
15507: IFFALSE 15511
// exit ;
15509: GO 15540
// for i in tmp do
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: LD_VAR 0 2
15520: PUSH
15521: FOR_IN
15522: IFFALSE 15538
// SetLives ( i , 1 ) ;
15524: LD_VAR 0 1
15528: PPUSH
15529: LD_INT 1
15531: PPUSH
15532: CALL_OW 234
15536: GO 15521
15538: POP
15539: POP
// end ;
15540: PPOPN 2
15542: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15543: LD_EXP 15
15547: PUSH
15548: LD_EXP 64
15552: AND
15553: IFFALSE 15840
15555: GO 15557
15557: DISABLE
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
15562: PPUSH
// begin i := rand ( 1 , 7 ) ;
15563: LD_ADDR_VAR 0 1
15567: PUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 7
15573: PPUSH
15574: CALL_OW 12
15578: ST_TO_ADDR
// case i of 1 :
15579: LD_VAR 0 1
15583: PUSH
15584: LD_INT 1
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15592
15590: GO 15602
15592: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15593: LD_STRING earthquake(getX(game), 0, 32)
15595: PPUSH
15596: CALL_OW 559
15600: GO 15840
15602: LD_INT 2
15604: DOUBLE
15605: EQUAL
15606: IFTRUE 15610
15608: GO 15624
15610: POP
// begin ToLua ( displayStucuk(); ) ;
15611: LD_STRING displayStucuk();
15613: PPUSH
15614: CALL_OW 559
// ResetFog ;
15618: CALL_OW 335
// end ; 3 :
15622: GO 15840
15624: LD_INT 3
15626: DOUBLE
15627: EQUAL
15628: IFTRUE 15632
15630: GO 15736
15632: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15633: LD_ADDR_VAR 0 2
15637: PUSH
15638: LD_INT 22
15640: PUSH
15641: LD_OWVAR 2
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 25
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PPUSH
15664: CALL_OW 69
15668: ST_TO_ADDR
// if not tmp then
15669: LD_VAR 0 2
15673: NOT
15674: IFFALSE 15678
// exit ;
15676: GO 15840
// un := tmp [ rand ( 1 , tmp ) ] ;
15678: LD_ADDR_VAR 0 3
15682: PUSH
15683: LD_VAR 0 2
15687: PUSH
15688: LD_INT 1
15690: PPUSH
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 12
15700: ARRAY
15701: ST_TO_ADDR
// if Crawls ( un ) then
15702: LD_VAR 0 3
15706: PPUSH
15707: CALL_OW 318
15711: IFFALSE 15722
// ComWalk ( un ) ;
15713: LD_VAR 0 3
15717: PPUSH
15718: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 8
15729: PPUSH
15730: CALL_OW 336
// end ; 4 :
15734: GO 15840
15736: LD_INT 4
15738: DOUBLE
15739: EQUAL
15740: IFTRUE 15744
15742: GO 15818
15744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_INT 22
15752: PUSH
15753: LD_OWVAR 2
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 30
15764: PUSH
15765: LD_INT 29
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PPUSH
15776: CALL_OW 69
15780: ST_TO_ADDR
// if not tmp then
15781: LD_VAR 0 2
15785: NOT
15786: IFFALSE 15790
// exit ;
15788: GO 15840
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15790: LD_VAR 0 2
15794: PUSH
15795: LD_INT 1
15797: ARRAY
15798: PPUSH
15799: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15803: LD_VAR 0 2
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: CALL_OW 65
// end ; 5 .. 7 :
15816: GO 15840
15818: LD_INT 5
15820: DOUBLE
15821: GREATEREQUAL
15822: IFFALSE 15830
15824: LD_INT 7
15826: DOUBLE
15827: LESSEQUAL
15828: IFTRUE 15832
15830: GO 15839
15832: POP
// StreamSibBomb ; end ;
15833: CALL 12077 0 0
15837: GO 15840
15839: POP
// end ;
15840: PPOPN 3
15842: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15843: LD_EXP 15
15847: PUSH
15848: LD_EXP 65
15852: AND
15853: IFFALSE 16009
15855: GO 15857
15857: DISABLE
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
15862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15863: LD_ADDR_VAR 0 2
15867: PUSH
15868: LD_INT 81
15870: PUSH
15871: LD_OWVAR 2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 21
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 2
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 69
15916: ST_TO_ADDR
// if not tmp then
15917: LD_VAR 0 2
15921: NOT
15922: IFFALSE 15926
// exit ;
15924: GO 16009
// p := 0 ;
15926: LD_ADDR_VAR 0 3
15930: PUSH
15931: LD_INT 0
15933: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15934: LD_INT 35
15936: PPUSH
15937: CALL_OW 67
// p := p + 1 ;
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_VAR 0 3
15950: PUSH
15951: LD_INT 1
15953: PLUS
15954: ST_TO_ADDR
// for i in tmp do
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_VAR 0 2
15964: PUSH
15965: FOR_IN
15966: IFFALSE 15997
// if GetLives ( i ) < 1000 then
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 256
15977: PUSH
15978: LD_INT 1000
15980: LESS
15981: IFFALSE 15995
// SetLives ( i , 1000 ) ;
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_INT 1000
15990: PPUSH
15991: CALL_OW 234
15995: GO 15965
15997: POP
15998: POP
// until p > 20 ;
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 20
16006: GREATER
16007: IFFALSE 15934
// end ;
16009: PPOPN 3
16011: END
// every 0 0$1 trigger StreamModeActive and sTime do
16012: LD_EXP 15
16016: PUSH
16017: LD_EXP 66
16021: AND
16022: IFFALSE 16057
16024: GO 16026
16026: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16027: LD_INT 28
16029: PPUSH
16030: LD_OWVAR 2
16034: PPUSH
16035: LD_INT 2
16037: PPUSH
16038: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16042: LD_INT 30
16044: PPUSH
16045: LD_OWVAR 2
16049: PPUSH
16050: LD_INT 2
16052: PPUSH
16053: CALL_OW 322
// end ;
16057: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16058: LD_EXP 15
16062: PUSH
16063: LD_EXP 67
16067: AND
16068: IFFALSE 16189
16070: GO 16072
16072: DISABLE
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_OWVAR 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 3
16106: PUSH
16107: LD_INT 23
16109: PUSH
16110: LD_INT 0
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 69
16130: ST_TO_ADDR
// if not tmp then
16131: LD_VAR 0 2
16135: NOT
16136: IFFALSE 16140
// exit ;
16138: GO 16189
// for i in tmp do
16140: LD_ADDR_VAR 0 1
16144: PUSH
16145: LD_VAR 0 2
16149: PUSH
16150: FOR_IN
16151: IFFALSE 16187
// begin if Crawls ( i ) then
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 318
16162: IFFALSE 16173
// ComWalk ( i ) ;
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 138
// SetClass ( i , 2 ) ;
16173: LD_VAR 0 1
16177: PPUSH
16178: LD_INT 2
16180: PPUSH
16181: CALL_OW 336
// end ;
16185: GO 16150
16187: POP
16188: POP
// end ;
16189: PPOPN 2
16191: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16192: LD_EXP 15
16196: PUSH
16197: LD_EXP 68
16201: AND
16202: IFFALSE 16490
16204: GO 16206
16206: DISABLE
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16212: LD_OWVAR 2
16216: PPUSH
16217: LD_INT 9
16219: PPUSH
16220: LD_INT 1
16222: PPUSH
16223: LD_INT 1
16225: PPUSH
16226: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16230: LD_INT 9
16232: PPUSH
16233: LD_OWVAR 2
16237: PPUSH
16238: CALL_OW 343
// uc_side := 9 ;
16242: LD_ADDR_OWVAR 20
16246: PUSH
16247: LD_INT 9
16249: ST_TO_ADDR
// uc_nation := 2 ;
16250: LD_ADDR_OWVAR 21
16254: PUSH
16255: LD_INT 2
16257: ST_TO_ADDR
// hc_name := Dark Warrior ;
16258: LD_ADDR_OWVAR 26
16262: PUSH
16263: LD_STRING Dark Warrior
16265: ST_TO_ADDR
// hc_gallery :=  ;
16266: LD_ADDR_OWVAR 33
16270: PUSH
16271: LD_STRING 
16273: ST_TO_ADDR
// hc_noskilllimit := true ;
16274: LD_ADDR_OWVAR 76
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16282: LD_ADDR_OWVAR 31
16286: PUSH
16287: LD_INT 30
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 30
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: ST_TO_ADDR
// un := CreateHuman ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: CALL_OW 44
16314: ST_TO_ADDR
// hc_noskilllimit := false ;
16315: LD_ADDR_OWVAR 76
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: CALL_OW 51
// ToLua ( playRanger() ) ;
16335: LD_STRING playRanger()
16337: PPUSH
16338: CALL_OW 559
// p := 0 ;
16342: LD_ADDR_VAR 0 2
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16350: LD_INT 35
16352: PPUSH
16353: CALL_OW 67
// p := p + 1 ;
16357: LD_ADDR_VAR 0 2
16361: PUSH
16362: LD_VAR 0 2
16366: PUSH
16367: LD_INT 1
16369: PLUS
16370: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16371: LD_VAR 0 3
16375: PPUSH
16376: CALL_OW 256
16380: PUSH
16381: LD_INT 1000
16383: LESS
16384: IFFALSE 16398
// SetLives ( un , 1000 ) ;
16386: LD_VAR 0 3
16390: PPUSH
16391: LD_INT 1000
16393: PPUSH
16394: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 81
16405: PUSH
16406: LD_OWVAR 2
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 91
16417: PUSH
16418: LD_VAR 0 3
16422: PUSH
16423: LD_INT 30
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PPUSH
16435: CALL_OW 69
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 74
16449: PPUSH
16450: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 80
16461: GREATER
16462: PUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: CALL_OW 301
16472: OR
16473: IFFALSE 16350
// if un then
16475: LD_VAR 0 3
16479: IFFALSE 16490
// RemoveUnit ( un ) ;
16481: LD_VAR 0 3
16485: PPUSH
16486: CALL_OW 64
// end ;
16490: PPOPN 3
16492: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16493: LD_EXP 69
16497: IFFALSE 16613
16499: GO 16501
16501: DISABLE
16502: LD_INT 0
16504: PPUSH
16505: PPUSH
16506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16507: LD_ADDR_VAR 0 2
16511: PUSH
16512: LD_INT 81
16514: PUSH
16515: LD_OWVAR 2
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16543: LD_STRING playComputer()
16545: PPUSH
16546: CALL_OW 559
// if not tmp then
16550: LD_VAR 0 2
16554: NOT
16555: IFFALSE 16559
// exit ;
16557: GO 16613
// for i in tmp do
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: LD_VAR 0 2
16568: PUSH
16569: FOR_IN
16570: IFFALSE 16611
// for j := 1 to 4 do
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: DOUBLE
16578: LD_INT 1
16580: DEC
16581: ST_TO_ADDR
16582: LD_INT 4
16584: PUSH
16585: FOR_TO
16586: IFFALSE 16607
// SetSkill ( i , j , 10 ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: LD_INT 10
16600: PPUSH
16601: CALL_OW 237
16605: GO 16585
16607: POP
16608: POP
16609: GO 16569
16611: POP
16612: POP
// end ;
16613: PPOPN 3
16615: END
// every 0 0$1 trigger s30 do var i , tmp ;
16616: LD_EXP 70
16620: IFFALSE 16689
16622: GO 16624
16624: DISABLE
16625: LD_INT 0
16627: PPUSH
16628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_INT 22
16636: PUSH
16637: LD_OWVAR 2
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: ST_TO_ADDR
// if not tmp then
16651: LD_VAR 0 2
16655: NOT
16656: IFFALSE 16660
// exit ;
16658: GO 16689
// for i in tmp do
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_VAR 0 2
16669: PUSH
16670: FOR_IN
16671: IFFALSE 16687
// SetLives ( i , 300 ) ;
16673: LD_VAR 0 1
16677: PPUSH
16678: LD_INT 300
16680: PPUSH
16681: CALL_OW 234
16685: GO 16670
16687: POP
16688: POP
// end ;
16689: PPOPN 2
16691: END
// every 0 0$1 trigger s60 do var i , tmp ;
16692: LD_EXP 71
16696: IFFALSE 16765
16698: GO 16700
16700: DISABLE
16701: LD_INT 0
16703: PPUSH
16704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16705: LD_ADDR_VAR 0 2
16709: PUSH
16710: LD_INT 22
16712: PUSH
16713: LD_OWVAR 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 69
16726: ST_TO_ADDR
// if not tmp then
16727: LD_VAR 0 2
16731: NOT
16732: IFFALSE 16736
// exit ;
16734: GO 16765
// for i in tmp do
16736: LD_ADDR_VAR 0 1
16740: PUSH
16741: LD_VAR 0 2
16745: PUSH
16746: FOR_IN
16747: IFFALSE 16763
// SetLives ( i , 600 ) ;
16749: LD_VAR 0 1
16753: PPUSH
16754: LD_INT 600
16756: PPUSH
16757: CALL_OW 234
16761: GO 16746
16763: POP
16764: POP
// end ;
16765: PPOPN 2
16767: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16768: LD_INT 0
16770: PPUSH
// case cmd of 301 :
16771: LD_VAR 0 1
16775: PUSH
16776: LD_INT 301
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16816
16784: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16785: LD_VAR 0 6
16789: PPUSH
16790: LD_VAR 0 7
16794: PPUSH
16795: LD_VAR 0 8
16799: PPUSH
16800: LD_VAR 0 4
16804: PPUSH
16805: LD_VAR 0 5
16809: PPUSH
16810: CALL 18017 0 5
16814: GO 16937
16816: LD_INT 302
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16861
16824: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16825: LD_VAR 0 6
16829: PPUSH
16830: LD_VAR 0 7
16834: PPUSH
16835: LD_VAR 0 8
16839: PPUSH
16840: LD_VAR 0 9
16844: PPUSH
16845: LD_VAR 0 4
16849: PPUSH
16850: LD_VAR 0 5
16854: PPUSH
16855: CALL 18108 0 6
16859: GO 16937
16861: LD_INT 303
16863: DOUBLE
16864: EQUAL
16865: IFTRUE 16869
16867: GO 16906
16869: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16870: LD_VAR 0 6
16874: PPUSH
16875: LD_VAR 0 7
16879: PPUSH
16880: LD_VAR 0 8
16884: PPUSH
16885: LD_VAR 0 9
16889: PPUSH
16890: LD_VAR 0 4
16894: PPUSH
16895: LD_VAR 0 5
16899: PPUSH
16900: CALL 16942 0 6
16904: GO 16937
16906: LD_INT 304
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16936
16914: POP
// hHackTeleport ( unit , x , y ) ; end ;
16915: LD_VAR 0 2
16919: PPUSH
16920: LD_VAR 0 4
16924: PPUSH
16925: LD_VAR 0 5
16929: PPUSH
16930: CALL 18701 0 3
16934: GO 16937
16936: POP
// end ;
16937: LD_VAR 0 12
16941: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16942: LD_INT 0
16944: PPUSH
16945: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16946: LD_VAR 0 1
16950: PUSH
16951: LD_INT 1
16953: LESS
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: LD_INT 3
16962: GREATER
16963: OR
16964: PUSH
16965: LD_VAR 0 5
16969: PPUSH
16970: LD_VAR 0 6
16974: PPUSH
16975: CALL_OW 428
16979: OR
16980: IFFALSE 16984
// exit ;
16982: GO 17704
// uc_side := your_side ;
16984: LD_ADDR_OWVAR 20
16988: PUSH
16989: LD_OWVAR 2
16993: ST_TO_ADDR
// uc_nation := nation ;
16994: LD_ADDR_OWVAR 21
16998: PUSH
16999: LD_VAR 0 1
17003: ST_TO_ADDR
// bc_level = 1 ;
17004: LD_ADDR_OWVAR 43
17008: PUSH
17009: LD_INT 1
17011: ST_TO_ADDR
// case btype of 1 :
17012: LD_VAR 0 2
17016: PUSH
17017: LD_INT 1
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17036
17025: POP
// bc_type := b_depot ; 2 :
17026: LD_ADDR_OWVAR 42
17030: PUSH
17031: LD_INT 0
17033: ST_TO_ADDR
17034: GO 17648
17036: LD_INT 2
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17055
17044: POP
// bc_type := b_warehouse ; 3 :
17045: LD_ADDR_OWVAR 42
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
17053: GO 17648
17055: LD_INT 3
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17074
17063: POP
// bc_type := b_lab ; 4 .. 9 :
17064: LD_ADDR_OWVAR 42
17068: PUSH
17069: LD_INT 6
17071: ST_TO_ADDR
17072: GO 17648
17074: LD_INT 4
17076: DOUBLE
17077: GREATEREQUAL
17078: IFFALSE 17086
17080: LD_INT 9
17082: DOUBLE
17083: LESSEQUAL
17084: IFTRUE 17088
17086: GO 17140
17088: POP
// begin bc_type := b_lab_half ;
17089: LD_ADDR_OWVAR 42
17093: PUSH
17094: LD_INT 7
17096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17097: LD_ADDR_OWVAR 44
17101: PUSH
17102: LD_INT 10
17104: PUSH
17105: LD_INT 11
17107: PUSH
17108: LD_INT 12
17110: PUSH
17111: LD_INT 15
17113: PUSH
17114: LD_INT 14
17116: PUSH
17117: LD_INT 13
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: LD_VAR 0 2
17132: PUSH
17133: LD_INT 3
17135: MINUS
17136: ARRAY
17137: ST_TO_ADDR
// end ; 10 .. 13 :
17138: GO 17648
17140: LD_INT 10
17142: DOUBLE
17143: GREATEREQUAL
17144: IFFALSE 17152
17146: LD_INT 13
17148: DOUBLE
17149: LESSEQUAL
17150: IFTRUE 17154
17152: GO 17231
17154: POP
// begin bc_type := b_lab_full ;
17155: LD_ADDR_OWVAR 42
17159: PUSH
17160: LD_INT 8
17162: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17163: LD_ADDR_OWVAR 44
17167: PUSH
17168: LD_INT 10
17170: PUSH
17171: LD_INT 12
17173: PUSH
17174: LD_INT 14
17176: PUSH
17177: LD_INT 13
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_VAR 0 2
17190: PUSH
17191: LD_INT 9
17193: MINUS
17194: ARRAY
17195: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17196: LD_ADDR_OWVAR 45
17200: PUSH
17201: LD_INT 11
17203: PUSH
17204: LD_INT 15
17206: PUSH
17207: LD_INT 12
17209: PUSH
17210: LD_INT 15
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: PUSH
17219: LD_VAR 0 2
17223: PUSH
17224: LD_INT 9
17226: MINUS
17227: ARRAY
17228: ST_TO_ADDR
// end ; 14 :
17229: GO 17648
17231: LD_INT 14
17233: DOUBLE
17234: EQUAL
17235: IFTRUE 17239
17237: GO 17250
17239: POP
// bc_type := b_workshop ; 15 :
17240: LD_ADDR_OWVAR 42
17244: PUSH
17245: LD_INT 2
17247: ST_TO_ADDR
17248: GO 17648
17250: LD_INT 15
17252: DOUBLE
17253: EQUAL
17254: IFTRUE 17258
17256: GO 17269
17258: POP
// bc_type := b_factory ; 16 :
17259: LD_ADDR_OWVAR 42
17263: PUSH
17264: LD_INT 3
17266: ST_TO_ADDR
17267: GO 17648
17269: LD_INT 16
17271: DOUBLE
17272: EQUAL
17273: IFTRUE 17277
17275: GO 17288
17277: POP
// bc_type := b_ext_gun ; 17 :
17278: LD_ADDR_OWVAR 42
17282: PUSH
17283: LD_INT 17
17285: ST_TO_ADDR
17286: GO 17648
17288: LD_INT 17
17290: DOUBLE
17291: EQUAL
17292: IFTRUE 17296
17294: GO 17324
17296: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17297: LD_ADDR_OWVAR 42
17301: PUSH
17302: LD_INT 19
17304: PUSH
17305: LD_INT 23
17307: PUSH
17308: LD_INT 19
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_VAR 0 1
17320: ARRAY
17321: ST_TO_ADDR
17322: GO 17648
17324: LD_INT 18
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17343
17332: POP
// bc_type := b_ext_radar ; 19 :
17333: LD_ADDR_OWVAR 42
17337: PUSH
17338: LD_INT 20
17340: ST_TO_ADDR
17341: GO 17648
17343: LD_INT 19
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17362
17351: POP
// bc_type := b_ext_radio ; 20 :
17352: LD_ADDR_OWVAR 42
17356: PUSH
17357: LD_INT 22
17359: ST_TO_ADDR
17360: GO 17648
17362: LD_INT 20
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17381
17370: POP
// bc_type := b_ext_siberium ; 21 :
17371: LD_ADDR_OWVAR 42
17375: PUSH
17376: LD_INT 21
17378: ST_TO_ADDR
17379: GO 17648
17381: LD_INT 21
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17400
17389: POP
// bc_type := b_ext_computer ; 22 :
17390: LD_ADDR_OWVAR 42
17394: PUSH
17395: LD_INT 24
17397: ST_TO_ADDR
17398: GO 17648
17400: LD_INT 22
17402: DOUBLE
17403: EQUAL
17404: IFTRUE 17408
17406: GO 17419
17408: POP
// bc_type := b_ext_track ; 23 :
17409: LD_ADDR_OWVAR 42
17413: PUSH
17414: LD_INT 16
17416: ST_TO_ADDR
17417: GO 17648
17419: LD_INT 23
17421: DOUBLE
17422: EQUAL
17423: IFTRUE 17427
17425: GO 17438
17427: POP
// bc_type := b_ext_laser ; 24 :
17428: LD_ADDR_OWVAR 42
17432: PUSH
17433: LD_INT 25
17435: ST_TO_ADDR
17436: GO 17648
17438: LD_INT 24
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17446
17444: GO 17457
17446: POP
// bc_type := b_control_tower ; 25 :
17447: LD_ADDR_OWVAR 42
17451: PUSH
17452: LD_INT 36
17454: ST_TO_ADDR
17455: GO 17648
17457: LD_INT 25
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17476
17465: POP
// bc_type := b_breastwork ; 26 :
17466: LD_ADDR_OWVAR 42
17470: PUSH
17471: LD_INT 31
17473: ST_TO_ADDR
17474: GO 17648
17476: LD_INT 26
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17495
17484: POP
// bc_type := b_bunker ; 27 :
17485: LD_ADDR_OWVAR 42
17489: PUSH
17490: LD_INT 32
17492: ST_TO_ADDR
17493: GO 17648
17495: LD_INT 27
17497: DOUBLE
17498: EQUAL
17499: IFTRUE 17503
17501: GO 17514
17503: POP
// bc_type := b_turret ; 28 :
17504: LD_ADDR_OWVAR 42
17508: PUSH
17509: LD_INT 33
17511: ST_TO_ADDR
17512: GO 17648
17514: LD_INT 28
17516: DOUBLE
17517: EQUAL
17518: IFTRUE 17522
17520: GO 17533
17522: POP
// bc_type := b_armoury ; 29 :
17523: LD_ADDR_OWVAR 42
17527: PUSH
17528: LD_INT 4
17530: ST_TO_ADDR
17531: GO 17648
17533: LD_INT 29
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17552
17541: POP
// bc_type := b_barracks ; 30 :
17542: LD_ADDR_OWVAR 42
17546: PUSH
17547: LD_INT 5
17549: ST_TO_ADDR
17550: GO 17648
17552: LD_INT 30
17554: DOUBLE
17555: EQUAL
17556: IFTRUE 17560
17558: GO 17571
17560: POP
// bc_type := b_solar_power ; 31 :
17561: LD_ADDR_OWVAR 42
17565: PUSH
17566: LD_INT 27
17568: ST_TO_ADDR
17569: GO 17648
17571: LD_INT 31
17573: DOUBLE
17574: EQUAL
17575: IFTRUE 17579
17577: GO 17590
17579: POP
// bc_type := b_oil_power ; 32 :
17580: LD_ADDR_OWVAR 42
17584: PUSH
17585: LD_INT 26
17587: ST_TO_ADDR
17588: GO 17648
17590: LD_INT 32
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17609
17598: POP
// bc_type := b_siberite_power ; 33 :
17599: LD_ADDR_OWVAR 42
17603: PUSH
17604: LD_INT 28
17606: ST_TO_ADDR
17607: GO 17648
17609: LD_INT 33
17611: DOUBLE
17612: EQUAL
17613: IFTRUE 17617
17615: GO 17628
17617: POP
// bc_type := b_oil_mine ; 34 :
17618: LD_ADDR_OWVAR 42
17622: PUSH
17623: LD_INT 29
17625: ST_TO_ADDR
17626: GO 17648
17628: LD_INT 34
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17647
17636: POP
// bc_type := b_siberite_mine ; end ;
17637: LD_ADDR_OWVAR 42
17641: PUSH
17642: LD_INT 30
17644: ST_TO_ADDR
17645: GO 17648
17647: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17648: LD_ADDR_VAR 0 8
17652: PUSH
17653: LD_VAR 0 5
17657: PPUSH
17658: LD_VAR 0 6
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: CALL_OW 47
17672: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17673: LD_OWVAR 42
17677: PUSH
17678: LD_INT 32
17680: PUSH
17681: LD_INT 33
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: IN
17688: IFFALSE 17704
// PlaceWeaponTurret ( b , weapon ) ;
17690: LD_VAR 0 8
17694: PPUSH
17695: LD_VAR 0 4
17699: PPUSH
17700: CALL_OW 431
// end ;
17704: LD_VAR 0 7
17708: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17709: LD_INT 0
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17715: LD_ADDR_VAR 0 4
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_OWVAR 2
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 30
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 30
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: ST_TO_ADDR
// if not tmp then
17769: LD_VAR 0 4
17773: NOT
17774: IFFALSE 17778
// exit ;
17776: GO 17837
// for i in tmp do
17778: LD_ADDR_VAR 0 2
17782: PUSH
17783: LD_VAR 0 4
17787: PUSH
17788: FOR_IN
17789: IFFALSE 17835
// for j = 1 to 3 do
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: DOUBLE
17797: LD_INT 1
17799: DEC
17800: ST_TO_ADDR
17801: LD_INT 3
17803: PUSH
17804: FOR_TO
17805: IFFALSE 17831
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17807: LD_VAR 0 2
17811: PPUSH
17812: CALL_OW 274
17816: PPUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 99999
17824: PPUSH
17825: CALL_OW 277
17829: GO 17804
17831: POP
17832: POP
17833: GO 17788
17835: POP
17836: POP
// end ;
17837: LD_VAR 0 1
17841: RET
// export function hHackSetLevel10 ; var i , j ; begin
17842: LD_INT 0
17844: PPUSH
17845: PPUSH
17846: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17847: LD_ADDR_VAR 0 2
17851: PUSH
17852: LD_INT 21
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PPUSH
17862: CALL_OW 69
17866: PUSH
17867: FOR_IN
17868: IFFALSE 17920
// if IsSelected ( i ) then
17870: LD_VAR 0 2
17874: PPUSH
17875: CALL_OW 306
17879: IFFALSE 17918
// begin for j := 1 to 4 do
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: DOUBLE
17887: LD_INT 1
17889: DEC
17890: ST_TO_ADDR
17891: LD_INT 4
17893: PUSH
17894: FOR_TO
17895: IFFALSE 17916
// SetSkill ( i , j , 10 ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_VAR 0 3
17906: PPUSH
17907: LD_INT 10
17909: PPUSH
17910: CALL_OW 237
17914: GO 17894
17916: POP
17917: POP
// end ;
17918: GO 17867
17920: POP
17921: POP
// end ;
17922: LD_VAR 0 1
17926: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_OWVAR 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: PUSH
17968: FOR_IN
17969: IFFALSE 18010
// begin for j := 1 to 4 do
17971: LD_ADDR_VAR 0 3
17975: PUSH
17976: DOUBLE
17977: LD_INT 1
17979: DEC
17980: ST_TO_ADDR
17981: LD_INT 4
17983: PUSH
17984: FOR_TO
17985: IFFALSE 18006
// SetSkill ( i , j , 10 ) ;
17987: LD_VAR 0 2
17991: PPUSH
17992: LD_VAR 0 3
17996: PPUSH
17997: LD_INT 10
17999: PPUSH
18000: CALL_OW 237
18004: GO 17984
18006: POP
18007: POP
// end ;
18008: GO 17968
18010: POP
18011: POP
// end ;
18012: LD_VAR 0 1
18016: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18017: LD_INT 0
18019: PPUSH
// uc_side := your_side ;
18020: LD_ADDR_OWVAR 20
18024: PUSH
18025: LD_OWVAR 2
18029: ST_TO_ADDR
// uc_nation := nation ;
18030: LD_ADDR_OWVAR 21
18034: PUSH
18035: LD_VAR 0 1
18039: ST_TO_ADDR
// InitHc ;
18040: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18044: LD_INT 0
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18061: LD_VAR 0 4
18065: PPUSH
18066: LD_VAR 0 5
18070: PPUSH
18071: CALL_OW 428
18075: PUSH
18076: LD_INT 0
18078: EQUAL
18079: IFFALSE 18103
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18081: CALL_OW 44
18085: PPUSH
18086: LD_VAR 0 4
18090: PPUSH
18091: LD_VAR 0 5
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 48
// end ;
18103: LD_VAR 0 6
18107: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
// uc_side := your_side ;
18112: LD_ADDR_OWVAR 20
18116: PUSH
18117: LD_OWVAR 2
18121: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18122: LD_VAR 0 1
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: LD_INT 4
18138: PUSH
18139: LD_INT 5
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: IN
18149: IFFALSE 18161
// uc_nation := nation_american else
18151: LD_ADDR_OWVAR 21
18155: PUSH
18156: LD_INT 1
18158: ST_TO_ADDR
18159: GO 18204
// if chassis in [ 11 , 12 , 13 , 14 ] then
18161: LD_VAR 0 1
18165: PUSH
18166: LD_INT 11
18168: PUSH
18169: LD_INT 12
18171: PUSH
18172: LD_INT 13
18174: PUSH
18175: LD_INT 14
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: IN
18184: IFFALSE 18196
// uc_nation := nation_arabian else
18186: LD_ADDR_OWVAR 21
18190: PUSH
18191: LD_INT 2
18193: ST_TO_ADDR
18194: GO 18204
// uc_nation := nation_russian ;
18196: LD_ADDR_OWVAR 21
18200: PUSH
18201: LD_INT 3
18203: ST_TO_ADDR
// vc_chassis := chassis ;
18204: LD_ADDR_OWVAR 37
18208: PUSH
18209: LD_VAR 0 1
18213: ST_TO_ADDR
// vc_engine := engine ;
18214: LD_ADDR_OWVAR 39
18218: PUSH
18219: LD_VAR 0 2
18223: ST_TO_ADDR
// vc_control := control ;
18224: LD_ADDR_OWVAR 38
18228: PUSH
18229: LD_VAR 0 3
18233: ST_TO_ADDR
// vc_weapon := weapon ;
18234: LD_ADDR_OWVAR 40
18238: PUSH
18239: LD_VAR 0 4
18243: ST_TO_ADDR
// un := CreateVehicle ;
18244: LD_ADDR_VAR 0 8
18248: PUSH
18249: CALL_OW 45
18253: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18254: LD_VAR 0 8
18258: PPUSH
18259: LD_INT 0
18261: PPUSH
18262: LD_INT 5
18264: PPUSH
18265: CALL_OW 12
18269: PPUSH
18270: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18274: LD_VAR 0 8
18278: PPUSH
18279: LD_VAR 0 5
18283: PPUSH
18284: LD_VAR 0 6
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: CALL_OW 48
// end ;
18296: LD_VAR 0 7
18300: RET
// export hInvincible ; every 1 do
18301: GO 18303
18303: DISABLE
// hInvincible := [ ] ;
18304: LD_ADDR_EXP 72
18308: PUSH
18309: EMPTY
18310: ST_TO_ADDR
18311: END
// every 10 do var i ;
18312: GO 18314
18314: DISABLE
18315: LD_INT 0
18317: PPUSH
// begin enable ;
18318: ENABLE
// if not hInvincible then
18319: LD_EXP 72
18323: NOT
18324: IFFALSE 18328
// exit ;
18326: GO 18372
// for i in hInvincible do
18328: LD_ADDR_VAR 0 1
18332: PUSH
18333: LD_EXP 72
18337: PUSH
18338: FOR_IN
18339: IFFALSE 18370
// if GetLives ( i ) < 1000 then
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 256
18350: PUSH
18351: LD_INT 1000
18353: LESS
18354: IFFALSE 18368
// SetLives ( i , 1000 ) ;
18356: LD_VAR 0 1
18360: PPUSH
18361: LD_INT 1000
18363: PPUSH
18364: CALL_OW 234
18368: GO 18338
18370: POP
18371: POP
// end ;
18372: PPOPN 1
18374: END
// export function hHackInvincible ; var i ; begin
18375: LD_INT 0
18377: PPUSH
18378: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18379: LD_ADDR_VAR 0 2
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: LD_INT 21
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 21
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: PUSH
18417: FOR_IN
18418: IFFALSE 18479
// if IsSelected ( i ) then
18420: LD_VAR 0 2
18424: PPUSH
18425: CALL_OW 306
18429: IFFALSE 18477
// begin if i in hInvincible then
18431: LD_VAR 0 2
18435: PUSH
18436: LD_EXP 72
18440: IN
18441: IFFALSE 18461
// hInvincible := hInvincible diff i else
18443: LD_ADDR_EXP 72
18447: PUSH
18448: LD_EXP 72
18452: PUSH
18453: LD_VAR 0 2
18457: DIFF
18458: ST_TO_ADDR
18459: GO 18477
// hInvincible := hInvincible union i ;
18461: LD_ADDR_EXP 72
18465: PUSH
18466: LD_EXP 72
18470: PUSH
18471: LD_VAR 0 2
18475: UNION
18476: ST_TO_ADDR
// end ;
18477: GO 18417
18479: POP
18480: POP
// end ;
18481: LD_VAR 0 1
18485: RET
// export function hHackInvisible ; var i , j ; begin
18486: LD_INT 0
18488: PPUSH
18489: PPUSH
18490: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PPUSH
18506: CALL_OW 69
18510: PUSH
18511: FOR_IN
18512: IFFALSE 18536
// if IsSelected ( i ) then
18514: LD_VAR 0 2
18518: PPUSH
18519: CALL_OW 306
18523: IFFALSE 18534
// ComForceInvisible ( i ) ;
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 496
18534: GO 18511
18536: POP
18537: POP
// end ;
18538: LD_VAR 0 1
18542: RET
// export function hHackChangeYourSide ; begin
18543: LD_INT 0
18545: PPUSH
// if your_side = 8 then
18546: LD_OWVAR 2
18550: PUSH
18551: LD_INT 8
18553: EQUAL
18554: IFFALSE 18566
// your_side := 0 else
18556: LD_ADDR_OWVAR 2
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
18564: GO 18580
// your_side := your_side + 1 ;
18566: LD_ADDR_OWVAR 2
18570: PUSH
18571: LD_OWVAR 2
18575: PUSH
18576: LD_INT 1
18578: PLUS
18579: ST_TO_ADDR
// end ;
18580: LD_VAR 0 1
18584: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18585: LD_INT 0
18587: PPUSH
18588: PPUSH
18589: PPUSH
// for i in all_units do
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_OWVAR 3
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18679
// if IsSelected ( i ) then
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 306
18612: IFFALSE 18677
// begin j := GetSide ( i ) ;
18614: LD_ADDR_VAR 0 3
18618: PUSH
18619: LD_VAR 0 2
18623: PPUSH
18624: CALL_OW 255
18628: ST_TO_ADDR
// if j = 8 then
18629: LD_VAR 0 3
18633: PUSH
18634: LD_INT 8
18636: EQUAL
18637: IFFALSE 18649
// j := 0 else
18639: LD_ADDR_VAR 0 3
18643: PUSH
18644: LD_INT 0
18646: ST_TO_ADDR
18647: GO 18663
// j := j + 1 ;
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 1
18661: PLUS
18662: ST_TO_ADDR
// SetSide ( i , j ) ;
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: CALL_OW 235
// end ;
18677: GO 18600
18679: POP
18680: POP
// end ;
18681: LD_VAR 0 1
18685: RET
// export function hHackFog ; begin
18686: LD_INT 0
18688: PPUSH
// FogOff ( true ) ;
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 344
// end ;
18696: LD_VAR 0 1
18700: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18701: LD_INT 0
18703: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_VAR 0 2
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 483
// CenterOnXY ( x , y ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_VAR 0 3
18738: PPUSH
18739: CALL_OW 84
// end ; end_of_file
18743: LD_VAR 0 4
18747: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18748: LD_INT 0
18750: PPUSH
18751: PPUSH
18752: PPUSH
18753: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18754: LD_VAR 0 1
18758: PPUSH
18759: CALL_OW 264
18763: PUSH
18764: LD_EXP 89
18768: EQUAL
18769: IFFALSE 18841
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18771: LD_INT 68
18773: PPUSH
18774: LD_VAR 0 1
18778: PPUSH
18779: CALL_OW 255
18783: PPUSH
18784: CALL_OW 321
18788: PUSH
18789: LD_INT 2
18791: EQUAL
18792: IFFALSE 18804
// eff := 70 else
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_INT 70
18801: ST_TO_ADDR
18802: GO 18812
// eff := 30 ;
18804: LD_ADDR_VAR 0 4
18808: PUSH
18809: LD_INT 30
18811: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 250
18821: PPUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 251
18831: PPUSH
18832: LD_VAR 0 4
18836: PPUSH
18837: CALL_OW 495
// end ; end ;
18841: LD_VAR 0 2
18845: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18846: LD_INT 0
18848: PPUSH
// end ;
18849: LD_VAR 0 4
18853: RET
// export function SOS_Command ( cmd ) ; begin
18854: LD_INT 0
18856: PPUSH
// end ;
18857: LD_VAR 0 2
18861: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18862: LD_INT 0
18864: PPUSH
// end ;
18865: LD_VAR 0 6
18869: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18870: LD_INT 0
18872: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18873: LD_VAR 0 1
18877: PUSH
18878: LD_INT 250
18880: EQUAL
18881: PUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: CALL_OW 264
18891: PUSH
18892: LD_EXP 92
18896: EQUAL
18897: AND
18898: IFFALSE 18919
// MinerPlaceMine ( unit , x , y ) ;
18900: LD_VAR 0 2
18904: PPUSH
18905: LD_VAR 0 4
18909: PPUSH
18910: LD_VAR 0 5
18914: PPUSH
18915: CALL 21268 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18919: LD_VAR 0 1
18923: PUSH
18924: LD_INT 251
18926: EQUAL
18927: PUSH
18928: LD_VAR 0 2
18932: PPUSH
18933: CALL_OW 264
18937: PUSH
18938: LD_EXP 92
18942: EQUAL
18943: AND
18944: IFFALSE 18965
// MinerDetonateMine ( unit , x , y ) ;
18946: LD_VAR 0 2
18950: PPUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 5
18960: PPUSH
18961: CALL 21545 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18965: LD_VAR 0 1
18969: PUSH
18970: LD_INT 252
18972: EQUAL
18973: PUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: CALL_OW 264
18983: PUSH
18984: LD_EXP 92
18988: EQUAL
18989: AND
18990: IFFALSE 19011
// MinerCreateMinefield ( unit , x , y ) ;
18992: LD_VAR 0 2
18996: PPUSH
18997: LD_VAR 0 4
19001: PPUSH
19002: LD_VAR 0 5
19006: PPUSH
19007: CALL 21962 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19011: LD_VAR 0 1
19015: PUSH
19016: LD_INT 253
19018: EQUAL
19019: PUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 257
19029: PUSH
19030: LD_INT 5
19032: EQUAL
19033: AND
19034: IFFALSE 19055
// ComBinocular ( unit , x , y ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_VAR 0 4
19045: PPUSH
19046: LD_VAR 0 5
19050: PPUSH
19051: CALL 22333 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19055: LD_VAR 0 1
19059: PUSH
19060: LD_INT 254
19062: EQUAL
19063: PUSH
19064: LD_VAR 0 2
19068: PPUSH
19069: CALL_OW 264
19073: PUSH
19074: LD_EXP 87
19078: EQUAL
19079: AND
19080: PUSH
19081: LD_VAR 0 3
19085: PPUSH
19086: CALL_OW 263
19090: PUSH
19091: LD_INT 3
19093: EQUAL
19094: AND
19095: IFFALSE 19111
// HackDestroyVehicle ( unit , selectedUnit ) ;
19097: LD_VAR 0 2
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: CALL 20628 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19111: LD_VAR 0 1
19115: PUSH
19116: LD_INT 255
19118: EQUAL
19119: PUSH
19120: LD_VAR 0 2
19124: PPUSH
19125: CALL_OW 264
19129: PUSH
19130: LD_INT 14
19132: PUSH
19133: LD_INT 53
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: IN
19140: AND
19141: PUSH
19142: LD_VAR 0 4
19146: PPUSH
19147: LD_VAR 0 5
19151: PPUSH
19152: CALL_OW 488
19156: AND
19157: IFFALSE 19181
// CutTreeXYR ( unit , x , y , 12 ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: LD_INT 12
19176: PPUSH
19177: CALL 19194 0 4
// end ;
19181: LD_VAR 0 6
19185: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
19186: LD_INT 0
19188: PPUSH
// end ;
19189: LD_VAR 0 4
19193: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19194: LD_INT 0
19196: PPUSH
19197: PPUSH
19198: PPUSH
19199: PPUSH
19200: PPUSH
19201: PPUSH
19202: PPUSH
19203: PPUSH
19204: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19205: LD_VAR 0 1
19209: NOT
19210: PUSH
19211: LD_VAR 0 2
19215: PPUSH
19216: LD_VAR 0 3
19220: PPUSH
19221: CALL_OW 488
19225: NOT
19226: OR
19227: PUSH
19228: LD_VAR 0 4
19232: NOT
19233: OR
19234: IFFALSE 19238
// exit ;
19236: GO 19578
// list := [ ] ;
19238: LD_ADDR_VAR 0 13
19242: PUSH
19243: EMPTY
19244: ST_TO_ADDR
// if x - r < 0 then
19245: LD_VAR 0 2
19249: PUSH
19250: LD_VAR 0 4
19254: MINUS
19255: PUSH
19256: LD_INT 0
19258: LESS
19259: IFFALSE 19271
// min_x := 0 else
19261: LD_ADDR_VAR 0 7
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
19269: GO 19287
// min_x := x - r ;
19271: LD_ADDR_VAR 0 7
19275: PUSH
19276: LD_VAR 0 2
19280: PUSH
19281: LD_VAR 0 4
19285: MINUS
19286: ST_TO_ADDR
// if y - r < 0 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_VAR 0 4
19296: MINUS
19297: PUSH
19298: LD_INT 0
19300: LESS
19301: IFFALSE 19313
// min_y := 0 else
19303: LD_ADDR_VAR 0 8
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
19311: GO 19329
// min_y := y - r ;
19313: LD_ADDR_VAR 0 8
19317: PUSH
19318: LD_VAR 0 3
19322: PUSH
19323: LD_VAR 0 4
19327: MINUS
19328: ST_TO_ADDR
// max_x := x + r ;
19329: LD_ADDR_VAR 0 9
19333: PUSH
19334: LD_VAR 0 2
19338: PUSH
19339: LD_VAR 0 4
19343: PLUS
19344: ST_TO_ADDR
// max_y := y + r ;
19345: LD_ADDR_VAR 0 10
19349: PUSH
19350: LD_VAR 0 3
19354: PUSH
19355: LD_VAR 0 4
19359: PLUS
19360: ST_TO_ADDR
// for _x = min_x to max_x do
19361: LD_ADDR_VAR 0 11
19365: PUSH
19366: DOUBLE
19367: LD_VAR 0 7
19371: DEC
19372: ST_TO_ADDR
19373: LD_VAR 0 9
19377: PUSH
19378: FOR_TO
19379: IFFALSE 19496
// for _y = min_y to max_y do
19381: LD_ADDR_VAR 0 12
19385: PUSH
19386: DOUBLE
19387: LD_VAR 0 8
19391: DEC
19392: ST_TO_ADDR
19393: LD_VAR 0 10
19397: PUSH
19398: FOR_TO
19399: IFFALSE 19492
// begin if not ValidHex ( _x , _y ) then
19401: LD_VAR 0 11
19405: PPUSH
19406: LD_VAR 0 12
19410: PPUSH
19411: CALL_OW 488
19415: NOT
19416: IFFALSE 19420
// continue ;
19418: GO 19398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19420: LD_VAR 0 11
19424: PPUSH
19425: LD_VAR 0 12
19429: PPUSH
19430: CALL_OW 351
19434: PUSH
19435: LD_VAR 0 11
19439: PPUSH
19440: LD_VAR 0 12
19444: PPUSH
19445: CALL_OW 554
19449: AND
19450: IFFALSE 19490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19452: LD_ADDR_VAR 0 13
19456: PUSH
19457: LD_VAR 0 13
19461: PPUSH
19462: LD_VAR 0 13
19466: PUSH
19467: LD_INT 1
19469: PLUS
19470: PPUSH
19471: LD_VAR 0 11
19475: PUSH
19476: LD_VAR 0 12
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 2
19489: ST_TO_ADDR
// end ;
19490: GO 19398
19492: POP
19493: POP
19494: GO 19378
19496: POP
19497: POP
// if not list then
19498: LD_VAR 0 13
19502: NOT
19503: IFFALSE 19507
// exit ;
19505: GO 19578
// for i in list do
19507: LD_ADDR_VAR 0 6
19511: PUSH
19512: LD_VAR 0 13
19516: PUSH
19517: FOR_IN
19518: IFFALSE 19576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19520: LD_VAR 0 1
19524: PPUSH
19525: LD_STRING M
19527: PUSH
19528: LD_VAR 0 6
19532: PUSH
19533: LD_INT 1
19535: ARRAY
19536: PUSH
19537: LD_VAR 0 6
19541: PUSH
19542: LD_INT 2
19544: ARRAY
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: PPUSH
19570: CALL_OW 447
19574: GO 19517
19576: POP
19577: POP
// end ;
19578: LD_VAR 0 5
19582: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19583: LD_EXP 75
19587: NOT
19588: IFFALSE 19638
19590: GO 19592
19592: DISABLE
// begin initHack := true ;
19593: LD_ADDR_EXP 75
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// hackTanks := [ ] ;
19601: LD_ADDR_EXP 76
19605: PUSH
19606: EMPTY
19607: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19608: LD_ADDR_EXP 77
19612: PUSH
19613: EMPTY
19614: ST_TO_ADDR
// hackLimit := 3 ;
19615: LD_ADDR_EXP 78
19619: PUSH
19620: LD_INT 3
19622: ST_TO_ADDR
// hackDist := 12 ;
19623: LD_ADDR_EXP 79
19627: PUSH
19628: LD_INT 12
19630: ST_TO_ADDR
// hackCounter := [ ] ;
19631: LD_ADDR_EXP 80
19635: PUSH
19636: EMPTY
19637: ST_TO_ADDR
// end ;
19638: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19639: LD_EXP 75
19643: PUSH
19644: LD_INT 34
19646: PUSH
19647: LD_EXP 87
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PPUSH
19656: CALL_OW 69
19660: AND
19661: IFFALSE 19916
19663: GO 19665
19665: DISABLE
19666: LD_INT 0
19668: PPUSH
19669: PPUSH
// begin enable ;
19670: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: LD_INT 34
19678: PUSH
19679: LD_EXP 87
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: PUSH
19693: FOR_IN
19694: IFFALSE 19914
// begin if not i in hackTanks then
19696: LD_VAR 0 1
19700: PUSH
19701: LD_EXP 76
19705: IN
19706: NOT
19707: IFFALSE 19790
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19709: LD_ADDR_EXP 76
19713: PUSH
19714: LD_EXP 76
19718: PPUSH
19719: LD_EXP 76
19723: PUSH
19724: LD_INT 1
19726: PLUS
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 1
19737: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19738: LD_ADDR_EXP 77
19742: PUSH
19743: LD_EXP 77
19747: PPUSH
19748: LD_EXP 77
19752: PUSH
19753: LD_INT 1
19755: PLUS
19756: PPUSH
19757: EMPTY
19758: PPUSH
19759: CALL_OW 1
19763: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19764: LD_ADDR_EXP 80
19768: PUSH
19769: LD_EXP 80
19773: PPUSH
19774: LD_EXP 80
19778: PUSH
19779: LD_INT 1
19781: PLUS
19782: PPUSH
19783: EMPTY
19784: PPUSH
19785: CALL_OW 1
19789: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 302
19799: NOT
19800: IFFALSE 19813
// begin HackUnlinkAll ( i ) ;
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL 19919 0 1
// continue ;
19811: GO 19693
// end ; HackCheckCapturedStatus ( i ) ;
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL 20362 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_INT 81
19829: PUSH
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 255
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 33
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 91
19856: PUSH
19857: LD_VAR 0 1
19861: PUSH
19862: LD_EXP 79
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 50
19874: PUSH
19875: EMPTY
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: ST_TO_ADDR
// if not tmp then
19889: LD_VAR 0 2
19893: NOT
19894: IFFALSE 19898
// continue ;
19896: GO 19693
// HackLink ( i , tmp ) ;
19898: LD_VAR 0 1
19902: PPUSH
19903: LD_VAR 0 2
19907: PPUSH
19908: CALL 20055 0 2
// end ;
19912: GO 19693
19914: POP
19915: POP
// end ;
19916: PPOPN 2
19918: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19919: LD_INT 0
19921: PPUSH
19922: PPUSH
19923: PPUSH
// if not hack in hackTanks then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_EXP 76
19933: IN
19934: NOT
19935: IFFALSE 19939
// exit ;
19937: GO 20050
// index := GetElementIndex ( hackTanks , hack ) ;
19939: LD_ADDR_VAR 0 4
19943: PUSH
19944: LD_EXP 76
19948: PPUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL 27855 0 2
19958: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19959: LD_EXP 77
19963: PUSH
19964: LD_VAR 0 4
19968: ARRAY
19969: IFFALSE 20050
// begin for i in hackTanksCaptured [ index ] do
19971: LD_ADDR_VAR 0 3
19975: PUSH
19976: LD_EXP 77
19980: PUSH
19981: LD_VAR 0 4
19985: ARRAY
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20014
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 1
19997: ARRAY
19998: PPUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 2
20006: ARRAY
20007: PPUSH
20008: CALL_OW 235
20012: GO 19987
20014: POP
20015: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20016: LD_ADDR_EXP 77
20020: PUSH
20021: LD_EXP 77
20025: PPUSH
20026: LD_VAR 0 4
20030: PPUSH
20031: EMPTY
20032: PPUSH
20033: CALL_OW 1
20037: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20038: LD_VAR 0 1
20042: PPUSH
20043: LD_INT 0
20045: PPUSH
20046: CALL_OW 505
// end ; end ;
20050: LD_VAR 0 2
20054: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
20059: PPUSH
// if not hack in hackTanks or not vehicles then
20060: LD_VAR 0 1
20064: PUSH
20065: LD_EXP 76
20069: IN
20070: NOT
20071: PUSH
20072: LD_VAR 0 2
20076: NOT
20077: OR
20078: IFFALSE 20082
// exit ;
20080: GO 20357
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20082: LD_ADDR_VAR 0 2
20086: PUSH
20087: LD_VAR 0 1
20091: PPUSH
20092: LD_VAR 0 2
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL 28505 0 4
20107: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20108: LD_ADDR_VAR 0 5
20112: PUSH
20113: LD_EXP 76
20117: PPUSH
20118: LD_VAR 0 1
20122: PPUSH
20123: CALL 27855 0 2
20127: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20128: LD_EXP 77
20132: PUSH
20133: LD_VAR 0 5
20137: ARRAY
20138: PUSH
20139: LD_EXP 78
20143: LESS
20144: IFFALSE 20333
// begin for i := 1 to vehicles do
20146: LD_ADDR_VAR 0 4
20150: PUSH
20151: DOUBLE
20152: LD_INT 1
20154: DEC
20155: ST_TO_ADDR
20156: LD_VAR 0 2
20160: PUSH
20161: FOR_TO
20162: IFFALSE 20331
// begin if hackTanksCaptured [ index ] = hackLimit then
20164: LD_EXP 77
20168: PUSH
20169: LD_VAR 0 5
20173: ARRAY
20174: PUSH
20175: LD_EXP 78
20179: EQUAL
20180: IFFALSE 20184
// break ;
20182: GO 20331
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20184: LD_ADDR_EXP 80
20188: PUSH
20189: LD_EXP 80
20193: PPUSH
20194: LD_VAR 0 5
20198: PPUSH
20199: LD_EXP 80
20203: PUSH
20204: LD_VAR 0 5
20208: ARRAY
20209: PUSH
20210: LD_INT 1
20212: PLUS
20213: PPUSH
20214: CALL_OW 1
20218: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20219: LD_ADDR_EXP 77
20223: PUSH
20224: LD_EXP 77
20228: PPUSH
20229: LD_VAR 0 5
20233: PUSH
20234: LD_EXP 77
20238: PUSH
20239: LD_VAR 0 5
20243: ARRAY
20244: PUSH
20245: LD_INT 1
20247: PLUS
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: LD_VAR 0 2
20257: PUSH
20258: LD_VAR 0 4
20262: ARRAY
20263: PUSH
20264: LD_VAR 0 2
20268: PUSH
20269: LD_VAR 0 4
20273: ARRAY
20274: PPUSH
20275: CALL_OW 255
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL 28070 0 3
20288: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20289: LD_VAR 0 2
20293: PUSH
20294: LD_VAR 0 4
20298: ARRAY
20299: PPUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 255
20309: PPUSH
20310: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20314: LD_VAR 0 2
20318: PUSH
20319: LD_VAR 0 4
20323: ARRAY
20324: PPUSH
20325: CALL_OW 141
// end ;
20329: GO 20161
20331: POP
20332: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_EXP 77
20342: PUSH
20343: LD_VAR 0 5
20347: ARRAY
20348: PUSH
20349: LD_INT 0
20351: PLUS
20352: PPUSH
20353: CALL_OW 505
// end ;
20357: LD_VAR 0 3
20361: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
// if not hack in hackTanks then
20368: LD_VAR 0 1
20372: PUSH
20373: LD_EXP 76
20377: IN
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20623
// index := GetElementIndex ( hackTanks , hack ) ;
20383: LD_ADDR_VAR 0 4
20387: PUSH
20388: LD_EXP 76
20392: PPUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL 27855 0 2
20402: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20403: LD_ADDR_VAR 0 3
20407: PUSH
20408: DOUBLE
20409: LD_EXP 77
20413: PUSH
20414: LD_VAR 0 4
20418: ARRAY
20419: INC
20420: ST_TO_ADDR
20421: LD_INT 1
20423: PUSH
20424: FOR_DOWNTO
20425: IFFALSE 20597
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20427: LD_ADDR_VAR 0 5
20431: PUSH
20432: LD_EXP 77
20436: PUSH
20437: LD_VAR 0 4
20441: ARRAY
20442: PUSH
20443: LD_VAR 0 3
20447: ARRAY
20448: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20449: LD_VAR 0 5
20453: PUSH
20454: LD_INT 1
20456: ARRAY
20457: PPUSH
20458: CALL_OW 302
20462: NOT
20463: PUSH
20464: LD_VAR 0 5
20468: PUSH
20469: LD_INT 1
20471: ARRAY
20472: PPUSH
20473: CALL_OW 255
20477: PUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 255
20487: NONEQUAL
20488: OR
20489: IFFALSE 20595
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20491: LD_VAR 0 5
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: PPUSH
20500: CALL_OW 305
20504: PUSH
20505: LD_VAR 0 5
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: CALL_OW 255
20518: PUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 255
20528: EQUAL
20529: AND
20530: IFFALSE 20554
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20532: LD_VAR 0 5
20536: PUSH
20537: LD_INT 1
20539: ARRAY
20540: PPUSH
20541: LD_VAR 0 5
20545: PUSH
20546: LD_INT 2
20548: ARRAY
20549: PPUSH
20550: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20554: LD_ADDR_EXP 77
20558: PUSH
20559: LD_EXP 77
20563: PPUSH
20564: LD_VAR 0 4
20568: PPUSH
20569: LD_EXP 77
20573: PUSH
20574: LD_VAR 0 4
20578: ARRAY
20579: PPUSH
20580: LD_VAR 0 3
20584: PPUSH
20585: CALL_OW 3
20589: PPUSH
20590: CALL_OW 1
20594: ST_TO_ADDR
// end ; end ;
20595: GO 20424
20597: POP
20598: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_EXP 77
20608: PUSH
20609: LD_VAR 0 4
20613: ARRAY
20614: PUSH
20615: LD_INT 0
20617: PLUS
20618: PPUSH
20619: CALL_OW 505
// end ;
20623: LD_VAR 0 2
20627: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20628: LD_INT 0
20630: PPUSH
20631: PPUSH
20632: PPUSH
20633: PPUSH
// if not hack in hackTanks then
20634: LD_VAR 0 1
20638: PUSH
20639: LD_EXP 76
20643: IN
20644: NOT
20645: IFFALSE 20649
// exit ;
20647: GO 20734
// index := GetElementIndex ( hackTanks , hack ) ;
20649: LD_ADDR_VAR 0 5
20653: PUSH
20654: LD_EXP 76
20658: PPUSH
20659: LD_VAR 0 1
20663: PPUSH
20664: CALL 27855 0 2
20668: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20669: LD_ADDR_VAR 0 4
20673: PUSH
20674: DOUBLE
20675: LD_INT 1
20677: DEC
20678: ST_TO_ADDR
20679: LD_EXP 77
20683: PUSH
20684: LD_VAR 0 5
20688: ARRAY
20689: PUSH
20690: FOR_TO
20691: IFFALSE 20732
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20693: LD_EXP 77
20697: PUSH
20698: LD_VAR 0 5
20702: ARRAY
20703: PUSH
20704: LD_VAR 0 4
20708: ARRAY
20709: PUSH
20710: LD_INT 1
20712: ARRAY
20713: PUSH
20714: LD_VAR 0 2
20718: EQUAL
20719: IFFALSE 20730
// KillUnit ( vehicle ) ;
20721: LD_VAR 0 2
20725: PPUSH
20726: CALL_OW 66
20730: GO 20690
20732: POP
20733: POP
// end ;
20734: LD_VAR 0 3
20738: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20739: LD_EXP 81
20743: NOT
20744: IFFALSE 20779
20746: GO 20748
20748: DISABLE
// begin initMiner := true ;
20749: LD_ADDR_EXP 81
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// minersList := [ ] ;
20757: LD_ADDR_EXP 82
20761: PUSH
20762: EMPTY
20763: ST_TO_ADDR
// minerMinesList := [ ] ;
20764: LD_ADDR_EXP 83
20768: PUSH
20769: EMPTY
20770: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20771: LD_ADDR_EXP 84
20775: PUSH
20776: LD_INT 5
20778: ST_TO_ADDR
// end ;
20779: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20780: LD_EXP 81
20784: PUSH
20785: LD_INT 34
20787: PUSH
20788: LD_EXP 92
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PPUSH
20797: CALL_OW 69
20801: AND
20802: IFFALSE 21265
20804: GO 20806
20806: DISABLE
20807: LD_INT 0
20809: PPUSH
20810: PPUSH
20811: PPUSH
20812: PPUSH
// begin enable ;
20813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20814: LD_ADDR_VAR 0 1
20818: PUSH
20819: LD_INT 34
20821: PUSH
20822: LD_EXP 92
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: CALL_OW 69
20835: PUSH
20836: FOR_IN
20837: IFFALSE 20909
// begin if not i in minersList then
20839: LD_VAR 0 1
20843: PUSH
20844: LD_EXP 82
20848: IN
20849: NOT
20850: IFFALSE 20907
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20852: LD_ADDR_EXP 82
20856: PUSH
20857: LD_EXP 82
20861: PPUSH
20862: LD_EXP 82
20866: PUSH
20867: LD_INT 1
20869: PLUS
20870: PPUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 1
20880: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20881: LD_ADDR_EXP 83
20885: PUSH
20886: LD_EXP 83
20890: PPUSH
20891: LD_EXP 83
20895: PUSH
20896: LD_INT 1
20898: PLUS
20899: PPUSH
20900: EMPTY
20901: PPUSH
20902: CALL_OW 1
20906: ST_TO_ADDR
// end end ;
20907: GO 20836
20909: POP
20910: POP
// for i := minerMinesList downto 1 do
20911: LD_ADDR_VAR 0 1
20915: PUSH
20916: DOUBLE
20917: LD_EXP 83
20921: INC
20922: ST_TO_ADDR
20923: LD_INT 1
20925: PUSH
20926: FOR_DOWNTO
20927: IFFALSE 21263
// begin if IsLive ( minersList [ i ] ) then
20929: LD_EXP 82
20933: PUSH
20934: LD_VAR 0 1
20938: ARRAY
20939: PPUSH
20940: CALL_OW 300
20944: IFFALSE 20972
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20946: LD_EXP 82
20950: PUSH
20951: LD_VAR 0 1
20955: ARRAY
20956: PPUSH
20957: LD_EXP 83
20961: PUSH
20962: LD_VAR 0 1
20966: ARRAY
20967: PPUSH
20968: CALL_OW 505
// if not minerMinesList [ i ] then
20972: LD_EXP 83
20976: PUSH
20977: LD_VAR 0 1
20981: ARRAY
20982: NOT
20983: IFFALSE 20987
// continue ;
20985: GO 20926
// for j := minerMinesList [ i ] downto 1 do
20987: LD_ADDR_VAR 0 2
20991: PUSH
20992: DOUBLE
20993: LD_EXP 83
20997: PUSH
20998: LD_VAR 0 1
21002: ARRAY
21003: INC
21004: ST_TO_ADDR
21005: LD_INT 1
21007: PUSH
21008: FOR_DOWNTO
21009: IFFALSE 21259
// begin side := GetSide ( minersList [ i ] ) ;
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: LD_EXP 82
21020: PUSH
21021: LD_VAR 0 1
21025: ARRAY
21026: PPUSH
21027: CALL_OW 255
21031: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21032: LD_ADDR_VAR 0 4
21036: PUSH
21037: LD_EXP 83
21041: PUSH
21042: LD_VAR 0 1
21046: ARRAY
21047: PUSH
21048: LD_VAR 0 2
21052: ARRAY
21053: PUSH
21054: LD_INT 1
21056: ARRAY
21057: PPUSH
21058: LD_EXP 83
21062: PUSH
21063: LD_VAR 0 1
21067: ARRAY
21068: PUSH
21069: LD_VAR 0 2
21073: ARRAY
21074: PUSH
21075: LD_INT 2
21077: ARRAY
21078: PPUSH
21079: CALL_OW 428
21083: ST_TO_ADDR
// if not tmp then
21084: LD_VAR 0 4
21088: NOT
21089: IFFALSE 21093
// continue ;
21091: GO 21008
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21093: LD_VAR 0 4
21097: PUSH
21098: LD_INT 81
21100: PUSH
21101: LD_VAR 0 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PPUSH
21110: CALL_OW 69
21114: IN
21115: PUSH
21116: LD_EXP 83
21120: PUSH
21121: LD_VAR 0 1
21125: ARRAY
21126: PUSH
21127: LD_VAR 0 2
21131: ARRAY
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: PPUSH
21137: LD_EXP 83
21141: PUSH
21142: LD_VAR 0 1
21146: ARRAY
21147: PUSH
21148: LD_VAR 0 2
21152: ARRAY
21153: PUSH
21154: LD_INT 2
21156: ARRAY
21157: PPUSH
21158: CALL_OW 458
21162: AND
21163: IFFALSE 21257
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21165: LD_EXP 83
21169: PUSH
21170: LD_VAR 0 1
21174: ARRAY
21175: PUSH
21176: LD_VAR 0 2
21180: ARRAY
21181: PUSH
21182: LD_INT 1
21184: ARRAY
21185: PPUSH
21186: LD_EXP 83
21190: PUSH
21191: LD_VAR 0 1
21195: ARRAY
21196: PUSH
21197: LD_VAR 0 2
21201: ARRAY
21202: PUSH
21203: LD_INT 2
21205: ARRAY
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21216: LD_ADDR_EXP 83
21220: PUSH
21221: LD_EXP 83
21225: PPUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_EXP 83
21235: PUSH
21236: LD_VAR 0 1
21240: ARRAY
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 3
21251: PPUSH
21252: CALL_OW 1
21256: ST_TO_ADDR
// end ; end ;
21257: GO 21008
21259: POP
21260: POP
// end ;
21261: GO 20926
21263: POP
21264: POP
// end ;
21265: PPOPN 4
21267: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21268: LD_INT 0
21270: PPUSH
21271: PPUSH
// result := false ;
21272: LD_ADDR_VAR 0 4
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21280: LD_VAR 0 1
21284: PPUSH
21285: CALL_OW 264
21289: PUSH
21290: LD_EXP 92
21294: EQUAL
21295: NOT
21296: IFFALSE 21300
// exit ;
21298: GO 21540
// index := GetElementIndex ( minersList , unit ) ;
21300: LD_ADDR_VAR 0 5
21304: PUSH
21305: LD_EXP 82
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL 27855 0 2
21319: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21320: LD_EXP 83
21324: PUSH
21325: LD_VAR 0 5
21329: ARRAY
21330: PUSH
21331: LD_EXP 84
21335: GREATEREQUAL
21336: IFFALSE 21340
// exit ;
21338: GO 21540
// ComMoveXY ( unit , x , y ) ;
21340: LD_VAR 0 1
21344: PPUSH
21345: LD_VAR 0 2
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21359: LD_INT 35
21361: PPUSH
21362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21366: LD_VAR 0 1
21370: PPUSH
21371: LD_VAR 0 2
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: CALL 58627 0 3
21385: NOT
21386: PUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 314
21396: AND
21397: IFFALSE 21401
// exit ;
21399: GO 21540
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: CALL_OW 428
21415: PUSH
21416: LD_VAR 0 1
21420: EQUAL
21421: PUSH
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 314
21431: NOT
21432: AND
21433: IFFALSE 21359
// PlaySoundXY ( x , y , PlantMine ) ;
21435: LD_VAR 0 2
21439: PPUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: LD_STRING PlantMine
21447: PPUSH
21448: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21452: LD_VAR 0 2
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL_OW 255
21471: PPUSH
21472: LD_INT 0
21474: PPUSH
21475: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21479: LD_ADDR_EXP 83
21483: PUSH
21484: LD_EXP 83
21488: PPUSH
21489: LD_VAR 0 5
21493: PUSH
21494: LD_EXP 83
21498: PUSH
21499: LD_VAR 0 5
21503: ARRAY
21504: PUSH
21505: LD_INT 1
21507: PLUS
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PPUSH
21513: LD_VAR 0 2
21517: PUSH
21518: LD_VAR 0 3
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL 28070 0 3
21531: ST_TO_ADDR
// result := true ;
21532: LD_ADDR_VAR 0 4
21536: PUSH
21537: LD_INT 1
21539: ST_TO_ADDR
// end ;
21540: LD_VAR 0 4
21544: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21545: LD_INT 0
21547: PPUSH
21548: PPUSH
21549: PPUSH
// if not unit in minersList then
21550: LD_VAR 0 1
21554: PUSH
21555: LD_EXP 82
21559: IN
21560: NOT
21561: IFFALSE 21565
// exit ;
21563: GO 21957
// index := GetElementIndex ( minersList , unit ) ;
21565: LD_ADDR_VAR 0 6
21569: PUSH
21570: LD_EXP 82
21574: PPUSH
21575: LD_VAR 0 1
21579: PPUSH
21580: CALL 27855 0 2
21584: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21585: LD_ADDR_VAR 0 5
21589: PUSH
21590: DOUBLE
21591: LD_EXP 83
21595: PUSH
21596: LD_VAR 0 6
21600: ARRAY
21601: INC
21602: ST_TO_ADDR
21603: LD_INT 1
21605: PUSH
21606: FOR_DOWNTO
21607: IFFALSE 21768
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21609: LD_EXP 83
21613: PUSH
21614: LD_VAR 0 6
21618: ARRAY
21619: PUSH
21620: LD_VAR 0 5
21624: ARRAY
21625: PUSH
21626: LD_INT 1
21628: ARRAY
21629: PUSH
21630: LD_VAR 0 2
21634: EQUAL
21635: PUSH
21636: LD_EXP 83
21640: PUSH
21641: LD_VAR 0 6
21645: ARRAY
21646: PUSH
21647: LD_VAR 0 5
21651: ARRAY
21652: PUSH
21653: LD_INT 2
21655: ARRAY
21656: PUSH
21657: LD_VAR 0 3
21661: EQUAL
21662: AND
21663: IFFALSE 21766
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21665: LD_EXP 83
21669: PUSH
21670: LD_VAR 0 6
21674: ARRAY
21675: PUSH
21676: LD_VAR 0 5
21680: ARRAY
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: PPUSH
21686: LD_EXP 83
21690: PUSH
21691: LD_VAR 0 6
21695: ARRAY
21696: PUSH
21697: LD_VAR 0 5
21701: ARRAY
21702: PUSH
21703: LD_INT 2
21705: ARRAY
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 255
21716: PPUSH
21717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21721: LD_ADDR_EXP 83
21725: PUSH
21726: LD_EXP 83
21730: PPUSH
21731: LD_VAR 0 6
21735: PPUSH
21736: LD_EXP 83
21740: PUSH
21741: LD_VAR 0 6
21745: ARRAY
21746: PPUSH
21747: LD_VAR 0 5
21751: PPUSH
21752: CALL_OW 3
21756: PPUSH
21757: CALL_OW 1
21761: ST_TO_ADDR
// exit ;
21762: POP
21763: POP
21764: GO 21957
// end ; end ;
21766: GO 21606
21768: POP
21769: POP
// for i := minerMinesList [ index ] downto 1 do
21770: LD_ADDR_VAR 0 5
21774: PUSH
21775: DOUBLE
21776: LD_EXP 83
21780: PUSH
21781: LD_VAR 0 6
21785: ARRAY
21786: INC
21787: ST_TO_ADDR
21788: LD_INT 1
21790: PUSH
21791: FOR_DOWNTO
21792: IFFALSE 21955
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21794: LD_EXP 83
21798: PUSH
21799: LD_VAR 0 6
21803: ARRAY
21804: PUSH
21805: LD_VAR 0 5
21809: ARRAY
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PPUSH
21815: LD_EXP 83
21819: PUSH
21820: LD_VAR 0 6
21824: ARRAY
21825: PUSH
21826: LD_VAR 0 5
21830: ARRAY
21831: PUSH
21832: LD_INT 2
21834: ARRAY
21835: PPUSH
21836: LD_VAR 0 2
21840: PPUSH
21841: LD_VAR 0 3
21845: PPUSH
21846: CALL_OW 298
21850: PUSH
21851: LD_INT 6
21853: LESS
21854: IFFALSE 21953
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21856: LD_EXP 83
21860: PUSH
21861: LD_VAR 0 6
21865: ARRAY
21866: PUSH
21867: LD_VAR 0 5
21871: ARRAY
21872: PUSH
21873: LD_INT 1
21875: ARRAY
21876: PPUSH
21877: LD_EXP 83
21881: PUSH
21882: LD_VAR 0 6
21886: ARRAY
21887: PUSH
21888: LD_VAR 0 5
21892: ARRAY
21893: PUSH
21894: LD_INT 2
21896: ARRAY
21897: PPUSH
21898: LD_VAR 0 1
21902: PPUSH
21903: CALL_OW 255
21907: PPUSH
21908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21912: LD_ADDR_EXP 83
21916: PUSH
21917: LD_EXP 83
21921: PPUSH
21922: LD_VAR 0 6
21926: PPUSH
21927: LD_EXP 83
21931: PUSH
21932: LD_VAR 0 6
21936: ARRAY
21937: PPUSH
21938: LD_VAR 0 5
21942: PPUSH
21943: CALL_OW 3
21947: PPUSH
21948: CALL_OW 1
21952: ST_TO_ADDR
// end ; end ;
21953: GO 21791
21955: POP
21956: POP
// end ;
21957: LD_VAR 0 4
21961: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21962: LD_INT 0
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 264
21982: PUSH
21983: LD_EXP 92
21987: EQUAL
21988: NOT
21989: PUSH
21990: LD_VAR 0 1
21994: PUSH
21995: LD_EXP 82
21999: IN
22000: NOT
22001: OR
22002: IFFALSE 22006
// exit ;
22004: GO 22328
// index := GetElementIndex ( minersList , unit ) ;
22006: LD_ADDR_VAR 0 6
22010: PUSH
22011: LD_EXP 82
22015: PPUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL 27855 0 2
22025: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22026: LD_ADDR_VAR 0 8
22030: PUSH
22031: LD_EXP 84
22035: PUSH
22036: LD_EXP 83
22040: PUSH
22041: LD_VAR 0 6
22045: ARRAY
22046: MINUS
22047: ST_TO_ADDR
// if not minesFreeAmount then
22048: LD_VAR 0 8
22052: NOT
22053: IFFALSE 22057
// exit ;
22055: GO 22328
// tmp := [ ] ;
22057: LD_ADDR_VAR 0 7
22061: PUSH
22062: EMPTY
22063: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22064: LD_ADDR_VAR 0 5
22068: PUSH
22069: DOUBLE
22070: LD_INT 1
22072: DEC
22073: ST_TO_ADDR
22074: LD_VAR 0 8
22078: PUSH
22079: FOR_TO
22080: IFFALSE 22275
// begin _d := rand ( 0 , 5 ) ;
22082: LD_ADDR_VAR 0 11
22086: PUSH
22087: LD_INT 0
22089: PPUSH
22090: LD_INT 5
22092: PPUSH
22093: CALL_OW 12
22097: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22098: LD_ADDR_VAR 0 12
22102: PUSH
22103: LD_INT 2
22105: PPUSH
22106: LD_INT 6
22108: PPUSH
22109: CALL_OW 12
22113: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22114: LD_ADDR_VAR 0 9
22118: PUSH
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_VAR 0 11
22128: PPUSH
22129: LD_VAR 0 12
22133: PPUSH
22134: CALL_OW 272
22138: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22139: LD_ADDR_VAR 0 10
22143: PUSH
22144: LD_VAR 0 3
22148: PPUSH
22149: LD_VAR 0 11
22153: PPUSH
22154: LD_VAR 0 12
22158: PPUSH
22159: CALL_OW 273
22163: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22164: LD_VAR 0 9
22168: PPUSH
22169: LD_VAR 0 10
22173: PPUSH
22174: CALL_OW 488
22178: PUSH
22179: LD_VAR 0 9
22183: PUSH
22184: LD_VAR 0 10
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_VAR 0 7
22197: IN
22198: NOT
22199: AND
22200: PUSH
22201: LD_VAR 0 9
22205: PPUSH
22206: LD_VAR 0 10
22210: PPUSH
22211: CALL_OW 458
22215: NOT
22216: AND
22217: IFFALSE 22259
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22219: LD_ADDR_VAR 0 7
22223: PUSH
22224: LD_VAR 0 7
22228: PPUSH
22229: LD_VAR 0 7
22233: PUSH
22234: LD_INT 1
22236: PLUS
22237: PPUSH
22238: LD_VAR 0 9
22242: PUSH
22243: LD_VAR 0 10
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PPUSH
22252: CALL_OW 1
22256: ST_TO_ADDR
22257: GO 22273
// i := i - 1 ;
22259: LD_ADDR_VAR 0 5
22263: PUSH
22264: LD_VAR 0 5
22268: PUSH
22269: LD_INT 1
22271: MINUS
22272: ST_TO_ADDR
// end ;
22273: GO 22079
22275: POP
22276: POP
// for i in tmp do
22277: LD_ADDR_VAR 0 5
22281: PUSH
22282: LD_VAR 0 7
22286: PUSH
22287: FOR_IN
22288: IFFALSE 22326
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_VAR 0 5
22299: PUSH
22300: LD_INT 1
22302: ARRAY
22303: PPUSH
22304: LD_VAR 0 5
22308: PUSH
22309: LD_INT 2
22311: ARRAY
22312: PPUSH
22313: CALL 21268 0 3
22317: NOT
22318: IFFALSE 22324
// exit ;
22320: POP
22321: POP
22322: GO 22328
22324: GO 22287
22326: POP
22327: POP
// end ;
22328: LD_VAR 0 4
22332: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22333: LD_INT 0
22335: PPUSH
22336: PPUSH
22337: PPUSH
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
// if not GetClass ( unit ) = class_sniper then
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 257
22351: PUSH
22352: LD_INT 5
22354: EQUAL
22355: NOT
22356: IFFALSE 22360
// exit ;
22358: GO 22748
// dist := 8 ;
22360: LD_ADDR_VAR 0 5
22364: PUSH
22365: LD_INT 8
22367: ST_TO_ADDR
// viewRange := 12 ;
22368: LD_ADDR_VAR 0 7
22372: PUSH
22373: LD_INT 12
22375: ST_TO_ADDR
// side := GetSide ( unit ) ;
22376: LD_ADDR_VAR 0 6
22380: PUSH
22381: LD_VAR 0 1
22385: PPUSH
22386: CALL_OW 255
22390: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22391: LD_INT 61
22393: PPUSH
22394: LD_VAR 0 6
22398: PPUSH
22399: CALL_OW 321
22403: PUSH
22404: LD_INT 2
22406: EQUAL
22407: IFFALSE 22417
// viewRange := 16 ;
22409: LD_ADDR_VAR 0 7
22413: PUSH
22414: LD_INT 16
22416: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_VAR 0 2
22426: PPUSH
22427: LD_VAR 0 3
22431: PPUSH
22432: CALL_OW 297
22436: PUSH
22437: LD_VAR 0 5
22441: GREATER
22442: IFFALSE 22521
// begin ComMoveXY ( unit , x , y ) ;
22444: LD_VAR 0 1
22448: PPUSH
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22463: LD_INT 35
22465: PPUSH
22466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: CALL 58627 0 3
22489: NOT
22490: IFFALSE 22494
// exit ;
22492: GO 22748
// until GetDistUnitXY ( unit , x , y ) < dist ;
22494: LD_VAR 0 1
22498: PPUSH
22499: LD_VAR 0 2
22503: PPUSH
22504: LD_VAR 0 3
22508: PPUSH
22509: CALL_OW 297
22513: PUSH
22514: LD_VAR 0 5
22518: LESS
22519: IFFALSE 22463
// end ; ComTurnXY ( unit , x , y ) ;
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: LD_VAR 0 3
22535: PPUSH
22536: CALL_OW 118
// wait ( 5 ) ;
22540: LD_INT 5
22542: PPUSH
22543: CALL_OW 67
// _d := GetDir ( unit ) ;
22547: LD_ADDR_VAR 0 10
22551: PUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 254
22561: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22562: LD_ADDR_VAR 0 8
22566: PUSH
22567: LD_VAR 0 1
22571: PPUSH
22572: CALL_OW 250
22576: PPUSH
22577: LD_VAR 0 10
22581: PPUSH
22582: LD_VAR 0 5
22586: PPUSH
22587: CALL_OW 272
22591: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22592: LD_ADDR_VAR 0 9
22596: PUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 251
22606: PPUSH
22607: LD_VAR 0 10
22611: PPUSH
22612: LD_VAR 0 5
22616: PPUSH
22617: CALL_OW 273
22621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22622: LD_VAR 0 8
22626: PPUSH
22627: LD_VAR 0 9
22631: PPUSH
22632: CALL_OW 488
22636: NOT
22637: IFFALSE 22641
// exit ;
22639: GO 22748
// ComAnimCustom ( unit , 1 ) ;
22641: LD_VAR 0 1
22645: PPUSH
22646: LD_INT 1
22648: PPUSH
22649: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22653: LD_VAR 0 8
22657: PPUSH
22658: LD_VAR 0 9
22662: PPUSH
22663: LD_VAR 0 6
22667: PPUSH
22668: LD_VAR 0 7
22672: PPUSH
22673: CALL_OW 330
// repeat wait ( 1 ) ;
22677: LD_INT 1
22679: PPUSH
22680: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 316
22693: PUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 314
22703: OR
22704: PUSH
22705: LD_VAR 0 1
22709: PPUSH
22710: CALL_OW 302
22714: NOT
22715: OR
22716: PUSH
22717: LD_VAR 0 1
22721: PPUSH
22722: CALL_OW 301
22726: OR
22727: IFFALSE 22677
// RemoveSeeing ( _x , _y , side ) ;
22729: LD_VAR 0 8
22733: PPUSH
22734: LD_VAR 0 9
22738: PPUSH
22739: LD_VAR 0 6
22743: PPUSH
22744: CALL_OW 331
// end ; end_of_file
22748: LD_VAR 0 4
22752: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22753: LD_VAR 0 1
22757: PUSH
22758: LD_INT 200
22760: DOUBLE
22761: GREATEREQUAL
22762: IFFALSE 22770
22764: LD_INT 299
22766: DOUBLE
22767: LESSEQUAL
22768: IFTRUE 22772
22770: GO 22804
22772: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22773: LD_VAR 0 1
22777: PPUSH
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_VAR 0 3
22787: PPUSH
22788: LD_VAR 0 4
22792: PPUSH
22793: LD_VAR 0 5
22797: PPUSH
22798: CALL 18870 0 5
22802: GO 22881
22804: LD_INT 300
22806: DOUBLE
22807: GREATEREQUAL
22808: IFFALSE 22816
22810: LD_INT 399
22812: DOUBLE
22813: LESSEQUAL
22814: IFTRUE 22818
22816: GO 22880
22818: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22819: LD_VAR 0 1
22823: PPUSH
22824: LD_VAR 0 2
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: LD_VAR 0 4
22838: PPUSH
22839: LD_VAR 0 5
22843: PPUSH
22844: LD_VAR 0 6
22848: PPUSH
22849: LD_VAR 0 7
22853: PPUSH
22854: LD_VAR 0 8
22858: PPUSH
22859: LD_VAR 0 9
22863: PPUSH
22864: LD_VAR 0 10
22868: PPUSH
22869: LD_VAR 0 11
22873: PPUSH
22874: CALL 16768 0 11
22878: GO 22881
22880: POP
// end ;
22881: PPOPN 11
22883: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22884: LD_VAR 0 1
22888: PPUSH
22889: LD_VAR 0 2
22893: PPUSH
22894: LD_VAR 0 3
22898: PPUSH
22899: LD_VAR 0 4
22903: PPUSH
22904: LD_VAR 0 5
22908: PPUSH
22909: CALL 18862 0 5
// end ; end_of_file
22913: PPOPN 5
22915: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22916: LD_INT 0
22918: PPUSH
// ar_miner := 81 ;
22919: LD_ADDR_EXP 92
22923: PUSH
22924: LD_INT 81
22926: ST_TO_ADDR
// ar_crane := 88 ;
22927: LD_ADDR_EXP 91
22931: PUSH
22932: LD_INT 88
22934: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22935: LD_ADDR_EXP 86
22939: PUSH
22940: LD_INT 89
22942: ST_TO_ADDR
// us_hack := 99 ;
22943: LD_ADDR_EXP 87
22947: PUSH
22948: LD_INT 99
22950: ST_TO_ADDR
// us_artillery := 97 ;
22951: LD_ADDR_EXP 88
22955: PUSH
22956: LD_INT 97
22958: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22959: LD_ADDR_EXP 89
22963: PUSH
22964: LD_INT 91
22966: ST_TO_ADDR
// ar_mortar := 92 ;
22967: LD_ADDR_EXP 90
22971: PUSH
22972: LD_INT 92
22974: ST_TO_ADDR
// ru_radar := 98 ;
22975: LD_ADDR_EXP 85
22979: PUSH
22980: LD_INT 98
22982: ST_TO_ADDR
// tech_Artillery := 80 ;
22983: LD_ADDR_EXP 93
22987: PUSH
22988: LD_INT 80
22990: ST_TO_ADDR
// tech_RadMat := 81 ;
22991: LD_ADDR_EXP 94
22995: PUSH
22996: LD_INT 81
22998: ST_TO_ADDR
// tech_BasicTools := 82 ;
22999: LD_ADDR_EXP 95
23003: PUSH
23004: LD_INT 82
23006: ST_TO_ADDR
// tech_Cargo := 83 ;
23007: LD_ADDR_EXP 96
23011: PUSH
23012: LD_INT 83
23014: ST_TO_ADDR
// tech_Track := 84 ;
23015: LD_ADDR_EXP 97
23019: PUSH
23020: LD_INT 84
23022: ST_TO_ADDR
// tech_Crane := 85 ;
23023: LD_ADDR_EXP 98
23027: PUSH
23028: LD_INT 85
23030: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23031: LD_ADDR_EXP 99
23035: PUSH
23036: LD_INT 86
23038: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23039: LD_ADDR_EXP 100
23043: PUSH
23044: LD_INT 87
23046: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23047: LD_ADDR_EXP 101
23051: PUSH
23052: LD_INT 88
23054: ST_TO_ADDR
// class_mastodont := 31 ;
23055: LD_ADDR_EXP 102
23059: PUSH
23060: LD_INT 31
23062: ST_TO_ADDR
// class_horse := 21 ;
23063: LD_ADDR_EXP 103
23067: PUSH
23068: LD_INT 21
23070: ST_TO_ADDR
// end ;
23071: LD_VAR 0 1
23075: RET
// every 1 do
23076: GO 23078
23078: DISABLE
// InitGlobalVariables ; end_of_file
23079: CALL 22916 0 0
23083: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23084: LD_INT 0
23086: PPUSH
23087: PPUSH
// if exist_mode then
23088: LD_VAR 0 2
23092: IFFALSE 23117
// unit := CreateCharacter ( prefix & ident ) else
23094: LD_ADDR_VAR 0 5
23098: PUSH
23099: LD_VAR 0 3
23103: PUSH
23104: LD_VAR 0 1
23108: STR
23109: PPUSH
23110: CALL_OW 34
23114: ST_TO_ADDR
23115: GO 23132
// unit := NewCharacter ( ident ) ;
23117: LD_ADDR_VAR 0 5
23121: PUSH
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 25
23131: ST_TO_ADDR
// result := unit ;
23132: LD_ADDR_VAR 0 4
23136: PUSH
23137: LD_VAR 0 5
23141: ST_TO_ADDR
// end ;
23142: LD_VAR 0 4
23146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
// if not side or not nation then
23151: LD_VAR 0 1
23155: NOT
23156: PUSH
23157: LD_VAR 0 2
23161: NOT
23162: OR
23163: IFFALSE 23167
// exit ;
23165: GO 23935
// case nation of nation_american :
23167: LD_VAR 0 2
23171: PUSH
23172: LD_INT 1
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23394
23180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23181: LD_ADDR_VAR 0 4
23185: PUSH
23186: LD_INT 35
23188: PUSH
23189: LD_INT 45
23191: PUSH
23192: LD_INT 46
23194: PUSH
23195: LD_INT 47
23197: PUSH
23198: LD_INT 82
23200: PUSH
23201: LD_INT 83
23203: PUSH
23204: LD_INT 84
23206: PUSH
23207: LD_INT 85
23209: PUSH
23210: LD_INT 86
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 6
23221: PUSH
23222: LD_INT 15
23224: PUSH
23225: LD_INT 16
23227: PUSH
23228: LD_INT 7
23230: PUSH
23231: LD_INT 12
23233: PUSH
23234: LD_INT 13
23236: PUSH
23237: LD_INT 10
23239: PUSH
23240: LD_INT 14
23242: PUSH
23243: LD_INT 20
23245: PUSH
23246: LD_INT 21
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_INT 25
23254: PUSH
23255: LD_INT 32
23257: PUSH
23258: LD_INT 27
23260: PUSH
23261: LD_INT 36
23263: PUSH
23264: LD_INT 69
23266: PUSH
23267: LD_INT 39
23269: PUSH
23270: LD_INT 34
23272: PUSH
23273: LD_INT 40
23275: PUSH
23276: LD_INT 48
23278: PUSH
23279: LD_INT 49
23281: PUSH
23282: LD_INT 50
23284: PUSH
23285: LD_INT 51
23287: PUSH
23288: LD_INT 52
23290: PUSH
23291: LD_INT 53
23293: PUSH
23294: LD_INT 54
23296: PUSH
23297: LD_INT 55
23299: PUSH
23300: LD_INT 56
23302: PUSH
23303: LD_INT 57
23305: PUSH
23306: LD_INT 58
23308: PUSH
23309: LD_INT 59
23311: PUSH
23312: LD_INT 60
23314: PUSH
23315: LD_INT 61
23317: PUSH
23318: LD_INT 62
23320: PUSH
23321: LD_INT 80
23323: PUSH
23324: LD_INT 82
23326: PUSH
23327: LD_INT 83
23329: PUSH
23330: LD_INT 84
23332: PUSH
23333: LD_INT 85
23335: PUSH
23336: LD_INT 86
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
23392: GO 23859
23394: LD_INT 2
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23628
23402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23403: LD_ADDR_VAR 0 4
23407: PUSH
23408: LD_INT 35
23410: PUSH
23411: LD_INT 45
23413: PUSH
23414: LD_INT 46
23416: PUSH
23417: LD_INT 47
23419: PUSH
23420: LD_INT 82
23422: PUSH
23423: LD_INT 83
23425: PUSH
23426: LD_INT 84
23428: PUSH
23429: LD_INT 85
23431: PUSH
23432: LD_INT 87
23434: PUSH
23435: LD_INT 70
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 11
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: LD_INT 4
23449: PUSH
23450: LD_INT 5
23452: PUSH
23453: LD_INT 6
23455: PUSH
23456: LD_INT 15
23458: PUSH
23459: LD_INT 18
23461: PUSH
23462: LD_INT 7
23464: PUSH
23465: LD_INT 17
23467: PUSH
23468: LD_INT 8
23470: PUSH
23471: LD_INT 20
23473: PUSH
23474: LD_INT 21
23476: PUSH
23477: LD_INT 22
23479: PUSH
23480: LD_INT 72
23482: PUSH
23483: LD_INT 26
23485: PUSH
23486: LD_INT 69
23488: PUSH
23489: LD_INT 39
23491: PUSH
23492: LD_INT 40
23494: PUSH
23495: LD_INT 41
23497: PUSH
23498: LD_INT 42
23500: PUSH
23501: LD_INT 43
23503: PUSH
23504: LD_INT 48
23506: PUSH
23507: LD_INT 49
23509: PUSH
23510: LD_INT 50
23512: PUSH
23513: LD_INT 51
23515: PUSH
23516: LD_INT 52
23518: PUSH
23519: LD_INT 53
23521: PUSH
23522: LD_INT 54
23524: PUSH
23525: LD_INT 55
23527: PUSH
23528: LD_INT 56
23530: PUSH
23531: LD_INT 60
23533: PUSH
23534: LD_INT 61
23536: PUSH
23537: LD_INT 62
23539: PUSH
23540: LD_INT 66
23542: PUSH
23543: LD_INT 67
23545: PUSH
23546: LD_INT 68
23548: PUSH
23549: LD_INT 81
23551: PUSH
23552: LD_INT 82
23554: PUSH
23555: LD_INT 83
23557: PUSH
23558: LD_INT 84
23560: PUSH
23561: LD_INT 85
23563: PUSH
23564: LD_INT 87
23566: PUSH
23567: LD_INT 88
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: ST_TO_ADDR
23626: GO 23859
23628: LD_INT 3
23630: DOUBLE
23631: EQUAL
23632: IFTRUE 23636
23634: GO 23858
23636: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23637: LD_ADDR_VAR 0 4
23641: PUSH
23642: LD_INT 46
23644: PUSH
23645: LD_INT 47
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 82
23656: PUSH
23657: LD_INT 83
23659: PUSH
23660: LD_INT 84
23662: PUSH
23663: LD_INT 85
23665: PUSH
23666: LD_INT 86
23668: PUSH
23669: LD_INT 11
23671: PUSH
23672: LD_INT 9
23674: PUSH
23675: LD_INT 20
23677: PUSH
23678: LD_INT 19
23680: PUSH
23681: LD_INT 21
23683: PUSH
23684: LD_INT 24
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_INT 25
23692: PUSH
23693: LD_INT 28
23695: PUSH
23696: LD_INT 29
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 37
23707: PUSH
23708: LD_INT 38
23710: PUSH
23711: LD_INT 32
23713: PUSH
23714: LD_INT 27
23716: PUSH
23717: LD_INT 33
23719: PUSH
23720: LD_INT 69
23722: PUSH
23723: LD_INT 39
23725: PUSH
23726: LD_INT 34
23728: PUSH
23729: LD_INT 40
23731: PUSH
23732: LD_INT 71
23734: PUSH
23735: LD_INT 23
23737: PUSH
23738: LD_INT 44
23740: PUSH
23741: LD_INT 48
23743: PUSH
23744: LD_INT 49
23746: PUSH
23747: LD_INT 50
23749: PUSH
23750: LD_INT 51
23752: PUSH
23753: LD_INT 52
23755: PUSH
23756: LD_INT 53
23758: PUSH
23759: LD_INT 54
23761: PUSH
23762: LD_INT 55
23764: PUSH
23765: LD_INT 56
23767: PUSH
23768: LD_INT 57
23770: PUSH
23771: LD_INT 58
23773: PUSH
23774: LD_INT 59
23776: PUSH
23777: LD_INT 63
23779: PUSH
23780: LD_INT 64
23782: PUSH
23783: LD_INT 65
23785: PUSH
23786: LD_INT 82
23788: PUSH
23789: LD_INT 83
23791: PUSH
23792: LD_INT 84
23794: PUSH
23795: LD_INT 85
23797: PUSH
23798: LD_INT 86
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 23859
23858: POP
// if state > - 1 and state < 3 then
23859: LD_VAR 0 3
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: GREATER
23868: PUSH
23869: LD_VAR 0 3
23873: PUSH
23874: LD_INT 3
23876: LESS
23877: AND
23878: IFFALSE 23935
// for i in result do
23880: LD_ADDR_VAR 0 5
23884: PUSH
23885: LD_VAR 0 4
23889: PUSH
23890: FOR_IN
23891: IFFALSE 23933
// if GetTech ( i , side ) <> state then
23893: LD_VAR 0 5
23897: PPUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 321
23907: PUSH
23908: LD_VAR 0 3
23912: NONEQUAL
23913: IFFALSE 23931
// result := result diff i ;
23915: LD_ADDR_VAR 0 4
23919: PUSH
23920: LD_VAR 0 4
23924: PUSH
23925: LD_VAR 0 5
23929: DIFF
23930: ST_TO_ADDR
23931: GO 23890
23933: POP
23934: POP
// end ;
23935: LD_VAR 0 4
23939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23940: LD_INT 0
23942: PPUSH
23943: PPUSH
23944: PPUSH
// result := true ;
23945: LD_ADDR_VAR 0 3
23949: PUSH
23950: LD_INT 1
23952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23953: LD_ADDR_VAR 0 5
23957: PUSH
23958: LD_VAR 0 2
23962: PPUSH
23963: CALL_OW 480
23967: ST_TO_ADDR
// if not tmp then
23968: LD_VAR 0 5
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24026
// for i in tmp do
23977: LD_ADDR_VAR 0 4
23981: PUSH
23982: LD_VAR 0 5
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24024
// if GetTech ( i , side ) <> state_researched then
23990: LD_VAR 0 4
23994: PPUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 321
24004: PUSH
24005: LD_INT 2
24007: NONEQUAL
24008: IFFALSE 24022
// begin result := false ;
24010: LD_ADDR_VAR 0 3
24014: PUSH
24015: LD_INT 0
24017: ST_TO_ADDR
// exit ;
24018: POP
24019: POP
24020: GO 24026
// end ;
24022: GO 23987
24024: POP
24025: POP
// end ;
24026: LD_VAR 0 3
24030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24031: LD_INT 0
24033: PPUSH
24034: PPUSH
24035: PPUSH
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
24040: PPUSH
24041: PPUSH
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24046: LD_VAR 0 1
24050: NOT
24051: PUSH
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL_OW 257
24061: PUSH
24062: LD_INT 9
24064: NONEQUAL
24065: OR
24066: IFFALSE 24070
// exit ;
24068: GO 24643
// side := GetSide ( unit ) ;
24070: LD_ADDR_VAR 0 9
24074: PUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 255
24084: ST_TO_ADDR
// tech_space := tech_spacanom ;
24085: LD_ADDR_VAR 0 12
24089: PUSH
24090: LD_INT 29
24092: ST_TO_ADDR
// tech_time := tech_taurad ;
24093: LD_ADDR_VAR 0 13
24097: PUSH
24098: LD_INT 28
24100: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24101: LD_ADDR_VAR 0 11
24105: PUSH
24106: LD_VAR 0 1
24110: PPUSH
24111: CALL_OW 310
24115: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24116: LD_VAR 0 11
24120: PPUSH
24121: CALL_OW 247
24125: PUSH
24126: LD_INT 2
24128: EQUAL
24129: IFFALSE 24133
// exit ;
24131: GO 24643
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24133: LD_ADDR_VAR 0 8
24137: PUSH
24138: LD_INT 81
24140: PUSH
24141: LD_VAR 0 9
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 21
24155: PUSH
24156: LD_INT 3
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PPUSH
24171: CALL_OW 69
24175: ST_TO_ADDR
// if not tmp then
24176: LD_VAR 0 8
24180: NOT
24181: IFFALSE 24185
// exit ;
24183: GO 24643
// if in_unit then
24185: LD_VAR 0 11
24189: IFFALSE 24213
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24191: LD_ADDR_VAR 0 10
24195: PUSH
24196: LD_VAR 0 8
24200: PPUSH
24201: LD_VAR 0 11
24205: PPUSH
24206: CALL_OW 74
24210: ST_TO_ADDR
24211: GO 24233
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24213: LD_ADDR_VAR 0 10
24217: PUSH
24218: LD_VAR 0 8
24222: PPUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 74
24232: ST_TO_ADDR
// if not enemy then
24233: LD_VAR 0 10
24237: NOT
24238: IFFALSE 24242
// exit ;
24240: GO 24643
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24242: LD_VAR 0 11
24246: PUSH
24247: LD_VAR 0 11
24251: PPUSH
24252: LD_VAR 0 10
24256: PPUSH
24257: CALL_OW 296
24261: PUSH
24262: LD_INT 13
24264: GREATER
24265: AND
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: LD_VAR 0 10
24276: PPUSH
24277: CALL_OW 296
24281: PUSH
24282: LD_INT 12
24284: GREATER
24285: OR
24286: IFFALSE 24290
// exit ;
24288: GO 24643
// missile := [ 1 ] ;
24290: LD_ADDR_VAR 0 14
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24301: LD_VAR 0 9
24305: PPUSH
24306: LD_VAR 0 12
24310: PPUSH
24311: CALL_OW 325
24315: IFFALSE 24344
// missile := Insert ( missile , missile + 1 , 2 ) ;
24317: LD_ADDR_VAR 0 14
24321: PUSH
24322: LD_VAR 0 14
24326: PPUSH
24327: LD_VAR 0 14
24331: PUSH
24332: LD_INT 1
24334: PLUS
24335: PPUSH
24336: LD_INT 2
24338: PPUSH
24339: CALL_OW 2
24343: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24344: LD_VAR 0 9
24348: PPUSH
24349: LD_VAR 0 13
24353: PPUSH
24354: CALL_OW 325
24358: PUSH
24359: LD_VAR 0 10
24363: PPUSH
24364: CALL_OW 255
24368: PPUSH
24369: LD_VAR 0 13
24373: PPUSH
24374: CALL_OW 325
24378: NOT
24379: AND
24380: IFFALSE 24409
// missile := Insert ( missile , missile + 1 , 3 ) ;
24382: LD_ADDR_VAR 0 14
24386: PUSH
24387: LD_VAR 0 14
24391: PPUSH
24392: LD_VAR 0 14
24396: PUSH
24397: LD_INT 1
24399: PLUS
24400: PPUSH
24401: LD_INT 3
24403: PPUSH
24404: CALL_OW 2
24408: ST_TO_ADDR
// if missile < 2 then
24409: LD_VAR 0 14
24413: PUSH
24414: LD_INT 2
24416: LESS
24417: IFFALSE 24421
// exit ;
24419: GO 24643
// x := GetX ( enemy ) ;
24421: LD_ADDR_VAR 0 4
24425: PUSH
24426: LD_VAR 0 10
24430: PPUSH
24431: CALL_OW 250
24435: ST_TO_ADDR
// y := GetY ( enemy ) ;
24436: LD_ADDR_VAR 0 5
24440: PUSH
24441: LD_VAR 0 10
24445: PPUSH
24446: CALL_OW 251
24450: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24451: LD_ADDR_VAR 0 6
24455: PUSH
24456: LD_VAR 0 4
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 12
24472: PLUS
24473: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24474: LD_ADDR_VAR 0 7
24478: PUSH
24479: LD_VAR 0 5
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PPUSH
24488: LD_INT 1
24490: PPUSH
24491: CALL_OW 12
24495: PLUS
24496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24497: LD_VAR 0 6
24501: PPUSH
24502: LD_VAR 0 7
24506: PPUSH
24507: CALL_OW 488
24511: NOT
24512: IFFALSE 24534
// begin _x := x ;
24514: LD_ADDR_VAR 0 6
24518: PUSH
24519: LD_VAR 0 4
24523: ST_TO_ADDR
// _y := y ;
24524: LD_ADDR_VAR 0 7
24528: PUSH
24529: LD_VAR 0 5
24533: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24534: LD_ADDR_VAR 0 3
24538: PUSH
24539: LD_INT 1
24541: PPUSH
24542: LD_VAR 0 14
24546: PPUSH
24547: CALL_OW 12
24551: ST_TO_ADDR
// case i of 1 :
24552: LD_VAR 0 3
24556: PUSH
24557: LD_INT 1
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24582
24565: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24566: LD_VAR 0 1
24570: PPUSH
24571: LD_VAR 0 10
24575: PPUSH
24576: CALL_OW 115
24580: GO 24643
24582: LD_INT 2
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24612
24590: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24591: LD_VAR 0 1
24595: PPUSH
24596: LD_VAR 0 6
24600: PPUSH
24601: LD_VAR 0 7
24605: PPUSH
24606: CALL_OW 153
24610: GO 24643
24612: LD_INT 3
24614: DOUBLE
24615: EQUAL
24616: IFTRUE 24620
24618: GO 24642
24620: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24621: LD_VAR 0 1
24625: PPUSH
24626: LD_VAR 0 6
24630: PPUSH
24631: LD_VAR 0 7
24635: PPUSH
24636: CALL_OW 154
24640: GO 24643
24642: POP
// end ;
24643: LD_VAR 0 2
24647: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24648: LD_INT 0
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
// if not unit or not building then
24656: LD_VAR 0 1
24660: NOT
24661: PUSH
24662: LD_VAR 0 2
24666: NOT
24667: OR
24668: IFFALSE 24672
// exit ;
24670: GO 24830
// x := GetX ( building ) ;
24672: LD_ADDR_VAR 0 5
24676: PUSH
24677: LD_VAR 0 2
24681: PPUSH
24682: CALL_OW 250
24686: ST_TO_ADDR
// y := GetY ( building ) ;
24687: LD_ADDR_VAR 0 6
24691: PUSH
24692: LD_VAR 0 2
24696: PPUSH
24697: CALL_OW 251
24701: ST_TO_ADDR
// for i = 0 to 5 do
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: DOUBLE
24708: LD_INT 0
24710: DEC
24711: ST_TO_ADDR
24712: LD_INT 5
24714: PUSH
24715: FOR_TO
24716: IFFALSE 24828
// begin _x := ShiftX ( x , i , 3 ) ;
24718: LD_ADDR_VAR 0 7
24722: PUSH
24723: LD_VAR 0 5
24727: PPUSH
24728: LD_VAR 0 4
24732: PPUSH
24733: LD_INT 3
24735: PPUSH
24736: CALL_OW 272
24740: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24741: LD_ADDR_VAR 0 8
24745: PUSH
24746: LD_VAR 0 6
24750: PPUSH
24751: LD_VAR 0 4
24755: PPUSH
24756: LD_INT 3
24758: PPUSH
24759: CALL_OW 273
24763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24764: LD_VAR 0 7
24768: PPUSH
24769: LD_VAR 0 8
24773: PPUSH
24774: CALL_OW 488
24778: NOT
24779: IFFALSE 24783
// continue ;
24781: GO 24715
// if HexInfo ( _x , _y ) = 0 then
24783: LD_VAR 0 7
24787: PPUSH
24788: LD_VAR 0 8
24792: PPUSH
24793: CALL_OW 428
24797: PUSH
24798: LD_INT 0
24800: EQUAL
24801: IFFALSE 24826
// begin ComMoveXY ( unit , _x , _y ) ;
24803: LD_VAR 0 1
24807: PPUSH
24808: LD_VAR 0 7
24812: PPUSH
24813: LD_VAR 0 8
24817: PPUSH
24818: CALL_OW 111
// exit ;
24822: POP
24823: POP
24824: GO 24830
// end ; end ;
24826: GO 24715
24828: POP
24829: POP
// end ;
24830: LD_VAR 0 3
24834: RET
// export function ScanBase ( side , base_area ) ; begin
24835: LD_INT 0
24837: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_VAR 0 2
24847: PPUSH
24848: LD_INT 81
24850: PUSH
24851: LD_VAR 0 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PPUSH
24860: CALL_OW 70
24864: ST_TO_ADDR
// end ;
24865: LD_VAR 0 3
24869: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
24874: PPUSH
24875: PPUSH
// result := false ;
24876: LD_ADDR_VAR 0 2
24880: PUSH
24881: LD_INT 0
24883: ST_TO_ADDR
// side := GetSide ( unit ) ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_VAR 0 1
24893: PPUSH
24894: CALL_OW 255
24898: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24899: LD_ADDR_VAR 0 4
24903: PUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: CALL_OW 248
24913: ST_TO_ADDR
// case nat of 1 :
24914: LD_VAR 0 4
24918: PUSH
24919: LD_INT 1
24921: DOUBLE
24922: EQUAL
24923: IFTRUE 24927
24925: GO 24938
24927: POP
// tech := tech_lassight ; 2 :
24928: LD_ADDR_VAR 0 5
24932: PUSH
24933: LD_INT 12
24935: ST_TO_ADDR
24936: GO 24977
24938: LD_INT 2
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 24957
24946: POP
// tech := tech_mortar ; 3 :
24947: LD_ADDR_VAR 0 5
24951: PUSH
24952: LD_INT 41
24954: ST_TO_ADDR
24955: GO 24977
24957: LD_INT 3
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24976
24965: POP
// tech := tech_bazooka ; end ;
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: LD_INT 44
24973: ST_TO_ADDR
24974: GO 24977
24976: POP
// if Researched ( side , tech ) then
24977: LD_VAR 0 3
24981: PPUSH
24982: LD_VAR 0 5
24986: PPUSH
24987: CALL_OW 325
24991: IFFALSE 25018
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24993: LD_ADDR_VAR 0 2
24997: PUSH
24998: LD_INT 5
25000: PUSH
25001: LD_INT 8
25003: PUSH
25004: LD_INT 9
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: LIST
25011: PUSH
25012: LD_VAR 0 4
25016: ARRAY
25017: ST_TO_ADDR
// end ;
25018: LD_VAR 0 2
25022: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25023: LD_INT 0
25025: PPUSH
25026: PPUSH
25027: PPUSH
// if not mines then
25028: LD_VAR 0 2
25032: NOT
25033: IFFALSE 25037
// exit ;
25035: GO 25181
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25037: LD_ADDR_VAR 0 5
25041: PUSH
25042: LD_INT 81
25044: PUSH
25045: LD_VAR 0 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: LD_INT 21
25059: PUSH
25060: LD_INT 3
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PPUSH
25075: CALL_OW 69
25079: ST_TO_ADDR
// for i in mines do
25080: LD_ADDR_VAR 0 4
25084: PUSH
25085: LD_VAR 0 2
25089: PUSH
25090: FOR_IN
25091: IFFALSE 25179
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25093: LD_VAR 0 4
25097: PUSH
25098: LD_INT 1
25100: ARRAY
25101: PPUSH
25102: LD_VAR 0 4
25106: PUSH
25107: LD_INT 2
25109: ARRAY
25110: PPUSH
25111: CALL_OW 458
25115: NOT
25116: IFFALSE 25120
// continue ;
25118: GO 25090
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25120: LD_VAR 0 4
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PPUSH
25129: LD_VAR 0 4
25133: PUSH
25134: LD_INT 2
25136: ARRAY
25137: PPUSH
25138: CALL_OW 428
25142: PUSH
25143: LD_VAR 0 5
25147: IN
25148: IFFALSE 25177
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25150: LD_VAR 0 4
25154: PUSH
25155: LD_INT 1
25157: ARRAY
25158: PPUSH
25159: LD_VAR 0 4
25163: PUSH
25164: LD_INT 2
25166: ARRAY
25167: PPUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 456
// end ;
25177: GO 25090
25179: POP
25180: POP
// end ;
25181: LD_VAR 0 3
25185: RET
// export function Count ( array ) ; var i ; begin
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
// result := 0 ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_INT 0
25197: ST_TO_ADDR
// for i in array do
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: LD_VAR 0 1
25207: PUSH
25208: FOR_IN
25209: IFFALSE 25233
// if i then
25211: LD_VAR 0 3
25215: IFFALSE 25231
// result := result + 1 ;
25217: LD_ADDR_VAR 0 2
25221: PUSH
25222: LD_VAR 0 2
25226: PUSH
25227: LD_INT 1
25229: PLUS
25230: ST_TO_ADDR
25231: GO 25208
25233: POP
25234: POP
// end ;
25235: LD_VAR 0 2
25239: RET
// export function IsEmpty ( building ) ; begin
25240: LD_INT 0
25242: PPUSH
// if not building then
25243: LD_VAR 0 1
25247: NOT
25248: IFFALSE 25252
// exit ;
25250: GO 25295
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25252: LD_ADDR_VAR 0 2
25256: PUSH
25257: LD_VAR 0 1
25261: PUSH
25262: LD_INT 22
25264: PUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 255
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 58
25281: PUSH
25282: EMPTY
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PPUSH
25289: CALL_OW 69
25293: IN
25294: ST_TO_ADDR
// end ;
25295: LD_VAR 0 2
25299: RET
// export function IsNotFull ( building ) ; begin
25300: LD_INT 0
25302: PPUSH
// if not building then
25303: LD_VAR 0 1
25307: NOT
25308: IFFALSE 25312
// exit ;
25310: GO 25331
// result := UnitsInside ( building ) < 6 ;
25312: LD_ADDR_VAR 0 2
25316: PUSH
25317: LD_VAR 0 1
25321: PPUSH
25322: CALL_OW 313
25326: PUSH
25327: LD_INT 6
25329: LESS
25330: ST_TO_ADDR
// end ;
25331: LD_VAR 0 2
25335: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
25340: PPUSH
25341: PPUSH
// tmp := [ ] ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: EMPTY
25348: ST_TO_ADDR
// list := [ ] ;
25349: LD_ADDR_VAR 0 5
25353: PUSH
25354: EMPTY
25355: ST_TO_ADDR
// for i = 16 to 25 do
25356: LD_ADDR_VAR 0 4
25360: PUSH
25361: DOUBLE
25362: LD_INT 16
25364: DEC
25365: ST_TO_ADDR
25366: LD_INT 25
25368: PUSH
25369: FOR_TO
25370: IFFALSE 25443
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: LD_VAR 0 3
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_VAR 0 1
25389: PPUSH
25390: CALL_OW 255
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 91
25401: PUSH
25402: LD_VAR 0 1
25406: PUSH
25407: LD_INT 6
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 30
25417: PUSH
25418: LD_VAR 0 4
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: PPUSH
25435: CALL_OW 69
25439: ADD
25440: ST_TO_ADDR
25441: GO 25369
25443: POP
25444: POP
// for i = 1 to tmp do
25445: LD_ADDR_VAR 0 4
25449: PUSH
25450: DOUBLE
25451: LD_INT 1
25453: DEC
25454: ST_TO_ADDR
25455: LD_VAR 0 3
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25549
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25463: LD_ADDR_VAR 0 5
25467: PUSH
25468: LD_VAR 0 5
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_VAR 0 4
25482: ARRAY
25483: PPUSH
25484: CALL_OW 266
25488: PUSH
25489: LD_VAR 0 3
25493: PUSH
25494: LD_VAR 0 4
25498: ARRAY
25499: PPUSH
25500: CALL_OW 250
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: LD_VAR 0 4
25514: ARRAY
25515: PPUSH
25516: CALL_OW 251
25520: PUSH
25521: LD_VAR 0 3
25525: PUSH
25526: LD_VAR 0 4
25530: ARRAY
25531: PPUSH
25532: CALL_OW 254
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: ADD
25546: ST_TO_ADDR
25547: GO 25460
25549: POP
25550: POP
// result := list ;
25551: LD_ADDR_VAR 0 2
25555: PUSH
25556: LD_VAR 0 5
25560: ST_TO_ADDR
// end ;
25561: LD_VAR 0 2
25565: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25566: LD_INT 0
25568: PPUSH
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
// if not factory then
25575: LD_VAR 0 1
25579: NOT
25580: IFFALSE 25584
// exit ;
25582: GO 26177
// if control = control_apeman then
25584: LD_VAR 0 4
25588: PUSH
25589: LD_INT 5
25591: EQUAL
25592: IFFALSE 25701
// begin tmp := UnitsInside ( factory ) ;
25594: LD_ADDR_VAR 0 8
25598: PUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 313
25608: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25609: LD_VAR 0 8
25613: PPUSH
25614: LD_INT 25
25616: PUSH
25617: LD_INT 12
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PPUSH
25624: CALL_OW 72
25628: NOT
25629: IFFALSE 25639
// control := control_manual ;
25631: LD_ADDR_VAR 0 4
25635: PUSH
25636: LD_INT 1
25638: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25639: LD_ADDR_VAR 0 8
25643: PUSH
25644: LD_VAR 0 1
25648: PPUSH
25649: CALL 25336 0 1
25653: ST_TO_ADDR
// if tmp then
25654: LD_VAR 0 8
25658: IFFALSE 25701
// begin for i in tmp do
25660: LD_ADDR_VAR 0 7
25664: PUSH
25665: LD_VAR 0 8
25669: PUSH
25670: FOR_IN
25671: IFFALSE 25699
// if i [ 1 ] = b_ext_radio then
25673: LD_VAR 0 7
25677: PUSH
25678: LD_INT 1
25680: ARRAY
25681: PUSH
25682: LD_INT 22
25684: EQUAL
25685: IFFALSE 25697
// begin control := control_remote ;
25687: LD_ADDR_VAR 0 4
25691: PUSH
25692: LD_INT 2
25694: ST_TO_ADDR
// break ;
25695: GO 25699
// end ;
25697: GO 25670
25699: POP
25700: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25701: LD_VAR 0 1
25705: PPUSH
25706: LD_VAR 0 2
25710: PPUSH
25711: LD_VAR 0 3
25715: PPUSH
25716: LD_VAR 0 4
25720: PPUSH
25721: LD_VAR 0 5
25725: PPUSH
25726: CALL_OW 448
25730: IFFALSE 25765
// begin result := [ chassis , engine , control , weapon ] ;
25732: LD_ADDR_VAR 0 6
25736: PUSH
25737: LD_VAR 0 2
25741: PUSH
25742: LD_VAR 0 3
25746: PUSH
25747: LD_VAR 0 4
25751: PUSH
25752: LD_VAR 0 5
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
// exit ;
25763: GO 26177
// end ; _chassis := AvailableChassisList ( factory ) ;
25765: LD_ADDR_VAR 0 9
25769: PUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 475
25779: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25780: LD_ADDR_VAR 0 11
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 476
25794: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25795: LD_ADDR_VAR 0 12
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 477
25809: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25810: LD_ADDR_VAR 0 10
25814: PUSH
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 478
25824: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25825: LD_VAR 0 9
25829: NOT
25830: PUSH
25831: LD_VAR 0 11
25835: NOT
25836: OR
25837: PUSH
25838: LD_VAR 0 12
25842: NOT
25843: OR
25844: PUSH
25845: LD_VAR 0 10
25849: NOT
25850: OR
25851: IFFALSE 25886
// begin result := [ chassis , engine , control , weapon ] ;
25853: LD_ADDR_VAR 0 6
25857: PUSH
25858: LD_VAR 0 2
25862: PUSH
25863: LD_VAR 0 3
25867: PUSH
25868: LD_VAR 0 4
25872: PUSH
25873: LD_VAR 0 5
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// exit ;
25884: GO 26177
// end ; if not chassis in _chassis then
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 9
25895: IN
25896: NOT
25897: IFFALSE 25923
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25899: LD_ADDR_VAR 0 2
25903: PUSH
25904: LD_VAR 0 9
25908: PUSH
25909: LD_INT 1
25911: PPUSH
25912: LD_VAR 0 9
25916: PPUSH
25917: CALL_OW 12
25921: ARRAY
25922: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25923: LD_VAR 0 2
25927: PPUSH
25928: LD_VAR 0 3
25932: PPUSH
25933: CALL 26182 0 2
25937: NOT
25938: IFFALSE 25997
// repeat engine := _engine [ 1 ] ;
25940: LD_ADDR_VAR 0 3
25944: PUSH
25945: LD_VAR 0 11
25949: PUSH
25950: LD_INT 1
25952: ARRAY
25953: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25954: LD_ADDR_VAR 0 11
25958: PUSH
25959: LD_VAR 0 11
25963: PPUSH
25964: LD_INT 1
25966: PPUSH
25967: CALL_OW 3
25971: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25972: LD_VAR 0 2
25976: PPUSH
25977: LD_VAR 0 3
25981: PPUSH
25982: CALL 26182 0 2
25986: PUSH
25987: LD_VAR 0 11
25991: PUSH
25992: EMPTY
25993: EQUAL
25994: OR
25995: IFFALSE 25940
// if not control in _control then
25997: LD_VAR 0 4
26001: PUSH
26002: LD_VAR 0 12
26006: IN
26007: NOT
26008: IFFALSE 26034
// control := _control [ rand ( 1 , _control ) ] ;
26010: LD_ADDR_VAR 0 4
26014: PUSH
26015: LD_VAR 0 12
26019: PUSH
26020: LD_INT 1
26022: PPUSH
26023: LD_VAR 0 12
26027: PPUSH
26028: CALL_OW 12
26032: ARRAY
26033: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26034: LD_VAR 0 2
26038: PPUSH
26039: LD_VAR 0 5
26043: PPUSH
26044: CALL 26402 0 2
26048: NOT
26049: IFFALSE 26108
// repeat weapon := _weapon [ 1 ] ;
26051: LD_ADDR_VAR 0 5
26055: PUSH
26056: LD_VAR 0 10
26060: PUSH
26061: LD_INT 1
26063: ARRAY
26064: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26065: LD_ADDR_VAR 0 10
26069: PUSH
26070: LD_VAR 0 10
26074: PPUSH
26075: LD_INT 1
26077: PPUSH
26078: CALL_OW 3
26082: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_VAR 0 5
26092: PPUSH
26093: CALL 26402 0 2
26097: PUSH
26098: LD_VAR 0 10
26102: PUSH
26103: EMPTY
26104: EQUAL
26105: OR
26106: IFFALSE 26051
// result := [ ] ;
26108: LD_ADDR_VAR 0 6
26112: PUSH
26113: EMPTY
26114: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_VAR 0 2
26124: PPUSH
26125: LD_VAR 0 3
26129: PPUSH
26130: LD_VAR 0 4
26134: PPUSH
26135: LD_VAR 0 5
26139: PPUSH
26140: CALL_OW 448
26144: IFFALSE 26177
// result := [ chassis , engine , control , weapon ] ;
26146: LD_ADDR_VAR 0 6
26150: PUSH
26151: LD_VAR 0 2
26155: PUSH
26156: LD_VAR 0 3
26160: PUSH
26161: LD_VAR 0 4
26165: PUSH
26166: LD_VAR 0 5
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// end ;
26177: LD_VAR 0 6
26181: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26182: LD_INT 0
26184: PPUSH
// if not chassis or not engine then
26185: LD_VAR 0 1
26189: NOT
26190: PUSH
26191: LD_VAR 0 2
26195: NOT
26196: OR
26197: IFFALSE 26201
// exit ;
26199: GO 26397
// case engine of engine_solar :
26201: LD_VAR 0 2
26205: PUSH
26206: LD_INT 2
26208: DOUBLE
26209: EQUAL
26210: IFTRUE 26214
26212: GO 26252
26214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26215: LD_ADDR_VAR 0 3
26219: PUSH
26220: LD_INT 11
26222: PUSH
26223: LD_INT 12
26225: PUSH
26226: LD_INT 13
26228: PUSH
26229: LD_INT 14
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
26250: GO 26381
26252: LD_INT 1
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26322
26260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_INT 11
26268: PUSH
26269: LD_INT 12
26271: PUSH
26272: LD_INT 13
26274: PUSH
26275: LD_INT 14
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 4
26289: PUSH
26290: LD_INT 5
26292: PUSH
26293: LD_INT 21
26295: PUSH
26296: LD_INT 23
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_INT 24
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
26320: GO 26381
26322: LD_INT 3
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26380
26330: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_INT 13
26338: PUSH
26339: LD_INT 14
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: LD_INT 4
26350: PUSH
26351: LD_INT 5
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_INT 23
26362: PUSH
26363: LD_INT 24
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
26378: GO 26381
26380: POP
// result := ( chassis in result ) ;
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: LD_VAR 0 1
26390: PUSH
26391: LD_VAR 0 3
26395: IN
26396: ST_TO_ADDR
// end ;
26397: LD_VAR 0 3
26401: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26402: LD_INT 0
26404: PPUSH
// if not chassis or not weapon then
26405: LD_VAR 0 1
26409: NOT
26410: PUSH
26411: LD_VAR 0 2
26415: NOT
26416: OR
26417: IFFALSE 26421
// exit ;
26419: GO 27483
// case weapon of us_machine_gun :
26421: LD_VAR 0 2
26425: PUSH
26426: LD_INT 2
26428: DOUBLE
26429: EQUAL
26430: IFTRUE 26434
26432: GO 26464
26434: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26435: LD_ADDR_VAR 0 3
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: LD_INT 4
26451: PUSH
26452: LD_INT 5
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
26462: GO 27467
26464: LD_INT 3
26466: DOUBLE
26467: EQUAL
26468: IFTRUE 26472
26470: GO 26502
26472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 3
26486: PUSH
26487: LD_INT 4
26489: PUSH
26490: LD_INT 5
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: ST_TO_ADDR
26500: GO 27467
26502: LD_INT 11
26504: DOUBLE
26505: EQUAL
26506: IFTRUE 26510
26508: GO 26540
26510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26511: LD_ADDR_VAR 0 3
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 3
26524: PUSH
26525: LD_INT 4
26527: PUSH
26528: LD_INT 5
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: ST_TO_ADDR
26538: GO 27467
26540: LD_INT 4
26542: DOUBLE
26543: EQUAL
26544: IFTRUE 26548
26546: GO 26574
26548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26549: LD_ADDR_VAR 0 3
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: LD_INT 3
26559: PUSH
26560: LD_INT 4
26562: PUSH
26563: LD_INT 5
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
26572: GO 27467
26574: LD_INT 5
26576: DOUBLE
26577: EQUAL
26578: IFTRUE 26582
26580: GO 26608
26582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: LD_INT 4
26596: PUSH
26597: LD_INT 5
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 27467
26608: LD_INT 9
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26642
26616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: LD_INT 4
26630: PUSH
26631: LD_INT 5
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: ST_TO_ADDR
26640: GO 27467
26642: LD_INT 7
26644: DOUBLE
26645: EQUAL
26646: IFTRUE 26650
26648: GO 26676
26650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 4
26664: PUSH
26665: LD_INT 5
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: ST_TO_ADDR
26674: GO 27467
26676: LD_INT 12
26678: DOUBLE
26679: EQUAL
26680: IFTRUE 26684
26682: GO 26710
26684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26685: LD_ADDR_VAR 0 3
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 4
26698: PUSH
26699: LD_INT 5
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
26708: GO 27467
26710: LD_INT 13
26712: DOUBLE
26713: EQUAL
26714: IFTRUE 26718
26716: GO 26744
26718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: LD_INT 3
26729: PUSH
26730: LD_INT 4
26732: PUSH
26733: LD_INT 5
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
26742: GO 27467
26744: LD_INT 14
26746: DOUBLE
26747: EQUAL
26748: IFTRUE 26752
26750: GO 26770
26752: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26753: LD_ADDR_VAR 0 3
26757: PUSH
26758: LD_INT 4
26760: PUSH
26761: LD_INT 5
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: ST_TO_ADDR
26768: GO 27467
26770: LD_INT 6
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26796
26778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26779: LD_ADDR_VAR 0 3
26783: PUSH
26784: LD_INT 4
26786: PUSH
26787: LD_INT 5
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: ST_TO_ADDR
26794: GO 27467
26796: LD_INT 10
26798: DOUBLE
26799: EQUAL
26800: IFTRUE 26804
26802: GO 26822
26804: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26805: LD_ADDR_VAR 0 3
26809: PUSH
26810: LD_INT 4
26812: PUSH
26813: LD_INT 5
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: ST_TO_ADDR
26820: GO 27467
26822: LD_INT 22
26824: DOUBLE
26825: EQUAL
26826: IFTRUE 26830
26828: GO 26856
26830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_INT 11
26838: PUSH
26839: LD_INT 12
26841: PUSH
26842: LD_INT 13
26844: PUSH
26845: LD_INT 14
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: ST_TO_ADDR
26854: GO 27467
26856: LD_INT 23
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26864
26862: GO 26890
26864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26865: LD_ADDR_VAR 0 3
26869: PUSH
26870: LD_INT 11
26872: PUSH
26873: LD_INT 12
26875: PUSH
26876: LD_INT 13
26878: PUSH
26879: LD_INT 14
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: ST_TO_ADDR
26888: GO 27467
26890: LD_INT 24
26892: DOUBLE
26893: EQUAL
26894: IFTRUE 26898
26896: GO 26924
26898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 11
26906: PUSH
26907: LD_INT 12
26909: PUSH
26910: LD_INT 13
26912: PUSH
26913: LD_INT 14
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
26922: GO 27467
26924: LD_INT 30
26926: DOUBLE
26927: EQUAL
26928: IFTRUE 26932
26930: GO 26958
26932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26933: LD_ADDR_VAR 0 3
26937: PUSH
26938: LD_INT 11
26940: PUSH
26941: LD_INT 12
26943: PUSH
26944: LD_INT 13
26946: PUSH
26947: LD_INT 14
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: ST_TO_ADDR
26956: GO 27467
26958: LD_INT 25
26960: DOUBLE
26961: EQUAL
26962: IFTRUE 26966
26964: GO 26984
26966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26967: LD_ADDR_VAR 0 3
26971: PUSH
26972: LD_INT 13
26974: PUSH
26975: LD_INT 14
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: ST_TO_ADDR
26982: GO 27467
26984: LD_INT 27
26986: DOUBLE
26987: EQUAL
26988: IFTRUE 26992
26990: GO 27010
26992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26993: LD_ADDR_VAR 0 3
26997: PUSH
26998: LD_INT 13
27000: PUSH
27001: LD_INT 14
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: ST_TO_ADDR
27008: GO 27467
27010: LD_EXP 90
27014: DOUBLE
27015: EQUAL
27016: IFTRUE 27020
27018: GO 27046
27020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27021: LD_ADDR_VAR 0 3
27025: PUSH
27026: LD_INT 11
27028: PUSH
27029: LD_INT 12
27031: PUSH
27032: LD_INT 13
27034: PUSH
27035: LD_INT 14
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: ST_TO_ADDR
27044: GO 27467
27046: LD_INT 28
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27072
27054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 13
27062: PUSH
27063: LD_INT 14
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: ST_TO_ADDR
27070: GO 27467
27072: LD_INT 29
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 27098
27080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27081: LD_ADDR_VAR 0 3
27085: PUSH
27086: LD_INT 13
27088: PUSH
27089: LD_INT 14
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: ST_TO_ADDR
27096: GO 27467
27098: LD_INT 31
27100: DOUBLE
27101: EQUAL
27102: IFTRUE 27106
27104: GO 27124
27106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27107: LD_ADDR_VAR 0 3
27111: PUSH
27112: LD_INT 13
27114: PUSH
27115: LD_INT 14
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: ST_TO_ADDR
27122: GO 27467
27124: LD_INT 26
27126: DOUBLE
27127: EQUAL
27128: IFTRUE 27132
27130: GO 27150
27132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27133: LD_ADDR_VAR 0 3
27137: PUSH
27138: LD_INT 13
27140: PUSH
27141: LD_INT 14
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: ST_TO_ADDR
27148: GO 27467
27150: LD_INT 42
27152: DOUBLE
27153: EQUAL
27154: IFTRUE 27158
27156: GO 27184
27158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27159: LD_ADDR_VAR 0 3
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 22
27169: PUSH
27170: LD_INT 23
27172: PUSH
27173: LD_INT 24
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
27182: GO 27467
27184: LD_INT 43
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27192
27190: GO 27218
27192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 21
27200: PUSH
27201: LD_INT 22
27203: PUSH
27204: LD_INT 23
27206: PUSH
27207: LD_INT 24
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: ST_TO_ADDR
27216: GO 27467
27218: LD_INT 44
27220: DOUBLE
27221: EQUAL
27222: IFTRUE 27226
27224: GO 27252
27226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27227: LD_ADDR_VAR 0 3
27231: PUSH
27232: LD_INT 21
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_INT 23
27240: PUSH
27241: LD_INT 24
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
27250: GO 27467
27252: LD_INT 45
27254: DOUBLE
27255: EQUAL
27256: IFTRUE 27260
27258: GO 27286
27260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27261: LD_ADDR_VAR 0 3
27265: PUSH
27266: LD_INT 21
27268: PUSH
27269: LD_INT 22
27271: PUSH
27272: LD_INT 23
27274: PUSH
27275: LD_INT 24
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
27284: GO 27467
27286: LD_INT 49
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27320
27294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27295: LD_ADDR_VAR 0 3
27299: PUSH
27300: LD_INT 21
27302: PUSH
27303: LD_INT 22
27305: PUSH
27306: LD_INT 23
27308: PUSH
27309: LD_INT 24
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
27318: GO 27467
27320: LD_INT 51
27322: DOUBLE
27323: EQUAL
27324: IFTRUE 27328
27326: GO 27354
27328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 22
27339: PUSH
27340: LD_INT 23
27342: PUSH
27343: LD_INT 24
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
27352: GO 27467
27354: LD_INT 52
27356: DOUBLE
27357: EQUAL
27358: IFTRUE 27362
27360: GO 27388
27362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_INT 21
27370: PUSH
27371: LD_INT 22
27373: PUSH
27374: LD_INT 23
27376: PUSH
27377: LD_INT 24
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
27386: GO 27467
27388: LD_INT 53
27390: DOUBLE
27391: EQUAL
27392: IFTRUE 27396
27394: GO 27414
27396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: LD_INT 23
27404: PUSH
27405: LD_INT 24
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: ST_TO_ADDR
27412: GO 27467
27414: LD_INT 46
27416: DOUBLE
27417: EQUAL
27418: IFTRUE 27422
27420: GO 27440
27422: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27423: LD_ADDR_VAR 0 3
27427: PUSH
27428: LD_INT 23
27430: PUSH
27431: LD_INT 24
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: ST_TO_ADDR
27438: GO 27467
27440: LD_INT 47
27442: DOUBLE
27443: EQUAL
27444: IFTRUE 27448
27446: GO 27466
27448: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_INT 23
27456: PUSH
27457: LD_INT 24
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: ST_TO_ADDR
27464: GO 27467
27466: POP
// result := ( chassis in result ) ;
27467: LD_ADDR_VAR 0 3
27471: PUSH
27472: LD_VAR 0 1
27476: PUSH
27477: LD_VAR 0 3
27481: IN
27482: ST_TO_ADDR
// end ;
27483: LD_VAR 0 3
27487: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
27496: PPUSH
// result := array ;
27497: LD_ADDR_VAR 0 5
27501: PUSH
27502: LD_VAR 0 1
27506: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27507: LD_VAR 0 1
27511: NOT
27512: PUSH
27513: LD_VAR 0 2
27517: NOT
27518: OR
27519: PUSH
27520: LD_VAR 0 3
27524: NOT
27525: OR
27526: PUSH
27527: LD_VAR 0 2
27531: PUSH
27532: LD_VAR 0 1
27536: GREATER
27537: OR
27538: PUSH
27539: LD_VAR 0 3
27543: PUSH
27544: LD_VAR 0 1
27548: GREATER
27549: OR
27550: IFFALSE 27554
// exit ;
27552: GO 27850
// if direction then
27554: LD_VAR 0 4
27558: IFFALSE 27622
// begin d := 1 ;
27560: LD_ADDR_VAR 0 9
27564: PUSH
27565: LD_INT 1
27567: ST_TO_ADDR
// if i_from > i_to then
27568: LD_VAR 0 2
27572: PUSH
27573: LD_VAR 0 3
27577: GREATER
27578: IFFALSE 27604
// length := ( array - i_from ) + i_to else
27580: LD_ADDR_VAR 0 11
27584: PUSH
27585: LD_VAR 0 1
27589: PUSH
27590: LD_VAR 0 2
27594: MINUS
27595: PUSH
27596: LD_VAR 0 3
27600: PLUS
27601: ST_TO_ADDR
27602: GO 27620
// length := i_to - i_from ;
27604: LD_ADDR_VAR 0 11
27608: PUSH
27609: LD_VAR 0 3
27613: PUSH
27614: LD_VAR 0 2
27618: MINUS
27619: ST_TO_ADDR
// end else
27620: GO 27683
// begin d := - 1 ;
27622: LD_ADDR_VAR 0 9
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: ST_TO_ADDR
// if i_from > i_to then
27631: LD_VAR 0 2
27635: PUSH
27636: LD_VAR 0 3
27640: GREATER
27641: IFFALSE 27661
// length := i_from - i_to else
27643: LD_ADDR_VAR 0 11
27647: PUSH
27648: LD_VAR 0 2
27652: PUSH
27653: LD_VAR 0 3
27657: MINUS
27658: ST_TO_ADDR
27659: GO 27683
// length := ( array - i_to ) + i_from ;
27661: LD_ADDR_VAR 0 11
27665: PUSH
27666: LD_VAR 0 1
27670: PUSH
27671: LD_VAR 0 3
27675: MINUS
27676: PUSH
27677: LD_VAR 0 2
27681: PLUS
27682: ST_TO_ADDR
// end ; if not length then
27683: LD_VAR 0 11
27687: NOT
27688: IFFALSE 27692
// exit ;
27690: GO 27850
// tmp := array ;
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 1
27701: ST_TO_ADDR
// for i = 1 to length do
27702: LD_ADDR_VAR 0 6
27706: PUSH
27707: DOUBLE
27708: LD_INT 1
27710: DEC
27711: ST_TO_ADDR
27712: LD_VAR 0 11
27716: PUSH
27717: FOR_TO
27718: IFFALSE 27838
// begin for j = 1 to array do
27720: LD_ADDR_VAR 0 7
27724: PUSH
27725: DOUBLE
27726: LD_INT 1
27728: DEC
27729: ST_TO_ADDR
27730: LD_VAR 0 1
27734: PUSH
27735: FOR_TO
27736: IFFALSE 27824
// begin k := j + d ;
27738: LD_ADDR_VAR 0 8
27742: PUSH
27743: LD_VAR 0 7
27747: PUSH
27748: LD_VAR 0 9
27752: PLUS
27753: ST_TO_ADDR
// if k > array then
27754: LD_VAR 0 8
27758: PUSH
27759: LD_VAR 0 1
27763: GREATER
27764: IFFALSE 27774
// k := 1 ;
27766: LD_ADDR_VAR 0 8
27770: PUSH
27771: LD_INT 1
27773: ST_TO_ADDR
// if not k then
27774: LD_VAR 0 8
27778: NOT
27779: IFFALSE 27791
// k := array ;
27781: LD_ADDR_VAR 0 8
27785: PUSH
27786: LD_VAR 0 1
27790: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27791: LD_ADDR_VAR 0 10
27795: PUSH
27796: LD_VAR 0 10
27800: PPUSH
27801: LD_VAR 0 8
27805: PPUSH
27806: LD_VAR 0 1
27810: PUSH
27811: LD_VAR 0 7
27815: ARRAY
27816: PPUSH
27817: CALL_OW 1
27821: ST_TO_ADDR
// end ;
27822: GO 27735
27824: POP
27825: POP
// array := tmp ;
27826: LD_ADDR_VAR 0 1
27830: PUSH
27831: LD_VAR 0 10
27835: ST_TO_ADDR
// end ;
27836: GO 27717
27838: POP
27839: POP
// result := array ;
27840: LD_ADDR_VAR 0 5
27844: PUSH
27845: LD_VAR 0 1
27849: ST_TO_ADDR
// end ;
27850: LD_VAR 0 5
27854: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27855: LD_INT 0
27857: PPUSH
27858: PPUSH
// result := 0 ;
27859: LD_ADDR_VAR 0 3
27863: PUSH
27864: LD_INT 0
27866: ST_TO_ADDR
// if not array or not value in array then
27867: LD_VAR 0 1
27871: NOT
27872: PUSH
27873: LD_VAR 0 2
27877: PUSH
27878: LD_VAR 0 1
27882: IN
27883: NOT
27884: OR
27885: IFFALSE 27889
// exit ;
27887: GO 27943
// for i = 1 to array do
27889: LD_ADDR_VAR 0 4
27893: PUSH
27894: DOUBLE
27895: LD_INT 1
27897: DEC
27898: ST_TO_ADDR
27899: LD_VAR 0 1
27903: PUSH
27904: FOR_TO
27905: IFFALSE 27941
// if value = array [ i ] then
27907: LD_VAR 0 2
27911: PUSH
27912: LD_VAR 0 1
27916: PUSH
27917: LD_VAR 0 4
27921: ARRAY
27922: EQUAL
27923: IFFALSE 27939
// begin result := i ;
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_VAR 0 4
27934: ST_TO_ADDR
// exit ;
27935: POP
27936: POP
27937: GO 27943
// end ;
27939: GO 27904
27941: POP
27942: POP
// end ;
27943: LD_VAR 0 3
27947: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27948: LD_INT 0
27950: PPUSH
// vc_chassis := chassis ;
27951: LD_ADDR_OWVAR 37
27955: PUSH
27956: LD_VAR 0 1
27960: ST_TO_ADDR
// vc_engine := engine ;
27961: LD_ADDR_OWVAR 39
27965: PUSH
27966: LD_VAR 0 2
27970: ST_TO_ADDR
// vc_control := control ;
27971: LD_ADDR_OWVAR 38
27975: PUSH
27976: LD_VAR 0 3
27980: ST_TO_ADDR
// vc_weapon := weapon ;
27981: LD_ADDR_OWVAR 40
27985: PUSH
27986: LD_VAR 0 4
27990: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27991: LD_ADDR_OWVAR 41
27995: PUSH
27996: LD_VAR 0 5
28000: ST_TO_ADDR
// end ;
28001: LD_VAR 0 6
28005: RET
// export function WantPlant ( unit ) ; var task ; begin
28006: LD_INT 0
28008: PPUSH
28009: PPUSH
// result := false ;
28010: LD_ADDR_VAR 0 2
28014: PUSH
28015: LD_INT 0
28017: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28018: LD_ADDR_VAR 0 3
28022: PUSH
28023: LD_VAR 0 1
28027: PPUSH
28028: CALL_OW 437
28032: ST_TO_ADDR
// if task then
28033: LD_VAR 0 3
28037: IFFALSE 28065
// if task [ 1 ] [ 1 ] = p then
28039: LD_VAR 0 3
28043: PUSH
28044: LD_INT 1
28046: ARRAY
28047: PUSH
28048: LD_INT 1
28050: ARRAY
28051: PUSH
28052: LD_STRING p
28054: EQUAL
28055: IFFALSE 28065
// result := true ;
28057: LD_ADDR_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: ST_TO_ADDR
// end ;
28065: LD_VAR 0 2
28069: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
// if pos < 1 then
28076: LD_VAR 0 2
28080: PUSH
28081: LD_INT 1
28083: LESS
28084: IFFALSE 28088
// exit ;
28086: GO 28391
// if pos = 1 then
28088: LD_VAR 0 2
28092: PUSH
28093: LD_INT 1
28095: EQUAL
28096: IFFALSE 28129
// result := Replace ( arr , pos [ 1 ] , value ) else
28098: LD_ADDR_VAR 0 4
28102: PUSH
28103: LD_VAR 0 1
28107: PPUSH
28108: LD_VAR 0 2
28112: PUSH
28113: LD_INT 1
28115: ARRAY
28116: PPUSH
28117: LD_VAR 0 3
28121: PPUSH
28122: CALL_OW 1
28126: ST_TO_ADDR
28127: GO 28391
// begin tmp := arr ;
28129: LD_ADDR_VAR 0 6
28133: PUSH
28134: LD_VAR 0 1
28138: ST_TO_ADDR
// s_arr := [ tmp ] ;
28139: LD_ADDR_VAR 0 7
28143: PUSH
28144: LD_VAR 0 6
28148: PUSH
28149: EMPTY
28150: LIST
28151: ST_TO_ADDR
// for i = 1 to pos - 1 do
28152: LD_ADDR_VAR 0 5
28156: PUSH
28157: DOUBLE
28158: LD_INT 1
28160: DEC
28161: ST_TO_ADDR
28162: LD_VAR 0 2
28166: PUSH
28167: LD_INT 1
28169: MINUS
28170: PUSH
28171: FOR_TO
28172: IFFALSE 28217
// begin tmp := tmp [ pos [ i ] ] ;
28174: LD_ADDR_VAR 0 6
28178: PUSH
28179: LD_VAR 0 6
28183: PUSH
28184: LD_VAR 0 2
28188: PUSH
28189: LD_VAR 0 5
28193: ARRAY
28194: ARRAY
28195: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28196: LD_ADDR_VAR 0 7
28200: PUSH
28201: LD_VAR 0 7
28205: PUSH
28206: LD_VAR 0 6
28210: PUSH
28211: EMPTY
28212: LIST
28213: ADD
28214: ST_TO_ADDR
// end ;
28215: GO 28171
28217: POP
28218: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28219: LD_ADDR_VAR 0 6
28223: PUSH
28224: LD_VAR 0 6
28228: PPUSH
28229: LD_VAR 0 2
28233: PUSH
28234: LD_VAR 0 2
28238: ARRAY
28239: PPUSH
28240: LD_VAR 0 3
28244: PPUSH
28245: CALL_OW 1
28249: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28250: LD_ADDR_VAR 0 7
28254: PUSH
28255: LD_VAR 0 7
28259: PPUSH
28260: LD_VAR 0 7
28264: PPUSH
28265: LD_VAR 0 6
28269: PPUSH
28270: CALL_OW 1
28274: ST_TO_ADDR
// for i = s_arr downto 2 do
28275: LD_ADDR_VAR 0 5
28279: PUSH
28280: DOUBLE
28281: LD_VAR 0 7
28285: INC
28286: ST_TO_ADDR
28287: LD_INT 2
28289: PUSH
28290: FOR_DOWNTO
28291: IFFALSE 28375
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28293: LD_ADDR_VAR 0 6
28297: PUSH
28298: LD_VAR 0 7
28302: PUSH
28303: LD_VAR 0 5
28307: PUSH
28308: LD_INT 1
28310: MINUS
28311: ARRAY
28312: PPUSH
28313: LD_VAR 0 2
28317: PUSH
28318: LD_VAR 0 5
28322: PUSH
28323: LD_INT 1
28325: MINUS
28326: ARRAY
28327: PPUSH
28328: LD_VAR 0 7
28332: PUSH
28333: LD_VAR 0 5
28337: ARRAY
28338: PPUSH
28339: CALL_OW 1
28343: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28344: LD_ADDR_VAR 0 7
28348: PUSH
28349: LD_VAR 0 7
28353: PPUSH
28354: LD_VAR 0 5
28358: PUSH
28359: LD_INT 1
28361: MINUS
28362: PPUSH
28363: LD_VAR 0 6
28367: PPUSH
28368: CALL_OW 1
28372: ST_TO_ADDR
// end ;
28373: GO 28290
28375: POP
28376: POP
// result := s_arr [ 1 ] ;
28377: LD_ADDR_VAR 0 4
28381: PUSH
28382: LD_VAR 0 7
28386: PUSH
28387: LD_INT 1
28389: ARRAY
28390: ST_TO_ADDR
// end ; end ;
28391: LD_VAR 0 4
28395: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28396: LD_INT 0
28398: PPUSH
28399: PPUSH
// if not list then
28400: LD_VAR 0 1
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28500
// i := list [ pos1 ] ;
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: LD_VAR 0 1
28418: PUSH
28419: LD_VAR 0 2
28423: ARRAY
28424: ST_TO_ADDR
// if not i then
28425: LD_VAR 0 5
28429: NOT
28430: IFFALSE 28434
// exit ;
28432: GO 28500
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28434: LD_ADDR_VAR 0 1
28438: PUSH
28439: LD_VAR 0 1
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_VAR 0 1
28453: PUSH
28454: LD_VAR 0 3
28458: ARRAY
28459: PPUSH
28460: CALL_OW 1
28464: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28465: LD_ADDR_VAR 0 1
28469: PUSH
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 3
28479: PPUSH
28480: LD_VAR 0 5
28484: PPUSH
28485: CALL_OW 1
28489: ST_TO_ADDR
// result := list ;
28490: LD_ADDR_VAR 0 4
28494: PUSH
28495: LD_VAR 0 1
28499: ST_TO_ADDR
// end ;
28500: LD_VAR 0 4
28504: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28505: LD_INT 0
28507: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28508: LD_ADDR_VAR 0 5
28512: PUSH
28513: LD_VAR 0 1
28517: PPUSH
28518: CALL_OW 250
28522: PPUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 251
28532: PPUSH
28533: LD_VAR 0 2
28537: PPUSH
28538: LD_VAR 0 3
28542: PPUSH
28543: LD_VAR 0 4
28547: PPUSH
28548: CALL 28558 0 5
28552: ST_TO_ADDR
// end ;
28553: LD_VAR 0 5
28557: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28558: LD_INT 0
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
// if not list then
28564: LD_VAR 0 3
28568: NOT
28569: IFFALSE 28573
// exit ;
28571: GO 28961
// result := [ ] ;
28573: LD_ADDR_VAR 0 6
28577: PUSH
28578: EMPTY
28579: ST_TO_ADDR
// for i in list do
28580: LD_ADDR_VAR 0 7
28584: PUSH
28585: LD_VAR 0 3
28589: PUSH
28590: FOR_IN
28591: IFFALSE 28793
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28593: LD_ADDR_VAR 0 9
28597: PUSH
28598: LD_VAR 0 7
28602: PPUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: LD_VAR 0 2
28612: PPUSH
28613: CALL_OW 297
28617: ST_TO_ADDR
// if not result then
28618: LD_VAR 0 6
28622: NOT
28623: IFFALSE 28649
// result := [ [ i , tmp ] ] else
28625: LD_ADDR_VAR 0 6
28629: PUSH
28630: LD_VAR 0 7
28634: PUSH
28635: LD_VAR 0 9
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: ST_TO_ADDR
28647: GO 28791
// begin if result [ result ] [ 2 ] < tmp then
28649: LD_VAR 0 6
28653: PUSH
28654: LD_VAR 0 6
28658: ARRAY
28659: PUSH
28660: LD_INT 2
28662: ARRAY
28663: PUSH
28664: LD_VAR 0 9
28668: LESS
28669: IFFALSE 28711
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28671: LD_ADDR_VAR 0 6
28675: PUSH
28676: LD_VAR 0 6
28680: PPUSH
28681: LD_VAR 0 6
28685: PUSH
28686: LD_INT 1
28688: PLUS
28689: PPUSH
28690: LD_VAR 0 7
28694: PUSH
28695: LD_VAR 0 9
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 2
28708: ST_TO_ADDR
28709: GO 28791
// for j = 1 to result do
28711: LD_ADDR_VAR 0 8
28715: PUSH
28716: DOUBLE
28717: LD_INT 1
28719: DEC
28720: ST_TO_ADDR
28721: LD_VAR 0 6
28725: PUSH
28726: FOR_TO
28727: IFFALSE 28789
// begin if tmp < result [ j ] [ 2 ] then
28729: LD_VAR 0 9
28733: PUSH
28734: LD_VAR 0 6
28738: PUSH
28739: LD_VAR 0 8
28743: ARRAY
28744: PUSH
28745: LD_INT 2
28747: ARRAY
28748: LESS
28749: IFFALSE 28787
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28751: LD_ADDR_VAR 0 6
28755: PUSH
28756: LD_VAR 0 6
28760: PPUSH
28761: LD_VAR 0 8
28765: PPUSH
28766: LD_VAR 0 7
28770: PUSH
28771: LD_VAR 0 9
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 2
28784: ST_TO_ADDR
// break ;
28785: GO 28789
// end ; end ;
28787: GO 28726
28789: POP
28790: POP
// end ; end ;
28791: GO 28590
28793: POP
28794: POP
// if result and not asc then
28795: LD_VAR 0 6
28799: PUSH
28800: LD_VAR 0 4
28804: NOT
28805: AND
28806: IFFALSE 28881
// begin tmp := result ;
28808: LD_ADDR_VAR 0 9
28812: PUSH
28813: LD_VAR 0 6
28817: ST_TO_ADDR
// for i = tmp downto 1 do
28818: LD_ADDR_VAR 0 7
28822: PUSH
28823: DOUBLE
28824: LD_VAR 0 9
28828: INC
28829: ST_TO_ADDR
28830: LD_INT 1
28832: PUSH
28833: FOR_DOWNTO
28834: IFFALSE 28879
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28836: LD_ADDR_VAR 0 6
28840: PUSH
28841: LD_VAR 0 6
28845: PPUSH
28846: LD_VAR 0 9
28850: PUSH
28851: LD_VAR 0 7
28855: MINUS
28856: PUSH
28857: LD_INT 1
28859: PLUS
28860: PPUSH
28861: LD_VAR 0 9
28865: PUSH
28866: LD_VAR 0 7
28870: ARRAY
28871: PPUSH
28872: CALL_OW 1
28876: ST_TO_ADDR
28877: GO 28833
28879: POP
28880: POP
// end ; tmp := [ ] ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: EMPTY
28887: ST_TO_ADDR
// if mode then
28888: LD_VAR 0 5
28892: IFFALSE 28961
// begin for i = 1 to result do
28894: LD_ADDR_VAR 0 7
28898: PUSH
28899: DOUBLE
28900: LD_INT 1
28902: DEC
28903: ST_TO_ADDR
28904: LD_VAR 0 6
28908: PUSH
28909: FOR_TO
28910: IFFALSE 28949
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28912: LD_ADDR_VAR 0 9
28916: PUSH
28917: LD_VAR 0 9
28921: PPUSH
28922: LD_VAR 0 7
28926: PPUSH
28927: LD_VAR 0 6
28931: PUSH
28932: LD_VAR 0 7
28936: ARRAY
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: CALL_OW 1
28946: ST_TO_ADDR
28947: GO 28909
28949: POP
28950: POP
// result := tmp ;
28951: LD_ADDR_VAR 0 6
28955: PUSH
28956: LD_VAR 0 9
28960: ST_TO_ADDR
// end ; end ;
28961: LD_VAR 0 6
28965: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// if not x or not y then
28996: LD_VAR 0 2
29000: NOT
29001: PUSH
29002: LD_VAR 0 3
29006: NOT
29007: OR
29008: IFFALSE 29012
// exit ;
29010: GO 30664
// if not range then
29012: LD_VAR 0 4
29016: NOT
29017: IFFALSE 29027
// range := 10 ;
29019: LD_ADDR_VAR 0 4
29023: PUSH
29024: LD_INT 10
29026: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29027: LD_ADDR_VAR 0 8
29031: PUSH
29032: LD_INT 81
29034: PUSH
29035: LD_VAR 0 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 92
29046: PUSH
29047: LD_VAR 0 2
29051: PUSH
29052: LD_VAR 0 3
29056: PUSH
29057: LD_VAR 0 4
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 3
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 69
29094: ST_TO_ADDR
// if not tmp then
29095: LD_VAR 0 8
29099: NOT
29100: IFFALSE 29104
// exit ;
29102: GO 30664
// for i in tmp do
29104: LD_ADDR_VAR 0 6
29108: PUSH
29109: LD_VAR 0 8
29113: PUSH
29114: FOR_IN
29115: IFFALSE 30639
// begin points := [ 0 , 0 , 0 ] ;
29117: LD_ADDR_VAR 0 9
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: ST_TO_ADDR
// bpoints := 1 ;
29136: LD_ADDR_VAR 0 10
29140: PUSH
29141: LD_INT 1
29143: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29144: LD_VAR 0 6
29148: PPUSH
29149: CALL_OW 247
29153: PUSH
29154: LD_INT 1
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 29740
29162: POP
// begin if GetClass ( i ) = 1 then
29163: LD_VAR 0 6
29167: PPUSH
29168: CALL_OW 257
29172: PUSH
29173: LD_INT 1
29175: EQUAL
29176: IFFALSE 29197
// points := [ 10 , 5 , 3 ] ;
29178: LD_ADDR_VAR 0 9
29182: PUSH
29183: LD_INT 10
29185: PUSH
29186: LD_INT 5
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29197: LD_VAR 0 6
29201: PPUSH
29202: CALL_OW 257
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 3
29212: PUSH
29213: LD_INT 4
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: IN
29221: IFFALSE 29242
// points := [ 3 , 2 , 1 ] ;
29223: LD_ADDR_VAR 0 9
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29242: LD_VAR 0 6
29246: PPUSH
29247: CALL_OW 257
29251: PUSH
29252: LD_INT 5
29254: EQUAL
29255: IFFALSE 29276
// points := [ 130 , 5 , 2 ] ;
29257: LD_ADDR_VAR 0 9
29261: PUSH
29262: LD_INT 130
29264: PUSH
29265: LD_INT 5
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29276: LD_VAR 0 6
29280: PPUSH
29281: CALL_OW 257
29285: PUSH
29286: LD_INT 8
29288: EQUAL
29289: IFFALSE 29310
// points := [ 35 , 35 , 30 ] ;
29291: LD_ADDR_VAR 0 9
29295: PUSH
29296: LD_INT 35
29298: PUSH
29299: LD_INT 35
29301: PUSH
29302: LD_INT 30
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29310: LD_VAR 0 6
29314: PPUSH
29315: CALL_OW 257
29319: PUSH
29320: LD_INT 9
29322: EQUAL
29323: IFFALSE 29344
// points := [ 20 , 55 , 40 ] ;
29325: LD_ADDR_VAR 0 9
29329: PUSH
29330: LD_INT 20
29332: PUSH
29333: LD_INT 55
29335: PUSH
29336: LD_INT 40
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29344: LD_VAR 0 6
29348: PPUSH
29349: CALL_OW 257
29353: PUSH
29354: LD_INT 12
29356: PUSH
29357: LD_INT 16
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: IN
29364: IFFALSE 29385
// points := [ 5 , 3 , 2 ] ;
29366: LD_ADDR_VAR 0 9
29370: PUSH
29371: LD_INT 5
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29385: LD_VAR 0 6
29389: PPUSH
29390: CALL_OW 257
29394: PUSH
29395: LD_INT 17
29397: EQUAL
29398: IFFALSE 29419
// points := [ 100 , 50 , 75 ] ;
29400: LD_ADDR_VAR 0 9
29404: PUSH
29405: LD_INT 100
29407: PUSH
29408: LD_INT 50
29410: PUSH
29411: LD_INT 75
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29419: LD_VAR 0 6
29423: PPUSH
29424: CALL_OW 257
29428: PUSH
29429: LD_INT 15
29431: EQUAL
29432: IFFALSE 29453
// points := [ 10 , 5 , 3 ] ;
29434: LD_ADDR_VAR 0 9
29438: PUSH
29439: LD_INT 10
29441: PUSH
29442: LD_INT 5
29444: PUSH
29445: LD_INT 3
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29453: LD_VAR 0 6
29457: PPUSH
29458: CALL_OW 257
29462: PUSH
29463: LD_INT 14
29465: EQUAL
29466: IFFALSE 29487
// points := [ 10 , 0 , 0 ] ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: LD_INT 10
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29487: LD_VAR 0 6
29491: PPUSH
29492: CALL_OW 257
29496: PUSH
29497: LD_INT 11
29499: EQUAL
29500: IFFALSE 29521
// points := [ 30 , 10 , 5 ] ;
29502: LD_ADDR_VAR 0 9
29506: PUSH
29507: LD_INT 30
29509: PUSH
29510: LD_INT 10
29512: PUSH
29513: LD_INT 5
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29521: LD_VAR 0 1
29525: PPUSH
29526: LD_INT 5
29528: PPUSH
29529: CALL_OW 321
29533: PUSH
29534: LD_INT 2
29536: EQUAL
29537: IFFALSE 29554
// bpoints := bpoints * 1.8 ;
29539: LD_ADDR_VAR 0 10
29543: PUSH
29544: LD_VAR 0 10
29548: PUSH
29549: LD_REAL  1.80000000000000E+0000
29552: MUL
29553: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 257
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: IN
29582: PUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: LD_INT 51
29590: PPUSH
29591: CALL_OW 321
29595: PUSH
29596: LD_INT 2
29598: EQUAL
29599: AND
29600: IFFALSE 29617
// bpoints := bpoints * 1.2 ;
29602: LD_ADDR_VAR 0 10
29606: PUSH
29607: LD_VAR 0 10
29611: PUSH
29612: LD_REAL  1.20000000000000E+0000
29615: MUL
29616: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29617: LD_VAR 0 6
29621: PPUSH
29622: CALL_OW 257
29626: PUSH
29627: LD_INT 5
29629: PUSH
29630: LD_INT 7
29632: PUSH
29633: LD_INT 9
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: IN
29641: PUSH
29642: LD_VAR 0 1
29646: PPUSH
29647: LD_INT 52
29649: PPUSH
29650: CALL_OW 321
29654: PUSH
29655: LD_INT 2
29657: EQUAL
29658: AND
29659: IFFALSE 29676
// bpoints := bpoints * 1.5 ;
29661: LD_ADDR_VAR 0 10
29665: PUSH
29666: LD_VAR 0 10
29670: PUSH
29671: LD_REAL  1.50000000000000E+0000
29674: MUL
29675: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_INT 66
29683: PPUSH
29684: CALL_OW 321
29688: PUSH
29689: LD_INT 2
29691: EQUAL
29692: IFFALSE 29709
// bpoints := bpoints * 1.1 ;
29694: LD_ADDR_VAR 0 10
29698: PUSH
29699: LD_VAR 0 10
29703: PUSH
29704: LD_REAL  1.10000000000000E+0000
29707: MUL
29708: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29709: LD_ADDR_VAR 0 10
29713: PUSH
29714: LD_VAR 0 10
29718: PUSH
29719: LD_VAR 0 6
29723: PPUSH
29724: LD_INT 1
29726: PPUSH
29727: CALL_OW 259
29731: PUSH
29732: LD_REAL  1.15000000000000E+0000
29735: MUL
29736: MUL
29737: ST_TO_ADDR
// end ; unit_vehicle :
29738: GO 30568
29740: LD_INT 2
29742: DOUBLE
29743: EQUAL
29744: IFTRUE 29748
29746: GO 30556
29748: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29749: LD_VAR 0 6
29753: PPUSH
29754: CALL_OW 264
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: LD_INT 42
29764: PUSH
29765: LD_INT 24
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: IN
29773: IFFALSE 29794
// points := [ 25 , 5 , 3 ] ;
29775: LD_ADDR_VAR 0 9
29779: PUSH
29780: LD_INT 25
29782: PUSH
29783: LD_INT 5
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29794: LD_VAR 0 6
29798: PPUSH
29799: CALL_OW 264
29803: PUSH
29804: LD_INT 4
29806: PUSH
29807: LD_INT 43
29809: PUSH
29810: LD_INT 25
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: IN
29818: IFFALSE 29839
// points := [ 40 , 15 , 5 ] ;
29820: LD_ADDR_VAR 0 9
29824: PUSH
29825: LD_INT 40
29827: PUSH
29828: LD_INT 15
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29839: LD_VAR 0 6
29843: PPUSH
29844: CALL_OW 264
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: LD_INT 23
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: IN
29859: IFFALSE 29880
// points := [ 7 , 25 , 8 ] ;
29861: LD_ADDR_VAR 0 9
29865: PUSH
29866: LD_INT 7
29868: PUSH
29869: LD_INT 25
29871: PUSH
29872: LD_INT 8
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29880: LD_VAR 0 6
29884: PPUSH
29885: CALL_OW 264
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: LD_INT 27
29895: PUSH
29896: LD_INT 44
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: IN
29904: IFFALSE 29925
// points := [ 14 , 50 , 16 ] ;
29906: LD_ADDR_VAR 0 9
29910: PUSH
29911: LD_INT 14
29913: PUSH
29914: LD_INT 50
29916: PUSH
29917: LD_INT 16
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29925: LD_VAR 0 6
29929: PPUSH
29930: CALL_OW 264
29934: PUSH
29935: LD_INT 6
29937: PUSH
29938: LD_INT 46
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: IN
29945: IFFALSE 29966
// points := [ 32 , 120 , 70 ] ;
29947: LD_ADDR_VAR 0 9
29951: PUSH
29952: LD_INT 32
29954: PUSH
29955: LD_INT 120
29957: PUSH
29958: LD_INT 70
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29966: LD_VAR 0 6
29970: PPUSH
29971: CALL_OW 264
29975: PUSH
29976: LD_INT 7
29978: PUSH
29979: LD_INT 28
29981: PUSH
29982: LD_INT 45
29984: PUSH
29985: LD_EXP 90
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: IN
29996: IFFALSE 30017
// points := [ 35 , 20 , 45 ] ;
29998: LD_ADDR_VAR 0 9
30002: PUSH
30003: LD_INT 35
30005: PUSH
30006: LD_INT 20
30008: PUSH
30009: LD_INT 45
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30017: LD_VAR 0 6
30021: PPUSH
30022: CALL_OW 264
30026: PUSH
30027: LD_INT 47
30029: PUSH
30030: EMPTY
30031: LIST
30032: IN
30033: IFFALSE 30054
// points := [ 67 , 45 , 75 ] ;
30035: LD_ADDR_VAR 0 9
30039: PUSH
30040: LD_INT 67
30042: PUSH
30043: LD_INT 45
30045: PUSH
30046: LD_INT 75
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30054: LD_VAR 0 6
30058: PPUSH
30059: CALL_OW 264
30063: PUSH
30064: LD_INT 26
30066: PUSH
30067: EMPTY
30068: LIST
30069: IN
30070: IFFALSE 30091
// points := [ 120 , 30 , 80 ] ;
30072: LD_ADDR_VAR 0 9
30076: PUSH
30077: LD_INT 120
30079: PUSH
30080: LD_INT 30
30082: PUSH
30083: LD_INT 80
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30091: LD_VAR 0 6
30095: PPUSH
30096: CALL_OW 264
30100: PUSH
30101: LD_INT 22
30103: PUSH
30104: EMPTY
30105: LIST
30106: IN
30107: IFFALSE 30128
// points := [ 40 , 1 , 1 ] ;
30109: LD_ADDR_VAR 0 9
30113: PUSH
30114: LD_INT 40
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30128: LD_VAR 0 6
30132: PPUSH
30133: CALL_OW 264
30137: PUSH
30138: LD_INT 29
30140: PUSH
30141: EMPTY
30142: LIST
30143: IN
30144: IFFALSE 30165
// points := [ 70 , 200 , 400 ] ;
30146: LD_ADDR_VAR 0 9
30150: PUSH
30151: LD_INT 70
30153: PUSH
30154: LD_INT 200
30156: PUSH
30157: LD_INT 400
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30165: LD_VAR 0 6
30169: PPUSH
30170: CALL_OW 264
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: LD_INT 53
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: IN
30185: IFFALSE 30206
// points := [ 40 , 10 , 20 ] ;
30187: LD_ADDR_VAR 0 9
30191: PUSH
30192: LD_INT 40
30194: PUSH
30195: LD_INT 10
30197: PUSH
30198: LD_INT 20
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30206: LD_VAR 0 6
30210: PPUSH
30211: CALL_OW 264
30215: PUSH
30216: LD_INT 9
30218: PUSH
30219: EMPTY
30220: LIST
30221: IN
30222: IFFALSE 30243
// points := [ 5 , 70 , 20 ] ;
30224: LD_ADDR_VAR 0 9
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 70
30234: PUSH
30235: LD_INT 20
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30243: LD_VAR 0 6
30247: PPUSH
30248: CALL_OW 264
30252: PUSH
30253: LD_INT 10
30255: PUSH
30256: EMPTY
30257: LIST
30258: IN
30259: IFFALSE 30280
// points := [ 35 , 110 , 70 ] ;
30261: LD_ADDR_VAR 0 9
30265: PUSH
30266: LD_INT 35
30268: PUSH
30269: LD_INT 110
30271: PUSH
30272: LD_INT 70
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30280: LD_VAR 0 6
30284: PPUSH
30285: CALL_OW 265
30289: PUSH
30290: LD_INT 25
30292: EQUAL
30293: IFFALSE 30314
// points := [ 80 , 65 , 100 ] ;
30295: LD_ADDR_VAR 0 9
30299: PUSH
30300: LD_INT 80
30302: PUSH
30303: LD_INT 65
30305: PUSH
30306: LD_INT 100
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30314: LD_VAR 0 6
30318: PPUSH
30319: CALL_OW 263
30323: PUSH
30324: LD_INT 1
30326: EQUAL
30327: IFFALSE 30362
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30329: LD_ADDR_VAR 0 10
30333: PUSH
30334: LD_VAR 0 10
30338: PUSH
30339: LD_VAR 0 6
30343: PPUSH
30344: CALL_OW 311
30348: PPUSH
30349: LD_INT 3
30351: PPUSH
30352: CALL_OW 259
30356: PUSH
30357: LD_INT 4
30359: MUL
30360: MUL
30361: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30362: LD_VAR 0 6
30366: PPUSH
30367: CALL_OW 263
30371: PUSH
30372: LD_INT 2
30374: EQUAL
30375: IFFALSE 30426
// begin j := IsControledBy ( i ) ;
30377: LD_ADDR_VAR 0 7
30381: PUSH
30382: LD_VAR 0 6
30386: PPUSH
30387: CALL_OW 312
30391: ST_TO_ADDR
// if j then
30392: LD_VAR 0 7
30396: IFFALSE 30426
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30398: LD_ADDR_VAR 0 10
30402: PUSH
30403: LD_VAR 0 10
30407: PUSH
30408: LD_VAR 0 7
30412: PPUSH
30413: LD_INT 3
30415: PPUSH
30416: CALL_OW 259
30420: PUSH
30421: LD_INT 3
30423: MUL
30424: MUL
30425: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30426: LD_VAR 0 6
30430: PPUSH
30431: CALL_OW 264
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: LD_INT 6
30441: PUSH
30442: LD_INT 46
30444: PUSH
30445: LD_INT 44
30447: PUSH
30448: LD_INT 47
30450: PUSH
30451: LD_INT 45
30453: PUSH
30454: LD_INT 28
30456: PUSH
30457: LD_INT 7
30459: PUSH
30460: LD_INT 27
30462: PUSH
30463: LD_INT 29
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: IN
30478: PUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: LD_INT 52
30486: PPUSH
30487: CALL_OW 321
30491: PUSH
30492: LD_INT 2
30494: EQUAL
30495: AND
30496: IFFALSE 30513
// bpoints := bpoints * 1.2 ;
30498: LD_ADDR_VAR 0 10
30502: PUSH
30503: LD_VAR 0 10
30507: PUSH
30508: LD_REAL  1.20000000000000E+0000
30511: MUL
30512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30513: LD_VAR 0 6
30517: PPUSH
30518: CALL_OW 264
30522: PUSH
30523: LD_INT 6
30525: PUSH
30526: LD_INT 46
30528: PUSH
30529: LD_INT 47
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: IN
30537: IFFALSE 30554
// bpoints := bpoints * 1.2 ;
30539: LD_ADDR_VAR 0 10
30543: PUSH
30544: LD_VAR 0 10
30548: PUSH
30549: LD_REAL  1.20000000000000E+0000
30552: MUL
30553: ST_TO_ADDR
// end ; unit_building :
30554: GO 30568
30556: LD_INT 3
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30567
30564: POP
// ; end ;
30565: GO 30568
30567: POP
// for j = 1 to 3 do
30568: LD_ADDR_VAR 0 7
30572: PUSH
30573: DOUBLE
30574: LD_INT 1
30576: DEC
30577: ST_TO_ADDR
30578: LD_INT 3
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30635
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30584: LD_ADDR_VAR 0 5
30588: PUSH
30589: LD_VAR 0 5
30593: PPUSH
30594: LD_VAR 0 7
30598: PPUSH
30599: LD_VAR 0 5
30603: PUSH
30604: LD_VAR 0 7
30608: ARRAY
30609: PUSH
30610: LD_VAR 0 9
30614: PUSH
30615: LD_VAR 0 7
30619: ARRAY
30620: PUSH
30621: LD_VAR 0 10
30625: MUL
30626: PLUS
30627: PPUSH
30628: CALL_OW 1
30632: ST_TO_ADDR
30633: GO 30581
30635: POP
30636: POP
// end ;
30637: GO 29114
30639: POP
30640: POP
// result := Replace ( result , 4 , tmp ) ;
30641: LD_ADDR_VAR 0 5
30645: PUSH
30646: LD_VAR 0 5
30650: PPUSH
30651: LD_INT 4
30653: PPUSH
30654: LD_VAR 0 8
30658: PPUSH
30659: CALL_OW 1
30663: ST_TO_ADDR
// end ;
30664: LD_VAR 0 5
30668: RET
// export function DangerAtRange ( unit , range ) ; begin
30669: LD_INT 0
30671: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_VAR 0 1
30681: PPUSH
30682: CALL_OW 255
30686: PPUSH
30687: LD_VAR 0 1
30691: PPUSH
30692: CALL_OW 250
30696: PPUSH
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL_OW 251
30706: PPUSH
30707: LD_VAR 0 2
30711: PPUSH
30712: CALL 28966 0 4
30716: ST_TO_ADDR
// end ;
30717: LD_VAR 0 3
30721: RET
// export function DangerInArea ( side , area ) ; begin
30722: LD_INT 0
30724: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: LD_INT 81
30737: PUSH
30738: LD_VAR 0 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 70
30751: ST_TO_ADDR
// end ;
30752: LD_VAR 0 3
30756: RET
// export function IsExtension ( b ) ; begin
30757: LD_INT 0
30759: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30760: LD_ADDR_VAR 0 2
30764: PUSH
30765: LD_VAR 0 1
30769: PUSH
30770: LD_INT 23
30772: PUSH
30773: LD_INT 20
30775: PUSH
30776: LD_INT 22
30778: PUSH
30779: LD_INT 17
30781: PUSH
30782: LD_INT 24
30784: PUSH
30785: LD_INT 21
30787: PUSH
30788: LD_INT 19
30790: PUSH
30791: LD_INT 16
30793: PUSH
30794: LD_INT 25
30796: PUSH
30797: LD_INT 18
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: IN
30812: ST_TO_ADDR
// end ;
30813: LD_VAR 0 2
30817: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
30822: PPUSH
// result := [ ] ;
30823: LD_ADDR_VAR 0 4
30827: PUSH
30828: EMPTY
30829: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30830: LD_ADDR_VAR 0 5
30834: PUSH
30835: LD_VAR 0 2
30839: PPUSH
30840: LD_INT 21
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PPUSH
30850: CALL_OW 70
30854: ST_TO_ADDR
// if not tmp then
30855: LD_VAR 0 5
30859: NOT
30860: IFFALSE 30864
// exit ;
30862: GO 30928
// if checkLink then
30864: LD_VAR 0 3
30868: IFFALSE 30918
// begin for i in tmp do
30870: LD_ADDR_VAR 0 6
30874: PUSH
30875: LD_VAR 0 5
30879: PUSH
30880: FOR_IN
30881: IFFALSE 30916
// if GetBase ( i ) <> base then
30883: LD_VAR 0 6
30887: PPUSH
30888: CALL_OW 274
30892: PUSH
30893: LD_VAR 0 1
30897: NONEQUAL
30898: IFFALSE 30914
// ComLinkToBase ( base , i ) ;
30900: LD_VAR 0 1
30904: PPUSH
30905: LD_VAR 0 6
30909: PPUSH
30910: CALL_OW 169
30914: GO 30880
30916: POP
30917: POP
// end ; result := tmp ;
30918: LD_ADDR_VAR 0 4
30922: PUSH
30923: LD_VAR 0 5
30927: ST_TO_ADDR
// end ;
30928: LD_VAR 0 4
30932: RET
// export function ComComplete ( units , b ) ; var i ; begin
30933: LD_INT 0
30935: PPUSH
30936: PPUSH
// if not units then
30937: LD_VAR 0 1
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31036
// for i in units do
30946: LD_ADDR_VAR 0 4
30950: PUSH
30951: LD_VAR 0 1
30955: PUSH
30956: FOR_IN
30957: IFFALSE 31034
// if BuildingStatus ( b ) = bs_build then
30959: LD_VAR 0 2
30963: PPUSH
30964: CALL_OW 461
30968: PUSH
30969: LD_INT 1
30971: EQUAL
30972: IFFALSE 31032
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30974: LD_VAR 0 4
30978: PPUSH
30979: LD_STRING h
30981: PUSH
30982: LD_VAR 0 2
30986: PPUSH
30987: CALL_OW 250
30991: PUSH
30992: LD_VAR 0 2
30996: PPUSH
30997: CALL_OW 251
31001: PUSH
31002: LD_VAR 0 2
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: PPUSH
31028: CALL_OW 446
31032: GO 30956
31034: POP
31035: POP
// end ;
31036: LD_VAR 0 3
31040: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31049: LD_VAR 0 1
31053: NOT
31054: PUSH
31055: LD_VAR 0 1
31059: PPUSH
31060: CALL_OW 263
31064: PUSH
31065: LD_INT 2
31067: NONEQUAL
31068: OR
31069: IFFALSE 31073
// exit ;
31071: GO 31389
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31073: LD_ADDR_VAR 0 6
31077: PUSH
31078: LD_INT 22
31080: PUSH
31081: LD_VAR 0 1
31085: PPUSH
31086: CALL_OW 255
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 30
31100: PUSH
31101: LD_INT 36
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 34
31110: PUSH
31111: LD_INT 31
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PPUSH
31127: CALL_OW 69
31131: ST_TO_ADDR
// if not tmp then
31132: LD_VAR 0 6
31136: NOT
31137: IFFALSE 31141
// exit ;
31139: GO 31389
// result := [ ] ;
31141: LD_ADDR_VAR 0 2
31145: PUSH
31146: EMPTY
31147: ST_TO_ADDR
// for i in tmp do
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_VAR 0 6
31157: PUSH
31158: FOR_IN
31159: IFFALSE 31230
// begin t := UnitsInside ( i ) ;
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: LD_VAR 0 3
31170: PPUSH
31171: CALL_OW 313
31175: ST_TO_ADDR
// if t then
31176: LD_VAR 0 4
31180: IFFALSE 31228
// for j in t do
31182: LD_ADDR_VAR 0 7
31186: PUSH
31187: LD_VAR 0 4
31191: PUSH
31192: FOR_IN
31193: IFFALSE 31226
// result := Replace ( result , result + 1 , j ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 2
31209: PUSH
31210: LD_INT 1
31212: PLUS
31213: PPUSH
31214: LD_VAR 0 7
31218: PPUSH
31219: CALL_OW 1
31223: ST_TO_ADDR
31224: GO 31192
31226: POP
31227: POP
// end ;
31228: GO 31158
31230: POP
31231: POP
// if not result then
31232: LD_VAR 0 2
31236: NOT
31237: IFFALSE 31241
// exit ;
31239: GO 31389
// mech := result [ 1 ] ;
31241: LD_ADDR_VAR 0 5
31245: PUSH
31246: LD_VAR 0 2
31250: PUSH
31251: LD_INT 1
31253: ARRAY
31254: ST_TO_ADDR
// if result > 1 then
31255: LD_VAR 0 2
31259: PUSH
31260: LD_INT 1
31262: GREATER
31263: IFFALSE 31375
// begin for i = 2 to result do
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: DOUBLE
31271: LD_INT 2
31273: DEC
31274: ST_TO_ADDR
31275: LD_VAR 0 2
31279: PUSH
31280: FOR_TO
31281: IFFALSE 31373
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31283: LD_ADDR_VAR 0 4
31287: PUSH
31288: LD_VAR 0 2
31292: PUSH
31293: LD_VAR 0 3
31297: ARRAY
31298: PPUSH
31299: LD_INT 3
31301: PPUSH
31302: CALL_OW 259
31306: PUSH
31307: LD_VAR 0 2
31311: PUSH
31312: LD_VAR 0 3
31316: ARRAY
31317: PPUSH
31318: CALL_OW 432
31322: MINUS
31323: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31324: LD_VAR 0 4
31328: PUSH
31329: LD_VAR 0 5
31333: PPUSH
31334: LD_INT 3
31336: PPUSH
31337: CALL_OW 259
31341: PUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: CALL_OW 432
31351: MINUS
31352: GREATEREQUAL
31353: IFFALSE 31371
// mech := result [ i ] ;
31355: LD_ADDR_VAR 0 5
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: ARRAY
31370: ST_TO_ADDR
// end ;
31371: GO 31280
31373: POP
31374: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31375: LD_VAR 0 1
31379: PPUSH
31380: LD_VAR 0 5
31384: PPUSH
31385: CALL_OW 135
// end ;
31389: LD_VAR 0 2
31393: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31394: LD_INT 0
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
// result := [ ] ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: EMPTY
31415: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 266
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: IN
31436: NOT
31437: IFFALSE 31441
// exit ;
31439: GO 33075
// if name then
31441: LD_VAR 0 3
31445: IFFALSE 31461
// SetBName ( base_dep , name ) ;
31447: LD_VAR 0 1
31451: PPUSH
31452: LD_VAR 0 3
31456: PPUSH
31457: CALL_OW 500
// base := GetBase ( base_dep ) ;
31461: LD_ADDR_VAR 0 15
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 274
31475: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31476: LD_ADDR_VAR 0 16
31480: PUSH
31481: LD_VAR 0 1
31485: PPUSH
31486: CALL_OW 255
31490: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31491: LD_ADDR_VAR 0 17
31495: PUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 248
31505: ST_TO_ADDR
// if sources then
31506: LD_VAR 0 5
31510: IFFALSE 31557
// for i = 1 to 3 do
31512: LD_ADDR_VAR 0 8
31516: PUSH
31517: DOUBLE
31518: LD_INT 1
31520: DEC
31521: ST_TO_ADDR
31522: LD_INT 3
31524: PUSH
31525: FOR_TO
31526: IFFALSE 31555
// AddResourceType ( base , i , sources [ i ] ) ;
31528: LD_VAR 0 15
31532: PPUSH
31533: LD_VAR 0 8
31537: PPUSH
31538: LD_VAR 0 5
31542: PUSH
31543: LD_VAR 0 8
31547: ARRAY
31548: PPUSH
31549: CALL_OW 276
31553: GO 31525
31555: POP
31556: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31557: LD_ADDR_VAR 0 18
31561: PUSH
31562: LD_VAR 0 15
31566: PPUSH
31567: LD_VAR 0 2
31571: PPUSH
31572: LD_INT 1
31574: PPUSH
31575: CALL 30818 0 3
31579: ST_TO_ADDR
// InitHc ;
31580: CALL_OW 19
// InitUc ;
31584: CALL_OW 18
// uc_side := side ;
31588: LD_ADDR_OWVAR 20
31592: PUSH
31593: LD_VAR 0 16
31597: ST_TO_ADDR
// uc_nation := nation ;
31598: LD_ADDR_OWVAR 21
31602: PUSH
31603: LD_VAR 0 17
31607: ST_TO_ADDR
// if buildings then
31608: LD_VAR 0 18
31612: IFFALSE 32934
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31614: LD_ADDR_VAR 0 19
31618: PUSH
31619: LD_VAR 0 18
31623: PPUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 30
31629: PUSH
31630: LD_INT 29
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 30
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 72
31656: ST_TO_ADDR
// if tmp then
31657: LD_VAR 0 19
31661: IFFALSE 31709
// for i in tmp do
31663: LD_ADDR_VAR 0 8
31667: PUSH
31668: LD_VAR 0 19
31672: PUSH
31673: FOR_IN
31674: IFFALSE 31707
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31676: LD_VAR 0 8
31680: PPUSH
31681: CALL_OW 250
31685: PPUSH
31686: LD_VAR 0 8
31690: PPUSH
31691: CALL_OW 251
31695: PPUSH
31696: LD_VAR 0 16
31700: PPUSH
31701: CALL_OW 441
31705: GO 31673
31707: POP
31708: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31709: LD_VAR 0 18
31713: PPUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 30
31719: PUSH
31720: LD_INT 32
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 30
31729: PUSH
31730: LD_INT 33
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: PPUSH
31742: CALL_OW 72
31746: IFFALSE 31834
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31748: LD_ADDR_VAR 0 8
31752: PUSH
31753: LD_VAR 0 18
31757: PPUSH
31758: LD_INT 2
31760: PUSH
31761: LD_INT 30
31763: PUSH
31764: LD_INT 32
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 30
31773: PUSH
31774: LD_INT 33
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL_OW 72
31790: PUSH
31791: FOR_IN
31792: IFFALSE 31832
// begin if not GetBWeapon ( i ) then
31794: LD_VAR 0 8
31798: PPUSH
31799: CALL_OW 269
31803: NOT
31804: IFFALSE 31830
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31806: LD_VAR 0 8
31810: PPUSH
31811: LD_VAR 0 8
31815: PPUSH
31816: LD_VAR 0 2
31820: PPUSH
31821: CALL 33080 0 2
31825: PPUSH
31826: CALL_OW 431
// end ;
31830: GO 31791
31832: POP
31833: POP
// end ; for i = 1 to personel do
31834: LD_ADDR_VAR 0 8
31838: PUSH
31839: DOUBLE
31840: LD_INT 1
31842: DEC
31843: ST_TO_ADDR
31844: LD_VAR 0 6
31848: PUSH
31849: FOR_TO
31850: IFFALSE 32914
// begin if i > 4 then
31852: LD_VAR 0 8
31856: PUSH
31857: LD_INT 4
31859: GREATER
31860: IFFALSE 31864
// break ;
31862: GO 32914
// case i of 1 :
31864: LD_VAR 0 8
31868: PUSH
31869: LD_INT 1
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31877
31875: GO 31957
31877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31878: LD_ADDR_VAR 0 12
31882: PUSH
31883: LD_VAR 0 18
31887: PPUSH
31888: LD_INT 22
31890: PUSH
31891: LD_VAR 0 16
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 58
31902: PUSH
31903: EMPTY
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 30
31911: PUSH
31912: LD_INT 32
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 30
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 30
31931: PUSH
31932: LD_INT 5
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: PPUSH
31950: CALL_OW 72
31954: ST_TO_ADDR
31955: GO 32179
31957: LD_INT 2
31959: DOUBLE
31960: EQUAL
31961: IFTRUE 31965
31963: GO 32027
31965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31966: LD_ADDR_VAR 0 12
31970: PUSH
31971: LD_VAR 0 18
31975: PPUSH
31976: LD_INT 22
31978: PUSH
31979: LD_VAR 0 16
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 30
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 30
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PPUSH
32020: CALL_OW 72
32024: ST_TO_ADDR
32025: GO 32179
32027: LD_INT 3
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32097
32035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32036: LD_ADDR_VAR 0 12
32040: PUSH
32041: LD_VAR 0 18
32045: PPUSH
32046: LD_INT 22
32048: PUSH
32049: LD_VAR 0 16
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 30
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PPUSH
32090: CALL_OW 72
32094: ST_TO_ADDR
32095: GO 32179
32097: LD_INT 4
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32178
32105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32106: LD_ADDR_VAR 0 12
32110: PUSH
32111: LD_VAR 0 18
32115: PPUSH
32116: LD_INT 22
32118: PUSH
32119: LD_VAR 0 16
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 30
32133: PUSH
32134: LD_INT 6
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 30
32143: PUSH
32144: LD_INT 7
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 30
32153: PUSH
32154: LD_INT 8
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 72
32175: ST_TO_ADDR
32176: GO 32179
32178: POP
// if i = 1 then
32179: LD_VAR 0 8
32183: PUSH
32184: LD_INT 1
32186: EQUAL
32187: IFFALSE 32298
// begin tmp := [ ] ;
32189: LD_ADDR_VAR 0 19
32193: PUSH
32194: EMPTY
32195: ST_TO_ADDR
// for j in f do
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_VAR 0 12
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32280
// if GetBType ( j ) = b_bunker then
32209: LD_VAR 0 9
32213: PPUSH
32214: CALL_OW 266
32218: PUSH
32219: LD_INT 32
32221: EQUAL
32222: IFFALSE 32249
// tmp := Insert ( tmp , 1 , j ) else
32224: LD_ADDR_VAR 0 19
32228: PUSH
32229: LD_VAR 0 19
32233: PPUSH
32234: LD_INT 1
32236: PPUSH
32237: LD_VAR 0 9
32241: PPUSH
32242: CALL_OW 2
32246: ST_TO_ADDR
32247: GO 32278
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32249: LD_ADDR_VAR 0 19
32253: PUSH
32254: LD_VAR 0 19
32258: PPUSH
32259: LD_VAR 0 19
32263: PUSH
32264: LD_INT 1
32266: PLUS
32267: PPUSH
32268: LD_VAR 0 9
32272: PPUSH
32273: CALL_OW 2
32277: ST_TO_ADDR
32278: GO 32206
32280: POP
32281: POP
// if tmp then
32282: LD_VAR 0 19
32286: IFFALSE 32298
// f := tmp ;
32288: LD_ADDR_VAR 0 12
32292: PUSH
32293: LD_VAR 0 19
32297: ST_TO_ADDR
// end ; x := personel [ i ] ;
32298: LD_ADDR_VAR 0 13
32302: PUSH
32303: LD_VAR 0 6
32307: PUSH
32308: LD_VAR 0 8
32312: ARRAY
32313: ST_TO_ADDR
// if x = - 1 then
32314: LD_VAR 0 13
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: EQUAL
32323: IFFALSE 32532
// begin for j in f do
32325: LD_ADDR_VAR 0 9
32329: PUSH
32330: LD_VAR 0 12
32334: PUSH
32335: FOR_IN
32336: IFFALSE 32528
// repeat InitHc ;
32338: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32342: LD_VAR 0 9
32346: PPUSH
32347: CALL_OW 266
32351: PUSH
32352: LD_INT 5
32354: EQUAL
32355: IFFALSE 32425
// begin if UnitsInside ( j ) < 3 then
32357: LD_VAR 0 9
32361: PPUSH
32362: CALL_OW 313
32366: PUSH
32367: LD_INT 3
32369: LESS
32370: IFFALSE 32406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32372: LD_INT 0
32374: PPUSH
32375: LD_INT 5
32377: PUSH
32378: LD_INT 8
32380: PUSH
32381: LD_INT 9
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: PUSH
32389: LD_VAR 0 17
32393: ARRAY
32394: PPUSH
32395: LD_VAR 0 4
32399: PPUSH
32400: CALL_OW 380
32404: GO 32423
// PrepareHuman ( false , i , skill ) ;
32406: LD_INT 0
32408: PPUSH
32409: LD_VAR 0 8
32413: PPUSH
32414: LD_VAR 0 4
32418: PPUSH
32419: CALL_OW 380
// end else
32423: GO 32442
// PrepareHuman ( false , i , skill ) ;
32425: LD_INT 0
32427: PPUSH
32428: LD_VAR 0 8
32432: PPUSH
32433: LD_VAR 0 4
32437: PPUSH
32438: CALL_OW 380
// un := CreateHuman ;
32442: LD_ADDR_VAR 0 14
32446: PUSH
32447: CALL_OW 44
32451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32452: LD_ADDR_VAR 0 7
32456: PUSH
32457: LD_VAR 0 7
32461: PPUSH
32462: LD_INT 1
32464: PPUSH
32465: LD_VAR 0 14
32469: PPUSH
32470: CALL_OW 2
32474: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32475: LD_VAR 0 14
32479: PPUSH
32480: LD_VAR 0 9
32484: PPUSH
32485: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32489: LD_VAR 0 9
32493: PPUSH
32494: CALL_OW 313
32498: PUSH
32499: LD_INT 6
32501: EQUAL
32502: PUSH
32503: LD_VAR 0 9
32507: PPUSH
32508: CALL_OW 266
32512: PUSH
32513: LD_INT 32
32515: PUSH
32516: LD_INT 31
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: IN
32523: OR
32524: IFFALSE 32338
32526: GO 32335
32528: POP
32529: POP
// end else
32530: GO 32912
// for j = 1 to x do
32532: LD_ADDR_VAR 0 9
32536: PUSH
32537: DOUBLE
32538: LD_INT 1
32540: DEC
32541: ST_TO_ADDR
32542: LD_VAR 0 13
32546: PUSH
32547: FOR_TO
32548: IFFALSE 32910
// begin InitHc ;
32550: CALL_OW 19
// if not f then
32554: LD_VAR 0 12
32558: NOT
32559: IFFALSE 32648
// begin PrepareHuman ( false , i , skill ) ;
32561: LD_INT 0
32563: PPUSH
32564: LD_VAR 0 8
32568: PPUSH
32569: LD_VAR 0 4
32573: PPUSH
32574: CALL_OW 380
// un := CreateHuman ;
32578: LD_ADDR_VAR 0 14
32582: PUSH
32583: CALL_OW 44
32587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32588: LD_ADDR_VAR 0 7
32592: PUSH
32593: LD_VAR 0 7
32597: PPUSH
32598: LD_INT 1
32600: PPUSH
32601: LD_VAR 0 14
32605: PPUSH
32606: CALL_OW 2
32610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32611: LD_VAR 0 14
32615: PPUSH
32616: LD_VAR 0 1
32620: PPUSH
32621: CALL_OW 250
32625: PPUSH
32626: LD_VAR 0 1
32630: PPUSH
32631: CALL_OW 251
32635: PPUSH
32636: LD_INT 10
32638: PPUSH
32639: LD_INT 0
32641: PPUSH
32642: CALL_OW 50
// continue ;
32646: GO 32547
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32648: LD_VAR 0 12
32652: PUSH
32653: LD_INT 1
32655: ARRAY
32656: PPUSH
32657: CALL_OW 313
32661: PUSH
32662: LD_VAR 0 12
32666: PUSH
32667: LD_INT 1
32669: ARRAY
32670: PPUSH
32671: CALL_OW 266
32675: PUSH
32676: LD_INT 32
32678: PUSH
32679: LD_INT 31
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: IN
32686: AND
32687: PUSH
32688: LD_VAR 0 12
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PPUSH
32697: CALL_OW 313
32701: PUSH
32702: LD_INT 6
32704: EQUAL
32705: OR
32706: IFFALSE 32726
// f := Delete ( f , 1 ) ;
32708: LD_ADDR_VAR 0 12
32712: PUSH
32713: LD_VAR 0 12
32717: PPUSH
32718: LD_INT 1
32720: PPUSH
32721: CALL_OW 3
32725: ST_TO_ADDR
// if not f then
32726: LD_VAR 0 12
32730: NOT
32731: IFFALSE 32749
// begin x := x + 2 ;
32733: LD_ADDR_VAR 0 13
32737: PUSH
32738: LD_VAR 0 13
32742: PUSH
32743: LD_INT 2
32745: PLUS
32746: ST_TO_ADDR
// continue ;
32747: GO 32547
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32749: LD_VAR 0 12
32753: PUSH
32754: LD_INT 1
32756: ARRAY
32757: PPUSH
32758: CALL_OW 266
32762: PUSH
32763: LD_INT 5
32765: EQUAL
32766: IFFALSE 32840
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32768: LD_VAR 0 12
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PPUSH
32777: CALL_OW 313
32781: PUSH
32782: LD_INT 3
32784: LESS
32785: IFFALSE 32821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32787: LD_INT 0
32789: PPUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 8
32795: PUSH
32796: LD_INT 9
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: PUSH
32804: LD_VAR 0 17
32808: ARRAY
32809: PPUSH
32810: LD_VAR 0 4
32814: PPUSH
32815: CALL_OW 380
32819: GO 32838
// PrepareHuman ( false , i , skill ) ;
32821: LD_INT 0
32823: PPUSH
32824: LD_VAR 0 8
32828: PPUSH
32829: LD_VAR 0 4
32833: PPUSH
32834: CALL_OW 380
// end else
32838: GO 32857
// PrepareHuman ( false , i , skill ) ;
32840: LD_INT 0
32842: PPUSH
32843: LD_VAR 0 8
32847: PPUSH
32848: LD_VAR 0 4
32852: PPUSH
32853: CALL_OW 380
// un := CreateHuman ;
32857: LD_ADDR_VAR 0 14
32861: PUSH
32862: CALL_OW 44
32866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32867: LD_ADDR_VAR 0 7
32871: PUSH
32872: LD_VAR 0 7
32876: PPUSH
32877: LD_INT 1
32879: PPUSH
32880: LD_VAR 0 14
32884: PPUSH
32885: CALL_OW 2
32889: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32890: LD_VAR 0 14
32894: PPUSH
32895: LD_VAR 0 12
32899: PUSH
32900: LD_INT 1
32902: ARRAY
32903: PPUSH
32904: CALL_OW 52
// end ;
32908: GO 32547
32910: POP
32911: POP
// end ;
32912: GO 31849
32914: POP
32915: POP
// result := result ^ buildings ;
32916: LD_ADDR_VAR 0 7
32920: PUSH
32921: LD_VAR 0 7
32925: PUSH
32926: LD_VAR 0 18
32930: ADD
32931: ST_TO_ADDR
// end else
32932: GO 33075
// begin for i = 1 to personel do
32934: LD_ADDR_VAR 0 8
32938: PUSH
32939: DOUBLE
32940: LD_INT 1
32942: DEC
32943: ST_TO_ADDR
32944: LD_VAR 0 6
32948: PUSH
32949: FOR_TO
32950: IFFALSE 33073
// begin if i > 4 then
32952: LD_VAR 0 8
32956: PUSH
32957: LD_INT 4
32959: GREATER
32960: IFFALSE 32964
// break ;
32962: GO 33073
// x := personel [ i ] ;
32964: LD_ADDR_VAR 0 13
32968: PUSH
32969: LD_VAR 0 6
32973: PUSH
32974: LD_VAR 0 8
32978: ARRAY
32979: ST_TO_ADDR
// if x = - 1 then
32980: LD_VAR 0 13
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: EQUAL
32989: IFFALSE 32993
// continue ;
32991: GO 32949
// PrepareHuman ( false , i , skill ) ;
32993: LD_INT 0
32995: PPUSH
32996: LD_VAR 0 8
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: CALL_OW 380
// un := CreateHuman ;
33010: LD_ADDR_VAR 0 14
33014: PUSH
33015: CALL_OW 44
33019: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33020: LD_VAR 0 14
33024: PPUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 250
33034: PPUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 251
33044: PPUSH
33045: LD_INT 10
33047: PPUSH
33048: LD_INT 0
33050: PPUSH
33051: CALL_OW 50
// result := result ^ un ;
33055: LD_ADDR_VAR 0 7
33059: PUSH
33060: LD_VAR 0 7
33064: PUSH
33065: LD_VAR 0 14
33069: ADD
33070: ST_TO_ADDR
// end ;
33071: GO 32949
33073: POP
33074: POP
// end ; end ;
33075: LD_VAR 0 7
33079: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
33097: PPUSH
// result := false ;
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 0
33105: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33106: LD_VAR 0 1
33110: NOT
33111: PUSH
33112: LD_VAR 0 1
33116: PPUSH
33117: CALL_OW 266
33121: PUSH
33122: LD_INT 32
33124: PUSH
33125: LD_INT 33
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: IN
33132: NOT
33133: OR
33134: IFFALSE 33138
// exit ;
33136: GO 34247
// nat := GetNation ( tower ) ;
33138: LD_ADDR_VAR 0 12
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 248
33152: ST_TO_ADDR
// side := GetSide ( tower ) ;
33153: LD_ADDR_VAR 0 16
33157: PUSH
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 255
33167: ST_TO_ADDR
// x := GetX ( tower ) ;
33168: LD_ADDR_VAR 0 10
33172: PUSH
33173: LD_VAR 0 1
33177: PPUSH
33178: CALL_OW 250
33182: ST_TO_ADDR
// y := GetY ( tower ) ;
33183: LD_ADDR_VAR 0 11
33187: PUSH
33188: LD_VAR 0 1
33192: PPUSH
33193: CALL_OW 251
33197: ST_TO_ADDR
// if not x or not y then
33198: LD_VAR 0 10
33202: NOT
33203: PUSH
33204: LD_VAR 0 11
33208: NOT
33209: OR
33210: IFFALSE 33214
// exit ;
33212: GO 34247
// weapon := 0 ;
33214: LD_ADDR_VAR 0 18
33218: PUSH
33219: LD_INT 0
33221: ST_TO_ADDR
// fac_list := [ ] ;
33222: LD_ADDR_VAR 0 17
33226: PUSH
33227: EMPTY
33228: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33229: LD_ADDR_VAR 0 6
33233: PUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 274
33243: PPUSH
33244: LD_VAR 0 2
33248: PPUSH
33249: LD_INT 0
33251: PPUSH
33252: CALL 30818 0 3
33256: PPUSH
33257: LD_INT 30
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PPUSH
33267: CALL_OW 72
33271: ST_TO_ADDR
// if not factories then
33272: LD_VAR 0 6
33276: NOT
33277: IFFALSE 33281
// exit ;
33279: GO 34247
// for i in factories do
33281: LD_ADDR_VAR 0 8
33285: PUSH
33286: LD_VAR 0 6
33290: PUSH
33291: FOR_IN
33292: IFFALSE 33317
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33294: LD_ADDR_VAR 0 17
33298: PUSH
33299: LD_VAR 0 17
33303: PUSH
33304: LD_VAR 0 8
33308: PPUSH
33309: CALL_OW 478
33313: UNION
33314: ST_TO_ADDR
33315: GO 33291
33317: POP
33318: POP
// if not fac_list then
33319: LD_VAR 0 17
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 34247
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_INT 4
33335: PUSH
33336: LD_INT 5
33338: PUSH
33339: LD_INT 9
33341: PUSH
33342: LD_INT 10
33344: PUSH
33345: LD_INT 6
33347: PUSH
33348: LD_INT 7
33350: PUSH
33351: LD_INT 11
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 27
33365: PUSH
33366: LD_INT 28
33368: PUSH
33369: LD_INT 26
33371: PUSH
33372: LD_INT 30
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 43
33383: PUSH
33384: LD_INT 44
33386: PUSH
33387: LD_INT 46
33389: PUSH
33390: LD_INT 45
33392: PUSH
33393: LD_INT 47
33395: PUSH
33396: LD_INT 49
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: PUSH
33412: LD_VAR 0 12
33416: ARRAY
33417: ST_TO_ADDR
// list := list isect fac_list ;
33418: LD_ADDR_VAR 0 5
33422: PUSH
33423: LD_VAR 0 5
33427: PUSH
33428: LD_VAR 0 17
33432: ISECT
33433: ST_TO_ADDR
// if not list then
33434: LD_VAR 0 5
33438: NOT
33439: IFFALSE 33443
// exit ;
33441: GO 34247
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33443: LD_VAR 0 12
33447: PUSH
33448: LD_INT 3
33450: EQUAL
33451: PUSH
33452: LD_INT 49
33454: PUSH
33455: LD_VAR 0 5
33459: IN
33460: AND
33461: PUSH
33462: LD_INT 31
33464: PPUSH
33465: LD_VAR 0 16
33469: PPUSH
33470: CALL_OW 321
33474: PUSH
33475: LD_INT 2
33477: EQUAL
33478: AND
33479: IFFALSE 33539
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33481: LD_INT 22
33483: PUSH
33484: LD_VAR 0 16
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 35
33495: PUSH
33496: LD_INT 49
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 91
33505: PUSH
33506: LD_VAR 0 1
33510: PUSH
33511: LD_INT 10
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: PPUSH
33524: CALL_OW 69
33528: NOT
33529: IFFALSE 33539
// weapon := ru_time_lapser ;
33531: LD_ADDR_VAR 0 18
33535: PUSH
33536: LD_INT 49
33538: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33539: LD_VAR 0 12
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: IN
33554: PUSH
33555: LD_INT 11
33557: PUSH
33558: LD_VAR 0 5
33562: IN
33563: PUSH
33564: LD_INT 30
33566: PUSH
33567: LD_VAR 0 5
33571: IN
33572: OR
33573: AND
33574: PUSH
33575: LD_INT 6
33577: PPUSH
33578: LD_VAR 0 16
33582: PPUSH
33583: CALL_OW 321
33587: PUSH
33588: LD_INT 2
33590: EQUAL
33591: AND
33592: IFFALSE 33757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33594: LD_INT 22
33596: PUSH
33597: LD_VAR 0 16
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 35
33611: PUSH
33612: LD_INT 11
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 35
33621: PUSH
33622: LD_INT 30
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 91
33636: PUSH
33637: LD_VAR 0 1
33641: PUSH
33642: LD_INT 18
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: PPUSH
33655: CALL_OW 69
33659: NOT
33660: PUSH
33661: LD_INT 22
33663: PUSH
33664: LD_VAR 0 16
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 30
33678: PUSH
33679: LD_INT 32
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 30
33688: PUSH
33689: LD_INT 33
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 91
33703: PUSH
33704: LD_VAR 0 1
33708: PUSH
33709: LD_INT 12
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: PPUSH
33725: CALL_OW 69
33729: PUSH
33730: LD_INT 2
33732: GREATER
33733: AND
33734: IFFALSE 33757
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33736: LD_ADDR_VAR 0 18
33740: PUSH
33741: LD_INT 11
33743: PUSH
33744: LD_INT 30
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_VAR 0 12
33755: ARRAY
33756: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33757: LD_VAR 0 18
33761: NOT
33762: PUSH
33763: LD_INT 40
33765: PPUSH
33766: LD_VAR 0 16
33770: PPUSH
33771: CALL_OW 321
33775: PUSH
33776: LD_INT 2
33778: EQUAL
33779: AND
33780: PUSH
33781: LD_INT 7
33783: PUSH
33784: LD_VAR 0 5
33788: IN
33789: PUSH
33790: LD_INT 28
33792: PUSH
33793: LD_VAR 0 5
33797: IN
33798: OR
33799: PUSH
33800: LD_INT 45
33802: PUSH
33803: LD_VAR 0 5
33807: IN
33808: OR
33809: AND
33810: IFFALSE 34064
// begin hex := GetHexInfo ( x , y ) ;
33812: LD_ADDR_VAR 0 4
33816: PUSH
33817: LD_VAR 0 10
33821: PPUSH
33822: LD_VAR 0 11
33826: PPUSH
33827: CALL_OW 546
33831: ST_TO_ADDR
// if hex [ 1 ] then
33832: LD_VAR 0 4
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: IFFALSE 33844
// exit ;
33842: GO 34247
// height := hex [ 2 ] ;
33844: LD_ADDR_VAR 0 15
33848: PUSH
33849: LD_VAR 0 4
33853: PUSH
33854: LD_INT 2
33856: ARRAY
33857: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33858: LD_ADDR_VAR 0 14
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 5
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: ST_TO_ADDR
// for i in tmp do
33881: LD_ADDR_VAR 0 8
33885: PUSH
33886: LD_VAR 0 14
33890: PUSH
33891: FOR_IN
33892: IFFALSE 34062
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: LD_VAR 0 10
33903: PPUSH
33904: LD_VAR 0 8
33908: PPUSH
33909: LD_INT 5
33911: PPUSH
33912: CALL_OW 272
33916: PUSH
33917: LD_VAR 0 11
33921: PPUSH
33922: LD_VAR 0 8
33926: PPUSH
33927: LD_INT 5
33929: PPUSH
33930: CALL_OW 273
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33939: LD_VAR 0 9
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PPUSH
33948: LD_VAR 0 9
33952: PUSH
33953: LD_INT 2
33955: ARRAY
33956: PPUSH
33957: CALL_OW 488
33961: IFFALSE 34060
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: LD_VAR 0 9
33972: PUSH
33973: LD_INT 1
33975: ARRAY
33976: PPUSH
33977: LD_VAR 0 9
33981: PUSH
33982: LD_INT 2
33984: ARRAY
33985: PPUSH
33986: CALL_OW 546
33990: ST_TO_ADDR
// if hex [ 1 ] then
33991: LD_VAR 0 4
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: IFFALSE 34003
// continue ;
34001: GO 33891
// h := hex [ 2 ] ;
34003: LD_ADDR_VAR 0 13
34007: PUSH
34008: LD_VAR 0 4
34012: PUSH
34013: LD_INT 2
34015: ARRAY
34016: ST_TO_ADDR
// if h + 7 < height then
34017: LD_VAR 0 13
34021: PUSH
34022: LD_INT 7
34024: PLUS
34025: PUSH
34026: LD_VAR 0 15
34030: LESS
34031: IFFALSE 34060
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34033: LD_ADDR_VAR 0 18
34037: PUSH
34038: LD_INT 7
34040: PUSH
34041: LD_INT 28
34043: PUSH
34044: LD_INT 45
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_VAR 0 12
34056: ARRAY
34057: ST_TO_ADDR
// break ;
34058: GO 34062
// end ; end ; end ;
34060: GO 33891
34062: POP
34063: POP
// end ; if not weapon then
34064: LD_VAR 0 18
34068: NOT
34069: IFFALSE 34129
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34071: LD_ADDR_VAR 0 5
34075: PUSH
34076: LD_VAR 0 5
34080: PUSH
34081: LD_INT 11
34083: PUSH
34084: LD_INT 30
34086: PUSH
34087: LD_INT 49
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: DIFF
34095: ST_TO_ADDR
// if not list then
34096: LD_VAR 0 5
34100: NOT
34101: IFFALSE 34105
// exit ;
34103: GO 34247
// weapon := list [ rand ( 1 , list ) ] ;
34105: LD_ADDR_VAR 0 18
34109: PUSH
34110: LD_VAR 0 5
34114: PUSH
34115: LD_INT 1
34117: PPUSH
34118: LD_VAR 0 5
34122: PPUSH
34123: CALL_OW 12
34127: ARRAY
34128: ST_TO_ADDR
// end ; if weapon then
34129: LD_VAR 0 18
34133: IFFALSE 34247
// begin tmp := CostOfWeapon ( weapon ) ;
34135: LD_ADDR_VAR 0 14
34139: PUSH
34140: LD_VAR 0 18
34144: PPUSH
34145: CALL_OW 451
34149: ST_TO_ADDR
// j := GetBase ( tower ) ;
34150: LD_ADDR_VAR 0 9
34154: PUSH
34155: LD_VAR 0 1
34159: PPUSH
34160: CALL_OW 274
34164: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34165: LD_VAR 0 9
34169: PPUSH
34170: LD_INT 1
34172: PPUSH
34173: CALL_OW 275
34177: PUSH
34178: LD_VAR 0 14
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: GREATEREQUAL
34187: PUSH
34188: LD_VAR 0 9
34192: PPUSH
34193: LD_INT 2
34195: PPUSH
34196: CALL_OW 275
34200: PUSH
34201: LD_VAR 0 14
34205: PUSH
34206: LD_INT 2
34208: ARRAY
34209: GREATEREQUAL
34210: AND
34211: PUSH
34212: LD_VAR 0 9
34216: PPUSH
34217: LD_INT 3
34219: PPUSH
34220: CALL_OW 275
34224: PUSH
34225: LD_VAR 0 14
34229: PUSH
34230: LD_INT 3
34232: ARRAY
34233: GREATEREQUAL
34234: AND
34235: IFFALSE 34247
// result := weapon ;
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_VAR 0 18
34246: ST_TO_ADDR
// end ; end ;
34247: LD_VAR 0 3
34251: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
// result := true ;
34256: LD_ADDR_VAR 0 3
34260: PUSH
34261: LD_INT 1
34263: ST_TO_ADDR
// if array1 = array2 then
34264: LD_VAR 0 1
34268: PUSH
34269: LD_VAR 0 2
34273: EQUAL
34274: IFFALSE 34334
// begin for i = 1 to array1 do
34276: LD_ADDR_VAR 0 4
34280: PUSH
34281: DOUBLE
34282: LD_INT 1
34284: DEC
34285: ST_TO_ADDR
34286: LD_VAR 0 1
34290: PUSH
34291: FOR_TO
34292: IFFALSE 34330
// if array1 [ i ] <> array2 [ i ] then
34294: LD_VAR 0 1
34298: PUSH
34299: LD_VAR 0 4
34303: ARRAY
34304: PUSH
34305: LD_VAR 0 2
34309: PUSH
34310: LD_VAR 0 4
34314: ARRAY
34315: NONEQUAL
34316: IFFALSE 34328
// begin result := false ;
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_INT 0
34325: ST_TO_ADDR
// break ;
34326: GO 34330
// end ;
34328: GO 34291
34330: POP
34331: POP
// end else
34332: GO 34342
// result := false ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_INT 0
34341: ST_TO_ADDR
// end ;
34342: LD_VAR 0 3
34346: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34347: LD_INT 0
34349: PPUSH
34350: PPUSH
// if not array1 or not array2 then
34351: LD_VAR 0 1
34355: NOT
34356: PUSH
34357: LD_VAR 0 2
34361: NOT
34362: OR
34363: IFFALSE 34367
// exit ;
34365: GO 34431
// result := true ;
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 1
34374: ST_TO_ADDR
// for i = 1 to array1 do
34375: LD_ADDR_VAR 0 4
34379: PUSH
34380: DOUBLE
34381: LD_INT 1
34383: DEC
34384: ST_TO_ADDR
34385: LD_VAR 0 1
34389: PUSH
34390: FOR_TO
34391: IFFALSE 34429
// if array1 [ i ] <> array2 [ i ] then
34393: LD_VAR 0 1
34397: PUSH
34398: LD_VAR 0 4
34402: ARRAY
34403: PUSH
34404: LD_VAR 0 2
34408: PUSH
34409: LD_VAR 0 4
34413: ARRAY
34414: NONEQUAL
34415: IFFALSE 34427
// begin result := false ;
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_INT 0
34424: ST_TO_ADDR
// break ;
34425: GO 34429
// end ;
34427: GO 34390
34429: POP
34430: POP
// end ;
34431: LD_VAR 0 3
34435: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34436: LD_INT 0
34438: PPUSH
34439: PPUSH
34440: PPUSH
// pom := GetBase ( fac ) ;
34441: LD_ADDR_VAR 0 5
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 274
34455: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34456: LD_ADDR_VAR 0 4
34460: PUSH
34461: LD_VAR 0 2
34465: PUSH
34466: LD_INT 1
34468: ARRAY
34469: PPUSH
34470: LD_VAR 0 2
34474: PUSH
34475: LD_INT 2
34477: ARRAY
34478: PPUSH
34479: LD_VAR 0 2
34483: PUSH
34484: LD_INT 3
34486: ARRAY
34487: PPUSH
34488: LD_VAR 0 2
34492: PUSH
34493: LD_INT 4
34495: ARRAY
34496: PPUSH
34497: CALL_OW 449
34501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: LD_VAR 0 5
34511: PPUSH
34512: LD_INT 1
34514: PPUSH
34515: CALL_OW 275
34519: PUSH
34520: LD_VAR 0 4
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: GREATEREQUAL
34529: PUSH
34530: LD_VAR 0 5
34534: PPUSH
34535: LD_INT 2
34537: PPUSH
34538: CALL_OW 275
34542: PUSH
34543: LD_VAR 0 4
34547: PUSH
34548: LD_INT 2
34550: ARRAY
34551: GREATEREQUAL
34552: AND
34553: PUSH
34554: LD_VAR 0 5
34558: PPUSH
34559: LD_INT 3
34561: PPUSH
34562: CALL_OW 275
34566: PUSH
34567: LD_VAR 0 4
34571: PUSH
34572: LD_INT 3
34574: ARRAY
34575: GREATEREQUAL
34576: AND
34577: ST_TO_ADDR
// end ;
34578: LD_VAR 0 3
34582: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34583: LD_INT 0
34585: PPUSH
34586: PPUSH
34587: PPUSH
34588: PPUSH
// pom := GetBase ( building ) ;
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 274
34603: ST_TO_ADDR
// if not pom then
34604: LD_VAR 0 3
34608: NOT
34609: IFFALSE 34613
// exit ;
34611: GO 34783
// btype := GetBType ( building ) ;
34613: LD_ADDR_VAR 0 5
34617: PUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: CALL_OW 266
34627: ST_TO_ADDR
// if btype = b_armoury then
34628: LD_VAR 0 5
34632: PUSH
34633: LD_INT 4
34635: EQUAL
34636: IFFALSE 34646
// btype := b_barracks ;
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: LD_INT 5
34645: ST_TO_ADDR
// if btype = b_depot then
34646: LD_VAR 0 5
34650: PUSH
34651: LD_INT 0
34653: EQUAL
34654: IFFALSE 34664
// btype := b_warehouse ;
34656: LD_ADDR_VAR 0 5
34660: PUSH
34661: LD_INT 1
34663: ST_TO_ADDR
// if btype = b_workshop then
34664: LD_VAR 0 5
34668: PUSH
34669: LD_INT 2
34671: EQUAL
34672: IFFALSE 34682
// btype := b_factory ;
34674: LD_ADDR_VAR 0 5
34678: PUSH
34679: LD_INT 3
34681: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34682: LD_ADDR_VAR 0 4
34686: PUSH
34687: LD_VAR 0 5
34691: PPUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: CALL_OW 248
34701: PPUSH
34702: CALL_OW 450
34706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34707: LD_ADDR_VAR 0 2
34711: PUSH
34712: LD_VAR 0 3
34716: PPUSH
34717: LD_INT 1
34719: PPUSH
34720: CALL_OW 275
34724: PUSH
34725: LD_VAR 0 4
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: GREATEREQUAL
34734: PUSH
34735: LD_VAR 0 3
34739: PPUSH
34740: LD_INT 2
34742: PPUSH
34743: CALL_OW 275
34747: PUSH
34748: LD_VAR 0 4
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: GREATEREQUAL
34757: AND
34758: PUSH
34759: LD_VAR 0 3
34763: PPUSH
34764: LD_INT 3
34766: PPUSH
34767: CALL_OW 275
34771: PUSH
34772: LD_VAR 0 4
34776: PUSH
34777: LD_INT 3
34779: ARRAY
34780: GREATEREQUAL
34781: AND
34782: ST_TO_ADDR
// end ;
34783: LD_VAR 0 2
34787: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
34792: PPUSH
// pom := GetBase ( building ) ;
34793: LD_ADDR_VAR 0 4
34797: PUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 274
34807: ST_TO_ADDR
// if not pom then
34808: LD_VAR 0 4
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 34918
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34817: LD_ADDR_VAR 0 5
34821: PUSH
34822: LD_VAR 0 2
34826: PPUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL_OW 248
34836: PPUSH
34837: CALL_OW 450
34841: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34842: LD_ADDR_VAR 0 3
34846: PUSH
34847: LD_VAR 0 4
34851: PPUSH
34852: LD_INT 1
34854: PPUSH
34855: CALL_OW 275
34859: PUSH
34860: LD_VAR 0 5
34864: PUSH
34865: LD_INT 1
34867: ARRAY
34868: GREATEREQUAL
34869: PUSH
34870: LD_VAR 0 4
34874: PPUSH
34875: LD_INT 2
34877: PPUSH
34878: CALL_OW 275
34882: PUSH
34883: LD_VAR 0 5
34887: PUSH
34888: LD_INT 2
34890: ARRAY
34891: GREATEREQUAL
34892: AND
34893: PUSH
34894: LD_VAR 0 4
34898: PPUSH
34899: LD_INT 3
34901: PPUSH
34902: CALL_OW 275
34906: PUSH
34907: LD_VAR 0 5
34911: PUSH
34912: LD_INT 3
34914: ARRAY
34915: GREATEREQUAL
34916: AND
34917: ST_TO_ADDR
// end ;
34918: LD_VAR 0 3
34922: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34923: LD_INT 0
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
// result := false ;
34936: LD_ADDR_VAR 0 8
34940: PUSH
34941: LD_INT 0
34943: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34944: LD_VAR 0 5
34948: NOT
34949: PUSH
34950: LD_VAR 0 1
34954: NOT
34955: OR
34956: PUSH
34957: LD_VAR 0 2
34961: NOT
34962: OR
34963: PUSH
34964: LD_VAR 0 3
34968: NOT
34969: OR
34970: IFFALSE 34974
// exit ;
34972: GO 35788
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34974: LD_ADDR_VAR 0 14
34978: PUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: LD_VAR 0 2
34988: PPUSH
34989: LD_VAR 0 3
34993: PPUSH
34994: LD_VAR 0 4
34998: PPUSH
34999: LD_VAR 0 5
35003: PUSH
35004: LD_INT 1
35006: ARRAY
35007: PPUSH
35008: CALL_OW 248
35012: PPUSH
35013: LD_INT 0
35015: PPUSH
35016: CALL 37025 0 6
35020: ST_TO_ADDR
// if not hexes then
35021: LD_VAR 0 14
35025: NOT
35026: IFFALSE 35030
// exit ;
35028: GO 35788
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35030: LD_ADDR_VAR 0 17
35034: PUSH
35035: LD_VAR 0 5
35039: PPUSH
35040: LD_INT 22
35042: PUSH
35043: LD_VAR 0 13
35047: PPUSH
35048: CALL_OW 255
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: LD_INT 30
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 30
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PPUSH
35089: CALL_OW 72
35093: ST_TO_ADDR
// for i = 1 to hexes do
35094: LD_ADDR_VAR 0 9
35098: PUSH
35099: DOUBLE
35100: LD_INT 1
35102: DEC
35103: ST_TO_ADDR
35104: LD_VAR 0 14
35108: PUSH
35109: FOR_TO
35110: IFFALSE 35786
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35112: LD_ADDR_VAR 0 13
35116: PUSH
35117: LD_VAR 0 14
35121: PUSH
35122: LD_VAR 0 9
35126: ARRAY
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PPUSH
35132: LD_VAR 0 14
35136: PUSH
35137: LD_VAR 0 9
35141: ARRAY
35142: PUSH
35143: LD_INT 2
35145: ARRAY
35146: PPUSH
35147: CALL_OW 428
35151: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35152: LD_VAR 0 14
35156: PUSH
35157: LD_VAR 0 9
35161: ARRAY
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: PPUSH
35167: LD_VAR 0 14
35171: PUSH
35172: LD_VAR 0 9
35176: ARRAY
35177: PUSH
35178: LD_INT 2
35180: ARRAY
35181: PPUSH
35182: CALL_OW 351
35186: PUSH
35187: LD_VAR 0 14
35191: PUSH
35192: LD_VAR 0 9
35196: ARRAY
35197: PUSH
35198: LD_INT 1
35200: ARRAY
35201: PPUSH
35202: LD_VAR 0 14
35206: PUSH
35207: LD_VAR 0 9
35211: ARRAY
35212: PUSH
35213: LD_INT 2
35215: ARRAY
35216: PPUSH
35217: CALL_OW 488
35221: NOT
35222: OR
35223: PUSH
35224: LD_VAR 0 13
35228: PPUSH
35229: CALL_OW 247
35233: PUSH
35234: LD_INT 3
35236: EQUAL
35237: OR
35238: IFFALSE 35244
// exit ;
35240: POP
35241: POP
35242: GO 35788
// if not tmp then
35244: LD_VAR 0 13
35248: NOT
35249: IFFALSE 35253
// continue ;
35251: GO 35109
// result := true ;
35253: LD_ADDR_VAR 0 8
35257: PUSH
35258: LD_INT 1
35260: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35261: LD_VAR 0 6
35265: PUSH
35266: LD_VAR 0 13
35270: PPUSH
35271: CALL_OW 247
35275: PUSH
35276: LD_INT 2
35278: EQUAL
35279: AND
35280: PUSH
35281: LD_VAR 0 13
35285: PPUSH
35286: CALL_OW 263
35290: PUSH
35291: LD_INT 1
35293: EQUAL
35294: AND
35295: IFFALSE 35459
// begin if IsDrivenBy ( tmp ) then
35297: LD_VAR 0 13
35301: PPUSH
35302: CALL_OW 311
35306: IFFALSE 35310
// continue ;
35308: GO 35109
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35310: LD_VAR 0 6
35314: PPUSH
35315: LD_INT 3
35317: PUSH
35318: LD_INT 60
35320: PUSH
35321: EMPTY
35322: LIST
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 3
35330: PUSH
35331: LD_INT 55
35333: PUSH
35334: EMPTY
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PPUSH
35345: CALL_OW 72
35349: IFFALSE 35457
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35351: LD_ADDR_VAR 0 18
35355: PUSH
35356: LD_VAR 0 6
35360: PPUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 60
35366: PUSH
35367: EMPTY
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: LD_INT 55
35379: PUSH
35380: EMPTY
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PPUSH
35391: CALL_OW 72
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: ST_TO_ADDR
// if IsInUnit ( driver ) then
35400: LD_VAR 0 18
35404: PPUSH
35405: CALL_OW 310
35409: IFFALSE 35420
// ComExit ( driver ) ;
35411: LD_VAR 0 18
35415: PPUSH
35416: CALL 60209 0 1
// AddComEnterUnit ( driver , tmp ) ;
35420: LD_VAR 0 18
35424: PPUSH
35425: LD_VAR 0 13
35429: PPUSH
35430: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35434: LD_VAR 0 18
35438: PPUSH
35439: LD_VAR 0 7
35443: PPUSH
35444: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35448: LD_VAR 0 18
35452: PPUSH
35453: CALL_OW 181
// end ; continue ;
35457: GO 35109
// end ; if not cleaners or not tmp in cleaners then
35459: LD_VAR 0 6
35463: NOT
35464: PUSH
35465: LD_VAR 0 13
35469: PUSH
35470: LD_VAR 0 6
35474: IN
35475: NOT
35476: OR
35477: IFFALSE 35784
// begin if dep then
35479: LD_VAR 0 17
35483: IFFALSE 35619
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35485: LD_ADDR_VAR 0 16
35489: PUSH
35490: LD_VAR 0 17
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 250
35503: PPUSH
35504: LD_VAR 0 17
35508: PUSH
35509: LD_INT 1
35511: ARRAY
35512: PPUSH
35513: CALL_OW 254
35517: PPUSH
35518: LD_INT 5
35520: PPUSH
35521: CALL_OW 272
35525: PUSH
35526: LD_VAR 0 17
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: PPUSH
35535: CALL_OW 251
35539: PPUSH
35540: LD_VAR 0 17
35544: PUSH
35545: LD_INT 1
35547: ARRAY
35548: PPUSH
35549: CALL_OW 254
35553: PPUSH
35554: LD_INT 5
35556: PPUSH
35557: CALL_OW 273
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35566: LD_VAR 0 16
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: LD_VAR 0 16
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: PPUSH
35584: CALL_OW 488
35588: IFFALSE 35619
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35590: LD_VAR 0 13
35594: PPUSH
35595: LD_VAR 0 16
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: LD_VAR 0 16
35608: PUSH
35609: LD_INT 2
35611: ARRAY
35612: PPUSH
35613: CALL_OW 111
// continue ;
35617: GO 35109
// end ; end ; r := GetDir ( tmp ) ;
35619: LD_ADDR_VAR 0 15
35623: PUSH
35624: LD_VAR 0 13
35628: PPUSH
35629: CALL_OW 254
35633: ST_TO_ADDR
// if r = 5 then
35634: LD_VAR 0 15
35638: PUSH
35639: LD_INT 5
35641: EQUAL
35642: IFFALSE 35652
// r := 0 ;
35644: LD_ADDR_VAR 0 15
35648: PUSH
35649: LD_INT 0
35651: ST_TO_ADDR
// for j = r to 5 do
35652: LD_ADDR_VAR 0 10
35656: PUSH
35657: DOUBLE
35658: LD_VAR 0 15
35662: DEC
35663: ST_TO_ADDR
35664: LD_INT 5
35666: PUSH
35667: FOR_TO
35668: IFFALSE 35782
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35670: LD_ADDR_VAR 0 11
35674: PUSH
35675: LD_VAR 0 13
35679: PPUSH
35680: CALL_OW 250
35684: PPUSH
35685: LD_VAR 0 10
35689: PPUSH
35690: LD_INT 2
35692: PPUSH
35693: CALL_OW 272
35697: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35698: LD_ADDR_VAR 0 12
35702: PUSH
35703: LD_VAR 0 13
35707: PPUSH
35708: CALL_OW 251
35712: PPUSH
35713: LD_VAR 0 10
35717: PPUSH
35718: LD_INT 2
35720: PPUSH
35721: CALL_OW 273
35725: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35726: LD_VAR 0 11
35730: PPUSH
35731: LD_VAR 0 12
35735: PPUSH
35736: CALL_OW 488
35740: PUSH
35741: LD_VAR 0 11
35745: PPUSH
35746: LD_VAR 0 12
35750: PPUSH
35751: CALL_OW 428
35755: NOT
35756: AND
35757: IFFALSE 35780
// begin ComMoveXY ( tmp , _x , _y ) ;
35759: LD_VAR 0 13
35763: PPUSH
35764: LD_VAR 0 11
35768: PPUSH
35769: LD_VAR 0 12
35773: PPUSH
35774: CALL_OW 111
// break ;
35778: GO 35782
// end ; end ;
35780: GO 35667
35782: POP
35783: POP
// end ; end ;
35784: GO 35109
35786: POP
35787: POP
// end ;
35788: LD_VAR 0 8
35792: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35793: LD_INT 0
35795: PPUSH
// result := true ;
35796: LD_ADDR_VAR 0 3
35800: PUSH
35801: LD_INT 1
35803: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35804: LD_VAR 0 2
35808: PUSH
35809: LD_INT 24
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35823
35815: LD_INT 33
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35848
35823: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 32
35831: PPUSH
35832: LD_VAR 0 1
35836: PPUSH
35837: CALL_OW 321
35841: PUSH
35842: LD_INT 2
35844: EQUAL
35845: ST_TO_ADDR
35846: GO 36168
35848: LD_INT 20
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35856
35854: GO 35881
35856: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35857: LD_ADDR_VAR 0 3
35861: PUSH
35862: LD_INT 6
35864: PPUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 321
35874: PUSH
35875: LD_INT 2
35877: EQUAL
35878: ST_TO_ADDR
35879: GO 36168
35881: LD_INT 22
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35895
35887: LD_INT 36
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35895
35893: GO 35920
35895: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35896: LD_ADDR_VAR 0 3
35900: PUSH
35901: LD_INT 15
35903: PPUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 321
35913: PUSH
35914: LD_INT 2
35916: EQUAL
35917: ST_TO_ADDR
35918: GO 36168
35920: LD_INT 30
35922: DOUBLE
35923: EQUAL
35924: IFTRUE 35928
35926: GO 35953
35928: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35929: LD_ADDR_VAR 0 3
35933: PUSH
35934: LD_INT 20
35936: PPUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 321
35946: PUSH
35947: LD_INT 2
35949: EQUAL
35950: ST_TO_ADDR
35951: GO 36168
35953: LD_INT 28
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35967
35959: LD_INT 21
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35967
35965: GO 35992
35967: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35968: LD_ADDR_VAR 0 3
35972: PUSH
35973: LD_INT 21
35975: PPUSH
35976: LD_VAR 0 1
35980: PPUSH
35981: CALL_OW 321
35985: PUSH
35986: LD_INT 2
35988: EQUAL
35989: ST_TO_ADDR
35990: GO 36168
35992: LD_INT 16
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36027
36000: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_EXP 97
36010: PPUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: CALL_OW 321
36020: PUSH
36021: LD_INT 2
36023: EQUAL
36024: ST_TO_ADDR
36025: GO 36168
36027: LD_INT 19
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36041
36033: LD_INT 23
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36068
36041: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_EXP 96
36051: PPUSH
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL_OW 321
36061: PUSH
36062: LD_INT 2
36064: EQUAL
36065: ST_TO_ADDR
36066: GO 36168
36068: LD_INT 17
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 36101
36076: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_INT 39
36084: PPUSH
36085: LD_VAR 0 1
36089: PPUSH
36090: CALL_OW 321
36094: PUSH
36095: LD_INT 2
36097: EQUAL
36098: ST_TO_ADDR
36099: GO 36168
36101: LD_INT 18
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36109
36107: GO 36134
36109: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36110: LD_ADDR_VAR 0 3
36114: PUSH
36115: LD_INT 40
36117: PPUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: CALL_OW 321
36127: PUSH
36128: LD_INT 2
36130: EQUAL
36131: ST_TO_ADDR
36132: GO 36168
36134: LD_INT 27
36136: DOUBLE
36137: EQUAL
36138: IFTRUE 36142
36140: GO 36167
36142: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36143: LD_ADDR_VAR 0 3
36147: PUSH
36148: LD_INT 35
36150: PPUSH
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 321
36160: PUSH
36161: LD_INT 2
36163: EQUAL
36164: ST_TO_ADDR
36165: GO 36168
36167: POP
// end ;
36168: LD_VAR 0 3
36172: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36173: LD_INT 0
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
// result := false ;
36186: LD_ADDR_VAR 0 6
36190: PUSH
36191: LD_INT 0
36193: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36194: LD_VAR 0 1
36198: NOT
36199: PUSH
36200: LD_VAR 0 1
36204: PPUSH
36205: CALL_OW 266
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: IN
36220: NOT
36221: OR
36222: PUSH
36223: LD_VAR 0 2
36227: NOT
36228: OR
36229: PUSH
36230: LD_VAR 0 5
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 4
36249: PUSH
36250: LD_INT 5
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: IN
36261: NOT
36262: OR
36263: PUSH
36264: LD_VAR 0 3
36268: PPUSH
36269: LD_VAR 0 4
36273: PPUSH
36274: CALL_OW 488
36278: NOT
36279: OR
36280: IFFALSE 36284
// exit ;
36282: GO 37020
// side := GetSide ( depot ) ;
36284: LD_ADDR_VAR 0 9
36288: PUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 255
36298: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36299: LD_VAR 0 9
36303: PPUSH
36304: LD_VAR 0 2
36308: PPUSH
36309: CALL 35793 0 2
36313: NOT
36314: IFFALSE 36318
// exit ;
36316: GO 37020
// pom := GetBase ( depot ) ;
36318: LD_ADDR_VAR 0 10
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL_OW 274
36332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36333: LD_ADDR_VAR 0 11
36337: PUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 1
36347: PPUSH
36348: CALL_OW 248
36352: PPUSH
36353: CALL_OW 450
36357: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36358: LD_VAR 0 10
36362: PPUSH
36363: LD_INT 1
36365: PPUSH
36366: CALL_OW 275
36370: PUSH
36371: LD_VAR 0 11
36375: PUSH
36376: LD_INT 1
36378: ARRAY
36379: GREATEREQUAL
36380: PUSH
36381: LD_VAR 0 10
36385: PPUSH
36386: LD_INT 2
36388: PPUSH
36389: CALL_OW 275
36393: PUSH
36394: LD_VAR 0 11
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: GREATEREQUAL
36403: AND
36404: PUSH
36405: LD_VAR 0 10
36409: PPUSH
36410: LD_INT 3
36412: PPUSH
36413: CALL_OW 275
36417: PUSH
36418: LD_VAR 0 11
36422: PUSH
36423: LD_INT 3
36425: ARRAY
36426: GREATEREQUAL
36427: AND
36428: NOT
36429: IFFALSE 36433
// exit ;
36431: GO 37020
// if GetBType ( depot ) = b_depot then
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 266
36442: PUSH
36443: LD_INT 0
36445: EQUAL
36446: IFFALSE 36458
// dist := 28 else
36448: LD_ADDR_VAR 0 14
36452: PUSH
36453: LD_INT 28
36455: ST_TO_ADDR
36456: GO 36466
// dist := 36 ;
36458: LD_ADDR_VAR 0 14
36462: PUSH
36463: LD_INT 36
36465: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36466: LD_VAR 0 1
36470: PPUSH
36471: LD_VAR 0 3
36475: PPUSH
36476: LD_VAR 0 4
36480: PPUSH
36481: CALL_OW 297
36485: PUSH
36486: LD_VAR 0 14
36490: GREATER
36491: IFFALSE 36495
// exit ;
36493: GO 37020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36495: LD_ADDR_VAR 0 12
36499: PUSH
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_VAR 0 3
36509: PPUSH
36510: LD_VAR 0 4
36514: PPUSH
36515: LD_VAR 0 5
36519: PPUSH
36520: LD_VAR 0 1
36524: PPUSH
36525: CALL_OW 248
36529: PPUSH
36530: LD_INT 0
36532: PPUSH
36533: CALL 37025 0 6
36537: ST_TO_ADDR
// if not hexes then
36538: LD_VAR 0 12
36542: NOT
36543: IFFALSE 36547
// exit ;
36545: GO 37020
// hex := GetHexInfo ( x , y ) ;
36547: LD_ADDR_VAR 0 15
36551: PUSH
36552: LD_VAR 0 3
36556: PPUSH
36557: LD_VAR 0 4
36561: PPUSH
36562: CALL_OW 546
36566: ST_TO_ADDR
// if hex [ 1 ] then
36567: LD_VAR 0 15
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: IFFALSE 36579
// exit ;
36577: GO 37020
// height := hex [ 2 ] ;
36579: LD_ADDR_VAR 0 13
36583: PUSH
36584: LD_VAR 0 15
36588: PUSH
36589: LD_INT 2
36591: ARRAY
36592: ST_TO_ADDR
// for i = 1 to hexes do
36593: LD_ADDR_VAR 0 7
36597: PUSH
36598: DOUBLE
36599: LD_INT 1
36601: DEC
36602: ST_TO_ADDR
36603: LD_VAR 0 12
36607: PUSH
36608: FOR_TO
36609: IFFALSE 36939
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36611: LD_VAR 0 12
36615: PUSH
36616: LD_VAR 0 7
36620: ARRAY
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PPUSH
36626: LD_VAR 0 12
36630: PUSH
36631: LD_VAR 0 7
36635: ARRAY
36636: PUSH
36637: LD_INT 2
36639: ARRAY
36640: PPUSH
36641: CALL_OW 488
36645: NOT
36646: PUSH
36647: LD_VAR 0 12
36651: PUSH
36652: LD_VAR 0 7
36656: ARRAY
36657: PUSH
36658: LD_INT 1
36660: ARRAY
36661: PPUSH
36662: LD_VAR 0 12
36666: PUSH
36667: LD_VAR 0 7
36671: ARRAY
36672: PUSH
36673: LD_INT 2
36675: ARRAY
36676: PPUSH
36677: CALL_OW 428
36681: PUSH
36682: LD_INT 0
36684: GREATER
36685: OR
36686: PUSH
36687: LD_VAR 0 12
36691: PUSH
36692: LD_VAR 0 7
36696: ARRAY
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PPUSH
36702: LD_VAR 0 12
36706: PUSH
36707: LD_VAR 0 7
36711: ARRAY
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: PPUSH
36717: CALL_OW 351
36721: OR
36722: IFFALSE 36728
// exit ;
36724: POP
36725: POP
36726: GO 37020
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36728: LD_ADDR_VAR 0 8
36732: PUSH
36733: LD_VAR 0 12
36737: PUSH
36738: LD_VAR 0 7
36742: ARRAY
36743: PUSH
36744: LD_INT 1
36746: ARRAY
36747: PPUSH
36748: LD_VAR 0 12
36752: PUSH
36753: LD_VAR 0 7
36757: ARRAY
36758: PUSH
36759: LD_INT 2
36761: ARRAY
36762: PPUSH
36763: CALL_OW 546
36767: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36768: LD_VAR 0 8
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PUSH
36777: LD_VAR 0 8
36781: PUSH
36782: LD_INT 2
36784: ARRAY
36785: PUSH
36786: LD_VAR 0 13
36790: PUSH
36791: LD_INT 2
36793: PLUS
36794: GREATER
36795: OR
36796: PUSH
36797: LD_VAR 0 8
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PUSH
36806: LD_VAR 0 13
36810: PUSH
36811: LD_INT 2
36813: MINUS
36814: LESS
36815: OR
36816: PUSH
36817: LD_VAR 0 8
36821: PUSH
36822: LD_INT 3
36824: ARRAY
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 8
36831: PUSH
36832: LD_INT 9
36834: PUSH
36835: LD_INT 10
36837: PUSH
36838: LD_INT 11
36840: PUSH
36841: LD_INT 12
36843: PUSH
36844: LD_INT 13
36846: PUSH
36847: LD_INT 16
36849: PUSH
36850: LD_INT 17
36852: PUSH
36853: LD_INT 18
36855: PUSH
36856: LD_INT 19
36858: PUSH
36859: LD_INT 20
36861: PUSH
36862: LD_INT 21
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: IN
36880: NOT
36881: OR
36882: PUSH
36883: LD_VAR 0 8
36887: PUSH
36888: LD_INT 5
36890: ARRAY
36891: NOT
36892: OR
36893: PUSH
36894: LD_VAR 0 8
36898: PUSH
36899: LD_INT 6
36901: ARRAY
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: LD_INT 7
36911: PUSH
36912: LD_INT 9
36914: PUSH
36915: LD_INT 10
36917: PUSH
36918: LD_INT 11
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: IN
36929: NOT
36930: OR
36931: IFFALSE 36937
// exit ;
36933: POP
36934: POP
36935: GO 37020
// end ;
36937: GO 36608
36939: POP
36940: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36941: LD_VAR 0 9
36945: PPUSH
36946: LD_VAR 0 3
36950: PPUSH
36951: LD_VAR 0 4
36955: PPUSH
36956: LD_INT 20
36958: PPUSH
36959: CALL 28966 0 4
36963: PUSH
36964: LD_INT 4
36966: ARRAY
36967: IFFALSE 36971
// exit ;
36969: GO 37020
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 29
36978: PUSH
36979: LD_INT 30
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: IN
36986: PUSH
36987: LD_VAR 0 3
36991: PPUSH
36992: LD_VAR 0 4
36996: PPUSH
36997: LD_VAR 0 9
37001: PPUSH
37002: CALL_OW 440
37006: NOT
37007: AND
37008: IFFALSE 37012
// exit ;
37010: GO 37020
// result := true ;
37012: LD_ADDR_VAR 0 6
37016: PUSH
37017: LD_INT 1
37019: ST_TO_ADDR
// end ;
37020: LD_VAR 0 6
37024: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37025: LD_INT 0
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
37051: PPUSH
37052: PPUSH
37053: PPUSH
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
37065: PPUSH
37066: PPUSH
37067: PPUSH
37068: PPUSH
37069: PPUSH
37070: PPUSH
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
// result = [ ] ;
37085: LD_ADDR_VAR 0 7
37089: PUSH
37090: EMPTY
37091: ST_TO_ADDR
// temp_list = [ ] ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: EMPTY
37098: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37099: LD_VAR 0 4
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 4
37118: PUSH
37119: LD_INT 5
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: IN
37130: NOT
37131: PUSH
37132: LD_VAR 0 1
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: IN
37147: PUSH
37148: LD_VAR 0 5
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 3
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: IN
37167: NOT
37168: AND
37169: OR
37170: IFFALSE 37174
// exit ;
37172: GO 55565
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37174: LD_VAR 0 1
37178: PUSH
37179: LD_INT 6
37181: PUSH
37182: LD_INT 7
37184: PUSH
37185: LD_INT 8
37187: PUSH
37188: LD_INT 13
37190: PUSH
37191: LD_INT 12
37193: PUSH
37194: LD_INT 15
37196: PUSH
37197: LD_INT 11
37199: PUSH
37200: LD_INT 14
37202: PUSH
37203: LD_INT 10
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: IN
37217: IFFALSE 37227
// btype = b_lab ;
37219: LD_ADDR_VAR 0 1
37223: PUSH
37224: LD_INT 6
37226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37227: LD_VAR 0 6
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: IN
37246: NOT
37247: PUSH
37248: LD_VAR 0 1
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: LD_INT 3
37264: PUSH
37265: LD_INT 6
37267: PUSH
37268: LD_INT 36
37270: PUSH
37271: LD_INT 4
37273: PUSH
37274: LD_INT 5
37276: PUSH
37277: LD_INT 31
37279: PUSH
37280: LD_INT 32
37282: PUSH
37283: LD_INT 33
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: IN
37299: NOT
37300: PUSH
37301: LD_VAR 0 6
37305: PUSH
37306: LD_INT 1
37308: EQUAL
37309: AND
37310: OR
37311: PUSH
37312: LD_VAR 0 1
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 3
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: IN
37327: NOT
37328: PUSH
37329: LD_VAR 0 6
37333: PUSH
37334: LD_INT 2
37336: EQUAL
37337: AND
37338: OR
37339: IFFALSE 37349
// mode = 0 ;
37341: LD_ADDR_VAR 0 6
37345: PUSH
37346: LD_INT 0
37348: ST_TO_ADDR
// case mode of 0 :
37349: LD_VAR 0 6
37353: PUSH
37354: LD_INT 0
37356: DOUBLE
37357: EQUAL
37358: IFTRUE 37362
37360: GO 48815
37362: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37363: LD_ADDR_VAR 0 11
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37556: LD_ADDR_VAR 0 12
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 3
37713: NEG
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37752: LD_ADDR_VAR 0 13
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: LD_INT 3
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 3
37911: NEG
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37951: LD_ADDR_VAR 0 14
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 3
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 3
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38147: LD_ADDR_VAR 0 15
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38340: LD_ADDR_VAR 0 16
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38533: LD_ADDR_VAR 0 17
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38763: LD_ADDR_VAR 0 18
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38993: LD_ADDR_VAR 0 19
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39223: LD_ADDR_VAR 0 20
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39453: LD_ADDR_VAR 0 21
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39683: LD_ADDR_VAR 0 22
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39913: LD_ADDR_VAR 0 23
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 3
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40193: LD_ADDR_VAR 0 24
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40469: LD_ADDR_VAR 0 25
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 3
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40743: LD_ADDR_VAR 0 26
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 3
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41019: LD_ADDR_VAR 0 27
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41299: LD_ADDR_VAR 0 28
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: NEG
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 3
41546: NEG
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41581: LD_ADDR_VAR 0 29
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: NEG
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41860: LD_ADDR_VAR 0 30
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42138: LD_ADDR_VAR 0 31
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42416: LD_ADDR_VAR 0 32
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 3
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 3
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42694: LD_ADDR_VAR 0 33
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42973: LD_ADDR_VAR 0 34
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43253: LD_ADDR_VAR 0 35
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43365: LD_ADDR_VAR 0 36
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43477: LD_ADDR_VAR 0 37
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43589: LD_ADDR_VAR 0 38
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43701: LD_ADDR_VAR 0 39
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43813: LD_ADDR_VAR 0 40
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43925: LD_ADDR_VAR 0 41
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 3
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 3
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: LD_INT 3
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44275: LD_ADDR_VAR 0 42
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 3
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 3
44584: NEG
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44625: LD_ADDR_VAR 0 43
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44973: LD_ADDR_VAR 0 44
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 3
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 3
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 3
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: NEG
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: LD_INT 3
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45323: LD_ADDR_VAR 0 45
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: LD_INT 3
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45673: LD_ADDR_VAR 0 46
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46021: LD_ADDR_VAR 0 47
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46172: LD_ADDR_VAR 0 48
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46319: LD_ADDR_VAR 0 49
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46463: LD_ADDR_VAR 0 50
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46607: LD_ADDR_VAR 0 51
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46754: LD_ADDR_VAR 0 52
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46905: LD_ADDR_VAR 0 53
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47135: LD_ADDR_VAR 0 54
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47365: LD_ADDR_VAR 0 55
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47595: LD_ADDR_VAR 0 56
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47825: LD_ADDR_VAR 0 57
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48055: LD_ADDR_VAR 0 58
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48285: LD_ADDR_VAR 0 59
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48373: LD_ADDR_VAR 0 60
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 61
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48549: LD_ADDR_VAR 0 62
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48637: LD_ADDR_VAR 0 63
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48725: LD_ADDR_VAR 0 64
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// end ; 1 :
48813: GO 54710
48815: LD_INT 1
48817: DOUBLE
48818: EQUAL
48819: IFTRUE 48823
48821: GO 51446
48823: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48824: LD_ADDR_VAR 0 11
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48868: LD_ADDR_VAR 0 12
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48909: LD_ADDR_VAR 0 13
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: LD_INT 3
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48949: LD_ADDR_VAR 0 14
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 3
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48990: LD_ADDR_VAR 0 15
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49034: LD_ADDR_VAR 0 16
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49080: LD_ADDR_VAR 0 17
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49124: LD_ADDR_VAR 0 18
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49165: LD_ADDR_VAR 0 19
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49205: LD_ADDR_VAR 0 20
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49246: LD_ADDR_VAR 0 21
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: NEG
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49290: LD_ADDR_VAR 0 22
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49336: LD_ADDR_VAR 0 23
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 3
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 4
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49380: LD_ADDR_VAR 0 24
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 4
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49421: LD_ADDR_VAR 0 25
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 4
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 4
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49461: LD_ADDR_VAR 0 26
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 4
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49502: LD_ADDR_VAR 0 27
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 4
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49546: LD_ADDR_VAR 0 28
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 4
49577: NEG
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49592: LD_ADDR_VAR 0 29
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 5
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 6
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 6
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 5
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49747: LD_ADDR_VAR 0 30
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 3
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 4
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 5
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 5
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 6
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 6
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49890: LD_ADDR_VAR 0 31
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 4
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: LD_INT 4
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 5
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 4
49977: PUSH
49978: LD_INT 5
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 6
49987: PUSH
49988: LD_INT 5
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 6
49997: PUSH
49998: LD_INT 6
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 5
50007: PUSH
50008: LD_INT 6
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50029: LD_ADDR_VAR 0 32
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 4
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 4
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 5
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 4
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 6
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 6
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 5
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50172: LD_ADDR_VAR 0 33
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 4
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 4
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 5
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 5
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 5
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 6
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 6
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50327: LD_ADDR_VAR 0 34
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: LD_INT 3
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: LD_INT 4
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 4
50382: NEG
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 4
50394: NEG
50395: PUSH
50396: LD_INT 4
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 4
50406: NEG
50407: PUSH
50408: LD_INT 5
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 5
50418: NEG
50419: PUSH
50420: LD_INT 4
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 5
50430: NEG
50431: PUSH
50432: LD_INT 5
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 5
50442: NEG
50443: PUSH
50444: LD_INT 6
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 6
50454: NEG
50455: PUSH
50456: LD_INT 5
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 6
50466: NEG
50467: PUSH
50468: LD_INT 6
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50490: LD_ADDR_VAR 0 41
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50534: LD_ADDR_VAR 0 42
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50575: LD_ADDR_VAR 0 43
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50615: LD_ADDR_VAR 0 44
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50656: LD_ADDR_VAR 0 45
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50700: LD_ADDR_VAR 0 46
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50746: LD_ADDR_VAR 0 47
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50779: LD_ADDR_VAR 0 48
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50810: LD_ADDR_VAR 0 49
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50839: LD_ADDR_VAR 0 50
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50868: LD_ADDR_VAR 0 51
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50899: LD_ADDR_VAR 0 52
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50932: LD_ADDR_VAR 0 53
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50976: LD_ADDR_VAR 0 54
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51017: LD_ADDR_VAR 0 55
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51057: LD_ADDR_VAR 0 56
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51098: LD_ADDR_VAR 0 57
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51142: LD_ADDR_VAR 0 58
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51188: LD_ADDR_VAR 0 59
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51232: LD_ADDR_VAR 0 60
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51273: LD_ADDR_VAR 0 61
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: LIST
51312: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51313: LD_ADDR_VAR 0 62
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51354: LD_ADDR_VAR 0 63
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51398: LD_ADDR_VAR 0 64
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// end ; 2 :
51444: GO 54710
51446: LD_INT 2
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 54709
51454: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51455: LD_ADDR_VAR 0 29
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 5
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 4
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 5
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 4
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 4
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 4
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 4
51840: NEG
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: NEG
51853: PUSH
51854: LD_INT 5
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 4
51888: NEG
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 5
51900: NEG
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 5
51912: NEG
51913: PUSH
51914: LD_INT 5
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 5
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 5
51936: NEG
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51993: LD_ADDR_VAR 0 30
51997: PUSH
51998: LD_INT 4
52000: PUSH
52001: LD_INT 4
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 4
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 5
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: LD_INT 5
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 4
52040: PUSH
52041: LD_INT 5
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 4
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 5
52070: PUSH
52071: LD_INT 3
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 5
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 4
52183: NEG
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 4
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 5
52239: NEG
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 5
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 5
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: LD_INT 4
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 4
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 4
52357: NEG
52358: PUSH
52359: LD_INT 4
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 4
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 4
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 4
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 5
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 4
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 4
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 5
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 5
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52540: LD_ADDR_VAR 0 31
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 4
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 4
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 5
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 5
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 4
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 4
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 4
52742: NEG
52743: PUSH
52744: LD_INT 4
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 4
52754: NEG
52755: PUSH
52756: LD_INT 5
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 4
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 4
52790: NEG
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 5
52802: NEG
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 5
52814: NEG
52815: PUSH
52816: LD_INT 5
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 5
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 5
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 4
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 4
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 4
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 5
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 4
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 5
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53090: LD_ADDR_VAR 0 32
53094: PUSH
53095: LD_INT 4
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 4
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 5
53153: NEG
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 5
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 5
53176: NEG
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 4
53259: NEG
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 4
53271: NEG
53272: PUSH
53273: LD_INT 4
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 4
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 4
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 5
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 4
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 5
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 5
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 4
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 4
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 4
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 4
53502: PUSH
53503: LD_INT 4
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 5
53522: PUSH
53523: LD_INT 4
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 5
53532: PUSH
53533: LD_INT 5
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 4
53542: PUSH
53543: LD_INT 5
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: LD_INT 4
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 5
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 5
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53637: LD_ADDR_VAR 0 33
53641: PUSH
53642: LD_INT 4
53644: NEG
53645: PUSH
53646: LD_INT 4
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 5
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 5
53704: NEG
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 5
53716: NEG
53717: PUSH
53718: LD_INT 5
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: LD_INT 5
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: NEG
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 4
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 4
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 5
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 3
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 4
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 4
53977: PUSH
53978: LD_INT 4
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 4
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: LD_INT 4
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 4
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 4
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 5
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 5
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 5
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54175: LD_ADDR_VAR 0 34
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 4
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 5
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 4
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 4
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 5
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 5
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 4
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 5
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 5
54407: PUSH
54408: LD_INT 5
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: LD_INT 5
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: LD_INT 4
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 5
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 4
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 5
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 5
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 5
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// end ; end ;
54707: GO 54710
54709: POP
// case btype of b_depot , b_warehouse :
54710: LD_VAR 0 1
54714: PUSH
54715: LD_INT 0
54717: DOUBLE
54718: EQUAL
54719: IFTRUE 54729
54721: LD_INT 1
54723: DOUBLE
54724: EQUAL
54725: IFTRUE 54729
54727: GO 54930
54729: POP
// case nation of nation_american :
54730: LD_VAR 0 5
54734: PUSH
54735: LD_INT 1
54737: DOUBLE
54738: EQUAL
54739: IFTRUE 54743
54741: GO 54799
54743: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54744: LD_ADDR_VAR 0 9
54748: PUSH
54749: LD_VAR 0 11
54753: PUSH
54754: LD_VAR 0 12
54758: PUSH
54759: LD_VAR 0 13
54763: PUSH
54764: LD_VAR 0 14
54768: PUSH
54769: LD_VAR 0 15
54773: PUSH
54774: LD_VAR 0 16
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: PUSH
54787: LD_VAR 0 4
54791: PUSH
54792: LD_INT 1
54794: PLUS
54795: ARRAY
54796: ST_TO_ADDR
54797: GO 54928
54799: LD_INT 2
54801: DOUBLE
54802: EQUAL
54803: IFTRUE 54807
54805: GO 54863
54807: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54808: LD_ADDR_VAR 0 9
54812: PUSH
54813: LD_VAR 0 17
54817: PUSH
54818: LD_VAR 0 18
54822: PUSH
54823: LD_VAR 0 19
54827: PUSH
54828: LD_VAR 0 20
54832: PUSH
54833: LD_VAR 0 21
54837: PUSH
54838: LD_VAR 0 22
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: PUSH
54851: LD_VAR 0 4
54855: PUSH
54856: LD_INT 1
54858: PLUS
54859: ARRAY
54860: ST_TO_ADDR
54861: GO 54928
54863: LD_INT 3
54865: DOUBLE
54866: EQUAL
54867: IFTRUE 54871
54869: GO 54927
54871: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54872: LD_ADDR_VAR 0 9
54876: PUSH
54877: LD_VAR 0 23
54881: PUSH
54882: LD_VAR 0 24
54886: PUSH
54887: LD_VAR 0 25
54891: PUSH
54892: LD_VAR 0 26
54896: PUSH
54897: LD_VAR 0 27
54901: PUSH
54902: LD_VAR 0 28
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: PUSH
54915: LD_VAR 0 4
54919: PUSH
54920: LD_INT 1
54922: PLUS
54923: ARRAY
54924: ST_TO_ADDR
54925: GO 54928
54927: POP
54928: GO 55483
54930: LD_INT 2
54932: DOUBLE
54933: EQUAL
54934: IFTRUE 54944
54936: LD_INT 3
54938: DOUBLE
54939: EQUAL
54940: IFTRUE 54944
54942: GO 55000
54944: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54945: LD_ADDR_VAR 0 9
54949: PUSH
54950: LD_VAR 0 29
54954: PUSH
54955: LD_VAR 0 30
54959: PUSH
54960: LD_VAR 0 31
54964: PUSH
54965: LD_VAR 0 32
54969: PUSH
54970: LD_VAR 0 33
54974: PUSH
54975: LD_VAR 0 34
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: PUSH
54988: LD_VAR 0 4
54992: PUSH
54993: LD_INT 1
54995: PLUS
54996: ARRAY
54997: ST_TO_ADDR
54998: GO 55483
55000: LD_INT 16
55002: DOUBLE
55003: EQUAL
55004: IFTRUE 55062
55006: LD_INT 17
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55062
55012: LD_INT 18
55014: DOUBLE
55015: EQUAL
55016: IFTRUE 55062
55018: LD_INT 19
55020: DOUBLE
55021: EQUAL
55022: IFTRUE 55062
55024: LD_INT 22
55026: DOUBLE
55027: EQUAL
55028: IFTRUE 55062
55030: LD_INT 20
55032: DOUBLE
55033: EQUAL
55034: IFTRUE 55062
55036: LD_INT 21
55038: DOUBLE
55039: EQUAL
55040: IFTRUE 55062
55042: LD_INT 23
55044: DOUBLE
55045: EQUAL
55046: IFTRUE 55062
55048: LD_INT 24
55050: DOUBLE
55051: EQUAL
55052: IFTRUE 55062
55054: LD_INT 25
55056: DOUBLE
55057: EQUAL
55058: IFTRUE 55062
55060: GO 55118
55062: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55063: LD_ADDR_VAR 0 9
55067: PUSH
55068: LD_VAR 0 35
55072: PUSH
55073: LD_VAR 0 36
55077: PUSH
55078: LD_VAR 0 37
55082: PUSH
55083: LD_VAR 0 38
55087: PUSH
55088: LD_VAR 0 39
55092: PUSH
55093: LD_VAR 0 40
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: PUSH
55106: LD_VAR 0 4
55110: PUSH
55111: LD_INT 1
55113: PLUS
55114: ARRAY
55115: ST_TO_ADDR
55116: GO 55483
55118: LD_INT 6
55120: DOUBLE
55121: EQUAL
55122: IFTRUE 55174
55124: LD_INT 7
55126: DOUBLE
55127: EQUAL
55128: IFTRUE 55174
55130: LD_INT 8
55132: DOUBLE
55133: EQUAL
55134: IFTRUE 55174
55136: LD_INT 13
55138: DOUBLE
55139: EQUAL
55140: IFTRUE 55174
55142: LD_INT 12
55144: DOUBLE
55145: EQUAL
55146: IFTRUE 55174
55148: LD_INT 15
55150: DOUBLE
55151: EQUAL
55152: IFTRUE 55174
55154: LD_INT 11
55156: DOUBLE
55157: EQUAL
55158: IFTRUE 55174
55160: LD_INT 14
55162: DOUBLE
55163: EQUAL
55164: IFTRUE 55174
55166: LD_INT 10
55168: DOUBLE
55169: EQUAL
55170: IFTRUE 55174
55172: GO 55230
55174: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55175: LD_ADDR_VAR 0 9
55179: PUSH
55180: LD_VAR 0 41
55184: PUSH
55185: LD_VAR 0 42
55189: PUSH
55190: LD_VAR 0 43
55194: PUSH
55195: LD_VAR 0 44
55199: PUSH
55200: LD_VAR 0 45
55204: PUSH
55205: LD_VAR 0 46
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: PUSH
55218: LD_VAR 0 4
55222: PUSH
55223: LD_INT 1
55225: PLUS
55226: ARRAY
55227: ST_TO_ADDR
55228: GO 55483
55230: LD_INT 36
55232: DOUBLE
55233: EQUAL
55234: IFTRUE 55238
55236: GO 55294
55238: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55239: LD_ADDR_VAR 0 9
55243: PUSH
55244: LD_VAR 0 47
55248: PUSH
55249: LD_VAR 0 48
55253: PUSH
55254: LD_VAR 0 49
55258: PUSH
55259: LD_VAR 0 50
55263: PUSH
55264: LD_VAR 0 51
55268: PUSH
55269: LD_VAR 0 52
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: PUSH
55282: LD_VAR 0 4
55286: PUSH
55287: LD_INT 1
55289: PLUS
55290: ARRAY
55291: ST_TO_ADDR
55292: GO 55483
55294: LD_INT 4
55296: DOUBLE
55297: EQUAL
55298: IFTRUE 55320
55300: LD_INT 5
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55320
55306: LD_INT 34
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55320
55312: LD_INT 37
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55320
55318: GO 55376
55320: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55321: LD_ADDR_VAR 0 9
55325: PUSH
55326: LD_VAR 0 53
55330: PUSH
55331: LD_VAR 0 54
55335: PUSH
55336: LD_VAR 0 55
55340: PUSH
55341: LD_VAR 0 56
55345: PUSH
55346: LD_VAR 0 57
55350: PUSH
55351: LD_VAR 0 58
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: PUSH
55364: LD_VAR 0 4
55368: PUSH
55369: LD_INT 1
55371: PLUS
55372: ARRAY
55373: ST_TO_ADDR
55374: GO 55483
55376: LD_INT 31
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55426
55382: LD_INT 32
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55426
55388: LD_INT 33
55390: DOUBLE
55391: EQUAL
55392: IFTRUE 55426
55394: LD_INT 27
55396: DOUBLE
55397: EQUAL
55398: IFTRUE 55426
55400: LD_INT 26
55402: DOUBLE
55403: EQUAL
55404: IFTRUE 55426
55406: LD_INT 28
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55426
55412: LD_INT 29
55414: DOUBLE
55415: EQUAL
55416: IFTRUE 55426
55418: LD_INT 30
55420: DOUBLE
55421: EQUAL
55422: IFTRUE 55426
55424: GO 55482
55426: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55427: LD_ADDR_VAR 0 9
55431: PUSH
55432: LD_VAR 0 59
55436: PUSH
55437: LD_VAR 0 60
55441: PUSH
55442: LD_VAR 0 61
55446: PUSH
55447: LD_VAR 0 62
55451: PUSH
55452: LD_VAR 0 63
55456: PUSH
55457: LD_VAR 0 64
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: PUSH
55470: LD_VAR 0 4
55474: PUSH
55475: LD_INT 1
55477: PLUS
55478: ARRAY
55479: ST_TO_ADDR
55480: GO 55483
55482: POP
// temp_list2 = [ ] ;
55483: LD_ADDR_VAR 0 10
55487: PUSH
55488: EMPTY
55489: ST_TO_ADDR
// for i in temp_list do
55490: LD_ADDR_VAR 0 8
55494: PUSH
55495: LD_VAR 0 9
55499: PUSH
55500: FOR_IN
55501: IFFALSE 55553
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55503: LD_ADDR_VAR 0 10
55507: PUSH
55508: LD_VAR 0 10
55512: PUSH
55513: LD_VAR 0 8
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: LD_VAR 0 2
55526: PLUS
55527: PUSH
55528: LD_VAR 0 8
55532: PUSH
55533: LD_INT 2
55535: ARRAY
55536: PUSH
55537: LD_VAR 0 3
55541: PLUS
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: ADD
55550: ST_TO_ADDR
55551: GO 55500
55553: POP
55554: POP
// result = temp_list2 ;
55555: LD_ADDR_VAR 0 7
55559: PUSH
55560: LD_VAR 0 10
55564: ST_TO_ADDR
// end ;
55565: LD_VAR 0 7
55569: RET
// export function EnemyInRange ( unit , dist ) ; begin
55570: LD_INT 0
55572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55573: LD_ADDR_VAR 0 3
55577: PUSH
55578: LD_VAR 0 1
55582: PPUSH
55583: CALL_OW 255
55587: PPUSH
55588: LD_VAR 0 1
55592: PPUSH
55593: CALL_OW 250
55597: PPUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 251
55607: PPUSH
55608: LD_VAR 0 2
55612: PPUSH
55613: CALL 28966 0 4
55617: PUSH
55618: LD_INT 4
55620: ARRAY
55621: ST_TO_ADDR
// end ;
55622: LD_VAR 0 3
55626: RET
// export function PlayerSeeMe ( unit ) ; begin
55627: LD_INT 0
55629: PPUSH
// result := See ( your_side , unit ) ;
55630: LD_ADDR_VAR 0 2
55634: PUSH
55635: LD_OWVAR 2
55639: PPUSH
55640: LD_VAR 0 1
55644: PPUSH
55645: CALL_OW 292
55649: ST_TO_ADDR
// end ;
55650: LD_VAR 0 2
55654: RET
// export function ReverseDir ( unit ) ; begin
55655: LD_INT 0
55657: PPUSH
// if not unit then
55658: LD_VAR 0 1
55662: NOT
55663: IFFALSE 55667
// exit ;
55665: GO 55690
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55667: LD_ADDR_VAR 0 2
55671: PUSH
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 254
55681: PUSH
55682: LD_INT 3
55684: PLUS
55685: PUSH
55686: LD_INT 6
55688: MOD
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 2
55694: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55695: LD_INT 0
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
// if not hexes then
55702: LD_VAR 0 2
55706: NOT
55707: IFFALSE 55711
// exit ;
55709: GO 55859
// dist := 9999 ;
55711: LD_ADDR_VAR 0 5
55715: PUSH
55716: LD_INT 9999
55718: ST_TO_ADDR
// for i = 1 to hexes do
55719: LD_ADDR_VAR 0 4
55723: PUSH
55724: DOUBLE
55725: LD_INT 1
55727: DEC
55728: ST_TO_ADDR
55729: LD_VAR 0 2
55733: PUSH
55734: FOR_TO
55735: IFFALSE 55847
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55737: LD_VAR 0 1
55741: PPUSH
55742: LD_VAR 0 2
55746: PUSH
55747: LD_VAR 0 4
55751: ARRAY
55752: PUSH
55753: LD_INT 1
55755: ARRAY
55756: PPUSH
55757: LD_VAR 0 2
55761: PUSH
55762: LD_VAR 0 4
55766: ARRAY
55767: PUSH
55768: LD_INT 2
55770: ARRAY
55771: PPUSH
55772: CALL_OW 297
55776: PUSH
55777: LD_VAR 0 5
55781: LESS
55782: IFFALSE 55845
// begin hex := hexes [ i ] ;
55784: LD_ADDR_VAR 0 7
55788: PUSH
55789: LD_VAR 0 2
55793: PUSH
55794: LD_VAR 0 4
55798: ARRAY
55799: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55800: LD_ADDR_VAR 0 5
55804: PUSH
55805: LD_VAR 0 1
55809: PPUSH
55810: LD_VAR 0 2
55814: PUSH
55815: LD_VAR 0 4
55819: ARRAY
55820: PUSH
55821: LD_INT 1
55823: ARRAY
55824: PPUSH
55825: LD_VAR 0 2
55829: PUSH
55830: LD_VAR 0 4
55834: ARRAY
55835: PUSH
55836: LD_INT 2
55838: ARRAY
55839: PPUSH
55840: CALL_OW 297
55844: ST_TO_ADDR
// end ; end ;
55845: GO 55734
55847: POP
55848: POP
// result := hex ;
55849: LD_ADDR_VAR 0 3
55853: PUSH
55854: LD_VAR 0 7
55858: ST_TO_ADDR
// end ;
55859: LD_VAR 0 3
55863: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55864: LD_INT 0
55866: PPUSH
55867: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55868: LD_VAR 0 1
55872: NOT
55873: PUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 21
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 23
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PPUSH
55903: CALL_OW 69
55907: IN
55908: NOT
55909: OR
55910: IFFALSE 55914
// exit ;
55912: GO 55961
// for i = 1 to 3 do
55914: LD_ADDR_VAR 0 3
55918: PUSH
55919: DOUBLE
55920: LD_INT 1
55922: DEC
55923: ST_TO_ADDR
55924: LD_INT 3
55926: PUSH
55927: FOR_TO
55928: IFFALSE 55959
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55930: LD_VAR 0 1
55934: PPUSH
55935: CALL_OW 250
55939: PPUSH
55940: LD_VAR 0 1
55944: PPUSH
55945: CALL_OW 251
55949: PPUSH
55950: LD_INT 1
55952: PPUSH
55953: CALL_OW 453
55957: GO 55927
55959: POP
55960: POP
// end ;
55961: LD_VAR 0 2
55965: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55966: LD_INT 0
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55974: LD_VAR 0 1
55978: NOT
55979: PUSH
55980: LD_VAR 0 2
55984: NOT
55985: OR
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: CALL_OW 314
55996: OR
55997: IFFALSE 56001
// exit ;
55999: GO 56442
// x := GetX ( enemy_unit ) ;
56001: LD_ADDR_VAR 0 7
56005: PUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: CALL_OW 250
56015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56016: LD_ADDR_VAR 0 8
56020: PUSH
56021: LD_VAR 0 2
56025: PPUSH
56026: CALL_OW 251
56030: ST_TO_ADDR
// if not x or not y then
56031: LD_VAR 0 7
56035: NOT
56036: PUSH
56037: LD_VAR 0 8
56041: NOT
56042: OR
56043: IFFALSE 56047
// exit ;
56045: GO 56442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56047: LD_ADDR_VAR 0 6
56051: PUSH
56052: LD_VAR 0 7
56056: PPUSH
56057: LD_INT 0
56059: PPUSH
56060: LD_INT 4
56062: PPUSH
56063: CALL_OW 272
56067: PUSH
56068: LD_VAR 0 8
56072: PPUSH
56073: LD_INT 0
56075: PPUSH
56076: LD_INT 4
56078: PPUSH
56079: CALL_OW 273
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_VAR 0 7
56092: PPUSH
56093: LD_INT 1
56095: PPUSH
56096: LD_INT 4
56098: PPUSH
56099: CALL_OW 272
56103: PUSH
56104: LD_VAR 0 8
56108: PPUSH
56109: LD_INT 1
56111: PPUSH
56112: LD_INT 4
56114: PPUSH
56115: CALL_OW 273
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_VAR 0 7
56128: PPUSH
56129: LD_INT 2
56131: PPUSH
56132: LD_INT 4
56134: PPUSH
56135: CALL_OW 272
56139: PUSH
56140: LD_VAR 0 8
56144: PPUSH
56145: LD_INT 2
56147: PPUSH
56148: LD_INT 4
56150: PPUSH
56151: CALL_OW 273
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_VAR 0 7
56164: PPUSH
56165: LD_INT 3
56167: PPUSH
56168: LD_INT 4
56170: PPUSH
56171: CALL_OW 272
56175: PUSH
56176: LD_VAR 0 8
56180: PPUSH
56181: LD_INT 3
56183: PPUSH
56184: LD_INT 4
56186: PPUSH
56187: CALL_OW 273
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_VAR 0 7
56200: PPUSH
56201: LD_INT 4
56203: PPUSH
56204: LD_INT 4
56206: PPUSH
56207: CALL_OW 272
56211: PUSH
56212: LD_VAR 0 8
56216: PPUSH
56217: LD_INT 4
56219: PPUSH
56220: LD_INT 4
56222: PPUSH
56223: CALL_OW 273
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_VAR 0 7
56236: PPUSH
56237: LD_INT 5
56239: PPUSH
56240: LD_INT 4
56242: PPUSH
56243: CALL_OW 272
56247: PUSH
56248: LD_VAR 0 8
56252: PPUSH
56253: LD_INT 5
56255: PPUSH
56256: LD_INT 4
56258: PPUSH
56259: CALL_OW 273
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// for i = tmp downto 1 do
56276: LD_ADDR_VAR 0 4
56280: PUSH
56281: DOUBLE
56282: LD_VAR 0 6
56286: INC
56287: ST_TO_ADDR
56288: LD_INT 1
56290: PUSH
56291: FOR_DOWNTO
56292: IFFALSE 56393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56294: LD_VAR 0 6
56298: PUSH
56299: LD_VAR 0 4
56303: ARRAY
56304: PUSH
56305: LD_INT 1
56307: ARRAY
56308: PPUSH
56309: LD_VAR 0 6
56313: PUSH
56314: LD_VAR 0 4
56318: ARRAY
56319: PUSH
56320: LD_INT 2
56322: ARRAY
56323: PPUSH
56324: CALL_OW 488
56328: NOT
56329: PUSH
56330: LD_VAR 0 6
56334: PUSH
56335: LD_VAR 0 4
56339: ARRAY
56340: PUSH
56341: LD_INT 1
56343: ARRAY
56344: PPUSH
56345: LD_VAR 0 6
56349: PUSH
56350: LD_VAR 0 4
56354: ARRAY
56355: PUSH
56356: LD_INT 2
56358: ARRAY
56359: PPUSH
56360: CALL_OW 428
56364: PUSH
56365: LD_INT 0
56367: NONEQUAL
56368: OR
56369: IFFALSE 56391
// tmp := Delete ( tmp , i ) ;
56371: LD_ADDR_VAR 0 6
56375: PUSH
56376: LD_VAR 0 6
56380: PPUSH
56381: LD_VAR 0 4
56385: PPUSH
56386: CALL_OW 3
56390: ST_TO_ADDR
56391: GO 56291
56393: POP
56394: POP
// j := GetClosestHex ( unit , tmp ) ;
56395: LD_ADDR_VAR 0 5
56399: PUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: LD_VAR 0 6
56409: PPUSH
56410: CALL 55695 0 2
56414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56415: LD_VAR 0 1
56419: PPUSH
56420: LD_VAR 0 5
56424: PUSH
56425: LD_INT 1
56427: ARRAY
56428: PPUSH
56429: LD_VAR 0 5
56433: PUSH
56434: LD_INT 2
56436: ARRAY
56437: PPUSH
56438: CALL_OW 111
// end ;
56442: LD_VAR 0 3
56446: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56447: LD_INT 0
56449: PPUSH
56450: PPUSH
56451: PPUSH
// uc_side = 0 ;
56452: LD_ADDR_OWVAR 20
56456: PUSH
56457: LD_INT 0
56459: ST_TO_ADDR
// uc_nation = 0 ;
56460: LD_ADDR_OWVAR 21
56464: PUSH
56465: LD_INT 0
56467: ST_TO_ADDR
// InitHc_All ( ) ;
56468: CALL_OW 584
// InitVc ;
56472: CALL_OW 20
// if mastodonts then
56476: LD_VAR 0 6
56480: IFFALSE 56547
// for i = 1 to mastodonts do
56482: LD_ADDR_VAR 0 11
56486: PUSH
56487: DOUBLE
56488: LD_INT 1
56490: DEC
56491: ST_TO_ADDR
56492: LD_VAR 0 6
56496: PUSH
56497: FOR_TO
56498: IFFALSE 56545
// begin vc_chassis := 31 ;
56500: LD_ADDR_OWVAR 37
56504: PUSH
56505: LD_INT 31
56507: ST_TO_ADDR
// vc_control := control_rider ;
56508: LD_ADDR_OWVAR 38
56512: PUSH
56513: LD_INT 4
56515: ST_TO_ADDR
// animal := CreateVehicle ;
56516: LD_ADDR_VAR 0 12
56520: PUSH
56521: CALL_OW 45
56525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56526: LD_VAR 0 12
56530: PPUSH
56531: LD_VAR 0 8
56535: PPUSH
56536: LD_INT 0
56538: PPUSH
56539: CALL 58735 0 3
// end ;
56543: GO 56497
56545: POP
56546: POP
// if horses then
56547: LD_VAR 0 5
56551: IFFALSE 56618
// for i = 1 to horses do
56553: LD_ADDR_VAR 0 11
56557: PUSH
56558: DOUBLE
56559: LD_INT 1
56561: DEC
56562: ST_TO_ADDR
56563: LD_VAR 0 5
56567: PUSH
56568: FOR_TO
56569: IFFALSE 56616
// begin hc_class := 21 ;
56571: LD_ADDR_OWVAR 28
56575: PUSH
56576: LD_INT 21
56578: ST_TO_ADDR
// hc_gallery :=  ;
56579: LD_ADDR_OWVAR 33
56583: PUSH
56584: LD_STRING 
56586: ST_TO_ADDR
// animal := CreateHuman ;
56587: LD_ADDR_VAR 0 12
56591: PUSH
56592: CALL_OW 44
56596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56597: LD_VAR 0 12
56601: PPUSH
56602: LD_VAR 0 8
56606: PPUSH
56607: LD_INT 0
56609: PPUSH
56610: CALL 58735 0 3
// end ;
56614: GO 56568
56616: POP
56617: POP
// if birds then
56618: LD_VAR 0 1
56622: IFFALSE 56689
// for i = 1 to birds do
56624: LD_ADDR_VAR 0 11
56628: PUSH
56629: DOUBLE
56630: LD_INT 1
56632: DEC
56633: ST_TO_ADDR
56634: LD_VAR 0 1
56638: PUSH
56639: FOR_TO
56640: IFFALSE 56687
// begin hc_class = 18 ;
56642: LD_ADDR_OWVAR 28
56646: PUSH
56647: LD_INT 18
56649: ST_TO_ADDR
// hc_gallery =  ;
56650: LD_ADDR_OWVAR 33
56654: PUSH
56655: LD_STRING 
56657: ST_TO_ADDR
// animal := CreateHuman ;
56658: LD_ADDR_VAR 0 12
56662: PUSH
56663: CALL_OW 44
56667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56668: LD_VAR 0 12
56672: PPUSH
56673: LD_VAR 0 8
56677: PPUSH
56678: LD_INT 0
56680: PPUSH
56681: CALL 58735 0 3
// end ;
56685: GO 56639
56687: POP
56688: POP
// if tigers then
56689: LD_VAR 0 2
56693: IFFALSE 56777
// for i = 1 to tigers do
56695: LD_ADDR_VAR 0 11
56699: PUSH
56700: DOUBLE
56701: LD_INT 1
56703: DEC
56704: ST_TO_ADDR
56705: LD_VAR 0 2
56709: PUSH
56710: FOR_TO
56711: IFFALSE 56775
// begin hc_class = class_tiger ;
56713: LD_ADDR_OWVAR 28
56717: PUSH
56718: LD_INT 14
56720: ST_TO_ADDR
// hc_gallery =  ;
56721: LD_ADDR_OWVAR 33
56725: PUSH
56726: LD_STRING 
56728: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56729: LD_ADDR_OWVAR 35
56733: PUSH
56734: LD_INT 7
56736: NEG
56737: PPUSH
56738: LD_INT 7
56740: PPUSH
56741: CALL_OW 12
56745: ST_TO_ADDR
// animal := CreateHuman ;
56746: LD_ADDR_VAR 0 12
56750: PUSH
56751: CALL_OW 44
56755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56756: LD_VAR 0 12
56760: PPUSH
56761: LD_VAR 0 8
56765: PPUSH
56766: LD_INT 0
56768: PPUSH
56769: CALL 58735 0 3
// end ;
56773: GO 56710
56775: POP
56776: POP
// if apemans then
56777: LD_VAR 0 3
56781: IFFALSE 56904
// for i = 1 to apemans do
56783: LD_ADDR_VAR 0 11
56787: PUSH
56788: DOUBLE
56789: LD_INT 1
56791: DEC
56792: ST_TO_ADDR
56793: LD_VAR 0 3
56797: PUSH
56798: FOR_TO
56799: IFFALSE 56902
// begin hc_class = class_apeman ;
56801: LD_ADDR_OWVAR 28
56805: PUSH
56806: LD_INT 12
56808: ST_TO_ADDR
// hc_gallery =  ;
56809: LD_ADDR_OWVAR 33
56813: PUSH
56814: LD_STRING 
56816: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56817: LD_ADDR_OWVAR 35
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PPUSH
56826: LD_INT 2
56828: PPUSH
56829: CALL_OW 12
56833: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56834: LD_ADDR_OWVAR 31
56838: PUSH
56839: LD_INT 1
56841: PPUSH
56842: LD_INT 3
56844: PPUSH
56845: CALL_OW 12
56849: PUSH
56850: LD_INT 1
56852: PPUSH
56853: LD_INT 3
56855: PPUSH
56856: CALL_OW 12
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// animal := CreateHuman ;
56873: LD_ADDR_VAR 0 12
56877: PUSH
56878: CALL_OW 44
56882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56883: LD_VAR 0 12
56887: PPUSH
56888: LD_VAR 0 8
56892: PPUSH
56893: LD_INT 0
56895: PPUSH
56896: CALL 58735 0 3
// end ;
56900: GO 56798
56902: POP
56903: POP
// if enchidnas then
56904: LD_VAR 0 4
56908: IFFALSE 56975
// for i = 1 to enchidnas do
56910: LD_ADDR_VAR 0 11
56914: PUSH
56915: DOUBLE
56916: LD_INT 1
56918: DEC
56919: ST_TO_ADDR
56920: LD_VAR 0 4
56924: PUSH
56925: FOR_TO
56926: IFFALSE 56973
// begin hc_class = 13 ;
56928: LD_ADDR_OWVAR 28
56932: PUSH
56933: LD_INT 13
56935: ST_TO_ADDR
// hc_gallery =  ;
56936: LD_ADDR_OWVAR 33
56940: PUSH
56941: LD_STRING 
56943: ST_TO_ADDR
// animal := CreateHuman ;
56944: LD_ADDR_VAR 0 12
56948: PUSH
56949: CALL_OW 44
56953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56954: LD_VAR 0 12
56958: PPUSH
56959: LD_VAR 0 8
56963: PPUSH
56964: LD_INT 0
56966: PPUSH
56967: CALL 58735 0 3
// end ;
56971: GO 56925
56973: POP
56974: POP
// if fishes then
56975: LD_VAR 0 7
56979: IFFALSE 57046
// for i = 1 to fishes do
56981: LD_ADDR_VAR 0 11
56985: PUSH
56986: DOUBLE
56987: LD_INT 1
56989: DEC
56990: ST_TO_ADDR
56991: LD_VAR 0 7
56995: PUSH
56996: FOR_TO
56997: IFFALSE 57044
// begin hc_class = 20 ;
56999: LD_ADDR_OWVAR 28
57003: PUSH
57004: LD_INT 20
57006: ST_TO_ADDR
// hc_gallery =  ;
57007: LD_ADDR_OWVAR 33
57011: PUSH
57012: LD_STRING 
57014: ST_TO_ADDR
// animal := CreateHuman ;
57015: LD_ADDR_VAR 0 12
57019: PUSH
57020: CALL_OW 44
57024: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57025: LD_VAR 0 12
57029: PPUSH
57030: LD_VAR 0 9
57034: PPUSH
57035: LD_INT 0
57037: PPUSH
57038: CALL 58735 0 3
// end ;
57042: GO 56996
57044: POP
57045: POP
// end ;
57046: LD_VAR 0 10
57050: RET
// export function WantHeal ( sci , unit ) ; begin
57051: LD_INT 0
57053: PPUSH
// if GetTaskList ( sci ) > 0 then
57054: LD_VAR 0 1
57058: PPUSH
57059: CALL_OW 437
57063: PUSH
57064: LD_INT 0
57066: GREATER
57067: IFFALSE 57137
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57069: LD_VAR 0 1
57073: PPUSH
57074: CALL_OW 437
57078: PUSH
57079: LD_INT 1
57081: ARRAY
57082: PUSH
57083: LD_INT 1
57085: ARRAY
57086: PUSH
57087: LD_STRING l
57089: EQUAL
57090: PUSH
57091: LD_VAR 0 1
57095: PPUSH
57096: CALL_OW 437
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: PUSH
57105: LD_INT 4
57107: ARRAY
57108: PUSH
57109: LD_VAR 0 2
57113: EQUAL
57114: AND
57115: IFFALSE 57127
// result := true else
57117: LD_ADDR_VAR 0 3
57121: PUSH
57122: LD_INT 1
57124: ST_TO_ADDR
57125: GO 57135
// result := false ;
57127: LD_ADDR_VAR 0 3
57131: PUSH
57132: LD_INT 0
57134: ST_TO_ADDR
// end else
57135: GO 57145
// result := false ;
57137: LD_ADDR_VAR 0 3
57141: PUSH
57142: LD_INT 0
57144: ST_TO_ADDR
// end ;
57145: LD_VAR 0 3
57149: RET
// export function HealTarget ( sci ) ; begin
57150: LD_INT 0
57152: PPUSH
// if not sci then
57153: LD_VAR 0 1
57157: NOT
57158: IFFALSE 57162
// exit ;
57160: GO 57227
// result := 0 ;
57162: LD_ADDR_VAR 0 2
57166: PUSH
57167: LD_INT 0
57169: ST_TO_ADDR
// if GetTaskList ( sci ) then
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 437
57179: IFFALSE 57227
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57181: LD_VAR 0 1
57185: PPUSH
57186: CALL_OW 437
57190: PUSH
57191: LD_INT 1
57193: ARRAY
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: PUSH
57199: LD_STRING l
57201: EQUAL
57202: IFFALSE 57227
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57204: LD_ADDR_VAR 0 2
57208: PUSH
57209: LD_VAR 0 1
57213: PPUSH
57214: CALL_OW 437
57218: PUSH
57219: LD_INT 1
57221: ARRAY
57222: PUSH
57223: LD_INT 4
57225: ARRAY
57226: ST_TO_ADDR
// end ;
57227: LD_VAR 0 2
57231: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57232: LD_INT 0
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
// if not base_units then
57238: LD_VAR 0 1
57242: NOT
57243: IFFALSE 57247
// exit ;
57245: GO 57334
// result := false ;
57247: LD_ADDR_VAR 0 2
57251: PUSH
57252: LD_INT 0
57254: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57255: LD_ADDR_VAR 0 5
57259: PUSH
57260: LD_VAR 0 1
57264: PPUSH
57265: LD_INT 21
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PPUSH
57275: CALL_OW 72
57279: ST_TO_ADDR
// if not tmp then
57280: LD_VAR 0 5
57284: NOT
57285: IFFALSE 57289
// exit ;
57287: GO 57334
// for i in tmp do
57289: LD_ADDR_VAR 0 3
57293: PUSH
57294: LD_VAR 0 5
57298: PUSH
57299: FOR_IN
57300: IFFALSE 57332
// begin result := EnemyInRange ( i , 22 ) ;
57302: LD_ADDR_VAR 0 2
57306: PUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: LD_INT 22
57314: PPUSH
57315: CALL 55570 0 2
57319: ST_TO_ADDR
// if result then
57320: LD_VAR 0 2
57324: IFFALSE 57330
// exit ;
57326: POP
57327: POP
57328: GO 57334
// end ;
57330: GO 57299
57332: POP
57333: POP
// end ;
57334: LD_VAR 0 2
57338: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57339: LD_INT 0
57341: PPUSH
57342: PPUSH
// if not units then
57343: LD_VAR 0 1
57347: NOT
57348: IFFALSE 57352
// exit ;
57350: GO 57422
// result := [ ] ;
57352: LD_ADDR_VAR 0 3
57356: PUSH
57357: EMPTY
57358: ST_TO_ADDR
// for i in units do
57359: LD_ADDR_VAR 0 4
57363: PUSH
57364: LD_VAR 0 1
57368: PUSH
57369: FOR_IN
57370: IFFALSE 57420
// if GetTag ( i ) = tag then
57372: LD_VAR 0 4
57376: PPUSH
57377: CALL_OW 110
57381: PUSH
57382: LD_VAR 0 2
57386: EQUAL
57387: IFFALSE 57418
// result := Replace ( result , result + 1 , i ) ;
57389: LD_ADDR_VAR 0 3
57393: PUSH
57394: LD_VAR 0 3
57398: PPUSH
57399: LD_VAR 0 3
57403: PUSH
57404: LD_INT 1
57406: PLUS
57407: PPUSH
57408: LD_VAR 0 4
57412: PPUSH
57413: CALL_OW 1
57417: ST_TO_ADDR
57418: GO 57369
57420: POP
57421: POP
// end ;
57422: LD_VAR 0 3
57426: RET
// export function IsDriver ( un ) ; begin
57427: LD_INT 0
57429: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57430: LD_ADDR_VAR 0 2
57434: PUSH
57435: LD_VAR 0 1
57439: PUSH
57440: LD_INT 55
57442: PUSH
57443: EMPTY
57444: LIST
57445: PPUSH
57446: CALL_OW 69
57450: IN
57451: ST_TO_ADDR
// end ;
57452: LD_VAR 0 2
57456: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57457: LD_INT 0
57459: PPUSH
57460: PPUSH
// list := [ ] ;
57461: LD_ADDR_VAR 0 5
57465: PUSH
57466: EMPTY
57467: ST_TO_ADDR
// case d of 0 :
57468: LD_VAR 0 3
57472: PUSH
57473: LD_INT 0
57475: DOUBLE
57476: EQUAL
57477: IFTRUE 57481
57479: GO 57614
57481: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57482: LD_ADDR_VAR 0 5
57486: PUSH
57487: LD_VAR 0 1
57491: PUSH
57492: LD_INT 4
57494: MINUS
57495: PUSH
57496: LD_VAR 0 2
57500: PUSH
57501: LD_INT 4
57503: MINUS
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: PUSH
57513: LD_VAR 0 1
57517: PUSH
57518: LD_INT 3
57520: MINUS
57521: PUSH
57522: LD_VAR 0 2
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: PUSH
57535: LD_VAR 0 1
57539: PUSH
57540: LD_INT 4
57542: PLUS
57543: PUSH
57544: LD_VAR 0 2
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: PUSH
57557: LD_VAR 0 1
57561: PUSH
57562: LD_INT 3
57564: PLUS
57565: PUSH
57566: LD_VAR 0 2
57570: PUSH
57571: LD_INT 3
57573: PLUS
57574: PUSH
57575: LD_INT 5
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: PUSH
57583: LD_VAR 0 1
57587: PUSH
57588: LD_VAR 0 2
57592: PUSH
57593: LD_INT 4
57595: PLUS
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// end ; 1 :
57612: GO 58312
57614: LD_INT 1
57616: DOUBLE
57617: EQUAL
57618: IFTRUE 57622
57620: GO 57755
57622: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57623: LD_ADDR_VAR 0 5
57627: PUSH
57628: LD_VAR 0 1
57632: PUSH
57633: LD_VAR 0 2
57637: PUSH
57638: LD_INT 4
57640: MINUS
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: PUSH
57650: LD_VAR 0 1
57654: PUSH
57655: LD_INT 3
57657: MINUS
57658: PUSH
57659: LD_VAR 0 2
57663: PUSH
57664: LD_INT 3
57666: MINUS
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: PUSH
57676: LD_VAR 0 1
57680: PUSH
57681: LD_INT 4
57683: MINUS
57684: PUSH
57685: LD_VAR 0 2
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: PUSH
57698: LD_VAR 0 1
57702: PUSH
57703: LD_VAR 0 2
57707: PUSH
57708: LD_INT 3
57710: PLUS
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: LD_VAR 0 1
57724: PUSH
57725: LD_INT 4
57727: PLUS
57728: PUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_INT 4
57736: PLUS
57737: PUSH
57738: LD_INT 5
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// end ; 2 :
57753: GO 58312
57755: LD_INT 2
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57763
57761: GO 57892
57763: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57764: LD_ADDR_VAR 0 5
57768: PUSH
57769: LD_VAR 0 1
57773: PUSH
57774: LD_VAR 0 2
57778: PUSH
57779: LD_INT 3
57781: MINUS
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: PUSH
57791: LD_VAR 0 1
57795: PUSH
57796: LD_INT 4
57798: PLUS
57799: PUSH
57800: LD_VAR 0 2
57804: PUSH
57805: LD_INT 4
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: PUSH
57813: LD_VAR 0 1
57817: PUSH
57818: LD_VAR 0 2
57822: PUSH
57823: LD_INT 4
57825: PLUS
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: PUSH
57835: LD_VAR 0 1
57839: PUSH
57840: LD_INT 3
57842: MINUS
57843: PUSH
57844: LD_VAR 0 2
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_VAR 0 1
57861: PUSH
57862: LD_INT 4
57864: MINUS
57865: PUSH
57866: LD_VAR 0 2
57870: PUSH
57871: LD_INT 4
57873: MINUS
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// end ; 3 :
57890: GO 58312
57892: LD_INT 3
57894: DOUBLE
57895: EQUAL
57896: IFTRUE 57900
57898: GO 58033
57900: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57901: LD_ADDR_VAR 0 5
57905: PUSH
57906: LD_VAR 0 1
57910: PUSH
57911: LD_INT 3
57913: PLUS
57914: PUSH
57915: LD_VAR 0 2
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: PUSH
57928: LD_VAR 0 1
57932: PUSH
57933: LD_INT 4
57935: PLUS
57936: PUSH
57937: LD_VAR 0 2
57941: PUSH
57942: LD_INT 4
57944: PLUS
57945: PUSH
57946: LD_INT 5
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: PUSH
57954: LD_VAR 0 1
57958: PUSH
57959: LD_INT 4
57961: MINUS
57962: PUSH
57963: LD_VAR 0 2
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: PUSH
57976: LD_VAR 0 1
57980: PUSH
57981: LD_VAR 0 2
57985: PUSH
57986: LD_INT 4
57988: MINUS
57989: PUSH
57990: LD_INT 3
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: PUSH
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 3
58005: MINUS
58006: PUSH
58007: LD_VAR 0 2
58011: PUSH
58012: LD_INT 3
58014: MINUS
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// end ; 4 :
58031: GO 58312
58033: LD_INT 4
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58041
58039: GO 58174
58041: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58042: LD_ADDR_VAR 0 5
58046: PUSH
58047: LD_VAR 0 1
58051: PUSH
58052: LD_VAR 0 2
58056: PUSH
58057: LD_INT 4
58059: PLUS
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: PUSH
58069: LD_VAR 0 1
58073: PUSH
58074: LD_INT 3
58076: PLUS
58077: PUSH
58078: LD_VAR 0 2
58082: PUSH
58083: LD_INT 3
58085: PLUS
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: PUSH
58095: LD_VAR 0 1
58099: PUSH
58100: LD_INT 4
58102: PLUS
58103: PUSH
58104: LD_VAR 0 2
58108: PUSH
58109: LD_INT 4
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: PUSH
58117: LD_VAR 0 1
58121: PUSH
58122: LD_VAR 0 2
58126: PUSH
58127: LD_INT 3
58129: MINUS
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: PUSH
58139: LD_VAR 0 1
58143: PUSH
58144: LD_INT 4
58146: MINUS
58147: PUSH
58148: LD_VAR 0 2
58152: PUSH
58153: LD_INT 4
58155: MINUS
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// end ; 5 :
58172: GO 58312
58174: LD_INT 5
58176: DOUBLE
58177: EQUAL
58178: IFTRUE 58182
58180: GO 58311
58182: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58183: LD_ADDR_VAR 0 5
58187: PUSH
58188: LD_VAR 0 1
58192: PUSH
58193: LD_INT 4
58195: MINUS
58196: PUSH
58197: LD_VAR 0 2
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: LD_VAR 0 1
58214: PUSH
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 4
58222: MINUS
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: PUSH
58232: LD_VAR 0 1
58236: PUSH
58237: LD_INT 4
58239: PLUS
58240: PUSH
58241: LD_VAR 0 2
58245: PUSH
58246: LD_INT 4
58248: PLUS
58249: PUSH
58250: LD_INT 5
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: PUSH
58258: LD_VAR 0 1
58262: PUSH
58263: LD_INT 3
58265: PLUS
58266: PUSH
58267: LD_VAR 0 2
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: LIST
58279: PUSH
58280: LD_VAR 0 1
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 3
58292: PLUS
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: ST_TO_ADDR
// end ; end ;
58309: GO 58312
58311: POP
// result := list ;
58312: LD_ADDR_VAR 0 4
58316: PUSH
58317: LD_VAR 0 5
58321: ST_TO_ADDR
// end ;
58322: LD_VAR 0 4
58326: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58327: LD_INT 0
58329: PPUSH
58330: PPUSH
58331: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58332: LD_VAR 0 1
58336: NOT
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: IN
58361: NOT
58362: OR
58363: IFFALSE 58367
// exit ;
58365: GO 58459
// tmp := [ ] ;
58367: LD_ADDR_VAR 0 5
58371: PUSH
58372: EMPTY
58373: ST_TO_ADDR
// for i in units do
58374: LD_ADDR_VAR 0 4
58378: PUSH
58379: LD_VAR 0 1
58383: PUSH
58384: FOR_IN
58385: IFFALSE 58428
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58387: LD_ADDR_VAR 0 5
58391: PUSH
58392: LD_VAR 0 5
58396: PPUSH
58397: LD_VAR 0 5
58401: PUSH
58402: LD_INT 1
58404: PLUS
58405: PPUSH
58406: LD_VAR 0 4
58410: PPUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: CALL_OW 259
58420: PPUSH
58421: CALL_OW 2
58425: ST_TO_ADDR
58426: GO 58384
58428: POP
58429: POP
// if not tmp then
58430: LD_VAR 0 5
58434: NOT
58435: IFFALSE 58439
// exit ;
58437: GO 58459
// result := SortListByListDesc ( units , tmp ) ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: LD_VAR 0 5
58453: PPUSH
58454: CALL_OW 77
58458: ST_TO_ADDR
// end ;
58459: LD_VAR 0 3
58463: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58464: LD_INT 0
58466: PPUSH
58467: PPUSH
58468: PPUSH
// result := false ;
58469: LD_ADDR_VAR 0 3
58473: PUSH
58474: LD_INT 0
58476: ST_TO_ADDR
// x := GetX ( building ) ;
58477: LD_ADDR_VAR 0 4
58481: PUSH
58482: LD_VAR 0 2
58486: PPUSH
58487: CALL_OW 250
58491: ST_TO_ADDR
// y := GetY ( building ) ;
58492: LD_ADDR_VAR 0 5
58496: PUSH
58497: LD_VAR 0 2
58501: PPUSH
58502: CALL_OW 251
58506: ST_TO_ADDR
// if not building or not x or not y then
58507: LD_VAR 0 2
58511: NOT
58512: PUSH
58513: LD_VAR 0 4
58517: NOT
58518: OR
58519: PUSH
58520: LD_VAR 0 5
58524: NOT
58525: OR
58526: IFFALSE 58530
// exit ;
58528: GO 58622
// if GetTaskList ( unit ) then
58530: LD_VAR 0 1
58534: PPUSH
58535: CALL_OW 437
58539: IFFALSE 58622
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58541: LD_STRING e
58543: PUSH
58544: LD_VAR 0 1
58548: PPUSH
58549: CALL_OW 437
58553: PUSH
58554: LD_INT 1
58556: ARRAY
58557: PUSH
58558: LD_INT 1
58560: ARRAY
58561: EQUAL
58562: PUSH
58563: LD_VAR 0 4
58567: PUSH
58568: LD_VAR 0 1
58572: PPUSH
58573: CALL_OW 437
58577: PUSH
58578: LD_INT 1
58580: ARRAY
58581: PUSH
58582: LD_INT 2
58584: ARRAY
58585: EQUAL
58586: AND
58587: PUSH
58588: LD_VAR 0 5
58592: PUSH
58593: LD_VAR 0 1
58597: PPUSH
58598: CALL_OW 437
58602: PUSH
58603: LD_INT 1
58605: ARRAY
58606: PUSH
58607: LD_INT 3
58609: ARRAY
58610: EQUAL
58611: AND
58612: IFFALSE 58622
// result := true end ;
58614: LD_ADDR_VAR 0 3
58618: PUSH
58619: LD_INT 1
58621: ST_TO_ADDR
// end ;
58622: LD_VAR 0 3
58626: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58627: LD_INT 0
58629: PPUSH
// result := false ;
58630: LD_ADDR_VAR 0 4
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// if GetTaskList ( unit ) then
58638: LD_VAR 0 1
58642: PPUSH
58643: CALL_OW 437
58647: IFFALSE 58730
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58649: LD_STRING M
58651: PUSH
58652: LD_VAR 0 1
58656: PPUSH
58657: CALL_OW 437
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PUSH
58666: LD_INT 1
58668: ARRAY
58669: EQUAL
58670: PUSH
58671: LD_VAR 0 2
58675: PUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 437
58685: PUSH
58686: LD_INT 1
58688: ARRAY
58689: PUSH
58690: LD_INT 2
58692: ARRAY
58693: EQUAL
58694: AND
58695: PUSH
58696: LD_VAR 0 3
58700: PUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 437
58710: PUSH
58711: LD_INT 1
58713: ARRAY
58714: PUSH
58715: LD_INT 3
58717: ARRAY
58718: EQUAL
58719: AND
58720: IFFALSE 58730
// result := true ;
58722: LD_ADDR_VAR 0 4
58726: PUSH
58727: LD_INT 1
58729: ST_TO_ADDR
// end ; end ;
58730: LD_VAR 0 4
58734: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58735: LD_INT 0
58737: PPUSH
58738: PPUSH
58739: PPUSH
58740: PPUSH
// if not unit or not area then
58741: LD_VAR 0 1
58745: NOT
58746: PUSH
58747: LD_VAR 0 2
58751: NOT
58752: OR
58753: IFFALSE 58757
// exit ;
58755: GO 58921
// tmp := AreaToList ( area , i ) ;
58757: LD_ADDR_VAR 0 6
58761: PUSH
58762: LD_VAR 0 2
58766: PPUSH
58767: LD_VAR 0 5
58771: PPUSH
58772: CALL_OW 517
58776: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58777: LD_ADDR_VAR 0 5
58781: PUSH
58782: DOUBLE
58783: LD_INT 1
58785: DEC
58786: ST_TO_ADDR
58787: LD_VAR 0 6
58791: PUSH
58792: LD_INT 1
58794: ARRAY
58795: PUSH
58796: FOR_TO
58797: IFFALSE 58919
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58799: LD_ADDR_VAR 0 7
58803: PUSH
58804: LD_VAR 0 6
58808: PUSH
58809: LD_INT 1
58811: ARRAY
58812: PUSH
58813: LD_VAR 0 5
58817: ARRAY
58818: PUSH
58819: LD_VAR 0 6
58823: PUSH
58824: LD_INT 2
58826: ARRAY
58827: PUSH
58828: LD_VAR 0 5
58832: ARRAY
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58838: LD_VAR 0 7
58842: PUSH
58843: LD_INT 1
58845: ARRAY
58846: PPUSH
58847: LD_VAR 0 7
58851: PUSH
58852: LD_INT 2
58854: ARRAY
58855: PPUSH
58856: CALL_OW 428
58860: PUSH
58861: LD_INT 0
58863: EQUAL
58864: IFFALSE 58917
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58866: LD_VAR 0 1
58870: PPUSH
58871: LD_VAR 0 7
58875: PUSH
58876: LD_INT 1
58878: ARRAY
58879: PPUSH
58880: LD_VAR 0 7
58884: PUSH
58885: LD_INT 2
58887: ARRAY
58888: PPUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: CALL_OW 48
// result := IsPlaced ( unit ) ;
58898: LD_ADDR_VAR 0 4
58902: PUSH
58903: LD_VAR 0 1
58907: PPUSH
58908: CALL_OW 305
58912: ST_TO_ADDR
// exit ;
58913: POP
58914: POP
58915: GO 58921
// end ; end ;
58917: GO 58796
58919: POP
58920: POP
// end ;
58921: LD_VAR 0 4
58925: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58926: LD_INT 0
58928: PPUSH
58929: PPUSH
58930: PPUSH
// if not side or side > 8 then
58931: LD_VAR 0 1
58935: NOT
58936: PUSH
58937: LD_VAR 0 1
58941: PUSH
58942: LD_INT 8
58944: GREATER
58945: OR
58946: IFFALSE 58950
// exit ;
58948: GO 59137
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58950: LD_ADDR_VAR 0 4
58954: PUSH
58955: LD_INT 22
58957: PUSH
58958: LD_VAR 0 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 21
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: ST_TO_ADDR
// if not tmp then
58986: LD_VAR 0 4
58990: NOT
58991: IFFALSE 58995
// exit ;
58993: GO 59137
// enable_addtolog := true ;
58995: LD_ADDR_OWVAR 81
58999: PUSH
59000: LD_INT 1
59002: ST_TO_ADDR
// AddToLog ( [ ) ;
59003: LD_STRING [
59005: PPUSH
59006: CALL_OW 561
// for i in tmp do
59010: LD_ADDR_VAR 0 3
59014: PUSH
59015: LD_VAR 0 4
59019: PUSH
59020: FOR_IN
59021: IFFALSE 59128
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59023: LD_STRING [
59025: PUSH
59026: LD_VAR 0 3
59030: PPUSH
59031: CALL_OW 266
59035: STR
59036: PUSH
59037: LD_STRING , 
59039: STR
59040: PUSH
59041: LD_VAR 0 3
59045: PPUSH
59046: CALL_OW 250
59050: STR
59051: PUSH
59052: LD_STRING , 
59054: STR
59055: PUSH
59056: LD_VAR 0 3
59060: PPUSH
59061: CALL_OW 251
59065: STR
59066: PUSH
59067: LD_STRING , 
59069: STR
59070: PUSH
59071: LD_VAR 0 3
59075: PPUSH
59076: CALL_OW 254
59080: STR
59081: PUSH
59082: LD_STRING , 
59084: STR
59085: PUSH
59086: LD_VAR 0 3
59090: PPUSH
59091: LD_INT 1
59093: PPUSH
59094: CALL_OW 268
59098: STR
59099: PUSH
59100: LD_STRING , 
59102: STR
59103: PUSH
59104: LD_VAR 0 3
59108: PPUSH
59109: LD_INT 2
59111: PPUSH
59112: CALL_OW 268
59116: STR
59117: PUSH
59118: LD_STRING ],
59120: STR
59121: PPUSH
59122: CALL_OW 561
// end ;
59126: GO 59020
59128: POP
59129: POP
// AddToLog ( ]; ) ;
59130: LD_STRING ];
59132: PPUSH
59133: CALL_OW 561
// end ;
59137: LD_VAR 0 2
59141: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59142: LD_INT 0
59144: PPUSH
59145: PPUSH
59146: PPUSH
59147: PPUSH
59148: PPUSH
// if not area or not rate or not max then
59149: LD_VAR 0 1
59153: NOT
59154: PUSH
59155: LD_VAR 0 2
59159: NOT
59160: OR
59161: PUSH
59162: LD_VAR 0 4
59166: NOT
59167: OR
59168: IFFALSE 59172
// exit ;
59170: GO 59364
// while 1 do
59172: LD_INT 1
59174: IFFALSE 59364
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59176: LD_ADDR_VAR 0 9
59180: PUSH
59181: LD_VAR 0 1
59185: PPUSH
59186: LD_INT 1
59188: PPUSH
59189: CALL_OW 287
59193: PUSH
59194: LD_INT 10
59196: MUL
59197: ST_TO_ADDR
// r := rate / 10 ;
59198: LD_ADDR_VAR 0 7
59202: PUSH
59203: LD_VAR 0 2
59207: PUSH
59208: LD_INT 10
59210: DIVREAL
59211: ST_TO_ADDR
// time := 1 1$00 ;
59212: LD_ADDR_VAR 0 8
59216: PUSH
59217: LD_INT 2100
59219: ST_TO_ADDR
// if amount < min then
59220: LD_VAR 0 9
59224: PUSH
59225: LD_VAR 0 3
59229: LESS
59230: IFFALSE 59248
// r := r * 2 else
59232: LD_ADDR_VAR 0 7
59236: PUSH
59237: LD_VAR 0 7
59241: PUSH
59242: LD_INT 2
59244: MUL
59245: ST_TO_ADDR
59246: GO 59274
// if amount > max then
59248: LD_VAR 0 9
59252: PUSH
59253: LD_VAR 0 4
59257: GREATER
59258: IFFALSE 59274
// r := r / 2 ;
59260: LD_ADDR_VAR 0 7
59264: PUSH
59265: LD_VAR 0 7
59269: PUSH
59270: LD_INT 2
59272: DIVREAL
59273: ST_TO_ADDR
// time := time / r ;
59274: LD_ADDR_VAR 0 8
59278: PUSH
59279: LD_VAR 0 8
59283: PUSH
59284: LD_VAR 0 7
59288: DIVREAL
59289: ST_TO_ADDR
// if time < 0 then
59290: LD_VAR 0 8
59294: PUSH
59295: LD_INT 0
59297: LESS
59298: IFFALSE 59315
// time := time * - 1 ;
59300: LD_ADDR_VAR 0 8
59304: PUSH
59305: LD_VAR 0 8
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: MUL
59314: ST_TO_ADDR
// wait ( time ) ;
59315: LD_VAR 0 8
59319: PPUSH
59320: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59324: LD_INT 35
59326: PPUSH
59327: LD_INT 875
59329: PPUSH
59330: CALL_OW 12
59334: PPUSH
59335: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59339: LD_INT 1
59341: PPUSH
59342: LD_INT 5
59344: PPUSH
59345: CALL_OW 12
59349: PPUSH
59350: LD_VAR 0 1
59354: PPUSH
59355: LD_INT 1
59357: PPUSH
59358: CALL_OW 55
// end ;
59362: GO 59172
// end ;
59364: LD_VAR 0 5
59368: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
59374: PPUSH
59375: PPUSH
59376: PPUSH
59377: PPUSH
59378: PPUSH
// if not turrets or not factories then
59379: LD_VAR 0 1
59383: NOT
59384: PUSH
59385: LD_VAR 0 2
59389: NOT
59390: OR
59391: IFFALSE 59395
// exit ;
59393: GO 59702
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59395: LD_ADDR_VAR 0 10
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: LD_INT 6
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 5
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 24
59437: PUSH
59438: LD_INT 25
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 23
59447: PUSH
59448: LD_INT 27
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 42
59461: PUSH
59462: LD_INT 43
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 44
59471: PUSH
59472: LD_INT 46
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 45
59481: PUSH
59482: LD_INT 47
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: ST_TO_ADDR
// result := [ ] ;
59499: LD_ADDR_VAR 0 3
59503: PUSH
59504: EMPTY
59505: ST_TO_ADDR
// for i in turrets do
59506: LD_ADDR_VAR 0 4
59510: PUSH
59511: LD_VAR 0 1
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59700
// begin nat := GetNation ( i ) ;
59519: LD_ADDR_VAR 0 7
59523: PUSH
59524: LD_VAR 0 4
59528: PPUSH
59529: CALL_OW 248
59533: ST_TO_ADDR
// weapon := 0 ;
59534: LD_ADDR_VAR 0 8
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// if not nat then
59542: LD_VAR 0 7
59546: NOT
59547: IFFALSE 59551
// continue ;
59549: GO 59516
// for j in list [ nat ] do
59551: LD_ADDR_VAR 0 5
59555: PUSH
59556: LD_VAR 0 10
59560: PUSH
59561: LD_VAR 0 7
59565: ARRAY
59566: PUSH
59567: FOR_IN
59568: IFFALSE 59609
// if GetBWeapon ( i ) = j [ 1 ] then
59570: LD_VAR 0 4
59574: PPUSH
59575: CALL_OW 269
59579: PUSH
59580: LD_VAR 0 5
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: EQUAL
59589: IFFALSE 59607
// begin weapon := j [ 2 ] ;
59591: LD_ADDR_VAR 0 8
59595: PUSH
59596: LD_VAR 0 5
59600: PUSH
59601: LD_INT 2
59603: ARRAY
59604: ST_TO_ADDR
// break ;
59605: GO 59609
// end ;
59607: GO 59567
59609: POP
59610: POP
// if not weapon then
59611: LD_VAR 0 8
59615: NOT
59616: IFFALSE 59620
// continue ;
59618: GO 59516
// for k in factories do
59620: LD_ADDR_VAR 0 6
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: FOR_IN
59631: IFFALSE 59696
// begin weapons := AvailableWeaponList ( k ) ;
59633: LD_ADDR_VAR 0 9
59637: PUSH
59638: LD_VAR 0 6
59642: PPUSH
59643: CALL_OW 478
59647: ST_TO_ADDR
// if not weapons then
59648: LD_VAR 0 9
59652: NOT
59653: IFFALSE 59657
// continue ;
59655: GO 59630
// if weapon in weapons then
59657: LD_VAR 0 8
59661: PUSH
59662: LD_VAR 0 9
59666: IN
59667: IFFALSE 59694
// begin result := [ i , weapon ] ;
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: LD_VAR 0 4
59678: PUSH
59679: LD_VAR 0 8
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// exit ;
59688: POP
59689: POP
59690: POP
59691: POP
59692: GO 59702
// end ; end ;
59694: GO 59630
59696: POP
59697: POP
// end ;
59698: GO 59516
59700: POP
59701: POP
// end ;
59702: LD_VAR 0 3
59706: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59707: LD_INT 0
59709: PPUSH
// if not side or side > 8 then
59710: LD_VAR 0 3
59714: NOT
59715: PUSH
59716: LD_VAR 0 3
59720: PUSH
59721: LD_INT 8
59723: GREATER
59724: OR
59725: IFFALSE 59729
// exit ;
59727: GO 59788
// if not range then
59729: LD_VAR 0 4
59733: NOT
59734: IFFALSE 59745
// range := - 12 ;
59736: LD_ADDR_VAR 0 4
59740: PUSH
59741: LD_INT 12
59743: NEG
59744: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59745: LD_VAR 0 1
59749: PPUSH
59750: LD_VAR 0 2
59754: PPUSH
59755: LD_VAR 0 3
59759: PPUSH
59760: LD_VAR 0 4
59764: PPUSH
59765: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59769: LD_VAR 0 1
59773: PPUSH
59774: LD_VAR 0 2
59778: PPUSH
59779: LD_VAR 0 3
59783: PPUSH
59784: CALL_OW 331
// end ;
59788: LD_VAR 0 5
59792: RET
// export function Video ( mode ) ; begin
59793: LD_INT 0
59795: PPUSH
// ingame_video = mode ;
59796: LD_ADDR_OWVAR 52
59800: PUSH
59801: LD_VAR 0 1
59805: ST_TO_ADDR
// interface_hidden = mode ;
59806: LD_ADDR_OWVAR 54
59810: PUSH
59811: LD_VAR 0 1
59815: ST_TO_ADDR
// end ;
59816: LD_VAR 0 2
59820: RET
// export function Join ( array , element ) ; begin
59821: LD_INT 0
59823: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59824: LD_ADDR_VAR 0 3
59828: PUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 1
59841: PLUS
59842: PPUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: CALL_OW 1
59852: ST_TO_ADDR
// end ;
59853: LD_VAR 0 3
59857: RET
// export function JoinUnion ( array , element ) ; begin
59858: LD_INT 0
59860: PPUSH
// result := array union element ;
59861: LD_ADDR_VAR 0 3
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_VAR 0 2
59875: UNION
59876: ST_TO_ADDR
// end ;
59877: LD_VAR 0 3
59881: RET
// export function GetBehemoths ( side ) ; begin
59882: LD_INT 0
59884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59885: LD_ADDR_VAR 0 2
59889: PUSH
59890: LD_INT 22
59892: PUSH
59893: LD_VAR 0 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 31
59904: PUSH
59905: LD_INT 25
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PPUSH
59916: CALL_OW 69
59920: ST_TO_ADDR
// end ;
59921: LD_VAR 0 2
59925: RET
// export function Shuffle ( array ) ; var i , index ; begin
59926: LD_INT 0
59928: PPUSH
59929: PPUSH
59930: PPUSH
// result := [ ] ;
59931: LD_ADDR_VAR 0 2
59935: PUSH
59936: EMPTY
59937: ST_TO_ADDR
// if not array then
59938: LD_VAR 0 1
59942: NOT
59943: IFFALSE 59947
// exit ;
59945: GO 60046
// Randomize ;
59947: CALL_OW 10
// for i = array downto 1 do
59951: LD_ADDR_VAR 0 3
59955: PUSH
59956: DOUBLE
59957: LD_VAR 0 1
59961: INC
59962: ST_TO_ADDR
59963: LD_INT 1
59965: PUSH
59966: FOR_DOWNTO
59967: IFFALSE 60044
// begin index := rand ( 1 , array ) ;
59969: LD_ADDR_VAR 0 4
59973: PUSH
59974: LD_INT 1
59976: PPUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 12
59986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59987: LD_ADDR_VAR 0 2
59991: PUSH
59992: LD_VAR 0 2
59996: PPUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 1
60004: PLUS
60005: PPUSH
60006: LD_VAR 0 1
60010: PUSH
60011: LD_VAR 0 4
60015: ARRAY
60016: PPUSH
60017: CALL_OW 2
60021: ST_TO_ADDR
// array := Delete ( array , index ) ;
60022: LD_ADDR_VAR 0 1
60026: PUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_VAR 0 4
60036: PPUSH
60037: CALL_OW 3
60041: ST_TO_ADDR
// end ;
60042: GO 59966
60044: POP
60045: POP
// end ;
60046: LD_VAR 0 2
60050: RET
// export function GetBaseMaterials ( base ) ; begin
60051: LD_INT 0
60053: PPUSH
// result := [ 0 , 0 , 0 ] ;
60054: LD_ADDR_VAR 0 2
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// if not base then
60073: LD_VAR 0 1
60077: NOT
60078: IFFALSE 60082
// exit ;
60080: GO 60131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60082: LD_ADDR_VAR 0 2
60086: PUSH
60087: LD_VAR 0 1
60091: PPUSH
60092: LD_INT 1
60094: PPUSH
60095: CALL_OW 275
60099: PUSH
60100: LD_VAR 0 1
60104: PPUSH
60105: LD_INT 2
60107: PPUSH
60108: CALL_OW 275
60112: PUSH
60113: LD_VAR 0 1
60117: PPUSH
60118: LD_INT 3
60120: PPUSH
60121: CALL_OW 275
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// end ;
60131: LD_VAR 0 2
60135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
// result := array ;
60140: LD_ADDR_VAR 0 3
60144: PUSH
60145: LD_VAR 0 1
60149: ST_TO_ADDR
// if size > 0 then
60150: LD_VAR 0 2
60154: PUSH
60155: LD_INT 0
60157: GREATER
60158: IFFALSE 60204
// for i := array downto size do
60160: LD_ADDR_VAR 0 4
60164: PUSH
60165: DOUBLE
60166: LD_VAR 0 1
60170: INC
60171: ST_TO_ADDR
60172: LD_VAR 0 2
60176: PUSH
60177: FOR_DOWNTO
60178: IFFALSE 60202
// result := Delete ( result , result ) ;
60180: LD_ADDR_VAR 0 3
60184: PUSH
60185: LD_VAR 0 3
60189: PPUSH
60190: LD_VAR 0 3
60194: PPUSH
60195: CALL_OW 3
60199: ST_TO_ADDR
60200: GO 60177
60202: POP
60203: POP
// end ;
60204: LD_VAR 0 3
60208: RET
// export function ComExit ( unit ) ; var tmp ; begin
60209: LD_INT 0
60211: PPUSH
60212: PPUSH
// if not IsInUnit ( unit ) then
60213: LD_VAR 0 1
60217: PPUSH
60218: CALL_OW 310
60222: NOT
60223: IFFALSE 60227
// exit ;
60225: GO 60287
// tmp := IsInUnit ( unit ) ;
60227: LD_ADDR_VAR 0 3
60231: PUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 310
60241: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60242: LD_VAR 0 3
60246: PPUSH
60247: CALL_OW 247
60251: PUSH
60252: LD_INT 2
60254: EQUAL
60255: IFFALSE 60268
// ComExitVehicle ( unit ) else
60257: LD_VAR 0 1
60261: PPUSH
60262: CALL_OW 121
60266: GO 60277
// ComExitBuilding ( unit ) ;
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 122
// result := tmp ;
60277: LD_ADDR_VAR 0 2
60281: PUSH
60282: LD_VAR 0 3
60286: ST_TO_ADDR
// end ;
60287: LD_VAR 0 2
60291: RET
// export function ComExitAll ( units ) ; var i ; begin
60292: LD_INT 0
60294: PPUSH
60295: PPUSH
// if not units then
60296: LD_VAR 0 1
60300: NOT
60301: IFFALSE 60305
// exit ;
60303: GO 60331
// for i in units do
60305: LD_ADDR_VAR 0 3
60309: PUSH
60310: LD_VAR 0 1
60314: PUSH
60315: FOR_IN
60316: IFFALSE 60329
// ComExit ( i ) ;
60318: LD_VAR 0 3
60322: PPUSH
60323: CALL 60209 0 1
60327: GO 60315
60329: POP
60330: POP
// end ;
60331: LD_VAR 0 2
60335: RET
// export function ResetHc ; begin
60336: LD_INT 0
60338: PPUSH
// InitHc ;
60339: CALL_OW 19
// hc_importance := 0 ;
60343: LD_ADDR_OWVAR 32
60347: PUSH
60348: LD_INT 0
60350: ST_TO_ADDR
// end ;
60351: LD_VAR 0 1
60355: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60356: LD_INT 0
60358: PPUSH
60359: PPUSH
60360: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60361: LD_ADDR_VAR 0 6
60365: PUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_VAR 0 3
60375: PLUS
60376: PUSH
60377: LD_INT 2
60379: DIV
60380: ST_TO_ADDR
// if _x < 0 then
60381: LD_VAR 0 6
60385: PUSH
60386: LD_INT 0
60388: LESS
60389: IFFALSE 60406
// _x := _x * - 1 ;
60391: LD_ADDR_VAR 0 6
60395: PUSH
60396: LD_VAR 0 6
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: MUL
60405: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60406: LD_ADDR_VAR 0 7
60410: PUSH
60411: LD_VAR 0 2
60415: PUSH
60416: LD_VAR 0 4
60420: PLUS
60421: PUSH
60422: LD_INT 2
60424: DIV
60425: ST_TO_ADDR
// if _y < 0 then
60426: LD_VAR 0 7
60430: PUSH
60431: LD_INT 0
60433: LESS
60434: IFFALSE 60451
// _y := _y * - 1 ;
60436: LD_ADDR_VAR 0 7
60440: PUSH
60441: LD_VAR 0 7
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: MUL
60450: ST_TO_ADDR
// result := [ _x , _y ] ;
60451: LD_ADDR_VAR 0 5
60455: PUSH
60456: LD_VAR 0 6
60460: PUSH
60461: LD_VAR 0 7
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: ST_TO_ADDR
// end ;
60470: LD_VAR 0 5
60474: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60475: LD_INT 0
60477: PPUSH
60478: PPUSH
60479: PPUSH
60480: PPUSH
// task := GetTaskList ( unit ) ;
60481: LD_ADDR_VAR 0 7
60485: PUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: CALL_OW 437
60495: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60496: LD_VAR 0 7
60500: NOT
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: LD_VAR 0 2
60511: PPUSH
60512: CALL_OW 308
60516: NOT
60517: AND
60518: IFFALSE 60522
// exit ;
60520: GO 60640
// if IsInArea ( unit , area ) then
60522: LD_VAR 0 1
60526: PPUSH
60527: LD_VAR 0 2
60531: PPUSH
60532: CALL_OW 308
60536: IFFALSE 60554
// begin ComMoveToArea ( unit , goAway ) ;
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_VAR 0 3
60547: PPUSH
60548: CALL_OW 113
// exit ;
60552: GO 60640
// end ; if task [ 1 ] [ 1 ] <> M then
60554: LD_VAR 0 7
60558: PUSH
60559: LD_INT 1
60561: ARRAY
60562: PUSH
60563: LD_INT 1
60565: ARRAY
60566: PUSH
60567: LD_STRING M
60569: NONEQUAL
60570: IFFALSE 60574
// exit ;
60572: GO 60640
// x := task [ 1 ] [ 2 ] ;
60574: LD_ADDR_VAR 0 5
60578: PUSH
60579: LD_VAR 0 7
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: PUSH
60588: LD_INT 2
60590: ARRAY
60591: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60592: LD_ADDR_VAR 0 6
60596: PUSH
60597: LD_VAR 0 7
60601: PUSH
60602: LD_INT 1
60604: ARRAY
60605: PUSH
60606: LD_INT 3
60608: ARRAY
60609: ST_TO_ADDR
// if InArea ( x , y , area ) then
60610: LD_VAR 0 5
60614: PPUSH
60615: LD_VAR 0 6
60619: PPUSH
60620: LD_VAR 0 2
60624: PPUSH
60625: CALL_OW 309
60629: IFFALSE 60640
// ComStop ( unit ) ;
60631: LD_VAR 0 1
60635: PPUSH
60636: CALL_OW 141
// end ;
60640: LD_VAR 0 4
60644: RET
// export function Abs ( value ) ; begin
60645: LD_INT 0
60647: PPUSH
// result := value ;
60648: LD_ADDR_VAR 0 2
60652: PUSH
60653: LD_VAR 0 1
60657: ST_TO_ADDR
// if value < 0 then
60658: LD_VAR 0 1
60662: PUSH
60663: LD_INT 0
60665: LESS
60666: IFFALSE 60683
// result := value * - 1 ;
60668: LD_ADDR_VAR 0 2
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: MUL
60682: ST_TO_ADDR
// end ;
60683: LD_VAR 0 2
60687: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60688: LD_INT 0
60690: PPUSH
60691: PPUSH
60692: PPUSH
60693: PPUSH
60694: PPUSH
60695: PPUSH
60696: PPUSH
60697: PPUSH
// if not unit or not building then
60698: LD_VAR 0 1
60702: NOT
60703: PUSH
60704: LD_VAR 0 2
60708: NOT
60709: OR
60710: IFFALSE 60714
// exit ;
60712: GO 60940
// x := GetX ( building ) ;
60714: LD_ADDR_VAR 0 4
60718: PUSH
60719: LD_VAR 0 2
60723: PPUSH
60724: CALL_OW 250
60728: ST_TO_ADDR
// y := GetY ( building ) ;
60729: LD_ADDR_VAR 0 6
60733: PUSH
60734: LD_VAR 0 2
60738: PPUSH
60739: CALL_OW 251
60743: ST_TO_ADDR
// d := GetDir ( building ) ;
60744: LD_ADDR_VAR 0 8
60748: PUSH
60749: LD_VAR 0 2
60753: PPUSH
60754: CALL_OW 254
60758: ST_TO_ADDR
// r := 4 ;
60759: LD_ADDR_VAR 0 9
60763: PUSH
60764: LD_INT 4
60766: ST_TO_ADDR
// for i := 1 to 5 do
60767: LD_ADDR_VAR 0 10
60771: PUSH
60772: DOUBLE
60773: LD_INT 1
60775: DEC
60776: ST_TO_ADDR
60777: LD_INT 5
60779: PUSH
60780: FOR_TO
60781: IFFALSE 60938
// begin _x := ShiftX ( x , d , r + i ) ;
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_VAR 0 4
60792: PPUSH
60793: LD_VAR 0 8
60797: PPUSH
60798: LD_VAR 0 9
60802: PUSH
60803: LD_VAR 0 10
60807: PLUS
60808: PPUSH
60809: CALL_OW 272
60813: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60814: LD_ADDR_VAR 0 7
60818: PUSH
60819: LD_VAR 0 6
60823: PPUSH
60824: LD_VAR 0 8
60828: PPUSH
60829: LD_VAR 0 9
60833: PUSH
60834: LD_VAR 0 10
60838: PLUS
60839: PPUSH
60840: CALL_OW 273
60844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60845: LD_VAR 0 5
60849: PPUSH
60850: LD_VAR 0 7
60854: PPUSH
60855: CALL_OW 488
60859: PUSH
60860: LD_VAR 0 5
60864: PPUSH
60865: LD_VAR 0 7
60869: PPUSH
60870: CALL_OW 428
60874: PPUSH
60875: CALL_OW 247
60879: PUSH
60880: LD_INT 3
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: IN
60890: NOT
60891: AND
60892: IFFALSE 60936
// begin ComMoveXY ( unit , _x , _y ) ;
60894: LD_VAR 0 1
60898: PPUSH
60899: LD_VAR 0 5
60903: PPUSH
60904: LD_VAR 0 7
60908: PPUSH
60909: CALL_OW 111
// result := [ _x , _y ] ;
60913: LD_ADDR_VAR 0 3
60917: PUSH
60918: LD_VAR 0 5
60922: PUSH
60923: LD_VAR 0 7
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// exit ;
60932: POP
60933: POP
60934: GO 60940
// end ; end ;
60936: GO 60780
60938: POP
60939: POP
// end ;
60940: LD_VAR 0 3
60944: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60945: LD_INT 0
60947: PPUSH
60948: PPUSH
60949: PPUSH
// result := 0 ;
60950: LD_ADDR_VAR 0 3
60954: PUSH
60955: LD_INT 0
60957: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60958: LD_VAR 0 1
60962: PUSH
60963: LD_INT 0
60965: LESS
60966: PUSH
60967: LD_VAR 0 1
60971: PUSH
60972: LD_INT 8
60974: GREATER
60975: OR
60976: PUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_INT 0
60984: LESS
60985: OR
60986: PUSH
60987: LD_VAR 0 2
60991: PUSH
60992: LD_INT 8
60994: GREATER
60995: OR
60996: IFFALSE 61000
// exit ;
60998: GO 61075
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61000: LD_ADDR_VAR 0 4
61004: PUSH
61005: LD_INT 22
61007: PUSH
61008: LD_VAR 0 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PPUSH
61017: CALL_OW 69
61021: PUSH
61022: FOR_IN
61023: IFFALSE 61073
// begin un := UnitShoot ( i ) ;
61025: LD_ADDR_VAR 0 5
61029: PUSH
61030: LD_VAR 0 4
61034: PPUSH
61035: CALL_OW 504
61039: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61040: LD_VAR 0 5
61044: PPUSH
61045: CALL_OW 255
61049: PUSH
61050: LD_VAR 0 1
61054: EQUAL
61055: IFFALSE 61071
// begin result := un ;
61057: LD_ADDR_VAR 0 3
61061: PUSH
61062: LD_VAR 0 5
61066: ST_TO_ADDR
// exit ;
61067: POP
61068: POP
61069: GO 61075
// end ; end ;
61071: GO 61022
61073: POP
61074: POP
// end ;
61075: LD_VAR 0 3
61079: RET
// export function GetCargoBay ( units ) ; begin
61080: LD_INT 0
61082: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61083: LD_ADDR_VAR 0 2
61087: PUSH
61088: LD_VAR 0 1
61092: PPUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 34
61098: PUSH
61099: LD_INT 12
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 34
61108: PUSH
61109: LD_INT 51
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 34
61118: PUSH
61119: LD_INT 32
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 34
61128: PUSH
61129: LD_EXP 86
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: PPUSH
61145: CALL_OW 72
61149: ST_TO_ADDR
// end ;
61150: LD_VAR 0 2
61154: RET
// export function Negate ( value ) ; begin
61155: LD_INT 0
61157: PPUSH
// result := not value ;
61158: LD_ADDR_VAR 0 2
61162: PUSH
61163: LD_VAR 0 1
61167: NOT
61168: ST_TO_ADDR
// end ;
61169: LD_VAR 0 2
61173: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61174: LD_INT 0
61176: PPUSH
// if x1 = x2 then
61177: LD_VAR 0 1
61181: PUSH
61182: LD_VAR 0 3
61186: EQUAL
61187: IFFALSE 61221
// begin if y1 > y2 then
61189: LD_VAR 0 2
61193: PUSH
61194: LD_VAR 0 4
61198: GREATER
61199: IFFALSE 61211
// result := 0 else
61201: LD_ADDR_VAR 0 5
61205: PUSH
61206: LD_INT 0
61208: ST_TO_ADDR
61209: GO 61219
// result := 3 ;
61211: LD_ADDR_VAR 0 5
61215: PUSH
61216: LD_INT 3
61218: ST_TO_ADDR
// exit ;
61219: GO 61307
// end ; if y1 = y2 then
61221: LD_VAR 0 2
61225: PUSH
61226: LD_VAR 0 4
61230: EQUAL
61231: IFFALSE 61265
// begin if x1 > x2 then
61233: LD_VAR 0 1
61237: PUSH
61238: LD_VAR 0 3
61242: GREATER
61243: IFFALSE 61255
// result := 1 else
61245: LD_ADDR_VAR 0 5
61249: PUSH
61250: LD_INT 1
61252: ST_TO_ADDR
61253: GO 61263
// result := 4 ;
61255: LD_ADDR_VAR 0 5
61259: PUSH
61260: LD_INT 4
61262: ST_TO_ADDR
// exit ;
61263: GO 61307
// end ; if x1 > x2 and y1 > y2 then
61265: LD_VAR 0 1
61269: PUSH
61270: LD_VAR 0 3
61274: GREATER
61275: PUSH
61276: LD_VAR 0 2
61280: PUSH
61281: LD_VAR 0 4
61285: GREATER
61286: AND
61287: IFFALSE 61299
// result := 2 else
61289: LD_ADDR_VAR 0 5
61293: PUSH
61294: LD_INT 2
61296: ST_TO_ADDR
61297: GO 61307
// result := 5 ;
61299: LD_ADDR_VAR 0 5
61303: PUSH
61304: LD_INT 5
61306: ST_TO_ADDR
// end ;
61307: LD_VAR 0 5
61311: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61312: LD_INT 0
61314: PPUSH
61315: PPUSH
// if not driver or not IsInUnit ( driver ) then
61316: LD_VAR 0 1
61320: NOT
61321: PUSH
61322: LD_VAR 0 1
61326: PPUSH
61327: CALL_OW 310
61331: NOT
61332: OR
61333: IFFALSE 61337
// exit ;
61335: GO 61427
// vehicle := IsInUnit ( driver ) ;
61337: LD_ADDR_VAR 0 3
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 310
61351: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61352: LD_VAR 0 1
61356: PPUSH
61357: LD_STRING \
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: PUSH
61387: LD_STRING E
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_VAR 0 3
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PPUSH
61423: CALL_OW 446
// end ;
61427: LD_VAR 0 2
61431: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61432: LD_INT 0
61434: PPUSH
61435: PPUSH
// if not driver or not IsInUnit ( driver ) then
61436: LD_VAR 0 1
61440: NOT
61441: PUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 310
61451: NOT
61452: OR
61453: IFFALSE 61457
// exit ;
61455: GO 61547
// vehicle := IsInUnit ( driver ) ;
61457: LD_ADDR_VAR 0 3
61461: PUSH
61462: LD_VAR 0 1
61466: PPUSH
61467: CALL_OW 310
61471: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61472: LD_VAR 0 1
61476: PPUSH
61477: LD_STRING \
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: LD_STRING E
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_VAR 0 3
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PPUSH
61543: CALL_OW 447
// end ;
61547: LD_VAR 0 2
61551: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61552: LD_INT 0
61554: PPUSH
61555: PPUSH
61556: PPUSH
// tmp := [ ] ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: EMPTY
61563: ST_TO_ADDR
// for i in units do
61564: LD_ADDR_VAR 0 4
61568: PUSH
61569: LD_VAR 0 1
61573: PUSH
61574: FOR_IN
61575: IFFALSE 61613
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61577: LD_ADDR_VAR 0 5
61581: PUSH
61582: LD_VAR 0 5
61586: PPUSH
61587: LD_VAR 0 5
61591: PUSH
61592: LD_INT 1
61594: PLUS
61595: PPUSH
61596: LD_VAR 0 4
61600: PPUSH
61601: CALL_OW 256
61605: PPUSH
61606: CALL_OW 2
61610: ST_TO_ADDR
61611: GO 61574
61613: POP
61614: POP
// if not tmp then
61615: LD_VAR 0 5
61619: NOT
61620: IFFALSE 61624
// exit ;
61622: GO 61672
// if asc then
61624: LD_VAR 0 2
61628: IFFALSE 61652
// result := SortListByListAsc ( units , tmp ) else
61630: LD_ADDR_VAR 0 3
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: LD_VAR 0 5
61644: PPUSH
61645: CALL_OW 76
61649: ST_TO_ADDR
61650: GO 61672
// result := SortListByListDesc ( units , tmp ) ;
61652: LD_ADDR_VAR 0 3
61656: PUSH
61657: LD_VAR 0 1
61661: PPUSH
61662: LD_VAR 0 5
61666: PPUSH
61667: CALL_OW 77
61671: ST_TO_ADDR
// end ;
61672: LD_VAR 0 3
61676: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61677: LD_INT 0
61679: PPUSH
61680: PPUSH
// task := GetTaskList ( mech ) ;
61681: LD_ADDR_VAR 0 4
61685: PUSH
61686: LD_VAR 0 1
61690: PPUSH
61691: CALL_OW 437
61695: ST_TO_ADDR
// if not task then
61696: LD_VAR 0 4
61700: NOT
61701: IFFALSE 61705
// exit ;
61703: GO 61747
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61705: LD_ADDR_VAR 0 3
61709: PUSH
61710: LD_VAR 0 4
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PUSH
61719: LD_INT 1
61721: ARRAY
61722: PUSH
61723: LD_STRING r
61725: EQUAL
61726: PUSH
61727: LD_VAR 0 4
61731: PUSH
61732: LD_INT 1
61734: ARRAY
61735: PUSH
61736: LD_INT 4
61738: ARRAY
61739: PUSH
61740: LD_VAR 0 2
61744: EQUAL
61745: AND
61746: ST_TO_ADDR
// end ;
61747: LD_VAR 0 3
61751: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61752: LD_INT 0
61754: PPUSH
// SetDir ( unit , d ) ;
61755: LD_VAR 0 1
61759: PPUSH
61760: LD_VAR 0 4
61764: PPUSH
61765: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61769: LD_VAR 0 1
61773: PPUSH
61774: LD_VAR 0 2
61778: PPUSH
61779: LD_VAR 0 3
61783: PPUSH
61784: LD_VAR 0 5
61788: PPUSH
61789: CALL_OW 48
// end ;
61793: LD_VAR 0 6
61797: RET
// export function ToNaturalNumber ( number ) ; begin
61798: LD_INT 0
61800: PPUSH
// result := number div 1 ;
61801: LD_ADDR_VAR 0 2
61805: PUSH
61806: LD_VAR 0 1
61810: PUSH
61811: LD_INT 1
61813: DIV
61814: ST_TO_ADDR
// if number < 0 then
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 0
61822: LESS
61823: IFFALSE 61833
// result := 0 ;
61825: LD_ADDR_VAR 0 2
61829: PUSH
61830: LD_INT 0
61832: ST_TO_ADDR
// end ;
61833: LD_VAR 0 2
61837: RET
// export function SortByClass ( units , class ) ; var un ; begin
61838: LD_INT 0
61840: PPUSH
61841: PPUSH
// if not units or not class then
61842: LD_VAR 0 1
61846: NOT
61847: PUSH
61848: LD_VAR 0 2
61852: NOT
61853: OR
61854: IFFALSE 61858
// exit ;
61856: GO 61953
// result := [ ] ;
61858: LD_ADDR_VAR 0 3
61862: PUSH
61863: EMPTY
61864: ST_TO_ADDR
// for un in units do
61865: LD_ADDR_VAR 0 4
61869: PUSH
61870: LD_VAR 0 1
61874: PUSH
61875: FOR_IN
61876: IFFALSE 61951
// if GetClass ( un ) = class then
61878: LD_VAR 0 4
61882: PPUSH
61883: CALL_OW 257
61887: PUSH
61888: LD_VAR 0 2
61892: EQUAL
61893: IFFALSE 61920
// result := Insert ( result , 1 , un ) else
61895: LD_ADDR_VAR 0 3
61899: PUSH
61900: LD_VAR 0 3
61904: PPUSH
61905: LD_INT 1
61907: PPUSH
61908: LD_VAR 0 4
61912: PPUSH
61913: CALL_OW 2
61917: ST_TO_ADDR
61918: GO 61949
// result := Replace ( result , result + 1 , un ) ;
61920: LD_ADDR_VAR 0 3
61924: PUSH
61925: LD_VAR 0 3
61929: PPUSH
61930: LD_VAR 0 3
61934: PUSH
61935: LD_INT 1
61937: PLUS
61938: PPUSH
61939: LD_VAR 0 4
61943: PPUSH
61944: CALL_OW 1
61948: ST_TO_ADDR
61949: GO 61875
61951: POP
61952: POP
// end ;
61953: LD_VAR 0 3
61957: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61958: LD_INT 0
61960: PPUSH
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
// result := [ ] ;
61967: LD_ADDR_VAR 0 4
61971: PUSH
61972: EMPTY
61973: ST_TO_ADDR
// if x - r < 0 then
61974: LD_VAR 0 1
61978: PUSH
61979: LD_VAR 0 3
61983: MINUS
61984: PUSH
61985: LD_INT 0
61987: LESS
61988: IFFALSE 62000
// min_x := 0 else
61990: LD_ADDR_VAR 0 8
61994: PUSH
61995: LD_INT 0
61997: ST_TO_ADDR
61998: GO 62016
// min_x := x - r ;
62000: LD_ADDR_VAR 0 8
62004: PUSH
62005: LD_VAR 0 1
62009: PUSH
62010: LD_VAR 0 3
62014: MINUS
62015: ST_TO_ADDR
// if y - r < 0 then
62016: LD_VAR 0 2
62020: PUSH
62021: LD_VAR 0 3
62025: MINUS
62026: PUSH
62027: LD_INT 0
62029: LESS
62030: IFFALSE 62042
// min_y := 0 else
62032: LD_ADDR_VAR 0 7
62036: PUSH
62037: LD_INT 0
62039: ST_TO_ADDR
62040: GO 62058
// min_y := y - r ;
62042: LD_ADDR_VAR 0 7
62046: PUSH
62047: LD_VAR 0 2
62051: PUSH
62052: LD_VAR 0 3
62056: MINUS
62057: ST_TO_ADDR
// max_x := x + r ;
62058: LD_ADDR_VAR 0 9
62062: PUSH
62063: LD_VAR 0 1
62067: PUSH
62068: LD_VAR 0 3
62072: PLUS
62073: ST_TO_ADDR
// max_y := y + r ;
62074: LD_ADDR_VAR 0 10
62078: PUSH
62079: LD_VAR 0 2
62083: PUSH
62084: LD_VAR 0 3
62088: PLUS
62089: ST_TO_ADDR
// for _x = min_x to max_x do
62090: LD_ADDR_VAR 0 5
62094: PUSH
62095: DOUBLE
62096: LD_VAR 0 8
62100: DEC
62101: ST_TO_ADDR
62102: LD_VAR 0 9
62106: PUSH
62107: FOR_TO
62108: IFFALSE 62209
// for _y = min_y to max_y do
62110: LD_ADDR_VAR 0 6
62114: PUSH
62115: DOUBLE
62116: LD_VAR 0 7
62120: DEC
62121: ST_TO_ADDR
62122: LD_VAR 0 10
62126: PUSH
62127: FOR_TO
62128: IFFALSE 62205
// begin if not ValidHex ( _x , _y ) then
62130: LD_VAR 0 5
62134: PPUSH
62135: LD_VAR 0 6
62139: PPUSH
62140: CALL_OW 488
62144: NOT
62145: IFFALSE 62149
// continue ;
62147: GO 62127
// if GetResourceTypeXY ( _x , _y ) then
62149: LD_VAR 0 5
62153: PPUSH
62154: LD_VAR 0 6
62158: PPUSH
62159: CALL_OW 283
62163: IFFALSE 62203
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62165: LD_ADDR_VAR 0 4
62169: PUSH
62170: LD_VAR 0 4
62174: PPUSH
62175: LD_VAR 0 4
62179: PUSH
62180: LD_INT 1
62182: PLUS
62183: PPUSH
62184: LD_VAR 0 5
62188: PUSH
62189: LD_VAR 0 6
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PPUSH
62198: CALL_OW 1
62202: ST_TO_ADDR
// end ;
62203: GO 62127
62205: POP
62206: POP
62207: GO 62107
62209: POP
62210: POP
// end ;
62211: LD_VAR 0 4
62215: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
62216: LD_INT 0
62218: PPUSH
62219: PPUSH
62220: PPUSH
62221: PPUSH
62222: PPUSH
62223: PPUSH
// if not units then
62224: LD_VAR 0 1
62228: NOT
62229: IFFALSE 62233
// exit ;
62231: GO 62634
// result := UnitFilter ( units , [ f_ok ] ) ;
62233: LD_ADDR_VAR 0 3
62237: PUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: LD_INT 50
62245: PUSH
62246: EMPTY
62247: LIST
62248: PPUSH
62249: CALL_OW 72
62253: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62254: LD_ADDR_VAR 0 7
62258: PUSH
62259: LD_VAR 0 1
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PPUSH
62268: CALL_OW 255
62272: ST_TO_ADDR
// if not result then
62273: LD_VAR 0 3
62277: NOT
62278: IFFALSE 62282
// exit ;
62280: GO 62634
// for i in result do
62282: LD_ADDR_VAR 0 4
62286: PUSH
62287: LD_VAR 0 3
62291: PUSH
62292: FOR_IN
62293: IFFALSE 62632
// begin tag := GetTag ( i ) + 1 ;
62295: LD_ADDR_VAR 0 8
62299: PUSH
62300: LD_VAR 0 4
62304: PPUSH
62305: CALL_OW 110
62309: PUSH
62310: LD_INT 1
62312: PLUS
62313: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62314: LD_ADDR_VAR 0 6
62318: PUSH
62319: LD_VAR 0 4
62323: PPUSH
62324: CALL_OW 250
62328: PPUSH
62329: LD_VAR 0 4
62333: PPUSH
62334: CALL_OW 251
62338: PPUSH
62339: LD_INT 6
62341: PPUSH
62342: CALL 61958 0 3
62346: ST_TO_ADDR
// if cr then
62347: LD_VAR 0 6
62351: IFFALSE 62390
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62353: LD_VAR 0 4
62357: PPUSH
62358: LD_VAR 0 6
62362: PUSH
62363: LD_INT 1
62365: ARRAY
62366: PUSH
62367: LD_INT 1
62369: ARRAY
62370: PPUSH
62371: LD_VAR 0 6
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PUSH
62380: LD_INT 2
62382: ARRAY
62383: PPUSH
62384: CALL_OW 116
62388: GO 62630
// if path > tag then
62390: LD_VAR 0 2
62394: PUSH
62395: LD_VAR 0 8
62399: GREATER
62400: IFFALSE 62578
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
62402: LD_ADDR_VAR 0 5
62406: PUSH
62407: LD_INT 81
62409: PUSH
62410: LD_VAR 0 7
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 91
62421: PUSH
62422: LD_VAR 0 4
62426: PUSH
62427: LD_INT 12
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PPUSH
62439: CALL_OW 69
62443: ST_TO_ADDR
// if enemy then
62444: LD_VAR 0 5
62448: IFFALSE 62476
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62450: LD_VAR 0 4
62454: PPUSH
62455: LD_VAR 0 5
62459: PPUSH
62460: LD_VAR 0 4
62464: PPUSH
62465: CALL_OW 74
62469: PPUSH
62470: CALL_OW 115
62474: GO 62576
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62476: LD_VAR 0 4
62480: PPUSH
62481: LD_VAR 0 2
62485: PUSH
62486: LD_VAR 0 8
62490: ARRAY
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PPUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_VAR 0 8
62505: ARRAY
62506: PUSH
62507: LD_INT 2
62509: ARRAY
62510: PPUSH
62511: CALL_OW 297
62515: PUSH
62516: LD_INT 6
62518: GREATER
62519: IFFALSE 62562
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62521: LD_VAR 0 4
62525: PPUSH
62526: LD_VAR 0 2
62530: PUSH
62531: LD_VAR 0 8
62535: ARRAY
62536: PUSH
62537: LD_INT 1
62539: ARRAY
62540: PPUSH
62541: LD_VAR 0 2
62545: PUSH
62546: LD_VAR 0 8
62550: ARRAY
62551: PUSH
62552: LD_INT 2
62554: ARRAY
62555: PPUSH
62556: CALL_OW 114
62560: GO 62576
// SetTag ( i , tag ) ;
62562: LD_VAR 0 4
62566: PPUSH
62567: LD_VAR 0 8
62571: PPUSH
62572: CALL_OW 109
// end else
62576: GO 62630
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62578: LD_ADDR_VAR 0 5
62582: PUSH
62583: LD_INT 81
62585: PUSH
62586: LD_VAR 0 7
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PPUSH
62595: CALL_OW 69
62599: ST_TO_ADDR
// if enemy then
62600: LD_VAR 0 5
62604: IFFALSE 62630
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62606: LD_VAR 0 4
62610: PPUSH
62611: LD_VAR 0 5
62615: PPUSH
62616: LD_VAR 0 4
62620: PPUSH
62621: CALL_OW 74
62625: PPUSH
62626: CALL_OW 115
// end ; end ;
62630: GO 62292
62632: POP
62633: POP
// end ; end_of_file
62634: LD_VAR 0 3
62638: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62639: LD_VAR 0 1
62643: PPUSH
62644: LD_VAR 0 2
62648: PPUSH
62649: LD_VAR 0 3
62653: PPUSH
62654: LD_VAR 0 4
62658: PPUSH
62659: LD_VAR 0 5
62663: PPUSH
62664: LD_VAR 0 6
62668: PPUSH
62669: CALL 4963 0 6
// end ;
62673: PPOPN 6
62675: END
