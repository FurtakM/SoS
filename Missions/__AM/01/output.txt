// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3776 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3633 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 43 , 39 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 43
 322: PPUSH
 323: LD_INT 39
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// ComMoveXY ( off , 49 , 41 ) ;
 511: LD_LOC 10
 515: PPUSH
 516: LD_INT 49
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// wait ( 0 0$3 ) ;
 526: LD_INT 105
 528: PPUSH
 529: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 533: LD_LOC 10
 537: PPUSH
 538: LD_STRING DX1-Off-1
 540: PPUSH
 541: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 545: LD_LOC 10
 549: PPUSH
 550: LD_INT 51
 552: PPUSH
 553: LD_INT 38
 555: PPUSH
 556: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 560: LD_LOC 3
 564: PPUSH
 565: LD_INT 50
 567: PPUSH
 568: LD_INT 39
 570: PPUSH
 571: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 575: LD_LOC 6
 579: PPUSH
 580: LD_INT 51
 582: PPUSH
 583: LD_INT 40
 585: PPUSH
 586: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 590: LD_LOC 7
 594: PPUSH
 595: LD_INT 52
 597: PPUSH
 598: LD_INT 41
 600: PPUSH
 601: CALL_OW 111
// wait ( 0 0$1 ) ;
 605: LD_INT 35
 607: PPUSH
 608: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 612: LD_LOC 5
 616: PPUSH
 617: LD_INT 50
 619: PPUSH
 620: LD_INT 40
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 627: LD_LOC 8
 631: PPUSH
 632: LD_INT 51
 634: PPUSH
 635: LD_INT 41
 637: PPUSH
 638: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 642: LD_LOC 9
 646: PPUSH
 647: LD_INT 52
 649: PPUSH
 650: LD_INT 42
 652: PPUSH
 653: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 657: LD_LOC 10
 661: PPUSH
 662: LD_INT 50
 664: PPUSH
 665: LD_INT 47
 667: PPUSH
 668: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 672: LD_LOC 3
 676: PPUSH
 677: LD_INT 65
 679: PPUSH
 680: LD_INT 25
 682: PPUSH
 683: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 687: LD_LOC 6
 691: PPUSH
 692: LD_INT 65
 694: PPUSH
 695: LD_INT 25
 697: PPUSH
 698: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 702: LD_LOC 7
 706: PPUSH
 707: LD_INT 65
 709: PPUSH
 710: LD_INT 25
 712: PPUSH
 713: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 717: LD_LOC 5
 721: PPUSH
 722: LD_INT 65
 724: PPUSH
 725: LD_INT 25
 727: PPUSH
 728: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 732: LD_LOC 8
 736: PPUSH
 737: LD_INT 65
 739: PPUSH
 740: LD_INT 25
 742: PPUSH
 743: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 747: LD_LOC 9
 751: PPUSH
 752: LD_INT 65
 754: PPUSH
 755: LD_INT 25
 757: PPUSH
 758: CALL_OW 178
// wait ( 0 0$2 ) ;
 762: LD_INT 70
 764: PPUSH
 765: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 769: LD_LOC 10
 773: PPUSH
 774: LD_STRING DX1-Off-1a
 776: PPUSH
 777: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 781: LD_LOC 11
 785: PPUSH
 786: LD_INT 75
 788: PPUSH
 789: LD_INT 36
 791: PPUSH
 792: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 796: LD_LOC 10
 800: PPUSH
 801: LD_INT 71
 803: PPUSH
 804: LD_INT 34
 806: PPUSH
 807: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 811: LD_LOC 3
 815: PPUSH
 816: LD_INT 53
 818: PPUSH
 819: LD_INT 44
 821: PPUSH
 822: CALL_OW 111
// commovexy ( joan , 52 , 43 ) ;
 826: LD_LOC 4
 830: PPUSH
 831: LD_INT 52
 833: PPUSH
 834: LD_INT 43
 836: PPUSH
 837: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 841: LD_LOC 3
 845: PPUSH
 846: LD_LOC 4
 850: PPUSH
 851: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 855: LD_LOC 4
 859: PPUSH
 860: LD_LOC 3
 864: PPUSH
 865: CALL_OW 179
// wait ( 0 0$7 ) ;
 869: LD_INT 245
 871: PPUSH
 872: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 876: LD_LOC 3
 880: PPUSH
 881: LD_STRING DX1-JMM-1
 883: PPUSH
 884: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 888: LD_LOC 4
 892: PPUSH
 893: LD_STRING DX1-Joan-1
 895: PPUSH
 896: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 900: LD_LOC 3
 904: PPUSH
 905: LD_STRING DX1-JMM-2
 907: PPUSH
 908: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 912: LD_LOC 4
 916: PPUSH
 917: LD_STRING DX1-Joan-2
 919: PPUSH
 920: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 924: LD_LOC 3
 928: PPUSH
 929: LD_STRING DX1-JMM-3
 931: PPUSH
 932: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 936: LD_LOC 4
 940: PPUSH
 941: LD_STRING DX1-Joan-3
 943: PPUSH
 944: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 948: LD_LOC 3
 952: PPUSH
 953: LD_STRING DX1-JMM-4
 955: PPUSH
 956: CALL_OW 88
// follow = true ;
 960: LD_ADDR_LOC 20
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
 968: LD_INT 10
 970: PPUSH
 971: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 975: LD_STRING M0
 977: PPUSH
 978: CALL_OW 337
// ingame_video = false ;
 982: LD_ADDR_OWVAR 52
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// interface_hidden = false ;
 990: LD_ADDR_OWVAR 54
 994: PUSH
 995: LD_INT 0
 997: ST_TO_ADDR
// hintSpec ( Hints , 3 ) ;
 998: LD_STRING Hints
1000: PPUSH
1001: LD_INT 3
1003: PPUSH
1004: CALL_OW 338
// wait ( 0 0$1 ) ;
1008: LD_INT 35
1010: PPUSH
1011: CALL_OW 67
// hint ( Character ) ;
1015: LD_STRING Character
1017: PPUSH
1018: CALL_OW 339
// wait ( 0 0$1 ) ;
1022: LD_INT 35
1024: PPUSH
1025: CALL_OW 67
// enable ( 01 ) ;
1029: LD_INT 1
1031: ENABLE_MARKED
// enable ( 02 ) ;
1032: LD_INT 2
1034: ENABLE_MARKED
// enable ( 03 ) ;
1035: LD_INT 3
1037: ENABLE_MARKED
// enable ( 04 ) ;
1038: LD_INT 4
1040: ENABLE_MARKED
// enable ( 05 ) ;
1041: LD_INT 5
1043: ENABLE_MARKED
// end ;
1044: END
// every 3 trigger isselected ( john ) marked 01 do
1045: LD_LOC 3
1049: PPUSH
1050: CALL_OW 306
1054: IFFALSE 1080
1056: GO 1058
1058: DISABLE
// begin hint ( Selection ) ;
1059: LD_STRING Selection
1061: PPUSH
1062: CALL_OW 339
// wait ( 0 0$1 ) ;
1066: LD_INT 35
1068: PPUSH
1069: CALL_OW 67
// hint ( Commands ) ;
1073: LD_STRING Commands
1075: PPUSH
1076: CALL_OW 339
// end ;
1080: END
// every 3 + 1 trigger isselected ( others ^ allmen ^ [ joan , off ] ) marked 02 do
1081: LD_LOC 11
1085: PUSH
1086: LD_EXP 14
1090: ADD
1091: PUSH
1092: LD_LOC 4
1096: PUSH
1097: LD_LOC 10
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ADD
1106: PPUSH
1107: CALL_OW 306
1111: IFFALSE 1123
1113: GO 1115
1115: DISABLE
// hint ( NPC ) ;
1116: LD_STRING NPC
1118: PPUSH
1119: CALL_OW 339
1123: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
1124: LD_LOC 3
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL_OW 308
1136: IFFALSE 1148
1138: GO 1140
1140: DISABLE
// hint ( Visibility ) ;
1141: LD_STRING Visibility
1143: PPUSH
1144: CALL_OW 339
1148: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1149: LD_LOC 16
1153: NOT
1154: PUSH
1155: LD_LOC 20
1159: AND
1160: IFFALSE 1453
1162: GO 1164
1164: DISABLE
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
1172: PPUSH
1173: PPUSH
1174: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1175: LD_ADDR_VAR 0 1
1179: PUSH
1180: LD_LOC 3
1184: PPUSH
1185: LD_LOC 4
1189: PPUSH
1190: CALL_OW 296
1194: ST_TO_ADDR
// x = getx ( john ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_LOC 3
1204: PPUSH
1205: CALL_OW 250
1209: ST_TO_ADDR
// y = gety ( john ) ;
1210: LD_ADDR_VAR 0 5
1214: PUSH
1215: LD_LOC 3
1219: PPUSH
1220: CALL_OW 251
1224: ST_TO_ADDR
// tmp2 = [ ] ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: EMPTY
1231: ST_TO_ADDR
// tmp3 = [ ] ;
1232: LD_ADDR_VAR 0 3
1236: PUSH
1237: EMPTY
1238: ST_TO_ADDR
// if tmp >= 7 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 7
1246: GREATEREQUAL
1247: IFFALSE 1452
// begin for dir = 0 to 5 do
1249: LD_ADDR_VAR 0 8
1253: PUSH
1254: DOUBLE
1255: LD_INT 0
1257: DEC
1258: ST_TO_ADDR
1259: LD_INT 5
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1403
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1265: LD_ADDR_VAR 0 6
1269: PUSH
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_VAR 0 8
1279: PPUSH
1280: LD_VAR 0 1
1284: PUSH
1285: LD_INT 2
1287: MINUS
1288: PPUSH
1289: CALL_OW 272
1293: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1294: LD_ADDR_VAR 0 7
1298: PUSH
1299: LD_VAR 0 5
1303: PPUSH
1304: LD_VAR 0 8
1308: PPUSH
1309: LD_VAR 0 1
1313: PUSH
1314: LD_INT 2
1316: MINUS
1317: PPUSH
1318: CALL_OW 273
1322: ST_TO_ADDR
// if ValidHex ( px , py ) then
1323: LD_VAR 0 6
1327: PPUSH
1328: LD_VAR 0 7
1332: PPUSH
1333: CALL_OW 488
1337: IFFALSE 1401
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_VAR 0 6
1353: PUSH
1354: LD_VAR 0 7
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: EMPTY
1364: LIST
1365: ADD
1366: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1367: LD_ADDR_VAR 0 3
1371: PUSH
1372: LD_VAR 0 3
1376: PUSH
1377: LD_LOC 4
1381: PPUSH
1382: LD_VAR 0 6
1386: PPUSH
1387: LD_VAR 0 7
1391: PPUSH
1392: CALL_OW 297
1396: PUSH
1397: EMPTY
1398: LIST
1399: ADD
1400: ST_TO_ADDR
// end end ;
1401: GO 1262
1403: POP
1404: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1405: LD_ADDR_VAR 0 1
1409: PUSH
1410: LD_VAR 0 2
1414: PPUSH
1415: LD_VAR 0 3
1419: PPUSH
1420: CALL_OW 79
1424: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1425: LD_LOC 4
1429: PPUSH
1430: LD_VAR 0 1
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 1
1443: PUSH
1444: LD_INT 2
1446: ARRAY
1447: PPUSH
1448: CALL_OW 111
// end ; enable ;
1452: ENABLE
// end ;
1453: PPOPN 8
1455: END
// on destinationunreachable ( un ) do if un = joan then
1456: LD_VAR 0 1
1460: PUSH
1461: LD_LOC 4
1465: EQUAL
1466: IFFALSE 1497
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1468: LD_LOC 4
1472: PPUSH
1473: LD_LOC 3
1477: PPUSH
1478: CALL_OW 250
1482: PPUSH
1483: LD_LOC 3
1487: PPUSH
1488: CALL_OW 251
1492: PPUSH
1493: CALL_OW 111
1497: PPOPN 1
1499: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1500: LD_LOC 3
1504: PPUSH
1505: CALL_OW 318
1509: IFFALSE 1533
1511: GO 1513
1513: DISABLE
// begin if not killhim then
1514: LD_LOC 16
1518: NOT
1519: IFFALSE 1533
// say ( joan , DXComments-Joan-1 ) ;
1521: LD_LOC 4
1525: PPUSH
1526: LD_STRING DXComments-Joan-1
1528: PPUSH
1529: CALL_OW 88
// end ;
1533: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1534: LD_LOC 3
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: CALL_OW 308
1546: IFFALSE 1570
1548: GO 1550
1550: DISABLE
// begin if not killhim then
1551: LD_LOC 16
1555: NOT
1556: IFFALSE 1570
// say ( joan , DXComments-Joan-1a ) ;
1558: LD_LOC 4
1562: PPUSH
1563: LD_STRING DXComments-Joan-1a
1565: PPUSH
1566: CALL_OW 88
// end ;
1570: END
// every 0 0$1 + 1 1$10 marked 29 do
1571: GO 1573
1573: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1574: LD_LOC 3
1578: PPUSH
1579: LD_INT 3
1581: PPUSH
1582: CALL_OW 308
1586: NOT
1587: IFFALSE 1610
// begin if not killhim then
1589: LD_LOC 16
1593: NOT
1594: IFFALSE 1608
// say ( joan , DXComments-Joan-1b ) ;
1596: LD_LOC 4
1600: PPUSH
1601: LD_STRING DXComments-Joan-1b
1603: PPUSH
1604: CALL_OW 88
// end else
1608: GO 1611
// enable ;
1610: ENABLE
// end ;
1611: END
// every 0 0$0.3 trigger not killhim marked 097 do
1612: LD_LOC 16
1616: NOT
1617: IFFALSE 2157
1619: GO 1621
1621: DISABLE
// begin if joanok then
1622: LD_LOC 13
1626: IFFALSE 1821
// if getlives ( joan ) < 1000 then
1628: LD_LOC 4
1632: PPUSH
1633: CALL_OW 256
1637: PUSH
1638: LD_INT 1000
1640: LESS
1641: IFFALSE 1821
// begin if debug then
1643: LD_LOC 19
1647: IFFALSE 1667
// msg ( joan:  & getlives ( joan ) ) ;
1649: LD_STRING joan: 
1651: PUSH
1652: LD_LOC 4
1656: PPUSH
1657: CALL_OW 256
1661: STR
1662: PPUSH
1663: CALL_OW 100
// comhold ( joan ) ;
1667: LD_LOC 4
1671: PPUSH
1672: CALL_OW 140
// dialogueon ;
1676: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1680: LD_LOC 4
1684: PPUSH
1685: LD_STRING DXAttack-Joan-1
1687: PPUSH
1688: CALL_OW 88
// killhim = true ;
1692: LD_ADDR_LOC 16
1696: PUSH
1697: LD_INT 1
1699: ST_TO_ADDR
// SA_OnAttackFriends ;
1700: CALL 3588 0 0
// music_class = 1 ;
1704: LD_ADDR_OWVAR 72
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1712: LD_LOC 4
1716: PPUSH
1717: LD_LOC 5
1721: PPUSH
1722: CALL_OW 250
1726: PPUSH
1727: LD_LOC 5
1731: PPUSH
1732: CALL_OW 251
1736: PPUSH
1737: CALL_OW 111
// wait ( 0 0$1 ) ;
1741: LD_INT 35
1743: PPUSH
1744: CALL_OW 67
// say ( sik , DXAttack-Sik-1 ) ;
1748: LD_LOC 5
1752: PPUSH
1753: LD_STRING DXAttack-Sik-1
1755: PPUSH
1756: CALL_OW 88
// dialogueoff ;
1760: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1764: LD_LOC 1
1768: PPUSH
1769: LD_LOC 2
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 1
1779: PPUSH
1780: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1784: LD_LOC 11
1788: PUSH
1789: LD_LOC 10
1793: PUSH
1794: LD_EXP 1
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: ADD
1803: PPUSH
1804: LD_LOC 3
1808: PPUSH
1809: CALL_OW 115
// joanok = false ;
1813: LD_ADDR_LOC 13
1817: PUSH
1818: LD_INT 0
1820: ST_TO_ADDR
// end ; if oothersok then
1821: LD_LOC 14
1825: IFFALSE 2024
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1827: LD_LOC 11
1831: PUSH
1832: LD_LOC 10
1836: PUSH
1837: LD_EXP 1
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: ADD
1846: PPUSH
1847: CALL_OW 256
1851: PUSH
1852: LD_INT 1000
1854: LESS
1855: IFFALSE 2024
// begin if debug then
1857: LD_LOC 19
1861: IFFALSE 1890
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1863: LD_STRING others+off: 
1865: PUSH
1866: LD_LOC 11
1870: PUSH
1871: LD_LOC 10
1875: PUSH
1876: EMPTY
1877: LIST
1878: ADD
1879: PPUSH
1880: CALL_OW 256
1884: STR
1885: PPUSH
1886: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1890: LD_LOC 11
1894: PUSH
1895: LD_LOC 10
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: PPUSH
1904: CALL_OW 140
// dialogueon ;
1908: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1912: LD_LOC 4
1916: PPUSH
1917: LD_STRING DXAttack-Joan-1a
1919: PPUSH
1920: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1924: LD_INT 24
1926: PPUSH
1927: CALL_OW 67
// killhim = true ;
1931: LD_ADDR_LOC 16
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// SA_OnAttackFriends ;
1939: CALL 3588 0 0
// music_class = 1 ;
1943: LD_ADDR_OWVAR 72
1947: PUSH
1948: LD_INT 1
1950: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1951: LD_LOC 5
1955: PPUSH
1956: LD_STRING DXAttack-Sik-1
1958: PPUSH
1959: CALL_OW 88
// dialogueoff ;
1963: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1967: LD_LOC 1
1971: PPUSH
1972: LD_LOC 2
1976: PPUSH
1977: LD_INT 2
1979: PPUSH
1980: LD_INT 1
1982: PPUSH
1983: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1987: LD_LOC 11
1991: PUSH
1992: LD_LOC 10
1996: PUSH
1997: LD_EXP 1
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: ADD
2006: PPUSH
2007: LD_LOC 3
2011: PPUSH
2012: CALL_OW 115
// oothersok = false ;
2016: LD_ADDR_LOC 14
2020: PUSH
2021: LD_INT 0
2023: ST_TO_ADDR
// end ; if buildingsok then
2024: LD_LOC 15
2028: IFFALSE 2149
// if getlives ( budovy ) < 1000 then
2030: LD_LOC 12
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 1000
2042: LESS
2043: IFFALSE 2149
// begin if debug then
2045: LD_LOC 19
2049: IFFALSE 2069
// msg ( budovy:  & getlives ( budovy ) ) ;
2051: LD_STRING budovy: 
2053: PUSH
2054: LD_LOC 12
2058: PPUSH
2059: CALL_OW 256
2063: STR
2064: PPUSH
2065: CALL_OW 100
// dialogueon ;
2069: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2073: LD_LOC 4
2077: PPUSH
2078: LD_STRING DXAttack-Joan-1b
2080: PPUSH
2081: CALL_OW 88
// dialogueoff ;
2085: CALL_OW 7
// follow = false ;
2089: LD_ADDR_LOC 20
2093: PUSH
2094: LD_INT 0
2096: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2097: LD_LOC 4
2101: PPUSH
2102: LD_LOC 5
2106: PPUSH
2107: CALL_OW 250
2111: PPUSH
2112: LD_LOC 5
2116: PPUSH
2117: CALL_OW 251
2121: PPUSH
2122: CALL_OW 111
// buildingsok = false ;
2126: LD_ADDR_LOC 15
2130: PUSH
2131: LD_INT 0
2133: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2134: LD_ADDR_LOC 17
2138: PUSH
2139: LD_LOC 12
2143: PPUSH
2144: CALL_OW 256
2148: ST_TO_ADDR
// end ; if not killhim then
2149: LD_LOC 16
2153: NOT
2154: IFFALSE 2157
// enable ;
2156: ENABLE
// end ;
2157: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2158: LD_LOC 15
2162: NOT
2163: PUSH
2164: LD_LOC 16
2168: NOT
2169: AND
2170: IFFALSE 2297
2172: GO 2174
2174: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2175: LD_LOC 17
2179: PUSH
2180: LD_LOC 12
2184: PPUSH
2185: CALL_OW 256
2189: MINUS
2190: PUSH
2191: LD_INT 7
2193: GREATER
2194: IFFALSE 2296
// begin disable ( 097 ) ;
2196: LD_INT 97
2198: DISABLE_MARKED
// disable_07 = true ;
2199: LD_ADDR_LOC 18
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// dialogueon ;
2207: CALL_OW 6
// music_class = 1 ;
2211: LD_ADDR_OWVAR 72
2215: PUSH
2216: LD_INT 1
2218: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2219: LD_LOC 5
2223: PPUSH
2224: LD_STRING DXAttack-Sik-1
2226: PPUSH
2227: CALL_OW 88
// dialogueoff ;
2231: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2235: LD_LOC 1
2239: PPUSH
2240: LD_LOC 2
2244: PPUSH
2245: LD_INT 2
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2255: LD_LOC 11
2259: PUSH
2260: LD_LOC 10
2264: PUSH
2265: LD_EXP 1
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: ADD
2274: PPUSH
2275: LD_LOC 3
2279: PPUSH
2280: CALL_OW 115
// killhim = true ;
2284: LD_ADDR_LOC 16
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// SA_OnAttackFriends ;
2292: CALL 3588 0 0
// end ; enable ;
2296: ENABLE
// end ;
2297: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2298: LD_LOC 3
2302: PPUSH
2303: CALL_OW 310
2307: PUSH
2308: LD_INT 27
2310: EQUAL
2311: PUSH
2312: LD_LOC 16
2316: NOT
2317: AND
2318: IFFALSE 2423
2320: GO 2322
2322: DISABLE
// begin disable ( 097 ) ;
2323: LD_INT 97
2325: DISABLE_MARKED
// disable_07 = true ;
2326: LD_ADDR_LOC 18
2330: PUSH
2331: LD_INT 1
2333: ST_TO_ADDR
// dialogueon ;
2334: CALL_OW 6
// music_class = 1 ;
2338: LD_ADDR_OWVAR 72
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2346: LD_LOC 5
2350: PPUSH
2351: LD_STRING DXAttack-Sik-1
2353: PPUSH
2354: CALL_OW 88
// dialogueoff ;
2358: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2362: LD_LOC 1
2366: PPUSH
2367: LD_LOC 2
2371: PPUSH
2372: LD_INT 2
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2382: LD_LOC 11
2386: PUSH
2387: LD_LOC 10
2391: PUSH
2392: LD_EXP 1
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: ADD
2401: PPUSH
2402: LD_LOC 3
2406: PPUSH
2407: CALL_OW 115
// killhim = true ;
2411: LD_ADDR_LOC 16
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// SA_OnAttackFriends ;
2419: CALL 3588 0 0
// end ;
2423: END
// on unitgoestored ( un ) do if un = john then
2424: LD_VAR 0 1
2428: PUSH
2429: LD_LOC 3
2433: EQUAL
2434: IFFALSE 2525
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2436: LD_LOC 10
2440: PPUSH
2441: LD_LOC 3
2445: PPUSH
2446: CALL_OW 250
2450: PPUSH
2451: LD_LOC 3
2455: PPUSH
2456: CALL_OW 251
2460: PPUSH
2461: CALL_OW 111
// wait ( 0 0$1 ) ;
2465: LD_INT 35
2467: PPUSH
2468: CALL_OW 67
// InGameOn ;
2472: CALL_OW 8
// SetLives ( john , 240 ) ;
2476: LD_LOC 3
2480: PPUSH
2481: LD_INT 240
2483: PPUSH
2484: CALL_OW 234
// SetSide ( john , 8 ) ;
2488: LD_LOC 3
2492: PPUSH
2493: LD_INT 8
2495: PPUSH
2496: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2500: LD_LOC 10
2504: PPUSH
2505: LD_STRING DXAttack-Off-1
2507: PPUSH
2508: CALL_OW 88
// InGameOff ;
2512: CALL_OW 9
// youlost ( Dissmiss ) ;
2516: LD_STRING Dissmiss
2518: PPUSH
2519: CALL_OW 104
// end else
2523: GO 2653
// if not disable_07 then
2525: LD_LOC 18
2529: NOT
2530: IFFALSE 2653
// if ( not killhim ) then
2532: LD_LOC 16
2536: NOT
2537: IFFALSE 2653
// if ( gettype ( un ) = unit_human ) then
2539: LD_VAR 0 1
2543: PPUSH
2544: CALL_OW 247
2548: PUSH
2549: LD_INT 1
2551: EQUAL
2552: IFFALSE 2653
// begin disable ( 06 ) ;
2554: LD_INT 6
2556: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2557: LD_INT 18
2559: PPUSH
2560: CALL_OW 67
// dialogueon ;
2564: CALL_OW 6
// music_class = 1 ;
2568: LD_ADDR_OWVAR 72
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2576: LD_LOC 5
2580: PPUSH
2581: LD_STRING DXAttack-Sik-1
2583: PPUSH
2584: CALL_OW 88
// dialogueoff ;
2588: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2592: LD_LOC 1
2596: PPUSH
2597: LD_LOC 2
2601: PPUSH
2602: LD_INT 2
2604: PPUSH
2605: LD_INT 1
2607: PPUSH
2608: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2612: LD_LOC 11
2616: PUSH
2617: LD_LOC 10
2621: PUSH
2622: LD_EXP 1
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: ADD
2631: PPUSH
2632: LD_LOC 3
2636: PPUSH
2637: CALL_OW 115
// killhim = true ;
2641: LD_ADDR_LOC 16
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// SA_OnAttackFriends ;
2649: CALL 3588 0 0
// end ;
2653: PPOPN 1
2655: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2656: LD_LOC 3
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: CALL_OW 308
2668: PUSH
2669: LD_LOC 16
2673: NOT
2674: AND
2675: IFFALSE 3363
2677: GO 2679
2679: DISABLE
// begin follow = false ;
2680: LD_ADDR_LOC 20
2684: PUSH
2685: LD_INT 0
2687: ST_TO_ADDR
// centernowonunits ( [ eon ] ) ;
2688: LD_INT 14
2690: PUSH
2691: EMPTY
2692: LIST
2693: PPUSH
2694: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2698: LD_LOC 3
2702: PPUSH
2703: LD_INT 75
2705: PPUSH
2706: LD_INT 36
2708: PPUSH
2709: CALL_OW 111
// InGameOn ;
2713: CALL_OW 8
// say ( off , DXReady-Off-1 ) ;
2717: LD_LOC 10
2721: PPUSH
2722: LD_STRING DXReady-Off-1
2724: PPUSH
2725: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2729: LD_LOC 5
2733: PPUSH
2734: LD_STRING DXReady-Sik-1
2736: PPUSH
2737: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2741: LD_STRING DXReady-All-1
2743: PPUSH
2744: CALL_OW 96
// wait ( 0 0$2 ) ;
2748: LD_INT 70
2750: PPUSH
2751: CALL_OW 67
// say ( lucy , DXReady-Don-1 ) ;
2755: LD_LOC 6
2759: PPUSH
2760: LD_STRING DXReady-Don-1
2762: PPUSH
2763: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2767: LD_STRING DXReady-All-2
2769: PPUSH
2770: CALL_OW 96
// wait ( 0 0$2 ) ;
2774: LD_INT 70
2776: PPUSH
2777: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2781: LD_EXP 1
2785: PPUSH
2786: LD_STRING DXReady-Off2-1
2788: PPUSH
2789: CALL_OW 88
// wait ( 0 0$1 ) ;
2793: LD_INT 35
2795: PPUSH
2796: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2800: LD_EXP 1
2804: PPUSH
2805: LD_STRING DXReady-Off2-2
2807: PPUSH
2808: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2812: LD_LOC 10
2816: PPUSH
2817: LD_INT 72
2819: PPUSH
2820: LD_INT 29
2822: PPUSH
2823: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2827: LD_EXP 1
2831: PPUSH
2832: LD_INT 73
2834: PPUSH
2835: LD_INT 31
2837: PPUSH
2838: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2842: LD_LOC 3
2846: PPUSH
2847: LD_INT 67
2849: PPUSH
2850: LD_INT 28
2852: PPUSH
2853: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2857: LD_LOC 6
2861: PPUSH
2862: LD_INT 68
2864: PPUSH
2865: LD_INT 30
2867: PPUSH
2868: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2872: LD_LOC 7
2876: PPUSH
2877: LD_INT 69
2879: PPUSH
2880: LD_INT 32
2882: PPUSH
2883: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2887: LD_LOC 5
2891: PPUSH
2892: LD_INT 66
2894: PPUSH
2895: LD_INT 28
2897: PPUSH
2898: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2902: LD_LOC 8
2906: PPUSH
2907: LD_INT 67
2909: PPUSH
2910: LD_INT 30
2912: PPUSH
2913: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2917: LD_LOC 9
2921: PPUSH
2922: LD_INT 68
2924: PPUSH
2925: LD_INT 32
2927: PPUSH
2928: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2932: LD_LOC 10
2936: PPUSH
2937: LD_INT 49
2939: PPUSH
2940: LD_INT 27
2942: PPUSH
2943: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2947: LD_EXP 1
2951: PPUSH
2952: LD_INT 49
2954: PPUSH
2955: LD_INT 27
2957: PPUSH
2958: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
2962: LD_LOC 3
2966: PPUSH
2967: LD_INT 85
2969: PPUSH
2970: LD_INT 33
2972: PPUSH
2973: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
2977: LD_LOC 6
2981: PPUSH
2982: LD_INT 85
2984: PPUSH
2985: LD_INT 33
2987: PPUSH
2988: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
2992: LD_LOC 7
2996: PPUSH
2997: LD_INT 85
2999: PPUSH
3000: LD_INT 33
3002: PPUSH
3003: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3007: LD_LOC 5
3011: PPUSH
3012: LD_INT 85
3014: PPUSH
3015: LD_INT 33
3017: PPUSH
3018: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3022: LD_LOC 8
3026: PPUSH
3027: LD_INT 85
3029: PPUSH
3030: LD_INT 33
3032: PPUSH
3033: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3037: LD_LOC 9
3041: PPUSH
3042: LD_INT 85
3044: PPUSH
3045: LD_INT 33
3047: PPUSH
3048: CALL_OW 178
// wait ( 0 0$9 ) ;
3052: LD_INT 315
3054: PPUSH
3055: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3059: LD_EXP 1
3063: PPUSH
3064: LD_STRING DXReady-Off2-3
3066: PPUSH
3067: CALL_OW 88
// wait ( 0 0$1 ) ;
3071: LD_INT 35
3073: PPUSH
3074: CALL_OW 67
// case query ( QQuit ) of 1 :
3078: LD_STRING QQuit
3080: PPUSH
3081: CALL_OW 97
3085: PUSH
3086: LD_INT 1
3088: DOUBLE
3089: EQUAL
3090: IFTRUE 3094
3092: GO 3167
3094: POP
// begin SA_OnNotEonEnter ;
3095: CALL 3618 0 0
// say ( off2 , DQrQuit#1-Off2-1 ) ;
3099: LD_EXP 1
3103: PPUSH
3104: LD_STRING DQrQuit#1-Off2-1
3106: PPUSH
3107: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3111: LD_LOC 3
3115: PPUSH
3116: LD_STRING DQrQuit#1-JMM-1a
3118: PPUSH
3119: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3123: LD_EXP 1
3127: PPUSH
3128: LD_STRING DQrQuit#1-Off2-2
3130: PPUSH
3131: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3135: LD_LOC 3
3139: PPUSH
3140: LD_INT 73
3142: PPUSH
3143: LD_INT 49
3145: PPUSH
3146: CALL_OW 111
// wait ( 0 0$3 ) ;
3150: LD_INT 105
3152: PPUSH
3153: CALL_OW 67
// ingameoff ;
3157: CALL_OW 9
// YouDidSomethingExtraordinary ;
3161: CALL_OW 105
// end ; 2 :
3165: GO 3363
3167: LD_INT 2
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3362
3175: POP
// begin SA_OnEonEnter ;
3176: CALL 3603 0 0
// disable ( 29 ) ;
3180: LD_INT 29
3182: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3183: LD_INT 35
3185: PPUSH
3186: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3190: LD_EXP 1
3194: PPUSH
3195: LD_STRING DXReady-Off2-4
3197: PPUSH
3198: CALL_OW 88
// wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3209: LD_LOC 10
3213: PPUSH
3214: LD_STRING DXReady-Off-2
3216: PPUSH
3217: CALL_OW 88
// comenterunit ( will , eon ) ;
3221: LD_LOC 8
3225: PPUSH
3226: LD_INT 14
3228: PPUSH
3229: CALL_OW 120
// wait ( 0 0$3 ) ;
3233: LD_INT 105
3235: PPUSH
3236: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3240: LD_LOC 10
3244: PPUSH
3245: LD_STRING DXReady-Off-3
3247: PPUSH
3248: CALL_OW 88
// comenterunit ( sik , eon ) ;
3252: LD_LOC 5
3256: PPUSH
3257: LD_INT 14
3259: PPUSH
3260: CALL_OW 120
// wait ( 0 0$3 ) ;
3264: LD_INT 105
3266: PPUSH
3267: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3271: LD_LOC 10
3275: PPUSH
3276: LD_STRING DXReady-Off-4
3278: PPUSH
3279: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3283: LD_LOC 6
3287: PPUSH
3288: LD_INT 14
3290: PPUSH
3291: CALL_OW 120
// wait ( 0 0$3 ) ;
3295: LD_INT 105
3297: PPUSH
3298: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3302: LD_LOC 10
3306: PPUSH
3307: LD_STRING DXReady-Off-5
3309: PPUSH
3310: CALL_OW 88
// ComMoveXY ( john , 75 , 34 ) ;
3314: LD_LOC 3
3318: PPUSH
3319: LD_INT 75
3321: PPUSH
3322: LD_INT 34
3324: PPUSH
3325: CALL_OW 111
// wait ( 0 0$4 ) ;
3329: LD_INT 140
3331: PPUSH
3332: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3336: LD_LOC 3
3340: PPUSH
3341: LD_STRING DQrQuit#2-JMM-1
3343: PPUSH
3344: CALL_OW 88
// comenterunit ( john , eon ) ;
3348: LD_LOC 3
3352: PPUSH
3353: LD_INT 14
3355: PPUSH
3356: CALL_OW 120
// end ; end ;
3360: GO 3363
3362: POP
// end ;
3363: END
// on enterbuilding ( b , un ) do begin if b = eon then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 14
3371: EQUAL
3372: IFFALSE 3481
// case un of john :
3374: LD_VAR 0 2
3378: PUSH
3379: LD_LOC 3
3383: DOUBLE
3384: EQUAL
3385: IFTRUE 3389
3387: GO 3471
3389: POP
// if not killhim then
3390: LD_LOC 16
3394: NOT
3395: IFFALSE 3428
// begin wait ( 0 0$1.3 ) ;
3397: LD_INT 46
3399: PPUSH
3400: CALL_OW 67
// savecharacters ( john , JMM ) ;
3404: LD_LOC 3
3408: PPUSH
3409: LD_STRING JMM
3411: PPUSH
3412: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3416: LD_STRING 1
3418: PPUSH
3419: LD_STRING %_cont
3421: PPUSH
3422: CALL_OW 340
// end else
3426: GO 3469
// begin placeunitxy ( john , 76 , 34 , false ) ;
3428: LD_LOC 3
3432: PPUSH
3433: LD_INT 76
3435: PPUSH
3436: LD_INT 34
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3446: LD_LOC 11
3450: PUSH
3451: LD_LOC 10
3455: PUSH
3456: EMPTY
3457: LIST
3458: ADD
3459: PPUSH
3460: LD_LOC 3
3464: PPUSH
3465: CALL_OW 115
// end ; else
3469: GO 3481
3471: POP
// RemoveUnit ( un ) ; end ;
3472: LD_VAR 0 2
3476: PPUSH
3477: CALL_OW 64
// end ;
3481: PPOPN 2
3483: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 1
3491: EQUAL
3492: PUSH
3493: LD_VAR 0 2
3497: PUSH
3498: LD_INT 4
3500: EQUAL
3501: AND
3502: IFFALSE 3585
// begin music_class = 1 ;
3504: LD_ADDR_OWVAR 72
3508: PUSH
3509: LD_INT 1
3511: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
3512: LD_LOC 5
3516: PPUSH
3517: LD_STRING DXAttack-Sik-1
3519: PPUSH
3520: CALL_OW 88
// dialogueoff ;
3524: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
3528: LD_LOC 1
3532: PPUSH
3533: LD_LOC 2
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3548: LD_LOC 11
3552: PUSH
3553: LD_LOC 10
3557: PUSH
3558: LD_EXP 1
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: ADD
3567: PPUSH
3568: LD_LOC 3
3572: PPUSH
3573: CALL_OW 115
// killhim = true ;
3577: LD_ADDR_LOC 16
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// end ; end ; end_of_file
3585: PPOPN 2
3587: END
// export function SA_OnAttackFriends ; begin
3588: LD_INT 0
3590: PPUSH
// SetAchievement ( ACH_MAD ) ;
3591: LD_STRING ACH_MAD
3593: PPUSH
3594: CALL_OW 543
// end ;
3598: LD_VAR 0 1
3602: RET
// export function SA_OnEonEnter ; begin
3603: LD_INT 0
3605: PPUSH
// SetAchievement ( ACH_EON ) ;
3606: LD_STRING ACH_EON
3608: PPUSH
3609: CALL_OW 543
// end ;
3613: LD_VAR 0 1
3617: RET
// export function SA_OnNotEonEnter ; begin
3618: LD_INT 0
3620: PPUSH
// SetAchievement ( ACH_CF ) ;
3621: LD_STRING ACH_CF
3623: PPUSH
3624: CALL_OW 543
// end ; end_of_file
3628: LD_VAR 0 1
3632: RET
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3633: LD_INT 0
3635: PPUSH
// uc_side := 4 ;
3636: LD_ADDR_OWVAR 20
3640: PUSH
3641: LD_INT 4
3643: ST_TO_ADDR
// uc_nation := nation_american ;
3644: LD_ADDR_OWVAR 21
3648: PUSH
3649: LD_INT 1
3651: ST_TO_ADDR
// hc_importance = 50 ;
3652: LD_ADDR_OWVAR 32
3656: PUSH
3657: LD_INT 50
3659: ST_TO_ADDR
// hc_sex = sex_male ;
3660: LD_ADDR_OWVAR 27
3664: PUSH
3665: LD_INT 1
3667: ST_TO_ADDR
// hc_class = 1 ;
3668: LD_ADDR_OWVAR 28
3672: PUSH
3673: LD_INT 1
3675: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3676: LD_ADDR_OWVAR 30
3680: PUSH
3681: LD_INT 7
3683: PUSH
3684: LD_INT 3
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: LD_INT 2
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3699: LD_ADDR_OWVAR 31
3703: PUSH
3704: LD_INT 7
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 2
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3722: LD_ADDR_OWVAR 29
3726: PUSH
3727: LD_INT 11
3729: PUSH
3730: LD_INT 11
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: ST_TO_ADDR
// hc_name := Officer2 ;
3737: LD_ADDR_OWVAR 26
3741: PUSH
3742: LD_STRING Officer2
3744: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3745: LD_ADDR_OWVAR 33
3749: PUSH
3750: LD_STRING AmGalRemake
3752: ST_TO_ADDR
// hc_face_number := 3 ;
3753: LD_ADDR_OWVAR 34
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// off2 := CreateHuman ;
3761: LD_ADDR_EXP 1
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// end ;
3771: LD_VAR 0 1
3775: RET
// export function CreatePersonnel ; begin
3776: LD_INT 0
3778: PPUSH
// uc_side := 4 ;
3779: LD_ADDR_OWVAR 20
3783: PUSH
3784: LD_INT 4
3786: ST_TO_ADDR
// uc_nation := nation_american ;
3787: LD_ADDR_OWVAR 21
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// hc_importance = 10 ;
3795: LD_ADDR_OWVAR 32
3799: PUSH
3800: LD_INT 10
3802: ST_TO_ADDR
// hc_name :=  ;
3803: LD_ADDR_OWVAR 26
3807: PUSH
3808: LD_STRING 
3810: ST_TO_ADDR
// hc_gallery :=  ;
3811: LD_ADDR_OWVAR 33
3815: PUSH
3816: LD_STRING 
3818: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 2
3824: NEG
3825: PPUSH
3826: CALL_OW 382
// engi1 := CreateHuman ;
3830: LD_ADDR_EXP 2
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 2
3845: NEG
3846: PPUSH
3847: CALL_OW 382
// engi2 := CreateHuman ;
3851: LD_ADDR_EXP 3
3855: PUSH
3856: CALL_OW 44
3860: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3861: LD_EXP 2
3865: PPUSH
3866: LD_INT 10
3868: PPUSH
3869: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3873: LD_EXP 3
3877: PPUSH
3878: LD_INT 10
3880: PPUSH
3881: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3885: LD_INT 1
3887: PPUSH
3888: LD_INT 1
3890: NEG
3891: PPUSH
3892: CALL_OW 383
// truckdriver := CreateHuman ;
3896: LD_ADDR_EXP 4
3900: PUSH
3901: CALL_OW 44
3905: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3906: LD_EXP 4
3910: PPUSH
3911: LD_INT 27
3913: PPUSH
3914: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3918: LD_INT 27
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_INT 100
3926: PPUSH
3927: CALL_OW 290
// PrepareMechanic ( 1 , - 3 ) ;
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 3
3936: NEG
3937: PPUSH
3938: CALL_OW 383
// tankdriver := CreateHuman ;
3942: LD_ADDR_EXP 5
3946: PUSH
3947: CALL_OW 44
3951: ST_TO_ADDR
// PlaceHumanInUnit ( tankdriver , tank1 ) ;
3952: LD_EXP 5
3956: PPUSH
3957: LD_INT 19
3959: PPUSH
3960: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
3964: LD_INT 1
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: CALL_OW 381
// hc_class = class_sniper ;
3974: LD_ADDR_OWVAR 28
3978: PUSH
3979: LD_INT 5
3981: ST_TO_ADDR
// snip1 := CreateHuman ;
3982: LD_ADDR_EXP 6
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
3992: LD_INT 2
3994: PPUSH
3995: LD_INT 3
3997: PPUSH
3998: CALL_OW 381
// hc_class = class_sniper ;
4002: LD_ADDR_OWVAR 28
4006: PUSH
4007: LD_INT 5
4009: ST_TO_ADDR
// snip2 := CreateHuman ;
4010: LD_ADDR_EXP 7
4014: PUSH
4015: CALL_OW 44
4019: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4020: LD_EXP 6
4024: PPUSH
4025: LD_INT 47
4027: PPUSH
4028: LD_INT 17
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4038: LD_EXP 7
4042: PPUSH
4043: LD_INT 29
4045: PPUSH
4046: LD_INT 31
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4056: LD_EXP 6
4060: PUSH
4061: LD_EXP 7
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: CALL_OW 381
// sol1 := CreateHuman ;
4084: LD_ADDR_EXP 8
4088: PUSH
4089: CALL_OW 44
4093: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4094: LD_EXP 8
4098: PPUSH
4099: LD_INT 2
4101: PPUSH
4102: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4106: LD_EXP 8
4110: PPUSH
4111: LD_INT 15
4113: PPUSH
4114: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: CALL_OW 381
// sol2 := CreateHuman ;
4128: LD_ADDR_EXP 9
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// sol3 := CreateHuman ;
4148: LD_ADDR_EXP 10
4152: PUSH
4153: CALL_OW 44
4157: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4158: LD_EXP 9
4162: PPUSH
4163: LD_INT 40
4165: PPUSH
4166: LD_INT 42
4168: PPUSH
4169: LD_INT 0
4171: PPUSH
4172: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4176: LD_EXP 10
4180: PPUSH
4181: LD_INT 53
4183: PPUSH
4184: LD_INT 34
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: CALL_OW 381
// pat1 := CreateHuman ;
4204: LD_ADDR_EXP 11
4208: PUSH
4209: CALL_OW 44
4213: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: CALL_OW 381
// pat2 := CreateHuman ;
4224: LD_ADDR_EXP 12
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4234: LD_EXP 11
4238: PPUSH
4239: LD_INT 29
4241: PPUSH
4242: LD_INT 6
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4252: LD_EXP 12
4256: PPUSH
4257: LD_INT 30
4259: PPUSH
4260: LD_INT 7
4262: PPUSH
4263: LD_INT 0
4265: PPUSH
4266: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4270: LD_ADDR_EXP 13
4274: PUSH
4275: LD_EXP 11
4279: PUSH
4280: LD_EXP 12
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , tank1 , truckdriver ] ;
4289: LD_ADDR_EXP 14
4293: PUSH
4294: LD_EXP 2
4298: PUSH
4299: LD_EXP 3
4303: PUSH
4304: LD_EXP 8
4308: PUSH
4309: LD_EXP 9
4313: PUSH
4314: LD_EXP 10
4318: PUSH
4319: LD_EXP 6
4323: PUSH
4324: LD_EXP 7
4328: PUSH
4329: LD_EXP 13
4333: PUSH
4334: LD_INT 19
4336: PUSH
4337: LD_EXP 4
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ;
4354: LD_VAR 0 1
4358: RET
// every 0 0$1 do
4359: GO 4361
4361: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4362: LD_EXP 13
4366: PPUSH
4367: LD_INT 64
4369: PPUSH
4370: LD_INT 22
4372: PPUSH
4373: CALL_OW 171
// wait ( 0 0$25 ) ;
4377: LD_INT 875
4379: PPUSH
4380: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4384: LD_EXP 13
4388: PPUSH
4389: LD_INT 30
4391: PPUSH
4392: LD_INT 8
4394: PPUSH
4395: CALL_OW 171
// wait ( 0 0$25 ) ;
4399: LD_INT 875
4401: PPUSH
4402: CALL_OW 67
// enable ;
4406: ENABLE
// end ;
4407: END
// every 0 0$1 do
4408: GO 4410
4410: DISABLE
// begin SetLives ( truck , 550 ) ;
4411: LD_INT 27
4413: PPUSH
4414: LD_INT 550
4416: PPUSH
4417: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4421: LD_INT 27
4423: PPUSH
4424: LD_INT 42
4426: PPUSH
4427: LD_INT 35
4429: PPUSH
4430: CALL_OW 111
// AddComUnload ( truck ) ;
4434: LD_INT 27
4436: PPUSH
4437: CALL_OW 219
// Wait ( 0 0$8 ) ;
4441: LD_INT 280
4443: PPUSH
4444: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4448: LD_EXP 2
4452: PUSH
4453: LD_EXP 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: LD_INT 45
4464: PPUSH
4465: LD_INT 36
4467: PPUSH
4468: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4472: LD_EXP 4
4476: PPUSH
4477: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4481: LD_EXP 4
4485: PPUSH
4486: LD_INT 40
4488: PPUSH
4489: LD_INT 33
4491: PPUSH
4492: CALL_OW 171
// AddComRepairVehicle ( truckdriver , truck ) ;
4496: LD_EXP 4
4500: PPUSH
4501: LD_INT 27
4503: PPUSH
4504: CALL_OW 189
// Wait ( 0 0$15 ) ;
4508: LD_INT 525
4510: PPUSH
4511: CALL_OW 67
// SetLives ( truck , 1000 ) ;
4515: LD_INT 27
4517: PPUSH
4518: LD_INT 1000
4520: PPUSH
4521: CALL_OW 234
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4525: LD_EXP 2
4529: PUSH
4530: LD_EXP 3
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: LD_INT 10
4541: PPUSH
4542: CALL_OW 120
// ComEnterUnit ( truckdriver , truck ) ;
4546: LD_EXP 4
4550: PPUSH
4551: LD_INT 27
4553: PPUSH
4554: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4558: LD_EXP 4
4562: PPUSH
4563: LD_INT 74
4565: PPUSH
4566: LD_INT 52
4568: PPUSH
4569: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4573: LD_EXP 4
4577: PPUSH
4578: LD_INT 90
4580: PPUSH
4581: LD_INT 58
4583: PPUSH
4584: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4588: LD_EXP 4
4592: PPUSH
4593: LD_INT 98
4595: PPUSH
4596: LD_INT 61
4598: PPUSH
4599: CALL_OW 171
// end ;
4603: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4604: LD_INT 7
4606: PPUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: IFFALSE 4669
4623: GO 4625
4625: DISABLE
4626: LD_INT 0
4628: PPUSH
// begin enable ;
4629: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4630: LD_ADDR_VAR 0 1
4634: PUSH
4635: LD_INT 7
4637: PPUSH
4638: LD_INT 22
4640: PUSH
4641: LD_INT 4
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PPUSH
4648: CALL_OW 70
4652: PUSH
4653: FOR_IN
4654: IFFALSE 4667
// RemoveUnit ( i ) ;
4656: LD_VAR 0 1
4660: PPUSH
4661: CALL_OW 64
4665: GO 4653
4667: POP
4668: POP
// end ;
4669: PPOPN 1
4671: END
// every 0 0$1 trigger GetDistUnits ( truck , tank1 ) < 5 do
4672: LD_INT 27
4674: PPUSH
4675: LD_INT 19
4677: PPUSH
4678: CALL_OW 296
4682: PUSH
4683: LD_INT 5
4685: LESS
4686: IFFALSE 4743
4688: GO 4690
4690: DISABLE
// begin AddComMoveXY ( tank1 , 79 , 53 ) ;
4691: LD_INT 19
4693: PPUSH
4694: LD_INT 79
4696: PPUSH
4697: LD_INT 53
4699: PPUSH
4700: CALL_OW 171
// AddComMoveXY ( tank1 , 87 , 57 ) ;
4704: LD_INT 19
4706: PPUSH
4707: LD_INT 87
4709: PPUSH
4710: LD_INT 57
4712: PPUSH
4713: CALL_OW 171
// AddComMoveXY ( tank1 , 95 , 60 ) ;
4717: LD_INT 19
4719: PPUSH
4720: LD_INT 95
4722: PPUSH
4723: LD_INT 60
4725: PPUSH
4726: CALL_OW 171
// AddComMoveXY ( tank1 , 96 , 60 ) ;
4730: LD_INT 19
4732: PPUSH
4733: LD_INT 96
4735: PPUSH
4736: LD_INT 60
4738: PPUSH
4739: CALL_OW 171
// end ;
4743: END
