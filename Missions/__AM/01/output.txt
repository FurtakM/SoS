// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6078 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6056
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 17091 0 0
5948: GO 6056
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 17224 0 0
5963: GO 6056
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 17309 0 0
5978: GO 6056
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 5 :
5989: CALL 17757 0 0
5993: GO 6056
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 6 :
6004: CALL 17868 0 0
6008: GO 6056
6010: LD_INT 6
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 7 :
6019: CALL 17925 0 0
6023: GO 6056
6025: LD_INT 7
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 8 :
6034: CALL 17967 0 0
6038: GO 6056
6040: LD_INT 8
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; end ;
6049: CALL 18068 0 0
6053: GO 6056
6055: POP
// end ; end ;
6056: PPOPN 6
6058: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6059: GO 6061
6061: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6062: LD_STRING initStreamRollete();
6064: PPUSH
6065: CALL_OW 559
// InitStreamMode ;
6069: CALL 6078 0 0
// DefineStreamItems ( ) ;
6073: CALL 6518 0 0
// end ;
6077: END
// function InitStreamMode ; begin
6078: LD_INT 0
6080: PPUSH
// streamModeActive := false ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// normalCounter := 36 ;
6089: LD_ADDR_EXP 16
6093: PUSH
6094: LD_INT 36
6096: ST_TO_ADDR
// hardcoreCounter := 16 ;
6097: LD_ADDR_EXP 17
6101: PUSH
6102: LD_INT 16
6104: ST_TO_ADDR
// sRocket := false ;
6105: LD_ADDR_EXP 20
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sSpeed := false ;
6113: LD_ADDR_EXP 19
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sEngine := false ;
6121: LD_ADDR_EXP 21
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sSpec := false ;
6129: LD_ADDR_EXP 18
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sLevel := false ;
6137: LD_ADDR_EXP 22
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sArmoury := false ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sRadar := false ;
6153: LD_ADDR_EXP 24
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sBunker := false ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sHack := false ;
6169: LD_ADDR_EXP 26
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sFire := false ;
6177: LD_ADDR_EXP 27
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sRefresh := false ;
6185: LD_ADDR_EXP 28
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sExp := false ;
6193: LD_ADDR_EXP 29
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sDepot := false ;
6201: LD_ADDR_EXP 30
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sFlag := false ;
6209: LD_ADDR_EXP 31
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sKamikadze := false ;
6217: LD_ADDR_EXP 39
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTroll := false ;
6225: LD_ADDR_EXP 40
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSlow := false ;
6233: LD_ADDR_EXP 41
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLack := false ;
6241: LD_ADDR_EXP 42
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sTank := false ;
6249: LD_ADDR_EXP 44
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRemote := false ;
6257: LD_ADDR_EXP 45
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sPowell := false ;
6265: LD_ADDR_EXP 46
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sTeleport := false ;
6273: LD_ADDR_EXP 49
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sOilTower := false ;
6281: LD_ADDR_EXP 51
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sShovel := false ;
6289: LD_ADDR_EXP 52
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sSheik := false ;
6297: LD_ADDR_EXP 53
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sEarthquake := false ;
6305: LD_ADDR_EXP 55
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sAI := false ;
6313: LD_ADDR_EXP 56
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sCargo := false ;
6321: LD_ADDR_EXP 59
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sDLaser := false ;
6329: LD_ADDR_EXP 60
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sExchange := false ;
6337: LD_ADDR_EXP 61
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sFac := false ;
6345: LD_ADDR_EXP 62
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sPower := false ;
6353: LD_ADDR_EXP 63
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRandom := false ;
6361: LD_ADDR_EXP 64
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sShield := false ;
6369: LD_ADDR_EXP 65
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTime := false ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTools := false ;
6385: LD_ADDR_EXP 67
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sSold := false ;
6393: LD_ADDR_EXP 32
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sDiff := false ;
6401: LD_ADDR_EXP 33
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sFog := false ;
6409: LD_ADDR_EXP 36
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sReset := false ;
6417: LD_ADDR_EXP 37
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSun := false ;
6425: LD_ADDR_EXP 38
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sTiger := false ;
6433: LD_ADDR_EXP 34
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBomb := false ;
6441: LD_ADDR_EXP 35
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sWound := false ;
6449: LD_ADDR_EXP 43
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBetray := false ;
6457: LD_ADDR_EXP 47
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sContamin := false ;
6465: LD_ADDR_EXP 48
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sOil := false ;
6473: LD_ADDR_EXP 50
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sStu := false ;
6481: LD_ADDR_EXP 54
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sBazooka := false ;
6489: LD_ADDR_EXP 57
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sMortar := false ;
6497: LD_ADDR_EXP 58
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sRanger := false ;
6505: LD_ADDR_EXP 68
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// result := [ ] ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: EMPTY
6531: ST_TO_ADDR
// if campaign_id = 1 then
6532: LD_OWVAR 69
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: IFFALSE 9478
// begin case mission_number of 1 :
6542: LD_OWVAR 70
6546: PUSH
6547: LD_INT 1
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6619
6555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 26
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 106
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 9476
6619: LD_INT 2
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6699
6627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 4
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 101
6673: PUSH
6674: LD_INT 102
6676: PUSH
6677: LD_INT 105
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: LD_INT 108
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9476
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6783
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9476
6783: LD_INT 4
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6875
6791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 8
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: LD_INT 16
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 101
6849: PUSH
6850: LD_INT 102
6852: PUSH
6853: LD_INT 105
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 108
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9476
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6983
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 8
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: LD_INT 16
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 25
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 105
6955: PUSH
6956: LD_INT 106
6958: PUSH
6959: LD_INT 108
6961: PUSH
6962: LD_INT 109
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 9476
6983: LD_INT 6
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7111
6991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 32
7050: PUSH
7051: LD_INT 36
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 105
7083: PUSH
7084: LD_INT 106
7086: PUSH
7087: LD_INT 108
7089: PUSH
7090: LD_INT 109
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 9476
7111: LD_INT 7
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7219
7119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 4
7130: PUSH
7131: LD_INT 5
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 11
7139: PUSH
7140: LD_INT 12
7142: PUSH
7143: LD_INT 15
7145: PUSH
7146: LD_INT 16
7148: PUSH
7149: LD_INT 20
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 112
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 9476
7219: LD_INT 8
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7355
7227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 6
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 105
7326: PUSH
7327: LD_INT 106
7329: PUSH
7330: LD_INT 108
7332: PUSH
7333: LD_INT 109
7335: PUSH
7336: LD_INT 112
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 9476
7355: LD_INT 9
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7499
7363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7364: LD_ADDR_VAR 0 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 4
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 7
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 28
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 36
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 103
7463: PUSH
7464: LD_INT 105
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: LD_INT 108
7472: PUSH
7473: LD_INT 109
7475: PUSH
7476: LD_INT 112
7478: PUSH
7479: LD_INT 114
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 9476
7499: LD_INT 10
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7691
7507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 7
7527: PUSH
7528: LD_INT 8
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: LD_INT 10
7536: PUSH
7537: LD_INT 11
7539: PUSH
7540: LD_INT 12
7542: PUSH
7543: LD_INT 13
7545: PUSH
7546: LD_INT 14
7548: PUSH
7549: LD_INT 15
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: LD_INT 17
7557: PUSH
7558: LD_INT 18
7560: PUSH
7561: LD_INT 19
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 23
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 28
7587: PUSH
7588: LD_INT 30
7590: PUSH
7591: LD_INT 31
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 36
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 9476
7691: LD_INT 11
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7891
7699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 6
7719: PUSH
7720: LD_INT 7
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: LD_INT 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 11
7734: PUSH
7735: LD_INT 12
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 28
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 31
7788: PUSH
7789: LD_INT 32
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 101
7833: PUSH
7834: LD_INT 102
7836: PUSH
7837: LD_INT 103
7839: PUSH
7840: LD_INT 104
7842: PUSH
7843: LD_INT 105
7845: PUSH
7846: LD_INT 106
7848: PUSH
7849: LD_INT 107
7851: PUSH
7852: LD_INT 108
7854: PUSH
7855: LD_INT 109
7857: PUSH
7858: LD_INT 110
7860: PUSH
7861: LD_INT 111
7863: PUSH
7864: LD_INT 112
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9476
7891: LD_INT 12
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8107
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 31
7994: PUSH
7995: LD_INT 32
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 36
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 9476
8107: LD_INT 13
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8311
8115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 14
8153: PUSH
8154: LD_INT 15
8156: PUSH
8157: LD_INT 16
8159: PUSH
8160: LD_INT 17
8162: PUSH
8163: LD_INT 18
8165: PUSH
8166: LD_INT 19
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 24
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 27
8192: PUSH
8193: LD_INT 28
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 33
8207: PUSH
8208: LD_INT 34
8210: PUSH
8211: LD_INT 36
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 104
8258: PUSH
8259: LD_INT 105
8261: PUSH
8262: LD_INT 106
8264: PUSH
8265: LD_INT 107
8267: PUSH
8268: LD_INT 108
8270: PUSH
8271: LD_INT 109
8273: PUSH
8274: LD_INT 110
8276: PUSH
8277: LD_INT 111
8279: PUSH
8280: LD_INT 112
8282: PUSH
8283: LD_INT 113
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 9476
8311: LD_INT 14
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8531
8319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 4
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: LD_INT 7
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: LD_INT 9
8351: PUSH
8352: LD_INT 10
8354: PUSH
8355: LD_INT 11
8357: PUSH
8358: LD_INT 12
8360: PUSH
8361: LD_INT 13
8363: PUSH
8364: LD_INT 14
8366: PUSH
8367: LD_INT 15
8369: PUSH
8370: LD_INT 16
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 28
8408: PUSH
8409: LD_INT 29
8411: PUSH
8412: LD_INT 30
8414: PUSH
8415: LD_INT 31
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 33
8423: PUSH
8424: LD_INT 34
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 102
8472: PUSH
8473: LD_INT 103
8475: PUSH
8476: LD_INT 104
8478: PUSH
8479: LD_INT 105
8481: PUSH
8482: LD_INT 106
8484: PUSH
8485: LD_INT 107
8487: PUSH
8488: LD_INT 108
8490: PUSH
8491: LD_INT 109
8493: PUSH
8494: LD_INT 110
8496: PUSH
8497: LD_INT 111
8499: PUSH
8500: LD_INT 112
8502: PUSH
8503: LD_INT 113
8505: PUSH
8506: LD_INT 114
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9476
8531: LD_INT 15
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8751
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9476
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8883
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 9476
8883: LD_INT 17
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9103
8891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_INT 7
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 9
8923: PUSH
8924: LD_INT 10
8926: PUSH
8927: LD_INT 11
8929: PUSH
8930: LD_INT 12
8932: PUSH
8933: LD_INT 13
8935: PUSH
8936: LD_INT 14
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 17
8947: PUSH
8948: LD_INT 18
8950: PUSH
8951: LD_INT 19
8953: PUSH
8954: LD_INT 20
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 26
8974: PUSH
8975: LD_INT 27
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 29
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 36
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 101
9041: PUSH
9042: LD_INT 102
9044: PUSH
9045: LD_INT 103
9047: PUSH
9048: LD_INT 104
9050: PUSH
9051: LD_INT 105
9053: PUSH
9054: LD_INT 106
9056: PUSH
9057: LD_INT 107
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 109
9065: PUSH
9066: LD_INT 110
9068: PUSH
9069: LD_INT 111
9071: PUSH
9072: LD_INT 112
9074: PUSH
9075: LD_INT 113
9077: PUSH
9078: LD_INT 114
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9476
9103: LD_INT 18
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9247
9111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 12
9134: PUSH
9135: LD_INT 15
9137: PUSH
9138: LD_INT 16
9140: PUSH
9141: LD_INT 20
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 34
9173: PUSH
9174: LD_INT 35
9176: PUSH
9177: LD_INT 36
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 103
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 115
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: ST_TO_ADDR
9245: GO 9476
9247: LD_INT 19
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9475
9255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 7
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: LD_INT 10
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: LD_INT 15
9305: PUSH
9306: LD_INT 16
9308: PUSH
9309: LD_INT 17
9311: PUSH
9312: LD_INT 18
9314: PUSH
9315: LD_INT 19
9317: PUSH
9318: LD_INT 20
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 24
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 29
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 31
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 33
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 36
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 101
9409: PUSH
9410: LD_INT 102
9412: PUSH
9413: LD_INT 103
9415: PUSH
9416: LD_INT 104
9418: PUSH
9419: LD_INT 105
9421: PUSH
9422: LD_INT 106
9424: PUSH
9425: LD_INT 107
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 109
9433: PUSH
9434: LD_INT 110
9436: PUSH
9437: LD_INT 111
9439: PUSH
9440: LD_INT 112
9442: PUSH
9443: LD_INT 113
9445: PUSH
9446: LD_INT 114
9448: PUSH
9449: LD_INT 115
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// end else
9476: GO 9695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 6
9500: PUSH
9501: LD_INT 7
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 17
9533: PUSH
9534: LD_INT 18
9536: PUSH
9537: LD_INT 19
9539: PUSH
9540: LD_INT 20
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 27
9563: PUSH
9564: LD_INT 28
9566: PUSH
9567: LD_INT 29
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 33
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 36
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 103
9637: PUSH
9638: LD_INT 104
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 107
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 110
9658: PUSH
9659: LD_INT 111
9661: PUSH
9662: LD_INT 112
9664: PUSH
9665: LD_INT 113
9667: PUSH
9668: LD_INT 114
9670: PUSH
9671: LD_INT 115
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: ST_TO_ADDR
// if result then
9695: LD_VAR 0 1
9699: IFFALSE 9988
// begin normal :=  ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_STRING 
9708: ST_TO_ADDR
// hardcore :=  ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// for i = 1 to normalCounter do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_EXP 16
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9834
// begin tmp := 0 ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_STRING 0
9742: ST_TO_ADDR
// if result [ 1 ] then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: IFFALSE 9816
// if result [ 1 ] [ 1 ] = i then
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PUSH
9766: LD_VAR 0 5
9770: EQUAL
9771: IFFALSE 9816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 3
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// tmp := 1 ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_STRING 1
9815: ST_TO_ADDR
// end ; normal := normal & tmp ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_VAR 0 2
9830: STR
9831: ST_TO_ADDR
// end ;
9832: GO 9732
9834: POP
9835: POP
// for i = 1 to hardcoreCounter do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_EXP 17
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9957
// begin tmp := 0 ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_STRING 0
9861: ST_TO_ADDR
// if result [ 2 ] then
9862: LD_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: IFFALSE 9939
// if result [ 2 ] [ 1 ] = 100 + i then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 2
9879: ARRAY
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PUSH
9885: LD_INT 100
9887: PUSH
9888: LD_VAR 0 5
9892: PLUS
9893: EQUAL
9894: IFFALSE 9939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 3
9925: PPUSH
9926: CALL_OW 1
9930: ST_TO_ADDR
// tmp := 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_STRING 1
9938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_VAR 0 2
9953: STR
9954: ST_TO_ADDR
// end ;
9955: GO 9851
9957: POP
9958: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9959: LD_STRING getStreamItemsFromMission("
9961: PUSH
9962: LD_VAR 0 3
9966: STR
9967: PUSH
9968: LD_STRING ","
9970: STR
9971: PUSH
9972: LD_VAR 0 4
9976: STR
9977: PUSH
9978: LD_STRING ")
9980: STR
9981: PPUSH
9982: CALL_OW 559
// end else
9986: GO 9995
// ToLua ( getStreamItemsFromMission("","") ) ;
9988: LD_STRING getStreamItemsFromMission("","")
9990: PPUSH
9991: CALL_OW 559
// end ;
9995: LD_VAR 0 1
9999: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10000: LD_EXP 15
10004: PUSH
10005: LD_EXP 20
10009: AND
10010: IFFALSE 10134
10012: GO 10014
10014: DISABLE
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// begin enable ;
10019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 45
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 47
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if not tmp then
10096: LD_VAR 0 2
10100: NOT
10101: IFFALSE 10105
// exit ;
10103: GO 10134
// for i in tmp do
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_VAR 0 2
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10132
// begin SetLives ( i , 0 ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 234
// end ;
10130: GO 10115
10132: POP
10133: POP
// end ;
10134: PPOPN 2
10136: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10137: LD_EXP 15
10141: PUSH
10142: LD_EXP 21
10146: AND
10147: IFFALSE 10231
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin enable ;
10156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_OWVAR 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 2
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10231
// for i in tmp do
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: FOR_IN
10213: IFFALSE 10229
// begin SetLives ( i , 0 ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 0
10222: PPUSH
10223: CALL_OW 234
// end ;
10227: GO 10212
10229: POP
10230: POP
// end ;
10231: PPOPN 2
10233: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10234: LD_EXP 15
10238: PUSH
10239: LD_EXP 18
10243: AND
10244: IFFALSE 10337
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
// begin enable ;
10252: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10253: LD_ADDR_VAR 0 1
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_OWVAR 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10335
// begin SetClass ( i , 1 ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: GO 10318
10335: POP
10336: POP
// end ;
10337: PPOPN 1
10339: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10340: LD_EXP 15
10344: PUSH
10345: LD_EXP 19
10349: AND
10350: PUSH
10351: LD_OWVAR 65
10355: PUSH
10356: LD_INT 7
10358: LESS
10359: AND
10360: IFFALSE 10374
10362: GO 10364
10364: DISABLE
// begin enable ;
10365: ENABLE
// game_speed := 7 ;
10366: LD_ADDR_OWVAR 65
10370: PUSH
10371: LD_INT 7
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10375: LD_EXP 15
10379: PUSH
10380: LD_EXP 22
10384: AND
10385: IFFALSE 10587
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 81
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10587
// if tmp > 5 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 5
10447: GREATER
10448: IFFALSE 10460
// k := 5 else
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: ST_TO_ADDR
10458: GO 10470
// k := tmp ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_VAR 0 3
10469: ST_TO_ADDR
// for i := 1 to k do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10585
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_VAR 0 1
10497: ARRAY
10498: PPUSH
10499: LD_VAR 0 1
10503: PUSH
10504: LD_INT 4
10506: MOD
10507: PUSH
10508: LD_INT 1
10510: PLUS
10511: PPUSH
10512: CALL_OW 259
10516: PUSH
10517: LD_INT 10
10519: LESS
10520: IFFALSE 10583
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 1
10531: ARRAY
10532: PPUSH
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 4
10540: MOD
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_VAR 0 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 4
10564: MOD
10565: PUSH
10566: LD_INT 1
10568: PLUS
10569: PPUSH
10570: CALL_OW 259
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PPUSH
10579: CALL_OW 237
10583: GO 10485
10585: POP
10586: POP
// end ;
10587: PPOPN 3
10589: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10590: LD_EXP 15
10594: PUSH
10595: LD_EXP 23
10599: AND
10600: IFFALSE 10620
10602: GO 10604
10604: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10605: LD_INT 4
10607: PPUSH
10608: LD_OWVAR 2
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 324
10620: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10621: LD_EXP 15
10625: PUSH
10626: LD_EXP 52
10630: AND
10631: IFFALSE 10651
10633: GO 10635
10635: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10636: LD_INT 19
10638: PPUSH
10639: LD_OWVAR 2
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 324
10651: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10652: LD_EXP 15
10656: PUSH
10657: LD_EXP 24
10661: AND
10662: IFFALSE 10764
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
// begin enable ;
10671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 34
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 34
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10767: LD_EXP 15
10771: PUSH
10772: LD_EXP 25
10776: AND
10777: IFFALSE 10797
10779: GO 10781
10781: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10782: LD_INT 32
10784: PPUSH
10785: LD_OWVAR 2
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 324
10797: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10798: LD_EXP 15
10802: PUSH
10803: LD_EXP 26
10807: AND
10808: IFFALSE 10989
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 33
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 2
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10989
// side := 0 ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10933
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10887: LD_OWVAR 2
10891: PUSH
10892: LD_VAR 0 1
10896: NONEQUAL
10897: PUSH
10898: LD_OWVAR 2
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 81
10912: PUSH
10913: LD_INT 2
10915: EQUAL
10916: AND
10917: IFFALSE 10931
// begin side := i ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// break ;
10929: GO 10933
// end ;
10931: GO 10884
10933: POP
10934: POP
// if not side then
10935: LD_VAR 0 3
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 10989
// for i := 1 to tmp do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: FOR_TO
10960: IFFALSE 10987
// if Prob ( 60 ) then
10962: LD_INT 60
10964: PPUSH
10965: CALL_OW 13
10969: IFFALSE 10985
// SetSide ( i , side ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 235
10985: GO 10959
10987: POP
10988: POP
// end ;
10989: PPOPN 3
10991: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10992: LD_EXP 15
10996: PUSH
10997: LD_EXP 28
11001: AND
11002: IFFALSE 11121
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11119
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 257
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: IN
11095: IFFALSE 11117
// SetClass ( un , rand ( 1 , 4 ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 336
11117: GO 11064
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11124: LD_EXP 15
11128: PUSH
11129: LD_EXP 27
11133: AND
11134: IFFALSE 11213
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_OWVAR 2
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 12
11204: ARRAY
11205: PPUSH
11206: LD_INT 100
11208: PPUSH
11209: CALL_OW 234
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 29
11225: AND
11226: IFFALSE 11324
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11324
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 3000
11311: PPUSH
11312: LD_INT 9000
11314: PPUSH
11315: CALL_OW 12
11319: PPUSH
11320: CALL_OW 492
// end ;
11324: PPOPN 1
11326: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11327: LD_EXP 15
11331: PUSH
11332: LD_EXP 30
11336: AND
11337: IFFALSE 11357
11339: GO 11341
11341: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11342: LD_INT 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 324
11357: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11358: LD_EXP 15
11362: PUSH
11363: LD_EXP 31
11367: AND
11368: IFFALSE 11451
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// if not tmp then
11413: LD_VAR 0 2
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11451
// for i in tmp do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_VAR 0 2
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetBLevel ( i , 10 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 10
11442: PPUSH
11443: CALL_OW 241
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 2
11453: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11454: LD_EXP 15
11458: PUSH
11459: LD_EXP 32
11463: AND
11464: IFFALSE 11575
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_OWVAR 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 25
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 3
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11575
// un := tmp [ rand ( 1 , tmp ) ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 12
11541: ARRAY
11542: ST_TO_ADDR
// if Crawls ( un ) then
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 318
11552: IFFALSE 11563
// ComWalk ( un ) ;
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 5
11570: PPUSH
11571: CALL_OW 336
// end ;
11575: PPOPN 3
11577: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11578: LD_EXP 15
11582: PUSH
11583: LD_EXP 33
11587: AND
11588: PUSH
11589: LD_OWVAR 67
11593: PUSH
11594: LD_INT 3
11596: LESS
11597: AND
11598: IFFALSE 11617
11600: GO 11602
11602: DISABLE
// Difficulty := Difficulty + 1 ;
11603: LD_ADDR_OWVAR 67
11607: PUSH
11608: LD_OWVAR 67
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
11617: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11618: LD_EXP 15
11622: PUSH
11623: LD_EXP 34
11627: AND
11628: IFFALSE 11731
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin for i := 1 to 5 do
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 5
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11729
// begin uc_nation := nation_nature ;
11652: LD_ADDR_OWVAR 21
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// uc_side := 0 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11668: LD_ADDR_OWVAR 29
11672: PUSH
11673: LD_INT 12
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
// hc_agressivity := 20 ;
11683: LD_ADDR_OWVAR 35
11687: PUSH
11688: LD_INT 20
11690: ST_TO_ADDR
// hc_class := class_tiger ;
11691: LD_ADDR_OWVAR 28
11695: PUSH
11696: LD_INT 14
11698: ST_TO_ADDR
// hc_gallery :=  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// hc_name :=  ;
11707: LD_ADDR_OWVAR 26
11711: PUSH
11712: LD_STRING 
11714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11715: CALL_OW 44
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 51
// end ;
11727: GO 11649
11729: POP
11730: POP
// end ;
11731: PPOPN 1
11733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11734: LD_EXP 15
11738: PUSH
11739: LD_EXP 35
11743: AND
11744: IFFALSE 11753
11746: GO 11748
11748: DISABLE
// StreamSibBomb ;
11749: CALL 11754 0 0
11753: END
// export function StreamSibBomb ; var i , x , y ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// result := false ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// for i := 1 to 16 do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 16
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11981
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 20
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 40
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 60
11806: PUSH
11807: LD_INT 70
11809: PUSH
11810: LD_INT 80
11812: PUSH
11813: LD_INT 90
11815: PUSH
11816: LD_INT 100
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 120
11824: PUSH
11825: LD_INT 130
11827: PUSH
11828: LD_INT 140
11830: PUSH
11831: LD_INT 150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 15
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_INT 10
11870: PUSH
11871: LD_INT 20
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 40
11879: PUSH
11880: LD_INT 50
11882: PUSH
11883: LD_INT 60
11885: PUSH
11886: LD_INT 70
11888: PUSH
11889: LD_INT 80
11891: PUSH
11892: LD_INT 90
11894: PUSH
11895: LD_INT 100
11897: PUSH
11898: LD_INT 110
11900: PUSH
11901: LD_INT 120
11903: PUSH
11904: LD_INT 130
11906: PUSH
11907: LD_INT 140
11909: PUSH
11910: LD_INT 150
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 15
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if ValidHex ( x , y ) then
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 488
11956: IFFALSE 11979
// begin result := [ x , y ] ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// break ;
11977: GO 11981
// end ; end ;
11979: GO 11781
11981: POP
11982: POP
// if result then
11983: LD_VAR 0 1
11987: IFFALSE 12047
// begin ToLua ( playSibBomb() ) ;
11989: LD_STRING playSibBomb()
11991: PPUSH
11992: CALL_OW 559
// wait ( 0 0$14 ) ;
11996: LD_INT 490
11998: PPUSH
11999: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PPUSH
12021: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 429
// end ; end ;
12047: LD_VAR 0 1
12051: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12052: LD_EXP 15
12056: PUSH
12057: LD_EXP 37
12061: AND
12062: IFFALSE 12074
12064: GO 12066
12066: DISABLE
// YouLost (  ) ;
12067: LD_STRING 
12069: PPUSH
12070: CALL_OW 104
12074: END
// every 0 0$1 trigger StreamModeActive and sFog do
12075: LD_EXP 15
12079: PUSH
12080: LD_EXP 36
12084: AND
12085: IFFALSE 12099
12087: GO 12089
12089: DISABLE
// FogOff ( your_side ) ;
12090: LD_OWVAR 2
12094: PPUSH
12095: CALL_OW 344
12099: END
// every 0 0$1 trigger StreamModeActive and sSun do
12100: LD_EXP 15
12104: PUSH
12105: LD_EXP 38
12109: AND
12110: IFFALSE 12138
12112: GO 12114
12114: DISABLE
// begin solar_recharge_percent := 0 ;
12115: LD_ADDR_OWVAR 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12123: LD_INT 10500
12125: PPUSH
12126: CALL_OW 67
// solar_recharge_percent := 100 ;
12130: LD_ADDR_OWVAR 79
12134: PUSH
12135: LD_INT 100
12137: ST_TO_ADDR
// end ;
12138: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12139: LD_EXP 15
12143: PUSH
12144: LD_EXP 39
12148: AND
12149: IFFALSE 12388
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
12158: PPUSH
// begin tmp := [ ] ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// for i := 1 to 6 do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12285
// begin uc_nation := nation_nature ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 0
12189: ST_TO_ADDR
// uc_side := 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12198: LD_ADDR_OWVAR 29
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: ST_TO_ADDR
// hc_agressivity := 20 ;
12213: LD_ADDR_OWVAR 35
12217: PUSH
12218: LD_INT 20
12220: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 17
12228: ST_TO_ADDR
// hc_gallery :=  ;
12229: LD_ADDR_OWVAR 33
12233: PUSH
12234: LD_STRING 
12236: ST_TO_ADDR
// hc_name :=  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// un := CreateHuman ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: CALL_OW 44
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 51
// tmp := tmp ^ un ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: ADD
12282: ST_TO_ADDR
// end ;
12283: GO 12179
12285: POP
12286: POP
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// for un in tmp do
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12379
// begin if IsDead ( un ) then
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL_OW 301
12316: IFFALSE 12336
// begin tmp := tmp diff un ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_VAR 0 2
12332: DIFF
12333: ST_TO_ADDR
// continue ;
12334: GO 12304
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12336: LD_VAR 0 2
12340: PPUSH
12341: LD_INT 3
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_VAR 0 2
12367: PPUSH
12368: CALL_OW 74
12372: PPUSH
12373: CALL_OW 115
// end ;
12377: GO 12304
12379: POP
12380: POP
// until not tmp ;
12381: LD_VAR 0 3
12385: NOT
12386: IFFALSE 12287
// end ;
12388: PPOPN 3
12390: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12391: LD_EXP 15
12395: PUSH
12396: LD_EXP 40
12400: AND
12401: IFFALSE 12455
12403: GO 12405
12405: DISABLE
// begin ToLua ( displayTroll(); ) ;
12406: LD_STRING displayTroll();
12408: PPUSH
12409: CALL_OW 559
// wait ( 3 3$00 ) ;
12413: LD_INT 6300
12415: PPUSH
12416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12420: LD_STRING hideTroll();
12422: PPUSH
12423: CALL_OW 559
// wait ( 1 1$00 ) ;
12427: LD_INT 2100
12429: PPUSH
12430: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12434: LD_STRING displayTroll();
12436: PPUSH
12437: CALL_OW 559
// wait ( 1 1$00 ) ;
12441: LD_INT 2100
12443: PPUSH
12444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12448: LD_STRING hideTroll();
12450: PPUSH
12451: CALL_OW 559
// end ;
12455: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12456: LD_EXP 15
12460: PUSH
12461: LD_EXP 41
12465: AND
12466: IFFALSE 12529
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin p := 0 ;
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// repeat game_speed := 1 ;
12482: LD_ADDR_OWVAR 65
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12490: LD_INT 35
12492: PPUSH
12493: CALL_OW 67
// p := p + 1 ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// until p >= 60 ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 60
12518: GREATEREQUAL
12519: IFFALSE 12482
// game_speed := 4 ;
12521: LD_ADDR_OWVAR 65
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// end ;
12529: PPOPN 1
12531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 42
12541: AND
12542: IFFALSE 12688
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_OWVAR 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not depot then
12605: LD_VAR 0 1
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12643: LD_VAR 0 2
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 3
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12691: LD_EXP 15
12695: PUSH
12696: LD_EXP 43
12700: AND
12701: IFFALSE 12798
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 1
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 12
12789: ARRAY
12790: PPUSH
12791: LD_INT 200
12793: PPUSH
12794: CALL_OW 234
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12801: LD_EXP 15
12805: PUSH
12806: LD_EXP 44
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 60
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12893: LD_EXP 15
12897: PUSH
12898: LD_EXP 45
12902: AND
12903: IFFALSE 13002
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 61
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13002
// for i in tmp do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13000
// if IsControledBy ( i ) then
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 312
12987: IFFALSE 12998
// ComUnlink ( i ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: CALL_OW 136
12998: GO 12975
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13005: LD_EXP 15
13009: PUSH
13010: LD_EXP 46
13014: AND
13015: IFFALSE 13155
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
// begin ToLua ( displayPowell(); ) ;
13024: LD_STRING displayPowell();
13026: PPUSH
13027: CALL_OW 559
// uc_side := 0 ;
13031: LD_ADDR_OWVAR 20
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_nation := 2 ;
13039: LD_ADDR_OWVAR 21
13043: PUSH
13044: LD_INT 2
13046: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13047: LD_ADDR_OWVAR 37
13051: PUSH
13052: LD_INT 14
13054: ST_TO_ADDR
// vc_engine := engine_siberite ;
13055: LD_ADDR_OWVAR 39
13059: PUSH
13060: LD_INT 3
13062: ST_TO_ADDR
// vc_control := control_apeman ;
13063: LD_ADDR_OWVAR 38
13067: PUSH
13068: LD_INT 5
13070: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_INT 29
13078: ST_TO_ADDR
// un := CreateVehicle ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13101: LD_INT 35
13103: PPUSH
13104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13108: LD_VAR 0 2
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 74
13139: PPUSH
13140: CALL_OW 115
// until IsDead ( un ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: CALL_OW 301
13153: IFFALSE 13101
// end ;
13155: PPOPN 2
13157: END
// every 0 0$1 trigger StreamModeActive and sStu do
13158: LD_EXP 15
13162: PUSH
13163: LD_EXP 54
13167: AND
13168: IFFALSE 13184
13170: GO 13172
13172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13173: LD_STRING displayStucuk();
13175: PPUSH
13176: CALL_OW 559
// ResetFog ;
13180: CALL_OW 335
// end ;
13184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13185: LD_EXP 15
13189: PUSH
13190: LD_EXP 47
13194: AND
13195: IFFALSE 13336
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: ST_TO_ADDR
// if not tmp then
13240: LD_VAR 0 2
13244: NOT
13245: IFFALSE 13249
// exit ;
13247: GO 13336
// un := tmp [ rand ( 1 , tmp ) ] ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PPUSH
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 12
13271: ARRAY
13272: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_OWVAR 3
13294: PUSH
13295: LD_VAR 0 1
13299: DIFF
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 74
13310: PPUSH
13311: CALL_OW 115
// wait ( 0 0$20 ) ;
13315: LD_INT 700
13317: PPUSH
13318: CALL_OW 67
// SetSide ( un , your_side ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_OWVAR 2
13331: PPUSH
13332: CALL_OW 235
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13339: LD_EXP 15
13343: PUSH
13344: LD_EXP 48
13348: AND
13349: IFFALSE 13455
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_OWVAR 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not depot then
13411: LD_VAR 0 1
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13455
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 251
13447: PPUSH
13448: LD_INT 70
13450: PPUSH
13451: CALL_OW 495
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13458: LD_EXP 15
13462: PUSH
13463: LD_EXP 49
13467: AND
13468: IFFALSE 13679
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 5
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13679
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13677
// begin d := rand ( 0 , 5 ) ;
13538: LD_ADDR_VAR 0 4
13542: PUSH
13543: LD_INT 0
13545: PPUSH
13546: LD_INT 5
13548: PPUSH
13549: CALL_OW 12
13553: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13554: LD_ADDR_VAR 0 2
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 250
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: LD_INT 12
13579: PPUSH
13580: CALL_OW 12
13584: PPUSH
13585: CALL_OW 272
13589: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 251
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: LD_INT 12
13615: PPUSH
13616: CALL_OW 12
13620: PPUSH
13621: CALL_OW 273
13625: ST_TO_ADDR
// if ValidHex ( x , y ) then
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 488
13640: IFFALSE 13675
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_INT 6
13662: PPUSH
13663: CALL_OW 12
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 483
// end ;
13675: GO 13535
13677: POP
13678: POP
// end ;
13679: PPOPN 5
13681: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13682: LD_EXP 15
13686: PUSH
13687: LD_EXP 50
13691: AND
13692: IFFALSE 13786
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_OWVAR 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: ST_TO_ADDR
// if not tmp then
13748: LD_VAR 0 2
13752: NOT
13753: IFFALSE 13757
// exit ;
13755: GO 13786
// for i in tmp do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13784
// SetFuel ( i , 0 ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 240
13782: GO 13767
13784: POP
13785: POP
// end ;
13786: PPOPN 2
13788: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 51
13798: AND
13799: IFFALSE 13865
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 29
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13865
// DestroyUnit ( tmp [ 1 ] ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: CALL_OW 65
// end ;
13865: PPOPN 1
13867: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 53
13877: AND
13878: IFFALSE 14007
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin uc_side := 0 ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// uc_nation := nation_arabian ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_INT 2
13901: ST_TO_ADDR
// hc_gallery :=  ;
13902: LD_ADDR_OWVAR 33
13906: PUSH
13907: LD_STRING 
13909: ST_TO_ADDR
// hc_name :=  ;
13910: LD_ADDR_OWVAR 26
13914: PUSH
13915: LD_STRING 
13917: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 11
13923: PPUSH
13924: LD_INT 10
13926: PPUSH
13927: CALL_OW 380
// un := CreateHuman ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: CALL_OW 44
13940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 74
13991: PPUSH
13992: CALL_OW 115
// until IsDead ( un ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 301
14005: IFFALSE 13953
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14010: LD_EXP 15
14014: PUSH
14015: LD_EXP 55
14019: AND
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14025: LD_STRING earthquake(getX(game), 0, 32)
14027: PPUSH
14028: CALL_OW 559
14032: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14033: LD_EXP 15
14037: PUSH
14038: LD_EXP 56
14042: AND
14043: IFFALSE 14134
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 33
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if not tmp then
14099: LD_VAR 0 1
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14108: LD_VAR 0 1
14112: PUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 12
14125: ARRAY
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 234
// end ;
14134: PPOPN 1
14136: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14137: LD_EXP 15
14141: PUSH
14142: LD_EXP 57
14146: AND
14147: IFFALSE 14288
14149: GO 14151
14151: DISABLE
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// if not tmp then
14193: LD_VAR 0 3
14197: NOT
14198: IFFALSE 14202
// exit ;
14200: GO 14288
// un := tmp [ rand ( 1 , tmp ) ] ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// if Crawls ( un ) then
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 318
14235: IFFALSE 14246
// ComWalk ( un ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 9
14253: PPUSH
14254: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14258: LD_INT 28
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14273: LD_INT 29
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ;
14288: PPOPN 3
14290: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14291: LD_EXP 15
14295: PUSH
14296: LD_EXP 58
14300: AND
14301: IFFALSE 14412
14303: GO 14305
14305: DISABLE
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if not tmp then
14347: LD_VAR 0 3
14351: NOT
14352: IFFALSE 14356
// exit ;
14354: GO 14412
// un := tmp [ rand ( 1 , tmp ) ] ;
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 12
14378: ARRAY
14379: ST_TO_ADDR
// if Crawls ( un ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 318
14389: IFFALSE 14400
// ComWalk ( un ) ;
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_INT 8
14407: PPUSH
14408: CALL_OW 336
// end ;
14412: PPOPN 3
14414: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14415: LD_EXP 15
14419: PUSH
14420: LD_EXP 59
14424: AND
14425: IFFALSE 14569
14427: GO 14429
14429: DISABLE
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 51
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 34
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14569
// for i in tmp do
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14567
// if GetCargo ( i , mat_artifact ) = 0 then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 4
14539: PPUSH
14540: CALL_OW 289
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14565
// SetCargo ( i , mat_siberit , 100 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 3
14557: PPUSH
14558: LD_INT 100
14560: PPUSH
14561: CALL_OW 290
14565: GO 14529
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14572: LD_EXP 15
14576: PUSH
14577: LD_EXP 60
14581: AND
14582: IFFALSE 14765
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// if not tmp then
14613: LD_VAR 0 2
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14765
// for i := 1 to 2 do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 2
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14763
// begin uc_side := your_side ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_OWVAR 2
14647: ST_TO_ADDR
// uc_nation := nation_american ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// vc_chassis := us_morphling ;
14656: LD_ADDR_OWVAR 37
14660: PUSH
14661: LD_INT 5
14663: ST_TO_ADDR
// vc_engine := engine_siberite ;
14664: LD_ADDR_OWVAR 39
14668: PUSH
14669: LD_INT 3
14671: ST_TO_ADDR
// vc_control := control_computer ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_INT 3
14679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14680: LD_ADDR_OWVAR 40
14684: PUSH
14685: LD_INT 10
14687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: CALL_OW 310
14701: NOT
14702: IFFALSE 14749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14704: CALL_OW 45
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 250
14722: PPUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 50
14747: GO 14761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14749: CALL_OW 45
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 51
// end ;
14761: GO 14635
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14768: LD_EXP 15
14772: PUSH
14773: LD_EXP 61
14777: AND
14778: IFFALSE 15000
14780: GO 14782
14782: DISABLE
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15000
// s1 := rand ( 1 , 4 ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 4
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14870: LD_ADDR_VAR 0 4
14874: PUSH
14875: LD_VAR 0 6
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 2
14888: PPUSH
14889: CALL_OW 259
14893: ST_TO_ADDR
// if s1 = 1 then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_INT 1
14901: EQUAL
14902: IFFALSE 14922
// s2 := rand ( 2 , 4 ) else
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_INT 2
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
14920: GO 14930
// s2 := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 6
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: CALL_OW 259
14953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14954: LD_VAR 0 6
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 5
14972: PPUSH
14973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14977: LD_VAR 0 6
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: CALL_OW 237
// end ;
15000: PPOPN 6
15002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15003: LD_EXP 15
15007: PUSH
15008: LD_EXP 62
15012: AND
15013: IFFALSE 15092
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 1
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 234
// end ;
15092: PPOPN 1
15094: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15095: LD_EXP 15
15099: PUSH
15100: LD_EXP 63
15104: AND
15105: IFFALSE 15217
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: LD_INT 26
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15217
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 2
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15215
// SetLives ( i , 1 ) ;
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 234
15213: GO 15198
15215: POP
15216: POP
// end ;
15217: PPOPN 2
15219: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 64
15229: AND
15230: IFFALSE 15504
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin i := rand ( 1 , 7 ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 7
15250: PPUSH
15251: CALL_OW 12
15255: ST_TO_ADDR
// case i of 1 :
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15279
15269: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15270: LD_STRING earthquake(getX(game), 0, 32)
15272: PPUSH
15273: CALL_OW 559
15277: GO 15504
15279: LD_INT 2
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15301
15287: POP
// begin ToLua ( displayStucuk(); ) ;
15288: LD_STRING displayStucuk();
15290: PPUSH
15291: CALL_OW 559
// ResetFog ;
15295: CALL_OW 335
// end ; 3 :
15299: GO 15504
15301: LD_INT 3
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15413
15309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15504
// un := tmp [ rand ( 1 , tmp ) ] ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// if Crawls ( un ) then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 318
15388: IFFALSE 15399
// ComWalk ( un ) ;
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 8
15406: PPUSH
15407: CALL_OW 336
// end ; 4 :
15411: GO 15504
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15482
15421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_OWVAR 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 29
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 2
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15504
// DestroyUnit ( tmp [ 1 ] ) ;
15467: LD_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 65
// end ; 5 .. 7 :
15480: GO 15504
15482: LD_INT 5
15484: DOUBLE
15485: GREATEREQUAL
15486: IFFALSE 15494
15488: LD_INT 7
15490: DOUBLE
15491: LESSEQUAL
15492: IFTRUE 15496
15494: GO 15503
15496: POP
// StreamSibBomb ; end ;
15497: CALL 11754 0 0
15501: GO 15504
15503: POP
// end ;
15504: PPOPN 3
15506: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15507: LD_EXP 15
15511: PUSH
15512: LD_EXP 65
15516: AND
15517: IFFALSE 15673
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
// if not tmp then
15581: LD_VAR 0 2
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15673
// p := 0 ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// p := p + 1 ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 1
15617: PLUS
15618: ST_TO_ADDR
// for i in tmp do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: FOR_IN
15630: IFFALSE 15661
// if GetLives ( i ) < 1000 then
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 256
15641: PUSH
15642: LD_INT 1000
15644: LESS
15645: IFFALSE 15659
// SetLives ( i , 1000 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 1000
15654: PPUSH
15655: CALL_OW 234
15659: GO 15629
15661: POP
15662: POP
// until p > 20 ;
15663: LD_VAR 0 3
15667: PUSH
15668: LD_INT 20
15670: GREATER
15671: IFFALSE 15598
// end ;
15673: PPOPN 3
15675: END
// every 0 0$1 trigger StreamModeActive and sTime do
15676: LD_EXP 15
15680: PUSH
15681: LD_EXP 66
15685: AND
15686: IFFALSE 15721
15688: GO 15690
15690: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15691: LD_INT 28
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15706: LD_INT 30
15708: PPUSH
15709: LD_OWVAR 2
15713: PPUSH
15714: LD_INT 2
15716: PPUSH
15717: CALL_OW 322
// end ;
15721: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15722: LD_EXP 15
15726: PUSH
15727: LD_EXP 67
15731: AND
15732: IFFALSE 15853
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_OWVAR 2
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15853
// for i in tmp do
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: FOR_IN
15815: IFFALSE 15851
// begin if Crawls ( i ) then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( i ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 138
// SetClass ( i , 2 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: GO 15814
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15856: LD_EXP 15
15860: PUSH
15861: LD_EXP 68
15865: AND
15866: IFFALSE 16147
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 9
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15894: LD_INT 9
15896: PPUSH
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 343
// uc_side := 9 ;
15906: LD_ADDR_OWVAR 20
15910: PUSH
15911: LD_INT 9
15913: ST_TO_ADDR
// uc_nation := 2 ;
15914: LD_ADDR_OWVAR 21
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// hc_name := Dark Warrior ;
15922: LD_ADDR_OWVAR 26
15926: PUSH
15927: LD_STRING Dark Warrior
15929: ST_TO_ADDR
// hc_gallery :=  ;
15930: LD_ADDR_OWVAR 33
15934: PUSH
15935: LD_STRING 
15937: ST_TO_ADDR
// hc_noskilllimit := true ;
15938: LD_ADDR_OWVAR 76
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15946: LD_ADDR_OWVAR 31
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// un := CreateHuman ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: CALL_OW 44
15978: ST_TO_ADDR
// hc_noskilllimit := false ;
15979: LD_ADDR_OWVAR 76
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 51
// p := 0 ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16007: LD_INT 35
16009: PPUSH
16010: CALL_OW 67
// p := p + 1 ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PLUS
16027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL_OW 256
16037: PUSH
16038: LD_INT 1000
16040: LESS
16041: IFFALSE 16055
// SetLives ( un , 1000 ) ;
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1000
16050: PPUSH
16051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 81
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 91
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 74
16106: PPUSH
16107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 60
16118: GREATER
16119: PUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 301
16129: OR
16130: IFFALSE 16007
// if un then
16132: LD_VAR 0 3
16136: IFFALSE 16147
// RemoveUnit ( un ) ;
16138: LD_VAR 0 3
16142: PPUSH
16143: CALL_OW 64
// end ;
16147: PPOPN 3
16149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16150: LD_INT 0
16152: PPUSH
// case cmd of 301 :
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 301
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16198
16166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 7
16176: PPUSH
16177: LD_VAR 0 8
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 17399 0 5
16196: GO 16319
16198: LD_INT 302
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16243
16206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16207: LD_VAR 0 6
16211: PPUSH
16212: LD_VAR 0 7
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 9
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 17490 0 6
16241: GO 16319
16243: LD_INT 303
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16288
16251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16252: LD_VAR 0 6
16256: PPUSH
16257: LD_VAR 0 7
16261: PPUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: CALL 16324 0 6
16286: GO 16319
16288: LD_INT 304
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16318
16296: POP
// hHackTeleport ( unit , x , y ) ; end ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL 18083 0 3
16316: GO 16319
16318: POP
// end ;
16319: LD_VAR 0 12
16323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: LESS
16336: PUSH
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 3
16344: GREATER
16345: OR
16346: PUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: LD_VAR 0 6
16356: PPUSH
16357: CALL_OW 428
16361: OR
16362: IFFALSE 16366
// exit ;
16364: GO 17086
// uc_side := your_side ;
16366: LD_ADDR_OWVAR 20
16370: PUSH
16371: LD_OWVAR 2
16375: ST_TO_ADDR
// uc_nation := nation ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_VAR 0 1
16385: ST_TO_ADDR
// bc_level = 1 ;
16386: LD_ADDR_OWVAR 43
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// case btype of 1 :
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_depot ; 2 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
16416: GO 17030
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_warehouse ; 3 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
16435: GO 17030
16437: LD_INT 3
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16456
16445: POP
// bc_type := b_lab ; 4 .. 9 :
16446: LD_ADDR_OWVAR 42
16450: PUSH
16451: LD_INT 6
16453: ST_TO_ADDR
16454: GO 17030
16456: LD_INT 4
16458: DOUBLE
16459: GREATEREQUAL
16460: IFFALSE 16468
16462: LD_INT 9
16464: DOUBLE
16465: LESSEQUAL
16466: IFTRUE 16470
16468: GO 16522
16470: POP
// begin bc_type := b_lab_half ;
16471: LD_ADDR_OWVAR 42
16475: PUSH
16476: LD_INT 7
16478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16479: LD_ADDR_OWVAR 44
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 13
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 3
16517: MINUS
16518: ARRAY
16519: ST_TO_ADDR
// end ; 10 .. 13 :
16520: GO 17030
16522: LD_INT 10
16524: DOUBLE
16525: GREATEREQUAL
16526: IFFALSE 16534
16528: LD_INT 13
16530: DOUBLE
16531: LESSEQUAL
16532: IFTRUE 16536
16534: GO 16613
16536: POP
// begin bc_type := b_lab_full ;
16537: LD_ADDR_OWVAR 42
16541: PUSH
16542: LD_INT 8
16544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16545: LD_ADDR_OWVAR 44
16549: PUSH
16550: LD_INT 10
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 14
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 9
16575: MINUS
16576: ARRAY
16577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16578: LD_ADDR_OWVAR 45
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 15
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 9
16608: MINUS
16609: ARRAY
16610: ST_TO_ADDR
// end ; 14 :
16611: GO 17030
16613: LD_INT 14
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_workshop ; 15 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 2
16629: ST_TO_ADDR
16630: GO 17030
16632: LD_INT 15
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_factory ; 16 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 3
16648: ST_TO_ADDR
16649: GO 17030
16651: LD_INT 16
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16670
16659: POP
// bc_type := b_ext_gun ; 17 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 17
16667: ST_TO_ADDR
16668: GO 17030
16670: LD_INT 17
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16706
16678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16679: LD_ADDR_OWVAR 42
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 19
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: ST_TO_ADDR
16704: GO 17030
16706: LD_INT 18
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radar ; 19 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 20
16722: ST_TO_ADDR
16723: GO 17030
16725: LD_INT 19
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_radio ; 20 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 22
16741: ST_TO_ADDR
16742: GO 17030
16744: LD_INT 20
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_siberium ; 21 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 21
16760: ST_TO_ADDR
16761: GO 17030
16763: LD_INT 21
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_computer ; 22 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 24
16779: ST_TO_ADDR
16780: GO 17030
16782: LD_INT 22
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_track ; 23 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 16
16798: ST_TO_ADDR
16799: GO 17030
16801: LD_INT 23
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_ext_laser ; 24 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 25
16817: ST_TO_ADDR
16818: GO 17030
16820: LD_INT 24
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_control_tower ; 25 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 36
16836: ST_TO_ADDR
16837: GO 17030
16839: LD_INT 25
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_breastwork ; 26 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 31
16855: ST_TO_ADDR
16856: GO 17030
16858: LD_INT 26
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_bunker ; 27 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 32
16874: ST_TO_ADDR
16875: GO 17030
16877: LD_INT 27
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_turret ; 28 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 33
16893: ST_TO_ADDR
16894: GO 17030
16896: LD_INT 28
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_armoury ; 29 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 4
16912: ST_TO_ADDR
16913: GO 17030
16915: LD_INT 29
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_barracks ; 30 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 5
16931: ST_TO_ADDR
16932: GO 17030
16934: LD_INT 30
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_solar_power ; 31 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 27
16950: ST_TO_ADDR
16951: GO 17030
16953: LD_INT 31
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_oil_power ; 32 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 26
16969: ST_TO_ADDR
16970: GO 17030
16972: LD_INT 32
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_siberite_power ; 33 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 28
16988: ST_TO_ADDR
16989: GO 17030
16991: LD_INT 33
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_oil_mine ; 34 :
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 29
17007: ST_TO_ADDR
17008: GO 17030
17010: LD_INT 34
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17029
17018: POP
// bc_type := b_siberite_mine ; end ;
17019: LD_ADDR_OWVAR 42
17023: PUSH
17024: LD_INT 30
17026: ST_TO_ADDR
17027: GO 17030
17029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: CALL_OW 47
17054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17055: LD_OWVAR 42
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: IN
17070: IFFALSE 17086
// PlaceWeaponTurret ( b , weapon ) ;
17072: LD_VAR 0 8
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 431
// end ;
17086: LD_VAR 0 7
17090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 4
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17219
// for i in tmp do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17217
// for j = 1 to 3 do
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_INT 3
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 274
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 99999
17206: PPUSH
17207: CALL_OW 277
17211: GO 17186
17213: POP
17214: POP
17215: GO 17170
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 1
17223: RET
// export function hHackSetLevel10 ; var i , j ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17302
// if IsSelected ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 306
17261: IFFALSE 17300
// begin for j := 1 to 4 do
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 4
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17298
// SetSkill ( i , j , 10 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 237
17296: GO 17276
17298: POP
17299: POP
// end ;
17300: GO 17249
17302: POP
17303: POP
// end ;
17304: LD_VAR 0 1
17308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17392
// begin for j := 1 to 4 do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 4
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17388
// SetSkill ( i , j , 10 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 10
17381: PPUSH
17382: CALL_OW 237
17386: GO 17366
17388: POP
17389: POP
// end ;
17390: GO 17350
17392: POP
17393: POP
// end ;
17394: LD_VAR 0 1
17398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17399: LD_INT 0
17401: PPUSH
// uc_side := your_side ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_OWVAR 2
17411: ST_TO_ADDR
// uc_nation := nation ;
17412: LD_ADDR_OWVAR 21
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// InitHc ;
17422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17426: LD_INT 0
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL_OW 428
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17463: CALL_OW 44
17467: PPUSH
17468: LD_VAR 0 4
17472: PPUSH
17473: LD_VAR 0 5
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 48
// end ;
17485: LD_VAR 0 6
17489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: IN
17531: IFFALSE 17543
// uc_nation := nation_american else
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
17541: GO 17586
// if chassis in [ 11 , 12 , 13 , 14 ] then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17578
// uc_nation := nation_arabian else
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
17576: GO 17586
// uc_nation := nation_russian ;
17578: LD_ADDR_OWVAR 21
17582: PUSH
17583: LD_INT 3
17585: ST_TO_ADDR
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// un := CreateVehicle ;
17626: LD_ADDR_VAR 0 8
17630: PUSH
17631: CALL_OW 45
17635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 12
17651: PPUSH
17652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17656: LD_VAR 0 8
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 48
// end ;
17678: LD_VAR 0 7
17682: RET
// export hInvincible ; every 1 do
17683: GO 17685
17685: DISABLE
// hInvincible := [ ] ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
17693: END
// every 10 do var i ;
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin enable ;
17700: ENABLE
// if not hInvincible then
17701: LD_EXP 69
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17754
// for i in hInvincible do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_EXP 69
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17752
// if GetLives ( i ) < 1000 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 256
17732: PUSH
17733: LD_INT 1000
17735: LESS
17736: IFFALSE 17750
// SetLives ( i , 1000 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 1000
17745: PPUSH
17746: CALL_OW 234
17750: GO 17720
17752: POP
17753: POP
// end ;
17754: PPOPN 1
17756: END
// export function hHackInvincible ; var i ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17861
// if IsSelected ( i ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 306
17811: IFFALSE 17859
// begin if i in hInvincible then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_EXP 69
17822: IN
17823: IFFALSE 17843
// hInvincible := hInvincible diff i else
17825: LD_ADDR_EXP 69
17829: PUSH
17830: LD_EXP 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: ST_TO_ADDR
17841: GO 17859
// hInvincible := hInvincible union i ;
17843: LD_ADDR_EXP 69
17847: PUSH
17848: LD_EXP 69
17852: PUSH
17853: LD_VAR 0 2
17857: UNION
17858: ST_TO_ADDR
// end ;
17859: GO 17799
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackInvisible ; var i , j ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17918
// if IsSelected ( i ) then
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 306
17905: IFFALSE 17916
// ComForceInvisible ( i ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 496
17916: GO 17893
17918: POP
17919: POP
// end ;
17920: LD_VAR 0 1
17924: RET
// export function hHackChangeYourSide ; begin
17925: LD_INT 0
17927: PPUSH
// if your_side = 8 then
17928: LD_OWVAR 2
17932: PUSH
17933: LD_INT 8
17935: EQUAL
17936: IFFALSE 17948
// your_side := 0 else
17938: LD_ADDR_OWVAR 2
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
17946: GO 17962
// your_side := your_side + 1 ;
17948: LD_ADDR_OWVAR 2
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 1
17966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// for i in all_units do
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_OWVAR 3
17981: PUSH
17982: FOR_IN
17983: IFFALSE 18061
// if IsSelected ( i ) then
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 306
17994: IFFALSE 18059
// begin j := GetSide ( i ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// if j = 8 then
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 8
18018: EQUAL
18019: IFFALSE 18031
// j := 0 else
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
18029: GO 18045
// j := j + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// SetSide ( i , j ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 235
// end ;
18059: GO 17982
18061: POP
18062: POP
// end ;
18063: LD_VAR 0 1
18067: RET
// export function hHackFog ; begin
18068: LD_INT 0
18070: PPUSH
// FogOff ( true ) ;
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 344
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 483
// CenterOnXY ( x , y ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 84
// end ; end_of_file
18125: LD_VAR 0 4
18129: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_EXP 84
18150: EQUAL
18151: IFFALSE 18223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 4
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 495
// end ; end ;
18223: LD_VAR 0 2
18227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18228: LD_INT 0
18230: PPUSH
// end ;
18231: LD_VAR 0 4
18235: RET
// export function SOS_Command ( cmd ) ; begin
18236: LD_INT 0
18238: PPUSH
// end ;
18239: LD_VAR 0 2
18243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18244: LD_INT 0
18246: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 250
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_EXP 87
18270: EQUAL
18271: AND
18272: IFFALSE 18293
// MinerPlaceMine ( unit , x , y ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_VAR 0 5
18288: PPUSH
18289: CALL 20634 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18293: LD_VAR 0 1
18297: PUSH
18298: LD_INT 251
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 264
18311: PUSH
18312: LD_EXP 87
18316: EQUAL
18317: AND
18318: IFFALSE 18339
// MinerDetonateMine ( unit , x , y ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: LD_VAR 0 5
18334: PPUSH
18335: CALL 20911 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 252
18346: EQUAL
18347: PUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_EXP 87
18362: EQUAL
18363: AND
18364: IFFALSE 18385
// MinerCreateMinefield ( unit , x , y ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 4
18375: PPUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: CALL 21328 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 253
18392: EQUAL
18393: PUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 257
18403: PUSH
18404: LD_INT 5
18406: EQUAL
18407: AND
18408: IFFALSE 18429
// ComBinocular ( unit , x , y ) ;
18410: LD_VAR 0 2
18414: PPUSH
18415: LD_VAR 0 4
18419: PPUSH
18420: LD_VAR 0 5
18424: PPUSH
18425: CALL 21699 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 254
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 264
18447: PUSH
18448: LD_EXP 82
18452: EQUAL
18453: AND
18454: PUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: CALL_OW 263
18464: PUSH
18465: LD_INT 3
18467: EQUAL
18468: AND
18469: IFFALSE 18485
// HackDestroyVehicle ( unit , selectedUnit ) ;
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: CALL 19994 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18485: LD_VAR 0 1
18489: PUSH
18490: LD_INT 255
18492: EQUAL
18493: PUSH
18494: LD_VAR 0 2
18498: PPUSH
18499: CALL_OW 264
18503: PUSH
18504: LD_INT 14
18506: PUSH
18507: LD_INT 53
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: IN
18514: AND
18515: PUSH
18516: LD_VAR 0 4
18520: PPUSH
18521: LD_VAR 0 5
18525: PPUSH
18526: CALL_OW 488
18530: AND
18531: IFFALSE 18555
// CutTreeXYR ( unit , x , y , 12 ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 4
18542: PPUSH
18543: LD_VAR 0 5
18547: PPUSH
18548: LD_INT 12
18550: PPUSH
18551: CALL 18560 0 4
// end ;
18555: LD_VAR 0 6
18559: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18571: LD_VAR 0 1
18575: NOT
18576: PUSH
18577: LD_VAR 0 2
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: CALL_OW 488
18591: NOT
18592: OR
18593: PUSH
18594: LD_VAR 0 4
18598: NOT
18599: OR
18600: IFFALSE 18604
// exit ;
18602: GO 18944
// list := [ ] ;
18604: LD_ADDR_VAR 0 13
18608: PUSH
18609: EMPTY
18610: ST_TO_ADDR
// if x - r < 0 then
18611: LD_VAR 0 2
18615: PUSH
18616: LD_VAR 0 4
18620: MINUS
18621: PUSH
18622: LD_INT 0
18624: LESS
18625: IFFALSE 18637
// min_x := 0 else
18627: LD_ADDR_VAR 0 7
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
18635: GO 18653
// min_x := x - r ;
18637: LD_ADDR_VAR 0 7
18641: PUSH
18642: LD_VAR 0 2
18646: PUSH
18647: LD_VAR 0 4
18651: MINUS
18652: ST_TO_ADDR
// if y - r < 0 then
18653: LD_VAR 0 3
18657: PUSH
18658: LD_VAR 0 4
18662: MINUS
18663: PUSH
18664: LD_INT 0
18666: LESS
18667: IFFALSE 18679
// min_y := 0 else
18669: LD_ADDR_VAR 0 8
18673: PUSH
18674: LD_INT 0
18676: ST_TO_ADDR
18677: GO 18695
// min_y := y - r ;
18679: LD_ADDR_VAR 0 8
18683: PUSH
18684: LD_VAR 0 3
18688: PUSH
18689: LD_VAR 0 4
18693: MINUS
18694: ST_TO_ADDR
// max_x := x + r ;
18695: LD_ADDR_VAR 0 9
18699: PUSH
18700: LD_VAR 0 2
18704: PUSH
18705: LD_VAR 0 4
18709: PLUS
18710: ST_TO_ADDR
// max_y := y + r ;
18711: LD_ADDR_VAR 0 10
18715: PUSH
18716: LD_VAR 0 3
18720: PUSH
18721: LD_VAR 0 4
18725: PLUS
18726: ST_TO_ADDR
// for _x = min_x to max_x do
18727: LD_ADDR_VAR 0 11
18731: PUSH
18732: DOUBLE
18733: LD_VAR 0 7
18737: DEC
18738: ST_TO_ADDR
18739: LD_VAR 0 9
18743: PUSH
18744: FOR_TO
18745: IFFALSE 18862
// for _y = min_y to max_y do
18747: LD_ADDR_VAR 0 12
18751: PUSH
18752: DOUBLE
18753: LD_VAR 0 8
18757: DEC
18758: ST_TO_ADDR
18759: LD_VAR 0 10
18763: PUSH
18764: FOR_TO
18765: IFFALSE 18858
// begin if not ValidHex ( _x , _y ) then
18767: LD_VAR 0 11
18771: PPUSH
18772: LD_VAR 0 12
18776: PPUSH
18777: CALL_OW 488
18781: NOT
18782: IFFALSE 18786
// continue ;
18784: GO 18764
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18786: LD_VAR 0 11
18790: PPUSH
18791: LD_VAR 0 12
18795: PPUSH
18796: CALL_OW 351
18800: PUSH
18801: LD_VAR 0 11
18805: PPUSH
18806: LD_VAR 0 12
18810: PPUSH
18811: CALL_OW 554
18815: AND
18816: IFFALSE 18856
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18818: LD_ADDR_VAR 0 13
18822: PUSH
18823: LD_VAR 0 13
18827: PPUSH
18828: LD_VAR 0 13
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: PPUSH
18837: LD_VAR 0 11
18841: PUSH
18842: LD_VAR 0 12
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 2
18855: ST_TO_ADDR
// end ;
18856: GO 18764
18858: POP
18859: POP
18860: GO 18744
18862: POP
18863: POP
// if not list then
18864: LD_VAR 0 13
18868: NOT
18869: IFFALSE 18873
// exit ;
18871: GO 18944
// for i in list do
18873: LD_ADDR_VAR 0 6
18877: PUSH
18878: LD_VAR 0 13
18882: PUSH
18883: FOR_IN
18884: IFFALSE 18942
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_STRING M
18893: PUSH
18894: LD_VAR 0 6
18898: PUSH
18899: LD_INT 1
18901: ARRAY
18902: PUSH
18903: LD_VAR 0 6
18907: PUSH
18908: LD_INT 2
18910: ARRAY
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: PPUSH
18936: CALL_OW 447
18940: GO 18883
18942: POP
18943: POP
// end ;
18944: LD_VAR 0 5
18948: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18949: LD_EXP 70
18953: NOT
18954: IFFALSE 19004
18956: GO 18958
18958: DISABLE
// begin initHack := true ;
18959: LD_ADDR_EXP 70
18963: PUSH
18964: LD_INT 1
18966: ST_TO_ADDR
// hackTanks := [ ] ;
18967: LD_ADDR_EXP 71
18971: PUSH
18972: EMPTY
18973: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18974: LD_ADDR_EXP 72
18978: PUSH
18979: EMPTY
18980: ST_TO_ADDR
// hackLimit := 3 ;
18981: LD_ADDR_EXP 73
18985: PUSH
18986: LD_INT 3
18988: ST_TO_ADDR
// hackDist := 12 ;
18989: LD_ADDR_EXP 74
18993: PUSH
18994: LD_INT 12
18996: ST_TO_ADDR
// hackCounter := [ ] ;
18997: LD_ADDR_EXP 75
19001: PUSH
19002: EMPTY
19003: ST_TO_ADDR
// end ;
19004: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19005: LD_EXP 70
19009: PUSH
19010: LD_INT 34
19012: PUSH
19013: LD_EXP 82
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: AND
19027: IFFALSE 19282
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
// begin enable ;
19036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 34
19044: PUSH
19045: LD_EXP 82
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 69
19058: PUSH
19059: FOR_IN
19060: IFFALSE 19280
// begin if not i in hackTanks then
19062: LD_VAR 0 1
19066: PUSH
19067: LD_EXP 71
19071: IN
19072: NOT
19073: IFFALSE 19156
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19075: LD_ADDR_EXP 71
19079: PUSH
19080: LD_EXP 71
19084: PPUSH
19085: LD_EXP 71
19089: PUSH
19090: LD_INT 1
19092: PLUS
19093: PPUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19104: LD_ADDR_EXP 72
19108: PUSH
19109: LD_EXP 72
19113: PPUSH
19114: LD_EXP 72
19118: PUSH
19119: LD_INT 1
19121: PLUS
19122: PPUSH
19123: EMPTY
19124: PPUSH
19125: CALL_OW 1
19129: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19130: LD_ADDR_EXP 75
19134: PUSH
19135: LD_EXP 75
19139: PPUSH
19140: LD_EXP 75
19144: PUSH
19145: LD_INT 1
19147: PLUS
19148: PPUSH
19149: EMPTY
19150: PPUSH
19151: CALL_OW 1
19155: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 302
19165: NOT
19166: IFFALSE 19179
// begin HackUnlinkAll ( i ) ;
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL 19285 0 1
// continue ;
19177: GO 19059
// end ; HackCheckCapturedStatus ( i ) ;
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL 19728 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19188: LD_ADDR_VAR 0 2
19192: PUSH
19193: LD_INT 81
19195: PUSH
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 255
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 33
19212: PUSH
19213: LD_INT 3
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 91
19222: PUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_EXP 74
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 50
19240: PUSH
19241: EMPTY
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: ST_TO_ADDR
// if not tmp then
19255: LD_VAR 0 2
19259: NOT
19260: IFFALSE 19264
// continue ;
19262: GO 19059
// HackLink ( i , tmp ) ;
19264: LD_VAR 0 1
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: CALL 19421 0 2
// end ;
19278: GO 19059
19280: POP
19281: POP
// end ;
19282: PPOPN 2
19284: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
19289: PPUSH
// if not hack in hackTanks then
19290: LD_VAR 0 1
19294: PUSH
19295: LD_EXP 71
19299: IN
19300: NOT
19301: IFFALSE 19305
// exit ;
19303: GO 19416
// index := GetElementIndex ( hackTanks , hack ) ;
19305: LD_ADDR_VAR 0 4
19309: PUSH
19310: LD_EXP 71
19314: PPUSH
19315: LD_VAR 0 1
19319: PPUSH
19320: CALL 27125 0 2
19324: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19325: LD_EXP 72
19329: PUSH
19330: LD_VAR 0 4
19334: ARRAY
19335: IFFALSE 19416
// begin for i in hackTanksCaptured [ index ] do
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_EXP 72
19346: PUSH
19347: LD_VAR 0 4
19351: ARRAY
19352: PUSH
19353: FOR_IN
19354: IFFALSE 19380
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 2
19372: ARRAY
19373: PPUSH
19374: CALL_OW 235
19378: GO 19353
19380: POP
19381: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19382: LD_ADDR_EXP 72
19386: PUSH
19387: LD_EXP 72
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: EMPTY
19398: PPUSH
19399: CALL_OW 1
19403: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19404: LD_VAR 0 1
19408: PPUSH
19409: LD_INT 0
19411: PPUSH
19412: CALL_OW 505
// end ; end ;
19416: LD_VAR 0 2
19420: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19421: LD_INT 0
19423: PPUSH
19424: PPUSH
19425: PPUSH
// if not hack in hackTanks or not vehicles then
19426: LD_VAR 0 1
19430: PUSH
19431: LD_EXP 71
19435: IN
19436: NOT
19437: PUSH
19438: LD_VAR 0 2
19442: NOT
19443: OR
19444: IFFALSE 19448
// exit ;
19446: GO 19723
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 1
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: CALL 27775 0 4
19473: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19474: LD_ADDR_VAR 0 5
19478: PUSH
19479: LD_EXP 71
19483: PPUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL 27125 0 2
19493: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19494: LD_EXP 72
19498: PUSH
19499: LD_VAR 0 5
19503: ARRAY
19504: PUSH
19505: LD_EXP 73
19509: LESS
19510: IFFALSE 19699
// begin for i := 1 to vehicles do
19512: LD_ADDR_VAR 0 4
19516: PUSH
19517: DOUBLE
19518: LD_INT 1
19520: DEC
19521: ST_TO_ADDR
19522: LD_VAR 0 2
19526: PUSH
19527: FOR_TO
19528: IFFALSE 19697
// begin if hackTanksCaptured [ index ] = hackLimit then
19530: LD_EXP 72
19534: PUSH
19535: LD_VAR 0 5
19539: ARRAY
19540: PUSH
19541: LD_EXP 73
19545: EQUAL
19546: IFFALSE 19550
// break ;
19548: GO 19697
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19550: LD_ADDR_EXP 75
19554: PUSH
19555: LD_EXP 75
19559: PPUSH
19560: LD_VAR 0 5
19564: PPUSH
19565: LD_EXP 75
19569: PUSH
19570: LD_VAR 0 5
19574: ARRAY
19575: PUSH
19576: LD_INT 1
19578: PLUS
19579: PPUSH
19580: CALL_OW 1
19584: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19585: LD_ADDR_EXP 72
19589: PUSH
19590: LD_EXP 72
19594: PPUSH
19595: LD_VAR 0 5
19599: PUSH
19600: LD_EXP 72
19604: PUSH
19605: LD_VAR 0 5
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: PLUS
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: LD_VAR 0 2
19623: PUSH
19624: LD_VAR 0 4
19628: ARRAY
19629: PUSH
19630: LD_VAR 0 2
19634: PUSH
19635: LD_VAR 0 4
19639: ARRAY
19640: PPUSH
19641: CALL_OW 255
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL 27340 0 3
19654: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19655: LD_VAR 0 2
19659: PUSH
19660: LD_VAR 0 4
19664: ARRAY
19665: PPUSH
19666: LD_VAR 0 1
19670: PPUSH
19671: CALL_OW 255
19675: PPUSH
19676: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19680: LD_VAR 0 2
19684: PUSH
19685: LD_VAR 0 4
19689: ARRAY
19690: PPUSH
19691: CALL_OW 141
// end ;
19695: GO 19527
19697: POP
19698: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: LD_EXP 72
19708: PUSH
19709: LD_VAR 0 5
19713: ARRAY
19714: PUSH
19715: LD_INT 0
19717: PLUS
19718: PPUSH
19719: CALL_OW 505
// end ;
19723: LD_VAR 0 3
19727: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
// if not hack in hackTanks then
19734: LD_VAR 0 1
19738: PUSH
19739: LD_EXP 71
19743: IN
19744: NOT
19745: IFFALSE 19749
// exit ;
19747: GO 19989
// index := GetElementIndex ( hackTanks , hack ) ;
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: LD_EXP 71
19758: PPUSH
19759: LD_VAR 0 1
19763: PPUSH
19764: CALL 27125 0 2
19768: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: DOUBLE
19775: LD_EXP 72
19779: PUSH
19780: LD_VAR 0 4
19784: ARRAY
19785: INC
19786: ST_TO_ADDR
19787: LD_INT 1
19789: PUSH
19790: FOR_DOWNTO
19791: IFFALSE 19963
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19793: LD_ADDR_VAR 0 5
19797: PUSH
19798: LD_EXP 72
19802: PUSH
19803: LD_VAR 0 4
19807: ARRAY
19808: PUSH
19809: LD_VAR 0 3
19813: ARRAY
19814: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19815: LD_VAR 0 5
19819: PUSH
19820: LD_INT 1
19822: ARRAY
19823: PPUSH
19824: CALL_OW 302
19828: NOT
19829: PUSH
19830: LD_VAR 0 5
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: PPUSH
19839: CALL_OW 255
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 255
19853: NONEQUAL
19854: OR
19855: IFFALSE 19961
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19857: LD_VAR 0 5
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PPUSH
19866: CALL_OW 305
19870: PUSH
19871: LD_VAR 0 5
19875: PUSH
19876: LD_INT 1
19878: ARRAY
19879: PPUSH
19880: CALL_OW 255
19884: PUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 255
19894: EQUAL
19895: AND
19896: IFFALSE 19920
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19898: LD_VAR 0 5
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PPUSH
19907: LD_VAR 0 5
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: PPUSH
19916: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19920: LD_ADDR_EXP 72
19924: PUSH
19925: LD_EXP 72
19929: PPUSH
19930: LD_VAR 0 4
19934: PPUSH
19935: LD_EXP 72
19939: PUSH
19940: LD_VAR 0 4
19944: ARRAY
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL_OW 3
19955: PPUSH
19956: CALL_OW 1
19960: ST_TO_ADDR
// end ; end ;
19961: GO 19790
19963: POP
19964: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19965: LD_VAR 0 1
19969: PPUSH
19970: LD_EXP 72
19974: PUSH
19975: LD_VAR 0 4
19979: ARRAY
19980: PUSH
19981: LD_INT 0
19983: PLUS
19984: PPUSH
19985: CALL_OW 505
// end ;
19989: LD_VAR 0 2
19993: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
// if not hack in hackTanks then
20000: LD_VAR 0 1
20004: PUSH
20005: LD_EXP 71
20009: IN
20010: NOT
20011: IFFALSE 20015
// exit ;
20013: GO 20100
// index := GetElementIndex ( hackTanks , hack ) ;
20015: LD_ADDR_VAR 0 5
20019: PUSH
20020: LD_EXP 71
20024: PPUSH
20025: LD_VAR 0 1
20029: PPUSH
20030: CALL 27125 0 2
20034: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20035: LD_ADDR_VAR 0 4
20039: PUSH
20040: DOUBLE
20041: LD_INT 1
20043: DEC
20044: ST_TO_ADDR
20045: LD_EXP 72
20049: PUSH
20050: LD_VAR 0 5
20054: ARRAY
20055: PUSH
20056: FOR_TO
20057: IFFALSE 20098
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20059: LD_EXP 72
20063: PUSH
20064: LD_VAR 0 5
20068: ARRAY
20069: PUSH
20070: LD_VAR 0 4
20074: ARRAY
20075: PUSH
20076: LD_INT 1
20078: ARRAY
20079: PUSH
20080: LD_VAR 0 2
20084: EQUAL
20085: IFFALSE 20096
// KillUnit ( vehicle ) ;
20087: LD_VAR 0 2
20091: PPUSH
20092: CALL_OW 66
20096: GO 20056
20098: POP
20099: POP
// end ;
20100: LD_VAR 0 3
20104: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20105: LD_EXP 76
20109: NOT
20110: IFFALSE 20145
20112: GO 20114
20114: DISABLE
// begin initMiner := true ;
20115: LD_ADDR_EXP 76
20119: PUSH
20120: LD_INT 1
20122: ST_TO_ADDR
// minersList := [ ] ;
20123: LD_ADDR_EXP 77
20127: PUSH
20128: EMPTY
20129: ST_TO_ADDR
// minerMinesList := [ ] ;
20130: LD_ADDR_EXP 78
20134: PUSH
20135: EMPTY
20136: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20137: LD_ADDR_EXP 79
20141: PUSH
20142: LD_INT 5
20144: ST_TO_ADDR
// end ;
20145: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20146: LD_EXP 76
20150: PUSH
20151: LD_INT 34
20153: PUSH
20154: LD_EXP 87
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PPUSH
20163: CALL_OW 69
20167: AND
20168: IFFALSE 20631
20170: GO 20172
20172: DISABLE
20173: LD_INT 0
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
// begin enable ;
20179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20180: LD_ADDR_VAR 0 1
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_EXP 87
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: PUSH
20202: FOR_IN
20203: IFFALSE 20275
// begin if not i in minersList then
20205: LD_VAR 0 1
20209: PUSH
20210: LD_EXP 77
20214: IN
20215: NOT
20216: IFFALSE 20273
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20218: LD_ADDR_EXP 77
20222: PUSH
20223: LD_EXP 77
20227: PPUSH
20228: LD_EXP 77
20232: PUSH
20233: LD_INT 1
20235: PLUS
20236: PPUSH
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 1
20246: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20247: LD_ADDR_EXP 78
20251: PUSH
20252: LD_EXP 78
20256: PPUSH
20257: LD_EXP 78
20261: PUSH
20262: LD_INT 1
20264: PLUS
20265: PPUSH
20266: EMPTY
20267: PPUSH
20268: CALL_OW 1
20272: ST_TO_ADDR
// end end ;
20273: GO 20202
20275: POP
20276: POP
// for i := minerMinesList downto 1 do
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: DOUBLE
20283: LD_EXP 78
20287: INC
20288: ST_TO_ADDR
20289: LD_INT 1
20291: PUSH
20292: FOR_DOWNTO
20293: IFFALSE 20629
// begin if IsLive ( minersList [ i ] ) then
20295: LD_EXP 77
20299: PUSH
20300: LD_VAR 0 1
20304: ARRAY
20305: PPUSH
20306: CALL_OW 300
20310: IFFALSE 20338
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20312: LD_EXP 77
20316: PUSH
20317: LD_VAR 0 1
20321: ARRAY
20322: PPUSH
20323: LD_EXP 78
20327: PUSH
20328: LD_VAR 0 1
20332: ARRAY
20333: PPUSH
20334: CALL_OW 505
// if not minerMinesList [ i ] then
20338: LD_EXP 78
20342: PUSH
20343: LD_VAR 0 1
20347: ARRAY
20348: NOT
20349: IFFALSE 20353
// continue ;
20351: GO 20292
// for j := minerMinesList [ i ] downto 1 do
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: DOUBLE
20359: LD_EXP 78
20363: PUSH
20364: LD_VAR 0 1
20368: ARRAY
20369: INC
20370: ST_TO_ADDR
20371: LD_INT 1
20373: PUSH
20374: FOR_DOWNTO
20375: IFFALSE 20625
// begin side := GetSide ( minersList [ i ] ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_EXP 77
20386: PUSH
20387: LD_VAR 0 1
20391: ARRAY
20392: PPUSH
20393: CALL_OW 255
20397: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20398: LD_ADDR_VAR 0 4
20402: PUSH
20403: LD_EXP 78
20407: PUSH
20408: LD_VAR 0 1
20412: ARRAY
20413: PUSH
20414: LD_VAR 0 2
20418: ARRAY
20419: PUSH
20420: LD_INT 1
20422: ARRAY
20423: PPUSH
20424: LD_EXP 78
20428: PUSH
20429: LD_VAR 0 1
20433: ARRAY
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 2
20443: ARRAY
20444: PPUSH
20445: CALL_OW 428
20449: ST_TO_ADDR
// if not tmp then
20450: LD_VAR 0 4
20454: NOT
20455: IFFALSE 20459
// continue ;
20457: GO 20374
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20459: LD_VAR 0 4
20463: PUSH
20464: LD_INT 81
20466: PUSH
20467: LD_VAR 0 3
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: IN
20481: PUSH
20482: LD_EXP 78
20486: PUSH
20487: LD_VAR 0 1
20491: ARRAY
20492: PUSH
20493: LD_VAR 0 2
20497: ARRAY
20498: PUSH
20499: LD_INT 1
20501: ARRAY
20502: PPUSH
20503: LD_EXP 78
20507: PUSH
20508: LD_VAR 0 1
20512: ARRAY
20513: PUSH
20514: LD_VAR 0 2
20518: ARRAY
20519: PUSH
20520: LD_INT 2
20522: ARRAY
20523: PPUSH
20524: CALL_OW 458
20528: AND
20529: IFFALSE 20623
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20531: LD_EXP 78
20535: PUSH
20536: LD_VAR 0 1
20540: ARRAY
20541: PUSH
20542: LD_VAR 0 2
20546: ARRAY
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: PPUSH
20552: LD_EXP 78
20556: PUSH
20557: LD_VAR 0 1
20561: ARRAY
20562: PUSH
20563: LD_VAR 0 2
20567: ARRAY
20568: PUSH
20569: LD_INT 2
20571: ARRAY
20572: PPUSH
20573: LD_VAR 0 3
20577: PPUSH
20578: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20582: LD_ADDR_EXP 78
20586: PUSH
20587: LD_EXP 78
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_EXP 78
20601: PUSH
20602: LD_VAR 0 1
20606: ARRAY
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 3
20617: PPUSH
20618: CALL_OW 1
20622: ST_TO_ADDR
// end ; end ;
20623: GO 20374
20625: POP
20626: POP
// end ;
20627: GO 20292
20629: POP
20630: POP
// end ;
20631: PPOPN 4
20633: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20634: LD_INT 0
20636: PPUSH
20637: PPUSH
// result := false ;
20638: LD_ADDR_VAR 0 4
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 264
20655: PUSH
20656: LD_EXP 87
20660: EQUAL
20661: NOT
20662: IFFALSE 20666
// exit ;
20664: GO 20906
// index := GetElementIndex ( minersList , unit ) ;
20666: LD_ADDR_VAR 0 5
20670: PUSH
20671: LD_EXP 77
20675: PPUSH
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL 27125 0 2
20685: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20686: LD_EXP 78
20690: PUSH
20691: LD_VAR 0 5
20695: ARRAY
20696: PUSH
20697: LD_EXP 79
20701: GREATEREQUAL
20702: IFFALSE 20706
// exit ;
20704: GO 20906
// ComMoveXY ( unit , x , y ) ;
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_VAR 0 2
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20725: LD_INT 35
20727: PPUSH
20728: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: CALL 57189 0 3
20751: NOT
20752: PUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 314
20762: AND
20763: IFFALSE 20767
// exit ;
20765: GO 20906
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL_OW 428
20781: PUSH
20782: LD_VAR 0 1
20786: EQUAL
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 314
20797: NOT
20798: AND
20799: IFFALSE 20725
// PlaySoundXY ( x , y , PlantMine ) ;
20801: LD_VAR 0 2
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: LD_STRING PlantMine
20813: PPUSH
20814: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20818: LD_VAR 0 2
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 255
20837: PPUSH
20838: LD_INT 0
20840: PPUSH
20841: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20845: LD_ADDR_EXP 78
20849: PUSH
20850: LD_EXP 78
20854: PPUSH
20855: LD_VAR 0 5
20859: PUSH
20860: LD_EXP 78
20864: PUSH
20865: LD_VAR 0 5
20869: ARRAY
20870: PUSH
20871: LD_INT 1
20873: PLUS
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PPUSH
20879: LD_VAR 0 2
20883: PUSH
20884: LD_VAR 0 3
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL 27340 0 3
20897: ST_TO_ADDR
// result := true ;
20898: LD_ADDR_VAR 0 4
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// end ;
20906: LD_VAR 0 4
20910: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20911: LD_INT 0
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not unit in minersList then
20916: LD_VAR 0 1
20920: PUSH
20921: LD_EXP 77
20925: IN
20926: NOT
20927: IFFALSE 20931
// exit ;
20929: GO 21323
// index := GetElementIndex ( minersList , unit ) ;
20931: LD_ADDR_VAR 0 6
20935: PUSH
20936: LD_EXP 77
20940: PPUSH
20941: LD_VAR 0 1
20945: PPUSH
20946: CALL 27125 0 2
20950: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: DOUBLE
20957: LD_EXP 78
20961: PUSH
20962: LD_VAR 0 6
20966: ARRAY
20967: INC
20968: ST_TO_ADDR
20969: LD_INT 1
20971: PUSH
20972: FOR_DOWNTO
20973: IFFALSE 21134
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20975: LD_EXP 78
20979: PUSH
20980: LD_VAR 0 6
20984: ARRAY
20985: PUSH
20986: LD_VAR 0 5
20990: ARRAY
20991: PUSH
20992: LD_INT 1
20994: ARRAY
20995: PUSH
20996: LD_VAR 0 2
21000: EQUAL
21001: PUSH
21002: LD_EXP 78
21006: PUSH
21007: LD_VAR 0 6
21011: ARRAY
21012: PUSH
21013: LD_VAR 0 5
21017: ARRAY
21018: PUSH
21019: LD_INT 2
21021: ARRAY
21022: PUSH
21023: LD_VAR 0 3
21027: EQUAL
21028: AND
21029: IFFALSE 21132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21031: LD_EXP 78
21035: PUSH
21036: LD_VAR 0 6
21040: ARRAY
21041: PUSH
21042: LD_VAR 0 5
21046: ARRAY
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: LD_EXP 78
21056: PUSH
21057: LD_VAR 0 6
21061: ARRAY
21062: PUSH
21063: LD_VAR 0 5
21067: ARRAY
21068: PUSH
21069: LD_INT 2
21071: ARRAY
21072: PPUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 255
21082: PPUSH
21083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21087: LD_ADDR_EXP 78
21091: PUSH
21092: LD_EXP 78
21096: PPUSH
21097: LD_VAR 0 6
21101: PPUSH
21102: LD_EXP 78
21106: PUSH
21107: LD_VAR 0 6
21111: ARRAY
21112: PPUSH
21113: LD_VAR 0 5
21117: PPUSH
21118: CALL_OW 3
21122: PPUSH
21123: CALL_OW 1
21127: ST_TO_ADDR
// exit ;
21128: POP
21129: POP
21130: GO 21323
// end ; end ;
21132: GO 20972
21134: POP
21135: POP
// for i := minerMinesList [ index ] downto 1 do
21136: LD_ADDR_VAR 0 5
21140: PUSH
21141: DOUBLE
21142: LD_EXP 78
21146: PUSH
21147: LD_VAR 0 6
21151: ARRAY
21152: INC
21153: ST_TO_ADDR
21154: LD_INT 1
21156: PUSH
21157: FOR_DOWNTO
21158: IFFALSE 21321
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21160: LD_EXP 78
21164: PUSH
21165: LD_VAR 0 6
21169: ARRAY
21170: PUSH
21171: LD_VAR 0 5
21175: ARRAY
21176: PUSH
21177: LD_INT 1
21179: ARRAY
21180: PPUSH
21181: LD_EXP 78
21185: PUSH
21186: LD_VAR 0 6
21190: ARRAY
21191: PUSH
21192: LD_VAR 0 5
21196: ARRAY
21197: PUSH
21198: LD_INT 2
21200: ARRAY
21201: PPUSH
21202: LD_VAR 0 2
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: CALL_OW 298
21216: PUSH
21217: LD_INT 6
21219: LESS
21220: IFFALSE 21319
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21222: LD_EXP 78
21226: PUSH
21227: LD_VAR 0 6
21231: ARRAY
21232: PUSH
21233: LD_VAR 0 5
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: LD_EXP 78
21247: PUSH
21248: LD_VAR 0 6
21252: ARRAY
21253: PUSH
21254: LD_VAR 0 5
21258: ARRAY
21259: PUSH
21260: LD_INT 2
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 255
21273: PPUSH
21274: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21278: LD_ADDR_EXP 78
21282: PUSH
21283: LD_EXP 78
21287: PPUSH
21288: LD_VAR 0 6
21292: PPUSH
21293: LD_EXP 78
21297: PUSH
21298: LD_VAR 0 6
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 5
21308: PPUSH
21309: CALL_OW 3
21313: PPUSH
21314: CALL_OW 1
21318: ST_TO_ADDR
// end ; end ;
21319: GO 21157
21321: POP
21322: POP
// end ;
21323: LD_VAR 0 4
21327: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 264
21348: PUSH
21349: LD_EXP 87
21353: EQUAL
21354: NOT
21355: PUSH
21356: LD_VAR 0 1
21360: PUSH
21361: LD_EXP 77
21365: IN
21366: NOT
21367: OR
21368: IFFALSE 21372
// exit ;
21370: GO 21694
// index := GetElementIndex ( minersList , unit ) ;
21372: LD_ADDR_VAR 0 6
21376: PUSH
21377: LD_EXP 77
21381: PPUSH
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL 27125 0 2
21391: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21392: LD_ADDR_VAR 0 8
21396: PUSH
21397: LD_EXP 79
21401: PUSH
21402: LD_EXP 78
21406: PUSH
21407: LD_VAR 0 6
21411: ARRAY
21412: MINUS
21413: ST_TO_ADDR
// if not minesFreeAmount then
21414: LD_VAR 0 8
21418: NOT
21419: IFFALSE 21423
// exit ;
21421: GO 21694
// tmp := [ ] ;
21423: LD_ADDR_VAR 0 7
21427: PUSH
21428: EMPTY
21429: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: DOUBLE
21436: LD_INT 1
21438: DEC
21439: ST_TO_ADDR
21440: LD_VAR 0 8
21444: PUSH
21445: FOR_TO
21446: IFFALSE 21641
// begin _d := rand ( 0 , 5 ) ;
21448: LD_ADDR_VAR 0 11
21452: PUSH
21453: LD_INT 0
21455: PPUSH
21456: LD_INT 5
21458: PPUSH
21459: CALL_OW 12
21463: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21464: LD_ADDR_VAR 0 12
21468: PUSH
21469: LD_INT 2
21471: PPUSH
21472: LD_INT 6
21474: PPUSH
21475: CALL_OW 12
21479: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21480: LD_ADDR_VAR 0 9
21484: PUSH
21485: LD_VAR 0 2
21489: PPUSH
21490: LD_VAR 0 11
21494: PPUSH
21495: LD_VAR 0 12
21499: PPUSH
21500: CALL_OW 272
21504: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21505: LD_ADDR_VAR 0 10
21509: PUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: LD_VAR 0 11
21519: PPUSH
21520: LD_VAR 0 12
21524: PPUSH
21525: CALL_OW 273
21529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21530: LD_VAR 0 9
21534: PPUSH
21535: LD_VAR 0 10
21539: PPUSH
21540: CALL_OW 488
21544: PUSH
21545: LD_VAR 0 9
21549: PUSH
21550: LD_VAR 0 10
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_VAR 0 7
21563: IN
21564: NOT
21565: AND
21566: PUSH
21567: LD_VAR 0 9
21571: PPUSH
21572: LD_VAR 0 10
21576: PPUSH
21577: CALL_OW 458
21581: NOT
21582: AND
21583: IFFALSE 21625
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21585: LD_ADDR_VAR 0 7
21589: PUSH
21590: LD_VAR 0 7
21594: PPUSH
21595: LD_VAR 0 7
21599: PUSH
21600: LD_INT 1
21602: PLUS
21603: PPUSH
21604: LD_VAR 0 9
21608: PUSH
21609: LD_VAR 0 10
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 1
21622: ST_TO_ADDR
21623: GO 21639
// i := i - 1 ;
21625: LD_ADDR_VAR 0 5
21629: PUSH
21630: LD_VAR 0 5
21634: PUSH
21635: LD_INT 1
21637: MINUS
21638: ST_TO_ADDR
// end ;
21639: GO 21445
21641: POP
21642: POP
// for i in tmp do
21643: LD_ADDR_VAR 0 5
21647: PUSH
21648: LD_VAR 0 7
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21692
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_VAR 0 5
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: PPUSH
21670: LD_VAR 0 5
21674: PUSH
21675: LD_INT 2
21677: ARRAY
21678: PPUSH
21679: CALL 20634 0 3
21683: NOT
21684: IFFALSE 21690
// exit ;
21686: POP
21687: POP
21688: GO 21694
21690: GO 21653
21692: POP
21693: POP
// end ;
21694: LD_VAR 0 4
21698: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21699: LD_INT 0
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
// if not GetClass ( unit ) = class_sniper then
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 257
21717: PUSH
21718: LD_INT 5
21720: EQUAL
21721: NOT
21722: IFFALSE 21726
// exit ;
21724: GO 22114
// dist := 8 ;
21726: LD_ADDR_VAR 0 5
21730: PUSH
21731: LD_INT 8
21733: ST_TO_ADDR
// viewRange := 12 ;
21734: LD_ADDR_VAR 0 7
21738: PUSH
21739: LD_INT 12
21741: ST_TO_ADDR
// side := GetSide ( unit ) ;
21742: LD_ADDR_VAR 0 6
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 255
21756: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21757: LD_INT 61
21759: PPUSH
21760: LD_VAR 0 6
21764: PPUSH
21765: CALL_OW 321
21769: PUSH
21770: LD_INT 2
21772: EQUAL
21773: IFFALSE 21783
// viewRange := 16 ;
21775: LD_ADDR_VAR 0 7
21779: PUSH
21780: LD_INT 16
21782: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_VAR 0 2
21792: PPUSH
21793: LD_VAR 0 3
21797: PPUSH
21798: CALL_OW 297
21802: PUSH
21803: LD_VAR 0 5
21807: GREATER
21808: IFFALSE 21887
// begin ComMoveXY ( unit , x , y ) ;
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21829: LD_INT 35
21831: PPUSH
21832: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21836: LD_VAR 0 1
21840: PPUSH
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL 57189 0 3
21855: NOT
21856: IFFALSE 21860
// exit ;
21858: GO 22114
// until GetDistUnitXY ( unit , x , y ) < dist ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_VAR 0 2
21869: PPUSH
21870: LD_VAR 0 3
21874: PPUSH
21875: CALL_OW 297
21879: PUSH
21880: LD_VAR 0 5
21884: LESS
21885: IFFALSE 21829
// end ; ComTurnXY ( unit , x , y ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 3
21901: PPUSH
21902: CALL_OW 118
// wait ( 5 ) ;
21906: LD_INT 5
21908: PPUSH
21909: CALL_OW 67
// _d := GetDir ( unit ) ;
21913: LD_ADDR_VAR 0 10
21917: PUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 254
21927: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21928: LD_ADDR_VAR 0 8
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 250
21942: PPUSH
21943: LD_VAR 0 10
21947: PPUSH
21948: LD_VAR 0 5
21952: PPUSH
21953: CALL_OW 272
21957: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21958: LD_ADDR_VAR 0 9
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 251
21972: PPUSH
21973: LD_VAR 0 10
21977: PPUSH
21978: LD_VAR 0 5
21982: PPUSH
21983: CALL_OW 273
21987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21988: LD_VAR 0 8
21992: PPUSH
21993: LD_VAR 0 9
21997: PPUSH
21998: CALL_OW 488
22002: NOT
22003: IFFALSE 22007
// exit ;
22005: GO 22114
// ComAnimCustom ( unit , 1 ) ;
22007: LD_VAR 0 1
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22019: LD_VAR 0 8
22023: PPUSH
22024: LD_VAR 0 9
22028: PPUSH
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: CALL_OW 330
// repeat wait ( 1 ) ;
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 316
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 314
22069: OR
22070: PUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 302
22080: NOT
22081: OR
22082: PUSH
22083: LD_VAR 0 1
22087: PPUSH
22088: CALL_OW 301
22092: OR
22093: IFFALSE 22043
// RemoveSeeing ( _x , _y , side ) ;
22095: LD_VAR 0 8
22099: PPUSH
22100: LD_VAR 0 9
22104: PPUSH
22105: LD_VAR 0 6
22109: PPUSH
22110: CALL_OW 331
// end ; end_of_file
22114: LD_VAR 0 4
22118: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22119: LD_VAR 0 1
22123: PUSH
22124: LD_INT 200
22126: DOUBLE
22127: GREATEREQUAL
22128: IFFALSE 22136
22130: LD_INT 299
22132: DOUBLE
22133: LESSEQUAL
22134: IFTRUE 22138
22136: GO 22170
22138: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_VAR 0 2
22148: PPUSH
22149: LD_VAR 0 3
22153: PPUSH
22154: LD_VAR 0 4
22158: PPUSH
22159: LD_VAR 0 5
22163: PPUSH
22164: CALL 18244 0 5
22168: GO 22247
22170: LD_INT 300
22172: DOUBLE
22173: GREATEREQUAL
22174: IFFALSE 22182
22176: LD_INT 399
22178: DOUBLE
22179: LESSEQUAL
22180: IFTRUE 22184
22182: GO 22246
22184: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22185: LD_VAR 0 1
22189: PPUSH
22190: LD_VAR 0 2
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: LD_VAR 0 4
22204: PPUSH
22205: LD_VAR 0 5
22209: PPUSH
22210: LD_VAR 0 6
22214: PPUSH
22215: LD_VAR 0 7
22219: PPUSH
22220: LD_VAR 0 8
22224: PPUSH
22225: LD_VAR 0 9
22229: PPUSH
22230: LD_VAR 0 10
22234: PPUSH
22235: LD_VAR 0 11
22239: PPUSH
22240: CALL 16150 0 11
22244: GO 22247
22246: POP
// end ; end_of_file
22247: PPOPN 11
22249: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22250: LD_INT 0
22252: PPUSH
// ar_miner := 81 ;
22253: LD_ADDR_EXP 87
22257: PUSH
22258: LD_INT 81
22260: ST_TO_ADDR
// ar_crane := 88 ;
22261: LD_ADDR_EXP 86
22265: PUSH
22266: LD_INT 88
22268: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22269: LD_ADDR_EXP 81
22273: PUSH
22274: LD_INT 89
22276: ST_TO_ADDR
// us_hack := 99 ;
22277: LD_ADDR_EXP 82
22281: PUSH
22282: LD_INT 99
22284: ST_TO_ADDR
// us_artillery := 97 ;
22285: LD_ADDR_EXP 83
22289: PUSH
22290: LD_INT 97
22292: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22293: LD_ADDR_EXP 84
22297: PUSH
22298: LD_INT 91
22300: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22301: LD_ADDR_EXP 85
22305: PUSH
22306: LD_INT 92
22308: ST_TO_ADDR
// ru_radar := 98 ;
22309: LD_ADDR_EXP 80
22313: PUSH
22314: LD_INT 98
22316: ST_TO_ADDR
// tech_Artillery := 80 ;
22317: LD_ADDR_EXP 88
22321: PUSH
22322: LD_INT 80
22324: ST_TO_ADDR
// tech_RadMat := 81 ;
22325: LD_ADDR_EXP 89
22329: PUSH
22330: LD_INT 81
22332: ST_TO_ADDR
// tech_BasicTools := 82 ;
22333: LD_ADDR_EXP 90
22337: PUSH
22338: LD_INT 82
22340: ST_TO_ADDR
// tech_Cargo := 83 ;
22341: LD_ADDR_EXP 91
22345: PUSH
22346: LD_INT 83
22348: ST_TO_ADDR
// tech_Track := 84 ;
22349: LD_ADDR_EXP 92
22353: PUSH
22354: LD_INT 84
22356: ST_TO_ADDR
// tech_Crane := 85 ;
22357: LD_ADDR_EXP 93
22361: PUSH
22362: LD_INT 85
22364: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22365: LD_ADDR_EXP 94
22369: PUSH
22370: LD_INT 86
22372: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22373: LD_ADDR_EXP 95
22377: PUSH
22378: LD_INT 87
22380: ST_TO_ADDR
// end ;
22381: LD_VAR 0 1
22385: RET
// every 1 do
22386: GO 22388
22388: DISABLE
// InitGlobalVariables ; end_of_file
22389: CALL 22250 0 0
22393: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22394: LD_INT 0
22396: PPUSH
22397: PPUSH
// if exist_mode then
22398: LD_VAR 0 2
22402: IFFALSE 22427
// unit := CreateCharacter ( prefix & ident ) else
22404: LD_ADDR_VAR 0 5
22408: PUSH
22409: LD_VAR 0 3
22413: PUSH
22414: LD_VAR 0 1
22418: STR
22419: PPUSH
22420: CALL_OW 34
22424: ST_TO_ADDR
22425: GO 22442
// unit := NewCharacter ( ident ) ;
22427: LD_ADDR_VAR 0 5
22431: PUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 25
22441: ST_TO_ADDR
// result := unit ;
22442: LD_ADDR_VAR 0 4
22446: PUSH
22447: LD_VAR 0 5
22451: ST_TO_ADDR
// end ;
22452: LD_VAR 0 4
22456: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22457: LD_INT 0
22459: PPUSH
22460: PPUSH
// if not side or not nation then
22461: LD_VAR 0 1
22465: NOT
22466: PUSH
22467: LD_VAR 0 2
22471: NOT
22472: OR
22473: IFFALSE 22477
// exit ;
22475: GO 23241
// case nation of nation_american :
22477: LD_VAR 0 2
22481: PUSH
22482: LD_INT 1
22484: DOUBLE
22485: EQUAL
22486: IFTRUE 22490
22488: GO 22704
22490: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22491: LD_ADDR_VAR 0 4
22495: PUSH
22496: LD_INT 35
22498: PUSH
22499: LD_INT 45
22501: PUSH
22502: LD_INT 46
22504: PUSH
22505: LD_INT 47
22507: PUSH
22508: LD_INT 82
22510: PUSH
22511: LD_INT 83
22513: PUSH
22514: LD_INT 84
22516: PUSH
22517: LD_INT 85
22519: PUSH
22520: LD_INT 86
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 6
22531: PUSH
22532: LD_INT 15
22534: PUSH
22535: LD_INT 16
22537: PUSH
22538: LD_INT 7
22540: PUSH
22541: LD_INT 12
22543: PUSH
22544: LD_INT 13
22546: PUSH
22547: LD_INT 10
22549: PUSH
22550: LD_INT 14
22552: PUSH
22553: LD_INT 20
22555: PUSH
22556: LD_INT 21
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 32
22567: PUSH
22568: LD_INT 27
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: LD_INT 69
22576: PUSH
22577: LD_INT 39
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 40
22585: PUSH
22586: LD_INT 48
22588: PUSH
22589: LD_INT 49
22591: PUSH
22592: LD_INT 50
22594: PUSH
22595: LD_INT 51
22597: PUSH
22598: LD_INT 52
22600: PUSH
22601: LD_INT 53
22603: PUSH
22604: LD_INT 54
22606: PUSH
22607: LD_INT 55
22609: PUSH
22610: LD_INT 56
22612: PUSH
22613: LD_INT 57
22615: PUSH
22616: LD_INT 58
22618: PUSH
22619: LD_INT 59
22621: PUSH
22622: LD_INT 60
22624: PUSH
22625: LD_INT 61
22627: PUSH
22628: LD_INT 62
22630: PUSH
22631: LD_INT 80
22633: PUSH
22634: LD_INT 82
22636: PUSH
22637: LD_INT 83
22639: PUSH
22640: LD_INT 84
22642: PUSH
22643: LD_INT 85
22645: PUSH
22646: LD_INT 86
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: ST_TO_ADDR
22702: GO 23165
22704: LD_INT 2
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22934
22712: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_INT 35
22720: PUSH
22721: LD_INT 45
22723: PUSH
22724: LD_INT 46
22726: PUSH
22727: LD_INT 47
22729: PUSH
22730: LD_INT 82
22732: PUSH
22733: LD_INT 83
22735: PUSH
22736: LD_INT 84
22738: PUSH
22739: LD_INT 85
22741: PUSH
22742: LD_INT 87
22744: PUSH
22745: LD_INT 70
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 11
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: LD_INT 4
22759: PUSH
22760: LD_INT 5
22762: PUSH
22763: LD_INT 6
22765: PUSH
22766: LD_INT 15
22768: PUSH
22769: LD_INT 18
22771: PUSH
22772: LD_INT 7
22774: PUSH
22775: LD_INT 17
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: LD_INT 20
22783: PUSH
22784: LD_INT 21
22786: PUSH
22787: LD_INT 22
22789: PUSH
22790: LD_INT 72
22792: PUSH
22793: LD_INT 26
22795: PUSH
22796: LD_INT 69
22798: PUSH
22799: LD_INT 39
22801: PUSH
22802: LD_INT 40
22804: PUSH
22805: LD_INT 41
22807: PUSH
22808: LD_INT 42
22810: PUSH
22811: LD_INT 43
22813: PUSH
22814: LD_INT 48
22816: PUSH
22817: LD_INT 49
22819: PUSH
22820: LD_INT 50
22822: PUSH
22823: LD_INT 51
22825: PUSH
22826: LD_INT 52
22828: PUSH
22829: LD_INT 53
22831: PUSH
22832: LD_INT 54
22834: PUSH
22835: LD_INT 55
22837: PUSH
22838: LD_INT 56
22840: PUSH
22841: LD_INT 60
22843: PUSH
22844: LD_INT 61
22846: PUSH
22847: LD_INT 62
22849: PUSH
22850: LD_INT 66
22852: PUSH
22853: LD_INT 67
22855: PUSH
22856: LD_INT 68
22858: PUSH
22859: LD_INT 81
22861: PUSH
22862: LD_INT 82
22864: PUSH
22865: LD_INT 83
22867: PUSH
22868: LD_INT 84
22870: PUSH
22871: LD_INT 85
22873: PUSH
22874: LD_INT 87
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
22932: GO 23165
22934: LD_INT 3
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 23164
22942: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22943: LD_ADDR_VAR 0 4
22947: PUSH
22948: LD_INT 46
22950: PUSH
22951: LD_INT 47
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 82
22962: PUSH
22963: LD_INT 83
22965: PUSH
22966: LD_INT 84
22968: PUSH
22969: LD_INT 85
22971: PUSH
22972: LD_INT 86
22974: PUSH
22975: LD_INT 11
22977: PUSH
22978: LD_INT 9
22980: PUSH
22981: LD_INT 20
22983: PUSH
22984: LD_INT 19
22986: PUSH
22987: LD_INT 21
22989: PUSH
22990: LD_INT 24
22992: PUSH
22993: LD_INT 22
22995: PUSH
22996: LD_INT 25
22998: PUSH
22999: LD_INT 28
23001: PUSH
23002: LD_INT 29
23004: PUSH
23005: LD_INT 30
23007: PUSH
23008: LD_INT 31
23010: PUSH
23011: LD_INT 37
23013: PUSH
23014: LD_INT 38
23016: PUSH
23017: LD_INT 32
23019: PUSH
23020: LD_INT 27
23022: PUSH
23023: LD_INT 33
23025: PUSH
23026: LD_INT 69
23028: PUSH
23029: LD_INT 39
23031: PUSH
23032: LD_INT 34
23034: PUSH
23035: LD_INT 40
23037: PUSH
23038: LD_INT 71
23040: PUSH
23041: LD_INT 23
23043: PUSH
23044: LD_INT 44
23046: PUSH
23047: LD_INT 48
23049: PUSH
23050: LD_INT 49
23052: PUSH
23053: LD_INT 50
23055: PUSH
23056: LD_INT 51
23058: PUSH
23059: LD_INT 52
23061: PUSH
23062: LD_INT 53
23064: PUSH
23065: LD_INT 54
23067: PUSH
23068: LD_INT 55
23070: PUSH
23071: LD_INT 56
23073: PUSH
23074: LD_INT 57
23076: PUSH
23077: LD_INT 58
23079: PUSH
23080: LD_INT 59
23082: PUSH
23083: LD_INT 63
23085: PUSH
23086: LD_INT 64
23088: PUSH
23089: LD_INT 65
23091: PUSH
23092: LD_INT 82
23094: PUSH
23095: LD_INT 83
23097: PUSH
23098: LD_INT 84
23100: PUSH
23101: LD_INT 85
23103: PUSH
23104: LD_INT 86
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: ST_TO_ADDR
23162: GO 23165
23164: POP
// if state > - 1 and state < 3 then
23165: LD_VAR 0 3
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: GREATER
23174: PUSH
23175: LD_VAR 0 3
23179: PUSH
23180: LD_INT 3
23182: LESS
23183: AND
23184: IFFALSE 23241
// for i in result do
23186: LD_ADDR_VAR 0 5
23190: PUSH
23191: LD_VAR 0 4
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23239
// if GetTech ( i , side ) <> state then
23199: LD_VAR 0 5
23203: PPUSH
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 321
23213: PUSH
23214: LD_VAR 0 3
23218: NONEQUAL
23219: IFFALSE 23237
// result := result diff i ;
23221: LD_ADDR_VAR 0 4
23225: PUSH
23226: LD_VAR 0 4
23230: PUSH
23231: LD_VAR 0 5
23235: DIFF
23236: ST_TO_ADDR
23237: GO 23196
23239: POP
23240: POP
// end ;
23241: LD_VAR 0 4
23245: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
23250: PPUSH
// result := true ;
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: LD_INT 1
23258: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23259: LD_ADDR_VAR 0 5
23263: PUSH
23264: LD_VAR 0 2
23268: PPUSH
23269: CALL_OW 480
23273: ST_TO_ADDR
// if not tmp then
23274: LD_VAR 0 5
23278: NOT
23279: IFFALSE 23283
// exit ;
23281: GO 23332
// for i in tmp do
23283: LD_ADDR_VAR 0 4
23287: PUSH
23288: LD_VAR 0 5
23292: PUSH
23293: FOR_IN
23294: IFFALSE 23330
// if GetTech ( i , side ) <> state_researched then
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 321
23310: PUSH
23311: LD_INT 2
23313: NONEQUAL
23314: IFFALSE 23328
// begin result := false ;
23316: LD_ADDR_VAR 0 3
23320: PUSH
23321: LD_INT 0
23323: ST_TO_ADDR
// exit ;
23324: POP
23325: POP
23326: GO 23332
// end ;
23328: GO 23293
23330: POP
23331: POP
// end ;
23332: LD_VAR 0 3
23336: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23337: LD_INT 0
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23352: LD_VAR 0 1
23356: NOT
23357: PUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 257
23367: PUSH
23368: LD_INT 9
23370: NONEQUAL
23371: OR
23372: IFFALSE 23376
// exit ;
23374: GO 23949
// side := GetSide ( unit ) ;
23376: LD_ADDR_VAR 0 9
23380: PUSH
23381: LD_VAR 0 1
23385: PPUSH
23386: CALL_OW 255
23390: ST_TO_ADDR
// tech_space := tech_spacanom ;
23391: LD_ADDR_VAR 0 12
23395: PUSH
23396: LD_INT 29
23398: ST_TO_ADDR
// tech_time := tech_taurad ;
23399: LD_ADDR_VAR 0 13
23403: PUSH
23404: LD_INT 28
23406: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23407: LD_ADDR_VAR 0 11
23411: PUSH
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 310
23421: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23422: LD_VAR 0 11
23426: PPUSH
23427: CALL_OW 247
23431: PUSH
23432: LD_INT 2
23434: EQUAL
23435: IFFALSE 23439
// exit ;
23437: GO 23949
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23439: LD_ADDR_VAR 0 8
23443: PUSH
23444: LD_INT 81
23446: PUSH
23447: LD_VAR 0 9
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 3
23458: PUSH
23459: LD_INT 21
23461: PUSH
23462: LD_INT 3
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PPUSH
23477: CALL_OW 69
23481: ST_TO_ADDR
// if not tmp then
23482: LD_VAR 0 8
23486: NOT
23487: IFFALSE 23491
// exit ;
23489: GO 23949
// if in_unit then
23491: LD_VAR 0 11
23495: IFFALSE 23519
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23497: LD_ADDR_VAR 0 10
23501: PUSH
23502: LD_VAR 0 8
23506: PPUSH
23507: LD_VAR 0 11
23511: PPUSH
23512: CALL_OW 74
23516: ST_TO_ADDR
23517: GO 23539
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23519: LD_ADDR_VAR 0 10
23523: PUSH
23524: LD_VAR 0 8
23528: PPUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: CALL_OW 74
23538: ST_TO_ADDR
// if not enemy then
23539: LD_VAR 0 10
23543: NOT
23544: IFFALSE 23548
// exit ;
23546: GO 23949
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23548: LD_VAR 0 11
23552: PUSH
23553: LD_VAR 0 11
23557: PPUSH
23558: LD_VAR 0 10
23562: PPUSH
23563: CALL_OW 296
23567: PUSH
23568: LD_INT 13
23570: GREATER
23571: AND
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: LD_VAR 0 10
23582: PPUSH
23583: CALL_OW 296
23587: PUSH
23588: LD_INT 12
23590: GREATER
23591: OR
23592: IFFALSE 23596
// exit ;
23594: GO 23949
// missile := [ 1 ] ;
23596: LD_ADDR_VAR 0 14
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23607: LD_VAR 0 9
23611: PPUSH
23612: LD_VAR 0 12
23616: PPUSH
23617: CALL_OW 325
23621: IFFALSE 23650
// missile := Insert ( missile , missile + 1 , 2 ) ;
23623: LD_ADDR_VAR 0 14
23627: PUSH
23628: LD_VAR 0 14
23632: PPUSH
23633: LD_VAR 0 14
23637: PUSH
23638: LD_INT 1
23640: PLUS
23641: PPUSH
23642: LD_INT 2
23644: PPUSH
23645: CALL_OW 2
23649: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23650: LD_VAR 0 9
23654: PPUSH
23655: LD_VAR 0 13
23659: PPUSH
23660: CALL_OW 325
23664: PUSH
23665: LD_VAR 0 10
23669: PPUSH
23670: CALL_OW 255
23674: PPUSH
23675: LD_VAR 0 13
23679: PPUSH
23680: CALL_OW 325
23684: NOT
23685: AND
23686: IFFALSE 23715
// missile := Insert ( missile , missile + 1 , 3 ) ;
23688: LD_ADDR_VAR 0 14
23692: PUSH
23693: LD_VAR 0 14
23697: PPUSH
23698: LD_VAR 0 14
23702: PUSH
23703: LD_INT 1
23705: PLUS
23706: PPUSH
23707: LD_INT 3
23709: PPUSH
23710: CALL_OW 2
23714: ST_TO_ADDR
// if missile < 2 then
23715: LD_VAR 0 14
23719: PUSH
23720: LD_INT 2
23722: LESS
23723: IFFALSE 23727
// exit ;
23725: GO 23949
// x := GetX ( enemy ) ;
23727: LD_ADDR_VAR 0 4
23731: PUSH
23732: LD_VAR 0 10
23736: PPUSH
23737: CALL_OW 250
23741: ST_TO_ADDR
// y := GetY ( enemy ) ;
23742: LD_ADDR_VAR 0 5
23746: PUSH
23747: LD_VAR 0 10
23751: PPUSH
23752: CALL_OW 251
23756: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23757: LD_ADDR_VAR 0 6
23761: PUSH
23762: LD_VAR 0 4
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: CALL_OW 12
23778: PLUS
23779: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23780: LD_ADDR_VAR 0 7
23784: PUSH
23785: LD_VAR 0 5
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 12
23801: PLUS
23802: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23803: LD_VAR 0 6
23807: PPUSH
23808: LD_VAR 0 7
23812: PPUSH
23813: CALL_OW 488
23817: NOT
23818: IFFALSE 23840
// begin _x := x ;
23820: LD_ADDR_VAR 0 6
23824: PUSH
23825: LD_VAR 0 4
23829: ST_TO_ADDR
// _y := y ;
23830: LD_ADDR_VAR 0 7
23834: PUSH
23835: LD_VAR 0 5
23839: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23840: LD_ADDR_VAR 0 3
23844: PUSH
23845: LD_INT 1
23847: PPUSH
23848: LD_VAR 0 14
23852: PPUSH
23853: CALL_OW 12
23857: ST_TO_ADDR
// case i of 1 :
23858: LD_VAR 0 3
23862: PUSH
23863: LD_INT 1
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23888
23871: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23872: LD_VAR 0 1
23876: PPUSH
23877: LD_VAR 0 10
23881: PPUSH
23882: CALL_OW 115
23886: GO 23949
23888: LD_INT 2
23890: DOUBLE
23891: EQUAL
23892: IFTRUE 23896
23894: GO 23918
23896: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_VAR 0 6
23906: PPUSH
23907: LD_VAR 0 7
23911: PPUSH
23912: CALL_OW 153
23916: GO 23949
23918: LD_INT 3
23920: DOUBLE
23921: EQUAL
23922: IFTRUE 23926
23924: GO 23948
23926: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23927: LD_VAR 0 1
23931: PPUSH
23932: LD_VAR 0 6
23936: PPUSH
23937: LD_VAR 0 7
23941: PPUSH
23942: CALL_OW 154
23946: GO 23949
23948: POP
// end ;
23949: LD_VAR 0 2
23953: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23954: LD_INT 0
23956: PPUSH
23957: PPUSH
23958: PPUSH
23959: PPUSH
23960: PPUSH
23961: PPUSH
// if not unit or not building then
23962: LD_VAR 0 1
23966: NOT
23967: PUSH
23968: LD_VAR 0 2
23972: NOT
23973: OR
23974: IFFALSE 23978
// exit ;
23976: GO 24136
// x := GetX ( building ) ;
23978: LD_ADDR_VAR 0 5
23982: PUSH
23983: LD_VAR 0 2
23987: PPUSH
23988: CALL_OW 250
23992: ST_TO_ADDR
// y := GetY ( building ) ;
23993: LD_ADDR_VAR 0 6
23997: PUSH
23998: LD_VAR 0 2
24002: PPUSH
24003: CALL_OW 251
24007: ST_TO_ADDR
// for i = 0 to 5 do
24008: LD_ADDR_VAR 0 4
24012: PUSH
24013: DOUBLE
24014: LD_INT 0
24016: DEC
24017: ST_TO_ADDR
24018: LD_INT 5
24020: PUSH
24021: FOR_TO
24022: IFFALSE 24134
// begin _x := ShiftX ( x , i , 3 ) ;
24024: LD_ADDR_VAR 0 7
24028: PUSH
24029: LD_VAR 0 5
24033: PPUSH
24034: LD_VAR 0 4
24038: PPUSH
24039: LD_INT 3
24041: PPUSH
24042: CALL_OW 272
24046: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24047: LD_ADDR_VAR 0 8
24051: PUSH
24052: LD_VAR 0 6
24056: PPUSH
24057: LD_VAR 0 4
24061: PPUSH
24062: LD_INT 3
24064: PPUSH
24065: CALL_OW 273
24069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24070: LD_VAR 0 7
24074: PPUSH
24075: LD_VAR 0 8
24079: PPUSH
24080: CALL_OW 488
24084: NOT
24085: IFFALSE 24089
// continue ;
24087: GO 24021
// if HexInfo ( _x , _y ) = 0 then
24089: LD_VAR 0 7
24093: PPUSH
24094: LD_VAR 0 8
24098: PPUSH
24099: CALL_OW 428
24103: PUSH
24104: LD_INT 0
24106: EQUAL
24107: IFFALSE 24132
// begin ComMoveXY ( unit , _x , _y ) ;
24109: LD_VAR 0 1
24113: PPUSH
24114: LD_VAR 0 7
24118: PPUSH
24119: LD_VAR 0 8
24123: PPUSH
24124: CALL_OW 111
// exit ;
24128: POP
24129: POP
24130: GO 24136
// end ; end ;
24132: GO 24021
24134: POP
24135: POP
// end ;
24136: LD_VAR 0 3
24140: RET
// export function ScanBase ( side , base_area ) ; begin
24141: LD_INT 0
24143: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24144: LD_ADDR_VAR 0 3
24148: PUSH
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_INT 81
24156: PUSH
24157: LD_VAR 0 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 70
24170: ST_TO_ADDR
// end ;
24171: LD_VAR 0 3
24175: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24176: LD_INT 0
24178: PPUSH
24179: PPUSH
24180: PPUSH
24181: PPUSH
// result := false ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_INT 0
24189: ST_TO_ADDR
// side := GetSide ( unit ) ;
24190: LD_ADDR_VAR 0 3
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 255
24204: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_VAR 0 1
24214: PPUSH
24215: CALL_OW 248
24219: ST_TO_ADDR
// case nat of 1 :
24220: LD_VAR 0 4
24224: PUSH
24225: LD_INT 1
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// tech := tech_lassight ; 2 :
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_INT 12
24241: ST_TO_ADDR
24242: GO 24283
24244: LD_INT 2
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// tech := tech_mortar ; 3 :
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: LD_INT 41
24260: ST_TO_ADDR
24261: GO 24283
24263: LD_INT 3
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// tech := tech_bazooka ; end ;
24272: LD_ADDR_VAR 0 5
24276: PUSH
24277: LD_INT 44
24279: ST_TO_ADDR
24280: GO 24283
24282: POP
// if Researched ( side , tech ) then
24283: LD_VAR 0 3
24287: PPUSH
24288: LD_VAR 0 5
24292: PPUSH
24293: CALL_OW 325
24297: IFFALSE 24324
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_INT 5
24306: PUSH
24307: LD_INT 8
24309: PUSH
24310: LD_INT 9
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: PUSH
24318: LD_VAR 0 4
24322: ARRAY
24323: ST_TO_ADDR
// end ;
24324: LD_VAR 0 2
24328: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24329: LD_INT 0
24331: PPUSH
24332: PPUSH
24333: PPUSH
// if not mines then
24334: LD_VAR 0 2
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 24487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24343: LD_ADDR_VAR 0 5
24347: PUSH
24348: LD_INT 81
24350: PUSH
24351: LD_VAR 0 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 21
24365: PUSH
24366: LD_INT 3
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: ST_TO_ADDR
// for i in mines do
24386: LD_ADDR_VAR 0 4
24390: PUSH
24391: LD_VAR 0 2
24395: PUSH
24396: FOR_IN
24397: IFFALSE 24485
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24399: LD_VAR 0 4
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PPUSH
24408: LD_VAR 0 4
24412: PUSH
24413: LD_INT 2
24415: ARRAY
24416: PPUSH
24417: CALL_OW 458
24421: NOT
24422: IFFALSE 24426
// continue ;
24424: GO 24396
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24426: LD_VAR 0 4
24430: PUSH
24431: LD_INT 1
24433: ARRAY
24434: PPUSH
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 2
24442: ARRAY
24443: PPUSH
24444: CALL_OW 428
24448: PUSH
24449: LD_VAR 0 5
24453: IN
24454: IFFALSE 24483
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24456: LD_VAR 0 4
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 4
24469: PUSH
24470: LD_INT 2
24472: ARRAY
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 456
// end ;
24483: GO 24396
24485: POP
24486: POP
// end ;
24487: LD_VAR 0 3
24491: RET
// export function Count ( array ) ; var i ; begin
24492: LD_INT 0
24494: PPUSH
24495: PPUSH
// result := 0 ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 0
24503: ST_TO_ADDR
// for i in array do
24504: LD_ADDR_VAR 0 3
24508: PUSH
24509: LD_VAR 0 1
24513: PUSH
24514: FOR_IN
24515: IFFALSE 24539
// if i then
24517: LD_VAR 0 3
24521: IFFALSE 24537
// result := result + 1 ;
24523: LD_ADDR_VAR 0 2
24527: PUSH
24528: LD_VAR 0 2
24532: PUSH
24533: LD_INT 1
24535: PLUS
24536: ST_TO_ADDR
24537: GO 24514
24539: POP
24540: POP
// end ;
24541: LD_VAR 0 2
24545: RET
// export function IsEmpty ( building ) ; begin
24546: LD_INT 0
24548: PPUSH
// if not building then
24549: LD_VAR 0 1
24553: NOT
24554: IFFALSE 24558
// exit ;
24556: GO 24601
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24558: LD_ADDR_VAR 0 2
24562: PUSH
24563: LD_VAR 0 1
24567: PUSH
24568: LD_INT 22
24570: PUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 255
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 58
24587: PUSH
24588: EMPTY
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PPUSH
24595: CALL_OW 69
24599: IN
24600: ST_TO_ADDR
// end ;
24601: LD_VAR 0 2
24605: RET
// export function IsNotFull ( building ) ; begin
24606: LD_INT 0
24608: PPUSH
// if not building then
24609: LD_VAR 0 1
24613: NOT
24614: IFFALSE 24618
// exit ;
24616: GO 24637
// result := UnitsInside ( building ) < 6 ;
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_VAR 0 1
24627: PPUSH
24628: CALL_OW 313
24632: PUSH
24633: LD_INT 6
24635: LESS
24636: ST_TO_ADDR
// end ;
24637: LD_VAR 0 2
24641: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24642: LD_INT 0
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
// tmp := [ ] ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: EMPTY
24654: ST_TO_ADDR
// list := [ ] ;
24655: LD_ADDR_VAR 0 5
24659: PUSH
24660: EMPTY
24661: ST_TO_ADDR
// for i = 16 to 25 do
24662: LD_ADDR_VAR 0 4
24666: PUSH
24667: DOUBLE
24668: LD_INT 16
24670: DEC
24671: ST_TO_ADDR
24672: LD_INT 25
24674: PUSH
24675: FOR_TO
24676: IFFALSE 24749
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: LD_VAR 0 3
24687: PUSH
24688: LD_INT 22
24690: PUSH
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 255
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 91
24707: PUSH
24708: LD_VAR 0 1
24712: PUSH
24713: LD_INT 6
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 30
24723: PUSH
24724: LD_VAR 0 4
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: PPUSH
24741: CALL_OW 69
24745: ADD
24746: ST_TO_ADDR
24747: GO 24675
24749: POP
24750: POP
// for i = 1 to tmp do
24751: LD_ADDR_VAR 0 4
24755: PUSH
24756: DOUBLE
24757: LD_INT 1
24759: DEC
24760: ST_TO_ADDR
24761: LD_VAR 0 3
24765: PUSH
24766: FOR_TO
24767: IFFALSE 24855
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24769: LD_ADDR_VAR 0 5
24773: PUSH
24774: LD_VAR 0 5
24778: PUSH
24779: LD_VAR 0 3
24783: PUSH
24784: LD_VAR 0 4
24788: ARRAY
24789: PPUSH
24790: CALL_OW 266
24794: PUSH
24795: LD_VAR 0 3
24799: PUSH
24800: LD_VAR 0 4
24804: ARRAY
24805: PPUSH
24806: CALL_OW 250
24810: PUSH
24811: LD_VAR 0 3
24815: PUSH
24816: LD_VAR 0 4
24820: ARRAY
24821: PPUSH
24822: CALL_OW 251
24826: PUSH
24827: LD_VAR 0 3
24831: PUSH
24832: LD_VAR 0 4
24836: ARRAY
24837: PPUSH
24838: CALL_OW 254
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: ADD
24852: ST_TO_ADDR
24853: GO 24766
24855: POP
24856: POP
// result := list ;
24857: LD_ADDR_VAR 0 2
24861: PUSH
24862: LD_VAR 0 5
24866: ST_TO_ADDR
// end ;
24867: LD_VAR 0 2
24871: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// if not factory then
24881: LD_VAR 0 1
24885: NOT
24886: IFFALSE 24890
// exit ;
24888: GO 25483
// if control = control_apeman then
24890: LD_VAR 0 4
24894: PUSH
24895: LD_INT 5
24897: EQUAL
24898: IFFALSE 25007
// begin tmp := UnitsInside ( factory ) ;
24900: LD_ADDR_VAR 0 8
24904: PUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 313
24914: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24915: LD_VAR 0 8
24919: PPUSH
24920: LD_INT 25
24922: PUSH
24923: LD_INT 12
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 72
24934: NOT
24935: IFFALSE 24945
// control := control_manual ;
24937: LD_ADDR_VAR 0 4
24941: PUSH
24942: LD_INT 1
24944: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24945: LD_ADDR_VAR 0 8
24949: PUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL 24642 0 1
24959: ST_TO_ADDR
// if tmp then
24960: LD_VAR 0 8
24964: IFFALSE 25007
// begin for i in tmp do
24966: LD_ADDR_VAR 0 7
24970: PUSH
24971: LD_VAR 0 8
24975: PUSH
24976: FOR_IN
24977: IFFALSE 25005
// if i [ 1 ] = b_ext_radio then
24979: LD_VAR 0 7
24983: PUSH
24984: LD_INT 1
24986: ARRAY
24987: PUSH
24988: LD_INT 22
24990: EQUAL
24991: IFFALSE 25003
// begin control := control_remote ;
24993: LD_ADDR_VAR 0 4
24997: PUSH
24998: LD_INT 2
25000: ST_TO_ADDR
// break ;
25001: GO 25005
// end ;
25003: GO 24976
25005: POP
25006: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 2
25016: PPUSH
25017: LD_VAR 0 3
25021: PPUSH
25022: LD_VAR 0 4
25026: PPUSH
25027: LD_VAR 0 5
25031: PPUSH
25032: CALL_OW 448
25036: IFFALSE 25071
// begin result := [ chassis , engine , control , weapon ] ;
25038: LD_ADDR_VAR 0 6
25042: PUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_VAR 0 3
25052: PUSH
25053: LD_VAR 0 4
25057: PUSH
25058: LD_VAR 0 5
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// exit ;
25069: GO 25483
// end ; _chassis := AvailableChassisList ( factory ) ;
25071: LD_ADDR_VAR 0 9
25075: PUSH
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL_OW 475
25085: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25086: LD_ADDR_VAR 0 11
25090: PUSH
25091: LD_VAR 0 1
25095: PPUSH
25096: CALL_OW 476
25100: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25101: LD_ADDR_VAR 0 12
25105: PUSH
25106: LD_VAR 0 1
25110: PPUSH
25111: CALL_OW 477
25115: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25116: LD_ADDR_VAR 0 10
25120: PUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 478
25130: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25131: LD_VAR 0 9
25135: NOT
25136: PUSH
25137: LD_VAR 0 11
25141: NOT
25142: OR
25143: PUSH
25144: LD_VAR 0 12
25148: NOT
25149: OR
25150: PUSH
25151: LD_VAR 0 10
25155: NOT
25156: OR
25157: IFFALSE 25192
// begin result := [ chassis , engine , control , weapon ] ;
25159: LD_ADDR_VAR 0 6
25163: PUSH
25164: LD_VAR 0 2
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_VAR 0 4
25178: PUSH
25179: LD_VAR 0 5
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// exit ;
25190: GO 25483
// end ; if not chassis in _chassis then
25192: LD_VAR 0 2
25196: PUSH
25197: LD_VAR 0 9
25201: IN
25202: NOT
25203: IFFALSE 25229
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25205: LD_ADDR_VAR 0 2
25209: PUSH
25210: LD_VAR 0 9
25214: PUSH
25215: LD_INT 1
25217: PPUSH
25218: LD_VAR 0 9
25222: PPUSH
25223: CALL_OW 12
25227: ARRAY
25228: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25229: LD_VAR 0 2
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL 25488 0 2
25243: NOT
25244: IFFALSE 25303
// repeat engine := _engine [ 1 ] ;
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_VAR 0 11
25255: PUSH
25256: LD_INT 1
25258: ARRAY
25259: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25260: LD_ADDR_VAR 0 11
25264: PUSH
25265: LD_VAR 0 11
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 3
25277: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25278: LD_VAR 0 2
25282: PPUSH
25283: LD_VAR 0 3
25287: PPUSH
25288: CALL 25488 0 2
25292: PUSH
25293: LD_VAR 0 11
25297: PUSH
25298: EMPTY
25299: EQUAL
25300: OR
25301: IFFALSE 25246
// if not control in _control then
25303: LD_VAR 0 4
25307: PUSH
25308: LD_VAR 0 12
25312: IN
25313: NOT
25314: IFFALSE 25340
// control := _control [ rand ( 1 , _control ) ] ;
25316: LD_ADDR_VAR 0 4
25320: PUSH
25321: LD_VAR 0 12
25325: PUSH
25326: LD_INT 1
25328: PPUSH
25329: LD_VAR 0 12
25333: PPUSH
25334: CALL_OW 12
25338: ARRAY
25339: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_VAR 0 5
25349: PPUSH
25350: CALL 25708 0 2
25354: NOT
25355: IFFALSE 25414
// repeat weapon := _weapon [ 1 ] ;
25357: LD_ADDR_VAR 0 5
25361: PUSH
25362: LD_VAR 0 10
25366: PUSH
25367: LD_INT 1
25369: ARRAY
25370: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25371: LD_ADDR_VAR 0 10
25375: PUSH
25376: LD_VAR 0 10
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 3
25388: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25389: LD_VAR 0 2
25393: PPUSH
25394: LD_VAR 0 5
25398: PPUSH
25399: CALL 25708 0 2
25403: PUSH
25404: LD_VAR 0 10
25408: PUSH
25409: EMPTY
25410: EQUAL
25411: OR
25412: IFFALSE 25357
// result := [ ] ;
25414: LD_ADDR_VAR 0 6
25418: PUSH
25419: EMPTY
25420: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25421: LD_VAR 0 1
25425: PPUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: LD_VAR 0 3
25435: PPUSH
25436: LD_VAR 0 4
25440: PPUSH
25441: LD_VAR 0 5
25445: PPUSH
25446: CALL_OW 448
25450: IFFALSE 25483
// result := [ chassis , engine , control , weapon ] ;
25452: LD_ADDR_VAR 0 6
25456: PUSH
25457: LD_VAR 0 2
25461: PUSH
25462: LD_VAR 0 3
25466: PUSH
25467: LD_VAR 0 4
25471: PUSH
25472: LD_VAR 0 5
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: ST_TO_ADDR
// end ;
25483: LD_VAR 0 6
25487: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25488: LD_INT 0
25490: PPUSH
// if not chassis or not engine then
25491: LD_VAR 0 1
25495: NOT
25496: PUSH
25497: LD_VAR 0 2
25501: NOT
25502: OR
25503: IFFALSE 25507
// exit ;
25505: GO 25703
// case engine of engine_solar :
25507: LD_VAR 0 2
25511: PUSH
25512: LD_INT 2
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25558
25520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 11
25528: PUSH
25529: LD_INT 12
25531: PUSH
25532: LD_INT 13
25534: PUSH
25535: LD_INT 14
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: ST_TO_ADDR
25556: GO 25687
25558: LD_INT 1
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25628
25566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 11
25574: PUSH
25575: LD_INT 12
25577: PUSH
25578: LD_INT 13
25580: PUSH
25581: LD_INT 14
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 3
25592: PUSH
25593: LD_INT 4
25595: PUSH
25596: LD_INT 5
25598: PUSH
25599: LD_INT 21
25601: PUSH
25602: LD_INT 23
25604: PUSH
25605: LD_INT 22
25607: PUSH
25608: LD_INT 24
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: ST_TO_ADDR
25626: GO 25687
25628: LD_INT 3
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25686
25636: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25637: LD_ADDR_VAR 0 3
25641: PUSH
25642: LD_INT 13
25644: PUSH
25645: LD_INT 14
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: LD_INT 3
25653: PUSH
25654: LD_INT 4
25656: PUSH
25657: LD_INT 5
25659: PUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_INT 23
25668: PUSH
25669: LD_INT 24
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
25684: GO 25687
25686: POP
// result := ( chassis in result ) ;
25687: LD_ADDR_VAR 0 3
25691: PUSH
25692: LD_VAR 0 1
25696: PUSH
25697: LD_VAR 0 3
25701: IN
25702: ST_TO_ADDR
// end ;
25703: LD_VAR 0 3
25707: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25708: LD_INT 0
25710: PPUSH
// if not chassis or not weapon then
25711: LD_VAR 0 1
25715: NOT
25716: PUSH
25717: LD_VAR 0 2
25721: NOT
25722: OR
25723: IFFALSE 25727
// exit ;
25725: GO 26753
// case weapon of us_machine_gun :
25727: LD_VAR 0 2
25731: PUSH
25732: LD_INT 2
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25770
25740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 4
25757: PUSH
25758: LD_INT 5
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 26737
25770: LD_INT 3
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25808
25778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 4
25795: PUSH
25796: LD_INT 5
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: ST_TO_ADDR
25806: GO 26737
25808: LD_INT 11
25810: DOUBLE
25811: EQUAL
25812: IFTRUE 25816
25814: GO 25846
25816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25817: LD_ADDR_VAR 0 3
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: LD_INT 4
25833: PUSH
25834: LD_INT 5
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
25844: GO 26737
25846: LD_INT 4
25848: DOUBLE
25849: EQUAL
25850: IFTRUE 25854
25852: GO 25880
25854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25855: LD_ADDR_VAR 0 3
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: LD_INT 4
25868: PUSH
25869: LD_INT 5
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
25878: GO 26737
25880: LD_INT 5
25882: DOUBLE
25883: EQUAL
25884: IFTRUE 25888
25886: GO 25914
25888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 4
25902: PUSH
25903: LD_INT 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: ST_TO_ADDR
25912: GO 26737
25914: LD_INT 9
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25948
25922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 3
25933: PUSH
25934: LD_INT 4
25936: PUSH
25937: LD_INT 5
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
25946: GO 26737
25948: LD_INT 7
25950: DOUBLE
25951: EQUAL
25952: IFTRUE 25956
25954: GO 25982
25956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: LD_INT 4
25970: PUSH
25971: LD_INT 5
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
25980: GO 26737
25982: LD_INT 12
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26016
25990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: LD_INT 4
26004: PUSH
26005: LD_INT 5
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: ST_TO_ADDR
26014: GO 26737
26016: LD_INT 13
26018: DOUBLE
26019: EQUAL
26020: IFTRUE 26024
26022: GO 26050
26024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26025: LD_ADDR_VAR 0 3
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: LD_INT 5
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
26048: GO 26737
26050: LD_INT 14
26052: DOUBLE
26053: EQUAL
26054: IFTRUE 26058
26056: GO 26076
26058: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26059: LD_ADDR_VAR 0 3
26063: PUSH
26064: LD_INT 4
26066: PUSH
26067: LD_INT 5
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: ST_TO_ADDR
26074: GO 26737
26076: LD_INT 6
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26102
26084: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26085: LD_ADDR_VAR 0 3
26089: PUSH
26090: LD_INT 4
26092: PUSH
26093: LD_INT 5
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: ST_TO_ADDR
26100: GO 26737
26102: LD_INT 10
26104: DOUBLE
26105: EQUAL
26106: IFTRUE 26110
26108: GO 26128
26110: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26111: LD_ADDR_VAR 0 3
26115: PUSH
26116: LD_INT 4
26118: PUSH
26119: LD_INT 5
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: ST_TO_ADDR
26126: GO 26737
26128: LD_INT 22
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26162
26136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: LD_INT 11
26144: PUSH
26145: LD_INT 12
26147: PUSH
26148: LD_INT 13
26150: PUSH
26151: LD_INT 14
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: ST_TO_ADDR
26160: GO 26737
26162: LD_INT 23
26164: DOUBLE
26165: EQUAL
26166: IFTRUE 26170
26168: GO 26196
26170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26171: LD_ADDR_VAR 0 3
26175: PUSH
26176: LD_INT 11
26178: PUSH
26179: LD_INT 12
26181: PUSH
26182: LD_INT 13
26184: PUSH
26185: LD_INT 14
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: ST_TO_ADDR
26194: GO 26737
26196: LD_INT 24
26198: DOUBLE
26199: EQUAL
26200: IFTRUE 26204
26202: GO 26230
26204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 11
26212: PUSH
26213: LD_INT 12
26215: PUSH
26216: LD_INT 13
26218: PUSH
26219: LD_INT 14
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: ST_TO_ADDR
26228: GO 26737
26230: LD_INT 30
26232: DOUBLE
26233: EQUAL
26234: IFTRUE 26238
26236: GO 26264
26238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26239: LD_ADDR_VAR 0 3
26243: PUSH
26244: LD_INT 11
26246: PUSH
26247: LD_INT 12
26249: PUSH
26250: LD_INT 13
26252: PUSH
26253: LD_INT 14
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: ST_TO_ADDR
26262: GO 26737
26264: LD_INT 25
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26272
26270: GO 26290
26272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_INT 13
26280: PUSH
26281: LD_INT 14
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: ST_TO_ADDR
26288: GO 26737
26290: LD_INT 27
26292: DOUBLE
26293: EQUAL
26294: IFTRUE 26298
26296: GO 26316
26298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26299: LD_ADDR_VAR 0 3
26303: PUSH
26304: LD_INT 13
26306: PUSH
26307: LD_INT 14
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: ST_TO_ADDR
26314: GO 26737
26316: LD_INT 28
26318: DOUBLE
26319: EQUAL
26320: IFTRUE 26324
26322: GO 26342
26324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26325: LD_ADDR_VAR 0 3
26329: PUSH
26330: LD_INT 13
26332: PUSH
26333: LD_INT 14
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: ST_TO_ADDR
26340: GO 26737
26342: LD_INT 29
26344: DOUBLE
26345: EQUAL
26346: IFTRUE 26350
26348: GO 26368
26350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26351: LD_ADDR_VAR 0 3
26355: PUSH
26356: LD_INT 13
26358: PUSH
26359: LD_INT 14
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: ST_TO_ADDR
26366: GO 26737
26368: LD_INT 31
26370: DOUBLE
26371: EQUAL
26372: IFTRUE 26376
26374: GO 26394
26376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26377: LD_ADDR_VAR 0 3
26381: PUSH
26382: LD_INT 13
26384: PUSH
26385: LD_INT 14
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: ST_TO_ADDR
26392: GO 26737
26394: LD_INT 26
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26420
26402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: LD_INT 13
26410: PUSH
26411: LD_INT 14
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: ST_TO_ADDR
26418: GO 26737
26420: LD_INT 42
26422: DOUBLE
26423: EQUAL
26424: IFTRUE 26428
26426: GO 26454
26428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26429: LD_ADDR_VAR 0 3
26433: PUSH
26434: LD_INT 21
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_INT 23
26442: PUSH
26443: LD_INT 24
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: ST_TO_ADDR
26452: GO 26737
26454: LD_INT 43
26456: DOUBLE
26457: EQUAL
26458: IFTRUE 26462
26460: GO 26488
26462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26463: LD_ADDR_VAR 0 3
26467: PUSH
26468: LD_INT 21
26470: PUSH
26471: LD_INT 22
26473: PUSH
26474: LD_INT 23
26476: PUSH
26477: LD_INT 24
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
26486: GO 26737
26488: LD_INT 44
26490: DOUBLE
26491: EQUAL
26492: IFTRUE 26496
26494: GO 26522
26496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_INT 21
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_INT 23
26510: PUSH
26511: LD_INT 24
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: ST_TO_ADDR
26520: GO 26737
26522: LD_INT 45
26524: DOUBLE
26525: EQUAL
26526: IFTRUE 26530
26528: GO 26556
26530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_INT 21
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_INT 23
26544: PUSH
26545: LD_INT 24
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
26554: GO 26737
26556: LD_INT 49
26558: DOUBLE
26559: EQUAL
26560: IFTRUE 26564
26562: GO 26590
26564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_INT 21
26572: PUSH
26573: LD_INT 22
26575: PUSH
26576: LD_INT 23
26578: PUSH
26579: LD_INT 24
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
26588: GO 26737
26590: LD_INT 51
26592: DOUBLE
26593: EQUAL
26594: IFTRUE 26598
26596: GO 26624
26598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 22
26609: PUSH
26610: LD_INT 23
26612: PUSH
26613: LD_INT 24
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
26622: GO 26737
26624: LD_INT 52
26626: DOUBLE
26627: EQUAL
26628: IFTRUE 26632
26630: GO 26658
26632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 21
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_INT 23
26646: PUSH
26647: LD_INT 24
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
26656: GO 26737
26658: LD_INT 53
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26666
26664: GO 26684
26666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_INT 23
26674: PUSH
26675: LD_INT 24
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: ST_TO_ADDR
26682: GO 26737
26684: LD_INT 46
26686: DOUBLE
26687: EQUAL
26688: IFTRUE 26692
26690: GO 26710
26692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26693: LD_ADDR_VAR 0 3
26697: PUSH
26698: LD_INT 23
26700: PUSH
26701: LD_INT 24
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: ST_TO_ADDR
26708: GO 26737
26710: LD_INT 47
26712: DOUBLE
26713: EQUAL
26714: IFTRUE 26718
26716: GO 26736
26718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_INT 23
26726: PUSH
26727: LD_INT 24
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: ST_TO_ADDR
26734: GO 26737
26736: POP
// result := ( chassis in result ) ;
26737: LD_ADDR_VAR 0 3
26741: PUSH
26742: LD_VAR 0 1
26746: PUSH
26747: LD_VAR 0 3
26751: IN
26752: ST_TO_ADDR
// end ;
26753: LD_VAR 0 3
26757: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26758: LD_INT 0
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// result := array ;
26767: LD_ADDR_VAR 0 5
26771: PUSH
26772: LD_VAR 0 1
26776: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26777: LD_VAR 0 1
26781: NOT
26782: PUSH
26783: LD_VAR 0 2
26787: NOT
26788: OR
26789: PUSH
26790: LD_VAR 0 3
26794: NOT
26795: OR
26796: PUSH
26797: LD_VAR 0 2
26801: PUSH
26802: LD_VAR 0 1
26806: GREATER
26807: OR
26808: PUSH
26809: LD_VAR 0 3
26813: PUSH
26814: LD_VAR 0 1
26818: GREATER
26819: OR
26820: IFFALSE 26824
// exit ;
26822: GO 27120
// if direction then
26824: LD_VAR 0 4
26828: IFFALSE 26892
// begin d := 1 ;
26830: LD_ADDR_VAR 0 9
26834: PUSH
26835: LD_INT 1
26837: ST_TO_ADDR
// if i_from > i_to then
26838: LD_VAR 0 2
26842: PUSH
26843: LD_VAR 0 3
26847: GREATER
26848: IFFALSE 26874
// length := ( array - i_from ) + i_to else
26850: LD_ADDR_VAR 0 11
26854: PUSH
26855: LD_VAR 0 1
26859: PUSH
26860: LD_VAR 0 2
26864: MINUS
26865: PUSH
26866: LD_VAR 0 3
26870: PLUS
26871: ST_TO_ADDR
26872: GO 26890
// length := i_to - i_from ;
26874: LD_ADDR_VAR 0 11
26878: PUSH
26879: LD_VAR 0 3
26883: PUSH
26884: LD_VAR 0 2
26888: MINUS
26889: ST_TO_ADDR
// end else
26890: GO 26953
// begin d := - 1 ;
26892: LD_ADDR_VAR 0 9
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: ST_TO_ADDR
// if i_from > i_to then
26901: LD_VAR 0 2
26905: PUSH
26906: LD_VAR 0 3
26910: GREATER
26911: IFFALSE 26931
// length := i_from - i_to else
26913: LD_ADDR_VAR 0 11
26917: PUSH
26918: LD_VAR 0 2
26922: PUSH
26923: LD_VAR 0 3
26927: MINUS
26928: ST_TO_ADDR
26929: GO 26953
// length := ( array - i_to ) + i_from ;
26931: LD_ADDR_VAR 0 11
26935: PUSH
26936: LD_VAR 0 1
26940: PUSH
26941: LD_VAR 0 3
26945: MINUS
26946: PUSH
26947: LD_VAR 0 2
26951: PLUS
26952: ST_TO_ADDR
// end ; if not length then
26953: LD_VAR 0 11
26957: NOT
26958: IFFALSE 26962
// exit ;
26960: GO 27120
// tmp := array ;
26962: LD_ADDR_VAR 0 10
26966: PUSH
26967: LD_VAR 0 1
26971: ST_TO_ADDR
// for i = 1 to length do
26972: LD_ADDR_VAR 0 6
26976: PUSH
26977: DOUBLE
26978: LD_INT 1
26980: DEC
26981: ST_TO_ADDR
26982: LD_VAR 0 11
26986: PUSH
26987: FOR_TO
26988: IFFALSE 27108
// begin for j = 1 to array do
26990: LD_ADDR_VAR 0 7
26994: PUSH
26995: DOUBLE
26996: LD_INT 1
26998: DEC
26999: ST_TO_ADDR
27000: LD_VAR 0 1
27004: PUSH
27005: FOR_TO
27006: IFFALSE 27094
// begin k := j + d ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_VAR 0 7
27017: PUSH
27018: LD_VAR 0 9
27022: PLUS
27023: ST_TO_ADDR
// if k > array then
27024: LD_VAR 0 8
27028: PUSH
27029: LD_VAR 0 1
27033: GREATER
27034: IFFALSE 27044
// k := 1 ;
27036: LD_ADDR_VAR 0 8
27040: PUSH
27041: LD_INT 1
27043: ST_TO_ADDR
// if not k then
27044: LD_VAR 0 8
27048: NOT
27049: IFFALSE 27061
// k := array ;
27051: LD_ADDR_VAR 0 8
27055: PUSH
27056: LD_VAR 0 1
27060: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27061: LD_ADDR_VAR 0 10
27065: PUSH
27066: LD_VAR 0 10
27070: PPUSH
27071: LD_VAR 0 8
27075: PPUSH
27076: LD_VAR 0 1
27080: PUSH
27081: LD_VAR 0 7
27085: ARRAY
27086: PPUSH
27087: CALL_OW 1
27091: ST_TO_ADDR
// end ;
27092: GO 27005
27094: POP
27095: POP
// array := tmp ;
27096: LD_ADDR_VAR 0 1
27100: PUSH
27101: LD_VAR 0 10
27105: ST_TO_ADDR
// end ;
27106: GO 26987
27108: POP
27109: POP
// result := array ;
27110: LD_ADDR_VAR 0 5
27114: PUSH
27115: LD_VAR 0 1
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 5
27124: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27125: LD_INT 0
27127: PPUSH
27128: PPUSH
// result := 0 ;
27129: LD_ADDR_VAR 0 3
27133: PUSH
27134: LD_INT 0
27136: ST_TO_ADDR
// if not array or not value in array then
27137: LD_VAR 0 1
27141: NOT
27142: PUSH
27143: LD_VAR 0 2
27147: PUSH
27148: LD_VAR 0 1
27152: IN
27153: NOT
27154: OR
27155: IFFALSE 27159
// exit ;
27157: GO 27213
// for i = 1 to array do
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: DOUBLE
27165: LD_INT 1
27167: DEC
27168: ST_TO_ADDR
27169: LD_VAR 0 1
27173: PUSH
27174: FOR_TO
27175: IFFALSE 27211
// if value = array [ i ] then
27177: LD_VAR 0 2
27181: PUSH
27182: LD_VAR 0 1
27186: PUSH
27187: LD_VAR 0 4
27191: ARRAY
27192: EQUAL
27193: IFFALSE 27209
// begin result := i ;
27195: LD_ADDR_VAR 0 3
27199: PUSH
27200: LD_VAR 0 4
27204: ST_TO_ADDR
// exit ;
27205: POP
27206: POP
27207: GO 27213
// end ;
27209: GO 27174
27211: POP
27212: POP
// end ;
27213: LD_VAR 0 3
27217: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27218: LD_INT 0
27220: PPUSH
// vc_chassis := chassis ;
27221: LD_ADDR_OWVAR 37
27225: PUSH
27226: LD_VAR 0 1
27230: ST_TO_ADDR
// vc_engine := engine ;
27231: LD_ADDR_OWVAR 39
27235: PUSH
27236: LD_VAR 0 2
27240: ST_TO_ADDR
// vc_control := control ;
27241: LD_ADDR_OWVAR 38
27245: PUSH
27246: LD_VAR 0 3
27250: ST_TO_ADDR
// vc_weapon := weapon ;
27251: LD_ADDR_OWVAR 40
27255: PUSH
27256: LD_VAR 0 4
27260: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27261: LD_ADDR_OWVAR 41
27265: PUSH
27266: LD_VAR 0 5
27270: ST_TO_ADDR
// end ;
27271: LD_VAR 0 6
27275: RET
// export function WantPlant ( unit ) ; var task ; begin
27276: LD_INT 0
27278: PPUSH
27279: PPUSH
// result := false ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_INT 0
27287: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27288: LD_ADDR_VAR 0 3
27292: PUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 437
27302: ST_TO_ADDR
// if task then
27303: LD_VAR 0 3
27307: IFFALSE 27335
// if task [ 1 ] [ 1 ] = p then
27309: LD_VAR 0 3
27313: PUSH
27314: LD_INT 1
27316: ARRAY
27317: PUSH
27318: LD_INT 1
27320: ARRAY
27321: PUSH
27322: LD_STRING p
27324: EQUAL
27325: IFFALSE 27335
// result := true ;
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_INT 1
27334: ST_TO_ADDR
// end ;
27335: LD_VAR 0 2
27339: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27340: LD_INT 0
27342: PPUSH
27343: PPUSH
27344: PPUSH
27345: PPUSH
// if pos < 1 then
27346: LD_VAR 0 2
27350: PUSH
27351: LD_INT 1
27353: LESS
27354: IFFALSE 27358
// exit ;
27356: GO 27661
// if pos = 1 then
27358: LD_VAR 0 2
27362: PUSH
27363: LD_INT 1
27365: EQUAL
27366: IFFALSE 27399
// result := Replace ( arr , pos [ 1 ] , value ) else
27368: LD_ADDR_VAR 0 4
27372: PUSH
27373: LD_VAR 0 1
27377: PPUSH
27378: LD_VAR 0 2
27382: PUSH
27383: LD_INT 1
27385: ARRAY
27386: PPUSH
27387: LD_VAR 0 3
27391: PPUSH
27392: CALL_OW 1
27396: ST_TO_ADDR
27397: GO 27661
// begin tmp := arr ;
27399: LD_ADDR_VAR 0 6
27403: PUSH
27404: LD_VAR 0 1
27408: ST_TO_ADDR
// s_arr := [ tmp ] ;
27409: LD_ADDR_VAR 0 7
27413: PUSH
27414: LD_VAR 0 6
27418: PUSH
27419: EMPTY
27420: LIST
27421: ST_TO_ADDR
// for i = 1 to pos - 1 do
27422: LD_ADDR_VAR 0 5
27426: PUSH
27427: DOUBLE
27428: LD_INT 1
27430: DEC
27431: ST_TO_ADDR
27432: LD_VAR 0 2
27436: PUSH
27437: LD_INT 1
27439: MINUS
27440: PUSH
27441: FOR_TO
27442: IFFALSE 27487
// begin tmp := tmp [ pos [ i ] ] ;
27444: LD_ADDR_VAR 0 6
27448: PUSH
27449: LD_VAR 0 6
27453: PUSH
27454: LD_VAR 0 2
27458: PUSH
27459: LD_VAR 0 5
27463: ARRAY
27464: ARRAY
27465: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27466: LD_ADDR_VAR 0 7
27470: PUSH
27471: LD_VAR 0 7
27475: PUSH
27476: LD_VAR 0 6
27480: PUSH
27481: EMPTY
27482: LIST
27483: ADD
27484: ST_TO_ADDR
// end ;
27485: GO 27441
27487: POP
27488: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27489: LD_ADDR_VAR 0 6
27493: PUSH
27494: LD_VAR 0 6
27498: PPUSH
27499: LD_VAR 0 2
27503: PUSH
27504: LD_VAR 0 2
27508: ARRAY
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: CALL_OW 1
27519: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27520: LD_ADDR_VAR 0 7
27524: PUSH
27525: LD_VAR 0 7
27529: PPUSH
27530: LD_VAR 0 7
27534: PPUSH
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 1
27544: ST_TO_ADDR
// for i = s_arr downto 2 do
27545: LD_ADDR_VAR 0 5
27549: PUSH
27550: DOUBLE
27551: LD_VAR 0 7
27555: INC
27556: ST_TO_ADDR
27557: LD_INT 2
27559: PUSH
27560: FOR_DOWNTO
27561: IFFALSE 27645
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27563: LD_ADDR_VAR 0 6
27567: PUSH
27568: LD_VAR 0 7
27572: PUSH
27573: LD_VAR 0 5
27577: PUSH
27578: LD_INT 1
27580: MINUS
27581: ARRAY
27582: PPUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_VAR 0 5
27592: PUSH
27593: LD_INT 1
27595: MINUS
27596: ARRAY
27597: PPUSH
27598: LD_VAR 0 7
27602: PUSH
27603: LD_VAR 0 5
27607: ARRAY
27608: PPUSH
27609: CALL_OW 1
27613: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27614: LD_ADDR_VAR 0 7
27618: PUSH
27619: LD_VAR 0 7
27623: PPUSH
27624: LD_VAR 0 5
27628: PUSH
27629: LD_INT 1
27631: MINUS
27632: PPUSH
27633: LD_VAR 0 6
27637: PPUSH
27638: CALL_OW 1
27642: ST_TO_ADDR
// end ;
27643: GO 27560
27645: POP
27646: POP
// result := s_arr [ 1 ] ;
27647: LD_ADDR_VAR 0 4
27651: PUSH
27652: LD_VAR 0 7
27656: PUSH
27657: LD_INT 1
27659: ARRAY
27660: ST_TO_ADDR
// end ; end ;
27661: LD_VAR 0 4
27665: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27666: LD_INT 0
27668: PPUSH
27669: PPUSH
// if not list then
27670: LD_VAR 0 1
27674: NOT
27675: IFFALSE 27679
// exit ;
27677: GO 27770
// i := list [ pos1 ] ;
27679: LD_ADDR_VAR 0 5
27683: PUSH
27684: LD_VAR 0 1
27688: PUSH
27689: LD_VAR 0 2
27693: ARRAY
27694: ST_TO_ADDR
// if not i then
27695: LD_VAR 0 5
27699: NOT
27700: IFFALSE 27704
// exit ;
27702: GO 27770
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27704: LD_ADDR_VAR 0 1
27708: PUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_VAR 0 2
27718: PPUSH
27719: LD_VAR 0 1
27723: PUSH
27724: LD_VAR 0 3
27728: ARRAY
27729: PPUSH
27730: CALL_OW 1
27734: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27735: LD_ADDR_VAR 0 1
27739: PUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_VAR 0 3
27749: PPUSH
27750: LD_VAR 0 5
27754: PPUSH
27755: CALL_OW 1
27759: ST_TO_ADDR
// result := list ;
27760: LD_ADDR_VAR 0 4
27764: PUSH
27765: LD_VAR 0 1
27769: ST_TO_ADDR
// end ;
27770: LD_VAR 0 4
27774: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27775: LD_INT 0
27777: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27778: LD_ADDR_VAR 0 5
27782: PUSH
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 250
27792: PPUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: CALL_OW 251
27802: PPUSH
27803: LD_VAR 0 2
27807: PPUSH
27808: LD_VAR 0 3
27812: PPUSH
27813: LD_VAR 0 4
27817: PPUSH
27818: CALL 27828 0 5
27822: ST_TO_ADDR
// end ;
27823: LD_VAR 0 5
27827: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27828: LD_INT 0
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
// if not list then
27834: LD_VAR 0 3
27838: NOT
27839: IFFALSE 27843
// exit ;
27841: GO 28231
// result := [ ] ;
27843: LD_ADDR_VAR 0 6
27847: PUSH
27848: EMPTY
27849: ST_TO_ADDR
// for i in list do
27850: LD_ADDR_VAR 0 7
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: FOR_IN
27861: IFFALSE 28063
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27863: LD_ADDR_VAR 0 9
27867: PUSH
27868: LD_VAR 0 7
27872: PPUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: LD_VAR 0 2
27882: PPUSH
27883: CALL_OW 297
27887: ST_TO_ADDR
// if not result then
27888: LD_VAR 0 6
27892: NOT
27893: IFFALSE 27919
// result := [ [ i , tmp ] ] else
27895: LD_ADDR_VAR 0 6
27899: PUSH
27900: LD_VAR 0 7
27904: PUSH
27905: LD_VAR 0 9
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: ST_TO_ADDR
27917: GO 28061
// begin if result [ result ] [ 2 ] < tmp then
27919: LD_VAR 0 6
27923: PUSH
27924: LD_VAR 0 6
27928: ARRAY
27929: PUSH
27930: LD_INT 2
27932: ARRAY
27933: PUSH
27934: LD_VAR 0 9
27938: LESS
27939: IFFALSE 27981
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27941: LD_ADDR_VAR 0 6
27945: PUSH
27946: LD_VAR 0 6
27950: PPUSH
27951: LD_VAR 0 6
27955: PUSH
27956: LD_INT 1
27958: PLUS
27959: PPUSH
27960: LD_VAR 0 7
27964: PUSH
27965: LD_VAR 0 9
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 2
27978: ST_TO_ADDR
27979: GO 28061
// for j = 1 to result do
27981: LD_ADDR_VAR 0 8
27985: PUSH
27986: DOUBLE
27987: LD_INT 1
27989: DEC
27990: ST_TO_ADDR
27991: LD_VAR 0 6
27995: PUSH
27996: FOR_TO
27997: IFFALSE 28059
// begin if tmp < result [ j ] [ 2 ] then
27999: LD_VAR 0 9
28003: PUSH
28004: LD_VAR 0 6
28008: PUSH
28009: LD_VAR 0 8
28013: ARRAY
28014: PUSH
28015: LD_INT 2
28017: ARRAY
28018: LESS
28019: IFFALSE 28057
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28021: LD_ADDR_VAR 0 6
28025: PUSH
28026: LD_VAR 0 6
28030: PPUSH
28031: LD_VAR 0 8
28035: PPUSH
28036: LD_VAR 0 7
28040: PUSH
28041: LD_VAR 0 9
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PPUSH
28050: CALL_OW 2
28054: ST_TO_ADDR
// break ;
28055: GO 28059
// end ; end ;
28057: GO 27996
28059: POP
28060: POP
// end ; end ;
28061: GO 27860
28063: POP
28064: POP
// if result and not asc then
28065: LD_VAR 0 6
28069: PUSH
28070: LD_VAR 0 4
28074: NOT
28075: AND
28076: IFFALSE 28151
// begin tmp := result ;
28078: LD_ADDR_VAR 0 9
28082: PUSH
28083: LD_VAR 0 6
28087: ST_TO_ADDR
// for i = tmp downto 1 do
28088: LD_ADDR_VAR 0 7
28092: PUSH
28093: DOUBLE
28094: LD_VAR 0 9
28098: INC
28099: ST_TO_ADDR
28100: LD_INT 1
28102: PUSH
28103: FOR_DOWNTO
28104: IFFALSE 28149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28106: LD_ADDR_VAR 0 6
28110: PUSH
28111: LD_VAR 0 6
28115: PPUSH
28116: LD_VAR 0 9
28120: PUSH
28121: LD_VAR 0 7
28125: MINUS
28126: PUSH
28127: LD_INT 1
28129: PLUS
28130: PPUSH
28131: LD_VAR 0 9
28135: PUSH
28136: LD_VAR 0 7
28140: ARRAY
28141: PPUSH
28142: CALL_OW 1
28146: ST_TO_ADDR
28147: GO 28103
28149: POP
28150: POP
// end ; tmp := [ ] ;
28151: LD_ADDR_VAR 0 9
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
// if mode then
28158: LD_VAR 0 5
28162: IFFALSE 28231
// begin for i = 1 to result do
28164: LD_ADDR_VAR 0 7
28168: PUSH
28169: DOUBLE
28170: LD_INT 1
28172: DEC
28173: ST_TO_ADDR
28174: LD_VAR 0 6
28178: PUSH
28179: FOR_TO
28180: IFFALSE 28219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28182: LD_ADDR_VAR 0 9
28186: PUSH
28187: LD_VAR 0 9
28191: PPUSH
28192: LD_VAR 0 7
28196: PPUSH
28197: LD_VAR 0 6
28201: PUSH
28202: LD_VAR 0 7
28206: ARRAY
28207: PUSH
28208: LD_INT 1
28210: ARRAY
28211: PPUSH
28212: CALL_OW 1
28216: ST_TO_ADDR
28217: GO 28179
28219: POP
28220: POP
// result := tmp ;
28221: LD_ADDR_VAR 0 6
28225: PUSH
28226: LD_VAR 0 9
28230: ST_TO_ADDR
// end ; end ;
28231: LD_VAR 0 6
28235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28236: LD_INT 0
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
28243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28244: LD_ADDR_VAR 0 5
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// if not x or not y then
28266: LD_VAR 0 2
28270: NOT
28271: PUSH
28272: LD_VAR 0 3
28276: NOT
28277: OR
28278: IFFALSE 28282
// exit ;
28280: GO 29928
// if not range then
28282: LD_VAR 0 4
28286: NOT
28287: IFFALSE 28297
// range := 10 ;
28289: LD_ADDR_VAR 0 4
28293: PUSH
28294: LD_INT 10
28296: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28297: LD_ADDR_VAR 0 8
28301: PUSH
28302: LD_INT 81
28304: PUSH
28305: LD_VAR 0 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 92
28316: PUSH
28317: LD_VAR 0 2
28321: PUSH
28322: LD_VAR 0 3
28326: PUSH
28327: LD_VAR 0 4
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: LD_INT 21
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PPUSH
28360: CALL_OW 69
28364: ST_TO_ADDR
// if not tmp then
28365: LD_VAR 0 8
28369: NOT
28370: IFFALSE 28374
// exit ;
28372: GO 29928
// for i in tmp do
28374: LD_ADDR_VAR 0 6
28378: PUSH
28379: LD_VAR 0 8
28383: PUSH
28384: FOR_IN
28385: IFFALSE 29903
// begin points := [ 0 , 0 , 0 ] ;
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// bpoints := 1 ;
28406: LD_ADDR_VAR 0 10
28410: PUSH
28411: LD_INT 1
28413: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28414: LD_VAR 0 6
28418: PPUSH
28419: CALL_OW 247
28423: PUSH
28424: LD_INT 1
28426: DOUBLE
28427: EQUAL
28428: IFTRUE 28432
28430: GO 29010
28432: POP
// begin if GetClass ( i ) = 1 then
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 257
28442: PUSH
28443: LD_INT 1
28445: EQUAL
28446: IFFALSE 28467
// points := [ 10 , 5 , 3 ] ;
28448: LD_ADDR_VAR 0 9
28452: PUSH
28453: LD_INT 10
28455: PUSH
28456: LD_INT 5
28458: PUSH
28459: LD_INT 3
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28467: LD_VAR 0 6
28471: PPUSH
28472: CALL_OW 257
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: LD_INT 4
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: IN
28491: IFFALSE 28512
// points := [ 3 , 2 , 1 ] ;
28493: LD_ADDR_VAR 0 9
28497: PUSH
28498: LD_INT 3
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28512: LD_VAR 0 6
28516: PPUSH
28517: CALL_OW 257
28521: PUSH
28522: LD_INT 5
28524: EQUAL
28525: IFFALSE 28546
// points := [ 130 , 5 , 2 ] ;
28527: LD_ADDR_VAR 0 9
28531: PUSH
28532: LD_INT 130
28534: PUSH
28535: LD_INT 5
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28546: LD_VAR 0 6
28550: PPUSH
28551: CALL_OW 257
28555: PUSH
28556: LD_INT 8
28558: EQUAL
28559: IFFALSE 28580
// points := [ 35 , 35 , 30 ] ;
28561: LD_ADDR_VAR 0 9
28565: PUSH
28566: LD_INT 35
28568: PUSH
28569: LD_INT 35
28571: PUSH
28572: LD_INT 30
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28580: LD_VAR 0 6
28584: PPUSH
28585: CALL_OW 257
28589: PUSH
28590: LD_INT 9
28592: EQUAL
28593: IFFALSE 28614
// points := [ 20 , 55 , 40 ] ;
28595: LD_ADDR_VAR 0 9
28599: PUSH
28600: LD_INT 20
28602: PUSH
28603: LD_INT 55
28605: PUSH
28606: LD_INT 40
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28614: LD_VAR 0 6
28618: PPUSH
28619: CALL_OW 257
28623: PUSH
28624: LD_INT 12
28626: PUSH
28627: LD_INT 16
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: IN
28634: IFFALSE 28655
// points := [ 5 , 3 , 2 ] ;
28636: LD_ADDR_VAR 0 9
28640: PUSH
28641: LD_INT 5
28643: PUSH
28644: LD_INT 3
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28655: LD_VAR 0 6
28659: PPUSH
28660: CALL_OW 257
28664: PUSH
28665: LD_INT 17
28667: EQUAL
28668: IFFALSE 28689
// points := [ 100 , 50 , 75 ] ;
28670: LD_ADDR_VAR 0 9
28674: PUSH
28675: LD_INT 100
28677: PUSH
28678: LD_INT 50
28680: PUSH
28681: LD_INT 75
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28689: LD_VAR 0 6
28693: PPUSH
28694: CALL_OW 257
28698: PUSH
28699: LD_INT 15
28701: EQUAL
28702: IFFALSE 28723
// points := [ 10 , 5 , 3 ] ;
28704: LD_ADDR_VAR 0 9
28708: PUSH
28709: LD_INT 10
28711: PUSH
28712: LD_INT 5
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28723: LD_VAR 0 6
28727: PPUSH
28728: CALL_OW 257
28732: PUSH
28733: LD_INT 14
28735: EQUAL
28736: IFFALSE 28757
// points := [ 10 , 0 , 0 ] ;
28738: LD_ADDR_VAR 0 9
28742: PUSH
28743: LD_INT 10
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28757: LD_VAR 0 6
28761: PPUSH
28762: CALL_OW 257
28766: PUSH
28767: LD_INT 11
28769: EQUAL
28770: IFFALSE 28791
// points := [ 30 , 10 , 5 ] ;
28772: LD_ADDR_VAR 0 9
28776: PUSH
28777: LD_INT 30
28779: PUSH
28780: LD_INT 10
28782: PUSH
28783: LD_INT 5
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28791: LD_VAR 0 1
28795: PPUSH
28796: LD_INT 5
28798: PPUSH
28799: CALL_OW 321
28803: PUSH
28804: LD_INT 2
28806: EQUAL
28807: IFFALSE 28824
// bpoints := bpoints * 1.8 ;
28809: LD_ADDR_VAR 0 10
28813: PUSH
28814: LD_VAR 0 10
28818: PUSH
28819: LD_REAL  1.80000000000000E+0000
28822: MUL
28823: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28824: LD_VAR 0 6
28828: PPUSH
28829: CALL_OW 257
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: LD_INT 4
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: IN
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: LD_INT 51
28860: PPUSH
28861: CALL_OW 321
28865: PUSH
28866: LD_INT 2
28868: EQUAL
28869: AND
28870: IFFALSE 28887
// bpoints := bpoints * 1.2 ;
28872: LD_ADDR_VAR 0 10
28876: PUSH
28877: LD_VAR 0 10
28881: PUSH
28882: LD_REAL  1.20000000000000E+0000
28885: MUL
28886: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28887: LD_VAR 0 6
28891: PPUSH
28892: CALL_OW 257
28896: PUSH
28897: LD_INT 5
28899: PUSH
28900: LD_INT 7
28902: PUSH
28903: LD_INT 9
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: IN
28911: PUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_INT 52
28919: PPUSH
28920: CALL_OW 321
28924: PUSH
28925: LD_INT 2
28927: EQUAL
28928: AND
28929: IFFALSE 28946
// bpoints := bpoints * 1.5 ;
28931: LD_ADDR_VAR 0 10
28935: PUSH
28936: LD_VAR 0 10
28940: PUSH
28941: LD_REAL  1.50000000000000E+0000
28944: MUL
28945: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_INT 66
28953: PPUSH
28954: CALL_OW 321
28958: PUSH
28959: LD_INT 2
28961: EQUAL
28962: IFFALSE 28979
// bpoints := bpoints * 1.1 ;
28964: LD_ADDR_VAR 0 10
28968: PUSH
28969: LD_VAR 0 10
28973: PUSH
28974: LD_REAL  1.10000000000000E+0000
28977: MUL
28978: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28979: LD_ADDR_VAR 0 10
28983: PUSH
28984: LD_VAR 0 10
28988: PUSH
28989: LD_VAR 0 6
28993: PPUSH
28994: LD_INT 1
28996: PPUSH
28997: CALL_OW 259
29001: PUSH
29002: LD_REAL  1.15000000000000E+0000
29005: MUL
29006: MUL
29007: ST_TO_ADDR
// end ; unit_vehicle :
29008: GO 29832
29010: LD_INT 2
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29018
29016: GO 29820
29018: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29019: LD_VAR 0 6
29023: PPUSH
29024: CALL_OW 264
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 42
29034: PUSH
29035: LD_INT 24
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: IN
29043: IFFALSE 29064
// points := [ 25 , 5 , 3 ] ;
29045: LD_ADDR_VAR 0 9
29049: PUSH
29050: LD_INT 25
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29064: LD_VAR 0 6
29068: PPUSH
29069: CALL_OW 264
29073: PUSH
29074: LD_INT 4
29076: PUSH
29077: LD_INT 43
29079: PUSH
29080: LD_INT 25
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: IN
29088: IFFALSE 29109
// points := [ 40 , 15 , 5 ] ;
29090: LD_ADDR_VAR 0 9
29094: PUSH
29095: LD_INT 40
29097: PUSH
29098: LD_INT 15
29100: PUSH
29101: LD_INT 5
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29109: LD_VAR 0 6
29113: PPUSH
29114: CALL_OW 264
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 23
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: IN
29129: IFFALSE 29150
// points := [ 7 , 25 , 8 ] ;
29131: LD_ADDR_VAR 0 9
29135: PUSH
29136: LD_INT 7
29138: PUSH
29139: LD_INT 25
29141: PUSH
29142: LD_INT 8
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29150: LD_VAR 0 6
29154: PPUSH
29155: CALL_OW 264
29159: PUSH
29160: LD_INT 5
29162: PUSH
29163: LD_INT 27
29165: PUSH
29166: LD_INT 44
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: IN
29174: IFFALSE 29195
// points := [ 14 , 50 , 16 ] ;
29176: LD_ADDR_VAR 0 9
29180: PUSH
29181: LD_INT 14
29183: PUSH
29184: LD_INT 50
29186: PUSH
29187: LD_INT 16
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29195: LD_VAR 0 6
29199: PPUSH
29200: CALL_OW 264
29204: PUSH
29205: LD_INT 6
29207: PUSH
29208: LD_INT 46
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: IN
29215: IFFALSE 29236
// points := [ 32 , 120 , 70 ] ;
29217: LD_ADDR_VAR 0 9
29221: PUSH
29222: LD_INT 32
29224: PUSH
29225: LD_INT 120
29227: PUSH
29228: LD_INT 70
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29236: LD_VAR 0 6
29240: PPUSH
29241: CALL_OW 264
29245: PUSH
29246: LD_INT 7
29248: PUSH
29249: LD_INT 28
29251: PUSH
29252: LD_INT 45
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: IN
29260: IFFALSE 29281
// points := [ 35 , 20 , 45 ] ;
29262: LD_ADDR_VAR 0 9
29266: PUSH
29267: LD_INT 35
29269: PUSH
29270: LD_INT 20
29272: PUSH
29273: LD_INT 45
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29281: LD_VAR 0 6
29285: PPUSH
29286: CALL_OW 264
29290: PUSH
29291: LD_INT 47
29293: PUSH
29294: EMPTY
29295: LIST
29296: IN
29297: IFFALSE 29318
// points := [ 67 , 45 , 75 ] ;
29299: LD_ADDR_VAR 0 9
29303: PUSH
29304: LD_INT 67
29306: PUSH
29307: LD_INT 45
29309: PUSH
29310: LD_INT 75
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29318: LD_VAR 0 6
29322: PPUSH
29323: CALL_OW 264
29327: PUSH
29328: LD_INT 26
29330: PUSH
29331: EMPTY
29332: LIST
29333: IN
29334: IFFALSE 29355
// points := [ 120 , 30 , 80 ] ;
29336: LD_ADDR_VAR 0 9
29340: PUSH
29341: LD_INT 120
29343: PUSH
29344: LD_INT 30
29346: PUSH
29347: LD_INT 80
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29355: LD_VAR 0 6
29359: PPUSH
29360: CALL_OW 264
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: EMPTY
29369: LIST
29370: IN
29371: IFFALSE 29392
// points := [ 40 , 1 , 1 ] ;
29373: LD_ADDR_VAR 0 9
29377: PUSH
29378: LD_INT 40
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29392: LD_VAR 0 6
29396: PPUSH
29397: CALL_OW 264
29401: PUSH
29402: LD_INT 29
29404: PUSH
29405: EMPTY
29406: LIST
29407: IN
29408: IFFALSE 29429
// points := [ 70 , 200 , 400 ] ;
29410: LD_ADDR_VAR 0 9
29414: PUSH
29415: LD_INT 70
29417: PUSH
29418: LD_INT 200
29420: PUSH
29421: LD_INT 400
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29429: LD_VAR 0 6
29433: PPUSH
29434: CALL_OW 264
29438: PUSH
29439: LD_INT 14
29441: PUSH
29442: LD_INT 53
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: IN
29449: IFFALSE 29470
// points := [ 40 , 10 , 20 ] ;
29451: LD_ADDR_VAR 0 9
29455: PUSH
29456: LD_INT 40
29458: PUSH
29459: LD_INT 10
29461: PUSH
29462: LD_INT 20
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29470: LD_VAR 0 6
29474: PPUSH
29475: CALL_OW 264
29479: PUSH
29480: LD_INT 9
29482: PUSH
29483: EMPTY
29484: LIST
29485: IN
29486: IFFALSE 29507
// points := [ 5 , 70 , 20 ] ;
29488: LD_ADDR_VAR 0 9
29492: PUSH
29493: LD_INT 5
29495: PUSH
29496: LD_INT 70
29498: PUSH
29499: LD_INT 20
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29507: LD_VAR 0 6
29511: PPUSH
29512: CALL_OW 264
29516: PUSH
29517: LD_INT 10
29519: PUSH
29520: EMPTY
29521: LIST
29522: IN
29523: IFFALSE 29544
// points := [ 35 , 110 , 70 ] ;
29525: LD_ADDR_VAR 0 9
29529: PUSH
29530: LD_INT 35
29532: PUSH
29533: LD_INT 110
29535: PUSH
29536: LD_INT 70
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29544: LD_VAR 0 6
29548: PPUSH
29549: CALL_OW 265
29553: PUSH
29554: LD_INT 25
29556: EQUAL
29557: IFFALSE 29578
// points := [ 80 , 65 , 100 ] ;
29559: LD_ADDR_VAR 0 9
29563: PUSH
29564: LD_INT 80
29566: PUSH
29567: LD_INT 65
29569: PUSH
29570: LD_INT 100
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29578: LD_VAR 0 6
29582: PPUSH
29583: CALL_OW 263
29587: PUSH
29588: LD_INT 1
29590: EQUAL
29591: IFFALSE 29626
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29593: LD_ADDR_VAR 0 10
29597: PUSH
29598: LD_VAR 0 10
29602: PUSH
29603: LD_VAR 0 6
29607: PPUSH
29608: CALL_OW 311
29612: PPUSH
29613: LD_INT 3
29615: PPUSH
29616: CALL_OW 259
29620: PUSH
29621: LD_INT 4
29623: MUL
29624: MUL
29625: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29626: LD_VAR 0 6
29630: PPUSH
29631: CALL_OW 263
29635: PUSH
29636: LD_INT 2
29638: EQUAL
29639: IFFALSE 29690
// begin j := IsControledBy ( i ) ;
29641: LD_ADDR_VAR 0 7
29645: PUSH
29646: LD_VAR 0 6
29650: PPUSH
29651: CALL_OW 312
29655: ST_TO_ADDR
// if j then
29656: LD_VAR 0 7
29660: IFFALSE 29690
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29662: LD_ADDR_VAR 0 10
29666: PUSH
29667: LD_VAR 0 10
29671: PUSH
29672: LD_VAR 0 7
29676: PPUSH
29677: LD_INT 3
29679: PPUSH
29680: CALL_OW 259
29684: PUSH
29685: LD_INT 3
29687: MUL
29688: MUL
29689: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29690: LD_VAR 0 6
29694: PPUSH
29695: CALL_OW 264
29699: PUSH
29700: LD_INT 5
29702: PUSH
29703: LD_INT 6
29705: PUSH
29706: LD_INT 46
29708: PUSH
29709: LD_INT 44
29711: PUSH
29712: LD_INT 47
29714: PUSH
29715: LD_INT 45
29717: PUSH
29718: LD_INT 28
29720: PUSH
29721: LD_INT 7
29723: PUSH
29724: LD_INT 27
29726: PUSH
29727: LD_INT 29
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: IN
29742: PUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: LD_INT 52
29750: PPUSH
29751: CALL_OW 321
29755: PUSH
29756: LD_INT 2
29758: EQUAL
29759: AND
29760: IFFALSE 29777
// bpoints := bpoints * 1.2 ;
29762: LD_ADDR_VAR 0 10
29766: PUSH
29767: LD_VAR 0 10
29771: PUSH
29772: LD_REAL  1.20000000000000E+0000
29775: MUL
29776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29777: LD_VAR 0 6
29781: PPUSH
29782: CALL_OW 264
29786: PUSH
29787: LD_INT 6
29789: PUSH
29790: LD_INT 46
29792: PUSH
29793: LD_INT 47
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: IN
29801: IFFALSE 29818
// bpoints := bpoints * 1.2 ;
29803: LD_ADDR_VAR 0 10
29807: PUSH
29808: LD_VAR 0 10
29812: PUSH
29813: LD_REAL  1.20000000000000E+0000
29816: MUL
29817: ST_TO_ADDR
// end ; unit_building :
29818: GO 29832
29820: LD_INT 3
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29831
29828: POP
// ; end ;
29829: GO 29832
29831: POP
// for j = 1 to 3 do
29832: LD_ADDR_VAR 0 7
29836: PUSH
29837: DOUBLE
29838: LD_INT 1
29840: DEC
29841: ST_TO_ADDR
29842: LD_INT 3
29844: PUSH
29845: FOR_TO
29846: IFFALSE 29899
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29848: LD_ADDR_VAR 0 5
29852: PUSH
29853: LD_VAR 0 5
29857: PPUSH
29858: LD_VAR 0 7
29862: PPUSH
29863: LD_VAR 0 5
29867: PUSH
29868: LD_VAR 0 7
29872: ARRAY
29873: PUSH
29874: LD_VAR 0 9
29878: PUSH
29879: LD_VAR 0 7
29883: ARRAY
29884: PUSH
29885: LD_VAR 0 10
29889: MUL
29890: PLUS
29891: PPUSH
29892: CALL_OW 1
29896: ST_TO_ADDR
29897: GO 29845
29899: POP
29900: POP
// end ;
29901: GO 28384
29903: POP
29904: POP
// result := Replace ( result , 4 , tmp ) ;
29905: LD_ADDR_VAR 0 5
29909: PUSH
29910: LD_VAR 0 5
29914: PPUSH
29915: LD_INT 4
29917: PPUSH
29918: LD_VAR 0 8
29922: PPUSH
29923: CALL_OW 1
29927: ST_TO_ADDR
// end ;
29928: LD_VAR 0 5
29932: RET
// export function DangerAtRange ( unit , range ) ; begin
29933: LD_INT 0
29935: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 255
29950: PPUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 250
29960: PPUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 251
29970: PPUSH
29971: LD_VAR 0 2
29975: PPUSH
29976: CALL 28236 0 4
29980: ST_TO_ADDR
// end ;
29981: LD_VAR 0 3
29985: RET
// export function DangerInArea ( side , area ) ; begin
29986: LD_INT 0
29988: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_VAR 0 2
29998: PPUSH
29999: LD_INT 81
30001: PUSH
30002: LD_VAR 0 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PPUSH
30011: CALL_OW 70
30015: ST_TO_ADDR
// end ;
30016: LD_VAR 0 3
30020: RET
// export function IsExtension ( b ) ; begin
30021: LD_INT 0
30023: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30024: LD_ADDR_VAR 0 2
30028: PUSH
30029: LD_VAR 0 1
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 20
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 17
30045: PUSH
30046: LD_INT 24
30048: PUSH
30049: LD_INT 21
30051: PUSH
30052: LD_INT 19
30054: PUSH
30055: LD_INT 16
30057: PUSH
30058: LD_INT 25
30060: PUSH
30061: LD_INT 18
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: IN
30076: ST_TO_ADDR
// end ;
30077: LD_VAR 0 2
30081: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30082: LD_INT 0
30084: PPUSH
30085: PPUSH
30086: PPUSH
// result := [ ] ;
30087: LD_ADDR_VAR 0 3
30091: PUSH
30092: EMPTY
30093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: LD_VAR 0 2
30103: PPUSH
30104: LD_INT 21
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 70
30118: ST_TO_ADDR
// if not tmp then
30119: LD_VAR 0 4
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30186
// for i in tmp do
30128: LD_ADDR_VAR 0 5
30132: PUSH
30133: LD_VAR 0 4
30137: PUSH
30138: FOR_IN
30139: IFFALSE 30174
// if GetBase ( i ) <> base then
30141: LD_VAR 0 5
30145: PPUSH
30146: CALL_OW 274
30150: PUSH
30151: LD_VAR 0 1
30155: NONEQUAL
30156: IFFALSE 30172
// ComLinkToBase ( base , i ) ;
30158: LD_VAR 0 1
30162: PPUSH
30163: LD_VAR 0 5
30167: PPUSH
30168: CALL_OW 169
30172: GO 30138
30174: POP
30175: POP
// result := tmp ;
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: LD_VAR 0 4
30185: ST_TO_ADDR
// end ;
30186: LD_VAR 0 3
30190: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
// if BuildingStatus ( b ) = bs_build then
30195: LD_VAR 0 2
30199: PPUSH
30200: CALL_OW 461
30204: PUSH
30205: LD_INT 1
30207: EQUAL
30208: IFFALSE 30268
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_STRING h
30217: PUSH
30218: LD_VAR 0 2
30222: PPUSH
30223: CALL_OW 250
30227: PUSH
30228: LD_VAR 0 2
30232: PPUSH
30233: CALL_OW 251
30237: PUSH
30238: LD_VAR 0 2
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: PPUSH
30264: CALL_OW 446
// end ;
30268: LD_VAR 0 3
30272: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30273: LD_INT 0
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30281: LD_VAR 0 1
30285: NOT
30286: PUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 263
30296: PUSH
30297: LD_INT 2
30299: EQUAL
30300: NOT
30301: OR
30302: IFFALSE 30306
// exit ;
30304: GO 30622
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30306: LD_ADDR_VAR 0 6
30310: PUSH
30311: LD_INT 22
30313: PUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 255
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 30
30333: PUSH
30334: LD_INT 36
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 34
30343: PUSH
30344: LD_INT 31
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PPUSH
30360: CALL_OW 69
30364: ST_TO_ADDR
// if not tmp then
30365: LD_VAR 0 6
30369: NOT
30370: IFFALSE 30374
// exit ;
30372: GO 30622
// result := [ ] ;
30374: LD_ADDR_VAR 0 2
30378: PUSH
30379: EMPTY
30380: ST_TO_ADDR
// for i in tmp do
30381: LD_ADDR_VAR 0 3
30385: PUSH
30386: LD_VAR 0 6
30390: PUSH
30391: FOR_IN
30392: IFFALSE 30463
// begin t := UnitsInside ( i ) ;
30394: LD_ADDR_VAR 0 4
30398: PUSH
30399: LD_VAR 0 3
30403: PPUSH
30404: CALL_OW 313
30408: ST_TO_ADDR
// if t then
30409: LD_VAR 0 4
30413: IFFALSE 30461
// for j in t do
30415: LD_ADDR_VAR 0 7
30419: PUSH
30420: LD_VAR 0 4
30424: PUSH
30425: FOR_IN
30426: IFFALSE 30459
// result := Insert ( result , result + 1 , j ) ;
30428: LD_ADDR_VAR 0 2
30432: PUSH
30433: LD_VAR 0 2
30437: PPUSH
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: PLUS
30446: PPUSH
30447: LD_VAR 0 7
30451: PPUSH
30452: CALL_OW 2
30456: ST_TO_ADDR
30457: GO 30425
30459: POP
30460: POP
// end ;
30461: GO 30391
30463: POP
30464: POP
// if not result then
30465: LD_VAR 0 2
30469: NOT
30470: IFFALSE 30474
// exit ;
30472: GO 30622
// mech := result [ 1 ] ;
30474: LD_ADDR_VAR 0 5
30478: PUSH
30479: LD_VAR 0 2
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: ST_TO_ADDR
// if result > 1 then
30488: LD_VAR 0 2
30492: PUSH
30493: LD_INT 1
30495: GREATER
30496: IFFALSE 30608
// for i = 2 to result do
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: DOUBLE
30504: LD_INT 2
30506: DEC
30507: ST_TO_ADDR
30508: LD_VAR 0 2
30512: PUSH
30513: FOR_TO
30514: IFFALSE 30606
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30516: LD_ADDR_VAR 0 4
30520: PUSH
30521: LD_VAR 0 2
30525: PUSH
30526: LD_VAR 0 3
30530: ARRAY
30531: PPUSH
30532: LD_INT 3
30534: PPUSH
30535: CALL_OW 259
30539: PUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_VAR 0 3
30549: ARRAY
30550: PPUSH
30551: CALL_OW 432
30555: MINUS
30556: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30557: LD_VAR 0 4
30561: PUSH
30562: LD_VAR 0 5
30566: PPUSH
30567: LD_INT 3
30569: PPUSH
30570: CALL_OW 259
30574: PUSH
30575: LD_VAR 0 5
30579: PPUSH
30580: CALL_OW 432
30584: MINUS
30585: GREATEREQUAL
30586: IFFALSE 30604
// mech := result [ i ] ;
30588: LD_ADDR_VAR 0 5
30592: PUSH
30593: LD_VAR 0 2
30597: PUSH
30598: LD_VAR 0 3
30602: ARRAY
30603: ST_TO_ADDR
// end ;
30604: GO 30513
30606: POP
30607: POP
// ComLinkTo ( vehicle , mech ) ;
30608: LD_VAR 0 1
30612: PPUSH
30613: LD_VAR 0 5
30617: PPUSH
30618: CALL_OW 135
// end ;
30622: LD_VAR 0 2
30626: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
// result := [ ] ;
30642: LD_ADDR_VAR 0 7
30646: PUSH
30647: EMPTY
30648: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 266
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: IN
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 32305
// if name then
30674: LD_VAR 0 3
30678: IFFALSE 30694
// SetBName ( base_dep , name ) ;
30680: LD_VAR 0 1
30684: PPUSH
30685: LD_VAR 0 3
30689: PPUSH
30690: CALL_OW 500
// base := GetBase ( base_dep ) ;
30694: LD_ADDR_VAR 0 15
30698: PUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 274
30708: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30709: LD_ADDR_VAR 0 16
30713: PUSH
30714: LD_VAR 0 1
30718: PPUSH
30719: CALL_OW 255
30723: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30724: LD_ADDR_VAR 0 17
30728: PUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 248
30738: ST_TO_ADDR
// if sources then
30739: LD_VAR 0 5
30743: IFFALSE 30790
// for i = 1 to 3 do
30745: LD_ADDR_VAR 0 8
30749: PUSH
30750: DOUBLE
30751: LD_INT 1
30753: DEC
30754: ST_TO_ADDR
30755: LD_INT 3
30757: PUSH
30758: FOR_TO
30759: IFFALSE 30788
// AddResourceType ( base , i , sources [ i ] ) ;
30761: LD_VAR 0 15
30765: PPUSH
30766: LD_VAR 0 8
30770: PPUSH
30771: LD_VAR 0 5
30775: PUSH
30776: LD_VAR 0 8
30780: ARRAY
30781: PPUSH
30782: CALL_OW 276
30786: GO 30758
30788: POP
30789: POP
// buildings := GetBaseBuildings ( base , area ) ;
30790: LD_ADDR_VAR 0 18
30794: PUSH
30795: LD_VAR 0 15
30799: PPUSH
30800: LD_VAR 0 2
30804: PPUSH
30805: CALL 30082 0 2
30809: ST_TO_ADDR
// InitHc ;
30810: CALL_OW 19
// InitUc ;
30814: CALL_OW 18
// uc_side := side ;
30818: LD_ADDR_OWVAR 20
30822: PUSH
30823: LD_VAR 0 16
30827: ST_TO_ADDR
// uc_nation := nation ;
30828: LD_ADDR_OWVAR 21
30832: PUSH
30833: LD_VAR 0 17
30837: ST_TO_ADDR
// if buildings then
30838: LD_VAR 0 18
30842: IFFALSE 32164
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30844: LD_ADDR_VAR 0 19
30848: PUSH
30849: LD_VAR 0 18
30853: PPUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 30
30859: PUSH
30860: LD_INT 29
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 30
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: PPUSH
30882: CALL_OW 72
30886: ST_TO_ADDR
// if tmp then
30887: LD_VAR 0 19
30891: IFFALSE 30939
// for i in tmp do
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_VAR 0 19
30902: PUSH
30903: FOR_IN
30904: IFFALSE 30937
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30906: LD_VAR 0 8
30910: PPUSH
30911: CALL_OW 250
30915: PPUSH
30916: LD_VAR 0 8
30920: PPUSH
30921: CALL_OW 251
30925: PPUSH
30926: LD_VAR 0 16
30930: PPUSH
30931: CALL_OW 441
30935: GO 30903
30937: POP
30938: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30939: LD_VAR 0 18
30943: PPUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 30
30949: PUSH
30950: LD_INT 32
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 33
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: PPUSH
30972: CALL_OW 72
30976: IFFALSE 31064
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30978: LD_ADDR_VAR 0 8
30982: PUSH
30983: LD_VAR 0 18
30987: PPUSH
30988: LD_INT 2
30990: PUSH
30991: LD_INT 30
30993: PUSH
30994: LD_INT 32
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 30
31003: PUSH
31004: LD_INT 33
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: PPUSH
31016: CALL_OW 72
31020: PUSH
31021: FOR_IN
31022: IFFALSE 31062
// begin if not GetBWeapon ( i ) then
31024: LD_VAR 0 8
31028: PPUSH
31029: CALL_OW 269
31033: NOT
31034: IFFALSE 31060
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31036: LD_VAR 0 8
31040: PPUSH
31041: LD_VAR 0 8
31045: PPUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL 32310 0 2
31055: PPUSH
31056: CALL_OW 431
// end ;
31060: GO 31021
31062: POP
31063: POP
// end ; for i = 1 to personel do
31064: LD_ADDR_VAR 0 8
31068: PUSH
31069: DOUBLE
31070: LD_INT 1
31072: DEC
31073: ST_TO_ADDR
31074: LD_VAR 0 6
31078: PUSH
31079: FOR_TO
31080: IFFALSE 32144
// begin if i > 4 then
31082: LD_VAR 0 8
31086: PUSH
31087: LD_INT 4
31089: GREATER
31090: IFFALSE 31094
// break ;
31092: GO 32144
// case i of 1 :
31094: LD_VAR 0 8
31098: PUSH
31099: LD_INT 1
31101: DOUBLE
31102: EQUAL
31103: IFTRUE 31107
31105: GO 31187
31107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31108: LD_ADDR_VAR 0 12
31112: PUSH
31113: LD_VAR 0 18
31117: PPUSH
31118: LD_INT 22
31120: PUSH
31121: LD_VAR 0 16
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 58
31132: PUSH
31133: EMPTY
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 30
31141: PUSH
31142: LD_INT 32
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: PPUSH
31180: CALL_OW 72
31184: ST_TO_ADDR
31185: GO 31409
31187: LD_INT 2
31189: DOUBLE
31190: EQUAL
31191: IFTRUE 31195
31193: GO 31257
31195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31196: LD_ADDR_VAR 0 12
31200: PUSH
31201: LD_VAR 0 18
31205: PPUSH
31206: LD_INT 22
31208: PUSH
31209: LD_VAR 0 16
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 30
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 72
31254: ST_TO_ADDR
31255: GO 31409
31257: LD_INT 3
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31327
31265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31266: LD_ADDR_VAR 0 12
31270: PUSH
31271: LD_VAR 0 18
31275: PPUSH
31276: LD_INT 22
31278: PUSH
31279: LD_VAR 0 16
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 30
31303: PUSH
31304: LD_INT 3
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 72
31324: ST_TO_ADDR
31325: GO 31409
31327: LD_INT 4
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31408
31335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31336: LD_ADDR_VAR 0 12
31340: PUSH
31341: LD_VAR 0 18
31345: PPUSH
31346: LD_INT 22
31348: PUSH
31349: LD_VAR 0 16
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 6
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 7
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 30
31383: PUSH
31384: LD_INT 8
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 72
31405: ST_TO_ADDR
31406: GO 31409
31408: POP
// if i = 1 then
31409: LD_VAR 0 8
31413: PUSH
31414: LD_INT 1
31416: EQUAL
31417: IFFALSE 31528
// begin tmp := [ ] ;
31419: LD_ADDR_VAR 0 19
31423: PUSH
31424: EMPTY
31425: ST_TO_ADDR
// for j in f do
31426: LD_ADDR_VAR 0 9
31430: PUSH
31431: LD_VAR 0 12
31435: PUSH
31436: FOR_IN
31437: IFFALSE 31510
// if GetBType ( j ) = b_bunker then
31439: LD_VAR 0 9
31443: PPUSH
31444: CALL_OW 266
31448: PUSH
31449: LD_INT 32
31451: EQUAL
31452: IFFALSE 31479
// tmp := Insert ( tmp , 1 , j ) else
31454: LD_ADDR_VAR 0 19
31458: PUSH
31459: LD_VAR 0 19
31463: PPUSH
31464: LD_INT 1
31466: PPUSH
31467: LD_VAR 0 9
31471: PPUSH
31472: CALL_OW 2
31476: ST_TO_ADDR
31477: GO 31508
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31479: LD_ADDR_VAR 0 19
31483: PUSH
31484: LD_VAR 0 19
31488: PPUSH
31489: LD_VAR 0 19
31493: PUSH
31494: LD_INT 1
31496: PLUS
31497: PPUSH
31498: LD_VAR 0 9
31502: PPUSH
31503: CALL_OW 2
31507: ST_TO_ADDR
31508: GO 31436
31510: POP
31511: POP
// if tmp then
31512: LD_VAR 0 19
31516: IFFALSE 31528
// f := tmp ;
31518: LD_ADDR_VAR 0 12
31522: PUSH
31523: LD_VAR 0 19
31527: ST_TO_ADDR
// end ; x := personel [ i ] ;
31528: LD_ADDR_VAR 0 13
31532: PUSH
31533: LD_VAR 0 6
31537: PUSH
31538: LD_VAR 0 8
31542: ARRAY
31543: ST_TO_ADDR
// if x = - 1 then
31544: LD_VAR 0 13
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: EQUAL
31553: IFFALSE 31762
// begin for j in f do
31555: LD_ADDR_VAR 0 9
31559: PUSH
31560: LD_VAR 0 12
31564: PUSH
31565: FOR_IN
31566: IFFALSE 31758
// repeat InitHc ;
31568: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31572: LD_VAR 0 9
31576: PPUSH
31577: CALL_OW 266
31581: PUSH
31582: LD_INT 5
31584: EQUAL
31585: IFFALSE 31655
// begin if UnitsInside ( j ) < 3 then
31587: LD_VAR 0 9
31591: PPUSH
31592: CALL_OW 313
31596: PUSH
31597: LD_INT 3
31599: LESS
31600: IFFALSE 31636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31602: LD_INT 0
31604: PPUSH
31605: LD_INT 5
31607: PUSH
31608: LD_INT 8
31610: PUSH
31611: LD_INT 9
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: PUSH
31619: LD_VAR 0 17
31623: ARRAY
31624: PPUSH
31625: LD_VAR 0 4
31629: PPUSH
31630: CALL_OW 380
31634: GO 31653
// PrepareHuman ( false , i , skill ) ;
31636: LD_INT 0
31638: PPUSH
31639: LD_VAR 0 8
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: CALL_OW 380
// end else
31653: GO 31672
// PrepareHuman ( false , i , skill ) ;
31655: LD_INT 0
31657: PPUSH
31658: LD_VAR 0 8
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: CALL_OW 380
// un := CreateHuman ;
31672: LD_ADDR_VAR 0 14
31676: PUSH
31677: CALL_OW 44
31681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31682: LD_ADDR_VAR 0 7
31686: PUSH
31687: LD_VAR 0 7
31691: PPUSH
31692: LD_INT 1
31694: PPUSH
31695: LD_VAR 0 14
31699: PPUSH
31700: CALL_OW 2
31704: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31705: LD_VAR 0 14
31709: PPUSH
31710: LD_VAR 0 9
31714: PPUSH
31715: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31719: LD_VAR 0 9
31723: PPUSH
31724: CALL_OW 313
31728: PUSH
31729: LD_INT 6
31731: EQUAL
31732: PUSH
31733: LD_VAR 0 9
31737: PPUSH
31738: CALL_OW 266
31742: PUSH
31743: LD_INT 32
31745: PUSH
31746: LD_INT 31
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: IN
31753: OR
31754: IFFALSE 31568
31756: GO 31565
31758: POP
31759: POP
// end else
31760: GO 32142
// for j = 1 to x do
31762: LD_ADDR_VAR 0 9
31766: PUSH
31767: DOUBLE
31768: LD_INT 1
31770: DEC
31771: ST_TO_ADDR
31772: LD_VAR 0 13
31776: PUSH
31777: FOR_TO
31778: IFFALSE 32140
// begin InitHc ;
31780: CALL_OW 19
// if not f then
31784: LD_VAR 0 12
31788: NOT
31789: IFFALSE 31878
// begin PrepareHuman ( false , i , skill ) ;
31791: LD_INT 0
31793: PPUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: LD_VAR 0 4
31803: PPUSH
31804: CALL_OW 380
// un := CreateHuman ;
31808: LD_ADDR_VAR 0 14
31812: PUSH
31813: CALL_OW 44
31817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31818: LD_ADDR_VAR 0 7
31822: PUSH
31823: LD_VAR 0 7
31827: PPUSH
31828: LD_INT 1
31830: PPUSH
31831: LD_VAR 0 14
31835: PPUSH
31836: CALL_OW 2
31840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31841: LD_VAR 0 14
31845: PPUSH
31846: LD_VAR 0 1
31850: PPUSH
31851: CALL_OW 250
31855: PPUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL_OW 251
31865: PPUSH
31866: LD_INT 10
31868: PPUSH
31869: LD_INT 0
31871: PPUSH
31872: CALL_OW 50
// continue ;
31876: GO 31777
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31878: LD_VAR 0 12
31882: PUSH
31883: LD_INT 1
31885: ARRAY
31886: PPUSH
31887: CALL_OW 313
31891: PUSH
31892: LD_VAR 0 12
31896: PUSH
31897: LD_INT 1
31899: ARRAY
31900: PPUSH
31901: CALL_OW 266
31905: PUSH
31906: LD_INT 32
31908: PUSH
31909: LD_INT 31
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: IN
31916: AND
31917: PUSH
31918: LD_VAR 0 12
31922: PUSH
31923: LD_INT 1
31925: ARRAY
31926: PPUSH
31927: CALL_OW 313
31931: PUSH
31932: LD_INT 6
31934: EQUAL
31935: OR
31936: IFFALSE 31956
// f := Delete ( f , 1 ) ;
31938: LD_ADDR_VAR 0 12
31942: PUSH
31943: LD_VAR 0 12
31947: PPUSH
31948: LD_INT 1
31950: PPUSH
31951: CALL_OW 3
31955: ST_TO_ADDR
// if not f then
31956: LD_VAR 0 12
31960: NOT
31961: IFFALSE 31979
// begin x := x + 2 ;
31963: LD_ADDR_VAR 0 13
31967: PUSH
31968: LD_VAR 0 13
31972: PUSH
31973: LD_INT 2
31975: PLUS
31976: ST_TO_ADDR
// continue ;
31977: GO 31777
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31979: LD_VAR 0 12
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: PPUSH
31988: CALL_OW 266
31992: PUSH
31993: LD_INT 5
31995: EQUAL
31996: IFFALSE 32070
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31998: LD_VAR 0 12
32002: PUSH
32003: LD_INT 1
32005: ARRAY
32006: PPUSH
32007: CALL_OW 313
32011: PUSH
32012: LD_INT 3
32014: LESS
32015: IFFALSE 32051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32017: LD_INT 0
32019: PPUSH
32020: LD_INT 5
32022: PUSH
32023: LD_INT 8
32025: PUSH
32026: LD_INT 9
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: PUSH
32034: LD_VAR 0 17
32038: ARRAY
32039: PPUSH
32040: LD_VAR 0 4
32044: PPUSH
32045: CALL_OW 380
32049: GO 32068
// PrepareHuman ( false , i , skill ) ;
32051: LD_INT 0
32053: PPUSH
32054: LD_VAR 0 8
32058: PPUSH
32059: LD_VAR 0 4
32063: PPUSH
32064: CALL_OW 380
// end else
32068: GO 32087
// PrepareHuman ( false , i , skill ) ;
32070: LD_INT 0
32072: PPUSH
32073: LD_VAR 0 8
32077: PPUSH
32078: LD_VAR 0 4
32082: PPUSH
32083: CALL_OW 380
// un := CreateHuman ;
32087: LD_ADDR_VAR 0 14
32091: PUSH
32092: CALL_OW 44
32096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32097: LD_ADDR_VAR 0 7
32101: PUSH
32102: LD_VAR 0 7
32106: PPUSH
32107: LD_INT 1
32109: PPUSH
32110: LD_VAR 0 14
32114: PPUSH
32115: CALL_OW 2
32119: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32120: LD_VAR 0 14
32124: PPUSH
32125: LD_VAR 0 12
32129: PUSH
32130: LD_INT 1
32132: ARRAY
32133: PPUSH
32134: CALL_OW 52
// end ;
32138: GO 31777
32140: POP
32141: POP
// end ;
32142: GO 31079
32144: POP
32145: POP
// result := result ^ buildings ;
32146: LD_ADDR_VAR 0 7
32150: PUSH
32151: LD_VAR 0 7
32155: PUSH
32156: LD_VAR 0 18
32160: ADD
32161: ST_TO_ADDR
// end else
32162: GO 32305
// begin for i = 1 to personel do
32164: LD_ADDR_VAR 0 8
32168: PUSH
32169: DOUBLE
32170: LD_INT 1
32172: DEC
32173: ST_TO_ADDR
32174: LD_VAR 0 6
32178: PUSH
32179: FOR_TO
32180: IFFALSE 32303
// begin if i > 4 then
32182: LD_VAR 0 8
32186: PUSH
32187: LD_INT 4
32189: GREATER
32190: IFFALSE 32194
// break ;
32192: GO 32303
// x := personel [ i ] ;
32194: LD_ADDR_VAR 0 13
32198: PUSH
32199: LD_VAR 0 6
32203: PUSH
32204: LD_VAR 0 8
32208: ARRAY
32209: ST_TO_ADDR
// if x = - 1 then
32210: LD_VAR 0 13
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: EQUAL
32219: IFFALSE 32223
// continue ;
32221: GO 32179
// PrepareHuman ( false , i , skill ) ;
32223: LD_INT 0
32225: PPUSH
32226: LD_VAR 0 8
32230: PPUSH
32231: LD_VAR 0 4
32235: PPUSH
32236: CALL_OW 380
// un := CreateHuman ;
32240: LD_ADDR_VAR 0 14
32244: PUSH
32245: CALL_OW 44
32249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32250: LD_VAR 0 14
32254: PPUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: CALL_OW 250
32264: PPUSH
32265: LD_VAR 0 1
32269: PPUSH
32270: CALL_OW 251
32274: PPUSH
32275: LD_INT 10
32277: PPUSH
32278: LD_INT 0
32280: PPUSH
32281: CALL_OW 50
// result := result ^ un ;
32285: LD_ADDR_VAR 0 7
32289: PUSH
32290: LD_VAR 0 7
32294: PUSH
32295: LD_VAR 0 14
32299: ADD
32300: ST_TO_ADDR
// end ;
32301: GO 32179
32303: POP
32304: POP
// end ; end ;
32305: LD_VAR 0 7
32309: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32310: LD_INT 0
32312: PPUSH
32313: PPUSH
32314: PPUSH
32315: PPUSH
32316: PPUSH
32317: PPUSH
32318: PPUSH
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
32323: PPUSH
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
// result := false ;
32328: LD_ADDR_VAR 0 3
32332: PUSH
32333: LD_INT 0
32335: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32336: LD_VAR 0 1
32340: NOT
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 266
32351: PUSH
32352: LD_INT 32
32354: PUSH
32355: LD_INT 33
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: IN
32362: NOT
32363: OR
32364: IFFALSE 32368
// exit ;
32366: GO 33504
// nat := GetNation ( tower ) ;
32368: LD_ADDR_VAR 0 12
32372: PUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 248
32382: ST_TO_ADDR
// side := GetSide ( tower ) ;
32383: LD_ADDR_VAR 0 16
32387: PUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 255
32397: ST_TO_ADDR
// x := GetX ( tower ) ;
32398: LD_ADDR_VAR 0 10
32402: PUSH
32403: LD_VAR 0 1
32407: PPUSH
32408: CALL_OW 250
32412: ST_TO_ADDR
// y := GetY ( tower ) ;
32413: LD_ADDR_VAR 0 11
32417: PUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: CALL_OW 251
32427: ST_TO_ADDR
// if not x or not y then
32428: LD_VAR 0 10
32432: NOT
32433: PUSH
32434: LD_VAR 0 11
32438: NOT
32439: OR
32440: IFFALSE 32444
// exit ;
32442: GO 33504
// weapon := 0 ;
32444: LD_ADDR_VAR 0 18
32448: PUSH
32449: LD_INT 0
32451: ST_TO_ADDR
// fac_list := [ ] ;
32452: LD_ADDR_VAR 0 17
32456: PUSH
32457: EMPTY
32458: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32459: LD_ADDR_VAR 0 6
32463: PUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: CALL_OW 274
32473: PPUSH
32474: LD_VAR 0 2
32478: PPUSH
32479: CALL 30082 0 2
32483: PPUSH
32484: LD_INT 30
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PPUSH
32494: CALL_OW 72
32498: ST_TO_ADDR
// if not factories then
32499: LD_VAR 0 6
32503: NOT
32504: IFFALSE 32508
// exit ;
32506: GO 33504
// for i in factories do
32508: LD_ADDR_VAR 0 8
32512: PUSH
32513: LD_VAR 0 6
32517: PUSH
32518: FOR_IN
32519: IFFALSE 32544
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32521: LD_ADDR_VAR 0 17
32525: PUSH
32526: LD_VAR 0 17
32530: PUSH
32531: LD_VAR 0 8
32535: PPUSH
32536: CALL_OW 478
32540: UNION
32541: ST_TO_ADDR
32542: GO 32518
32544: POP
32545: POP
// if not fac_list then
32546: LD_VAR 0 17
32550: NOT
32551: IFFALSE 32555
// exit ;
32553: GO 33504
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: LD_INT 5
32565: PUSH
32566: LD_INT 9
32568: PUSH
32569: LD_INT 10
32571: PUSH
32572: LD_INT 6
32574: PUSH
32575: LD_INT 7
32577: PUSH
32578: LD_INT 11
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 27
32592: PUSH
32593: LD_INT 28
32595: PUSH
32596: LD_INT 26
32598: PUSH
32599: LD_INT 30
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 43
32610: PUSH
32611: LD_INT 44
32613: PUSH
32614: LD_INT 46
32616: PUSH
32617: LD_INT 45
32619: PUSH
32620: LD_INT 47
32622: PUSH
32623: LD_INT 49
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: PUSH
32639: LD_VAR 0 12
32643: ARRAY
32644: ST_TO_ADDR
// for i in list do
32645: LD_ADDR_VAR 0 8
32649: PUSH
32650: LD_VAR 0 5
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32689
// if not i in fac_list then
32658: LD_VAR 0 8
32662: PUSH
32663: LD_VAR 0 17
32667: IN
32668: NOT
32669: IFFALSE 32687
// list := list diff i ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_VAR 0 5
32680: PUSH
32681: LD_VAR 0 8
32685: DIFF
32686: ST_TO_ADDR
32687: GO 32655
32689: POP
32690: POP
// if not list then
32691: LD_VAR 0 5
32695: NOT
32696: IFFALSE 32700
// exit ;
32698: GO 33504
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32700: LD_VAR 0 12
32704: PUSH
32705: LD_INT 3
32707: EQUAL
32708: PUSH
32709: LD_INT 49
32711: PUSH
32712: LD_VAR 0 5
32716: IN
32717: AND
32718: PUSH
32719: LD_INT 31
32721: PPUSH
32722: LD_VAR 0 16
32726: PPUSH
32727: CALL_OW 321
32731: PUSH
32732: LD_INT 2
32734: EQUAL
32735: AND
32736: IFFALSE 32796
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32738: LD_INT 22
32740: PUSH
32741: LD_VAR 0 16
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 35
32752: PUSH
32753: LD_INT 49
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 91
32762: PUSH
32763: LD_VAR 0 1
32767: PUSH
32768: LD_INT 10
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: PPUSH
32781: CALL_OW 69
32785: NOT
32786: IFFALSE 32796
// weapon := ru_time_lapser ;
32788: LD_ADDR_VAR 0 18
32792: PUSH
32793: LD_INT 49
32795: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32796: LD_VAR 0 12
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: IN
32811: PUSH
32812: LD_INT 11
32814: PUSH
32815: LD_VAR 0 5
32819: IN
32820: PUSH
32821: LD_INT 30
32823: PUSH
32824: LD_VAR 0 5
32828: IN
32829: OR
32830: AND
32831: PUSH
32832: LD_INT 6
32834: PPUSH
32835: LD_VAR 0 16
32839: PPUSH
32840: CALL_OW 321
32844: PUSH
32845: LD_INT 2
32847: EQUAL
32848: AND
32849: IFFALSE 33014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32851: LD_INT 22
32853: PUSH
32854: LD_VAR 0 16
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 35
32868: PUSH
32869: LD_INT 11
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 35
32878: PUSH
32879: LD_INT 30
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 91
32893: PUSH
32894: LD_VAR 0 1
32898: PUSH
32899: LD_INT 18
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: PPUSH
32912: CALL_OW 69
32916: NOT
32917: PUSH
32918: LD_INT 22
32920: PUSH
32921: LD_VAR 0 16
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 30
32935: PUSH
32936: LD_INT 32
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: LD_INT 33
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 91
32960: PUSH
32961: LD_VAR 0 1
32965: PUSH
32966: LD_INT 12
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: PUSH
32979: EMPTY
32980: LIST
32981: PPUSH
32982: CALL_OW 69
32986: PUSH
32987: LD_INT 2
32989: GREATER
32990: AND
32991: IFFALSE 33014
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32993: LD_ADDR_VAR 0 18
32997: PUSH
32998: LD_INT 11
33000: PUSH
33001: LD_INT 30
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_VAR 0 12
33012: ARRAY
33013: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33014: LD_VAR 0 18
33018: NOT
33019: PUSH
33020: LD_INT 40
33022: PPUSH
33023: LD_VAR 0 16
33027: PPUSH
33028: CALL_OW 321
33032: PUSH
33033: LD_INT 2
33035: EQUAL
33036: AND
33037: PUSH
33038: LD_INT 7
33040: PUSH
33041: LD_VAR 0 5
33045: IN
33046: PUSH
33047: LD_INT 28
33049: PUSH
33050: LD_VAR 0 5
33054: IN
33055: OR
33056: PUSH
33057: LD_INT 45
33059: PUSH
33060: LD_VAR 0 5
33064: IN
33065: OR
33066: AND
33067: IFFALSE 33321
// begin hex := GetHexInfo ( x , y ) ;
33069: LD_ADDR_VAR 0 4
33073: PUSH
33074: LD_VAR 0 10
33078: PPUSH
33079: LD_VAR 0 11
33083: PPUSH
33084: CALL_OW 546
33088: ST_TO_ADDR
// if hex [ 1 ] then
33089: LD_VAR 0 4
33093: PUSH
33094: LD_INT 1
33096: ARRAY
33097: IFFALSE 33101
// exit ;
33099: GO 33504
// height := hex [ 2 ] ;
33101: LD_ADDR_VAR 0 15
33105: PUSH
33106: LD_VAR 0 4
33110: PUSH
33111: LD_INT 2
33113: ARRAY
33114: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33115: LD_ADDR_VAR 0 14
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: ST_TO_ADDR
// for i in tmp do
33138: LD_ADDR_VAR 0 8
33142: PUSH
33143: LD_VAR 0 14
33147: PUSH
33148: FOR_IN
33149: IFFALSE 33319
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33151: LD_ADDR_VAR 0 9
33155: PUSH
33156: LD_VAR 0 10
33160: PPUSH
33161: LD_VAR 0 8
33165: PPUSH
33166: LD_INT 5
33168: PPUSH
33169: CALL_OW 272
33173: PUSH
33174: LD_VAR 0 11
33178: PPUSH
33179: LD_VAR 0 8
33183: PPUSH
33184: LD_INT 5
33186: PPUSH
33187: CALL_OW 273
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33196: LD_VAR 0 9
33200: PUSH
33201: LD_INT 1
33203: ARRAY
33204: PPUSH
33205: LD_VAR 0 9
33209: PUSH
33210: LD_INT 2
33212: ARRAY
33213: PPUSH
33214: CALL_OW 488
33218: IFFALSE 33317
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33220: LD_ADDR_VAR 0 4
33224: PUSH
33225: LD_VAR 0 9
33229: PUSH
33230: LD_INT 1
33232: ARRAY
33233: PPUSH
33234: LD_VAR 0 9
33238: PUSH
33239: LD_INT 2
33241: ARRAY
33242: PPUSH
33243: CALL_OW 546
33247: ST_TO_ADDR
// if hex [ 1 ] then
33248: LD_VAR 0 4
33252: PUSH
33253: LD_INT 1
33255: ARRAY
33256: IFFALSE 33260
// continue ;
33258: GO 33148
// h := hex [ 2 ] ;
33260: LD_ADDR_VAR 0 13
33264: PUSH
33265: LD_VAR 0 4
33269: PUSH
33270: LD_INT 2
33272: ARRAY
33273: ST_TO_ADDR
// if h + 7 < height then
33274: LD_VAR 0 13
33278: PUSH
33279: LD_INT 7
33281: PLUS
33282: PUSH
33283: LD_VAR 0 15
33287: LESS
33288: IFFALSE 33317
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33290: LD_ADDR_VAR 0 18
33294: PUSH
33295: LD_INT 7
33297: PUSH
33298: LD_INT 28
33300: PUSH
33301: LD_INT 45
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: PUSH
33309: LD_VAR 0 12
33313: ARRAY
33314: ST_TO_ADDR
// break ;
33315: GO 33319
// end ; end ; end ;
33317: GO 33148
33319: POP
33320: POP
// end ; if not weapon then
33321: LD_VAR 0 18
33325: NOT
33326: IFFALSE 33386
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_VAR 0 5
33337: PUSH
33338: LD_INT 11
33340: PUSH
33341: LD_INT 30
33343: PUSH
33344: LD_INT 49
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: DIFF
33352: ST_TO_ADDR
// if not list then
33353: LD_VAR 0 5
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 33504
// weapon := list [ rand ( 1 , list ) ] ;
33362: LD_ADDR_VAR 0 18
33366: PUSH
33367: LD_VAR 0 5
33371: PUSH
33372: LD_INT 1
33374: PPUSH
33375: LD_VAR 0 5
33379: PPUSH
33380: CALL_OW 12
33384: ARRAY
33385: ST_TO_ADDR
// end ; if weapon then
33386: LD_VAR 0 18
33390: IFFALSE 33504
// begin tmp := CostOfWeapon ( weapon ) ;
33392: LD_ADDR_VAR 0 14
33396: PUSH
33397: LD_VAR 0 18
33401: PPUSH
33402: CALL_OW 451
33406: ST_TO_ADDR
// j := GetBase ( tower ) ;
33407: LD_ADDR_VAR 0 9
33411: PUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: CALL_OW 274
33421: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33422: LD_VAR 0 9
33426: PPUSH
33427: LD_INT 1
33429: PPUSH
33430: CALL_OW 275
33434: PUSH
33435: LD_VAR 0 14
33439: PUSH
33440: LD_INT 1
33442: ARRAY
33443: GREATEREQUAL
33444: PUSH
33445: LD_VAR 0 9
33449: PPUSH
33450: LD_INT 2
33452: PPUSH
33453: CALL_OW 275
33457: PUSH
33458: LD_VAR 0 14
33462: PUSH
33463: LD_INT 2
33465: ARRAY
33466: GREATEREQUAL
33467: AND
33468: PUSH
33469: LD_VAR 0 9
33473: PPUSH
33474: LD_INT 3
33476: PPUSH
33477: CALL_OW 275
33481: PUSH
33482: LD_VAR 0 14
33486: PUSH
33487: LD_INT 3
33489: ARRAY
33490: GREATEREQUAL
33491: AND
33492: IFFALSE 33504
// result := weapon ;
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_VAR 0 18
33503: ST_TO_ADDR
// end ; end ;
33504: LD_VAR 0 3
33508: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33509: LD_INT 0
33511: PPUSH
33512: PPUSH
// result := true ;
33513: LD_ADDR_VAR 0 3
33517: PUSH
33518: LD_INT 1
33520: ST_TO_ADDR
// if array1 = array2 then
33521: LD_VAR 0 1
33525: PUSH
33526: LD_VAR 0 2
33530: EQUAL
33531: IFFALSE 33591
// begin for i = 1 to array1 do
33533: LD_ADDR_VAR 0 4
33537: PUSH
33538: DOUBLE
33539: LD_INT 1
33541: DEC
33542: ST_TO_ADDR
33543: LD_VAR 0 1
33547: PUSH
33548: FOR_TO
33549: IFFALSE 33587
// if array1 [ i ] <> array2 [ i ] then
33551: LD_VAR 0 1
33555: PUSH
33556: LD_VAR 0 4
33560: ARRAY
33561: PUSH
33562: LD_VAR 0 2
33566: PUSH
33567: LD_VAR 0 4
33571: ARRAY
33572: NONEQUAL
33573: IFFALSE 33585
// begin result := false ;
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 0
33582: ST_TO_ADDR
// break ;
33583: GO 33587
// end ;
33585: GO 33548
33587: POP
33588: POP
// end else
33589: GO 33599
// result := false ;
33591: LD_ADDR_VAR 0 3
33595: PUSH
33596: LD_INT 0
33598: ST_TO_ADDR
// end ;
33599: LD_VAR 0 3
33603: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33604: LD_INT 0
33606: PPUSH
33607: PPUSH
33608: PPUSH
// pom := GetBase ( fac ) ;
33609: LD_ADDR_VAR 0 5
33613: PUSH
33614: LD_VAR 0 1
33618: PPUSH
33619: CALL_OW 274
33623: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33624: LD_ADDR_VAR 0 4
33628: PUSH
33629: LD_VAR 0 2
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: PPUSH
33638: LD_VAR 0 2
33642: PUSH
33643: LD_INT 2
33645: ARRAY
33646: PPUSH
33647: LD_VAR 0 2
33651: PUSH
33652: LD_INT 3
33654: ARRAY
33655: PPUSH
33656: LD_VAR 0 2
33660: PUSH
33661: LD_INT 4
33663: ARRAY
33664: PPUSH
33665: CALL_OW 449
33669: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_VAR 0 5
33679: PPUSH
33680: LD_INT 1
33682: PPUSH
33683: CALL_OW 275
33687: PUSH
33688: LD_VAR 0 4
33692: PUSH
33693: LD_INT 1
33695: ARRAY
33696: GREATEREQUAL
33697: PUSH
33698: LD_VAR 0 5
33702: PPUSH
33703: LD_INT 2
33705: PPUSH
33706: CALL_OW 275
33710: PUSH
33711: LD_VAR 0 4
33715: PUSH
33716: LD_INT 2
33718: ARRAY
33719: GREATEREQUAL
33720: AND
33721: PUSH
33722: LD_VAR 0 5
33726: PPUSH
33727: LD_INT 3
33729: PPUSH
33730: CALL_OW 275
33734: PUSH
33735: LD_VAR 0 4
33739: PUSH
33740: LD_INT 3
33742: ARRAY
33743: GREATEREQUAL
33744: AND
33745: ST_TO_ADDR
// end ;
33746: LD_VAR 0 3
33750: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33751: LD_INT 0
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
// pom := GetBase ( building ) ;
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 274
33771: ST_TO_ADDR
// if not pom then
33772: LD_VAR 0 3
33776: NOT
33777: IFFALSE 33781
// exit ;
33779: GO 33951
// btype := GetBType ( building ) ;
33781: LD_ADDR_VAR 0 5
33785: PUSH
33786: LD_VAR 0 1
33790: PPUSH
33791: CALL_OW 266
33795: ST_TO_ADDR
// if btype = b_armoury then
33796: LD_VAR 0 5
33800: PUSH
33801: LD_INT 4
33803: EQUAL
33804: IFFALSE 33814
// btype := b_barracks ;
33806: LD_ADDR_VAR 0 5
33810: PUSH
33811: LD_INT 5
33813: ST_TO_ADDR
// if btype = b_depot then
33814: LD_VAR 0 5
33818: PUSH
33819: LD_INT 0
33821: EQUAL
33822: IFFALSE 33832
// btype := b_warehouse ;
33824: LD_ADDR_VAR 0 5
33828: PUSH
33829: LD_INT 1
33831: ST_TO_ADDR
// if btype = b_workshop then
33832: LD_VAR 0 5
33836: PUSH
33837: LD_INT 2
33839: EQUAL
33840: IFFALSE 33850
// btype := b_factory ;
33842: LD_ADDR_VAR 0 5
33846: PUSH
33847: LD_INT 3
33849: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33850: LD_ADDR_VAR 0 4
33854: PUSH
33855: LD_VAR 0 5
33859: PPUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 248
33869: PPUSH
33870: CALL_OW 450
33874: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33875: LD_ADDR_VAR 0 2
33879: PUSH
33880: LD_VAR 0 3
33884: PPUSH
33885: LD_INT 1
33887: PPUSH
33888: CALL_OW 275
33892: PUSH
33893: LD_VAR 0 4
33897: PUSH
33898: LD_INT 1
33900: ARRAY
33901: GREATEREQUAL
33902: PUSH
33903: LD_VAR 0 3
33907: PPUSH
33908: LD_INT 2
33910: PPUSH
33911: CALL_OW 275
33915: PUSH
33916: LD_VAR 0 4
33920: PUSH
33921: LD_INT 2
33923: ARRAY
33924: GREATEREQUAL
33925: AND
33926: PUSH
33927: LD_VAR 0 3
33931: PPUSH
33932: LD_INT 3
33934: PPUSH
33935: CALL_OW 275
33939: PUSH
33940: LD_VAR 0 4
33944: PUSH
33945: LD_INT 3
33947: ARRAY
33948: GREATEREQUAL
33949: AND
33950: ST_TO_ADDR
// end ;
33951: LD_VAR 0 2
33955: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33956: LD_INT 0
33958: PPUSH
33959: PPUSH
33960: PPUSH
// pom := GetBase ( building ) ;
33961: LD_ADDR_VAR 0 4
33965: PUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: CALL_OW 274
33975: ST_TO_ADDR
// if not pom then
33976: LD_VAR 0 4
33980: NOT
33981: IFFALSE 33985
// exit ;
33983: GO 34086
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33985: LD_ADDR_VAR 0 5
33989: PUSH
33990: LD_VAR 0 2
33994: PPUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 248
34004: PPUSH
34005: CALL_OW 450
34009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_VAR 0 4
34019: PPUSH
34020: LD_INT 1
34022: PPUSH
34023: CALL_OW 275
34027: PUSH
34028: LD_VAR 0 5
34032: PUSH
34033: LD_INT 1
34035: ARRAY
34036: GREATEREQUAL
34037: PUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: LD_INT 2
34045: PPUSH
34046: CALL_OW 275
34050: PUSH
34051: LD_VAR 0 5
34055: PUSH
34056: LD_INT 2
34058: ARRAY
34059: GREATEREQUAL
34060: AND
34061: PUSH
34062: LD_VAR 0 4
34066: PPUSH
34067: LD_INT 3
34069: PPUSH
34070: CALL_OW 275
34074: PUSH
34075: LD_VAR 0 5
34079: PUSH
34080: LD_INT 3
34082: ARRAY
34083: GREATEREQUAL
34084: AND
34085: ST_TO_ADDR
// end ;
34086: LD_VAR 0 3
34090: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34091: LD_INT 0
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
// result := false ;
34103: LD_ADDR_VAR 0 6
34107: PUSH
34108: LD_INT 0
34110: ST_TO_ADDR
// if not base or not btype or not x or not y then
34111: LD_VAR 0 1
34115: NOT
34116: PUSH
34117: LD_VAR 0 2
34121: NOT
34122: OR
34123: PUSH
34124: LD_VAR 0 3
34128: NOT
34129: OR
34130: PUSH
34131: LD_VAR 0 4
34135: NOT
34136: OR
34137: IFFALSE 34141
// exit ;
34139: GO 34750
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34141: LD_ADDR_VAR 0 12
34145: PUSH
34146: LD_VAR 0 2
34150: PPUSH
34151: LD_VAR 0 3
34155: PPUSH
34156: LD_VAR 0 4
34160: PPUSH
34161: LD_VAR 0 5
34165: PPUSH
34166: LD_VAR 0 1
34170: PUSH
34171: LD_INT 1
34173: ARRAY
34174: PPUSH
34175: CALL_OW 248
34179: PPUSH
34180: LD_INT 0
34182: PPUSH
34183: CALL 35587 0 6
34187: ST_TO_ADDR
// if not hexes then
34188: LD_VAR 0 12
34192: NOT
34193: IFFALSE 34197
// exit ;
34195: GO 34750
// for i = 1 to hexes do
34197: LD_ADDR_VAR 0 7
34201: PUSH
34202: DOUBLE
34203: LD_INT 1
34205: DEC
34206: ST_TO_ADDR
34207: LD_VAR 0 12
34211: PUSH
34212: FOR_TO
34213: IFFALSE 34748
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34215: LD_ADDR_VAR 0 11
34219: PUSH
34220: LD_VAR 0 12
34224: PUSH
34225: LD_VAR 0 7
34229: ARRAY
34230: PUSH
34231: LD_INT 1
34233: ARRAY
34234: PPUSH
34235: LD_VAR 0 12
34239: PUSH
34240: LD_VAR 0 7
34244: ARRAY
34245: PUSH
34246: LD_INT 2
34248: ARRAY
34249: PPUSH
34250: CALL_OW 428
34254: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34255: LD_VAR 0 12
34259: PUSH
34260: LD_VAR 0 7
34264: ARRAY
34265: PUSH
34266: LD_INT 1
34268: ARRAY
34269: PPUSH
34270: LD_VAR 0 12
34274: PUSH
34275: LD_VAR 0 7
34279: ARRAY
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PPUSH
34285: CALL_OW 351
34289: PUSH
34290: LD_VAR 0 12
34294: PUSH
34295: LD_VAR 0 7
34299: ARRAY
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PPUSH
34305: LD_VAR 0 12
34309: PUSH
34310: LD_VAR 0 7
34314: ARRAY
34315: PUSH
34316: LD_INT 2
34318: ARRAY
34319: PPUSH
34320: CALL_OW 488
34324: NOT
34325: OR
34326: PUSH
34327: LD_VAR 0 11
34331: PPUSH
34332: CALL_OW 247
34336: PUSH
34337: LD_INT 3
34339: EQUAL
34340: OR
34341: IFFALSE 34347
// exit ;
34343: POP
34344: POP
34345: GO 34750
// if not tmp or not tmp in base then
34347: LD_VAR 0 11
34351: NOT
34352: PUSH
34353: LD_VAR 0 11
34357: PUSH
34358: LD_VAR 0 1
34362: IN
34363: NOT
34364: OR
34365: IFFALSE 34369
// continue ;
34367: GO 34212
// result := true ;
34369: LD_ADDR_VAR 0 6
34373: PUSH
34374: LD_INT 1
34376: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34377: LD_ADDR_VAR 0 15
34381: PUSH
34382: LD_VAR 0 1
34386: PPUSH
34387: LD_INT 22
34389: PUSH
34390: LD_VAR 0 11
34394: PPUSH
34395: CALL_OW 255
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 30
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PPUSH
34436: CALL_OW 72
34440: ST_TO_ADDR
// if dep then
34441: LD_VAR 0 15
34445: IFFALSE 34581
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34447: LD_ADDR_VAR 0 14
34451: PUSH
34452: LD_VAR 0 15
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: PPUSH
34461: CALL_OW 250
34465: PPUSH
34466: LD_VAR 0 15
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: PPUSH
34475: CALL_OW 254
34479: PPUSH
34480: LD_INT 5
34482: PPUSH
34483: CALL_OW 272
34487: PUSH
34488: LD_VAR 0 15
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: CALL_OW 251
34501: PPUSH
34502: LD_VAR 0 15
34506: PUSH
34507: LD_INT 1
34509: ARRAY
34510: PPUSH
34511: CALL_OW 254
34515: PPUSH
34516: LD_INT 5
34518: PPUSH
34519: CALL_OW 273
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34528: LD_VAR 0 14
34532: PUSH
34533: LD_INT 1
34535: ARRAY
34536: PPUSH
34537: LD_VAR 0 14
34541: PUSH
34542: LD_INT 2
34544: ARRAY
34545: PPUSH
34546: CALL_OW 488
34550: IFFALSE 34581
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34552: LD_VAR 0 11
34556: PPUSH
34557: LD_VAR 0 14
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: PPUSH
34566: LD_VAR 0 14
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: CALL_OW 111
// continue ;
34579: GO 34212
// end ; end ; r := GetDir ( tmp ) ;
34581: LD_ADDR_VAR 0 13
34585: PUSH
34586: LD_VAR 0 11
34590: PPUSH
34591: CALL_OW 254
34595: ST_TO_ADDR
// if r = 5 then
34596: LD_VAR 0 13
34600: PUSH
34601: LD_INT 5
34603: EQUAL
34604: IFFALSE 34614
// r := 0 ;
34606: LD_ADDR_VAR 0 13
34610: PUSH
34611: LD_INT 0
34613: ST_TO_ADDR
// for j = r to 5 do
34614: LD_ADDR_VAR 0 8
34618: PUSH
34619: DOUBLE
34620: LD_VAR 0 13
34624: DEC
34625: ST_TO_ADDR
34626: LD_INT 5
34628: PUSH
34629: FOR_TO
34630: IFFALSE 34744
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34632: LD_ADDR_VAR 0 9
34636: PUSH
34637: LD_VAR 0 11
34641: PPUSH
34642: CALL_OW 250
34646: PPUSH
34647: LD_VAR 0 8
34651: PPUSH
34652: LD_INT 2
34654: PPUSH
34655: CALL_OW 272
34659: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34660: LD_ADDR_VAR 0 10
34664: PUSH
34665: LD_VAR 0 11
34669: PPUSH
34670: CALL_OW 251
34674: PPUSH
34675: LD_VAR 0 8
34679: PPUSH
34680: LD_INT 2
34682: PPUSH
34683: CALL_OW 273
34687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34688: LD_VAR 0 9
34692: PPUSH
34693: LD_VAR 0 10
34697: PPUSH
34698: CALL_OW 488
34702: PUSH
34703: LD_VAR 0 9
34707: PPUSH
34708: LD_VAR 0 10
34712: PPUSH
34713: CALL_OW 428
34717: NOT
34718: AND
34719: IFFALSE 34742
// begin ComMoveXY ( tmp , _x , _y ) ;
34721: LD_VAR 0 11
34725: PPUSH
34726: LD_VAR 0 9
34730: PPUSH
34731: LD_VAR 0 10
34735: PPUSH
34736: CALL_OW 111
// break ;
34740: GO 34744
// end ; end ;
34742: GO 34629
34744: POP
34745: POP
// end ;
34746: GO 34212
34748: POP
34749: POP
// end ;
34750: LD_VAR 0 6
34754: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34755: LD_INT 0
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
// result := false ;
34767: LD_ADDR_VAR 0 6
34771: PUSH
34772: LD_INT 0
34774: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34775: LD_VAR 0 1
34779: NOT
34780: PUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 266
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: IN
34801: NOT
34802: OR
34803: PUSH
34804: LD_VAR 0 2
34808: NOT
34809: OR
34810: PUSH
34811: LD_VAR 0 5
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: LD_INT 5
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: IN
34842: NOT
34843: OR
34844: PUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: LD_VAR 0 4
34854: PPUSH
34855: CALL_OW 488
34859: NOT
34860: OR
34861: IFFALSE 34865
// exit ;
34863: GO 35582
// pom := GetBase ( depot ) ;
34865: LD_ADDR_VAR 0 10
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 274
34879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34880: LD_ADDR_VAR 0 11
34884: PUSH
34885: LD_VAR 0 2
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 248
34899: PPUSH
34900: CALL_OW 450
34904: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34905: LD_VAR 0 10
34909: PPUSH
34910: LD_INT 1
34912: PPUSH
34913: CALL_OW 275
34917: PUSH
34918: LD_VAR 0 11
34922: PUSH
34923: LD_INT 1
34925: ARRAY
34926: GREATEREQUAL
34927: PUSH
34928: LD_VAR 0 10
34932: PPUSH
34933: LD_INT 2
34935: PPUSH
34936: CALL_OW 275
34940: PUSH
34941: LD_VAR 0 11
34945: PUSH
34946: LD_INT 2
34948: ARRAY
34949: GREATEREQUAL
34950: AND
34951: PUSH
34952: LD_VAR 0 10
34956: PPUSH
34957: LD_INT 3
34959: PPUSH
34960: CALL_OW 275
34964: PUSH
34965: LD_VAR 0 11
34969: PUSH
34970: LD_INT 3
34972: ARRAY
34973: GREATEREQUAL
34974: AND
34975: NOT
34976: IFFALSE 34980
// exit ;
34978: GO 35582
// if GetBType ( depot ) = b_depot then
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 266
34989: PUSH
34990: LD_INT 0
34992: EQUAL
34993: IFFALSE 35005
// dist := 28 else
34995: LD_ADDR_VAR 0 14
34999: PUSH
35000: LD_INT 28
35002: ST_TO_ADDR
35003: GO 35013
// dist := 36 ;
35005: LD_ADDR_VAR 0 14
35009: PUSH
35010: LD_INT 36
35012: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35013: LD_VAR 0 1
35017: PPUSH
35018: LD_VAR 0 3
35022: PPUSH
35023: LD_VAR 0 4
35027: PPUSH
35028: CALL_OW 297
35032: PUSH
35033: LD_VAR 0 14
35037: GREATER
35038: IFFALSE 35042
// exit ;
35040: GO 35582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35042: LD_ADDR_VAR 0 12
35046: PUSH
35047: LD_VAR 0 2
35051: PPUSH
35052: LD_VAR 0 3
35056: PPUSH
35057: LD_VAR 0 4
35061: PPUSH
35062: LD_VAR 0 5
35066: PPUSH
35067: LD_VAR 0 1
35071: PPUSH
35072: CALL_OW 248
35076: PPUSH
35077: LD_INT 0
35079: PPUSH
35080: CALL 35587 0 6
35084: ST_TO_ADDR
// if not hexes then
35085: LD_VAR 0 12
35089: NOT
35090: IFFALSE 35094
// exit ;
35092: GO 35582
// hex := GetHexInfo ( x , y ) ;
35094: LD_ADDR_VAR 0 15
35098: PUSH
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_VAR 0 4
35108: PPUSH
35109: CALL_OW 546
35113: ST_TO_ADDR
// if hex [ 1 ] then
35114: LD_VAR 0 15
35118: PUSH
35119: LD_INT 1
35121: ARRAY
35122: IFFALSE 35126
// exit ;
35124: GO 35582
// height := hex [ 2 ] ;
35126: LD_ADDR_VAR 0 13
35130: PUSH
35131: LD_VAR 0 15
35135: PUSH
35136: LD_INT 2
35138: ARRAY
35139: ST_TO_ADDR
// for i = 1 to hexes do
35140: LD_ADDR_VAR 0 7
35144: PUSH
35145: DOUBLE
35146: LD_INT 1
35148: DEC
35149: ST_TO_ADDR
35150: LD_VAR 0 12
35154: PUSH
35155: FOR_TO
35156: IFFALSE 35486
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35158: LD_VAR 0 12
35162: PUSH
35163: LD_VAR 0 7
35167: ARRAY
35168: PUSH
35169: LD_INT 1
35171: ARRAY
35172: PPUSH
35173: LD_VAR 0 12
35177: PUSH
35178: LD_VAR 0 7
35182: ARRAY
35183: PUSH
35184: LD_INT 2
35186: ARRAY
35187: PPUSH
35188: CALL_OW 488
35192: NOT
35193: PUSH
35194: LD_VAR 0 12
35198: PUSH
35199: LD_VAR 0 7
35203: ARRAY
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PPUSH
35209: LD_VAR 0 12
35213: PUSH
35214: LD_VAR 0 7
35218: ARRAY
35219: PUSH
35220: LD_INT 2
35222: ARRAY
35223: PPUSH
35224: CALL_OW 428
35228: PUSH
35229: LD_INT 0
35231: GREATER
35232: OR
35233: PUSH
35234: LD_VAR 0 12
35238: PUSH
35239: LD_VAR 0 7
35243: ARRAY
35244: PUSH
35245: LD_INT 1
35247: ARRAY
35248: PPUSH
35249: LD_VAR 0 12
35253: PUSH
35254: LD_VAR 0 7
35258: ARRAY
35259: PUSH
35260: LD_INT 2
35262: ARRAY
35263: PPUSH
35264: CALL_OW 351
35268: OR
35269: IFFALSE 35275
// exit ;
35271: POP
35272: POP
35273: GO 35582
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35275: LD_ADDR_VAR 0 8
35279: PUSH
35280: LD_VAR 0 12
35284: PUSH
35285: LD_VAR 0 7
35289: ARRAY
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: PPUSH
35295: LD_VAR 0 12
35299: PUSH
35300: LD_VAR 0 7
35304: ARRAY
35305: PUSH
35306: LD_INT 2
35308: ARRAY
35309: PPUSH
35310: CALL_OW 546
35314: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35315: LD_VAR 0 8
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PUSH
35324: LD_VAR 0 8
35328: PUSH
35329: LD_INT 2
35331: ARRAY
35332: PUSH
35333: LD_VAR 0 13
35337: PUSH
35338: LD_INT 2
35340: PLUS
35341: GREATER
35342: OR
35343: PUSH
35344: LD_VAR 0 8
35348: PUSH
35349: LD_INT 2
35351: ARRAY
35352: PUSH
35353: LD_VAR 0 13
35357: PUSH
35358: LD_INT 2
35360: MINUS
35361: LESS
35362: OR
35363: PUSH
35364: LD_VAR 0 8
35368: PUSH
35369: LD_INT 3
35371: ARRAY
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 8
35378: PUSH
35379: LD_INT 9
35381: PUSH
35382: LD_INT 10
35384: PUSH
35385: LD_INT 11
35387: PUSH
35388: LD_INT 12
35390: PUSH
35391: LD_INT 13
35393: PUSH
35394: LD_INT 16
35396: PUSH
35397: LD_INT 17
35399: PUSH
35400: LD_INT 18
35402: PUSH
35403: LD_INT 19
35405: PUSH
35406: LD_INT 20
35408: PUSH
35409: LD_INT 21
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: IN
35427: NOT
35428: OR
35429: PUSH
35430: LD_VAR 0 8
35434: PUSH
35435: LD_INT 5
35437: ARRAY
35438: NOT
35439: OR
35440: PUSH
35441: LD_VAR 0 8
35445: PUSH
35446: LD_INT 6
35448: ARRAY
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 7
35458: PUSH
35459: LD_INT 9
35461: PUSH
35462: LD_INT 10
35464: PUSH
35465: LD_INT 11
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: IN
35476: NOT
35477: OR
35478: IFFALSE 35484
// exit ;
35480: POP
35481: POP
35482: GO 35582
// end ;
35484: GO 35155
35486: POP
35487: POP
// side := GetSide ( depot ) ;
35488: LD_ADDR_VAR 0 9
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: CALL_OW 255
35502: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35503: LD_VAR 0 9
35507: PPUSH
35508: LD_VAR 0 3
35512: PPUSH
35513: LD_VAR 0 4
35517: PPUSH
35518: LD_INT 20
35520: PPUSH
35521: CALL 28236 0 4
35525: PUSH
35526: LD_INT 4
35528: ARRAY
35529: IFFALSE 35533
// exit ;
35531: GO 35582
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35533: LD_VAR 0 2
35537: PUSH
35538: LD_INT 29
35540: PUSH
35541: LD_INT 30
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: IN
35548: PUSH
35549: LD_VAR 0 3
35553: PPUSH
35554: LD_VAR 0 4
35558: PPUSH
35559: LD_VAR 0 9
35563: PPUSH
35564: CALL_OW 440
35568: NOT
35569: AND
35570: IFFALSE 35574
// exit ;
35572: GO 35582
// result := true ;
35574: LD_ADDR_VAR 0 6
35578: PUSH
35579: LD_INT 1
35581: ST_TO_ADDR
// end ;
35582: LD_VAR 0 6
35586: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35587: LD_INT 0
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
// result = [ ] ;
35647: LD_ADDR_VAR 0 7
35651: PUSH
35652: EMPTY
35653: ST_TO_ADDR
// temp_list = [ ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: EMPTY
35660: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35661: LD_VAR 0 4
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: LD_INT 3
35677: PUSH
35678: LD_INT 4
35680: PUSH
35681: LD_INT 5
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: IN
35692: NOT
35693: PUSH
35694: LD_VAR 0 1
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: IN
35709: PUSH
35710: LD_VAR 0 5
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 3
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: IN
35729: NOT
35730: AND
35731: OR
35732: IFFALSE 35736
// exit ;
35734: GO 54127
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35736: LD_VAR 0 1
35740: PUSH
35741: LD_INT 6
35743: PUSH
35744: LD_INT 7
35746: PUSH
35747: LD_INT 8
35749: PUSH
35750: LD_INT 13
35752: PUSH
35753: LD_INT 12
35755: PUSH
35756: LD_INT 15
35758: PUSH
35759: LD_INT 11
35761: PUSH
35762: LD_INT 14
35764: PUSH
35765: LD_INT 10
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: IN
35779: IFFALSE 35789
// btype = b_lab ;
35781: LD_ADDR_VAR 0 1
35785: PUSH
35786: LD_INT 6
35788: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35789: LD_VAR 0 6
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: IN
35808: NOT
35809: PUSH
35810: LD_VAR 0 1
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: LD_INT 6
35829: PUSH
35830: LD_INT 36
35832: PUSH
35833: LD_INT 4
35835: PUSH
35836: LD_INT 5
35838: PUSH
35839: LD_INT 31
35841: PUSH
35842: LD_INT 32
35844: PUSH
35845: LD_INT 33
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: IN
35861: NOT
35862: PUSH
35863: LD_VAR 0 6
35867: PUSH
35868: LD_INT 1
35870: EQUAL
35871: AND
35872: OR
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: IN
35889: NOT
35890: PUSH
35891: LD_VAR 0 6
35895: PUSH
35896: LD_INT 2
35898: EQUAL
35899: AND
35900: OR
35901: IFFALSE 35911
// mode = 0 ;
35903: LD_ADDR_VAR 0 6
35907: PUSH
35908: LD_INT 0
35910: ST_TO_ADDR
// case mode of 0 :
35911: LD_VAR 0 6
35915: PUSH
35916: LD_INT 0
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35924
35922: GO 47377
35924: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35925: LD_ADDR_VAR 0 11
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36118: LD_ADDR_VAR 0 12
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36314: LD_ADDR_VAR 0 13
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 3
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: NEG
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: NEG
36486: PUSH
36487: LD_INT 3
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36513: LD_ADDR_VAR 0 14
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36709: LD_ADDR_VAR 0 15
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 3
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36902: LD_ADDR_VAR 0 16
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 2
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: NEG
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37095: LD_ADDR_VAR 0 17
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37325: LD_ADDR_VAR 0 18
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 2
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: NEG
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37555: LD_ADDR_VAR 0 19
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37785: LD_ADDR_VAR 0 20
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38015: LD_ADDR_VAR 0 21
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38245: LD_ADDR_VAR 0 22
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38475: LD_ADDR_VAR 0 23
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38755: LD_ADDR_VAR 0 24
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39031: LD_ADDR_VAR 0 25
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 3
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39305: LD_ADDR_VAR 0 26
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 3
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39581: LD_ADDR_VAR 0 27
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 3
39826: NEG
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39861: LD_ADDR_VAR 0 28
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40143: LD_ADDR_VAR 0 29
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 3
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 3
40387: NEG
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40422: LD_ADDR_VAR 0 30
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40700: LD_ADDR_VAR 0 31
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: LD_INT 3
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40978: LD_ADDR_VAR 0 32
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: LD_INT 3
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41256: LD_ADDR_VAR 0 33
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: NEG
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41535: LD_ADDR_VAR 0 34
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 3
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41815: LD_ADDR_VAR 0 35
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41927: LD_ADDR_VAR 0 36
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42039: LD_ADDR_VAR 0 37
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42151: LD_ADDR_VAR 0 38
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42263: LD_ADDR_VAR 0 39
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42375: LD_ADDR_VAR 0 40
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42487: LD_ADDR_VAR 0 41
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 3
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 3
42784: NEG
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 3
42796: NEG
42797: PUSH
42798: LD_INT 3
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42837: LD_ADDR_VAR 0 42
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: LD_INT 3
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: NEG
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: NEG
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43187: LD_ADDR_VAR 0 43
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43535: LD_ADDR_VAR 0 44
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 3
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 3
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 3
43844: NEG
43845: PUSH
43846: LD_INT 3
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43885: LD_ADDR_VAR 0 45
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 3
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 3
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 3
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44235: LD_ADDR_VAR 0 46
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44583: LD_ADDR_VAR 0 47
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44734: LD_ADDR_VAR 0 48
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44881: LD_ADDR_VAR 0 49
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45025: LD_ADDR_VAR 0 50
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45169: LD_ADDR_VAR 0 51
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45316: LD_ADDR_VAR 0 52
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45467: LD_ADDR_VAR 0 53
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45697: LD_ADDR_VAR 0 54
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45927: LD_ADDR_VAR 0 55
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46157: LD_ADDR_VAR 0 56
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46387: LD_ADDR_VAR 0 57
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46617: LD_ADDR_VAR 0 58
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46847: LD_ADDR_VAR 0 59
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46935: LD_ADDR_VAR 0 60
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47023: LD_ADDR_VAR 0 61
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47111: LD_ADDR_VAR 0 62
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47199: LD_ADDR_VAR 0 63
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47287: LD_ADDR_VAR 0 64
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// end ; 1 :
47375: GO 53272
47377: LD_INT 1
47379: DOUBLE
47380: EQUAL
47381: IFTRUE 47385
47383: GO 50008
47385: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47386: LD_ADDR_VAR 0 11
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47430: LD_ADDR_VAR 0 12
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47471: LD_ADDR_VAR 0 13
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47511: LD_ADDR_VAR 0 14
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47552: LD_ADDR_VAR 0 15
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47596: LD_ADDR_VAR 0 16
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: NEG
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47642: LD_ADDR_VAR 0 17
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47686: LD_ADDR_VAR 0 18
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47727: LD_ADDR_VAR 0 19
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47767: LD_ADDR_VAR 0 20
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47808: LD_ADDR_VAR 0 21
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47852: LD_ADDR_VAR 0 22
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47898: LD_ADDR_VAR 0 23
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 4
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47942: LD_ADDR_VAR 0 24
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 4
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47983: LD_ADDR_VAR 0 25
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 4
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48023: LD_ADDR_VAR 0 26
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 3
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48064: LD_ADDR_VAR 0 27
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 4
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48108: LD_ADDR_VAR 0 28
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 4
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 4
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48154: LD_ADDR_VAR 0 29
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 4
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 5
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 5
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 4
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 6
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 6
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 5
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48309: LD_ADDR_VAR 0 30
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 4
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 4
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 5
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 5
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 6
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 6
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48452: LD_ADDR_VAR 0 31
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 4
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: LD_INT 4
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 4
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 5
48519: PUSH
48520: LD_INT 4
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 5
48529: PUSH
48530: LD_INT 5
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 4
48539: PUSH
48540: LD_INT 5
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 6
48549: PUSH
48550: LD_INT 5
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 6
48559: PUSH
48560: LD_INT 6
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 5
48569: PUSH
48570: LD_INT 6
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48591: LD_ADDR_VAR 0 32
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 3
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 4
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 5
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 5
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 4
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 6
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 6
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 5
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48734: LD_ADDR_VAR 0 33
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 4
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 4
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 5
48820: NEG
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 5
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 5
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 6
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 6
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48889: LD_ADDR_VAR 0 34
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 4
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 4
48944: NEG
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: NEG
48957: PUSH
48958: LD_INT 4
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 4
48968: NEG
48969: PUSH
48970: LD_INT 5
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 5
48980: NEG
48981: PUSH
48982: LD_INT 4
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 5
48992: NEG
48993: PUSH
48994: LD_INT 5
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 5
49004: NEG
49005: PUSH
49006: LD_INT 6
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 6
49016: NEG
49017: PUSH
49018: LD_INT 5
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 6
49028: NEG
49029: PUSH
49030: LD_INT 6
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49052: LD_ADDR_VAR 0 41
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49096: LD_ADDR_VAR 0 42
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49137: LD_ADDR_VAR 0 43
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49177: LD_ADDR_VAR 0 44
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 3
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49218: LD_ADDR_VAR 0 45
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49262: LD_ADDR_VAR 0 46
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49308: LD_ADDR_VAR 0 47
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49341: LD_ADDR_VAR 0 48
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49372: LD_ADDR_VAR 0 49
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49401: LD_ADDR_VAR 0 50
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49430: LD_ADDR_VAR 0 51
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49461: LD_ADDR_VAR 0 52
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49494: LD_ADDR_VAR 0 53
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 3
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49538: LD_ADDR_VAR 0 54
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49579: LD_ADDR_VAR 0 55
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49619: LD_ADDR_VAR 0 56
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49660: LD_ADDR_VAR 0 57
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49704: LD_ADDR_VAR 0 58
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49750: LD_ADDR_VAR 0 59
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49794: LD_ADDR_VAR 0 60
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49835: LD_ADDR_VAR 0 61
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49875: LD_ADDR_VAR 0 62
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49916: LD_ADDR_VAR 0 63
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49960: LD_ADDR_VAR 0 64
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// end ; 2 :
50006: GO 53272
50008: LD_INT 2
50010: DOUBLE
50011: EQUAL
50012: IFTRUE 50016
50014: GO 53271
50016: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50017: LD_ADDR_VAR 0 29
50021: PUSH
50022: LD_INT 4
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 4
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 5
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 5
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 5
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 4
50147: PUSH
50148: LD_INT 4
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 4
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 4
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 5
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 5
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 4
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 5
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 4
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: LD_INT 4
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 4
50414: NEG
50415: PUSH
50416: LD_INT 5
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: LD_INT 4
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 4
50450: NEG
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 5
50462: NEG
50463: PUSH
50464: LD_INT 4
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 5
50474: NEG
50475: PUSH
50476: LD_INT 5
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 5
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 5
50498: NEG
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50555: LD_ADDR_VAR 0 30
50559: PUSH
50560: LD_INT 4
50562: PUSH
50563: LD_INT 4
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 5
50582: PUSH
50583: LD_INT 4
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 5
50592: PUSH
50593: LD_INT 5
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 5
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 4
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 5
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 4
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 4
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 4
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 4
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 5
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 4
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 4
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 4
50919: NEG
50920: PUSH
50921: LD_INT 4
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 4
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 5
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 4
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 5
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 5
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51102: LD_ADDR_VAR 0 31
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 5
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 5
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 5
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 4
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 4
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 4
51304: NEG
51305: PUSH
51306: LD_INT 4
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: LD_INT 5
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: LD_INT 4
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 5
51364: NEG
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 5
51376: NEG
51377: PUSH
51378: LD_INT 5
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: LD_INT 5
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 5
51400: NEG
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 4
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 4
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 4
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 4
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 5
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 4
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51652: LD_ADDR_VAR 0 32
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 4
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 4
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 5
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 5
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: NEG
51774: PUSH
51775: LD_INT 4
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 4
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: LD_INT 4
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 4
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 5
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 4
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 4
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 5
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 5
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 4
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: LD_INT 4
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 5
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52199: LD_ADDR_VAR 0 33
52203: PUSH
52204: LD_INT 4
52206: NEG
52207: PUSH
52208: LD_INT 4
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: LD_INT 5
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 5
52266: NEG
52267: PUSH
52268: LD_INT 4
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 5
52278: NEG
52279: PUSH
52280: LD_INT 5
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: LD_INT 5
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 5
52302: NEG
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 3
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 4
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 4
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 5
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: PUSH
52540: LD_INT 4
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 4
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 4
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 5
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52737: LD_ADDR_VAR 0 34
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 4
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 5
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 4
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 4
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 5
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 5
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 4
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 4
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: LD_INT 4
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 5
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 5
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: LD_INT 5
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: LD_INT 4
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 5
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 4
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: NEG
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 4
53133: NEG
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 4
53167: NEG
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 5
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 5
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// end ; end ;
53269: GO 53272
53271: POP
// case btype of b_depot , b_warehouse :
53272: LD_VAR 0 1
53276: PUSH
53277: LD_INT 0
53279: DOUBLE
53280: EQUAL
53281: IFTRUE 53291
53283: LD_INT 1
53285: DOUBLE
53286: EQUAL
53287: IFTRUE 53291
53289: GO 53492
53291: POP
// case nation of nation_american :
53292: LD_VAR 0 5
53296: PUSH
53297: LD_INT 1
53299: DOUBLE
53300: EQUAL
53301: IFTRUE 53305
53303: GO 53361
53305: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53306: LD_ADDR_VAR 0 9
53310: PUSH
53311: LD_VAR 0 11
53315: PUSH
53316: LD_VAR 0 12
53320: PUSH
53321: LD_VAR 0 13
53325: PUSH
53326: LD_VAR 0 14
53330: PUSH
53331: LD_VAR 0 15
53335: PUSH
53336: LD_VAR 0 16
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: PUSH
53349: LD_VAR 0 4
53353: PUSH
53354: LD_INT 1
53356: PLUS
53357: ARRAY
53358: ST_TO_ADDR
53359: GO 53490
53361: LD_INT 2
53363: DOUBLE
53364: EQUAL
53365: IFTRUE 53369
53367: GO 53425
53369: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53370: LD_ADDR_VAR 0 9
53374: PUSH
53375: LD_VAR 0 17
53379: PUSH
53380: LD_VAR 0 18
53384: PUSH
53385: LD_VAR 0 19
53389: PUSH
53390: LD_VAR 0 20
53394: PUSH
53395: LD_VAR 0 21
53399: PUSH
53400: LD_VAR 0 22
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: PUSH
53413: LD_VAR 0 4
53417: PUSH
53418: LD_INT 1
53420: PLUS
53421: ARRAY
53422: ST_TO_ADDR
53423: GO 53490
53425: LD_INT 3
53427: DOUBLE
53428: EQUAL
53429: IFTRUE 53433
53431: GO 53489
53433: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53434: LD_ADDR_VAR 0 9
53438: PUSH
53439: LD_VAR 0 23
53443: PUSH
53444: LD_VAR 0 24
53448: PUSH
53449: LD_VAR 0 25
53453: PUSH
53454: LD_VAR 0 26
53458: PUSH
53459: LD_VAR 0 27
53463: PUSH
53464: LD_VAR 0 28
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 4
53481: PUSH
53482: LD_INT 1
53484: PLUS
53485: ARRAY
53486: ST_TO_ADDR
53487: GO 53490
53489: POP
53490: GO 54045
53492: LD_INT 2
53494: DOUBLE
53495: EQUAL
53496: IFTRUE 53506
53498: LD_INT 3
53500: DOUBLE
53501: EQUAL
53502: IFTRUE 53506
53504: GO 53562
53506: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53507: LD_ADDR_VAR 0 9
53511: PUSH
53512: LD_VAR 0 29
53516: PUSH
53517: LD_VAR 0 30
53521: PUSH
53522: LD_VAR 0 31
53526: PUSH
53527: LD_VAR 0 32
53531: PUSH
53532: LD_VAR 0 33
53536: PUSH
53537: LD_VAR 0 34
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: PUSH
53550: LD_VAR 0 4
53554: PUSH
53555: LD_INT 1
53557: PLUS
53558: ARRAY
53559: ST_TO_ADDR
53560: GO 54045
53562: LD_INT 16
53564: DOUBLE
53565: EQUAL
53566: IFTRUE 53624
53568: LD_INT 17
53570: DOUBLE
53571: EQUAL
53572: IFTRUE 53624
53574: LD_INT 18
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53624
53580: LD_INT 19
53582: DOUBLE
53583: EQUAL
53584: IFTRUE 53624
53586: LD_INT 22
53588: DOUBLE
53589: EQUAL
53590: IFTRUE 53624
53592: LD_INT 20
53594: DOUBLE
53595: EQUAL
53596: IFTRUE 53624
53598: LD_INT 21
53600: DOUBLE
53601: EQUAL
53602: IFTRUE 53624
53604: LD_INT 23
53606: DOUBLE
53607: EQUAL
53608: IFTRUE 53624
53610: LD_INT 24
53612: DOUBLE
53613: EQUAL
53614: IFTRUE 53624
53616: LD_INT 25
53618: DOUBLE
53619: EQUAL
53620: IFTRUE 53624
53622: GO 53680
53624: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53625: LD_ADDR_VAR 0 9
53629: PUSH
53630: LD_VAR 0 35
53634: PUSH
53635: LD_VAR 0 36
53639: PUSH
53640: LD_VAR 0 37
53644: PUSH
53645: LD_VAR 0 38
53649: PUSH
53650: LD_VAR 0 39
53654: PUSH
53655: LD_VAR 0 40
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: PUSH
53668: LD_VAR 0 4
53672: PUSH
53673: LD_INT 1
53675: PLUS
53676: ARRAY
53677: ST_TO_ADDR
53678: GO 54045
53680: LD_INT 6
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53736
53686: LD_INT 7
53688: DOUBLE
53689: EQUAL
53690: IFTRUE 53736
53692: LD_INT 8
53694: DOUBLE
53695: EQUAL
53696: IFTRUE 53736
53698: LD_INT 13
53700: DOUBLE
53701: EQUAL
53702: IFTRUE 53736
53704: LD_INT 12
53706: DOUBLE
53707: EQUAL
53708: IFTRUE 53736
53710: LD_INT 15
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53736
53716: LD_INT 11
53718: DOUBLE
53719: EQUAL
53720: IFTRUE 53736
53722: LD_INT 14
53724: DOUBLE
53725: EQUAL
53726: IFTRUE 53736
53728: LD_INT 10
53730: DOUBLE
53731: EQUAL
53732: IFTRUE 53736
53734: GO 53792
53736: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53737: LD_ADDR_VAR 0 9
53741: PUSH
53742: LD_VAR 0 41
53746: PUSH
53747: LD_VAR 0 42
53751: PUSH
53752: LD_VAR 0 43
53756: PUSH
53757: LD_VAR 0 44
53761: PUSH
53762: LD_VAR 0 45
53766: PUSH
53767: LD_VAR 0 46
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: PUSH
53780: LD_VAR 0 4
53784: PUSH
53785: LD_INT 1
53787: PLUS
53788: ARRAY
53789: ST_TO_ADDR
53790: GO 54045
53792: LD_INT 36
53794: DOUBLE
53795: EQUAL
53796: IFTRUE 53800
53798: GO 53856
53800: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53801: LD_ADDR_VAR 0 9
53805: PUSH
53806: LD_VAR 0 47
53810: PUSH
53811: LD_VAR 0 48
53815: PUSH
53816: LD_VAR 0 49
53820: PUSH
53821: LD_VAR 0 50
53825: PUSH
53826: LD_VAR 0 51
53830: PUSH
53831: LD_VAR 0 52
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: LD_VAR 0 4
53848: PUSH
53849: LD_INT 1
53851: PLUS
53852: ARRAY
53853: ST_TO_ADDR
53854: GO 54045
53856: LD_INT 4
53858: DOUBLE
53859: EQUAL
53860: IFTRUE 53882
53862: LD_INT 5
53864: DOUBLE
53865: EQUAL
53866: IFTRUE 53882
53868: LD_INT 34
53870: DOUBLE
53871: EQUAL
53872: IFTRUE 53882
53874: LD_INT 37
53876: DOUBLE
53877: EQUAL
53878: IFTRUE 53882
53880: GO 53938
53882: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53883: LD_ADDR_VAR 0 9
53887: PUSH
53888: LD_VAR 0 53
53892: PUSH
53893: LD_VAR 0 54
53897: PUSH
53898: LD_VAR 0 55
53902: PUSH
53903: LD_VAR 0 56
53907: PUSH
53908: LD_VAR 0 57
53912: PUSH
53913: LD_VAR 0 58
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: LD_VAR 0 4
53930: PUSH
53931: LD_INT 1
53933: PLUS
53934: ARRAY
53935: ST_TO_ADDR
53936: GO 54045
53938: LD_INT 31
53940: DOUBLE
53941: EQUAL
53942: IFTRUE 53988
53944: LD_INT 32
53946: DOUBLE
53947: EQUAL
53948: IFTRUE 53988
53950: LD_INT 33
53952: DOUBLE
53953: EQUAL
53954: IFTRUE 53988
53956: LD_INT 27
53958: DOUBLE
53959: EQUAL
53960: IFTRUE 53988
53962: LD_INT 26
53964: DOUBLE
53965: EQUAL
53966: IFTRUE 53988
53968: LD_INT 28
53970: DOUBLE
53971: EQUAL
53972: IFTRUE 53988
53974: LD_INT 29
53976: DOUBLE
53977: EQUAL
53978: IFTRUE 53988
53980: LD_INT 30
53982: DOUBLE
53983: EQUAL
53984: IFTRUE 53988
53986: GO 54044
53988: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53989: LD_ADDR_VAR 0 9
53993: PUSH
53994: LD_VAR 0 59
53998: PUSH
53999: LD_VAR 0 60
54003: PUSH
54004: LD_VAR 0 61
54008: PUSH
54009: LD_VAR 0 62
54013: PUSH
54014: LD_VAR 0 63
54018: PUSH
54019: LD_VAR 0 64
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: PUSH
54032: LD_VAR 0 4
54036: PUSH
54037: LD_INT 1
54039: PLUS
54040: ARRAY
54041: ST_TO_ADDR
54042: GO 54045
54044: POP
// temp_list2 = [ ] ;
54045: LD_ADDR_VAR 0 10
54049: PUSH
54050: EMPTY
54051: ST_TO_ADDR
// for i in temp_list do
54052: LD_ADDR_VAR 0 8
54056: PUSH
54057: LD_VAR 0 9
54061: PUSH
54062: FOR_IN
54063: IFFALSE 54115
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54065: LD_ADDR_VAR 0 10
54069: PUSH
54070: LD_VAR 0 10
54074: PUSH
54075: LD_VAR 0 8
54079: PUSH
54080: LD_INT 1
54082: ARRAY
54083: PUSH
54084: LD_VAR 0 2
54088: PLUS
54089: PUSH
54090: LD_VAR 0 8
54094: PUSH
54095: LD_INT 2
54097: ARRAY
54098: PUSH
54099: LD_VAR 0 3
54103: PLUS
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: ADD
54112: ST_TO_ADDR
54113: GO 54062
54115: POP
54116: POP
// result = temp_list2 ;
54117: LD_ADDR_VAR 0 7
54121: PUSH
54122: LD_VAR 0 10
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 7
54131: RET
// export function EnemyInRange ( unit , dist ) ; begin
54132: LD_INT 0
54134: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54135: LD_ADDR_VAR 0 3
54139: PUSH
54140: LD_VAR 0 1
54144: PPUSH
54145: CALL_OW 255
54149: PPUSH
54150: LD_VAR 0 1
54154: PPUSH
54155: CALL_OW 250
54159: PPUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 251
54169: PPUSH
54170: LD_VAR 0 2
54174: PPUSH
54175: CALL 28236 0 4
54179: PUSH
54180: LD_INT 4
54182: ARRAY
54183: ST_TO_ADDR
// end ;
54184: LD_VAR 0 3
54188: RET
// export function PlayerSeeMe ( unit ) ; begin
54189: LD_INT 0
54191: PPUSH
// result := See ( your_side , unit ) ;
54192: LD_ADDR_VAR 0 2
54196: PUSH
54197: LD_OWVAR 2
54201: PPUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 292
54211: ST_TO_ADDR
// end ;
54212: LD_VAR 0 2
54216: RET
// export function ReverseDir ( unit ) ; begin
54217: LD_INT 0
54219: PPUSH
// if not unit then
54220: LD_VAR 0 1
54224: NOT
54225: IFFALSE 54229
// exit ;
54227: GO 54252
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54229: LD_ADDR_VAR 0 2
54233: PUSH
54234: LD_VAR 0 1
54238: PPUSH
54239: CALL_OW 254
54243: PUSH
54244: LD_INT 3
54246: PLUS
54247: PUSH
54248: LD_INT 6
54250: MOD
54251: ST_TO_ADDR
// end ;
54252: LD_VAR 0 2
54256: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54257: LD_INT 0
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
// if not hexes then
54264: LD_VAR 0 2
54268: NOT
54269: IFFALSE 54273
// exit ;
54271: GO 54421
// dist := 9999 ;
54273: LD_ADDR_VAR 0 5
54277: PUSH
54278: LD_INT 9999
54280: ST_TO_ADDR
// for i = 1 to hexes do
54281: LD_ADDR_VAR 0 4
54285: PUSH
54286: DOUBLE
54287: LD_INT 1
54289: DEC
54290: ST_TO_ADDR
54291: LD_VAR 0 2
54295: PUSH
54296: FOR_TO
54297: IFFALSE 54409
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54299: LD_VAR 0 1
54303: PPUSH
54304: LD_VAR 0 2
54308: PUSH
54309: LD_VAR 0 4
54313: ARRAY
54314: PUSH
54315: LD_INT 1
54317: ARRAY
54318: PPUSH
54319: LD_VAR 0 2
54323: PUSH
54324: LD_VAR 0 4
54328: ARRAY
54329: PUSH
54330: LD_INT 2
54332: ARRAY
54333: PPUSH
54334: CALL_OW 297
54338: PUSH
54339: LD_VAR 0 5
54343: LESS
54344: IFFALSE 54407
// begin hex := hexes [ i ] ;
54346: LD_ADDR_VAR 0 7
54350: PUSH
54351: LD_VAR 0 2
54355: PUSH
54356: LD_VAR 0 4
54360: ARRAY
54361: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54362: LD_ADDR_VAR 0 5
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: LD_VAR 0 2
54376: PUSH
54377: LD_VAR 0 4
54381: ARRAY
54382: PUSH
54383: LD_INT 1
54385: ARRAY
54386: PPUSH
54387: LD_VAR 0 2
54391: PUSH
54392: LD_VAR 0 4
54396: ARRAY
54397: PUSH
54398: LD_INT 2
54400: ARRAY
54401: PPUSH
54402: CALL_OW 297
54406: ST_TO_ADDR
// end ; end ;
54407: GO 54296
54409: POP
54410: POP
// result := hex ;
54411: LD_ADDR_VAR 0 3
54415: PUSH
54416: LD_VAR 0 7
54420: ST_TO_ADDR
// end ;
54421: LD_VAR 0 3
54425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54426: LD_INT 0
54428: PPUSH
54429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54430: LD_VAR 0 1
54434: NOT
54435: PUSH
54436: LD_VAR 0 1
54440: PUSH
54441: LD_INT 21
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 23
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PPUSH
54465: CALL_OW 69
54469: IN
54470: NOT
54471: OR
54472: IFFALSE 54476
// exit ;
54474: GO 54523
// for i = 1 to 3 do
54476: LD_ADDR_VAR 0 3
54480: PUSH
54481: DOUBLE
54482: LD_INT 1
54484: DEC
54485: ST_TO_ADDR
54486: LD_INT 3
54488: PUSH
54489: FOR_TO
54490: IFFALSE 54521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54492: LD_VAR 0 1
54496: PPUSH
54497: CALL_OW 250
54501: PPUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 251
54511: PPUSH
54512: LD_INT 1
54514: PPUSH
54515: CALL_OW 453
54519: GO 54489
54521: POP
54522: POP
// end ;
54523: LD_VAR 0 2
54527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54528: LD_INT 0
54530: PPUSH
54531: PPUSH
54532: PPUSH
54533: PPUSH
54534: PPUSH
54535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54536: LD_VAR 0 1
54540: NOT
54541: PUSH
54542: LD_VAR 0 2
54546: NOT
54547: OR
54548: PUSH
54549: LD_VAR 0 1
54553: PPUSH
54554: CALL_OW 314
54558: OR
54559: IFFALSE 54563
// exit ;
54561: GO 55004
// x := GetX ( enemy_unit ) ;
54563: LD_ADDR_VAR 0 7
54567: PUSH
54568: LD_VAR 0 2
54572: PPUSH
54573: CALL_OW 250
54577: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54578: LD_ADDR_VAR 0 8
54582: PUSH
54583: LD_VAR 0 2
54587: PPUSH
54588: CALL_OW 251
54592: ST_TO_ADDR
// if not x or not y then
54593: LD_VAR 0 7
54597: NOT
54598: PUSH
54599: LD_VAR 0 8
54603: NOT
54604: OR
54605: IFFALSE 54609
// exit ;
54607: GO 55004
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54609: LD_ADDR_VAR 0 6
54613: PUSH
54614: LD_VAR 0 7
54618: PPUSH
54619: LD_INT 0
54621: PPUSH
54622: LD_INT 4
54624: PPUSH
54625: CALL_OW 272
54629: PUSH
54630: LD_VAR 0 8
54634: PPUSH
54635: LD_INT 0
54637: PPUSH
54638: LD_INT 4
54640: PPUSH
54641: CALL_OW 273
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_VAR 0 7
54654: PPUSH
54655: LD_INT 1
54657: PPUSH
54658: LD_INT 4
54660: PPUSH
54661: CALL_OW 272
54665: PUSH
54666: LD_VAR 0 8
54670: PPUSH
54671: LD_INT 1
54673: PPUSH
54674: LD_INT 4
54676: PPUSH
54677: CALL_OW 273
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_VAR 0 7
54690: PPUSH
54691: LD_INT 2
54693: PPUSH
54694: LD_INT 4
54696: PPUSH
54697: CALL_OW 272
54701: PUSH
54702: LD_VAR 0 8
54706: PPUSH
54707: LD_INT 2
54709: PPUSH
54710: LD_INT 4
54712: PPUSH
54713: CALL_OW 273
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_VAR 0 7
54726: PPUSH
54727: LD_INT 3
54729: PPUSH
54730: LD_INT 4
54732: PPUSH
54733: CALL_OW 272
54737: PUSH
54738: LD_VAR 0 8
54742: PPUSH
54743: LD_INT 3
54745: PPUSH
54746: LD_INT 4
54748: PPUSH
54749: CALL_OW 273
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_VAR 0 7
54762: PPUSH
54763: LD_INT 4
54765: PPUSH
54766: LD_INT 4
54768: PPUSH
54769: CALL_OW 272
54773: PUSH
54774: LD_VAR 0 8
54778: PPUSH
54779: LD_INT 4
54781: PPUSH
54782: LD_INT 4
54784: PPUSH
54785: CALL_OW 273
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_VAR 0 7
54798: PPUSH
54799: LD_INT 5
54801: PPUSH
54802: LD_INT 4
54804: PPUSH
54805: CALL_OW 272
54809: PUSH
54810: LD_VAR 0 8
54814: PPUSH
54815: LD_INT 5
54817: PPUSH
54818: LD_INT 4
54820: PPUSH
54821: CALL_OW 273
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: ST_TO_ADDR
// for i = tmp downto 1 do
54838: LD_ADDR_VAR 0 4
54842: PUSH
54843: DOUBLE
54844: LD_VAR 0 6
54848: INC
54849: ST_TO_ADDR
54850: LD_INT 1
54852: PUSH
54853: FOR_DOWNTO
54854: IFFALSE 54955
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54856: LD_VAR 0 6
54860: PUSH
54861: LD_VAR 0 4
54865: ARRAY
54866: PUSH
54867: LD_INT 1
54869: ARRAY
54870: PPUSH
54871: LD_VAR 0 6
54875: PUSH
54876: LD_VAR 0 4
54880: ARRAY
54881: PUSH
54882: LD_INT 2
54884: ARRAY
54885: PPUSH
54886: CALL_OW 488
54890: NOT
54891: PUSH
54892: LD_VAR 0 6
54896: PUSH
54897: LD_VAR 0 4
54901: ARRAY
54902: PUSH
54903: LD_INT 1
54905: ARRAY
54906: PPUSH
54907: LD_VAR 0 6
54911: PUSH
54912: LD_VAR 0 4
54916: ARRAY
54917: PUSH
54918: LD_INT 2
54920: ARRAY
54921: PPUSH
54922: CALL_OW 428
54926: PUSH
54927: LD_INT 0
54929: NONEQUAL
54930: OR
54931: IFFALSE 54953
// tmp := Delete ( tmp , i ) ;
54933: LD_ADDR_VAR 0 6
54937: PUSH
54938: LD_VAR 0 6
54942: PPUSH
54943: LD_VAR 0 4
54947: PPUSH
54948: CALL_OW 3
54952: ST_TO_ADDR
54953: GO 54853
54955: POP
54956: POP
// j := GetClosestHex ( unit , tmp ) ;
54957: LD_ADDR_VAR 0 5
54961: PUSH
54962: LD_VAR 0 1
54966: PPUSH
54967: LD_VAR 0 6
54971: PPUSH
54972: CALL 54257 0 2
54976: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54977: LD_VAR 0 1
54981: PPUSH
54982: LD_VAR 0 5
54986: PUSH
54987: LD_INT 1
54989: ARRAY
54990: PPUSH
54991: LD_VAR 0 5
54995: PUSH
54996: LD_INT 2
54998: ARRAY
54999: PPUSH
55000: CALL_OW 111
// end ;
55004: LD_VAR 0 3
55008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55009: LD_INT 0
55011: PPUSH
55012: PPUSH
55013: PPUSH
// uc_side = 0 ;
55014: LD_ADDR_OWVAR 20
55018: PUSH
55019: LD_INT 0
55021: ST_TO_ADDR
// uc_nation = 0 ;
55022: LD_ADDR_OWVAR 21
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// InitHc_All ( ) ;
55030: CALL_OW 584
// InitVc ;
55034: CALL_OW 20
// if mastodonts then
55038: LD_VAR 0 6
55042: IFFALSE 55109
// for i = 1 to mastodonts do
55044: LD_ADDR_VAR 0 11
55048: PUSH
55049: DOUBLE
55050: LD_INT 1
55052: DEC
55053: ST_TO_ADDR
55054: LD_VAR 0 6
55058: PUSH
55059: FOR_TO
55060: IFFALSE 55107
// begin vc_chassis := 31 ;
55062: LD_ADDR_OWVAR 37
55066: PUSH
55067: LD_INT 31
55069: ST_TO_ADDR
// vc_control := control_rider ;
55070: LD_ADDR_OWVAR 38
55074: PUSH
55075: LD_INT 4
55077: ST_TO_ADDR
// animal := CreateVehicle ;
55078: LD_ADDR_VAR 0 12
55082: PUSH
55083: CALL_OW 45
55087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55088: LD_VAR 0 12
55092: PPUSH
55093: LD_VAR 0 8
55097: PPUSH
55098: LD_INT 0
55100: PPUSH
55101: CALL 57297 0 3
// end ;
55105: GO 55059
55107: POP
55108: POP
// if horses then
55109: LD_VAR 0 5
55113: IFFALSE 55180
// for i = 1 to horses do
55115: LD_ADDR_VAR 0 11
55119: PUSH
55120: DOUBLE
55121: LD_INT 1
55123: DEC
55124: ST_TO_ADDR
55125: LD_VAR 0 5
55129: PUSH
55130: FOR_TO
55131: IFFALSE 55178
// begin hc_class := 21 ;
55133: LD_ADDR_OWVAR 28
55137: PUSH
55138: LD_INT 21
55140: ST_TO_ADDR
// hc_gallery :=  ;
55141: LD_ADDR_OWVAR 33
55145: PUSH
55146: LD_STRING 
55148: ST_TO_ADDR
// animal := CreateHuman ;
55149: LD_ADDR_VAR 0 12
55153: PUSH
55154: CALL_OW 44
55158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55159: LD_VAR 0 12
55163: PPUSH
55164: LD_VAR 0 8
55168: PPUSH
55169: LD_INT 0
55171: PPUSH
55172: CALL 57297 0 3
// end ;
55176: GO 55130
55178: POP
55179: POP
// if birds then
55180: LD_VAR 0 1
55184: IFFALSE 55251
// for i = 1 to birds do
55186: LD_ADDR_VAR 0 11
55190: PUSH
55191: DOUBLE
55192: LD_INT 1
55194: DEC
55195: ST_TO_ADDR
55196: LD_VAR 0 1
55200: PUSH
55201: FOR_TO
55202: IFFALSE 55249
// begin hc_class = 18 ;
55204: LD_ADDR_OWVAR 28
55208: PUSH
55209: LD_INT 18
55211: ST_TO_ADDR
// hc_gallery =  ;
55212: LD_ADDR_OWVAR 33
55216: PUSH
55217: LD_STRING 
55219: ST_TO_ADDR
// animal := CreateHuman ;
55220: LD_ADDR_VAR 0 12
55224: PUSH
55225: CALL_OW 44
55229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55230: LD_VAR 0 12
55234: PPUSH
55235: LD_VAR 0 8
55239: PPUSH
55240: LD_INT 0
55242: PPUSH
55243: CALL 57297 0 3
// end ;
55247: GO 55201
55249: POP
55250: POP
// if tigers then
55251: LD_VAR 0 2
55255: IFFALSE 55339
// for i = 1 to tigers do
55257: LD_ADDR_VAR 0 11
55261: PUSH
55262: DOUBLE
55263: LD_INT 1
55265: DEC
55266: ST_TO_ADDR
55267: LD_VAR 0 2
55271: PUSH
55272: FOR_TO
55273: IFFALSE 55337
// begin hc_class = class_tiger ;
55275: LD_ADDR_OWVAR 28
55279: PUSH
55280: LD_INT 14
55282: ST_TO_ADDR
// hc_gallery =  ;
55283: LD_ADDR_OWVAR 33
55287: PUSH
55288: LD_STRING 
55290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55291: LD_ADDR_OWVAR 35
55295: PUSH
55296: LD_INT 7
55298: NEG
55299: PPUSH
55300: LD_INT 7
55302: PPUSH
55303: CALL_OW 12
55307: ST_TO_ADDR
// animal := CreateHuman ;
55308: LD_ADDR_VAR 0 12
55312: PUSH
55313: CALL_OW 44
55317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55318: LD_VAR 0 12
55322: PPUSH
55323: LD_VAR 0 8
55327: PPUSH
55328: LD_INT 0
55330: PPUSH
55331: CALL 57297 0 3
// end ;
55335: GO 55272
55337: POP
55338: POP
// if apemans then
55339: LD_VAR 0 3
55343: IFFALSE 55466
// for i = 1 to apemans do
55345: LD_ADDR_VAR 0 11
55349: PUSH
55350: DOUBLE
55351: LD_INT 1
55353: DEC
55354: ST_TO_ADDR
55355: LD_VAR 0 3
55359: PUSH
55360: FOR_TO
55361: IFFALSE 55464
// begin hc_class = class_apeman ;
55363: LD_ADDR_OWVAR 28
55367: PUSH
55368: LD_INT 12
55370: ST_TO_ADDR
// hc_gallery =  ;
55371: LD_ADDR_OWVAR 33
55375: PUSH
55376: LD_STRING 
55378: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55379: LD_ADDR_OWVAR 35
55383: PUSH
55384: LD_INT 5
55386: NEG
55387: PPUSH
55388: LD_INT 5
55390: PPUSH
55391: CALL_OW 12
55395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55396: LD_ADDR_OWVAR 31
55400: PUSH
55401: LD_INT 1
55403: PPUSH
55404: LD_INT 3
55406: PPUSH
55407: CALL_OW 12
55411: PUSH
55412: LD_INT 1
55414: PPUSH
55415: LD_INT 3
55417: PPUSH
55418: CALL_OW 12
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: ST_TO_ADDR
// animal := CreateHuman ;
55435: LD_ADDR_VAR 0 12
55439: PUSH
55440: CALL_OW 44
55444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55445: LD_VAR 0 12
55449: PPUSH
55450: LD_VAR 0 8
55454: PPUSH
55455: LD_INT 0
55457: PPUSH
55458: CALL 57297 0 3
// end ;
55462: GO 55360
55464: POP
55465: POP
// if enchidnas then
55466: LD_VAR 0 4
55470: IFFALSE 55537
// for i = 1 to enchidnas do
55472: LD_ADDR_VAR 0 11
55476: PUSH
55477: DOUBLE
55478: LD_INT 1
55480: DEC
55481: ST_TO_ADDR
55482: LD_VAR 0 4
55486: PUSH
55487: FOR_TO
55488: IFFALSE 55535
// begin hc_class = 13 ;
55490: LD_ADDR_OWVAR 28
55494: PUSH
55495: LD_INT 13
55497: ST_TO_ADDR
// hc_gallery =  ;
55498: LD_ADDR_OWVAR 33
55502: PUSH
55503: LD_STRING 
55505: ST_TO_ADDR
// animal := CreateHuman ;
55506: LD_ADDR_VAR 0 12
55510: PUSH
55511: CALL_OW 44
55515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55516: LD_VAR 0 12
55520: PPUSH
55521: LD_VAR 0 8
55525: PPUSH
55526: LD_INT 0
55528: PPUSH
55529: CALL 57297 0 3
// end ;
55533: GO 55487
55535: POP
55536: POP
// if fishes then
55537: LD_VAR 0 7
55541: IFFALSE 55608
// for i = 1 to fishes do
55543: LD_ADDR_VAR 0 11
55547: PUSH
55548: DOUBLE
55549: LD_INT 1
55551: DEC
55552: ST_TO_ADDR
55553: LD_VAR 0 7
55557: PUSH
55558: FOR_TO
55559: IFFALSE 55606
// begin hc_class = 20 ;
55561: LD_ADDR_OWVAR 28
55565: PUSH
55566: LD_INT 20
55568: ST_TO_ADDR
// hc_gallery =  ;
55569: LD_ADDR_OWVAR 33
55573: PUSH
55574: LD_STRING 
55576: ST_TO_ADDR
// animal := CreateHuman ;
55577: LD_ADDR_VAR 0 12
55581: PUSH
55582: CALL_OW 44
55586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55587: LD_VAR 0 12
55591: PPUSH
55592: LD_VAR 0 9
55596: PPUSH
55597: LD_INT 0
55599: PPUSH
55600: CALL 57297 0 3
// end ;
55604: GO 55558
55606: POP
55607: POP
// end ;
55608: LD_VAR 0 10
55612: RET
// export function WantHeal ( sci , unit ) ; begin
55613: LD_INT 0
55615: PPUSH
// if GetTaskList ( sci ) > 0 then
55616: LD_VAR 0 1
55620: PPUSH
55621: CALL_OW 437
55625: PUSH
55626: LD_INT 0
55628: GREATER
55629: IFFALSE 55699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55631: LD_VAR 0 1
55635: PPUSH
55636: CALL_OW 437
55640: PUSH
55641: LD_INT 1
55643: ARRAY
55644: PUSH
55645: LD_INT 1
55647: ARRAY
55648: PUSH
55649: LD_STRING l
55651: EQUAL
55652: PUSH
55653: LD_VAR 0 1
55657: PPUSH
55658: CALL_OW 437
55662: PUSH
55663: LD_INT 1
55665: ARRAY
55666: PUSH
55667: LD_INT 4
55669: ARRAY
55670: PUSH
55671: LD_VAR 0 2
55675: EQUAL
55676: AND
55677: IFFALSE 55689
// result := true else
55679: LD_ADDR_VAR 0 3
55683: PUSH
55684: LD_INT 1
55686: ST_TO_ADDR
55687: GO 55697
// result := false ;
55689: LD_ADDR_VAR 0 3
55693: PUSH
55694: LD_INT 0
55696: ST_TO_ADDR
// end else
55697: GO 55707
// result := false ;
55699: LD_ADDR_VAR 0 3
55703: PUSH
55704: LD_INT 0
55706: ST_TO_ADDR
// end ;
55707: LD_VAR 0 3
55711: RET
// export function HealTarget ( sci ) ; begin
55712: LD_INT 0
55714: PPUSH
// if not sci then
55715: LD_VAR 0 1
55719: NOT
55720: IFFALSE 55724
// exit ;
55722: GO 55789
// result := 0 ;
55724: LD_ADDR_VAR 0 2
55728: PUSH
55729: LD_INT 0
55731: ST_TO_ADDR
// if GetTaskList ( sci ) then
55732: LD_VAR 0 1
55736: PPUSH
55737: CALL_OW 437
55741: IFFALSE 55789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55743: LD_VAR 0 1
55747: PPUSH
55748: CALL_OW 437
55752: PUSH
55753: LD_INT 1
55755: ARRAY
55756: PUSH
55757: LD_INT 1
55759: ARRAY
55760: PUSH
55761: LD_STRING l
55763: EQUAL
55764: IFFALSE 55789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55766: LD_ADDR_VAR 0 2
55770: PUSH
55771: LD_VAR 0 1
55775: PPUSH
55776: CALL_OW 437
55780: PUSH
55781: LD_INT 1
55783: ARRAY
55784: PUSH
55785: LD_INT 4
55787: ARRAY
55788: ST_TO_ADDR
// end ;
55789: LD_VAR 0 2
55793: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55794: LD_INT 0
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
// if not base_units then
55800: LD_VAR 0 1
55804: NOT
55805: IFFALSE 55809
// exit ;
55807: GO 55896
// result := false ;
55809: LD_ADDR_VAR 0 2
55813: PUSH
55814: LD_INT 0
55816: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55817: LD_ADDR_VAR 0 5
55821: PUSH
55822: LD_VAR 0 1
55826: PPUSH
55827: LD_INT 21
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PPUSH
55837: CALL_OW 72
55841: ST_TO_ADDR
// if not tmp then
55842: LD_VAR 0 5
55846: NOT
55847: IFFALSE 55851
// exit ;
55849: GO 55896
// for i in tmp do
55851: LD_ADDR_VAR 0 3
55855: PUSH
55856: LD_VAR 0 5
55860: PUSH
55861: FOR_IN
55862: IFFALSE 55894
// begin result := EnemyInRange ( i , 22 ) ;
55864: LD_ADDR_VAR 0 2
55868: PUSH
55869: LD_VAR 0 3
55873: PPUSH
55874: LD_INT 22
55876: PPUSH
55877: CALL 54132 0 2
55881: ST_TO_ADDR
// if result then
55882: LD_VAR 0 2
55886: IFFALSE 55892
// exit ;
55888: POP
55889: POP
55890: GO 55896
// end ;
55892: GO 55861
55894: POP
55895: POP
// end ;
55896: LD_VAR 0 2
55900: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55901: LD_INT 0
55903: PPUSH
55904: PPUSH
// if not units then
55905: LD_VAR 0 1
55909: NOT
55910: IFFALSE 55914
// exit ;
55912: GO 55984
// result := [ ] ;
55914: LD_ADDR_VAR 0 3
55918: PUSH
55919: EMPTY
55920: ST_TO_ADDR
// for i in units do
55921: LD_ADDR_VAR 0 4
55925: PUSH
55926: LD_VAR 0 1
55930: PUSH
55931: FOR_IN
55932: IFFALSE 55982
// if GetTag ( i ) = tag then
55934: LD_VAR 0 4
55938: PPUSH
55939: CALL_OW 110
55943: PUSH
55944: LD_VAR 0 2
55948: EQUAL
55949: IFFALSE 55980
// result := Insert ( result , result + 1 , i ) ;
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: LD_VAR 0 3
55960: PPUSH
55961: LD_VAR 0 3
55965: PUSH
55966: LD_INT 1
55968: PLUS
55969: PPUSH
55970: LD_VAR 0 4
55974: PPUSH
55975: CALL_OW 2
55979: ST_TO_ADDR
55980: GO 55931
55982: POP
55983: POP
// end ;
55984: LD_VAR 0 3
55988: RET
// export function IsDriver ( un ) ; begin
55989: LD_INT 0
55991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55992: LD_ADDR_VAR 0 2
55996: PUSH
55997: LD_VAR 0 1
56001: PUSH
56002: LD_INT 55
56004: PUSH
56005: EMPTY
56006: LIST
56007: PPUSH
56008: CALL_OW 69
56012: IN
56013: ST_TO_ADDR
// end ;
56014: LD_VAR 0 2
56018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56019: LD_INT 0
56021: PPUSH
56022: PPUSH
// list := [ ] ;
56023: LD_ADDR_VAR 0 5
56027: PUSH
56028: EMPTY
56029: ST_TO_ADDR
// case d of 0 :
56030: LD_VAR 0 3
56034: PUSH
56035: LD_INT 0
56037: DOUBLE
56038: EQUAL
56039: IFTRUE 56043
56041: GO 56176
56043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56044: LD_ADDR_VAR 0 5
56048: PUSH
56049: LD_VAR 0 1
56053: PUSH
56054: LD_INT 4
56056: MINUS
56057: PUSH
56058: LD_VAR 0 2
56062: PUSH
56063: LD_INT 4
56065: MINUS
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: PUSH
56075: LD_VAR 0 1
56079: PUSH
56080: LD_INT 3
56082: MINUS
56083: PUSH
56084: LD_VAR 0 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: PUSH
56097: LD_VAR 0 1
56101: PUSH
56102: LD_INT 4
56104: PLUS
56105: PUSH
56106: LD_VAR 0 2
56110: PUSH
56111: LD_INT 4
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: PUSH
56119: LD_VAR 0 1
56123: PUSH
56124: LD_INT 3
56126: PLUS
56127: PUSH
56128: LD_VAR 0 2
56132: PUSH
56133: LD_INT 3
56135: PLUS
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: PUSH
56145: LD_VAR 0 1
56149: PUSH
56150: LD_VAR 0 2
56154: PUSH
56155: LD_INT 4
56157: PLUS
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// end ; 1 :
56174: GO 56874
56176: LD_INT 1
56178: DOUBLE
56179: EQUAL
56180: IFTRUE 56184
56182: GO 56317
56184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56185: LD_ADDR_VAR 0 5
56189: PUSH
56190: LD_VAR 0 1
56194: PUSH
56195: LD_VAR 0 2
56199: PUSH
56200: LD_INT 4
56202: MINUS
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: LD_VAR 0 1
56216: PUSH
56217: LD_INT 3
56219: MINUS
56220: PUSH
56221: LD_VAR 0 2
56225: PUSH
56226: LD_INT 3
56228: MINUS
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: PUSH
56238: LD_VAR 0 1
56242: PUSH
56243: LD_INT 4
56245: MINUS
56246: PUSH
56247: LD_VAR 0 2
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: PUSH
56260: LD_VAR 0 1
56264: PUSH
56265: LD_VAR 0 2
56269: PUSH
56270: LD_INT 3
56272: PLUS
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: PUSH
56282: LD_VAR 0 1
56286: PUSH
56287: LD_INT 4
56289: PLUS
56290: PUSH
56291: LD_VAR 0 2
56295: PUSH
56296: LD_INT 4
56298: PLUS
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: LIST
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: ST_TO_ADDR
// end ; 2 :
56315: GO 56874
56317: LD_INT 2
56319: DOUBLE
56320: EQUAL
56321: IFTRUE 56325
56323: GO 56454
56325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56326: LD_ADDR_VAR 0 5
56330: PUSH
56331: LD_VAR 0 1
56335: PUSH
56336: LD_VAR 0 2
56340: PUSH
56341: LD_INT 3
56343: MINUS
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: PUSH
56353: LD_VAR 0 1
56357: PUSH
56358: LD_INT 4
56360: PLUS
56361: PUSH
56362: LD_VAR 0 2
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: PUSH
56375: LD_VAR 0 1
56379: PUSH
56380: LD_VAR 0 2
56384: PUSH
56385: LD_INT 4
56387: PLUS
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: PUSH
56397: LD_VAR 0 1
56401: PUSH
56402: LD_INT 3
56404: MINUS
56405: PUSH
56406: LD_VAR 0 2
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: PUSH
56419: LD_VAR 0 1
56423: PUSH
56424: LD_INT 4
56426: MINUS
56427: PUSH
56428: LD_VAR 0 2
56432: PUSH
56433: LD_INT 4
56435: MINUS
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// end ; 3 :
56452: GO 56874
56454: LD_INT 3
56456: DOUBLE
56457: EQUAL
56458: IFTRUE 56462
56460: GO 56595
56462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56463: LD_ADDR_VAR 0 5
56467: PUSH
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 3
56475: PLUS
56476: PUSH
56477: LD_VAR 0 2
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: PUSH
56490: LD_VAR 0 1
56494: PUSH
56495: LD_INT 4
56497: PLUS
56498: PUSH
56499: LD_VAR 0 2
56503: PUSH
56504: LD_INT 4
56506: PLUS
56507: PUSH
56508: LD_INT 5
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: PUSH
56516: LD_VAR 0 1
56520: PUSH
56521: LD_INT 4
56523: MINUS
56524: PUSH
56525: LD_VAR 0 2
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: LD_VAR 0 1
56542: PUSH
56543: LD_VAR 0 2
56547: PUSH
56548: LD_INT 4
56550: MINUS
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: PUSH
56560: LD_VAR 0 1
56564: PUSH
56565: LD_INT 3
56567: MINUS
56568: PUSH
56569: LD_VAR 0 2
56573: PUSH
56574: LD_INT 3
56576: MINUS
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: ST_TO_ADDR
// end ; 4 :
56593: GO 56874
56595: LD_INT 4
56597: DOUBLE
56598: EQUAL
56599: IFTRUE 56603
56601: GO 56736
56603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56604: LD_ADDR_VAR 0 5
56608: PUSH
56609: LD_VAR 0 1
56613: PUSH
56614: LD_VAR 0 2
56618: PUSH
56619: LD_INT 4
56621: PLUS
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 3
56638: PLUS
56639: PUSH
56640: LD_VAR 0 2
56644: PUSH
56645: LD_INT 3
56647: PLUS
56648: PUSH
56649: LD_INT 5
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_VAR 0 1
56661: PUSH
56662: LD_INT 4
56664: PLUS
56665: PUSH
56666: LD_VAR 0 2
56670: PUSH
56671: LD_INT 4
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: LD_VAR 0 1
56683: PUSH
56684: LD_VAR 0 2
56688: PUSH
56689: LD_INT 3
56691: MINUS
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: PUSH
56701: LD_VAR 0 1
56705: PUSH
56706: LD_INT 4
56708: MINUS
56709: PUSH
56710: LD_VAR 0 2
56714: PUSH
56715: LD_INT 4
56717: MINUS
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// end ; 5 :
56734: GO 56874
56736: LD_INT 5
56738: DOUBLE
56739: EQUAL
56740: IFTRUE 56744
56742: GO 56873
56744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56745: LD_ADDR_VAR 0 5
56749: PUSH
56750: LD_VAR 0 1
56754: PUSH
56755: LD_INT 4
56757: MINUS
56758: PUSH
56759: LD_VAR 0 2
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: PUSH
56772: LD_VAR 0 1
56776: PUSH
56777: LD_VAR 0 2
56781: PUSH
56782: LD_INT 4
56784: MINUS
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: PUSH
56794: LD_VAR 0 1
56798: PUSH
56799: LD_INT 4
56801: PLUS
56802: PUSH
56803: LD_VAR 0 2
56807: PUSH
56808: LD_INT 4
56810: PLUS
56811: PUSH
56812: LD_INT 5
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: PUSH
56820: LD_VAR 0 1
56824: PUSH
56825: LD_INT 3
56827: PLUS
56828: PUSH
56829: LD_VAR 0 2
56833: PUSH
56834: LD_INT 4
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: PUSH
56842: LD_VAR 0 1
56846: PUSH
56847: LD_VAR 0 2
56851: PUSH
56852: LD_INT 3
56854: PLUS
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: ST_TO_ADDR
// end ; end ;
56871: GO 56874
56873: POP
// result := list ;
56874: LD_ADDR_VAR 0 4
56878: PUSH
56879: LD_VAR 0 5
56883: ST_TO_ADDR
// end ;
56884: LD_VAR 0 4
56888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56889: LD_INT 0
56891: PPUSH
56892: PPUSH
56893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56894: LD_VAR 0 1
56898: NOT
56899: PUSH
56900: LD_VAR 0 2
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: IN
56923: NOT
56924: OR
56925: IFFALSE 56929
// exit ;
56927: GO 57021
// tmp := [ ] ;
56929: LD_ADDR_VAR 0 5
56933: PUSH
56934: EMPTY
56935: ST_TO_ADDR
// for i in units do
56936: LD_ADDR_VAR 0 4
56940: PUSH
56941: LD_VAR 0 1
56945: PUSH
56946: FOR_IN
56947: IFFALSE 56990
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56949: LD_ADDR_VAR 0 5
56953: PUSH
56954: LD_VAR 0 5
56958: PPUSH
56959: LD_VAR 0 5
56963: PUSH
56964: LD_INT 1
56966: PLUS
56967: PPUSH
56968: LD_VAR 0 4
56972: PPUSH
56973: LD_VAR 0 2
56977: PPUSH
56978: CALL_OW 259
56982: PPUSH
56983: CALL_OW 2
56987: ST_TO_ADDR
56988: GO 56946
56990: POP
56991: POP
// if not tmp then
56992: LD_VAR 0 5
56996: NOT
56997: IFFALSE 57001
// exit ;
56999: GO 57021
// result := SortListByListDesc ( units , tmp ) ;
57001: LD_ADDR_VAR 0 3
57005: PUSH
57006: LD_VAR 0 1
57010: PPUSH
57011: LD_VAR 0 5
57015: PPUSH
57016: CALL_OW 77
57020: ST_TO_ADDR
// end ;
57021: LD_VAR 0 3
57025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57026: LD_INT 0
57028: PPUSH
57029: PPUSH
57030: PPUSH
// result := false ;
57031: LD_ADDR_VAR 0 3
57035: PUSH
57036: LD_INT 0
57038: ST_TO_ADDR
// x := GetX ( building ) ;
57039: LD_ADDR_VAR 0 4
57043: PUSH
57044: LD_VAR 0 2
57048: PPUSH
57049: CALL_OW 250
57053: ST_TO_ADDR
// y := GetY ( building ) ;
57054: LD_ADDR_VAR 0 5
57058: PUSH
57059: LD_VAR 0 2
57063: PPUSH
57064: CALL_OW 251
57068: ST_TO_ADDR
// if not building or not x or not y then
57069: LD_VAR 0 2
57073: NOT
57074: PUSH
57075: LD_VAR 0 4
57079: NOT
57080: OR
57081: PUSH
57082: LD_VAR 0 5
57086: NOT
57087: OR
57088: IFFALSE 57092
// exit ;
57090: GO 57184
// if GetTaskList ( unit ) then
57092: LD_VAR 0 1
57096: PPUSH
57097: CALL_OW 437
57101: IFFALSE 57184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57103: LD_STRING e
57105: PUSH
57106: LD_VAR 0 1
57110: PPUSH
57111: CALL_OW 437
57115: PUSH
57116: LD_INT 1
57118: ARRAY
57119: PUSH
57120: LD_INT 1
57122: ARRAY
57123: EQUAL
57124: PUSH
57125: LD_VAR 0 4
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 437
57139: PUSH
57140: LD_INT 1
57142: ARRAY
57143: PUSH
57144: LD_INT 2
57146: ARRAY
57147: EQUAL
57148: AND
57149: PUSH
57150: LD_VAR 0 5
57154: PUSH
57155: LD_VAR 0 1
57159: PPUSH
57160: CALL_OW 437
57164: PUSH
57165: LD_INT 1
57167: ARRAY
57168: PUSH
57169: LD_INT 3
57171: ARRAY
57172: EQUAL
57173: AND
57174: IFFALSE 57184
// result := true end ;
57176: LD_ADDR_VAR 0 3
57180: PUSH
57181: LD_INT 1
57183: ST_TO_ADDR
// end ;
57184: LD_VAR 0 3
57188: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57189: LD_INT 0
57191: PPUSH
// result := false ;
57192: LD_ADDR_VAR 0 4
57196: PUSH
57197: LD_INT 0
57199: ST_TO_ADDR
// if GetTaskList ( unit ) then
57200: LD_VAR 0 1
57204: PPUSH
57205: CALL_OW 437
57209: IFFALSE 57292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57211: LD_STRING M
57213: PUSH
57214: LD_VAR 0 1
57218: PPUSH
57219: CALL_OW 437
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: PUSH
57228: LD_INT 1
57230: ARRAY
57231: EQUAL
57232: PUSH
57233: LD_VAR 0 2
57237: PUSH
57238: LD_VAR 0 1
57242: PPUSH
57243: CALL_OW 437
57247: PUSH
57248: LD_INT 1
57250: ARRAY
57251: PUSH
57252: LD_INT 2
57254: ARRAY
57255: EQUAL
57256: AND
57257: PUSH
57258: LD_VAR 0 3
57262: PUSH
57263: LD_VAR 0 1
57267: PPUSH
57268: CALL_OW 437
57272: PUSH
57273: LD_INT 1
57275: ARRAY
57276: PUSH
57277: LD_INT 3
57279: ARRAY
57280: EQUAL
57281: AND
57282: IFFALSE 57292
// result := true ;
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_INT 1
57291: ST_TO_ADDR
// end ; end ;
57292: LD_VAR 0 4
57296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57297: LD_INT 0
57299: PPUSH
57300: PPUSH
57301: PPUSH
57302: PPUSH
// if not unit or not area then
57303: LD_VAR 0 1
57307: NOT
57308: PUSH
57309: LD_VAR 0 2
57313: NOT
57314: OR
57315: IFFALSE 57319
// exit ;
57317: GO 57483
// tmp := AreaToList ( area , i ) ;
57319: LD_ADDR_VAR 0 6
57323: PUSH
57324: LD_VAR 0 2
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: CALL_OW 517
57338: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57339: LD_ADDR_VAR 0 5
57343: PUSH
57344: DOUBLE
57345: LD_INT 1
57347: DEC
57348: ST_TO_ADDR
57349: LD_VAR 0 6
57353: PUSH
57354: LD_INT 1
57356: ARRAY
57357: PUSH
57358: FOR_TO
57359: IFFALSE 57481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57361: LD_ADDR_VAR 0 7
57365: PUSH
57366: LD_VAR 0 6
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: PUSH
57375: LD_VAR 0 5
57379: ARRAY
57380: PUSH
57381: LD_VAR 0 6
57385: PUSH
57386: LD_INT 2
57388: ARRAY
57389: PUSH
57390: LD_VAR 0 5
57394: ARRAY
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57400: LD_VAR 0 7
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: PPUSH
57409: LD_VAR 0 7
57413: PUSH
57414: LD_INT 2
57416: ARRAY
57417: PPUSH
57418: CALL_OW 428
57422: PUSH
57423: LD_INT 0
57425: EQUAL
57426: IFFALSE 57479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57428: LD_VAR 0 1
57432: PPUSH
57433: LD_VAR 0 7
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PPUSH
57442: LD_VAR 0 7
57446: PUSH
57447: LD_INT 2
57449: ARRAY
57450: PPUSH
57451: LD_VAR 0 3
57455: PPUSH
57456: CALL_OW 48
// result := IsPlaced ( unit ) ;
57460: LD_ADDR_VAR 0 4
57464: PUSH
57465: LD_VAR 0 1
57469: PPUSH
57470: CALL_OW 305
57474: ST_TO_ADDR
// exit ;
57475: POP
57476: POP
57477: GO 57483
// end ; end ;
57479: GO 57358
57481: POP
57482: POP
// end ;
57483: LD_VAR 0 4
57487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57488: LD_INT 0
57490: PPUSH
57491: PPUSH
57492: PPUSH
// if not side or side > 8 then
57493: LD_VAR 0 1
57497: NOT
57498: PUSH
57499: LD_VAR 0 1
57503: PUSH
57504: LD_INT 8
57506: GREATER
57507: OR
57508: IFFALSE 57512
// exit ;
57510: GO 57699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57512: LD_ADDR_VAR 0 4
57516: PUSH
57517: LD_INT 22
57519: PUSH
57520: LD_VAR 0 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 21
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PPUSH
57543: CALL_OW 69
57547: ST_TO_ADDR
// if not tmp then
57548: LD_VAR 0 4
57552: NOT
57553: IFFALSE 57557
// exit ;
57555: GO 57699
// enable_addtolog := true ;
57557: LD_ADDR_OWVAR 81
57561: PUSH
57562: LD_INT 1
57564: ST_TO_ADDR
// AddToLog ( [ ) ;
57565: LD_STRING [
57567: PPUSH
57568: CALL_OW 561
// for i in tmp do
57572: LD_ADDR_VAR 0 3
57576: PUSH
57577: LD_VAR 0 4
57581: PUSH
57582: FOR_IN
57583: IFFALSE 57690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57585: LD_STRING [
57587: PUSH
57588: LD_VAR 0 3
57592: PPUSH
57593: CALL_OW 266
57597: STR
57598: PUSH
57599: LD_STRING , 
57601: STR
57602: PUSH
57603: LD_VAR 0 3
57607: PPUSH
57608: CALL_OW 250
57612: STR
57613: PUSH
57614: LD_STRING , 
57616: STR
57617: PUSH
57618: LD_VAR 0 3
57622: PPUSH
57623: CALL_OW 251
57627: STR
57628: PUSH
57629: LD_STRING , 
57631: STR
57632: PUSH
57633: LD_VAR 0 3
57637: PPUSH
57638: CALL_OW 254
57642: STR
57643: PUSH
57644: LD_STRING , 
57646: STR
57647: PUSH
57648: LD_VAR 0 3
57652: PPUSH
57653: LD_INT 1
57655: PPUSH
57656: CALL_OW 268
57660: STR
57661: PUSH
57662: LD_STRING , 
57664: STR
57665: PUSH
57666: LD_VAR 0 3
57670: PPUSH
57671: LD_INT 2
57673: PPUSH
57674: CALL_OW 268
57678: STR
57679: PUSH
57680: LD_STRING ],
57682: STR
57683: PPUSH
57684: CALL_OW 561
// end ;
57688: GO 57582
57690: POP
57691: POP
// AddToLog ( ]; ) ;
57692: LD_STRING ];
57694: PPUSH
57695: CALL_OW 561
// end ;
57699: LD_VAR 0 2
57703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57704: LD_INT 0
57706: PPUSH
57707: PPUSH
57708: PPUSH
57709: PPUSH
57710: PPUSH
// if not area or not rate or not max then
57711: LD_VAR 0 1
57715: NOT
57716: PUSH
57717: LD_VAR 0 2
57721: NOT
57722: OR
57723: PUSH
57724: LD_VAR 0 4
57728: NOT
57729: OR
57730: IFFALSE 57734
// exit ;
57732: GO 57926
// while 1 do
57734: LD_INT 1
57736: IFFALSE 57926
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57738: LD_ADDR_VAR 0 9
57742: PUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: LD_INT 1
57750: PPUSH
57751: CALL_OW 287
57755: PUSH
57756: LD_INT 10
57758: MUL
57759: ST_TO_ADDR
// r := rate / 10 ;
57760: LD_ADDR_VAR 0 7
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 10
57772: DIVREAL
57773: ST_TO_ADDR
// time := 1 1$00 ;
57774: LD_ADDR_VAR 0 8
57778: PUSH
57779: LD_INT 2100
57781: ST_TO_ADDR
// if amount < min then
57782: LD_VAR 0 9
57786: PUSH
57787: LD_VAR 0 3
57791: LESS
57792: IFFALSE 57810
// r := r * 2 else
57794: LD_ADDR_VAR 0 7
57798: PUSH
57799: LD_VAR 0 7
57803: PUSH
57804: LD_INT 2
57806: MUL
57807: ST_TO_ADDR
57808: GO 57836
// if amount > max then
57810: LD_VAR 0 9
57814: PUSH
57815: LD_VAR 0 4
57819: GREATER
57820: IFFALSE 57836
// r := r / 2 ;
57822: LD_ADDR_VAR 0 7
57826: PUSH
57827: LD_VAR 0 7
57831: PUSH
57832: LD_INT 2
57834: DIVREAL
57835: ST_TO_ADDR
// time := time / r ;
57836: LD_ADDR_VAR 0 8
57840: PUSH
57841: LD_VAR 0 8
57845: PUSH
57846: LD_VAR 0 7
57850: DIVREAL
57851: ST_TO_ADDR
// if time < 0 then
57852: LD_VAR 0 8
57856: PUSH
57857: LD_INT 0
57859: LESS
57860: IFFALSE 57877
// time := time * - 1 ;
57862: LD_ADDR_VAR 0 8
57866: PUSH
57867: LD_VAR 0 8
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: MUL
57876: ST_TO_ADDR
// wait ( time ) ;
57877: LD_VAR 0 8
57881: PPUSH
57882: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57886: LD_INT 35
57888: PPUSH
57889: LD_INT 875
57891: PPUSH
57892: CALL_OW 12
57896: PPUSH
57897: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57901: LD_INT 1
57903: PPUSH
57904: LD_INT 5
57906: PPUSH
57907: CALL_OW 12
57911: PPUSH
57912: LD_VAR 0 1
57916: PPUSH
57917: LD_INT 1
57919: PPUSH
57920: CALL_OW 55
// end ;
57924: GO 57734
// end ;
57926: LD_VAR 0 5
57930: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57931: LD_INT 0
57933: PPUSH
57934: PPUSH
57935: PPUSH
57936: PPUSH
57937: PPUSH
57938: PPUSH
57939: PPUSH
57940: PPUSH
// if not turrets or not factories then
57941: LD_VAR 0 1
57945: NOT
57946: PUSH
57947: LD_VAR 0 2
57951: NOT
57952: OR
57953: IFFALSE 57957
// exit ;
57955: GO 58264
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57957: LD_ADDR_VAR 0 10
57961: PUSH
57962: LD_INT 5
57964: PUSH
57965: LD_INT 6
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 5
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 24
57999: PUSH
58000: LD_INT 25
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 23
58009: PUSH
58010: LD_INT 27
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 42
58023: PUSH
58024: LD_INT 43
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 44
58033: PUSH
58034: LD_INT 46
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 45
58043: PUSH
58044: LD_INT 47
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// result := [ ] ;
58061: LD_ADDR_VAR 0 3
58065: PUSH
58066: EMPTY
58067: ST_TO_ADDR
// for i in turrets do
58068: LD_ADDR_VAR 0 4
58072: PUSH
58073: LD_VAR 0 1
58077: PUSH
58078: FOR_IN
58079: IFFALSE 58262
// begin nat := GetNation ( i ) ;
58081: LD_ADDR_VAR 0 7
58085: PUSH
58086: LD_VAR 0 4
58090: PPUSH
58091: CALL_OW 248
58095: ST_TO_ADDR
// weapon := 0 ;
58096: LD_ADDR_VAR 0 8
58100: PUSH
58101: LD_INT 0
58103: ST_TO_ADDR
// if not nat then
58104: LD_VAR 0 7
58108: NOT
58109: IFFALSE 58113
// continue ;
58111: GO 58078
// for j in list [ nat ] do
58113: LD_ADDR_VAR 0 5
58117: PUSH
58118: LD_VAR 0 10
58122: PUSH
58123: LD_VAR 0 7
58127: ARRAY
58128: PUSH
58129: FOR_IN
58130: IFFALSE 58171
// if GetBWeapon ( i ) = j [ 1 ] then
58132: LD_VAR 0 4
58136: PPUSH
58137: CALL_OW 269
58141: PUSH
58142: LD_VAR 0 5
58146: PUSH
58147: LD_INT 1
58149: ARRAY
58150: EQUAL
58151: IFFALSE 58169
// begin weapon := j [ 2 ] ;
58153: LD_ADDR_VAR 0 8
58157: PUSH
58158: LD_VAR 0 5
58162: PUSH
58163: LD_INT 2
58165: ARRAY
58166: ST_TO_ADDR
// break ;
58167: GO 58171
// end ;
58169: GO 58129
58171: POP
58172: POP
// if not weapon then
58173: LD_VAR 0 8
58177: NOT
58178: IFFALSE 58182
// continue ;
58180: GO 58078
// for k in factories do
58182: LD_ADDR_VAR 0 6
58186: PUSH
58187: LD_VAR 0 2
58191: PUSH
58192: FOR_IN
58193: IFFALSE 58258
// begin weapons := AvailableWeaponList ( k ) ;
58195: LD_ADDR_VAR 0 9
58199: PUSH
58200: LD_VAR 0 6
58204: PPUSH
58205: CALL_OW 478
58209: ST_TO_ADDR
// if not weapons then
58210: LD_VAR 0 9
58214: NOT
58215: IFFALSE 58219
// continue ;
58217: GO 58192
// if weapon in weapons then
58219: LD_VAR 0 8
58223: PUSH
58224: LD_VAR 0 9
58228: IN
58229: IFFALSE 58256
// begin result := [ i , weapon ] ;
58231: LD_ADDR_VAR 0 3
58235: PUSH
58236: LD_VAR 0 4
58240: PUSH
58241: LD_VAR 0 8
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// exit ;
58250: POP
58251: POP
58252: POP
58253: POP
58254: GO 58264
// end ; end ;
58256: GO 58192
58258: POP
58259: POP
// end ;
58260: GO 58078
58262: POP
58263: POP
// end ;
58264: LD_VAR 0 3
58268: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58269: LD_INT 0
58271: PPUSH
// if not side or side > 8 then
58272: LD_VAR 0 3
58276: NOT
58277: PUSH
58278: LD_VAR 0 3
58282: PUSH
58283: LD_INT 8
58285: GREATER
58286: OR
58287: IFFALSE 58291
// exit ;
58289: GO 58350
// if not range then
58291: LD_VAR 0 4
58295: NOT
58296: IFFALSE 58307
// range := - 12 ;
58298: LD_ADDR_VAR 0 4
58302: PUSH
58303: LD_INT 12
58305: NEG
58306: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58307: LD_VAR 0 1
58311: PPUSH
58312: LD_VAR 0 2
58316: PPUSH
58317: LD_VAR 0 3
58321: PPUSH
58322: LD_VAR 0 4
58326: PPUSH
58327: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58331: LD_VAR 0 1
58335: PPUSH
58336: LD_VAR 0 2
58340: PPUSH
58341: LD_VAR 0 3
58345: PPUSH
58346: CALL_OW 331
// end ;
58350: LD_VAR 0 5
58354: RET
// export function Video ( mode ) ; begin
58355: LD_INT 0
58357: PPUSH
// ingame_video = mode ;
58358: LD_ADDR_OWVAR 52
58362: PUSH
58363: LD_VAR 0 1
58367: ST_TO_ADDR
// interface_hidden = mode ;
58368: LD_ADDR_OWVAR 54
58372: PUSH
58373: LD_VAR 0 1
58377: ST_TO_ADDR
// end ;
58378: LD_VAR 0 2
58382: RET
// export function Join ( array , element ) ; begin
58383: LD_INT 0
58385: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58386: LD_ADDR_VAR 0 3
58390: PUSH
58391: LD_VAR 0 1
58395: PPUSH
58396: LD_VAR 0 1
58400: PUSH
58401: LD_INT 1
58403: PLUS
58404: PPUSH
58405: LD_VAR 0 2
58409: PPUSH
58410: CALL_OW 1
58414: ST_TO_ADDR
// end ;
58415: LD_VAR 0 3
58419: RET
// export function JoinUnion ( array , element ) ; begin
58420: LD_INT 0
58422: PPUSH
// result := array union element ;
58423: LD_ADDR_VAR 0 3
58427: PUSH
58428: LD_VAR 0 1
58432: PUSH
58433: LD_VAR 0 2
58437: UNION
58438: ST_TO_ADDR
// end ;
58439: LD_VAR 0 3
58443: RET
// export function GetBehemoths ( side ) ; begin
58444: LD_INT 0
58446: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58447: LD_ADDR_VAR 0 2
58451: PUSH
58452: LD_INT 22
58454: PUSH
58455: LD_VAR 0 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 31
58466: PUSH
58467: LD_INT 25
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PPUSH
58478: CALL_OW 69
58482: ST_TO_ADDR
// end ;
58483: LD_VAR 0 2
58487: RET
// export function Shuffle ( array ) ; var i , index ; begin
58488: LD_INT 0
58490: PPUSH
58491: PPUSH
58492: PPUSH
// result := [ ] ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: EMPTY
58499: ST_TO_ADDR
// if not array then
58500: LD_VAR 0 1
58504: NOT
58505: IFFALSE 58509
// exit ;
58507: GO 58608
// Randomize ;
58509: CALL_OW 10
// for i = array downto 1 do
58513: LD_ADDR_VAR 0 3
58517: PUSH
58518: DOUBLE
58519: LD_VAR 0 1
58523: INC
58524: ST_TO_ADDR
58525: LD_INT 1
58527: PUSH
58528: FOR_DOWNTO
58529: IFFALSE 58606
// begin index := rand ( 1 , array ) ;
58531: LD_ADDR_VAR 0 4
58535: PUSH
58536: LD_INT 1
58538: PPUSH
58539: LD_VAR 0 1
58543: PPUSH
58544: CALL_OW 12
58548: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58549: LD_ADDR_VAR 0 2
58553: PUSH
58554: LD_VAR 0 2
58558: PPUSH
58559: LD_VAR 0 2
58563: PUSH
58564: LD_INT 1
58566: PLUS
58567: PPUSH
58568: LD_VAR 0 1
58572: PUSH
58573: LD_VAR 0 4
58577: ARRAY
58578: PPUSH
58579: CALL_OW 2
58583: ST_TO_ADDR
// array := Delete ( array , index ) ;
58584: LD_ADDR_VAR 0 1
58588: PUSH
58589: LD_VAR 0 1
58593: PPUSH
58594: LD_VAR 0 4
58598: PPUSH
58599: CALL_OW 3
58603: ST_TO_ADDR
// end ;
58604: GO 58528
58606: POP
58607: POP
// end ;
58608: LD_VAR 0 2
58612: RET
// export function GetBaseMaterials ( base ) ; begin
58613: LD_INT 0
58615: PPUSH
// result := [ 0 , 0 , 0 ] ;
58616: LD_ADDR_VAR 0 2
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// if not base then
58635: LD_VAR 0 1
58639: NOT
58640: IFFALSE 58644
// exit ;
58642: GO 58693
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58644: LD_ADDR_VAR 0 2
58648: PUSH
58649: LD_VAR 0 1
58653: PPUSH
58654: LD_INT 1
58656: PPUSH
58657: CALL_OW 275
58661: PUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: LD_INT 2
58669: PPUSH
58670: CALL_OW 275
58674: PUSH
58675: LD_VAR 0 1
58679: PPUSH
58680: LD_INT 3
58682: PPUSH
58683: CALL_OW 275
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// end ;
58693: LD_VAR 0 2
58697: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58698: LD_INT 0
58700: PPUSH
58701: PPUSH
// result := array ;
58702: LD_ADDR_VAR 0 3
58706: PUSH
58707: LD_VAR 0 1
58711: ST_TO_ADDR
// if size > 0 then
58712: LD_VAR 0 2
58716: PUSH
58717: LD_INT 0
58719: GREATER
58720: IFFALSE 58766
// for i := array downto size do
58722: LD_ADDR_VAR 0 4
58726: PUSH
58727: DOUBLE
58728: LD_VAR 0 1
58732: INC
58733: ST_TO_ADDR
58734: LD_VAR 0 2
58738: PUSH
58739: FOR_DOWNTO
58740: IFFALSE 58764
// result := Delete ( result , result ) ;
58742: LD_ADDR_VAR 0 3
58746: PUSH
58747: LD_VAR 0 3
58751: PPUSH
58752: LD_VAR 0 3
58756: PPUSH
58757: CALL_OW 3
58761: ST_TO_ADDR
58762: GO 58739
58764: POP
58765: POP
// end ;
58766: LD_VAR 0 3
58770: RET
// export function ComExit ( unit ) ; var tmp ; begin
58771: LD_INT 0
58773: PPUSH
58774: PPUSH
// if not IsInUnit ( unit ) then
58775: LD_VAR 0 1
58779: PPUSH
58780: CALL_OW 310
58784: NOT
58785: IFFALSE 58789
// exit ;
58787: GO 58849
// tmp := IsInUnit ( unit ) ;
58789: LD_ADDR_VAR 0 3
58793: PUSH
58794: LD_VAR 0 1
58798: PPUSH
58799: CALL_OW 310
58803: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58804: LD_VAR 0 3
58808: PPUSH
58809: CALL_OW 247
58813: PUSH
58814: LD_INT 2
58816: EQUAL
58817: IFFALSE 58830
// ComExitVehicle ( unit ) else
58819: LD_VAR 0 1
58823: PPUSH
58824: CALL_OW 121
58828: GO 58839
// ComExitBuilding ( unit ) ;
58830: LD_VAR 0 1
58834: PPUSH
58835: CALL_OW 122
// result := tmp ;
58839: LD_ADDR_VAR 0 2
58843: PUSH
58844: LD_VAR 0 3
58848: ST_TO_ADDR
// end ;
58849: LD_VAR 0 2
58853: RET
// export function ResetHc ; begin
58854: LD_INT 0
58856: PPUSH
// InitHc ;
58857: CALL_OW 19
// hc_importance := 0 ;
58861: LD_ADDR_OWVAR 32
58865: PUSH
58866: LD_INT 0
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 1
58873: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
58878: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58879: LD_ADDR_VAR 0 6
58883: PUSH
58884: LD_VAR 0 1
58888: PUSH
58889: LD_VAR 0 3
58893: PLUS
58894: PUSH
58895: LD_INT 2
58897: DIV
58898: ST_TO_ADDR
// if _x < 0 then
58899: LD_VAR 0 6
58903: PUSH
58904: LD_INT 0
58906: LESS
58907: IFFALSE 58924
// _x := _x * - 1 ;
58909: LD_ADDR_VAR 0 6
58913: PUSH
58914: LD_VAR 0 6
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: MUL
58923: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58924: LD_ADDR_VAR 0 7
58928: PUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_VAR 0 4
58938: PLUS
58939: PUSH
58940: LD_INT 2
58942: DIV
58943: ST_TO_ADDR
// if _y < 0 then
58944: LD_VAR 0 7
58948: PUSH
58949: LD_INT 0
58951: LESS
58952: IFFALSE 58969
// _y := _y * - 1 ;
58954: LD_ADDR_VAR 0 7
58958: PUSH
58959: LD_VAR 0 7
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: MUL
58968: ST_TO_ADDR
// result := [ _x , _y ] ;
58969: LD_ADDR_VAR 0 5
58973: PUSH
58974: LD_VAR 0 6
58978: PUSH
58979: LD_VAR 0 7
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: ST_TO_ADDR
// end ;
58988: LD_VAR 0 5
58992: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58993: LD_INT 0
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
// task := GetTaskList ( unit ) ;
58999: LD_ADDR_VAR 0 7
59003: PUSH
59004: LD_VAR 0 1
59008: PPUSH
59009: CALL_OW 437
59013: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59014: LD_VAR 0 7
59018: NOT
59019: PUSH
59020: LD_VAR 0 1
59024: PPUSH
59025: LD_VAR 0 2
59029: PPUSH
59030: CALL_OW 308
59034: NOT
59035: AND
59036: IFFALSE 59040
// exit ;
59038: GO 59158
// if IsInArea ( unit , area ) then
59040: LD_VAR 0 1
59044: PPUSH
59045: LD_VAR 0 2
59049: PPUSH
59050: CALL_OW 308
59054: IFFALSE 59072
// begin ComMoveToArea ( unit , goAway ) ;
59056: LD_VAR 0 1
59060: PPUSH
59061: LD_VAR 0 3
59065: PPUSH
59066: CALL_OW 113
// exit ;
59070: GO 59158
// end ; if task [ 1 ] [ 1 ] <> M then
59072: LD_VAR 0 7
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PUSH
59081: LD_INT 1
59083: ARRAY
59084: PUSH
59085: LD_STRING M
59087: NONEQUAL
59088: IFFALSE 59092
// exit ;
59090: GO 59158
// x := task [ 1 ] [ 2 ] ;
59092: LD_ADDR_VAR 0 5
59096: PUSH
59097: LD_VAR 0 7
59101: PUSH
59102: LD_INT 1
59104: ARRAY
59105: PUSH
59106: LD_INT 2
59108: ARRAY
59109: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59110: LD_ADDR_VAR 0 6
59114: PUSH
59115: LD_VAR 0 7
59119: PUSH
59120: LD_INT 1
59122: ARRAY
59123: PUSH
59124: LD_INT 3
59126: ARRAY
59127: ST_TO_ADDR
// if InArea ( x , y , area ) then
59128: LD_VAR 0 5
59132: PPUSH
59133: LD_VAR 0 6
59137: PPUSH
59138: LD_VAR 0 2
59142: PPUSH
59143: CALL_OW 309
59147: IFFALSE 59158
// ComStop ( unit ) ;
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL_OW 141
// end ;
59158: LD_VAR 0 4
59162: RET
// export function Abs ( value ) ; begin
59163: LD_INT 0
59165: PPUSH
// result := value ;
59166: LD_ADDR_VAR 0 2
59170: PUSH
59171: LD_VAR 0 1
59175: ST_TO_ADDR
// if value < 0 then
59176: LD_VAR 0 1
59180: PUSH
59181: LD_INT 0
59183: LESS
59184: IFFALSE 59201
// result := value * - 1 ;
59186: LD_ADDR_VAR 0 2
59190: PUSH
59191: LD_VAR 0 1
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: MUL
59200: ST_TO_ADDR
// end ;
59201: LD_VAR 0 2
59205: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59206: LD_INT 0
59208: PPUSH
59209: PPUSH
59210: PPUSH
59211: PPUSH
59212: PPUSH
59213: PPUSH
59214: PPUSH
59215: PPUSH
// if not unit or not building then
59216: LD_VAR 0 1
59220: NOT
59221: PUSH
59222: LD_VAR 0 2
59226: NOT
59227: OR
59228: IFFALSE 59232
// exit ;
59230: GO 59458
// x := GetX ( building ) ;
59232: LD_ADDR_VAR 0 4
59236: PUSH
59237: LD_VAR 0 2
59241: PPUSH
59242: CALL_OW 250
59246: ST_TO_ADDR
// y := GetY ( building ) ;
59247: LD_ADDR_VAR 0 6
59251: PUSH
59252: LD_VAR 0 2
59256: PPUSH
59257: CALL_OW 251
59261: ST_TO_ADDR
// d := GetDir ( building ) ;
59262: LD_ADDR_VAR 0 8
59266: PUSH
59267: LD_VAR 0 2
59271: PPUSH
59272: CALL_OW 254
59276: ST_TO_ADDR
// r := 4 ;
59277: LD_ADDR_VAR 0 9
59281: PUSH
59282: LD_INT 4
59284: ST_TO_ADDR
// for i := 1 to 5 do
59285: LD_ADDR_VAR 0 10
59289: PUSH
59290: DOUBLE
59291: LD_INT 1
59293: DEC
59294: ST_TO_ADDR
59295: LD_INT 5
59297: PUSH
59298: FOR_TO
59299: IFFALSE 59456
// begin _x := ShiftX ( x , d , r + i ) ;
59301: LD_ADDR_VAR 0 5
59305: PUSH
59306: LD_VAR 0 4
59310: PPUSH
59311: LD_VAR 0 8
59315: PPUSH
59316: LD_VAR 0 9
59320: PUSH
59321: LD_VAR 0 10
59325: PLUS
59326: PPUSH
59327: CALL_OW 272
59331: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59332: LD_ADDR_VAR 0 7
59336: PUSH
59337: LD_VAR 0 6
59341: PPUSH
59342: LD_VAR 0 8
59346: PPUSH
59347: LD_VAR 0 9
59351: PUSH
59352: LD_VAR 0 10
59356: PLUS
59357: PPUSH
59358: CALL_OW 273
59362: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59363: LD_VAR 0 5
59367: PPUSH
59368: LD_VAR 0 7
59372: PPUSH
59373: CALL_OW 488
59377: PUSH
59378: LD_VAR 0 5
59382: PPUSH
59383: LD_VAR 0 7
59387: PPUSH
59388: CALL_OW 428
59392: PPUSH
59393: CALL_OW 247
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: IN
59408: NOT
59409: AND
59410: IFFALSE 59454
// begin ComMoveXY ( unit , _x , _y ) ;
59412: LD_VAR 0 1
59416: PPUSH
59417: LD_VAR 0 5
59421: PPUSH
59422: LD_VAR 0 7
59426: PPUSH
59427: CALL_OW 111
// result := [ _x , _y ] ;
59431: LD_ADDR_VAR 0 3
59435: PUSH
59436: LD_VAR 0 5
59440: PUSH
59441: LD_VAR 0 7
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// exit ;
59450: POP
59451: POP
59452: GO 59458
// end ; end ;
59454: GO 59298
59456: POP
59457: POP
// end ;
59458: LD_VAR 0 3
59462: RET
