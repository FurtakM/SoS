// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// on MapStart ( p ) do begin if streamModeActive then
4985: LD_EXP 15
4989: IFFALSE 4998
// DefineStreamItems ( true ) ;
4991: LD_INT 1
4993: PPUSH
4994: CALL 6646 0 1
// UpdateFactoryWaypoints ( ) ;
4998: CALL 20230 0 0
// end ;
5002: PPOPN 1
5004: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5005: LD_INT 0
5007: PPUSH
// if p2 = 100 then
5008: LD_VAR 0 2
5012: PUSH
5013: LD_INT 100
5015: EQUAL
5016: IFFALSE 6019
// begin if not StreamModeActive then
5018: LD_EXP 15
5022: NOT
5023: IFFALSE 5033
// StreamModeActive := true ;
5025: LD_ADDR_EXP 15
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 0 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 0
5040: EQUAL
5041: IFFALSE 5047
// InitStreamMode ;
5043: CALL 6182 0 0
// if p3 = 1 then
5047: LD_VAR 0 3
5051: PUSH
5052: LD_INT 1
5054: EQUAL
5055: IFFALSE 5065
// sRocket := true ;
5057: LD_ADDR_EXP 20
5061: PUSH
5062: LD_INT 1
5064: ST_TO_ADDR
// if p3 = 2 then
5065: LD_VAR 0 3
5069: PUSH
5070: LD_INT 2
5072: EQUAL
5073: IFFALSE 5083
// sSpeed := true ;
5075: LD_ADDR_EXP 19
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// if p3 = 3 then
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 3
5090: EQUAL
5091: IFFALSE 5101
// sEngine := true ;
5093: LD_ADDR_EXP 21
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// if p3 = 4 then
5101: LD_VAR 0 3
5105: PUSH
5106: LD_INT 4
5108: EQUAL
5109: IFFALSE 5119
// sSpec := true ;
5111: LD_ADDR_EXP 18
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// if p3 = 5 then
5119: LD_VAR 0 3
5123: PUSH
5124: LD_INT 5
5126: EQUAL
5127: IFFALSE 5137
// sLevel := true ;
5129: LD_ADDR_EXP 22
5133: PUSH
5134: LD_INT 1
5136: ST_TO_ADDR
// if p3 = 6 then
5137: LD_VAR 0 3
5141: PUSH
5142: LD_INT 6
5144: EQUAL
5145: IFFALSE 5155
// sArmoury := true ;
5147: LD_ADDR_EXP 23
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// if p3 = 7 then
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 7
5162: EQUAL
5163: IFFALSE 5173
// sRadar := true ;
5165: LD_ADDR_EXP 24
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// if p3 = 8 then
5173: LD_VAR 0 3
5177: PUSH
5178: LD_INT 8
5180: EQUAL
5181: IFFALSE 5191
// sBunker := true ;
5183: LD_ADDR_EXP 25
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// if p3 = 9 then
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 9
5198: EQUAL
5199: IFFALSE 5209
// sHack := true ;
5201: LD_ADDR_EXP 26
5205: PUSH
5206: LD_INT 1
5208: ST_TO_ADDR
// if p3 = 10 then
5209: LD_VAR 0 3
5213: PUSH
5214: LD_INT 10
5216: EQUAL
5217: IFFALSE 5227
// sFire := true ;
5219: LD_ADDR_EXP 27
5223: PUSH
5224: LD_INT 1
5226: ST_TO_ADDR
// if p3 = 11 then
5227: LD_VAR 0 3
5231: PUSH
5232: LD_INT 11
5234: EQUAL
5235: IFFALSE 5245
// sRefresh := true ;
5237: LD_ADDR_EXP 28
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// if p3 = 12 then
5245: LD_VAR 0 3
5249: PUSH
5250: LD_INT 12
5252: EQUAL
5253: IFFALSE 5263
// sExp := true ;
5255: LD_ADDR_EXP 29
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if p3 = 13 then
5263: LD_VAR 0 3
5267: PUSH
5268: LD_INT 13
5270: EQUAL
5271: IFFALSE 5281
// sDepot := true ;
5273: LD_ADDR_EXP 30
5277: PUSH
5278: LD_INT 1
5280: ST_TO_ADDR
// if p3 = 14 then
5281: LD_VAR 0 3
5285: PUSH
5286: LD_INT 14
5288: EQUAL
5289: IFFALSE 5299
// sFlag := true ;
5291: LD_ADDR_EXP 31
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if p3 = 15 then
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 15
5306: EQUAL
5307: IFFALSE 5317
// sKamikadze := true ;
5309: LD_ADDR_EXP 39
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// if p3 = 16 then
5317: LD_VAR 0 3
5321: PUSH
5322: LD_INT 16
5324: EQUAL
5325: IFFALSE 5335
// sTroll := true ;
5327: LD_ADDR_EXP 40
5331: PUSH
5332: LD_INT 1
5334: ST_TO_ADDR
// if p3 = 17 then
5335: LD_VAR 0 3
5339: PUSH
5340: LD_INT 17
5342: EQUAL
5343: IFFALSE 5353
// sSlow := true ;
5345: LD_ADDR_EXP 41
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// if p3 = 18 then
5353: LD_VAR 0 3
5357: PUSH
5358: LD_INT 18
5360: EQUAL
5361: IFFALSE 5371
// sLack := true ;
5363: LD_ADDR_EXP 42
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// if p3 = 19 then
5371: LD_VAR 0 3
5375: PUSH
5376: LD_INT 19
5378: EQUAL
5379: IFFALSE 5389
// sTank := true ;
5381: LD_ADDR_EXP 44
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// if p3 = 20 then
5389: LD_VAR 0 3
5393: PUSH
5394: LD_INT 20
5396: EQUAL
5397: IFFALSE 5407
// sRemote := true ;
5399: LD_ADDR_EXP 45
5403: PUSH
5404: LD_INT 1
5406: ST_TO_ADDR
// if p3 = 21 then
5407: LD_VAR 0 3
5411: PUSH
5412: LD_INT 21
5414: EQUAL
5415: IFFALSE 5425
// sPowell := true ;
5417: LD_ADDR_EXP 46
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// if p3 = 22 then
5425: LD_VAR 0 3
5429: PUSH
5430: LD_INT 22
5432: EQUAL
5433: IFFALSE 5443
// sTeleport := true ;
5435: LD_ADDR_EXP 49
5439: PUSH
5440: LD_INT 1
5442: ST_TO_ADDR
// if p3 = 23 then
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 23
5450: EQUAL
5451: IFFALSE 5461
// sOilTower := true ;
5453: LD_ADDR_EXP 51
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// if p3 = 24 then
5461: LD_VAR 0 3
5465: PUSH
5466: LD_INT 24
5468: EQUAL
5469: IFFALSE 5479
// sShovel := true ;
5471: LD_ADDR_EXP 52
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// if p3 = 25 then
5479: LD_VAR 0 3
5483: PUSH
5484: LD_INT 25
5486: EQUAL
5487: IFFALSE 5497
// sSheik := true ;
5489: LD_ADDR_EXP 53
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// if p3 = 26 then
5497: LD_VAR 0 3
5501: PUSH
5502: LD_INT 26
5504: EQUAL
5505: IFFALSE 5515
// sEarthquake := true ;
5507: LD_ADDR_EXP 55
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// if p3 = 27 then
5515: LD_VAR 0 3
5519: PUSH
5520: LD_INT 27
5522: EQUAL
5523: IFFALSE 5533
// sAI := true ;
5525: LD_ADDR_EXP 56
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// if p3 = 28 then
5533: LD_VAR 0 3
5537: PUSH
5538: LD_INT 28
5540: EQUAL
5541: IFFALSE 5551
// sCargo := true ;
5543: LD_ADDR_EXP 59
5547: PUSH
5548: LD_INT 1
5550: ST_TO_ADDR
// if p3 = 29 then
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 29
5558: EQUAL
5559: IFFALSE 5569
// sDLaser := true ;
5561: LD_ADDR_EXP 60
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// if p3 = 30 then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 30
5576: EQUAL
5577: IFFALSE 5587
// sExchange := true ;
5579: LD_ADDR_EXP 61
5583: PUSH
5584: LD_INT 1
5586: ST_TO_ADDR
// if p3 = 31 then
5587: LD_VAR 0 3
5591: PUSH
5592: LD_INT 31
5594: EQUAL
5595: IFFALSE 5605
// sFac := true ;
5597: LD_ADDR_EXP 62
5601: PUSH
5602: LD_INT 1
5604: ST_TO_ADDR
// if p3 = 32 then
5605: LD_VAR 0 3
5609: PUSH
5610: LD_INT 32
5612: EQUAL
5613: IFFALSE 5623
// sPower := true ;
5615: LD_ADDR_EXP 63
5619: PUSH
5620: LD_INT 1
5622: ST_TO_ADDR
// if p3 = 33 then
5623: LD_VAR 0 3
5627: PUSH
5628: LD_INT 33
5630: EQUAL
5631: IFFALSE 5641
// sRandom := true ;
5633: LD_ADDR_EXP 64
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// if p3 = 34 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 34
5648: EQUAL
5649: IFFALSE 5659
// sShield := true ;
5651: LD_ADDR_EXP 65
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 35 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 35
5666: EQUAL
5667: IFFALSE 5677
// sTime := true ;
5669: LD_ADDR_EXP 66
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 36 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 36
5684: EQUAL
5685: IFFALSE 5695
// sTools := true ;
5687: LD_ADDR_EXP 67
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 101 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 101
5702: EQUAL
5703: IFFALSE 5713
// sSold := true ;
5705: LD_ADDR_EXP 32
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 102 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 102
5720: EQUAL
5721: IFFALSE 5731
// sDiff := true ;
5723: LD_ADDR_EXP 33
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 103 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 103
5738: EQUAL
5739: IFFALSE 5749
// sFog := true ;
5741: LD_ADDR_EXP 36
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 104 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 104
5756: EQUAL
5757: IFFALSE 5767
// sReset := true ;
5759: LD_ADDR_EXP 37
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// if p3 = 105 then
5767: LD_VAR 0 3
5771: PUSH
5772: LD_INT 105
5774: EQUAL
5775: IFFALSE 5785
// sSun := true ;
5777: LD_ADDR_EXP 38
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// if p3 = 106 then
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 106
5792: EQUAL
5793: IFFALSE 5803
// sTiger := true ;
5795: LD_ADDR_EXP 34
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// if p3 = 107 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 107
5810: EQUAL
5811: IFFALSE 5821
// sBomb := true ;
5813: LD_ADDR_EXP 35
5817: PUSH
5818: LD_INT 1
5820: ST_TO_ADDR
// if p3 = 108 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_INT 108
5828: EQUAL
5829: IFFALSE 5839
// sWound := true ;
5831: LD_ADDR_EXP 43
5835: PUSH
5836: LD_INT 1
5838: ST_TO_ADDR
// if p3 = 109 then
5839: LD_VAR 0 3
5843: PUSH
5844: LD_INT 109
5846: EQUAL
5847: IFFALSE 5857
// sBetray := true ;
5849: LD_ADDR_EXP 47
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// if p3 = 110 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 110
5864: EQUAL
5865: IFFALSE 5875
// sContamin := true ;
5867: LD_ADDR_EXP 48
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 111 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 111
5882: EQUAL
5883: IFFALSE 5893
// sOil := true ;
5885: LD_ADDR_EXP 50
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 112 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 112
5900: EQUAL
5901: IFFALSE 5911
// sStu := true ;
5903: LD_ADDR_EXP 54
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 113 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 113
5918: EQUAL
5919: IFFALSE 5929
// sBazooka := true ;
5921: LD_ADDR_EXP 57
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 114 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 114
5936: EQUAL
5937: IFFALSE 5947
// sMortar := true ;
5939: LD_ADDR_EXP 58
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 115 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 115
5954: EQUAL
5955: IFFALSE 5965
// sRanger := true ;
5957: LD_ADDR_EXP 68
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 116 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 116
5972: EQUAL
5973: IFFALSE 5983
// sComputer := true ;
5975: LD_ADDR_EXP 69
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 117 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 117
5990: EQUAL
5991: IFFALSE 6001
// s30 := true ;
5993: LD_ADDR_EXP 70
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 118 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 118
6008: EQUAL
6009: IFFALSE 6019
// s60 := true ;
6011: LD_ADDR_EXP 71
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// end ; if p2 = 101 then
6019: LD_VAR 0 2
6023: PUSH
6024: LD_INT 101
6026: EQUAL
6027: IFFALSE 6155
// begin case p3 of 1 :
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 1
6036: DOUBLE
6037: EQUAL
6038: IFTRUE 6042
6040: GO 6049
6042: POP
// hHackUnlimitedResources ; 2 :
6043: CALL 18253 0 0
6047: GO 6155
6049: LD_INT 2
6051: DOUBLE
6052: EQUAL
6053: IFTRUE 6057
6055: GO 6064
6057: POP
// hHackSetLevel10 ; 3 :
6058: CALL 18386 0 0
6062: GO 6155
6064: LD_INT 3
6066: DOUBLE
6067: EQUAL
6068: IFTRUE 6072
6070: GO 6079
6072: POP
// hHackSetLevel10YourUnits ; 4 :
6073: CALL 18471 0 0
6077: GO 6155
6079: LD_INT 4
6081: DOUBLE
6082: EQUAL
6083: IFTRUE 6087
6085: GO 6094
6087: POP
// hHackInvincible ; 5 :
6088: CALL 18919 0 0
6092: GO 6155
6094: LD_INT 5
6096: DOUBLE
6097: EQUAL
6098: IFTRUE 6102
6100: GO 6109
6102: POP
// hHackInvisible ; 6 :
6103: CALL 19030 0 0
6107: GO 6155
6109: LD_INT 6
6111: DOUBLE
6112: EQUAL
6113: IFTRUE 6117
6115: GO 6124
6117: POP
// hHackChangeYourSide ; 7 :
6118: CALL 19087 0 0
6122: GO 6155
6124: LD_INT 7
6126: DOUBLE
6127: EQUAL
6128: IFTRUE 6132
6130: GO 6139
6132: POP
// hHackChangeUnitSide ; 8 :
6133: CALL 19129 0 0
6137: GO 6155
6139: LD_INT 8
6141: DOUBLE
6142: EQUAL
6143: IFTRUE 6147
6145: GO 6154
6147: POP
// hHackFog ; end ;
6148: CALL 19230 0 0
6152: GO 6155
6154: POP
// end ; end ;
6155: LD_VAR 0 7
6159: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6160: GO 6162
6162: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6163: LD_STRING initStreamRollete();
6165: PPUSH
6166: CALL_OW 559
// InitStreamMode ;
6170: CALL 6182 0 0
// DefineStreamItems ( false ) ;
6174: LD_INT 0
6176: PPUSH
6177: CALL 6646 0 1
// end ;
6181: END
// function InitStreamMode ; begin
6182: LD_INT 0
6184: PPUSH
// streamModeActive := false ;
6185: LD_ADDR_EXP 15
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// normalCounter := 36 ;
6193: LD_ADDR_EXP 16
6197: PUSH
6198: LD_INT 36
6200: ST_TO_ADDR
// hardcoreCounter := 18 ;
6201: LD_ADDR_EXP 17
6205: PUSH
6206: LD_INT 18
6208: ST_TO_ADDR
// sRocket := false ;
6209: LD_ADDR_EXP 20
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sSpeed := false ;
6217: LD_ADDR_EXP 19
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sEngine := false ;
6225: LD_ADDR_EXP 21
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSpec := false ;
6233: LD_ADDR_EXP 18
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLevel := false ;
6241: LD_ADDR_EXP 22
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sArmoury := false ;
6249: LD_ADDR_EXP 23
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRadar := false ;
6257: LD_ADDR_EXP 24
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sBunker := false ;
6265: LD_ADDR_EXP 25
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sHack := false ;
6273: LD_ADDR_EXP 26
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sFire := false ;
6281: LD_ADDR_EXP 27
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sRefresh := false ;
6289: LD_ADDR_EXP 28
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sExp := false ;
6297: LD_ADDR_EXP 29
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sDepot := false ;
6305: LD_ADDR_EXP 30
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sFlag := false ;
6313: LD_ADDR_EXP 31
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sKamikadze := false ;
6321: LD_ADDR_EXP 39
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sTroll := false ;
6329: LD_ADDR_EXP 40
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sSlow := false ;
6337: LD_ADDR_EXP 41
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sLack := false ;
6345: LD_ADDR_EXP 42
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sTank := false ;
6353: LD_ADDR_EXP 44
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRemote := false ;
6361: LD_ADDR_EXP 45
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sPowell := false ;
6369: LD_ADDR_EXP 46
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTeleport := false ;
6377: LD_ADDR_EXP 49
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sOilTower := false ;
6385: LD_ADDR_EXP 51
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sShovel := false ;
6393: LD_ADDR_EXP 52
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sSheik := false ;
6401: LD_ADDR_EXP 53
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sEarthquake := false ;
6409: LD_ADDR_EXP 55
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sAI := false ;
6417: LD_ADDR_EXP 56
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sCargo := false ;
6425: LD_ADDR_EXP 59
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sDLaser := false ;
6433: LD_ADDR_EXP 60
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sExchange := false ;
6441: LD_ADDR_EXP 61
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sFac := false ;
6449: LD_ADDR_EXP 62
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sPower := false ;
6457: LD_ADDR_EXP 63
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sRandom := false ;
6465: LD_ADDR_EXP 64
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sShield := false ;
6473: LD_ADDR_EXP 65
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sTime := false ;
6481: LD_ADDR_EXP 66
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sTools := false ;
6489: LD_ADDR_EXP 67
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sSold := false ;
6497: LD_ADDR_EXP 32
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sDiff := false ;
6505: LD_ADDR_EXP 33
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// sFog := false ;
6513: LD_ADDR_EXP 36
6517: PUSH
6518: LD_INT 0
6520: ST_TO_ADDR
// sReset := false ;
6521: LD_ADDR_EXP 37
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// sSun := false ;
6529: LD_ADDR_EXP 38
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// sTiger := false ;
6537: LD_ADDR_EXP 34
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// sBomb := false ;
6545: LD_ADDR_EXP 35
6549: PUSH
6550: LD_INT 0
6552: ST_TO_ADDR
// sWound := false ;
6553: LD_ADDR_EXP 43
6557: PUSH
6558: LD_INT 0
6560: ST_TO_ADDR
// sBetray := false ;
6561: LD_ADDR_EXP 47
6565: PUSH
6566: LD_INT 0
6568: ST_TO_ADDR
// sContamin := false ;
6569: LD_ADDR_EXP 48
6573: PUSH
6574: LD_INT 0
6576: ST_TO_ADDR
// sOil := false ;
6577: LD_ADDR_EXP 50
6581: PUSH
6582: LD_INT 0
6584: ST_TO_ADDR
// sStu := false ;
6585: LD_ADDR_EXP 54
6589: PUSH
6590: LD_INT 0
6592: ST_TO_ADDR
// sBazooka := false ;
6593: LD_ADDR_EXP 57
6597: PUSH
6598: LD_INT 0
6600: ST_TO_ADDR
// sMortar := false ;
6601: LD_ADDR_EXP 58
6605: PUSH
6606: LD_INT 0
6608: ST_TO_ADDR
// sRanger := false ;
6609: LD_ADDR_EXP 68
6613: PUSH
6614: LD_INT 0
6616: ST_TO_ADDR
// sComputer := false ;
6617: LD_ADDR_EXP 69
6621: PUSH
6622: LD_INT 0
6624: ST_TO_ADDR
// s30 := false ;
6625: LD_ADDR_EXP 70
6629: PUSH
6630: LD_INT 0
6632: ST_TO_ADDR
// s60 := false ;
6633: LD_ADDR_EXP 71
6637: PUSH
6638: LD_INT 0
6640: ST_TO_ADDR
// end ;
6641: LD_VAR 0 1
6645: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
// result := [ ] ;
6655: LD_ADDR_VAR 0 2
6659: PUSH
6660: EMPTY
6661: ST_TO_ADDR
// if campaign_id = 1 then
6662: LD_OWVAR 69
6666: PUSH
6667: LD_INT 1
6669: EQUAL
6670: IFFALSE 9836
// begin case mission_number of 1 :
6672: LD_OWVAR 70
6676: PUSH
6677: LD_INT 1
6679: DOUBLE
6680: EQUAL
6681: IFTRUE 6685
6683: GO 6761
6685: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6686: LD_ADDR_VAR 0 2
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 4
6696: PUSH
6697: LD_INT 11
6699: PUSH
6700: LD_INT 12
6702: PUSH
6703: LD_INT 15
6705: PUSH
6706: LD_INT 16
6708: PUSH
6709: LD_INT 22
6711: PUSH
6712: LD_INT 23
6714: PUSH
6715: LD_INT 26
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 101
6731: PUSH
6732: LD_INT 102
6734: PUSH
6735: LD_INT 106
6737: PUSH
6738: LD_INT 116
6740: PUSH
6741: LD_INT 117
6743: PUSH
6744: LD_INT 118
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: ST_TO_ADDR
6759: GO 9834
6761: LD_INT 2
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6853
6769: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: LD_INT 4
6780: PUSH
6781: LD_INT 11
6783: PUSH
6784: LD_INT 12
6786: PUSH
6787: LD_INT 15
6789: PUSH
6790: LD_INT 16
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_INT 23
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 101
6815: PUSH
6816: LD_INT 102
6818: PUSH
6819: LD_INT 105
6821: PUSH
6822: LD_INT 106
6824: PUSH
6825: LD_INT 108
6827: PUSH
6828: LD_INT 116
6830: PUSH
6831: LD_INT 117
6833: PUSH
6834: LD_INT 118
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: ST_TO_ADDR
6851: GO 9834
6853: LD_INT 3
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6949
6861: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 4
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: LD_INT 11
6878: PUSH
6879: LD_INT 12
6881: PUSH
6882: LD_INT 15
6884: PUSH
6885: LD_INT 16
6887: PUSH
6888: LD_INT 22
6890: PUSH
6891: LD_INT 26
6893: PUSH
6894: LD_INT 36
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 101
6911: PUSH
6912: LD_INT 102
6914: PUSH
6915: LD_INT 105
6917: PUSH
6918: LD_INT 106
6920: PUSH
6921: LD_INT 108
6923: PUSH
6924: LD_INT 116
6926: PUSH
6927: LD_INT 117
6929: PUSH
6930: LD_INT 118
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 9834
6949: LD_INT 4
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 7053
6957: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 8
6974: PUSH
6975: LD_INT 11
6977: PUSH
6978: LD_INT 12
6980: PUSH
6981: LD_INT 15
6983: PUSH
6984: LD_INT 16
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 23
6992: PUSH
6993: LD_INT 26
6995: PUSH
6996: LD_INT 36
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 101
7015: PUSH
7016: LD_INT 102
7018: PUSH
7019: LD_INT 105
7021: PUSH
7022: LD_INT 106
7024: PUSH
7025: LD_INT 108
7027: PUSH
7028: LD_INT 116
7030: PUSH
7031: LD_INT 117
7033: PUSH
7034: LD_INT 118
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: ST_TO_ADDR
7051: GO 9834
7053: LD_INT 5
7055: DOUBLE
7056: EQUAL
7057: IFTRUE 7061
7059: GO 7173
7061: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 4
7072: PUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 6
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: LD_INT 11
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 15
7090: PUSH
7091: LD_INT 16
7093: PUSH
7094: LD_INT 22
7096: PUSH
7097: LD_INT 23
7099: PUSH
7100: LD_INT 25
7102: PUSH
7103: LD_INT 26
7105: PUSH
7106: LD_INT 36
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 101
7127: PUSH
7128: LD_INT 102
7130: PUSH
7131: LD_INT 105
7133: PUSH
7134: LD_INT 106
7136: PUSH
7137: LD_INT 108
7139: PUSH
7140: LD_INT 109
7142: PUSH
7143: LD_INT 112
7145: PUSH
7146: LD_INT 116
7148: PUSH
7149: LD_INT 117
7151: PUSH
7152: LD_INT 118
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: ST_TO_ADDR
7171: GO 9834
7173: LD_INT 6
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7313
7181: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_INT 2
7189: PUSH
7190: LD_INT 4
7192: PUSH
7193: LD_INT 5
7195: PUSH
7196: LD_INT 6
7198: PUSH
7199: LD_INT 8
7201: PUSH
7202: LD_INT 11
7204: PUSH
7205: LD_INT 12
7207: PUSH
7208: LD_INT 15
7210: PUSH
7211: LD_INT 16
7213: PUSH
7214: LD_INT 20
7216: PUSH
7217: LD_INT 21
7219: PUSH
7220: LD_INT 22
7222: PUSH
7223: LD_INT 23
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 26
7231: PUSH
7232: LD_INT 30
7234: PUSH
7235: LD_INT 31
7237: PUSH
7238: LD_INT 32
7240: PUSH
7241: LD_INT 36
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 101
7267: PUSH
7268: LD_INT 102
7270: PUSH
7271: LD_INT 105
7273: PUSH
7274: LD_INT 106
7276: PUSH
7277: LD_INT 108
7279: PUSH
7280: LD_INT 109
7282: PUSH
7283: LD_INT 112
7285: PUSH
7286: LD_INT 116
7288: PUSH
7289: LD_INT 117
7291: PUSH
7292: LD_INT 118
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: ST_TO_ADDR
7311: GO 9834
7313: LD_INT 7
7315: DOUBLE
7316: EQUAL
7317: IFTRUE 7321
7319: GO 7433
7321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_INT 2
7329: PUSH
7330: LD_INT 4
7332: PUSH
7333: LD_INT 5
7335: PUSH
7336: LD_INT 7
7338: PUSH
7339: LD_INT 11
7341: PUSH
7342: LD_INT 12
7344: PUSH
7345: LD_INT 15
7347: PUSH
7348: LD_INT 16
7350: PUSH
7351: LD_INT 20
7353: PUSH
7354: LD_INT 21
7356: PUSH
7357: LD_INT 22
7359: PUSH
7360: LD_INT 23
7362: PUSH
7363: LD_INT 25
7365: PUSH
7366: LD_INT 26
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 101
7387: PUSH
7388: LD_INT 102
7390: PUSH
7391: LD_INT 103
7393: PUSH
7394: LD_INT 105
7396: PUSH
7397: LD_INT 106
7399: PUSH
7400: LD_INT 108
7402: PUSH
7403: LD_INT 112
7405: PUSH
7406: LD_INT 116
7408: PUSH
7409: LD_INT 117
7411: PUSH
7412: LD_INT 118
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: ST_TO_ADDR
7431: GO 9834
7433: LD_INT 8
7435: DOUBLE
7436: EQUAL
7437: IFTRUE 7441
7439: GO 7581
7441: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7442: LD_ADDR_VAR 0 2
7446: PUSH
7447: LD_INT 2
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: LD_INT 5
7455: PUSH
7456: LD_INT 6
7458: PUSH
7459: LD_INT 7
7461: PUSH
7462: LD_INT 8
7464: PUSH
7465: LD_INT 11
7467: PUSH
7468: LD_INT 12
7470: PUSH
7471: LD_INT 15
7473: PUSH
7474: LD_INT 16
7476: PUSH
7477: LD_INT 20
7479: PUSH
7480: LD_INT 21
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_INT 23
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 31
7500: PUSH
7501: LD_INT 32
7503: PUSH
7504: LD_INT 36
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 101
7531: PUSH
7532: LD_INT 102
7534: PUSH
7535: LD_INT 103
7537: PUSH
7538: LD_INT 105
7540: PUSH
7541: LD_INT 106
7543: PUSH
7544: LD_INT 108
7546: PUSH
7547: LD_INT 109
7549: PUSH
7550: LD_INT 112
7552: PUSH
7553: LD_INT 116
7555: PUSH
7556: LD_INT 117
7558: PUSH
7559: LD_INT 118
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: ST_TO_ADDR
7579: GO 9834
7581: LD_INT 9
7583: DOUBLE
7584: EQUAL
7585: IFTRUE 7589
7587: GO 7737
7589: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 2
7597: PUSH
7598: LD_INT 4
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_INT 7
7609: PUSH
7610: LD_INT 8
7612: PUSH
7613: LD_INT 11
7615: PUSH
7616: LD_INT 12
7618: PUSH
7619: LD_INT 15
7621: PUSH
7622: LD_INT 16
7624: PUSH
7625: LD_INT 20
7627: PUSH
7628: LD_INT 21
7630: PUSH
7631: LD_INT 22
7633: PUSH
7634: LD_INT 23
7636: PUSH
7637: LD_INT 25
7639: PUSH
7640: LD_INT 26
7642: PUSH
7643: LD_INT 28
7645: PUSH
7646: LD_INT 30
7648: PUSH
7649: LD_INT 31
7651: PUSH
7652: LD_INT 32
7654: PUSH
7655: LD_INT 36
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 101
7683: PUSH
7684: LD_INT 102
7686: PUSH
7687: LD_INT 103
7689: PUSH
7690: LD_INT 105
7692: PUSH
7693: LD_INT 106
7695: PUSH
7696: LD_INT 108
7698: PUSH
7699: LD_INT 109
7701: PUSH
7702: LD_INT 112
7704: PUSH
7705: LD_INT 114
7707: PUSH
7708: LD_INT 116
7710: PUSH
7711: LD_INT 117
7713: PUSH
7714: LD_INT 118
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: ST_TO_ADDR
7735: GO 9834
7737: LD_INT 10
7739: DOUBLE
7740: EQUAL
7741: IFTRUE 7745
7743: GO 7941
7745: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7746: LD_ADDR_VAR 0 2
7750: PUSH
7751: LD_INT 2
7753: PUSH
7754: LD_INT 4
7756: PUSH
7757: LD_INT 5
7759: PUSH
7760: LD_INT 6
7762: PUSH
7763: LD_INT 7
7765: PUSH
7766: LD_INT 8
7768: PUSH
7769: LD_INT 9
7771: PUSH
7772: LD_INT 10
7774: PUSH
7775: LD_INT 11
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: LD_INT 13
7783: PUSH
7784: LD_INT 14
7786: PUSH
7787: LD_INT 15
7789: PUSH
7790: LD_INT 16
7792: PUSH
7793: LD_INT 17
7795: PUSH
7796: LD_INT 18
7798: PUSH
7799: LD_INT 19
7801: PUSH
7802: LD_INT 20
7804: PUSH
7805: LD_INT 21
7807: PUSH
7808: LD_INT 22
7810: PUSH
7811: LD_INT 23
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 25
7819: PUSH
7820: LD_INT 26
7822: PUSH
7823: LD_INT 28
7825: PUSH
7826: LD_INT 30
7828: PUSH
7829: LD_INT 31
7831: PUSH
7832: LD_INT 32
7834: PUSH
7835: LD_INT 36
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 101
7871: PUSH
7872: LD_INT 102
7874: PUSH
7875: LD_INT 103
7877: PUSH
7878: LD_INT 104
7880: PUSH
7881: LD_INT 105
7883: PUSH
7884: LD_INT 106
7886: PUSH
7887: LD_INT 107
7889: PUSH
7890: LD_INT 108
7892: PUSH
7893: LD_INT 109
7895: PUSH
7896: LD_INT 110
7898: PUSH
7899: LD_INT 111
7901: PUSH
7902: LD_INT 112
7904: PUSH
7905: LD_INT 114
7907: PUSH
7908: LD_INT 116
7910: PUSH
7911: LD_INT 117
7913: PUSH
7914: LD_INT 118
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 9834
7941: LD_INT 11
7943: DOUBLE
7944: EQUAL
7945: IFTRUE 7949
7947: GO 8153
7949: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 3
7960: PUSH
7961: LD_INT 4
7963: PUSH
7964: LD_INT 5
7966: PUSH
7967: LD_INT 6
7969: PUSH
7970: LD_INT 7
7972: PUSH
7973: LD_INT 8
7975: PUSH
7976: LD_INT 9
7978: PUSH
7979: LD_INT 10
7981: PUSH
7982: LD_INT 11
7984: PUSH
7985: LD_INT 12
7987: PUSH
7988: LD_INT 13
7990: PUSH
7991: LD_INT 14
7993: PUSH
7994: LD_INT 15
7996: PUSH
7997: LD_INT 16
7999: PUSH
8000: LD_INT 17
8002: PUSH
8003: LD_INT 18
8005: PUSH
8006: LD_INT 19
8008: PUSH
8009: LD_INT 20
8011: PUSH
8012: LD_INT 21
8014: PUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 23
8020: PUSH
8021: LD_INT 24
8023: PUSH
8024: LD_INT 25
8026: PUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 28
8032: PUSH
8033: LD_INT 30
8035: PUSH
8036: LD_INT 31
8038: PUSH
8039: LD_INT 32
8041: PUSH
8042: LD_INT 34
8044: PUSH
8045: LD_INT 36
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 101
8083: PUSH
8084: LD_INT 102
8086: PUSH
8087: LD_INT 103
8089: PUSH
8090: LD_INT 104
8092: PUSH
8093: LD_INT 105
8095: PUSH
8096: LD_INT 106
8098: PUSH
8099: LD_INT 107
8101: PUSH
8102: LD_INT 108
8104: PUSH
8105: LD_INT 109
8107: PUSH
8108: LD_INT 110
8110: PUSH
8111: LD_INT 111
8113: PUSH
8114: LD_INT 112
8116: PUSH
8117: LD_INT 114
8119: PUSH
8120: LD_INT 116
8122: PUSH
8123: LD_INT 117
8125: PUSH
8126: LD_INT 118
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: ST_TO_ADDR
8151: GO 9834
8153: LD_INT 12
8155: DOUBLE
8156: EQUAL
8157: IFTRUE 8161
8159: GO 8381
8161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 6
8184: PUSH
8185: LD_INT 7
8187: PUSH
8188: LD_INT 8
8190: PUSH
8191: LD_INT 9
8193: PUSH
8194: LD_INT 10
8196: PUSH
8197: LD_INT 11
8199: PUSH
8200: LD_INT 12
8202: PUSH
8203: LD_INT 13
8205: PUSH
8206: LD_INT 14
8208: PUSH
8209: LD_INT 15
8211: PUSH
8212: LD_INT 16
8214: PUSH
8215: LD_INT 17
8217: PUSH
8218: LD_INT 18
8220: PUSH
8221: LD_INT 19
8223: PUSH
8224: LD_INT 20
8226: PUSH
8227: LD_INT 21
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 23
8235: PUSH
8236: LD_INT 24
8238: PUSH
8239: LD_INT 25
8241: PUSH
8242: LD_INT 26
8244: PUSH
8245: LD_INT 27
8247: PUSH
8248: LD_INT 28
8250: PUSH
8251: LD_INT 30
8253: PUSH
8254: LD_INT 31
8256: PUSH
8257: LD_INT 32
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 34
8265: PUSH
8266: LD_INT 36
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 101
8307: PUSH
8308: LD_INT 102
8310: PUSH
8311: LD_INT 103
8313: PUSH
8314: LD_INT 104
8316: PUSH
8317: LD_INT 105
8319: PUSH
8320: LD_INT 106
8322: PUSH
8323: LD_INT 107
8325: PUSH
8326: LD_INT 108
8328: PUSH
8329: LD_INT 109
8331: PUSH
8332: LD_INT 110
8334: PUSH
8335: LD_INT 111
8337: PUSH
8338: LD_INT 112
8340: PUSH
8341: LD_INT 113
8343: PUSH
8344: LD_INT 114
8346: PUSH
8347: LD_INT 116
8349: PUSH
8350: LD_INT 117
8352: PUSH
8353: LD_INT 118
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: ST_TO_ADDR
8379: GO 9834
8381: LD_INT 13
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8597
8389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: LD_INT 4
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 8
8412: PUSH
8413: LD_INT 9
8415: PUSH
8416: LD_INT 10
8418: PUSH
8419: LD_INT 11
8421: PUSH
8422: LD_INT 12
8424: PUSH
8425: LD_INT 14
8427: PUSH
8428: LD_INT 15
8430: PUSH
8431: LD_INT 16
8433: PUSH
8434: LD_INT 17
8436: PUSH
8437: LD_INT 18
8439: PUSH
8440: LD_INT 19
8442: PUSH
8443: LD_INT 20
8445: PUSH
8446: LD_INT 21
8448: PUSH
8449: LD_INT 22
8451: PUSH
8452: LD_INT 23
8454: PUSH
8455: LD_INT 24
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 26
8463: PUSH
8464: LD_INT 27
8466: PUSH
8467: LD_INT 28
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 31
8475: PUSH
8476: LD_INT 32
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 34
8484: PUSH
8485: LD_INT 36
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 101
8523: PUSH
8524: LD_INT 102
8526: PUSH
8527: LD_INT 103
8529: PUSH
8530: LD_INT 104
8532: PUSH
8533: LD_INT 105
8535: PUSH
8536: LD_INT 106
8538: PUSH
8539: LD_INT 107
8541: PUSH
8542: LD_INT 108
8544: PUSH
8545: LD_INT 109
8547: PUSH
8548: LD_INT 110
8550: PUSH
8551: LD_INT 111
8553: PUSH
8554: LD_INT 112
8556: PUSH
8557: LD_INT 113
8559: PUSH
8560: LD_INT 114
8562: PUSH
8563: LD_INT 116
8565: PUSH
8566: LD_INT 117
8568: PUSH
8569: LD_INT 118
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: ST_TO_ADDR
8595: GO 9834
8597: LD_INT 14
8599: DOUBLE
8600: EQUAL
8601: IFTRUE 8605
8603: GO 8829
8605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8606: LD_ADDR_VAR 0 2
8610: PUSH
8611: LD_INT 1
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: LD_INT 4
8622: PUSH
8623: LD_INT 5
8625: PUSH
8626: LD_INT 6
8628: PUSH
8629: LD_INT 7
8631: PUSH
8632: LD_INT 8
8634: PUSH
8635: LD_INT 9
8637: PUSH
8638: LD_INT 10
8640: PUSH
8641: LD_INT 11
8643: PUSH
8644: LD_INT 12
8646: PUSH
8647: LD_INT 13
8649: PUSH
8650: LD_INT 14
8652: PUSH
8653: LD_INT 15
8655: PUSH
8656: LD_INT 16
8658: PUSH
8659: LD_INT 17
8661: PUSH
8662: LD_INT 18
8664: PUSH
8665: LD_INT 19
8667: PUSH
8668: LD_INT 20
8670: PUSH
8671: LD_INT 21
8673: PUSH
8674: LD_INT 22
8676: PUSH
8677: LD_INT 23
8679: PUSH
8680: LD_INT 24
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 27
8691: PUSH
8692: LD_INT 28
8694: PUSH
8695: LD_INT 29
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 31
8703: PUSH
8704: LD_INT 32
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 34
8712: PUSH
8713: LD_INT 36
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 101
8755: PUSH
8756: LD_INT 102
8758: PUSH
8759: LD_INT 103
8761: PUSH
8762: LD_INT 104
8764: PUSH
8765: LD_INT 105
8767: PUSH
8768: LD_INT 106
8770: PUSH
8771: LD_INT 107
8773: PUSH
8774: LD_INT 108
8776: PUSH
8777: LD_INT 109
8779: PUSH
8780: LD_INT 110
8782: PUSH
8783: LD_INT 111
8785: PUSH
8786: LD_INT 112
8788: PUSH
8789: LD_INT 113
8791: PUSH
8792: LD_INT 114
8794: PUSH
8795: LD_INT 116
8797: PUSH
8798: LD_INT 117
8800: PUSH
8801: LD_INT 118
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: ST_TO_ADDR
8827: GO 9834
8829: LD_INT 15
8831: DOUBLE
8832: EQUAL
8833: IFTRUE 8837
8835: GO 9061
8837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8838: LD_ADDR_VAR 0 2
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: LD_INT 4
8854: PUSH
8855: LD_INT 5
8857: PUSH
8858: LD_INT 6
8860: PUSH
8861: LD_INT 7
8863: PUSH
8864: LD_INT 8
8866: PUSH
8867: LD_INT 9
8869: PUSH
8870: LD_INT 10
8872: PUSH
8873: LD_INT 11
8875: PUSH
8876: LD_INT 12
8878: PUSH
8879: LD_INT 13
8881: PUSH
8882: LD_INT 14
8884: PUSH
8885: LD_INT 15
8887: PUSH
8888: LD_INT 16
8890: PUSH
8891: LD_INT 17
8893: PUSH
8894: LD_INT 18
8896: PUSH
8897: LD_INT 19
8899: PUSH
8900: LD_INT 20
8902: PUSH
8903: LD_INT 21
8905: PUSH
8906: LD_INT 22
8908: PUSH
8909: LD_INT 23
8911: PUSH
8912: LD_INT 24
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: LD_INT 26
8920: PUSH
8921: LD_INT 27
8923: PUSH
8924: LD_INT 28
8926: PUSH
8927: LD_INT 29
8929: PUSH
8930: LD_INT 30
8932: PUSH
8933: LD_INT 31
8935: PUSH
8936: LD_INT 32
8938: PUSH
8939: LD_INT 33
8941: PUSH
8942: LD_INT 34
8944: PUSH
8945: LD_INT 36
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 101
8987: PUSH
8988: LD_INT 102
8990: PUSH
8991: LD_INT 103
8993: PUSH
8994: LD_INT 104
8996: PUSH
8997: LD_INT 105
8999: PUSH
9000: LD_INT 106
9002: PUSH
9003: LD_INT 107
9005: PUSH
9006: LD_INT 108
9008: PUSH
9009: LD_INT 109
9011: PUSH
9012: LD_INT 110
9014: PUSH
9015: LD_INT 111
9017: PUSH
9018: LD_INT 112
9020: PUSH
9021: LD_INT 113
9023: PUSH
9024: LD_INT 114
9026: PUSH
9027: LD_INT 116
9029: PUSH
9030: LD_INT 117
9032: PUSH
9033: LD_INT 118
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: ST_TO_ADDR
9059: GO 9834
9061: LD_INT 16
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9205
9069: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: LD_INT 4
9080: PUSH
9081: LD_INT 5
9083: PUSH
9084: LD_INT 7
9086: PUSH
9087: LD_INT 11
9089: PUSH
9090: LD_INT 12
9092: PUSH
9093: LD_INT 15
9095: PUSH
9096: LD_INT 16
9098: PUSH
9099: LD_INT 20
9101: PUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 22
9107: PUSH
9108: LD_INT 23
9110: PUSH
9111: LD_INT 25
9113: PUSH
9114: LD_INT 26
9116: PUSH
9117: LD_INT 30
9119: PUSH
9120: LD_INT 31
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: LD_INT 33
9128: PUSH
9129: LD_INT 34
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 101
9155: PUSH
9156: LD_INT 102
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 106
9164: PUSH
9165: LD_INT 108
9167: PUSH
9168: LD_INT 112
9170: PUSH
9171: LD_INT 113
9173: PUSH
9174: LD_INT 114
9176: PUSH
9177: LD_INT 116
9179: PUSH
9180: LD_INT 117
9182: PUSH
9183: LD_INT 118
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: ST_TO_ADDR
9203: GO 9834
9205: LD_INT 17
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9437
9213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9214: LD_ADDR_VAR 0 2
9218: PUSH
9219: LD_INT 1
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 3
9227: PUSH
9228: LD_INT 4
9230: PUSH
9231: LD_INT 5
9233: PUSH
9234: LD_INT 6
9236: PUSH
9237: LD_INT 7
9239: PUSH
9240: LD_INT 8
9242: PUSH
9243: LD_INT 9
9245: PUSH
9246: LD_INT 10
9248: PUSH
9249: LD_INT 11
9251: PUSH
9252: LD_INT 12
9254: PUSH
9255: LD_INT 13
9257: PUSH
9258: LD_INT 14
9260: PUSH
9261: LD_INT 15
9263: PUSH
9264: LD_INT 16
9266: PUSH
9267: LD_INT 17
9269: PUSH
9270: LD_INT 18
9272: PUSH
9273: LD_INT 19
9275: PUSH
9276: LD_INT 20
9278: PUSH
9279: LD_INT 21
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 23
9287: PUSH
9288: LD_INT 24
9290: PUSH
9291: LD_INT 25
9293: PUSH
9294: LD_INT 26
9296: PUSH
9297: LD_INT 27
9299: PUSH
9300: LD_INT 28
9302: PUSH
9303: LD_INT 29
9305: PUSH
9306: LD_INT 30
9308: PUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 32
9314: PUSH
9315: LD_INT 33
9317: PUSH
9318: LD_INT 34
9320: PUSH
9321: LD_INT 36
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 101
9363: PUSH
9364: LD_INT 102
9366: PUSH
9367: LD_INT 103
9369: PUSH
9370: LD_INT 104
9372: PUSH
9373: LD_INT 105
9375: PUSH
9376: LD_INT 106
9378: PUSH
9379: LD_INT 107
9381: PUSH
9382: LD_INT 108
9384: PUSH
9385: LD_INT 109
9387: PUSH
9388: LD_INT 110
9390: PUSH
9391: LD_INT 111
9393: PUSH
9394: LD_INT 112
9396: PUSH
9397: LD_INT 113
9399: PUSH
9400: LD_INT 114
9402: PUSH
9403: LD_INT 116
9405: PUSH
9406: LD_INT 117
9408: PUSH
9409: LD_INT 118
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: ST_TO_ADDR
9435: GO 9834
9437: LD_INT 18
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9593
9445: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 4
9456: PUSH
9457: LD_INT 5
9459: PUSH
9460: LD_INT 7
9462: PUSH
9463: LD_INT 11
9465: PUSH
9466: LD_INT 12
9468: PUSH
9469: LD_INT 15
9471: PUSH
9472: LD_INT 16
9474: PUSH
9475: LD_INT 20
9477: PUSH
9478: LD_INT 21
9480: PUSH
9481: LD_INT 22
9483: PUSH
9484: LD_INT 23
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 26
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 31
9498: PUSH
9499: LD_INT 32
9501: PUSH
9502: LD_INT 33
9504: PUSH
9505: LD_INT 34
9507: PUSH
9508: LD_INT 35
9510: PUSH
9511: LD_INT 36
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 101
9539: PUSH
9540: LD_INT 102
9542: PUSH
9543: LD_INT 103
9545: PUSH
9546: LD_INT 106
9548: PUSH
9549: LD_INT 108
9551: PUSH
9552: LD_INT 112
9554: PUSH
9555: LD_INT 113
9557: PUSH
9558: LD_INT 114
9560: PUSH
9561: LD_INT 115
9563: PUSH
9564: LD_INT 116
9566: PUSH
9567: LD_INT 117
9569: PUSH
9570: LD_INT 118
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: ST_TO_ADDR
9591: GO 9834
9593: LD_INT 19
9595: DOUBLE
9596: EQUAL
9597: IFTRUE 9601
9599: GO 9833
9601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9602: LD_ADDR_VAR 0 2
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: LD_INT 2
9612: PUSH
9613: LD_INT 3
9615: PUSH
9616: LD_INT 4
9618: PUSH
9619: LD_INT 5
9621: PUSH
9622: LD_INT 6
9624: PUSH
9625: LD_INT 7
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: LD_INT 9
9633: PUSH
9634: LD_INT 10
9636: PUSH
9637: LD_INT 11
9639: PUSH
9640: LD_INT 12
9642: PUSH
9643: LD_INT 13
9645: PUSH
9646: LD_INT 14
9648: PUSH
9649: LD_INT 15
9651: PUSH
9652: LD_INT 16
9654: PUSH
9655: LD_INT 17
9657: PUSH
9658: LD_INT 18
9660: PUSH
9661: LD_INT 19
9663: PUSH
9664: LD_INT 20
9666: PUSH
9667: LD_INT 21
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_INT 23
9675: PUSH
9676: LD_INT 24
9678: PUSH
9679: LD_INT 25
9681: PUSH
9682: LD_INT 26
9684: PUSH
9685: LD_INT 27
9687: PUSH
9688: LD_INT 28
9690: PUSH
9691: LD_INT 29
9693: PUSH
9694: LD_INT 30
9696: PUSH
9697: LD_INT 31
9699: PUSH
9700: LD_INT 32
9702: PUSH
9703: LD_INT 33
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 35
9711: PUSH
9712: LD_INT 36
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 101
9755: PUSH
9756: LD_INT 102
9758: PUSH
9759: LD_INT 103
9761: PUSH
9762: LD_INT 104
9764: PUSH
9765: LD_INT 105
9767: PUSH
9768: LD_INT 106
9770: PUSH
9771: LD_INT 107
9773: PUSH
9774: LD_INT 108
9776: PUSH
9777: LD_INT 109
9779: PUSH
9780: LD_INT 110
9782: PUSH
9783: LD_INT 111
9785: PUSH
9786: LD_INT 112
9788: PUSH
9789: LD_INT 113
9791: PUSH
9792: LD_INT 114
9794: PUSH
9795: LD_INT 115
9797: PUSH
9798: LD_INT 116
9800: PUSH
9801: LD_INT 117
9803: PUSH
9804: LD_INT 118
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: ST_TO_ADDR
9831: GO 9834
9833: POP
// end else
9834: GO 10065
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 3
9849: PUSH
9850: LD_INT 4
9852: PUSH
9853: LD_INT 5
9855: PUSH
9856: LD_INT 6
9858: PUSH
9859: LD_INT 7
9861: PUSH
9862: LD_INT 8
9864: PUSH
9865: LD_INT 9
9867: PUSH
9868: LD_INT 10
9870: PUSH
9871: LD_INT 11
9873: PUSH
9874: LD_INT 12
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 14
9882: PUSH
9883: LD_INT 15
9885: PUSH
9886: LD_INT 16
9888: PUSH
9889: LD_INT 17
9891: PUSH
9892: LD_INT 18
9894: PUSH
9895: LD_INT 19
9897: PUSH
9898: LD_INT 20
9900: PUSH
9901: LD_INT 21
9903: PUSH
9904: LD_INT 22
9906: PUSH
9907: LD_INT 23
9909: PUSH
9910: LD_INT 24
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 26
9918: PUSH
9919: LD_INT 27
9921: PUSH
9922: LD_INT 28
9924: PUSH
9925: LD_INT 29
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 31
9933: PUSH
9934: LD_INT 32
9936: PUSH
9937: LD_INT 33
9939: PUSH
9940: LD_INT 34
9942: PUSH
9943: LD_INT 35
9945: PUSH
9946: LD_INT 36
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 101
9989: PUSH
9990: LD_INT 102
9992: PUSH
9993: LD_INT 103
9995: PUSH
9996: LD_INT 104
9998: PUSH
9999: LD_INT 105
10001: PUSH
10002: LD_INT 106
10004: PUSH
10005: LD_INT 107
10007: PUSH
10008: LD_INT 108
10010: PUSH
10011: LD_INT 109
10013: PUSH
10014: LD_INT 110
10016: PUSH
10017: LD_INT 111
10019: PUSH
10020: LD_INT 112
10022: PUSH
10023: LD_INT 113
10025: PUSH
10026: LD_INT 114
10028: PUSH
10029: LD_INT 115
10031: PUSH
10032: LD_INT 116
10034: PUSH
10035: LD_INT 117
10037: PUSH
10038: LD_INT 118
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: ST_TO_ADDR
// if result then
10065: LD_VAR 0 2
10069: IFFALSE 10855
// begin normal :=  ;
10071: LD_ADDR_VAR 0 5
10075: PUSH
10076: LD_STRING 
10078: ST_TO_ADDR
// hardcore :=  ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_STRING 
10086: ST_TO_ADDR
// active :=  ;
10087: LD_ADDR_VAR 0 7
10091: PUSH
10092: LD_STRING 
10094: ST_TO_ADDR
// for i = 1 to normalCounter do
10095: LD_ADDR_VAR 0 8
10099: PUSH
10100: DOUBLE
10101: LD_INT 1
10103: DEC
10104: ST_TO_ADDR
10105: LD_EXP 16
10109: PUSH
10110: FOR_TO
10111: IFFALSE 10212
// begin tmp := 0 ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_STRING 0
10120: ST_TO_ADDR
// if result [ 1 ] then
10121: LD_VAR 0 2
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: IFFALSE 10194
// if result [ 1 ] [ 1 ] = i then
10131: LD_VAR 0 2
10135: PUSH
10136: LD_INT 1
10138: ARRAY
10139: PUSH
10140: LD_INT 1
10142: ARRAY
10143: PUSH
10144: LD_VAR 0 8
10148: EQUAL
10149: IFFALSE 10194
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_VAR 0 2
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: LD_VAR 0 2
10168: PUSH
10169: LD_INT 1
10171: ARRAY
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 3
10180: PPUSH
10181: CALL_OW 1
10185: ST_TO_ADDR
// tmp := 1 ;
10186: LD_ADDR_VAR 0 3
10190: PUSH
10191: LD_STRING 1
10193: ST_TO_ADDR
// end ; normal := normal & tmp ;
10194: LD_ADDR_VAR 0 5
10198: PUSH
10199: LD_VAR 0 5
10203: PUSH
10204: LD_VAR 0 3
10208: STR
10209: ST_TO_ADDR
// end ;
10210: GO 10110
10212: POP
10213: POP
// for i = 1 to hardcoreCounter do
10214: LD_ADDR_VAR 0 8
10218: PUSH
10219: DOUBLE
10220: LD_INT 1
10222: DEC
10223: ST_TO_ADDR
10224: LD_EXP 17
10228: PUSH
10229: FOR_TO
10230: IFFALSE 10335
// begin tmp := 0 ;
10232: LD_ADDR_VAR 0 3
10236: PUSH
10237: LD_STRING 0
10239: ST_TO_ADDR
// if result [ 2 ] then
10240: LD_VAR 0 2
10244: PUSH
10245: LD_INT 2
10247: ARRAY
10248: IFFALSE 10317
// if result [ 2 ] [ 1 ] = 100 + i then
10250: LD_VAR 0 2
10254: PUSH
10255: LD_INT 2
10257: ARRAY
10258: PUSH
10259: LD_INT 1
10261: ARRAY
10262: PUSH
10263: LD_INT 100
10265: PUSH
10266: LD_VAR 0 8
10270: PLUS
10271: EQUAL
10272: IFFALSE 10317
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10274: LD_ADDR_VAR 0 2
10278: PUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_INT 2
10286: PPUSH
10287: LD_VAR 0 2
10291: PUSH
10292: LD_INT 2
10294: ARRAY
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 3
10303: PPUSH
10304: CALL_OW 1
10308: ST_TO_ADDR
// tmp := 1 ;
10309: LD_ADDR_VAR 0 3
10313: PUSH
10314: LD_STRING 1
10316: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10317: LD_ADDR_VAR 0 6
10321: PUSH
10322: LD_VAR 0 6
10326: PUSH
10327: LD_VAR 0 3
10331: STR
10332: ST_TO_ADDR
// end ;
10333: GO 10229
10335: POP
10336: POP
// if isGameLoad then
10337: LD_VAR 0 1
10341: IFFALSE 10816
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10343: LD_ADDR_VAR 0 4
10347: PUSH
10348: LD_EXP 20
10352: PUSH
10353: LD_EXP 19
10357: PUSH
10358: LD_EXP 21
10362: PUSH
10363: LD_EXP 18
10367: PUSH
10368: LD_EXP 22
10372: PUSH
10373: LD_EXP 23
10377: PUSH
10378: LD_EXP 24
10382: PUSH
10383: LD_EXP 25
10387: PUSH
10388: LD_EXP 26
10392: PUSH
10393: LD_EXP 27
10397: PUSH
10398: LD_EXP 28
10402: PUSH
10403: LD_EXP 29
10407: PUSH
10408: LD_EXP 30
10412: PUSH
10413: LD_EXP 31
10417: PUSH
10418: LD_EXP 39
10422: PUSH
10423: LD_EXP 40
10427: PUSH
10428: LD_EXP 41
10432: PUSH
10433: LD_EXP 42
10437: PUSH
10438: LD_EXP 44
10442: PUSH
10443: LD_EXP 45
10447: PUSH
10448: LD_EXP 46
10452: PUSH
10453: LD_EXP 49
10457: PUSH
10458: LD_EXP 51
10462: PUSH
10463: LD_EXP 52
10467: PUSH
10468: LD_EXP 53
10472: PUSH
10473: LD_EXP 55
10477: PUSH
10478: LD_EXP 56
10482: PUSH
10483: LD_EXP 59
10487: PUSH
10488: LD_EXP 60
10492: PUSH
10493: LD_EXP 61
10497: PUSH
10498: LD_EXP 62
10502: PUSH
10503: LD_EXP 63
10507: PUSH
10508: LD_EXP 64
10512: PUSH
10513: LD_EXP 65
10517: PUSH
10518: LD_EXP 66
10522: PUSH
10523: LD_EXP 67
10527: PUSH
10528: LD_EXP 32
10532: PUSH
10533: LD_EXP 33
10537: PUSH
10538: LD_EXP 36
10542: PUSH
10543: LD_EXP 37
10547: PUSH
10548: LD_EXP 38
10552: PUSH
10553: LD_EXP 34
10557: PUSH
10558: LD_EXP 35
10562: PUSH
10563: LD_EXP 43
10567: PUSH
10568: LD_EXP 47
10572: PUSH
10573: LD_EXP 48
10577: PUSH
10578: LD_EXP 50
10582: PUSH
10583: LD_EXP 54
10587: PUSH
10588: LD_EXP 57
10592: PUSH
10593: LD_EXP 58
10597: PUSH
10598: LD_EXP 68
10602: PUSH
10603: LD_EXP 69
10607: PUSH
10608: LD_EXP 70
10612: PUSH
10613: LD_EXP 71
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: ST_TO_ADDR
// tmp :=  ;
10674: LD_ADDR_VAR 0 3
10678: PUSH
10679: LD_STRING 
10681: ST_TO_ADDR
// for i = 1 to normalCounter do
10682: LD_ADDR_VAR 0 8
10686: PUSH
10687: DOUBLE
10688: LD_INT 1
10690: DEC
10691: ST_TO_ADDR
10692: LD_EXP 16
10696: PUSH
10697: FOR_TO
10698: IFFALSE 10734
// begin if flags [ i ] then
10700: LD_VAR 0 4
10704: PUSH
10705: LD_VAR 0 8
10709: ARRAY
10710: IFFALSE 10732
// tmp := tmp & i & ; ;
10712: LD_ADDR_VAR 0 3
10716: PUSH
10717: LD_VAR 0 3
10721: PUSH
10722: LD_VAR 0 8
10726: STR
10727: PUSH
10728: LD_STRING ;
10730: STR
10731: ST_TO_ADDR
// end ;
10732: GO 10697
10734: POP
10735: POP
// for i = 1 to hardcoreCounter do
10736: LD_ADDR_VAR 0 8
10740: PUSH
10741: DOUBLE
10742: LD_INT 1
10744: DEC
10745: ST_TO_ADDR
10746: LD_EXP 17
10750: PUSH
10751: FOR_TO
10752: IFFALSE 10798
// begin if flags [ normalCounter + i ] then
10754: LD_VAR 0 4
10758: PUSH
10759: LD_EXP 16
10763: PUSH
10764: LD_VAR 0 8
10768: PLUS
10769: ARRAY
10770: IFFALSE 10796
// tmp := tmp & ( 100 + i ) & ; ;
10772: LD_ADDR_VAR 0 3
10776: PUSH
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 100
10784: PUSH
10785: LD_VAR 0 8
10789: PLUS
10790: STR
10791: PUSH
10792: LD_STRING ;
10794: STR
10795: ST_TO_ADDR
// end ;
10796: GO 10751
10798: POP
10799: POP
// if tmp then
10800: LD_VAR 0 3
10804: IFFALSE 10816
// active := tmp ;
10806: LD_ADDR_VAR 0 7
10810: PUSH
10811: LD_VAR 0 3
10815: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10816: LD_STRING getStreamItemsFromMission("
10818: PUSH
10819: LD_VAR 0 5
10823: STR
10824: PUSH
10825: LD_STRING ","
10827: STR
10828: PUSH
10829: LD_VAR 0 6
10833: STR
10834: PUSH
10835: LD_STRING ","
10837: STR
10838: PUSH
10839: LD_VAR 0 7
10843: STR
10844: PUSH
10845: LD_STRING ")
10847: STR
10848: PPUSH
10849: CALL_OW 559
// end else
10853: GO 10862
// ToLua ( getStreamItemsFromMission("","","") ) ;
10855: LD_STRING getStreamItemsFromMission("","","")
10857: PPUSH
10858: CALL_OW 559
// end ;
10862: LD_VAR 0 2
10866: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10867: LD_EXP 15
10871: PUSH
10872: LD_EXP 20
10876: AND
10877: IFFALSE 11001
10879: GO 10881
10881: DISABLE
10882: LD_INT 0
10884: PPUSH
10885: PPUSH
// begin enable ;
10886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10887: LD_ADDR_VAR 0 2
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_OWVAR 2
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 2
10906: PUSH
10907: LD_INT 34
10909: PUSH
10910: LD_INT 7
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 34
10919: PUSH
10920: LD_INT 45
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 34
10929: PUSH
10930: LD_INT 28
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 34
10939: PUSH
10940: LD_INT 47
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ST_TO_ADDR
// if not tmp then
10963: LD_VAR 0 2
10967: NOT
10968: IFFALSE 10972
// exit ;
10970: GO 11001
// for i in tmp do
10972: LD_ADDR_VAR 0 1
10976: PUSH
10977: LD_VAR 0 2
10981: PUSH
10982: FOR_IN
10983: IFFALSE 10999
// begin SetLives ( i , 0 ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_INT 0
10992: PPUSH
10993: CALL_OW 234
// end ;
10997: GO 10982
10999: POP
11000: POP
// end ;
11001: PPOPN 2
11003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11004: LD_EXP 15
11008: PUSH
11009: LD_EXP 21
11013: AND
11014: IFFALSE 11098
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
// begin enable ;
11023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: ST_TO_ADDR
// if not tmp then
11060: LD_VAR 0 2
11064: NOT
11065: IFFALSE 11069
// exit ;
11067: GO 11098
// for i in tmp do
11069: LD_ADDR_VAR 0 1
11073: PUSH
11074: LD_VAR 0 2
11078: PUSH
11079: FOR_IN
11080: IFFALSE 11096
// begin SetLives ( i , 0 ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 234
// end ;
11094: GO 11079
11096: POP
11097: POP
// end ;
11098: PPOPN 2
11100: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11101: LD_EXP 15
11105: PUSH
11106: LD_EXP 18
11110: AND
11111: IFFALSE 11204
11113: GO 11115
11115: DISABLE
11116: LD_INT 0
11118: PPUSH
// begin enable ;
11119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11120: LD_ADDR_VAR 0 1
11124: PUSH
11125: LD_INT 22
11127: PUSH
11128: LD_OWVAR 2
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 9
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 25
11162: PUSH
11163: LD_INT 8
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PPUSH
11180: CALL_OW 69
11184: PUSH
11185: FOR_IN
11186: IFFALSE 11202
// begin SetClass ( i , 1 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 336
// end ;
11200: GO 11185
11202: POP
11203: POP
// end ;
11204: PPOPN 1
11206: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11207: LD_EXP 15
11211: PUSH
11212: LD_EXP 19
11216: AND
11217: PUSH
11218: LD_OWVAR 65
11222: PUSH
11223: LD_INT 7
11225: LESS
11226: AND
11227: IFFALSE 11241
11229: GO 11231
11231: DISABLE
// begin enable ;
11232: ENABLE
// game_speed := 7 ;
11233: LD_ADDR_OWVAR 65
11237: PUSH
11238: LD_INT 7
11240: ST_TO_ADDR
// end ;
11241: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11242: LD_EXP 15
11246: PUSH
11247: LD_EXP 22
11251: AND
11252: IFFALSE 11454
11254: GO 11256
11256: DISABLE
11257: LD_INT 0
11259: PPUSH
11260: PPUSH
11261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11262: LD_ADDR_VAR 0 3
11266: PUSH
11267: LD_INT 81
11269: PUSH
11270: LD_OWVAR 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: ST_TO_ADDR
// if not tmp then
11298: LD_VAR 0 3
11302: NOT
11303: IFFALSE 11307
// exit ;
11305: GO 11454
// if tmp > 5 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 5
11314: GREATER
11315: IFFALSE 11327
// k := 5 else
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: LD_INT 5
11324: ST_TO_ADDR
11325: GO 11337
// k := tmp ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_VAR 0 3
11336: ST_TO_ADDR
// for i := 1 to k do
11337: LD_ADDR_VAR 0 1
11341: PUSH
11342: DOUBLE
11343: LD_INT 1
11345: DEC
11346: ST_TO_ADDR
11347: LD_VAR 0 2
11351: PUSH
11352: FOR_TO
11353: IFFALSE 11452
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_VAR 0 1
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_INT 4
11373: MOD
11374: PUSH
11375: LD_INT 1
11377: PLUS
11378: PPUSH
11379: CALL_OW 259
11383: PUSH
11384: LD_INT 10
11386: LESS
11387: IFFALSE 11450
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11389: LD_VAR 0 3
11393: PUSH
11394: LD_VAR 0 1
11398: ARRAY
11399: PPUSH
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 4
11407: MOD
11408: PUSH
11409: LD_INT 1
11411: PLUS
11412: PPUSH
11413: LD_VAR 0 3
11417: PUSH
11418: LD_VAR 0 1
11422: ARRAY
11423: PPUSH
11424: LD_VAR 0 1
11428: PUSH
11429: LD_INT 4
11431: MOD
11432: PUSH
11433: LD_INT 1
11435: PLUS
11436: PPUSH
11437: CALL_OW 259
11441: PUSH
11442: LD_INT 1
11444: PLUS
11445: PPUSH
11446: CALL_OW 237
11450: GO 11352
11452: POP
11453: POP
// end ;
11454: PPOPN 3
11456: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11457: LD_EXP 15
11461: PUSH
11462: LD_EXP 23
11466: AND
11467: IFFALSE 11487
11469: GO 11471
11471: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11472: LD_INT 4
11474: PPUSH
11475: LD_OWVAR 2
11479: PPUSH
11480: LD_INT 0
11482: PPUSH
11483: CALL_OW 324
11487: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11488: LD_EXP 15
11492: PUSH
11493: LD_EXP 52
11497: AND
11498: IFFALSE 11518
11500: GO 11502
11502: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11503: LD_INT 19
11505: PPUSH
11506: LD_OWVAR 2
11510: PPUSH
11511: LD_INT 0
11513: PPUSH
11514: CALL_OW 324
11518: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11519: LD_EXP 15
11523: PUSH
11524: LD_EXP 24
11528: AND
11529: IFFALSE 11631
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 11
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 30
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 2
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11631
// for i in tmp do
11602: LD_ADDR_VAR 0 1
11606: PUSH
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11629
// begin SetLives ( i , 0 ) ;
11615: LD_VAR 0 1
11619: PPUSH
11620: LD_INT 0
11622: PPUSH
11623: CALL_OW 234
// end ;
11627: GO 11612
11629: POP
11630: POP
// end ;
11631: PPOPN 2
11633: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11634: LD_EXP 15
11638: PUSH
11639: LD_EXP 25
11643: AND
11644: IFFALSE 11664
11646: GO 11648
11648: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11649: LD_INT 32
11651: PPUSH
11652: LD_OWVAR 2
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 324
11664: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11665: LD_EXP 15
11669: PUSH
11670: LD_EXP 26
11674: AND
11675: IFFALSE 11856
11677: GO 11679
11679: DISABLE
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
11684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_OWVAR 2
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 33
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 69
11720: ST_TO_ADDR
// if not tmp then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11856
// side := 0 ;
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// for i := 1 to 8 do
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: DOUBLE
11744: LD_INT 1
11746: DEC
11747: ST_TO_ADDR
11748: LD_INT 8
11750: PUSH
11751: FOR_TO
11752: IFFALSE 11800
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11754: LD_OWVAR 2
11758: PUSH
11759: LD_VAR 0 1
11763: NONEQUAL
11764: PUSH
11765: LD_OWVAR 2
11769: PPUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 81
11779: PUSH
11780: LD_INT 2
11782: EQUAL
11783: AND
11784: IFFALSE 11798
// begin side := i ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_VAR 0 1
11795: ST_TO_ADDR
// break ;
11796: GO 11800
// end ;
11798: GO 11751
11800: POP
11801: POP
// if not side then
11802: LD_VAR 0 3
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 11856
// for i := 1 to tmp do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_VAR 0 2
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11854
// if Prob ( 60 ) then
11829: LD_INT 60
11831: PPUSH
11832: CALL_OW 13
11836: IFFALSE 11852
// SetSide ( i , side ) ;
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: CALL_OW 235
11852: GO 11826
11854: POP
11855: POP
// end ;
11856: PPOPN 3
11858: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11859: LD_EXP 15
11863: PUSH
11864: LD_EXP 28
11868: AND
11869: IFFALSE 11988
11871: GO 11873
11873: DISABLE
11874: LD_INT 0
11876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_OWVAR 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 1
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 257
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: IN
11962: IFFALSE 11984
// SetClass ( un , rand ( 1 , 4 ) ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_INT 4
11974: PPUSH
11975: CALL_OW 12
11979: PPUSH
11980: CALL_OW 336
11984: GO 11931
11986: POP
11987: POP
// end ;
11988: PPOPN 1
11990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11991: LD_EXP 15
11995: PUSH
11996: LD_EXP 27
12000: AND
12001: IFFALSE 12080
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_OWVAR 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: ST_TO_ADDR
// if not tmp then
12045: LD_VAR 0 1
12049: NOT
12050: IFFALSE 12054
// exit ;
12052: GO 12080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12054: LD_VAR 0 1
12058: PUSH
12059: LD_INT 1
12061: PPUSH
12062: LD_VAR 0 1
12066: PPUSH
12067: CALL_OW 12
12071: ARRAY
12072: PPUSH
12073: LD_INT 100
12075: PPUSH
12076: CALL_OW 234
// end ;
12080: PPOPN 1
12082: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12083: LD_EXP 15
12087: PUSH
12088: LD_EXP 29
12092: AND
12093: IFFALSE 12191
12095: GO 12097
12097: DISABLE
12098: LD_INT 0
12100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12101: LD_ADDR_VAR 0 1
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_OWVAR 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: ST_TO_ADDR
// if not tmp then
12137: LD_VAR 0 1
12141: NOT
12142: IFFALSE 12146
// exit ;
12144: GO 12191
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12146: LD_VAR 0 1
12150: PUSH
12151: LD_INT 1
12153: PPUSH
12154: LD_VAR 0 1
12158: PPUSH
12159: CALL_OW 12
12163: ARRAY
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: LD_INT 4
12170: PPUSH
12171: CALL_OW 12
12175: PPUSH
12176: LD_INT 3000
12178: PPUSH
12179: LD_INT 9000
12181: PPUSH
12182: CALL_OW 12
12186: PPUSH
12187: CALL_OW 492
// end ;
12191: PPOPN 1
12193: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12194: LD_EXP 15
12198: PUSH
12199: LD_EXP 30
12203: AND
12204: IFFALSE 12224
12206: GO 12208
12208: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12209: LD_INT 1
12211: PPUSH
12212: LD_OWVAR 2
12216: PPUSH
12217: LD_INT 0
12219: PPUSH
12220: CALL_OW 324
12224: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12225: LD_EXP 15
12229: PUSH
12230: LD_EXP 31
12234: AND
12235: IFFALSE 12318
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12244: LD_ADDR_VAR 0 2
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_OWVAR 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 21
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if not tmp then
12280: LD_VAR 0 2
12284: NOT
12285: IFFALSE 12289
// exit ;
12287: GO 12318
// for i in tmp do
12289: LD_ADDR_VAR 0 1
12293: PUSH
12294: LD_VAR 0 2
12298: PUSH
12299: FOR_IN
12300: IFFALSE 12316
// SetBLevel ( i , 10 ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_INT 10
12309: PPUSH
12310: CALL_OW 241
12314: GO 12299
12316: POP
12317: POP
// end ;
12318: PPOPN 2
12320: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12321: LD_EXP 15
12325: PUSH
12326: LD_EXP 32
12330: AND
12331: IFFALSE 12442
12333: GO 12335
12335: DISABLE
12336: LD_INT 0
12338: PPUSH
12339: PPUSH
12340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 22
12348: PUSH
12349: LD_OWVAR 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 3
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12442
// un := tmp [ rand ( 1 , tmp ) ] ;
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: ST_TO_ADDR
// if Crawls ( un ) then
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 318
12419: IFFALSE 12430
// ComWalk ( un ) ;
12421: LD_VAR 0 2
12425: PPUSH
12426: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_INT 5
12437: PPUSH
12438: CALL_OW 336
// end ;
12442: PPOPN 3
12444: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12445: LD_EXP 15
12449: PUSH
12450: LD_EXP 33
12454: AND
12455: PUSH
12456: LD_OWVAR 67
12460: PUSH
12461: LD_INT 4
12463: LESS
12464: AND
12465: IFFALSE 12484
12467: GO 12469
12469: DISABLE
// begin Difficulty := Difficulty + 1 ;
12470: LD_ADDR_OWVAR 67
12474: PUSH
12475: LD_OWVAR 67
12479: PUSH
12480: LD_INT 1
12482: PLUS
12483: ST_TO_ADDR
// end ;
12484: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12485: LD_EXP 15
12489: PUSH
12490: LD_EXP 34
12494: AND
12495: IFFALSE 12598
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
// begin for i := 1 to 5 do
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: DOUBLE
12509: LD_INT 1
12511: DEC
12512: ST_TO_ADDR
12513: LD_INT 5
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12596
// begin uc_nation := nation_nature ;
12519: LD_ADDR_OWVAR 21
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// uc_side := 0 ;
12527: LD_ADDR_OWVAR 20
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12535: LD_ADDR_OWVAR 29
12539: PUSH
12540: LD_INT 12
12542: PUSH
12543: LD_INT 12
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: ST_TO_ADDR
// hc_agressivity := 20 ;
12550: LD_ADDR_OWVAR 35
12554: PUSH
12555: LD_INT 20
12557: ST_TO_ADDR
// hc_class := class_tiger ;
12558: LD_ADDR_OWVAR 28
12562: PUSH
12563: LD_INT 14
12565: ST_TO_ADDR
// hc_gallery :=  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name :=  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12582: CALL_OW 44
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 51
// end ;
12594: GO 12516
12596: POP
12597: POP
// end ;
12598: PPOPN 1
12600: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12601: LD_EXP 15
12605: PUSH
12606: LD_EXP 35
12610: AND
12611: IFFALSE 12620
12613: GO 12615
12615: DISABLE
// StreamSibBomb ;
12616: CALL 12621 0 0
12620: END
// export function StreamSibBomb ; var i , x , y ; begin
12621: LD_INT 0
12623: PPUSH
12624: PPUSH
12625: PPUSH
12626: PPUSH
// result := false ;
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// for i := 1 to 16 do
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 16
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12651: LD_ADDR_VAR 0 3
12655: PUSH
12656: LD_INT 10
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 40
12667: PUSH
12668: LD_INT 50
12670: PUSH
12671: LD_INT 60
12673: PUSH
12674: LD_INT 70
12676: PUSH
12677: LD_INT 80
12679: PUSH
12680: LD_INT 90
12682: PUSH
12683: LD_INT 100
12685: PUSH
12686: LD_INT 110
12688: PUSH
12689: LD_INT 120
12691: PUSH
12692: LD_INT 130
12694: PUSH
12695: LD_INT 140
12697: PUSH
12698: LD_INT 150
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_INT 15
12723: PPUSH
12724: CALL_OW 12
12728: ARRAY
12729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12730: LD_ADDR_VAR 0 4
12734: PUSH
12735: LD_INT 10
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 30
12743: PUSH
12744: LD_INT 40
12746: PUSH
12747: LD_INT 50
12749: PUSH
12750: LD_INT 60
12752: PUSH
12753: LD_INT 70
12755: PUSH
12756: LD_INT 80
12758: PUSH
12759: LD_INT 90
12761: PUSH
12762: LD_INT 100
12764: PUSH
12765: LD_INT 110
12767: PUSH
12768: LD_INT 120
12770: PUSH
12771: LD_INT 130
12773: PUSH
12774: LD_INT 140
12776: PUSH
12777: LD_INT 150
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_INT 15
12802: PPUSH
12803: CALL_OW 12
12807: ARRAY
12808: ST_TO_ADDR
// if ValidHex ( x , y ) then
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_VAR 0 4
12818: PPUSH
12819: CALL_OW 488
12823: IFFALSE 12846
// begin result := [ x , y ] ;
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_VAR 0 3
12834: PUSH
12835: LD_VAR 0 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
// break ;
12844: GO 12848
// end ; end ;
12846: GO 12648
12848: POP
12849: POP
// if result then
12850: LD_VAR 0 1
12854: IFFALSE 12914
// begin ToLua ( playSibBomb() ) ;
12856: LD_STRING playSibBomb()
12858: PPUSH
12859: CALL_OW 559
// wait ( 0 0$14 ) ;
12863: LD_INT 490
12865: PPUSH
12866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 2
12908: ARRAY
12909: PPUSH
12910: CALL_OW 429
// end ; end ;
12914: LD_VAR 0 1
12918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12919: LD_EXP 15
12923: PUSH
12924: LD_EXP 37
12928: AND
12929: IFFALSE 12941
12931: GO 12933
12933: DISABLE
// YouLost (  ) ;
12934: LD_STRING 
12936: PPUSH
12937: CALL_OW 104
12941: END
// every 0 0$1 trigger StreamModeActive and sFog do
12942: LD_EXP 15
12946: PUSH
12947: LD_EXP 36
12951: AND
12952: IFFALSE 12966
12954: GO 12956
12956: DISABLE
// FogOff ( your_side ) ;
12957: LD_OWVAR 2
12961: PPUSH
12962: CALL_OW 344
12966: END
// every 0 0$1 trigger StreamModeActive and sSun do
12967: LD_EXP 15
12971: PUSH
12972: LD_EXP 38
12976: AND
12977: IFFALSE 13005
12979: GO 12981
12981: DISABLE
// begin solar_recharge_percent := 0 ;
12982: LD_ADDR_OWVAR 79
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12990: LD_INT 10500
12992: PPUSH
12993: CALL_OW 67
// solar_recharge_percent := 100 ;
12997: LD_ADDR_OWVAR 79
13001: PUSH
13002: LD_INT 100
13004: ST_TO_ADDR
// end ;
13005: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13006: LD_EXP 15
13010: PUSH
13011: LD_EXP 39
13015: AND
13016: IFFALSE 13255
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin tmp := [ ] ;
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: EMPTY
13032: ST_TO_ADDR
// for i := 1 to 6 do
13033: LD_ADDR_VAR 0 1
13037: PUSH
13038: DOUBLE
13039: LD_INT 1
13041: DEC
13042: ST_TO_ADDR
13043: LD_INT 6
13045: PUSH
13046: FOR_TO
13047: IFFALSE 13152
// begin uc_nation := nation_nature ;
13049: LD_ADDR_OWVAR 21
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// uc_side := 0 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13065: LD_ADDR_OWVAR 29
13069: PUSH
13070: LD_INT 12
13072: PUSH
13073: LD_INT 12
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: ST_TO_ADDR
// hc_agressivity := 20 ;
13080: LD_ADDR_OWVAR 35
13084: PUSH
13085: LD_INT 20
13087: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13088: LD_ADDR_OWVAR 28
13092: PUSH
13093: LD_INT 17
13095: ST_TO_ADDR
// hc_gallery :=  ;
13096: LD_ADDR_OWVAR 33
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_name :=  ;
13104: LD_ADDR_OWVAR 26
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// un := CreateHuman ;
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: CALL_OW 44
13121: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 51
// tmp := tmp ^ un ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_VAR 0 3
13143: PUSH
13144: LD_VAR 0 2
13148: ADD
13149: ST_TO_ADDR
// end ;
13150: GO 13046
13152: POP
13153: POP
// repeat wait ( 0 0$1 ) ;
13154: LD_INT 35
13156: PPUSH
13157: CALL_OW 67
// for un in tmp do
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_VAR 0 3
13170: PUSH
13171: FOR_IN
13172: IFFALSE 13246
// begin if IsDead ( un ) then
13174: LD_VAR 0 2
13178: PPUSH
13179: CALL_OW 301
13183: IFFALSE 13203
// begin tmp := tmp diff un ;
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_VAR 0 3
13194: PUSH
13195: LD_VAR 0 2
13199: DIFF
13200: ST_TO_ADDR
// continue ;
13201: GO 13171
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_INT 3
13210: PUSH
13211: LD_INT 22
13213: PUSH
13214: LD_INT 0
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: CALL_OW 74
13239: PPUSH
13240: CALL_OW 115
// end ;
13244: GO 13171
13246: POP
13247: POP
// until not tmp ;
13248: LD_VAR 0 3
13252: NOT
13253: IFFALSE 13154
// end ;
13255: PPOPN 3
13257: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13258: LD_EXP 15
13262: PUSH
13263: LD_EXP 40
13267: AND
13268: IFFALSE 13322
13270: GO 13272
13272: DISABLE
// begin ToLua ( displayTroll(); ) ;
13273: LD_STRING displayTroll();
13275: PPUSH
13276: CALL_OW 559
// wait ( 3 3$00 ) ;
13280: LD_INT 6300
13282: PPUSH
13283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13287: LD_STRING hideTroll();
13289: PPUSH
13290: CALL_OW 559
// wait ( 1 1$00 ) ;
13294: LD_INT 2100
13296: PPUSH
13297: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13301: LD_STRING displayTroll();
13303: PPUSH
13304: CALL_OW 559
// wait ( 1 1$00 ) ;
13308: LD_INT 2100
13310: PPUSH
13311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13315: LD_STRING hideTroll();
13317: PPUSH
13318: CALL_OW 559
// end ;
13322: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13323: LD_EXP 15
13327: PUSH
13328: LD_EXP 41
13332: AND
13333: IFFALSE 13396
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
// begin p := 0 ;
13341: LD_ADDR_VAR 0 1
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// repeat game_speed := 1 ;
13349: LD_ADDR_OWVAR 65
13353: PUSH
13354: LD_INT 1
13356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13357: LD_INT 35
13359: PPUSH
13360: CALL_OW 67
// p := p + 1 ;
13364: LD_ADDR_VAR 0 1
13368: PUSH
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 1
13376: PLUS
13377: ST_TO_ADDR
// until p >= 60 ;
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 60
13385: GREATEREQUAL
13386: IFFALSE 13349
// game_speed := 4 ;
13388: LD_ADDR_OWVAR 65
13392: PUSH
13393: LD_INT 4
13395: ST_TO_ADDR
// end ;
13396: PPOPN 1
13398: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13399: LD_EXP 15
13403: PUSH
13404: LD_EXP 42
13408: AND
13409: IFFALSE 13555
13411: GO 13413
13413: DISABLE
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_OWVAR 2
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: LD_INT 30
13440: PUSH
13441: LD_INT 0
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: ST_TO_ADDR
// if not depot then
13472: LD_VAR 0 1
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_VAR 0 1
13490: PUSH
13491: LD_INT 1
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 12
13503: ARRAY
13504: PPUSH
13505: CALL_OW 274
13509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_INT 3
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 277
// end ;
13555: PPOPN 2
13557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13558: LD_EXP 15
13562: PUSH
13563: LD_EXP 43
13567: AND
13568: IFFALSE 13665
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_OWVAR 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 23
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: ST_TO_ADDR
// if not tmp then
13630: LD_VAR 0 1
13634: NOT
13635: IFFALSE 13639
// exit ;
13637: GO 13665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 1
13646: PPUSH
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 12
13656: ARRAY
13657: PPUSH
13658: LD_INT 200
13660: PPUSH
13661: CALL_OW 234
// end ;
13665: PPOPN 1
13667: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13668: LD_EXP 15
13672: PUSH
13673: LD_EXP 44
13677: AND
13678: IFFALSE 13757
13680: GO 13682
13682: DISABLE
13683: LD_INT 0
13685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_OWVAR 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if not tmp then
13722: LD_VAR 0 1
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 13757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13731: LD_VAR 0 1
13735: PUSH
13736: LD_INT 1
13738: PPUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: PPUSH
13750: LD_INT 60
13752: PPUSH
13753: CALL_OW 234
// end ;
13757: PPOPN 1
13759: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13760: LD_EXP 15
13764: PUSH
13765: LD_EXP 45
13769: AND
13770: IFFALSE 13869
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
// begin enable ;
13779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13780: LD_ADDR_VAR 0 1
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_OWVAR 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 61
13799: PUSH
13800: EMPTY
13801: LIST
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 1
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13869
// for i in tmp do
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13867
// if IsControledBy ( i ) then
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 312
13854: IFFALSE 13865
// ComUnlink ( i ) ;
13856: LD_VAR 0 2
13860: PPUSH
13861: CALL_OW 136
13865: GO 13842
13867: POP
13868: POP
// end ;
13869: PPOPN 2
13871: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13872: LD_EXP 15
13876: PUSH
13877: LD_EXP 46
13881: AND
13882: IFFALSE 14022
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
// begin ToLua ( displayPowell(); ) ;
13891: LD_STRING displayPowell();
13893: PPUSH
13894: CALL_OW 559
// uc_side := 0 ;
13898: LD_ADDR_OWVAR 20
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// uc_nation := 2 ;
13906: LD_ADDR_OWVAR 21
13910: PUSH
13911: LD_INT 2
13913: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13914: LD_ADDR_OWVAR 37
13918: PUSH
13919: LD_INT 14
13921: ST_TO_ADDR
// vc_engine := engine_siberite ;
13922: LD_ADDR_OWVAR 39
13926: PUSH
13927: LD_INT 3
13929: ST_TO_ADDR
// vc_control := control_apeman ;
13930: LD_ADDR_OWVAR 38
13934: PUSH
13935: LD_INT 5
13937: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13938: LD_ADDR_OWVAR 40
13942: PUSH
13943: LD_INT 29
13945: ST_TO_ADDR
// un := CreateVehicle ;
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: CALL_OW 45
13955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13956: LD_VAR 0 2
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13975: LD_VAR 0 2
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 69
13996: PPUSH
13997: LD_VAR 0 2
14001: PPUSH
14002: CALL_OW 74
14006: PPUSH
14007: CALL_OW 115
// until IsDead ( un ) ;
14011: LD_VAR 0 2
14015: PPUSH
14016: CALL_OW 301
14020: IFFALSE 13968
// end ;
14022: PPOPN 2
14024: END
// every 0 0$1 trigger StreamModeActive and sStu do
14025: LD_EXP 15
14029: PUSH
14030: LD_EXP 54
14034: AND
14035: IFFALSE 14051
14037: GO 14039
14039: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14040: LD_STRING displayStucuk();
14042: PPUSH
14043: CALL_OW 559
// ResetFog ;
14047: CALL_OW 335
// end ;
14051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14052: LD_EXP 15
14056: PUSH
14057: LD_EXP 47
14061: AND
14062: IFFALSE 14203
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
14070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_OWVAR 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not tmp then
14107: LD_VAR 0 2
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14203
// un := tmp [ rand ( 1 , tmp ) ] ;
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_VAR 0 2
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_OWVAR 3
14161: PUSH
14162: LD_VAR 0 1
14166: DIFF
14167: PPUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// wait ( 0 0$20 ) ;
14182: LD_INT 700
14184: PPUSH
14185: CALL_OW 67
// SetSide ( un , your_side ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_OWVAR 2
14198: PPUSH
14199: CALL_OW 235
// end ;
14203: PPOPN 2
14205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14206: LD_EXP 15
14210: PUSH
14211: LD_EXP 48
14215: AND
14216: IFFALSE 14322
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14224: LD_ADDR_VAR 0 1
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 0
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not depot then
14278: LD_VAR 0 1
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14287: LD_VAR 0 1
14291: PUSH
14292: LD_INT 1
14294: ARRAY
14295: PPUSH
14296: CALL_OW 250
14300: PPUSH
14301: LD_VAR 0 1
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: CALL_OW 251
14314: PPUSH
14315: LD_INT 70
14317: PPUSH
14318: CALL_OW 495
// end ;
14322: PPOPN 1
14324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14325: LD_EXP 15
14329: PUSH
14330: LD_EXP 49
14334: AND
14335: IFFALSE 14546
14337: GO 14339
14339: DISABLE
14340: LD_INT 0
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 5
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 5
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14546
// for i in tmp do
14392: LD_ADDR_VAR 0 1
14396: PUSH
14397: LD_VAR 0 5
14401: PUSH
14402: FOR_IN
14403: IFFALSE 14544
// begin d := rand ( 0 , 5 ) ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: LD_INT 0
14412: PPUSH
14413: LD_INT 5
14415: PPUSH
14416: CALL_OW 12
14420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 250
14435: PPUSH
14436: LD_VAR 0 4
14440: PPUSH
14441: LD_INT 3
14443: PPUSH
14444: LD_INT 12
14446: PPUSH
14447: CALL_OW 12
14451: PPUSH
14452: CALL_OW 272
14456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 251
14471: PPUSH
14472: LD_VAR 0 4
14476: PPUSH
14477: LD_INT 3
14479: PPUSH
14480: LD_INT 12
14482: PPUSH
14483: CALL_OW 12
14487: PPUSH
14488: CALL_OW 273
14492: ST_TO_ADDR
// if ValidHex ( x , y ) then
14493: LD_VAR 0 2
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: CALL_OW 488
14507: IFFALSE 14542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_VAR 0 2
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: LD_INT 3
14526: PPUSH
14527: LD_INT 6
14529: PPUSH
14530: CALL_OW 12
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 483
// end ;
14542: GO 14402
14544: POP
14545: POP
// end ;
14546: PPOPN 5
14548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14549: LD_EXP 15
14553: PUSH
14554: LD_EXP 50
14558: AND
14559: IFFALSE 14653
14561: GO 14563
14563: DISABLE
14564: LD_INT 0
14566: PPUSH
14567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: LD_INT 22
14575: PUSH
14576: LD_OWVAR 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 32
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 69
14614: ST_TO_ADDR
// if not tmp then
14615: LD_VAR 0 2
14619: NOT
14620: IFFALSE 14624
// exit ;
14622: GO 14653
// for i in tmp do
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: LD_VAR 0 2
14633: PUSH
14634: FOR_IN
14635: IFFALSE 14651
// SetFuel ( i , 0 ) ;
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_INT 0
14644: PPUSH
14645: CALL_OW 240
14649: GO 14634
14651: POP
14652: POP
// end ;
14653: PPOPN 2
14655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14656: LD_EXP 15
14660: PUSH
14661: LD_EXP 51
14665: AND
14666: IFFALSE 14732
14668: GO 14670
14670: DISABLE
14671: LD_INT 0
14673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14674: LD_ADDR_VAR 0 1
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_OWVAR 2
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 29
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: ST_TO_ADDR
// if not tmp then
14710: LD_VAR 0 1
14714: NOT
14715: IFFALSE 14719
// exit ;
14717: GO 14732
// DestroyUnit ( tmp [ 1 ] ) ;
14719: LD_VAR 0 1
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: CALL_OW 65
// end ;
14732: PPOPN 1
14734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14735: LD_EXP 15
14739: PUSH
14740: LD_EXP 53
14744: AND
14745: IFFALSE 14874
14747: GO 14749
14749: DISABLE
14750: LD_INT 0
14752: PPUSH
// begin uc_side := 0 ;
14753: LD_ADDR_OWVAR 20
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
// uc_nation := nation_arabian ;
14761: LD_ADDR_OWVAR 21
14765: PUSH
14766: LD_INT 2
14768: ST_TO_ADDR
// hc_gallery :=  ;
14769: LD_ADDR_OWVAR 33
14773: PUSH
14774: LD_STRING 
14776: ST_TO_ADDR
// hc_name :=  ;
14777: LD_ADDR_OWVAR 26
14781: PUSH
14782: LD_STRING 
14784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14785: LD_INT 1
14787: PPUSH
14788: LD_INT 11
14790: PPUSH
14791: LD_INT 10
14793: PPUSH
14794: CALL_OW 380
// un := CreateHuman ;
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: CALL_OW 44
14807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: PPUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 74
14858: PPUSH
14859: CALL_OW 115
// until IsDead ( un ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 301
14872: IFFALSE 14820
// end ;
14874: PPOPN 1
14876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14877: LD_EXP 15
14881: PUSH
14882: LD_EXP 55
14886: AND
14887: IFFALSE 14899
14889: GO 14891
14891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14892: LD_STRING earthquake(getX(game), 0, 32)
14894: PPUSH
14895: CALL_OW 559
14899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14900: LD_EXP 15
14904: PUSH
14905: LD_EXP 56
14909: AND
14910: IFFALSE 15001
14912: GO 14914
14914: DISABLE
14915: LD_INT 0
14917: PPUSH
// begin enable ;
14918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_OWVAR 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 33
14948: PUSH
14949: LD_INT 3
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// if not tmp then
14966: LD_VAR 0 1
14970: NOT
14971: IFFALSE 14975
// exit ;
14973: GO 15001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14975: LD_VAR 0 1
14979: PUSH
14980: LD_INT 1
14982: PPUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 12
14992: ARRAY
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 234
// end ;
15001: PPOPN 1
15003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15004: LD_EXP 15
15008: PUSH
15009: LD_EXP 57
15013: AND
15014: IFFALSE 15155
15016: GO 15018
15018: DISABLE
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 25
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: ST_TO_ADDR
// if not tmp then
15060: LD_VAR 0 3
15064: NOT
15065: IFFALSE 15069
// exit ;
15067: GO 15155
// un := tmp [ rand ( 1 , tmp ) ] ;
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: ST_TO_ADDR
// if Crawls ( un ) then
15093: LD_VAR 0 2
15097: PPUSH
15098: CALL_OW 318
15102: IFFALSE 15113
// ComWalk ( un ) ;
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_INT 9
15120: PPUSH
15121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15125: LD_INT 28
15127: PPUSH
15128: LD_OWVAR 2
15132: PPUSH
15133: LD_INT 2
15135: PPUSH
15136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15140: LD_INT 29
15142: PPUSH
15143: LD_OWVAR 2
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 322
// end ;
15155: PPOPN 3
15157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15158: LD_EXP 15
15162: PUSH
15163: LD_EXP 58
15167: AND
15168: IFFALSE 15279
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15279
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 8
15274: PPUSH
15275: CALL_OW 336
// end ;
15279: PPOPN 3
15281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15282: LD_EXP 15
15286: PUSH
15287: LD_EXP 59
15291: AND
15292: IFFALSE 15436
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: LD_INT 22
15308: PUSH
15309: LD_OWVAR 2
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 21
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 2
15330: PUSH
15331: LD_INT 34
15333: PUSH
15334: LD_INT 12
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 34
15343: PUSH
15344: LD_INT 51
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 34
15353: PUSH
15354: LD_INT 32
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: ST_TO_ADDR
// if not tmp then
15377: LD_VAR 0 2
15381: NOT
15382: IFFALSE 15386
// exit ;
15384: GO 15436
// for i in tmp do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15434
// if GetCargo ( i , mat_artifact ) = 0 then
15399: LD_VAR 0 1
15403: PPUSH
15404: LD_INT 4
15406: PPUSH
15407: CALL_OW 289
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: IFFALSE 15432
// SetCargo ( i , mat_siberit , 100 ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 3
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL_OW 290
15432: GO 15396
15434: POP
15435: POP
// end ;
15436: PPOPN 2
15438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15439: LD_EXP 15
15443: PUSH
15444: LD_EXP 60
15448: AND
15449: IFFALSE 15632
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 69
15479: ST_TO_ADDR
// if not tmp then
15480: LD_VAR 0 2
15484: NOT
15485: IFFALSE 15489
// exit ;
15487: GO 15632
// for i := 1 to 2 do
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 2
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15630
// begin uc_side := your_side ;
15505: LD_ADDR_OWVAR 20
15509: PUSH
15510: LD_OWVAR 2
15514: ST_TO_ADDR
// uc_nation := nation_american ;
15515: LD_ADDR_OWVAR 21
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// vc_chassis := us_morphling ;
15523: LD_ADDR_OWVAR 37
15527: PUSH
15528: LD_INT 5
15530: ST_TO_ADDR
// vc_engine := engine_siberite ;
15531: LD_ADDR_OWVAR 39
15535: PUSH
15536: LD_INT 3
15538: ST_TO_ADDR
// vc_control := control_computer ;
15539: LD_ADDR_OWVAR 38
15543: PUSH
15544: LD_INT 3
15546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15547: LD_ADDR_OWVAR 40
15551: PUSH
15552: LD_INT 10
15554: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15555: LD_VAR 0 2
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: PPUSH
15564: CALL_OW 310
15568: NOT
15569: IFFALSE 15616
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15571: CALL_OW 45
15575: PPUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 250
15589: PPUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: CALL_OW 251
15603: PPUSH
15604: LD_INT 12
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 50
15614: GO 15628
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15616: CALL_OW 45
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: CALL_OW 51
// end ;
15628: GO 15502
15630: POP
15631: POP
// end ;
15632: PPOPN 2
15634: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15635: LD_EXP 15
15639: PUSH
15640: LD_EXP 61
15644: AND
15645: IFFALSE 15867
15647: GO 15649
15649: DISABLE
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15658: LD_ADDR_VAR 0 6
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_OWVAR 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 23
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 6
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15867
// s1 := rand ( 1 , 4 ) ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_INT 1
15728: PPUSH
15729: LD_INT 4
15731: PPUSH
15732: CALL_OW 12
15736: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15737: LD_ADDR_VAR 0 4
15741: PUSH
15742: LD_VAR 0 6
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: CALL_OW 259
15760: ST_TO_ADDR
// if s1 = 1 then
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: IFFALSE 15789
// s2 := rand ( 2 , 4 ) else
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: ST_TO_ADDR
15787: GO 15797
// s2 := 1 ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15797: LD_ADDR_VAR 0 5
15801: PUSH
15802: LD_VAR 0 6
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: PPUSH
15811: LD_VAR 0 3
15815: PPUSH
15816: CALL_OW 259
15820: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15821: LD_VAR 0 6
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PPUSH
15830: LD_VAR 0 2
15834: PPUSH
15835: LD_VAR 0 5
15839: PPUSH
15840: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15844: LD_VAR 0 6
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_VAR 0 4
15862: PPUSH
15863: CALL_OW 237
// end ;
15867: PPOPN 6
15869: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15870: LD_EXP 15
15874: PUSH
15875: LD_EXP 62
15879: AND
15880: IFFALSE 15959
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_OWVAR 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 1
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15933: LD_VAR 0 1
15937: PUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 12
15950: ARRAY
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 234
// end ;
15959: PPOPN 1
15961: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15962: LD_EXP 15
15966: PUSH
15967: LD_EXP 63
15971: AND
15972: IFFALSE 16084
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
15980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15981: LD_ADDR_VAR 0 2
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 27
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 26
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if not tmp then
16046: LD_VAR 0 2
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16084
// for i in tmp do
16055: LD_ADDR_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16082
// SetLives ( i , 1 ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 234
16080: GO 16065
16082: POP
16083: POP
// end ;
16084: PPOPN 2
16086: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16087: LD_EXP 15
16091: PUSH
16092: LD_EXP 64
16096: AND
16097: IFFALSE 16384
16099: GO 16101
16101: DISABLE
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
16106: PPUSH
// begin i := rand ( 1 , 7 ) ;
16107: LD_ADDR_VAR 0 1
16111: PUSH
16112: LD_INT 1
16114: PPUSH
16115: LD_INT 7
16117: PPUSH
16118: CALL_OW 12
16122: ST_TO_ADDR
// case i of 1 :
16123: LD_VAR 0 1
16127: PUSH
16128: LD_INT 1
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16146
16136: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16137: LD_STRING earthquake(getX(game), 0, 32)
16139: PPUSH
16140: CALL_OW 559
16144: GO 16384
16146: LD_INT 2
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16168
16154: POP
// begin ToLua ( displayStucuk(); ) ;
16155: LD_STRING displayStucuk();
16157: PPUSH
16158: CALL_OW 559
// ResetFog ;
16162: CALL_OW 335
// end ; 3 :
16166: GO 16384
16168: LD_INT 3
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16280
16176: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 25
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 2
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16384
// un := tmp [ rand ( 1 , tmp ) ] ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: CALL_OW 12
16244: ARRAY
16245: ST_TO_ADDR
// if Crawls ( un ) then
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 318
16255: IFFALSE 16266
// ComWalk ( un ) ;
16257: LD_VAR 0 3
16261: PPUSH
16262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 8
16273: PPUSH
16274: CALL_OW 336
// end ; 4 :
16278: GO 16384
16280: LD_INT 4
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16362
16288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_INT 22
16296: PUSH
16297: LD_OWVAR 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 30
16308: PUSH
16309: LD_INT 29
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 69
16324: ST_TO_ADDR
// if not tmp then
16325: LD_VAR 0 2
16329: NOT
16330: IFFALSE 16334
// exit ;
16332: GO 16384
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16334: LD_VAR 0 2
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16347: LD_VAR 0 2
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 65
// end ; 5 .. 7 :
16360: GO 16384
16362: LD_INT 5
16364: DOUBLE
16365: GREATEREQUAL
16366: IFFALSE 16374
16368: LD_INT 7
16370: DOUBLE
16371: LESSEQUAL
16372: IFTRUE 16376
16374: GO 16383
16376: POP
// StreamSibBomb ; end ;
16377: CALL 12621 0 0
16381: GO 16384
16383: POP
// end ;
16384: PPOPN 3
16386: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16387: LD_EXP 15
16391: PUSH
16392: LD_EXP 65
16396: AND
16397: IFFALSE 16553
16399: GO 16401
16401: DISABLE
16402: LD_INT 0
16404: PPUSH
16405: PPUSH
16406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: LD_INT 81
16414: PUSH
16415: LD_OWVAR 2
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 2
16426: PUSH
16427: LD_INT 21
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 21
16439: PUSH
16440: LD_INT 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: ST_TO_ADDR
// if not tmp then
16461: LD_VAR 0 2
16465: NOT
16466: IFFALSE 16470
// exit ;
16468: GO 16553
// p := 0 ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16478: LD_INT 35
16480: PPUSH
16481: CALL_OW 67
// p := p + 1 ;
16485: LD_ADDR_VAR 0 3
16489: PUSH
16490: LD_VAR 0 3
16494: PUSH
16495: LD_INT 1
16497: PLUS
16498: ST_TO_ADDR
// for i in tmp do
16499: LD_ADDR_VAR 0 1
16503: PUSH
16504: LD_VAR 0 2
16508: PUSH
16509: FOR_IN
16510: IFFALSE 16541
// if GetLives ( i ) < 1000 then
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 256
16521: PUSH
16522: LD_INT 1000
16524: LESS
16525: IFFALSE 16539
// SetLives ( i , 1000 ) ;
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_INT 1000
16534: PPUSH
16535: CALL_OW 234
16539: GO 16509
16541: POP
16542: POP
// until p > 20 ;
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 20
16550: GREATER
16551: IFFALSE 16478
// end ;
16553: PPOPN 3
16555: END
// every 0 0$1 trigger StreamModeActive and sTime do
16556: LD_EXP 15
16560: PUSH
16561: LD_EXP 66
16565: AND
16566: IFFALSE 16601
16568: GO 16570
16570: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16571: LD_INT 28
16573: PPUSH
16574: LD_OWVAR 2
16578: PPUSH
16579: LD_INT 2
16581: PPUSH
16582: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16586: LD_INT 30
16588: PPUSH
16589: LD_OWVAR 2
16593: PPUSH
16594: LD_INT 2
16596: PPUSH
16597: CALL_OW 322
// end ;
16601: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16602: LD_EXP 15
16606: PUSH
16607: LD_EXP 67
16611: AND
16612: IFFALSE 16733
16614: GO 16616
16616: DISABLE
16617: LD_INT 0
16619: PPUSH
16620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: LD_OWVAR 2
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 21
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 3
16650: PUSH
16651: LD_INT 23
16653: PUSH
16654: LD_INT 0
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 69
16674: ST_TO_ADDR
// if not tmp then
16675: LD_VAR 0 2
16679: NOT
16680: IFFALSE 16684
// exit ;
16682: GO 16733
// for i in tmp do
16684: LD_ADDR_VAR 0 1
16688: PUSH
16689: LD_VAR 0 2
16693: PUSH
16694: FOR_IN
16695: IFFALSE 16731
// begin if Crawls ( i ) then
16697: LD_VAR 0 1
16701: PPUSH
16702: CALL_OW 318
16706: IFFALSE 16717
// ComWalk ( i ) ;
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 138
// SetClass ( i , 2 ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_INT 2
16724: PPUSH
16725: CALL_OW 336
// end ;
16729: GO 16694
16731: POP
16732: POP
// end ;
16733: PPOPN 2
16735: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16736: LD_EXP 15
16740: PUSH
16741: LD_EXP 68
16745: AND
16746: IFFALSE 17034
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
16755: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16756: LD_OWVAR 2
16760: PPUSH
16761: LD_INT 9
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16774: LD_INT 9
16776: PPUSH
16777: LD_OWVAR 2
16781: PPUSH
16782: CALL_OW 343
// uc_side := 9 ;
16786: LD_ADDR_OWVAR 20
16790: PUSH
16791: LD_INT 9
16793: ST_TO_ADDR
// uc_nation := 2 ;
16794: LD_ADDR_OWVAR 21
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// hc_name := Dark Warrior ;
16802: LD_ADDR_OWVAR 26
16806: PUSH
16807: LD_STRING Dark Warrior
16809: ST_TO_ADDR
// hc_gallery :=  ;
16810: LD_ADDR_OWVAR 33
16814: PUSH
16815: LD_STRING 
16817: ST_TO_ADDR
// hc_noskilllimit := true ;
16818: LD_ADDR_OWVAR 76
16822: PUSH
16823: LD_INT 1
16825: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16826: LD_ADDR_OWVAR 31
16830: PUSH
16831: LD_INT 30
16833: PUSH
16834: LD_INT 30
16836: PUSH
16837: LD_INT 30
16839: PUSH
16840: LD_INT 30
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: ST_TO_ADDR
// un := CreateHuman ;
16849: LD_ADDR_VAR 0 3
16853: PUSH
16854: CALL_OW 44
16858: ST_TO_ADDR
// hc_noskilllimit := false ;
16859: LD_ADDR_OWVAR 76
16863: PUSH
16864: LD_INT 0
16866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 51
// ToLua ( playRanger() ) ;
16879: LD_STRING playRanger()
16881: PPUSH
16882: CALL_OW 559
// p := 0 ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16894: LD_INT 35
16896: PPUSH
16897: CALL_OW 67
// p := p + 1 ;
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_VAR 0 2
16910: PUSH
16911: LD_INT 1
16913: PLUS
16914: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16915: LD_VAR 0 3
16919: PPUSH
16920: CALL_OW 256
16924: PUSH
16925: LD_INT 1000
16927: LESS
16928: IFFALSE 16942
// SetLives ( un , 1000 ) ;
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1000
16937: PPUSH
16938: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 81
16949: PUSH
16950: LD_OWVAR 2
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 91
16961: PUSH
16962: LD_VAR 0 3
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: CALL_OW 74
16993: PPUSH
16994: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16998: LD_VAR 0 2
17002: PUSH
17003: LD_INT 80
17005: GREATER
17006: PUSH
17007: LD_VAR 0 3
17011: PPUSH
17012: CALL_OW 301
17016: OR
17017: IFFALSE 16894
// if un then
17019: LD_VAR 0 3
17023: IFFALSE 17034
// RemoveUnit ( un ) ;
17025: LD_VAR 0 3
17029: PPUSH
17030: CALL_OW 64
// end ;
17034: PPOPN 3
17036: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17037: LD_EXP 69
17041: IFFALSE 17157
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_INT 81
17058: PUSH
17059: LD_OWVAR 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17087: LD_STRING playComputer()
17089: PPUSH
17090: CALL_OW 559
// if not tmp then
17094: LD_VAR 0 2
17098: NOT
17099: IFFALSE 17103
// exit ;
17101: GO 17157
// for i in tmp do
17103: LD_ADDR_VAR 0 1
17107: PUSH
17108: LD_VAR 0 2
17112: PUSH
17113: FOR_IN
17114: IFFALSE 17155
// for j := 1 to 4 do
17116: LD_ADDR_VAR 0 3
17120: PUSH
17121: DOUBLE
17122: LD_INT 1
17124: DEC
17125: ST_TO_ADDR
17126: LD_INT 4
17128: PUSH
17129: FOR_TO
17130: IFFALSE 17151
// SetSkill ( i , j , 10 ) ;
17132: LD_VAR 0 1
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 10
17144: PPUSH
17145: CALL_OW 237
17149: GO 17129
17151: POP
17152: POP
17153: GO 17113
17155: POP
17156: POP
// end ;
17157: PPOPN 3
17159: END
// every 0 0$1 trigger s30 do var i , tmp ;
17160: LD_EXP 70
17164: IFFALSE 17233
17166: GO 17168
17168: DISABLE
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_INT 22
17180: PUSH
17181: LD_OWVAR 2
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// if not tmp then
17195: LD_VAR 0 2
17199: NOT
17200: IFFALSE 17204
// exit ;
17202: GO 17233
// for i in tmp do
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_VAR 0 2
17213: PUSH
17214: FOR_IN
17215: IFFALSE 17231
// SetLives ( i , 300 ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_INT 300
17224: PPUSH
17225: CALL_OW 234
17229: GO 17214
17231: POP
17232: POP
// end ;
17233: PPOPN 2
17235: END
// every 0 0$1 trigger s60 do var i , tmp ;
17236: LD_EXP 71
17240: IFFALSE 17309
17242: GO 17244
17244: DISABLE
17245: LD_INT 0
17247: PPUSH
17248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17249: LD_ADDR_VAR 0 2
17253: PUSH
17254: LD_INT 22
17256: PUSH
17257: LD_OWVAR 2
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 2
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17309
// for i in tmp do
17280: LD_ADDR_VAR 0 1
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: FOR_IN
17291: IFFALSE 17307
// SetLives ( i , 600 ) ;
17293: LD_VAR 0 1
17297: PPUSH
17298: LD_INT 600
17300: PPUSH
17301: CALL_OW 234
17305: GO 17290
17307: POP
17308: POP
// end ;
17309: PPOPN 2
17311: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17312: LD_INT 0
17314: PPUSH
// case cmd of 301 :
17315: LD_VAR 0 1
17319: PUSH
17320: LD_INT 301
17322: DOUBLE
17323: EQUAL
17324: IFTRUE 17328
17326: GO 17360
17328: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17329: LD_VAR 0 6
17333: PPUSH
17334: LD_VAR 0 7
17338: PPUSH
17339: LD_VAR 0 8
17343: PPUSH
17344: LD_VAR 0 4
17348: PPUSH
17349: LD_VAR 0 5
17353: PPUSH
17354: CALL 18561 0 5
17358: GO 17481
17360: LD_INT 302
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17405
17368: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17369: LD_VAR 0 6
17373: PPUSH
17374: LD_VAR 0 7
17378: PPUSH
17379: LD_VAR 0 8
17383: PPUSH
17384: LD_VAR 0 9
17388: PPUSH
17389: LD_VAR 0 4
17393: PPUSH
17394: LD_VAR 0 5
17398: PPUSH
17399: CALL 18652 0 6
17403: GO 17481
17405: LD_INT 303
17407: DOUBLE
17408: EQUAL
17409: IFTRUE 17413
17411: GO 17450
17413: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17414: LD_VAR 0 6
17418: PPUSH
17419: LD_VAR 0 7
17423: PPUSH
17424: LD_VAR 0 8
17428: PPUSH
17429: LD_VAR 0 9
17433: PPUSH
17434: LD_VAR 0 4
17438: PPUSH
17439: LD_VAR 0 5
17443: PPUSH
17444: CALL 17486 0 6
17448: GO 17481
17450: LD_INT 304
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17480
17458: POP
// hHackTeleport ( unit , x , y ) ; end ;
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 5
17473: PPUSH
17474: CALL 19245 0 3
17478: GO 17481
17480: POP
// end ;
17481: LD_VAR 0 12
17485: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17486: LD_INT 0
17488: PPUSH
17489: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17490: LD_VAR 0 1
17494: PUSH
17495: LD_INT 1
17497: LESS
17498: PUSH
17499: LD_VAR 0 1
17503: PUSH
17504: LD_INT 3
17506: GREATER
17507: OR
17508: PUSH
17509: LD_VAR 0 5
17513: PPUSH
17514: LD_VAR 0 6
17518: PPUSH
17519: CALL_OW 428
17523: OR
17524: IFFALSE 17528
// exit ;
17526: GO 18248
// uc_side := your_side ;
17528: LD_ADDR_OWVAR 20
17532: PUSH
17533: LD_OWVAR 2
17537: ST_TO_ADDR
// uc_nation := nation ;
17538: LD_ADDR_OWVAR 21
17542: PUSH
17543: LD_VAR 0 1
17547: ST_TO_ADDR
// bc_level = 1 ;
17548: LD_ADDR_OWVAR 43
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// case btype of 1 :
17556: LD_VAR 0 2
17560: PUSH
17561: LD_INT 1
17563: DOUBLE
17564: EQUAL
17565: IFTRUE 17569
17567: GO 17580
17569: POP
// bc_type := b_depot ; 2 :
17570: LD_ADDR_OWVAR 42
17574: PUSH
17575: LD_INT 0
17577: ST_TO_ADDR
17578: GO 18192
17580: LD_INT 2
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17599
17588: POP
// bc_type := b_warehouse ; 3 :
17589: LD_ADDR_OWVAR 42
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
17597: GO 18192
17599: LD_INT 3
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17618
17607: POP
// bc_type := b_lab ; 4 .. 9 :
17608: LD_ADDR_OWVAR 42
17612: PUSH
17613: LD_INT 6
17615: ST_TO_ADDR
17616: GO 18192
17618: LD_INT 4
17620: DOUBLE
17621: GREATEREQUAL
17622: IFFALSE 17630
17624: LD_INT 9
17626: DOUBLE
17627: LESSEQUAL
17628: IFTRUE 17632
17630: GO 17684
17632: POP
// begin bc_type := b_lab_half ;
17633: LD_ADDR_OWVAR 42
17637: PUSH
17638: LD_INT 7
17640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17641: LD_ADDR_OWVAR 44
17645: PUSH
17646: LD_INT 10
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 15
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: LD_INT 13
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: PUSH
17672: LD_VAR 0 2
17676: PUSH
17677: LD_INT 3
17679: MINUS
17680: ARRAY
17681: ST_TO_ADDR
// end ; 10 .. 13 :
17682: GO 18192
17684: LD_INT 10
17686: DOUBLE
17687: GREATEREQUAL
17688: IFFALSE 17696
17690: LD_INT 13
17692: DOUBLE
17693: LESSEQUAL
17694: IFTRUE 17698
17696: GO 17775
17698: POP
// begin bc_type := b_lab_full ;
17699: LD_ADDR_OWVAR 42
17703: PUSH
17704: LD_INT 8
17706: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17707: LD_ADDR_OWVAR 44
17711: PUSH
17712: LD_INT 10
17714: PUSH
17715: LD_INT 12
17717: PUSH
17718: LD_INT 14
17720: PUSH
17721: LD_INT 13
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: LD_VAR 0 2
17734: PUSH
17735: LD_INT 9
17737: MINUS
17738: ARRAY
17739: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17740: LD_ADDR_OWVAR 45
17744: PUSH
17745: LD_INT 11
17747: PUSH
17748: LD_INT 15
17750: PUSH
17751: LD_INT 12
17753: PUSH
17754: LD_INT 15
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: PUSH
17763: LD_VAR 0 2
17767: PUSH
17768: LD_INT 9
17770: MINUS
17771: ARRAY
17772: ST_TO_ADDR
// end ; 14 :
17773: GO 18192
17775: LD_INT 14
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 17794
17783: POP
// bc_type := b_workshop ; 15 :
17784: LD_ADDR_OWVAR 42
17788: PUSH
17789: LD_INT 2
17791: ST_TO_ADDR
17792: GO 18192
17794: LD_INT 15
17796: DOUBLE
17797: EQUAL
17798: IFTRUE 17802
17800: GO 17813
17802: POP
// bc_type := b_factory ; 16 :
17803: LD_ADDR_OWVAR 42
17807: PUSH
17808: LD_INT 3
17810: ST_TO_ADDR
17811: GO 18192
17813: LD_INT 16
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17832
17821: POP
// bc_type := b_ext_gun ; 17 :
17822: LD_ADDR_OWVAR 42
17826: PUSH
17827: LD_INT 17
17829: ST_TO_ADDR
17830: GO 18192
17832: LD_INT 17
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 17868
17840: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17841: LD_ADDR_OWVAR 42
17845: PUSH
17846: LD_INT 19
17848: PUSH
17849: LD_INT 23
17851: PUSH
17852: LD_INT 19
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: PUSH
17860: LD_VAR 0 1
17864: ARRAY
17865: ST_TO_ADDR
17866: GO 18192
17868: LD_INT 18
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17887
17876: POP
// bc_type := b_ext_radar ; 19 :
17877: LD_ADDR_OWVAR 42
17881: PUSH
17882: LD_INT 20
17884: ST_TO_ADDR
17885: GO 18192
17887: LD_INT 19
17889: DOUBLE
17890: EQUAL
17891: IFTRUE 17895
17893: GO 17906
17895: POP
// bc_type := b_ext_radio ; 20 :
17896: LD_ADDR_OWVAR 42
17900: PUSH
17901: LD_INT 22
17903: ST_TO_ADDR
17904: GO 18192
17906: LD_INT 20
17908: DOUBLE
17909: EQUAL
17910: IFTRUE 17914
17912: GO 17925
17914: POP
// bc_type := b_ext_siberium ; 21 :
17915: LD_ADDR_OWVAR 42
17919: PUSH
17920: LD_INT 21
17922: ST_TO_ADDR
17923: GO 18192
17925: LD_INT 21
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 17944
17933: POP
// bc_type := b_ext_computer ; 22 :
17934: LD_ADDR_OWVAR 42
17938: PUSH
17939: LD_INT 24
17941: ST_TO_ADDR
17942: GO 18192
17944: LD_INT 22
17946: DOUBLE
17947: EQUAL
17948: IFTRUE 17952
17950: GO 17963
17952: POP
// bc_type := b_ext_track ; 23 :
17953: LD_ADDR_OWVAR 42
17957: PUSH
17958: LD_INT 16
17960: ST_TO_ADDR
17961: GO 18192
17963: LD_INT 23
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 17971
17969: GO 17982
17971: POP
// bc_type := b_ext_laser ; 24 :
17972: LD_ADDR_OWVAR 42
17976: PUSH
17977: LD_INT 25
17979: ST_TO_ADDR
17980: GO 18192
17982: LD_INT 24
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 18001
17990: POP
// bc_type := b_control_tower ; 25 :
17991: LD_ADDR_OWVAR 42
17995: PUSH
17996: LD_INT 36
17998: ST_TO_ADDR
17999: GO 18192
18001: LD_INT 25
18003: DOUBLE
18004: EQUAL
18005: IFTRUE 18009
18007: GO 18020
18009: POP
// bc_type := b_breastwork ; 26 :
18010: LD_ADDR_OWVAR 42
18014: PUSH
18015: LD_INT 31
18017: ST_TO_ADDR
18018: GO 18192
18020: LD_INT 26
18022: DOUBLE
18023: EQUAL
18024: IFTRUE 18028
18026: GO 18039
18028: POP
// bc_type := b_bunker ; 27 :
18029: LD_ADDR_OWVAR 42
18033: PUSH
18034: LD_INT 32
18036: ST_TO_ADDR
18037: GO 18192
18039: LD_INT 27
18041: DOUBLE
18042: EQUAL
18043: IFTRUE 18047
18045: GO 18058
18047: POP
// bc_type := b_turret ; 28 :
18048: LD_ADDR_OWVAR 42
18052: PUSH
18053: LD_INT 33
18055: ST_TO_ADDR
18056: GO 18192
18058: LD_INT 28
18060: DOUBLE
18061: EQUAL
18062: IFTRUE 18066
18064: GO 18077
18066: POP
// bc_type := b_armoury ; 29 :
18067: LD_ADDR_OWVAR 42
18071: PUSH
18072: LD_INT 4
18074: ST_TO_ADDR
18075: GO 18192
18077: LD_INT 29
18079: DOUBLE
18080: EQUAL
18081: IFTRUE 18085
18083: GO 18096
18085: POP
// bc_type := b_barracks ; 30 :
18086: LD_ADDR_OWVAR 42
18090: PUSH
18091: LD_INT 5
18093: ST_TO_ADDR
18094: GO 18192
18096: LD_INT 30
18098: DOUBLE
18099: EQUAL
18100: IFTRUE 18104
18102: GO 18115
18104: POP
// bc_type := b_solar_power ; 31 :
18105: LD_ADDR_OWVAR 42
18109: PUSH
18110: LD_INT 27
18112: ST_TO_ADDR
18113: GO 18192
18115: LD_INT 31
18117: DOUBLE
18118: EQUAL
18119: IFTRUE 18123
18121: GO 18134
18123: POP
// bc_type := b_oil_power ; 32 :
18124: LD_ADDR_OWVAR 42
18128: PUSH
18129: LD_INT 26
18131: ST_TO_ADDR
18132: GO 18192
18134: LD_INT 32
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18153
18142: POP
// bc_type := b_siberite_power ; 33 :
18143: LD_ADDR_OWVAR 42
18147: PUSH
18148: LD_INT 28
18150: ST_TO_ADDR
18151: GO 18192
18153: LD_INT 33
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18172
18161: POP
// bc_type := b_oil_mine ; 34 :
18162: LD_ADDR_OWVAR 42
18166: PUSH
18167: LD_INT 29
18169: ST_TO_ADDR
18170: GO 18192
18172: LD_INT 34
18174: DOUBLE
18175: EQUAL
18176: IFTRUE 18180
18178: GO 18191
18180: POP
// bc_type := b_siberite_mine ; end ;
18181: LD_ADDR_OWVAR 42
18185: PUSH
18186: LD_INT 30
18188: ST_TO_ADDR
18189: GO 18192
18191: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18192: LD_ADDR_VAR 0 8
18196: PUSH
18197: LD_VAR 0 5
18201: PPUSH
18202: LD_VAR 0 6
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: CALL_OW 47
18216: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18217: LD_OWVAR 42
18221: PUSH
18222: LD_INT 32
18224: PUSH
18225: LD_INT 33
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: IN
18232: IFFALSE 18248
// PlaceWeaponTurret ( b , weapon ) ;
18234: LD_VAR 0 8
18238: PPUSH
18239: LD_VAR 0 4
18243: PPUSH
18244: CALL_OW 431
// end ;
18248: LD_VAR 0 7
18252: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18259: LD_ADDR_VAR 0 4
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_OWVAR 2
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 30
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PPUSH
18308: CALL_OW 69
18312: ST_TO_ADDR
// if not tmp then
18313: LD_VAR 0 4
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18381
// for i in tmp do
18322: LD_ADDR_VAR 0 2
18326: PUSH
18327: LD_VAR 0 4
18331: PUSH
18332: FOR_IN
18333: IFFALSE 18379
// for j = 1 to 3 do
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: DOUBLE
18341: LD_INT 1
18343: DEC
18344: ST_TO_ADDR
18345: LD_INT 3
18347: PUSH
18348: FOR_TO
18349: IFFALSE 18375
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18351: LD_VAR 0 2
18355: PPUSH
18356: CALL_OW 274
18360: PPUSH
18361: LD_VAR 0 3
18365: PPUSH
18366: LD_INT 99999
18368: PPUSH
18369: CALL_OW 277
18373: GO 18348
18375: POP
18376: POP
18377: GO 18332
18379: POP
18380: POP
// end ;
18381: LD_VAR 0 1
18385: RET
// export function hHackSetLevel10 ; var i , j ; begin
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
18390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18391: LD_ADDR_VAR 0 2
18395: PUSH
18396: LD_INT 21
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PPUSH
18406: CALL_OW 69
18410: PUSH
18411: FOR_IN
18412: IFFALSE 18464
// if IsSelected ( i ) then
18414: LD_VAR 0 2
18418: PPUSH
18419: CALL_OW 306
18423: IFFALSE 18462
// begin for j := 1 to 4 do
18425: LD_ADDR_VAR 0 3
18429: PUSH
18430: DOUBLE
18431: LD_INT 1
18433: DEC
18434: ST_TO_ADDR
18435: LD_INT 4
18437: PUSH
18438: FOR_TO
18439: IFFALSE 18460
// SetSkill ( i , j , 10 ) ;
18441: LD_VAR 0 2
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: LD_INT 10
18453: PPUSH
18454: CALL_OW 237
18458: GO 18438
18460: POP
18461: POP
// end ;
18462: GO 18411
18464: POP
18465: POP
// end ;
18466: LD_VAR 0 1
18470: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18471: LD_INT 0
18473: PPUSH
18474: PPUSH
18475: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18476: LD_ADDR_VAR 0 2
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_OWVAR 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 21
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PPUSH
18507: CALL_OW 69
18511: PUSH
18512: FOR_IN
18513: IFFALSE 18554
// begin for j := 1 to 4 do
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: DOUBLE
18521: LD_INT 1
18523: DEC
18524: ST_TO_ADDR
18525: LD_INT 4
18527: PUSH
18528: FOR_TO
18529: IFFALSE 18550
// SetSkill ( i , j , 10 ) ;
18531: LD_VAR 0 2
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_INT 10
18543: PPUSH
18544: CALL_OW 237
18548: GO 18528
18550: POP
18551: POP
// end ;
18552: GO 18512
18554: POP
18555: POP
// end ;
18556: LD_VAR 0 1
18560: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18561: LD_INT 0
18563: PPUSH
// uc_side := your_side ;
18564: LD_ADDR_OWVAR 20
18568: PUSH
18569: LD_OWVAR 2
18573: ST_TO_ADDR
// uc_nation := nation ;
18574: LD_ADDR_OWVAR 21
18578: PUSH
18579: LD_VAR 0 1
18583: ST_TO_ADDR
// InitHc ;
18584: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18588: LD_INT 0
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18605: LD_VAR 0 4
18609: PPUSH
18610: LD_VAR 0 5
18614: PPUSH
18615: CALL_OW 428
18619: PUSH
18620: LD_INT 0
18622: EQUAL
18623: IFFALSE 18647
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18625: CALL_OW 44
18629: PPUSH
18630: LD_VAR 0 4
18634: PPUSH
18635: LD_VAR 0 5
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 48
// end ;
18647: LD_VAR 0 6
18651: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18652: LD_INT 0
18654: PPUSH
18655: PPUSH
// uc_side := your_side ;
18656: LD_ADDR_OWVAR 20
18660: PUSH
18661: LD_OWVAR 2
18665: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18666: LD_VAR 0 1
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: IN
18693: IFFALSE 18705
// uc_nation := nation_american else
18695: LD_ADDR_OWVAR 21
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
18703: GO 18748
// if chassis in [ 11 , 12 , 13 , 14 ] then
18705: LD_VAR 0 1
18709: PUSH
18710: LD_INT 11
18712: PUSH
18713: LD_INT 12
18715: PUSH
18716: LD_INT 13
18718: PUSH
18719: LD_INT 14
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: IN
18728: IFFALSE 18740
// uc_nation := nation_arabian else
18730: LD_ADDR_OWVAR 21
18734: PUSH
18735: LD_INT 2
18737: ST_TO_ADDR
18738: GO 18748
// uc_nation := nation_russian ;
18740: LD_ADDR_OWVAR 21
18744: PUSH
18745: LD_INT 3
18747: ST_TO_ADDR
// vc_chassis := chassis ;
18748: LD_ADDR_OWVAR 37
18752: PUSH
18753: LD_VAR 0 1
18757: ST_TO_ADDR
// vc_engine := engine ;
18758: LD_ADDR_OWVAR 39
18762: PUSH
18763: LD_VAR 0 2
18767: ST_TO_ADDR
// vc_control := control ;
18768: LD_ADDR_OWVAR 38
18772: PUSH
18773: LD_VAR 0 3
18777: ST_TO_ADDR
// vc_weapon := weapon ;
18778: LD_ADDR_OWVAR 40
18782: PUSH
18783: LD_VAR 0 4
18787: ST_TO_ADDR
// un := CreateVehicle ;
18788: LD_ADDR_VAR 0 8
18792: PUSH
18793: CALL_OW 45
18797: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18798: LD_VAR 0 8
18802: PPUSH
18803: LD_INT 0
18805: PPUSH
18806: LD_INT 5
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18818: LD_VAR 0 8
18822: PPUSH
18823: LD_VAR 0 5
18827: PPUSH
18828: LD_VAR 0 6
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: CALL_OW 48
// end ;
18840: LD_VAR 0 7
18844: RET
// export hInvincible ; every 1 do
18845: GO 18847
18847: DISABLE
// hInvincible := [ ] ;
18848: LD_ADDR_EXP 72
18852: PUSH
18853: EMPTY
18854: ST_TO_ADDR
18855: END
// every 10 do var i ;
18856: GO 18858
18858: DISABLE
18859: LD_INT 0
18861: PPUSH
// begin enable ;
18862: ENABLE
// if not hInvincible then
18863: LD_EXP 72
18867: NOT
18868: IFFALSE 18872
// exit ;
18870: GO 18916
// for i in hInvincible do
18872: LD_ADDR_VAR 0 1
18876: PUSH
18877: LD_EXP 72
18881: PUSH
18882: FOR_IN
18883: IFFALSE 18914
// if GetLives ( i ) < 1000 then
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 256
18894: PUSH
18895: LD_INT 1000
18897: LESS
18898: IFFALSE 18912
// SetLives ( i , 1000 ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_INT 1000
18907: PPUSH
18908: CALL_OW 234
18912: GO 18882
18914: POP
18915: POP
// end ;
18916: PPOPN 1
18918: END
// export function hHackInvincible ; var i ; begin
18919: LD_INT 0
18921: PPUSH
18922: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 21
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 21
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: PUSH
18961: FOR_IN
18962: IFFALSE 19023
// if IsSelected ( i ) then
18964: LD_VAR 0 2
18968: PPUSH
18969: CALL_OW 306
18973: IFFALSE 19021
// begin if i in hInvincible then
18975: LD_VAR 0 2
18979: PUSH
18980: LD_EXP 72
18984: IN
18985: IFFALSE 19005
// hInvincible := hInvincible diff i else
18987: LD_ADDR_EXP 72
18991: PUSH
18992: LD_EXP 72
18996: PUSH
18997: LD_VAR 0 2
19001: DIFF
19002: ST_TO_ADDR
19003: GO 19021
// hInvincible := hInvincible union i ;
19005: LD_ADDR_EXP 72
19009: PUSH
19010: LD_EXP 72
19014: PUSH
19015: LD_VAR 0 2
19019: UNION
19020: ST_TO_ADDR
// end ;
19021: GO 18961
19023: POP
19024: POP
// end ;
19025: LD_VAR 0 1
19029: RET
// export function hHackInvisible ; var i , j ; begin
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
19034: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19035: LD_ADDR_VAR 0 2
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PPUSH
19050: CALL_OW 69
19054: PUSH
19055: FOR_IN
19056: IFFALSE 19080
// if IsSelected ( i ) then
19058: LD_VAR 0 2
19062: PPUSH
19063: CALL_OW 306
19067: IFFALSE 19078
// ComForceInvisible ( i ) ;
19069: LD_VAR 0 2
19073: PPUSH
19074: CALL_OW 496
19078: GO 19055
19080: POP
19081: POP
// end ;
19082: LD_VAR 0 1
19086: RET
// export function hHackChangeYourSide ; begin
19087: LD_INT 0
19089: PPUSH
// if your_side = 8 then
19090: LD_OWVAR 2
19094: PUSH
19095: LD_INT 8
19097: EQUAL
19098: IFFALSE 19110
// your_side := 0 else
19100: LD_ADDR_OWVAR 2
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
19108: GO 19124
// your_side := your_side + 1 ;
19110: LD_ADDR_OWVAR 2
19114: PUSH
19115: LD_OWVAR 2
19119: PUSH
19120: LD_INT 1
19122: PLUS
19123: ST_TO_ADDR
// end ;
19124: LD_VAR 0 1
19128: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19129: LD_INT 0
19131: PPUSH
19132: PPUSH
19133: PPUSH
// for i in all_units do
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: LD_OWVAR 3
19143: PUSH
19144: FOR_IN
19145: IFFALSE 19223
// if IsSelected ( i ) then
19147: LD_VAR 0 2
19151: PPUSH
19152: CALL_OW 306
19156: IFFALSE 19221
// begin j := GetSide ( i ) ;
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: LD_VAR 0 2
19167: PPUSH
19168: CALL_OW 255
19172: ST_TO_ADDR
// if j = 8 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 8
19180: EQUAL
19181: IFFALSE 19193
// j := 0 else
19183: LD_ADDR_VAR 0 3
19187: PUSH
19188: LD_INT 0
19190: ST_TO_ADDR
19191: GO 19207
// j := j + 1 ;
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_VAR 0 3
19202: PUSH
19203: LD_INT 1
19205: PLUS
19206: ST_TO_ADDR
// SetSide ( i , j ) ;
19207: LD_VAR 0 2
19211: PPUSH
19212: LD_VAR 0 3
19216: PPUSH
19217: CALL_OW 235
// end ;
19221: GO 19144
19223: POP
19224: POP
// end ;
19225: LD_VAR 0 1
19229: RET
// export function hHackFog ; begin
19230: LD_INT 0
19232: PPUSH
// FogOff ( true ) ;
19233: LD_INT 1
19235: PPUSH
19236: CALL_OW 344
// end ;
19240: LD_VAR 0 1
19244: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19245: LD_INT 0
19247: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: LD_VAR 0 3
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: CALL_OW 483
// CenterOnXY ( x , y ) ;
19273: LD_VAR 0 2
19277: PPUSH
19278: LD_VAR 0 3
19282: PPUSH
19283: CALL_OW 84
// end ; end_of_file
19287: LD_VAR 0 4
19291: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
19297: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19298: LD_VAR 0 1
19302: PPUSH
19303: CALL_OW 264
19307: PUSH
19308: LD_EXP 88
19312: EQUAL
19313: IFFALSE 19385
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19315: LD_INT 68
19317: PPUSH
19318: LD_VAR 0 1
19322: PPUSH
19323: CALL_OW 255
19327: PPUSH
19328: CALL_OW 321
19332: PUSH
19333: LD_INT 2
19335: EQUAL
19336: IFFALSE 19348
// eff := 70 else
19338: LD_ADDR_VAR 0 4
19342: PUSH
19343: LD_INT 70
19345: ST_TO_ADDR
19346: GO 19356
// eff := 30 ;
19348: LD_ADDR_VAR 0 4
19352: PUSH
19353: LD_INT 30
19355: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 250
19365: PPUSH
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 251
19375: PPUSH
19376: LD_VAR 0 4
19380: PPUSH
19381: CALL_OW 495
// end ; end ;
19385: LD_VAR 0 2
19389: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19390: LD_INT 0
19392: PPUSH
// end ;
19393: LD_VAR 0 4
19397: RET
// export function SOS_Command ( cmd ) ; begin
19398: LD_INT 0
19400: PPUSH
// end ;
19401: LD_VAR 0 2
19405: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19406: LD_INT 0
19408: PPUSH
// end ;
19409: LD_VAR 0 6
19413: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19414: LD_INT 0
19416: PPUSH
19417: PPUSH
// if not vehicle or not factory then
19418: LD_VAR 0 1
19422: NOT
19423: PUSH
19424: LD_VAR 0 2
19428: NOT
19429: OR
19430: IFFALSE 19434
// exit ;
19432: GO 19665
// if factoryWaypoints >= factory then
19434: LD_EXP 73
19438: PUSH
19439: LD_VAR 0 2
19443: GREATEREQUAL
19444: IFFALSE 19665
// if factoryWaypoints [ factory ] then
19446: LD_EXP 73
19450: PUSH
19451: LD_VAR 0 2
19455: ARRAY
19456: IFFALSE 19665
// begin if GetControl ( vehicle ) = control_manual then
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 263
19467: PUSH
19468: LD_INT 1
19470: EQUAL
19471: IFFALSE 19552
// begin driver := IsDrivenBy ( vehicle ) ;
19473: LD_ADDR_VAR 0 4
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 311
19487: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19488: LD_VAR 0 4
19492: PPUSH
19493: LD_EXP 73
19497: PUSH
19498: LD_VAR 0 2
19502: ARRAY
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PPUSH
19508: LD_EXP 73
19512: PUSH
19513: LD_VAR 0 2
19517: ARRAY
19518: PUSH
19519: LD_INT 2
19521: ARRAY
19522: PPUSH
19523: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19527: LD_VAR 0 4
19531: PPUSH
19532: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19536: LD_VAR 0 4
19540: PPUSH
19541: LD_VAR 0 2
19545: PPUSH
19546: CALL_OW 180
// end else
19550: GO 19665
// if GetControl ( vehicle ) = control_remote then
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 263
19561: PUSH
19562: LD_INT 2
19564: EQUAL
19565: IFFALSE 19626
// begin wait ( 0 0$2 ) ;
19567: LD_INT 70
19569: PPUSH
19570: CALL_OW 67
// if Connect ( vehicle ) then
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL 32220 0 1
19583: IFFALSE 19624
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19585: LD_VAR 0 1
19589: PPUSH
19590: LD_EXP 73
19594: PUSH
19595: LD_VAR 0 2
19599: ARRAY
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PPUSH
19605: LD_EXP 73
19609: PUSH
19610: LD_VAR 0 2
19614: ARRAY
19615: PUSH
19616: LD_INT 2
19618: ARRAY
19619: PPUSH
19620: CALL_OW 171
// end else
19624: GO 19665
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19626: LD_VAR 0 1
19630: PPUSH
19631: LD_EXP 73
19635: PUSH
19636: LD_VAR 0 2
19640: ARRAY
19641: PUSH
19642: LD_INT 1
19644: ARRAY
19645: PPUSH
19646: LD_EXP 73
19650: PUSH
19651: LD_VAR 0 2
19655: ARRAY
19656: PUSH
19657: LD_INT 2
19659: ARRAY
19660: PPUSH
19661: CALL_OW 171
// end ; end ;
19665: LD_VAR 0 3
19669: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19670: LD_INT 0
19672: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19673: LD_VAR 0 1
19677: PUSH
19678: LD_INT 250
19680: EQUAL
19681: PUSH
19682: LD_VAR 0 2
19686: PPUSH
19687: CALL_OW 264
19691: PUSH
19692: LD_EXP 91
19696: EQUAL
19697: AND
19698: IFFALSE 19719
// MinerPlaceMine ( unit , x , y ) ;
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_VAR 0 4
19709: PPUSH
19710: LD_VAR 0 5
19714: PPUSH
19715: CALL 22447 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 251
19726: EQUAL
19727: PUSH
19728: LD_VAR 0 2
19732: PPUSH
19733: CALL_OW 264
19737: PUSH
19738: LD_EXP 91
19742: EQUAL
19743: AND
19744: IFFALSE 19765
// MinerDetonateMine ( unit , x , y ) ;
19746: LD_VAR 0 2
19750: PPUSH
19751: LD_VAR 0 4
19755: PPUSH
19756: LD_VAR 0 5
19760: PPUSH
19761: CALL 22724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19765: LD_VAR 0 1
19769: PUSH
19770: LD_INT 252
19772: EQUAL
19773: PUSH
19774: LD_VAR 0 2
19778: PPUSH
19779: CALL_OW 264
19783: PUSH
19784: LD_EXP 91
19788: EQUAL
19789: AND
19790: IFFALSE 19811
// MinerCreateMinefield ( unit , x , y ) ;
19792: LD_VAR 0 2
19796: PPUSH
19797: LD_VAR 0 4
19801: PPUSH
19802: LD_VAR 0 5
19806: PPUSH
19807: CALL 23141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19811: LD_VAR 0 1
19815: PUSH
19816: LD_INT 253
19818: EQUAL
19819: PUSH
19820: LD_VAR 0 2
19824: PPUSH
19825: CALL_OW 257
19829: PUSH
19830: LD_INT 5
19832: EQUAL
19833: AND
19834: IFFALSE 19855
// ComBinocular ( unit , x , y ) ;
19836: LD_VAR 0 2
19840: PPUSH
19841: LD_VAR 0 4
19845: PPUSH
19846: LD_VAR 0 5
19850: PPUSH
19851: CALL 23512 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19855: LD_VAR 0 1
19859: PUSH
19860: LD_INT 254
19862: EQUAL
19863: PUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: CALL_OW 264
19873: PUSH
19874: LD_EXP 86
19878: EQUAL
19879: AND
19880: PUSH
19881: LD_VAR 0 3
19885: PPUSH
19886: CALL_OW 263
19890: PUSH
19891: LD_INT 3
19893: EQUAL
19894: AND
19895: IFFALSE 19911
// HackDestroyVehicle ( unit , selectedUnit ) ;
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_VAR 0 3
19906: PPUSH
19907: CALL 21807 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19911: LD_VAR 0 1
19915: PUSH
19916: LD_INT 255
19918: EQUAL
19919: PUSH
19920: LD_VAR 0 2
19924: PPUSH
19925: CALL_OW 264
19929: PUSH
19930: LD_INT 14
19932: PUSH
19933: LD_INT 53
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: IN
19940: AND
19941: PUSH
19942: LD_VAR 0 4
19946: PPUSH
19947: LD_VAR 0 5
19951: PPUSH
19952: CALL_OW 488
19956: AND
19957: IFFALSE 19981
// CutTreeXYR ( unit , x , y , 12 ) ;
19959: LD_VAR 0 2
19963: PPUSH
19964: LD_VAR 0 4
19968: PPUSH
19969: LD_VAR 0 5
19973: PPUSH
19974: LD_INT 12
19976: PPUSH
19977: CALL 20373 0 4
// if cmd = 256 then
19981: LD_VAR 0 1
19985: PUSH
19986: LD_INT 256
19988: EQUAL
19989: IFFALSE 20010
// SetFactoryWaypoint ( unit , x , y ) ;
19991: LD_VAR 0 2
19995: PPUSH
19996: LD_VAR 0 4
20000: PPUSH
20001: LD_VAR 0 5
20005: PPUSH
20006: CALL 20015 0 3
// end ;
20010: LD_VAR 0 6
20014: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20015: LD_INT 0
20017: PPUSH
20018: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20019: LD_VAR 0 1
20023: NOT
20024: PUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: LD_VAR 0 3
20034: PPUSH
20035: CALL_OW 488
20039: NOT
20040: OR
20041: PUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 266
20051: PUSH
20052: LD_INT 3
20054: NONEQUAL
20055: PUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 247
20065: PUSH
20066: LD_INT 1
20068: EQUAL
20069: NOT
20070: AND
20071: OR
20072: IFFALSE 20076
// exit ;
20074: GO 20225
// if GetType ( factory ) = unit_human then
20076: LD_VAR 0 1
20080: PPUSH
20081: CALL_OW 247
20085: PUSH
20086: LD_INT 1
20088: EQUAL
20089: IFFALSE 20106
// factory := IsInUnit ( factory ) ;
20091: LD_ADDR_VAR 0 1
20095: PUSH
20096: LD_VAR 0 1
20100: PPUSH
20101: CALL_OW 310
20105: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20106: LD_VAR 0 1
20110: PPUSH
20111: CALL_OW 266
20115: PUSH
20116: LD_INT 3
20118: NONEQUAL
20119: IFFALSE 20123
// exit ;
20121: GO 20225
// if HexInfo ( x , y ) = factory then
20123: LD_VAR 0 2
20127: PPUSH
20128: LD_VAR 0 3
20132: PPUSH
20133: CALL_OW 428
20137: PUSH
20138: LD_VAR 0 1
20142: EQUAL
20143: IFFALSE 20170
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20145: LD_ADDR_EXP 73
20149: PUSH
20150: LD_EXP 73
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_INT 0
20162: PPUSH
20163: CALL_OW 1
20167: ST_TO_ADDR
20168: GO 20221
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20170: LD_ADDR_EXP 73
20174: PUSH
20175: LD_EXP 73
20179: PPUSH
20180: LD_VAR 0 1
20184: PPUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 255
20194: PUSH
20195: LD_VAR 0 1
20199: PUSH
20200: LD_VAR 0 2
20204: PUSH
20205: LD_VAR 0 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PPUSH
20216: CALL_OW 1
20220: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20221: CALL 20230 0 0
// end ;
20225: LD_VAR 0 4
20229: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20234: LD_STRING resetFactoryWaypoint();
20236: PPUSH
20237: CALL_OW 559
// if factoryWaypoints then
20241: LD_EXP 73
20245: IFFALSE 20368
// begin for i := 1 to factoryWaypoints do
20247: LD_ADDR_VAR 0 2
20251: PUSH
20252: DOUBLE
20253: LD_INT 1
20255: DEC
20256: ST_TO_ADDR
20257: LD_EXP 73
20261: PUSH
20262: FOR_TO
20263: IFFALSE 20366
// if factoryWaypoints [ i ] then
20265: LD_EXP 73
20269: PUSH
20270: LD_VAR 0 2
20274: ARRAY
20275: IFFALSE 20364
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20277: LD_STRING setFactoryWaypointXY(
20279: PUSH
20280: LD_EXP 73
20284: PUSH
20285: LD_VAR 0 2
20289: ARRAY
20290: PUSH
20291: LD_INT 1
20293: ARRAY
20294: STR
20295: PUSH
20296: LD_STRING ,
20298: STR
20299: PUSH
20300: LD_EXP 73
20304: PUSH
20305: LD_VAR 0 2
20309: ARRAY
20310: PUSH
20311: LD_INT 2
20313: ARRAY
20314: STR
20315: PUSH
20316: LD_STRING ,
20318: STR
20319: PUSH
20320: LD_EXP 73
20324: PUSH
20325: LD_VAR 0 2
20329: ARRAY
20330: PUSH
20331: LD_INT 3
20333: ARRAY
20334: STR
20335: PUSH
20336: LD_STRING ,
20338: STR
20339: PUSH
20340: LD_EXP 73
20344: PUSH
20345: LD_VAR 0 2
20349: ARRAY
20350: PUSH
20351: LD_INT 4
20353: ARRAY
20354: STR
20355: PUSH
20356: LD_STRING )
20358: STR
20359: PPUSH
20360: CALL_OW 559
20364: GO 20262
20366: POP
20367: POP
// end ; end ;
20368: LD_VAR 0 1
20372: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20384: LD_VAR 0 1
20388: NOT
20389: PUSH
20390: LD_VAR 0 2
20394: PPUSH
20395: LD_VAR 0 3
20399: PPUSH
20400: CALL_OW 488
20404: NOT
20405: OR
20406: PUSH
20407: LD_VAR 0 4
20411: NOT
20412: OR
20413: IFFALSE 20417
// exit ;
20415: GO 20757
// list := [ ] ;
20417: LD_ADDR_VAR 0 13
20421: PUSH
20422: EMPTY
20423: ST_TO_ADDR
// if x - r < 0 then
20424: LD_VAR 0 2
20428: PUSH
20429: LD_VAR 0 4
20433: MINUS
20434: PUSH
20435: LD_INT 0
20437: LESS
20438: IFFALSE 20450
// min_x := 0 else
20440: LD_ADDR_VAR 0 7
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
20448: GO 20466
// min_x := x - r ;
20450: LD_ADDR_VAR 0 7
20454: PUSH
20455: LD_VAR 0 2
20459: PUSH
20460: LD_VAR 0 4
20464: MINUS
20465: ST_TO_ADDR
// if y - r < 0 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_VAR 0 4
20475: MINUS
20476: PUSH
20477: LD_INT 0
20479: LESS
20480: IFFALSE 20492
// min_y := 0 else
20482: LD_ADDR_VAR 0 8
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
20490: GO 20508
// min_y := y - r ;
20492: LD_ADDR_VAR 0 8
20496: PUSH
20497: LD_VAR 0 3
20501: PUSH
20502: LD_VAR 0 4
20506: MINUS
20507: ST_TO_ADDR
// max_x := x + r ;
20508: LD_ADDR_VAR 0 9
20512: PUSH
20513: LD_VAR 0 2
20517: PUSH
20518: LD_VAR 0 4
20522: PLUS
20523: ST_TO_ADDR
// max_y := y + r ;
20524: LD_ADDR_VAR 0 10
20528: PUSH
20529: LD_VAR 0 3
20533: PUSH
20534: LD_VAR 0 4
20538: PLUS
20539: ST_TO_ADDR
// for _x = min_x to max_x do
20540: LD_ADDR_VAR 0 11
20544: PUSH
20545: DOUBLE
20546: LD_VAR 0 7
20550: DEC
20551: ST_TO_ADDR
20552: LD_VAR 0 9
20556: PUSH
20557: FOR_TO
20558: IFFALSE 20675
// for _y = min_y to max_y do
20560: LD_ADDR_VAR 0 12
20564: PUSH
20565: DOUBLE
20566: LD_VAR 0 8
20570: DEC
20571: ST_TO_ADDR
20572: LD_VAR 0 10
20576: PUSH
20577: FOR_TO
20578: IFFALSE 20671
// begin if not ValidHex ( _x , _y ) then
20580: LD_VAR 0 11
20584: PPUSH
20585: LD_VAR 0 12
20589: PPUSH
20590: CALL_OW 488
20594: NOT
20595: IFFALSE 20599
// continue ;
20597: GO 20577
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20599: LD_VAR 0 11
20603: PPUSH
20604: LD_VAR 0 12
20608: PPUSH
20609: CALL_OW 351
20613: PUSH
20614: LD_VAR 0 11
20618: PPUSH
20619: LD_VAR 0 12
20623: PPUSH
20624: CALL_OW 554
20628: AND
20629: IFFALSE 20669
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20631: LD_ADDR_VAR 0 13
20635: PUSH
20636: LD_VAR 0 13
20640: PPUSH
20641: LD_VAR 0 13
20645: PUSH
20646: LD_INT 1
20648: PLUS
20649: PPUSH
20650: LD_VAR 0 11
20654: PUSH
20655: LD_VAR 0 12
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 2
20668: ST_TO_ADDR
// end ;
20669: GO 20577
20671: POP
20672: POP
20673: GO 20557
20675: POP
20676: POP
// if not list then
20677: LD_VAR 0 13
20681: NOT
20682: IFFALSE 20686
// exit ;
20684: GO 20757
// for i in list do
20686: LD_ADDR_VAR 0 6
20690: PUSH
20691: LD_VAR 0 13
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20755
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_STRING M
20706: PUSH
20707: LD_VAR 0 6
20711: PUSH
20712: LD_INT 1
20714: ARRAY
20715: PUSH
20716: LD_VAR 0 6
20720: PUSH
20721: LD_INT 2
20723: ARRAY
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: PPUSH
20749: CALL_OW 447
20753: GO 20696
20755: POP
20756: POP
// end ;
20757: LD_VAR 0 5
20761: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20762: LD_EXP 74
20766: NOT
20767: IFFALSE 20817
20769: GO 20771
20771: DISABLE
// begin initHack := true ;
20772: LD_ADDR_EXP 74
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// hackTanks := [ ] ;
20780: LD_ADDR_EXP 75
20784: PUSH
20785: EMPTY
20786: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20787: LD_ADDR_EXP 76
20791: PUSH
20792: EMPTY
20793: ST_TO_ADDR
// hackLimit := 3 ;
20794: LD_ADDR_EXP 77
20798: PUSH
20799: LD_INT 3
20801: ST_TO_ADDR
// hackDist := 12 ;
20802: LD_ADDR_EXP 78
20806: PUSH
20807: LD_INT 12
20809: ST_TO_ADDR
// hackCounter := [ ] ;
20810: LD_ADDR_EXP 79
20814: PUSH
20815: EMPTY
20816: ST_TO_ADDR
// end ;
20817: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20818: LD_EXP 74
20822: PUSH
20823: LD_INT 34
20825: PUSH
20826: LD_EXP 86
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 69
20839: AND
20840: IFFALSE 21095
20842: GO 20844
20844: DISABLE
20845: LD_INT 0
20847: PPUSH
20848: PPUSH
// begin enable ;
20849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_INT 34
20857: PUSH
20858: LD_EXP 86
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PPUSH
20867: CALL_OW 69
20871: PUSH
20872: FOR_IN
20873: IFFALSE 21093
// begin if not i in hackTanks then
20875: LD_VAR 0 1
20879: PUSH
20880: LD_EXP 75
20884: IN
20885: NOT
20886: IFFALSE 20969
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20888: LD_ADDR_EXP 75
20892: PUSH
20893: LD_EXP 75
20897: PPUSH
20898: LD_EXP 75
20902: PUSH
20903: LD_INT 1
20905: PLUS
20906: PPUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 1
20916: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20917: LD_ADDR_EXP 76
20921: PUSH
20922: LD_EXP 76
20926: PPUSH
20927: LD_EXP 76
20931: PUSH
20932: LD_INT 1
20934: PLUS
20935: PPUSH
20936: EMPTY
20937: PPUSH
20938: CALL_OW 1
20942: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20943: LD_ADDR_EXP 79
20947: PUSH
20948: LD_EXP 79
20952: PPUSH
20953: LD_EXP 79
20957: PUSH
20958: LD_INT 1
20960: PLUS
20961: PPUSH
20962: EMPTY
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 302
20978: NOT
20979: IFFALSE 20992
// begin HackUnlinkAll ( i ) ;
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL 21098 0 1
// continue ;
20990: GO 20872
// end ; HackCheckCapturedStatus ( i ) ;
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL 21541 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_INT 81
21008: PUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL_OW 255
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 33
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 91
21035: PUSH
21036: LD_VAR 0 1
21040: PUSH
21041: LD_EXP 78
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 50
21053: PUSH
21054: EMPTY
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: ST_TO_ADDR
// if not tmp then
21068: LD_VAR 0 2
21072: NOT
21073: IFFALSE 21077
// continue ;
21075: GO 20872
// HackLink ( i , tmp ) ;
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: CALL 21234 0 2
// end ;
21091: GO 20872
21093: POP
21094: POP
// end ;
21095: PPOPN 2
21097: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21098: LD_INT 0
21100: PPUSH
21101: PPUSH
21102: PPUSH
// if not hack in hackTanks then
21103: LD_VAR 0 1
21107: PUSH
21108: LD_EXP 75
21112: IN
21113: NOT
21114: IFFALSE 21118
// exit ;
21116: GO 21229
// index := GetElementIndex ( hackTanks , hack ) ;
21118: LD_ADDR_VAR 0 4
21122: PUSH
21123: LD_EXP 75
21127: PPUSH
21128: LD_VAR 0 1
21132: PPUSH
21133: CALL 29034 0 2
21137: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21138: LD_EXP 76
21142: PUSH
21143: LD_VAR 0 4
21147: ARRAY
21148: IFFALSE 21229
// begin for i in hackTanksCaptured [ index ] do
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_EXP 76
21159: PUSH
21160: LD_VAR 0 4
21164: ARRAY
21165: PUSH
21166: FOR_IN
21167: IFFALSE 21193
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 1
21176: ARRAY
21177: PPUSH
21178: LD_VAR 0 3
21182: PUSH
21183: LD_INT 2
21185: ARRAY
21186: PPUSH
21187: CALL_OW 235
21191: GO 21166
21193: POP
21194: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21195: LD_ADDR_EXP 76
21199: PUSH
21200: LD_EXP 76
21204: PPUSH
21205: LD_VAR 0 4
21209: PPUSH
21210: EMPTY
21211: PPUSH
21212: CALL_OW 1
21216: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21217: LD_VAR 0 1
21221: PPUSH
21222: LD_INT 0
21224: PPUSH
21225: CALL_OW 505
// end ; end ;
21229: LD_VAR 0 2
21233: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
21238: PPUSH
// if not hack in hackTanks or not vehicles then
21239: LD_VAR 0 1
21243: PUSH
21244: LD_EXP 75
21248: IN
21249: NOT
21250: PUSH
21251: LD_VAR 0 2
21255: NOT
21256: OR
21257: IFFALSE 21261
// exit ;
21259: GO 21536
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_INT 1
21278: PPUSH
21279: LD_INT 1
21281: PPUSH
21282: CALL 29684 0 4
21286: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21287: LD_ADDR_VAR 0 5
21291: PUSH
21292: LD_EXP 75
21296: PPUSH
21297: LD_VAR 0 1
21301: PPUSH
21302: CALL 29034 0 2
21306: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21307: LD_EXP 76
21311: PUSH
21312: LD_VAR 0 5
21316: ARRAY
21317: PUSH
21318: LD_EXP 77
21322: LESS
21323: IFFALSE 21512
// begin for i := 1 to vehicles do
21325: LD_ADDR_VAR 0 4
21329: PUSH
21330: DOUBLE
21331: LD_INT 1
21333: DEC
21334: ST_TO_ADDR
21335: LD_VAR 0 2
21339: PUSH
21340: FOR_TO
21341: IFFALSE 21510
// begin if hackTanksCaptured [ index ] = hackLimit then
21343: LD_EXP 76
21347: PUSH
21348: LD_VAR 0 5
21352: ARRAY
21353: PUSH
21354: LD_EXP 77
21358: EQUAL
21359: IFFALSE 21363
// break ;
21361: GO 21510
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21363: LD_ADDR_EXP 79
21367: PUSH
21368: LD_EXP 79
21372: PPUSH
21373: LD_VAR 0 5
21377: PPUSH
21378: LD_EXP 79
21382: PUSH
21383: LD_VAR 0 5
21387: ARRAY
21388: PUSH
21389: LD_INT 1
21391: PLUS
21392: PPUSH
21393: CALL_OW 1
21397: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21398: LD_ADDR_EXP 76
21402: PUSH
21403: LD_EXP 76
21407: PPUSH
21408: LD_VAR 0 5
21412: PUSH
21413: LD_EXP 76
21417: PUSH
21418: LD_VAR 0 5
21422: ARRAY
21423: PUSH
21424: LD_INT 1
21426: PLUS
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: LD_VAR 0 2
21436: PUSH
21437: LD_VAR 0 4
21441: ARRAY
21442: PUSH
21443: LD_VAR 0 2
21447: PUSH
21448: LD_VAR 0 4
21452: ARRAY
21453: PPUSH
21454: CALL_OW 255
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PPUSH
21463: CALL 29249 0 3
21467: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21468: LD_VAR 0 2
21472: PUSH
21473: LD_VAR 0 4
21477: ARRAY
21478: PPUSH
21479: LD_VAR 0 1
21483: PPUSH
21484: CALL_OW 255
21488: PPUSH
21489: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21493: LD_VAR 0 2
21497: PUSH
21498: LD_VAR 0 4
21502: ARRAY
21503: PPUSH
21504: CALL_OW 141
// end ;
21508: GO 21340
21510: POP
21511: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_EXP 76
21521: PUSH
21522: LD_VAR 0 5
21526: ARRAY
21527: PUSH
21528: LD_INT 0
21530: PLUS
21531: PPUSH
21532: CALL_OW 505
// end ;
21536: LD_VAR 0 3
21540: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21541: LD_INT 0
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
// if not hack in hackTanks then
21547: LD_VAR 0 1
21551: PUSH
21552: LD_EXP 75
21556: IN
21557: NOT
21558: IFFALSE 21562
// exit ;
21560: GO 21802
// index := GetElementIndex ( hackTanks , hack ) ;
21562: LD_ADDR_VAR 0 4
21566: PUSH
21567: LD_EXP 75
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 29034 0 2
21581: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21582: LD_ADDR_VAR 0 3
21586: PUSH
21587: DOUBLE
21588: LD_EXP 76
21592: PUSH
21593: LD_VAR 0 4
21597: ARRAY
21598: INC
21599: ST_TO_ADDR
21600: LD_INT 1
21602: PUSH
21603: FOR_DOWNTO
21604: IFFALSE 21776
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21606: LD_ADDR_VAR 0 5
21610: PUSH
21611: LD_EXP 76
21615: PUSH
21616: LD_VAR 0 4
21620: ARRAY
21621: PUSH
21622: LD_VAR 0 3
21626: ARRAY
21627: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21628: LD_VAR 0 5
21632: PUSH
21633: LD_INT 1
21635: ARRAY
21636: PPUSH
21637: CALL_OW 302
21641: NOT
21642: PUSH
21643: LD_VAR 0 5
21647: PUSH
21648: LD_INT 1
21650: ARRAY
21651: PPUSH
21652: CALL_OW 255
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 255
21666: NONEQUAL
21667: OR
21668: IFFALSE 21774
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21670: LD_VAR 0 5
21674: PUSH
21675: LD_INT 1
21677: ARRAY
21678: PPUSH
21679: CALL_OW 305
21683: PUSH
21684: LD_VAR 0 5
21688: PUSH
21689: LD_INT 1
21691: ARRAY
21692: PPUSH
21693: CALL_OW 255
21697: PUSH
21698: LD_VAR 0 1
21702: PPUSH
21703: CALL_OW 255
21707: EQUAL
21708: AND
21709: IFFALSE 21733
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21711: LD_VAR 0 5
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: PPUSH
21720: LD_VAR 0 5
21724: PUSH
21725: LD_INT 2
21727: ARRAY
21728: PPUSH
21729: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21733: LD_ADDR_EXP 76
21737: PUSH
21738: LD_EXP 76
21742: PPUSH
21743: LD_VAR 0 4
21747: PPUSH
21748: LD_EXP 76
21752: PUSH
21753: LD_VAR 0 4
21757: ARRAY
21758: PPUSH
21759: LD_VAR 0 3
21763: PPUSH
21764: CALL_OW 3
21768: PPUSH
21769: CALL_OW 1
21773: ST_TO_ADDR
// end ; end ;
21774: GO 21603
21776: POP
21777: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_EXP 76
21787: PUSH
21788: LD_VAR 0 4
21792: ARRAY
21793: PUSH
21794: LD_INT 0
21796: PLUS
21797: PPUSH
21798: CALL_OW 505
// end ;
21802: LD_VAR 0 2
21806: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21807: LD_INT 0
21809: PPUSH
21810: PPUSH
21811: PPUSH
21812: PPUSH
// if not hack in hackTanks then
21813: LD_VAR 0 1
21817: PUSH
21818: LD_EXP 75
21822: IN
21823: NOT
21824: IFFALSE 21828
// exit ;
21826: GO 21913
// index := GetElementIndex ( hackTanks , hack ) ;
21828: LD_ADDR_VAR 0 5
21832: PUSH
21833: LD_EXP 75
21837: PPUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL 29034 0 2
21847: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21848: LD_ADDR_VAR 0 4
21852: PUSH
21853: DOUBLE
21854: LD_INT 1
21856: DEC
21857: ST_TO_ADDR
21858: LD_EXP 76
21862: PUSH
21863: LD_VAR 0 5
21867: ARRAY
21868: PUSH
21869: FOR_TO
21870: IFFALSE 21911
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21872: LD_EXP 76
21876: PUSH
21877: LD_VAR 0 5
21881: ARRAY
21882: PUSH
21883: LD_VAR 0 4
21887: ARRAY
21888: PUSH
21889: LD_INT 1
21891: ARRAY
21892: PUSH
21893: LD_VAR 0 2
21897: EQUAL
21898: IFFALSE 21909
// KillUnit ( vehicle ) ;
21900: LD_VAR 0 2
21904: PPUSH
21905: CALL_OW 66
21909: GO 21869
21911: POP
21912: POP
// end ;
21913: LD_VAR 0 3
21917: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21918: LD_EXP 80
21922: NOT
21923: IFFALSE 21958
21925: GO 21927
21927: DISABLE
// begin initMiner := true ;
21928: LD_ADDR_EXP 80
21932: PUSH
21933: LD_INT 1
21935: ST_TO_ADDR
// minersList := [ ] ;
21936: LD_ADDR_EXP 81
21940: PUSH
21941: EMPTY
21942: ST_TO_ADDR
// minerMinesList := [ ] ;
21943: LD_ADDR_EXP 82
21947: PUSH
21948: EMPTY
21949: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21950: LD_ADDR_EXP 83
21954: PUSH
21955: LD_INT 5
21957: ST_TO_ADDR
// end ;
21958: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21959: LD_EXP 80
21963: PUSH
21964: LD_INT 34
21966: PUSH
21967: LD_EXP 91
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PPUSH
21976: CALL_OW 69
21980: AND
21981: IFFALSE 22444
21983: GO 21985
21985: DISABLE
21986: LD_INT 0
21988: PPUSH
21989: PPUSH
21990: PPUSH
21991: PPUSH
// begin enable ;
21992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21993: LD_ADDR_VAR 0 1
21997: PUSH
21998: LD_INT 34
22000: PUSH
22001: LD_EXP 91
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: PUSH
22015: FOR_IN
22016: IFFALSE 22088
// begin if not i in minersList then
22018: LD_VAR 0 1
22022: PUSH
22023: LD_EXP 81
22027: IN
22028: NOT
22029: IFFALSE 22086
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22031: LD_ADDR_EXP 81
22035: PUSH
22036: LD_EXP 81
22040: PPUSH
22041: LD_EXP 81
22045: PUSH
22046: LD_INT 1
22048: PLUS
22049: PPUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 1
22059: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22060: LD_ADDR_EXP 82
22064: PUSH
22065: LD_EXP 82
22069: PPUSH
22070: LD_EXP 82
22074: PUSH
22075: LD_INT 1
22077: PLUS
22078: PPUSH
22079: EMPTY
22080: PPUSH
22081: CALL_OW 1
22085: ST_TO_ADDR
// end end ;
22086: GO 22015
22088: POP
22089: POP
// for i := minerMinesList downto 1 do
22090: LD_ADDR_VAR 0 1
22094: PUSH
22095: DOUBLE
22096: LD_EXP 82
22100: INC
22101: ST_TO_ADDR
22102: LD_INT 1
22104: PUSH
22105: FOR_DOWNTO
22106: IFFALSE 22442
// begin if IsLive ( minersList [ i ] ) then
22108: LD_EXP 81
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PPUSH
22119: CALL_OW 300
22123: IFFALSE 22151
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22125: LD_EXP 81
22129: PUSH
22130: LD_VAR 0 1
22134: ARRAY
22135: PPUSH
22136: LD_EXP 82
22140: PUSH
22141: LD_VAR 0 1
22145: ARRAY
22146: PPUSH
22147: CALL_OW 505
// if not minerMinesList [ i ] then
22151: LD_EXP 82
22155: PUSH
22156: LD_VAR 0 1
22160: ARRAY
22161: NOT
22162: IFFALSE 22166
// continue ;
22164: GO 22105
// for j := minerMinesList [ i ] downto 1 do
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: DOUBLE
22172: LD_EXP 82
22176: PUSH
22177: LD_VAR 0 1
22181: ARRAY
22182: INC
22183: ST_TO_ADDR
22184: LD_INT 1
22186: PUSH
22187: FOR_DOWNTO
22188: IFFALSE 22438
// begin side := GetSide ( minersList [ i ] ) ;
22190: LD_ADDR_VAR 0 3
22194: PUSH
22195: LD_EXP 81
22199: PUSH
22200: LD_VAR 0 1
22204: ARRAY
22205: PPUSH
22206: CALL_OW 255
22210: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22211: LD_ADDR_VAR 0 4
22215: PUSH
22216: LD_EXP 82
22220: PUSH
22221: LD_VAR 0 1
22225: ARRAY
22226: PUSH
22227: LD_VAR 0 2
22231: ARRAY
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: LD_EXP 82
22241: PUSH
22242: LD_VAR 0 1
22246: ARRAY
22247: PUSH
22248: LD_VAR 0 2
22252: ARRAY
22253: PUSH
22254: LD_INT 2
22256: ARRAY
22257: PPUSH
22258: CALL_OW 428
22262: ST_TO_ADDR
// if not tmp then
22263: LD_VAR 0 4
22267: NOT
22268: IFFALSE 22272
// continue ;
22270: GO 22187
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22272: LD_VAR 0 4
22276: PUSH
22277: LD_INT 81
22279: PUSH
22280: LD_VAR 0 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: IN
22294: PUSH
22295: LD_EXP 82
22299: PUSH
22300: LD_VAR 0 1
22304: ARRAY
22305: PUSH
22306: LD_VAR 0 2
22310: ARRAY
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: LD_EXP 82
22320: PUSH
22321: LD_VAR 0 1
22325: ARRAY
22326: PUSH
22327: LD_VAR 0 2
22331: ARRAY
22332: PUSH
22333: LD_INT 2
22335: ARRAY
22336: PPUSH
22337: CALL_OW 458
22341: AND
22342: IFFALSE 22436
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22344: LD_EXP 82
22348: PUSH
22349: LD_VAR 0 1
22353: ARRAY
22354: PUSH
22355: LD_VAR 0 2
22359: ARRAY
22360: PUSH
22361: LD_INT 1
22363: ARRAY
22364: PPUSH
22365: LD_EXP 82
22369: PUSH
22370: LD_VAR 0 1
22374: ARRAY
22375: PUSH
22376: LD_VAR 0 2
22380: ARRAY
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: PPUSH
22386: LD_VAR 0 3
22390: PPUSH
22391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22395: LD_ADDR_EXP 82
22399: PUSH
22400: LD_EXP 82
22404: PPUSH
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_EXP 82
22414: PUSH
22415: LD_VAR 0 1
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 2
22425: PPUSH
22426: CALL_OW 3
22430: PPUSH
22431: CALL_OW 1
22435: ST_TO_ADDR
// end ; end ;
22436: GO 22187
22438: POP
22439: POP
// end ;
22440: GO 22105
22442: POP
22443: POP
// end ;
22444: PPOPN 4
22446: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
// result := false ;
22451: LD_ADDR_VAR 0 4
22455: PUSH
22456: LD_INT 0
22458: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22459: LD_VAR 0 1
22463: PPUSH
22464: CALL_OW 264
22468: PUSH
22469: LD_EXP 91
22473: EQUAL
22474: NOT
22475: IFFALSE 22479
// exit ;
22477: GO 22719
// index := GetElementIndex ( minersList , unit ) ;
22479: LD_ADDR_VAR 0 5
22483: PUSH
22484: LD_EXP 81
22488: PPUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL 29034 0 2
22498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22499: LD_EXP 82
22503: PUSH
22504: LD_VAR 0 5
22508: ARRAY
22509: PUSH
22510: LD_EXP 83
22514: GREATEREQUAL
22515: IFFALSE 22519
// exit ;
22517: GO 22719
// ComMoveXY ( unit , x , y ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_VAR 0 2
22528: PPUSH
22529: LD_VAR 0 3
22533: PPUSH
22534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22538: LD_INT 35
22540: PPUSH
22541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22545: LD_VAR 0 1
22549: PPUSH
22550: LD_VAR 0 2
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: CALL 59806 0 3
22564: NOT
22565: PUSH
22566: LD_VAR 0 1
22570: PPUSH
22571: CALL_OW 314
22575: AND
22576: IFFALSE 22580
// exit ;
22578: GO 22719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22580: LD_VAR 0 2
22584: PPUSH
22585: LD_VAR 0 3
22589: PPUSH
22590: CALL_OW 428
22594: PUSH
22595: LD_VAR 0 1
22599: EQUAL
22600: PUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 314
22610: NOT
22611: AND
22612: IFFALSE 22538
// PlaySoundXY ( x , y , PlantMine ) ;
22614: LD_VAR 0 2
22618: PPUSH
22619: LD_VAR 0 3
22623: PPUSH
22624: LD_STRING PlantMine
22626: PPUSH
22627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22631: LD_VAR 0 2
22635: PPUSH
22636: LD_VAR 0 3
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 255
22650: PPUSH
22651: LD_INT 0
22653: PPUSH
22654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22658: LD_ADDR_EXP 82
22662: PUSH
22663: LD_EXP 82
22667: PPUSH
22668: LD_VAR 0 5
22672: PUSH
22673: LD_EXP 82
22677: PUSH
22678: LD_VAR 0 5
22682: ARRAY
22683: PUSH
22684: LD_INT 1
22686: PLUS
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PPUSH
22692: LD_VAR 0 2
22696: PUSH
22697: LD_VAR 0 3
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL 29249 0 3
22710: ST_TO_ADDR
// result := true ;
22711: LD_ADDR_VAR 0 4
22715: PUSH
22716: LD_INT 1
22718: ST_TO_ADDR
// end ;
22719: LD_VAR 0 4
22723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22724: LD_INT 0
22726: PPUSH
22727: PPUSH
22728: PPUSH
// if not unit in minersList then
22729: LD_VAR 0 1
22733: PUSH
22734: LD_EXP 81
22738: IN
22739: NOT
22740: IFFALSE 22744
// exit ;
22742: GO 23136
// index := GetElementIndex ( minersList , unit ) ;
22744: LD_ADDR_VAR 0 6
22748: PUSH
22749: LD_EXP 81
22753: PPUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL 29034 0 2
22763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22764: LD_ADDR_VAR 0 5
22768: PUSH
22769: DOUBLE
22770: LD_EXP 82
22774: PUSH
22775: LD_VAR 0 6
22779: ARRAY
22780: INC
22781: ST_TO_ADDR
22782: LD_INT 1
22784: PUSH
22785: FOR_DOWNTO
22786: IFFALSE 22947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22788: LD_EXP 82
22792: PUSH
22793: LD_VAR 0 6
22797: ARRAY
22798: PUSH
22799: LD_VAR 0 5
22803: ARRAY
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: PUSH
22809: LD_VAR 0 2
22813: EQUAL
22814: PUSH
22815: LD_EXP 82
22819: PUSH
22820: LD_VAR 0 6
22824: ARRAY
22825: PUSH
22826: LD_VAR 0 5
22830: ARRAY
22831: PUSH
22832: LD_INT 2
22834: ARRAY
22835: PUSH
22836: LD_VAR 0 3
22840: EQUAL
22841: AND
22842: IFFALSE 22945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22844: LD_EXP 82
22848: PUSH
22849: LD_VAR 0 6
22853: ARRAY
22854: PUSH
22855: LD_VAR 0 5
22859: ARRAY
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: LD_EXP 82
22869: PUSH
22870: LD_VAR 0 6
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 5
22880: ARRAY
22881: PUSH
22882: LD_INT 2
22884: ARRAY
22885: PPUSH
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 255
22895: PPUSH
22896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22900: LD_ADDR_EXP 82
22904: PUSH
22905: LD_EXP 82
22909: PPUSH
22910: LD_VAR 0 6
22914: PPUSH
22915: LD_EXP 82
22919: PUSH
22920: LD_VAR 0 6
22924: ARRAY
22925: PPUSH
22926: LD_VAR 0 5
22930: PPUSH
22931: CALL_OW 3
22935: PPUSH
22936: CALL_OW 1
22940: ST_TO_ADDR
// exit ;
22941: POP
22942: POP
22943: GO 23136
// end ; end ;
22945: GO 22785
22947: POP
22948: POP
// for i := minerMinesList [ index ] downto 1 do
22949: LD_ADDR_VAR 0 5
22953: PUSH
22954: DOUBLE
22955: LD_EXP 82
22959: PUSH
22960: LD_VAR 0 6
22964: ARRAY
22965: INC
22966: ST_TO_ADDR
22967: LD_INT 1
22969: PUSH
22970: FOR_DOWNTO
22971: IFFALSE 23134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22973: LD_EXP 82
22977: PUSH
22978: LD_VAR 0 6
22982: ARRAY
22983: PUSH
22984: LD_VAR 0 5
22988: ARRAY
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PPUSH
22994: LD_EXP 82
22998: PUSH
22999: LD_VAR 0 6
23003: ARRAY
23004: PUSH
23005: LD_VAR 0 5
23009: ARRAY
23010: PUSH
23011: LD_INT 2
23013: ARRAY
23014: PPUSH
23015: LD_VAR 0 2
23019: PPUSH
23020: LD_VAR 0 3
23024: PPUSH
23025: CALL_OW 298
23029: PUSH
23030: LD_INT 6
23032: LESS
23033: IFFALSE 23132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23035: LD_EXP 82
23039: PUSH
23040: LD_VAR 0 6
23044: ARRAY
23045: PUSH
23046: LD_VAR 0 5
23050: ARRAY
23051: PUSH
23052: LD_INT 1
23054: ARRAY
23055: PPUSH
23056: LD_EXP 82
23060: PUSH
23061: LD_VAR 0 6
23065: ARRAY
23066: PUSH
23067: LD_VAR 0 5
23071: ARRAY
23072: PUSH
23073: LD_INT 2
23075: ARRAY
23076: PPUSH
23077: LD_VAR 0 1
23081: PPUSH
23082: CALL_OW 255
23086: PPUSH
23087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23091: LD_ADDR_EXP 82
23095: PUSH
23096: LD_EXP 82
23100: PPUSH
23101: LD_VAR 0 6
23105: PPUSH
23106: LD_EXP 82
23110: PUSH
23111: LD_VAR 0 6
23115: ARRAY
23116: PPUSH
23117: LD_VAR 0 5
23121: PPUSH
23122: CALL_OW 3
23126: PPUSH
23127: CALL_OW 1
23131: ST_TO_ADDR
// end ; end ;
23132: GO 22970
23134: POP
23135: POP
// end ;
23136: LD_VAR 0 4
23140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23141: LD_INT 0
23143: PPUSH
23144: PPUSH
23145: PPUSH
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
23151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23152: LD_VAR 0 1
23156: PPUSH
23157: CALL_OW 264
23161: PUSH
23162: LD_EXP 91
23166: EQUAL
23167: NOT
23168: PUSH
23169: LD_VAR 0 1
23173: PUSH
23174: LD_EXP 81
23178: IN
23179: NOT
23180: OR
23181: IFFALSE 23185
// exit ;
23183: GO 23507
// index := GetElementIndex ( minersList , unit ) ;
23185: LD_ADDR_VAR 0 6
23189: PUSH
23190: LD_EXP 81
23194: PPUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL 29034 0 2
23204: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23205: LD_ADDR_VAR 0 8
23209: PUSH
23210: LD_EXP 83
23214: PUSH
23215: LD_EXP 82
23219: PUSH
23220: LD_VAR 0 6
23224: ARRAY
23225: MINUS
23226: ST_TO_ADDR
// if not minesFreeAmount then
23227: LD_VAR 0 8
23231: NOT
23232: IFFALSE 23236
// exit ;
23234: GO 23507
// tmp := [ ] ;
23236: LD_ADDR_VAR 0 7
23240: PUSH
23241: EMPTY
23242: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23243: LD_ADDR_VAR 0 5
23247: PUSH
23248: DOUBLE
23249: LD_INT 1
23251: DEC
23252: ST_TO_ADDR
23253: LD_VAR 0 8
23257: PUSH
23258: FOR_TO
23259: IFFALSE 23454
// begin _d := rand ( 0 , 5 ) ;
23261: LD_ADDR_VAR 0 11
23265: PUSH
23266: LD_INT 0
23268: PPUSH
23269: LD_INT 5
23271: PPUSH
23272: CALL_OW 12
23276: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23277: LD_ADDR_VAR 0 12
23281: PUSH
23282: LD_INT 2
23284: PPUSH
23285: LD_INT 6
23287: PPUSH
23288: CALL_OW 12
23292: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23293: LD_ADDR_VAR 0 9
23297: PUSH
23298: LD_VAR 0 2
23302: PPUSH
23303: LD_VAR 0 11
23307: PPUSH
23308: LD_VAR 0 12
23312: PPUSH
23313: CALL_OW 272
23317: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23318: LD_ADDR_VAR 0 10
23322: PUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_VAR 0 11
23332: PPUSH
23333: LD_VAR 0 12
23337: PPUSH
23338: CALL_OW 273
23342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23343: LD_VAR 0 9
23347: PPUSH
23348: LD_VAR 0 10
23352: PPUSH
23353: CALL_OW 488
23357: PUSH
23358: LD_VAR 0 9
23362: PUSH
23363: LD_VAR 0 10
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_VAR 0 7
23376: IN
23377: NOT
23378: AND
23379: PUSH
23380: LD_VAR 0 9
23384: PPUSH
23385: LD_VAR 0 10
23389: PPUSH
23390: CALL_OW 458
23394: NOT
23395: AND
23396: IFFALSE 23438
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23398: LD_ADDR_VAR 0 7
23402: PUSH
23403: LD_VAR 0 7
23407: PPUSH
23408: LD_VAR 0 7
23412: PUSH
23413: LD_INT 1
23415: PLUS
23416: PPUSH
23417: LD_VAR 0 9
23421: PUSH
23422: LD_VAR 0 10
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PPUSH
23431: CALL_OW 1
23435: ST_TO_ADDR
23436: GO 23452
// i := i - 1 ;
23438: LD_ADDR_VAR 0 5
23442: PUSH
23443: LD_VAR 0 5
23447: PUSH
23448: LD_INT 1
23450: MINUS
23451: ST_TO_ADDR
// end ;
23452: GO 23258
23454: POP
23455: POP
// for i in tmp do
23456: LD_ADDR_VAR 0 5
23460: PUSH
23461: LD_VAR 0 7
23465: PUSH
23466: FOR_IN
23467: IFFALSE 23505
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23469: LD_VAR 0 1
23473: PPUSH
23474: LD_VAR 0 5
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PPUSH
23483: LD_VAR 0 5
23487: PUSH
23488: LD_INT 2
23490: ARRAY
23491: PPUSH
23492: CALL 22447 0 3
23496: NOT
23497: IFFALSE 23503
// exit ;
23499: POP
23500: POP
23501: GO 23507
23503: GO 23466
23505: POP
23506: POP
// end ;
23507: LD_VAR 0 4
23511: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23512: LD_INT 0
23514: PPUSH
23515: PPUSH
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
23520: PPUSH
// if not GetClass ( unit ) = class_sniper then
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL_OW 257
23530: PUSH
23531: LD_INT 5
23533: EQUAL
23534: NOT
23535: IFFALSE 23539
// exit ;
23537: GO 23927
// dist := 8 ;
23539: LD_ADDR_VAR 0 5
23543: PUSH
23544: LD_INT 8
23546: ST_TO_ADDR
// viewRange := 12 ;
23547: LD_ADDR_VAR 0 7
23551: PUSH
23552: LD_INT 12
23554: ST_TO_ADDR
// side := GetSide ( unit ) ;
23555: LD_ADDR_VAR 0 6
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 255
23569: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23570: LD_INT 61
23572: PPUSH
23573: LD_VAR 0 6
23577: PPUSH
23578: CALL_OW 321
23582: PUSH
23583: LD_INT 2
23585: EQUAL
23586: IFFALSE 23596
// viewRange := 16 ;
23588: LD_ADDR_VAR 0 7
23592: PUSH
23593: LD_INT 16
23595: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23596: LD_VAR 0 1
23600: PPUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: CALL_OW 297
23615: PUSH
23616: LD_VAR 0 5
23620: GREATER
23621: IFFALSE 23700
// begin ComMoveXY ( unit , x , y ) ;
23623: LD_VAR 0 1
23627: PPUSH
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_VAR 0 3
23637: PPUSH
23638: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23642: LD_INT 35
23644: PPUSH
23645: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23649: LD_VAR 0 1
23653: PPUSH
23654: LD_VAR 0 2
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: CALL 59806 0 3
23668: NOT
23669: IFFALSE 23673
// exit ;
23671: GO 23927
// until GetDistUnitXY ( unit , x , y ) < dist ;
23673: LD_VAR 0 1
23677: PPUSH
23678: LD_VAR 0 2
23682: PPUSH
23683: LD_VAR 0 3
23687: PPUSH
23688: CALL_OW 297
23692: PUSH
23693: LD_VAR 0 5
23697: LESS
23698: IFFALSE 23642
// end ; ComTurnXY ( unit , x , y ) ;
23700: LD_VAR 0 1
23704: PPUSH
23705: LD_VAR 0 2
23709: PPUSH
23710: LD_VAR 0 3
23714: PPUSH
23715: CALL_OW 118
// wait ( 5 ) ;
23719: LD_INT 5
23721: PPUSH
23722: CALL_OW 67
// _d := GetDir ( unit ) ;
23726: LD_ADDR_VAR 0 10
23730: PUSH
23731: LD_VAR 0 1
23735: PPUSH
23736: CALL_OW 254
23740: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23741: LD_ADDR_VAR 0 8
23745: PUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 250
23755: PPUSH
23756: LD_VAR 0 10
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: CALL_OW 272
23770: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 251
23785: PPUSH
23786: LD_VAR 0 10
23790: PPUSH
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL_OW 273
23800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23801: LD_VAR 0 8
23805: PPUSH
23806: LD_VAR 0 9
23810: PPUSH
23811: CALL_OW 488
23815: NOT
23816: IFFALSE 23820
// exit ;
23818: GO 23927
// ComAnimCustom ( unit , 1 ) ;
23820: LD_VAR 0 1
23824: PPUSH
23825: LD_INT 1
23827: PPUSH
23828: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23832: LD_VAR 0 8
23836: PPUSH
23837: LD_VAR 0 9
23841: PPUSH
23842: LD_VAR 0 6
23846: PPUSH
23847: LD_VAR 0 7
23851: PPUSH
23852: CALL_OW 330
// repeat wait ( 1 ) ;
23856: LD_INT 1
23858: PPUSH
23859: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 316
23872: PUSH
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 314
23882: OR
23883: PUSH
23884: LD_VAR 0 1
23888: PPUSH
23889: CALL_OW 302
23893: NOT
23894: OR
23895: PUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 301
23905: OR
23906: IFFALSE 23856
// RemoveSeeing ( _x , _y , side ) ;
23908: LD_VAR 0 8
23912: PPUSH
23913: LD_VAR 0 9
23917: PPUSH
23918: LD_VAR 0 6
23922: PPUSH
23923: CALL_OW 331
// end ; end_of_file
23927: LD_VAR 0 4
23931: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23932: LD_VAR 0 1
23936: PUSH
23937: LD_INT 200
23939: DOUBLE
23940: GREATEREQUAL
23941: IFFALSE 23949
23943: LD_INT 299
23945: DOUBLE
23946: LESSEQUAL
23947: IFTRUE 23951
23949: GO 23983
23951: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23952: LD_VAR 0 1
23956: PPUSH
23957: LD_VAR 0 2
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_VAR 0 4
23971: PPUSH
23972: LD_VAR 0 5
23976: PPUSH
23977: CALL 19670 0 5
23981: GO 24060
23983: LD_INT 300
23985: DOUBLE
23986: GREATEREQUAL
23987: IFFALSE 23995
23989: LD_INT 399
23991: DOUBLE
23992: LESSEQUAL
23993: IFTRUE 23997
23995: GO 24059
23997: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23998: LD_VAR 0 1
24002: PPUSH
24003: LD_VAR 0 2
24007: PPUSH
24008: LD_VAR 0 3
24012: PPUSH
24013: LD_VAR 0 4
24017: PPUSH
24018: LD_VAR 0 5
24022: PPUSH
24023: LD_VAR 0 6
24027: PPUSH
24028: LD_VAR 0 7
24032: PPUSH
24033: LD_VAR 0 8
24037: PPUSH
24038: LD_VAR 0 9
24042: PPUSH
24043: LD_VAR 0 10
24047: PPUSH
24048: LD_VAR 0 11
24052: PPUSH
24053: CALL 17312 0 11
24057: GO 24060
24059: POP
// end ;
24060: PPOPN 11
24062: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24063: LD_VAR 0 1
24067: PPUSH
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: LD_VAR 0 4
24082: PPUSH
24083: LD_VAR 0 5
24087: PPUSH
24088: CALL 19406 0 5
// end ; end_of_file
24092: PPOPN 5
24094: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24095: LD_INT 0
24097: PPUSH
// ar_miner := 81 ;
24098: LD_ADDR_EXP 91
24102: PUSH
24103: LD_INT 81
24105: ST_TO_ADDR
// ar_crane := 88 ;
24106: LD_ADDR_EXP 90
24110: PUSH
24111: LD_INT 88
24113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24114: LD_ADDR_EXP 85
24118: PUSH
24119: LD_INT 89
24121: ST_TO_ADDR
// us_hack := 99 ;
24122: LD_ADDR_EXP 86
24126: PUSH
24127: LD_INT 99
24129: ST_TO_ADDR
// us_artillery := 97 ;
24130: LD_ADDR_EXP 87
24134: PUSH
24135: LD_INT 97
24137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24138: LD_ADDR_EXP 88
24142: PUSH
24143: LD_INT 91
24145: ST_TO_ADDR
// ar_mortar := 92 ;
24146: LD_ADDR_EXP 89
24150: PUSH
24151: LD_INT 92
24153: ST_TO_ADDR
// ru_radar := 98 ;
24154: LD_ADDR_EXP 84
24158: PUSH
24159: LD_INT 98
24161: ST_TO_ADDR
// tech_Artillery := 80 ;
24162: LD_ADDR_EXP 92
24166: PUSH
24167: LD_INT 80
24169: ST_TO_ADDR
// tech_RadMat := 81 ;
24170: LD_ADDR_EXP 93
24174: PUSH
24175: LD_INT 81
24177: ST_TO_ADDR
// tech_BasicTools := 82 ;
24178: LD_ADDR_EXP 94
24182: PUSH
24183: LD_INT 82
24185: ST_TO_ADDR
// tech_Cargo := 83 ;
24186: LD_ADDR_EXP 95
24190: PUSH
24191: LD_INT 83
24193: ST_TO_ADDR
// tech_Track := 84 ;
24194: LD_ADDR_EXP 96
24198: PUSH
24199: LD_INT 84
24201: ST_TO_ADDR
// tech_Crane := 85 ;
24202: LD_ADDR_EXP 97
24206: PUSH
24207: LD_INT 85
24209: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24210: LD_ADDR_EXP 98
24214: PUSH
24215: LD_INT 86
24217: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24218: LD_ADDR_EXP 99
24222: PUSH
24223: LD_INT 87
24225: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24226: LD_ADDR_EXP 100
24230: PUSH
24231: LD_INT 88
24233: ST_TO_ADDR
// class_mastodont := 31 ;
24234: LD_ADDR_EXP 101
24238: PUSH
24239: LD_INT 31
24241: ST_TO_ADDR
// class_horse := 21 ;
24242: LD_ADDR_EXP 102
24246: PUSH
24247: LD_INT 21
24249: ST_TO_ADDR
// end ;
24250: LD_VAR 0 1
24254: RET
// every 1 do
24255: GO 24257
24257: DISABLE
// InitGlobalVariables ; end_of_file
24258: CALL 24095 0 0
24262: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
// if exist_mode then
24267: LD_VAR 0 2
24271: IFFALSE 24296
// unit := CreateCharacter ( prefix & ident ) else
24273: LD_ADDR_VAR 0 5
24277: PUSH
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 1
24287: STR
24288: PPUSH
24289: CALL_OW 34
24293: ST_TO_ADDR
24294: GO 24311
// unit := NewCharacter ( ident ) ;
24296: LD_ADDR_VAR 0 5
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 25
24310: ST_TO_ADDR
// result := unit ;
24311: LD_ADDR_VAR 0 4
24315: PUSH
24316: LD_VAR 0 5
24320: ST_TO_ADDR
// end ;
24321: LD_VAR 0 4
24325: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24326: LD_INT 0
24328: PPUSH
24329: PPUSH
// if not side or not nation then
24330: LD_VAR 0 1
24334: NOT
24335: PUSH
24336: LD_VAR 0 2
24340: NOT
24341: OR
24342: IFFALSE 24346
// exit ;
24344: GO 25114
// case nation of nation_american :
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: DOUBLE
24354: EQUAL
24355: IFTRUE 24359
24357: GO 24573
24359: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24360: LD_ADDR_VAR 0 4
24364: PUSH
24365: LD_INT 35
24367: PUSH
24368: LD_INT 45
24370: PUSH
24371: LD_INT 46
24373: PUSH
24374: LD_INT 47
24376: PUSH
24377: LD_INT 82
24379: PUSH
24380: LD_INT 83
24382: PUSH
24383: LD_INT 84
24385: PUSH
24386: LD_INT 85
24388: PUSH
24389: LD_INT 86
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: LD_INT 6
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 16
24406: PUSH
24407: LD_INT 7
24409: PUSH
24410: LD_INT 12
24412: PUSH
24413: LD_INT 13
24415: PUSH
24416: LD_INT 10
24418: PUSH
24419: LD_INT 14
24421: PUSH
24422: LD_INT 20
24424: PUSH
24425: LD_INT 21
24427: PUSH
24428: LD_INT 22
24430: PUSH
24431: LD_INT 25
24433: PUSH
24434: LD_INT 32
24436: PUSH
24437: LD_INT 27
24439: PUSH
24440: LD_INT 36
24442: PUSH
24443: LD_INT 69
24445: PUSH
24446: LD_INT 39
24448: PUSH
24449: LD_INT 34
24451: PUSH
24452: LD_INT 40
24454: PUSH
24455: LD_INT 48
24457: PUSH
24458: LD_INT 49
24460: PUSH
24461: LD_INT 50
24463: PUSH
24464: LD_INT 51
24466: PUSH
24467: LD_INT 52
24469: PUSH
24470: LD_INT 53
24472: PUSH
24473: LD_INT 54
24475: PUSH
24476: LD_INT 55
24478: PUSH
24479: LD_INT 56
24481: PUSH
24482: LD_INT 57
24484: PUSH
24485: LD_INT 58
24487: PUSH
24488: LD_INT 59
24490: PUSH
24491: LD_INT 60
24493: PUSH
24494: LD_INT 61
24496: PUSH
24497: LD_INT 62
24499: PUSH
24500: LD_INT 80
24502: PUSH
24503: LD_INT 82
24505: PUSH
24506: LD_INT 83
24508: PUSH
24509: LD_INT 84
24511: PUSH
24512: LD_INT 85
24514: PUSH
24515: LD_INT 86
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
24571: GO 25038
24573: LD_INT 2
24575: DOUBLE
24576: EQUAL
24577: IFTRUE 24581
24579: GO 24807
24581: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24582: LD_ADDR_VAR 0 4
24586: PUSH
24587: LD_INT 35
24589: PUSH
24590: LD_INT 45
24592: PUSH
24593: LD_INT 46
24595: PUSH
24596: LD_INT 47
24598: PUSH
24599: LD_INT 82
24601: PUSH
24602: LD_INT 83
24604: PUSH
24605: LD_INT 84
24607: PUSH
24608: LD_INT 85
24610: PUSH
24611: LD_INT 87
24613: PUSH
24614: LD_INT 70
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 11
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 6
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 18
24640: PUSH
24641: LD_INT 7
24643: PUSH
24644: LD_INT 17
24646: PUSH
24647: LD_INT 8
24649: PUSH
24650: LD_INT 20
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_INT 72
24661: PUSH
24662: LD_INT 26
24664: PUSH
24665: LD_INT 69
24667: PUSH
24668: LD_INT 39
24670: PUSH
24671: LD_INT 40
24673: PUSH
24674: LD_INT 41
24676: PUSH
24677: LD_INT 42
24679: PUSH
24680: LD_INT 43
24682: PUSH
24683: LD_INT 48
24685: PUSH
24686: LD_INT 49
24688: PUSH
24689: LD_INT 50
24691: PUSH
24692: LD_INT 51
24694: PUSH
24695: LD_INT 52
24697: PUSH
24698: LD_INT 53
24700: PUSH
24701: LD_INT 54
24703: PUSH
24704: LD_INT 55
24706: PUSH
24707: LD_INT 56
24709: PUSH
24710: LD_INT 60
24712: PUSH
24713: LD_INT 61
24715: PUSH
24716: LD_INT 62
24718: PUSH
24719: LD_INT 66
24721: PUSH
24722: LD_INT 67
24724: PUSH
24725: LD_INT 68
24727: PUSH
24728: LD_INT 81
24730: PUSH
24731: LD_INT 82
24733: PUSH
24734: LD_INT 83
24736: PUSH
24737: LD_INT 84
24739: PUSH
24740: LD_INT 85
24742: PUSH
24743: LD_INT 87
24745: PUSH
24746: LD_INT 88
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25038
24807: LD_INT 3
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 25037
24815: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24816: LD_ADDR_VAR 0 4
24820: PUSH
24821: LD_INT 46
24823: PUSH
24824: LD_INT 47
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 82
24835: PUSH
24836: LD_INT 83
24838: PUSH
24839: LD_INT 84
24841: PUSH
24842: LD_INT 85
24844: PUSH
24845: LD_INT 86
24847: PUSH
24848: LD_INT 11
24850: PUSH
24851: LD_INT 9
24853: PUSH
24854: LD_INT 20
24856: PUSH
24857: LD_INT 19
24859: PUSH
24860: LD_INT 21
24862: PUSH
24863: LD_INT 24
24865: PUSH
24866: LD_INT 22
24868: PUSH
24869: LD_INT 25
24871: PUSH
24872: LD_INT 28
24874: PUSH
24875: LD_INT 29
24877: PUSH
24878: LD_INT 30
24880: PUSH
24881: LD_INT 31
24883: PUSH
24884: LD_INT 37
24886: PUSH
24887: LD_INT 38
24889: PUSH
24890: LD_INT 32
24892: PUSH
24893: LD_INT 27
24895: PUSH
24896: LD_INT 33
24898: PUSH
24899: LD_INT 69
24901: PUSH
24902: LD_INT 39
24904: PUSH
24905: LD_INT 34
24907: PUSH
24908: LD_INT 40
24910: PUSH
24911: LD_INT 71
24913: PUSH
24914: LD_INT 23
24916: PUSH
24917: LD_INT 44
24919: PUSH
24920: LD_INT 48
24922: PUSH
24923: LD_INT 49
24925: PUSH
24926: LD_INT 50
24928: PUSH
24929: LD_INT 51
24931: PUSH
24932: LD_INT 52
24934: PUSH
24935: LD_INT 53
24937: PUSH
24938: LD_INT 54
24940: PUSH
24941: LD_INT 55
24943: PUSH
24944: LD_INT 56
24946: PUSH
24947: LD_INT 57
24949: PUSH
24950: LD_INT 58
24952: PUSH
24953: LD_INT 59
24955: PUSH
24956: LD_INT 63
24958: PUSH
24959: LD_INT 64
24961: PUSH
24962: LD_INT 65
24964: PUSH
24965: LD_INT 82
24967: PUSH
24968: LD_INT 83
24970: PUSH
24971: LD_INT 84
24973: PUSH
24974: LD_INT 85
24976: PUSH
24977: LD_INT 86
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
25035: GO 25038
25037: POP
// if state > - 1 and state < 3 then
25038: LD_VAR 0 3
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: GREATER
25047: PUSH
25048: LD_VAR 0 3
25052: PUSH
25053: LD_INT 3
25055: LESS
25056: AND
25057: IFFALSE 25114
// for i in result do
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 4
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25112
// if GetTech ( i , side ) <> state then
25072: LD_VAR 0 5
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 321
25086: PUSH
25087: LD_VAR 0 3
25091: NONEQUAL
25092: IFFALSE 25110
// result := result diff i ;
25094: LD_ADDR_VAR 0 4
25098: PUSH
25099: LD_VAR 0 4
25103: PUSH
25104: LD_VAR 0 5
25108: DIFF
25109: ST_TO_ADDR
25110: GO 25069
25112: POP
25113: POP
// end ;
25114: LD_VAR 0 4
25118: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
25123: PPUSH
// result := true ;
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: LD_INT 1
25131: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25132: LD_ADDR_VAR 0 5
25136: PUSH
25137: LD_VAR 0 2
25141: PPUSH
25142: CALL_OW 480
25146: ST_TO_ADDR
// if not tmp then
25147: LD_VAR 0 5
25151: NOT
25152: IFFALSE 25156
// exit ;
25154: GO 25205
// for i in tmp do
25156: LD_ADDR_VAR 0 4
25160: PUSH
25161: LD_VAR 0 5
25165: PUSH
25166: FOR_IN
25167: IFFALSE 25203
// if GetTech ( i , side ) <> state_researched then
25169: LD_VAR 0 4
25173: PPUSH
25174: LD_VAR 0 1
25178: PPUSH
25179: CALL_OW 321
25183: PUSH
25184: LD_INT 2
25186: NONEQUAL
25187: IFFALSE 25201
// begin result := false ;
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 0
25196: ST_TO_ADDR
// exit ;
25197: POP
25198: POP
25199: GO 25205
// end ;
25201: GO 25166
25203: POP
25204: POP
// end ;
25205: LD_VAR 0 3
25209: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25225: LD_VAR 0 1
25229: NOT
25230: PUSH
25231: LD_VAR 0 1
25235: PPUSH
25236: CALL_OW 257
25240: PUSH
25241: LD_INT 9
25243: NONEQUAL
25244: OR
25245: IFFALSE 25249
// exit ;
25247: GO 25822
// side := GetSide ( unit ) ;
25249: LD_ADDR_VAR 0 9
25253: PUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 255
25263: ST_TO_ADDR
// tech_space := tech_spacanom ;
25264: LD_ADDR_VAR 0 12
25268: PUSH
25269: LD_INT 29
25271: ST_TO_ADDR
// tech_time := tech_taurad ;
25272: LD_ADDR_VAR 0 13
25276: PUSH
25277: LD_INT 28
25279: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25280: LD_ADDR_VAR 0 11
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 310
25294: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25295: LD_VAR 0 11
25299: PPUSH
25300: CALL_OW 247
25304: PUSH
25305: LD_INT 2
25307: EQUAL
25308: IFFALSE 25312
// exit ;
25310: GO 25822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25312: LD_ADDR_VAR 0 8
25316: PUSH
25317: LD_INT 81
25319: PUSH
25320: LD_VAR 0 9
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: LD_INT 21
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 69
25354: ST_TO_ADDR
// if not tmp then
25355: LD_VAR 0 8
25359: NOT
25360: IFFALSE 25364
// exit ;
25362: GO 25822
// if in_unit then
25364: LD_VAR 0 11
25368: IFFALSE 25392
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25370: LD_ADDR_VAR 0 10
25374: PUSH
25375: LD_VAR 0 8
25379: PPUSH
25380: LD_VAR 0 11
25384: PPUSH
25385: CALL_OW 74
25389: ST_TO_ADDR
25390: GO 25412
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25392: LD_ADDR_VAR 0 10
25396: PUSH
25397: LD_VAR 0 8
25401: PPUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 74
25411: ST_TO_ADDR
// if not enemy then
25412: LD_VAR 0 10
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 25822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25421: LD_VAR 0 11
25425: PUSH
25426: LD_VAR 0 11
25430: PPUSH
25431: LD_VAR 0 10
25435: PPUSH
25436: CALL_OW 296
25440: PUSH
25441: LD_INT 13
25443: GREATER
25444: AND
25445: PUSH
25446: LD_VAR 0 1
25450: PPUSH
25451: LD_VAR 0 10
25455: PPUSH
25456: CALL_OW 296
25460: PUSH
25461: LD_INT 12
25463: GREATER
25464: OR
25465: IFFALSE 25469
// exit ;
25467: GO 25822
// missile := [ 1 ] ;
25469: LD_ADDR_VAR 0 14
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25480: LD_VAR 0 9
25484: PPUSH
25485: LD_VAR 0 12
25489: PPUSH
25490: CALL_OW 325
25494: IFFALSE 25523
// missile := Insert ( missile , missile + 1 , 2 ) ;
25496: LD_ADDR_VAR 0 14
25500: PUSH
25501: LD_VAR 0 14
25505: PPUSH
25506: LD_VAR 0 14
25510: PUSH
25511: LD_INT 1
25513: PLUS
25514: PPUSH
25515: LD_INT 2
25517: PPUSH
25518: CALL_OW 2
25522: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25523: LD_VAR 0 9
25527: PPUSH
25528: LD_VAR 0 13
25532: PPUSH
25533: CALL_OW 325
25537: PUSH
25538: LD_VAR 0 10
25542: PPUSH
25543: CALL_OW 255
25547: PPUSH
25548: LD_VAR 0 13
25552: PPUSH
25553: CALL_OW 325
25557: NOT
25558: AND
25559: IFFALSE 25588
// missile := Insert ( missile , missile + 1 , 3 ) ;
25561: LD_ADDR_VAR 0 14
25565: PUSH
25566: LD_VAR 0 14
25570: PPUSH
25571: LD_VAR 0 14
25575: PUSH
25576: LD_INT 1
25578: PLUS
25579: PPUSH
25580: LD_INT 3
25582: PPUSH
25583: CALL_OW 2
25587: ST_TO_ADDR
// if missile < 2 then
25588: LD_VAR 0 14
25592: PUSH
25593: LD_INT 2
25595: LESS
25596: IFFALSE 25600
// exit ;
25598: GO 25822
// x := GetX ( enemy ) ;
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_VAR 0 10
25609: PPUSH
25610: CALL_OW 250
25614: ST_TO_ADDR
// y := GetY ( enemy ) ;
25615: LD_ADDR_VAR 0 5
25619: PUSH
25620: LD_VAR 0 10
25624: PPUSH
25625: CALL_OW 251
25629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25630: LD_ADDR_VAR 0 6
25634: PUSH
25635: LD_VAR 0 4
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PPUSH
25644: LD_INT 1
25646: PPUSH
25647: CALL_OW 12
25651: PLUS
25652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25653: LD_ADDR_VAR 0 7
25657: PUSH
25658: LD_VAR 0 5
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: CALL_OW 12
25674: PLUS
25675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25676: LD_VAR 0 6
25680: PPUSH
25681: LD_VAR 0 7
25685: PPUSH
25686: CALL_OW 488
25690: NOT
25691: IFFALSE 25713
// begin _x := x ;
25693: LD_ADDR_VAR 0 6
25697: PUSH
25698: LD_VAR 0 4
25702: ST_TO_ADDR
// _y := y ;
25703: LD_ADDR_VAR 0 7
25707: PUSH
25708: LD_VAR 0 5
25712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_INT 1
25720: PPUSH
25721: LD_VAR 0 14
25725: PPUSH
25726: CALL_OW 12
25730: ST_TO_ADDR
// case i of 1 :
25731: LD_VAR 0 3
25735: PUSH
25736: LD_INT 1
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25744
25742: GO 25761
25744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_VAR 0 10
25754: PPUSH
25755: CALL_OW 115
25759: GO 25822
25761: LD_INT 2
25763: DOUBLE
25764: EQUAL
25765: IFTRUE 25769
25767: GO 25791
25769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25770: LD_VAR 0 1
25774: PPUSH
25775: LD_VAR 0 6
25779: PPUSH
25780: LD_VAR 0 7
25784: PPUSH
25785: CALL_OW 153
25789: GO 25822
25791: LD_INT 3
25793: DOUBLE
25794: EQUAL
25795: IFTRUE 25799
25797: GO 25821
25799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 6
25809: PPUSH
25810: LD_VAR 0 7
25814: PPUSH
25815: CALL_OW 154
25819: GO 25822
25821: POP
// end ;
25822: LD_VAR 0 2
25826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
// if not unit or not building then
25835: LD_VAR 0 1
25839: NOT
25840: PUSH
25841: LD_VAR 0 2
25845: NOT
25846: OR
25847: IFFALSE 25851
// exit ;
25849: GO 26009
// x := GetX ( building ) ;
25851: LD_ADDR_VAR 0 5
25855: PUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL_OW 250
25865: ST_TO_ADDR
// y := GetY ( building ) ;
25866: LD_ADDR_VAR 0 6
25870: PUSH
25871: LD_VAR 0 2
25875: PPUSH
25876: CALL_OW 251
25880: ST_TO_ADDR
// for i = 0 to 5 do
25881: LD_ADDR_VAR 0 4
25885: PUSH
25886: DOUBLE
25887: LD_INT 0
25889: DEC
25890: ST_TO_ADDR
25891: LD_INT 5
25893: PUSH
25894: FOR_TO
25895: IFFALSE 26007
// begin _x := ShiftX ( x , i , 3 ) ;
25897: LD_ADDR_VAR 0 7
25901: PUSH
25902: LD_VAR 0 5
25906: PPUSH
25907: LD_VAR 0 4
25911: PPUSH
25912: LD_INT 3
25914: PPUSH
25915: CALL_OW 272
25919: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25920: LD_ADDR_VAR 0 8
25924: PUSH
25925: LD_VAR 0 6
25929: PPUSH
25930: LD_VAR 0 4
25934: PPUSH
25935: LD_INT 3
25937: PPUSH
25938: CALL_OW 273
25942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25943: LD_VAR 0 7
25947: PPUSH
25948: LD_VAR 0 8
25952: PPUSH
25953: CALL_OW 488
25957: NOT
25958: IFFALSE 25962
// continue ;
25960: GO 25894
// if HexInfo ( _x , _y ) = 0 then
25962: LD_VAR 0 7
25966: PPUSH
25967: LD_VAR 0 8
25971: PPUSH
25972: CALL_OW 428
25976: PUSH
25977: LD_INT 0
25979: EQUAL
25980: IFFALSE 26005
// begin ComMoveXY ( unit , _x , _y ) ;
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 7
25991: PPUSH
25992: LD_VAR 0 8
25996: PPUSH
25997: CALL_OW 111
// exit ;
26001: POP
26002: POP
26003: GO 26009
// end ; end ;
26005: GO 25894
26007: POP
26008: POP
// end ;
26009: LD_VAR 0 3
26013: RET
// export function ScanBase ( side , base_area ) ; begin
26014: LD_INT 0
26016: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_INT 81
26029: PUSH
26030: LD_VAR 0 1
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 70
26043: ST_TO_ADDR
// end ;
26044: LD_VAR 0 3
26048: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26049: LD_INT 0
26051: PPUSH
26052: PPUSH
26053: PPUSH
26054: PPUSH
// result := false ;
26055: LD_ADDR_VAR 0 2
26059: PUSH
26060: LD_INT 0
26062: ST_TO_ADDR
// side := GetSide ( unit ) ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: LD_VAR 0 1
26072: PPUSH
26073: CALL_OW 255
26077: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26078: LD_ADDR_VAR 0 4
26082: PUSH
26083: LD_VAR 0 1
26087: PPUSH
26088: CALL_OW 248
26092: ST_TO_ADDR
// case nat of 1 :
26093: LD_VAR 0 4
26097: PUSH
26098: LD_INT 1
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 26117
26106: POP
// tech := tech_lassight ; 2 :
26107: LD_ADDR_VAR 0 5
26111: PUSH
26112: LD_INT 12
26114: ST_TO_ADDR
26115: GO 26156
26117: LD_INT 2
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26136
26125: POP
// tech := tech_mortar ; 3 :
26126: LD_ADDR_VAR 0 5
26130: PUSH
26131: LD_INT 41
26133: ST_TO_ADDR
26134: GO 26156
26136: LD_INT 3
26138: DOUBLE
26139: EQUAL
26140: IFTRUE 26144
26142: GO 26155
26144: POP
// tech := tech_bazooka ; end ;
26145: LD_ADDR_VAR 0 5
26149: PUSH
26150: LD_INT 44
26152: ST_TO_ADDR
26153: GO 26156
26155: POP
// if Researched ( side , tech ) then
26156: LD_VAR 0 3
26160: PPUSH
26161: LD_VAR 0 5
26165: PPUSH
26166: CALL_OW 325
26170: IFFALSE 26197
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26172: LD_ADDR_VAR 0 2
26176: PUSH
26177: LD_INT 5
26179: PUSH
26180: LD_INT 8
26182: PUSH
26183: LD_INT 9
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_VAR 0 4
26195: ARRAY
26196: ST_TO_ADDR
// end ;
26197: LD_VAR 0 2
26201: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26202: LD_INT 0
26204: PPUSH
26205: PPUSH
26206: PPUSH
// if not mines then
26207: LD_VAR 0 2
26211: NOT
26212: IFFALSE 26216
// exit ;
26214: GO 26360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26216: LD_ADDR_VAR 0 5
26220: PUSH
26221: LD_INT 81
26223: PUSH
26224: LD_VAR 0 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: LD_INT 21
26238: PUSH
26239: LD_INT 3
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PPUSH
26254: CALL_OW 69
26258: ST_TO_ADDR
// for i in mines do
26259: LD_ADDR_VAR 0 4
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26358
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26272: LD_VAR 0 4
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_VAR 0 4
26285: PUSH
26286: LD_INT 2
26288: ARRAY
26289: PPUSH
26290: CALL_OW 458
26294: NOT
26295: IFFALSE 26299
// continue ;
26297: GO 26269
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26299: LD_VAR 0 4
26303: PUSH
26304: LD_INT 1
26306: ARRAY
26307: PPUSH
26308: LD_VAR 0 4
26312: PUSH
26313: LD_INT 2
26315: ARRAY
26316: PPUSH
26317: CALL_OW 428
26321: PUSH
26322: LD_VAR 0 5
26326: IN
26327: IFFALSE 26356
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26329: LD_VAR 0 4
26333: PUSH
26334: LD_INT 1
26336: ARRAY
26337: PPUSH
26338: LD_VAR 0 4
26342: PUSH
26343: LD_INT 2
26345: ARRAY
26346: PPUSH
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL_OW 456
// end ;
26356: GO 26269
26358: POP
26359: POP
// end ;
26360: LD_VAR 0 3
26364: RET
// export function Count ( array ) ; var i ; begin
26365: LD_INT 0
26367: PPUSH
26368: PPUSH
// result := 0 ;
26369: LD_ADDR_VAR 0 2
26373: PUSH
26374: LD_INT 0
26376: ST_TO_ADDR
// for i in array do
26377: LD_ADDR_VAR 0 3
26381: PUSH
26382: LD_VAR 0 1
26386: PUSH
26387: FOR_IN
26388: IFFALSE 26412
// if i then
26390: LD_VAR 0 3
26394: IFFALSE 26410
// result := result + 1 ;
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: LD_VAR 0 2
26405: PUSH
26406: LD_INT 1
26408: PLUS
26409: ST_TO_ADDR
26410: GO 26387
26412: POP
26413: POP
// end ;
26414: LD_VAR 0 2
26418: RET
// export function IsEmpty ( building ) ; begin
26419: LD_INT 0
26421: PPUSH
// if not building then
26422: LD_VAR 0 1
26426: NOT
26427: IFFALSE 26431
// exit ;
26429: GO 26474
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26431: LD_ADDR_VAR 0 2
26435: PUSH
26436: LD_VAR 0 1
26440: PUSH
26441: LD_INT 22
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 255
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 58
26460: PUSH
26461: EMPTY
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: IN
26473: ST_TO_ADDR
// end ;
26474: LD_VAR 0 2
26478: RET
// export function IsNotFull ( building ) ; begin
26479: LD_INT 0
26481: PPUSH
// if not building then
26482: LD_VAR 0 1
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26510
// result := UnitsInside ( building ) < 6 ;
26491: LD_ADDR_VAR 0 2
26495: PUSH
26496: LD_VAR 0 1
26500: PPUSH
26501: CALL_OW 313
26505: PUSH
26506: LD_INT 6
26508: LESS
26509: ST_TO_ADDR
// end ;
26510: LD_VAR 0 2
26514: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
26519: PPUSH
26520: PPUSH
// tmp := [ ] ;
26521: LD_ADDR_VAR 0 3
26525: PUSH
26526: EMPTY
26527: ST_TO_ADDR
// list := [ ] ;
26528: LD_ADDR_VAR 0 5
26532: PUSH
26533: EMPTY
26534: ST_TO_ADDR
// for i = 16 to 25 do
26535: LD_ADDR_VAR 0 4
26539: PUSH
26540: DOUBLE
26541: LD_INT 16
26543: DEC
26544: ST_TO_ADDR
26545: LD_INT 25
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26622
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26551: LD_ADDR_VAR 0 3
26555: PUSH
26556: LD_VAR 0 3
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: CALL_OW 255
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 91
26580: PUSH
26581: LD_VAR 0 1
26585: PUSH
26586: LD_INT 6
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 30
26596: PUSH
26597: LD_VAR 0 4
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ADD
26619: ST_TO_ADDR
26620: GO 26548
26622: POP
26623: POP
// for i = 1 to tmp do
26624: LD_ADDR_VAR 0 4
26628: PUSH
26629: DOUBLE
26630: LD_INT 1
26632: DEC
26633: ST_TO_ADDR
26634: LD_VAR 0 3
26638: PUSH
26639: FOR_TO
26640: IFFALSE 26728
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26642: LD_ADDR_VAR 0 5
26646: PUSH
26647: LD_VAR 0 5
26651: PUSH
26652: LD_VAR 0 3
26656: PUSH
26657: LD_VAR 0 4
26661: ARRAY
26662: PPUSH
26663: CALL_OW 266
26667: PUSH
26668: LD_VAR 0 3
26672: PUSH
26673: LD_VAR 0 4
26677: ARRAY
26678: PPUSH
26679: CALL_OW 250
26683: PUSH
26684: LD_VAR 0 3
26688: PUSH
26689: LD_VAR 0 4
26693: ARRAY
26694: PPUSH
26695: CALL_OW 251
26699: PUSH
26700: LD_VAR 0 3
26704: PUSH
26705: LD_VAR 0 4
26709: ARRAY
26710: PPUSH
26711: CALL_OW 254
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: ADD
26725: ST_TO_ADDR
26726: GO 26639
26728: POP
26729: POP
// result := list ;
26730: LD_ADDR_VAR 0 2
26734: PUSH
26735: LD_VAR 0 5
26739: ST_TO_ADDR
// end ;
26740: LD_VAR 0 2
26744: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
// if not factory then
26754: LD_VAR 0 1
26758: NOT
26759: IFFALSE 26763
// exit ;
26761: GO 27356
// if control = control_apeman then
26763: LD_VAR 0 4
26767: PUSH
26768: LD_INT 5
26770: EQUAL
26771: IFFALSE 26880
// begin tmp := UnitsInside ( factory ) ;
26773: LD_ADDR_VAR 0 8
26777: PUSH
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL_OW 313
26787: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26788: LD_VAR 0 8
26792: PPUSH
26793: LD_INT 25
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PPUSH
26803: CALL_OW 72
26807: NOT
26808: IFFALSE 26818
// control := control_manual ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_INT 1
26817: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26818: LD_ADDR_VAR 0 8
26822: PUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL 26515 0 1
26832: ST_TO_ADDR
// if tmp then
26833: LD_VAR 0 8
26837: IFFALSE 26880
// begin for i in tmp do
26839: LD_ADDR_VAR 0 7
26843: PUSH
26844: LD_VAR 0 8
26848: PUSH
26849: FOR_IN
26850: IFFALSE 26878
// if i [ 1 ] = b_ext_radio then
26852: LD_VAR 0 7
26856: PUSH
26857: LD_INT 1
26859: ARRAY
26860: PUSH
26861: LD_INT 22
26863: EQUAL
26864: IFFALSE 26876
// begin control := control_remote ;
26866: LD_ADDR_VAR 0 4
26870: PUSH
26871: LD_INT 2
26873: ST_TO_ADDR
// break ;
26874: GO 26878
// end ;
26876: GO 26849
26878: POP
26879: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26880: LD_VAR 0 1
26884: PPUSH
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_VAR 0 3
26894: PPUSH
26895: LD_VAR 0 4
26899: PPUSH
26900: LD_VAR 0 5
26904: PPUSH
26905: CALL_OW 448
26909: IFFALSE 26944
// begin result := [ chassis , engine , control , weapon ] ;
26911: LD_ADDR_VAR 0 6
26915: PUSH
26916: LD_VAR 0 2
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: LD_VAR 0 4
26930: PUSH
26931: LD_VAR 0 5
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// exit ;
26942: GO 27356
// end ; _chassis := AvailableChassisList ( factory ) ;
26944: LD_ADDR_VAR 0 9
26948: PUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 475
26958: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26959: LD_ADDR_VAR 0 11
26963: PUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 476
26973: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26974: LD_ADDR_VAR 0 12
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 477
26988: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26989: LD_ADDR_VAR 0 10
26993: PUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 478
27003: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27004: LD_VAR 0 9
27008: NOT
27009: PUSH
27010: LD_VAR 0 11
27014: NOT
27015: OR
27016: PUSH
27017: LD_VAR 0 12
27021: NOT
27022: OR
27023: PUSH
27024: LD_VAR 0 10
27028: NOT
27029: OR
27030: IFFALSE 27065
// begin result := [ chassis , engine , control , weapon ] ;
27032: LD_ADDR_VAR 0 6
27036: PUSH
27037: LD_VAR 0 2
27041: PUSH
27042: LD_VAR 0 3
27046: PUSH
27047: LD_VAR 0 4
27051: PUSH
27052: LD_VAR 0 5
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// exit ;
27063: GO 27356
// end ; if not chassis in _chassis then
27065: LD_VAR 0 2
27069: PUSH
27070: LD_VAR 0 9
27074: IN
27075: NOT
27076: IFFALSE 27102
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27078: LD_ADDR_VAR 0 2
27082: PUSH
27083: LD_VAR 0 9
27087: PUSH
27088: LD_INT 1
27090: PPUSH
27091: LD_VAR 0 9
27095: PPUSH
27096: CALL_OW 12
27100: ARRAY
27101: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27102: LD_VAR 0 2
27106: PPUSH
27107: LD_VAR 0 3
27111: PPUSH
27112: CALL 27361 0 2
27116: NOT
27117: IFFALSE 27176
// repeat engine := _engine [ 1 ] ;
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_VAR 0 11
27128: PUSH
27129: LD_INT 1
27131: ARRAY
27132: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27133: LD_ADDR_VAR 0 11
27137: PUSH
27138: LD_VAR 0 11
27142: PPUSH
27143: LD_INT 1
27145: PPUSH
27146: CALL_OW 3
27150: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 3
27160: PPUSH
27161: CALL 27361 0 2
27165: PUSH
27166: LD_VAR 0 11
27170: PUSH
27171: EMPTY
27172: EQUAL
27173: OR
27174: IFFALSE 27119
// if not control in _control then
27176: LD_VAR 0 4
27180: PUSH
27181: LD_VAR 0 12
27185: IN
27186: NOT
27187: IFFALSE 27213
// control := _control [ rand ( 1 , _control ) ] ;
27189: LD_ADDR_VAR 0 4
27193: PUSH
27194: LD_VAR 0 12
27198: PUSH
27199: LD_INT 1
27201: PPUSH
27202: LD_VAR 0 12
27206: PPUSH
27207: CALL_OW 12
27211: ARRAY
27212: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27213: LD_VAR 0 2
27217: PPUSH
27218: LD_VAR 0 5
27222: PPUSH
27223: CALL 27581 0 2
27227: NOT
27228: IFFALSE 27287
// repeat weapon := _weapon [ 1 ] ;
27230: LD_ADDR_VAR 0 5
27234: PUSH
27235: LD_VAR 0 10
27239: PUSH
27240: LD_INT 1
27242: ARRAY
27243: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27244: LD_ADDR_VAR 0 10
27248: PUSH
27249: LD_VAR 0 10
27253: PPUSH
27254: LD_INT 1
27256: PPUSH
27257: CALL_OW 3
27261: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27262: LD_VAR 0 2
27266: PPUSH
27267: LD_VAR 0 5
27271: PPUSH
27272: CALL 27581 0 2
27276: PUSH
27277: LD_VAR 0 10
27281: PUSH
27282: EMPTY
27283: EQUAL
27284: OR
27285: IFFALSE 27230
// result := [ ] ;
27287: LD_ADDR_VAR 0 6
27291: PUSH
27292: EMPTY
27293: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_VAR 0 2
27303: PPUSH
27304: LD_VAR 0 3
27308: PPUSH
27309: LD_VAR 0 4
27313: PPUSH
27314: LD_VAR 0 5
27318: PPUSH
27319: CALL_OW 448
27323: IFFALSE 27356
// result := [ chassis , engine , control , weapon ] ;
27325: LD_ADDR_VAR 0 6
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: LD_VAR 0 3
27339: PUSH
27340: LD_VAR 0 4
27344: PUSH
27345: LD_VAR 0 5
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// end ;
27356: LD_VAR 0 6
27360: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27361: LD_INT 0
27363: PPUSH
// if not chassis or not engine then
27364: LD_VAR 0 1
27368: NOT
27369: PUSH
27370: LD_VAR 0 2
27374: NOT
27375: OR
27376: IFFALSE 27380
// exit ;
27378: GO 27576
// case engine of engine_solar :
27380: LD_VAR 0 2
27384: PUSH
27385: LD_INT 2
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 27431
27393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27394: LD_ADDR_VAR 0 3
27398: PUSH
27399: LD_INT 11
27401: PUSH
27402: LD_INT 12
27404: PUSH
27405: LD_INT 13
27407: PUSH
27408: LD_INT 14
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: LD_INT 3
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
27429: GO 27560
27431: LD_INT 1
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27501
27439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_INT 11
27447: PUSH
27448: LD_INT 12
27450: PUSH
27451: LD_INT 13
27453: PUSH
27454: LD_INT 14
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 4
27468: PUSH
27469: LD_INT 5
27471: PUSH
27472: LD_INT 21
27474: PUSH
27475: LD_INT 23
27477: PUSH
27478: LD_INT 22
27480: PUSH
27481: LD_INT 24
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
27499: GO 27560
27501: LD_INT 3
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27509
27507: GO 27559
27509: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27510: LD_ADDR_VAR 0 3
27514: PUSH
27515: LD_INT 13
27517: PUSH
27518: LD_INT 14
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: LD_INT 4
27529: PUSH
27530: LD_INT 5
27532: PUSH
27533: LD_INT 21
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_INT 23
27541: PUSH
27542: LD_INT 24
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
27557: GO 27560
27559: POP
// result := ( chassis in result ) ;
27560: LD_ADDR_VAR 0 3
27564: PUSH
27565: LD_VAR 0 1
27569: PUSH
27570: LD_VAR 0 3
27574: IN
27575: ST_TO_ADDR
// end ;
27576: LD_VAR 0 3
27580: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27581: LD_INT 0
27583: PPUSH
// if not chassis or not weapon then
27584: LD_VAR 0 1
27588: NOT
27589: PUSH
27590: LD_VAR 0 2
27594: NOT
27595: OR
27596: IFFALSE 27600
// exit ;
27598: GO 28662
// case weapon of us_machine_gun :
27600: LD_VAR 0 2
27604: PUSH
27605: LD_INT 2
27607: DOUBLE
27608: EQUAL
27609: IFTRUE 27613
27611: GO 27643
27613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: LD_INT 4
27630: PUSH
27631: LD_INT 5
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
27641: GO 28646
27643: LD_INT 3
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 27681
27651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: LD_INT 3
27665: PUSH
27666: LD_INT 4
27668: PUSH
27669: LD_INT 5
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: ST_TO_ADDR
27679: GO 28646
27681: LD_INT 11
27683: DOUBLE
27684: EQUAL
27685: IFTRUE 27689
27687: GO 27719
27689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27690: LD_ADDR_VAR 0 3
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: LD_INT 4
27706: PUSH
27707: LD_INT 5
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
27717: GO 28646
27719: LD_INT 4
27721: DOUBLE
27722: EQUAL
27723: IFTRUE 27727
27725: GO 27753
27727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 4
27741: PUSH
27742: LD_INT 5
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
27751: GO 28646
27753: LD_INT 5
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27761
27759: GO 27787
27761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: LD_INT 4
27775: PUSH
27776: LD_INT 5
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
27785: GO 28646
27787: LD_INT 9
27789: DOUBLE
27790: EQUAL
27791: IFTRUE 27795
27793: GO 27821
27795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27796: LD_ADDR_VAR 0 3
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 4
27809: PUSH
27810: LD_INT 5
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
27819: GO 28646
27821: LD_INT 7
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27855
27829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: LD_INT 4
27843: PUSH
27844: LD_INT 5
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
27853: GO 28646
27855: LD_INT 12
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27889
27863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 3
27874: PUSH
27875: LD_INT 4
27877: PUSH
27878: LD_INT 5
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
27887: GO 28646
27889: LD_INT 13
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27923
27897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 4
27911: PUSH
27912: LD_INT 5
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
27921: GO 28646
27923: LD_INT 14
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 27949
27931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 4
27939: PUSH
27940: LD_INT 5
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28646
27949: LD_INT 6
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27975
27957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 4
27965: PUSH
27966: LD_INT 5
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: ST_TO_ADDR
27973: GO 28646
27975: LD_INT 10
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 27983
27981: GO 28001
27983: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 4
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: ST_TO_ADDR
27999: GO 28646
28001: LD_INT 22
28003: DOUBLE
28004: EQUAL
28005: IFTRUE 28009
28007: GO 28035
28009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28010: LD_ADDR_VAR 0 3
28014: PUSH
28015: LD_INT 11
28017: PUSH
28018: LD_INT 12
28020: PUSH
28021: LD_INT 13
28023: PUSH
28024: LD_INT 14
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
28033: GO 28646
28035: LD_INT 23
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28069
28043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28044: LD_ADDR_VAR 0 3
28048: PUSH
28049: LD_INT 11
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: LD_INT 13
28057: PUSH
28058: LD_INT 14
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: ST_TO_ADDR
28067: GO 28646
28069: LD_INT 24
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28103
28077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28078: LD_ADDR_VAR 0 3
28082: PUSH
28083: LD_INT 11
28085: PUSH
28086: LD_INT 12
28088: PUSH
28089: LD_INT 13
28091: PUSH
28092: LD_INT 14
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28646
28103: LD_INT 30
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28137
28111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_INT 11
28119: PUSH
28120: LD_INT 12
28122: PUSH
28123: LD_INT 13
28125: PUSH
28126: LD_INT 14
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: ST_TO_ADDR
28135: GO 28646
28137: LD_INT 25
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28163
28145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 13
28153: PUSH
28154: LD_INT 14
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: ST_TO_ADDR
28161: GO 28646
28163: LD_INT 27
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28189
28171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_INT 13
28179: PUSH
28180: LD_INT 14
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 28646
28189: LD_EXP 89
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28225
28199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 11
28207: PUSH
28208: LD_INT 12
28210: PUSH
28211: LD_INT 13
28213: PUSH
28214: LD_INT 14
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 28646
28225: LD_INT 28
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28251
28233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 13
28241: PUSH
28242: LD_INT 14
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: ST_TO_ADDR
28249: GO 28646
28251: LD_INT 29
28253: DOUBLE
28254: EQUAL
28255: IFTRUE 28259
28257: GO 28277
28259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28260: LD_ADDR_VAR 0 3
28264: PUSH
28265: LD_INT 13
28267: PUSH
28268: LD_INT 14
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: ST_TO_ADDR
28275: GO 28646
28277: LD_INT 31
28279: DOUBLE
28280: EQUAL
28281: IFTRUE 28285
28283: GO 28303
28285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28286: LD_ADDR_VAR 0 3
28290: PUSH
28291: LD_INT 13
28293: PUSH
28294: LD_INT 14
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: ST_TO_ADDR
28301: GO 28646
28303: LD_INT 26
28305: DOUBLE
28306: EQUAL
28307: IFTRUE 28311
28309: GO 28329
28311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28312: LD_ADDR_VAR 0 3
28316: PUSH
28317: LD_INT 13
28319: PUSH
28320: LD_INT 14
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: ST_TO_ADDR
28327: GO 28646
28329: LD_INT 42
28331: DOUBLE
28332: EQUAL
28333: IFTRUE 28337
28335: GO 28363
28337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28338: LD_ADDR_VAR 0 3
28342: PUSH
28343: LD_INT 21
28345: PUSH
28346: LD_INT 22
28348: PUSH
28349: LD_INT 23
28351: PUSH
28352: LD_INT 24
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
28361: GO 28646
28363: LD_INT 43
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28397
28371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: LD_INT 21
28379: PUSH
28380: LD_INT 22
28382: PUSH
28383: LD_INT 23
28385: PUSH
28386: LD_INT 24
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
28395: GO 28646
28397: LD_INT 44
28399: DOUBLE
28400: EQUAL
28401: IFTRUE 28405
28403: GO 28431
28405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28406: LD_ADDR_VAR 0 3
28410: PUSH
28411: LD_INT 21
28413: PUSH
28414: LD_INT 22
28416: PUSH
28417: LD_INT 23
28419: PUSH
28420: LD_INT 24
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
28429: GO 28646
28431: LD_INT 45
28433: DOUBLE
28434: EQUAL
28435: IFTRUE 28439
28437: GO 28465
28439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28440: LD_ADDR_VAR 0 3
28444: PUSH
28445: LD_INT 21
28447: PUSH
28448: LD_INT 22
28450: PUSH
28451: LD_INT 23
28453: PUSH
28454: LD_INT 24
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
28463: GO 28646
28465: LD_INT 49
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28499
28473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 21
28481: PUSH
28482: LD_INT 22
28484: PUSH
28485: LD_INT 23
28487: PUSH
28488: LD_INT 24
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
28497: GO 28646
28499: LD_INT 51
28501: DOUBLE
28502: EQUAL
28503: IFTRUE 28507
28505: GO 28533
28507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 22
28518: PUSH
28519: LD_INT 23
28521: PUSH
28522: LD_INT 24
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
28531: GO 28646
28533: LD_INT 52
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 28567
28541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 21
28549: PUSH
28550: LD_INT 22
28552: PUSH
28553: LD_INT 23
28555: PUSH
28556: LD_INT 24
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
28565: GO 28646
28567: LD_INT 53
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28593
28575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: LD_INT 23
28583: PUSH
28584: LD_INT 24
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: ST_TO_ADDR
28591: GO 28646
28593: LD_INT 46
28595: DOUBLE
28596: EQUAL
28597: IFTRUE 28601
28599: GO 28619
28601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_INT 23
28609: PUSH
28610: LD_INT 24
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: ST_TO_ADDR
28617: GO 28646
28619: LD_INT 47
28621: DOUBLE
28622: EQUAL
28623: IFTRUE 28627
28625: GO 28645
28627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 23
28635: PUSH
28636: LD_INT 24
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: ST_TO_ADDR
28643: GO 28646
28645: POP
// result := ( chassis in result ) ;
28646: LD_ADDR_VAR 0 3
28650: PUSH
28651: LD_VAR 0 1
28655: PUSH
28656: LD_VAR 0 3
28660: IN
28661: ST_TO_ADDR
// end ;
28662: LD_VAR 0 3
28666: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
28671: PPUSH
28672: PPUSH
28673: PPUSH
28674: PPUSH
28675: PPUSH
// result := array ;
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: LD_VAR 0 1
28685: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28686: LD_VAR 0 1
28690: NOT
28691: PUSH
28692: LD_VAR 0 2
28696: NOT
28697: OR
28698: PUSH
28699: LD_VAR 0 3
28703: NOT
28704: OR
28705: PUSH
28706: LD_VAR 0 2
28710: PUSH
28711: LD_VAR 0 1
28715: GREATER
28716: OR
28717: PUSH
28718: LD_VAR 0 3
28722: PUSH
28723: LD_VAR 0 1
28727: GREATER
28728: OR
28729: IFFALSE 28733
// exit ;
28731: GO 29029
// if direction then
28733: LD_VAR 0 4
28737: IFFALSE 28801
// begin d := 1 ;
28739: LD_ADDR_VAR 0 9
28743: PUSH
28744: LD_INT 1
28746: ST_TO_ADDR
// if i_from > i_to then
28747: LD_VAR 0 2
28751: PUSH
28752: LD_VAR 0 3
28756: GREATER
28757: IFFALSE 28783
// length := ( array - i_from ) + i_to else
28759: LD_ADDR_VAR 0 11
28763: PUSH
28764: LD_VAR 0 1
28768: PUSH
28769: LD_VAR 0 2
28773: MINUS
28774: PUSH
28775: LD_VAR 0 3
28779: PLUS
28780: ST_TO_ADDR
28781: GO 28799
// length := i_to - i_from ;
28783: LD_ADDR_VAR 0 11
28787: PUSH
28788: LD_VAR 0 3
28792: PUSH
28793: LD_VAR 0 2
28797: MINUS
28798: ST_TO_ADDR
// end else
28799: GO 28862
// begin d := - 1 ;
28801: LD_ADDR_VAR 0 9
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: ST_TO_ADDR
// if i_from > i_to then
28810: LD_VAR 0 2
28814: PUSH
28815: LD_VAR 0 3
28819: GREATER
28820: IFFALSE 28840
// length := i_from - i_to else
28822: LD_ADDR_VAR 0 11
28826: PUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 3
28836: MINUS
28837: ST_TO_ADDR
28838: GO 28862
// length := ( array - i_to ) + i_from ;
28840: LD_ADDR_VAR 0 11
28844: PUSH
28845: LD_VAR 0 1
28849: PUSH
28850: LD_VAR 0 3
28854: MINUS
28855: PUSH
28856: LD_VAR 0 2
28860: PLUS
28861: ST_TO_ADDR
// end ; if not length then
28862: LD_VAR 0 11
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 29029
// tmp := array ;
28871: LD_ADDR_VAR 0 10
28875: PUSH
28876: LD_VAR 0 1
28880: ST_TO_ADDR
// for i = 1 to length do
28881: LD_ADDR_VAR 0 6
28885: PUSH
28886: DOUBLE
28887: LD_INT 1
28889: DEC
28890: ST_TO_ADDR
28891: LD_VAR 0 11
28895: PUSH
28896: FOR_TO
28897: IFFALSE 29017
// begin for j = 1 to array do
28899: LD_ADDR_VAR 0 7
28903: PUSH
28904: DOUBLE
28905: LD_INT 1
28907: DEC
28908: ST_TO_ADDR
28909: LD_VAR 0 1
28913: PUSH
28914: FOR_TO
28915: IFFALSE 29003
// begin k := j + d ;
28917: LD_ADDR_VAR 0 8
28921: PUSH
28922: LD_VAR 0 7
28926: PUSH
28927: LD_VAR 0 9
28931: PLUS
28932: ST_TO_ADDR
// if k > array then
28933: LD_VAR 0 8
28937: PUSH
28938: LD_VAR 0 1
28942: GREATER
28943: IFFALSE 28953
// k := 1 ;
28945: LD_ADDR_VAR 0 8
28949: PUSH
28950: LD_INT 1
28952: ST_TO_ADDR
// if not k then
28953: LD_VAR 0 8
28957: NOT
28958: IFFALSE 28970
// k := array ;
28960: LD_ADDR_VAR 0 8
28964: PUSH
28965: LD_VAR 0 1
28969: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28970: LD_ADDR_VAR 0 10
28974: PUSH
28975: LD_VAR 0 10
28979: PPUSH
28980: LD_VAR 0 8
28984: PPUSH
28985: LD_VAR 0 1
28989: PUSH
28990: LD_VAR 0 7
28994: ARRAY
28995: PPUSH
28996: CALL_OW 1
29000: ST_TO_ADDR
// end ;
29001: GO 28914
29003: POP
29004: POP
// array := tmp ;
29005: LD_ADDR_VAR 0 1
29009: PUSH
29010: LD_VAR 0 10
29014: ST_TO_ADDR
// end ;
29015: GO 28896
29017: POP
29018: POP
// result := array ;
29019: LD_ADDR_VAR 0 5
29023: PUSH
29024: LD_VAR 0 1
29028: ST_TO_ADDR
// end ;
29029: LD_VAR 0 5
29033: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29034: LD_INT 0
29036: PPUSH
29037: PPUSH
// result := 0 ;
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 0
29045: ST_TO_ADDR
// if not array or not value in array then
29046: LD_VAR 0 1
29050: NOT
29051: PUSH
29052: LD_VAR 0 2
29056: PUSH
29057: LD_VAR 0 1
29061: IN
29062: NOT
29063: OR
29064: IFFALSE 29068
// exit ;
29066: GO 29122
// for i = 1 to array do
29068: LD_ADDR_VAR 0 4
29072: PUSH
29073: DOUBLE
29074: LD_INT 1
29076: DEC
29077: ST_TO_ADDR
29078: LD_VAR 0 1
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29120
// if value = array [ i ] then
29086: LD_VAR 0 2
29090: PUSH
29091: LD_VAR 0 1
29095: PUSH
29096: LD_VAR 0 4
29100: ARRAY
29101: EQUAL
29102: IFFALSE 29118
// begin result := i ;
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: LD_VAR 0 4
29113: ST_TO_ADDR
// exit ;
29114: POP
29115: POP
29116: GO 29122
// end ;
29118: GO 29083
29120: POP
29121: POP
// end ;
29122: LD_VAR 0 3
29126: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29127: LD_INT 0
29129: PPUSH
// vc_chassis := chassis ;
29130: LD_ADDR_OWVAR 37
29134: PUSH
29135: LD_VAR 0 1
29139: ST_TO_ADDR
// vc_engine := engine ;
29140: LD_ADDR_OWVAR 39
29144: PUSH
29145: LD_VAR 0 2
29149: ST_TO_ADDR
// vc_control := control ;
29150: LD_ADDR_OWVAR 38
29154: PUSH
29155: LD_VAR 0 3
29159: ST_TO_ADDR
// vc_weapon := weapon ;
29160: LD_ADDR_OWVAR 40
29164: PUSH
29165: LD_VAR 0 4
29169: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29170: LD_ADDR_OWVAR 41
29174: PUSH
29175: LD_VAR 0 5
29179: ST_TO_ADDR
// end ;
29180: LD_VAR 0 6
29184: RET
// export function WantPlant ( unit ) ; var task ; begin
29185: LD_INT 0
29187: PPUSH
29188: PPUSH
// result := false ;
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_INT 0
29196: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 437
29211: ST_TO_ADDR
// if task then
29212: LD_VAR 0 3
29216: IFFALSE 29244
// if task [ 1 ] [ 1 ] = p then
29218: LD_VAR 0 3
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: PUSH
29231: LD_STRING p
29233: EQUAL
29234: IFFALSE 29244
// result := true ;
29236: LD_ADDR_VAR 0 2
29240: PUSH
29241: LD_INT 1
29243: ST_TO_ADDR
// end ;
29244: LD_VAR 0 2
29248: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
// if pos < 1 then
29255: LD_VAR 0 2
29259: PUSH
29260: LD_INT 1
29262: LESS
29263: IFFALSE 29267
// exit ;
29265: GO 29570
// if pos = 1 then
29267: LD_VAR 0 2
29271: PUSH
29272: LD_INT 1
29274: EQUAL
29275: IFFALSE 29308
// result := Replace ( arr , pos [ 1 ] , value ) else
29277: LD_ADDR_VAR 0 4
29281: PUSH
29282: LD_VAR 0 1
29286: PPUSH
29287: LD_VAR 0 2
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PPUSH
29296: LD_VAR 0 3
29300: PPUSH
29301: CALL_OW 1
29305: ST_TO_ADDR
29306: GO 29570
// begin tmp := arr ;
29308: LD_ADDR_VAR 0 6
29312: PUSH
29313: LD_VAR 0 1
29317: ST_TO_ADDR
// s_arr := [ tmp ] ;
29318: LD_ADDR_VAR 0 7
29322: PUSH
29323: LD_VAR 0 6
29327: PUSH
29328: EMPTY
29329: LIST
29330: ST_TO_ADDR
// for i = 1 to pos - 1 do
29331: LD_ADDR_VAR 0 5
29335: PUSH
29336: DOUBLE
29337: LD_INT 1
29339: DEC
29340: ST_TO_ADDR
29341: LD_VAR 0 2
29345: PUSH
29346: LD_INT 1
29348: MINUS
29349: PUSH
29350: FOR_TO
29351: IFFALSE 29396
// begin tmp := tmp [ pos [ i ] ] ;
29353: LD_ADDR_VAR 0 6
29357: PUSH
29358: LD_VAR 0 6
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: LD_VAR 0 5
29372: ARRAY
29373: ARRAY
29374: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29375: LD_ADDR_VAR 0 7
29379: PUSH
29380: LD_VAR 0 7
29384: PUSH
29385: LD_VAR 0 6
29389: PUSH
29390: EMPTY
29391: LIST
29392: ADD
29393: ST_TO_ADDR
// end ;
29394: GO 29350
29396: POP
29397: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29398: LD_ADDR_VAR 0 6
29402: PUSH
29403: LD_VAR 0 6
29407: PPUSH
29408: LD_VAR 0 2
29412: PUSH
29413: LD_VAR 0 2
29417: ARRAY
29418: PPUSH
29419: LD_VAR 0 3
29423: PPUSH
29424: CALL_OW 1
29428: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29429: LD_ADDR_VAR 0 7
29433: PUSH
29434: LD_VAR 0 7
29438: PPUSH
29439: LD_VAR 0 7
29443: PPUSH
29444: LD_VAR 0 6
29448: PPUSH
29449: CALL_OW 1
29453: ST_TO_ADDR
// for i = s_arr downto 2 do
29454: LD_ADDR_VAR 0 5
29458: PUSH
29459: DOUBLE
29460: LD_VAR 0 7
29464: INC
29465: ST_TO_ADDR
29466: LD_INT 2
29468: PUSH
29469: FOR_DOWNTO
29470: IFFALSE 29554
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29472: LD_ADDR_VAR 0 6
29476: PUSH
29477: LD_VAR 0 7
29481: PUSH
29482: LD_VAR 0 5
29486: PUSH
29487: LD_INT 1
29489: MINUS
29490: ARRAY
29491: PPUSH
29492: LD_VAR 0 2
29496: PUSH
29497: LD_VAR 0 5
29501: PUSH
29502: LD_INT 1
29504: MINUS
29505: ARRAY
29506: PPUSH
29507: LD_VAR 0 7
29511: PUSH
29512: LD_VAR 0 5
29516: ARRAY
29517: PPUSH
29518: CALL_OW 1
29522: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29523: LD_ADDR_VAR 0 7
29527: PUSH
29528: LD_VAR 0 7
29532: PPUSH
29533: LD_VAR 0 5
29537: PUSH
29538: LD_INT 1
29540: MINUS
29541: PPUSH
29542: LD_VAR 0 6
29546: PPUSH
29547: CALL_OW 1
29551: ST_TO_ADDR
// end ;
29552: GO 29469
29554: POP
29555: POP
// result := s_arr [ 1 ] ;
29556: LD_ADDR_VAR 0 4
29560: PUSH
29561: LD_VAR 0 7
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: ST_TO_ADDR
// end ; end ;
29570: LD_VAR 0 4
29574: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
// if not list then
29579: LD_VAR 0 1
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29679
// i := list [ pos1 ] ;
29588: LD_ADDR_VAR 0 5
29592: PUSH
29593: LD_VAR 0 1
29597: PUSH
29598: LD_VAR 0 2
29602: ARRAY
29603: ST_TO_ADDR
// if not i then
29604: LD_VAR 0 5
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29679
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29613: LD_ADDR_VAR 0 1
29617: PUSH
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_VAR 0 2
29627: PPUSH
29628: LD_VAR 0 1
29632: PUSH
29633: LD_VAR 0 3
29637: ARRAY
29638: PPUSH
29639: CALL_OW 1
29643: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29644: LD_ADDR_VAR 0 1
29648: PUSH
29649: LD_VAR 0 1
29653: PPUSH
29654: LD_VAR 0 3
29658: PPUSH
29659: LD_VAR 0 5
29663: PPUSH
29664: CALL_OW 1
29668: ST_TO_ADDR
// result := list ;
29669: LD_ADDR_VAR 0 4
29673: PUSH
29674: LD_VAR 0 1
29678: ST_TO_ADDR
// end ;
29679: LD_VAR 0 4
29683: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29684: LD_INT 0
29686: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29687: LD_ADDR_VAR 0 5
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 250
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 251
29711: PPUSH
29712: LD_VAR 0 2
29716: PPUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: LD_VAR 0 4
29726: PPUSH
29727: CALL 29737 0 5
29731: ST_TO_ADDR
// end ;
29732: LD_VAR 0 5
29736: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29737: LD_INT 0
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
// if not list then
29743: LD_VAR 0 3
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 30140
// result := [ ] ;
29752: LD_ADDR_VAR 0 6
29756: PUSH
29757: EMPTY
29758: ST_TO_ADDR
// for i in list do
29759: LD_ADDR_VAR 0 7
29763: PUSH
29764: LD_VAR 0 3
29768: PUSH
29769: FOR_IN
29770: IFFALSE 29972
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29772: LD_ADDR_VAR 0 9
29776: PUSH
29777: LD_VAR 0 7
29781: PPUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_VAR 0 2
29791: PPUSH
29792: CALL_OW 297
29796: ST_TO_ADDR
// if not result then
29797: LD_VAR 0 6
29801: NOT
29802: IFFALSE 29828
// result := [ [ i , tmp ] ] else
29804: LD_ADDR_VAR 0 6
29808: PUSH
29809: LD_VAR 0 7
29813: PUSH
29814: LD_VAR 0 9
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: ST_TO_ADDR
29826: GO 29970
// begin if result [ result ] [ 2 ] < tmp then
29828: LD_VAR 0 6
29832: PUSH
29833: LD_VAR 0 6
29837: ARRAY
29838: PUSH
29839: LD_INT 2
29841: ARRAY
29842: PUSH
29843: LD_VAR 0 9
29847: LESS
29848: IFFALSE 29890
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29850: LD_ADDR_VAR 0 6
29854: PUSH
29855: LD_VAR 0 6
29859: PPUSH
29860: LD_VAR 0 6
29864: PUSH
29865: LD_INT 1
29867: PLUS
29868: PPUSH
29869: LD_VAR 0 7
29873: PUSH
29874: LD_VAR 0 9
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 2
29887: ST_TO_ADDR
29888: GO 29970
// for j = 1 to result do
29890: LD_ADDR_VAR 0 8
29894: PUSH
29895: DOUBLE
29896: LD_INT 1
29898: DEC
29899: ST_TO_ADDR
29900: LD_VAR 0 6
29904: PUSH
29905: FOR_TO
29906: IFFALSE 29968
// begin if tmp < result [ j ] [ 2 ] then
29908: LD_VAR 0 9
29912: PUSH
29913: LD_VAR 0 6
29917: PUSH
29918: LD_VAR 0 8
29922: ARRAY
29923: PUSH
29924: LD_INT 2
29926: ARRAY
29927: LESS
29928: IFFALSE 29966
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29930: LD_ADDR_VAR 0 6
29934: PUSH
29935: LD_VAR 0 6
29939: PPUSH
29940: LD_VAR 0 8
29944: PPUSH
29945: LD_VAR 0 7
29949: PUSH
29950: LD_VAR 0 9
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 2
29963: ST_TO_ADDR
// break ;
29964: GO 29968
// end ; end ;
29966: GO 29905
29968: POP
29969: POP
// end ; end ;
29970: GO 29769
29972: POP
29973: POP
// if result and not asc then
29974: LD_VAR 0 6
29978: PUSH
29979: LD_VAR 0 4
29983: NOT
29984: AND
29985: IFFALSE 30060
// begin tmp := result ;
29987: LD_ADDR_VAR 0 9
29991: PUSH
29992: LD_VAR 0 6
29996: ST_TO_ADDR
// for i = tmp downto 1 do
29997: LD_ADDR_VAR 0 7
30001: PUSH
30002: DOUBLE
30003: LD_VAR 0 9
30007: INC
30008: ST_TO_ADDR
30009: LD_INT 1
30011: PUSH
30012: FOR_DOWNTO
30013: IFFALSE 30058
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30015: LD_ADDR_VAR 0 6
30019: PUSH
30020: LD_VAR 0 6
30024: PPUSH
30025: LD_VAR 0 9
30029: PUSH
30030: LD_VAR 0 7
30034: MINUS
30035: PUSH
30036: LD_INT 1
30038: PLUS
30039: PPUSH
30040: LD_VAR 0 9
30044: PUSH
30045: LD_VAR 0 7
30049: ARRAY
30050: PPUSH
30051: CALL_OW 1
30055: ST_TO_ADDR
30056: GO 30012
30058: POP
30059: POP
// end ; tmp := [ ] ;
30060: LD_ADDR_VAR 0 9
30064: PUSH
30065: EMPTY
30066: ST_TO_ADDR
// if mode then
30067: LD_VAR 0 5
30071: IFFALSE 30140
// begin for i = 1 to result do
30073: LD_ADDR_VAR 0 7
30077: PUSH
30078: DOUBLE
30079: LD_INT 1
30081: DEC
30082: ST_TO_ADDR
30083: LD_VAR 0 6
30087: PUSH
30088: FOR_TO
30089: IFFALSE 30128
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30091: LD_ADDR_VAR 0 9
30095: PUSH
30096: LD_VAR 0 9
30100: PPUSH
30101: LD_VAR 0 7
30105: PPUSH
30106: LD_VAR 0 6
30110: PUSH
30111: LD_VAR 0 7
30115: ARRAY
30116: PUSH
30117: LD_INT 1
30119: ARRAY
30120: PPUSH
30121: CALL_OW 1
30125: ST_TO_ADDR
30126: GO 30088
30128: POP
30129: POP
// result := tmp ;
30130: LD_ADDR_VAR 0 6
30134: PUSH
30135: LD_VAR 0 9
30139: ST_TO_ADDR
// end ; end ;
30140: LD_VAR 0 6
30144: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
30150: PPUSH
30151: PPUSH
30152: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30153: LD_ADDR_VAR 0 5
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: EMPTY
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: ST_TO_ADDR
// if not x or not y then
30175: LD_VAR 0 2
30179: NOT
30180: PUSH
30181: LD_VAR 0 3
30185: NOT
30186: OR
30187: IFFALSE 30191
// exit ;
30189: GO 31843
// if not range then
30191: LD_VAR 0 4
30195: NOT
30196: IFFALSE 30206
// range := 10 ;
30198: LD_ADDR_VAR 0 4
30202: PUSH
30203: LD_INT 10
30205: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30206: LD_ADDR_VAR 0 8
30210: PUSH
30211: LD_INT 81
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 92
30225: PUSH
30226: LD_VAR 0 2
30230: PUSH
30231: LD_VAR 0 3
30235: PUSH
30236: LD_VAR 0 4
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: LD_INT 21
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 8
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 31843
// for i in tmp do
30283: LD_ADDR_VAR 0 6
30287: PUSH
30288: LD_VAR 0 8
30292: PUSH
30293: FOR_IN
30294: IFFALSE 31818
// begin points := [ 0 , 0 , 0 ] ;
30296: LD_ADDR_VAR 0 9
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// bpoints := 1 ;
30315: LD_ADDR_VAR 0 10
30319: PUSH
30320: LD_INT 1
30322: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30323: LD_VAR 0 6
30327: PPUSH
30328: CALL_OW 247
30332: PUSH
30333: LD_INT 1
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30919
30341: POP
// begin if GetClass ( i ) = 1 then
30342: LD_VAR 0 6
30346: PPUSH
30347: CALL_OW 257
30351: PUSH
30352: LD_INT 1
30354: EQUAL
30355: IFFALSE 30376
// points := [ 10 , 5 , 3 ] ;
30357: LD_ADDR_VAR 0 9
30361: PUSH
30362: LD_INT 10
30364: PUSH
30365: LD_INT 5
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30376: LD_VAR 0 6
30380: PPUSH
30381: CALL_OW 257
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 4
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: IN
30400: IFFALSE 30421
// points := [ 3 , 2 , 1 ] ;
30402: LD_ADDR_VAR 0 9
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30421: LD_VAR 0 6
30425: PPUSH
30426: CALL_OW 257
30430: PUSH
30431: LD_INT 5
30433: EQUAL
30434: IFFALSE 30455
// points := [ 130 , 5 , 2 ] ;
30436: LD_ADDR_VAR 0 9
30440: PUSH
30441: LD_INT 130
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30455: LD_VAR 0 6
30459: PPUSH
30460: CALL_OW 257
30464: PUSH
30465: LD_INT 8
30467: EQUAL
30468: IFFALSE 30489
// points := [ 35 , 35 , 30 ] ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 35
30477: PUSH
30478: LD_INT 35
30480: PUSH
30481: LD_INT 30
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30489: LD_VAR 0 6
30493: PPUSH
30494: CALL_OW 257
30498: PUSH
30499: LD_INT 9
30501: EQUAL
30502: IFFALSE 30523
// points := [ 20 , 55 , 40 ] ;
30504: LD_ADDR_VAR 0 9
30508: PUSH
30509: LD_INT 20
30511: PUSH
30512: LD_INT 55
30514: PUSH
30515: LD_INT 40
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30523: LD_VAR 0 6
30527: PPUSH
30528: CALL_OW 257
30532: PUSH
30533: LD_INT 12
30535: PUSH
30536: LD_INT 16
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: IN
30543: IFFALSE 30564
// points := [ 5 , 3 , 2 ] ;
30545: LD_ADDR_VAR 0 9
30549: PUSH
30550: LD_INT 5
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30564: LD_VAR 0 6
30568: PPUSH
30569: CALL_OW 257
30573: PUSH
30574: LD_INT 17
30576: EQUAL
30577: IFFALSE 30598
// points := [ 100 , 50 , 75 ] ;
30579: LD_ADDR_VAR 0 9
30583: PUSH
30584: LD_INT 100
30586: PUSH
30587: LD_INT 50
30589: PUSH
30590: LD_INT 75
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30598: LD_VAR 0 6
30602: PPUSH
30603: CALL_OW 257
30607: PUSH
30608: LD_INT 15
30610: EQUAL
30611: IFFALSE 30632
// points := [ 10 , 5 , 3 ] ;
30613: LD_ADDR_VAR 0 9
30617: PUSH
30618: LD_INT 10
30620: PUSH
30621: LD_INT 5
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30632: LD_VAR 0 6
30636: PPUSH
30637: CALL_OW 257
30641: PUSH
30642: LD_INT 14
30644: EQUAL
30645: IFFALSE 30666
// points := [ 10 , 0 , 0 ] ;
30647: LD_ADDR_VAR 0 9
30651: PUSH
30652: LD_INT 10
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30666: LD_VAR 0 6
30670: PPUSH
30671: CALL_OW 257
30675: PUSH
30676: LD_INT 11
30678: EQUAL
30679: IFFALSE 30700
// points := [ 30 , 10 , 5 ] ;
30681: LD_ADDR_VAR 0 9
30685: PUSH
30686: LD_INT 30
30688: PUSH
30689: LD_INT 10
30691: PUSH
30692: LD_INT 5
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30700: LD_VAR 0 1
30704: PPUSH
30705: LD_INT 5
30707: PPUSH
30708: CALL_OW 321
30712: PUSH
30713: LD_INT 2
30715: EQUAL
30716: IFFALSE 30733
// bpoints := bpoints * 1.8 ;
30718: LD_ADDR_VAR 0 10
30722: PUSH
30723: LD_VAR 0 10
30727: PUSH
30728: LD_REAL  1.80000000000000E+0000
30731: MUL
30732: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30733: LD_VAR 0 6
30737: PPUSH
30738: CALL_OW 257
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: LD_INT 4
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: IN
30761: PUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: LD_INT 51
30769: PPUSH
30770: CALL_OW 321
30774: PUSH
30775: LD_INT 2
30777: EQUAL
30778: AND
30779: IFFALSE 30796
// bpoints := bpoints * 1.2 ;
30781: LD_ADDR_VAR 0 10
30785: PUSH
30786: LD_VAR 0 10
30790: PUSH
30791: LD_REAL  1.20000000000000E+0000
30794: MUL
30795: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30796: LD_VAR 0 6
30800: PPUSH
30801: CALL_OW 257
30805: PUSH
30806: LD_INT 5
30808: PUSH
30809: LD_INT 7
30811: PUSH
30812: LD_INT 9
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: LIST
30819: IN
30820: PUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: LD_INT 52
30828: PPUSH
30829: CALL_OW 321
30833: PUSH
30834: LD_INT 2
30836: EQUAL
30837: AND
30838: IFFALSE 30855
// bpoints := bpoints * 1.5 ;
30840: LD_ADDR_VAR 0 10
30844: PUSH
30845: LD_VAR 0 10
30849: PUSH
30850: LD_REAL  1.50000000000000E+0000
30853: MUL
30854: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30855: LD_VAR 0 1
30859: PPUSH
30860: LD_INT 66
30862: PPUSH
30863: CALL_OW 321
30867: PUSH
30868: LD_INT 2
30870: EQUAL
30871: IFFALSE 30888
// bpoints := bpoints * 1.1 ;
30873: LD_ADDR_VAR 0 10
30877: PUSH
30878: LD_VAR 0 10
30882: PUSH
30883: LD_REAL  1.10000000000000E+0000
30886: MUL
30887: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30888: LD_ADDR_VAR 0 10
30892: PUSH
30893: LD_VAR 0 10
30897: PUSH
30898: LD_VAR 0 6
30902: PPUSH
30903: LD_INT 1
30905: PPUSH
30906: CALL_OW 259
30910: PUSH
30911: LD_REAL  1.15000000000000E+0000
30914: MUL
30915: MUL
30916: ST_TO_ADDR
// end ; unit_vehicle :
30917: GO 31747
30919: LD_INT 2
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30927
30925: GO 31735
30927: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30928: LD_VAR 0 6
30932: PPUSH
30933: CALL_OW 264
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 42
30943: PUSH
30944: LD_INT 24
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: IN
30952: IFFALSE 30973
// points := [ 25 , 5 , 3 ] ;
30954: LD_ADDR_VAR 0 9
30958: PUSH
30959: LD_INT 25
30961: PUSH
30962: LD_INT 5
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30973: LD_VAR 0 6
30977: PPUSH
30978: CALL_OW 264
30982: PUSH
30983: LD_INT 4
30985: PUSH
30986: LD_INT 43
30988: PUSH
30989: LD_INT 25
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: IN
30997: IFFALSE 31018
// points := [ 40 , 15 , 5 ] ;
30999: LD_ADDR_VAR 0 9
31003: PUSH
31004: LD_INT 40
31006: PUSH
31007: LD_INT 15
31009: PUSH
31010: LD_INT 5
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31018: LD_VAR 0 6
31022: PPUSH
31023: CALL_OW 264
31027: PUSH
31028: LD_INT 3
31030: PUSH
31031: LD_INT 23
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: IN
31038: IFFALSE 31059
// points := [ 7 , 25 , 8 ] ;
31040: LD_ADDR_VAR 0 9
31044: PUSH
31045: LD_INT 7
31047: PUSH
31048: LD_INT 25
31050: PUSH
31051: LD_INT 8
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31059: LD_VAR 0 6
31063: PPUSH
31064: CALL_OW 264
31068: PUSH
31069: LD_INT 5
31071: PUSH
31072: LD_INT 27
31074: PUSH
31075: LD_INT 44
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: IN
31083: IFFALSE 31104
// points := [ 14 , 50 , 16 ] ;
31085: LD_ADDR_VAR 0 9
31089: PUSH
31090: LD_INT 14
31092: PUSH
31093: LD_INT 50
31095: PUSH
31096: LD_INT 16
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31104: LD_VAR 0 6
31108: PPUSH
31109: CALL_OW 264
31113: PUSH
31114: LD_INT 6
31116: PUSH
31117: LD_INT 46
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: IN
31124: IFFALSE 31145
// points := [ 32 , 120 , 70 ] ;
31126: LD_ADDR_VAR 0 9
31130: PUSH
31131: LD_INT 32
31133: PUSH
31134: LD_INT 120
31136: PUSH
31137: LD_INT 70
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31145: LD_VAR 0 6
31149: PPUSH
31150: CALL_OW 264
31154: PUSH
31155: LD_INT 7
31157: PUSH
31158: LD_INT 28
31160: PUSH
31161: LD_INT 45
31163: PUSH
31164: LD_EXP 89
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: IN
31175: IFFALSE 31196
// points := [ 35 , 20 , 45 ] ;
31177: LD_ADDR_VAR 0 9
31181: PUSH
31182: LD_INT 35
31184: PUSH
31185: LD_INT 20
31187: PUSH
31188: LD_INT 45
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31196: LD_VAR 0 6
31200: PPUSH
31201: CALL_OW 264
31205: PUSH
31206: LD_INT 47
31208: PUSH
31209: EMPTY
31210: LIST
31211: IN
31212: IFFALSE 31233
// points := [ 67 , 45 , 75 ] ;
31214: LD_ADDR_VAR 0 9
31218: PUSH
31219: LD_INT 67
31221: PUSH
31222: LD_INT 45
31224: PUSH
31225: LD_INT 75
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31233: LD_VAR 0 6
31237: PPUSH
31238: CALL_OW 264
31242: PUSH
31243: LD_INT 26
31245: PUSH
31246: EMPTY
31247: LIST
31248: IN
31249: IFFALSE 31270
// points := [ 120 , 30 , 80 ] ;
31251: LD_ADDR_VAR 0 9
31255: PUSH
31256: LD_INT 120
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 80
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31270: LD_VAR 0 6
31274: PPUSH
31275: CALL_OW 264
31279: PUSH
31280: LD_INT 22
31282: PUSH
31283: EMPTY
31284: LIST
31285: IN
31286: IFFALSE 31307
// points := [ 40 , 1 , 1 ] ;
31288: LD_ADDR_VAR 0 9
31292: PUSH
31293: LD_INT 40
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31307: LD_VAR 0 6
31311: PPUSH
31312: CALL_OW 264
31316: PUSH
31317: LD_INT 29
31319: PUSH
31320: EMPTY
31321: LIST
31322: IN
31323: IFFALSE 31344
// points := [ 70 , 200 , 400 ] ;
31325: LD_ADDR_VAR 0 9
31329: PUSH
31330: LD_INT 70
31332: PUSH
31333: LD_INT 200
31335: PUSH
31336: LD_INT 400
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31344: LD_VAR 0 6
31348: PPUSH
31349: CALL_OW 264
31353: PUSH
31354: LD_INT 14
31356: PUSH
31357: LD_INT 53
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: IN
31364: IFFALSE 31385
// points := [ 40 , 10 , 20 ] ;
31366: LD_ADDR_VAR 0 9
31370: PUSH
31371: LD_INT 40
31373: PUSH
31374: LD_INT 10
31376: PUSH
31377: LD_INT 20
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31385: LD_VAR 0 6
31389: PPUSH
31390: CALL_OW 264
31394: PUSH
31395: LD_INT 9
31397: PUSH
31398: EMPTY
31399: LIST
31400: IN
31401: IFFALSE 31422
// points := [ 5 , 70 , 20 ] ;
31403: LD_ADDR_VAR 0 9
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 70
31413: PUSH
31414: LD_INT 20
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31422: LD_VAR 0 6
31426: PPUSH
31427: CALL_OW 264
31431: PUSH
31432: LD_INT 10
31434: PUSH
31435: EMPTY
31436: LIST
31437: IN
31438: IFFALSE 31459
// points := [ 35 , 110 , 70 ] ;
31440: LD_ADDR_VAR 0 9
31444: PUSH
31445: LD_INT 35
31447: PUSH
31448: LD_INT 110
31450: PUSH
31451: LD_INT 70
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31459: LD_VAR 0 6
31463: PPUSH
31464: CALL_OW 265
31468: PUSH
31469: LD_INT 25
31471: EQUAL
31472: IFFALSE 31493
// points := [ 80 , 65 , 100 ] ;
31474: LD_ADDR_VAR 0 9
31478: PUSH
31479: LD_INT 80
31481: PUSH
31482: LD_INT 65
31484: PUSH
31485: LD_INT 100
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31493: LD_VAR 0 6
31497: PPUSH
31498: CALL_OW 263
31502: PUSH
31503: LD_INT 1
31505: EQUAL
31506: IFFALSE 31541
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31508: LD_ADDR_VAR 0 10
31512: PUSH
31513: LD_VAR 0 10
31517: PUSH
31518: LD_VAR 0 6
31522: PPUSH
31523: CALL_OW 311
31527: PPUSH
31528: LD_INT 3
31530: PPUSH
31531: CALL_OW 259
31535: PUSH
31536: LD_INT 4
31538: MUL
31539: MUL
31540: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31541: LD_VAR 0 6
31545: PPUSH
31546: CALL_OW 263
31550: PUSH
31551: LD_INT 2
31553: EQUAL
31554: IFFALSE 31605
// begin j := IsControledBy ( i ) ;
31556: LD_ADDR_VAR 0 7
31560: PUSH
31561: LD_VAR 0 6
31565: PPUSH
31566: CALL_OW 312
31570: ST_TO_ADDR
// if j then
31571: LD_VAR 0 7
31575: IFFALSE 31605
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31577: LD_ADDR_VAR 0 10
31581: PUSH
31582: LD_VAR 0 10
31586: PUSH
31587: LD_VAR 0 7
31591: PPUSH
31592: LD_INT 3
31594: PPUSH
31595: CALL_OW 259
31599: PUSH
31600: LD_INT 3
31602: MUL
31603: MUL
31604: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31605: LD_VAR 0 6
31609: PPUSH
31610: CALL_OW 264
31614: PUSH
31615: LD_INT 5
31617: PUSH
31618: LD_INT 6
31620: PUSH
31621: LD_INT 46
31623: PUSH
31624: LD_INT 44
31626: PUSH
31627: LD_INT 47
31629: PUSH
31630: LD_INT 45
31632: PUSH
31633: LD_INT 28
31635: PUSH
31636: LD_INT 7
31638: PUSH
31639: LD_INT 27
31641: PUSH
31642: LD_INT 29
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: IN
31657: PUSH
31658: LD_VAR 0 1
31662: PPUSH
31663: LD_INT 52
31665: PPUSH
31666: CALL_OW 321
31670: PUSH
31671: LD_INT 2
31673: EQUAL
31674: AND
31675: IFFALSE 31692
// bpoints := bpoints * 1.2 ;
31677: LD_ADDR_VAR 0 10
31681: PUSH
31682: LD_VAR 0 10
31686: PUSH
31687: LD_REAL  1.20000000000000E+0000
31690: MUL
31691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31692: LD_VAR 0 6
31696: PPUSH
31697: CALL_OW 264
31701: PUSH
31702: LD_INT 6
31704: PUSH
31705: LD_INT 46
31707: PUSH
31708: LD_INT 47
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: IN
31716: IFFALSE 31733
// bpoints := bpoints * 1.2 ;
31718: LD_ADDR_VAR 0 10
31722: PUSH
31723: LD_VAR 0 10
31727: PUSH
31728: LD_REAL  1.20000000000000E+0000
31731: MUL
31732: ST_TO_ADDR
// end ; unit_building :
31733: GO 31747
31735: LD_INT 3
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31746
31743: POP
// ; end ;
31744: GO 31747
31746: POP
// for j = 1 to 3 do
31747: LD_ADDR_VAR 0 7
31751: PUSH
31752: DOUBLE
31753: LD_INT 1
31755: DEC
31756: ST_TO_ADDR
31757: LD_INT 3
31759: PUSH
31760: FOR_TO
31761: IFFALSE 31814
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_VAR 0 5
31772: PPUSH
31773: LD_VAR 0 7
31777: PPUSH
31778: LD_VAR 0 5
31782: PUSH
31783: LD_VAR 0 7
31787: ARRAY
31788: PUSH
31789: LD_VAR 0 9
31793: PUSH
31794: LD_VAR 0 7
31798: ARRAY
31799: PUSH
31800: LD_VAR 0 10
31804: MUL
31805: PLUS
31806: PPUSH
31807: CALL_OW 1
31811: ST_TO_ADDR
31812: GO 31760
31814: POP
31815: POP
// end ;
31816: GO 30293
31818: POP
31819: POP
// result := Replace ( result , 4 , tmp ) ;
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: LD_VAR 0 5
31829: PPUSH
31830: LD_INT 4
31832: PPUSH
31833: LD_VAR 0 8
31837: PPUSH
31838: CALL_OW 1
31842: ST_TO_ADDR
// end ;
31843: LD_VAR 0 5
31847: RET
// export function DangerAtRange ( unit , range ) ; begin
31848: LD_INT 0
31850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31851: LD_ADDR_VAR 0 3
31855: PUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL_OW 255
31865: PPUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 250
31875: PPUSH
31876: LD_VAR 0 1
31880: PPUSH
31881: CALL_OW 251
31885: PPUSH
31886: LD_VAR 0 2
31890: PPUSH
31891: CALL 30145 0 4
31895: ST_TO_ADDR
// end ;
31896: LD_VAR 0 3
31900: RET
// export function DangerInArea ( side , area ) ; begin
31901: LD_INT 0
31903: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31904: LD_ADDR_VAR 0 3
31908: PUSH
31909: LD_VAR 0 2
31913: PPUSH
31914: LD_INT 81
31916: PUSH
31917: LD_VAR 0 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 70
31930: ST_TO_ADDR
// end ;
31931: LD_VAR 0 3
31935: RET
// export function IsExtension ( b ) ; begin
31936: LD_INT 0
31938: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31939: LD_ADDR_VAR 0 2
31943: PUSH
31944: LD_VAR 0 1
31948: PUSH
31949: LD_INT 23
31951: PUSH
31952: LD_INT 20
31954: PUSH
31955: LD_INT 22
31957: PUSH
31958: LD_INT 17
31960: PUSH
31961: LD_INT 24
31963: PUSH
31964: LD_INT 21
31966: PUSH
31967: LD_INT 19
31969: PUSH
31970: LD_INT 16
31972: PUSH
31973: LD_INT 25
31975: PUSH
31976: LD_INT 18
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: IN
31991: ST_TO_ADDR
// end ;
31992: LD_VAR 0 2
31996: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31997: LD_INT 0
31999: PPUSH
32000: PPUSH
32001: PPUSH
// result := [ ] ;
32002: LD_ADDR_VAR 0 4
32006: PUSH
32007: EMPTY
32008: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_INT 21
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 70
32033: ST_TO_ADDR
// if not tmp then
32034: LD_VAR 0 5
32038: NOT
32039: IFFALSE 32043
// exit ;
32041: GO 32107
// if checkLink then
32043: LD_VAR 0 3
32047: IFFALSE 32097
// begin for i in tmp do
32049: LD_ADDR_VAR 0 6
32053: PUSH
32054: LD_VAR 0 5
32058: PUSH
32059: FOR_IN
32060: IFFALSE 32095
// if GetBase ( i ) <> base then
32062: LD_VAR 0 6
32066: PPUSH
32067: CALL_OW 274
32071: PUSH
32072: LD_VAR 0 1
32076: NONEQUAL
32077: IFFALSE 32093
// ComLinkToBase ( base , i ) ;
32079: LD_VAR 0 1
32083: PPUSH
32084: LD_VAR 0 6
32088: PPUSH
32089: CALL_OW 169
32093: GO 32059
32095: POP
32096: POP
// end ; result := tmp ;
32097: LD_ADDR_VAR 0 4
32101: PUSH
32102: LD_VAR 0 5
32106: ST_TO_ADDR
// end ;
32107: LD_VAR 0 4
32111: RET
// export function ComComplete ( units , b ) ; var i ; begin
32112: LD_INT 0
32114: PPUSH
32115: PPUSH
// if not units then
32116: LD_VAR 0 1
32120: NOT
32121: IFFALSE 32125
// exit ;
32123: GO 32215
// for i in units do
32125: LD_ADDR_VAR 0 4
32129: PUSH
32130: LD_VAR 0 1
32134: PUSH
32135: FOR_IN
32136: IFFALSE 32213
// if BuildingStatus ( b ) = bs_build then
32138: LD_VAR 0 2
32142: PPUSH
32143: CALL_OW 461
32147: PUSH
32148: LD_INT 1
32150: EQUAL
32151: IFFALSE 32211
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32153: LD_VAR 0 4
32157: PPUSH
32158: LD_STRING h
32160: PUSH
32161: LD_VAR 0 2
32165: PPUSH
32166: CALL_OW 250
32170: PUSH
32171: LD_VAR 0 2
32175: PPUSH
32176: CALL_OW 251
32180: PUSH
32181: LD_VAR 0 2
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: PPUSH
32207: CALL_OW 446
32211: GO 32135
32213: POP
32214: POP
// end ;
32215: LD_VAR 0 3
32219: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32220: LD_INT 0
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32228: LD_VAR 0 1
32232: NOT
32233: PUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 263
32243: PUSH
32244: LD_INT 2
32246: NONEQUAL
32247: OR
32248: IFFALSE 32252
// exit ;
32250: GO 32568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32252: LD_ADDR_VAR 0 6
32256: PUSH
32257: LD_INT 22
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 255
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 30
32279: PUSH
32280: LD_INT 36
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 34
32289: PUSH
32290: LD_INT 31
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PPUSH
32306: CALL_OW 69
32310: ST_TO_ADDR
// if not tmp then
32311: LD_VAR 0 6
32315: NOT
32316: IFFALSE 32320
// exit ;
32318: GO 32568
// result := [ ] ;
32320: LD_ADDR_VAR 0 2
32324: PUSH
32325: EMPTY
32326: ST_TO_ADDR
// for i in tmp do
32327: LD_ADDR_VAR 0 3
32331: PUSH
32332: LD_VAR 0 6
32336: PUSH
32337: FOR_IN
32338: IFFALSE 32409
// begin t := UnitsInside ( i ) ;
32340: LD_ADDR_VAR 0 4
32344: PUSH
32345: LD_VAR 0 3
32349: PPUSH
32350: CALL_OW 313
32354: ST_TO_ADDR
// if t then
32355: LD_VAR 0 4
32359: IFFALSE 32407
// for j in t do
32361: LD_ADDR_VAR 0 7
32365: PUSH
32366: LD_VAR 0 4
32370: PUSH
32371: FOR_IN
32372: IFFALSE 32405
// result := Replace ( result , result + 1 , j ) ;
32374: LD_ADDR_VAR 0 2
32378: PUSH
32379: LD_VAR 0 2
32383: PPUSH
32384: LD_VAR 0 2
32388: PUSH
32389: LD_INT 1
32391: PLUS
32392: PPUSH
32393: LD_VAR 0 7
32397: PPUSH
32398: CALL_OW 1
32402: ST_TO_ADDR
32403: GO 32371
32405: POP
32406: POP
// end ;
32407: GO 32337
32409: POP
32410: POP
// if not result then
32411: LD_VAR 0 2
32415: NOT
32416: IFFALSE 32420
// exit ;
32418: GO 32568
// mech := result [ 1 ] ;
32420: LD_ADDR_VAR 0 5
32424: PUSH
32425: LD_VAR 0 2
32429: PUSH
32430: LD_INT 1
32432: ARRAY
32433: ST_TO_ADDR
// if result > 1 then
32434: LD_VAR 0 2
32438: PUSH
32439: LD_INT 1
32441: GREATER
32442: IFFALSE 32554
// begin for i = 2 to result do
32444: LD_ADDR_VAR 0 3
32448: PUSH
32449: DOUBLE
32450: LD_INT 2
32452: DEC
32453: ST_TO_ADDR
32454: LD_VAR 0 2
32458: PUSH
32459: FOR_TO
32460: IFFALSE 32552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32462: LD_ADDR_VAR 0 4
32466: PUSH
32467: LD_VAR 0 2
32471: PUSH
32472: LD_VAR 0 3
32476: ARRAY
32477: PPUSH
32478: LD_INT 3
32480: PPUSH
32481: CALL_OW 259
32485: PUSH
32486: LD_VAR 0 2
32490: PUSH
32491: LD_VAR 0 3
32495: ARRAY
32496: PPUSH
32497: CALL_OW 432
32501: MINUS
32502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32503: LD_VAR 0 4
32507: PUSH
32508: LD_VAR 0 5
32512: PPUSH
32513: LD_INT 3
32515: PPUSH
32516: CALL_OW 259
32520: PUSH
32521: LD_VAR 0 5
32525: PPUSH
32526: CALL_OW 432
32530: MINUS
32531: GREATEREQUAL
32532: IFFALSE 32550
// mech := result [ i ] ;
32534: LD_ADDR_VAR 0 5
32538: PUSH
32539: LD_VAR 0 2
32543: PUSH
32544: LD_VAR 0 3
32548: ARRAY
32549: ST_TO_ADDR
// end ;
32550: GO 32459
32552: POP
32553: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_VAR 0 5
32563: PPUSH
32564: CALL_OW 135
// end ;
32568: LD_VAR 0 2
32572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32573: LD_INT 0
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
// result := [ ] ;
32588: LD_ADDR_VAR 0 7
32592: PUSH
32593: EMPTY
32594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL_OW 266
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: IN
32615: NOT
32616: IFFALSE 32620
// exit ;
32618: GO 34254
// if name then
32620: LD_VAR 0 3
32624: IFFALSE 32640
// SetBName ( base_dep , name ) ;
32626: LD_VAR 0 1
32630: PPUSH
32631: LD_VAR 0 3
32635: PPUSH
32636: CALL_OW 500
// base := GetBase ( base_dep ) ;
32640: LD_ADDR_VAR 0 15
32644: PUSH
32645: LD_VAR 0 1
32649: PPUSH
32650: CALL_OW 274
32654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32655: LD_ADDR_VAR 0 16
32659: PUSH
32660: LD_VAR 0 1
32664: PPUSH
32665: CALL_OW 255
32669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32670: LD_ADDR_VAR 0 17
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 248
32684: ST_TO_ADDR
// if sources then
32685: LD_VAR 0 5
32689: IFFALSE 32736
// for i = 1 to 3 do
32691: LD_ADDR_VAR 0 8
32695: PUSH
32696: DOUBLE
32697: LD_INT 1
32699: DEC
32700: ST_TO_ADDR
32701: LD_INT 3
32703: PUSH
32704: FOR_TO
32705: IFFALSE 32734
// AddResourceType ( base , i , sources [ i ] ) ;
32707: LD_VAR 0 15
32711: PPUSH
32712: LD_VAR 0 8
32716: PPUSH
32717: LD_VAR 0 5
32721: PUSH
32722: LD_VAR 0 8
32726: ARRAY
32727: PPUSH
32728: CALL_OW 276
32732: GO 32704
32734: POP
32735: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32736: LD_ADDR_VAR 0 18
32740: PUSH
32741: LD_VAR 0 15
32745: PPUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: LD_INT 1
32753: PPUSH
32754: CALL 31997 0 3
32758: ST_TO_ADDR
// InitHc ;
32759: CALL_OW 19
// InitUc ;
32763: CALL_OW 18
// uc_side := side ;
32767: LD_ADDR_OWVAR 20
32771: PUSH
32772: LD_VAR 0 16
32776: ST_TO_ADDR
// uc_nation := nation ;
32777: LD_ADDR_OWVAR 21
32781: PUSH
32782: LD_VAR 0 17
32786: ST_TO_ADDR
// if buildings then
32787: LD_VAR 0 18
32791: IFFALSE 34113
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32793: LD_ADDR_VAR 0 19
32797: PUSH
32798: LD_VAR 0 18
32802: PPUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 30
32808: PUSH
32809: LD_INT 29
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 30
32818: PUSH
32819: LD_INT 30
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: PPUSH
32831: CALL_OW 72
32835: ST_TO_ADDR
// if tmp then
32836: LD_VAR 0 19
32840: IFFALSE 32888
// for i in tmp do
32842: LD_ADDR_VAR 0 8
32846: PUSH
32847: LD_VAR 0 19
32851: PUSH
32852: FOR_IN
32853: IFFALSE 32886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32855: LD_VAR 0 8
32859: PPUSH
32860: CALL_OW 250
32864: PPUSH
32865: LD_VAR 0 8
32869: PPUSH
32870: CALL_OW 251
32874: PPUSH
32875: LD_VAR 0 16
32879: PPUSH
32880: CALL_OW 441
32884: GO 32852
32886: POP
32887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32888: LD_VAR 0 18
32892: PPUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 30
32898: PUSH
32899: LD_INT 32
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 30
32908: PUSH
32909: LD_INT 33
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 72
32925: IFFALSE 33013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32927: LD_ADDR_VAR 0 8
32931: PUSH
32932: LD_VAR 0 18
32936: PPUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: LD_INT 32
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 30
32952: PUSH
32953: LD_INT 33
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: PPUSH
32965: CALL_OW 72
32969: PUSH
32970: FOR_IN
32971: IFFALSE 33011
// begin if not GetBWeapon ( i ) then
32973: LD_VAR 0 8
32977: PPUSH
32978: CALL_OW 269
32982: NOT
32983: IFFALSE 33009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32985: LD_VAR 0 8
32989: PPUSH
32990: LD_VAR 0 8
32994: PPUSH
32995: LD_VAR 0 2
32999: PPUSH
33000: CALL 34259 0 2
33004: PPUSH
33005: CALL_OW 431
// end ;
33009: GO 32970
33011: POP
33012: POP
// end ; for i = 1 to personel do
33013: LD_ADDR_VAR 0 8
33017: PUSH
33018: DOUBLE
33019: LD_INT 1
33021: DEC
33022: ST_TO_ADDR
33023: LD_VAR 0 6
33027: PUSH
33028: FOR_TO
33029: IFFALSE 34093
// begin if i > 4 then
33031: LD_VAR 0 8
33035: PUSH
33036: LD_INT 4
33038: GREATER
33039: IFFALSE 33043
// break ;
33041: GO 34093
// case i of 1 :
33043: LD_VAR 0 8
33047: PUSH
33048: LD_INT 1
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33136
33056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33057: LD_ADDR_VAR 0 12
33061: PUSH
33062: LD_VAR 0 18
33066: PPUSH
33067: LD_INT 22
33069: PUSH
33070: LD_VAR 0 16
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 58
33081: PUSH
33082: EMPTY
33083: LIST
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: LD_INT 30
33090: PUSH
33091: LD_INT 32
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 30
33100: PUSH
33101: LD_INT 4
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 30
33110: PUSH
33111: LD_INT 5
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 72
33133: ST_TO_ADDR
33134: GO 33358
33136: LD_INT 2
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33206
33144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33145: LD_ADDR_VAR 0 12
33149: PUSH
33150: LD_VAR 0 18
33154: PPUSH
33155: LD_INT 22
33157: PUSH
33158: LD_VAR 0 16
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: PUSH
33170: LD_INT 30
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 30
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL_OW 72
33203: ST_TO_ADDR
33204: GO 33358
33206: LD_INT 3
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33276
33214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33215: LD_ADDR_VAR 0 12
33219: PUSH
33220: LD_VAR 0 18
33224: PPUSH
33225: LD_INT 22
33227: PUSH
33228: LD_VAR 0 16
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PPUSH
33269: CALL_OW 72
33273: ST_TO_ADDR
33274: GO 33358
33276: LD_INT 4
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33357
33284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33285: LD_ADDR_VAR 0 12
33289: PUSH
33290: LD_VAR 0 18
33294: PPUSH
33295: LD_INT 22
33297: PUSH
33298: LD_VAR 0 16
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: LD_INT 30
33312: PUSH
33313: LD_INT 6
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 30
33322: PUSH
33323: LD_INT 7
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: LD_INT 8
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PPUSH
33350: CALL_OW 72
33354: ST_TO_ADDR
33355: GO 33358
33357: POP
// if i = 1 then
33358: LD_VAR 0 8
33362: PUSH
33363: LD_INT 1
33365: EQUAL
33366: IFFALSE 33477
// begin tmp := [ ] ;
33368: LD_ADDR_VAR 0 19
33372: PUSH
33373: EMPTY
33374: ST_TO_ADDR
// for j in f do
33375: LD_ADDR_VAR 0 9
33379: PUSH
33380: LD_VAR 0 12
33384: PUSH
33385: FOR_IN
33386: IFFALSE 33459
// if GetBType ( j ) = b_bunker then
33388: LD_VAR 0 9
33392: PPUSH
33393: CALL_OW 266
33397: PUSH
33398: LD_INT 32
33400: EQUAL
33401: IFFALSE 33428
// tmp := Insert ( tmp , 1 , j ) else
33403: LD_ADDR_VAR 0 19
33407: PUSH
33408: LD_VAR 0 19
33412: PPUSH
33413: LD_INT 1
33415: PPUSH
33416: LD_VAR 0 9
33420: PPUSH
33421: CALL_OW 2
33425: ST_TO_ADDR
33426: GO 33457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33428: LD_ADDR_VAR 0 19
33432: PUSH
33433: LD_VAR 0 19
33437: PPUSH
33438: LD_VAR 0 19
33442: PUSH
33443: LD_INT 1
33445: PLUS
33446: PPUSH
33447: LD_VAR 0 9
33451: PPUSH
33452: CALL_OW 2
33456: ST_TO_ADDR
33457: GO 33385
33459: POP
33460: POP
// if tmp then
33461: LD_VAR 0 19
33465: IFFALSE 33477
// f := tmp ;
33467: LD_ADDR_VAR 0 12
33471: PUSH
33472: LD_VAR 0 19
33476: ST_TO_ADDR
// end ; x := personel [ i ] ;
33477: LD_ADDR_VAR 0 13
33481: PUSH
33482: LD_VAR 0 6
33486: PUSH
33487: LD_VAR 0 8
33491: ARRAY
33492: ST_TO_ADDR
// if x = - 1 then
33493: LD_VAR 0 13
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: EQUAL
33502: IFFALSE 33711
// begin for j in f do
33504: LD_ADDR_VAR 0 9
33508: PUSH
33509: LD_VAR 0 12
33513: PUSH
33514: FOR_IN
33515: IFFALSE 33707
// repeat InitHc ;
33517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33521: LD_VAR 0 9
33525: PPUSH
33526: CALL_OW 266
33530: PUSH
33531: LD_INT 5
33533: EQUAL
33534: IFFALSE 33604
// begin if UnitsInside ( j ) < 3 then
33536: LD_VAR 0 9
33540: PPUSH
33541: CALL_OW 313
33545: PUSH
33546: LD_INT 3
33548: LESS
33549: IFFALSE 33585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33551: LD_INT 0
33553: PPUSH
33554: LD_INT 5
33556: PUSH
33557: LD_INT 8
33559: PUSH
33560: LD_INT 9
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: PUSH
33568: LD_VAR 0 17
33572: ARRAY
33573: PPUSH
33574: LD_VAR 0 4
33578: PPUSH
33579: CALL_OW 380
33583: GO 33602
// PrepareHuman ( false , i , skill ) ;
33585: LD_INT 0
33587: PPUSH
33588: LD_VAR 0 8
33592: PPUSH
33593: LD_VAR 0 4
33597: PPUSH
33598: CALL_OW 380
// end else
33602: GO 33621
// PrepareHuman ( false , i , skill ) ;
33604: LD_INT 0
33606: PPUSH
33607: LD_VAR 0 8
33611: PPUSH
33612: LD_VAR 0 4
33616: PPUSH
33617: CALL_OW 380
// un := CreateHuman ;
33621: LD_ADDR_VAR 0 14
33625: PUSH
33626: CALL_OW 44
33630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33631: LD_ADDR_VAR 0 7
33635: PUSH
33636: LD_VAR 0 7
33640: PPUSH
33641: LD_INT 1
33643: PPUSH
33644: LD_VAR 0 14
33648: PPUSH
33649: CALL_OW 2
33653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33654: LD_VAR 0 14
33658: PPUSH
33659: LD_VAR 0 9
33663: PPUSH
33664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33668: LD_VAR 0 9
33672: PPUSH
33673: CALL_OW 313
33677: PUSH
33678: LD_INT 6
33680: EQUAL
33681: PUSH
33682: LD_VAR 0 9
33686: PPUSH
33687: CALL_OW 266
33691: PUSH
33692: LD_INT 32
33694: PUSH
33695: LD_INT 31
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: IN
33702: OR
33703: IFFALSE 33517
33705: GO 33514
33707: POP
33708: POP
// end else
33709: GO 34091
// for j = 1 to x do
33711: LD_ADDR_VAR 0 9
33715: PUSH
33716: DOUBLE
33717: LD_INT 1
33719: DEC
33720: ST_TO_ADDR
33721: LD_VAR 0 13
33725: PUSH
33726: FOR_TO
33727: IFFALSE 34089
// begin InitHc ;
33729: CALL_OW 19
// if not f then
33733: LD_VAR 0 12
33737: NOT
33738: IFFALSE 33827
// begin PrepareHuman ( false , i , skill ) ;
33740: LD_INT 0
33742: PPUSH
33743: LD_VAR 0 8
33747: PPUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: CALL_OW 380
// un := CreateHuman ;
33757: LD_ADDR_VAR 0 14
33761: PUSH
33762: CALL_OW 44
33766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33767: LD_ADDR_VAR 0 7
33771: PUSH
33772: LD_VAR 0 7
33776: PPUSH
33777: LD_INT 1
33779: PPUSH
33780: LD_VAR 0 14
33784: PPUSH
33785: CALL_OW 2
33789: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33790: LD_VAR 0 14
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 250
33804: PPUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: CALL_OW 251
33814: PPUSH
33815: LD_INT 10
33817: PPUSH
33818: LD_INT 0
33820: PPUSH
33821: CALL_OW 50
// continue ;
33825: GO 33726
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33827: LD_VAR 0 12
33831: PUSH
33832: LD_INT 1
33834: ARRAY
33835: PPUSH
33836: CALL_OW 313
33840: PUSH
33841: LD_VAR 0 12
33845: PUSH
33846: LD_INT 1
33848: ARRAY
33849: PPUSH
33850: CALL_OW 266
33854: PUSH
33855: LD_INT 32
33857: PUSH
33858: LD_INT 31
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: IN
33865: AND
33866: PUSH
33867: LD_VAR 0 12
33871: PUSH
33872: LD_INT 1
33874: ARRAY
33875: PPUSH
33876: CALL_OW 313
33880: PUSH
33881: LD_INT 6
33883: EQUAL
33884: OR
33885: IFFALSE 33905
// f := Delete ( f , 1 ) ;
33887: LD_ADDR_VAR 0 12
33891: PUSH
33892: LD_VAR 0 12
33896: PPUSH
33897: LD_INT 1
33899: PPUSH
33900: CALL_OW 3
33904: ST_TO_ADDR
// if not f then
33905: LD_VAR 0 12
33909: NOT
33910: IFFALSE 33928
// begin x := x + 2 ;
33912: LD_ADDR_VAR 0 13
33916: PUSH
33917: LD_VAR 0 13
33921: PUSH
33922: LD_INT 2
33924: PLUS
33925: ST_TO_ADDR
// continue ;
33926: GO 33726
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33928: LD_VAR 0 12
33932: PUSH
33933: LD_INT 1
33935: ARRAY
33936: PPUSH
33937: CALL_OW 266
33941: PUSH
33942: LD_INT 5
33944: EQUAL
33945: IFFALSE 34019
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33947: LD_VAR 0 12
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: PPUSH
33956: CALL_OW 313
33960: PUSH
33961: LD_INT 3
33963: LESS
33964: IFFALSE 34000
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33966: LD_INT 0
33968: PPUSH
33969: LD_INT 5
33971: PUSH
33972: LD_INT 8
33974: PUSH
33975: LD_INT 9
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: PUSH
33983: LD_VAR 0 17
33987: ARRAY
33988: PPUSH
33989: LD_VAR 0 4
33993: PPUSH
33994: CALL_OW 380
33998: GO 34017
// PrepareHuman ( false , i , skill ) ;
34000: LD_INT 0
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_VAR 0 4
34012: PPUSH
34013: CALL_OW 380
// end else
34017: GO 34036
// PrepareHuman ( false , i , skill ) ;
34019: LD_INT 0
34021: PPUSH
34022: LD_VAR 0 8
34026: PPUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: CALL_OW 380
// un := CreateHuman ;
34036: LD_ADDR_VAR 0 14
34040: PUSH
34041: CALL_OW 44
34045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34046: LD_ADDR_VAR 0 7
34050: PUSH
34051: LD_VAR 0 7
34055: PPUSH
34056: LD_INT 1
34058: PPUSH
34059: LD_VAR 0 14
34063: PPUSH
34064: CALL_OW 2
34068: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34069: LD_VAR 0 14
34073: PPUSH
34074: LD_VAR 0 12
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: PPUSH
34083: CALL_OW 52
// end ;
34087: GO 33726
34089: POP
34090: POP
// end ;
34091: GO 33028
34093: POP
34094: POP
// result := result ^ buildings ;
34095: LD_ADDR_VAR 0 7
34099: PUSH
34100: LD_VAR 0 7
34104: PUSH
34105: LD_VAR 0 18
34109: ADD
34110: ST_TO_ADDR
// end else
34111: GO 34254
// begin for i = 1 to personel do
34113: LD_ADDR_VAR 0 8
34117: PUSH
34118: DOUBLE
34119: LD_INT 1
34121: DEC
34122: ST_TO_ADDR
34123: LD_VAR 0 6
34127: PUSH
34128: FOR_TO
34129: IFFALSE 34252
// begin if i > 4 then
34131: LD_VAR 0 8
34135: PUSH
34136: LD_INT 4
34138: GREATER
34139: IFFALSE 34143
// break ;
34141: GO 34252
// x := personel [ i ] ;
34143: LD_ADDR_VAR 0 13
34147: PUSH
34148: LD_VAR 0 6
34152: PUSH
34153: LD_VAR 0 8
34157: ARRAY
34158: ST_TO_ADDR
// if x = - 1 then
34159: LD_VAR 0 13
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: EQUAL
34168: IFFALSE 34172
// continue ;
34170: GO 34128
// PrepareHuman ( false , i , skill ) ;
34172: LD_INT 0
34174: PPUSH
34175: LD_VAR 0 8
34179: PPUSH
34180: LD_VAR 0 4
34184: PPUSH
34185: CALL_OW 380
// un := CreateHuman ;
34189: LD_ADDR_VAR 0 14
34193: PUSH
34194: CALL_OW 44
34198: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34199: LD_VAR 0 14
34203: PPUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 250
34213: PPUSH
34214: LD_VAR 0 1
34218: PPUSH
34219: CALL_OW 251
34223: PPUSH
34224: LD_INT 10
34226: PPUSH
34227: LD_INT 0
34229: PPUSH
34230: CALL_OW 50
// result := result ^ un ;
34234: LD_ADDR_VAR 0 7
34238: PUSH
34239: LD_VAR 0 7
34243: PUSH
34244: LD_VAR 0 14
34248: ADD
34249: ST_TO_ADDR
// end ;
34250: GO 34128
34252: POP
34253: POP
// end ; end ;
34254: LD_VAR 0 7
34258: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34259: LD_INT 0
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
// result := false ;
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_INT 0
34284: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34285: LD_VAR 0 1
34289: NOT
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 266
34300: PUSH
34301: LD_INT 32
34303: PUSH
34304: LD_INT 33
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: IN
34311: NOT
34312: OR
34313: IFFALSE 34317
// exit ;
34315: GO 35426
// nat := GetNation ( tower ) ;
34317: LD_ADDR_VAR 0 12
34321: PUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 248
34331: ST_TO_ADDR
// side := GetSide ( tower ) ;
34332: LD_ADDR_VAR 0 16
34336: PUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 255
34346: ST_TO_ADDR
// x := GetX ( tower ) ;
34347: LD_ADDR_VAR 0 10
34351: PUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 250
34361: ST_TO_ADDR
// y := GetY ( tower ) ;
34362: LD_ADDR_VAR 0 11
34366: PUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 251
34376: ST_TO_ADDR
// if not x or not y then
34377: LD_VAR 0 10
34381: NOT
34382: PUSH
34383: LD_VAR 0 11
34387: NOT
34388: OR
34389: IFFALSE 34393
// exit ;
34391: GO 35426
// weapon := 0 ;
34393: LD_ADDR_VAR 0 18
34397: PUSH
34398: LD_INT 0
34400: ST_TO_ADDR
// fac_list := [ ] ;
34401: LD_ADDR_VAR 0 17
34405: PUSH
34406: EMPTY
34407: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34408: LD_ADDR_VAR 0 6
34412: PUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 274
34422: PPUSH
34423: LD_VAR 0 2
34427: PPUSH
34428: LD_INT 0
34430: PPUSH
34431: CALL 31997 0 3
34435: PPUSH
34436: LD_INT 30
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PPUSH
34446: CALL_OW 72
34450: ST_TO_ADDR
// if not factories then
34451: LD_VAR 0 6
34455: NOT
34456: IFFALSE 34460
// exit ;
34458: GO 35426
// for i in factories do
34460: LD_ADDR_VAR 0 8
34464: PUSH
34465: LD_VAR 0 6
34469: PUSH
34470: FOR_IN
34471: IFFALSE 34496
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34473: LD_ADDR_VAR 0 17
34477: PUSH
34478: LD_VAR 0 17
34482: PUSH
34483: LD_VAR 0 8
34487: PPUSH
34488: CALL_OW 478
34492: UNION
34493: ST_TO_ADDR
34494: GO 34470
34496: POP
34497: POP
// if not fac_list then
34498: LD_VAR 0 17
34502: NOT
34503: IFFALSE 34507
// exit ;
34505: GO 35426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34507: LD_ADDR_VAR 0 5
34511: PUSH
34512: LD_INT 4
34514: PUSH
34515: LD_INT 5
34517: PUSH
34518: LD_INT 9
34520: PUSH
34521: LD_INT 10
34523: PUSH
34524: LD_INT 6
34526: PUSH
34527: LD_INT 7
34529: PUSH
34530: LD_INT 11
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 27
34544: PUSH
34545: LD_INT 28
34547: PUSH
34548: LD_INT 26
34550: PUSH
34551: LD_INT 30
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 43
34562: PUSH
34563: LD_INT 44
34565: PUSH
34566: LD_INT 46
34568: PUSH
34569: LD_INT 45
34571: PUSH
34572: LD_INT 47
34574: PUSH
34575: LD_INT 49
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: PUSH
34591: LD_VAR 0 12
34595: ARRAY
34596: ST_TO_ADDR
// list := list isect fac_list ;
34597: LD_ADDR_VAR 0 5
34601: PUSH
34602: LD_VAR 0 5
34606: PUSH
34607: LD_VAR 0 17
34611: ISECT
34612: ST_TO_ADDR
// if not list then
34613: LD_VAR 0 5
34617: NOT
34618: IFFALSE 34622
// exit ;
34620: GO 35426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34622: LD_VAR 0 12
34626: PUSH
34627: LD_INT 3
34629: EQUAL
34630: PUSH
34631: LD_INT 49
34633: PUSH
34634: LD_VAR 0 5
34638: IN
34639: AND
34640: PUSH
34641: LD_INT 31
34643: PPUSH
34644: LD_VAR 0 16
34648: PPUSH
34649: CALL_OW 321
34653: PUSH
34654: LD_INT 2
34656: EQUAL
34657: AND
34658: IFFALSE 34718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34660: LD_INT 22
34662: PUSH
34663: LD_VAR 0 16
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 35
34674: PUSH
34675: LD_INT 49
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 91
34684: PUSH
34685: LD_VAR 0 1
34689: PUSH
34690: LD_INT 10
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: PPUSH
34703: CALL_OW 69
34707: NOT
34708: IFFALSE 34718
// weapon := ru_time_lapser ;
34710: LD_ADDR_VAR 0 18
34714: PUSH
34715: LD_INT 49
34717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34718: LD_VAR 0 12
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: IN
34733: PUSH
34734: LD_INT 11
34736: PUSH
34737: LD_VAR 0 5
34741: IN
34742: PUSH
34743: LD_INT 30
34745: PUSH
34746: LD_VAR 0 5
34750: IN
34751: OR
34752: AND
34753: PUSH
34754: LD_INT 6
34756: PPUSH
34757: LD_VAR 0 16
34761: PPUSH
34762: CALL_OW 321
34766: PUSH
34767: LD_INT 2
34769: EQUAL
34770: AND
34771: IFFALSE 34936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34773: LD_INT 22
34775: PUSH
34776: LD_VAR 0 16
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 35
34790: PUSH
34791: LD_INT 11
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 35
34800: PUSH
34801: LD_INT 30
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 91
34815: PUSH
34816: LD_VAR 0 1
34820: PUSH
34821: LD_INT 18
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: PPUSH
34834: CALL_OW 69
34838: NOT
34839: PUSH
34840: LD_INT 22
34842: PUSH
34843: LD_VAR 0 16
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 30
34857: PUSH
34858: LD_INT 32
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 30
34867: PUSH
34868: LD_INT 33
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 91
34882: PUSH
34883: LD_VAR 0 1
34887: PUSH
34888: LD_INT 12
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: PUSH
34901: EMPTY
34902: LIST
34903: PPUSH
34904: CALL_OW 69
34908: PUSH
34909: LD_INT 2
34911: GREATER
34912: AND
34913: IFFALSE 34936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34915: LD_ADDR_VAR 0 18
34919: PUSH
34920: LD_INT 11
34922: PUSH
34923: LD_INT 30
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_VAR 0 12
34934: ARRAY
34935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34936: LD_VAR 0 18
34940: NOT
34941: PUSH
34942: LD_INT 40
34944: PPUSH
34945: LD_VAR 0 16
34949: PPUSH
34950: CALL_OW 321
34954: PUSH
34955: LD_INT 2
34957: EQUAL
34958: AND
34959: PUSH
34960: LD_INT 7
34962: PUSH
34963: LD_VAR 0 5
34967: IN
34968: PUSH
34969: LD_INT 28
34971: PUSH
34972: LD_VAR 0 5
34976: IN
34977: OR
34978: PUSH
34979: LD_INT 45
34981: PUSH
34982: LD_VAR 0 5
34986: IN
34987: OR
34988: AND
34989: IFFALSE 35243
// begin hex := GetHexInfo ( x , y ) ;
34991: LD_ADDR_VAR 0 4
34995: PUSH
34996: LD_VAR 0 10
35000: PPUSH
35001: LD_VAR 0 11
35005: PPUSH
35006: CALL_OW 546
35010: ST_TO_ADDR
// if hex [ 1 ] then
35011: LD_VAR 0 4
35015: PUSH
35016: LD_INT 1
35018: ARRAY
35019: IFFALSE 35023
// exit ;
35021: GO 35426
// height := hex [ 2 ] ;
35023: LD_ADDR_VAR 0 15
35027: PUSH
35028: LD_VAR 0 4
35032: PUSH
35033: LD_INT 2
35035: ARRAY
35036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35037: LD_ADDR_VAR 0 14
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
// for i in tmp do
35060: LD_ADDR_VAR 0 8
35064: PUSH
35065: LD_VAR 0 14
35069: PUSH
35070: FOR_IN
35071: IFFALSE 35241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35073: LD_ADDR_VAR 0 9
35077: PUSH
35078: LD_VAR 0 10
35082: PPUSH
35083: LD_VAR 0 8
35087: PPUSH
35088: LD_INT 5
35090: PPUSH
35091: CALL_OW 272
35095: PUSH
35096: LD_VAR 0 11
35100: PPUSH
35101: LD_VAR 0 8
35105: PPUSH
35106: LD_INT 5
35108: PPUSH
35109: CALL_OW 273
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35118: LD_VAR 0 9
35122: PUSH
35123: LD_INT 1
35125: ARRAY
35126: PPUSH
35127: LD_VAR 0 9
35131: PUSH
35132: LD_INT 2
35134: ARRAY
35135: PPUSH
35136: CALL_OW 488
35140: IFFALSE 35239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35142: LD_ADDR_VAR 0 4
35146: PUSH
35147: LD_VAR 0 9
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: PPUSH
35156: LD_VAR 0 9
35160: PUSH
35161: LD_INT 2
35163: ARRAY
35164: PPUSH
35165: CALL_OW 546
35169: ST_TO_ADDR
// if hex [ 1 ] then
35170: LD_VAR 0 4
35174: PUSH
35175: LD_INT 1
35177: ARRAY
35178: IFFALSE 35182
// continue ;
35180: GO 35070
// h := hex [ 2 ] ;
35182: LD_ADDR_VAR 0 13
35186: PUSH
35187: LD_VAR 0 4
35191: PUSH
35192: LD_INT 2
35194: ARRAY
35195: ST_TO_ADDR
// if h + 7 < height then
35196: LD_VAR 0 13
35200: PUSH
35201: LD_INT 7
35203: PLUS
35204: PUSH
35205: LD_VAR 0 15
35209: LESS
35210: IFFALSE 35239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35212: LD_ADDR_VAR 0 18
35216: PUSH
35217: LD_INT 7
35219: PUSH
35220: LD_INT 28
35222: PUSH
35223: LD_INT 45
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PUSH
35231: LD_VAR 0 12
35235: ARRAY
35236: ST_TO_ADDR
// break ;
35237: GO 35241
// end ; end ; end ;
35239: GO 35070
35241: POP
35242: POP
// end ; if not weapon then
35243: LD_VAR 0 18
35247: NOT
35248: IFFALSE 35308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35250: LD_ADDR_VAR 0 5
35254: PUSH
35255: LD_VAR 0 5
35259: PUSH
35260: LD_INT 11
35262: PUSH
35263: LD_INT 30
35265: PUSH
35266: LD_INT 49
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: DIFF
35274: ST_TO_ADDR
// if not list then
35275: LD_VAR 0 5
35279: NOT
35280: IFFALSE 35284
// exit ;
35282: GO 35426
// weapon := list [ rand ( 1 , list ) ] ;
35284: LD_ADDR_VAR 0 18
35288: PUSH
35289: LD_VAR 0 5
35293: PUSH
35294: LD_INT 1
35296: PPUSH
35297: LD_VAR 0 5
35301: PPUSH
35302: CALL_OW 12
35306: ARRAY
35307: ST_TO_ADDR
// end ; if weapon then
35308: LD_VAR 0 18
35312: IFFALSE 35426
// begin tmp := CostOfWeapon ( weapon ) ;
35314: LD_ADDR_VAR 0 14
35318: PUSH
35319: LD_VAR 0 18
35323: PPUSH
35324: CALL_OW 451
35328: ST_TO_ADDR
// j := GetBase ( tower ) ;
35329: LD_ADDR_VAR 0 9
35333: PUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL_OW 274
35343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35344: LD_VAR 0 9
35348: PPUSH
35349: LD_INT 1
35351: PPUSH
35352: CALL_OW 275
35356: PUSH
35357: LD_VAR 0 14
35361: PUSH
35362: LD_INT 1
35364: ARRAY
35365: GREATEREQUAL
35366: PUSH
35367: LD_VAR 0 9
35371: PPUSH
35372: LD_INT 2
35374: PPUSH
35375: CALL_OW 275
35379: PUSH
35380: LD_VAR 0 14
35384: PUSH
35385: LD_INT 2
35387: ARRAY
35388: GREATEREQUAL
35389: AND
35390: PUSH
35391: LD_VAR 0 9
35395: PPUSH
35396: LD_INT 3
35398: PPUSH
35399: CALL_OW 275
35403: PUSH
35404: LD_VAR 0 14
35408: PUSH
35409: LD_INT 3
35411: ARRAY
35412: GREATEREQUAL
35413: AND
35414: IFFALSE 35426
// result := weapon ;
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: LD_VAR 0 18
35425: ST_TO_ADDR
// end ; end ;
35426: LD_VAR 0 3
35430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
// result := true ;
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_INT 1
35442: ST_TO_ADDR
// if array1 = array2 then
35443: LD_VAR 0 1
35447: PUSH
35448: LD_VAR 0 2
35452: EQUAL
35453: IFFALSE 35513
// begin for i = 1 to array1 do
35455: LD_ADDR_VAR 0 4
35459: PUSH
35460: DOUBLE
35461: LD_INT 1
35463: DEC
35464: ST_TO_ADDR
35465: LD_VAR 0 1
35469: PUSH
35470: FOR_TO
35471: IFFALSE 35509
// if array1 [ i ] <> array2 [ i ] then
35473: LD_VAR 0 1
35477: PUSH
35478: LD_VAR 0 4
35482: ARRAY
35483: PUSH
35484: LD_VAR 0 2
35488: PUSH
35489: LD_VAR 0 4
35493: ARRAY
35494: NONEQUAL
35495: IFFALSE 35507
// begin result := false ;
35497: LD_ADDR_VAR 0 3
35501: PUSH
35502: LD_INT 0
35504: ST_TO_ADDR
// break ;
35505: GO 35509
// end ;
35507: GO 35470
35509: POP
35510: POP
// end else
35511: GO 35521
// result := false ;
35513: LD_ADDR_VAR 0 3
35517: PUSH
35518: LD_INT 0
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 3
35525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
// if not array1 or not array2 then
35530: LD_VAR 0 1
35534: NOT
35535: PUSH
35536: LD_VAR 0 2
35540: NOT
35541: OR
35542: IFFALSE 35546
// exit ;
35544: GO 35610
// result := true ;
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: LD_INT 1
35553: ST_TO_ADDR
// for i = 1 to array1 do
35554: LD_ADDR_VAR 0 4
35558: PUSH
35559: DOUBLE
35560: LD_INT 1
35562: DEC
35563: ST_TO_ADDR
35564: LD_VAR 0 1
35568: PUSH
35569: FOR_TO
35570: IFFALSE 35608
// if array1 [ i ] <> array2 [ i ] then
35572: LD_VAR 0 1
35576: PUSH
35577: LD_VAR 0 4
35581: ARRAY
35582: PUSH
35583: LD_VAR 0 2
35587: PUSH
35588: LD_VAR 0 4
35592: ARRAY
35593: NONEQUAL
35594: IFFALSE 35606
// begin result := false ;
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 0
35603: ST_TO_ADDR
// break ;
35604: GO 35608
// end ;
35606: GO 35569
35608: POP
35609: POP
// end ;
35610: LD_VAR 0 3
35614: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35615: LD_INT 0
35617: PPUSH
35618: PPUSH
35619: PPUSH
// pom := GetBase ( fac ) ;
35620: LD_ADDR_VAR 0 5
35624: PUSH
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 274
35634: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35635: LD_ADDR_VAR 0 4
35639: PUSH
35640: LD_VAR 0 2
35644: PUSH
35645: LD_INT 1
35647: ARRAY
35648: PPUSH
35649: LD_VAR 0 2
35653: PUSH
35654: LD_INT 2
35656: ARRAY
35657: PPUSH
35658: LD_VAR 0 2
35662: PUSH
35663: LD_INT 3
35665: ARRAY
35666: PPUSH
35667: LD_VAR 0 2
35671: PUSH
35672: LD_INT 4
35674: ARRAY
35675: PPUSH
35676: CALL_OW 449
35680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_VAR 0 5
35690: PPUSH
35691: LD_INT 1
35693: PPUSH
35694: CALL_OW 275
35698: PUSH
35699: LD_VAR 0 4
35703: PUSH
35704: LD_INT 1
35706: ARRAY
35707: GREATEREQUAL
35708: PUSH
35709: LD_VAR 0 5
35713: PPUSH
35714: LD_INT 2
35716: PPUSH
35717: CALL_OW 275
35721: PUSH
35722: LD_VAR 0 4
35726: PUSH
35727: LD_INT 2
35729: ARRAY
35730: GREATEREQUAL
35731: AND
35732: PUSH
35733: LD_VAR 0 5
35737: PPUSH
35738: LD_INT 3
35740: PPUSH
35741: CALL_OW 275
35745: PUSH
35746: LD_VAR 0 4
35750: PUSH
35751: LD_INT 3
35753: ARRAY
35754: GREATEREQUAL
35755: AND
35756: ST_TO_ADDR
// end ;
35757: LD_VAR 0 3
35761: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35762: LD_INT 0
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
// pom := GetBase ( building ) ;
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 274
35782: ST_TO_ADDR
// if not pom then
35783: LD_VAR 0 3
35787: NOT
35788: IFFALSE 35792
// exit ;
35790: GO 35962
// btype := GetBType ( building ) ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 266
35806: ST_TO_ADDR
// if btype = b_armoury then
35807: LD_VAR 0 5
35811: PUSH
35812: LD_INT 4
35814: EQUAL
35815: IFFALSE 35825
// btype := b_barracks ;
35817: LD_ADDR_VAR 0 5
35821: PUSH
35822: LD_INT 5
35824: ST_TO_ADDR
// if btype = b_depot then
35825: LD_VAR 0 5
35829: PUSH
35830: LD_INT 0
35832: EQUAL
35833: IFFALSE 35843
// btype := b_warehouse ;
35835: LD_ADDR_VAR 0 5
35839: PUSH
35840: LD_INT 1
35842: ST_TO_ADDR
// if btype = b_workshop then
35843: LD_VAR 0 5
35847: PUSH
35848: LD_INT 2
35850: EQUAL
35851: IFFALSE 35861
// btype := b_factory ;
35853: LD_ADDR_VAR 0 5
35857: PUSH
35858: LD_INT 3
35860: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: LD_VAR 0 5
35870: PPUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 248
35880: PPUSH
35881: CALL_OW 450
35885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35886: LD_ADDR_VAR 0 2
35890: PUSH
35891: LD_VAR 0 3
35895: PPUSH
35896: LD_INT 1
35898: PPUSH
35899: CALL_OW 275
35903: PUSH
35904: LD_VAR 0 4
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: GREATEREQUAL
35913: PUSH
35914: LD_VAR 0 3
35918: PPUSH
35919: LD_INT 2
35921: PPUSH
35922: CALL_OW 275
35926: PUSH
35927: LD_VAR 0 4
35931: PUSH
35932: LD_INT 2
35934: ARRAY
35935: GREATEREQUAL
35936: AND
35937: PUSH
35938: LD_VAR 0 3
35942: PPUSH
35943: LD_INT 3
35945: PPUSH
35946: CALL_OW 275
35950: PUSH
35951: LD_VAR 0 4
35955: PUSH
35956: LD_INT 3
35958: ARRAY
35959: GREATEREQUAL
35960: AND
35961: ST_TO_ADDR
// end ;
35962: LD_VAR 0 2
35966: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35967: LD_INT 0
35969: PPUSH
35970: PPUSH
35971: PPUSH
// pom := GetBase ( building ) ;
35972: LD_ADDR_VAR 0 4
35976: PUSH
35977: LD_VAR 0 1
35981: PPUSH
35982: CALL_OW 274
35986: ST_TO_ADDR
// if not pom then
35987: LD_VAR 0 4
35991: NOT
35992: IFFALSE 35996
// exit ;
35994: GO 36097
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35996: LD_ADDR_VAR 0 5
36000: PUSH
36001: LD_VAR 0 2
36005: PPUSH
36006: LD_VAR 0 1
36010: PPUSH
36011: CALL_OW 248
36015: PPUSH
36016: CALL_OW 450
36020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_VAR 0 4
36030: PPUSH
36031: LD_INT 1
36033: PPUSH
36034: CALL_OW 275
36038: PUSH
36039: LD_VAR 0 5
36043: PUSH
36044: LD_INT 1
36046: ARRAY
36047: GREATEREQUAL
36048: PUSH
36049: LD_VAR 0 4
36053: PPUSH
36054: LD_INT 2
36056: PPUSH
36057: CALL_OW 275
36061: PUSH
36062: LD_VAR 0 5
36066: PUSH
36067: LD_INT 2
36069: ARRAY
36070: GREATEREQUAL
36071: AND
36072: PUSH
36073: LD_VAR 0 4
36077: PPUSH
36078: LD_INT 3
36080: PPUSH
36081: CALL_OW 275
36085: PUSH
36086: LD_VAR 0 5
36090: PUSH
36091: LD_INT 3
36093: ARRAY
36094: GREATEREQUAL
36095: AND
36096: ST_TO_ADDR
// end ;
36097: LD_VAR 0 3
36101: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36102: LD_INT 0
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
36108: PPUSH
36109: PPUSH
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
// result := false ;
36115: LD_ADDR_VAR 0 8
36119: PUSH
36120: LD_INT 0
36122: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36123: LD_VAR 0 5
36127: NOT
36128: PUSH
36129: LD_VAR 0 1
36133: NOT
36134: OR
36135: PUSH
36136: LD_VAR 0 2
36140: NOT
36141: OR
36142: PUSH
36143: LD_VAR 0 3
36147: NOT
36148: OR
36149: IFFALSE 36153
// exit ;
36151: GO 36967
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36153: LD_ADDR_VAR 0 14
36157: PUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: LD_VAR 0 2
36167: PPUSH
36168: LD_VAR 0 3
36172: PPUSH
36173: LD_VAR 0 4
36177: PPUSH
36178: LD_VAR 0 5
36182: PUSH
36183: LD_INT 1
36185: ARRAY
36186: PPUSH
36187: CALL_OW 248
36191: PPUSH
36192: LD_INT 0
36194: PPUSH
36195: CALL 38204 0 6
36199: ST_TO_ADDR
// if not hexes then
36200: LD_VAR 0 14
36204: NOT
36205: IFFALSE 36209
// exit ;
36207: GO 36967
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36209: LD_ADDR_VAR 0 17
36213: PUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: LD_INT 22
36221: PUSH
36222: LD_VAR 0 13
36226: PPUSH
36227: CALL_OW 255
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 30
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 30
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 72
36272: ST_TO_ADDR
// for i = 1 to hexes do
36273: LD_ADDR_VAR 0 9
36277: PUSH
36278: DOUBLE
36279: LD_INT 1
36281: DEC
36282: ST_TO_ADDR
36283: LD_VAR 0 14
36287: PUSH
36288: FOR_TO
36289: IFFALSE 36965
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36291: LD_ADDR_VAR 0 13
36295: PUSH
36296: LD_VAR 0 14
36300: PUSH
36301: LD_VAR 0 9
36305: ARRAY
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: PPUSH
36311: LD_VAR 0 14
36315: PUSH
36316: LD_VAR 0 9
36320: ARRAY
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: PPUSH
36326: CALL_OW 428
36330: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36331: LD_VAR 0 14
36335: PUSH
36336: LD_VAR 0 9
36340: ARRAY
36341: PUSH
36342: LD_INT 1
36344: ARRAY
36345: PPUSH
36346: LD_VAR 0 14
36350: PUSH
36351: LD_VAR 0 9
36355: ARRAY
36356: PUSH
36357: LD_INT 2
36359: ARRAY
36360: PPUSH
36361: CALL_OW 351
36365: PUSH
36366: LD_VAR 0 14
36370: PUSH
36371: LD_VAR 0 9
36375: ARRAY
36376: PUSH
36377: LD_INT 1
36379: ARRAY
36380: PPUSH
36381: LD_VAR 0 14
36385: PUSH
36386: LD_VAR 0 9
36390: ARRAY
36391: PUSH
36392: LD_INT 2
36394: ARRAY
36395: PPUSH
36396: CALL_OW 488
36400: NOT
36401: OR
36402: PUSH
36403: LD_VAR 0 13
36407: PPUSH
36408: CALL_OW 247
36412: PUSH
36413: LD_INT 3
36415: EQUAL
36416: OR
36417: IFFALSE 36423
// exit ;
36419: POP
36420: POP
36421: GO 36967
// if not tmp then
36423: LD_VAR 0 13
36427: NOT
36428: IFFALSE 36432
// continue ;
36430: GO 36288
// result := true ;
36432: LD_ADDR_VAR 0 8
36436: PUSH
36437: LD_INT 1
36439: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36440: LD_VAR 0 6
36444: PUSH
36445: LD_VAR 0 13
36449: PPUSH
36450: CALL_OW 247
36454: PUSH
36455: LD_INT 2
36457: EQUAL
36458: AND
36459: PUSH
36460: LD_VAR 0 13
36464: PPUSH
36465: CALL_OW 263
36469: PUSH
36470: LD_INT 1
36472: EQUAL
36473: AND
36474: IFFALSE 36638
// begin if IsDrivenBy ( tmp ) then
36476: LD_VAR 0 13
36480: PPUSH
36481: CALL_OW 311
36485: IFFALSE 36489
// continue ;
36487: GO 36288
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36489: LD_VAR 0 6
36493: PPUSH
36494: LD_INT 3
36496: PUSH
36497: LD_INT 60
36499: PUSH
36500: EMPTY
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: LD_INT 55
36512: PUSH
36513: EMPTY
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PPUSH
36524: CALL_OW 72
36528: IFFALSE 36636
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36530: LD_ADDR_VAR 0 18
36534: PUSH
36535: LD_VAR 0 6
36539: PPUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 60
36545: PUSH
36546: EMPTY
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: LD_INT 55
36558: PUSH
36559: EMPTY
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PPUSH
36570: CALL_OW 72
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: ST_TO_ADDR
// if IsInUnit ( driver ) then
36579: LD_VAR 0 18
36583: PPUSH
36584: CALL_OW 310
36588: IFFALSE 36599
// ComExit ( driver ) ;
36590: LD_VAR 0 18
36594: PPUSH
36595: CALL 61388 0 1
// AddComEnterUnit ( driver , tmp ) ;
36599: LD_VAR 0 18
36603: PPUSH
36604: LD_VAR 0 13
36608: PPUSH
36609: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36613: LD_VAR 0 18
36617: PPUSH
36618: LD_VAR 0 7
36622: PPUSH
36623: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36627: LD_VAR 0 18
36631: PPUSH
36632: CALL_OW 181
// end ; continue ;
36636: GO 36288
// end ; if not cleaners or not tmp in cleaners then
36638: LD_VAR 0 6
36642: NOT
36643: PUSH
36644: LD_VAR 0 13
36648: PUSH
36649: LD_VAR 0 6
36653: IN
36654: NOT
36655: OR
36656: IFFALSE 36963
// begin if dep then
36658: LD_VAR 0 17
36662: IFFALSE 36798
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36664: LD_ADDR_VAR 0 16
36668: PUSH
36669: LD_VAR 0 17
36673: PUSH
36674: LD_INT 1
36676: ARRAY
36677: PPUSH
36678: CALL_OW 250
36682: PPUSH
36683: LD_VAR 0 17
36687: PUSH
36688: LD_INT 1
36690: ARRAY
36691: PPUSH
36692: CALL_OW 254
36696: PPUSH
36697: LD_INT 5
36699: PPUSH
36700: CALL_OW 272
36704: PUSH
36705: LD_VAR 0 17
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: PPUSH
36714: CALL_OW 251
36718: PPUSH
36719: LD_VAR 0 17
36723: PUSH
36724: LD_INT 1
36726: ARRAY
36727: PPUSH
36728: CALL_OW 254
36732: PPUSH
36733: LD_INT 5
36735: PPUSH
36736: CALL_OW 273
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36745: LD_VAR 0 16
36749: PUSH
36750: LD_INT 1
36752: ARRAY
36753: PPUSH
36754: LD_VAR 0 16
36758: PUSH
36759: LD_INT 2
36761: ARRAY
36762: PPUSH
36763: CALL_OW 488
36767: IFFALSE 36798
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36769: LD_VAR 0 13
36773: PPUSH
36774: LD_VAR 0 16
36778: PUSH
36779: LD_INT 1
36781: ARRAY
36782: PPUSH
36783: LD_VAR 0 16
36787: PUSH
36788: LD_INT 2
36790: ARRAY
36791: PPUSH
36792: CALL_OW 111
// continue ;
36796: GO 36288
// end ; end ; r := GetDir ( tmp ) ;
36798: LD_ADDR_VAR 0 15
36802: PUSH
36803: LD_VAR 0 13
36807: PPUSH
36808: CALL_OW 254
36812: ST_TO_ADDR
// if r = 5 then
36813: LD_VAR 0 15
36817: PUSH
36818: LD_INT 5
36820: EQUAL
36821: IFFALSE 36831
// r := 0 ;
36823: LD_ADDR_VAR 0 15
36827: PUSH
36828: LD_INT 0
36830: ST_TO_ADDR
// for j = r to 5 do
36831: LD_ADDR_VAR 0 10
36835: PUSH
36836: DOUBLE
36837: LD_VAR 0 15
36841: DEC
36842: ST_TO_ADDR
36843: LD_INT 5
36845: PUSH
36846: FOR_TO
36847: IFFALSE 36961
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36849: LD_ADDR_VAR 0 11
36853: PUSH
36854: LD_VAR 0 13
36858: PPUSH
36859: CALL_OW 250
36863: PPUSH
36864: LD_VAR 0 10
36868: PPUSH
36869: LD_INT 2
36871: PPUSH
36872: CALL_OW 272
36876: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36877: LD_ADDR_VAR 0 12
36881: PUSH
36882: LD_VAR 0 13
36886: PPUSH
36887: CALL_OW 251
36891: PPUSH
36892: LD_VAR 0 10
36896: PPUSH
36897: LD_INT 2
36899: PPUSH
36900: CALL_OW 273
36904: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36905: LD_VAR 0 11
36909: PPUSH
36910: LD_VAR 0 12
36914: PPUSH
36915: CALL_OW 488
36919: PUSH
36920: LD_VAR 0 11
36924: PPUSH
36925: LD_VAR 0 12
36929: PPUSH
36930: CALL_OW 428
36934: NOT
36935: AND
36936: IFFALSE 36959
// begin ComMoveXY ( tmp , _x , _y ) ;
36938: LD_VAR 0 13
36942: PPUSH
36943: LD_VAR 0 11
36947: PPUSH
36948: LD_VAR 0 12
36952: PPUSH
36953: CALL_OW 111
// break ;
36957: GO 36961
// end ; end ;
36959: GO 36846
36961: POP
36962: POP
// end ; end ;
36963: GO 36288
36965: POP
36966: POP
// end ;
36967: LD_VAR 0 8
36971: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36972: LD_INT 0
36974: PPUSH
// result := true ;
36975: LD_ADDR_VAR 0 3
36979: PUSH
36980: LD_INT 1
36982: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36983: LD_VAR 0 2
36987: PUSH
36988: LD_INT 24
36990: DOUBLE
36991: EQUAL
36992: IFTRUE 37002
36994: LD_INT 33
36996: DOUBLE
36997: EQUAL
36998: IFTRUE 37002
37000: GO 37027
37002: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37003: LD_ADDR_VAR 0 3
37007: PUSH
37008: LD_INT 32
37010: PPUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 321
37020: PUSH
37021: LD_INT 2
37023: EQUAL
37024: ST_TO_ADDR
37025: GO 37347
37027: LD_INT 20
37029: DOUBLE
37030: EQUAL
37031: IFTRUE 37035
37033: GO 37060
37035: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37036: LD_ADDR_VAR 0 3
37040: PUSH
37041: LD_INT 6
37043: PPUSH
37044: LD_VAR 0 1
37048: PPUSH
37049: CALL_OW 321
37053: PUSH
37054: LD_INT 2
37056: EQUAL
37057: ST_TO_ADDR
37058: GO 37347
37060: LD_INT 22
37062: DOUBLE
37063: EQUAL
37064: IFTRUE 37074
37066: LD_INT 36
37068: DOUBLE
37069: EQUAL
37070: IFTRUE 37074
37072: GO 37099
37074: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_INT 15
37082: PPUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL_OW 321
37092: PUSH
37093: LD_INT 2
37095: EQUAL
37096: ST_TO_ADDR
37097: GO 37347
37099: LD_INT 30
37101: DOUBLE
37102: EQUAL
37103: IFTRUE 37107
37105: GO 37132
37107: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_INT 20
37115: PPUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL_OW 321
37125: PUSH
37126: LD_INT 2
37128: EQUAL
37129: ST_TO_ADDR
37130: GO 37347
37132: LD_INT 28
37134: DOUBLE
37135: EQUAL
37136: IFTRUE 37146
37138: LD_INT 21
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37171
37146: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_INT 21
37154: PPUSH
37155: LD_VAR 0 1
37159: PPUSH
37160: CALL_OW 321
37164: PUSH
37165: LD_INT 2
37167: EQUAL
37168: ST_TO_ADDR
37169: GO 37347
37171: LD_INT 16
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37206
37179: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_EXP 96
37189: PPUSH
37190: LD_VAR 0 1
37194: PPUSH
37195: CALL_OW 321
37199: PUSH
37200: LD_INT 2
37202: EQUAL
37203: ST_TO_ADDR
37204: GO 37347
37206: LD_INT 19
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37220
37212: LD_INT 23
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37247
37220: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37221: LD_ADDR_VAR 0 3
37225: PUSH
37226: LD_EXP 95
37230: PPUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 321
37240: PUSH
37241: LD_INT 2
37243: EQUAL
37244: ST_TO_ADDR
37245: GO 37347
37247: LD_INT 17
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37280
37255: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 39
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 321
37273: PUSH
37274: LD_INT 2
37276: EQUAL
37277: ST_TO_ADDR
37278: GO 37347
37280: LD_INT 18
37282: DOUBLE
37283: EQUAL
37284: IFTRUE 37288
37286: GO 37313
37288: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37289: LD_ADDR_VAR 0 3
37293: PUSH
37294: LD_INT 40
37296: PPUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 321
37306: PUSH
37307: LD_INT 2
37309: EQUAL
37310: ST_TO_ADDR
37311: GO 37347
37313: LD_INT 27
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37321
37319: GO 37346
37321: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_INT 35
37329: PPUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL_OW 321
37339: PUSH
37340: LD_INT 2
37342: EQUAL
37343: ST_TO_ADDR
37344: GO 37347
37346: POP
// end ;
37347: LD_VAR 0 3
37351: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37352: LD_INT 0
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
37360: PPUSH
37361: PPUSH
37362: PPUSH
37363: PPUSH
37364: PPUSH
// result := false ;
37365: LD_ADDR_VAR 0 6
37369: PUSH
37370: LD_INT 0
37372: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37373: LD_VAR 0 1
37377: NOT
37378: PUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 266
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: IN
37399: NOT
37400: OR
37401: PUSH
37402: LD_VAR 0 2
37406: NOT
37407: OR
37408: PUSH
37409: LD_VAR 0 5
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 4
37428: PUSH
37429: LD_INT 5
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: IN
37440: NOT
37441: OR
37442: PUSH
37443: LD_VAR 0 3
37447: PPUSH
37448: LD_VAR 0 4
37452: PPUSH
37453: CALL_OW 488
37457: NOT
37458: OR
37459: IFFALSE 37463
// exit ;
37461: GO 38199
// side := GetSide ( depot ) ;
37463: LD_ADDR_VAR 0 9
37467: PUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 255
37477: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37478: LD_VAR 0 9
37482: PPUSH
37483: LD_VAR 0 2
37487: PPUSH
37488: CALL 36972 0 2
37492: NOT
37493: IFFALSE 37497
// exit ;
37495: GO 38199
// pom := GetBase ( depot ) ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 274
37511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37512: LD_ADDR_VAR 0 11
37516: PUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 248
37531: PPUSH
37532: CALL_OW 450
37536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37537: LD_VAR 0 10
37541: PPUSH
37542: LD_INT 1
37544: PPUSH
37545: CALL_OW 275
37549: PUSH
37550: LD_VAR 0 11
37554: PUSH
37555: LD_INT 1
37557: ARRAY
37558: GREATEREQUAL
37559: PUSH
37560: LD_VAR 0 10
37564: PPUSH
37565: LD_INT 2
37567: PPUSH
37568: CALL_OW 275
37572: PUSH
37573: LD_VAR 0 11
37577: PUSH
37578: LD_INT 2
37580: ARRAY
37581: GREATEREQUAL
37582: AND
37583: PUSH
37584: LD_VAR 0 10
37588: PPUSH
37589: LD_INT 3
37591: PPUSH
37592: CALL_OW 275
37596: PUSH
37597: LD_VAR 0 11
37601: PUSH
37602: LD_INT 3
37604: ARRAY
37605: GREATEREQUAL
37606: AND
37607: NOT
37608: IFFALSE 37612
// exit ;
37610: GO 38199
// if GetBType ( depot ) = b_depot then
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 266
37621: PUSH
37622: LD_INT 0
37624: EQUAL
37625: IFFALSE 37637
// dist := 28 else
37627: LD_ADDR_VAR 0 14
37631: PUSH
37632: LD_INT 28
37634: ST_TO_ADDR
37635: GO 37645
// dist := 36 ;
37637: LD_ADDR_VAR 0 14
37641: PUSH
37642: LD_INT 36
37644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37645: LD_VAR 0 1
37649: PPUSH
37650: LD_VAR 0 3
37654: PPUSH
37655: LD_VAR 0 4
37659: PPUSH
37660: CALL_OW 297
37664: PUSH
37665: LD_VAR 0 14
37669: GREATER
37670: IFFALSE 37674
// exit ;
37672: GO 38199
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37674: LD_ADDR_VAR 0 12
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: LD_VAR 0 3
37688: PPUSH
37689: LD_VAR 0 4
37693: PPUSH
37694: LD_VAR 0 5
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 248
37708: PPUSH
37709: LD_INT 0
37711: PPUSH
37712: CALL 38204 0 6
37716: ST_TO_ADDR
// if not hexes then
37717: LD_VAR 0 12
37721: NOT
37722: IFFALSE 37726
// exit ;
37724: GO 38199
// hex := GetHexInfo ( x , y ) ;
37726: LD_ADDR_VAR 0 15
37730: PUSH
37731: LD_VAR 0 3
37735: PPUSH
37736: LD_VAR 0 4
37740: PPUSH
37741: CALL_OW 546
37745: ST_TO_ADDR
// if hex [ 1 ] then
37746: LD_VAR 0 15
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: IFFALSE 37758
// exit ;
37756: GO 38199
// height := hex [ 2 ] ;
37758: LD_ADDR_VAR 0 13
37762: PUSH
37763: LD_VAR 0 15
37767: PUSH
37768: LD_INT 2
37770: ARRAY
37771: ST_TO_ADDR
// for i = 1 to hexes do
37772: LD_ADDR_VAR 0 7
37776: PUSH
37777: DOUBLE
37778: LD_INT 1
37780: DEC
37781: ST_TO_ADDR
37782: LD_VAR 0 12
37786: PUSH
37787: FOR_TO
37788: IFFALSE 38118
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37790: LD_VAR 0 12
37794: PUSH
37795: LD_VAR 0 7
37799: ARRAY
37800: PUSH
37801: LD_INT 1
37803: ARRAY
37804: PPUSH
37805: LD_VAR 0 12
37809: PUSH
37810: LD_VAR 0 7
37814: ARRAY
37815: PUSH
37816: LD_INT 2
37818: ARRAY
37819: PPUSH
37820: CALL_OW 488
37824: NOT
37825: PUSH
37826: LD_VAR 0 12
37830: PUSH
37831: LD_VAR 0 7
37835: ARRAY
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PPUSH
37841: LD_VAR 0 12
37845: PUSH
37846: LD_VAR 0 7
37850: ARRAY
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: PPUSH
37856: CALL_OW 428
37860: PUSH
37861: LD_INT 0
37863: GREATER
37864: OR
37865: PUSH
37866: LD_VAR 0 12
37870: PUSH
37871: LD_VAR 0 7
37875: ARRAY
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: PPUSH
37881: LD_VAR 0 12
37885: PUSH
37886: LD_VAR 0 7
37890: ARRAY
37891: PUSH
37892: LD_INT 2
37894: ARRAY
37895: PPUSH
37896: CALL_OW 351
37900: OR
37901: IFFALSE 37907
// exit ;
37903: POP
37904: POP
37905: GO 38199
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37907: LD_ADDR_VAR 0 8
37911: PUSH
37912: LD_VAR 0 12
37916: PUSH
37917: LD_VAR 0 7
37921: ARRAY
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PPUSH
37927: LD_VAR 0 12
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: CALL_OW 546
37946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37947: LD_VAR 0 8
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 8
37960: PUSH
37961: LD_INT 2
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 13
37969: PUSH
37970: LD_INT 2
37972: PLUS
37973: GREATER
37974: OR
37975: PUSH
37976: LD_VAR 0 8
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PUSH
37985: LD_VAR 0 13
37989: PUSH
37990: LD_INT 2
37992: MINUS
37993: LESS
37994: OR
37995: PUSH
37996: LD_VAR 0 8
38000: PUSH
38001: LD_INT 3
38003: ARRAY
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 8
38010: PUSH
38011: LD_INT 9
38013: PUSH
38014: LD_INT 10
38016: PUSH
38017: LD_INT 11
38019: PUSH
38020: LD_INT 12
38022: PUSH
38023: LD_INT 13
38025: PUSH
38026: LD_INT 16
38028: PUSH
38029: LD_INT 17
38031: PUSH
38032: LD_INT 18
38034: PUSH
38035: LD_INT 19
38037: PUSH
38038: LD_INT 20
38040: PUSH
38041: LD_INT 21
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: IN
38059: NOT
38060: OR
38061: PUSH
38062: LD_VAR 0 8
38066: PUSH
38067: LD_INT 5
38069: ARRAY
38070: NOT
38071: OR
38072: PUSH
38073: LD_VAR 0 8
38077: PUSH
38078: LD_INT 6
38080: ARRAY
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 7
38090: PUSH
38091: LD_INT 9
38093: PUSH
38094: LD_INT 10
38096: PUSH
38097: LD_INT 11
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: IN
38108: NOT
38109: OR
38110: IFFALSE 38116
// exit ;
38112: POP
38113: POP
38114: GO 38199
// end ;
38116: GO 37787
38118: POP
38119: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38120: LD_VAR 0 9
38124: PPUSH
38125: LD_VAR 0 3
38129: PPUSH
38130: LD_VAR 0 4
38134: PPUSH
38135: LD_INT 20
38137: PPUSH
38138: CALL 30145 0 4
38142: PUSH
38143: LD_INT 4
38145: ARRAY
38146: IFFALSE 38150
// exit ;
38148: GO 38199
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38150: LD_VAR 0 2
38154: PUSH
38155: LD_INT 29
38157: PUSH
38158: LD_INT 30
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: IN
38165: PUSH
38166: LD_VAR 0 3
38170: PPUSH
38171: LD_VAR 0 4
38175: PPUSH
38176: LD_VAR 0 9
38180: PPUSH
38181: CALL_OW 440
38185: NOT
38186: AND
38187: IFFALSE 38191
// exit ;
38189: GO 38199
// result := true ;
38191: LD_ADDR_VAR 0 6
38195: PUSH
38196: LD_INT 1
38198: ST_TO_ADDR
// end ;
38199: LD_VAR 0 6
38203: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38204: LD_INT 0
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
// result = [ ] ;
38264: LD_ADDR_VAR 0 7
38268: PUSH
38269: EMPTY
38270: ST_TO_ADDR
// temp_list = [ ] ;
38271: LD_ADDR_VAR 0 9
38275: PUSH
38276: EMPTY
38277: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38278: LD_VAR 0 4
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: LD_INT 4
38297: PUSH
38298: LD_INT 5
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: IN
38309: NOT
38310: PUSH
38311: LD_VAR 0 1
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: IN
38326: PUSH
38327: LD_VAR 0 5
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: IN
38346: NOT
38347: AND
38348: OR
38349: IFFALSE 38353
// exit ;
38351: GO 56744
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38353: LD_VAR 0 1
38357: PUSH
38358: LD_INT 6
38360: PUSH
38361: LD_INT 7
38363: PUSH
38364: LD_INT 8
38366: PUSH
38367: LD_INT 13
38369: PUSH
38370: LD_INT 12
38372: PUSH
38373: LD_INT 15
38375: PUSH
38376: LD_INT 11
38378: PUSH
38379: LD_INT 14
38381: PUSH
38382: LD_INT 10
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: IN
38396: IFFALSE 38406
// btype = b_lab ;
38398: LD_ADDR_VAR 0 1
38402: PUSH
38403: LD_INT 6
38405: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38406: LD_VAR 0 6
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: IN
38425: NOT
38426: PUSH
38427: LD_VAR 0 1
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: LD_INT 6
38446: PUSH
38447: LD_INT 36
38449: PUSH
38450: LD_INT 4
38452: PUSH
38453: LD_INT 5
38455: PUSH
38456: LD_INT 31
38458: PUSH
38459: LD_INT 32
38461: PUSH
38462: LD_INT 33
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: IN
38478: NOT
38479: PUSH
38480: LD_VAR 0 6
38484: PUSH
38485: LD_INT 1
38487: EQUAL
38488: AND
38489: OR
38490: PUSH
38491: LD_VAR 0 1
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: IN
38506: NOT
38507: PUSH
38508: LD_VAR 0 6
38512: PUSH
38513: LD_INT 2
38515: EQUAL
38516: AND
38517: OR
38518: IFFALSE 38528
// mode = 0 ;
38520: LD_ADDR_VAR 0 6
38524: PUSH
38525: LD_INT 0
38527: ST_TO_ADDR
// case mode of 0 :
38528: LD_VAR 0 6
38532: PUSH
38533: LD_INT 0
38535: DOUBLE
38536: EQUAL
38537: IFTRUE 38541
38539: GO 49994
38541: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38542: LD_ADDR_VAR 0 11
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38735: LD_ADDR_VAR 0 12
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 3
38892: NEG
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 3
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38931: LD_ADDR_VAR 0 13
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: LD_INT 3
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39130: LD_ADDR_VAR 0 14
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 3
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39326: LD_ADDR_VAR 0 15
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39519: LD_ADDR_VAR 0 16
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 3
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39712: LD_ADDR_VAR 0 17
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 2
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39942: LD_ADDR_VAR 0 18
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: NEG
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40172: LD_ADDR_VAR 0 19
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40402: LD_ADDR_VAR 0 20
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40632: LD_ADDR_VAR 0 21
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40862: LD_ADDR_VAR 0 22
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41092: LD_ADDR_VAR 0 23
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 3
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 3
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41372: LD_ADDR_VAR 0 24
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41648: LD_ADDR_VAR 0 25
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 3
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 3
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41922: LD_ADDR_VAR 0 26
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42198: LD_ADDR_VAR 0 27
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 3
42443: NEG
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42478: LD_ADDR_VAR 0 28
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 3
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42760: LD_ADDR_VAR 0 29
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43039: LD_ADDR_VAR 0 30
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43317: LD_ADDR_VAR 0 31
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 3
43560: NEG
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43595: LD_ADDR_VAR 0 32
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43873: LD_ADDR_VAR 0 33
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44152: LD_ADDR_VAR 0 34
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 3
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 3
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44432: LD_ADDR_VAR 0 35
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44544: LD_ADDR_VAR 0 36
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44656: LD_ADDR_VAR 0 37
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44768: LD_ADDR_VAR 0 38
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44880: LD_ADDR_VAR 0 39
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44992: LD_ADDR_VAR 0 40
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45104: LD_ADDR_VAR 0 41
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 3
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 3
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 3
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45454: LD_ADDR_VAR 0 42
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 3
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45804: LD_ADDR_VAR 0 43
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46152: LD_ADDR_VAR 0 44
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 3
46395: PUSH
46396: LD_INT 3
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 3
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46502: LD_ADDR_VAR 0 45
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46852: LD_ADDR_VAR 0 46
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47200: LD_ADDR_VAR 0 47
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47351: LD_ADDR_VAR 0 48
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47498: LD_ADDR_VAR 0 49
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47642: LD_ADDR_VAR 0 50
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47786: LD_ADDR_VAR 0 51
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47933: LD_ADDR_VAR 0 52
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48084: LD_ADDR_VAR 0 53
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48314: LD_ADDR_VAR 0 54
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48544: LD_ADDR_VAR 0 55
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48774: LD_ADDR_VAR 0 56
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49004: LD_ADDR_VAR 0 57
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49234: LD_ADDR_VAR 0 58
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49464: LD_ADDR_VAR 0 59
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49552: LD_ADDR_VAR 0 60
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49640: LD_ADDR_VAR 0 61
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49728: LD_ADDR_VAR 0 62
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49816: LD_ADDR_VAR 0 63
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49904: LD_ADDR_VAR 0 64
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// end ; 1 :
49992: GO 55889
49994: LD_INT 1
49996: DOUBLE
49997: EQUAL
49998: IFTRUE 50002
50000: GO 52625
50002: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50003: LD_ADDR_VAR 0 11
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 3
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50047: LD_ADDR_VAR 0 12
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 3
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50088: LD_ADDR_VAR 0 13
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50128: LD_ADDR_VAR 0 14
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50169: LD_ADDR_VAR 0 15
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50213: LD_ADDR_VAR 0 16
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50259: LD_ADDR_VAR 0 17
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50303: LD_ADDR_VAR 0 18
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50344: LD_ADDR_VAR 0 19
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50384: LD_ADDR_VAR 0 20
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50425: LD_ADDR_VAR 0 21
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50469: LD_ADDR_VAR 0 22
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50515: LD_ADDR_VAR 0 23
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 3
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50559: LD_ADDR_VAR 0 24
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 4
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: LIST
50599: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50600: LD_ADDR_VAR 0 25
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: LD_INT 4
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50640: LD_ADDR_VAR 0 26
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 4
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50681: LD_ADDR_VAR 0 27
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 4
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50725: LD_ADDR_VAR 0 28
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: LD_INT 4
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50771: LD_ADDR_VAR 0 29
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 4
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 5
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 5
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 4
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 6
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 6
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 5
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50926: LD_ADDR_VAR 0 30
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 4
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 5
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 5
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 5
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 6
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 6
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51069: LD_ADDR_VAR 0 31
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 4
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 5
51146: PUSH
51147: LD_INT 5
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 4
51156: PUSH
51157: LD_INT 5
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 6
51166: PUSH
51167: LD_INT 5
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 6
51176: PUSH
51177: LD_INT 6
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 5
51186: PUSH
51187: LD_INT 6
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51208: LD_ADDR_VAR 0 32
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 5
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 5
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 4
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 6
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 6
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51351: LD_ADDR_VAR 0 33
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 4
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 5
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 5
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 5
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 6
51471: NEG
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 6
51482: NEG
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51506: LD_ADDR_VAR 0 34
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 4
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 4
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 4
51573: NEG
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 5
51597: NEG
51598: PUSH
51599: LD_INT 4
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 5
51609: NEG
51610: PUSH
51611: LD_INT 5
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 5
51621: NEG
51622: PUSH
51623: LD_INT 6
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 6
51633: NEG
51634: PUSH
51635: LD_INT 5
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 6
51645: NEG
51646: PUSH
51647: LD_INT 6
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51669: LD_ADDR_VAR 0 41
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51713: LD_ADDR_VAR 0 42
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51754: LD_ADDR_VAR 0 43
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51794: LD_ADDR_VAR 0 44
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51835: LD_ADDR_VAR 0 45
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51879: LD_ADDR_VAR 0 46
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51925: LD_ADDR_VAR 0 47
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51958: LD_ADDR_VAR 0 48
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51989: LD_ADDR_VAR 0 49
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52018: LD_ADDR_VAR 0 50
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52047: LD_ADDR_VAR 0 51
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52078: LD_ADDR_VAR 0 52
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: NEG
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52111: LD_ADDR_VAR 0 53
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52155: LD_ADDR_VAR 0 54
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52196: LD_ADDR_VAR 0 55
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52236: LD_ADDR_VAR 0 56
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52277: LD_ADDR_VAR 0 57
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52321: LD_ADDR_VAR 0 58
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 59
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52411: LD_ADDR_VAR 0 60
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52452: LD_ADDR_VAR 0 61
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52492: LD_ADDR_VAR 0 62
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52533: LD_ADDR_VAR 0 63
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52577: LD_ADDR_VAR 0 64
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// end ; 2 :
52623: GO 55889
52625: LD_INT 2
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52633
52631: GO 55888
52633: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52634: LD_ADDR_VAR 0 29
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 4
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 5
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 5
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 4
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 5
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 4
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: LD_INT 4
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 4
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 4
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 4
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 5
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 5
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 5
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 4
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 4
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 4
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: LD_INT 4
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 4
53031: NEG
53032: PUSH
53033: LD_INT 5
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: LD_INT 4
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 4
53067: NEG
53068: PUSH
53069: LD_INT 3
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 5
53079: NEG
53080: PUSH
53081: LD_INT 4
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 5
53091: NEG
53092: PUSH
53093: LD_INT 5
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: LD_INT 5
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 5
53115: NEG
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53172: LD_ADDR_VAR 0 30
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 4
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 5
53209: PUSH
53210: LD_INT 5
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 5
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 4
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 5
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 5
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 4
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 4
53362: NEG
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 4
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 5
53418: NEG
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 5
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 5
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 4
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 4
53524: NEG
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 4
53536: NEG
53537: PUSH
53538: LD_INT 4
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: LD_INT 4
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 4
53560: NEG
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 4
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 4
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 5
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 5
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53719: LD_ADDR_VAR 0 31
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 5
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 5
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 4
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 4
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: NEG
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 4
53921: NEG
53922: PUSH
53923: LD_INT 4
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 4
53933: NEG
53934: PUSH
53935: LD_INT 5
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 4
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 4
53969: NEG
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 5
53981: NEG
53982: PUSH
53983: LD_INT 4
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 5
53993: NEG
53994: PUSH
53995: LD_INT 5
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 5
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 5
54017: NEG
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 4
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 4
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: LD_INT 4
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 5
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 5
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 5
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54269: LD_ADDR_VAR 0 32
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 4
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 5
54332: NEG
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 5
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 5
54355: NEG
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: LD_INT 4
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 4
54438: NEG
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 4
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 5
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 5
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 4
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 4
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 4
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 5
54701: PUSH
54702: LD_INT 4
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: PUSH
54712: LD_INT 5
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: LD_INT 5
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 5
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 5
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54816: LD_ADDR_VAR 0 33
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: LD_INT 5
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 5
54883: NEG
54884: PUSH
54885: LD_INT 4
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 5
54895: NEG
54896: PUSH
54897: LD_INT 5
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 5
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 5
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 4
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 4
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 4
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 4
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 5
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 5
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 5
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 4
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: PUSH
55157: LD_INT 4
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 4
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 4
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 4
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 4
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 4
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 5
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 5
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 5
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55354: LD_ADDR_VAR 0 34
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 4
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 5
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 4
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 4
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 5
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 3
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 5
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 4
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 4
55556: PUSH
55557: LD_INT 4
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 4
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 5
55576: PUSH
55577: LD_INT 4
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 5
55586: PUSH
55587: LD_INT 5
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 5
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 5
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 4
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 4
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 5
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 5
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 5
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// end ; end ;
55886: GO 55889
55888: POP
// case btype of b_depot , b_warehouse :
55889: LD_VAR 0 1
55893: PUSH
55894: LD_INT 0
55896: DOUBLE
55897: EQUAL
55898: IFTRUE 55908
55900: LD_INT 1
55902: DOUBLE
55903: EQUAL
55904: IFTRUE 55908
55906: GO 56109
55908: POP
// case nation of nation_american :
55909: LD_VAR 0 5
55913: PUSH
55914: LD_INT 1
55916: DOUBLE
55917: EQUAL
55918: IFTRUE 55922
55920: GO 55978
55922: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55923: LD_ADDR_VAR 0 9
55927: PUSH
55928: LD_VAR 0 11
55932: PUSH
55933: LD_VAR 0 12
55937: PUSH
55938: LD_VAR 0 13
55942: PUSH
55943: LD_VAR 0 14
55947: PUSH
55948: LD_VAR 0 15
55952: PUSH
55953: LD_VAR 0 16
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: PUSH
55966: LD_VAR 0 4
55970: PUSH
55971: LD_INT 1
55973: PLUS
55974: ARRAY
55975: ST_TO_ADDR
55976: GO 56107
55978: LD_INT 2
55980: DOUBLE
55981: EQUAL
55982: IFTRUE 55986
55984: GO 56042
55986: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55987: LD_ADDR_VAR 0 9
55991: PUSH
55992: LD_VAR 0 17
55996: PUSH
55997: LD_VAR 0 18
56001: PUSH
56002: LD_VAR 0 19
56006: PUSH
56007: LD_VAR 0 20
56011: PUSH
56012: LD_VAR 0 21
56016: PUSH
56017: LD_VAR 0 22
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: PUSH
56030: LD_VAR 0 4
56034: PUSH
56035: LD_INT 1
56037: PLUS
56038: ARRAY
56039: ST_TO_ADDR
56040: GO 56107
56042: LD_INT 3
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56050
56048: GO 56106
56050: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56051: LD_ADDR_VAR 0 9
56055: PUSH
56056: LD_VAR 0 23
56060: PUSH
56061: LD_VAR 0 24
56065: PUSH
56066: LD_VAR 0 25
56070: PUSH
56071: LD_VAR 0 26
56075: PUSH
56076: LD_VAR 0 27
56080: PUSH
56081: LD_VAR 0 28
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: PUSH
56094: LD_VAR 0 4
56098: PUSH
56099: LD_INT 1
56101: PLUS
56102: ARRAY
56103: ST_TO_ADDR
56104: GO 56107
56106: POP
56107: GO 56662
56109: LD_INT 2
56111: DOUBLE
56112: EQUAL
56113: IFTRUE 56123
56115: LD_INT 3
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56123
56121: GO 56179
56123: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56124: LD_ADDR_VAR 0 9
56128: PUSH
56129: LD_VAR 0 29
56133: PUSH
56134: LD_VAR 0 30
56138: PUSH
56139: LD_VAR 0 31
56143: PUSH
56144: LD_VAR 0 32
56148: PUSH
56149: LD_VAR 0 33
56153: PUSH
56154: LD_VAR 0 34
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: PUSH
56167: LD_VAR 0 4
56171: PUSH
56172: LD_INT 1
56174: PLUS
56175: ARRAY
56176: ST_TO_ADDR
56177: GO 56662
56179: LD_INT 16
56181: DOUBLE
56182: EQUAL
56183: IFTRUE 56241
56185: LD_INT 17
56187: DOUBLE
56188: EQUAL
56189: IFTRUE 56241
56191: LD_INT 18
56193: DOUBLE
56194: EQUAL
56195: IFTRUE 56241
56197: LD_INT 19
56199: DOUBLE
56200: EQUAL
56201: IFTRUE 56241
56203: LD_INT 22
56205: DOUBLE
56206: EQUAL
56207: IFTRUE 56241
56209: LD_INT 20
56211: DOUBLE
56212: EQUAL
56213: IFTRUE 56241
56215: LD_INT 21
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56241
56221: LD_INT 23
56223: DOUBLE
56224: EQUAL
56225: IFTRUE 56241
56227: LD_INT 24
56229: DOUBLE
56230: EQUAL
56231: IFTRUE 56241
56233: LD_INT 25
56235: DOUBLE
56236: EQUAL
56237: IFTRUE 56241
56239: GO 56297
56241: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56242: LD_ADDR_VAR 0 9
56246: PUSH
56247: LD_VAR 0 35
56251: PUSH
56252: LD_VAR 0 36
56256: PUSH
56257: LD_VAR 0 37
56261: PUSH
56262: LD_VAR 0 38
56266: PUSH
56267: LD_VAR 0 39
56271: PUSH
56272: LD_VAR 0 40
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: PUSH
56285: LD_VAR 0 4
56289: PUSH
56290: LD_INT 1
56292: PLUS
56293: ARRAY
56294: ST_TO_ADDR
56295: GO 56662
56297: LD_INT 6
56299: DOUBLE
56300: EQUAL
56301: IFTRUE 56353
56303: LD_INT 7
56305: DOUBLE
56306: EQUAL
56307: IFTRUE 56353
56309: LD_INT 8
56311: DOUBLE
56312: EQUAL
56313: IFTRUE 56353
56315: LD_INT 13
56317: DOUBLE
56318: EQUAL
56319: IFTRUE 56353
56321: LD_INT 12
56323: DOUBLE
56324: EQUAL
56325: IFTRUE 56353
56327: LD_INT 15
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56353
56333: LD_INT 11
56335: DOUBLE
56336: EQUAL
56337: IFTRUE 56353
56339: LD_INT 14
56341: DOUBLE
56342: EQUAL
56343: IFTRUE 56353
56345: LD_INT 10
56347: DOUBLE
56348: EQUAL
56349: IFTRUE 56353
56351: GO 56409
56353: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56354: LD_ADDR_VAR 0 9
56358: PUSH
56359: LD_VAR 0 41
56363: PUSH
56364: LD_VAR 0 42
56368: PUSH
56369: LD_VAR 0 43
56373: PUSH
56374: LD_VAR 0 44
56378: PUSH
56379: LD_VAR 0 45
56383: PUSH
56384: LD_VAR 0 46
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: PUSH
56397: LD_VAR 0 4
56401: PUSH
56402: LD_INT 1
56404: PLUS
56405: ARRAY
56406: ST_TO_ADDR
56407: GO 56662
56409: LD_INT 36
56411: DOUBLE
56412: EQUAL
56413: IFTRUE 56417
56415: GO 56473
56417: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56418: LD_ADDR_VAR 0 9
56422: PUSH
56423: LD_VAR 0 47
56427: PUSH
56428: LD_VAR 0 48
56432: PUSH
56433: LD_VAR 0 49
56437: PUSH
56438: LD_VAR 0 50
56442: PUSH
56443: LD_VAR 0 51
56447: PUSH
56448: LD_VAR 0 52
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: PUSH
56461: LD_VAR 0 4
56465: PUSH
56466: LD_INT 1
56468: PLUS
56469: ARRAY
56470: ST_TO_ADDR
56471: GO 56662
56473: LD_INT 4
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56499
56479: LD_INT 5
56481: DOUBLE
56482: EQUAL
56483: IFTRUE 56499
56485: LD_INT 34
56487: DOUBLE
56488: EQUAL
56489: IFTRUE 56499
56491: LD_INT 37
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56499
56497: GO 56555
56499: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56500: LD_ADDR_VAR 0 9
56504: PUSH
56505: LD_VAR 0 53
56509: PUSH
56510: LD_VAR 0 54
56514: PUSH
56515: LD_VAR 0 55
56519: PUSH
56520: LD_VAR 0 56
56524: PUSH
56525: LD_VAR 0 57
56529: PUSH
56530: LD_VAR 0 58
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: PUSH
56543: LD_VAR 0 4
56547: PUSH
56548: LD_INT 1
56550: PLUS
56551: ARRAY
56552: ST_TO_ADDR
56553: GO 56662
56555: LD_INT 31
56557: DOUBLE
56558: EQUAL
56559: IFTRUE 56605
56561: LD_INT 32
56563: DOUBLE
56564: EQUAL
56565: IFTRUE 56605
56567: LD_INT 33
56569: DOUBLE
56570: EQUAL
56571: IFTRUE 56605
56573: LD_INT 27
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56605
56579: LD_INT 26
56581: DOUBLE
56582: EQUAL
56583: IFTRUE 56605
56585: LD_INT 28
56587: DOUBLE
56588: EQUAL
56589: IFTRUE 56605
56591: LD_INT 29
56593: DOUBLE
56594: EQUAL
56595: IFTRUE 56605
56597: LD_INT 30
56599: DOUBLE
56600: EQUAL
56601: IFTRUE 56605
56603: GO 56661
56605: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56606: LD_ADDR_VAR 0 9
56610: PUSH
56611: LD_VAR 0 59
56615: PUSH
56616: LD_VAR 0 60
56620: PUSH
56621: LD_VAR 0 61
56625: PUSH
56626: LD_VAR 0 62
56630: PUSH
56631: LD_VAR 0 63
56635: PUSH
56636: LD_VAR 0 64
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: PUSH
56649: LD_VAR 0 4
56653: PUSH
56654: LD_INT 1
56656: PLUS
56657: ARRAY
56658: ST_TO_ADDR
56659: GO 56662
56661: POP
// temp_list2 = [ ] ;
56662: LD_ADDR_VAR 0 10
56666: PUSH
56667: EMPTY
56668: ST_TO_ADDR
// for i in temp_list do
56669: LD_ADDR_VAR 0 8
56673: PUSH
56674: LD_VAR 0 9
56678: PUSH
56679: FOR_IN
56680: IFFALSE 56732
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56682: LD_ADDR_VAR 0 10
56686: PUSH
56687: LD_VAR 0 10
56691: PUSH
56692: LD_VAR 0 8
56696: PUSH
56697: LD_INT 1
56699: ARRAY
56700: PUSH
56701: LD_VAR 0 2
56705: PLUS
56706: PUSH
56707: LD_VAR 0 8
56711: PUSH
56712: LD_INT 2
56714: ARRAY
56715: PUSH
56716: LD_VAR 0 3
56720: PLUS
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: ADD
56729: ST_TO_ADDR
56730: GO 56679
56732: POP
56733: POP
// result = temp_list2 ;
56734: LD_ADDR_VAR 0 7
56738: PUSH
56739: LD_VAR 0 10
56743: ST_TO_ADDR
// end ;
56744: LD_VAR 0 7
56748: RET
// export function EnemyInRange ( unit , dist ) ; begin
56749: LD_INT 0
56751: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56752: LD_ADDR_VAR 0 3
56756: PUSH
56757: LD_VAR 0 1
56761: PPUSH
56762: CALL_OW 255
56766: PPUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: CALL_OW 250
56776: PPUSH
56777: LD_VAR 0 1
56781: PPUSH
56782: CALL_OW 251
56786: PPUSH
56787: LD_VAR 0 2
56791: PPUSH
56792: CALL 30145 0 4
56796: PUSH
56797: LD_INT 4
56799: ARRAY
56800: ST_TO_ADDR
// end ;
56801: LD_VAR 0 3
56805: RET
// export function PlayerSeeMe ( unit ) ; begin
56806: LD_INT 0
56808: PPUSH
// result := See ( your_side , unit ) ;
56809: LD_ADDR_VAR 0 2
56813: PUSH
56814: LD_OWVAR 2
56818: PPUSH
56819: LD_VAR 0 1
56823: PPUSH
56824: CALL_OW 292
56828: ST_TO_ADDR
// end ;
56829: LD_VAR 0 2
56833: RET
// export function ReverseDir ( unit ) ; begin
56834: LD_INT 0
56836: PPUSH
// if not unit then
56837: LD_VAR 0 1
56841: NOT
56842: IFFALSE 56846
// exit ;
56844: GO 56869
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56846: LD_ADDR_VAR 0 2
56850: PUSH
56851: LD_VAR 0 1
56855: PPUSH
56856: CALL_OW 254
56860: PUSH
56861: LD_INT 3
56863: PLUS
56864: PUSH
56865: LD_INT 6
56867: MOD
56868: ST_TO_ADDR
// end ;
56869: LD_VAR 0 2
56873: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56874: LD_INT 0
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
56880: PPUSH
// if not hexes then
56881: LD_VAR 0 2
56885: NOT
56886: IFFALSE 56890
// exit ;
56888: GO 57038
// dist := 9999 ;
56890: LD_ADDR_VAR 0 5
56894: PUSH
56895: LD_INT 9999
56897: ST_TO_ADDR
// for i = 1 to hexes do
56898: LD_ADDR_VAR 0 4
56902: PUSH
56903: DOUBLE
56904: LD_INT 1
56906: DEC
56907: ST_TO_ADDR
56908: LD_VAR 0 2
56912: PUSH
56913: FOR_TO
56914: IFFALSE 57026
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56916: LD_VAR 0 1
56920: PPUSH
56921: LD_VAR 0 2
56925: PUSH
56926: LD_VAR 0 4
56930: ARRAY
56931: PUSH
56932: LD_INT 1
56934: ARRAY
56935: PPUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_VAR 0 4
56945: ARRAY
56946: PUSH
56947: LD_INT 2
56949: ARRAY
56950: PPUSH
56951: CALL_OW 297
56955: PUSH
56956: LD_VAR 0 5
56960: LESS
56961: IFFALSE 57024
// begin hex := hexes [ i ] ;
56963: LD_ADDR_VAR 0 7
56967: PUSH
56968: LD_VAR 0 2
56972: PUSH
56973: LD_VAR 0 4
56977: ARRAY
56978: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56979: LD_ADDR_VAR 0 5
56983: PUSH
56984: LD_VAR 0 1
56988: PPUSH
56989: LD_VAR 0 2
56993: PUSH
56994: LD_VAR 0 4
56998: ARRAY
56999: PUSH
57000: LD_INT 1
57002: ARRAY
57003: PPUSH
57004: LD_VAR 0 2
57008: PUSH
57009: LD_VAR 0 4
57013: ARRAY
57014: PUSH
57015: LD_INT 2
57017: ARRAY
57018: PPUSH
57019: CALL_OW 297
57023: ST_TO_ADDR
// end ; end ;
57024: GO 56913
57026: POP
57027: POP
// result := hex ;
57028: LD_ADDR_VAR 0 3
57032: PUSH
57033: LD_VAR 0 7
57037: ST_TO_ADDR
// end ;
57038: LD_VAR 0 3
57042: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57043: LD_INT 0
57045: PPUSH
57046: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57047: LD_VAR 0 1
57051: NOT
57052: PUSH
57053: LD_VAR 0 1
57057: PUSH
57058: LD_INT 21
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 23
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PPUSH
57082: CALL_OW 69
57086: IN
57087: NOT
57088: OR
57089: IFFALSE 57093
// exit ;
57091: GO 57140
// for i = 1 to 3 do
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: DOUBLE
57099: LD_INT 1
57101: DEC
57102: ST_TO_ADDR
57103: LD_INT 3
57105: PUSH
57106: FOR_TO
57107: IFFALSE 57138
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57109: LD_VAR 0 1
57113: PPUSH
57114: CALL_OW 250
57118: PPUSH
57119: LD_VAR 0 1
57123: PPUSH
57124: CALL_OW 251
57128: PPUSH
57129: LD_INT 1
57131: PPUSH
57132: CALL_OW 453
57136: GO 57106
57138: POP
57139: POP
// end ;
57140: LD_VAR 0 2
57144: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57145: LD_INT 0
57147: PPUSH
57148: PPUSH
57149: PPUSH
57150: PPUSH
57151: PPUSH
57152: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57153: LD_VAR 0 1
57157: NOT
57158: PUSH
57159: LD_VAR 0 2
57163: NOT
57164: OR
57165: PUSH
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 314
57175: OR
57176: IFFALSE 57180
// exit ;
57178: GO 57621
// x := GetX ( enemy_unit ) ;
57180: LD_ADDR_VAR 0 7
57184: PUSH
57185: LD_VAR 0 2
57189: PPUSH
57190: CALL_OW 250
57194: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57195: LD_ADDR_VAR 0 8
57199: PUSH
57200: LD_VAR 0 2
57204: PPUSH
57205: CALL_OW 251
57209: ST_TO_ADDR
// if not x or not y then
57210: LD_VAR 0 7
57214: NOT
57215: PUSH
57216: LD_VAR 0 8
57220: NOT
57221: OR
57222: IFFALSE 57226
// exit ;
57224: GO 57621
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57226: LD_ADDR_VAR 0 6
57230: PUSH
57231: LD_VAR 0 7
57235: PPUSH
57236: LD_INT 0
57238: PPUSH
57239: LD_INT 4
57241: PPUSH
57242: CALL_OW 272
57246: PUSH
57247: LD_VAR 0 8
57251: PPUSH
57252: LD_INT 0
57254: PPUSH
57255: LD_INT 4
57257: PPUSH
57258: CALL_OW 273
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_VAR 0 7
57271: PPUSH
57272: LD_INT 1
57274: PPUSH
57275: LD_INT 4
57277: PPUSH
57278: CALL_OW 272
57282: PUSH
57283: LD_VAR 0 8
57287: PPUSH
57288: LD_INT 1
57290: PPUSH
57291: LD_INT 4
57293: PPUSH
57294: CALL_OW 273
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_VAR 0 7
57307: PPUSH
57308: LD_INT 2
57310: PPUSH
57311: LD_INT 4
57313: PPUSH
57314: CALL_OW 272
57318: PUSH
57319: LD_VAR 0 8
57323: PPUSH
57324: LD_INT 2
57326: PPUSH
57327: LD_INT 4
57329: PPUSH
57330: CALL_OW 273
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_VAR 0 7
57343: PPUSH
57344: LD_INT 3
57346: PPUSH
57347: LD_INT 4
57349: PPUSH
57350: CALL_OW 272
57354: PUSH
57355: LD_VAR 0 8
57359: PPUSH
57360: LD_INT 3
57362: PPUSH
57363: LD_INT 4
57365: PPUSH
57366: CALL_OW 273
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_VAR 0 7
57379: PPUSH
57380: LD_INT 4
57382: PPUSH
57383: LD_INT 4
57385: PPUSH
57386: CALL_OW 272
57390: PUSH
57391: LD_VAR 0 8
57395: PPUSH
57396: LD_INT 4
57398: PPUSH
57399: LD_INT 4
57401: PPUSH
57402: CALL_OW 273
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_VAR 0 7
57415: PPUSH
57416: LD_INT 5
57418: PPUSH
57419: LD_INT 4
57421: PPUSH
57422: CALL_OW 272
57426: PUSH
57427: LD_VAR 0 8
57431: PPUSH
57432: LD_INT 5
57434: PPUSH
57435: LD_INT 4
57437: PPUSH
57438: CALL_OW 273
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// for i = tmp downto 1 do
57455: LD_ADDR_VAR 0 4
57459: PUSH
57460: DOUBLE
57461: LD_VAR 0 6
57465: INC
57466: ST_TO_ADDR
57467: LD_INT 1
57469: PUSH
57470: FOR_DOWNTO
57471: IFFALSE 57572
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57473: LD_VAR 0 6
57477: PUSH
57478: LD_VAR 0 4
57482: ARRAY
57483: PUSH
57484: LD_INT 1
57486: ARRAY
57487: PPUSH
57488: LD_VAR 0 6
57492: PUSH
57493: LD_VAR 0 4
57497: ARRAY
57498: PUSH
57499: LD_INT 2
57501: ARRAY
57502: PPUSH
57503: CALL_OW 488
57507: NOT
57508: PUSH
57509: LD_VAR 0 6
57513: PUSH
57514: LD_VAR 0 4
57518: ARRAY
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: PPUSH
57524: LD_VAR 0 6
57528: PUSH
57529: LD_VAR 0 4
57533: ARRAY
57534: PUSH
57535: LD_INT 2
57537: ARRAY
57538: PPUSH
57539: CALL_OW 428
57543: PUSH
57544: LD_INT 0
57546: NONEQUAL
57547: OR
57548: IFFALSE 57570
// tmp := Delete ( tmp , i ) ;
57550: LD_ADDR_VAR 0 6
57554: PUSH
57555: LD_VAR 0 6
57559: PPUSH
57560: LD_VAR 0 4
57564: PPUSH
57565: CALL_OW 3
57569: ST_TO_ADDR
57570: GO 57470
57572: POP
57573: POP
// j := GetClosestHex ( unit , tmp ) ;
57574: LD_ADDR_VAR 0 5
57578: PUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: LD_VAR 0 6
57588: PPUSH
57589: CALL 56874 0 2
57593: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57594: LD_VAR 0 1
57598: PPUSH
57599: LD_VAR 0 5
57603: PUSH
57604: LD_INT 1
57606: ARRAY
57607: PPUSH
57608: LD_VAR 0 5
57612: PUSH
57613: LD_INT 2
57615: ARRAY
57616: PPUSH
57617: CALL_OW 111
// end ;
57621: LD_VAR 0 3
57625: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57626: LD_INT 0
57628: PPUSH
57629: PPUSH
57630: PPUSH
// uc_side = 0 ;
57631: LD_ADDR_OWVAR 20
57635: PUSH
57636: LD_INT 0
57638: ST_TO_ADDR
// uc_nation = 0 ;
57639: LD_ADDR_OWVAR 21
57643: PUSH
57644: LD_INT 0
57646: ST_TO_ADDR
// InitHc_All ( ) ;
57647: CALL_OW 584
// InitVc ;
57651: CALL_OW 20
// if mastodonts then
57655: LD_VAR 0 6
57659: IFFALSE 57726
// for i = 1 to mastodonts do
57661: LD_ADDR_VAR 0 11
57665: PUSH
57666: DOUBLE
57667: LD_INT 1
57669: DEC
57670: ST_TO_ADDR
57671: LD_VAR 0 6
57675: PUSH
57676: FOR_TO
57677: IFFALSE 57724
// begin vc_chassis := 31 ;
57679: LD_ADDR_OWVAR 37
57683: PUSH
57684: LD_INT 31
57686: ST_TO_ADDR
// vc_control := control_rider ;
57687: LD_ADDR_OWVAR 38
57691: PUSH
57692: LD_INT 4
57694: ST_TO_ADDR
// animal := CreateVehicle ;
57695: LD_ADDR_VAR 0 12
57699: PUSH
57700: CALL_OW 45
57704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57705: LD_VAR 0 12
57709: PPUSH
57710: LD_VAR 0 8
57714: PPUSH
57715: LD_INT 0
57717: PPUSH
57718: CALL 59914 0 3
// end ;
57722: GO 57676
57724: POP
57725: POP
// if horses then
57726: LD_VAR 0 5
57730: IFFALSE 57797
// for i = 1 to horses do
57732: LD_ADDR_VAR 0 11
57736: PUSH
57737: DOUBLE
57738: LD_INT 1
57740: DEC
57741: ST_TO_ADDR
57742: LD_VAR 0 5
57746: PUSH
57747: FOR_TO
57748: IFFALSE 57795
// begin hc_class := 21 ;
57750: LD_ADDR_OWVAR 28
57754: PUSH
57755: LD_INT 21
57757: ST_TO_ADDR
// hc_gallery :=  ;
57758: LD_ADDR_OWVAR 33
57762: PUSH
57763: LD_STRING 
57765: ST_TO_ADDR
// animal := CreateHuman ;
57766: LD_ADDR_VAR 0 12
57770: PUSH
57771: CALL_OW 44
57775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57776: LD_VAR 0 12
57780: PPUSH
57781: LD_VAR 0 8
57785: PPUSH
57786: LD_INT 0
57788: PPUSH
57789: CALL 59914 0 3
// end ;
57793: GO 57747
57795: POP
57796: POP
// if birds then
57797: LD_VAR 0 1
57801: IFFALSE 57868
// for i = 1 to birds do
57803: LD_ADDR_VAR 0 11
57807: PUSH
57808: DOUBLE
57809: LD_INT 1
57811: DEC
57812: ST_TO_ADDR
57813: LD_VAR 0 1
57817: PUSH
57818: FOR_TO
57819: IFFALSE 57866
// begin hc_class = 18 ;
57821: LD_ADDR_OWVAR 28
57825: PUSH
57826: LD_INT 18
57828: ST_TO_ADDR
// hc_gallery =  ;
57829: LD_ADDR_OWVAR 33
57833: PUSH
57834: LD_STRING 
57836: ST_TO_ADDR
// animal := CreateHuman ;
57837: LD_ADDR_VAR 0 12
57841: PUSH
57842: CALL_OW 44
57846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57847: LD_VAR 0 12
57851: PPUSH
57852: LD_VAR 0 8
57856: PPUSH
57857: LD_INT 0
57859: PPUSH
57860: CALL 59914 0 3
// end ;
57864: GO 57818
57866: POP
57867: POP
// if tigers then
57868: LD_VAR 0 2
57872: IFFALSE 57956
// for i = 1 to tigers do
57874: LD_ADDR_VAR 0 11
57878: PUSH
57879: DOUBLE
57880: LD_INT 1
57882: DEC
57883: ST_TO_ADDR
57884: LD_VAR 0 2
57888: PUSH
57889: FOR_TO
57890: IFFALSE 57954
// begin hc_class = class_tiger ;
57892: LD_ADDR_OWVAR 28
57896: PUSH
57897: LD_INT 14
57899: ST_TO_ADDR
// hc_gallery =  ;
57900: LD_ADDR_OWVAR 33
57904: PUSH
57905: LD_STRING 
57907: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57908: LD_ADDR_OWVAR 35
57912: PUSH
57913: LD_INT 7
57915: NEG
57916: PPUSH
57917: LD_INT 7
57919: PPUSH
57920: CALL_OW 12
57924: ST_TO_ADDR
// animal := CreateHuman ;
57925: LD_ADDR_VAR 0 12
57929: PUSH
57930: CALL_OW 44
57934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57935: LD_VAR 0 12
57939: PPUSH
57940: LD_VAR 0 8
57944: PPUSH
57945: LD_INT 0
57947: PPUSH
57948: CALL 59914 0 3
// end ;
57952: GO 57889
57954: POP
57955: POP
// if apemans then
57956: LD_VAR 0 3
57960: IFFALSE 58083
// for i = 1 to apemans do
57962: LD_ADDR_VAR 0 11
57966: PUSH
57967: DOUBLE
57968: LD_INT 1
57970: DEC
57971: ST_TO_ADDR
57972: LD_VAR 0 3
57976: PUSH
57977: FOR_TO
57978: IFFALSE 58081
// begin hc_class = class_apeman ;
57980: LD_ADDR_OWVAR 28
57984: PUSH
57985: LD_INT 12
57987: ST_TO_ADDR
// hc_gallery =  ;
57988: LD_ADDR_OWVAR 33
57992: PUSH
57993: LD_STRING 
57995: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57996: LD_ADDR_OWVAR 35
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PPUSH
58005: LD_INT 2
58007: PPUSH
58008: CALL_OW 12
58012: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58013: LD_ADDR_OWVAR 31
58017: PUSH
58018: LD_INT 1
58020: PPUSH
58021: LD_INT 3
58023: PPUSH
58024: CALL_OW 12
58028: PUSH
58029: LD_INT 1
58031: PPUSH
58032: LD_INT 3
58034: PPUSH
58035: CALL_OW 12
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// animal := CreateHuman ;
58052: LD_ADDR_VAR 0 12
58056: PUSH
58057: CALL_OW 44
58061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58062: LD_VAR 0 12
58066: PPUSH
58067: LD_VAR 0 8
58071: PPUSH
58072: LD_INT 0
58074: PPUSH
58075: CALL 59914 0 3
// end ;
58079: GO 57977
58081: POP
58082: POP
// if enchidnas then
58083: LD_VAR 0 4
58087: IFFALSE 58154
// for i = 1 to enchidnas do
58089: LD_ADDR_VAR 0 11
58093: PUSH
58094: DOUBLE
58095: LD_INT 1
58097: DEC
58098: ST_TO_ADDR
58099: LD_VAR 0 4
58103: PUSH
58104: FOR_TO
58105: IFFALSE 58152
// begin hc_class = 13 ;
58107: LD_ADDR_OWVAR 28
58111: PUSH
58112: LD_INT 13
58114: ST_TO_ADDR
// hc_gallery =  ;
58115: LD_ADDR_OWVAR 33
58119: PUSH
58120: LD_STRING 
58122: ST_TO_ADDR
// animal := CreateHuman ;
58123: LD_ADDR_VAR 0 12
58127: PUSH
58128: CALL_OW 44
58132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58133: LD_VAR 0 12
58137: PPUSH
58138: LD_VAR 0 8
58142: PPUSH
58143: LD_INT 0
58145: PPUSH
58146: CALL 59914 0 3
// end ;
58150: GO 58104
58152: POP
58153: POP
// if fishes then
58154: LD_VAR 0 7
58158: IFFALSE 58225
// for i = 1 to fishes do
58160: LD_ADDR_VAR 0 11
58164: PUSH
58165: DOUBLE
58166: LD_INT 1
58168: DEC
58169: ST_TO_ADDR
58170: LD_VAR 0 7
58174: PUSH
58175: FOR_TO
58176: IFFALSE 58223
// begin hc_class = 20 ;
58178: LD_ADDR_OWVAR 28
58182: PUSH
58183: LD_INT 20
58185: ST_TO_ADDR
// hc_gallery =  ;
58186: LD_ADDR_OWVAR 33
58190: PUSH
58191: LD_STRING 
58193: ST_TO_ADDR
// animal := CreateHuman ;
58194: LD_ADDR_VAR 0 12
58198: PUSH
58199: CALL_OW 44
58203: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58204: LD_VAR 0 12
58208: PPUSH
58209: LD_VAR 0 9
58213: PPUSH
58214: LD_INT 0
58216: PPUSH
58217: CALL 59914 0 3
// end ;
58221: GO 58175
58223: POP
58224: POP
// end ;
58225: LD_VAR 0 10
58229: RET
// export function WantHeal ( sci , unit ) ; begin
58230: LD_INT 0
58232: PPUSH
// if GetTaskList ( sci ) > 0 then
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 437
58242: PUSH
58243: LD_INT 0
58245: GREATER
58246: IFFALSE 58316
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58248: LD_VAR 0 1
58252: PPUSH
58253: CALL_OW 437
58257: PUSH
58258: LD_INT 1
58260: ARRAY
58261: PUSH
58262: LD_INT 1
58264: ARRAY
58265: PUSH
58266: LD_STRING l
58268: EQUAL
58269: PUSH
58270: LD_VAR 0 1
58274: PPUSH
58275: CALL_OW 437
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PUSH
58284: LD_INT 4
58286: ARRAY
58287: PUSH
58288: LD_VAR 0 2
58292: EQUAL
58293: AND
58294: IFFALSE 58306
// result := true else
58296: LD_ADDR_VAR 0 3
58300: PUSH
58301: LD_INT 1
58303: ST_TO_ADDR
58304: GO 58314
// result := false ;
58306: LD_ADDR_VAR 0 3
58310: PUSH
58311: LD_INT 0
58313: ST_TO_ADDR
// end else
58314: GO 58324
// result := false ;
58316: LD_ADDR_VAR 0 3
58320: PUSH
58321: LD_INT 0
58323: ST_TO_ADDR
// end ;
58324: LD_VAR 0 3
58328: RET
// export function HealTarget ( sci ) ; begin
58329: LD_INT 0
58331: PPUSH
// if not sci then
58332: LD_VAR 0 1
58336: NOT
58337: IFFALSE 58341
// exit ;
58339: GO 58406
// result := 0 ;
58341: LD_ADDR_VAR 0 2
58345: PUSH
58346: LD_INT 0
58348: ST_TO_ADDR
// if GetTaskList ( sci ) then
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 437
58358: IFFALSE 58406
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58360: LD_VAR 0 1
58364: PPUSH
58365: CALL_OW 437
58369: PUSH
58370: LD_INT 1
58372: ARRAY
58373: PUSH
58374: LD_INT 1
58376: ARRAY
58377: PUSH
58378: LD_STRING l
58380: EQUAL
58381: IFFALSE 58406
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: CALL_OW 437
58397: PUSH
58398: LD_INT 1
58400: ARRAY
58401: PUSH
58402: LD_INT 4
58404: ARRAY
58405: ST_TO_ADDR
// end ;
58406: LD_VAR 0 2
58410: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58411: LD_INT 0
58413: PPUSH
58414: PPUSH
58415: PPUSH
58416: PPUSH
// if not base_units then
58417: LD_VAR 0 1
58421: NOT
58422: IFFALSE 58426
// exit ;
58424: GO 58513
// result := false ;
58426: LD_ADDR_VAR 0 2
58430: PUSH
58431: LD_INT 0
58433: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58434: LD_ADDR_VAR 0 5
58438: PUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: LD_INT 21
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PPUSH
58454: CALL_OW 72
58458: ST_TO_ADDR
// if not tmp then
58459: LD_VAR 0 5
58463: NOT
58464: IFFALSE 58468
// exit ;
58466: GO 58513
// for i in tmp do
58468: LD_ADDR_VAR 0 3
58472: PUSH
58473: LD_VAR 0 5
58477: PUSH
58478: FOR_IN
58479: IFFALSE 58511
// begin result := EnemyInRange ( i , 22 ) ;
58481: LD_ADDR_VAR 0 2
58485: PUSH
58486: LD_VAR 0 3
58490: PPUSH
58491: LD_INT 22
58493: PPUSH
58494: CALL 56749 0 2
58498: ST_TO_ADDR
// if result then
58499: LD_VAR 0 2
58503: IFFALSE 58509
// exit ;
58505: POP
58506: POP
58507: GO 58513
// end ;
58509: GO 58478
58511: POP
58512: POP
// end ;
58513: LD_VAR 0 2
58517: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58518: LD_INT 0
58520: PPUSH
58521: PPUSH
// if not units then
58522: LD_VAR 0 1
58526: NOT
58527: IFFALSE 58531
// exit ;
58529: GO 58601
// result := [ ] ;
58531: LD_ADDR_VAR 0 3
58535: PUSH
58536: EMPTY
58537: ST_TO_ADDR
// for i in units do
58538: LD_ADDR_VAR 0 4
58542: PUSH
58543: LD_VAR 0 1
58547: PUSH
58548: FOR_IN
58549: IFFALSE 58599
// if GetTag ( i ) = tag then
58551: LD_VAR 0 4
58555: PPUSH
58556: CALL_OW 110
58560: PUSH
58561: LD_VAR 0 2
58565: EQUAL
58566: IFFALSE 58597
// result := Replace ( result , result + 1 , i ) ;
58568: LD_ADDR_VAR 0 3
58572: PUSH
58573: LD_VAR 0 3
58577: PPUSH
58578: LD_VAR 0 3
58582: PUSH
58583: LD_INT 1
58585: PLUS
58586: PPUSH
58587: LD_VAR 0 4
58591: PPUSH
58592: CALL_OW 1
58596: ST_TO_ADDR
58597: GO 58548
58599: POP
58600: POP
// end ;
58601: LD_VAR 0 3
58605: RET
// export function IsDriver ( un ) ; begin
58606: LD_INT 0
58608: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58609: LD_ADDR_VAR 0 2
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_INT 55
58621: PUSH
58622: EMPTY
58623: LIST
58624: PPUSH
58625: CALL_OW 69
58629: IN
58630: ST_TO_ADDR
// end ;
58631: LD_VAR 0 2
58635: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58636: LD_INT 0
58638: PPUSH
58639: PPUSH
// list := [ ] ;
58640: LD_ADDR_VAR 0 5
58644: PUSH
58645: EMPTY
58646: ST_TO_ADDR
// case d of 0 :
58647: LD_VAR 0 3
58651: PUSH
58652: LD_INT 0
58654: DOUBLE
58655: EQUAL
58656: IFTRUE 58660
58658: GO 58793
58660: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58661: LD_ADDR_VAR 0 5
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 4
58673: MINUS
58674: PUSH
58675: LD_VAR 0 2
58679: PUSH
58680: LD_INT 4
58682: MINUS
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: LD_INT 3
58699: MINUS
58700: PUSH
58701: LD_VAR 0 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 4
58721: PLUS
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_INT 3
58743: PLUS
58744: PUSH
58745: LD_VAR 0 2
58749: PUSH
58750: LD_INT 3
58752: PLUS
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: PUSH
58762: LD_VAR 0 1
58766: PUSH
58767: LD_VAR 0 2
58771: PUSH
58772: LD_INT 4
58774: PLUS
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// end ; 1 :
58791: GO 59491
58793: LD_INT 1
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58801
58799: GO 58934
58801: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58802: LD_ADDR_VAR 0 5
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 4
58819: MINUS
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 3
58836: MINUS
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: LD_INT 3
58845: MINUS
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: LD_INT 4
58862: MINUS
58863: PUSH
58864: LD_VAR 0 2
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 1
58881: PUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_INT 3
58889: PLUS
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: LD_INT 4
58906: PLUS
58907: PUSH
58908: LD_VAR 0 2
58912: PUSH
58913: LD_INT 4
58915: PLUS
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: ST_TO_ADDR
// end ; 2 :
58932: GO 59491
58934: LD_INT 2
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58942
58940: GO 59071
58942: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58943: LD_ADDR_VAR 0 5
58947: PUSH
58948: LD_VAR 0 1
58952: PUSH
58953: LD_VAR 0 2
58957: PUSH
58958: LD_INT 3
58960: MINUS
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 4
58977: PLUS
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_INT 4
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_VAR 0 2
59001: PUSH
59002: LD_INT 4
59004: PLUS
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 3
59021: MINUS
59022: PUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: PUSH
59036: LD_VAR 0 1
59040: PUSH
59041: LD_INT 4
59043: MINUS
59044: PUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_INT 4
59052: MINUS
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// end ; 3 :
59069: GO 59491
59071: LD_INT 3
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59079
59077: GO 59212
59079: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59080: LD_ADDR_VAR 0 5
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: LD_INT 3
59092: PLUS
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 4
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: LD_INT 4
59114: PLUS
59115: PUSH
59116: LD_VAR 0 2
59120: PUSH
59121: LD_INT 4
59123: PLUS
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: LD_INT 4
59140: MINUS
59141: PUSH
59142: LD_VAR 0 2
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_VAR 0 2
59164: PUSH
59165: LD_INT 4
59167: MINUS
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: PUSH
59177: LD_VAR 0 1
59181: PUSH
59182: LD_INT 3
59184: MINUS
59185: PUSH
59186: LD_VAR 0 2
59190: PUSH
59191: LD_INT 3
59193: MINUS
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// end ; 4 :
59210: GO 59491
59212: LD_INT 4
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59220
59218: GO 59353
59220: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59221: LD_ADDR_VAR 0 5
59225: PUSH
59226: LD_VAR 0 1
59230: PUSH
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 4
59238: PLUS
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: PUSH
59253: LD_INT 3
59255: PLUS
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 3
59264: PLUS
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_INT 4
59281: PLUS
59282: PUSH
59283: LD_VAR 0 2
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 3
59308: MINUS
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: LD_INT 4
59325: MINUS
59326: PUSH
59327: LD_VAR 0 2
59331: PUSH
59332: LD_INT 4
59334: MINUS
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// end ; 5 :
59351: GO 59491
59353: LD_INT 5
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59361
59359: GO 59490
59361: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_VAR 0 1
59371: PUSH
59372: LD_INT 4
59374: MINUS
59375: PUSH
59376: LD_VAR 0 2
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: LD_VAR 0 1
59393: PUSH
59394: LD_VAR 0 2
59398: PUSH
59399: LD_INT 4
59401: MINUS
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 1
59415: PUSH
59416: LD_INT 4
59418: PLUS
59419: PUSH
59420: LD_VAR 0 2
59424: PUSH
59425: LD_INT 4
59427: PLUS
59428: PUSH
59429: LD_INT 5
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PUSH
59437: LD_VAR 0 1
59441: PUSH
59442: LD_INT 3
59444: PLUS
59445: PUSH
59446: LD_VAR 0 2
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_VAR 0 2
59468: PUSH
59469: LD_INT 3
59471: PLUS
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// end ; end ;
59488: GO 59491
59490: POP
// result := list ;
59491: LD_ADDR_VAR 0 4
59495: PUSH
59496: LD_VAR 0 5
59500: ST_TO_ADDR
// end ;
59501: LD_VAR 0 4
59505: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59506: LD_INT 0
59508: PPUSH
59509: PPUSH
59510: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59511: LD_VAR 0 1
59515: NOT
59516: PUSH
59517: LD_VAR 0 2
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: IN
59540: NOT
59541: OR
59542: IFFALSE 59546
// exit ;
59544: GO 59638
// tmp := [ ] ;
59546: LD_ADDR_VAR 0 5
59550: PUSH
59551: EMPTY
59552: ST_TO_ADDR
// for i in units do
59553: LD_ADDR_VAR 0 4
59557: PUSH
59558: LD_VAR 0 1
59562: PUSH
59563: FOR_IN
59564: IFFALSE 59607
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59566: LD_ADDR_VAR 0 5
59570: PUSH
59571: LD_VAR 0 5
59575: PPUSH
59576: LD_VAR 0 5
59580: PUSH
59581: LD_INT 1
59583: PLUS
59584: PPUSH
59585: LD_VAR 0 4
59589: PPUSH
59590: LD_VAR 0 2
59594: PPUSH
59595: CALL_OW 259
59599: PPUSH
59600: CALL_OW 2
59604: ST_TO_ADDR
59605: GO 59563
59607: POP
59608: POP
// if not tmp then
59609: LD_VAR 0 5
59613: NOT
59614: IFFALSE 59618
// exit ;
59616: GO 59638
// result := SortListByListDesc ( units , tmp ) ;
59618: LD_ADDR_VAR 0 3
59622: PUSH
59623: LD_VAR 0 1
59627: PPUSH
59628: LD_VAR 0 5
59632: PPUSH
59633: CALL_OW 77
59637: ST_TO_ADDR
// end ;
59638: LD_VAR 0 3
59642: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59643: LD_INT 0
59645: PPUSH
59646: PPUSH
59647: PPUSH
// result := false ;
59648: LD_ADDR_VAR 0 3
59652: PUSH
59653: LD_INT 0
59655: ST_TO_ADDR
// x := GetX ( building ) ;
59656: LD_ADDR_VAR 0 4
59660: PUSH
59661: LD_VAR 0 2
59665: PPUSH
59666: CALL_OW 250
59670: ST_TO_ADDR
// y := GetY ( building ) ;
59671: LD_ADDR_VAR 0 5
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: CALL_OW 251
59685: ST_TO_ADDR
// if not building or not x or not y then
59686: LD_VAR 0 2
59690: NOT
59691: PUSH
59692: LD_VAR 0 4
59696: NOT
59697: OR
59698: PUSH
59699: LD_VAR 0 5
59703: NOT
59704: OR
59705: IFFALSE 59709
// exit ;
59707: GO 59801
// if GetTaskList ( unit ) then
59709: LD_VAR 0 1
59713: PPUSH
59714: CALL_OW 437
59718: IFFALSE 59801
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59720: LD_STRING e
59722: PUSH
59723: LD_VAR 0 1
59727: PPUSH
59728: CALL_OW 437
59732: PUSH
59733: LD_INT 1
59735: ARRAY
59736: PUSH
59737: LD_INT 1
59739: ARRAY
59740: EQUAL
59741: PUSH
59742: LD_VAR 0 4
59746: PUSH
59747: LD_VAR 0 1
59751: PPUSH
59752: CALL_OW 437
59756: PUSH
59757: LD_INT 1
59759: ARRAY
59760: PUSH
59761: LD_INT 2
59763: ARRAY
59764: EQUAL
59765: AND
59766: PUSH
59767: LD_VAR 0 5
59771: PUSH
59772: LD_VAR 0 1
59776: PPUSH
59777: CALL_OW 437
59781: PUSH
59782: LD_INT 1
59784: ARRAY
59785: PUSH
59786: LD_INT 3
59788: ARRAY
59789: EQUAL
59790: AND
59791: IFFALSE 59801
// result := true end ;
59793: LD_ADDR_VAR 0 3
59797: PUSH
59798: LD_INT 1
59800: ST_TO_ADDR
// end ;
59801: LD_VAR 0 3
59805: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59806: LD_INT 0
59808: PPUSH
// result := false ;
59809: LD_ADDR_VAR 0 4
59813: PUSH
59814: LD_INT 0
59816: ST_TO_ADDR
// if GetTaskList ( unit ) then
59817: LD_VAR 0 1
59821: PPUSH
59822: CALL_OW 437
59826: IFFALSE 59909
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59828: LD_STRING M
59830: PUSH
59831: LD_VAR 0 1
59835: PPUSH
59836: CALL_OW 437
59840: PUSH
59841: LD_INT 1
59843: ARRAY
59844: PUSH
59845: LD_INT 1
59847: ARRAY
59848: EQUAL
59849: PUSH
59850: LD_VAR 0 2
59854: PUSH
59855: LD_VAR 0 1
59859: PPUSH
59860: CALL_OW 437
59864: PUSH
59865: LD_INT 1
59867: ARRAY
59868: PUSH
59869: LD_INT 2
59871: ARRAY
59872: EQUAL
59873: AND
59874: PUSH
59875: LD_VAR 0 3
59879: PUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: CALL_OW 437
59889: PUSH
59890: LD_INT 1
59892: ARRAY
59893: PUSH
59894: LD_INT 3
59896: ARRAY
59897: EQUAL
59898: AND
59899: IFFALSE 59909
// result := true ;
59901: LD_ADDR_VAR 0 4
59905: PUSH
59906: LD_INT 1
59908: ST_TO_ADDR
// end ; end ;
59909: LD_VAR 0 4
59913: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59914: LD_INT 0
59916: PPUSH
59917: PPUSH
59918: PPUSH
59919: PPUSH
// if not unit or not area then
59920: LD_VAR 0 1
59924: NOT
59925: PUSH
59926: LD_VAR 0 2
59930: NOT
59931: OR
59932: IFFALSE 59936
// exit ;
59934: GO 60100
// tmp := AreaToList ( area , i ) ;
59936: LD_ADDR_VAR 0 6
59940: PUSH
59941: LD_VAR 0 2
59945: PPUSH
59946: LD_VAR 0 5
59950: PPUSH
59951: CALL_OW 517
59955: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59956: LD_ADDR_VAR 0 5
59960: PUSH
59961: DOUBLE
59962: LD_INT 1
59964: DEC
59965: ST_TO_ADDR
59966: LD_VAR 0 6
59970: PUSH
59971: LD_INT 1
59973: ARRAY
59974: PUSH
59975: FOR_TO
59976: IFFALSE 60098
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59978: LD_ADDR_VAR 0 7
59982: PUSH
59983: LD_VAR 0 6
59987: PUSH
59988: LD_INT 1
59990: ARRAY
59991: PUSH
59992: LD_VAR 0 5
59996: ARRAY
59997: PUSH
59998: LD_VAR 0 6
60002: PUSH
60003: LD_INT 2
60005: ARRAY
60006: PUSH
60007: LD_VAR 0 5
60011: ARRAY
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60017: LD_VAR 0 7
60021: PUSH
60022: LD_INT 1
60024: ARRAY
60025: PPUSH
60026: LD_VAR 0 7
60030: PUSH
60031: LD_INT 2
60033: ARRAY
60034: PPUSH
60035: CALL_OW 428
60039: PUSH
60040: LD_INT 0
60042: EQUAL
60043: IFFALSE 60096
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60045: LD_VAR 0 1
60049: PPUSH
60050: LD_VAR 0 7
60054: PUSH
60055: LD_INT 1
60057: ARRAY
60058: PPUSH
60059: LD_VAR 0 7
60063: PUSH
60064: LD_INT 2
60066: ARRAY
60067: PPUSH
60068: LD_VAR 0 3
60072: PPUSH
60073: CALL_OW 48
// result := IsPlaced ( unit ) ;
60077: LD_ADDR_VAR 0 4
60081: PUSH
60082: LD_VAR 0 1
60086: PPUSH
60087: CALL_OW 305
60091: ST_TO_ADDR
// exit ;
60092: POP
60093: POP
60094: GO 60100
// end ; end ;
60096: GO 59975
60098: POP
60099: POP
// end ;
60100: LD_VAR 0 4
60104: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60105: LD_INT 0
60107: PPUSH
60108: PPUSH
60109: PPUSH
// if not side or side > 8 then
60110: LD_VAR 0 1
60114: NOT
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_INT 8
60123: GREATER
60124: OR
60125: IFFALSE 60129
// exit ;
60127: GO 60316
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60129: LD_ADDR_VAR 0 4
60133: PUSH
60134: LD_INT 22
60136: PUSH
60137: LD_VAR 0 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 21
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PPUSH
60160: CALL_OW 69
60164: ST_TO_ADDR
// if not tmp then
60165: LD_VAR 0 4
60169: NOT
60170: IFFALSE 60174
// exit ;
60172: GO 60316
// enable_addtolog := true ;
60174: LD_ADDR_OWVAR 81
60178: PUSH
60179: LD_INT 1
60181: ST_TO_ADDR
// AddToLog ( [ ) ;
60182: LD_STRING [
60184: PPUSH
60185: CALL_OW 561
// for i in tmp do
60189: LD_ADDR_VAR 0 3
60193: PUSH
60194: LD_VAR 0 4
60198: PUSH
60199: FOR_IN
60200: IFFALSE 60307
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60202: LD_STRING [
60204: PUSH
60205: LD_VAR 0 3
60209: PPUSH
60210: CALL_OW 266
60214: STR
60215: PUSH
60216: LD_STRING , 
60218: STR
60219: PUSH
60220: LD_VAR 0 3
60224: PPUSH
60225: CALL_OW 250
60229: STR
60230: PUSH
60231: LD_STRING , 
60233: STR
60234: PUSH
60235: LD_VAR 0 3
60239: PPUSH
60240: CALL_OW 251
60244: STR
60245: PUSH
60246: LD_STRING , 
60248: STR
60249: PUSH
60250: LD_VAR 0 3
60254: PPUSH
60255: CALL_OW 254
60259: STR
60260: PUSH
60261: LD_STRING , 
60263: STR
60264: PUSH
60265: LD_VAR 0 3
60269: PPUSH
60270: LD_INT 1
60272: PPUSH
60273: CALL_OW 268
60277: STR
60278: PUSH
60279: LD_STRING , 
60281: STR
60282: PUSH
60283: LD_VAR 0 3
60287: PPUSH
60288: LD_INT 2
60290: PPUSH
60291: CALL_OW 268
60295: STR
60296: PUSH
60297: LD_STRING ],
60299: STR
60300: PPUSH
60301: CALL_OW 561
// end ;
60305: GO 60199
60307: POP
60308: POP
// AddToLog ( ]; ) ;
60309: LD_STRING ];
60311: PPUSH
60312: CALL_OW 561
// end ;
60316: LD_VAR 0 2
60320: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60321: LD_INT 0
60323: PPUSH
60324: PPUSH
60325: PPUSH
60326: PPUSH
60327: PPUSH
// if not area or not rate or not max then
60328: LD_VAR 0 1
60332: NOT
60333: PUSH
60334: LD_VAR 0 2
60338: NOT
60339: OR
60340: PUSH
60341: LD_VAR 0 4
60345: NOT
60346: OR
60347: IFFALSE 60351
// exit ;
60349: GO 60543
// while 1 do
60351: LD_INT 1
60353: IFFALSE 60543
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60355: LD_ADDR_VAR 0 9
60359: PUSH
60360: LD_VAR 0 1
60364: PPUSH
60365: LD_INT 1
60367: PPUSH
60368: CALL_OW 287
60372: PUSH
60373: LD_INT 10
60375: MUL
60376: ST_TO_ADDR
// r := rate / 10 ;
60377: LD_ADDR_VAR 0 7
60381: PUSH
60382: LD_VAR 0 2
60386: PUSH
60387: LD_INT 10
60389: DIVREAL
60390: ST_TO_ADDR
// time := 1 1$00 ;
60391: LD_ADDR_VAR 0 8
60395: PUSH
60396: LD_INT 2100
60398: ST_TO_ADDR
// if amount < min then
60399: LD_VAR 0 9
60403: PUSH
60404: LD_VAR 0 3
60408: LESS
60409: IFFALSE 60427
// r := r * 2 else
60411: LD_ADDR_VAR 0 7
60415: PUSH
60416: LD_VAR 0 7
60420: PUSH
60421: LD_INT 2
60423: MUL
60424: ST_TO_ADDR
60425: GO 60453
// if amount > max then
60427: LD_VAR 0 9
60431: PUSH
60432: LD_VAR 0 4
60436: GREATER
60437: IFFALSE 60453
// r := r / 2 ;
60439: LD_ADDR_VAR 0 7
60443: PUSH
60444: LD_VAR 0 7
60448: PUSH
60449: LD_INT 2
60451: DIVREAL
60452: ST_TO_ADDR
// time := time / r ;
60453: LD_ADDR_VAR 0 8
60457: PUSH
60458: LD_VAR 0 8
60462: PUSH
60463: LD_VAR 0 7
60467: DIVREAL
60468: ST_TO_ADDR
// if time < 0 then
60469: LD_VAR 0 8
60473: PUSH
60474: LD_INT 0
60476: LESS
60477: IFFALSE 60494
// time := time * - 1 ;
60479: LD_ADDR_VAR 0 8
60483: PUSH
60484: LD_VAR 0 8
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: MUL
60493: ST_TO_ADDR
// wait ( time ) ;
60494: LD_VAR 0 8
60498: PPUSH
60499: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60503: LD_INT 35
60505: PPUSH
60506: LD_INT 875
60508: PPUSH
60509: CALL_OW 12
60513: PPUSH
60514: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60518: LD_INT 1
60520: PPUSH
60521: LD_INT 5
60523: PPUSH
60524: CALL_OW 12
60528: PPUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: LD_INT 1
60536: PPUSH
60537: CALL_OW 55
// end ;
60541: GO 60351
// end ;
60543: LD_VAR 0 5
60547: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60548: LD_INT 0
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
60557: PPUSH
// if not turrets or not factories then
60558: LD_VAR 0 1
60562: NOT
60563: PUSH
60564: LD_VAR 0 2
60568: NOT
60569: OR
60570: IFFALSE 60574
// exit ;
60572: GO 60881
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60574: LD_ADDR_VAR 0 10
60578: PUSH
60579: LD_INT 5
60581: PUSH
60582: LD_INT 6
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 24
60616: PUSH
60617: LD_INT 25
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 23
60626: PUSH
60627: LD_INT 27
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 42
60640: PUSH
60641: LD_INT 43
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 44
60650: PUSH
60651: LD_INT 46
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 45
60660: PUSH
60661: LD_INT 47
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// result := [ ] ;
60678: LD_ADDR_VAR 0 3
60682: PUSH
60683: EMPTY
60684: ST_TO_ADDR
// for i in turrets do
60685: LD_ADDR_VAR 0 4
60689: PUSH
60690: LD_VAR 0 1
60694: PUSH
60695: FOR_IN
60696: IFFALSE 60879
// begin nat := GetNation ( i ) ;
60698: LD_ADDR_VAR 0 7
60702: PUSH
60703: LD_VAR 0 4
60707: PPUSH
60708: CALL_OW 248
60712: ST_TO_ADDR
// weapon := 0 ;
60713: LD_ADDR_VAR 0 8
60717: PUSH
60718: LD_INT 0
60720: ST_TO_ADDR
// if not nat then
60721: LD_VAR 0 7
60725: NOT
60726: IFFALSE 60730
// continue ;
60728: GO 60695
// for j in list [ nat ] do
60730: LD_ADDR_VAR 0 5
60734: PUSH
60735: LD_VAR 0 10
60739: PUSH
60740: LD_VAR 0 7
60744: ARRAY
60745: PUSH
60746: FOR_IN
60747: IFFALSE 60788
// if GetBWeapon ( i ) = j [ 1 ] then
60749: LD_VAR 0 4
60753: PPUSH
60754: CALL_OW 269
60758: PUSH
60759: LD_VAR 0 5
60763: PUSH
60764: LD_INT 1
60766: ARRAY
60767: EQUAL
60768: IFFALSE 60786
// begin weapon := j [ 2 ] ;
60770: LD_ADDR_VAR 0 8
60774: PUSH
60775: LD_VAR 0 5
60779: PUSH
60780: LD_INT 2
60782: ARRAY
60783: ST_TO_ADDR
// break ;
60784: GO 60788
// end ;
60786: GO 60746
60788: POP
60789: POP
// if not weapon then
60790: LD_VAR 0 8
60794: NOT
60795: IFFALSE 60799
// continue ;
60797: GO 60695
// for k in factories do
60799: LD_ADDR_VAR 0 6
60803: PUSH
60804: LD_VAR 0 2
60808: PUSH
60809: FOR_IN
60810: IFFALSE 60875
// begin weapons := AvailableWeaponList ( k ) ;
60812: LD_ADDR_VAR 0 9
60816: PUSH
60817: LD_VAR 0 6
60821: PPUSH
60822: CALL_OW 478
60826: ST_TO_ADDR
// if not weapons then
60827: LD_VAR 0 9
60831: NOT
60832: IFFALSE 60836
// continue ;
60834: GO 60809
// if weapon in weapons then
60836: LD_VAR 0 8
60840: PUSH
60841: LD_VAR 0 9
60845: IN
60846: IFFALSE 60873
// begin result := [ i , weapon ] ;
60848: LD_ADDR_VAR 0 3
60852: PUSH
60853: LD_VAR 0 4
60857: PUSH
60858: LD_VAR 0 8
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// exit ;
60867: POP
60868: POP
60869: POP
60870: POP
60871: GO 60881
// end ; end ;
60873: GO 60809
60875: POP
60876: POP
// end ;
60877: GO 60695
60879: POP
60880: POP
// end ;
60881: LD_VAR 0 3
60885: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60886: LD_INT 0
60888: PPUSH
// if not side or side > 8 then
60889: LD_VAR 0 3
60893: NOT
60894: PUSH
60895: LD_VAR 0 3
60899: PUSH
60900: LD_INT 8
60902: GREATER
60903: OR
60904: IFFALSE 60908
// exit ;
60906: GO 60967
// if not range then
60908: LD_VAR 0 4
60912: NOT
60913: IFFALSE 60924
// range := - 12 ;
60915: LD_ADDR_VAR 0 4
60919: PUSH
60920: LD_INT 12
60922: NEG
60923: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60924: LD_VAR 0 1
60928: PPUSH
60929: LD_VAR 0 2
60933: PPUSH
60934: LD_VAR 0 3
60938: PPUSH
60939: LD_VAR 0 4
60943: PPUSH
60944: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_VAR 0 2
60957: PPUSH
60958: LD_VAR 0 3
60962: PPUSH
60963: CALL_OW 331
// end ;
60967: LD_VAR 0 5
60971: RET
// export function Video ( mode ) ; begin
60972: LD_INT 0
60974: PPUSH
// ingame_video = mode ;
60975: LD_ADDR_OWVAR 52
60979: PUSH
60980: LD_VAR 0 1
60984: ST_TO_ADDR
// interface_hidden = mode ;
60985: LD_ADDR_OWVAR 54
60989: PUSH
60990: LD_VAR 0 1
60994: ST_TO_ADDR
// end ;
60995: LD_VAR 0 2
60999: RET
// export function Join ( array , element ) ; begin
61000: LD_INT 0
61002: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61003: LD_ADDR_VAR 0 3
61007: PUSH
61008: LD_VAR 0 1
61012: PPUSH
61013: LD_VAR 0 1
61017: PUSH
61018: LD_INT 1
61020: PLUS
61021: PPUSH
61022: LD_VAR 0 2
61026: PPUSH
61027: CALL_OW 1
61031: ST_TO_ADDR
// end ;
61032: LD_VAR 0 3
61036: RET
// export function JoinUnion ( array , element ) ; begin
61037: LD_INT 0
61039: PPUSH
// result := array union element ;
61040: LD_ADDR_VAR 0 3
61044: PUSH
61045: LD_VAR 0 1
61049: PUSH
61050: LD_VAR 0 2
61054: UNION
61055: ST_TO_ADDR
// end ;
61056: LD_VAR 0 3
61060: RET
// export function GetBehemoths ( side ) ; begin
61061: LD_INT 0
61063: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61064: LD_ADDR_VAR 0 2
61068: PUSH
61069: LD_INT 22
61071: PUSH
61072: LD_VAR 0 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 31
61083: PUSH
61084: LD_INT 25
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PPUSH
61095: CALL_OW 69
61099: ST_TO_ADDR
// end ;
61100: LD_VAR 0 2
61104: RET
// export function Shuffle ( array ) ; var i , index ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
// result := [ ] ;
61110: LD_ADDR_VAR 0 2
61114: PUSH
61115: EMPTY
61116: ST_TO_ADDR
// if not array then
61117: LD_VAR 0 1
61121: NOT
61122: IFFALSE 61126
// exit ;
61124: GO 61225
// Randomize ;
61126: CALL_OW 10
// for i = array downto 1 do
61130: LD_ADDR_VAR 0 3
61134: PUSH
61135: DOUBLE
61136: LD_VAR 0 1
61140: INC
61141: ST_TO_ADDR
61142: LD_INT 1
61144: PUSH
61145: FOR_DOWNTO
61146: IFFALSE 61223
// begin index := rand ( 1 , array ) ;
61148: LD_ADDR_VAR 0 4
61152: PUSH
61153: LD_INT 1
61155: PPUSH
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 12
61165: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61166: LD_ADDR_VAR 0 2
61170: PUSH
61171: LD_VAR 0 2
61175: PPUSH
61176: LD_VAR 0 2
61180: PUSH
61181: LD_INT 1
61183: PLUS
61184: PPUSH
61185: LD_VAR 0 1
61189: PUSH
61190: LD_VAR 0 4
61194: ARRAY
61195: PPUSH
61196: CALL_OW 2
61200: ST_TO_ADDR
// array := Delete ( array , index ) ;
61201: LD_ADDR_VAR 0 1
61205: PUSH
61206: LD_VAR 0 1
61210: PPUSH
61211: LD_VAR 0 4
61215: PPUSH
61216: CALL_OW 3
61220: ST_TO_ADDR
// end ;
61221: GO 61145
61223: POP
61224: POP
// end ;
61225: LD_VAR 0 2
61229: RET
// export function GetBaseMaterials ( base ) ; begin
61230: LD_INT 0
61232: PPUSH
// result := [ 0 , 0 , 0 ] ;
61233: LD_ADDR_VAR 0 2
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// if not base then
61252: LD_VAR 0 1
61256: NOT
61257: IFFALSE 61261
// exit ;
61259: GO 61310
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61261: LD_ADDR_VAR 0 2
61265: PUSH
61266: LD_VAR 0 1
61270: PPUSH
61271: LD_INT 1
61273: PPUSH
61274: CALL_OW 275
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: LD_INT 2
61286: PPUSH
61287: CALL_OW 275
61291: PUSH
61292: LD_VAR 0 1
61296: PPUSH
61297: LD_INT 3
61299: PPUSH
61300: CALL_OW 275
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: ST_TO_ADDR
// end ;
61310: LD_VAR 0 2
61314: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
// result := array ;
61319: LD_ADDR_VAR 0 3
61323: PUSH
61324: LD_VAR 0 1
61328: ST_TO_ADDR
// if size > 0 then
61329: LD_VAR 0 2
61333: PUSH
61334: LD_INT 0
61336: GREATER
61337: IFFALSE 61383
// for i := array downto size do
61339: LD_ADDR_VAR 0 4
61343: PUSH
61344: DOUBLE
61345: LD_VAR 0 1
61349: INC
61350: ST_TO_ADDR
61351: LD_VAR 0 2
61355: PUSH
61356: FOR_DOWNTO
61357: IFFALSE 61381
// result := Delete ( result , result ) ;
61359: LD_ADDR_VAR 0 3
61363: PUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: LD_VAR 0 3
61373: PPUSH
61374: CALL_OW 3
61378: ST_TO_ADDR
61379: GO 61356
61381: POP
61382: POP
// end ;
61383: LD_VAR 0 3
61387: RET
// export function ComExit ( unit ) ; var tmp ; begin
61388: LD_INT 0
61390: PPUSH
61391: PPUSH
// if not IsInUnit ( unit ) then
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 310
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61466
// tmp := IsInUnit ( unit ) ;
61406: LD_ADDR_VAR 0 3
61410: PUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 310
61420: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61421: LD_VAR 0 3
61425: PPUSH
61426: CALL_OW 247
61430: PUSH
61431: LD_INT 2
61433: EQUAL
61434: IFFALSE 61447
// ComExitVehicle ( unit ) else
61436: LD_VAR 0 1
61440: PPUSH
61441: CALL_OW 121
61445: GO 61456
// ComExitBuilding ( unit ) ;
61447: LD_VAR 0 1
61451: PPUSH
61452: CALL_OW 122
// result := tmp ;
61456: LD_ADDR_VAR 0 2
61460: PUSH
61461: LD_VAR 0 3
61465: ST_TO_ADDR
// end ;
61466: LD_VAR 0 2
61470: RET
// export function ComExitAll ( units ) ; var i ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
// if not units then
61475: LD_VAR 0 1
61479: NOT
61480: IFFALSE 61484
// exit ;
61482: GO 61510
// for i in units do
61484: LD_ADDR_VAR 0 3
61488: PUSH
61489: LD_VAR 0 1
61493: PUSH
61494: FOR_IN
61495: IFFALSE 61508
// ComExit ( i ) ;
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL 61388 0 1
61506: GO 61494
61508: POP
61509: POP
// end ;
61510: LD_VAR 0 2
61514: RET
// export function ResetHc ; begin
61515: LD_INT 0
61517: PPUSH
// InitHc ;
61518: CALL_OW 19
// hc_importance := 0 ;
61522: LD_ADDR_OWVAR 32
61526: PUSH
61527: LD_INT 0
61529: ST_TO_ADDR
// end ;
61530: LD_VAR 0 1
61534: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61535: LD_INT 0
61537: PPUSH
61538: PPUSH
61539: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61540: LD_ADDR_VAR 0 6
61544: PUSH
61545: LD_VAR 0 1
61549: PUSH
61550: LD_VAR 0 3
61554: PLUS
61555: PUSH
61556: LD_INT 2
61558: DIV
61559: ST_TO_ADDR
// if _x < 0 then
61560: LD_VAR 0 6
61564: PUSH
61565: LD_INT 0
61567: LESS
61568: IFFALSE 61585
// _x := _x * - 1 ;
61570: LD_ADDR_VAR 0 6
61574: PUSH
61575: LD_VAR 0 6
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: MUL
61584: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61585: LD_ADDR_VAR 0 7
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_VAR 0 4
61599: PLUS
61600: PUSH
61601: LD_INT 2
61603: DIV
61604: ST_TO_ADDR
// if _y < 0 then
61605: LD_VAR 0 7
61609: PUSH
61610: LD_INT 0
61612: LESS
61613: IFFALSE 61630
// _y := _y * - 1 ;
61615: LD_ADDR_VAR 0 7
61619: PUSH
61620: LD_VAR 0 7
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: MUL
61629: ST_TO_ADDR
// result := [ _x , _y ] ;
61630: LD_ADDR_VAR 0 5
61634: PUSH
61635: LD_VAR 0 6
61639: PUSH
61640: LD_VAR 0 7
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// end ;
61649: LD_VAR 0 5
61653: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61654: LD_INT 0
61656: PPUSH
61657: PPUSH
61658: PPUSH
61659: PPUSH
// task := GetTaskList ( unit ) ;
61660: LD_ADDR_VAR 0 7
61664: PUSH
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 437
61674: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61675: LD_VAR 0 7
61679: NOT
61680: PUSH
61681: LD_VAR 0 1
61685: PPUSH
61686: LD_VAR 0 2
61690: PPUSH
61691: CALL_OW 308
61695: NOT
61696: AND
61697: IFFALSE 61701
// exit ;
61699: GO 61819
// if IsInArea ( unit , area ) then
61701: LD_VAR 0 1
61705: PPUSH
61706: LD_VAR 0 2
61710: PPUSH
61711: CALL_OW 308
61715: IFFALSE 61733
// begin ComMoveToArea ( unit , goAway ) ;
61717: LD_VAR 0 1
61721: PPUSH
61722: LD_VAR 0 3
61726: PPUSH
61727: CALL_OW 113
// exit ;
61731: GO 61819
// end ; if task [ 1 ] [ 1 ] <> M then
61733: LD_VAR 0 7
61737: PUSH
61738: LD_INT 1
61740: ARRAY
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: PUSH
61746: LD_STRING M
61748: NONEQUAL
61749: IFFALSE 61753
// exit ;
61751: GO 61819
// x := task [ 1 ] [ 2 ] ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: LD_VAR 0 7
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: PUSH
61767: LD_INT 2
61769: ARRAY
61770: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61771: LD_ADDR_VAR 0 6
61775: PUSH
61776: LD_VAR 0 7
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: PUSH
61785: LD_INT 3
61787: ARRAY
61788: ST_TO_ADDR
// if InArea ( x , y , area ) then
61789: LD_VAR 0 5
61793: PPUSH
61794: LD_VAR 0 6
61798: PPUSH
61799: LD_VAR 0 2
61803: PPUSH
61804: CALL_OW 309
61808: IFFALSE 61819
// ComStop ( unit ) ;
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL_OW 141
// end ;
61819: LD_VAR 0 4
61823: RET
// export function Abs ( value ) ; begin
61824: LD_INT 0
61826: PPUSH
// result := value ;
61827: LD_ADDR_VAR 0 2
61831: PUSH
61832: LD_VAR 0 1
61836: ST_TO_ADDR
// if value < 0 then
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 0
61844: LESS
61845: IFFALSE 61862
// result := value * - 1 ;
61847: LD_ADDR_VAR 0 2
61851: PUSH
61852: LD_VAR 0 1
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: MUL
61861: ST_TO_ADDR
// end ;
61862: LD_VAR 0 2
61866: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61867: LD_INT 0
61869: PPUSH
61870: PPUSH
61871: PPUSH
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
// if not unit or not building then
61877: LD_VAR 0 1
61881: NOT
61882: PUSH
61883: LD_VAR 0 2
61887: NOT
61888: OR
61889: IFFALSE 61893
// exit ;
61891: GO 62119
// x := GetX ( building ) ;
61893: LD_ADDR_VAR 0 4
61897: PUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: CALL_OW 250
61907: ST_TO_ADDR
// y := GetY ( building ) ;
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 2
61917: PPUSH
61918: CALL_OW 251
61922: ST_TO_ADDR
// d := GetDir ( building ) ;
61923: LD_ADDR_VAR 0 8
61927: PUSH
61928: LD_VAR 0 2
61932: PPUSH
61933: CALL_OW 254
61937: ST_TO_ADDR
// r := 4 ;
61938: LD_ADDR_VAR 0 9
61942: PUSH
61943: LD_INT 4
61945: ST_TO_ADDR
// for i := 1 to 5 do
61946: LD_ADDR_VAR 0 10
61950: PUSH
61951: DOUBLE
61952: LD_INT 1
61954: DEC
61955: ST_TO_ADDR
61956: LD_INT 5
61958: PUSH
61959: FOR_TO
61960: IFFALSE 62117
// begin _x := ShiftX ( x , d , r + i ) ;
61962: LD_ADDR_VAR 0 5
61966: PUSH
61967: LD_VAR 0 4
61971: PPUSH
61972: LD_VAR 0 8
61976: PPUSH
61977: LD_VAR 0 9
61981: PUSH
61982: LD_VAR 0 10
61986: PLUS
61987: PPUSH
61988: CALL_OW 272
61992: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61993: LD_ADDR_VAR 0 7
61997: PUSH
61998: LD_VAR 0 6
62002: PPUSH
62003: LD_VAR 0 8
62007: PPUSH
62008: LD_VAR 0 9
62012: PUSH
62013: LD_VAR 0 10
62017: PLUS
62018: PPUSH
62019: CALL_OW 273
62023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62024: LD_VAR 0 5
62028: PPUSH
62029: LD_VAR 0 7
62033: PPUSH
62034: CALL_OW 488
62038: PUSH
62039: LD_VAR 0 5
62043: PPUSH
62044: LD_VAR 0 7
62048: PPUSH
62049: CALL_OW 428
62053: PPUSH
62054: CALL_OW 247
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: IN
62069: NOT
62070: AND
62071: IFFALSE 62115
// begin ComMoveXY ( unit , _x , _y ) ;
62073: LD_VAR 0 1
62077: PPUSH
62078: LD_VAR 0 5
62082: PPUSH
62083: LD_VAR 0 7
62087: PPUSH
62088: CALL_OW 111
// result := [ _x , _y ] ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_VAR 0 5
62101: PUSH
62102: LD_VAR 0 7
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// exit ;
62111: POP
62112: POP
62113: GO 62119
// end ; end ;
62115: GO 61959
62117: POP
62118: POP
// end ;
62119: LD_VAR 0 3
62123: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62124: LD_INT 0
62126: PPUSH
62127: PPUSH
62128: PPUSH
// result := 0 ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_INT 0
62136: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 0
62144: LESS
62145: PUSH
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 8
62153: GREATER
62154: OR
62155: PUSH
62156: LD_VAR 0 2
62160: PUSH
62161: LD_INT 0
62163: LESS
62164: OR
62165: PUSH
62166: LD_VAR 0 2
62170: PUSH
62171: LD_INT 8
62173: GREATER
62174: OR
62175: IFFALSE 62179
// exit ;
62177: GO 62254
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62179: LD_ADDR_VAR 0 4
62183: PUSH
62184: LD_INT 22
62186: PUSH
62187: LD_VAR 0 2
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PPUSH
62196: CALL_OW 69
62200: PUSH
62201: FOR_IN
62202: IFFALSE 62252
// begin un := UnitShoot ( i ) ;
62204: LD_ADDR_VAR 0 5
62208: PUSH
62209: LD_VAR 0 4
62213: PPUSH
62214: CALL_OW 504
62218: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62219: LD_VAR 0 5
62223: PPUSH
62224: CALL_OW 255
62228: PUSH
62229: LD_VAR 0 1
62233: EQUAL
62234: IFFALSE 62250
// begin result := un ;
62236: LD_ADDR_VAR 0 3
62240: PUSH
62241: LD_VAR 0 5
62245: ST_TO_ADDR
// exit ;
62246: POP
62247: POP
62248: GO 62254
// end ; end ;
62250: GO 62201
62252: POP
62253: POP
// end ;
62254: LD_VAR 0 3
62258: RET
// export function GetCargoBay ( units ) ; begin
62259: LD_INT 0
62261: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: LD_VAR 0 1
62271: PPUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 34
62277: PUSH
62278: LD_INT 12
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 34
62287: PUSH
62288: LD_INT 51
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 34
62297: PUSH
62298: LD_INT 32
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 34
62307: PUSH
62308: LD_EXP 85
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: PPUSH
62324: CALL_OW 72
62328: ST_TO_ADDR
// end ;
62329: LD_VAR 0 2
62333: RET
// export function Negate ( value ) ; begin
62334: LD_INT 0
62336: PPUSH
// result := not value ;
62337: LD_ADDR_VAR 0 2
62341: PUSH
62342: LD_VAR 0 1
62346: NOT
62347: ST_TO_ADDR
// end ;
62348: LD_VAR 0 2
62352: RET
// export function Inc ( value ) ; begin
62353: LD_INT 0
62355: PPUSH
// result := value + 1 ;
62356: LD_ADDR_VAR 0 2
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 1
62368: PLUS
62369: ST_TO_ADDR
// end ;
62370: LD_VAR 0 2
62374: RET
// export function Dec ( value ) ; begin
62375: LD_INT 0
62377: PPUSH
// result := value - 1 ;
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: LD_INT 1
62390: MINUS
62391: ST_TO_ADDR
// end ;
62392: LD_VAR 0 2
62396: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62397: LD_INT 0
62399: PPUSH
62400: PPUSH
62401: PPUSH
62402: PPUSH
62403: PPUSH
62404: PPUSH
62405: PPUSH
62406: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62407: LD_VAR 0 1
62411: PPUSH
62412: LD_VAR 0 2
62416: PPUSH
62417: CALL_OW 488
62421: NOT
62422: PUSH
62423: LD_VAR 0 3
62427: PPUSH
62428: LD_VAR 0 4
62432: PPUSH
62433: CALL_OW 488
62437: NOT
62438: OR
62439: IFFALSE 62452
// begin result := - 1 ;
62441: LD_ADDR_VAR 0 5
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: ST_TO_ADDR
// exit ;
62450: GO 62687
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62452: LD_ADDR_VAR 0 12
62456: PUSH
62457: LD_VAR 0 1
62461: PPUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: LD_VAR 0 3
62471: PPUSH
62472: LD_VAR 0 4
62476: PPUSH
62477: CALL 61535 0 4
62481: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62482: LD_ADDR_VAR 0 11
62486: PUSH
62487: LD_VAR 0 1
62491: PPUSH
62492: LD_VAR 0 2
62496: PPUSH
62497: LD_VAR 0 12
62501: PUSH
62502: LD_INT 1
62504: ARRAY
62505: PPUSH
62506: LD_VAR 0 12
62510: PUSH
62511: LD_INT 2
62513: ARRAY
62514: PPUSH
62515: CALL_OW 298
62519: ST_TO_ADDR
// distance := 9999 ;
62520: LD_ADDR_VAR 0 10
62524: PUSH
62525: LD_INT 9999
62527: ST_TO_ADDR
// for i := 0 to 5 do
62528: LD_ADDR_VAR 0 6
62532: PUSH
62533: DOUBLE
62534: LD_INT 0
62536: DEC
62537: ST_TO_ADDR
62538: LD_INT 5
62540: PUSH
62541: FOR_TO
62542: IFFALSE 62685
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62544: LD_ADDR_VAR 0 7
62548: PUSH
62549: LD_VAR 0 1
62553: PPUSH
62554: LD_VAR 0 6
62558: PPUSH
62559: LD_VAR 0 11
62563: PPUSH
62564: CALL_OW 272
62568: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62569: LD_ADDR_VAR 0 8
62573: PUSH
62574: LD_VAR 0 2
62578: PPUSH
62579: LD_VAR 0 6
62583: PPUSH
62584: LD_VAR 0 11
62588: PPUSH
62589: CALL_OW 273
62593: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62594: LD_VAR 0 7
62598: PPUSH
62599: LD_VAR 0 8
62603: PPUSH
62604: CALL_OW 488
62608: NOT
62609: IFFALSE 62613
// continue ;
62611: GO 62541
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62613: LD_ADDR_VAR 0 9
62617: PUSH
62618: LD_VAR 0 12
62622: PUSH
62623: LD_INT 1
62625: ARRAY
62626: PPUSH
62627: LD_VAR 0 12
62631: PUSH
62632: LD_INT 2
62634: ARRAY
62635: PPUSH
62636: LD_VAR 0 7
62640: PPUSH
62641: LD_VAR 0 8
62645: PPUSH
62646: CALL_OW 298
62650: ST_TO_ADDR
// if tmp < distance then
62651: LD_VAR 0 9
62655: PUSH
62656: LD_VAR 0 10
62660: LESS
62661: IFFALSE 62683
// begin result := i ;
62663: LD_ADDR_VAR 0 5
62667: PUSH
62668: LD_VAR 0 6
62672: ST_TO_ADDR
// distance := tmp ;
62673: LD_ADDR_VAR 0 10
62677: PUSH
62678: LD_VAR 0 9
62682: ST_TO_ADDR
// end ; end ;
62683: GO 62541
62685: POP
62686: POP
// end ;
62687: LD_VAR 0 5
62691: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62692: LD_INT 0
62694: PPUSH
62695: PPUSH
// if not driver or not IsInUnit ( driver ) then
62696: LD_VAR 0 1
62700: NOT
62701: PUSH
62702: LD_VAR 0 1
62706: PPUSH
62707: CALL_OW 310
62711: NOT
62712: OR
62713: IFFALSE 62717
// exit ;
62715: GO 62807
// vehicle := IsInUnit ( driver ) ;
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: CALL_OW 310
62731: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62732: LD_VAR 0 1
62736: PPUSH
62737: LD_STRING \
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: PUSH
62767: LD_STRING E
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: LD_VAR 0 3
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PPUSH
62803: CALL_OW 446
// end ;
62807: LD_VAR 0 2
62811: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62812: LD_INT 0
62814: PPUSH
62815: PPUSH
// if not driver or not IsInUnit ( driver ) then
62816: LD_VAR 0 1
62820: NOT
62821: PUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 310
62831: NOT
62832: OR
62833: IFFALSE 62837
// exit ;
62835: GO 62927
// vehicle := IsInUnit ( driver ) ;
62837: LD_ADDR_VAR 0 3
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 310
62851: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62852: LD_VAR 0 1
62856: PPUSH
62857: LD_STRING \
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: PUSH
62887: LD_STRING E
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_VAR 0 3
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PPUSH
62923: CALL_OW 447
// end ;
62927: LD_VAR 0 2
62931: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62932: LD_INT 0
62934: PPUSH
62935: PPUSH
62936: PPUSH
// tmp := [ ] ;
62937: LD_ADDR_VAR 0 5
62941: PUSH
62942: EMPTY
62943: ST_TO_ADDR
// for i in units do
62944: LD_ADDR_VAR 0 4
62948: PUSH
62949: LD_VAR 0 1
62953: PUSH
62954: FOR_IN
62955: IFFALSE 62993
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62957: LD_ADDR_VAR 0 5
62961: PUSH
62962: LD_VAR 0 5
62966: PPUSH
62967: LD_VAR 0 5
62971: PUSH
62972: LD_INT 1
62974: PLUS
62975: PPUSH
62976: LD_VAR 0 4
62980: PPUSH
62981: CALL_OW 256
62985: PPUSH
62986: CALL_OW 2
62990: ST_TO_ADDR
62991: GO 62954
62993: POP
62994: POP
// if not tmp then
62995: LD_VAR 0 5
62999: NOT
63000: IFFALSE 63004
// exit ;
63002: GO 63052
// if asc then
63004: LD_VAR 0 2
63008: IFFALSE 63032
// result := SortListByListAsc ( units , tmp ) else
63010: LD_ADDR_VAR 0 3
63014: PUSH
63015: LD_VAR 0 1
63019: PPUSH
63020: LD_VAR 0 5
63024: PPUSH
63025: CALL_OW 76
63029: ST_TO_ADDR
63030: GO 63052
// result := SortListByListDesc ( units , tmp ) ;
63032: LD_ADDR_VAR 0 3
63036: PUSH
63037: LD_VAR 0 1
63041: PPUSH
63042: LD_VAR 0 5
63046: PPUSH
63047: CALL_OW 77
63051: ST_TO_ADDR
// end ;
63052: LD_VAR 0 3
63056: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63057: LD_INT 0
63059: PPUSH
63060: PPUSH
// task := GetTaskList ( mech ) ;
63061: LD_ADDR_VAR 0 4
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL_OW 437
63075: ST_TO_ADDR
// if not task then
63076: LD_VAR 0 4
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63127
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63085: LD_ADDR_VAR 0 3
63089: PUSH
63090: LD_VAR 0 4
63094: PUSH
63095: LD_INT 1
63097: ARRAY
63098: PUSH
63099: LD_INT 1
63101: ARRAY
63102: PUSH
63103: LD_STRING r
63105: EQUAL
63106: PUSH
63107: LD_VAR 0 4
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: PUSH
63116: LD_INT 4
63118: ARRAY
63119: PUSH
63120: LD_VAR 0 2
63124: EQUAL
63125: AND
63126: ST_TO_ADDR
// end ;
63127: LD_VAR 0 3
63131: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63132: LD_INT 0
63134: PPUSH
// SetDir ( unit , d ) ;
63135: LD_VAR 0 1
63139: PPUSH
63140: LD_VAR 0 4
63144: PPUSH
63145: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63149: LD_VAR 0 1
63153: PPUSH
63154: LD_VAR 0 2
63158: PPUSH
63159: LD_VAR 0 3
63163: PPUSH
63164: LD_VAR 0 5
63168: PPUSH
63169: CALL_OW 48
// end ;
63173: LD_VAR 0 6
63177: RET
// export function ToNaturalNumber ( number ) ; begin
63178: LD_INT 0
63180: PPUSH
// result := number div 1 ;
63181: LD_ADDR_VAR 0 2
63185: PUSH
63186: LD_VAR 0 1
63190: PUSH
63191: LD_INT 1
63193: DIV
63194: ST_TO_ADDR
// if number < 0 then
63195: LD_VAR 0 1
63199: PUSH
63200: LD_INT 0
63202: LESS
63203: IFFALSE 63213
// result := 0 ;
63205: LD_ADDR_VAR 0 2
63209: PUSH
63210: LD_INT 0
63212: ST_TO_ADDR
// end ;
63213: LD_VAR 0 2
63217: RET
// export function SortByClass ( units , class ) ; var un ; begin
63218: LD_INT 0
63220: PPUSH
63221: PPUSH
// if not units or not class then
63222: LD_VAR 0 1
63226: NOT
63227: PUSH
63228: LD_VAR 0 2
63232: NOT
63233: OR
63234: IFFALSE 63238
// exit ;
63236: GO 63333
// result := [ ] ;
63238: LD_ADDR_VAR 0 3
63242: PUSH
63243: EMPTY
63244: ST_TO_ADDR
// for un in units do
63245: LD_ADDR_VAR 0 4
63249: PUSH
63250: LD_VAR 0 1
63254: PUSH
63255: FOR_IN
63256: IFFALSE 63331
// if GetClass ( un ) = class then
63258: LD_VAR 0 4
63262: PPUSH
63263: CALL_OW 257
63267: PUSH
63268: LD_VAR 0 2
63272: EQUAL
63273: IFFALSE 63300
// result := Insert ( result , 1 , un ) else
63275: LD_ADDR_VAR 0 3
63279: PUSH
63280: LD_VAR 0 3
63284: PPUSH
63285: LD_INT 1
63287: PPUSH
63288: LD_VAR 0 4
63292: PPUSH
63293: CALL_OW 2
63297: ST_TO_ADDR
63298: GO 63329
// result := Replace ( result , result + 1 , un ) ;
63300: LD_ADDR_VAR 0 3
63304: PUSH
63305: LD_VAR 0 3
63309: PPUSH
63310: LD_VAR 0 3
63314: PUSH
63315: LD_INT 1
63317: PLUS
63318: PPUSH
63319: LD_VAR 0 4
63323: PPUSH
63324: CALL_OW 1
63328: ST_TO_ADDR
63329: GO 63255
63331: POP
63332: POP
// end ;
63333: LD_VAR 0 3
63337: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63338: LD_INT 0
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
63345: PPUSH
63346: PPUSH
// result := [ ] ;
63347: LD_ADDR_VAR 0 4
63351: PUSH
63352: EMPTY
63353: ST_TO_ADDR
// if x - r < 0 then
63354: LD_VAR 0 1
63358: PUSH
63359: LD_VAR 0 3
63363: MINUS
63364: PUSH
63365: LD_INT 0
63367: LESS
63368: IFFALSE 63380
// min_x := 0 else
63370: LD_ADDR_VAR 0 8
63374: PUSH
63375: LD_INT 0
63377: ST_TO_ADDR
63378: GO 63396
// min_x := x - r ;
63380: LD_ADDR_VAR 0 8
63384: PUSH
63385: LD_VAR 0 1
63389: PUSH
63390: LD_VAR 0 3
63394: MINUS
63395: ST_TO_ADDR
// if y - r < 0 then
63396: LD_VAR 0 2
63400: PUSH
63401: LD_VAR 0 3
63405: MINUS
63406: PUSH
63407: LD_INT 0
63409: LESS
63410: IFFALSE 63422
// min_y := 0 else
63412: LD_ADDR_VAR 0 7
63416: PUSH
63417: LD_INT 0
63419: ST_TO_ADDR
63420: GO 63438
// min_y := y - r ;
63422: LD_ADDR_VAR 0 7
63426: PUSH
63427: LD_VAR 0 2
63431: PUSH
63432: LD_VAR 0 3
63436: MINUS
63437: ST_TO_ADDR
// max_x := x + r ;
63438: LD_ADDR_VAR 0 9
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_VAR 0 3
63452: PLUS
63453: ST_TO_ADDR
// max_y := y + r ;
63454: LD_ADDR_VAR 0 10
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_VAR 0 3
63468: PLUS
63469: ST_TO_ADDR
// for _x = min_x to max_x do
63470: LD_ADDR_VAR 0 5
63474: PUSH
63475: DOUBLE
63476: LD_VAR 0 8
63480: DEC
63481: ST_TO_ADDR
63482: LD_VAR 0 9
63486: PUSH
63487: FOR_TO
63488: IFFALSE 63589
// for _y = min_y to max_y do
63490: LD_ADDR_VAR 0 6
63494: PUSH
63495: DOUBLE
63496: LD_VAR 0 7
63500: DEC
63501: ST_TO_ADDR
63502: LD_VAR 0 10
63506: PUSH
63507: FOR_TO
63508: IFFALSE 63585
// begin if not ValidHex ( _x , _y ) then
63510: LD_VAR 0 5
63514: PPUSH
63515: LD_VAR 0 6
63519: PPUSH
63520: CALL_OW 488
63524: NOT
63525: IFFALSE 63529
// continue ;
63527: GO 63507
// if GetResourceTypeXY ( _x , _y ) then
63529: LD_VAR 0 5
63533: PPUSH
63534: LD_VAR 0 6
63538: PPUSH
63539: CALL_OW 283
63543: IFFALSE 63583
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63545: LD_ADDR_VAR 0 4
63549: PUSH
63550: LD_VAR 0 4
63554: PPUSH
63555: LD_VAR 0 4
63559: PUSH
63560: LD_INT 1
63562: PLUS
63563: PPUSH
63564: LD_VAR 0 5
63568: PUSH
63569: LD_VAR 0 6
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PPUSH
63578: CALL_OW 1
63582: ST_TO_ADDR
// end ;
63583: GO 63507
63585: POP
63586: POP
63587: GO 63487
63589: POP
63590: POP
// end ;
63591: LD_VAR 0 4
63595: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63596: LD_INT 0
63598: PPUSH
63599: PPUSH
63600: PPUSH
63601: PPUSH
63602: PPUSH
63603: PPUSH
63604: PPUSH
63605: PPUSH
// if not units then
63606: LD_VAR 0 1
63610: NOT
63611: IFFALSE 63615
// exit ;
63613: GO 64040
// result := UnitFilter ( units , [ f_ok ] ) ;
63615: LD_ADDR_VAR 0 3
63619: PUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: LD_INT 50
63627: PUSH
63628: EMPTY
63629: LIST
63630: PPUSH
63631: CALL_OW 72
63635: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63636: LD_ADDR_VAR 0 8
63640: PUSH
63641: LD_VAR 0 1
63645: PUSH
63646: LD_INT 1
63648: ARRAY
63649: PPUSH
63650: CALL_OW 255
63654: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63655: LD_ADDR_VAR 0 10
63659: PUSH
63660: LD_INT 29
63662: PUSH
63663: LD_EXP 88
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// if not result then
63672: LD_VAR 0 3
63676: NOT
63677: IFFALSE 63681
// exit ;
63679: GO 64040
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63681: LD_ADDR_VAR 0 5
63685: PUSH
63686: LD_INT 81
63688: PUSH
63689: LD_VAR 0 8
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PPUSH
63698: CALL_OW 69
63702: ST_TO_ADDR
// for i in result do
63703: LD_ADDR_VAR 0 4
63707: PUSH
63708: LD_VAR 0 3
63712: PUSH
63713: FOR_IN
63714: IFFALSE 64038
// begin tag := GetTag ( i ) + 1 ;
63716: LD_ADDR_VAR 0 9
63720: PUSH
63721: LD_VAR 0 4
63725: PPUSH
63726: CALL_OW 110
63730: PUSH
63731: LD_INT 1
63733: PLUS
63734: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63735: LD_ADDR_VAR 0 7
63739: PUSH
63740: LD_VAR 0 4
63744: PPUSH
63745: CALL_OW 250
63749: PPUSH
63750: LD_VAR 0 4
63754: PPUSH
63755: CALL_OW 251
63759: PPUSH
63760: LD_INT 6
63762: PPUSH
63763: CALL 63338 0 3
63767: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63768: LD_VAR 0 7
63772: PUSH
63773: LD_VAR 0 4
63777: PPUSH
63778: CALL_OW 264
63782: PUSH
63783: LD_VAR 0 10
63787: IN
63788: NOT
63789: AND
63790: IFFALSE 63829
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63792: LD_VAR 0 4
63796: PPUSH
63797: LD_VAR 0 7
63801: PUSH
63802: LD_INT 1
63804: ARRAY
63805: PUSH
63806: LD_INT 1
63808: ARRAY
63809: PPUSH
63810: LD_VAR 0 7
63814: PUSH
63815: LD_INT 1
63817: ARRAY
63818: PUSH
63819: LD_INT 2
63821: ARRAY
63822: PPUSH
63823: CALL_OW 116
63827: GO 64036
// if path > tag then
63829: LD_VAR 0 2
63833: PUSH
63834: LD_VAR 0 9
63838: GREATER
63839: IFFALSE 64006
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63841: LD_ADDR_VAR 0 6
63845: PUSH
63846: LD_VAR 0 5
63850: PPUSH
63851: LD_INT 91
63853: PUSH
63854: LD_VAR 0 4
63858: PUSH
63859: LD_INT 12
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: PPUSH
63867: CALL_OW 72
63871: ST_TO_ADDR
// if nearEnemy then
63872: LD_VAR 0 6
63876: IFFALSE 63904
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63878: LD_VAR 0 4
63882: PPUSH
63883: LD_VAR 0 6
63887: PPUSH
63888: LD_VAR 0 4
63892: PPUSH
63893: CALL_OW 74
63897: PPUSH
63898: CALL_OW 115
63902: GO 64004
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63904: LD_VAR 0 4
63908: PPUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_VAR 0 9
63918: ARRAY
63919: PUSH
63920: LD_INT 1
63922: ARRAY
63923: PPUSH
63924: LD_VAR 0 2
63928: PUSH
63929: LD_VAR 0 9
63933: ARRAY
63934: PUSH
63935: LD_INT 2
63937: ARRAY
63938: PPUSH
63939: CALL_OW 297
63943: PUSH
63944: LD_INT 6
63946: GREATER
63947: IFFALSE 63990
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63949: LD_VAR 0 4
63953: PPUSH
63954: LD_VAR 0 2
63958: PUSH
63959: LD_VAR 0 9
63963: ARRAY
63964: PUSH
63965: LD_INT 1
63967: ARRAY
63968: PPUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_VAR 0 9
63978: ARRAY
63979: PUSH
63980: LD_INT 2
63982: ARRAY
63983: PPUSH
63984: CALL_OW 114
63988: GO 64004
// SetTag ( i , tag ) ;
63990: LD_VAR 0 4
63994: PPUSH
63995: LD_VAR 0 9
63999: PPUSH
64000: CALL_OW 109
// end else
64004: GO 64036
// if enemy then
64006: LD_VAR 0 5
64010: IFFALSE 64036
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64012: LD_VAR 0 4
64016: PPUSH
64017: LD_VAR 0 5
64021: PPUSH
64022: LD_VAR 0 4
64026: PPUSH
64027: CALL_OW 74
64031: PPUSH
64032: CALL_OW 115
// end ;
64036: GO 63713
64038: POP
64039: POP
// end ;
64040: LD_VAR 0 3
64044: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64045: LD_INT 0
64047: PPUSH
64048: PPUSH
64049: PPUSH
// if not unit or IsInUnit ( unit ) then
64050: LD_VAR 0 1
64054: NOT
64055: PUSH
64056: LD_VAR 0 1
64060: PPUSH
64061: CALL_OW 310
64065: OR
64066: IFFALSE 64070
// exit ;
64068: GO 64161
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64070: LD_ADDR_VAR 0 4
64074: PUSH
64075: LD_VAR 0 1
64079: PPUSH
64080: CALL_OW 250
64084: PPUSH
64085: LD_VAR 0 2
64089: PPUSH
64090: LD_INT 1
64092: PPUSH
64093: CALL_OW 272
64097: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64098: LD_ADDR_VAR 0 5
64102: PUSH
64103: LD_VAR 0 1
64107: PPUSH
64108: CALL_OW 251
64112: PPUSH
64113: LD_VAR 0 2
64117: PPUSH
64118: LD_INT 1
64120: PPUSH
64121: CALL_OW 273
64125: ST_TO_ADDR
// if ValidHex ( x , y ) then
64126: LD_VAR 0 4
64130: PPUSH
64131: LD_VAR 0 5
64135: PPUSH
64136: CALL_OW 488
64140: IFFALSE 64161
// ComTurnXY ( unit , x , y ) ;
64142: LD_VAR 0 1
64146: PPUSH
64147: LD_VAR 0 4
64151: PPUSH
64152: LD_VAR 0 5
64156: PPUSH
64157: CALL_OW 118
// end ;
64161: LD_VAR 0 3
64165: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64166: LD_INT 0
64168: PPUSH
64169: PPUSH
// result := false ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: LD_INT 0
64177: ST_TO_ADDR
// if not units then
64178: LD_VAR 0 2
64182: NOT
64183: IFFALSE 64187
// exit ;
64185: GO 64232
// for i in units do
64187: LD_ADDR_VAR 0 4
64191: PUSH
64192: LD_VAR 0 2
64196: PUSH
64197: FOR_IN
64198: IFFALSE 64230
// if See ( side , i ) then
64200: LD_VAR 0 1
64204: PPUSH
64205: LD_VAR 0 4
64209: PPUSH
64210: CALL_OW 292
64214: IFFALSE 64228
// begin result := true ;
64216: LD_ADDR_VAR 0 3
64220: PUSH
64221: LD_INT 1
64223: ST_TO_ADDR
// exit ;
64224: POP
64225: POP
64226: GO 64232
// end ;
64228: GO 64197
64230: POP
64231: POP
// end ;
64232: LD_VAR 0 3
64236: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64237: LD_INT 0
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
// if not unit or not points then
64243: LD_VAR 0 1
64247: NOT
64248: PUSH
64249: LD_VAR 0 2
64253: NOT
64254: OR
64255: IFFALSE 64259
// exit ;
64257: GO 64349
// dist := 99999 ;
64259: LD_ADDR_VAR 0 5
64263: PUSH
64264: LD_INT 99999
64266: ST_TO_ADDR
// for i in points do
64267: LD_ADDR_VAR 0 4
64271: PUSH
64272: LD_VAR 0 2
64276: PUSH
64277: FOR_IN
64278: IFFALSE 64347
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64280: LD_ADDR_VAR 0 6
64284: PUSH
64285: LD_VAR 0 1
64289: PPUSH
64290: LD_VAR 0 4
64294: PUSH
64295: LD_INT 1
64297: ARRAY
64298: PPUSH
64299: LD_VAR 0 4
64303: PUSH
64304: LD_INT 2
64306: ARRAY
64307: PPUSH
64308: CALL_OW 297
64312: ST_TO_ADDR
// if tmpDist < dist then
64313: LD_VAR 0 6
64317: PUSH
64318: LD_VAR 0 5
64322: LESS
64323: IFFALSE 64345
// begin result := i ;
64325: LD_ADDR_VAR 0 3
64329: PUSH
64330: LD_VAR 0 4
64334: ST_TO_ADDR
// dist := tmpDist ;
64335: LD_ADDR_VAR 0 5
64339: PUSH
64340: LD_VAR 0 6
64344: ST_TO_ADDR
// end ; end ;
64345: GO 64277
64347: POP
64348: POP
// end ; end_of_file
64349: LD_VAR 0 3
64353: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64354: LD_VAR 0 1
64358: PPUSH
64359: LD_VAR 0 2
64363: PPUSH
64364: LD_VAR 0 3
64368: PPUSH
64369: LD_VAR 0 4
64373: PPUSH
64374: LD_VAR 0 5
64378: PPUSH
64379: LD_VAR 0 6
64383: PPUSH
64384: CALL 5005 0 6
// end ;
64388: PPOPN 6
64390: END
