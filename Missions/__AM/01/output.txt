// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// export function SOS_MapStart ( ) ; begin
4985: LD_INT 0
4987: PPUSH
// if streamModeActive then
4988: LD_EXP 15
4992: IFFALSE 5001
// DefineStreamItems ( true ) ;
4994: LD_INT 1
4996: PPUSH
4997: CALL 6655 0 1
// UpdateFactoryWaypoints ( ) ;
5001: CALL 19516 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5005: CALL 19773 0 0
// end ;
5009: LD_VAR 0 1
5013: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5014: LD_INT 0
5016: PPUSH
// if p2 = 100 then
5017: LD_VAR 0 2
5021: PUSH
5022: LD_INT 100
5024: EQUAL
5025: IFFALSE 6028
// begin if not StreamModeActive then
5027: LD_EXP 15
5031: NOT
5032: IFFALSE 5042
// StreamModeActive := true ;
5034: LD_ADDR_EXP 15
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 0 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 0
5049: EQUAL
5050: IFFALSE 5056
// InitStreamMode ;
5052: CALL 6191 0 0
// if p3 = 1 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 1
5063: EQUAL
5064: IFFALSE 5074
// sRocket := true ;
5066: LD_ADDR_EXP 20
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 2 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: IFFALSE 5092
// sSpeed := true ;
5084: LD_ADDR_EXP 19
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 3 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 3
5099: EQUAL
5100: IFFALSE 5110
// sEngine := true ;
5102: LD_ADDR_EXP 21
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 4 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 4
5117: EQUAL
5118: IFFALSE 5128
// sSpec := true ;
5120: LD_ADDR_EXP 18
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 5 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 5
5135: EQUAL
5136: IFFALSE 5146
// sLevel := true ;
5138: LD_ADDR_EXP 22
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 6 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 6
5153: EQUAL
5154: IFFALSE 5164
// sArmoury := true ;
5156: LD_ADDR_EXP 23
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 7 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 7
5171: EQUAL
5172: IFFALSE 5182
// sRadar := true ;
5174: LD_ADDR_EXP 24
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 8 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 8
5189: EQUAL
5190: IFFALSE 5200
// sBunker := true ;
5192: LD_ADDR_EXP 25
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 9 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 9
5207: EQUAL
5208: IFFALSE 5218
// sHack := true ;
5210: LD_ADDR_EXP 26
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 10 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 10
5225: EQUAL
5226: IFFALSE 5236
// sFire := true ;
5228: LD_ADDR_EXP 27
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 11 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 11
5243: EQUAL
5244: IFFALSE 5254
// sRefresh := true ;
5246: LD_ADDR_EXP 28
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 12 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5272
// sExp := true ;
5264: LD_ADDR_EXP 29
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 13 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 13
5279: EQUAL
5280: IFFALSE 5290
// sDepot := true ;
5282: LD_ADDR_EXP 30
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 14 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 14
5297: EQUAL
5298: IFFALSE 5308
// sFlag := true ;
5300: LD_ADDR_EXP 31
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 15 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 15
5315: EQUAL
5316: IFFALSE 5326
// sKamikadze := true ;
5318: LD_ADDR_EXP 39
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 16 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 16
5333: EQUAL
5334: IFFALSE 5344
// sTroll := true ;
5336: LD_ADDR_EXP 40
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 17 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 17
5351: EQUAL
5352: IFFALSE 5362
// sSlow := true ;
5354: LD_ADDR_EXP 41
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 18 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 18
5369: EQUAL
5370: IFFALSE 5380
// sLack := true ;
5372: LD_ADDR_EXP 42
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 19 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 19
5387: EQUAL
5388: IFFALSE 5398
// sTank := true ;
5390: LD_ADDR_EXP 44
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 20 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 20
5405: EQUAL
5406: IFFALSE 5416
// sRemote := true ;
5408: LD_ADDR_EXP 45
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 21 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 21
5423: EQUAL
5424: IFFALSE 5434
// sPowell := true ;
5426: LD_ADDR_EXP 46
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 22 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 22
5441: EQUAL
5442: IFFALSE 5452
// sTeleport := true ;
5444: LD_ADDR_EXP 49
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 23 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 23
5459: EQUAL
5460: IFFALSE 5470
// sOilTower := true ;
5462: LD_ADDR_EXP 51
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 24 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 24
5477: EQUAL
5478: IFFALSE 5488
// sShovel := true ;
5480: LD_ADDR_EXP 52
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 25 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 25
5495: EQUAL
5496: IFFALSE 5506
// sSheik := true ;
5498: LD_ADDR_EXP 53
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 26 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 26
5513: EQUAL
5514: IFFALSE 5524
// sEarthquake := true ;
5516: LD_ADDR_EXP 55
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 27 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 27
5531: EQUAL
5532: IFFALSE 5542
// sAI := true ;
5534: LD_ADDR_EXP 56
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 28 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 28
5549: EQUAL
5550: IFFALSE 5560
// sCargo := true ;
5552: LD_ADDR_EXP 59
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 29 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 29
5567: EQUAL
5568: IFFALSE 5578
// sDLaser := true ;
5570: LD_ADDR_EXP 60
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 30 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 30
5585: EQUAL
5586: IFFALSE 5596
// sExchange := true ;
5588: LD_ADDR_EXP 61
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 31 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 31
5603: EQUAL
5604: IFFALSE 5614
// sFac := true ;
5606: LD_ADDR_EXP 62
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 32 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 32
5621: EQUAL
5622: IFFALSE 5632
// sPower := true ;
5624: LD_ADDR_EXP 63
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 33 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 33
5639: EQUAL
5640: IFFALSE 5650
// sRandom := true ;
5642: LD_ADDR_EXP 64
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 34 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 34
5657: EQUAL
5658: IFFALSE 5668
// sShield := true ;
5660: LD_ADDR_EXP 65
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 35 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 35
5675: EQUAL
5676: IFFALSE 5686
// sTime := true ;
5678: LD_ADDR_EXP 66
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 36 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 36
5693: EQUAL
5694: IFFALSE 5704
// sTools := true ;
5696: LD_ADDR_EXP 67
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 101 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 101
5711: EQUAL
5712: IFFALSE 5722
// sSold := true ;
5714: LD_ADDR_EXP 32
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 102 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 102
5729: EQUAL
5730: IFFALSE 5740
// sDiff := true ;
5732: LD_ADDR_EXP 33
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 103 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 103
5747: EQUAL
5748: IFFALSE 5758
// sFog := true ;
5750: LD_ADDR_EXP 36
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 104 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 104
5765: EQUAL
5766: IFFALSE 5776
// sReset := true ;
5768: LD_ADDR_EXP 37
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 105 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 105
5783: EQUAL
5784: IFFALSE 5794
// sSun := true ;
5786: LD_ADDR_EXP 38
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 106 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 106
5801: EQUAL
5802: IFFALSE 5812
// sTiger := true ;
5804: LD_ADDR_EXP 34
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 107 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 107
5819: EQUAL
5820: IFFALSE 5830
// sBomb := true ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 108 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 108
5837: EQUAL
5838: IFFALSE 5848
// sWound := true ;
5840: LD_ADDR_EXP 43
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 109 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 109
5855: EQUAL
5856: IFFALSE 5866
// sBetray := true ;
5858: LD_ADDR_EXP 47
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 110 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 110
5873: EQUAL
5874: IFFALSE 5884
// sContamin := true ;
5876: LD_ADDR_EXP 48
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 111 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 111
5891: EQUAL
5892: IFFALSE 5902
// sOil := true ;
5894: LD_ADDR_EXP 50
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 112 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 112
5909: EQUAL
5910: IFFALSE 5920
// sStu := true ;
5912: LD_ADDR_EXP 54
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// if p3 = 113 then
5920: LD_VAR 0 3
5924: PUSH
5925: LD_INT 113
5927: EQUAL
5928: IFFALSE 5938
// sBazooka := true ;
5930: LD_ADDR_EXP 57
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// if p3 = 114 then
5938: LD_VAR 0 3
5942: PUSH
5943: LD_INT 114
5945: EQUAL
5946: IFFALSE 5956
// sMortar := true ;
5948: LD_ADDR_EXP 58
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// if p3 = 115 then
5956: LD_VAR 0 3
5960: PUSH
5961: LD_INT 115
5963: EQUAL
5964: IFFALSE 5974
// sRanger := true ;
5966: LD_ADDR_EXP 68
5970: PUSH
5971: LD_INT 1
5973: ST_TO_ADDR
// if p3 = 116 then
5974: LD_VAR 0 3
5978: PUSH
5979: LD_INT 116
5981: EQUAL
5982: IFFALSE 5992
// sComputer := true ;
5984: LD_ADDR_EXP 69
5988: PUSH
5989: LD_INT 1
5991: ST_TO_ADDR
// if p3 = 117 then
5992: LD_VAR 0 3
5996: PUSH
5997: LD_INT 117
5999: EQUAL
6000: IFFALSE 6010
// s30 := true ;
6002: LD_ADDR_EXP 70
6006: PUSH
6007: LD_INT 1
6009: ST_TO_ADDR
// if p3 = 118 then
6010: LD_VAR 0 3
6014: PUSH
6015: LD_INT 118
6017: EQUAL
6018: IFFALSE 6028
// s60 := true ;
6020: LD_ADDR_EXP 71
6024: PUSH
6025: LD_INT 1
6027: ST_TO_ADDR
// end ; if p2 = 101 then
6028: LD_VAR 0 2
6032: PUSH
6033: LD_INT 101
6035: EQUAL
6036: IFFALSE 6164
// begin case p3 of 1 :
6038: LD_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6058
6051: POP
// hHackUnlimitedResources ; 2 :
6052: CALL 18262 0 0
6056: GO 6164
6058: LD_INT 2
6060: DOUBLE
6061: EQUAL
6062: IFTRUE 6066
6064: GO 6073
6066: POP
// hHackSetLevel10 ; 3 :
6067: CALL 18395 0 0
6071: GO 6164
6073: LD_INT 3
6075: DOUBLE
6076: EQUAL
6077: IFTRUE 6081
6079: GO 6088
6081: POP
// hHackSetLevel10YourUnits ; 4 :
6082: CALL 18480 0 0
6086: GO 6164
6088: LD_INT 4
6090: DOUBLE
6091: EQUAL
6092: IFTRUE 6096
6094: GO 6103
6096: POP
// hHackInvincible ; 5 :
6097: CALL 18928 0 0
6101: GO 6164
6103: LD_INT 5
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6111
6109: GO 6118
6111: POP
// hHackInvisible ; 6 :
6112: CALL 19039 0 0
6116: GO 6164
6118: LD_INT 6
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6133
6126: POP
// hHackChangeYourSide ; 7 :
6127: CALL 19096 0 0
6131: GO 6164
6133: LD_INT 7
6135: DOUBLE
6136: EQUAL
6137: IFTRUE 6141
6139: GO 6148
6141: POP
// hHackChangeUnitSide ; 8 :
6142: CALL 19138 0 0
6146: GO 6164
6148: LD_INT 8
6150: DOUBLE
6151: EQUAL
6152: IFTRUE 6156
6154: GO 6163
6156: POP
// hHackFog ; end ;
6157: CALL 19239 0 0
6161: GO 6164
6163: POP
// end ; end ;
6164: LD_VAR 0 7
6168: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6169: GO 6171
6171: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6172: LD_STRING initStreamRollete();
6174: PPUSH
6175: CALL_OW 559
// InitStreamMode ;
6179: CALL 6191 0 0
// DefineStreamItems ( false ) ;
6183: LD_INT 0
6185: PPUSH
6186: CALL 6655 0 1
// end ;
6190: END
// function InitStreamMode ; begin
6191: LD_INT 0
6193: PPUSH
// streamModeActive := false ;
6194: LD_ADDR_EXP 15
6198: PUSH
6199: LD_INT 0
6201: ST_TO_ADDR
// normalCounter := 36 ;
6202: LD_ADDR_EXP 16
6206: PUSH
6207: LD_INT 36
6209: ST_TO_ADDR
// hardcoreCounter := 18 ;
6210: LD_ADDR_EXP 17
6214: PUSH
6215: LD_INT 18
6217: ST_TO_ADDR
// sRocket := false ;
6218: LD_ADDR_EXP 20
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// sSpeed := false ;
6226: LD_ADDR_EXP 19
6230: PUSH
6231: LD_INT 0
6233: ST_TO_ADDR
// sEngine := false ;
6234: LD_ADDR_EXP 21
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// sSpec := false ;
6242: LD_ADDR_EXP 18
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// sLevel := false ;
6250: LD_ADDR_EXP 22
6254: PUSH
6255: LD_INT 0
6257: ST_TO_ADDR
// sArmoury := false ;
6258: LD_ADDR_EXP 23
6262: PUSH
6263: LD_INT 0
6265: ST_TO_ADDR
// sRadar := false ;
6266: LD_ADDR_EXP 24
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
// sBunker := false ;
6274: LD_ADDR_EXP 25
6278: PUSH
6279: LD_INT 0
6281: ST_TO_ADDR
// sHack := false ;
6282: LD_ADDR_EXP 26
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
// sFire := false ;
6290: LD_ADDR_EXP 27
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// sRefresh := false ;
6298: LD_ADDR_EXP 28
6302: PUSH
6303: LD_INT 0
6305: ST_TO_ADDR
// sExp := false ;
6306: LD_ADDR_EXP 29
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// sDepot := false ;
6314: LD_ADDR_EXP 30
6318: PUSH
6319: LD_INT 0
6321: ST_TO_ADDR
// sFlag := false ;
6322: LD_ADDR_EXP 31
6326: PUSH
6327: LD_INT 0
6329: ST_TO_ADDR
// sKamikadze := false ;
6330: LD_ADDR_EXP 39
6334: PUSH
6335: LD_INT 0
6337: ST_TO_ADDR
// sTroll := false ;
6338: LD_ADDR_EXP 40
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// sSlow := false ;
6346: LD_ADDR_EXP 41
6350: PUSH
6351: LD_INT 0
6353: ST_TO_ADDR
// sLack := false ;
6354: LD_ADDR_EXP 42
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// sTank := false ;
6362: LD_ADDR_EXP 44
6366: PUSH
6367: LD_INT 0
6369: ST_TO_ADDR
// sRemote := false ;
6370: LD_ADDR_EXP 45
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// sPowell := false ;
6378: LD_ADDR_EXP 46
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// sTeleport := false ;
6386: LD_ADDR_EXP 49
6390: PUSH
6391: LD_INT 0
6393: ST_TO_ADDR
// sOilTower := false ;
6394: LD_ADDR_EXP 51
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// sShovel := false ;
6402: LD_ADDR_EXP 52
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// sSheik := false ;
6410: LD_ADDR_EXP 53
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// sEarthquake := false ;
6418: LD_ADDR_EXP 55
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
// sAI := false ;
6426: LD_ADDR_EXP 56
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// sCargo := false ;
6434: LD_ADDR_EXP 59
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// sDLaser := false ;
6442: LD_ADDR_EXP 60
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// sExchange := false ;
6450: LD_ADDR_EXP 61
6454: PUSH
6455: LD_INT 0
6457: ST_TO_ADDR
// sFac := false ;
6458: LD_ADDR_EXP 62
6462: PUSH
6463: LD_INT 0
6465: ST_TO_ADDR
// sPower := false ;
6466: LD_ADDR_EXP 63
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// sRandom := false ;
6474: LD_ADDR_EXP 64
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// sShield := false ;
6482: LD_ADDR_EXP 65
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// sTime := false ;
6490: LD_ADDR_EXP 66
6494: PUSH
6495: LD_INT 0
6497: ST_TO_ADDR
// sTools := false ;
6498: LD_ADDR_EXP 67
6502: PUSH
6503: LD_INT 0
6505: ST_TO_ADDR
// sSold := false ;
6506: LD_ADDR_EXP 32
6510: PUSH
6511: LD_INT 0
6513: ST_TO_ADDR
// sDiff := false ;
6514: LD_ADDR_EXP 33
6518: PUSH
6519: LD_INT 0
6521: ST_TO_ADDR
// sFog := false ;
6522: LD_ADDR_EXP 36
6526: PUSH
6527: LD_INT 0
6529: ST_TO_ADDR
// sReset := false ;
6530: LD_ADDR_EXP 37
6534: PUSH
6535: LD_INT 0
6537: ST_TO_ADDR
// sSun := false ;
6538: LD_ADDR_EXP 38
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// sTiger := false ;
6546: LD_ADDR_EXP 34
6550: PUSH
6551: LD_INT 0
6553: ST_TO_ADDR
// sBomb := false ;
6554: LD_ADDR_EXP 35
6558: PUSH
6559: LD_INT 0
6561: ST_TO_ADDR
// sWound := false ;
6562: LD_ADDR_EXP 43
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// sBetray := false ;
6570: LD_ADDR_EXP 47
6574: PUSH
6575: LD_INT 0
6577: ST_TO_ADDR
// sContamin := false ;
6578: LD_ADDR_EXP 48
6582: PUSH
6583: LD_INT 0
6585: ST_TO_ADDR
// sOil := false ;
6586: LD_ADDR_EXP 50
6590: PUSH
6591: LD_INT 0
6593: ST_TO_ADDR
// sStu := false ;
6594: LD_ADDR_EXP 54
6598: PUSH
6599: LD_INT 0
6601: ST_TO_ADDR
// sBazooka := false ;
6602: LD_ADDR_EXP 57
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// sMortar := false ;
6610: LD_ADDR_EXP 58
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// sRanger := false ;
6618: LD_ADDR_EXP 68
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// sComputer := false ;
6626: LD_ADDR_EXP 69
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// s30 := false ;
6634: LD_ADDR_EXP 70
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// s60 := false ;
6642: LD_ADDR_EXP 71
6646: PUSH
6647: LD_INT 0
6649: ST_TO_ADDR
// end ;
6650: LD_VAR 0 1
6654: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
// result := [ ] ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: EMPTY
6670: ST_TO_ADDR
// if campaign_id = 1 then
6671: LD_OWVAR 69
6675: PUSH
6676: LD_INT 1
6678: EQUAL
6679: IFFALSE 9845
// begin case mission_number of 1 :
6681: LD_OWVAR 70
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6770
6694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6695: LD_ADDR_VAR 0 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 11
6708: PUSH
6709: LD_INT 12
6711: PUSH
6712: LD_INT 15
6714: PUSH
6715: LD_INT 16
6717: PUSH
6718: LD_INT 22
6720: PUSH
6721: LD_INT 23
6723: PUSH
6724: LD_INT 26
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 101
6740: PUSH
6741: LD_INT 102
6743: PUSH
6744: LD_INT 106
6746: PUSH
6747: LD_INT 116
6749: PUSH
6750: LD_INT 117
6752: PUSH
6753: LD_INT 118
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 9843
6770: LD_INT 2
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6862
6778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 12
6795: PUSH
6796: LD_INT 15
6798: PUSH
6799: LD_INT 16
6801: PUSH
6802: LD_INT 22
6804: PUSH
6805: LD_INT 23
6807: PUSH
6808: LD_INT 26
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 101
6824: PUSH
6825: LD_INT 102
6827: PUSH
6828: LD_INT 105
6830: PUSH
6831: LD_INT 106
6833: PUSH
6834: LD_INT 108
6836: PUSH
6837: LD_INT 116
6839: PUSH
6840: LD_INT 117
6842: PUSH
6843: LD_INT 118
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: ST_TO_ADDR
6860: GO 9843
6862: LD_INT 3
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6958
6870: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PUSH
6879: LD_INT 4
6881: PUSH
6882: LD_INT 5
6884: PUSH
6885: LD_INT 11
6887: PUSH
6888: LD_INT 12
6890: PUSH
6891: LD_INT 15
6893: PUSH
6894: LD_INT 16
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 26
6902: PUSH
6903: LD_INT 36
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 101
6920: PUSH
6921: LD_INT 102
6923: PUSH
6924: LD_INT 105
6926: PUSH
6927: LD_INT 106
6929: PUSH
6930: LD_INT 108
6932: PUSH
6933: LD_INT 116
6935: PUSH
6936: LD_INT 117
6938: PUSH
6939: LD_INT 118
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 9843
6958: LD_INT 4
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 7062
6966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6967: LD_ADDR_VAR 0 2
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: LD_INT 11
6986: PUSH
6987: LD_INT 12
6989: PUSH
6990: LD_INT 15
6992: PUSH
6993: LD_INT 16
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 23
7001: PUSH
7002: LD_INT 26
7004: PUSH
7005: LD_INT 36
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 101
7024: PUSH
7025: LD_INT 102
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 116
7039: PUSH
7040: LD_INT 117
7042: PUSH
7043: LD_INT 118
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: ST_TO_ADDR
7060: GO 9843
7062: LD_INT 5
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7182
7070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_INT 2
7078: PUSH
7079: LD_INT 4
7081: PUSH
7082: LD_INT 5
7084: PUSH
7085: LD_INT 6
7087: PUSH
7088: LD_INT 8
7090: PUSH
7091: LD_INT 11
7093: PUSH
7094: LD_INT 12
7096: PUSH
7097: LD_INT 15
7099: PUSH
7100: LD_INT 16
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 26
7114: PUSH
7115: LD_INT 36
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 101
7136: PUSH
7137: LD_INT 102
7139: PUSH
7140: LD_INT 105
7142: PUSH
7143: LD_INT 106
7145: PUSH
7146: LD_INT 108
7148: PUSH
7149: LD_INT 109
7151: PUSH
7152: LD_INT 112
7154: PUSH
7155: LD_INT 116
7157: PUSH
7158: LD_INT 117
7160: PUSH
7161: LD_INT 118
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: ST_TO_ADDR
7180: GO 9843
7182: LD_INT 6
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7322
7190: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 4
7201: PUSH
7202: LD_INT 5
7204: PUSH
7205: LD_INT 6
7207: PUSH
7208: LD_INT 8
7210: PUSH
7211: LD_INT 11
7213: PUSH
7214: LD_INT 12
7216: PUSH
7217: LD_INT 15
7219: PUSH
7220: LD_INT 16
7222: PUSH
7223: LD_INT 20
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 30
7243: PUSH
7244: LD_INT 31
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 101
7276: PUSH
7277: LD_INT 102
7279: PUSH
7280: LD_INT 105
7282: PUSH
7283: LD_INT 106
7285: PUSH
7286: LD_INT 108
7288: PUSH
7289: LD_INT 109
7291: PUSH
7292: LD_INT 112
7294: PUSH
7295: LD_INT 116
7297: PUSH
7298: LD_INT 117
7300: PUSH
7301: LD_INT 118
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: ST_TO_ADDR
7320: GO 9843
7322: LD_INT 7
7324: DOUBLE
7325: EQUAL
7326: IFTRUE 7330
7328: GO 7442
7330: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7331: LD_ADDR_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: LD_INT 7
7347: PUSH
7348: LD_INT 11
7350: PUSH
7351: LD_INT 12
7353: PUSH
7354: LD_INT 15
7356: PUSH
7357: LD_INT 16
7359: PUSH
7360: LD_INT 20
7362: PUSH
7363: LD_INT 21
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 23
7371: PUSH
7372: LD_INT 25
7374: PUSH
7375: LD_INT 26
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 101
7396: PUSH
7397: LD_INT 102
7399: PUSH
7400: LD_INT 103
7402: PUSH
7403: LD_INT 105
7405: PUSH
7406: LD_INT 106
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 112
7414: PUSH
7415: LD_INT 116
7417: PUSH
7418: LD_INT 117
7420: PUSH
7421: LD_INT 118
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: ST_TO_ADDR
7440: GO 9843
7442: LD_INT 8
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7590
7450: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: LD_INT 2
7458: PUSH
7459: LD_INT 4
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: LD_INT 6
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: LD_INT 8
7473: PUSH
7474: LD_INT 11
7476: PUSH
7477: LD_INT 12
7479: PUSH
7480: LD_INT 15
7482: PUSH
7483: LD_INT 16
7485: PUSH
7486: LD_INT 20
7488: PUSH
7489: LD_INT 21
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 23
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 26
7503: PUSH
7504: LD_INT 30
7506: PUSH
7507: LD_INT 31
7509: PUSH
7510: LD_INT 32
7512: PUSH
7513: LD_INT 36
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 101
7540: PUSH
7541: LD_INT 102
7543: PUSH
7544: LD_INT 103
7546: PUSH
7547: LD_INT 105
7549: PUSH
7550: LD_INT 106
7552: PUSH
7553: LD_INT 108
7555: PUSH
7556: LD_INT 109
7558: PUSH
7559: LD_INT 112
7561: PUSH
7562: LD_INT 116
7564: PUSH
7565: LD_INT 117
7567: PUSH
7568: LD_INT 118
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: ST_TO_ADDR
7588: GO 9843
7590: LD_INT 9
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7746
7598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 4
7609: PUSH
7610: LD_INT 5
7612: PUSH
7613: LD_INT 6
7615: PUSH
7616: LD_INT 7
7618: PUSH
7619: LD_INT 8
7621: PUSH
7622: LD_INT 11
7624: PUSH
7625: LD_INT 12
7627: PUSH
7628: LD_INT 15
7630: PUSH
7631: LD_INT 16
7633: PUSH
7634: LD_INT 20
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 22
7642: PUSH
7643: LD_INT 23
7645: PUSH
7646: LD_INT 25
7648: PUSH
7649: LD_INT 26
7651: PUSH
7652: LD_INT 28
7654: PUSH
7655: LD_INT 30
7657: PUSH
7658: LD_INT 31
7660: PUSH
7661: LD_INT 32
7663: PUSH
7664: LD_INT 36
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 101
7692: PUSH
7693: LD_INT 102
7695: PUSH
7696: LD_INT 103
7698: PUSH
7699: LD_INT 105
7701: PUSH
7702: LD_INT 106
7704: PUSH
7705: LD_INT 108
7707: PUSH
7708: LD_INT 109
7710: PUSH
7711: LD_INT 112
7713: PUSH
7714: LD_INT 114
7716: PUSH
7717: LD_INT 116
7719: PUSH
7720: LD_INT 117
7722: PUSH
7723: LD_INT 118
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: ST_TO_ADDR
7744: GO 9843
7746: LD_INT 10
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7950
7754: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 4
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: LD_INT 6
7771: PUSH
7772: LD_INT 7
7774: PUSH
7775: LD_INT 8
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: LD_INT 10
7783: PUSH
7784: LD_INT 11
7786: PUSH
7787: LD_INT 12
7789: PUSH
7790: LD_INT 13
7792: PUSH
7793: LD_INT 14
7795: PUSH
7796: LD_INT 15
7798: PUSH
7799: LD_INT 16
7801: PUSH
7802: LD_INT 17
7804: PUSH
7805: LD_INT 18
7807: PUSH
7808: LD_INT 19
7810: PUSH
7811: LD_INT 20
7813: PUSH
7814: LD_INT 21
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_INT 23
7822: PUSH
7823: LD_INT 24
7825: PUSH
7826: LD_INT 25
7828: PUSH
7829: LD_INT 26
7831: PUSH
7832: LD_INT 28
7834: PUSH
7835: LD_INT 30
7837: PUSH
7838: LD_INT 31
7840: PUSH
7841: LD_INT 32
7843: PUSH
7844: LD_INT 36
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 101
7880: PUSH
7881: LD_INT 102
7883: PUSH
7884: LD_INT 103
7886: PUSH
7887: LD_INT 104
7889: PUSH
7890: LD_INT 105
7892: PUSH
7893: LD_INT 106
7895: PUSH
7896: LD_INT 107
7898: PUSH
7899: LD_INT 108
7901: PUSH
7902: LD_INT 109
7904: PUSH
7905: LD_INT 110
7907: PUSH
7908: LD_INT 111
7910: PUSH
7911: LD_INT 112
7913: PUSH
7914: LD_INT 114
7916: PUSH
7917: LD_INT 116
7919: PUSH
7920: LD_INT 117
7922: PUSH
7923: LD_INT 118
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 9843
7950: LD_INT 11
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 8162
7958: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: LD_INT 6
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 13
7999: PUSH
8000: LD_INT 14
8002: PUSH
8003: LD_INT 15
8005: PUSH
8006: LD_INT 16
8008: PUSH
8009: LD_INT 17
8011: PUSH
8012: LD_INT 18
8014: PUSH
8015: LD_INT 19
8017: PUSH
8018: LD_INT 20
8020: PUSH
8021: LD_INT 21
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_INT 23
8029: PUSH
8030: LD_INT 24
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 26
8038: PUSH
8039: LD_INT 28
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: LD_INT 32
8050: PUSH
8051: LD_INT 34
8053: PUSH
8054: LD_INT 36
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 101
8092: PUSH
8093: LD_INT 102
8095: PUSH
8096: LD_INT 103
8098: PUSH
8099: LD_INT 104
8101: PUSH
8102: LD_INT 105
8104: PUSH
8105: LD_INT 106
8107: PUSH
8108: LD_INT 107
8110: PUSH
8111: LD_INT 108
8113: PUSH
8114: LD_INT 109
8116: PUSH
8117: LD_INT 110
8119: PUSH
8120: LD_INT 111
8122: PUSH
8123: LD_INT 112
8125: PUSH
8126: LD_INT 114
8128: PUSH
8129: LD_INT 116
8131: PUSH
8132: LD_INT 117
8134: PUSH
8135: LD_INT 118
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: ST_TO_ADDR
8160: GO 9843
8162: LD_INT 12
8164: DOUBLE
8165: EQUAL
8166: IFTRUE 8170
8168: GO 8390
8170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: LD_INT 3
8184: PUSH
8185: LD_INT 4
8187: PUSH
8188: LD_INT 5
8190: PUSH
8191: LD_INT 6
8193: PUSH
8194: LD_INT 7
8196: PUSH
8197: LD_INT 8
8199: PUSH
8200: LD_INT 9
8202: PUSH
8203: LD_INT 10
8205: PUSH
8206: LD_INT 11
8208: PUSH
8209: LD_INT 12
8211: PUSH
8212: LD_INT 13
8214: PUSH
8215: LD_INT 14
8217: PUSH
8218: LD_INT 15
8220: PUSH
8221: LD_INT 16
8223: PUSH
8224: LD_INT 17
8226: PUSH
8227: LD_INT 18
8229: PUSH
8230: LD_INT 19
8232: PUSH
8233: LD_INT 20
8235: PUSH
8236: LD_INT 21
8238: PUSH
8239: LD_INT 22
8241: PUSH
8242: LD_INT 23
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: LD_INT 25
8250: PUSH
8251: LD_INT 26
8253: PUSH
8254: LD_INT 27
8256: PUSH
8257: LD_INT 28
8259: PUSH
8260: LD_INT 30
8262: PUSH
8263: LD_INT 31
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 33
8271: PUSH
8272: LD_INT 34
8274: PUSH
8275: LD_INT 36
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 101
8316: PUSH
8317: LD_INT 102
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 104
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 107
8334: PUSH
8335: LD_INT 108
8337: PUSH
8338: LD_INT 109
8340: PUSH
8341: LD_INT 110
8343: PUSH
8344: LD_INT 111
8346: PUSH
8347: LD_INT 112
8349: PUSH
8350: LD_INT 113
8352: PUSH
8353: LD_INT 114
8355: PUSH
8356: LD_INT 116
8358: PUSH
8359: LD_INT 117
8361: PUSH
8362: LD_INT 118
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: ST_TO_ADDR
8388: GO 9843
8390: LD_INT 13
8392: DOUBLE
8393: EQUAL
8394: IFTRUE 8398
8396: GO 8606
8398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8399: LD_ADDR_VAR 0 2
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: LD_INT 4
8415: PUSH
8416: LD_INT 5
8418: PUSH
8419: LD_INT 8
8421: PUSH
8422: LD_INT 9
8424: PUSH
8425: LD_INT 10
8427: PUSH
8428: LD_INT 11
8430: PUSH
8431: LD_INT 12
8433: PUSH
8434: LD_INT 14
8436: PUSH
8437: LD_INT 15
8439: PUSH
8440: LD_INT 16
8442: PUSH
8443: LD_INT 17
8445: PUSH
8446: LD_INT 18
8448: PUSH
8449: LD_INT 19
8451: PUSH
8452: LD_INT 20
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 22
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 24
8466: PUSH
8467: LD_INT 25
8469: PUSH
8470: LD_INT 26
8472: PUSH
8473: LD_INT 27
8475: PUSH
8476: LD_INT 28
8478: PUSH
8479: LD_INT 30
8481: PUSH
8482: LD_INT 31
8484: PUSH
8485: LD_INT 32
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 34
8493: PUSH
8494: LD_INT 36
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 101
8532: PUSH
8533: LD_INT 102
8535: PUSH
8536: LD_INT 103
8538: PUSH
8539: LD_INT 104
8541: PUSH
8542: LD_INT 105
8544: PUSH
8545: LD_INT 106
8547: PUSH
8548: LD_INT 107
8550: PUSH
8551: LD_INT 108
8553: PUSH
8554: LD_INT 109
8556: PUSH
8557: LD_INT 110
8559: PUSH
8560: LD_INT 111
8562: PUSH
8563: LD_INT 112
8565: PUSH
8566: LD_INT 113
8568: PUSH
8569: LD_INT 114
8571: PUSH
8572: LD_INT 116
8574: PUSH
8575: LD_INT 117
8577: PUSH
8578: LD_INT 118
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: ST_TO_ADDR
8604: GO 9843
8606: LD_INT 14
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8838
8614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: LD_INT 6
8637: PUSH
8638: LD_INT 7
8640: PUSH
8641: LD_INT 8
8643: PUSH
8644: LD_INT 9
8646: PUSH
8647: LD_INT 10
8649: PUSH
8650: LD_INT 11
8652: PUSH
8653: LD_INT 12
8655: PUSH
8656: LD_INT 13
8658: PUSH
8659: LD_INT 14
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 17
8670: PUSH
8671: LD_INT 18
8673: PUSH
8674: LD_INT 19
8676: PUSH
8677: LD_INT 20
8679: PUSH
8680: LD_INT 21
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_INT 23
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 27
8700: PUSH
8701: LD_INT 28
8703: PUSH
8704: LD_INT 29
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 31
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: LD_INT 33
8718: PUSH
8719: LD_INT 34
8721: PUSH
8722: LD_INT 36
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 101
8764: PUSH
8765: LD_INT 102
8767: PUSH
8768: LD_INT 103
8770: PUSH
8771: LD_INT 104
8773: PUSH
8774: LD_INT 105
8776: PUSH
8777: LD_INT 106
8779: PUSH
8780: LD_INT 107
8782: PUSH
8783: LD_INT 108
8785: PUSH
8786: LD_INT 109
8788: PUSH
8789: LD_INT 110
8791: PUSH
8792: LD_INT 111
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: LD_INT 113
8800: PUSH
8801: LD_INT 114
8803: PUSH
8804: LD_INT 116
8806: PUSH
8807: LD_INT 117
8809: PUSH
8810: LD_INT 118
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 9843
8838: LD_INT 15
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 9070
8846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: LD_INT 6
8869: PUSH
8870: LD_INT 7
8872: PUSH
8873: LD_INT 8
8875: PUSH
8876: LD_INT 9
8878: PUSH
8879: LD_INT 10
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 13
8890: PUSH
8891: LD_INT 14
8893: PUSH
8894: LD_INT 15
8896: PUSH
8897: LD_INT 16
8899: PUSH
8900: LD_INT 17
8902: PUSH
8903: LD_INT 18
8905: PUSH
8906: LD_INT 19
8908: PUSH
8909: LD_INT 20
8911: PUSH
8912: LD_INT 21
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_INT 23
8920: PUSH
8921: LD_INT 24
8923: PUSH
8924: LD_INT 25
8926: PUSH
8927: LD_INT 26
8929: PUSH
8930: LD_INT 27
8932: PUSH
8933: LD_INT 28
8935: PUSH
8936: LD_INT 29
8938: PUSH
8939: LD_INT 30
8941: PUSH
8942: LD_INT 31
8944: PUSH
8945: LD_INT 32
8947: PUSH
8948: LD_INT 33
8950: PUSH
8951: LD_INT 34
8953: PUSH
8954: LD_INT 36
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 101
8996: PUSH
8997: LD_INT 102
8999: PUSH
9000: LD_INT 103
9002: PUSH
9003: LD_INT 104
9005: PUSH
9006: LD_INT 105
9008: PUSH
9009: LD_INT 106
9011: PUSH
9012: LD_INT 107
9014: PUSH
9015: LD_INT 108
9017: PUSH
9018: LD_INT 109
9020: PUSH
9021: LD_INT 110
9023: PUSH
9024: LD_INT 111
9026: PUSH
9027: LD_INT 112
9029: PUSH
9030: LD_INT 113
9032: PUSH
9033: LD_INT 114
9035: PUSH
9036: LD_INT 116
9038: PUSH
9039: LD_INT 117
9041: PUSH
9042: LD_INT 118
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: ST_TO_ADDR
9068: GO 9843
9070: LD_INT 16
9072: DOUBLE
9073: EQUAL
9074: IFTRUE 9078
9076: GO 9214
9078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_INT 2
9086: PUSH
9087: LD_INT 4
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 11
9098: PUSH
9099: LD_INT 12
9101: PUSH
9102: LD_INT 15
9104: PUSH
9105: LD_INT 16
9107: PUSH
9108: LD_INT 20
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 25
9122: PUSH
9123: LD_INT 26
9125: PUSH
9126: LD_INT 30
9128: PUSH
9129: LD_INT 31
9131: PUSH
9132: LD_INT 32
9134: PUSH
9135: LD_INT 33
9137: PUSH
9138: LD_INT 34
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 101
9164: PUSH
9165: LD_INT 102
9167: PUSH
9168: LD_INT 103
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 108
9176: PUSH
9177: LD_INT 112
9179: PUSH
9180: LD_INT 113
9182: PUSH
9183: LD_INT 114
9185: PUSH
9186: LD_INT 116
9188: PUSH
9189: LD_INT 117
9191: PUSH
9192: LD_INT 118
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: ST_TO_ADDR
9212: GO 9843
9214: LD_INT 17
9216: DOUBLE
9217: EQUAL
9218: IFTRUE 9222
9220: GO 9446
9222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9223: LD_ADDR_VAR 0 2
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: LD_INT 3
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 6
9245: PUSH
9246: LD_INT 7
9248: PUSH
9249: LD_INT 8
9251: PUSH
9252: LD_INT 9
9254: PUSH
9255: LD_INT 10
9257: PUSH
9258: LD_INT 11
9260: PUSH
9261: LD_INT 12
9263: PUSH
9264: LD_INT 13
9266: PUSH
9267: LD_INT 14
9269: PUSH
9270: LD_INT 15
9272: PUSH
9273: LD_INT 16
9275: PUSH
9276: LD_INT 17
9278: PUSH
9279: LD_INT 18
9281: PUSH
9282: LD_INT 19
9284: PUSH
9285: LD_INT 20
9287: PUSH
9288: LD_INT 21
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 23
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 26
9305: PUSH
9306: LD_INT 27
9308: PUSH
9309: LD_INT 28
9311: PUSH
9312: LD_INT 29
9314: PUSH
9315: LD_INT 30
9317: PUSH
9318: LD_INT 31
9320: PUSH
9321: LD_INT 32
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 34
9329: PUSH
9330: LD_INT 36
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 101
9372: PUSH
9373: LD_INT 102
9375: PUSH
9376: LD_INT 103
9378: PUSH
9379: LD_INT 104
9381: PUSH
9382: LD_INT 105
9384: PUSH
9385: LD_INT 106
9387: PUSH
9388: LD_INT 107
9390: PUSH
9391: LD_INT 108
9393: PUSH
9394: LD_INT 109
9396: PUSH
9397: LD_INT 110
9399: PUSH
9400: LD_INT 111
9402: PUSH
9403: LD_INT 112
9405: PUSH
9406: LD_INT 113
9408: PUSH
9409: LD_INT 114
9411: PUSH
9412: LD_INT 116
9414: PUSH
9415: LD_INT 117
9417: PUSH
9418: LD_INT 118
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: ST_TO_ADDR
9444: GO 9843
9446: LD_INT 18
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9602
9454: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9455: LD_ADDR_VAR 0 2
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 4
9465: PUSH
9466: LD_INT 5
9468: PUSH
9469: LD_INT 7
9471: PUSH
9472: LD_INT 11
9474: PUSH
9475: LD_INT 12
9477: PUSH
9478: LD_INT 15
9480: PUSH
9481: LD_INT 16
9483: PUSH
9484: LD_INT 20
9486: PUSH
9487: LD_INT 21
9489: PUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 23
9495: PUSH
9496: LD_INT 25
9498: PUSH
9499: LD_INT 26
9501: PUSH
9502: LD_INT 30
9504: PUSH
9505: LD_INT 31
9507: PUSH
9508: LD_INT 32
9510: PUSH
9511: LD_INT 33
9513: PUSH
9514: LD_INT 34
9516: PUSH
9517: LD_INT 35
9519: PUSH
9520: LD_INT 36
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 101
9548: PUSH
9549: LD_INT 102
9551: PUSH
9552: LD_INT 103
9554: PUSH
9555: LD_INT 106
9557: PUSH
9558: LD_INT 108
9560: PUSH
9561: LD_INT 112
9563: PUSH
9564: LD_INT 113
9566: PUSH
9567: LD_INT 114
9569: PUSH
9570: LD_INT 115
9572: PUSH
9573: LD_INT 116
9575: PUSH
9576: LD_INT 117
9578: PUSH
9579: LD_INT 118
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: ST_TO_ADDR
9600: GO 9843
9602: LD_INT 19
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9842
9610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9611: LD_ADDR_VAR 0 2
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 6
9633: PUSH
9634: LD_INT 7
9636: PUSH
9637: LD_INT 8
9639: PUSH
9640: LD_INT 9
9642: PUSH
9643: LD_INT 10
9645: PUSH
9646: LD_INT 11
9648: PUSH
9649: LD_INT 12
9651: PUSH
9652: LD_INT 13
9654: PUSH
9655: LD_INT 14
9657: PUSH
9658: LD_INT 15
9660: PUSH
9661: LD_INT 16
9663: PUSH
9664: LD_INT 17
9666: PUSH
9667: LD_INT 18
9669: PUSH
9670: LD_INT 19
9672: PUSH
9673: LD_INT 20
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 22
9681: PUSH
9682: LD_INT 23
9684: PUSH
9685: LD_INT 24
9687: PUSH
9688: LD_INT 25
9690: PUSH
9691: LD_INT 26
9693: PUSH
9694: LD_INT 27
9696: PUSH
9697: LD_INT 28
9699: PUSH
9700: LD_INT 29
9702: PUSH
9703: LD_INT 30
9705: PUSH
9706: LD_INT 31
9708: PUSH
9709: LD_INT 32
9711: PUSH
9712: LD_INT 33
9714: PUSH
9715: LD_INT 34
9717: PUSH
9718: LD_INT 35
9720: PUSH
9721: LD_INT 36
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 101
9764: PUSH
9765: LD_INT 102
9767: PUSH
9768: LD_INT 103
9770: PUSH
9771: LD_INT 104
9773: PUSH
9774: LD_INT 105
9776: PUSH
9777: LD_INT 106
9779: PUSH
9780: LD_INT 107
9782: PUSH
9783: LD_INT 108
9785: PUSH
9786: LD_INT 109
9788: PUSH
9789: LD_INT 110
9791: PUSH
9792: LD_INT 111
9794: PUSH
9795: LD_INT 112
9797: PUSH
9798: LD_INT 113
9800: PUSH
9801: LD_INT 114
9803: PUSH
9804: LD_INT 115
9806: PUSH
9807: LD_INT 116
9809: PUSH
9810: LD_INT 117
9812: PUSH
9813: LD_INT 118
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: ST_TO_ADDR
9840: GO 9843
9842: POP
// end else
9843: GO 10074
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9845: LD_ADDR_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 4
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: LD_INT 6
9867: PUSH
9868: LD_INT 7
9870: PUSH
9871: LD_INT 8
9873: PUSH
9874: LD_INT 9
9876: PUSH
9877: LD_INT 10
9879: PUSH
9880: LD_INT 11
9882: PUSH
9883: LD_INT 12
9885: PUSH
9886: LD_INT 13
9888: PUSH
9889: LD_INT 14
9891: PUSH
9892: LD_INT 15
9894: PUSH
9895: LD_INT 16
9897: PUSH
9898: LD_INT 17
9900: PUSH
9901: LD_INT 18
9903: PUSH
9904: LD_INT 19
9906: PUSH
9907: LD_INT 20
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 23
9918: PUSH
9919: LD_INT 24
9921: PUSH
9922: LD_INT 25
9924: PUSH
9925: LD_INT 26
9927: PUSH
9928: LD_INT 27
9930: PUSH
9931: LD_INT 28
9933: PUSH
9934: LD_INT 29
9936: PUSH
9937: LD_INT 30
9939: PUSH
9940: LD_INT 31
9942: PUSH
9943: LD_INT 32
9945: PUSH
9946: LD_INT 33
9948: PUSH
9949: LD_INT 34
9951: PUSH
9952: LD_INT 35
9954: PUSH
9955: LD_INT 36
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 115
10040: PUSH
10041: LD_INT 116
10043: PUSH
10044: LD_INT 117
10046: PUSH
10047: LD_INT 118
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if result then
10074: LD_VAR 0 2
10078: IFFALSE 10864
// begin normal :=  ;
10080: LD_ADDR_VAR 0 5
10084: PUSH
10085: LD_STRING 
10087: ST_TO_ADDR
// hardcore :=  ;
10088: LD_ADDR_VAR 0 6
10092: PUSH
10093: LD_STRING 
10095: ST_TO_ADDR
// active :=  ;
10096: LD_ADDR_VAR 0 7
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// for i = 1 to normalCounter do
10104: LD_ADDR_VAR 0 8
10108: PUSH
10109: DOUBLE
10110: LD_INT 1
10112: DEC
10113: ST_TO_ADDR
10114: LD_EXP 16
10118: PUSH
10119: FOR_TO
10120: IFFALSE 10221
// begin tmp := 0 ;
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: LD_STRING 0
10129: ST_TO_ADDR
// if result [ 1 ] then
10130: LD_VAR 0 2
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: IFFALSE 10203
// if result [ 1 ] [ 1 ] = i then
10140: LD_VAR 0 2
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PUSH
10153: LD_VAR 0 8
10157: EQUAL
10158: IFFALSE 10203
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10160: LD_ADDR_VAR 0 2
10164: PUSH
10165: LD_VAR 0 2
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: LD_VAR 0 2
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 3
10189: PPUSH
10190: CALL_OW 1
10194: ST_TO_ADDR
// tmp := 1 ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_STRING 1
10202: ST_TO_ADDR
// end ; normal := normal & tmp ;
10203: LD_ADDR_VAR 0 5
10207: PUSH
10208: LD_VAR 0 5
10212: PUSH
10213: LD_VAR 0 3
10217: STR
10218: ST_TO_ADDR
// end ;
10219: GO 10119
10221: POP
10222: POP
// for i = 1 to hardcoreCounter do
10223: LD_ADDR_VAR 0 8
10227: PUSH
10228: DOUBLE
10229: LD_INT 1
10231: DEC
10232: ST_TO_ADDR
10233: LD_EXP 17
10237: PUSH
10238: FOR_TO
10239: IFFALSE 10344
// begin tmp := 0 ;
10241: LD_ADDR_VAR 0 3
10245: PUSH
10246: LD_STRING 0
10248: ST_TO_ADDR
// if result [ 2 ] then
10249: LD_VAR 0 2
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: IFFALSE 10326
// if result [ 2 ] [ 1 ] = 100 + i then
10259: LD_VAR 0 2
10263: PUSH
10264: LD_INT 2
10266: ARRAY
10267: PUSH
10268: LD_INT 1
10270: ARRAY
10271: PUSH
10272: LD_INT 100
10274: PUSH
10275: LD_VAR 0 8
10279: PLUS
10280: EQUAL
10281: IFFALSE 10326
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: LD_VAR 0 2
10292: PPUSH
10293: LD_INT 2
10295: PPUSH
10296: LD_VAR 0 2
10300: PUSH
10301: LD_INT 2
10303: ARRAY
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 3
10312: PPUSH
10313: CALL_OW 1
10317: ST_TO_ADDR
// tmp := 1 ;
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_STRING 1
10325: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10326: LD_ADDR_VAR 0 6
10330: PUSH
10331: LD_VAR 0 6
10335: PUSH
10336: LD_VAR 0 3
10340: STR
10341: ST_TO_ADDR
// end ;
10342: GO 10238
10344: POP
10345: POP
// if isGameLoad then
10346: LD_VAR 0 1
10350: IFFALSE 10825
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10352: LD_ADDR_VAR 0 4
10356: PUSH
10357: LD_EXP 20
10361: PUSH
10362: LD_EXP 19
10366: PUSH
10367: LD_EXP 21
10371: PUSH
10372: LD_EXP 18
10376: PUSH
10377: LD_EXP 22
10381: PUSH
10382: LD_EXP 23
10386: PUSH
10387: LD_EXP 24
10391: PUSH
10392: LD_EXP 25
10396: PUSH
10397: LD_EXP 26
10401: PUSH
10402: LD_EXP 27
10406: PUSH
10407: LD_EXP 28
10411: PUSH
10412: LD_EXP 29
10416: PUSH
10417: LD_EXP 30
10421: PUSH
10422: LD_EXP 31
10426: PUSH
10427: LD_EXP 39
10431: PUSH
10432: LD_EXP 40
10436: PUSH
10437: LD_EXP 41
10441: PUSH
10442: LD_EXP 42
10446: PUSH
10447: LD_EXP 44
10451: PUSH
10452: LD_EXP 45
10456: PUSH
10457: LD_EXP 46
10461: PUSH
10462: LD_EXP 49
10466: PUSH
10467: LD_EXP 51
10471: PUSH
10472: LD_EXP 52
10476: PUSH
10477: LD_EXP 53
10481: PUSH
10482: LD_EXP 55
10486: PUSH
10487: LD_EXP 56
10491: PUSH
10492: LD_EXP 59
10496: PUSH
10497: LD_EXP 60
10501: PUSH
10502: LD_EXP 61
10506: PUSH
10507: LD_EXP 62
10511: PUSH
10512: LD_EXP 63
10516: PUSH
10517: LD_EXP 64
10521: PUSH
10522: LD_EXP 65
10526: PUSH
10527: LD_EXP 66
10531: PUSH
10532: LD_EXP 67
10536: PUSH
10537: LD_EXP 32
10541: PUSH
10542: LD_EXP 33
10546: PUSH
10547: LD_EXP 36
10551: PUSH
10552: LD_EXP 37
10556: PUSH
10557: LD_EXP 38
10561: PUSH
10562: LD_EXP 34
10566: PUSH
10567: LD_EXP 35
10571: PUSH
10572: LD_EXP 43
10576: PUSH
10577: LD_EXP 47
10581: PUSH
10582: LD_EXP 48
10586: PUSH
10587: LD_EXP 50
10591: PUSH
10592: LD_EXP 54
10596: PUSH
10597: LD_EXP 57
10601: PUSH
10602: LD_EXP 58
10606: PUSH
10607: LD_EXP 68
10611: PUSH
10612: LD_EXP 69
10616: PUSH
10617: LD_EXP 70
10621: PUSH
10622: LD_EXP 71
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
// tmp :=  ;
10683: LD_ADDR_VAR 0 3
10687: PUSH
10688: LD_STRING 
10690: ST_TO_ADDR
// for i = 1 to normalCounter do
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: DOUBLE
10697: LD_INT 1
10699: DEC
10700: ST_TO_ADDR
10701: LD_EXP 16
10705: PUSH
10706: FOR_TO
10707: IFFALSE 10743
// begin if flags [ i ] then
10709: LD_VAR 0 4
10713: PUSH
10714: LD_VAR 0 8
10718: ARRAY
10719: IFFALSE 10741
// tmp := tmp & i & ; ;
10721: LD_ADDR_VAR 0 3
10725: PUSH
10726: LD_VAR 0 3
10730: PUSH
10731: LD_VAR 0 8
10735: STR
10736: PUSH
10737: LD_STRING ;
10739: STR
10740: ST_TO_ADDR
// end ;
10741: GO 10706
10743: POP
10744: POP
// for i = 1 to hardcoreCounter do
10745: LD_ADDR_VAR 0 8
10749: PUSH
10750: DOUBLE
10751: LD_INT 1
10753: DEC
10754: ST_TO_ADDR
10755: LD_EXP 17
10759: PUSH
10760: FOR_TO
10761: IFFALSE 10807
// begin if flags [ normalCounter + i ] then
10763: LD_VAR 0 4
10767: PUSH
10768: LD_EXP 16
10772: PUSH
10773: LD_VAR 0 8
10777: PLUS
10778: ARRAY
10779: IFFALSE 10805
// tmp := tmp & ( 100 + i ) & ; ;
10781: LD_ADDR_VAR 0 3
10785: PUSH
10786: LD_VAR 0 3
10790: PUSH
10791: LD_INT 100
10793: PUSH
10794: LD_VAR 0 8
10798: PLUS
10799: STR
10800: PUSH
10801: LD_STRING ;
10803: STR
10804: ST_TO_ADDR
// end ;
10805: GO 10760
10807: POP
10808: POP
// if tmp then
10809: LD_VAR 0 3
10813: IFFALSE 10825
// active := tmp ;
10815: LD_ADDR_VAR 0 7
10819: PUSH
10820: LD_VAR 0 3
10824: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10825: LD_STRING getStreamItemsFromMission("
10827: PUSH
10828: LD_VAR 0 5
10832: STR
10833: PUSH
10834: LD_STRING ","
10836: STR
10837: PUSH
10838: LD_VAR 0 6
10842: STR
10843: PUSH
10844: LD_STRING ","
10846: STR
10847: PUSH
10848: LD_VAR 0 7
10852: STR
10853: PUSH
10854: LD_STRING ")
10856: STR
10857: PPUSH
10858: CALL_OW 559
// end else
10862: GO 10871
// ToLua ( getStreamItemsFromMission("","","") ) ;
10864: LD_STRING getStreamItemsFromMission("","","")
10866: PPUSH
10867: CALL_OW 559
// end ;
10871: LD_VAR 0 2
10875: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10876: LD_EXP 15
10880: PUSH
10881: LD_EXP 20
10885: AND
10886: IFFALSE 11010
10888: GO 10890
10890: DISABLE
10891: LD_INT 0
10893: PPUSH
10894: PPUSH
// begin enable ;
10895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_INT 22
10903: PUSH
10904: LD_OWVAR 2
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 2
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 7
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 45
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 34
10938: PUSH
10939: LD_INT 28
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 34
10948: PUSH
10949: LD_INT 47
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PPUSH
10967: CALL_OW 69
10971: ST_TO_ADDR
// if not tmp then
10972: LD_VAR 0 2
10976: NOT
10977: IFFALSE 10981
// exit ;
10979: GO 11010
// for i in tmp do
10981: LD_ADDR_VAR 0 1
10985: PUSH
10986: LD_VAR 0 2
10990: PUSH
10991: FOR_IN
10992: IFFALSE 11008
// begin SetLives ( i , 0 ) ;
10994: LD_VAR 0 1
10998: PPUSH
10999: LD_INT 0
11001: PPUSH
11002: CALL_OW 234
// end ;
11006: GO 10991
11008: POP
11009: POP
// end ;
11010: PPOPN 2
11012: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11013: LD_EXP 15
11017: PUSH
11018: LD_EXP 21
11022: AND
11023: IFFALSE 11107
11025: GO 11027
11027: DISABLE
11028: LD_INT 0
11030: PPUSH
11031: PPUSH
// begin enable ;
11032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11033: LD_ADDR_VAR 0 2
11037: PUSH
11038: LD_INT 22
11040: PUSH
11041: LD_OWVAR 2
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 32
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: ST_TO_ADDR
// if not tmp then
11069: LD_VAR 0 2
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11107
// for i in tmp do
11078: LD_ADDR_VAR 0 1
11082: PUSH
11083: LD_VAR 0 2
11087: PUSH
11088: FOR_IN
11089: IFFALSE 11105
// begin SetLives ( i , 0 ) ;
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_INT 0
11098: PPUSH
11099: CALL_OW 234
// end ;
11103: GO 11088
11105: POP
11106: POP
// end ;
11107: PPOPN 2
11109: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11110: LD_EXP 15
11114: PUSH
11115: LD_EXP 18
11119: AND
11120: IFFALSE 11213
11122: GO 11124
11124: DISABLE
11125: LD_INT 0
11127: PPUSH
// begin enable ;
11128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: LD_INT 22
11136: PUSH
11137: LD_OWVAR 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 2
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 8
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: PUSH
11194: FOR_IN
11195: IFFALSE 11211
// begin SetClass ( i , 1 ) ;
11197: LD_VAR 0 1
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 336
// end ;
11209: GO 11194
11211: POP
11212: POP
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 19
11225: AND
11226: PUSH
11227: LD_OWVAR 65
11231: PUSH
11232: LD_INT 7
11234: LESS
11235: AND
11236: IFFALSE 11250
11238: GO 11240
11240: DISABLE
// begin enable ;
11241: ENABLE
// game_speed := 7 ;
11242: LD_ADDR_OWVAR 65
11246: PUSH
11247: LD_INT 7
11249: ST_TO_ADDR
// end ;
11250: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11251: LD_EXP 15
11255: PUSH
11256: LD_EXP 22
11260: AND
11261: IFFALSE 11463
11263: GO 11265
11265: DISABLE
11266: LD_INT 0
11268: PPUSH
11269: PPUSH
11270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_INT 81
11278: PUSH
11279: LD_OWVAR 2
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: ST_TO_ADDR
// if not tmp then
11307: LD_VAR 0 3
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11463
// if tmp > 5 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 5
11323: GREATER
11324: IFFALSE 11336
// k := 5 else
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 5
11333: ST_TO_ADDR
11334: GO 11346
// k := tmp ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_VAR 0 3
11345: ST_TO_ADDR
// for i := 1 to k do
11346: LD_ADDR_VAR 0 1
11350: PUSH
11351: DOUBLE
11352: LD_INT 1
11354: DEC
11355: ST_TO_ADDR
11356: LD_VAR 0 2
11360: PUSH
11361: FOR_TO
11362: IFFALSE 11461
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11364: LD_VAR 0 3
11368: PUSH
11369: LD_VAR 0 1
11373: ARRAY
11374: PPUSH
11375: LD_VAR 0 1
11379: PUSH
11380: LD_INT 4
11382: MOD
11383: PUSH
11384: LD_INT 1
11386: PLUS
11387: PPUSH
11388: CALL_OW 259
11392: PUSH
11393: LD_INT 10
11395: LESS
11396: IFFALSE 11459
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11398: LD_VAR 0 3
11402: PUSH
11403: LD_VAR 0 1
11407: ARRAY
11408: PPUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_INT 4
11416: MOD
11417: PUSH
11418: LD_INT 1
11420: PLUS
11421: PPUSH
11422: LD_VAR 0 3
11426: PUSH
11427: LD_VAR 0 1
11431: ARRAY
11432: PPUSH
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 4
11440: MOD
11441: PUSH
11442: LD_INT 1
11444: PLUS
11445: PPUSH
11446: CALL_OW 259
11450: PUSH
11451: LD_INT 1
11453: PLUS
11454: PPUSH
11455: CALL_OW 237
11459: GO 11361
11461: POP
11462: POP
// end ;
11463: PPOPN 3
11465: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11466: LD_EXP 15
11470: PUSH
11471: LD_EXP 23
11475: AND
11476: IFFALSE 11496
11478: GO 11480
11480: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11481: LD_INT 4
11483: PPUSH
11484: LD_OWVAR 2
11488: PPUSH
11489: LD_INT 0
11491: PPUSH
11492: CALL_OW 324
11496: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11497: LD_EXP 15
11501: PUSH
11502: LD_EXP 52
11506: AND
11507: IFFALSE 11527
11509: GO 11511
11511: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11512: LD_INT 19
11514: PPUSH
11515: LD_OWVAR 2
11519: PPUSH
11520: LD_INT 0
11522: PPUSH
11523: CALL_OW 324
11527: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11528: LD_EXP 15
11532: PUSH
11533: LD_EXP 24
11537: AND
11538: IFFALSE 11640
11540: GO 11542
11542: DISABLE
11543: LD_INT 0
11545: PPUSH
11546: PPUSH
// begin enable ;
11547: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_OWVAR 2
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 34
11570: PUSH
11571: LD_INT 11
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 34
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 69
11601: ST_TO_ADDR
// if not tmp then
11602: LD_VAR 0 2
11606: NOT
11607: IFFALSE 11611
// exit ;
11609: GO 11640
// for i in tmp do
11611: LD_ADDR_VAR 0 1
11615: PUSH
11616: LD_VAR 0 2
11620: PUSH
11621: FOR_IN
11622: IFFALSE 11638
// begin SetLives ( i , 0 ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: LD_INT 0
11631: PPUSH
11632: CALL_OW 234
// end ;
11636: GO 11621
11638: POP
11639: POP
// end ;
11640: PPOPN 2
11642: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11643: LD_EXP 15
11647: PUSH
11648: LD_EXP 25
11652: AND
11653: IFFALSE 11673
11655: GO 11657
11657: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11658: LD_INT 32
11660: PPUSH
11661: LD_OWVAR 2
11665: PPUSH
11666: LD_INT 0
11668: PPUSH
11669: CALL_OW 324
11673: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11674: LD_EXP 15
11678: PUSH
11679: LD_EXP 26
11683: AND
11684: IFFALSE 11865
11686: GO 11688
11688: DISABLE
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_INT 22
11701: PUSH
11702: LD_OWVAR 2
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 33
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 69
11729: ST_TO_ADDR
// if not tmp then
11730: LD_VAR 0 2
11734: NOT
11735: IFFALSE 11739
// exit ;
11737: GO 11865
// side := 0 ;
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_INT 0
11746: ST_TO_ADDR
// for i := 1 to 8 do
11747: LD_ADDR_VAR 0 1
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_INT 8
11759: PUSH
11760: FOR_TO
11761: IFFALSE 11809
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11763: LD_OWVAR 2
11767: PUSH
11768: LD_VAR 0 1
11772: NONEQUAL
11773: PUSH
11774: LD_OWVAR 2
11778: PPUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 81
11788: PUSH
11789: LD_INT 2
11791: EQUAL
11792: AND
11793: IFFALSE 11807
// begin side := i ;
11795: LD_ADDR_VAR 0 3
11799: PUSH
11800: LD_VAR 0 1
11804: ST_TO_ADDR
// break ;
11805: GO 11809
// end ;
11807: GO 11760
11809: POP
11810: POP
// if not side then
11811: LD_VAR 0 3
11815: NOT
11816: IFFALSE 11820
// exit ;
11818: GO 11865
// for i := 1 to tmp do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: DOUBLE
11826: LD_INT 1
11828: DEC
11829: ST_TO_ADDR
11830: LD_VAR 0 2
11834: PUSH
11835: FOR_TO
11836: IFFALSE 11863
// if Prob ( 60 ) then
11838: LD_INT 60
11840: PPUSH
11841: CALL_OW 13
11845: IFFALSE 11861
// SetSide ( i , side ) ;
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: CALL_OW 235
11861: GO 11835
11863: POP
11864: POP
// end ;
11865: PPOPN 3
11867: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11868: LD_EXP 15
11872: PUSH
11873: LD_EXP 28
11877: AND
11878: IFFALSE 11997
11880: GO 11882
11882: DISABLE
11883: LD_INT 0
11885: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11886: LD_ADDR_VAR 0 1
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_OWVAR 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 21
11905: PUSH
11906: LD_INT 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: LD_INT 23
11918: PUSH
11919: LD_INT 0
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11995
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 257
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 3
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: IN
11971: IFFALSE 11993
// SetClass ( un , rand ( 1 , 4 ) ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_INT 4
11983: PPUSH
11984: CALL_OW 12
11988: PPUSH
11989: CALL_OW 336
11993: GO 11940
11995: POP
11996: POP
// end ;
11997: PPOPN 1
11999: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12000: LD_EXP 15
12004: PUSH
12005: LD_EXP 27
12009: AND
12010: IFFALSE 12089
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 21
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: ST_TO_ADDR
// if not tmp then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: PPUSH
12082: LD_INT 100
12084: PPUSH
12085: CALL_OW 234
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12092: LD_EXP 15
12096: PUSH
12097: LD_EXP 29
12101: AND
12102: IFFALSE 12200
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 1
12114: PUSH
12115: LD_INT 22
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// if not tmp then
12146: LD_VAR 0 1
12150: NOT
12151: IFFALSE 12155
// exit ;
12153: GO 12200
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12155: LD_VAR 0 1
12159: PUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL_OW 12
12172: ARRAY
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: LD_INT 4
12179: PPUSH
12180: CALL_OW 12
12184: PPUSH
12185: LD_INT 3000
12187: PPUSH
12188: LD_INT 9000
12190: PPUSH
12191: CALL_OW 12
12195: PPUSH
12196: CALL_OW 492
// end ;
12200: PPOPN 1
12202: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12203: LD_EXP 15
12207: PUSH
12208: LD_EXP 30
12212: AND
12213: IFFALSE 12233
12215: GO 12217
12217: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12218: LD_INT 1
12220: PPUSH
12221: LD_OWVAR 2
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 324
12233: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12234: LD_EXP 15
12238: PUSH
12239: LD_EXP 31
12243: AND
12244: IFFALSE 12327
12246: GO 12248
12248: DISABLE
12249: LD_INT 0
12251: PPUSH
12252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_OWVAR 2
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: ST_TO_ADDR
// if not tmp then
12289: LD_VAR 0 2
12293: NOT
12294: IFFALSE 12298
// exit ;
12296: GO 12327
// for i in tmp do
12298: LD_ADDR_VAR 0 1
12302: PUSH
12303: LD_VAR 0 2
12307: PUSH
12308: FOR_IN
12309: IFFALSE 12325
// SetBLevel ( i , 10 ) ;
12311: LD_VAR 0 1
12315: PPUSH
12316: LD_INT 10
12318: PPUSH
12319: CALL_OW 241
12323: GO 12308
12325: POP
12326: POP
// end ;
12327: PPOPN 2
12329: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12330: LD_EXP 15
12334: PUSH
12335: LD_EXP 32
12339: AND
12340: IFFALSE 12451
12342: GO 12344
12344: DISABLE
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_OWVAR 2
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: ST_TO_ADDR
// if not tmp then
12386: LD_VAR 0 3
12390: NOT
12391: IFFALSE 12395
// exit ;
12393: GO 12451
// un := tmp [ rand ( 1 , tmp ) ] ;
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_VAR 0 3
12404: PUSH
12405: LD_INT 1
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: CALL_OW 12
12417: ARRAY
12418: ST_TO_ADDR
// if Crawls ( un ) then
12419: LD_VAR 0 2
12423: PPUSH
12424: CALL_OW 318
12428: IFFALSE 12439
// ComWalk ( un ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12439: LD_VAR 0 2
12443: PPUSH
12444: LD_INT 5
12446: PPUSH
12447: CALL_OW 336
// end ;
12451: PPOPN 3
12453: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12454: LD_EXP 15
12458: PUSH
12459: LD_EXP 33
12463: AND
12464: PUSH
12465: LD_OWVAR 67
12469: PUSH
12470: LD_INT 4
12472: LESS
12473: AND
12474: IFFALSE 12493
12476: GO 12478
12478: DISABLE
// begin Difficulty := Difficulty + 1 ;
12479: LD_ADDR_OWVAR 67
12483: PUSH
12484: LD_OWVAR 67
12488: PUSH
12489: LD_INT 1
12491: PLUS
12492: ST_TO_ADDR
// end ;
12493: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12494: LD_EXP 15
12498: PUSH
12499: LD_EXP 34
12503: AND
12504: IFFALSE 12607
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for i := 1 to 5 do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: DOUBLE
12518: LD_INT 1
12520: DEC
12521: ST_TO_ADDR
12522: LD_INT 5
12524: PUSH
12525: FOR_TO
12526: IFFALSE 12605
// begin uc_nation := nation_nature ;
12528: LD_ADDR_OWVAR 21
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// uc_side := 0 ;
12536: LD_ADDR_OWVAR 20
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12544: LD_ADDR_OWVAR 29
12548: PUSH
12549: LD_INT 12
12551: PUSH
12552: LD_INT 12
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: ST_TO_ADDR
// hc_agressivity := 20 ;
12559: LD_ADDR_OWVAR 35
12563: PUSH
12564: LD_INT 20
12566: ST_TO_ADDR
// hc_class := class_tiger ;
12567: LD_ADDR_OWVAR 28
12571: PUSH
12572: LD_INT 14
12574: ST_TO_ADDR
// hc_gallery :=  ;
12575: LD_ADDR_OWVAR 33
12579: PUSH
12580: LD_STRING 
12582: ST_TO_ADDR
// hc_name :=  ;
12583: LD_ADDR_OWVAR 26
12587: PUSH
12588: LD_STRING 
12590: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12591: CALL_OW 44
12595: PPUSH
12596: LD_INT 0
12598: PPUSH
12599: CALL_OW 51
// end ;
12603: GO 12525
12605: POP
12606: POP
// end ;
12607: PPOPN 1
12609: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12610: LD_EXP 15
12614: PUSH
12615: LD_EXP 35
12619: AND
12620: IFFALSE 12629
12622: GO 12624
12624: DISABLE
// StreamSibBomb ;
12625: CALL 12630 0 0
12629: END
// export function StreamSibBomb ; var i , x , y ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
// result := false ;
12636: LD_ADDR_VAR 0 1
12640: PUSH
12641: LD_INT 0
12643: ST_TO_ADDR
// for i := 1 to 16 do
12644: LD_ADDR_VAR 0 2
12648: PUSH
12649: DOUBLE
12650: LD_INT 1
12652: DEC
12653: ST_TO_ADDR
12654: LD_INT 16
12656: PUSH
12657: FOR_TO
12658: IFFALSE 12857
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12660: LD_ADDR_VAR 0 3
12664: PUSH
12665: LD_INT 10
12667: PUSH
12668: LD_INT 20
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: LD_INT 40
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: LD_INT 60
12682: PUSH
12683: LD_INT 70
12685: PUSH
12686: LD_INT 80
12688: PUSH
12689: LD_INT 90
12691: PUSH
12692: LD_INT 100
12694: PUSH
12695: LD_INT 110
12697: PUSH
12698: LD_INT 120
12700: PUSH
12701: LD_INT 130
12703: PUSH
12704: LD_INT 140
12706: PUSH
12707: LD_INT 150
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 1
12729: PPUSH
12730: LD_INT 15
12732: PPUSH
12733: CALL_OW 12
12737: ARRAY
12738: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12739: LD_ADDR_VAR 0 4
12743: PUSH
12744: LD_INT 10
12746: PUSH
12747: LD_INT 20
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: LD_INT 40
12755: PUSH
12756: LD_INT 50
12758: PUSH
12759: LD_INT 60
12761: PUSH
12762: LD_INT 70
12764: PUSH
12765: LD_INT 80
12767: PUSH
12768: LD_INT 90
12770: PUSH
12771: LD_INT 100
12773: PUSH
12774: LD_INT 110
12776: PUSH
12777: LD_INT 120
12779: PUSH
12780: LD_INT 130
12782: PUSH
12783: LD_INT 140
12785: PUSH
12786: LD_INT 150
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 1
12808: PPUSH
12809: LD_INT 15
12811: PPUSH
12812: CALL_OW 12
12816: ARRAY
12817: ST_TO_ADDR
// if ValidHex ( x , y ) then
12818: LD_VAR 0 3
12822: PPUSH
12823: LD_VAR 0 4
12827: PPUSH
12828: CALL_OW 488
12832: IFFALSE 12855
// begin result := [ x , y ] ;
12834: LD_ADDR_VAR 0 1
12838: PUSH
12839: LD_VAR 0 3
12843: PUSH
12844: LD_VAR 0 4
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: ST_TO_ADDR
// break ;
12853: GO 12857
// end ; end ;
12855: GO 12657
12857: POP
12858: POP
// if result then
12859: LD_VAR 0 1
12863: IFFALSE 12923
// begin ToLua ( playSibBomb() ) ;
12865: LD_STRING playSibBomb()
12867: PPUSH
12868: CALL_OW 559
// wait ( 0 0$14 ) ;
12872: LD_INT 490
12874: PPUSH
12875: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 2
12895: ARRAY
12896: PPUSH
12897: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ARRAY
12918: PPUSH
12919: CALL_OW 429
// end ; end ;
12923: LD_VAR 0 1
12927: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12928: LD_EXP 15
12932: PUSH
12933: LD_EXP 37
12937: AND
12938: IFFALSE 12950
12940: GO 12942
12942: DISABLE
// YouLost (  ) ;
12943: LD_STRING 
12945: PPUSH
12946: CALL_OW 104
12950: END
// every 0 0$1 trigger StreamModeActive and sFog do
12951: LD_EXP 15
12955: PUSH
12956: LD_EXP 36
12960: AND
12961: IFFALSE 12975
12963: GO 12965
12965: DISABLE
// FogOff ( your_side ) ;
12966: LD_OWVAR 2
12970: PPUSH
12971: CALL_OW 344
12975: END
// every 0 0$1 trigger StreamModeActive and sSun do
12976: LD_EXP 15
12980: PUSH
12981: LD_EXP 38
12985: AND
12986: IFFALSE 13014
12988: GO 12990
12990: DISABLE
// begin solar_recharge_percent := 0 ;
12991: LD_ADDR_OWVAR 79
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12999: LD_INT 10500
13001: PPUSH
13002: CALL_OW 67
// solar_recharge_percent := 100 ;
13006: LD_ADDR_OWVAR 79
13010: PUSH
13011: LD_INT 100
13013: ST_TO_ADDR
// end ;
13014: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13015: LD_EXP 15
13019: PUSH
13020: LD_EXP 39
13024: AND
13025: IFFALSE 13264
13027: GO 13029
13029: DISABLE
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
13034: PPUSH
// begin tmp := [ ] ;
13035: LD_ADDR_VAR 0 3
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// for i := 1 to 6 do
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_INT 6
13054: PUSH
13055: FOR_TO
13056: IFFALSE 13161
// begin uc_nation := nation_nature ;
13058: LD_ADDR_OWVAR 21
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// uc_side := 0 ;
13066: LD_ADDR_OWVAR 20
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13074: LD_ADDR_OWVAR 29
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: ST_TO_ADDR
// hc_agressivity := 20 ;
13089: LD_ADDR_OWVAR 35
13093: PUSH
13094: LD_INT 20
13096: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13097: LD_ADDR_OWVAR 28
13101: PUSH
13102: LD_INT 17
13104: ST_TO_ADDR
// hc_gallery :=  ;
13105: LD_ADDR_OWVAR 33
13109: PUSH
13110: LD_STRING 
13112: ST_TO_ADDR
// hc_name :=  ;
13113: LD_ADDR_OWVAR 26
13117: PUSH
13118: LD_STRING 
13120: ST_TO_ADDR
// un := CreateHuman ;
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: CALL_OW 44
13130: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13131: LD_VAR 0 2
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 51
// tmp := tmp ^ un ;
13143: LD_ADDR_VAR 0 3
13147: PUSH
13148: LD_VAR 0 3
13152: PUSH
13153: LD_VAR 0 2
13157: ADD
13158: ST_TO_ADDR
// end ;
13159: GO 13055
13161: POP
13162: POP
// repeat wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// for un in tmp do
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 3
13179: PUSH
13180: FOR_IN
13181: IFFALSE 13255
// begin if IsDead ( un ) then
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 301
13192: IFFALSE 13212
// begin tmp := tmp diff un ;
13194: LD_ADDR_VAR 0 3
13198: PUSH
13199: LD_VAR 0 3
13203: PUSH
13204: LD_VAR 0 2
13208: DIFF
13209: ST_TO_ADDR
// continue ;
13210: GO 13180
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13212: LD_VAR 0 2
13216: PPUSH
13217: LD_INT 3
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_INT 0
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 69
13238: PPUSH
13239: LD_VAR 0 2
13243: PPUSH
13244: CALL_OW 74
13248: PPUSH
13249: CALL_OW 115
// end ;
13253: GO 13180
13255: POP
13256: POP
// until not tmp ;
13257: LD_VAR 0 3
13261: NOT
13262: IFFALSE 13163
// end ;
13264: PPOPN 3
13266: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13267: LD_EXP 15
13271: PUSH
13272: LD_EXP 40
13276: AND
13277: IFFALSE 13331
13279: GO 13281
13281: DISABLE
// begin ToLua ( displayTroll(); ) ;
13282: LD_STRING displayTroll();
13284: PPUSH
13285: CALL_OW 559
// wait ( 3 3$00 ) ;
13289: LD_INT 6300
13291: PPUSH
13292: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13296: LD_STRING hideTroll();
13298: PPUSH
13299: CALL_OW 559
// wait ( 1 1$00 ) ;
13303: LD_INT 2100
13305: PPUSH
13306: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13310: LD_STRING displayTroll();
13312: PPUSH
13313: CALL_OW 559
// wait ( 1 1$00 ) ;
13317: LD_INT 2100
13319: PPUSH
13320: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13324: LD_STRING hideTroll();
13326: PPUSH
13327: CALL_OW 559
// end ;
13331: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13332: LD_EXP 15
13336: PUSH
13337: LD_EXP 41
13341: AND
13342: IFFALSE 13405
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
// begin p := 0 ;
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 0
13357: ST_TO_ADDR
// repeat game_speed := 1 ;
13358: LD_ADDR_OWVAR 65
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// p := p + 1 ;
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 1
13385: PLUS
13386: ST_TO_ADDR
// until p >= 60 ;
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 60
13394: GREATEREQUAL
13395: IFFALSE 13358
// game_speed := 4 ;
13397: LD_ADDR_OWVAR 65
13401: PUSH
13402: LD_INT 4
13404: ST_TO_ADDR
// end ;
13405: PPOPN 1
13407: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13408: LD_EXP 15
13412: PUSH
13413: LD_EXP 42
13417: AND
13418: IFFALSE 13564
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_OWVAR 2
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_INT 0
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 69
13480: ST_TO_ADDR
// if not depot then
13481: LD_VAR 0 1
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 13564
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_VAR 0 1
13499: PUSH
13500: LD_INT 1
13502: PPUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: CALL_OW 274
13518: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13519: LD_VAR 0 2
13523: PPUSH
13524: LD_INT 1
13526: PPUSH
13527: LD_INT 0
13529: PPUSH
13530: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 2
13541: PPUSH
13542: LD_INT 0
13544: PPUSH
13545: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13549: LD_VAR 0 2
13553: PPUSH
13554: LD_INT 3
13556: PPUSH
13557: LD_INT 0
13559: PPUSH
13560: CALL_OW 277
// end ;
13564: PPOPN 2
13566: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13567: LD_EXP 15
13571: PUSH
13572: LD_EXP 43
13576: AND
13577: IFFALSE 13674
13579: GO 13581
13581: DISABLE
13582: LD_INT 0
13584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_OWVAR 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 21
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 3
13614: PUSH
13615: LD_INT 23
13617: PUSH
13618: LD_INT 0
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: ST_TO_ADDR
// if not tmp then
13639: LD_VAR 0 1
13643: NOT
13644: IFFALSE 13648
// exit ;
13646: GO 13674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13648: LD_VAR 0 1
13652: PUSH
13653: LD_INT 1
13655: PPUSH
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 12
13665: ARRAY
13666: PPUSH
13667: LD_INT 200
13669: PPUSH
13670: CALL_OW 234
// end ;
13674: PPOPN 1
13676: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13677: LD_EXP 15
13681: PUSH
13682: LD_EXP 44
13686: AND
13687: IFFALSE 13766
13689: GO 13691
13691: DISABLE
13692: LD_INT 0
13694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_OWVAR 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 21
13714: PUSH
13715: LD_INT 2
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: ST_TO_ADDR
// if not tmp then
13731: LD_VAR 0 1
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 13766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13740: LD_VAR 0 1
13744: PUSH
13745: LD_INT 1
13747: PPUSH
13748: LD_VAR 0 1
13752: PPUSH
13753: CALL_OW 12
13757: ARRAY
13758: PPUSH
13759: LD_INT 60
13761: PPUSH
13762: CALL_OW 234
// end ;
13766: PPOPN 1
13768: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13769: LD_EXP 15
13773: PUSH
13774: LD_EXP 45
13778: AND
13779: IFFALSE 13878
13781: GO 13783
13783: DISABLE
13784: LD_INT 0
13786: PPUSH
13787: PPUSH
// begin enable ;
13788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13789: LD_ADDR_VAR 0 1
13793: PUSH
13794: LD_INT 22
13796: PUSH
13797: LD_OWVAR 2
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 61
13808: PUSH
13809: EMPTY
13810: LIST
13811: PUSH
13812: LD_INT 33
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: ST_TO_ADDR
// if not tmp then
13832: LD_VAR 0 1
13836: NOT
13837: IFFALSE 13841
// exit ;
13839: GO 13878
// for i in tmp do
13841: LD_ADDR_VAR 0 2
13845: PUSH
13846: LD_VAR 0 1
13850: PUSH
13851: FOR_IN
13852: IFFALSE 13876
// if IsControledBy ( i ) then
13854: LD_VAR 0 2
13858: PPUSH
13859: CALL_OW 312
13863: IFFALSE 13874
// ComUnlink ( i ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 136
13874: GO 13851
13876: POP
13877: POP
// end ;
13878: PPOPN 2
13880: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13881: LD_EXP 15
13885: PUSH
13886: LD_EXP 46
13890: AND
13891: IFFALSE 14031
13893: GO 13895
13895: DISABLE
13896: LD_INT 0
13898: PPUSH
13899: PPUSH
// begin ToLua ( displayPowell(); ) ;
13900: LD_STRING displayPowell();
13902: PPUSH
13903: CALL_OW 559
// uc_side := 0 ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// uc_nation := 2 ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_INT 2
13922: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13923: LD_ADDR_OWVAR 37
13927: PUSH
13928: LD_INT 14
13930: ST_TO_ADDR
// vc_engine := engine_siberite ;
13931: LD_ADDR_OWVAR 39
13935: PUSH
13936: LD_INT 3
13938: ST_TO_ADDR
// vc_control := control_apeman ;
13939: LD_ADDR_OWVAR 38
13943: PUSH
13944: LD_INT 5
13946: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13947: LD_ADDR_OWVAR 40
13951: PUSH
13952: LD_INT 29
13954: ST_TO_ADDR
// un := CreateVehicle ;
13955: LD_ADDR_VAR 0 2
13959: PUSH
13960: CALL_OW 45
13964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13984: LD_VAR 0 2
13988: PPUSH
13989: LD_INT 22
13991: PUSH
13992: LD_OWVAR 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PPUSH
14006: LD_VAR 0 2
14010: PPUSH
14011: CALL_OW 74
14015: PPUSH
14016: CALL_OW 115
// until IsDead ( un ) ;
14020: LD_VAR 0 2
14024: PPUSH
14025: CALL_OW 301
14029: IFFALSE 13977
// end ;
14031: PPOPN 2
14033: END
// every 0 0$1 trigger StreamModeActive and sStu do
14034: LD_EXP 15
14038: PUSH
14039: LD_EXP 54
14043: AND
14044: IFFALSE 14060
14046: GO 14048
14048: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14049: LD_STRING displayStucuk();
14051: PPUSH
14052: CALL_OW 559
// ResetFog ;
14056: CALL_OW 335
// end ;
14060: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14061: LD_EXP 15
14065: PUSH
14066: LD_EXP 47
14070: AND
14071: IFFALSE 14212
14073: GO 14075
14075: DISABLE
14076: LD_INT 0
14078: PPUSH
14079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_OWVAR 2
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: ST_TO_ADDR
// if not tmp then
14116: LD_VAR 0 2
14120: NOT
14121: IFFALSE 14125
// exit ;
14123: GO 14212
// un := tmp [ rand ( 1 , tmp ) ] ;
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_VAR 0 2
14142: PPUSH
14143: CALL_OW 12
14147: ARRAY
14148: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_INT 0
14156: PPUSH
14157: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_OWVAR 3
14170: PUSH
14171: LD_VAR 0 1
14175: DIFF
14176: PPUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 74
14186: PPUSH
14187: CALL_OW 115
// wait ( 0 0$20 ) ;
14191: LD_INT 700
14193: PPUSH
14194: CALL_OW 67
// SetSide ( un , your_side ) ;
14198: LD_VAR 0 1
14202: PPUSH
14203: LD_OWVAR 2
14207: PPUSH
14208: CALL_OW 235
// end ;
14212: PPOPN 2
14214: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14215: LD_EXP 15
14219: PUSH
14220: LD_EXP 48
14224: AND
14225: IFFALSE 14331
14227: GO 14229
14229: DISABLE
14230: LD_INT 0
14232: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14233: LD_ADDR_VAR 0 1
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_OWVAR 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 30
14255: PUSH
14256: LD_INT 0
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 30
14265: PUSH
14266: LD_INT 1
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: ST_TO_ADDR
// if not depot then
14287: LD_VAR 0 1
14291: NOT
14292: IFFALSE 14296
// exit ;
14294: GO 14331
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: CALL_OW 250
14309: PPUSH
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PPUSH
14319: CALL_OW 251
14323: PPUSH
14324: LD_INT 70
14326: PPUSH
14327: CALL_OW 495
// end ;
14331: PPOPN 1
14333: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14334: LD_EXP 15
14338: PUSH
14339: LD_EXP 49
14343: AND
14344: IFFALSE 14555
14346: GO 14348
14348: DISABLE
14349: LD_INT 0
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_OWVAR 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 21
14375: PUSH
14376: LD_INT 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: ST_TO_ADDR
// if not tmp then
14392: LD_VAR 0 5
14396: NOT
14397: IFFALSE 14401
// exit ;
14399: GO 14555
// for i in tmp do
14401: LD_ADDR_VAR 0 1
14405: PUSH
14406: LD_VAR 0 5
14410: PUSH
14411: FOR_IN
14412: IFFALSE 14553
// begin d := rand ( 0 , 5 ) ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_INT 0
14421: PPUSH
14422: LD_INT 5
14424: PPUSH
14425: CALL_OW 12
14429: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14430: LD_ADDR_VAR 0 2
14434: PUSH
14435: LD_VAR 0 1
14439: PPUSH
14440: CALL_OW 250
14444: PPUSH
14445: LD_VAR 0 4
14449: PPUSH
14450: LD_INT 3
14452: PPUSH
14453: LD_INT 12
14455: PPUSH
14456: CALL_OW 12
14460: PPUSH
14461: CALL_OW 272
14465: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 251
14480: PPUSH
14481: LD_VAR 0 4
14485: PPUSH
14486: LD_INT 3
14488: PPUSH
14489: LD_INT 12
14491: PPUSH
14492: CALL_OW 12
14496: PPUSH
14497: CALL_OW 273
14501: ST_TO_ADDR
// if ValidHex ( x , y ) then
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: CALL_OW 488
14516: IFFALSE 14551
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14518: LD_VAR 0 1
14522: PPUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: LD_INT 3
14535: PPUSH
14536: LD_INT 6
14538: PPUSH
14539: CALL_OW 12
14543: PPUSH
14544: LD_INT 1
14546: PPUSH
14547: CALL_OW 483
// end ;
14551: GO 14411
14553: POP
14554: POP
// end ;
14555: PPOPN 5
14557: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14558: LD_EXP 15
14562: PUSH
14563: LD_EXP 50
14567: AND
14568: IFFALSE 14662
14570: GO 14572
14572: DISABLE
14573: LD_INT 0
14575: PPUSH
14576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_OWVAR 2
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 21
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: PPUSH
14619: CALL_OW 69
14623: ST_TO_ADDR
// if not tmp then
14624: LD_VAR 0 2
14628: NOT
14629: IFFALSE 14633
// exit ;
14631: GO 14662
// for i in tmp do
14633: LD_ADDR_VAR 0 1
14637: PUSH
14638: LD_VAR 0 2
14642: PUSH
14643: FOR_IN
14644: IFFALSE 14660
// SetFuel ( i , 0 ) ;
14646: LD_VAR 0 1
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 240
14658: GO 14643
14660: POP
14661: POP
// end ;
14662: PPOPN 2
14664: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14665: LD_EXP 15
14669: PUSH
14670: LD_EXP 51
14674: AND
14675: IFFALSE 14741
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14683: LD_ADDR_VAR 0 1
14687: PUSH
14688: LD_INT 22
14690: PUSH
14691: LD_OWVAR 2
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 29
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PPUSH
14714: CALL_OW 69
14718: ST_TO_ADDR
// if not tmp then
14719: LD_VAR 0 1
14723: NOT
14724: IFFALSE 14728
// exit ;
14726: GO 14741
// DestroyUnit ( tmp [ 1 ] ) ;
14728: LD_VAR 0 1
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: CALL_OW 65
// end ;
14741: PPOPN 1
14743: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14744: LD_EXP 15
14748: PUSH
14749: LD_EXP 53
14753: AND
14754: IFFALSE 14883
14756: GO 14758
14758: DISABLE
14759: LD_INT 0
14761: PPUSH
// begin uc_side := 0 ;
14762: LD_ADDR_OWVAR 20
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// uc_nation := nation_arabian ;
14770: LD_ADDR_OWVAR 21
14774: PUSH
14775: LD_INT 2
14777: ST_TO_ADDR
// hc_gallery :=  ;
14778: LD_ADDR_OWVAR 33
14782: PUSH
14783: LD_STRING 
14785: ST_TO_ADDR
// hc_name :=  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 11
14799: PPUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 380
// un := CreateHuman ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: CALL_OW 44
14816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14817: LD_VAR 0 1
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14829: LD_INT 35
14831: PPUSH
14832: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: LD_INT 22
14843: PUSH
14844: LD_OWVAR 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 74
14867: PPUSH
14868: CALL_OW 115
// until IsDead ( un ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 301
14881: IFFALSE 14829
// end ;
14883: PPOPN 1
14885: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14886: LD_EXP 15
14890: PUSH
14891: LD_EXP 55
14895: AND
14896: IFFALSE 14908
14898: GO 14900
14900: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14901: LD_STRING earthquake(getX(game), 0, 32)
14903: PPUSH
14904: CALL_OW 559
14908: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14909: LD_EXP 15
14913: PUSH
14914: LD_EXP 56
14918: AND
14919: IFFALSE 15010
14921: GO 14923
14923: DISABLE
14924: LD_INT 0
14926: PPUSH
// begin enable ;
14927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: ST_TO_ADDR
// if not tmp then
14975: LD_VAR 0 1
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14984: LD_VAR 0 1
14988: PUSH
14989: LD_INT 1
14991: PPUSH
14992: LD_VAR 0 1
14996: PPUSH
14997: CALL_OW 12
15001: ARRAY
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 234
// end ;
15010: PPOPN 1
15012: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15013: LD_EXP 15
15017: PUSH
15018: LD_EXP 57
15022: AND
15023: IFFALSE 15164
15025: GO 15027
15027: DISABLE
15028: LD_INT 0
15030: PPUSH
15031: PPUSH
15032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_INT 22
15040: PUSH
15041: LD_OWVAR 2
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 25
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// if not tmp then
15069: LD_VAR 0 3
15073: NOT
15074: IFFALSE 15078
// exit ;
15076: GO 15164
// un := tmp [ rand ( 1 , tmp ) ] ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 1
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: CALL_OW 12
15100: ARRAY
15101: ST_TO_ADDR
// if Crawls ( un ) then
15102: LD_VAR 0 2
15106: PPUSH
15107: CALL_OW 318
15111: IFFALSE 15122
// ComWalk ( un ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_INT 9
15129: PPUSH
15130: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15134: LD_INT 28
15136: PPUSH
15137: LD_OWVAR 2
15141: PPUSH
15142: LD_INT 2
15144: PPUSH
15145: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15149: LD_INT 29
15151: PPUSH
15152: LD_OWVAR 2
15156: PPUSH
15157: LD_INT 2
15159: PPUSH
15160: CALL_OW 322
// end ;
15164: PPOPN 3
15166: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15167: LD_EXP 15
15171: PUSH
15172: LD_EXP 58
15176: AND
15177: IFFALSE 15288
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
15185: PPUSH
15186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: LD_INT 22
15194: PUSH
15195: LD_OWVAR 2
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: ST_TO_ADDR
// if not tmp then
15223: LD_VAR 0 3
15227: NOT
15228: IFFALSE 15232
// exit ;
15230: GO 15288
// un := tmp [ rand ( 1 , tmp ) ] ;
15232: LD_ADDR_VAR 0 2
15236: PUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_INT 1
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: CALL_OW 12
15254: ARRAY
15255: ST_TO_ADDR
// if Crawls ( un ) then
15256: LD_VAR 0 2
15260: PPUSH
15261: CALL_OW 318
15265: IFFALSE 15276
// ComWalk ( un ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15276: LD_VAR 0 2
15280: PPUSH
15281: LD_INT 8
15283: PPUSH
15284: CALL_OW 336
// end ;
15288: PPOPN 3
15290: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15291: LD_EXP 15
15295: PUSH
15296: LD_EXP 59
15300: AND
15301: IFFALSE 15445
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 2
15339: PUSH
15340: LD_INT 34
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 34
15352: PUSH
15353: LD_INT 51
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 34
15362: PUSH
15363: LD_INT 32
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PPUSH
15381: CALL_OW 69
15385: ST_TO_ADDR
// if not tmp then
15386: LD_VAR 0 2
15390: NOT
15391: IFFALSE 15395
// exit ;
15393: GO 15445
// for i in tmp do
15395: LD_ADDR_VAR 0 1
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: FOR_IN
15406: IFFALSE 15443
// if GetCargo ( i , mat_artifact ) = 0 then
15408: LD_VAR 0 1
15412: PPUSH
15413: LD_INT 4
15415: PPUSH
15416: CALL_OW 289
15420: PUSH
15421: LD_INT 0
15423: EQUAL
15424: IFFALSE 15441
// SetCargo ( i , mat_siberit , 100 ) ;
15426: LD_VAR 0 1
15430: PPUSH
15431: LD_INT 3
15433: PPUSH
15434: LD_INT 100
15436: PPUSH
15437: CALL_OW 290
15441: GO 15405
15443: POP
15444: POP
// end ;
15445: PPOPN 2
15447: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15448: LD_EXP 15
15452: PUSH
15453: LD_EXP 60
15457: AND
15458: IFFALSE 15641
15460: GO 15462
15462: DISABLE
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 22
15474: PUSH
15475: LD_OWVAR 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: ST_TO_ADDR
// if not tmp then
15489: LD_VAR 0 2
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15641
// for i := 1 to 2 do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: DOUBLE
15504: LD_INT 1
15506: DEC
15507: ST_TO_ADDR
15508: LD_INT 2
15510: PUSH
15511: FOR_TO
15512: IFFALSE 15639
// begin uc_side := your_side ;
15514: LD_ADDR_OWVAR 20
15518: PUSH
15519: LD_OWVAR 2
15523: ST_TO_ADDR
// uc_nation := nation_american ;
15524: LD_ADDR_OWVAR 21
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// vc_chassis := us_morphling ;
15532: LD_ADDR_OWVAR 37
15536: PUSH
15537: LD_INT 5
15539: ST_TO_ADDR
// vc_engine := engine_siberite ;
15540: LD_ADDR_OWVAR 39
15544: PUSH
15545: LD_INT 3
15547: ST_TO_ADDR
// vc_control := control_computer ;
15548: LD_ADDR_OWVAR 38
15552: PUSH
15553: LD_INT 3
15555: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15556: LD_ADDR_OWVAR 40
15560: PUSH
15561: LD_INT 10
15563: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15564: LD_VAR 0 2
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: PPUSH
15573: CALL_OW 310
15577: NOT
15578: IFFALSE 15625
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15580: CALL_OW 45
15584: PPUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: CALL_OW 250
15598: PPUSH
15599: LD_VAR 0 2
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PPUSH
15608: CALL_OW 251
15612: PPUSH
15613: LD_INT 12
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 50
15623: GO 15637
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15625: CALL_OW 45
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: CALL_OW 51
// end ;
15637: GO 15511
15639: POP
15640: POP
// end ;
15641: PPOPN 2
15643: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15644: LD_EXP 15
15648: PUSH
15649: LD_EXP 61
15653: AND
15654: IFFALSE 15876
15656: GO 15658
15658: DISABLE
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15667: LD_ADDR_VAR 0 6
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 23
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 6
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 15876
// s1 := rand ( 1 , 4 ) ;
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: LD_INT 1
15737: PPUSH
15738: LD_INT 4
15740: PPUSH
15741: CALL_OW 12
15745: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15746: LD_ADDR_VAR 0 4
15750: PUSH
15751: LD_VAR 0 6
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: CALL_OW 259
15769: ST_TO_ADDR
// if s1 = 1 then
15770: LD_VAR 0 2
15774: PUSH
15775: LD_INT 1
15777: EQUAL
15778: IFFALSE 15798
// s2 := rand ( 2 , 4 ) else
15780: LD_ADDR_VAR 0 3
15784: PUSH
15785: LD_INT 2
15787: PPUSH
15788: LD_INT 4
15790: PPUSH
15791: CALL_OW 12
15795: ST_TO_ADDR
15796: GO 15806
// s2 := 1 ;
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15806: LD_ADDR_VAR 0 5
15810: PUSH
15811: LD_VAR 0 6
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 3
15824: PPUSH
15825: CALL_OW 259
15829: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15830: LD_VAR 0 6
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 5
15848: PPUSH
15849: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15853: LD_VAR 0 6
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_VAR 0 4
15871: PPUSH
15872: CALL_OW 237
// end ;
15876: PPOPN 6
15878: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15879: LD_EXP 15
15883: PUSH
15884: LD_EXP 62
15888: AND
15889: IFFALSE 15968
15891: GO 15893
15893: DISABLE
15894: LD_INT 0
15896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15897: LD_ADDR_VAR 0 1
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_OWVAR 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 30
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: ST_TO_ADDR
// if not tmp then
15933: LD_VAR 0 1
15937: NOT
15938: IFFALSE 15942
// exit ;
15940: GO 15968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15942: LD_VAR 0 1
15946: PUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 12
15959: ARRAY
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 234
// end ;
15968: PPOPN 1
15970: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15971: LD_EXP 15
15975: PUSH
15976: LD_EXP 63
15980: AND
15981: IFFALSE 16093
15983: GO 15985
15985: DISABLE
15986: LD_INT 0
15988: PPUSH
15989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: LD_INT 22
15997: PUSH
15998: LD_OWVAR 2
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: LD_INT 30
16012: PUSH
16013: LD_INT 27
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 30
16022: PUSH
16023: LD_INT 26
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 30
16032: PUSH
16033: LD_INT 28
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: ST_TO_ADDR
// if not tmp then
16055: LD_VAR 0 2
16059: NOT
16060: IFFALSE 16064
// exit ;
16062: GO 16093
// for i in tmp do
16064: LD_ADDR_VAR 0 1
16068: PUSH
16069: LD_VAR 0 2
16073: PUSH
16074: FOR_IN
16075: IFFALSE 16091
// SetLives ( i , 1 ) ;
16077: LD_VAR 0 1
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 234
16089: GO 16074
16091: POP
16092: POP
// end ;
16093: PPOPN 2
16095: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16096: LD_EXP 15
16100: PUSH
16101: LD_EXP 64
16105: AND
16106: IFFALSE 16393
16108: GO 16110
16110: DISABLE
16111: LD_INT 0
16113: PPUSH
16114: PPUSH
16115: PPUSH
// begin i := rand ( 1 , 7 ) ;
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PPUSH
16124: LD_INT 7
16126: PPUSH
16127: CALL_OW 12
16131: ST_TO_ADDR
// case i of 1 :
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16155
16145: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16146: LD_STRING earthquake(getX(game), 0, 32)
16148: PPUSH
16149: CALL_OW 559
16153: GO 16393
16155: LD_INT 2
16157: DOUBLE
16158: EQUAL
16159: IFTRUE 16163
16161: GO 16177
16163: POP
// begin ToLua ( displayStucuk(); ) ;
16164: LD_STRING displayStucuk();
16166: PPUSH
16167: CALL_OW 559
// ResetFog ;
16171: CALL_OW 335
// end ; 3 :
16175: GO 16393
16177: LD_INT 3
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16289
16185: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_OWVAR 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 25
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: ST_TO_ADDR
// if not tmp then
16222: LD_VAR 0 2
16226: NOT
16227: IFFALSE 16231
// exit ;
16229: GO 16393
// un := tmp [ rand ( 1 , tmp ) ] ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_VAR 0 2
16240: PUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 2
16248: PPUSH
16249: CALL_OW 12
16253: ARRAY
16254: ST_TO_ADDR
// if Crawls ( un ) then
16255: LD_VAR 0 3
16259: PPUSH
16260: CALL_OW 318
16264: IFFALSE 16275
// ComWalk ( un ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16275: LD_VAR 0 3
16279: PPUSH
16280: LD_INT 8
16282: PPUSH
16283: CALL_OW 336
// end ; 4 :
16287: GO 16393
16289: LD_INT 4
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16371
16297: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16298: LD_ADDR_VAR 0 2
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: LD_OWVAR 2
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 30
16317: PUSH
16318: LD_INT 29
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: ST_TO_ADDR
// if not tmp then
16334: LD_VAR 0 2
16338: NOT
16339: IFFALSE 16343
// exit ;
16341: GO 16393
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 1
16350: ARRAY
16351: PPUSH
16352: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: CALL_OW 65
// end ; 5 .. 7 :
16369: GO 16393
16371: LD_INT 5
16373: DOUBLE
16374: GREATEREQUAL
16375: IFFALSE 16383
16377: LD_INT 7
16379: DOUBLE
16380: LESSEQUAL
16381: IFTRUE 16385
16383: GO 16392
16385: POP
// StreamSibBomb ; end ;
16386: CALL 12630 0 0
16390: GO 16393
16392: POP
// end ;
16393: PPOPN 3
16395: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16396: LD_EXP 15
16400: PUSH
16401: LD_EXP 65
16405: AND
16406: IFFALSE 16562
16408: GO 16410
16410: DISABLE
16411: LD_INT 0
16413: PPUSH
16414: PPUSH
16415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: LD_INT 81
16423: PUSH
16424: LD_OWVAR 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 21
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PPUSH
16465: CALL_OW 69
16469: ST_TO_ADDR
// if not tmp then
16470: LD_VAR 0 2
16474: NOT
16475: IFFALSE 16479
// exit ;
16477: GO 16562
// p := 0 ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16487: LD_INT 35
16489: PPUSH
16490: CALL_OW 67
// p := p + 1 ;
16494: LD_ADDR_VAR 0 3
16498: PUSH
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 1
16506: PLUS
16507: ST_TO_ADDR
// for i in tmp do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16550
// if GetLives ( i ) < 1000 then
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 256
16530: PUSH
16531: LD_INT 1000
16533: LESS
16534: IFFALSE 16548
// SetLives ( i , 1000 ) ;
16536: LD_VAR 0 1
16540: PPUSH
16541: LD_INT 1000
16543: PPUSH
16544: CALL_OW 234
16548: GO 16518
16550: POP
16551: POP
// until p > 20 ;
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 20
16559: GREATER
16560: IFFALSE 16487
// end ;
16562: PPOPN 3
16564: END
// every 0 0$1 trigger StreamModeActive and sTime do
16565: LD_EXP 15
16569: PUSH
16570: LD_EXP 66
16574: AND
16575: IFFALSE 16610
16577: GO 16579
16579: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16580: LD_INT 28
16582: PPUSH
16583: LD_OWVAR 2
16587: PPUSH
16588: LD_INT 2
16590: PPUSH
16591: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16595: LD_INT 30
16597: PPUSH
16598: LD_OWVAR 2
16602: PPUSH
16603: LD_INT 2
16605: PPUSH
16606: CALL_OW 322
// end ;
16610: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16611: LD_EXP 15
16615: PUSH
16616: LD_EXP 67
16620: AND
16621: IFFALSE 16742
16623: GO 16625
16625: DISABLE
16626: LD_INT 0
16628: PPUSH
16629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16630: LD_ADDR_VAR 0 2
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_OWVAR 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 23
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PPUSH
16679: CALL_OW 69
16683: ST_TO_ADDR
// if not tmp then
16684: LD_VAR 0 2
16688: NOT
16689: IFFALSE 16693
// exit ;
16691: GO 16742
// for i in tmp do
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_VAR 0 2
16702: PUSH
16703: FOR_IN
16704: IFFALSE 16740
// begin if Crawls ( i ) then
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 318
16715: IFFALSE 16726
// ComWalk ( i ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 138
// SetClass ( i , 2 ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 2
16733: PPUSH
16734: CALL_OW 336
// end ;
16738: GO 16703
16740: POP
16741: POP
// end ;
16742: PPOPN 2
16744: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16745: LD_EXP 15
16749: PUSH
16750: LD_EXP 68
16754: AND
16755: IFFALSE 17043
16757: GO 16759
16759: DISABLE
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16765: LD_OWVAR 2
16769: PPUSH
16770: LD_INT 9
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16783: LD_INT 9
16785: PPUSH
16786: LD_OWVAR 2
16790: PPUSH
16791: CALL_OW 343
// uc_side := 9 ;
16795: LD_ADDR_OWVAR 20
16799: PUSH
16800: LD_INT 9
16802: ST_TO_ADDR
// uc_nation := 2 ;
16803: LD_ADDR_OWVAR 21
16807: PUSH
16808: LD_INT 2
16810: ST_TO_ADDR
// hc_name := Dark Warrior ;
16811: LD_ADDR_OWVAR 26
16815: PUSH
16816: LD_STRING Dark Warrior
16818: ST_TO_ADDR
// hc_gallery :=  ;
16819: LD_ADDR_OWVAR 33
16823: PUSH
16824: LD_STRING 
16826: ST_TO_ADDR
// hc_noskilllimit := true ;
16827: LD_ADDR_OWVAR 76
16831: PUSH
16832: LD_INT 1
16834: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16835: LD_ADDR_OWVAR 31
16839: PUSH
16840: LD_INT 30
16842: PUSH
16843: LD_INT 30
16845: PUSH
16846: LD_INT 30
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: ST_TO_ADDR
// un := CreateHuman ;
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: CALL_OW 44
16867: ST_TO_ADDR
// hc_noskilllimit := false ;
16868: LD_ADDR_OWVAR 76
16872: PUSH
16873: LD_INT 0
16875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: CALL_OW 51
// ToLua ( playRanger() ) ;
16888: LD_STRING playRanger()
16890: PPUSH
16891: CALL_OW 559
// p := 0 ;
16895: LD_ADDR_VAR 0 2
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16903: LD_INT 35
16905: PPUSH
16906: CALL_OW 67
// p := p + 1 ;
16910: LD_ADDR_VAR 0 2
16914: PUSH
16915: LD_VAR 0 2
16919: PUSH
16920: LD_INT 1
16922: PLUS
16923: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16924: LD_VAR 0 3
16928: PPUSH
16929: CALL_OW 256
16933: PUSH
16934: LD_INT 1000
16936: LESS
16937: IFFALSE 16951
// SetLives ( un , 1000 ) ;
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1000
16946: PPUSH
16947: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 81
16958: PUSH
16959: LD_OWVAR 2
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 91
16970: PUSH
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: CALL_OW 74
17002: PPUSH
17003: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17007: LD_VAR 0 2
17011: PUSH
17012: LD_INT 80
17014: GREATER
17015: PUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: CALL_OW 301
17025: OR
17026: IFFALSE 16903
// if un then
17028: LD_VAR 0 3
17032: IFFALSE 17043
// RemoveUnit ( un ) ;
17034: LD_VAR 0 3
17038: PPUSH
17039: CALL_OW 64
// end ;
17043: PPOPN 3
17045: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17046: LD_EXP 69
17050: IFFALSE 17166
17052: GO 17054
17054: DISABLE
17055: LD_INT 0
17057: PPUSH
17058: PPUSH
17059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17060: LD_ADDR_VAR 0 2
17064: PUSH
17065: LD_INT 81
17067: PUSH
17068: LD_OWVAR 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 21
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17096: LD_STRING playComputer()
17098: PPUSH
17099: CALL_OW 559
// if not tmp then
17103: LD_VAR 0 2
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17166
// for i in tmp do
17112: LD_ADDR_VAR 0 1
17116: PUSH
17117: LD_VAR 0 2
17121: PUSH
17122: FOR_IN
17123: IFFALSE 17164
// for j := 1 to 4 do
17125: LD_ADDR_VAR 0 3
17129: PUSH
17130: DOUBLE
17131: LD_INT 1
17133: DEC
17134: ST_TO_ADDR
17135: LD_INT 4
17137: PUSH
17138: FOR_TO
17139: IFFALSE 17160
// SetSkill ( i , j , 10 ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 10
17153: PPUSH
17154: CALL_OW 237
17158: GO 17138
17160: POP
17161: POP
17162: GO 17122
17164: POP
17165: POP
// end ;
17166: PPOPN 3
17168: END
// every 0 0$1 trigger s30 do var i , tmp ;
17169: LD_EXP 70
17173: IFFALSE 17242
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
17181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// SetLives ( i , 300 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 300
17233: PPUSH
17234: CALL_OW 234
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger s60 do var i , tmp ;
17245: LD_EXP 71
17249: IFFALSE 17318
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 22
17265: PUSH
17266: LD_OWVAR 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: ST_TO_ADDR
// if not tmp then
17280: LD_VAR 0 2
17284: NOT
17285: IFFALSE 17289
// exit ;
17287: GO 17318
// for i in tmp do
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: LD_VAR 0 2
17298: PUSH
17299: FOR_IN
17300: IFFALSE 17316
// SetLives ( i , 600 ) ;
17302: LD_VAR 0 1
17306: PPUSH
17307: LD_INT 600
17309: PPUSH
17310: CALL_OW 234
17314: GO 17299
17316: POP
17317: POP
// end ;
17318: PPOPN 2
17320: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17321: LD_INT 0
17323: PPUSH
// case cmd of 301 :
17324: LD_VAR 0 1
17328: PUSH
17329: LD_INT 301
17331: DOUBLE
17332: EQUAL
17333: IFTRUE 17337
17335: GO 17369
17337: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17338: LD_VAR 0 6
17342: PPUSH
17343: LD_VAR 0 7
17347: PPUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 4
17357: PPUSH
17358: LD_VAR 0 5
17362: PPUSH
17363: CALL 18570 0 5
17367: GO 17490
17369: LD_INT 302
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17414
17377: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17378: LD_VAR 0 6
17382: PPUSH
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: LD_VAR 0 9
17397: PPUSH
17398: LD_VAR 0 4
17402: PPUSH
17403: LD_VAR 0 5
17407: PPUSH
17408: CALL 18661 0 6
17412: GO 17490
17414: LD_INT 303
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17459
17422: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17423: LD_VAR 0 6
17427: PPUSH
17428: LD_VAR 0 7
17432: PPUSH
17433: LD_VAR 0 8
17437: PPUSH
17438: LD_VAR 0 9
17442: PPUSH
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL 17495 0 6
17457: GO 17490
17459: LD_INT 304
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17467
17465: GO 17489
17467: POP
// hHackTeleport ( unit , x , y ) ; end ;
17468: LD_VAR 0 2
17472: PPUSH
17473: LD_VAR 0 4
17477: PPUSH
17478: LD_VAR 0 5
17482: PPUSH
17483: CALL 19254 0 3
17487: GO 17490
17489: POP
// end ;
17490: LD_VAR 0 12
17494: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17499: LD_VAR 0 1
17503: PUSH
17504: LD_INT 1
17506: LESS
17507: PUSH
17508: LD_VAR 0 1
17512: PUSH
17513: LD_INT 3
17515: GREATER
17516: OR
17517: PUSH
17518: LD_VAR 0 5
17522: PPUSH
17523: LD_VAR 0 6
17527: PPUSH
17528: CALL_OW 428
17532: OR
17533: IFFALSE 17537
// exit ;
17535: GO 18257
// uc_side := your_side ;
17537: LD_ADDR_OWVAR 20
17541: PUSH
17542: LD_OWVAR 2
17546: ST_TO_ADDR
// uc_nation := nation ;
17547: LD_ADDR_OWVAR 21
17551: PUSH
17552: LD_VAR 0 1
17556: ST_TO_ADDR
// bc_level = 1 ;
17557: LD_ADDR_OWVAR 43
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// case btype of 1 :
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 1
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17589
17578: POP
// bc_type := b_depot ; 2 :
17579: LD_ADDR_OWVAR 42
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
17587: GO 18201
17589: LD_INT 2
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17608
17597: POP
// bc_type := b_warehouse ; 3 :
17598: LD_ADDR_OWVAR 42
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
17606: GO 18201
17608: LD_INT 3
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17627
17616: POP
// bc_type := b_lab ; 4 .. 9 :
17617: LD_ADDR_OWVAR 42
17621: PUSH
17622: LD_INT 6
17624: ST_TO_ADDR
17625: GO 18201
17627: LD_INT 4
17629: DOUBLE
17630: GREATEREQUAL
17631: IFFALSE 17639
17633: LD_INT 9
17635: DOUBLE
17636: LESSEQUAL
17637: IFTRUE 17641
17639: GO 17693
17641: POP
// begin bc_type := b_lab_half ;
17642: LD_ADDR_OWVAR 42
17646: PUSH
17647: LD_INT 7
17649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17650: LD_ADDR_OWVAR 44
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: LD_INT 11
17660: PUSH
17661: LD_INT 12
17663: PUSH
17664: LD_INT 15
17666: PUSH
17667: LD_INT 14
17669: PUSH
17670: LD_INT 13
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_VAR 0 2
17685: PUSH
17686: LD_INT 3
17688: MINUS
17689: ARRAY
17690: ST_TO_ADDR
// end ; 10 .. 13 :
17691: GO 18201
17693: LD_INT 10
17695: DOUBLE
17696: GREATEREQUAL
17697: IFFALSE 17705
17699: LD_INT 13
17701: DOUBLE
17702: LESSEQUAL
17703: IFTRUE 17707
17705: GO 17784
17707: POP
// begin bc_type := b_lab_full ;
17708: LD_ADDR_OWVAR 42
17712: PUSH
17713: LD_INT 8
17715: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17716: LD_ADDR_OWVAR 44
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: LD_INT 12
17726: PUSH
17727: LD_INT 14
17729: PUSH
17730: LD_INT 13
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: PUSH
17739: LD_VAR 0 2
17743: PUSH
17744: LD_INT 9
17746: MINUS
17747: ARRAY
17748: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17749: LD_ADDR_OWVAR 45
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: LD_INT 15
17759: PUSH
17760: LD_INT 12
17762: PUSH
17763: LD_INT 15
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: PUSH
17772: LD_VAR 0 2
17776: PUSH
17777: LD_INT 9
17779: MINUS
17780: ARRAY
17781: ST_TO_ADDR
// end ; 14 :
17782: GO 18201
17784: LD_INT 14
17786: DOUBLE
17787: EQUAL
17788: IFTRUE 17792
17790: GO 17803
17792: POP
// bc_type := b_workshop ; 15 :
17793: LD_ADDR_OWVAR 42
17797: PUSH
17798: LD_INT 2
17800: ST_TO_ADDR
17801: GO 18201
17803: LD_INT 15
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17822
17811: POP
// bc_type := b_factory ; 16 :
17812: LD_ADDR_OWVAR 42
17816: PUSH
17817: LD_INT 3
17819: ST_TO_ADDR
17820: GO 18201
17822: LD_INT 16
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17841
17830: POP
// bc_type := b_ext_gun ; 17 :
17831: LD_ADDR_OWVAR 42
17835: PUSH
17836: LD_INT 17
17838: ST_TO_ADDR
17839: GO 18201
17841: LD_INT 17
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 17877
17849: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17850: LD_ADDR_OWVAR 42
17854: PUSH
17855: LD_INT 19
17857: PUSH
17858: LD_INT 23
17860: PUSH
17861: LD_INT 19
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: LD_VAR 0 1
17873: ARRAY
17874: ST_TO_ADDR
17875: GO 18201
17877: LD_INT 18
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_ext_radar ; 19 :
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 20
17893: ST_TO_ADDR
17894: GO 18201
17896: LD_INT 19
17898: DOUBLE
17899: EQUAL
17900: IFTRUE 17904
17902: GO 17915
17904: POP
// bc_type := b_ext_radio ; 20 :
17905: LD_ADDR_OWVAR 42
17909: PUSH
17910: LD_INT 22
17912: ST_TO_ADDR
17913: GO 18201
17915: LD_INT 20
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17934
17923: POP
// bc_type := b_ext_siberium ; 21 :
17924: LD_ADDR_OWVAR 42
17928: PUSH
17929: LD_INT 21
17931: ST_TO_ADDR
17932: GO 18201
17934: LD_INT 21
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 17953
17942: POP
// bc_type := b_ext_computer ; 22 :
17943: LD_ADDR_OWVAR 42
17947: PUSH
17948: LD_INT 24
17950: ST_TO_ADDR
17951: GO 18201
17953: LD_INT 22
17955: DOUBLE
17956: EQUAL
17957: IFTRUE 17961
17959: GO 17972
17961: POP
// bc_type := b_ext_track ; 23 :
17962: LD_ADDR_OWVAR 42
17966: PUSH
17967: LD_INT 16
17969: ST_TO_ADDR
17970: GO 18201
17972: LD_INT 23
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 17991
17980: POP
// bc_type := b_ext_laser ; 24 :
17981: LD_ADDR_OWVAR 42
17985: PUSH
17986: LD_INT 25
17988: ST_TO_ADDR
17989: GO 18201
17991: LD_INT 24
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 18010
17999: POP
// bc_type := b_control_tower ; 25 :
18000: LD_ADDR_OWVAR 42
18004: PUSH
18005: LD_INT 36
18007: ST_TO_ADDR
18008: GO 18201
18010: LD_INT 25
18012: DOUBLE
18013: EQUAL
18014: IFTRUE 18018
18016: GO 18029
18018: POP
// bc_type := b_breastwork ; 26 :
18019: LD_ADDR_OWVAR 42
18023: PUSH
18024: LD_INT 31
18026: ST_TO_ADDR
18027: GO 18201
18029: LD_INT 26
18031: DOUBLE
18032: EQUAL
18033: IFTRUE 18037
18035: GO 18048
18037: POP
// bc_type := b_bunker ; 27 :
18038: LD_ADDR_OWVAR 42
18042: PUSH
18043: LD_INT 32
18045: ST_TO_ADDR
18046: GO 18201
18048: LD_INT 27
18050: DOUBLE
18051: EQUAL
18052: IFTRUE 18056
18054: GO 18067
18056: POP
// bc_type := b_turret ; 28 :
18057: LD_ADDR_OWVAR 42
18061: PUSH
18062: LD_INT 33
18064: ST_TO_ADDR
18065: GO 18201
18067: LD_INT 28
18069: DOUBLE
18070: EQUAL
18071: IFTRUE 18075
18073: GO 18086
18075: POP
// bc_type := b_armoury ; 29 :
18076: LD_ADDR_OWVAR 42
18080: PUSH
18081: LD_INT 4
18083: ST_TO_ADDR
18084: GO 18201
18086: LD_INT 29
18088: DOUBLE
18089: EQUAL
18090: IFTRUE 18094
18092: GO 18105
18094: POP
// bc_type := b_barracks ; 30 :
18095: LD_ADDR_OWVAR 42
18099: PUSH
18100: LD_INT 5
18102: ST_TO_ADDR
18103: GO 18201
18105: LD_INT 30
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18124
18113: POP
// bc_type := b_solar_power ; 31 :
18114: LD_ADDR_OWVAR 42
18118: PUSH
18119: LD_INT 27
18121: ST_TO_ADDR
18122: GO 18201
18124: LD_INT 31
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18143
18132: POP
// bc_type := b_oil_power ; 32 :
18133: LD_ADDR_OWVAR 42
18137: PUSH
18138: LD_INT 26
18140: ST_TO_ADDR
18141: GO 18201
18143: LD_INT 32
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18162
18151: POP
// bc_type := b_siberite_power ; 33 :
18152: LD_ADDR_OWVAR 42
18156: PUSH
18157: LD_INT 28
18159: ST_TO_ADDR
18160: GO 18201
18162: LD_INT 33
18164: DOUBLE
18165: EQUAL
18166: IFTRUE 18170
18168: GO 18181
18170: POP
// bc_type := b_oil_mine ; 34 :
18171: LD_ADDR_OWVAR 42
18175: PUSH
18176: LD_INT 29
18178: ST_TO_ADDR
18179: GO 18201
18181: LD_INT 34
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18200
18189: POP
// bc_type := b_siberite_mine ; end ;
18190: LD_ADDR_OWVAR 42
18194: PUSH
18195: LD_INT 30
18197: ST_TO_ADDR
18198: GO 18201
18200: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18201: LD_ADDR_VAR 0 8
18205: PUSH
18206: LD_VAR 0 5
18210: PPUSH
18211: LD_VAR 0 6
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: CALL_OW 47
18225: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18226: LD_OWVAR 42
18230: PUSH
18231: LD_INT 32
18233: PUSH
18234: LD_INT 33
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: IN
18241: IFFALSE 18257
// PlaceWeaponTurret ( b , weapon ) ;
18243: LD_VAR 0 8
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: CALL_OW 431
// end ;
18257: LD_VAR 0 7
18261: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18262: LD_INT 0
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18268: LD_ADDR_VAR 0 4
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 30
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PPUSH
18317: CALL_OW 69
18321: ST_TO_ADDR
// if not tmp then
18322: LD_VAR 0 4
18326: NOT
18327: IFFALSE 18331
// exit ;
18329: GO 18390
// for i in tmp do
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_VAR 0 4
18340: PUSH
18341: FOR_IN
18342: IFFALSE 18388
// for j = 1 to 3 do
18344: LD_ADDR_VAR 0 3
18348: PUSH
18349: DOUBLE
18350: LD_INT 1
18352: DEC
18353: ST_TO_ADDR
18354: LD_INT 3
18356: PUSH
18357: FOR_TO
18358: IFFALSE 18384
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL_OW 274
18369: PPUSH
18370: LD_VAR 0 3
18374: PPUSH
18375: LD_INT 99999
18377: PPUSH
18378: CALL_OW 277
18382: GO 18357
18384: POP
18385: POP
18386: GO 18341
18388: POP
18389: POP
// end ;
18390: LD_VAR 0 1
18394: RET
// export function hHackSetLevel10 ; var i , j ; begin
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
18399: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: PUSH
18420: FOR_IN
18421: IFFALSE 18473
// if IsSelected ( i ) then
18423: LD_VAR 0 2
18427: PPUSH
18428: CALL_OW 306
18432: IFFALSE 18471
// begin for j := 1 to 4 do
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: DOUBLE
18440: LD_INT 1
18442: DEC
18443: ST_TO_ADDR
18444: LD_INT 4
18446: PUSH
18447: FOR_TO
18448: IFFALSE 18469
// SetSkill ( i , j , 10 ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 10
18462: PPUSH
18463: CALL_OW 237
18467: GO 18447
18469: POP
18470: POP
// end ;
18471: GO 18420
18473: POP
18474: POP
// end ;
18475: LD_VAR 0 1
18479: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: PUSH
18521: FOR_IN
18522: IFFALSE 18563
// begin for j := 1 to 4 do
18524: LD_ADDR_VAR 0 3
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_INT 4
18536: PUSH
18537: FOR_TO
18538: IFFALSE 18559
// SetSkill ( i , j , 10 ) ;
18540: LD_VAR 0 2
18544: PPUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 10
18552: PPUSH
18553: CALL_OW 237
18557: GO 18537
18559: POP
18560: POP
// end ;
18561: GO 18521
18563: POP
18564: POP
// end ;
18565: LD_VAR 0 1
18569: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18570: LD_INT 0
18572: PPUSH
// uc_side := your_side ;
18573: LD_ADDR_OWVAR 20
18577: PUSH
18578: LD_OWVAR 2
18582: ST_TO_ADDR
// uc_nation := nation ;
18583: LD_ADDR_OWVAR 21
18587: PUSH
18588: LD_VAR 0 1
18592: ST_TO_ADDR
// InitHc ;
18593: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18597: LD_INT 0
18599: PPUSH
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18614: LD_VAR 0 4
18618: PPUSH
18619: LD_VAR 0 5
18623: PPUSH
18624: CALL_OW 428
18628: PUSH
18629: LD_INT 0
18631: EQUAL
18632: IFFALSE 18656
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18634: CALL_OW 44
18638: PPUSH
18639: LD_VAR 0 4
18643: PPUSH
18644: LD_VAR 0 5
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 48
// end ;
18656: LD_VAR 0 6
18660: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
// uc_side := your_side ;
18665: LD_ADDR_OWVAR 20
18669: PUSH
18670: LD_OWVAR 2
18674: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18675: LD_VAR 0 1
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: LD_INT 3
18688: PUSH
18689: LD_INT 4
18691: PUSH
18692: LD_INT 5
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: IN
18702: IFFALSE 18714
// uc_nation := nation_american else
18704: LD_ADDR_OWVAR 21
18708: PUSH
18709: LD_INT 1
18711: ST_TO_ADDR
18712: GO 18757
// if chassis in [ 11 , 12 , 13 , 14 ] then
18714: LD_VAR 0 1
18718: PUSH
18719: LD_INT 11
18721: PUSH
18722: LD_INT 12
18724: PUSH
18725: LD_INT 13
18727: PUSH
18728: LD_INT 14
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: IN
18737: IFFALSE 18749
// uc_nation := nation_arabian else
18739: LD_ADDR_OWVAR 21
18743: PUSH
18744: LD_INT 2
18746: ST_TO_ADDR
18747: GO 18757
// uc_nation := nation_russian ;
18749: LD_ADDR_OWVAR 21
18753: PUSH
18754: LD_INT 3
18756: ST_TO_ADDR
// vc_chassis := chassis ;
18757: LD_ADDR_OWVAR 37
18761: PUSH
18762: LD_VAR 0 1
18766: ST_TO_ADDR
// vc_engine := engine ;
18767: LD_ADDR_OWVAR 39
18771: PUSH
18772: LD_VAR 0 2
18776: ST_TO_ADDR
// vc_control := control ;
18777: LD_ADDR_OWVAR 38
18781: PUSH
18782: LD_VAR 0 3
18786: ST_TO_ADDR
// vc_weapon := weapon ;
18787: LD_ADDR_OWVAR 40
18791: PUSH
18792: LD_VAR 0 4
18796: ST_TO_ADDR
// un := CreateVehicle ;
18797: LD_ADDR_VAR 0 8
18801: PUSH
18802: CALL_OW 45
18806: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18807: LD_VAR 0 8
18811: PPUSH
18812: LD_INT 0
18814: PPUSH
18815: LD_INT 5
18817: PPUSH
18818: CALL_OW 12
18822: PPUSH
18823: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18827: LD_VAR 0 8
18831: PPUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: LD_VAR 0 6
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 48
// end ;
18849: LD_VAR 0 7
18853: RET
// export hInvincible ; every 1 do
18854: GO 18856
18856: DISABLE
// hInvincible := [ ] ;
18857: LD_ADDR_EXP 72
18861: PUSH
18862: EMPTY
18863: ST_TO_ADDR
18864: END
// every 10 do var i ;
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
// begin enable ;
18871: ENABLE
// if not hInvincible then
18872: LD_EXP 72
18876: NOT
18877: IFFALSE 18881
// exit ;
18879: GO 18925
// for i in hInvincible do
18881: LD_ADDR_VAR 0 1
18885: PUSH
18886: LD_EXP 72
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18923
// if GetLives ( i ) < 1000 then
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 256
18903: PUSH
18904: LD_INT 1000
18906: LESS
18907: IFFALSE 18921
// SetLives ( i , 1000 ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_INT 1000
18916: PPUSH
18917: CALL_OW 234
18921: GO 18891
18923: POP
18924: POP
// end ;
18925: PPOPN 1
18927: END
// export function hHackInvincible ; var i ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 21
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: PUSH
18970: FOR_IN
18971: IFFALSE 19032
// if IsSelected ( i ) then
18973: LD_VAR 0 2
18977: PPUSH
18978: CALL_OW 306
18982: IFFALSE 19030
// begin if i in hInvincible then
18984: LD_VAR 0 2
18988: PUSH
18989: LD_EXP 72
18993: IN
18994: IFFALSE 19014
// hInvincible := hInvincible diff i else
18996: LD_ADDR_EXP 72
19000: PUSH
19001: LD_EXP 72
19005: PUSH
19006: LD_VAR 0 2
19010: DIFF
19011: ST_TO_ADDR
19012: GO 19030
// hInvincible := hInvincible union i ;
19014: LD_ADDR_EXP 72
19018: PUSH
19019: LD_EXP 72
19023: PUSH
19024: LD_VAR 0 2
19028: UNION
19029: ST_TO_ADDR
// end ;
19030: GO 18970
19032: POP
19033: POP
// end ;
19034: LD_VAR 0 1
19038: RET
// export function hHackInvisible ; var i , j ; begin
19039: LD_INT 0
19041: PPUSH
19042: PPUSH
19043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19044: LD_ADDR_VAR 0 2
19048: PUSH
19049: LD_INT 21
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: FOR_IN
19065: IFFALSE 19089
// if IsSelected ( i ) then
19067: LD_VAR 0 2
19071: PPUSH
19072: CALL_OW 306
19076: IFFALSE 19087
// ComForceInvisible ( i ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 496
19087: GO 19064
19089: POP
19090: POP
// end ;
19091: LD_VAR 0 1
19095: RET
// export function hHackChangeYourSide ; begin
19096: LD_INT 0
19098: PPUSH
// if your_side = 8 then
19099: LD_OWVAR 2
19103: PUSH
19104: LD_INT 8
19106: EQUAL
19107: IFFALSE 19119
// your_side := 0 else
19109: LD_ADDR_OWVAR 2
19113: PUSH
19114: LD_INT 0
19116: ST_TO_ADDR
19117: GO 19133
// your_side := your_side + 1 ;
19119: LD_ADDR_OWVAR 2
19123: PUSH
19124: LD_OWVAR 2
19128: PUSH
19129: LD_INT 1
19131: PLUS
19132: ST_TO_ADDR
// end ;
19133: LD_VAR 0 1
19137: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19138: LD_INT 0
19140: PPUSH
19141: PPUSH
19142: PPUSH
// for i in all_units do
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_OWVAR 3
19152: PUSH
19153: FOR_IN
19154: IFFALSE 19232
// if IsSelected ( i ) then
19156: LD_VAR 0 2
19160: PPUSH
19161: CALL_OW 306
19165: IFFALSE 19230
// begin j := GetSide ( i ) ;
19167: LD_ADDR_VAR 0 3
19171: PUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: CALL_OW 255
19181: ST_TO_ADDR
// if j = 8 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 8
19189: EQUAL
19190: IFFALSE 19202
// j := 0 else
19192: LD_ADDR_VAR 0 3
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
19200: GO 19216
// j := j + 1 ;
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 1
19214: PLUS
19215: ST_TO_ADDR
// SetSide ( i , j ) ;
19216: LD_VAR 0 2
19220: PPUSH
19221: LD_VAR 0 3
19225: PPUSH
19226: CALL_OW 235
// end ;
19230: GO 19153
19232: POP
19233: POP
// end ;
19234: LD_VAR 0 1
19238: RET
// export function hHackFog ; begin
19239: LD_INT 0
19241: PPUSH
// FogOff ( true ) ;
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 344
// end ;
19249: LD_VAR 0 1
19253: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19254: LD_INT 0
19256: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_VAR 0 2
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 483
// CenterOnXY ( x , y ) ;
19282: LD_VAR 0 2
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 84
// end ;
19296: LD_VAR 0 4
19300: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19305: LD_VAR 0 1
19309: NOT
19310: PUSH
19311: LD_VAR 0 2
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: CALL_OW 488
19325: NOT
19326: OR
19327: PUSH
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL_OW 266
19337: PUSH
19338: LD_INT 3
19340: NONEQUAL
19341: PUSH
19342: LD_VAR 0 1
19346: PPUSH
19347: CALL_OW 247
19351: PUSH
19352: LD_INT 1
19354: EQUAL
19355: NOT
19356: AND
19357: OR
19358: IFFALSE 19362
// exit ;
19360: GO 19511
// if GetType ( factory ) = unit_human then
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 247
19371: PUSH
19372: LD_INT 1
19374: EQUAL
19375: IFFALSE 19392
// factory := IsInUnit ( factory ) ;
19377: LD_ADDR_VAR 0 1
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 310
19391: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 266
19401: PUSH
19402: LD_INT 3
19404: NONEQUAL
19405: IFFALSE 19409
// exit ;
19407: GO 19511
// if HexInfo ( x , y ) = factory then
19409: LD_VAR 0 2
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 428
19423: PUSH
19424: LD_VAR 0 1
19428: EQUAL
19429: IFFALSE 19456
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19431: LD_ADDR_EXP 73
19435: PUSH
19436: LD_EXP 73
19440: PPUSH
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: CALL_OW 1
19453: ST_TO_ADDR
19454: GO 19507
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19456: LD_ADDR_EXP 73
19460: PUSH
19461: LD_EXP 73
19465: PPUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 255
19480: PUSH
19481: LD_VAR 0 1
19485: PUSH
19486: LD_VAR 0 2
19490: PUSH
19491: LD_VAR 0 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 1
19506: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19507: CALL 19516 0 0
// end ;
19511: LD_VAR 0 4
19515: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
19520: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19521: LD_STRING resetFactoryWaypoint();
19523: PPUSH
19524: CALL_OW 559
// if factoryWaypoints then
19528: LD_EXP 73
19532: IFFALSE 19658
// begin list := PrepareArray ( factoryWaypoints ) ;
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_EXP 73
19543: PPUSH
19544: CALL 66413 0 1
19548: ST_TO_ADDR
// for i := 1 to list do
19549: LD_ADDR_VAR 0 2
19553: PUSH
19554: DOUBLE
19555: LD_INT 1
19557: DEC
19558: ST_TO_ADDR
19559: LD_VAR 0 3
19563: PUSH
19564: FOR_TO
19565: IFFALSE 19656
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19567: LD_STRING setFactoryWaypointXY(
19569: PUSH
19570: LD_VAR 0 3
19574: PUSH
19575: LD_VAR 0 2
19579: ARRAY
19580: PUSH
19581: LD_INT 1
19583: ARRAY
19584: STR
19585: PUSH
19586: LD_STRING ,
19588: STR
19589: PUSH
19590: LD_VAR 0 3
19594: PUSH
19595: LD_VAR 0 2
19599: ARRAY
19600: PUSH
19601: LD_INT 2
19603: ARRAY
19604: STR
19605: PUSH
19606: LD_STRING ,
19608: STR
19609: PUSH
19610: LD_VAR 0 3
19614: PUSH
19615: LD_VAR 0 2
19619: ARRAY
19620: PUSH
19621: LD_INT 3
19623: ARRAY
19624: STR
19625: PUSH
19626: LD_STRING ,
19628: STR
19629: PUSH
19630: LD_VAR 0 3
19634: PUSH
19635: LD_VAR 0 2
19639: ARRAY
19640: PUSH
19641: LD_INT 4
19643: ARRAY
19644: STR
19645: PUSH
19646: LD_STRING )
19648: STR
19649: PPUSH
19650: CALL_OW 559
19654: GO 19564
19656: POP
19657: POP
// end ; end ;
19658: LD_VAR 0 1
19662: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19663: LD_INT 0
19665: PPUSH
// if HexInfo ( x , y ) = warehouse then
19666: LD_VAR 0 2
19670: PPUSH
19671: LD_VAR 0 3
19675: PPUSH
19676: CALL_OW 428
19680: PUSH
19681: LD_VAR 0 1
19685: EQUAL
19686: IFFALSE 19713
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19688: LD_ADDR_EXP 74
19692: PUSH
19693: LD_EXP 74
19697: PPUSH
19698: LD_VAR 0 1
19702: PPUSH
19703: LD_INT 0
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
19711: GO 19764
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19713: LD_ADDR_EXP 74
19717: PUSH
19718: LD_EXP 74
19722: PPUSH
19723: LD_VAR 0 1
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: LD_VAR 0 1
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 3
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: PPUSH
19759: CALL_OW 1
19763: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19764: CALL 19773 0 0
// end ;
19768: LD_VAR 0 4
19772: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19773: LD_INT 0
19775: PPUSH
19776: PPUSH
19777: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19778: LD_STRING resetWarehouseGatheringPoints();
19780: PPUSH
19781: CALL_OW 559
// if warehouseGatheringPoints then
19785: LD_EXP 74
19789: IFFALSE 19915
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_EXP 74
19800: PPUSH
19801: CALL 66413 0 1
19805: ST_TO_ADDR
// for i := 1 to list do
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: DOUBLE
19812: LD_INT 1
19814: DEC
19815: ST_TO_ADDR
19816: LD_VAR 0 3
19820: PUSH
19821: FOR_TO
19822: IFFALSE 19913
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19824: LD_STRING setWarehouseGatheringPointXY(
19826: PUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_VAR 0 2
19836: ARRAY
19837: PUSH
19838: LD_INT 1
19840: ARRAY
19841: STR
19842: PUSH
19843: LD_STRING ,
19845: STR
19846: PUSH
19847: LD_VAR 0 3
19851: PUSH
19852: LD_VAR 0 2
19856: ARRAY
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: STR
19862: PUSH
19863: LD_STRING ,
19865: STR
19866: PUSH
19867: LD_VAR 0 3
19871: PUSH
19872: LD_VAR 0 2
19876: ARRAY
19877: PUSH
19878: LD_INT 3
19880: ARRAY
19881: STR
19882: PUSH
19883: LD_STRING ,
19885: STR
19886: PUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_VAR 0 2
19896: ARRAY
19897: PUSH
19898: LD_INT 4
19900: ARRAY
19901: STR
19902: PUSH
19903: LD_STRING )
19905: STR
19906: PPUSH
19907: CALL_OW 559
19911: GO 19821
19913: POP
19914: POP
// end ; end ;
19915: LD_VAR 0 1
19919: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19920: LD_EXP 74
19924: IFFALSE 20611
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
19937: PPUSH
19938: PPUSH
19939: PPUSH
// begin enable ;
19940: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_EXP 74
19950: PPUSH
19951: CALL 66413 0 1
19955: ST_TO_ADDR
// if not list then
19956: LD_VAR 0 3
19960: NOT
19961: IFFALSE 19965
// exit ;
19963: GO 20611
// for i := 1 to list do
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: DOUBLE
19971: LD_INT 1
19973: DEC
19974: ST_TO_ADDR
19975: LD_VAR 0 3
19979: PUSH
19980: FOR_TO
19981: IFFALSE 20609
// begin depot := list [ i ] [ 2 ] ;
19983: LD_ADDR_VAR 0 8
19987: PUSH
19988: LD_VAR 0 3
19992: PUSH
19993: LD_VAR 0 1
19997: ARRAY
19998: PUSH
19999: LD_INT 2
20001: ARRAY
20002: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20003: LD_ADDR_VAR 0 5
20007: PUSH
20008: LD_VAR 0 3
20012: PUSH
20013: LD_VAR 0 1
20017: ARRAY
20018: PUSH
20019: LD_INT 1
20021: ARRAY
20022: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20023: LD_VAR 0 8
20027: PPUSH
20028: CALL_OW 301
20032: PUSH
20033: LD_VAR 0 5
20037: PUSH
20038: LD_VAR 0 8
20042: PPUSH
20043: CALL_OW 255
20047: NONEQUAL
20048: OR
20049: IFFALSE 20078
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20051: LD_ADDR_EXP 74
20055: PUSH
20056: LD_EXP 74
20060: PPUSH
20061: LD_VAR 0 8
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 1
20073: ST_TO_ADDR
// exit ;
20074: POP
20075: POP
20076: GO 20611
// end ; x := list [ i ] [ 3 ] ;
20078: LD_ADDR_VAR 0 6
20082: PUSH
20083: LD_VAR 0 3
20087: PUSH
20088: LD_VAR 0 1
20092: ARRAY
20093: PUSH
20094: LD_INT 3
20096: ARRAY
20097: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20098: LD_ADDR_VAR 0 7
20102: PUSH
20103: LD_VAR 0 3
20107: PUSH
20108: LD_VAR 0 1
20112: ARRAY
20113: PUSH
20114: LD_INT 4
20116: ARRAY
20117: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20118: LD_ADDR_VAR 0 9
20122: PUSH
20123: LD_VAR 0 6
20127: PPUSH
20128: LD_VAR 0 7
20132: PPUSH
20133: LD_INT 16
20135: PPUSH
20136: CALL 64997 0 3
20140: ST_TO_ADDR
// if not cratesNearbyPoint then
20141: LD_VAR 0 9
20145: NOT
20146: IFFALSE 20152
// exit ;
20148: POP
20149: POP
20150: GO 20611
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20152: LD_ADDR_VAR 0 4
20156: PUSH
20157: LD_INT 22
20159: PUSH
20160: LD_VAR 0 5
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 3
20171: PUSH
20172: LD_INT 60
20174: PUSH
20175: EMPTY
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 91
20184: PUSH
20185: LD_VAR 0 8
20189: PUSH
20190: LD_INT 6
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 25
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 25
20213: PUSH
20214: LD_INT 16
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: PUSH
20237: LD_VAR 0 8
20241: PPUSH
20242: CALL_OW 313
20246: PPUSH
20247: LD_INT 3
20249: PUSH
20250: LD_INT 60
20252: PUSH
20253: EMPTY
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: LD_INT 25
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 25
20275: PUSH
20276: LD_INT 16
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: UNION
20297: ST_TO_ADDR
// if tmp then
20298: LD_VAR 0 4
20302: IFFALSE 20382
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20304: LD_ADDR_VAR 0 4
20308: PUSH
20309: LD_VAR 0 4
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: CALL 62964 0 2
20321: ST_TO_ADDR
// for j in tmp do
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_VAR 0 4
20331: PUSH
20332: FOR_IN
20333: IFFALSE 20376
// begin if IsInUnit ( j ) then
20335: LD_VAR 0 2
20339: PPUSH
20340: CALL_OW 310
20344: IFFALSE 20355
// ComExit ( j ) ;
20346: LD_VAR 0 2
20350: PPUSH
20351: CALL 63047 0 1
// AddComCollect ( j , x , y ) ;
20355: LD_VAR 0 2
20359: PPUSH
20360: LD_VAR 0 6
20364: PPUSH
20365: LD_VAR 0 7
20369: PPUSH
20370: CALL_OW 177
// end ;
20374: GO 20332
20376: POP
20377: POP
// exit ;
20378: POP
20379: POP
20380: GO 20611
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20382: LD_ADDR_VAR 0 4
20386: PUSH
20387: LD_INT 22
20389: PUSH
20390: LD_VAR 0 5
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 91
20401: PUSH
20402: LD_VAR 0 8
20406: PUSH
20407: LD_INT 8
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 34
20420: PUSH
20421: LD_INT 12
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 34
20430: PUSH
20431: LD_INT 51
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 34
20440: PUSH
20441: LD_INT 32
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 34
20450: PUSH
20451: LD_EXP 87
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: PPUSH
20472: CALL_OW 69
20476: ST_TO_ADDR
// if tmp then
20477: LD_VAR 0 4
20481: IFFALSE 20607
// begin for j in tmp do
20483: LD_ADDR_VAR 0 2
20487: PUSH
20488: LD_VAR 0 4
20492: PUSH
20493: FOR_IN
20494: IFFALSE 20605
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20496: LD_VAR 0 2
20500: PPUSH
20501: CALL_OW 262
20505: PUSH
20506: LD_INT 3
20508: EQUAL
20509: PUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: CALL_OW 261
20519: PUSH
20520: LD_INT 20
20522: GREATER
20523: OR
20524: PUSH
20525: LD_VAR 0 2
20529: PPUSH
20530: CALL_OW 314
20534: NOT
20535: AND
20536: PUSH
20537: LD_VAR 0 2
20541: PPUSH
20542: CALL_OW 263
20546: PUSH
20547: LD_INT 1
20549: NONEQUAL
20550: PUSH
20551: LD_VAR 0 2
20555: PPUSH
20556: CALL_OW 311
20560: OR
20561: AND
20562: IFFALSE 20603
// begin ComCollect ( j , x , y ) ;
20564: LD_VAR 0 2
20568: PPUSH
20569: LD_VAR 0 6
20573: PPUSH
20574: LD_VAR 0 7
20578: PPUSH
20579: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20583: LD_VAR 0 2
20587: PPUSH
20588: LD_VAR 0 8
20592: PPUSH
20593: CALL_OW 172
// exit ;
20597: POP
20598: POP
20599: POP
20600: POP
20601: GO 20611
// end ;
20603: GO 20493
20605: POP
20606: POP
// end ; end ;
20607: GO 19980
20609: POP
20610: POP
// end ; end_of_file
20611: PPOPN 9
20613: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 264
20629: PUSH
20630: LD_EXP 90
20634: EQUAL
20635: IFFALSE 20707
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20637: LD_INT 68
20639: PPUSH
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 255
20649: PPUSH
20650: CALL_OW 321
20654: PUSH
20655: LD_INT 2
20657: EQUAL
20658: IFFALSE 20670
// eff := 70 else
20660: LD_ADDR_VAR 0 4
20664: PUSH
20665: LD_INT 70
20667: ST_TO_ADDR
20668: GO 20678
// eff := 30 ;
20670: LD_ADDR_VAR 0 4
20674: PUSH
20675: LD_INT 30
20677: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20678: LD_VAR 0 1
20682: PPUSH
20683: CALL_OW 250
20687: PPUSH
20688: LD_VAR 0 1
20692: PPUSH
20693: CALL_OW 251
20697: PPUSH
20698: LD_VAR 0 4
20702: PPUSH
20703: CALL_OW 495
// end ; end ;
20707: LD_VAR 0 2
20711: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20712: LD_INT 0
20714: PPUSH
// end ;
20715: LD_VAR 0 4
20719: RET
// export function SOS_Command ( cmd ) ; begin
20720: LD_INT 0
20722: PPUSH
// end ;
20723: LD_VAR 0 2
20727: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20728: LD_INT 0
20730: PPUSH
// end ;
20731: LD_VAR 0 6
20735: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
// if not vehicle or not factory then
20740: LD_VAR 0 1
20744: NOT
20745: PUSH
20746: LD_VAR 0 2
20750: NOT
20751: OR
20752: IFFALSE 20756
// exit ;
20754: GO 20987
// if factoryWaypoints >= factory then
20756: LD_EXP 73
20760: PUSH
20761: LD_VAR 0 2
20765: GREATEREQUAL
20766: IFFALSE 20987
// if factoryWaypoints [ factory ] then
20768: LD_EXP 73
20772: PUSH
20773: LD_VAR 0 2
20777: ARRAY
20778: IFFALSE 20987
// begin if GetControl ( vehicle ) = control_manual then
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 263
20789: PUSH
20790: LD_INT 1
20792: EQUAL
20793: IFFALSE 20874
// begin driver := IsDrivenBy ( vehicle ) ;
20795: LD_ADDR_VAR 0 4
20799: PUSH
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL_OW 311
20809: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20810: LD_VAR 0 4
20814: PPUSH
20815: LD_EXP 73
20819: PUSH
20820: LD_VAR 0 2
20824: ARRAY
20825: PUSH
20826: LD_INT 3
20828: ARRAY
20829: PPUSH
20830: LD_EXP 73
20834: PUSH
20835: LD_VAR 0 2
20839: ARRAY
20840: PUSH
20841: LD_INT 4
20843: ARRAY
20844: PPUSH
20845: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20849: LD_VAR 0 4
20853: PPUSH
20854: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_VAR 0 2
20867: PPUSH
20868: CALL_OW 180
// end else
20872: GO 20987
// if GetControl ( vehicle ) = control_remote then
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 263
20883: PUSH
20884: LD_INT 2
20886: EQUAL
20887: IFFALSE 20948
// begin wait ( 0 0$2 ) ;
20889: LD_INT 70
20891: PPUSH
20892: CALL_OW 67
// if Connect ( vehicle ) then
20896: LD_VAR 0 1
20900: PPUSH
20901: CALL 33358 0 1
20905: IFFALSE 20946
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20907: LD_VAR 0 1
20911: PPUSH
20912: LD_EXP 73
20916: PUSH
20917: LD_VAR 0 2
20921: ARRAY
20922: PUSH
20923: LD_INT 3
20925: ARRAY
20926: PPUSH
20927: LD_EXP 73
20931: PUSH
20932: LD_VAR 0 2
20936: ARRAY
20937: PUSH
20938: LD_INT 4
20940: ARRAY
20941: PPUSH
20942: CALL_OW 171
// end else
20946: GO 20987
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20948: LD_VAR 0 1
20952: PPUSH
20953: LD_EXP 73
20957: PUSH
20958: LD_VAR 0 2
20962: ARRAY
20963: PUSH
20964: LD_INT 3
20966: ARRAY
20967: PPUSH
20968: LD_EXP 73
20972: PUSH
20973: LD_VAR 0 2
20977: ARRAY
20978: PUSH
20979: LD_INT 4
20981: ARRAY
20982: PPUSH
20983: CALL_OW 171
// end ; end ;
20987: LD_VAR 0 3
20991: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20992: LD_INT 0
20994: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20995: LD_VAR 0 1
20999: PUSH
21000: LD_INT 250
21002: EQUAL
21003: PUSH
21004: LD_VAR 0 2
21008: PPUSH
21009: CALL_OW 264
21013: PUSH
21014: LD_EXP 93
21018: EQUAL
21019: AND
21020: IFFALSE 21041
// MinerPlaceMine ( unit , x , y ) ;
21022: LD_VAR 0 2
21026: PPUSH
21027: LD_VAR 0 4
21031: PPUSH
21032: LD_VAR 0 5
21036: PPUSH
21037: CALL 23440 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21041: LD_VAR 0 1
21045: PUSH
21046: LD_INT 251
21048: EQUAL
21049: PUSH
21050: LD_VAR 0 2
21054: PPUSH
21055: CALL_OW 264
21059: PUSH
21060: LD_EXP 93
21064: EQUAL
21065: AND
21066: IFFALSE 21087
// MinerDetonateMine ( unit , x , y ) ;
21068: LD_VAR 0 2
21072: PPUSH
21073: LD_VAR 0 4
21077: PPUSH
21078: LD_VAR 0 5
21082: PPUSH
21083: CALL 23717 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21087: LD_VAR 0 1
21091: PUSH
21092: LD_INT 252
21094: EQUAL
21095: PUSH
21096: LD_VAR 0 2
21100: PPUSH
21101: CALL_OW 264
21105: PUSH
21106: LD_EXP 93
21110: EQUAL
21111: AND
21112: IFFALSE 21133
// MinerCreateMinefield ( unit , x , y ) ;
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_VAR 0 4
21123: PPUSH
21124: LD_VAR 0 5
21128: PPUSH
21129: CALL 24134 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21133: LD_VAR 0 1
21137: PUSH
21138: LD_INT 253
21140: EQUAL
21141: PUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: CALL_OW 257
21151: PUSH
21152: LD_INT 5
21154: EQUAL
21155: AND
21156: IFFALSE 21177
// ComBinocular ( unit , x , y ) ;
21158: LD_VAR 0 2
21162: PPUSH
21163: LD_VAR 0 4
21167: PPUSH
21168: LD_VAR 0 5
21172: PPUSH
21173: CALL 24505 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21177: LD_VAR 0 1
21181: PUSH
21182: LD_INT 254
21184: EQUAL
21185: PUSH
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 264
21195: PUSH
21196: LD_EXP 88
21200: EQUAL
21201: AND
21202: PUSH
21203: LD_VAR 0 3
21207: PPUSH
21208: CALL_OW 263
21212: PUSH
21213: LD_INT 3
21215: EQUAL
21216: AND
21217: IFFALSE 21233
// HackDestroyVehicle ( unit , selectedUnit ) ;
21219: LD_VAR 0 2
21223: PPUSH
21224: LD_VAR 0 3
21228: PPUSH
21229: CALL 22800 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 255
21240: EQUAL
21241: PUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 264
21251: PUSH
21252: LD_INT 14
21254: PUSH
21255: LD_INT 53
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: IN
21262: AND
21263: PUSH
21264: LD_VAR 0 4
21268: PPUSH
21269: LD_VAR 0 5
21273: PPUSH
21274: CALL_OW 488
21278: AND
21279: IFFALSE 21303
// CutTreeXYR ( unit , x , y , 12 ) ;
21281: LD_VAR 0 2
21285: PPUSH
21286: LD_VAR 0 4
21290: PPUSH
21291: LD_VAR 0 5
21295: PPUSH
21296: LD_INT 12
21298: PPUSH
21299: CALL 21366 0 4
// if cmd = 256 then
21303: LD_VAR 0 1
21307: PUSH
21308: LD_INT 256
21310: EQUAL
21311: IFFALSE 21332
// SetFactoryWaypoint ( unit , x , y ) ;
21313: LD_VAR 0 2
21317: PPUSH
21318: LD_VAR 0 4
21322: PPUSH
21323: LD_VAR 0 5
21327: PPUSH
21328: CALL 19301 0 3
// if cmd = 257 then
21332: LD_VAR 0 1
21336: PUSH
21337: LD_INT 257
21339: EQUAL
21340: IFFALSE 21361
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21342: LD_VAR 0 2
21346: PPUSH
21347: LD_VAR 0 4
21351: PPUSH
21352: LD_VAR 0 5
21356: PPUSH
21357: CALL 19663 0 3
// end ;
21361: LD_VAR 0 6
21365: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
21370: PPUSH
21371: PPUSH
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
21376: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21377: LD_VAR 0 1
21381: NOT
21382: PUSH
21383: LD_VAR 0 2
21387: PPUSH
21388: LD_VAR 0 3
21392: PPUSH
21393: CALL_OW 488
21397: NOT
21398: OR
21399: PUSH
21400: LD_VAR 0 4
21404: NOT
21405: OR
21406: IFFALSE 21410
// exit ;
21408: GO 21750
// list := [ ] ;
21410: LD_ADDR_VAR 0 13
21414: PUSH
21415: EMPTY
21416: ST_TO_ADDR
// if x - r < 0 then
21417: LD_VAR 0 2
21421: PUSH
21422: LD_VAR 0 4
21426: MINUS
21427: PUSH
21428: LD_INT 0
21430: LESS
21431: IFFALSE 21443
// min_x := 0 else
21433: LD_ADDR_VAR 0 7
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
21441: GO 21459
// min_x := x - r ;
21443: LD_ADDR_VAR 0 7
21447: PUSH
21448: LD_VAR 0 2
21452: PUSH
21453: LD_VAR 0 4
21457: MINUS
21458: ST_TO_ADDR
// if y - r < 0 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_VAR 0 4
21468: MINUS
21469: PUSH
21470: LD_INT 0
21472: LESS
21473: IFFALSE 21485
// min_y := 0 else
21475: LD_ADDR_VAR 0 8
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
21483: GO 21501
// min_y := y - r ;
21485: LD_ADDR_VAR 0 8
21489: PUSH
21490: LD_VAR 0 3
21494: PUSH
21495: LD_VAR 0 4
21499: MINUS
21500: ST_TO_ADDR
// max_x := x + r ;
21501: LD_ADDR_VAR 0 9
21505: PUSH
21506: LD_VAR 0 2
21510: PUSH
21511: LD_VAR 0 4
21515: PLUS
21516: ST_TO_ADDR
// max_y := y + r ;
21517: LD_ADDR_VAR 0 10
21521: PUSH
21522: LD_VAR 0 3
21526: PUSH
21527: LD_VAR 0 4
21531: PLUS
21532: ST_TO_ADDR
// for _x = min_x to max_x do
21533: LD_ADDR_VAR 0 11
21537: PUSH
21538: DOUBLE
21539: LD_VAR 0 7
21543: DEC
21544: ST_TO_ADDR
21545: LD_VAR 0 9
21549: PUSH
21550: FOR_TO
21551: IFFALSE 21668
// for _y = min_y to max_y do
21553: LD_ADDR_VAR 0 12
21557: PUSH
21558: DOUBLE
21559: LD_VAR 0 8
21563: DEC
21564: ST_TO_ADDR
21565: LD_VAR 0 10
21569: PUSH
21570: FOR_TO
21571: IFFALSE 21664
// begin if not ValidHex ( _x , _y ) then
21573: LD_VAR 0 11
21577: PPUSH
21578: LD_VAR 0 12
21582: PPUSH
21583: CALL_OW 488
21587: NOT
21588: IFFALSE 21592
// continue ;
21590: GO 21570
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21592: LD_VAR 0 11
21596: PPUSH
21597: LD_VAR 0 12
21601: PPUSH
21602: CALL_OW 351
21606: PUSH
21607: LD_VAR 0 11
21611: PPUSH
21612: LD_VAR 0 12
21616: PPUSH
21617: CALL_OW 554
21621: AND
21622: IFFALSE 21662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21624: LD_ADDR_VAR 0 13
21628: PUSH
21629: LD_VAR 0 13
21633: PPUSH
21634: LD_VAR 0 13
21638: PUSH
21639: LD_INT 1
21641: PLUS
21642: PPUSH
21643: LD_VAR 0 11
21647: PUSH
21648: LD_VAR 0 12
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PPUSH
21657: CALL_OW 2
21661: ST_TO_ADDR
// end ;
21662: GO 21570
21664: POP
21665: POP
21666: GO 21550
21668: POP
21669: POP
// if not list then
21670: LD_VAR 0 13
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21750
// for i in list do
21679: LD_ADDR_VAR 0 6
21683: PUSH
21684: LD_VAR 0 13
21688: PUSH
21689: FOR_IN
21690: IFFALSE 21748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_STRING M
21699: PUSH
21700: LD_VAR 0 6
21704: PUSH
21705: LD_INT 1
21707: ARRAY
21708: PUSH
21709: LD_VAR 0 6
21713: PUSH
21714: LD_INT 2
21716: ARRAY
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: PPUSH
21742: CALL_OW 447
21746: GO 21689
21748: POP
21749: POP
// end ;
21750: LD_VAR 0 5
21754: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21755: LD_EXP 76
21759: NOT
21760: IFFALSE 21810
21762: GO 21764
21764: DISABLE
// begin initHack := true ;
21765: LD_ADDR_EXP 76
21769: PUSH
21770: LD_INT 1
21772: ST_TO_ADDR
// hackTanks := [ ] ;
21773: LD_ADDR_EXP 77
21777: PUSH
21778: EMPTY
21779: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21780: LD_ADDR_EXP 78
21784: PUSH
21785: EMPTY
21786: ST_TO_ADDR
// hackLimit := 3 ;
21787: LD_ADDR_EXP 79
21791: PUSH
21792: LD_INT 3
21794: ST_TO_ADDR
// hackDist := 12 ;
21795: LD_ADDR_EXP 80
21799: PUSH
21800: LD_INT 12
21802: ST_TO_ADDR
// hackCounter := [ ] ;
21803: LD_ADDR_EXP 81
21807: PUSH
21808: EMPTY
21809: ST_TO_ADDR
// end ;
21810: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21811: LD_EXP 76
21815: PUSH
21816: LD_INT 34
21818: PUSH
21819: LD_EXP 88
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PPUSH
21828: CALL_OW 69
21832: AND
21833: IFFALSE 22088
21835: GO 21837
21837: DISABLE
21838: LD_INT 0
21840: PPUSH
21841: PPUSH
// begin enable ;
21842: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21843: LD_ADDR_VAR 0 1
21847: PUSH
21848: LD_INT 34
21850: PUSH
21851: LD_EXP 88
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PPUSH
21860: CALL_OW 69
21864: PUSH
21865: FOR_IN
21866: IFFALSE 22086
// begin if not i in hackTanks then
21868: LD_VAR 0 1
21872: PUSH
21873: LD_EXP 77
21877: IN
21878: NOT
21879: IFFALSE 21962
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21881: LD_ADDR_EXP 77
21885: PUSH
21886: LD_EXP 77
21890: PPUSH
21891: LD_EXP 77
21895: PUSH
21896: LD_INT 1
21898: PLUS
21899: PPUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 1
21909: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21910: LD_ADDR_EXP 78
21914: PUSH
21915: LD_EXP 78
21919: PPUSH
21920: LD_EXP 78
21924: PUSH
21925: LD_INT 1
21927: PLUS
21928: PPUSH
21929: EMPTY
21930: PPUSH
21931: CALL_OW 1
21935: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21936: LD_ADDR_EXP 81
21940: PUSH
21941: LD_EXP 81
21945: PPUSH
21946: LD_EXP 81
21950: PUSH
21951: LD_INT 1
21953: PLUS
21954: PPUSH
21955: EMPTY
21956: PPUSH
21957: CALL_OW 1
21961: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21962: LD_VAR 0 1
21966: PPUSH
21967: CALL_OW 302
21971: NOT
21972: IFFALSE 21985
// begin HackUnlinkAll ( i ) ;
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL 22091 0 1
// continue ;
21983: GO 21865
// end ; HackCheckCapturedStatus ( i ) ;
21985: LD_VAR 0 1
21989: PPUSH
21990: CALL 22534 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 81
22001: PUSH
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 255
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 33
22018: PUSH
22019: LD_INT 3
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 91
22028: PUSH
22029: LD_VAR 0 1
22033: PUSH
22034: LD_EXP 80
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 50
22046: PUSH
22047: EMPTY
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PPUSH
22056: CALL_OW 69
22060: ST_TO_ADDR
// if not tmp then
22061: LD_VAR 0 2
22065: NOT
22066: IFFALSE 22070
// continue ;
22068: GO 21865
// HackLink ( i , tmp ) ;
22070: LD_VAR 0 1
22074: PPUSH
22075: LD_VAR 0 2
22079: PPUSH
22080: CALL 22227 0 2
// end ;
22084: GO 21865
22086: POP
22087: POP
// end ;
22088: PPOPN 2
22090: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
22095: PPUSH
// if not hack in hackTanks then
22096: LD_VAR 0 1
22100: PUSH
22101: LD_EXP 77
22105: IN
22106: NOT
22107: IFFALSE 22111
// exit ;
22109: GO 22222
// index := GetElementIndex ( hackTanks , hack ) ;
22111: LD_ADDR_VAR 0 4
22115: PUSH
22116: LD_EXP 77
22120: PPUSH
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL 30172 0 2
22130: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22131: LD_EXP 78
22135: PUSH
22136: LD_VAR 0 4
22140: ARRAY
22141: IFFALSE 22222
// begin for i in hackTanksCaptured [ index ] do
22143: LD_ADDR_VAR 0 3
22147: PUSH
22148: LD_EXP 78
22152: PUSH
22153: LD_VAR 0 4
22157: ARRAY
22158: PUSH
22159: FOR_IN
22160: IFFALSE 22186
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22162: LD_VAR 0 3
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: PPUSH
22171: LD_VAR 0 3
22175: PUSH
22176: LD_INT 2
22178: ARRAY
22179: PPUSH
22180: CALL_OW 235
22184: GO 22159
22186: POP
22187: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22188: LD_ADDR_EXP 78
22192: PUSH
22193: LD_EXP 78
22197: PPUSH
22198: LD_VAR 0 4
22202: PPUSH
22203: EMPTY
22204: PPUSH
22205: CALL_OW 1
22209: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 0
22217: PPUSH
22218: CALL_OW 505
// end ; end ;
22222: LD_VAR 0 2
22226: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22227: LD_INT 0
22229: PPUSH
22230: PPUSH
22231: PPUSH
// if not hack in hackTanks or not vehicles then
22232: LD_VAR 0 1
22236: PUSH
22237: LD_EXP 77
22241: IN
22242: NOT
22243: PUSH
22244: LD_VAR 0 2
22248: NOT
22249: OR
22250: IFFALSE 22254
// exit ;
22252: GO 22529
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22254: LD_ADDR_VAR 0 2
22258: PUSH
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_VAR 0 2
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: CALL 30822 0 4
22279: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22280: LD_ADDR_VAR 0 5
22284: PUSH
22285: LD_EXP 77
22289: PPUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL 30172 0 2
22299: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22300: LD_EXP 78
22304: PUSH
22305: LD_VAR 0 5
22309: ARRAY
22310: PUSH
22311: LD_EXP 79
22315: LESS
22316: IFFALSE 22505
// begin for i := 1 to vehicles do
22318: LD_ADDR_VAR 0 4
22322: PUSH
22323: DOUBLE
22324: LD_INT 1
22326: DEC
22327: ST_TO_ADDR
22328: LD_VAR 0 2
22332: PUSH
22333: FOR_TO
22334: IFFALSE 22503
// begin if hackTanksCaptured [ index ] = hackLimit then
22336: LD_EXP 78
22340: PUSH
22341: LD_VAR 0 5
22345: ARRAY
22346: PUSH
22347: LD_EXP 79
22351: EQUAL
22352: IFFALSE 22356
// break ;
22354: GO 22503
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22356: LD_ADDR_EXP 81
22360: PUSH
22361: LD_EXP 81
22365: PPUSH
22366: LD_VAR 0 5
22370: PPUSH
22371: LD_EXP 81
22375: PUSH
22376: LD_VAR 0 5
22380: ARRAY
22381: PUSH
22382: LD_INT 1
22384: PLUS
22385: PPUSH
22386: CALL_OW 1
22390: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22391: LD_ADDR_EXP 78
22395: PUSH
22396: LD_EXP 78
22400: PPUSH
22401: LD_VAR 0 5
22405: PUSH
22406: LD_EXP 78
22410: PUSH
22411: LD_VAR 0 5
22415: ARRAY
22416: PUSH
22417: LD_INT 1
22419: PLUS
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PPUSH
22425: LD_VAR 0 2
22429: PUSH
22430: LD_VAR 0 4
22434: ARRAY
22435: PUSH
22436: LD_VAR 0 2
22440: PUSH
22441: LD_VAR 0 4
22445: ARRAY
22446: PPUSH
22447: CALL_OW 255
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PPUSH
22456: CALL 30387 0 3
22460: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22461: LD_VAR 0 2
22465: PUSH
22466: LD_VAR 0 4
22470: ARRAY
22471: PPUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 255
22481: PPUSH
22482: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22486: LD_VAR 0 2
22490: PUSH
22491: LD_VAR 0 4
22495: ARRAY
22496: PPUSH
22497: CALL_OW 141
// end ;
22501: GO 22333
22503: POP
22504: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22505: LD_VAR 0 1
22509: PPUSH
22510: LD_EXP 78
22514: PUSH
22515: LD_VAR 0 5
22519: ARRAY
22520: PUSH
22521: LD_INT 0
22523: PLUS
22524: PPUSH
22525: CALL_OW 505
// end ;
22529: LD_VAR 0 3
22533: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22534: LD_INT 0
22536: PPUSH
22537: PPUSH
22538: PPUSH
22539: PPUSH
// if not hack in hackTanks then
22540: LD_VAR 0 1
22544: PUSH
22545: LD_EXP 77
22549: IN
22550: NOT
22551: IFFALSE 22555
// exit ;
22553: GO 22795
// index := GetElementIndex ( hackTanks , hack ) ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_EXP 77
22564: PPUSH
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL 30172 0 2
22574: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22575: LD_ADDR_VAR 0 3
22579: PUSH
22580: DOUBLE
22581: LD_EXP 78
22585: PUSH
22586: LD_VAR 0 4
22590: ARRAY
22591: INC
22592: ST_TO_ADDR
22593: LD_INT 1
22595: PUSH
22596: FOR_DOWNTO
22597: IFFALSE 22769
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22599: LD_ADDR_VAR 0 5
22603: PUSH
22604: LD_EXP 78
22608: PUSH
22609: LD_VAR 0 4
22613: ARRAY
22614: PUSH
22615: LD_VAR 0 3
22619: ARRAY
22620: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22621: LD_VAR 0 5
22625: PUSH
22626: LD_INT 1
22628: ARRAY
22629: PPUSH
22630: CALL_OW 302
22634: NOT
22635: PUSH
22636: LD_VAR 0 5
22640: PUSH
22641: LD_INT 1
22643: ARRAY
22644: PPUSH
22645: CALL_OW 255
22649: PUSH
22650: LD_VAR 0 1
22654: PPUSH
22655: CALL_OW 255
22659: NONEQUAL
22660: OR
22661: IFFALSE 22767
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22663: LD_VAR 0 5
22667: PUSH
22668: LD_INT 1
22670: ARRAY
22671: PPUSH
22672: CALL_OW 305
22676: PUSH
22677: LD_VAR 0 5
22681: PUSH
22682: LD_INT 1
22684: ARRAY
22685: PPUSH
22686: CALL_OW 255
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 255
22700: EQUAL
22701: AND
22702: IFFALSE 22726
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22704: LD_VAR 0 5
22708: PUSH
22709: LD_INT 1
22711: ARRAY
22712: PPUSH
22713: LD_VAR 0 5
22717: PUSH
22718: LD_INT 2
22720: ARRAY
22721: PPUSH
22722: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22726: LD_ADDR_EXP 78
22730: PUSH
22731: LD_EXP 78
22735: PPUSH
22736: LD_VAR 0 4
22740: PPUSH
22741: LD_EXP 78
22745: PUSH
22746: LD_VAR 0 4
22750: ARRAY
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 3
22761: PPUSH
22762: CALL_OW 1
22766: ST_TO_ADDR
// end ; end ;
22767: GO 22596
22769: POP
22770: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22771: LD_VAR 0 1
22775: PPUSH
22776: LD_EXP 78
22780: PUSH
22781: LD_VAR 0 4
22785: ARRAY
22786: PUSH
22787: LD_INT 0
22789: PLUS
22790: PPUSH
22791: CALL_OW 505
// end ;
22795: LD_VAR 0 2
22799: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
// if not hack in hackTanks then
22806: LD_VAR 0 1
22810: PUSH
22811: LD_EXP 77
22815: IN
22816: NOT
22817: IFFALSE 22821
// exit ;
22819: GO 22906
// index := GetElementIndex ( hackTanks , hack ) ;
22821: LD_ADDR_VAR 0 5
22825: PUSH
22826: LD_EXP 77
22830: PPUSH
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL 30172 0 2
22840: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22841: LD_ADDR_VAR 0 4
22845: PUSH
22846: DOUBLE
22847: LD_INT 1
22849: DEC
22850: ST_TO_ADDR
22851: LD_EXP 78
22855: PUSH
22856: LD_VAR 0 5
22860: ARRAY
22861: PUSH
22862: FOR_TO
22863: IFFALSE 22904
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22865: LD_EXP 78
22869: PUSH
22870: LD_VAR 0 5
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 4
22880: ARRAY
22881: PUSH
22882: LD_INT 1
22884: ARRAY
22885: PUSH
22886: LD_VAR 0 2
22890: EQUAL
22891: IFFALSE 22902
// KillUnit ( vehicle ) ;
22893: LD_VAR 0 2
22897: PPUSH
22898: CALL_OW 66
22902: GO 22862
22904: POP
22905: POP
// end ;
22906: LD_VAR 0 3
22910: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22911: LD_EXP 82
22915: NOT
22916: IFFALSE 22951
22918: GO 22920
22920: DISABLE
// begin initMiner := true ;
22921: LD_ADDR_EXP 82
22925: PUSH
22926: LD_INT 1
22928: ST_TO_ADDR
// minersList := [ ] ;
22929: LD_ADDR_EXP 83
22933: PUSH
22934: EMPTY
22935: ST_TO_ADDR
// minerMinesList := [ ] ;
22936: LD_ADDR_EXP 84
22940: PUSH
22941: EMPTY
22942: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22943: LD_ADDR_EXP 85
22947: PUSH
22948: LD_INT 5
22950: ST_TO_ADDR
// end ;
22951: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22952: LD_EXP 82
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_EXP 93
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 69
22973: AND
22974: IFFALSE 23437
22976: GO 22978
22978: DISABLE
22979: LD_INT 0
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
// begin enable ;
22985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22986: LD_ADDR_VAR 0 1
22990: PUSH
22991: LD_INT 34
22993: PUSH
22994: LD_EXP 93
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PPUSH
23003: CALL_OW 69
23007: PUSH
23008: FOR_IN
23009: IFFALSE 23081
// begin if not i in minersList then
23011: LD_VAR 0 1
23015: PUSH
23016: LD_EXP 83
23020: IN
23021: NOT
23022: IFFALSE 23079
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23024: LD_ADDR_EXP 83
23028: PUSH
23029: LD_EXP 83
23033: PPUSH
23034: LD_EXP 83
23038: PUSH
23039: LD_INT 1
23041: PLUS
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 1
23052: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23053: LD_ADDR_EXP 84
23057: PUSH
23058: LD_EXP 84
23062: PPUSH
23063: LD_EXP 84
23067: PUSH
23068: LD_INT 1
23070: PLUS
23071: PPUSH
23072: EMPTY
23073: PPUSH
23074: CALL_OW 1
23078: ST_TO_ADDR
// end end ;
23079: GO 23008
23081: POP
23082: POP
// for i := minerMinesList downto 1 do
23083: LD_ADDR_VAR 0 1
23087: PUSH
23088: DOUBLE
23089: LD_EXP 84
23093: INC
23094: ST_TO_ADDR
23095: LD_INT 1
23097: PUSH
23098: FOR_DOWNTO
23099: IFFALSE 23435
// begin if IsLive ( minersList [ i ] ) then
23101: LD_EXP 83
23105: PUSH
23106: LD_VAR 0 1
23110: ARRAY
23111: PPUSH
23112: CALL_OW 300
23116: IFFALSE 23144
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23118: LD_EXP 83
23122: PUSH
23123: LD_VAR 0 1
23127: ARRAY
23128: PPUSH
23129: LD_EXP 84
23133: PUSH
23134: LD_VAR 0 1
23138: ARRAY
23139: PPUSH
23140: CALL_OW 505
// if not minerMinesList [ i ] then
23144: LD_EXP 84
23148: PUSH
23149: LD_VAR 0 1
23153: ARRAY
23154: NOT
23155: IFFALSE 23159
// continue ;
23157: GO 23098
// for j := minerMinesList [ i ] downto 1 do
23159: LD_ADDR_VAR 0 2
23163: PUSH
23164: DOUBLE
23165: LD_EXP 84
23169: PUSH
23170: LD_VAR 0 1
23174: ARRAY
23175: INC
23176: ST_TO_ADDR
23177: LD_INT 1
23179: PUSH
23180: FOR_DOWNTO
23181: IFFALSE 23431
// begin side := GetSide ( minersList [ i ] ) ;
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_EXP 83
23192: PUSH
23193: LD_VAR 0 1
23197: ARRAY
23198: PPUSH
23199: CALL_OW 255
23203: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23204: LD_ADDR_VAR 0 4
23208: PUSH
23209: LD_EXP 84
23213: PUSH
23214: LD_VAR 0 1
23218: ARRAY
23219: PUSH
23220: LD_VAR 0 2
23224: ARRAY
23225: PUSH
23226: LD_INT 1
23228: ARRAY
23229: PPUSH
23230: LD_EXP 84
23234: PUSH
23235: LD_VAR 0 1
23239: ARRAY
23240: PUSH
23241: LD_VAR 0 2
23245: ARRAY
23246: PUSH
23247: LD_INT 2
23249: ARRAY
23250: PPUSH
23251: CALL_OW 428
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 4
23260: NOT
23261: IFFALSE 23265
// continue ;
23263: GO 23180
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23265: LD_VAR 0 4
23269: PUSH
23270: LD_INT 81
23272: PUSH
23273: LD_VAR 0 3
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PPUSH
23282: CALL_OW 69
23286: IN
23287: PUSH
23288: LD_EXP 84
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PUSH
23299: LD_VAR 0 2
23303: ARRAY
23304: PUSH
23305: LD_INT 1
23307: ARRAY
23308: PPUSH
23309: LD_EXP 84
23313: PUSH
23314: LD_VAR 0 1
23318: ARRAY
23319: PUSH
23320: LD_VAR 0 2
23324: ARRAY
23325: PUSH
23326: LD_INT 2
23328: ARRAY
23329: PPUSH
23330: CALL_OW 458
23334: AND
23335: IFFALSE 23429
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23337: LD_EXP 84
23341: PUSH
23342: LD_VAR 0 1
23346: ARRAY
23347: PUSH
23348: LD_VAR 0 2
23352: ARRAY
23353: PUSH
23354: LD_INT 1
23356: ARRAY
23357: PPUSH
23358: LD_EXP 84
23362: PUSH
23363: LD_VAR 0 1
23367: ARRAY
23368: PUSH
23369: LD_VAR 0 2
23373: ARRAY
23374: PUSH
23375: LD_INT 2
23377: ARRAY
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23388: LD_ADDR_EXP 84
23392: PUSH
23393: LD_EXP 84
23397: PPUSH
23398: LD_VAR 0 1
23402: PPUSH
23403: LD_EXP 84
23407: PUSH
23408: LD_VAR 0 1
23412: ARRAY
23413: PPUSH
23414: LD_VAR 0 2
23418: PPUSH
23419: CALL_OW 3
23423: PPUSH
23424: CALL_OW 1
23428: ST_TO_ADDR
// end ; end ;
23429: GO 23180
23431: POP
23432: POP
// end ;
23433: GO 23098
23435: POP
23436: POP
// end ;
23437: PPOPN 4
23439: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23440: LD_INT 0
23442: PPUSH
23443: PPUSH
// result := false ;
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: LD_INT 0
23451: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 264
23461: PUSH
23462: LD_EXP 93
23466: EQUAL
23467: NOT
23468: IFFALSE 23472
// exit ;
23470: GO 23712
// index := GetElementIndex ( minersList , unit ) ;
23472: LD_ADDR_VAR 0 5
23476: PUSH
23477: LD_EXP 83
23481: PPUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL 30172 0 2
23491: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23492: LD_EXP 84
23496: PUSH
23497: LD_VAR 0 5
23501: ARRAY
23502: PUSH
23503: LD_EXP 85
23507: GREATEREQUAL
23508: IFFALSE 23512
// exit ;
23510: GO 23712
// ComMoveXY ( unit , x , y ) ;
23512: LD_VAR 0 1
23516: PPUSH
23517: LD_VAR 0 2
23521: PPUSH
23522: LD_VAR 0 3
23526: PPUSH
23527: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23531: LD_INT 35
23533: PPUSH
23534: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23538: LD_VAR 0 1
23542: PPUSH
23543: LD_VAR 0 2
23547: PPUSH
23548: LD_VAR 0 3
23552: PPUSH
23553: CALL 61458 0 3
23557: NOT
23558: PUSH
23559: LD_VAR 0 1
23563: PPUSH
23564: CALL_OW 314
23568: AND
23569: IFFALSE 23573
// exit ;
23571: GO 23712
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23573: LD_VAR 0 2
23577: PPUSH
23578: LD_VAR 0 3
23582: PPUSH
23583: CALL_OW 428
23587: PUSH
23588: LD_VAR 0 1
23592: EQUAL
23593: PUSH
23594: LD_VAR 0 1
23598: PPUSH
23599: CALL_OW 314
23603: NOT
23604: AND
23605: IFFALSE 23531
// PlaySoundXY ( x , y , PlantMine ) ;
23607: LD_VAR 0 2
23611: PPUSH
23612: LD_VAR 0 3
23616: PPUSH
23617: LD_STRING PlantMine
23619: PPUSH
23620: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 255
23643: PPUSH
23644: LD_INT 0
23646: PPUSH
23647: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23651: LD_ADDR_EXP 84
23655: PUSH
23656: LD_EXP 84
23660: PPUSH
23661: LD_VAR 0 5
23665: PUSH
23666: LD_EXP 84
23670: PUSH
23671: LD_VAR 0 5
23675: ARRAY
23676: PUSH
23677: LD_INT 1
23679: PLUS
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PPUSH
23685: LD_VAR 0 2
23689: PUSH
23690: LD_VAR 0 3
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PPUSH
23699: CALL 30387 0 3
23703: ST_TO_ADDR
// result := true ;
23704: LD_ADDR_VAR 0 4
23708: PUSH
23709: LD_INT 1
23711: ST_TO_ADDR
// end ;
23712: LD_VAR 0 4
23716: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23717: LD_INT 0
23719: PPUSH
23720: PPUSH
23721: PPUSH
// if not unit in minersList then
23722: LD_VAR 0 1
23726: PUSH
23727: LD_EXP 83
23731: IN
23732: NOT
23733: IFFALSE 23737
// exit ;
23735: GO 24129
// index := GetElementIndex ( minersList , unit ) ;
23737: LD_ADDR_VAR 0 6
23741: PUSH
23742: LD_EXP 83
23746: PPUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL 30172 0 2
23756: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23757: LD_ADDR_VAR 0 5
23761: PUSH
23762: DOUBLE
23763: LD_EXP 84
23767: PUSH
23768: LD_VAR 0 6
23772: ARRAY
23773: INC
23774: ST_TO_ADDR
23775: LD_INT 1
23777: PUSH
23778: FOR_DOWNTO
23779: IFFALSE 23940
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23781: LD_EXP 84
23785: PUSH
23786: LD_VAR 0 6
23790: ARRAY
23791: PUSH
23792: LD_VAR 0 5
23796: ARRAY
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: PUSH
23802: LD_VAR 0 2
23806: EQUAL
23807: PUSH
23808: LD_EXP 84
23812: PUSH
23813: LD_VAR 0 6
23817: ARRAY
23818: PUSH
23819: LD_VAR 0 5
23823: ARRAY
23824: PUSH
23825: LD_INT 2
23827: ARRAY
23828: PUSH
23829: LD_VAR 0 3
23833: EQUAL
23834: AND
23835: IFFALSE 23938
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23837: LD_EXP 84
23841: PUSH
23842: LD_VAR 0 6
23846: ARRAY
23847: PUSH
23848: LD_VAR 0 5
23852: ARRAY
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: PPUSH
23858: LD_EXP 84
23862: PUSH
23863: LD_VAR 0 6
23867: ARRAY
23868: PUSH
23869: LD_VAR 0 5
23873: ARRAY
23874: PUSH
23875: LD_INT 2
23877: ARRAY
23878: PPUSH
23879: LD_VAR 0 1
23883: PPUSH
23884: CALL_OW 255
23888: PPUSH
23889: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23893: LD_ADDR_EXP 84
23897: PUSH
23898: LD_EXP 84
23902: PPUSH
23903: LD_VAR 0 6
23907: PPUSH
23908: LD_EXP 84
23912: PUSH
23913: LD_VAR 0 6
23917: ARRAY
23918: PPUSH
23919: LD_VAR 0 5
23923: PPUSH
23924: CALL_OW 3
23928: PPUSH
23929: CALL_OW 1
23933: ST_TO_ADDR
// exit ;
23934: POP
23935: POP
23936: GO 24129
// end ; end ;
23938: GO 23778
23940: POP
23941: POP
// for i := minerMinesList [ index ] downto 1 do
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: DOUBLE
23948: LD_EXP 84
23952: PUSH
23953: LD_VAR 0 6
23957: ARRAY
23958: INC
23959: ST_TO_ADDR
23960: LD_INT 1
23962: PUSH
23963: FOR_DOWNTO
23964: IFFALSE 24127
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23966: LD_EXP 84
23970: PUSH
23971: LD_VAR 0 6
23975: ARRAY
23976: PUSH
23977: LD_VAR 0 5
23981: ARRAY
23982: PUSH
23983: LD_INT 1
23985: ARRAY
23986: PPUSH
23987: LD_EXP 84
23991: PUSH
23992: LD_VAR 0 6
23996: ARRAY
23997: PUSH
23998: LD_VAR 0 5
24002: ARRAY
24003: PUSH
24004: LD_INT 2
24006: ARRAY
24007: PPUSH
24008: LD_VAR 0 2
24012: PPUSH
24013: LD_VAR 0 3
24017: PPUSH
24018: CALL_OW 298
24022: PUSH
24023: LD_INT 6
24025: LESS
24026: IFFALSE 24125
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24028: LD_EXP 84
24032: PUSH
24033: LD_VAR 0 6
24037: ARRAY
24038: PUSH
24039: LD_VAR 0 5
24043: ARRAY
24044: PUSH
24045: LD_INT 1
24047: ARRAY
24048: PPUSH
24049: LD_EXP 84
24053: PUSH
24054: LD_VAR 0 6
24058: ARRAY
24059: PUSH
24060: LD_VAR 0 5
24064: ARRAY
24065: PUSH
24066: LD_INT 2
24068: ARRAY
24069: PPUSH
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 255
24079: PPUSH
24080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24084: LD_ADDR_EXP 84
24088: PUSH
24089: LD_EXP 84
24093: PPUSH
24094: LD_VAR 0 6
24098: PPUSH
24099: LD_EXP 84
24103: PUSH
24104: LD_VAR 0 6
24108: ARRAY
24109: PPUSH
24110: LD_VAR 0 5
24114: PPUSH
24115: CALL_OW 3
24119: PPUSH
24120: CALL_OW 1
24124: ST_TO_ADDR
// end ; end ;
24125: GO 23963
24127: POP
24128: POP
// end ;
24129: LD_VAR 0 4
24133: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24134: LD_INT 0
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 264
24154: PUSH
24155: LD_EXP 93
24159: EQUAL
24160: NOT
24161: PUSH
24162: LD_VAR 0 1
24166: PUSH
24167: LD_EXP 83
24171: IN
24172: NOT
24173: OR
24174: IFFALSE 24178
// exit ;
24176: GO 24500
// index := GetElementIndex ( minersList , unit ) ;
24178: LD_ADDR_VAR 0 6
24182: PUSH
24183: LD_EXP 83
24187: PPUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL 30172 0 2
24197: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24198: LD_ADDR_VAR 0 8
24202: PUSH
24203: LD_EXP 85
24207: PUSH
24208: LD_EXP 84
24212: PUSH
24213: LD_VAR 0 6
24217: ARRAY
24218: MINUS
24219: ST_TO_ADDR
// if not minesFreeAmount then
24220: LD_VAR 0 8
24224: NOT
24225: IFFALSE 24229
// exit ;
24227: GO 24500
// tmp := [ ] ;
24229: LD_ADDR_VAR 0 7
24233: PUSH
24234: EMPTY
24235: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24236: LD_ADDR_VAR 0 5
24240: PUSH
24241: DOUBLE
24242: LD_INT 1
24244: DEC
24245: ST_TO_ADDR
24246: LD_VAR 0 8
24250: PUSH
24251: FOR_TO
24252: IFFALSE 24447
// begin _d := rand ( 0 , 5 ) ;
24254: LD_ADDR_VAR 0 11
24258: PUSH
24259: LD_INT 0
24261: PPUSH
24262: LD_INT 5
24264: PPUSH
24265: CALL_OW 12
24269: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24270: LD_ADDR_VAR 0 12
24274: PUSH
24275: LD_INT 2
24277: PPUSH
24278: LD_INT 6
24280: PPUSH
24281: CALL_OW 12
24285: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24286: LD_ADDR_VAR 0 9
24290: PUSH
24291: LD_VAR 0 2
24295: PPUSH
24296: LD_VAR 0 11
24300: PPUSH
24301: LD_VAR 0 12
24305: PPUSH
24306: CALL_OW 272
24310: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24311: LD_ADDR_VAR 0 10
24315: PUSH
24316: LD_VAR 0 3
24320: PPUSH
24321: LD_VAR 0 11
24325: PPUSH
24326: LD_VAR 0 12
24330: PPUSH
24331: CALL_OW 273
24335: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24336: LD_VAR 0 9
24340: PPUSH
24341: LD_VAR 0 10
24345: PPUSH
24346: CALL_OW 488
24350: PUSH
24351: LD_VAR 0 9
24355: PUSH
24356: LD_VAR 0 10
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_VAR 0 7
24369: IN
24370: NOT
24371: AND
24372: PUSH
24373: LD_VAR 0 9
24377: PPUSH
24378: LD_VAR 0 10
24382: PPUSH
24383: CALL_OW 458
24387: NOT
24388: AND
24389: IFFALSE 24431
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24391: LD_ADDR_VAR 0 7
24395: PUSH
24396: LD_VAR 0 7
24400: PPUSH
24401: LD_VAR 0 7
24405: PUSH
24406: LD_INT 1
24408: PLUS
24409: PPUSH
24410: LD_VAR 0 9
24414: PUSH
24415: LD_VAR 0 10
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 1
24428: ST_TO_ADDR
24429: GO 24445
// i := i - 1 ;
24431: LD_ADDR_VAR 0 5
24435: PUSH
24436: LD_VAR 0 5
24440: PUSH
24441: LD_INT 1
24443: MINUS
24444: ST_TO_ADDR
// end ;
24445: GO 24251
24447: POP
24448: POP
// for i in tmp do
24449: LD_ADDR_VAR 0 5
24453: PUSH
24454: LD_VAR 0 7
24458: PUSH
24459: FOR_IN
24460: IFFALSE 24498
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24462: LD_VAR 0 1
24466: PPUSH
24467: LD_VAR 0 5
24471: PUSH
24472: LD_INT 1
24474: ARRAY
24475: PPUSH
24476: LD_VAR 0 5
24480: PUSH
24481: LD_INT 2
24483: ARRAY
24484: PPUSH
24485: CALL 23440 0 3
24489: NOT
24490: IFFALSE 24496
// exit ;
24492: POP
24493: POP
24494: GO 24500
24496: GO 24459
24498: POP
24499: POP
// end ;
24500: LD_VAR 0 4
24504: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
24512: PPUSH
24513: PPUSH
// if not GetClass ( unit ) = class_sniper then
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 257
24523: PUSH
24524: LD_INT 5
24526: EQUAL
24527: NOT
24528: IFFALSE 24532
// exit ;
24530: GO 24920
// dist := 8 ;
24532: LD_ADDR_VAR 0 5
24536: PUSH
24537: LD_INT 8
24539: ST_TO_ADDR
// viewRange := 12 ;
24540: LD_ADDR_VAR 0 7
24544: PUSH
24545: LD_INT 12
24547: ST_TO_ADDR
// side := GetSide ( unit ) ;
24548: LD_ADDR_VAR 0 6
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 255
24562: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24563: LD_INT 61
24565: PPUSH
24566: LD_VAR 0 6
24570: PPUSH
24571: CALL_OW 321
24575: PUSH
24576: LD_INT 2
24578: EQUAL
24579: IFFALSE 24589
// viewRange := 16 ;
24581: LD_ADDR_VAR 0 7
24585: PUSH
24586: LD_INT 16
24588: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_VAR 0 2
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: CALL_OW 297
24608: PUSH
24609: LD_VAR 0 5
24613: GREATER
24614: IFFALSE 24693
// begin ComMoveXY ( unit , x , y ) ;
24616: LD_VAR 0 1
24620: PPUSH
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24635: LD_INT 35
24637: PPUSH
24638: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24642: LD_VAR 0 1
24646: PPUSH
24647: LD_VAR 0 2
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: CALL 61458 0 3
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24920
// until GetDistUnitXY ( unit , x , y ) < dist ;
24666: LD_VAR 0 1
24670: PPUSH
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: CALL_OW 297
24685: PUSH
24686: LD_VAR 0 5
24690: LESS
24691: IFFALSE 24635
// end ; ComTurnXY ( unit , x , y ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 118
// wait ( 5 ) ;
24712: LD_INT 5
24714: PPUSH
24715: CALL_OW 67
// _d := GetDir ( unit ) ;
24719: LD_ADDR_VAR 0 10
24723: PUSH
24724: LD_VAR 0 1
24728: PPUSH
24729: CALL_OW 254
24733: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24734: LD_ADDR_VAR 0 8
24738: PUSH
24739: LD_VAR 0 1
24743: PPUSH
24744: CALL_OW 250
24748: PPUSH
24749: LD_VAR 0 10
24753: PPUSH
24754: LD_VAR 0 5
24758: PPUSH
24759: CALL_OW 272
24763: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24764: LD_ADDR_VAR 0 9
24768: PUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 251
24778: PPUSH
24779: LD_VAR 0 10
24783: PPUSH
24784: LD_VAR 0 5
24788: PPUSH
24789: CALL_OW 273
24793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24794: LD_VAR 0 8
24798: PPUSH
24799: LD_VAR 0 9
24803: PPUSH
24804: CALL_OW 488
24808: NOT
24809: IFFALSE 24813
// exit ;
24811: GO 24920
// ComAnimCustom ( unit , 1 ) ;
24813: LD_VAR 0 1
24817: PPUSH
24818: LD_INT 1
24820: PPUSH
24821: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24825: LD_VAR 0 8
24829: PPUSH
24830: LD_VAR 0 9
24834: PPUSH
24835: LD_VAR 0 6
24839: PPUSH
24840: LD_VAR 0 7
24844: PPUSH
24845: CALL_OW 330
// repeat wait ( 1 ) ;
24849: LD_INT 1
24851: PPUSH
24852: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24856: LD_VAR 0 1
24860: PPUSH
24861: CALL_OW 316
24865: PUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 314
24875: OR
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: CALL_OW 302
24886: NOT
24887: OR
24888: PUSH
24889: LD_VAR 0 1
24893: PPUSH
24894: CALL_OW 301
24898: OR
24899: IFFALSE 24849
// RemoveSeeing ( _x , _y , side ) ;
24901: LD_VAR 0 8
24905: PPUSH
24906: LD_VAR 0 9
24910: PPUSH
24911: LD_VAR 0 6
24915: PPUSH
24916: CALL_OW 331
// end ; end_of_file
24920: LD_VAR 0 4
24924: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24925: LD_VAR 0 1
24929: PUSH
24930: LD_INT 200
24932: DOUBLE
24933: GREATEREQUAL
24934: IFFALSE 24942
24936: LD_INT 299
24938: DOUBLE
24939: LESSEQUAL
24940: IFTRUE 24944
24942: GO 24976
24944: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24945: LD_VAR 0 1
24949: PPUSH
24950: LD_VAR 0 2
24954: PPUSH
24955: LD_VAR 0 3
24959: PPUSH
24960: LD_VAR 0 4
24964: PPUSH
24965: LD_VAR 0 5
24969: PPUSH
24970: CALL 20992 0 5
24974: GO 25053
24976: LD_INT 300
24978: DOUBLE
24979: GREATEREQUAL
24980: IFFALSE 24988
24982: LD_INT 399
24984: DOUBLE
24985: LESSEQUAL
24986: IFTRUE 24990
24988: GO 25052
24990: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24991: LD_VAR 0 1
24995: PPUSH
24996: LD_VAR 0 2
25000: PPUSH
25001: LD_VAR 0 3
25005: PPUSH
25006: LD_VAR 0 4
25010: PPUSH
25011: LD_VAR 0 5
25015: PPUSH
25016: LD_VAR 0 6
25020: PPUSH
25021: LD_VAR 0 7
25025: PPUSH
25026: LD_VAR 0 8
25030: PPUSH
25031: LD_VAR 0 9
25035: PPUSH
25036: LD_VAR 0 10
25040: PPUSH
25041: LD_VAR 0 11
25045: PPUSH
25046: CALL 17321 0 11
25050: GO 25053
25052: POP
// end ;
25053: PPOPN 11
25055: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: LD_VAR 0 4
25075: PPUSH
25076: LD_VAR 0 5
25080: PPUSH
25081: CALL 20728 0 5
// end ; end_of_file
25085: PPOPN 5
25087: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
25088: LD_INT 0
25090: PPUSH
// ar_miner := 81 ;
25091: LD_ADDR_EXP 93
25095: PUSH
25096: LD_INT 81
25098: ST_TO_ADDR
// ar_crane := 88 ;
25099: LD_ADDR_EXP 92
25103: PUSH
25104: LD_INT 88
25106: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25107: LD_ADDR_EXP 87
25111: PUSH
25112: LD_INT 89
25114: ST_TO_ADDR
// us_hack := 99 ;
25115: LD_ADDR_EXP 88
25119: PUSH
25120: LD_INT 99
25122: ST_TO_ADDR
// us_artillery := 97 ;
25123: LD_ADDR_EXP 89
25127: PUSH
25128: LD_INT 97
25130: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25131: LD_ADDR_EXP 90
25135: PUSH
25136: LD_INT 91
25138: ST_TO_ADDR
// ar_mortar := 92 ;
25139: LD_ADDR_EXP 91
25143: PUSH
25144: LD_INT 92
25146: ST_TO_ADDR
// ru_flamethrower := 93 ;
25147: LD_ADDR_EXP 94
25151: PUSH
25152: LD_INT 93
25154: ST_TO_ADDR
// ru_radar := 98 ;
25155: LD_ADDR_EXP 86
25159: PUSH
25160: LD_INT 98
25162: ST_TO_ADDR
// tech_Artillery := 80 ;
25163: LD_ADDR_EXP 95
25167: PUSH
25168: LD_INT 80
25170: ST_TO_ADDR
// tech_RadMat := 81 ;
25171: LD_ADDR_EXP 96
25175: PUSH
25176: LD_INT 81
25178: ST_TO_ADDR
// tech_BasicTools := 82 ;
25179: LD_ADDR_EXP 97
25183: PUSH
25184: LD_INT 82
25186: ST_TO_ADDR
// tech_Cargo := 83 ;
25187: LD_ADDR_EXP 98
25191: PUSH
25192: LD_INT 83
25194: ST_TO_ADDR
// tech_Track := 84 ;
25195: LD_ADDR_EXP 99
25199: PUSH
25200: LD_INT 84
25202: ST_TO_ADDR
// tech_Crane := 85 ;
25203: LD_ADDR_EXP 100
25207: PUSH
25208: LD_INT 85
25210: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25211: LD_ADDR_EXP 101
25215: PUSH
25216: LD_INT 86
25218: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25219: LD_ADDR_EXP 102
25223: PUSH
25224: LD_INT 87
25226: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
25227: LD_ADDR_EXP 103
25231: PUSH
25232: LD_INT 88
25234: ST_TO_ADDR
// end ;
25235: LD_VAR 0 1
25239: RET
// every 1 do
25240: GO 25242
25242: DISABLE
// InitGlobalVariables ; end_of_file
25243: CALL 25088 0 0
25247: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
// if exist_mode then
25252: LD_VAR 0 2
25256: IFFALSE 25281
// unit := CreateCharacter ( prefix & ident ) else
25258: LD_ADDR_VAR 0 5
25262: PUSH
25263: LD_VAR 0 3
25267: PUSH
25268: LD_VAR 0 1
25272: STR
25273: PPUSH
25274: CALL_OW 34
25278: ST_TO_ADDR
25279: GO 25296
// unit := NewCharacter ( ident ) ;
25281: LD_ADDR_VAR 0 5
25285: PUSH
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 25
25295: ST_TO_ADDR
// result := unit ;
25296: LD_ADDR_VAR 0 4
25300: PUSH
25301: LD_VAR 0 5
25305: ST_TO_ADDR
// end ;
25306: LD_VAR 0 4
25310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
// if not side or not nation then
25315: LD_VAR 0 1
25319: NOT
25320: PUSH
25321: LD_VAR 0 2
25325: NOT
25326: OR
25327: IFFALSE 25331
// exit ;
25329: GO 26099
// case nation of nation_american :
25331: LD_VAR 0 2
25335: PUSH
25336: LD_INT 1
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 25558
25344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: LD_INT 35
25352: PUSH
25353: LD_INT 45
25355: PUSH
25356: LD_INT 46
25358: PUSH
25359: LD_INT 47
25361: PUSH
25362: LD_INT 82
25364: PUSH
25365: LD_INT 83
25367: PUSH
25368: LD_INT 84
25370: PUSH
25371: LD_INT 85
25373: PUSH
25374: LD_INT 86
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 6
25385: PUSH
25386: LD_INT 15
25388: PUSH
25389: LD_INT 16
25391: PUSH
25392: LD_INT 7
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 13
25400: PUSH
25401: LD_INT 10
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: LD_INT 20
25409: PUSH
25410: LD_INT 21
25412: PUSH
25413: LD_INT 22
25415: PUSH
25416: LD_INT 25
25418: PUSH
25419: LD_INT 32
25421: PUSH
25422: LD_INT 27
25424: PUSH
25425: LD_INT 36
25427: PUSH
25428: LD_INT 69
25430: PUSH
25431: LD_INT 39
25433: PUSH
25434: LD_INT 34
25436: PUSH
25437: LD_INT 40
25439: PUSH
25440: LD_INT 48
25442: PUSH
25443: LD_INT 49
25445: PUSH
25446: LD_INT 50
25448: PUSH
25449: LD_INT 51
25451: PUSH
25452: LD_INT 52
25454: PUSH
25455: LD_INT 53
25457: PUSH
25458: LD_INT 54
25460: PUSH
25461: LD_INT 55
25463: PUSH
25464: LD_INT 56
25466: PUSH
25467: LD_INT 57
25469: PUSH
25470: LD_INT 58
25472: PUSH
25473: LD_INT 59
25475: PUSH
25476: LD_INT 60
25478: PUSH
25479: LD_INT 61
25481: PUSH
25482: LD_INT 62
25484: PUSH
25485: LD_INT 80
25487: PUSH
25488: LD_INT 82
25490: PUSH
25491: LD_INT 83
25493: PUSH
25494: LD_INT 84
25496: PUSH
25497: LD_INT 85
25499: PUSH
25500: LD_INT 86
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: ST_TO_ADDR
25556: GO 26023
25558: LD_INT 2
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25792
25566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25567: LD_ADDR_VAR 0 4
25571: PUSH
25572: LD_INT 35
25574: PUSH
25575: LD_INT 45
25577: PUSH
25578: LD_INT 46
25580: PUSH
25581: LD_INT 47
25583: PUSH
25584: LD_INT 82
25586: PUSH
25587: LD_INT 83
25589: PUSH
25590: LD_INT 84
25592: PUSH
25593: LD_INT 85
25595: PUSH
25596: LD_INT 87
25598: PUSH
25599: LD_INT 70
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 11
25607: PUSH
25608: LD_INT 3
25610: PUSH
25611: LD_INT 4
25613: PUSH
25614: LD_INT 5
25616: PUSH
25617: LD_INT 6
25619: PUSH
25620: LD_INT 15
25622: PUSH
25623: LD_INT 18
25625: PUSH
25626: LD_INT 7
25628: PUSH
25629: LD_INT 17
25631: PUSH
25632: LD_INT 8
25634: PUSH
25635: LD_INT 20
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_INT 72
25646: PUSH
25647: LD_INT 26
25649: PUSH
25650: LD_INT 69
25652: PUSH
25653: LD_INT 39
25655: PUSH
25656: LD_INT 40
25658: PUSH
25659: LD_INT 41
25661: PUSH
25662: LD_INT 42
25664: PUSH
25665: LD_INT 43
25667: PUSH
25668: LD_INT 48
25670: PUSH
25671: LD_INT 49
25673: PUSH
25674: LD_INT 50
25676: PUSH
25677: LD_INT 51
25679: PUSH
25680: LD_INT 52
25682: PUSH
25683: LD_INT 53
25685: PUSH
25686: LD_INT 54
25688: PUSH
25689: LD_INT 55
25691: PUSH
25692: LD_INT 56
25694: PUSH
25695: LD_INT 60
25697: PUSH
25698: LD_INT 61
25700: PUSH
25701: LD_INT 62
25703: PUSH
25704: LD_INT 66
25706: PUSH
25707: LD_INT 67
25709: PUSH
25710: LD_INT 68
25712: PUSH
25713: LD_INT 81
25715: PUSH
25716: LD_INT 82
25718: PUSH
25719: LD_INT 83
25721: PUSH
25722: LD_INT 84
25724: PUSH
25725: LD_INT 85
25727: PUSH
25728: LD_INT 87
25730: PUSH
25731: LD_INT 88
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: ST_TO_ADDR
25790: GO 26023
25792: LD_INT 3
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25800
25798: GO 26022
25800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25801: LD_ADDR_VAR 0 4
25805: PUSH
25806: LD_INT 46
25808: PUSH
25809: LD_INT 47
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 82
25820: PUSH
25821: LD_INT 83
25823: PUSH
25824: LD_INT 84
25826: PUSH
25827: LD_INT 85
25829: PUSH
25830: LD_INT 86
25832: PUSH
25833: LD_INT 11
25835: PUSH
25836: LD_INT 9
25838: PUSH
25839: LD_INT 20
25841: PUSH
25842: LD_INT 19
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 24
25850: PUSH
25851: LD_INT 22
25853: PUSH
25854: LD_INT 25
25856: PUSH
25857: LD_INT 28
25859: PUSH
25860: LD_INT 29
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_INT 31
25868: PUSH
25869: LD_INT 37
25871: PUSH
25872: LD_INT 38
25874: PUSH
25875: LD_INT 32
25877: PUSH
25878: LD_INT 27
25880: PUSH
25881: LD_INT 33
25883: PUSH
25884: LD_INT 69
25886: PUSH
25887: LD_INT 39
25889: PUSH
25890: LD_INT 34
25892: PUSH
25893: LD_INT 40
25895: PUSH
25896: LD_INT 71
25898: PUSH
25899: LD_INT 23
25901: PUSH
25902: LD_INT 44
25904: PUSH
25905: LD_INT 48
25907: PUSH
25908: LD_INT 49
25910: PUSH
25911: LD_INT 50
25913: PUSH
25914: LD_INT 51
25916: PUSH
25917: LD_INT 52
25919: PUSH
25920: LD_INT 53
25922: PUSH
25923: LD_INT 54
25925: PUSH
25926: LD_INT 55
25928: PUSH
25929: LD_INT 56
25931: PUSH
25932: LD_INT 57
25934: PUSH
25935: LD_INT 58
25937: PUSH
25938: LD_INT 59
25940: PUSH
25941: LD_INT 63
25943: PUSH
25944: LD_INT 64
25946: PUSH
25947: LD_INT 65
25949: PUSH
25950: LD_INT 82
25952: PUSH
25953: LD_INT 83
25955: PUSH
25956: LD_INT 84
25958: PUSH
25959: LD_INT 85
25961: PUSH
25962: LD_INT 86
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
26020: GO 26023
26022: POP
// if state > - 1 and state < 3 then
26023: LD_VAR 0 3
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: GREATER
26032: PUSH
26033: LD_VAR 0 3
26037: PUSH
26038: LD_INT 3
26040: LESS
26041: AND
26042: IFFALSE 26099
// for i in result do
26044: LD_ADDR_VAR 0 5
26048: PUSH
26049: LD_VAR 0 4
26053: PUSH
26054: FOR_IN
26055: IFFALSE 26097
// if GetTech ( i , side ) <> state then
26057: LD_VAR 0 5
26061: PPUSH
26062: LD_VAR 0 1
26066: PPUSH
26067: CALL_OW 321
26071: PUSH
26072: LD_VAR 0 3
26076: NONEQUAL
26077: IFFALSE 26095
// result := result diff i ;
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_VAR 0 4
26088: PUSH
26089: LD_VAR 0 5
26093: DIFF
26094: ST_TO_ADDR
26095: GO 26054
26097: POP
26098: POP
// end ;
26099: LD_VAR 0 4
26103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26104: LD_INT 0
26106: PPUSH
26107: PPUSH
26108: PPUSH
// result := true ;
26109: LD_ADDR_VAR 0 3
26113: PUSH
26114: LD_INT 1
26116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_VAR 0 2
26126: PPUSH
26127: CALL_OW 480
26131: ST_TO_ADDR
// if not tmp then
26132: LD_VAR 0 5
26136: NOT
26137: IFFALSE 26141
// exit ;
26139: GO 26190
// for i in tmp do
26141: LD_ADDR_VAR 0 4
26145: PUSH
26146: LD_VAR 0 5
26150: PUSH
26151: FOR_IN
26152: IFFALSE 26188
// if GetTech ( i , side ) <> state_researched then
26154: LD_VAR 0 4
26158: PPUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 321
26168: PUSH
26169: LD_INT 2
26171: NONEQUAL
26172: IFFALSE 26186
// begin result := false ;
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 0
26181: ST_TO_ADDR
// exit ;
26182: POP
26183: POP
26184: GO 26190
// end ;
26186: GO 26151
26188: POP
26189: POP
// end ;
26190: LD_VAR 0 3
26194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26210: LD_VAR 0 1
26214: NOT
26215: PUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 257
26225: PUSH
26226: LD_INT 9
26228: NONEQUAL
26229: OR
26230: IFFALSE 26234
// exit ;
26232: GO 26807
// side := GetSide ( unit ) ;
26234: LD_ADDR_VAR 0 9
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 255
26248: ST_TO_ADDR
// tech_space := tech_spacanom ;
26249: LD_ADDR_VAR 0 12
26253: PUSH
26254: LD_INT 29
26256: ST_TO_ADDR
// tech_time := tech_taurad ;
26257: LD_ADDR_VAR 0 13
26261: PUSH
26262: LD_INT 28
26264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26265: LD_ADDR_VAR 0 11
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 310
26279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26280: LD_VAR 0 11
26284: PPUSH
26285: CALL_OW 247
26289: PUSH
26290: LD_INT 2
26292: EQUAL
26293: IFFALSE 26297
// exit ;
26295: GO 26807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26297: LD_ADDR_VAR 0 8
26301: PUSH
26302: LD_INT 81
26304: PUSH
26305: LD_VAR 0 9
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: LD_INT 21
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PPUSH
26335: CALL_OW 69
26339: ST_TO_ADDR
// if not tmp then
26340: LD_VAR 0 8
26344: NOT
26345: IFFALSE 26349
// exit ;
26347: GO 26807
// if in_unit then
26349: LD_VAR 0 11
26353: IFFALSE 26377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26355: LD_ADDR_VAR 0 10
26359: PUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: LD_VAR 0 11
26369: PPUSH
26370: CALL_OW 74
26374: ST_TO_ADDR
26375: GO 26397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26377: LD_ADDR_VAR 0 10
26381: PUSH
26382: LD_VAR 0 8
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL_OW 74
26396: ST_TO_ADDR
// if not enemy then
26397: LD_VAR 0 10
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 26807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26406: LD_VAR 0 11
26410: PUSH
26411: LD_VAR 0 11
26415: PPUSH
26416: LD_VAR 0 10
26420: PPUSH
26421: CALL_OW 296
26425: PUSH
26426: LD_INT 13
26428: GREATER
26429: AND
26430: PUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: LD_VAR 0 10
26440: PPUSH
26441: CALL_OW 296
26445: PUSH
26446: LD_INT 12
26448: GREATER
26449: OR
26450: IFFALSE 26454
// exit ;
26452: GO 26807
// missile := [ 1 ] ;
26454: LD_ADDR_VAR 0 14
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26465: LD_VAR 0 9
26469: PPUSH
26470: LD_VAR 0 12
26474: PPUSH
26475: CALL_OW 325
26479: IFFALSE 26508
// missile := Replace ( missile , missile + 1 , 2 ) ;
26481: LD_ADDR_VAR 0 14
26485: PUSH
26486: LD_VAR 0 14
26490: PPUSH
26491: LD_VAR 0 14
26495: PUSH
26496: LD_INT 1
26498: PLUS
26499: PPUSH
26500: LD_INT 2
26502: PPUSH
26503: CALL_OW 1
26507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26508: LD_VAR 0 9
26512: PPUSH
26513: LD_VAR 0 13
26517: PPUSH
26518: CALL_OW 325
26522: PUSH
26523: LD_VAR 0 10
26527: PPUSH
26528: CALL_OW 255
26532: PPUSH
26533: LD_VAR 0 13
26537: PPUSH
26538: CALL_OW 325
26542: NOT
26543: AND
26544: IFFALSE 26573
// missile := Replace ( missile , missile + 1 , 3 ) ;
26546: LD_ADDR_VAR 0 14
26550: PUSH
26551: LD_VAR 0 14
26555: PPUSH
26556: LD_VAR 0 14
26560: PUSH
26561: LD_INT 1
26563: PLUS
26564: PPUSH
26565: LD_INT 3
26567: PPUSH
26568: CALL_OW 1
26572: ST_TO_ADDR
// if missile < 2 then
26573: LD_VAR 0 14
26577: PUSH
26578: LD_INT 2
26580: LESS
26581: IFFALSE 26585
// exit ;
26583: GO 26807
// x := GetX ( enemy ) ;
26585: LD_ADDR_VAR 0 4
26589: PUSH
26590: LD_VAR 0 10
26594: PPUSH
26595: CALL_OW 250
26599: ST_TO_ADDR
// y := GetY ( enemy ) ;
26600: LD_ADDR_VAR 0 5
26604: PUSH
26605: LD_VAR 0 10
26609: PPUSH
26610: CALL_OW 251
26614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26615: LD_ADDR_VAR 0 6
26619: PUSH
26620: LD_VAR 0 4
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PPUSH
26629: LD_INT 1
26631: PPUSH
26632: CALL_OW 12
26636: PLUS
26637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26638: LD_ADDR_VAR 0 7
26642: PUSH
26643: LD_VAR 0 5
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PPUSH
26652: LD_INT 1
26654: PPUSH
26655: CALL_OW 12
26659: PLUS
26660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26661: LD_VAR 0 6
26665: PPUSH
26666: LD_VAR 0 7
26670: PPUSH
26671: CALL_OW 488
26675: NOT
26676: IFFALSE 26698
// begin _x := x ;
26678: LD_ADDR_VAR 0 6
26682: PUSH
26683: LD_VAR 0 4
26687: ST_TO_ADDR
// _y := y ;
26688: LD_ADDR_VAR 0 7
26692: PUSH
26693: LD_VAR 0 5
26697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26698: LD_ADDR_VAR 0 3
26702: PUSH
26703: LD_INT 1
26705: PPUSH
26706: LD_VAR 0 14
26710: PPUSH
26711: CALL_OW 12
26715: ST_TO_ADDR
// case i of 1 :
26716: LD_VAR 0 3
26720: PUSH
26721: LD_INT 1
26723: DOUBLE
26724: EQUAL
26725: IFTRUE 26729
26727: GO 26746
26729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_VAR 0 10
26739: PPUSH
26740: CALL_OW 115
26744: GO 26807
26746: LD_INT 2
26748: DOUBLE
26749: EQUAL
26750: IFTRUE 26754
26752: GO 26776
26754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_VAR 0 6
26764: PPUSH
26765: LD_VAR 0 7
26769: PPUSH
26770: CALL_OW 153
26774: GO 26807
26776: LD_INT 3
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26806
26784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26785: LD_VAR 0 1
26789: PPUSH
26790: LD_VAR 0 6
26794: PPUSH
26795: LD_VAR 0 7
26799: PPUSH
26800: CALL_OW 154
26804: GO 26807
26806: POP
// end ;
26807: LD_VAR 0 2
26811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
// if not unit or not building then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: NOT
26831: OR
26832: IFFALSE 26836
// exit ;
26834: GO 26994
// x := GetX ( building ) ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_VAR 0 2
26845: PPUSH
26846: CALL_OW 250
26850: ST_TO_ADDR
// y := GetY ( building ) ;
26851: LD_ADDR_VAR 0 6
26855: PUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 251
26865: ST_TO_ADDR
// for i = 0 to 5 do
26866: LD_ADDR_VAR 0 4
26870: PUSH
26871: DOUBLE
26872: LD_INT 0
26874: DEC
26875: ST_TO_ADDR
26876: LD_INT 5
26878: PUSH
26879: FOR_TO
26880: IFFALSE 26992
// begin _x := ShiftX ( x , i , 3 ) ;
26882: LD_ADDR_VAR 0 7
26886: PUSH
26887: LD_VAR 0 5
26891: PPUSH
26892: LD_VAR 0 4
26896: PPUSH
26897: LD_INT 3
26899: PPUSH
26900: CALL_OW 272
26904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26905: LD_ADDR_VAR 0 8
26909: PUSH
26910: LD_VAR 0 6
26914: PPUSH
26915: LD_VAR 0 4
26919: PPUSH
26920: LD_INT 3
26922: PPUSH
26923: CALL_OW 273
26927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26928: LD_VAR 0 7
26932: PPUSH
26933: LD_VAR 0 8
26937: PPUSH
26938: CALL_OW 488
26942: NOT
26943: IFFALSE 26947
// continue ;
26945: GO 26879
// if HexInfo ( _x , _y ) = 0 then
26947: LD_VAR 0 7
26951: PPUSH
26952: LD_VAR 0 8
26956: PPUSH
26957: CALL_OW 428
26961: PUSH
26962: LD_INT 0
26964: EQUAL
26965: IFFALSE 26990
// begin ComMoveXY ( unit , _x , _y ) ;
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_VAR 0 7
26976: PPUSH
26977: LD_VAR 0 8
26981: PPUSH
26982: CALL_OW 111
// exit ;
26986: POP
26987: POP
26988: GO 26994
// end ; end ;
26990: GO 26879
26992: POP
26993: POP
// end ;
26994: LD_VAR 0 3
26998: RET
// export function ScanBase ( side , base_area ) ; begin
26999: LD_INT 0
27001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: LD_INT 81
27014: PUSH
27015: LD_VAR 0 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 70
27028: ST_TO_ADDR
// end ;
27029: LD_VAR 0 3
27033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27034: LD_INT 0
27036: PPUSH
27037: PPUSH
27038: PPUSH
27039: PPUSH
// result := false ;
27040: LD_ADDR_VAR 0 2
27044: PUSH
27045: LD_INT 0
27047: ST_TO_ADDR
// side := GetSide ( unit ) ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 255
27062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 248
27077: ST_TO_ADDR
// case nat of 1 :
27078: LD_VAR 0 4
27082: PUSH
27083: LD_INT 1
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27102
27091: POP
// tech := tech_lassight ; 2 :
27092: LD_ADDR_VAR 0 5
27096: PUSH
27097: LD_INT 12
27099: ST_TO_ADDR
27100: GO 27141
27102: LD_INT 2
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27121
27110: POP
// tech := tech_mortar ; 3 :
27111: LD_ADDR_VAR 0 5
27115: PUSH
27116: LD_INT 41
27118: ST_TO_ADDR
27119: GO 27141
27121: LD_INT 3
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27140
27129: POP
// tech := tech_bazooka ; end ;
27130: LD_ADDR_VAR 0 5
27134: PUSH
27135: LD_INT 44
27137: ST_TO_ADDR
27138: GO 27141
27140: POP
// if Researched ( side , tech ) then
27141: LD_VAR 0 3
27145: PPUSH
27146: LD_VAR 0 5
27150: PPUSH
27151: CALL_OW 325
27155: IFFALSE 27182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27157: LD_ADDR_VAR 0 2
27161: PUSH
27162: LD_INT 5
27164: PUSH
27165: LD_INT 8
27167: PUSH
27168: LD_INT 9
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: LD_VAR 0 4
27180: ARRAY
27181: ST_TO_ADDR
// end ;
27182: LD_VAR 0 2
27186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27187: LD_INT 0
27189: PPUSH
27190: PPUSH
27191: PPUSH
// if not mines then
27192: LD_VAR 0 2
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27201: LD_ADDR_VAR 0 5
27205: PUSH
27206: LD_INT 81
27208: PUSH
27209: LD_VAR 0 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: PUSH
27221: LD_INT 21
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: ST_TO_ADDR
// for i in mines do
27244: LD_ADDR_VAR 0 4
27248: PUSH
27249: LD_VAR 0 2
27253: PUSH
27254: FOR_IN
27255: IFFALSE 27343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27257: LD_VAR 0 4
27261: PUSH
27262: LD_INT 1
27264: ARRAY
27265: PPUSH
27266: LD_VAR 0 4
27270: PUSH
27271: LD_INT 2
27273: ARRAY
27274: PPUSH
27275: CALL_OW 458
27279: NOT
27280: IFFALSE 27284
// continue ;
27282: GO 27254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27284: LD_VAR 0 4
27288: PUSH
27289: LD_INT 1
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 4
27297: PUSH
27298: LD_INT 2
27300: ARRAY
27301: PPUSH
27302: CALL_OW 428
27306: PUSH
27307: LD_VAR 0 5
27311: IN
27312: IFFALSE 27341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27314: LD_VAR 0 4
27318: PUSH
27319: LD_INT 1
27321: ARRAY
27322: PPUSH
27323: LD_VAR 0 4
27327: PUSH
27328: LD_INT 2
27330: ARRAY
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 456
// end ;
27341: GO 27254
27343: POP
27344: POP
// end ;
27345: LD_VAR 0 3
27349: RET
// export function Count ( array ) ; var i ; begin
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
// result := 0 ;
27354: LD_ADDR_VAR 0 2
27358: PUSH
27359: LD_INT 0
27361: ST_TO_ADDR
// for i in array do
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_VAR 0 1
27371: PUSH
27372: FOR_IN
27373: IFFALSE 27397
// if i then
27375: LD_VAR 0 3
27379: IFFALSE 27395
// result := result + 1 ;
27381: LD_ADDR_VAR 0 2
27385: PUSH
27386: LD_VAR 0 2
27390: PUSH
27391: LD_INT 1
27393: PLUS
27394: ST_TO_ADDR
27395: GO 27372
27397: POP
27398: POP
// end ;
27399: LD_VAR 0 2
27403: RET
// export function IsEmpty ( building ) ; begin
27404: LD_INT 0
27406: PPUSH
// if not building then
27407: LD_VAR 0 1
27411: NOT
27412: IFFALSE 27416
// exit ;
27414: GO 27459
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27416: LD_ADDR_VAR 0 2
27420: PUSH
27421: LD_VAR 0 1
27425: PUSH
27426: LD_INT 22
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: CALL_OW 255
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 58
27445: PUSH
27446: EMPTY
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PPUSH
27453: CALL_OW 69
27457: IN
27458: ST_TO_ADDR
// end ;
27459: LD_VAR 0 2
27463: RET
// export function IsNotFull ( building ) ; var places ; begin
27464: LD_INT 0
27466: PPUSH
27467: PPUSH
// if not building then
27468: LD_VAR 0 1
27472: NOT
27473: IFFALSE 27477
// exit ;
27475: GO 27648
// result := false ;
27477: LD_ADDR_VAR 0 2
27481: PUSH
27482: LD_INT 0
27484: ST_TO_ADDR
// places := 0 ;
27485: LD_ADDR_VAR 0 3
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 266
27502: PUSH
27503: LD_INT 0
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27565
27509: LD_INT 1
27511: DOUBLE
27512: EQUAL
27513: IFTRUE 27565
27515: LD_INT 6
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27565
27521: LD_INT 7
27523: DOUBLE
27524: EQUAL
27525: IFTRUE 27565
27527: LD_INT 8
27529: DOUBLE
27530: EQUAL
27531: IFTRUE 27565
27533: LD_INT 4
27535: DOUBLE
27536: EQUAL
27537: IFTRUE 27565
27539: LD_INT 5
27541: DOUBLE
27542: EQUAL
27543: IFTRUE 27565
27545: LD_INT 2
27547: DOUBLE
27548: EQUAL
27549: IFTRUE 27565
27551: LD_INT 3
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27565
27557: LD_INT 35
27559: DOUBLE
27560: EQUAL
27561: IFTRUE 27565
27563: GO 27576
27565: POP
// places := 6 ; b_bunker , b_breastwork :
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: LD_INT 6
27573: ST_TO_ADDR
27574: GO 27621
27576: LD_INT 32
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27590
27582: LD_INT 31
27584: DOUBLE
27585: EQUAL
27586: IFTRUE 27590
27588: GO 27601
27590: POP
// places := 1 ; b_control_tower :
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: LD_INT 1
27598: ST_TO_ADDR
27599: GO 27621
27601: LD_INT 36
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27620
27609: POP
// places := 3 ; end ;
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_INT 3
27617: ST_TO_ADDR
27618: GO 27621
27620: POP
// if places then
27621: LD_VAR 0 3
27625: IFFALSE 27648
// result := UnitsInside ( building ) < places ;
27627: LD_ADDR_VAR 0 2
27631: PUSH
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 313
27641: PUSH
27642: LD_VAR 0 3
27646: LESS
27647: ST_TO_ADDR
// end ;
27648: LD_VAR 0 2
27652: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27653: LD_INT 0
27655: PPUSH
27656: PPUSH
27657: PPUSH
27658: PPUSH
// tmp := [ ] ;
27659: LD_ADDR_VAR 0 3
27663: PUSH
27664: EMPTY
27665: ST_TO_ADDR
// list := [ ] ;
27666: LD_ADDR_VAR 0 5
27670: PUSH
27671: EMPTY
27672: ST_TO_ADDR
// for i = 16 to 25 do
27673: LD_ADDR_VAR 0 4
27677: PUSH
27678: DOUBLE
27679: LD_INT 16
27681: DEC
27682: ST_TO_ADDR
27683: LD_INT 25
27685: PUSH
27686: FOR_TO
27687: IFFALSE 27760
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27689: LD_ADDR_VAR 0 3
27693: PUSH
27694: LD_VAR 0 3
27698: PUSH
27699: LD_INT 22
27701: PUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 255
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 91
27718: PUSH
27719: LD_VAR 0 1
27723: PUSH
27724: LD_INT 6
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_VAR 0 4
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: PPUSH
27752: CALL_OW 69
27756: ADD
27757: ST_TO_ADDR
27758: GO 27686
27760: POP
27761: POP
// for i = 1 to tmp do
27762: LD_ADDR_VAR 0 4
27766: PUSH
27767: DOUBLE
27768: LD_INT 1
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 3
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27866
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27780: LD_ADDR_VAR 0 5
27784: PUSH
27785: LD_VAR 0 5
27789: PUSH
27790: LD_VAR 0 3
27794: PUSH
27795: LD_VAR 0 4
27799: ARRAY
27800: PPUSH
27801: CALL_OW 266
27805: PUSH
27806: LD_VAR 0 3
27810: PUSH
27811: LD_VAR 0 4
27815: ARRAY
27816: PPUSH
27817: CALL_OW 250
27821: PUSH
27822: LD_VAR 0 3
27826: PUSH
27827: LD_VAR 0 4
27831: ARRAY
27832: PPUSH
27833: CALL_OW 251
27837: PUSH
27838: LD_VAR 0 3
27842: PUSH
27843: LD_VAR 0 4
27847: ARRAY
27848: PPUSH
27849: CALL_OW 254
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: ADD
27863: ST_TO_ADDR
27864: GO 27777
27866: POP
27867: POP
// result := list ;
27868: LD_ADDR_VAR 0 2
27872: PUSH
27873: LD_VAR 0 5
27877: ST_TO_ADDR
// end ;
27878: LD_VAR 0 2
27882: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27883: LD_INT 0
27885: PPUSH
27886: PPUSH
27887: PPUSH
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
// if not factory then
27892: LD_VAR 0 1
27896: NOT
27897: IFFALSE 27901
// exit ;
27899: GO 28494
// if control = control_apeman then
27901: LD_VAR 0 4
27905: PUSH
27906: LD_INT 5
27908: EQUAL
27909: IFFALSE 28018
// begin tmp := UnitsInside ( factory ) ;
27911: LD_ADDR_VAR 0 8
27915: PUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: CALL_OW 313
27925: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27926: LD_VAR 0 8
27930: PPUSH
27931: LD_INT 25
27933: PUSH
27934: LD_INT 12
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PPUSH
27941: CALL_OW 72
27945: NOT
27946: IFFALSE 27956
// control := control_manual ;
27948: LD_ADDR_VAR 0 4
27952: PUSH
27953: LD_INT 1
27955: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27956: LD_ADDR_VAR 0 8
27960: PUSH
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL 27653 0 1
27970: ST_TO_ADDR
// if tmp then
27971: LD_VAR 0 8
27975: IFFALSE 28018
// begin for i in tmp do
27977: LD_ADDR_VAR 0 7
27981: PUSH
27982: LD_VAR 0 8
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28016
// if i [ 1 ] = b_ext_radio then
27990: LD_VAR 0 7
27994: PUSH
27995: LD_INT 1
27997: ARRAY
27998: PUSH
27999: LD_INT 22
28001: EQUAL
28002: IFFALSE 28014
// begin control := control_remote ;
28004: LD_ADDR_VAR 0 4
28008: PUSH
28009: LD_INT 2
28011: ST_TO_ADDR
// break ;
28012: GO 28016
// end ;
28014: GO 27987
28016: POP
28017: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28018: LD_VAR 0 1
28022: PPUSH
28023: LD_VAR 0 2
28027: PPUSH
28028: LD_VAR 0 3
28032: PPUSH
28033: LD_VAR 0 4
28037: PPUSH
28038: LD_VAR 0 5
28042: PPUSH
28043: CALL_OW 448
28047: IFFALSE 28082
// begin result := [ chassis , engine , control , weapon ] ;
28049: LD_ADDR_VAR 0 6
28053: PUSH
28054: LD_VAR 0 2
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 4
28068: PUSH
28069: LD_VAR 0 5
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
// exit ;
28080: GO 28494
// end ; _chassis := AvailableChassisList ( factory ) ;
28082: LD_ADDR_VAR 0 9
28086: PUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 475
28096: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28097: LD_ADDR_VAR 0 11
28101: PUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 476
28111: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28112: LD_ADDR_VAR 0 12
28116: PUSH
28117: LD_VAR 0 1
28121: PPUSH
28122: CALL_OW 477
28126: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28127: LD_ADDR_VAR 0 10
28131: PUSH
28132: LD_VAR 0 1
28136: PPUSH
28137: CALL_OW 478
28141: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28142: LD_VAR 0 9
28146: NOT
28147: PUSH
28148: LD_VAR 0 11
28152: NOT
28153: OR
28154: PUSH
28155: LD_VAR 0 12
28159: NOT
28160: OR
28161: PUSH
28162: LD_VAR 0 10
28166: NOT
28167: OR
28168: IFFALSE 28203
// begin result := [ chassis , engine , control , weapon ] ;
28170: LD_ADDR_VAR 0 6
28174: PUSH
28175: LD_VAR 0 2
28179: PUSH
28180: LD_VAR 0 3
28184: PUSH
28185: LD_VAR 0 4
28189: PUSH
28190: LD_VAR 0 5
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// exit ;
28201: GO 28494
// end ; if not chassis in _chassis then
28203: LD_VAR 0 2
28207: PUSH
28208: LD_VAR 0 9
28212: IN
28213: NOT
28214: IFFALSE 28240
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28216: LD_ADDR_VAR 0 2
28220: PUSH
28221: LD_VAR 0 9
28225: PUSH
28226: LD_INT 1
28228: PPUSH
28229: LD_VAR 0 9
28233: PPUSH
28234: CALL_OW 12
28238: ARRAY
28239: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28240: LD_VAR 0 2
28244: PPUSH
28245: LD_VAR 0 3
28249: PPUSH
28250: CALL 28499 0 2
28254: NOT
28255: IFFALSE 28314
// repeat engine := _engine [ 1 ] ;
28257: LD_ADDR_VAR 0 3
28261: PUSH
28262: LD_VAR 0 11
28266: PUSH
28267: LD_INT 1
28269: ARRAY
28270: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28271: LD_ADDR_VAR 0 11
28275: PUSH
28276: LD_VAR 0 11
28280: PPUSH
28281: LD_INT 1
28283: PPUSH
28284: CALL_OW 3
28288: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28289: LD_VAR 0 2
28293: PPUSH
28294: LD_VAR 0 3
28298: PPUSH
28299: CALL 28499 0 2
28303: PUSH
28304: LD_VAR 0 11
28308: PUSH
28309: EMPTY
28310: EQUAL
28311: OR
28312: IFFALSE 28257
// if not control in _control then
28314: LD_VAR 0 4
28318: PUSH
28319: LD_VAR 0 12
28323: IN
28324: NOT
28325: IFFALSE 28351
// control := _control [ rand ( 1 , _control ) ] ;
28327: LD_ADDR_VAR 0 4
28331: PUSH
28332: LD_VAR 0 12
28336: PUSH
28337: LD_INT 1
28339: PPUSH
28340: LD_VAR 0 12
28344: PPUSH
28345: CALL_OW 12
28349: ARRAY
28350: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: CALL 28719 0 2
28365: NOT
28366: IFFALSE 28425
// repeat weapon := _weapon [ 1 ] ;
28368: LD_ADDR_VAR 0 5
28372: PUSH
28373: LD_VAR 0 10
28377: PUSH
28378: LD_INT 1
28380: ARRAY
28381: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28382: LD_ADDR_VAR 0 10
28386: PUSH
28387: LD_VAR 0 10
28391: PPUSH
28392: LD_INT 1
28394: PPUSH
28395: CALL_OW 3
28399: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: CALL 28719 0 2
28414: PUSH
28415: LD_VAR 0 10
28419: PUSH
28420: EMPTY
28421: EQUAL
28422: OR
28423: IFFALSE 28368
// result := [ ] ;
28425: LD_ADDR_VAR 0 6
28429: PUSH
28430: EMPTY
28431: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28432: LD_VAR 0 1
28436: PPUSH
28437: LD_VAR 0 2
28441: PPUSH
28442: LD_VAR 0 3
28446: PPUSH
28447: LD_VAR 0 4
28451: PPUSH
28452: LD_VAR 0 5
28456: PPUSH
28457: CALL_OW 448
28461: IFFALSE 28494
// result := [ chassis , engine , control , weapon ] ;
28463: LD_ADDR_VAR 0 6
28467: PUSH
28468: LD_VAR 0 2
28472: PUSH
28473: LD_VAR 0 3
28477: PUSH
28478: LD_VAR 0 4
28482: PUSH
28483: LD_VAR 0 5
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
// end ;
28494: LD_VAR 0 6
28498: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28499: LD_INT 0
28501: PPUSH
// if not chassis or not engine then
28502: LD_VAR 0 1
28506: NOT
28507: PUSH
28508: LD_VAR 0 2
28512: NOT
28513: OR
28514: IFFALSE 28518
// exit ;
28516: GO 28714
// case engine of engine_solar :
28518: LD_VAR 0 2
28522: PUSH
28523: LD_INT 2
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28569
28531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 11
28539: PUSH
28540: LD_INT 12
28542: PUSH
28543: LD_INT 13
28545: PUSH
28546: LD_INT 14
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: LD_INT 3
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
28567: GO 28698
28569: LD_INT 1
28571: DOUBLE
28572: EQUAL
28573: IFTRUE 28577
28575: GO 28639
28577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28578: LD_ADDR_VAR 0 3
28582: PUSH
28583: LD_INT 11
28585: PUSH
28586: LD_INT 12
28588: PUSH
28589: LD_INT 13
28591: PUSH
28592: LD_INT 14
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 3
28603: PUSH
28604: LD_INT 4
28606: PUSH
28607: LD_INT 5
28609: PUSH
28610: LD_INT 21
28612: PUSH
28613: LD_INT 23
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_INT 24
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
28637: GO 28698
28639: LD_INT 3
28641: DOUBLE
28642: EQUAL
28643: IFTRUE 28647
28645: GO 28697
28647: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 13
28655: PUSH
28656: LD_INT 14
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 3
28664: PUSH
28665: LD_INT 4
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: LD_INT 21
28673: PUSH
28674: LD_INT 22
28676: PUSH
28677: LD_INT 23
28679: PUSH
28680: LD_INT 24
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
28695: GO 28698
28697: POP
// result := ( chassis in result ) ;
28698: LD_ADDR_VAR 0 3
28702: PUSH
28703: LD_VAR 0 1
28707: PUSH
28708: LD_VAR 0 3
28712: IN
28713: ST_TO_ADDR
// end ;
28714: LD_VAR 0 3
28718: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28719: LD_INT 0
28721: PPUSH
// if not chassis or not weapon then
28722: LD_VAR 0 1
28726: NOT
28727: PUSH
28728: LD_VAR 0 2
28732: NOT
28733: OR
28734: IFFALSE 28738
// exit ;
28736: GO 29800
// case weapon of us_machine_gun :
28738: LD_VAR 0 2
28742: PUSH
28743: LD_INT 2
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28781
28751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 3
28765: PUSH
28766: LD_INT 4
28768: PUSH
28769: LD_INT 5
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
28779: GO 29784
28781: LD_INT 3
28783: DOUBLE
28784: EQUAL
28785: IFTRUE 28789
28787: GO 28819
28789: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: LD_INT 5
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
28817: GO 29784
28819: LD_INT 11
28821: DOUBLE
28822: EQUAL
28823: IFTRUE 28827
28825: GO 28857
28827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28828: LD_ADDR_VAR 0 3
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 2
28838: PUSH
28839: LD_INT 3
28841: PUSH
28842: LD_INT 4
28844: PUSH
28845: LD_INT 5
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
28855: GO 29784
28857: LD_INT 4
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28891
28865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: LD_INT 4
28879: PUSH
28880: LD_INT 5
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: ST_TO_ADDR
28889: GO 29784
28891: LD_INT 5
28893: DOUBLE
28894: EQUAL
28895: IFTRUE 28899
28897: GO 28925
28899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28900: LD_ADDR_VAR 0 3
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 3
28910: PUSH
28911: LD_INT 4
28913: PUSH
28914: LD_INT 5
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: ST_TO_ADDR
28923: GO 29784
28925: LD_INT 9
28927: DOUBLE
28928: EQUAL
28929: IFTRUE 28933
28931: GO 28959
28933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: LD_INT 3
28944: PUSH
28945: LD_INT 4
28947: PUSH
28948: LD_INT 5
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
28957: GO 29784
28959: LD_INT 7
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 28967
28965: GO 28993
28967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 4
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: ST_TO_ADDR
28991: GO 29784
28993: LD_INT 12
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29027
29001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 4
29015: PUSH
29016: LD_INT 5
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
29025: GO 29784
29027: LD_INT 13
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29061
29035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: LD_INT 4
29049: PUSH
29050: LD_INT 5
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
29059: GO 29784
29061: LD_INT 14
29063: DOUBLE
29064: EQUAL
29065: IFTRUE 29069
29067: GO 29087
29069: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29070: LD_ADDR_VAR 0 3
29074: PUSH
29075: LD_INT 4
29077: PUSH
29078: LD_INT 5
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: ST_TO_ADDR
29085: GO 29784
29087: LD_INT 6
29089: DOUBLE
29090: EQUAL
29091: IFTRUE 29095
29093: GO 29113
29095: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29096: LD_ADDR_VAR 0 3
29100: PUSH
29101: LD_INT 4
29103: PUSH
29104: LD_INT 5
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: ST_TO_ADDR
29111: GO 29784
29113: LD_INT 10
29115: DOUBLE
29116: EQUAL
29117: IFTRUE 29121
29119: GO 29139
29121: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29122: LD_ADDR_VAR 0 3
29126: PUSH
29127: LD_INT 4
29129: PUSH
29130: LD_INT 5
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: ST_TO_ADDR
29137: GO 29784
29139: LD_INT 22
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29173
29147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 11
29155: PUSH
29156: LD_INT 12
29158: PUSH
29159: LD_INT 13
29161: PUSH
29162: LD_INT 14
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
29171: GO 29784
29173: LD_INT 23
29175: DOUBLE
29176: EQUAL
29177: IFTRUE 29181
29179: GO 29207
29181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 11
29189: PUSH
29190: LD_INT 12
29192: PUSH
29193: LD_INT 13
29195: PUSH
29196: LD_INT 14
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
29205: GO 29784
29207: LD_INT 24
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29241
29215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 11
29223: PUSH
29224: LD_INT 12
29226: PUSH
29227: LD_INT 13
29229: PUSH
29230: LD_INT 14
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
29239: GO 29784
29241: LD_INT 30
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29275
29249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 11
29257: PUSH
29258: LD_INT 12
29260: PUSH
29261: LD_INT 13
29263: PUSH
29264: LD_INT 14
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
29273: GO 29784
29275: LD_INT 25
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29301
29283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 13
29291: PUSH
29292: LD_INT 14
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: ST_TO_ADDR
29299: GO 29784
29301: LD_INT 27
29303: DOUBLE
29304: EQUAL
29305: IFTRUE 29309
29307: GO 29327
29309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29310: LD_ADDR_VAR 0 3
29314: PUSH
29315: LD_INT 13
29317: PUSH
29318: LD_INT 14
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29784
29327: LD_EXP 91
29331: DOUBLE
29332: EQUAL
29333: IFTRUE 29337
29335: GO 29363
29337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29338: LD_ADDR_VAR 0 3
29342: PUSH
29343: LD_INT 11
29345: PUSH
29346: LD_INT 12
29348: PUSH
29349: LD_INT 13
29351: PUSH
29352: LD_INT 14
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
29361: GO 29784
29363: LD_INT 28
29365: DOUBLE
29366: EQUAL
29367: IFTRUE 29371
29369: GO 29389
29371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 13
29379: PUSH
29380: LD_INT 14
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: ST_TO_ADDR
29387: GO 29784
29389: LD_INT 29
29391: DOUBLE
29392: EQUAL
29393: IFTRUE 29397
29395: GO 29415
29397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29398: LD_ADDR_VAR 0 3
29402: PUSH
29403: LD_INT 13
29405: PUSH
29406: LD_INT 14
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: ST_TO_ADDR
29413: GO 29784
29415: LD_INT 31
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29441
29423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 13
29431: PUSH
29432: LD_INT 14
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: ST_TO_ADDR
29439: GO 29784
29441: LD_INT 26
29443: DOUBLE
29444: EQUAL
29445: IFTRUE 29449
29447: GO 29467
29449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29450: LD_ADDR_VAR 0 3
29454: PUSH
29455: LD_INT 13
29457: PUSH
29458: LD_INT 14
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: ST_TO_ADDR
29465: GO 29784
29467: LD_INT 42
29469: DOUBLE
29470: EQUAL
29471: IFTRUE 29475
29473: GO 29501
29475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_INT 21
29483: PUSH
29484: LD_INT 22
29486: PUSH
29487: LD_INT 23
29489: PUSH
29490: LD_INT 24
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
29499: GO 29784
29501: LD_INT 43
29503: DOUBLE
29504: EQUAL
29505: IFTRUE 29509
29507: GO 29535
29509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_INT 21
29517: PUSH
29518: LD_INT 22
29520: PUSH
29521: LD_INT 23
29523: PUSH
29524: LD_INT 24
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
29533: GO 29784
29535: LD_INT 44
29537: DOUBLE
29538: EQUAL
29539: IFTRUE 29543
29541: GO 29569
29543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29544: LD_ADDR_VAR 0 3
29548: PUSH
29549: LD_INT 21
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_INT 23
29557: PUSH
29558: LD_INT 24
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: ST_TO_ADDR
29567: GO 29784
29569: LD_INT 45
29571: DOUBLE
29572: EQUAL
29573: IFTRUE 29577
29575: GO 29603
29577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29578: LD_ADDR_VAR 0 3
29582: PUSH
29583: LD_INT 21
29585: PUSH
29586: LD_INT 22
29588: PUSH
29589: LD_INT 23
29591: PUSH
29592: LD_INT 24
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: ST_TO_ADDR
29601: GO 29784
29603: LD_INT 49
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29611
29609: GO 29637
29611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29612: LD_ADDR_VAR 0 3
29616: PUSH
29617: LD_INT 21
29619: PUSH
29620: LD_INT 22
29622: PUSH
29623: LD_INT 23
29625: PUSH
29626: LD_INT 24
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: ST_TO_ADDR
29635: GO 29784
29637: LD_INT 51
29639: DOUBLE
29640: EQUAL
29641: IFTRUE 29645
29643: GO 29671
29645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_INT 21
29653: PUSH
29654: LD_INT 22
29656: PUSH
29657: LD_INT 23
29659: PUSH
29660: LD_INT 24
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
29669: GO 29784
29671: LD_INT 52
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29705
29679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: LD_INT 21
29687: PUSH
29688: LD_INT 22
29690: PUSH
29691: LD_INT 23
29693: PUSH
29694: LD_INT 24
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: ST_TO_ADDR
29703: GO 29784
29705: LD_INT 53
29707: DOUBLE
29708: EQUAL
29709: IFTRUE 29713
29711: GO 29731
29713: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29714: LD_ADDR_VAR 0 3
29718: PUSH
29719: LD_INT 23
29721: PUSH
29722: LD_INT 24
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: ST_TO_ADDR
29729: GO 29784
29731: LD_INT 46
29733: DOUBLE
29734: EQUAL
29735: IFTRUE 29739
29737: GO 29757
29739: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_INT 23
29747: PUSH
29748: LD_INT 24
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: ST_TO_ADDR
29755: GO 29784
29757: LD_INT 47
29759: DOUBLE
29760: EQUAL
29761: IFTRUE 29765
29763: GO 29783
29765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29766: LD_ADDR_VAR 0 3
29770: PUSH
29771: LD_INT 23
29773: PUSH
29774: LD_INT 24
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: ST_TO_ADDR
29781: GO 29784
29783: POP
// result := ( chassis in result ) ;
29784: LD_ADDR_VAR 0 3
29788: PUSH
29789: LD_VAR 0 1
29793: PUSH
29794: LD_VAR 0 3
29798: IN
29799: ST_TO_ADDR
// end ;
29800: LD_VAR 0 3
29804: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29805: LD_INT 0
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
// result := array ;
29814: LD_ADDR_VAR 0 5
29818: PUSH
29819: LD_VAR 0 1
29823: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29824: LD_VAR 0 1
29828: NOT
29829: PUSH
29830: LD_VAR 0 2
29834: NOT
29835: OR
29836: PUSH
29837: LD_VAR 0 3
29841: NOT
29842: OR
29843: PUSH
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 1
29853: GREATER
29854: OR
29855: PUSH
29856: LD_VAR 0 3
29860: PUSH
29861: LD_VAR 0 1
29865: GREATER
29866: OR
29867: IFFALSE 29871
// exit ;
29869: GO 30167
// if direction then
29871: LD_VAR 0 4
29875: IFFALSE 29939
// begin d := 1 ;
29877: LD_ADDR_VAR 0 9
29881: PUSH
29882: LD_INT 1
29884: ST_TO_ADDR
// if i_from > i_to then
29885: LD_VAR 0 2
29889: PUSH
29890: LD_VAR 0 3
29894: GREATER
29895: IFFALSE 29921
// length := ( array - i_from ) + i_to else
29897: LD_ADDR_VAR 0 11
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_VAR 0 2
29911: MINUS
29912: PUSH
29913: LD_VAR 0 3
29917: PLUS
29918: ST_TO_ADDR
29919: GO 29937
// length := i_to - i_from ;
29921: LD_ADDR_VAR 0 11
29925: PUSH
29926: LD_VAR 0 3
29930: PUSH
29931: LD_VAR 0 2
29935: MINUS
29936: ST_TO_ADDR
// end else
29937: GO 30000
// begin d := - 1 ;
29939: LD_ADDR_VAR 0 9
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: ST_TO_ADDR
// if i_from > i_to then
29948: LD_VAR 0 2
29952: PUSH
29953: LD_VAR 0 3
29957: GREATER
29958: IFFALSE 29978
// length := i_from - i_to else
29960: LD_ADDR_VAR 0 11
29964: PUSH
29965: LD_VAR 0 2
29969: PUSH
29970: LD_VAR 0 3
29974: MINUS
29975: ST_TO_ADDR
29976: GO 30000
// length := ( array - i_to ) + i_from ;
29978: LD_ADDR_VAR 0 11
29982: PUSH
29983: LD_VAR 0 1
29987: PUSH
29988: LD_VAR 0 3
29992: MINUS
29993: PUSH
29994: LD_VAR 0 2
29998: PLUS
29999: ST_TO_ADDR
// end ; if not length then
30000: LD_VAR 0 11
30004: NOT
30005: IFFALSE 30009
// exit ;
30007: GO 30167
// tmp := array ;
30009: LD_ADDR_VAR 0 10
30013: PUSH
30014: LD_VAR 0 1
30018: ST_TO_ADDR
// for i = 1 to length do
30019: LD_ADDR_VAR 0 6
30023: PUSH
30024: DOUBLE
30025: LD_INT 1
30027: DEC
30028: ST_TO_ADDR
30029: LD_VAR 0 11
30033: PUSH
30034: FOR_TO
30035: IFFALSE 30155
// begin for j = 1 to array do
30037: LD_ADDR_VAR 0 7
30041: PUSH
30042: DOUBLE
30043: LD_INT 1
30045: DEC
30046: ST_TO_ADDR
30047: LD_VAR 0 1
30051: PUSH
30052: FOR_TO
30053: IFFALSE 30141
// begin k := j + d ;
30055: LD_ADDR_VAR 0 8
30059: PUSH
30060: LD_VAR 0 7
30064: PUSH
30065: LD_VAR 0 9
30069: PLUS
30070: ST_TO_ADDR
// if k > array then
30071: LD_VAR 0 8
30075: PUSH
30076: LD_VAR 0 1
30080: GREATER
30081: IFFALSE 30091
// k := 1 ;
30083: LD_ADDR_VAR 0 8
30087: PUSH
30088: LD_INT 1
30090: ST_TO_ADDR
// if not k then
30091: LD_VAR 0 8
30095: NOT
30096: IFFALSE 30108
// k := array ;
30098: LD_ADDR_VAR 0 8
30102: PUSH
30103: LD_VAR 0 1
30107: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30108: LD_ADDR_VAR 0 10
30112: PUSH
30113: LD_VAR 0 10
30117: PPUSH
30118: LD_VAR 0 8
30122: PPUSH
30123: LD_VAR 0 1
30127: PUSH
30128: LD_VAR 0 7
30132: ARRAY
30133: PPUSH
30134: CALL_OW 1
30138: ST_TO_ADDR
// end ;
30139: GO 30052
30141: POP
30142: POP
// array := tmp ;
30143: LD_ADDR_VAR 0 1
30147: PUSH
30148: LD_VAR 0 10
30152: ST_TO_ADDR
// end ;
30153: GO 30034
30155: POP
30156: POP
// result := array ;
30157: LD_ADDR_VAR 0 5
30161: PUSH
30162: LD_VAR 0 1
30166: ST_TO_ADDR
// end ;
30167: LD_VAR 0 5
30171: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30172: LD_INT 0
30174: PPUSH
30175: PPUSH
// result := 0 ;
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: LD_INT 0
30183: ST_TO_ADDR
// if not array or not value in array then
30184: LD_VAR 0 1
30188: NOT
30189: PUSH
30190: LD_VAR 0 2
30194: PUSH
30195: LD_VAR 0 1
30199: IN
30200: NOT
30201: OR
30202: IFFALSE 30206
// exit ;
30204: GO 30260
// for i = 1 to array do
30206: LD_ADDR_VAR 0 4
30210: PUSH
30211: DOUBLE
30212: LD_INT 1
30214: DEC
30215: ST_TO_ADDR
30216: LD_VAR 0 1
30220: PUSH
30221: FOR_TO
30222: IFFALSE 30258
// if value = array [ i ] then
30224: LD_VAR 0 2
30228: PUSH
30229: LD_VAR 0 1
30233: PUSH
30234: LD_VAR 0 4
30238: ARRAY
30239: EQUAL
30240: IFFALSE 30256
// begin result := i ;
30242: LD_ADDR_VAR 0 3
30246: PUSH
30247: LD_VAR 0 4
30251: ST_TO_ADDR
// exit ;
30252: POP
30253: POP
30254: GO 30260
// end ;
30256: GO 30221
30258: POP
30259: POP
// end ;
30260: LD_VAR 0 3
30264: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30265: LD_INT 0
30267: PPUSH
// vc_chassis := chassis ;
30268: LD_ADDR_OWVAR 37
30272: PUSH
30273: LD_VAR 0 1
30277: ST_TO_ADDR
// vc_engine := engine ;
30278: LD_ADDR_OWVAR 39
30282: PUSH
30283: LD_VAR 0 2
30287: ST_TO_ADDR
// vc_control := control ;
30288: LD_ADDR_OWVAR 38
30292: PUSH
30293: LD_VAR 0 3
30297: ST_TO_ADDR
// vc_weapon := weapon ;
30298: LD_ADDR_OWVAR 40
30302: PUSH
30303: LD_VAR 0 4
30307: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30308: LD_ADDR_OWVAR 41
30312: PUSH
30313: LD_VAR 0 5
30317: ST_TO_ADDR
// end ;
30318: LD_VAR 0 6
30322: RET
// export function WantPlant ( unit ) ; var task ; begin
30323: LD_INT 0
30325: PPUSH
30326: PPUSH
// result := false ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_INT 0
30334: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 437
30349: ST_TO_ADDR
// if task then
30350: LD_VAR 0 3
30354: IFFALSE 30382
// if task [ 1 ] [ 1 ] = p then
30356: LD_VAR 0 3
30360: PUSH
30361: LD_INT 1
30363: ARRAY
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PUSH
30369: LD_STRING p
30371: EQUAL
30372: IFFALSE 30382
// result := true ;
30374: LD_ADDR_VAR 0 2
30378: PUSH
30379: LD_INT 1
30381: ST_TO_ADDR
// end ;
30382: LD_VAR 0 2
30386: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
// if pos < 1 then
30393: LD_VAR 0 2
30397: PUSH
30398: LD_INT 1
30400: LESS
30401: IFFALSE 30405
// exit ;
30403: GO 30708
// if pos = 1 then
30405: LD_VAR 0 2
30409: PUSH
30410: LD_INT 1
30412: EQUAL
30413: IFFALSE 30446
// result := Replace ( arr , pos [ 1 ] , value ) else
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_VAR 0 2
30429: PUSH
30430: LD_INT 1
30432: ARRAY
30433: PPUSH
30434: LD_VAR 0 3
30438: PPUSH
30439: CALL_OW 1
30443: ST_TO_ADDR
30444: GO 30708
// begin tmp := arr ;
30446: LD_ADDR_VAR 0 6
30450: PUSH
30451: LD_VAR 0 1
30455: ST_TO_ADDR
// s_arr := [ tmp ] ;
30456: LD_ADDR_VAR 0 7
30460: PUSH
30461: LD_VAR 0 6
30465: PUSH
30466: EMPTY
30467: LIST
30468: ST_TO_ADDR
// for i = 1 to pos - 1 do
30469: LD_ADDR_VAR 0 5
30473: PUSH
30474: DOUBLE
30475: LD_INT 1
30477: DEC
30478: ST_TO_ADDR
30479: LD_VAR 0 2
30483: PUSH
30484: LD_INT 1
30486: MINUS
30487: PUSH
30488: FOR_TO
30489: IFFALSE 30534
// begin tmp := tmp [ pos [ i ] ] ;
30491: LD_ADDR_VAR 0 6
30495: PUSH
30496: LD_VAR 0 6
30500: PUSH
30501: LD_VAR 0 2
30505: PUSH
30506: LD_VAR 0 5
30510: ARRAY
30511: ARRAY
30512: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30513: LD_ADDR_VAR 0 7
30517: PUSH
30518: LD_VAR 0 7
30522: PUSH
30523: LD_VAR 0 6
30527: PUSH
30528: EMPTY
30529: LIST
30530: ADD
30531: ST_TO_ADDR
// end ;
30532: GO 30488
30534: POP
30535: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30536: LD_ADDR_VAR 0 6
30540: PUSH
30541: LD_VAR 0 6
30545: PPUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_VAR 0 2
30555: ARRAY
30556: PPUSH
30557: LD_VAR 0 3
30561: PPUSH
30562: CALL_OW 1
30566: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30567: LD_ADDR_VAR 0 7
30571: PUSH
30572: LD_VAR 0 7
30576: PPUSH
30577: LD_VAR 0 7
30581: PPUSH
30582: LD_VAR 0 6
30586: PPUSH
30587: CALL_OW 1
30591: ST_TO_ADDR
// for i = s_arr downto 2 do
30592: LD_ADDR_VAR 0 5
30596: PUSH
30597: DOUBLE
30598: LD_VAR 0 7
30602: INC
30603: ST_TO_ADDR
30604: LD_INT 2
30606: PUSH
30607: FOR_DOWNTO
30608: IFFALSE 30692
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30610: LD_ADDR_VAR 0 6
30614: PUSH
30615: LD_VAR 0 7
30619: PUSH
30620: LD_VAR 0 5
30624: PUSH
30625: LD_INT 1
30627: MINUS
30628: ARRAY
30629: PPUSH
30630: LD_VAR 0 2
30634: PUSH
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 1
30642: MINUS
30643: ARRAY
30644: PPUSH
30645: LD_VAR 0 7
30649: PUSH
30650: LD_VAR 0 5
30654: ARRAY
30655: PPUSH
30656: CALL_OW 1
30660: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: LD_VAR 0 7
30670: PPUSH
30671: LD_VAR 0 5
30675: PUSH
30676: LD_INT 1
30678: MINUS
30679: PPUSH
30680: LD_VAR 0 6
30684: PPUSH
30685: CALL_OW 1
30689: ST_TO_ADDR
// end ;
30690: GO 30607
30692: POP
30693: POP
// result := s_arr [ 1 ] ;
30694: LD_ADDR_VAR 0 4
30698: PUSH
30699: LD_VAR 0 7
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: ST_TO_ADDR
// end ; end ;
30708: LD_VAR 0 4
30712: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
// if not list then
30717: LD_VAR 0 1
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30817
// i := list [ pos1 ] ;
30726: LD_ADDR_VAR 0 5
30730: PUSH
30731: LD_VAR 0 1
30735: PUSH
30736: LD_VAR 0 2
30740: ARRAY
30741: ST_TO_ADDR
// if not i then
30742: LD_VAR 0 5
30746: NOT
30747: IFFALSE 30751
// exit ;
30749: GO 30817
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30751: LD_ADDR_VAR 0 1
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_VAR 0 2
30765: PPUSH
30766: LD_VAR 0 1
30770: PUSH
30771: LD_VAR 0 3
30775: ARRAY
30776: PPUSH
30777: CALL_OW 1
30781: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_VAR 0 1
30791: PPUSH
30792: LD_VAR 0 3
30796: PPUSH
30797: LD_VAR 0 5
30801: PPUSH
30802: CALL_OW 1
30806: ST_TO_ADDR
// result := list ;
30807: LD_ADDR_VAR 0 4
30811: PUSH
30812: LD_VAR 0 1
30816: ST_TO_ADDR
// end ;
30817: LD_VAR 0 4
30821: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30822: LD_INT 0
30824: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30825: LD_ADDR_VAR 0 5
30829: PUSH
30830: LD_VAR 0 1
30834: PPUSH
30835: CALL_OW 250
30839: PPUSH
30840: LD_VAR 0 1
30844: PPUSH
30845: CALL_OW 251
30849: PPUSH
30850: LD_VAR 0 2
30854: PPUSH
30855: LD_VAR 0 3
30859: PPUSH
30860: LD_VAR 0 4
30864: PPUSH
30865: CALL 30875 0 5
30869: ST_TO_ADDR
// end ;
30870: LD_VAR 0 5
30874: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// if not list then
30881: LD_VAR 0 3
30885: NOT
30886: IFFALSE 30890
// exit ;
30888: GO 31278
// result := [ ] ;
30890: LD_ADDR_VAR 0 6
30894: PUSH
30895: EMPTY
30896: ST_TO_ADDR
// for i in list do
30897: LD_ADDR_VAR 0 7
30901: PUSH
30902: LD_VAR 0 3
30906: PUSH
30907: FOR_IN
30908: IFFALSE 31110
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30910: LD_ADDR_VAR 0 9
30914: PUSH
30915: LD_VAR 0 7
30919: PPUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_VAR 0 2
30929: PPUSH
30930: CALL_OW 297
30934: ST_TO_ADDR
// if not result then
30935: LD_VAR 0 6
30939: NOT
30940: IFFALSE 30966
// result := [ [ i , tmp ] ] else
30942: LD_ADDR_VAR 0 6
30946: PUSH
30947: LD_VAR 0 7
30951: PUSH
30952: LD_VAR 0 9
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: ST_TO_ADDR
30964: GO 31108
// begin if result [ result ] [ 2 ] < tmp then
30966: LD_VAR 0 6
30970: PUSH
30971: LD_VAR 0 6
30975: ARRAY
30976: PUSH
30977: LD_INT 2
30979: ARRAY
30980: PUSH
30981: LD_VAR 0 9
30985: LESS
30986: IFFALSE 31028
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30988: LD_ADDR_VAR 0 6
30992: PUSH
30993: LD_VAR 0 6
30997: PPUSH
30998: LD_VAR 0 6
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: PPUSH
31007: LD_VAR 0 7
31011: PUSH
31012: LD_VAR 0 9
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 2
31025: ST_TO_ADDR
31026: GO 31108
// for j = 1 to result do
31028: LD_ADDR_VAR 0 8
31032: PUSH
31033: DOUBLE
31034: LD_INT 1
31036: DEC
31037: ST_TO_ADDR
31038: LD_VAR 0 6
31042: PUSH
31043: FOR_TO
31044: IFFALSE 31106
// begin if tmp < result [ j ] [ 2 ] then
31046: LD_VAR 0 9
31050: PUSH
31051: LD_VAR 0 6
31055: PUSH
31056: LD_VAR 0 8
31060: ARRAY
31061: PUSH
31062: LD_INT 2
31064: ARRAY
31065: LESS
31066: IFFALSE 31104
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31068: LD_ADDR_VAR 0 6
31072: PUSH
31073: LD_VAR 0 6
31077: PPUSH
31078: LD_VAR 0 8
31082: PPUSH
31083: LD_VAR 0 7
31087: PUSH
31088: LD_VAR 0 9
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PPUSH
31097: CALL_OW 2
31101: ST_TO_ADDR
// break ;
31102: GO 31106
// end ; end ;
31104: GO 31043
31106: POP
31107: POP
// end ; end ;
31108: GO 30907
31110: POP
31111: POP
// if result and not asc then
31112: LD_VAR 0 6
31116: PUSH
31117: LD_VAR 0 4
31121: NOT
31122: AND
31123: IFFALSE 31198
// begin tmp := result ;
31125: LD_ADDR_VAR 0 9
31129: PUSH
31130: LD_VAR 0 6
31134: ST_TO_ADDR
// for i = tmp downto 1 do
31135: LD_ADDR_VAR 0 7
31139: PUSH
31140: DOUBLE
31141: LD_VAR 0 9
31145: INC
31146: ST_TO_ADDR
31147: LD_INT 1
31149: PUSH
31150: FOR_DOWNTO
31151: IFFALSE 31196
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31153: LD_ADDR_VAR 0 6
31157: PUSH
31158: LD_VAR 0 6
31162: PPUSH
31163: LD_VAR 0 9
31167: PUSH
31168: LD_VAR 0 7
31172: MINUS
31173: PUSH
31174: LD_INT 1
31176: PLUS
31177: PPUSH
31178: LD_VAR 0 9
31182: PUSH
31183: LD_VAR 0 7
31187: ARRAY
31188: PPUSH
31189: CALL_OW 1
31193: ST_TO_ADDR
31194: GO 31150
31196: POP
31197: POP
// end ; tmp := [ ] ;
31198: LD_ADDR_VAR 0 9
31202: PUSH
31203: EMPTY
31204: ST_TO_ADDR
// if mode then
31205: LD_VAR 0 5
31209: IFFALSE 31278
// begin for i = 1 to result do
31211: LD_ADDR_VAR 0 7
31215: PUSH
31216: DOUBLE
31217: LD_INT 1
31219: DEC
31220: ST_TO_ADDR
31221: LD_VAR 0 6
31225: PUSH
31226: FOR_TO
31227: IFFALSE 31266
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31229: LD_ADDR_VAR 0 9
31233: PUSH
31234: LD_VAR 0 9
31238: PPUSH
31239: LD_VAR 0 7
31243: PPUSH
31244: LD_VAR 0 6
31248: PUSH
31249: LD_VAR 0 7
31253: ARRAY
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: CALL_OW 1
31263: ST_TO_ADDR
31264: GO 31226
31266: POP
31267: POP
// result := tmp ;
31268: LD_ADDR_VAR 0 6
31272: PUSH
31273: LD_VAR 0 9
31277: ST_TO_ADDR
// end ; end ;
31278: LD_VAR 0 6
31282: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31291: LD_ADDR_VAR 0 5
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
// if not x or not y then
31313: LD_VAR 0 2
31317: NOT
31318: PUSH
31319: LD_VAR 0 3
31323: NOT
31324: OR
31325: IFFALSE 31329
// exit ;
31327: GO 32981
// if not range then
31329: LD_VAR 0 4
31333: NOT
31334: IFFALSE 31344
// range := 10 ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_INT 10
31343: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31344: LD_ADDR_VAR 0 8
31348: PUSH
31349: LD_INT 81
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 92
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: LD_VAR 0 3
31373: PUSH
31374: LD_VAR 0 4
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 21
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: PPUSH
31407: CALL_OW 69
31411: ST_TO_ADDR
// if not tmp then
31412: LD_VAR 0 8
31416: NOT
31417: IFFALSE 31421
// exit ;
31419: GO 32981
// for i in tmp do
31421: LD_ADDR_VAR 0 6
31425: PUSH
31426: LD_VAR 0 8
31430: PUSH
31431: FOR_IN
31432: IFFALSE 32956
// begin points := [ 0 , 0 , 0 ] ;
31434: LD_ADDR_VAR 0 9
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: ST_TO_ADDR
// bpoints := 1 ;
31453: LD_ADDR_VAR 0 10
31457: PUSH
31458: LD_INT 1
31460: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31461: LD_VAR 0 6
31465: PPUSH
31466: CALL_OW 247
31470: PUSH
31471: LD_INT 1
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 32057
31479: POP
// begin if GetClass ( i ) = 1 then
31480: LD_VAR 0 6
31484: PPUSH
31485: CALL_OW 257
31489: PUSH
31490: LD_INT 1
31492: EQUAL
31493: IFFALSE 31514
// points := [ 10 , 5 , 3 ] ;
31495: LD_ADDR_VAR 0 9
31499: PUSH
31500: LD_INT 10
31502: PUSH
31503: LD_INT 5
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31514: LD_VAR 0 6
31518: PPUSH
31519: CALL_OW 257
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 4
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: IN
31538: IFFALSE 31559
// points := [ 3 , 2 , 1 ] ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31559: LD_VAR 0 6
31563: PPUSH
31564: CALL_OW 257
31568: PUSH
31569: LD_INT 5
31571: EQUAL
31572: IFFALSE 31593
// points := [ 130 , 5 , 2 ] ;
31574: LD_ADDR_VAR 0 9
31578: PUSH
31579: LD_INT 130
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31593: LD_VAR 0 6
31597: PPUSH
31598: CALL_OW 257
31602: PUSH
31603: LD_INT 8
31605: EQUAL
31606: IFFALSE 31627
// points := [ 35 , 35 , 30 ] ;
31608: LD_ADDR_VAR 0 9
31612: PUSH
31613: LD_INT 35
31615: PUSH
31616: LD_INT 35
31618: PUSH
31619: LD_INT 30
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31627: LD_VAR 0 6
31631: PPUSH
31632: CALL_OW 257
31636: PUSH
31637: LD_INT 9
31639: EQUAL
31640: IFFALSE 31661
// points := [ 20 , 55 , 40 ] ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_INT 20
31649: PUSH
31650: LD_INT 55
31652: PUSH
31653: LD_INT 40
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31661: LD_VAR 0 6
31665: PPUSH
31666: CALL_OW 257
31670: PUSH
31671: LD_INT 12
31673: PUSH
31674: LD_INT 16
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: IN
31681: IFFALSE 31702
// points := [ 5 , 3 , 2 ] ;
31683: LD_ADDR_VAR 0 9
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31702: LD_VAR 0 6
31706: PPUSH
31707: CALL_OW 257
31711: PUSH
31712: LD_INT 17
31714: EQUAL
31715: IFFALSE 31736
// points := [ 100 , 50 , 75 ] ;
31717: LD_ADDR_VAR 0 9
31721: PUSH
31722: LD_INT 100
31724: PUSH
31725: LD_INT 50
31727: PUSH
31728: LD_INT 75
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31736: LD_VAR 0 6
31740: PPUSH
31741: CALL_OW 257
31745: PUSH
31746: LD_INT 15
31748: EQUAL
31749: IFFALSE 31770
// points := [ 10 , 5 , 3 ] ;
31751: LD_ADDR_VAR 0 9
31755: PUSH
31756: LD_INT 10
31758: PUSH
31759: LD_INT 5
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31770: LD_VAR 0 6
31774: PPUSH
31775: CALL_OW 257
31779: PUSH
31780: LD_INT 14
31782: EQUAL
31783: IFFALSE 31804
// points := [ 10 , 0 , 0 ] ;
31785: LD_ADDR_VAR 0 9
31789: PUSH
31790: LD_INT 10
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31804: LD_VAR 0 6
31808: PPUSH
31809: CALL_OW 257
31813: PUSH
31814: LD_INT 11
31816: EQUAL
31817: IFFALSE 31838
// points := [ 30 , 10 , 5 ] ;
31819: LD_ADDR_VAR 0 9
31823: PUSH
31824: LD_INT 30
31826: PUSH
31827: LD_INT 10
31829: PUSH
31830: LD_INT 5
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31838: LD_VAR 0 1
31842: PPUSH
31843: LD_INT 5
31845: PPUSH
31846: CALL_OW 321
31850: PUSH
31851: LD_INT 2
31853: EQUAL
31854: IFFALSE 31871
// bpoints := bpoints * 1.8 ;
31856: LD_ADDR_VAR 0 10
31860: PUSH
31861: LD_VAR 0 10
31865: PUSH
31866: LD_REAL  1.80000000000000E+0000
31869: MUL
31870: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31871: LD_VAR 0 6
31875: PPUSH
31876: CALL_OW 257
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: IN
31899: PUSH
31900: LD_VAR 0 1
31904: PPUSH
31905: LD_INT 51
31907: PPUSH
31908: CALL_OW 321
31912: PUSH
31913: LD_INT 2
31915: EQUAL
31916: AND
31917: IFFALSE 31934
// bpoints := bpoints * 1.2 ;
31919: LD_ADDR_VAR 0 10
31923: PUSH
31924: LD_VAR 0 10
31928: PUSH
31929: LD_REAL  1.20000000000000E+0000
31932: MUL
31933: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31934: LD_VAR 0 6
31938: PPUSH
31939: CALL_OW 257
31943: PUSH
31944: LD_INT 5
31946: PUSH
31947: LD_INT 7
31949: PUSH
31950: LD_INT 9
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: IN
31958: PUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_INT 52
31966: PPUSH
31967: CALL_OW 321
31971: PUSH
31972: LD_INT 2
31974: EQUAL
31975: AND
31976: IFFALSE 31993
// bpoints := bpoints * 1.5 ;
31978: LD_ADDR_VAR 0 10
31982: PUSH
31983: LD_VAR 0 10
31987: PUSH
31988: LD_REAL  1.50000000000000E+0000
31991: MUL
31992: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_INT 66
32000: PPUSH
32001: CALL_OW 321
32005: PUSH
32006: LD_INT 2
32008: EQUAL
32009: IFFALSE 32026
// bpoints := bpoints * 1.1 ;
32011: LD_ADDR_VAR 0 10
32015: PUSH
32016: LD_VAR 0 10
32020: PUSH
32021: LD_REAL  1.10000000000000E+0000
32024: MUL
32025: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32026: LD_ADDR_VAR 0 10
32030: PUSH
32031: LD_VAR 0 10
32035: PUSH
32036: LD_VAR 0 6
32040: PPUSH
32041: LD_INT 1
32043: PPUSH
32044: CALL_OW 259
32048: PUSH
32049: LD_REAL  1.15000000000000E+0000
32052: MUL
32053: MUL
32054: ST_TO_ADDR
// end ; unit_vehicle :
32055: GO 32885
32057: LD_INT 2
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32873
32065: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32066: LD_VAR 0 6
32070: PPUSH
32071: CALL_OW 264
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 42
32081: PUSH
32082: LD_INT 24
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: IN
32090: IFFALSE 32111
// points := [ 25 , 5 , 3 ] ;
32092: LD_ADDR_VAR 0 9
32096: PUSH
32097: LD_INT 25
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32111: LD_VAR 0 6
32115: PPUSH
32116: CALL_OW 264
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 43
32126: PUSH
32127: LD_INT 25
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: IN
32135: IFFALSE 32156
// points := [ 40 , 15 , 5 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 40
32144: PUSH
32145: LD_INT 15
32147: PUSH
32148: LD_INT 5
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 264
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 23
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: IN
32176: IFFALSE 32197
// points := [ 7 , 25 , 8 ] ;
32178: LD_ADDR_VAR 0 9
32182: PUSH
32183: LD_INT 7
32185: PUSH
32186: LD_INT 25
32188: PUSH
32189: LD_INT 8
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32197: LD_VAR 0 6
32201: PPUSH
32202: CALL_OW 264
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: LD_INT 27
32212: PUSH
32213: LD_INT 44
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: IN
32221: IFFALSE 32242
// points := [ 14 , 50 , 16 ] ;
32223: LD_ADDR_VAR 0 9
32227: PUSH
32228: LD_INT 14
32230: PUSH
32231: LD_INT 50
32233: PUSH
32234: LD_INT 16
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32242: LD_VAR 0 6
32246: PPUSH
32247: CALL_OW 264
32251: PUSH
32252: LD_INT 6
32254: PUSH
32255: LD_INT 46
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: IN
32262: IFFALSE 32283
// points := [ 32 , 120 , 70 ] ;
32264: LD_ADDR_VAR 0 9
32268: PUSH
32269: LD_INT 32
32271: PUSH
32272: LD_INT 120
32274: PUSH
32275: LD_INT 70
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32283: LD_VAR 0 6
32287: PPUSH
32288: CALL_OW 264
32292: PUSH
32293: LD_INT 7
32295: PUSH
32296: LD_INT 28
32298: PUSH
32299: LD_INT 45
32301: PUSH
32302: LD_EXP 91
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: IN
32313: IFFALSE 32334
// points := [ 35 , 20 , 45 ] ;
32315: LD_ADDR_VAR 0 9
32319: PUSH
32320: LD_INT 35
32322: PUSH
32323: LD_INT 20
32325: PUSH
32326: LD_INT 45
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32334: LD_VAR 0 6
32338: PPUSH
32339: CALL_OW 264
32343: PUSH
32344: LD_INT 47
32346: PUSH
32347: EMPTY
32348: LIST
32349: IN
32350: IFFALSE 32371
// points := [ 67 , 45 , 75 ] ;
32352: LD_ADDR_VAR 0 9
32356: PUSH
32357: LD_INT 67
32359: PUSH
32360: LD_INT 45
32362: PUSH
32363: LD_INT 75
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32371: LD_VAR 0 6
32375: PPUSH
32376: CALL_OW 264
32380: PUSH
32381: LD_INT 26
32383: PUSH
32384: EMPTY
32385: LIST
32386: IN
32387: IFFALSE 32408
// points := [ 120 , 30 , 80 ] ;
32389: LD_ADDR_VAR 0 9
32393: PUSH
32394: LD_INT 120
32396: PUSH
32397: LD_INT 30
32399: PUSH
32400: LD_INT 80
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32408: LD_VAR 0 6
32412: PPUSH
32413: CALL_OW 264
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: EMPTY
32422: LIST
32423: IN
32424: IFFALSE 32445
// points := [ 40 , 1 , 1 ] ;
32426: LD_ADDR_VAR 0 9
32430: PUSH
32431: LD_INT 40
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32445: LD_VAR 0 6
32449: PPUSH
32450: CALL_OW 264
32454: PUSH
32455: LD_INT 29
32457: PUSH
32458: EMPTY
32459: LIST
32460: IN
32461: IFFALSE 32482
// points := [ 70 , 200 , 400 ] ;
32463: LD_ADDR_VAR 0 9
32467: PUSH
32468: LD_INT 70
32470: PUSH
32471: LD_INT 200
32473: PUSH
32474: LD_INT 400
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32482: LD_VAR 0 6
32486: PPUSH
32487: CALL_OW 264
32491: PUSH
32492: LD_INT 14
32494: PUSH
32495: LD_INT 53
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: IN
32502: IFFALSE 32523
// points := [ 40 , 10 , 20 ] ;
32504: LD_ADDR_VAR 0 9
32508: PUSH
32509: LD_INT 40
32511: PUSH
32512: LD_INT 10
32514: PUSH
32515: LD_INT 20
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32523: LD_VAR 0 6
32527: PPUSH
32528: CALL_OW 264
32532: PUSH
32533: LD_INT 9
32535: PUSH
32536: EMPTY
32537: LIST
32538: IN
32539: IFFALSE 32560
// points := [ 5 , 70 , 20 ] ;
32541: LD_ADDR_VAR 0 9
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: LD_INT 70
32551: PUSH
32552: LD_INT 20
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32560: LD_VAR 0 6
32564: PPUSH
32565: CALL_OW 264
32569: PUSH
32570: LD_INT 10
32572: PUSH
32573: EMPTY
32574: LIST
32575: IN
32576: IFFALSE 32597
// points := [ 35 , 110 , 70 ] ;
32578: LD_ADDR_VAR 0 9
32582: PUSH
32583: LD_INT 35
32585: PUSH
32586: LD_INT 110
32588: PUSH
32589: LD_INT 70
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32597: LD_VAR 0 6
32601: PPUSH
32602: CALL_OW 265
32606: PUSH
32607: LD_INT 25
32609: EQUAL
32610: IFFALSE 32631
// points := [ 80 , 65 , 100 ] ;
32612: LD_ADDR_VAR 0 9
32616: PUSH
32617: LD_INT 80
32619: PUSH
32620: LD_INT 65
32622: PUSH
32623: LD_INT 100
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32631: LD_VAR 0 6
32635: PPUSH
32636: CALL_OW 263
32640: PUSH
32641: LD_INT 1
32643: EQUAL
32644: IFFALSE 32679
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32646: LD_ADDR_VAR 0 10
32650: PUSH
32651: LD_VAR 0 10
32655: PUSH
32656: LD_VAR 0 6
32660: PPUSH
32661: CALL_OW 311
32665: PPUSH
32666: LD_INT 3
32668: PPUSH
32669: CALL_OW 259
32673: PUSH
32674: LD_INT 4
32676: MUL
32677: MUL
32678: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32679: LD_VAR 0 6
32683: PPUSH
32684: CALL_OW 263
32688: PUSH
32689: LD_INT 2
32691: EQUAL
32692: IFFALSE 32743
// begin j := IsControledBy ( i ) ;
32694: LD_ADDR_VAR 0 7
32698: PUSH
32699: LD_VAR 0 6
32703: PPUSH
32704: CALL_OW 312
32708: ST_TO_ADDR
// if j then
32709: LD_VAR 0 7
32713: IFFALSE 32743
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32715: LD_ADDR_VAR 0 10
32719: PUSH
32720: LD_VAR 0 10
32724: PUSH
32725: LD_VAR 0 7
32729: PPUSH
32730: LD_INT 3
32732: PPUSH
32733: CALL_OW 259
32737: PUSH
32738: LD_INT 3
32740: MUL
32741: MUL
32742: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 264
32752: PUSH
32753: LD_INT 5
32755: PUSH
32756: LD_INT 6
32758: PUSH
32759: LD_INT 46
32761: PUSH
32762: LD_INT 44
32764: PUSH
32765: LD_INT 47
32767: PUSH
32768: LD_INT 45
32770: PUSH
32771: LD_INT 28
32773: PUSH
32774: LD_INT 7
32776: PUSH
32777: LD_INT 27
32779: PUSH
32780: LD_INT 29
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: IN
32795: PUSH
32796: LD_VAR 0 1
32800: PPUSH
32801: LD_INT 52
32803: PPUSH
32804: CALL_OW 321
32808: PUSH
32809: LD_INT 2
32811: EQUAL
32812: AND
32813: IFFALSE 32830
// bpoints := bpoints * 1.2 ;
32815: LD_ADDR_VAR 0 10
32819: PUSH
32820: LD_VAR 0 10
32824: PUSH
32825: LD_REAL  1.20000000000000E+0000
32828: MUL
32829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32830: LD_VAR 0 6
32834: PPUSH
32835: CALL_OW 264
32839: PUSH
32840: LD_INT 6
32842: PUSH
32843: LD_INT 46
32845: PUSH
32846: LD_INT 47
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: IN
32854: IFFALSE 32871
// bpoints := bpoints * 1.2 ;
32856: LD_ADDR_VAR 0 10
32860: PUSH
32861: LD_VAR 0 10
32865: PUSH
32866: LD_REAL  1.20000000000000E+0000
32869: MUL
32870: ST_TO_ADDR
// end ; unit_building :
32871: GO 32885
32873: LD_INT 3
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32884
32881: POP
// ; end ;
32882: GO 32885
32884: POP
// for j = 1 to 3 do
32885: LD_ADDR_VAR 0 7
32889: PUSH
32890: DOUBLE
32891: LD_INT 1
32893: DEC
32894: ST_TO_ADDR
32895: LD_INT 3
32897: PUSH
32898: FOR_TO
32899: IFFALSE 32952
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32901: LD_ADDR_VAR 0 5
32905: PUSH
32906: LD_VAR 0 5
32910: PPUSH
32911: LD_VAR 0 7
32915: PPUSH
32916: LD_VAR 0 5
32920: PUSH
32921: LD_VAR 0 7
32925: ARRAY
32926: PUSH
32927: LD_VAR 0 9
32931: PUSH
32932: LD_VAR 0 7
32936: ARRAY
32937: PUSH
32938: LD_VAR 0 10
32942: MUL
32943: PLUS
32944: PPUSH
32945: CALL_OW 1
32949: ST_TO_ADDR
32950: GO 32898
32952: POP
32953: POP
// end ;
32954: GO 31431
32956: POP
32957: POP
// result := Replace ( result , 4 , tmp ) ;
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_VAR 0 5
32967: PPUSH
32968: LD_INT 4
32970: PPUSH
32971: LD_VAR 0 8
32975: PPUSH
32976: CALL_OW 1
32980: ST_TO_ADDR
// end ;
32981: LD_VAR 0 5
32985: RET
// export function DangerAtRange ( unit , range ) ; begin
32986: LD_INT 0
32988: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_VAR 0 1
32998: PPUSH
32999: CALL_OW 255
33003: PPUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: CALL_OW 250
33013: PPUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 251
33023: PPUSH
33024: LD_VAR 0 2
33028: PPUSH
33029: CALL 31283 0 4
33033: ST_TO_ADDR
// end ;
33034: LD_VAR 0 3
33038: RET
// export function DangerInArea ( side , area ) ; begin
33039: LD_INT 0
33041: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_VAR 0 2
33051: PPUSH
33052: LD_INT 81
33054: PUSH
33055: LD_VAR 0 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 70
33068: ST_TO_ADDR
// end ;
33069: LD_VAR 0 3
33073: RET
// export function IsExtension ( b ) ; begin
33074: LD_INT 0
33076: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33077: LD_ADDR_VAR 0 2
33081: PUSH
33082: LD_VAR 0 1
33086: PUSH
33087: LD_INT 23
33089: PUSH
33090: LD_INT 20
33092: PUSH
33093: LD_INT 22
33095: PUSH
33096: LD_INT 17
33098: PUSH
33099: LD_INT 24
33101: PUSH
33102: LD_INT 21
33104: PUSH
33105: LD_INT 19
33107: PUSH
33108: LD_INT 16
33110: PUSH
33111: LD_INT 25
33113: PUSH
33114: LD_INT 18
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: IN
33129: ST_TO_ADDR
// end ;
33130: LD_VAR 0 2
33134: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
33139: PPUSH
// result := [ ] ;
33140: LD_ADDR_VAR 0 4
33144: PUSH
33145: EMPTY
33146: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_VAR 0 2
33156: PPUSH
33157: LD_INT 21
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PPUSH
33167: CALL_OW 70
33171: ST_TO_ADDR
// if not tmp then
33172: LD_VAR 0 5
33176: NOT
33177: IFFALSE 33181
// exit ;
33179: GO 33245
// if checkLink then
33181: LD_VAR 0 3
33185: IFFALSE 33235
// begin for i in tmp do
33187: LD_ADDR_VAR 0 6
33191: PUSH
33192: LD_VAR 0 5
33196: PUSH
33197: FOR_IN
33198: IFFALSE 33233
// if GetBase ( i ) <> base then
33200: LD_VAR 0 6
33204: PPUSH
33205: CALL_OW 274
33209: PUSH
33210: LD_VAR 0 1
33214: NONEQUAL
33215: IFFALSE 33231
// ComLinkToBase ( base , i ) ;
33217: LD_VAR 0 1
33221: PPUSH
33222: LD_VAR 0 6
33226: PPUSH
33227: CALL_OW 169
33231: GO 33197
33233: POP
33234: POP
// end ; result := tmp ;
33235: LD_ADDR_VAR 0 4
33239: PUSH
33240: LD_VAR 0 5
33244: ST_TO_ADDR
// end ;
33245: LD_VAR 0 4
33249: RET
// export function ComComplete ( units , b ) ; var i ; begin
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
// if not units then
33254: LD_VAR 0 1
33258: NOT
33259: IFFALSE 33263
// exit ;
33261: GO 33353
// for i in units do
33263: LD_ADDR_VAR 0 4
33267: PUSH
33268: LD_VAR 0 1
33272: PUSH
33273: FOR_IN
33274: IFFALSE 33351
// if BuildingStatus ( b ) = bs_build then
33276: LD_VAR 0 2
33280: PPUSH
33281: CALL_OW 461
33285: PUSH
33286: LD_INT 1
33288: EQUAL
33289: IFFALSE 33349
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33291: LD_VAR 0 4
33295: PPUSH
33296: LD_STRING h
33298: PUSH
33299: LD_VAR 0 2
33303: PPUSH
33304: CALL_OW 250
33308: PUSH
33309: LD_VAR 0 2
33313: PPUSH
33314: CALL_OW 251
33318: PUSH
33319: LD_VAR 0 2
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: PPUSH
33345: CALL_OW 446
33349: GO 33273
33351: POP
33352: POP
// end ;
33353: LD_VAR 0 3
33357: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33366: LD_VAR 0 1
33370: NOT
33371: PUSH
33372: LD_VAR 0 1
33376: PPUSH
33377: CALL_OW 263
33381: PUSH
33382: LD_INT 2
33384: NONEQUAL
33385: OR
33386: IFFALSE 33390
// exit ;
33388: GO 33706
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33390: LD_ADDR_VAR 0 6
33394: PUSH
33395: LD_INT 22
33397: PUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL_OW 255
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 36
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 34
33427: PUSH
33428: LD_INT 31
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 69
33448: ST_TO_ADDR
// if not tmp then
33449: LD_VAR 0 6
33453: NOT
33454: IFFALSE 33458
// exit ;
33456: GO 33706
// result := [ ] ;
33458: LD_ADDR_VAR 0 2
33462: PUSH
33463: EMPTY
33464: ST_TO_ADDR
// for i in tmp do
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_VAR 0 6
33474: PUSH
33475: FOR_IN
33476: IFFALSE 33547
// begin t := UnitsInside ( i ) ;
33478: LD_ADDR_VAR 0 4
33482: PUSH
33483: LD_VAR 0 3
33487: PPUSH
33488: CALL_OW 313
33492: ST_TO_ADDR
// if t then
33493: LD_VAR 0 4
33497: IFFALSE 33545
// for j in t do
33499: LD_ADDR_VAR 0 7
33503: PUSH
33504: LD_VAR 0 4
33508: PUSH
33509: FOR_IN
33510: IFFALSE 33543
// result := Replace ( result , result + 1 , j ) ;
33512: LD_ADDR_VAR 0 2
33516: PUSH
33517: LD_VAR 0 2
33521: PPUSH
33522: LD_VAR 0 2
33526: PUSH
33527: LD_INT 1
33529: PLUS
33530: PPUSH
33531: LD_VAR 0 7
33535: PPUSH
33536: CALL_OW 1
33540: ST_TO_ADDR
33541: GO 33509
33543: POP
33544: POP
// end ;
33545: GO 33475
33547: POP
33548: POP
// if not result then
33549: LD_VAR 0 2
33553: NOT
33554: IFFALSE 33558
// exit ;
33556: GO 33706
// mech := result [ 1 ] ;
33558: LD_ADDR_VAR 0 5
33562: PUSH
33563: LD_VAR 0 2
33567: PUSH
33568: LD_INT 1
33570: ARRAY
33571: ST_TO_ADDR
// if result > 1 then
33572: LD_VAR 0 2
33576: PUSH
33577: LD_INT 1
33579: GREATER
33580: IFFALSE 33692
// begin for i = 2 to result do
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: DOUBLE
33588: LD_INT 2
33590: DEC
33591: ST_TO_ADDR
33592: LD_VAR 0 2
33596: PUSH
33597: FOR_TO
33598: IFFALSE 33690
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33600: LD_ADDR_VAR 0 4
33604: PUSH
33605: LD_VAR 0 2
33609: PUSH
33610: LD_VAR 0 3
33614: ARRAY
33615: PPUSH
33616: LD_INT 3
33618: PPUSH
33619: CALL_OW 259
33623: PUSH
33624: LD_VAR 0 2
33628: PUSH
33629: LD_VAR 0 3
33633: ARRAY
33634: PPUSH
33635: CALL_OW 432
33639: MINUS
33640: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33641: LD_VAR 0 4
33645: PUSH
33646: LD_VAR 0 5
33650: PPUSH
33651: LD_INT 3
33653: PPUSH
33654: CALL_OW 259
33658: PUSH
33659: LD_VAR 0 5
33663: PPUSH
33664: CALL_OW 432
33668: MINUS
33669: GREATEREQUAL
33670: IFFALSE 33688
// mech := result [ i ] ;
33672: LD_ADDR_VAR 0 5
33676: PUSH
33677: LD_VAR 0 2
33681: PUSH
33682: LD_VAR 0 3
33686: ARRAY
33687: ST_TO_ADDR
// end ;
33688: GO 33597
33690: POP
33691: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33692: LD_VAR 0 1
33696: PPUSH
33697: LD_VAR 0 5
33701: PPUSH
33702: CALL_OW 135
// end ;
33706: LD_VAR 0 2
33710: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
33715: PPUSH
33716: PPUSH
33717: PPUSH
33718: PPUSH
33719: PPUSH
33720: PPUSH
33721: PPUSH
33722: PPUSH
33723: PPUSH
33724: PPUSH
33725: PPUSH
// result := [ ] ;
33726: LD_ADDR_VAR 0 7
33730: PUSH
33731: EMPTY
33732: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33733: LD_VAR 0 1
33737: PPUSH
33738: CALL_OW 266
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: IN
33753: NOT
33754: IFFALSE 33758
// exit ;
33756: GO 35392
// if name then
33758: LD_VAR 0 3
33762: IFFALSE 33778
// SetBName ( base_dep , name ) ;
33764: LD_VAR 0 1
33768: PPUSH
33769: LD_VAR 0 3
33773: PPUSH
33774: CALL_OW 500
// base := GetBase ( base_dep ) ;
33778: LD_ADDR_VAR 0 15
33782: PUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: CALL_OW 274
33792: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33793: LD_ADDR_VAR 0 16
33797: PUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 255
33807: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33808: LD_ADDR_VAR 0 17
33812: PUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 248
33822: ST_TO_ADDR
// if sources then
33823: LD_VAR 0 5
33827: IFFALSE 33874
// for i = 1 to 3 do
33829: LD_ADDR_VAR 0 8
33833: PUSH
33834: DOUBLE
33835: LD_INT 1
33837: DEC
33838: ST_TO_ADDR
33839: LD_INT 3
33841: PUSH
33842: FOR_TO
33843: IFFALSE 33872
// AddResourceType ( base , i , sources [ i ] ) ;
33845: LD_VAR 0 15
33849: PPUSH
33850: LD_VAR 0 8
33854: PPUSH
33855: LD_VAR 0 5
33859: PUSH
33860: LD_VAR 0 8
33864: ARRAY
33865: PPUSH
33866: CALL_OW 276
33870: GO 33842
33872: POP
33873: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33874: LD_ADDR_VAR 0 18
33878: PUSH
33879: LD_VAR 0 15
33883: PPUSH
33884: LD_VAR 0 2
33888: PPUSH
33889: LD_INT 1
33891: PPUSH
33892: CALL 33135 0 3
33896: ST_TO_ADDR
// InitHc ;
33897: CALL_OW 19
// InitUc ;
33901: CALL_OW 18
// uc_side := side ;
33905: LD_ADDR_OWVAR 20
33909: PUSH
33910: LD_VAR 0 16
33914: ST_TO_ADDR
// uc_nation := nation ;
33915: LD_ADDR_OWVAR 21
33919: PUSH
33920: LD_VAR 0 17
33924: ST_TO_ADDR
// if buildings then
33925: LD_VAR 0 18
33929: IFFALSE 35251
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33931: LD_ADDR_VAR 0 19
33935: PUSH
33936: LD_VAR 0 18
33940: PPUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 30
33946: PUSH
33947: LD_INT 29
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 30
33956: PUSH
33957: LD_INT 30
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: PPUSH
33969: CALL_OW 72
33973: ST_TO_ADDR
// if tmp then
33974: LD_VAR 0 19
33978: IFFALSE 34026
// for i in tmp do
33980: LD_ADDR_VAR 0 8
33984: PUSH
33985: LD_VAR 0 19
33989: PUSH
33990: FOR_IN
33991: IFFALSE 34024
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33993: LD_VAR 0 8
33997: PPUSH
33998: CALL_OW 250
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: CALL_OW 251
34012: PPUSH
34013: LD_VAR 0 16
34017: PPUSH
34018: CALL_OW 441
34022: GO 33990
34024: POP
34025: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34026: LD_VAR 0 18
34030: PPUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 30
34036: PUSH
34037: LD_INT 32
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 30
34046: PUSH
34047: LD_INT 33
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: LIST
34058: PPUSH
34059: CALL_OW 72
34063: IFFALSE 34151
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34065: LD_ADDR_VAR 0 8
34069: PUSH
34070: LD_VAR 0 18
34074: PPUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 30
34080: PUSH
34081: LD_INT 32
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 30
34090: PUSH
34091: LD_INT 33
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 72
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34149
// begin if not GetBWeapon ( i ) then
34111: LD_VAR 0 8
34115: PPUSH
34116: CALL_OW 269
34120: NOT
34121: IFFALSE 34147
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34123: LD_VAR 0 8
34127: PPUSH
34128: LD_VAR 0 8
34132: PPUSH
34133: LD_VAR 0 2
34137: PPUSH
34138: CALL 35397 0 2
34142: PPUSH
34143: CALL_OW 431
// end ;
34147: GO 34108
34149: POP
34150: POP
// end ; for i = 1 to personel do
34151: LD_ADDR_VAR 0 8
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 6
34165: PUSH
34166: FOR_TO
34167: IFFALSE 35231
// begin if i > 4 then
34169: LD_VAR 0 8
34173: PUSH
34174: LD_INT 4
34176: GREATER
34177: IFFALSE 34181
// break ;
34179: GO 35231
// case i of 1 :
34181: LD_VAR 0 8
34185: PUSH
34186: LD_INT 1
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34274
34194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34195: LD_ADDR_VAR 0 12
34199: PUSH
34200: LD_VAR 0 18
34204: PPUSH
34205: LD_INT 22
34207: PUSH
34208: LD_VAR 0 16
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 58
34219: PUSH
34220: EMPTY
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 30
34228: PUSH
34229: LD_INT 32
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 30
34238: PUSH
34239: LD_INT 4
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 30
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: PPUSH
34267: CALL_OW 72
34271: ST_TO_ADDR
34272: GO 34496
34274: LD_INT 2
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 34344
34282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34283: LD_ADDR_VAR 0 12
34287: PUSH
34288: LD_VAR 0 18
34292: PPUSH
34293: LD_INT 22
34295: PUSH
34296: LD_VAR 0 16
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 30
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 30
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PPUSH
34337: CALL_OW 72
34341: ST_TO_ADDR
34342: GO 34496
34344: LD_INT 3
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34352
34350: GO 34414
34352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34353: LD_ADDR_VAR 0 12
34357: PUSH
34358: LD_VAR 0 18
34362: PPUSH
34363: LD_INT 22
34365: PUSH
34366: LD_VAR 0 16
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 30
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 30
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PPUSH
34407: CALL_OW 72
34411: ST_TO_ADDR
34412: GO 34496
34414: LD_INT 4
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34422
34420: GO 34495
34422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34423: LD_ADDR_VAR 0 12
34427: PUSH
34428: LD_VAR 0 18
34432: PPUSH
34433: LD_INT 22
34435: PUSH
34436: LD_VAR 0 16
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: LD_INT 6
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 30
34460: PUSH
34461: LD_INT 7
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 30
34470: PUSH
34471: LD_INT 8
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PPUSH
34488: CALL_OW 72
34492: ST_TO_ADDR
34493: GO 34496
34495: POP
// if i = 1 then
34496: LD_VAR 0 8
34500: PUSH
34501: LD_INT 1
34503: EQUAL
34504: IFFALSE 34615
// begin tmp := [ ] ;
34506: LD_ADDR_VAR 0 19
34510: PUSH
34511: EMPTY
34512: ST_TO_ADDR
// for j in f do
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_VAR 0 12
34522: PUSH
34523: FOR_IN
34524: IFFALSE 34597
// if GetBType ( j ) = b_bunker then
34526: LD_VAR 0 9
34530: PPUSH
34531: CALL_OW 266
34535: PUSH
34536: LD_INT 32
34538: EQUAL
34539: IFFALSE 34566
// tmp := Insert ( tmp , 1 , j ) else
34541: LD_ADDR_VAR 0 19
34545: PUSH
34546: LD_VAR 0 19
34550: PPUSH
34551: LD_INT 1
34553: PPUSH
34554: LD_VAR 0 9
34558: PPUSH
34559: CALL_OW 2
34563: ST_TO_ADDR
34564: GO 34595
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34566: LD_ADDR_VAR 0 19
34570: PUSH
34571: LD_VAR 0 19
34575: PPUSH
34576: LD_VAR 0 19
34580: PUSH
34581: LD_INT 1
34583: PLUS
34584: PPUSH
34585: LD_VAR 0 9
34589: PPUSH
34590: CALL_OW 2
34594: ST_TO_ADDR
34595: GO 34523
34597: POP
34598: POP
// if tmp then
34599: LD_VAR 0 19
34603: IFFALSE 34615
// f := tmp ;
34605: LD_ADDR_VAR 0 12
34609: PUSH
34610: LD_VAR 0 19
34614: ST_TO_ADDR
// end ; x := personel [ i ] ;
34615: LD_ADDR_VAR 0 13
34619: PUSH
34620: LD_VAR 0 6
34624: PUSH
34625: LD_VAR 0 8
34629: ARRAY
34630: ST_TO_ADDR
// if x = - 1 then
34631: LD_VAR 0 13
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: EQUAL
34640: IFFALSE 34849
// begin for j in f do
34642: LD_ADDR_VAR 0 9
34646: PUSH
34647: LD_VAR 0 12
34651: PUSH
34652: FOR_IN
34653: IFFALSE 34845
// repeat InitHc ;
34655: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34659: LD_VAR 0 9
34663: PPUSH
34664: CALL_OW 266
34668: PUSH
34669: LD_INT 5
34671: EQUAL
34672: IFFALSE 34742
// begin if UnitsInside ( j ) < 3 then
34674: LD_VAR 0 9
34678: PPUSH
34679: CALL_OW 313
34683: PUSH
34684: LD_INT 3
34686: LESS
34687: IFFALSE 34723
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34689: LD_INT 0
34691: PPUSH
34692: LD_INT 5
34694: PUSH
34695: LD_INT 8
34697: PUSH
34698: LD_INT 9
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: PUSH
34706: LD_VAR 0 17
34710: ARRAY
34711: PPUSH
34712: LD_VAR 0 4
34716: PPUSH
34717: CALL_OW 380
34721: GO 34740
// PrepareHuman ( false , i , skill ) ;
34723: LD_INT 0
34725: PPUSH
34726: LD_VAR 0 8
34730: PPUSH
34731: LD_VAR 0 4
34735: PPUSH
34736: CALL_OW 380
// end else
34740: GO 34759
// PrepareHuman ( false , i , skill ) ;
34742: LD_INT 0
34744: PPUSH
34745: LD_VAR 0 8
34749: PPUSH
34750: LD_VAR 0 4
34754: PPUSH
34755: CALL_OW 380
// un := CreateHuman ;
34759: LD_ADDR_VAR 0 14
34763: PUSH
34764: CALL_OW 44
34768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34769: LD_ADDR_VAR 0 7
34773: PUSH
34774: LD_VAR 0 7
34778: PPUSH
34779: LD_INT 1
34781: PPUSH
34782: LD_VAR 0 14
34786: PPUSH
34787: CALL_OW 2
34791: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34792: LD_VAR 0 14
34796: PPUSH
34797: LD_VAR 0 9
34801: PPUSH
34802: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34806: LD_VAR 0 9
34810: PPUSH
34811: CALL_OW 313
34815: PUSH
34816: LD_INT 6
34818: EQUAL
34819: PUSH
34820: LD_VAR 0 9
34824: PPUSH
34825: CALL_OW 266
34829: PUSH
34830: LD_INT 32
34832: PUSH
34833: LD_INT 31
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: IN
34840: OR
34841: IFFALSE 34655
34843: GO 34652
34845: POP
34846: POP
// end else
34847: GO 35229
// for j = 1 to x do
34849: LD_ADDR_VAR 0 9
34853: PUSH
34854: DOUBLE
34855: LD_INT 1
34857: DEC
34858: ST_TO_ADDR
34859: LD_VAR 0 13
34863: PUSH
34864: FOR_TO
34865: IFFALSE 35227
// begin InitHc ;
34867: CALL_OW 19
// if not f then
34871: LD_VAR 0 12
34875: NOT
34876: IFFALSE 34965
// begin PrepareHuman ( false , i , skill ) ;
34878: LD_INT 0
34880: PPUSH
34881: LD_VAR 0 8
34885: PPUSH
34886: LD_VAR 0 4
34890: PPUSH
34891: CALL_OW 380
// un := CreateHuman ;
34895: LD_ADDR_VAR 0 14
34899: PUSH
34900: CALL_OW 44
34904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34905: LD_ADDR_VAR 0 7
34909: PUSH
34910: LD_VAR 0 7
34914: PPUSH
34915: LD_INT 1
34917: PPUSH
34918: LD_VAR 0 14
34922: PPUSH
34923: CALL_OW 2
34927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34928: LD_VAR 0 14
34932: PPUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 250
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 251
34952: PPUSH
34953: LD_INT 10
34955: PPUSH
34956: LD_INT 0
34958: PPUSH
34959: CALL_OW 50
// continue ;
34963: GO 34864
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34965: LD_VAR 0 12
34969: PUSH
34970: LD_INT 1
34972: ARRAY
34973: PPUSH
34974: CALL_OW 313
34978: PUSH
34979: LD_VAR 0 12
34983: PUSH
34984: LD_INT 1
34986: ARRAY
34987: PPUSH
34988: CALL_OW 266
34992: PUSH
34993: LD_INT 32
34995: PUSH
34996: LD_INT 31
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: IN
35003: AND
35004: PUSH
35005: LD_VAR 0 12
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: CALL_OW 313
35018: PUSH
35019: LD_INT 6
35021: EQUAL
35022: OR
35023: IFFALSE 35043
// f := Delete ( f , 1 ) ;
35025: LD_ADDR_VAR 0 12
35029: PUSH
35030: LD_VAR 0 12
35034: PPUSH
35035: LD_INT 1
35037: PPUSH
35038: CALL_OW 3
35042: ST_TO_ADDR
// if not f then
35043: LD_VAR 0 12
35047: NOT
35048: IFFALSE 35066
// begin x := x + 2 ;
35050: LD_ADDR_VAR 0 13
35054: PUSH
35055: LD_VAR 0 13
35059: PUSH
35060: LD_INT 2
35062: PLUS
35063: ST_TO_ADDR
// continue ;
35064: GO 34864
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35066: LD_VAR 0 12
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PPUSH
35075: CALL_OW 266
35079: PUSH
35080: LD_INT 5
35082: EQUAL
35083: IFFALSE 35157
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35085: LD_VAR 0 12
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: CALL_OW 313
35098: PUSH
35099: LD_INT 3
35101: LESS
35102: IFFALSE 35138
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35104: LD_INT 0
35106: PPUSH
35107: LD_INT 5
35109: PUSH
35110: LD_INT 8
35112: PUSH
35113: LD_INT 9
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PUSH
35121: LD_VAR 0 17
35125: ARRAY
35126: PPUSH
35127: LD_VAR 0 4
35131: PPUSH
35132: CALL_OW 380
35136: GO 35155
// PrepareHuman ( false , i , skill ) ;
35138: LD_INT 0
35140: PPUSH
35141: LD_VAR 0 8
35145: PPUSH
35146: LD_VAR 0 4
35150: PPUSH
35151: CALL_OW 380
// end else
35155: GO 35174
// PrepareHuman ( false , i , skill ) ;
35157: LD_INT 0
35159: PPUSH
35160: LD_VAR 0 8
35164: PPUSH
35165: LD_VAR 0 4
35169: PPUSH
35170: CALL_OW 380
// un := CreateHuman ;
35174: LD_ADDR_VAR 0 14
35178: PUSH
35179: CALL_OW 44
35183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35184: LD_ADDR_VAR 0 7
35188: PUSH
35189: LD_VAR 0 7
35193: PPUSH
35194: LD_INT 1
35196: PPUSH
35197: LD_VAR 0 14
35201: PPUSH
35202: CALL_OW 2
35206: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35207: LD_VAR 0 14
35211: PPUSH
35212: LD_VAR 0 12
35216: PUSH
35217: LD_INT 1
35219: ARRAY
35220: PPUSH
35221: CALL_OW 52
// end ;
35225: GO 34864
35227: POP
35228: POP
// end ;
35229: GO 34166
35231: POP
35232: POP
// result := result ^ buildings ;
35233: LD_ADDR_VAR 0 7
35237: PUSH
35238: LD_VAR 0 7
35242: PUSH
35243: LD_VAR 0 18
35247: ADD
35248: ST_TO_ADDR
// end else
35249: GO 35392
// begin for i = 1 to personel do
35251: LD_ADDR_VAR 0 8
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_VAR 0 6
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35390
// begin if i > 4 then
35269: LD_VAR 0 8
35273: PUSH
35274: LD_INT 4
35276: GREATER
35277: IFFALSE 35281
// break ;
35279: GO 35390
// x := personel [ i ] ;
35281: LD_ADDR_VAR 0 13
35285: PUSH
35286: LD_VAR 0 6
35290: PUSH
35291: LD_VAR 0 8
35295: ARRAY
35296: ST_TO_ADDR
// if x = - 1 then
35297: LD_VAR 0 13
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: EQUAL
35306: IFFALSE 35310
// continue ;
35308: GO 35266
// PrepareHuman ( false , i , skill ) ;
35310: LD_INT 0
35312: PPUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_VAR 0 4
35322: PPUSH
35323: CALL_OW 380
// un := CreateHuman ;
35327: LD_ADDR_VAR 0 14
35331: PUSH
35332: CALL_OW 44
35336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35337: LD_VAR 0 14
35341: PPUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 250
35351: PPUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 251
35361: PPUSH
35362: LD_INT 10
35364: PPUSH
35365: LD_INT 0
35367: PPUSH
35368: CALL_OW 50
// result := result ^ un ;
35372: LD_ADDR_VAR 0 7
35376: PUSH
35377: LD_VAR 0 7
35381: PUSH
35382: LD_VAR 0 14
35386: ADD
35387: ST_TO_ADDR
// end ;
35388: GO 35266
35390: POP
35391: POP
// end ; end ;
35392: LD_VAR 0 7
35396: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35397: LD_INT 0
35399: PPUSH
35400: PPUSH
35401: PPUSH
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
// result := false ;
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 0
35422: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35423: LD_VAR 0 1
35427: NOT
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 266
35438: PUSH
35439: LD_INT 32
35441: PUSH
35442: LD_INT 33
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: IN
35449: NOT
35450: OR
35451: IFFALSE 35455
// exit ;
35453: GO 36564
// nat := GetNation ( tower ) ;
35455: LD_ADDR_VAR 0 12
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 248
35469: ST_TO_ADDR
// side := GetSide ( tower ) ;
35470: LD_ADDR_VAR 0 16
35474: PUSH
35475: LD_VAR 0 1
35479: PPUSH
35480: CALL_OW 255
35484: ST_TO_ADDR
// x := GetX ( tower ) ;
35485: LD_ADDR_VAR 0 10
35489: PUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL_OW 250
35499: ST_TO_ADDR
// y := GetY ( tower ) ;
35500: LD_ADDR_VAR 0 11
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 251
35514: ST_TO_ADDR
// if not x or not y then
35515: LD_VAR 0 10
35519: NOT
35520: PUSH
35521: LD_VAR 0 11
35525: NOT
35526: OR
35527: IFFALSE 35531
// exit ;
35529: GO 36564
// weapon := 0 ;
35531: LD_ADDR_VAR 0 18
35535: PUSH
35536: LD_INT 0
35538: ST_TO_ADDR
// fac_list := [ ] ;
35539: LD_ADDR_VAR 0 17
35543: PUSH
35544: EMPTY
35545: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35546: LD_ADDR_VAR 0 6
35550: PUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 274
35560: PPUSH
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_INT 0
35568: PPUSH
35569: CALL 33135 0 3
35573: PPUSH
35574: LD_INT 30
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 72
35588: ST_TO_ADDR
// if not factories then
35589: LD_VAR 0 6
35593: NOT
35594: IFFALSE 35598
// exit ;
35596: GO 36564
// for i in factories do
35598: LD_ADDR_VAR 0 8
35602: PUSH
35603: LD_VAR 0 6
35607: PUSH
35608: FOR_IN
35609: IFFALSE 35634
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35611: LD_ADDR_VAR 0 17
35615: PUSH
35616: LD_VAR 0 17
35620: PUSH
35621: LD_VAR 0 8
35625: PPUSH
35626: CALL_OW 478
35630: UNION
35631: ST_TO_ADDR
35632: GO 35608
35634: POP
35635: POP
// if not fac_list then
35636: LD_VAR 0 17
35640: NOT
35641: IFFALSE 35645
// exit ;
35643: GO 36564
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35645: LD_ADDR_VAR 0 5
35649: PUSH
35650: LD_INT 4
35652: PUSH
35653: LD_INT 5
35655: PUSH
35656: LD_INT 9
35658: PUSH
35659: LD_INT 10
35661: PUSH
35662: LD_INT 6
35664: PUSH
35665: LD_INT 7
35667: PUSH
35668: LD_INT 11
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 27
35682: PUSH
35683: LD_INT 28
35685: PUSH
35686: LD_INT 26
35688: PUSH
35689: LD_INT 30
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 43
35700: PUSH
35701: LD_INT 44
35703: PUSH
35704: LD_INT 46
35706: PUSH
35707: LD_INT 45
35709: PUSH
35710: LD_INT 47
35712: PUSH
35713: LD_INT 49
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: LD_VAR 0 12
35733: ARRAY
35734: ST_TO_ADDR
// list := list isect fac_list ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 5
35744: PUSH
35745: LD_VAR 0 17
35749: ISECT
35750: ST_TO_ADDR
// if not list then
35751: LD_VAR 0 5
35755: NOT
35756: IFFALSE 35760
// exit ;
35758: GO 36564
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35760: LD_VAR 0 12
35764: PUSH
35765: LD_INT 3
35767: EQUAL
35768: PUSH
35769: LD_INT 49
35771: PUSH
35772: LD_VAR 0 5
35776: IN
35777: AND
35778: PUSH
35779: LD_INT 31
35781: PPUSH
35782: LD_VAR 0 16
35786: PPUSH
35787: CALL_OW 321
35791: PUSH
35792: LD_INT 2
35794: EQUAL
35795: AND
35796: IFFALSE 35856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35798: LD_INT 22
35800: PUSH
35801: LD_VAR 0 16
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 35
35812: PUSH
35813: LD_INT 49
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 91
35822: PUSH
35823: LD_VAR 0 1
35827: PUSH
35828: LD_INT 10
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: PPUSH
35841: CALL_OW 69
35845: NOT
35846: IFFALSE 35856
// weapon := ru_time_lapser ;
35848: LD_ADDR_VAR 0 18
35852: PUSH
35853: LD_INT 49
35855: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35856: LD_VAR 0 12
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: IN
35871: PUSH
35872: LD_INT 11
35874: PUSH
35875: LD_VAR 0 5
35879: IN
35880: PUSH
35881: LD_INT 30
35883: PUSH
35884: LD_VAR 0 5
35888: IN
35889: OR
35890: AND
35891: PUSH
35892: LD_INT 6
35894: PPUSH
35895: LD_VAR 0 16
35899: PPUSH
35900: CALL_OW 321
35904: PUSH
35905: LD_INT 2
35907: EQUAL
35908: AND
35909: IFFALSE 36074
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35911: LD_INT 22
35913: PUSH
35914: LD_VAR 0 16
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 35
35928: PUSH
35929: LD_INT 11
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 35
35938: PUSH
35939: LD_INT 30
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 91
35953: PUSH
35954: LD_VAR 0 1
35958: PUSH
35959: LD_INT 18
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 69
35976: NOT
35977: PUSH
35978: LD_INT 22
35980: PUSH
35981: LD_VAR 0 16
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 30
35995: PUSH
35996: LD_INT 32
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 30
36005: PUSH
36006: LD_INT 33
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 91
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 12
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: PUSH
36039: EMPTY
36040: LIST
36041: PPUSH
36042: CALL_OW 69
36046: PUSH
36047: LD_INT 2
36049: GREATER
36050: AND
36051: IFFALSE 36074
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36053: LD_ADDR_VAR 0 18
36057: PUSH
36058: LD_INT 11
36060: PUSH
36061: LD_INT 30
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_VAR 0 12
36072: ARRAY
36073: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36074: LD_VAR 0 18
36078: NOT
36079: PUSH
36080: LD_INT 40
36082: PPUSH
36083: LD_VAR 0 16
36087: PPUSH
36088: CALL_OW 321
36092: PUSH
36093: LD_INT 2
36095: EQUAL
36096: AND
36097: PUSH
36098: LD_INT 7
36100: PUSH
36101: LD_VAR 0 5
36105: IN
36106: PUSH
36107: LD_INT 28
36109: PUSH
36110: LD_VAR 0 5
36114: IN
36115: OR
36116: PUSH
36117: LD_INT 45
36119: PUSH
36120: LD_VAR 0 5
36124: IN
36125: OR
36126: AND
36127: IFFALSE 36381
// begin hex := GetHexInfo ( x , y ) ;
36129: LD_ADDR_VAR 0 4
36133: PUSH
36134: LD_VAR 0 10
36138: PPUSH
36139: LD_VAR 0 11
36143: PPUSH
36144: CALL_OW 546
36148: ST_TO_ADDR
// if hex [ 1 ] then
36149: LD_VAR 0 4
36153: PUSH
36154: LD_INT 1
36156: ARRAY
36157: IFFALSE 36161
// exit ;
36159: GO 36564
// height := hex [ 2 ] ;
36161: LD_ADDR_VAR 0 15
36165: PUSH
36166: LD_VAR 0 4
36170: PUSH
36171: LD_INT 2
36173: ARRAY
36174: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36175: LD_ADDR_VAR 0 14
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 5
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: ST_TO_ADDR
// for i in tmp do
36198: LD_ADDR_VAR 0 8
36202: PUSH
36203: LD_VAR 0 14
36207: PUSH
36208: FOR_IN
36209: IFFALSE 36379
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36211: LD_ADDR_VAR 0 9
36215: PUSH
36216: LD_VAR 0 10
36220: PPUSH
36221: LD_VAR 0 8
36225: PPUSH
36226: LD_INT 5
36228: PPUSH
36229: CALL_OW 272
36233: PUSH
36234: LD_VAR 0 11
36238: PPUSH
36239: LD_VAR 0 8
36243: PPUSH
36244: LD_INT 5
36246: PPUSH
36247: CALL_OW 273
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36256: LD_VAR 0 9
36260: PUSH
36261: LD_INT 1
36263: ARRAY
36264: PPUSH
36265: LD_VAR 0 9
36269: PUSH
36270: LD_INT 2
36272: ARRAY
36273: PPUSH
36274: CALL_OW 488
36278: IFFALSE 36377
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36280: LD_ADDR_VAR 0 4
36284: PUSH
36285: LD_VAR 0 9
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PPUSH
36294: LD_VAR 0 9
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: PPUSH
36303: CALL_OW 546
36307: ST_TO_ADDR
// if hex [ 1 ] then
36308: LD_VAR 0 4
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: IFFALSE 36320
// continue ;
36318: GO 36208
// h := hex [ 2 ] ;
36320: LD_ADDR_VAR 0 13
36324: PUSH
36325: LD_VAR 0 4
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: ST_TO_ADDR
// if h + 7 < height then
36334: LD_VAR 0 13
36338: PUSH
36339: LD_INT 7
36341: PLUS
36342: PUSH
36343: LD_VAR 0 15
36347: LESS
36348: IFFALSE 36377
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36350: LD_ADDR_VAR 0 18
36354: PUSH
36355: LD_INT 7
36357: PUSH
36358: LD_INT 28
36360: PUSH
36361: LD_INT 45
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: LD_VAR 0 12
36373: ARRAY
36374: ST_TO_ADDR
// break ;
36375: GO 36379
// end ; end ; end ;
36377: GO 36208
36379: POP
36380: POP
// end ; if not weapon then
36381: LD_VAR 0 18
36385: NOT
36386: IFFALSE 36446
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36388: LD_ADDR_VAR 0 5
36392: PUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 11
36400: PUSH
36401: LD_INT 30
36403: PUSH
36404: LD_INT 49
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: DIFF
36412: ST_TO_ADDR
// if not list then
36413: LD_VAR 0 5
36417: NOT
36418: IFFALSE 36422
// exit ;
36420: GO 36564
// weapon := list [ rand ( 1 , list ) ] ;
36422: LD_ADDR_VAR 0 18
36426: PUSH
36427: LD_VAR 0 5
36431: PUSH
36432: LD_INT 1
36434: PPUSH
36435: LD_VAR 0 5
36439: PPUSH
36440: CALL_OW 12
36444: ARRAY
36445: ST_TO_ADDR
// end ; if weapon then
36446: LD_VAR 0 18
36450: IFFALSE 36564
// begin tmp := CostOfWeapon ( weapon ) ;
36452: LD_ADDR_VAR 0 14
36456: PUSH
36457: LD_VAR 0 18
36461: PPUSH
36462: CALL_OW 451
36466: ST_TO_ADDR
// j := GetBase ( tower ) ;
36467: LD_ADDR_VAR 0 9
36471: PUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 274
36481: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36482: LD_VAR 0 9
36486: PPUSH
36487: LD_INT 1
36489: PPUSH
36490: CALL_OW 275
36494: PUSH
36495: LD_VAR 0 14
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: GREATEREQUAL
36504: PUSH
36505: LD_VAR 0 9
36509: PPUSH
36510: LD_INT 2
36512: PPUSH
36513: CALL_OW 275
36517: PUSH
36518: LD_VAR 0 14
36522: PUSH
36523: LD_INT 2
36525: ARRAY
36526: GREATEREQUAL
36527: AND
36528: PUSH
36529: LD_VAR 0 9
36533: PPUSH
36534: LD_INT 3
36536: PPUSH
36537: CALL_OW 275
36541: PUSH
36542: LD_VAR 0 14
36546: PUSH
36547: LD_INT 3
36549: ARRAY
36550: GREATEREQUAL
36551: AND
36552: IFFALSE 36564
// result := weapon ;
36554: LD_ADDR_VAR 0 3
36558: PUSH
36559: LD_VAR 0 18
36563: ST_TO_ADDR
// end ; end ;
36564: LD_VAR 0 3
36568: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36569: LD_INT 0
36571: PPUSH
36572: PPUSH
// result := true ;
36573: LD_ADDR_VAR 0 3
36577: PUSH
36578: LD_INT 1
36580: ST_TO_ADDR
// if array1 = array2 then
36581: LD_VAR 0 1
36585: PUSH
36586: LD_VAR 0 2
36590: EQUAL
36591: IFFALSE 36651
// begin for i = 1 to array1 do
36593: LD_ADDR_VAR 0 4
36597: PUSH
36598: DOUBLE
36599: LD_INT 1
36601: DEC
36602: ST_TO_ADDR
36603: LD_VAR 0 1
36607: PUSH
36608: FOR_TO
36609: IFFALSE 36647
// if array1 [ i ] <> array2 [ i ] then
36611: LD_VAR 0 1
36615: PUSH
36616: LD_VAR 0 4
36620: ARRAY
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_VAR 0 4
36631: ARRAY
36632: NONEQUAL
36633: IFFALSE 36645
// begin result := false ;
36635: LD_ADDR_VAR 0 3
36639: PUSH
36640: LD_INT 0
36642: ST_TO_ADDR
// break ;
36643: GO 36647
// end ;
36645: GO 36608
36647: POP
36648: POP
// end else
36649: GO 36659
// result := false ;
36651: LD_ADDR_VAR 0 3
36655: PUSH
36656: LD_INT 0
36658: ST_TO_ADDR
// end ;
36659: LD_VAR 0 3
36663: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
// if not array1 or not array2 then
36668: LD_VAR 0 1
36672: NOT
36673: PUSH
36674: LD_VAR 0 2
36678: NOT
36679: OR
36680: IFFALSE 36684
// exit ;
36682: GO 36748
// result := true ;
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 1
36691: ST_TO_ADDR
// for i = 1 to array1 do
36692: LD_ADDR_VAR 0 4
36696: PUSH
36697: DOUBLE
36698: LD_INT 1
36700: DEC
36701: ST_TO_ADDR
36702: LD_VAR 0 1
36706: PUSH
36707: FOR_TO
36708: IFFALSE 36746
// if array1 [ i ] <> array2 [ i ] then
36710: LD_VAR 0 1
36714: PUSH
36715: LD_VAR 0 4
36719: ARRAY
36720: PUSH
36721: LD_VAR 0 2
36725: PUSH
36726: LD_VAR 0 4
36730: ARRAY
36731: NONEQUAL
36732: IFFALSE 36744
// begin result := false ;
36734: LD_ADDR_VAR 0 3
36738: PUSH
36739: LD_INT 0
36741: ST_TO_ADDR
// break ;
36742: GO 36746
// end ;
36744: GO 36707
36746: POP
36747: POP
// end ;
36748: LD_VAR 0 3
36752: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
36757: PPUSH
// pom := GetBase ( fac ) ;
36758: LD_ADDR_VAR 0 5
36762: PUSH
36763: LD_VAR 0 1
36767: PPUSH
36768: CALL_OW 274
36772: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36773: LD_ADDR_VAR 0 4
36777: PUSH
36778: LD_VAR 0 2
36782: PUSH
36783: LD_INT 1
36785: ARRAY
36786: PPUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_INT 2
36794: ARRAY
36795: PPUSH
36796: LD_VAR 0 2
36800: PUSH
36801: LD_INT 3
36803: ARRAY
36804: PPUSH
36805: LD_VAR 0 2
36809: PUSH
36810: LD_INT 4
36812: ARRAY
36813: PPUSH
36814: CALL_OW 449
36818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36819: LD_ADDR_VAR 0 3
36823: PUSH
36824: LD_VAR 0 5
36828: PPUSH
36829: LD_INT 1
36831: PPUSH
36832: CALL_OW 275
36836: PUSH
36837: LD_VAR 0 4
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: GREATEREQUAL
36846: PUSH
36847: LD_VAR 0 5
36851: PPUSH
36852: LD_INT 2
36854: PPUSH
36855: CALL_OW 275
36859: PUSH
36860: LD_VAR 0 4
36864: PUSH
36865: LD_INT 2
36867: ARRAY
36868: GREATEREQUAL
36869: AND
36870: PUSH
36871: LD_VAR 0 5
36875: PPUSH
36876: LD_INT 3
36878: PPUSH
36879: CALL_OW 275
36883: PUSH
36884: LD_VAR 0 4
36888: PUSH
36889: LD_INT 3
36891: ARRAY
36892: GREATEREQUAL
36893: AND
36894: ST_TO_ADDR
// end ;
36895: LD_VAR 0 3
36899: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36900: LD_INT 0
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
// pom := GetBase ( building ) ;
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL_OW 274
36920: ST_TO_ADDR
// if not pom then
36921: LD_VAR 0 3
36925: NOT
36926: IFFALSE 36930
// exit ;
36928: GO 37100
// btype := GetBType ( building ) ;
36930: LD_ADDR_VAR 0 5
36934: PUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 266
36944: ST_TO_ADDR
// if btype = b_armoury then
36945: LD_VAR 0 5
36949: PUSH
36950: LD_INT 4
36952: EQUAL
36953: IFFALSE 36963
// btype := b_barracks ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_INT 5
36962: ST_TO_ADDR
// if btype = b_depot then
36963: LD_VAR 0 5
36967: PUSH
36968: LD_INT 0
36970: EQUAL
36971: IFFALSE 36981
// btype := b_warehouse ;
36973: LD_ADDR_VAR 0 5
36977: PUSH
36978: LD_INT 1
36980: ST_TO_ADDR
// if btype = b_workshop then
36981: LD_VAR 0 5
36985: PUSH
36986: LD_INT 2
36988: EQUAL
36989: IFFALSE 36999
// btype := b_factory ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: LD_INT 3
36998: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36999: LD_ADDR_VAR 0 4
37003: PUSH
37004: LD_VAR 0 5
37008: PPUSH
37009: LD_VAR 0 1
37013: PPUSH
37014: CALL_OW 248
37018: PPUSH
37019: CALL_OW 450
37023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37024: LD_ADDR_VAR 0 2
37028: PUSH
37029: LD_VAR 0 3
37033: PPUSH
37034: LD_INT 1
37036: PPUSH
37037: CALL_OW 275
37041: PUSH
37042: LD_VAR 0 4
37046: PUSH
37047: LD_INT 1
37049: ARRAY
37050: GREATEREQUAL
37051: PUSH
37052: LD_VAR 0 3
37056: PPUSH
37057: LD_INT 2
37059: PPUSH
37060: CALL_OW 275
37064: PUSH
37065: LD_VAR 0 4
37069: PUSH
37070: LD_INT 2
37072: ARRAY
37073: GREATEREQUAL
37074: AND
37075: PUSH
37076: LD_VAR 0 3
37080: PPUSH
37081: LD_INT 3
37083: PPUSH
37084: CALL_OW 275
37088: PUSH
37089: LD_VAR 0 4
37093: PUSH
37094: LD_INT 3
37096: ARRAY
37097: GREATEREQUAL
37098: AND
37099: ST_TO_ADDR
// end ;
37100: LD_VAR 0 2
37104: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
37109: PPUSH
// pom := GetBase ( building ) ;
37110: LD_ADDR_VAR 0 4
37114: PUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 274
37124: ST_TO_ADDR
// if not pom then
37125: LD_VAR 0 4
37129: NOT
37130: IFFALSE 37134
// exit ;
37132: GO 37235
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37134: LD_ADDR_VAR 0 5
37138: PUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 248
37153: PPUSH
37154: CALL_OW 450
37158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37159: LD_ADDR_VAR 0 3
37163: PUSH
37164: LD_VAR 0 4
37168: PPUSH
37169: LD_INT 1
37171: PPUSH
37172: CALL_OW 275
37176: PUSH
37177: LD_VAR 0 5
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: GREATEREQUAL
37186: PUSH
37187: LD_VAR 0 4
37191: PPUSH
37192: LD_INT 2
37194: PPUSH
37195: CALL_OW 275
37199: PUSH
37200: LD_VAR 0 5
37204: PUSH
37205: LD_INT 2
37207: ARRAY
37208: GREATEREQUAL
37209: AND
37210: PUSH
37211: LD_VAR 0 4
37215: PPUSH
37216: LD_INT 3
37218: PPUSH
37219: CALL_OW 275
37223: PUSH
37224: LD_VAR 0 5
37228: PUSH
37229: LD_INT 3
37231: ARRAY
37232: GREATEREQUAL
37233: AND
37234: ST_TO_ADDR
// end ;
37235: LD_VAR 0 3
37239: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37240: LD_INT 0
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
// result := false ;
37253: LD_ADDR_VAR 0 8
37257: PUSH
37258: LD_INT 0
37260: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37261: LD_VAR 0 5
37265: NOT
37266: PUSH
37267: LD_VAR 0 1
37271: NOT
37272: OR
37273: PUSH
37274: LD_VAR 0 2
37278: NOT
37279: OR
37280: PUSH
37281: LD_VAR 0 3
37285: NOT
37286: OR
37287: IFFALSE 37291
// exit ;
37289: GO 38105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37291: LD_ADDR_VAR 0 14
37295: PUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: LD_VAR 0 2
37305: PPUSH
37306: LD_VAR 0 3
37310: PPUSH
37311: LD_VAR 0 4
37315: PPUSH
37316: LD_VAR 0 5
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: PPUSH
37325: CALL_OW 248
37329: PPUSH
37330: LD_INT 0
37332: PPUSH
37333: CALL 39342 0 6
37337: ST_TO_ADDR
// if not hexes then
37338: LD_VAR 0 14
37342: NOT
37343: IFFALSE 37347
// exit ;
37345: GO 38105
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37347: LD_ADDR_VAR 0 17
37351: PUSH
37352: LD_VAR 0 5
37356: PPUSH
37357: LD_INT 22
37359: PUSH
37360: LD_VAR 0 13
37364: PPUSH
37365: CALL_OW 255
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 30
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 30
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PPUSH
37406: CALL_OW 72
37410: ST_TO_ADDR
// for i = 1 to hexes do
37411: LD_ADDR_VAR 0 9
37415: PUSH
37416: DOUBLE
37417: LD_INT 1
37419: DEC
37420: ST_TO_ADDR
37421: LD_VAR 0 14
37425: PUSH
37426: FOR_TO
37427: IFFALSE 38103
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37429: LD_ADDR_VAR 0 13
37433: PUSH
37434: LD_VAR 0 14
37438: PUSH
37439: LD_VAR 0 9
37443: ARRAY
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PPUSH
37449: LD_VAR 0 14
37453: PUSH
37454: LD_VAR 0 9
37458: ARRAY
37459: PUSH
37460: LD_INT 2
37462: ARRAY
37463: PPUSH
37464: CALL_OW 428
37468: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37469: LD_VAR 0 14
37473: PUSH
37474: LD_VAR 0 9
37478: ARRAY
37479: PUSH
37480: LD_INT 1
37482: ARRAY
37483: PPUSH
37484: LD_VAR 0 14
37488: PUSH
37489: LD_VAR 0 9
37493: ARRAY
37494: PUSH
37495: LD_INT 2
37497: ARRAY
37498: PPUSH
37499: CALL_OW 351
37503: PUSH
37504: LD_VAR 0 14
37508: PUSH
37509: LD_VAR 0 9
37513: ARRAY
37514: PUSH
37515: LD_INT 1
37517: ARRAY
37518: PPUSH
37519: LD_VAR 0 14
37523: PUSH
37524: LD_VAR 0 9
37528: ARRAY
37529: PUSH
37530: LD_INT 2
37532: ARRAY
37533: PPUSH
37534: CALL_OW 488
37538: NOT
37539: OR
37540: PUSH
37541: LD_VAR 0 13
37545: PPUSH
37546: CALL_OW 247
37550: PUSH
37551: LD_INT 3
37553: EQUAL
37554: OR
37555: IFFALSE 37561
// exit ;
37557: POP
37558: POP
37559: GO 38105
// if not tmp then
37561: LD_VAR 0 13
37565: NOT
37566: IFFALSE 37570
// continue ;
37568: GO 37426
// result := true ;
37570: LD_ADDR_VAR 0 8
37574: PUSH
37575: LD_INT 1
37577: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37578: LD_VAR 0 6
37582: PUSH
37583: LD_VAR 0 13
37587: PPUSH
37588: CALL_OW 247
37592: PUSH
37593: LD_INT 2
37595: EQUAL
37596: AND
37597: PUSH
37598: LD_VAR 0 13
37602: PPUSH
37603: CALL_OW 263
37607: PUSH
37608: LD_INT 1
37610: EQUAL
37611: AND
37612: IFFALSE 37776
// begin if IsDrivenBy ( tmp ) then
37614: LD_VAR 0 13
37618: PPUSH
37619: CALL_OW 311
37623: IFFALSE 37627
// continue ;
37625: GO 37426
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37627: LD_VAR 0 6
37631: PPUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 60
37637: PUSH
37638: EMPTY
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: LD_INT 55
37650: PUSH
37651: EMPTY
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PPUSH
37662: CALL_OW 72
37666: IFFALSE 37774
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37668: LD_ADDR_VAR 0 18
37672: PUSH
37673: LD_VAR 0 6
37677: PPUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 60
37683: PUSH
37684: EMPTY
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 55
37696: PUSH
37697: EMPTY
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PPUSH
37708: CALL_OW 72
37712: PUSH
37713: LD_INT 1
37715: ARRAY
37716: ST_TO_ADDR
// if IsInUnit ( driver ) then
37717: LD_VAR 0 18
37721: PPUSH
37722: CALL_OW 310
37726: IFFALSE 37737
// ComExit ( driver ) ;
37728: LD_VAR 0 18
37732: PPUSH
37733: CALL 63047 0 1
// AddComEnterUnit ( driver , tmp ) ;
37737: LD_VAR 0 18
37741: PPUSH
37742: LD_VAR 0 13
37746: PPUSH
37747: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37751: LD_VAR 0 18
37755: PPUSH
37756: LD_VAR 0 7
37760: PPUSH
37761: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37765: LD_VAR 0 18
37769: PPUSH
37770: CALL_OW 181
// end ; continue ;
37774: GO 37426
// end ; if not cleaners or not tmp in cleaners then
37776: LD_VAR 0 6
37780: NOT
37781: PUSH
37782: LD_VAR 0 13
37786: PUSH
37787: LD_VAR 0 6
37791: IN
37792: NOT
37793: OR
37794: IFFALSE 38101
// begin if dep then
37796: LD_VAR 0 17
37800: IFFALSE 37936
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37802: LD_ADDR_VAR 0 16
37806: PUSH
37807: LD_VAR 0 17
37811: PUSH
37812: LD_INT 1
37814: ARRAY
37815: PPUSH
37816: CALL_OW 250
37820: PPUSH
37821: LD_VAR 0 17
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: PPUSH
37830: CALL_OW 254
37834: PPUSH
37835: LD_INT 5
37837: PPUSH
37838: CALL_OW 272
37842: PUSH
37843: LD_VAR 0 17
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PPUSH
37852: CALL_OW 251
37856: PPUSH
37857: LD_VAR 0 17
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: PPUSH
37866: CALL_OW 254
37870: PPUSH
37871: LD_INT 5
37873: PPUSH
37874: CALL_OW 273
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37883: LD_VAR 0 16
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PPUSH
37892: LD_VAR 0 16
37896: PUSH
37897: LD_INT 2
37899: ARRAY
37900: PPUSH
37901: CALL_OW 488
37905: IFFALSE 37936
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37907: LD_VAR 0 13
37911: PPUSH
37912: LD_VAR 0 16
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PPUSH
37921: LD_VAR 0 16
37925: PUSH
37926: LD_INT 2
37928: ARRAY
37929: PPUSH
37930: CALL_OW 111
// continue ;
37934: GO 37426
// end ; end ; r := GetDir ( tmp ) ;
37936: LD_ADDR_VAR 0 15
37940: PUSH
37941: LD_VAR 0 13
37945: PPUSH
37946: CALL_OW 254
37950: ST_TO_ADDR
// if r = 5 then
37951: LD_VAR 0 15
37955: PUSH
37956: LD_INT 5
37958: EQUAL
37959: IFFALSE 37969
// r := 0 ;
37961: LD_ADDR_VAR 0 15
37965: PUSH
37966: LD_INT 0
37968: ST_TO_ADDR
// for j = r to 5 do
37969: LD_ADDR_VAR 0 10
37973: PUSH
37974: DOUBLE
37975: LD_VAR 0 15
37979: DEC
37980: ST_TO_ADDR
37981: LD_INT 5
37983: PUSH
37984: FOR_TO
37985: IFFALSE 38099
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37987: LD_ADDR_VAR 0 11
37991: PUSH
37992: LD_VAR 0 13
37996: PPUSH
37997: CALL_OW 250
38001: PPUSH
38002: LD_VAR 0 10
38006: PPUSH
38007: LD_INT 2
38009: PPUSH
38010: CALL_OW 272
38014: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38015: LD_ADDR_VAR 0 12
38019: PUSH
38020: LD_VAR 0 13
38024: PPUSH
38025: CALL_OW 251
38029: PPUSH
38030: LD_VAR 0 10
38034: PPUSH
38035: LD_INT 2
38037: PPUSH
38038: CALL_OW 273
38042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38043: LD_VAR 0 11
38047: PPUSH
38048: LD_VAR 0 12
38052: PPUSH
38053: CALL_OW 488
38057: PUSH
38058: LD_VAR 0 11
38062: PPUSH
38063: LD_VAR 0 12
38067: PPUSH
38068: CALL_OW 428
38072: NOT
38073: AND
38074: IFFALSE 38097
// begin ComMoveXY ( tmp , _x , _y ) ;
38076: LD_VAR 0 13
38080: PPUSH
38081: LD_VAR 0 11
38085: PPUSH
38086: LD_VAR 0 12
38090: PPUSH
38091: CALL_OW 111
// break ;
38095: GO 38099
// end ; end ;
38097: GO 37984
38099: POP
38100: POP
// end ; end ;
38101: GO 37426
38103: POP
38104: POP
// end ;
38105: LD_VAR 0 8
38109: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38110: LD_INT 0
38112: PPUSH
// result := true ;
38113: LD_ADDR_VAR 0 3
38117: PUSH
38118: LD_INT 1
38120: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38121: LD_VAR 0 2
38125: PUSH
38126: LD_INT 24
38128: DOUBLE
38129: EQUAL
38130: IFTRUE 38140
38132: LD_INT 33
38134: DOUBLE
38135: EQUAL
38136: IFTRUE 38140
38138: GO 38165
38140: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38141: LD_ADDR_VAR 0 3
38145: PUSH
38146: LD_INT 32
38148: PPUSH
38149: LD_VAR 0 1
38153: PPUSH
38154: CALL_OW 321
38158: PUSH
38159: LD_INT 2
38161: EQUAL
38162: ST_TO_ADDR
38163: GO 38485
38165: LD_INT 20
38167: DOUBLE
38168: EQUAL
38169: IFTRUE 38173
38171: GO 38198
38173: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_INT 6
38181: PPUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 321
38191: PUSH
38192: LD_INT 2
38194: EQUAL
38195: ST_TO_ADDR
38196: GO 38485
38198: LD_INT 22
38200: DOUBLE
38201: EQUAL
38202: IFTRUE 38212
38204: LD_INT 36
38206: DOUBLE
38207: EQUAL
38208: IFTRUE 38212
38210: GO 38237
38212: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38213: LD_ADDR_VAR 0 3
38217: PUSH
38218: LD_INT 15
38220: PPUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 321
38230: PUSH
38231: LD_INT 2
38233: EQUAL
38234: ST_TO_ADDR
38235: GO 38485
38237: LD_INT 30
38239: DOUBLE
38240: EQUAL
38241: IFTRUE 38245
38243: GO 38270
38245: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_INT 20
38253: PPUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 321
38263: PUSH
38264: LD_INT 2
38266: EQUAL
38267: ST_TO_ADDR
38268: GO 38485
38270: LD_INT 28
38272: DOUBLE
38273: EQUAL
38274: IFTRUE 38284
38276: LD_INT 21
38278: DOUBLE
38279: EQUAL
38280: IFTRUE 38284
38282: GO 38309
38284: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38285: LD_ADDR_VAR 0 3
38289: PUSH
38290: LD_INT 21
38292: PPUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 321
38302: PUSH
38303: LD_INT 2
38305: EQUAL
38306: ST_TO_ADDR
38307: GO 38485
38309: LD_INT 16
38311: DOUBLE
38312: EQUAL
38313: IFTRUE 38317
38315: GO 38344
38317: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38318: LD_ADDR_VAR 0 3
38322: PUSH
38323: LD_EXP 99
38327: PPUSH
38328: LD_VAR 0 1
38332: PPUSH
38333: CALL_OW 321
38337: PUSH
38338: LD_INT 2
38340: EQUAL
38341: ST_TO_ADDR
38342: GO 38485
38344: LD_INT 19
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38358
38350: LD_INT 23
38352: DOUBLE
38353: EQUAL
38354: IFTRUE 38358
38356: GO 38385
38358: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38359: LD_ADDR_VAR 0 3
38363: PUSH
38364: LD_EXP 98
38368: PPUSH
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 321
38378: PUSH
38379: LD_INT 2
38381: EQUAL
38382: ST_TO_ADDR
38383: GO 38485
38385: LD_INT 17
38387: DOUBLE
38388: EQUAL
38389: IFTRUE 38393
38391: GO 38418
38393: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_INT 39
38401: PPUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 321
38411: PUSH
38412: LD_INT 2
38414: EQUAL
38415: ST_TO_ADDR
38416: GO 38485
38418: LD_INT 18
38420: DOUBLE
38421: EQUAL
38422: IFTRUE 38426
38424: GO 38451
38426: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: LD_INT 40
38434: PPUSH
38435: LD_VAR 0 1
38439: PPUSH
38440: CALL_OW 321
38444: PUSH
38445: LD_INT 2
38447: EQUAL
38448: ST_TO_ADDR
38449: GO 38485
38451: LD_INT 27
38453: DOUBLE
38454: EQUAL
38455: IFTRUE 38459
38457: GO 38484
38459: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38460: LD_ADDR_VAR 0 3
38464: PUSH
38465: LD_INT 35
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 321
38477: PUSH
38478: LD_INT 2
38480: EQUAL
38481: ST_TO_ADDR
38482: GO 38485
38484: POP
// end ;
38485: LD_VAR 0 3
38489: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38490: LD_INT 0
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
// result := false ;
38503: LD_ADDR_VAR 0 6
38507: PUSH
38508: LD_INT 0
38510: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38511: LD_VAR 0 1
38515: NOT
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 266
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: IN
38537: NOT
38538: OR
38539: PUSH
38540: LD_VAR 0 2
38544: NOT
38545: OR
38546: PUSH
38547: LD_VAR 0 5
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: IN
38578: NOT
38579: OR
38580: PUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: LD_VAR 0 4
38590: PPUSH
38591: CALL_OW 488
38595: NOT
38596: OR
38597: IFFALSE 38601
// exit ;
38599: GO 39337
// side := GetSide ( depot ) ;
38601: LD_ADDR_VAR 0 9
38605: PUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 255
38615: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38616: LD_VAR 0 9
38620: PPUSH
38621: LD_VAR 0 2
38625: PPUSH
38626: CALL 38110 0 2
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 39337
// pom := GetBase ( depot ) ;
38635: LD_ADDR_VAR 0 10
38639: PUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 274
38649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38650: LD_ADDR_VAR 0 11
38654: PUSH
38655: LD_VAR 0 2
38659: PPUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL_OW 248
38669: PPUSH
38670: CALL_OW 450
38674: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38675: LD_VAR 0 10
38679: PPUSH
38680: LD_INT 1
38682: PPUSH
38683: CALL_OW 275
38687: PUSH
38688: LD_VAR 0 11
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: GREATEREQUAL
38697: PUSH
38698: LD_VAR 0 10
38702: PPUSH
38703: LD_INT 2
38705: PPUSH
38706: CALL_OW 275
38710: PUSH
38711: LD_VAR 0 11
38715: PUSH
38716: LD_INT 2
38718: ARRAY
38719: GREATEREQUAL
38720: AND
38721: PUSH
38722: LD_VAR 0 10
38726: PPUSH
38727: LD_INT 3
38729: PPUSH
38730: CALL_OW 275
38734: PUSH
38735: LD_VAR 0 11
38739: PUSH
38740: LD_INT 3
38742: ARRAY
38743: GREATEREQUAL
38744: AND
38745: NOT
38746: IFFALSE 38750
// exit ;
38748: GO 39337
// if GetBType ( depot ) = b_depot then
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 266
38759: PUSH
38760: LD_INT 0
38762: EQUAL
38763: IFFALSE 38775
// dist := 28 else
38765: LD_ADDR_VAR 0 14
38769: PUSH
38770: LD_INT 28
38772: ST_TO_ADDR
38773: GO 38783
// dist := 36 ;
38775: LD_ADDR_VAR 0 14
38779: PUSH
38780: LD_INT 36
38782: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38783: LD_VAR 0 1
38787: PPUSH
38788: LD_VAR 0 3
38792: PPUSH
38793: LD_VAR 0 4
38797: PPUSH
38798: CALL_OW 297
38802: PUSH
38803: LD_VAR 0 14
38807: GREATER
38808: IFFALSE 38812
// exit ;
38810: GO 39337
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38812: LD_ADDR_VAR 0 12
38816: PUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_VAR 0 3
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: LD_VAR 0 5
38836: PPUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 248
38846: PPUSH
38847: LD_INT 0
38849: PPUSH
38850: CALL 39342 0 6
38854: ST_TO_ADDR
// if not hexes then
38855: LD_VAR 0 12
38859: NOT
38860: IFFALSE 38864
// exit ;
38862: GO 39337
// hex := GetHexInfo ( x , y ) ;
38864: LD_ADDR_VAR 0 15
38868: PUSH
38869: LD_VAR 0 3
38873: PPUSH
38874: LD_VAR 0 4
38878: PPUSH
38879: CALL_OW 546
38883: ST_TO_ADDR
// if hex [ 1 ] then
38884: LD_VAR 0 15
38888: PUSH
38889: LD_INT 1
38891: ARRAY
38892: IFFALSE 38896
// exit ;
38894: GO 39337
// height := hex [ 2 ] ;
38896: LD_ADDR_VAR 0 13
38900: PUSH
38901: LD_VAR 0 15
38905: PUSH
38906: LD_INT 2
38908: ARRAY
38909: ST_TO_ADDR
// for i = 1 to hexes do
38910: LD_ADDR_VAR 0 7
38914: PUSH
38915: DOUBLE
38916: LD_INT 1
38918: DEC
38919: ST_TO_ADDR
38920: LD_VAR 0 12
38924: PUSH
38925: FOR_TO
38926: IFFALSE 39256
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38928: LD_VAR 0 12
38932: PUSH
38933: LD_VAR 0 7
38937: ARRAY
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 12
38947: PUSH
38948: LD_VAR 0 7
38952: ARRAY
38953: PUSH
38954: LD_INT 2
38956: ARRAY
38957: PPUSH
38958: CALL_OW 488
38962: NOT
38963: PUSH
38964: LD_VAR 0 12
38968: PUSH
38969: LD_VAR 0 7
38973: ARRAY
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: LD_VAR 0 12
38983: PUSH
38984: LD_VAR 0 7
38988: ARRAY
38989: PUSH
38990: LD_INT 2
38992: ARRAY
38993: PPUSH
38994: CALL_OW 428
38998: PUSH
38999: LD_INT 0
39001: GREATER
39002: OR
39003: PUSH
39004: LD_VAR 0 12
39008: PUSH
39009: LD_VAR 0 7
39013: ARRAY
39014: PUSH
39015: LD_INT 1
39017: ARRAY
39018: PPUSH
39019: LD_VAR 0 12
39023: PUSH
39024: LD_VAR 0 7
39028: ARRAY
39029: PUSH
39030: LD_INT 2
39032: ARRAY
39033: PPUSH
39034: CALL_OW 351
39038: OR
39039: IFFALSE 39045
// exit ;
39041: POP
39042: POP
39043: GO 39337
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39045: LD_ADDR_VAR 0 8
39049: PUSH
39050: LD_VAR 0 12
39054: PUSH
39055: LD_VAR 0 7
39059: ARRAY
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PPUSH
39065: LD_VAR 0 12
39069: PUSH
39070: LD_VAR 0 7
39074: ARRAY
39075: PUSH
39076: LD_INT 2
39078: ARRAY
39079: PPUSH
39080: CALL_OW 546
39084: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39085: LD_VAR 0 8
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PUSH
39094: LD_VAR 0 8
39098: PUSH
39099: LD_INT 2
39101: ARRAY
39102: PUSH
39103: LD_VAR 0 13
39107: PUSH
39108: LD_INT 2
39110: PLUS
39111: GREATER
39112: OR
39113: PUSH
39114: LD_VAR 0 8
39118: PUSH
39119: LD_INT 2
39121: ARRAY
39122: PUSH
39123: LD_VAR 0 13
39127: PUSH
39128: LD_INT 2
39130: MINUS
39131: LESS
39132: OR
39133: PUSH
39134: LD_VAR 0 8
39138: PUSH
39139: LD_INT 3
39141: ARRAY
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 8
39148: PUSH
39149: LD_INT 9
39151: PUSH
39152: LD_INT 10
39154: PUSH
39155: LD_INT 11
39157: PUSH
39158: LD_INT 12
39160: PUSH
39161: LD_INT 13
39163: PUSH
39164: LD_INT 16
39166: PUSH
39167: LD_INT 17
39169: PUSH
39170: LD_INT 18
39172: PUSH
39173: LD_INT 19
39175: PUSH
39176: LD_INT 20
39178: PUSH
39179: LD_INT 21
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: IN
39197: NOT
39198: OR
39199: PUSH
39200: LD_VAR 0 8
39204: PUSH
39205: LD_INT 5
39207: ARRAY
39208: NOT
39209: OR
39210: PUSH
39211: LD_VAR 0 8
39215: PUSH
39216: LD_INT 6
39218: ARRAY
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 7
39228: PUSH
39229: LD_INT 9
39231: PUSH
39232: LD_INT 10
39234: PUSH
39235: LD_INT 11
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: IN
39246: NOT
39247: OR
39248: IFFALSE 39254
// exit ;
39250: POP
39251: POP
39252: GO 39337
// end ;
39254: GO 38925
39256: POP
39257: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39258: LD_VAR 0 9
39262: PPUSH
39263: LD_VAR 0 3
39267: PPUSH
39268: LD_VAR 0 4
39272: PPUSH
39273: LD_INT 20
39275: PPUSH
39276: CALL 31283 0 4
39280: PUSH
39281: LD_INT 4
39283: ARRAY
39284: IFFALSE 39288
// exit ;
39286: GO 39337
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39288: LD_VAR 0 2
39292: PUSH
39293: LD_INT 29
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: IN
39303: PUSH
39304: LD_VAR 0 3
39308: PPUSH
39309: LD_VAR 0 4
39313: PPUSH
39314: LD_VAR 0 9
39318: PPUSH
39319: CALL_OW 440
39323: NOT
39324: AND
39325: IFFALSE 39329
// exit ;
39327: GO 39337
// result := true ;
39329: LD_ADDR_VAR 0 6
39333: PUSH
39334: LD_INT 1
39336: ST_TO_ADDR
// end ;
39337: LD_VAR 0 6
39341: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39342: LD_INT 0
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
39363: PPUSH
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
// result = [ ] ;
39402: LD_ADDR_VAR 0 7
39406: PUSH
39407: EMPTY
39408: ST_TO_ADDR
// temp_list = [ ] ;
39409: LD_ADDR_VAR 0 9
39413: PUSH
39414: EMPTY
39415: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39416: LD_VAR 0 4
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: LD_INT 4
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: IN
39447: NOT
39448: PUSH
39449: LD_VAR 0 1
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: IN
39464: PUSH
39465: LD_VAR 0 5
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: IN
39484: NOT
39485: AND
39486: OR
39487: IFFALSE 39491
// exit ;
39489: GO 57882
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39491: LD_VAR 0 1
39495: PUSH
39496: LD_INT 6
39498: PUSH
39499: LD_INT 7
39501: PUSH
39502: LD_INT 8
39504: PUSH
39505: LD_INT 13
39507: PUSH
39508: LD_INT 12
39510: PUSH
39511: LD_INT 15
39513: PUSH
39514: LD_INT 11
39516: PUSH
39517: LD_INT 14
39519: PUSH
39520: LD_INT 10
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: IN
39534: IFFALSE 39544
// btype = b_lab ;
39536: LD_ADDR_VAR 0 1
39540: PUSH
39541: LD_INT 6
39543: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39544: LD_VAR 0 6
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: IN
39563: NOT
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 6
39584: PUSH
39585: LD_INT 36
39587: PUSH
39588: LD_INT 4
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: LD_INT 31
39596: PUSH
39597: LD_INT 32
39599: PUSH
39600: LD_INT 33
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: IN
39616: NOT
39617: PUSH
39618: LD_VAR 0 6
39622: PUSH
39623: LD_INT 1
39625: EQUAL
39626: AND
39627: OR
39628: PUSH
39629: LD_VAR 0 1
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: IN
39644: NOT
39645: PUSH
39646: LD_VAR 0 6
39650: PUSH
39651: LD_INT 2
39653: EQUAL
39654: AND
39655: OR
39656: IFFALSE 39666
// mode = 0 ;
39658: LD_ADDR_VAR 0 6
39662: PUSH
39663: LD_INT 0
39665: ST_TO_ADDR
// case mode of 0 :
39666: LD_VAR 0 6
39670: PUSH
39671: LD_INT 0
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 51132
39679: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39680: LD_ADDR_VAR 0 11
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39873: LD_ADDR_VAR 0 12
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 3
40030: NEG
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40069: LD_ADDR_VAR 0 13
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: LD_INT 3
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40268: LD_ADDR_VAR 0 14
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 3
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 3
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40464: LD_ADDR_VAR 0 15
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40657: LD_ADDR_VAR 0 16
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40850: LD_ADDR_VAR 0 17
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41080: LD_ADDR_VAR 0 18
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41310: LD_ADDR_VAR 0 19
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41540: LD_ADDR_VAR 0 20
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41770: LD_ADDR_VAR 0 21
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 2
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42000: LD_ADDR_VAR 0 22
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42230: LD_ADDR_VAR 0 23
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 2
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 3
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 3
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42510: LD_ADDR_VAR 0 24
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42786: LD_ADDR_VAR 0 25
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 3
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43060: LD_ADDR_VAR 0 26
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43336: LD_ADDR_VAR 0 27
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 3
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43616: LD_ADDR_VAR 0 28
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 3
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43898: LD_ADDR_VAR 0 29
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: LD_INT 3
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44177: LD_ADDR_VAR 0 30
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44455: LD_ADDR_VAR 0 31
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44733: LD_ADDR_VAR 0 32
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45011: LD_ADDR_VAR 0 33
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: NEG
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45290: LD_ADDR_VAR 0 34
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: LD_INT 3
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 3
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45570: LD_ADDR_VAR 0 35
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45682: LD_ADDR_VAR 0 36
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45794: LD_ADDR_VAR 0 37
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45906: LD_ADDR_VAR 0 38
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46018: LD_ADDR_VAR 0 39
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46130: LD_ADDR_VAR 0 40
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46242: LD_ADDR_VAR 0 41
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 3
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46592: LD_ADDR_VAR 0 42
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 3
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 3
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46942: LD_ADDR_VAR 0 43
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47290: LD_ADDR_VAR 0 44
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47640: LD_ADDR_VAR 0 45
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47990: LD_ADDR_VAR 0 46
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 3
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 3
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48338: LD_ADDR_VAR 0 47
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48489: LD_ADDR_VAR 0 48
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48636: LD_ADDR_VAR 0 49
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48780: LD_ADDR_VAR 0 50
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48924: LD_ADDR_VAR 0 51
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49071: LD_ADDR_VAR 0 52
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49222: LD_ADDR_VAR 0 53
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49452: LD_ADDR_VAR 0 54
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49682: LD_ADDR_VAR 0 55
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49912: LD_ADDR_VAR 0 56
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50142: LD_ADDR_VAR 0 57
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50372: LD_ADDR_VAR 0 58
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50602: LD_ADDR_VAR 0 59
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50690: LD_ADDR_VAR 0 60
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50778: LD_ADDR_VAR 0 61
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50866: LD_ADDR_VAR 0 62
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50954: LD_ADDR_VAR 0 63
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51042: LD_ADDR_VAR 0 64
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
// end ; 1 :
51130: GO 57027
51132: LD_INT 1
51134: DOUBLE
51135: EQUAL
51136: IFTRUE 51140
51138: GO 53763
51140: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51141: LD_ADDR_VAR 0 11
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51185: LD_ADDR_VAR 0 12
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51226: LD_ADDR_VAR 0 13
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51266: LD_ADDR_VAR 0 14
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51307: LD_ADDR_VAR 0 15
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51351: LD_ADDR_VAR 0 16
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51397: LD_ADDR_VAR 0 17
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51441: LD_ADDR_VAR 0 18
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51482: LD_ADDR_VAR 0 19
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51522: LD_ADDR_VAR 0 20
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51563: LD_ADDR_VAR 0 21
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51607: LD_ADDR_VAR 0 22
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51653: LD_ADDR_VAR 0 23
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 4
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51697: LD_ADDR_VAR 0 24
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51738: LD_ADDR_VAR 0 25
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 4
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51778: LD_ADDR_VAR 0 26
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51819: LD_ADDR_VAR 0 27
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 4
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51863: LD_ADDR_VAR 0 28
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 4
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51909: LD_ADDR_VAR 0 29
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 4
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 5
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 5
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 6
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 6
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 5
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52064: LD_ADDR_VAR 0 30
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 4
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 5
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 5
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 5
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 6
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 6
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52207: LD_ADDR_VAR 0 31
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: LD_INT 4
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 4
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: LD_INT 5
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: LD_INT 5
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 6
52304: PUSH
52305: LD_INT 5
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 6
52314: PUSH
52315: LD_INT 6
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: LD_INT 6
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52346: LD_ADDR_VAR 0 32
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 4
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 5
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 5
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 4
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 6
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 6
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52489: LD_ADDR_VAR 0 33
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 4
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 4
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 5
52575: NEG
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 5
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 5
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 6
52609: NEG
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 6
52620: NEG
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52644: LD_ADDR_VAR 0 34
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: LD_INT 4
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 4
52699: NEG
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 4
52711: NEG
52712: PUSH
52713: LD_INT 4
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 4
52723: NEG
52724: PUSH
52725: LD_INT 5
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 5
52735: NEG
52736: PUSH
52737: LD_INT 4
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 5
52747: NEG
52748: PUSH
52749: LD_INT 5
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 5
52759: NEG
52760: PUSH
52761: LD_INT 6
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 6
52771: NEG
52772: PUSH
52773: LD_INT 5
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 6
52783: NEG
52784: PUSH
52785: LD_INT 6
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52807: LD_ADDR_VAR 0 41
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52851: LD_ADDR_VAR 0 42
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52892: LD_ADDR_VAR 0 43
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52932: LD_ADDR_VAR 0 44
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52973: LD_ADDR_VAR 0 45
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53017: LD_ADDR_VAR 0 46
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53063: LD_ADDR_VAR 0 47
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53096: LD_ADDR_VAR 0 48
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53127: LD_ADDR_VAR 0 49
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53156: LD_ADDR_VAR 0 50
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53185: LD_ADDR_VAR 0 51
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53216: LD_ADDR_VAR 0 52
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53249: LD_ADDR_VAR 0 53
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53293: LD_ADDR_VAR 0 54
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53334: LD_ADDR_VAR 0 55
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53374: LD_ADDR_VAR 0 56
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53415: LD_ADDR_VAR 0 57
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53459: LD_ADDR_VAR 0 58
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53505: LD_ADDR_VAR 0 59
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53549: LD_ADDR_VAR 0 60
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53590: LD_ADDR_VAR 0 61
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53630: LD_ADDR_VAR 0 62
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53671: LD_ADDR_VAR 0 63
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53715: LD_ADDR_VAR 0 64
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// end ; 2 :
53761: GO 57027
53763: LD_INT 2
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53771
53769: GO 57026
53771: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53772: LD_ADDR_VAR 0 29
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 4
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 5
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 4
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 5
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 4
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 4
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 5
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 4
54111: NEG
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: NEG
54158: PUSH
54159: LD_INT 4
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 4
54169: NEG
54170: PUSH
54171: LD_INT 5
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 4
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: LD_INT 3
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 5
54217: NEG
54218: PUSH
54219: LD_INT 4
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: LD_INT 5
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: LD_INT 5
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 5
54253: NEG
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54310: LD_ADDR_VAR 0 30
54314: PUSH
54315: LD_INT 4
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 4
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 5
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 5
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 4
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 4
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 5
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 4
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 4
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 4
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: NEG
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 5
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 5
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 5
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: LD_INT 4
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 4
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 4
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 5
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 4
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 5
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: LD_INT 5
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54857: LD_ADDR_VAR 0 31
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 4
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 5
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 5
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 4
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: NEG
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 5
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 5
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: NEG
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 4
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 4
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 4
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 5
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 5
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55407: LD_ADDR_VAR 0 32
55411: PUSH
55412: LD_INT 4
55414: NEG
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 4
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 5
55470: NEG
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 5
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 5
55493: NEG
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 3
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 4
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: NEG
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 4
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 5
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 4
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 5
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: LD_INT 4
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 5
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 5
55849: PUSH
55850: LD_INT 5
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: PUSH
55860: LD_INT 5
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 5
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 5
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55954: LD_ADDR_VAR 0 33
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 5
56021: NEG
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: LD_INT 5
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 5
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 5
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 5
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 4
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 4
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 4
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 5
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 4
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 5
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56492: LD_ADDR_VAR 0 34
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 4
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 5
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 4
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 4
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 5
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 5
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 4
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 5
56714: PUSH
56715: LD_INT 4
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: LD_INT 4
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 5
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 4
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 4
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 4
56877: NEG
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 5
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 5
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// end ; end ;
57024: GO 57027
57026: POP
// case btype of b_depot , b_warehouse :
57027: LD_VAR 0 1
57031: PUSH
57032: LD_INT 0
57034: DOUBLE
57035: EQUAL
57036: IFTRUE 57046
57038: LD_INT 1
57040: DOUBLE
57041: EQUAL
57042: IFTRUE 57046
57044: GO 57247
57046: POP
// case nation of nation_american :
57047: LD_VAR 0 5
57051: PUSH
57052: LD_INT 1
57054: DOUBLE
57055: EQUAL
57056: IFTRUE 57060
57058: GO 57116
57060: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57061: LD_ADDR_VAR 0 9
57065: PUSH
57066: LD_VAR 0 11
57070: PUSH
57071: LD_VAR 0 12
57075: PUSH
57076: LD_VAR 0 13
57080: PUSH
57081: LD_VAR 0 14
57085: PUSH
57086: LD_VAR 0 15
57090: PUSH
57091: LD_VAR 0 16
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: PUSH
57104: LD_VAR 0 4
57108: PUSH
57109: LD_INT 1
57111: PLUS
57112: ARRAY
57113: ST_TO_ADDR
57114: GO 57245
57116: LD_INT 2
57118: DOUBLE
57119: EQUAL
57120: IFTRUE 57124
57122: GO 57180
57124: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57125: LD_ADDR_VAR 0 9
57129: PUSH
57130: LD_VAR 0 17
57134: PUSH
57135: LD_VAR 0 18
57139: PUSH
57140: LD_VAR 0 19
57144: PUSH
57145: LD_VAR 0 20
57149: PUSH
57150: LD_VAR 0 21
57154: PUSH
57155: LD_VAR 0 22
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: PUSH
57168: LD_VAR 0 4
57172: PUSH
57173: LD_INT 1
57175: PLUS
57176: ARRAY
57177: ST_TO_ADDR
57178: GO 57245
57180: LD_INT 3
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57188
57186: GO 57244
57188: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57189: LD_ADDR_VAR 0 9
57193: PUSH
57194: LD_VAR 0 23
57198: PUSH
57199: LD_VAR 0 24
57203: PUSH
57204: LD_VAR 0 25
57208: PUSH
57209: LD_VAR 0 26
57213: PUSH
57214: LD_VAR 0 27
57218: PUSH
57219: LD_VAR 0 28
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: PUSH
57232: LD_VAR 0 4
57236: PUSH
57237: LD_INT 1
57239: PLUS
57240: ARRAY
57241: ST_TO_ADDR
57242: GO 57245
57244: POP
57245: GO 57800
57247: LD_INT 2
57249: DOUBLE
57250: EQUAL
57251: IFTRUE 57261
57253: LD_INT 3
57255: DOUBLE
57256: EQUAL
57257: IFTRUE 57261
57259: GO 57317
57261: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57262: LD_ADDR_VAR 0 9
57266: PUSH
57267: LD_VAR 0 29
57271: PUSH
57272: LD_VAR 0 30
57276: PUSH
57277: LD_VAR 0 31
57281: PUSH
57282: LD_VAR 0 32
57286: PUSH
57287: LD_VAR 0 33
57291: PUSH
57292: LD_VAR 0 34
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: PUSH
57305: LD_VAR 0 4
57309: PUSH
57310: LD_INT 1
57312: PLUS
57313: ARRAY
57314: ST_TO_ADDR
57315: GO 57800
57317: LD_INT 16
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57379
57323: LD_INT 17
57325: DOUBLE
57326: EQUAL
57327: IFTRUE 57379
57329: LD_INT 18
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57379
57335: LD_INT 19
57337: DOUBLE
57338: EQUAL
57339: IFTRUE 57379
57341: LD_INT 22
57343: DOUBLE
57344: EQUAL
57345: IFTRUE 57379
57347: LD_INT 20
57349: DOUBLE
57350: EQUAL
57351: IFTRUE 57379
57353: LD_INT 21
57355: DOUBLE
57356: EQUAL
57357: IFTRUE 57379
57359: LD_INT 23
57361: DOUBLE
57362: EQUAL
57363: IFTRUE 57379
57365: LD_INT 24
57367: DOUBLE
57368: EQUAL
57369: IFTRUE 57379
57371: LD_INT 25
57373: DOUBLE
57374: EQUAL
57375: IFTRUE 57379
57377: GO 57435
57379: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57380: LD_ADDR_VAR 0 9
57384: PUSH
57385: LD_VAR 0 35
57389: PUSH
57390: LD_VAR 0 36
57394: PUSH
57395: LD_VAR 0 37
57399: PUSH
57400: LD_VAR 0 38
57404: PUSH
57405: LD_VAR 0 39
57409: PUSH
57410: LD_VAR 0 40
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: PUSH
57423: LD_VAR 0 4
57427: PUSH
57428: LD_INT 1
57430: PLUS
57431: ARRAY
57432: ST_TO_ADDR
57433: GO 57800
57435: LD_INT 6
57437: DOUBLE
57438: EQUAL
57439: IFTRUE 57491
57441: LD_INT 7
57443: DOUBLE
57444: EQUAL
57445: IFTRUE 57491
57447: LD_INT 8
57449: DOUBLE
57450: EQUAL
57451: IFTRUE 57491
57453: LD_INT 13
57455: DOUBLE
57456: EQUAL
57457: IFTRUE 57491
57459: LD_INT 12
57461: DOUBLE
57462: EQUAL
57463: IFTRUE 57491
57465: LD_INT 15
57467: DOUBLE
57468: EQUAL
57469: IFTRUE 57491
57471: LD_INT 11
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57491
57477: LD_INT 14
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57491
57483: LD_INT 10
57485: DOUBLE
57486: EQUAL
57487: IFTRUE 57491
57489: GO 57547
57491: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57492: LD_ADDR_VAR 0 9
57496: PUSH
57497: LD_VAR 0 41
57501: PUSH
57502: LD_VAR 0 42
57506: PUSH
57507: LD_VAR 0 43
57511: PUSH
57512: LD_VAR 0 44
57516: PUSH
57517: LD_VAR 0 45
57521: PUSH
57522: LD_VAR 0 46
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: PUSH
57535: LD_VAR 0 4
57539: PUSH
57540: LD_INT 1
57542: PLUS
57543: ARRAY
57544: ST_TO_ADDR
57545: GO 57800
57547: LD_INT 36
57549: DOUBLE
57550: EQUAL
57551: IFTRUE 57555
57553: GO 57611
57555: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57556: LD_ADDR_VAR 0 9
57560: PUSH
57561: LD_VAR 0 47
57565: PUSH
57566: LD_VAR 0 48
57570: PUSH
57571: LD_VAR 0 49
57575: PUSH
57576: LD_VAR 0 50
57580: PUSH
57581: LD_VAR 0 51
57585: PUSH
57586: LD_VAR 0 52
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: LD_VAR 0 4
57603: PUSH
57604: LD_INT 1
57606: PLUS
57607: ARRAY
57608: ST_TO_ADDR
57609: GO 57800
57611: LD_INT 4
57613: DOUBLE
57614: EQUAL
57615: IFTRUE 57637
57617: LD_INT 5
57619: DOUBLE
57620: EQUAL
57621: IFTRUE 57637
57623: LD_INT 34
57625: DOUBLE
57626: EQUAL
57627: IFTRUE 57637
57629: LD_INT 37
57631: DOUBLE
57632: EQUAL
57633: IFTRUE 57637
57635: GO 57693
57637: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57638: LD_ADDR_VAR 0 9
57642: PUSH
57643: LD_VAR 0 53
57647: PUSH
57648: LD_VAR 0 54
57652: PUSH
57653: LD_VAR 0 55
57657: PUSH
57658: LD_VAR 0 56
57662: PUSH
57663: LD_VAR 0 57
57667: PUSH
57668: LD_VAR 0 58
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 4
57685: PUSH
57686: LD_INT 1
57688: PLUS
57689: ARRAY
57690: ST_TO_ADDR
57691: GO 57800
57693: LD_INT 31
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57743
57699: LD_INT 32
57701: DOUBLE
57702: EQUAL
57703: IFTRUE 57743
57705: LD_INT 33
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57743
57711: LD_INT 27
57713: DOUBLE
57714: EQUAL
57715: IFTRUE 57743
57717: LD_INT 26
57719: DOUBLE
57720: EQUAL
57721: IFTRUE 57743
57723: LD_INT 28
57725: DOUBLE
57726: EQUAL
57727: IFTRUE 57743
57729: LD_INT 29
57731: DOUBLE
57732: EQUAL
57733: IFTRUE 57743
57735: LD_INT 30
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57743
57741: GO 57799
57743: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57744: LD_ADDR_VAR 0 9
57748: PUSH
57749: LD_VAR 0 59
57753: PUSH
57754: LD_VAR 0 60
57758: PUSH
57759: LD_VAR 0 61
57763: PUSH
57764: LD_VAR 0 62
57768: PUSH
57769: LD_VAR 0 63
57773: PUSH
57774: LD_VAR 0 64
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: PUSH
57787: LD_VAR 0 4
57791: PUSH
57792: LD_INT 1
57794: PLUS
57795: ARRAY
57796: ST_TO_ADDR
57797: GO 57800
57799: POP
// temp_list2 = [ ] ;
57800: LD_ADDR_VAR 0 10
57804: PUSH
57805: EMPTY
57806: ST_TO_ADDR
// for i in temp_list do
57807: LD_ADDR_VAR 0 8
57811: PUSH
57812: LD_VAR 0 9
57816: PUSH
57817: FOR_IN
57818: IFFALSE 57870
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57820: LD_ADDR_VAR 0 10
57824: PUSH
57825: LD_VAR 0 10
57829: PUSH
57830: LD_VAR 0 8
57834: PUSH
57835: LD_INT 1
57837: ARRAY
57838: PUSH
57839: LD_VAR 0 2
57843: PLUS
57844: PUSH
57845: LD_VAR 0 8
57849: PUSH
57850: LD_INT 2
57852: ARRAY
57853: PUSH
57854: LD_VAR 0 3
57858: PLUS
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: ADD
57867: ST_TO_ADDR
57868: GO 57817
57870: POP
57871: POP
// result = temp_list2 ;
57872: LD_ADDR_VAR 0 7
57876: PUSH
57877: LD_VAR 0 10
57881: ST_TO_ADDR
// end ;
57882: LD_VAR 0 7
57886: RET
// export function EnemyInRange ( unit , dist ) ; begin
57887: LD_INT 0
57889: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57890: LD_ADDR_VAR 0 3
57894: PUSH
57895: LD_VAR 0 1
57899: PPUSH
57900: CALL_OW 255
57904: PPUSH
57905: LD_VAR 0 1
57909: PPUSH
57910: CALL_OW 250
57914: PPUSH
57915: LD_VAR 0 1
57919: PPUSH
57920: CALL_OW 251
57924: PPUSH
57925: LD_VAR 0 2
57929: PPUSH
57930: CALL 31283 0 4
57934: PUSH
57935: LD_INT 4
57937: ARRAY
57938: ST_TO_ADDR
// end ;
57939: LD_VAR 0 3
57943: RET
// export function PlayerSeeMe ( unit ) ; begin
57944: LD_INT 0
57946: PPUSH
// result := See ( your_side , unit ) ;
57947: LD_ADDR_VAR 0 2
57951: PUSH
57952: LD_OWVAR 2
57956: PPUSH
57957: LD_VAR 0 1
57961: PPUSH
57962: CALL_OW 292
57966: ST_TO_ADDR
// end ;
57967: LD_VAR 0 2
57971: RET
// export function ReverseDir ( unit ) ; begin
57972: LD_INT 0
57974: PPUSH
// if not unit then
57975: LD_VAR 0 1
57979: NOT
57980: IFFALSE 57984
// exit ;
57982: GO 58007
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57984: LD_ADDR_VAR 0 2
57988: PUSH
57989: LD_VAR 0 1
57993: PPUSH
57994: CALL_OW 254
57998: PUSH
57999: LD_INT 3
58001: PLUS
58002: PUSH
58003: LD_INT 6
58005: MOD
58006: ST_TO_ADDR
// end ;
58007: LD_VAR 0 2
58011: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58012: LD_INT 0
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
// if not hexes then
58019: LD_VAR 0 2
58023: NOT
58024: IFFALSE 58028
// exit ;
58026: GO 58176
// dist := 9999 ;
58028: LD_ADDR_VAR 0 5
58032: PUSH
58033: LD_INT 9999
58035: ST_TO_ADDR
// for i = 1 to hexes do
58036: LD_ADDR_VAR 0 4
58040: PUSH
58041: DOUBLE
58042: LD_INT 1
58044: DEC
58045: ST_TO_ADDR
58046: LD_VAR 0 2
58050: PUSH
58051: FOR_TO
58052: IFFALSE 58164
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58054: LD_VAR 0 1
58058: PPUSH
58059: LD_VAR 0 2
58063: PUSH
58064: LD_VAR 0 4
58068: ARRAY
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PPUSH
58074: LD_VAR 0 2
58078: PUSH
58079: LD_VAR 0 4
58083: ARRAY
58084: PUSH
58085: LD_INT 2
58087: ARRAY
58088: PPUSH
58089: CALL_OW 297
58093: PUSH
58094: LD_VAR 0 5
58098: LESS
58099: IFFALSE 58162
// begin hex := hexes [ i ] ;
58101: LD_ADDR_VAR 0 7
58105: PUSH
58106: LD_VAR 0 2
58110: PUSH
58111: LD_VAR 0 4
58115: ARRAY
58116: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58117: LD_ADDR_VAR 0 5
58121: PUSH
58122: LD_VAR 0 1
58126: PPUSH
58127: LD_VAR 0 2
58131: PUSH
58132: LD_VAR 0 4
58136: ARRAY
58137: PUSH
58138: LD_INT 1
58140: ARRAY
58141: PPUSH
58142: LD_VAR 0 2
58146: PUSH
58147: LD_VAR 0 4
58151: ARRAY
58152: PUSH
58153: LD_INT 2
58155: ARRAY
58156: PPUSH
58157: CALL_OW 297
58161: ST_TO_ADDR
// end ; end ;
58162: GO 58051
58164: POP
58165: POP
// result := hex ;
58166: LD_ADDR_VAR 0 3
58170: PUSH
58171: LD_VAR 0 7
58175: ST_TO_ADDR
// end ;
58176: LD_VAR 0 3
58180: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58181: LD_INT 0
58183: PPUSH
58184: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58185: LD_VAR 0 1
58189: NOT
58190: PUSH
58191: LD_VAR 0 1
58195: PUSH
58196: LD_INT 21
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 23
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PPUSH
58220: CALL_OW 69
58224: IN
58225: NOT
58226: OR
58227: IFFALSE 58231
// exit ;
58229: GO 58278
// for i = 1 to 3 do
58231: LD_ADDR_VAR 0 3
58235: PUSH
58236: DOUBLE
58237: LD_INT 1
58239: DEC
58240: ST_TO_ADDR
58241: LD_INT 3
58243: PUSH
58244: FOR_TO
58245: IFFALSE 58276
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58247: LD_VAR 0 1
58251: PPUSH
58252: CALL_OW 250
58256: PPUSH
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 251
58266: PPUSH
58267: LD_INT 1
58269: PPUSH
58270: CALL_OW 453
58274: GO 58244
58276: POP
58277: POP
// end ;
58278: LD_VAR 0 2
58282: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58283: LD_INT 0
58285: PPUSH
58286: PPUSH
58287: PPUSH
58288: PPUSH
58289: PPUSH
58290: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58291: LD_VAR 0 1
58295: NOT
58296: PUSH
58297: LD_VAR 0 2
58301: NOT
58302: OR
58303: PUSH
58304: LD_VAR 0 1
58308: PPUSH
58309: CALL_OW 314
58313: OR
58314: IFFALSE 58318
// exit ;
58316: GO 58759
// x := GetX ( enemy_unit ) ;
58318: LD_ADDR_VAR 0 7
58322: PUSH
58323: LD_VAR 0 2
58327: PPUSH
58328: CALL_OW 250
58332: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58333: LD_ADDR_VAR 0 8
58337: PUSH
58338: LD_VAR 0 2
58342: PPUSH
58343: CALL_OW 251
58347: ST_TO_ADDR
// if not x or not y then
58348: LD_VAR 0 7
58352: NOT
58353: PUSH
58354: LD_VAR 0 8
58358: NOT
58359: OR
58360: IFFALSE 58364
// exit ;
58362: GO 58759
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58364: LD_ADDR_VAR 0 6
58368: PUSH
58369: LD_VAR 0 7
58373: PPUSH
58374: LD_INT 0
58376: PPUSH
58377: LD_INT 4
58379: PPUSH
58380: CALL_OW 272
58384: PUSH
58385: LD_VAR 0 8
58389: PPUSH
58390: LD_INT 0
58392: PPUSH
58393: LD_INT 4
58395: PPUSH
58396: CALL_OW 273
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_VAR 0 7
58409: PPUSH
58410: LD_INT 1
58412: PPUSH
58413: LD_INT 4
58415: PPUSH
58416: CALL_OW 272
58420: PUSH
58421: LD_VAR 0 8
58425: PPUSH
58426: LD_INT 1
58428: PPUSH
58429: LD_INT 4
58431: PPUSH
58432: CALL_OW 273
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_VAR 0 7
58445: PPUSH
58446: LD_INT 2
58448: PPUSH
58449: LD_INT 4
58451: PPUSH
58452: CALL_OW 272
58456: PUSH
58457: LD_VAR 0 8
58461: PPUSH
58462: LD_INT 2
58464: PPUSH
58465: LD_INT 4
58467: PPUSH
58468: CALL_OW 273
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_VAR 0 7
58481: PPUSH
58482: LD_INT 3
58484: PPUSH
58485: LD_INT 4
58487: PPUSH
58488: CALL_OW 272
58492: PUSH
58493: LD_VAR 0 8
58497: PPUSH
58498: LD_INT 3
58500: PPUSH
58501: LD_INT 4
58503: PPUSH
58504: CALL_OW 273
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_VAR 0 7
58517: PPUSH
58518: LD_INT 4
58520: PPUSH
58521: LD_INT 4
58523: PPUSH
58524: CALL_OW 272
58528: PUSH
58529: LD_VAR 0 8
58533: PPUSH
58534: LD_INT 4
58536: PPUSH
58537: LD_INT 4
58539: PPUSH
58540: CALL_OW 273
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_VAR 0 7
58553: PPUSH
58554: LD_INT 5
58556: PPUSH
58557: LD_INT 4
58559: PPUSH
58560: CALL_OW 272
58564: PUSH
58565: LD_VAR 0 8
58569: PPUSH
58570: LD_INT 5
58572: PPUSH
58573: LD_INT 4
58575: PPUSH
58576: CALL_OW 273
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// for i = tmp downto 1 do
58593: LD_ADDR_VAR 0 4
58597: PUSH
58598: DOUBLE
58599: LD_VAR 0 6
58603: INC
58604: ST_TO_ADDR
58605: LD_INT 1
58607: PUSH
58608: FOR_DOWNTO
58609: IFFALSE 58710
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58611: LD_VAR 0 6
58615: PUSH
58616: LD_VAR 0 4
58620: ARRAY
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: PPUSH
58626: LD_VAR 0 6
58630: PUSH
58631: LD_VAR 0 4
58635: ARRAY
58636: PUSH
58637: LD_INT 2
58639: ARRAY
58640: PPUSH
58641: CALL_OW 488
58645: NOT
58646: PUSH
58647: LD_VAR 0 6
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PUSH
58658: LD_INT 1
58660: ARRAY
58661: PPUSH
58662: LD_VAR 0 6
58666: PUSH
58667: LD_VAR 0 4
58671: ARRAY
58672: PUSH
58673: LD_INT 2
58675: ARRAY
58676: PPUSH
58677: CALL_OW 428
58681: PUSH
58682: LD_INT 0
58684: NONEQUAL
58685: OR
58686: IFFALSE 58708
// tmp := Delete ( tmp , i ) ;
58688: LD_ADDR_VAR 0 6
58692: PUSH
58693: LD_VAR 0 6
58697: PPUSH
58698: LD_VAR 0 4
58702: PPUSH
58703: CALL_OW 3
58707: ST_TO_ADDR
58708: GO 58608
58710: POP
58711: POP
// j := GetClosestHex ( unit , tmp ) ;
58712: LD_ADDR_VAR 0 5
58716: PUSH
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_VAR 0 6
58726: PPUSH
58727: CALL 58012 0 2
58731: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58732: LD_VAR 0 1
58736: PPUSH
58737: LD_VAR 0 5
58741: PUSH
58742: LD_INT 1
58744: ARRAY
58745: PPUSH
58746: LD_VAR 0 5
58750: PUSH
58751: LD_INT 2
58753: ARRAY
58754: PPUSH
58755: CALL_OW 111
// end ;
58759: LD_VAR 0 3
58763: RET
// export function PrepareApemanSoldier ( ) ; begin
58764: LD_INT 0
58766: PPUSH
// uc_nation := 0 ;
58767: LD_ADDR_OWVAR 21
58771: PUSH
58772: LD_INT 0
58774: ST_TO_ADDR
// hc_sex := sex_male ;
58775: LD_ADDR_OWVAR 27
58779: PUSH
58780: LD_INT 1
58782: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58783: LD_ADDR_OWVAR 28
58787: PUSH
58788: LD_INT 15
58790: ST_TO_ADDR
// hc_gallery :=  ;
58791: LD_ADDR_OWVAR 33
58795: PUSH
58796: LD_STRING 
58798: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58799: LD_ADDR_OWVAR 31
58803: PUSH
58804: LD_INT 0
58806: PPUSH
58807: LD_INT 3
58809: PPUSH
58810: CALL_OW 12
58814: PUSH
58815: LD_INT 0
58817: PPUSH
58818: LD_INT 3
58820: PPUSH
58821: CALL_OW 12
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: ST_TO_ADDR
// end ;
58838: LD_VAR 0 1
58842: RET
// export function PrepareApemanEngineer ( ) ; begin
58843: LD_INT 0
58845: PPUSH
// uc_nation := 0 ;
58846: LD_ADDR_OWVAR 21
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
// hc_sex := sex_male ;
58854: LD_ADDR_OWVAR 27
58858: PUSH
58859: LD_INT 1
58861: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58862: LD_ADDR_OWVAR 28
58866: PUSH
58867: LD_INT 16
58869: ST_TO_ADDR
// hc_gallery :=  ;
58870: LD_ADDR_OWVAR 33
58874: PUSH
58875: LD_STRING 
58877: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58878: LD_ADDR_OWVAR 31
58882: PUSH
58883: LD_INT 0
58885: PPUSH
58886: LD_INT 3
58888: PPUSH
58889: CALL_OW 12
58893: PUSH
58894: LD_INT 0
58896: PPUSH
58897: LD_INT 3
58899: PPUSH
58900: CALL_OW 12
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// end ;
58917: LD_VAR 0 1
58921: RET
// export function PrepareApeman ( agressivity ) ; begin
58922: LD_INT 0
58924: PPUSH
// uc_side := 0 ;
58925: LD_ADDR_OWVAR 20
58929: PUSH
58930: LD_INT 0
58932: ST_TO_ADDR
// uc_nation := 0 ;
58933: LD_ADDR_OWVAR 21
58937: PUSH
58938: LD_INT 0
58940: ST_TO_ADDR
// hc_sex := sex_male ;
58941: LD_ADDR_OWVAR 27
58945: PUSH
58946: LD_INT 1
58948: ST_TO_ADDR
// hc_class := class_apeman ;
58949: LD_ADDR_OWVAR 28
58953: PUSH
58954: LD_INT 12
58956: ST_TO_ADDR
// hc_gallery :=  ;
58957: LD_ADDR_OWVAR 33
58961: PUSH
58962: LD_STRING 
58964: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58965: LD_ADDR_OWVAR 35
58969: PUSH
58970: LD_VAR 0 1
58974: NEG
58975: PPUSH
58976: LD_VAR 0 1
58980: PPUSH
58981: CALL_OW 12
58985: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58986: LD_ADDR_OWVAR 31
58990: PUSH
58991: LD_INT 0
58993: PPUSH
58994: LD_INT 3
58996: PPUSH
58997: CALL_OW 12
59001: PUSH
59002: LD_INT 0
59004: PPUSH
59005: LD_INT 3
59007: PPUSH
59008: CALL_OW 12
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// end ;
59025: LD_VAR 0 2
59029: RET
// export function PrepareTiger ( agressivity ) ; begin
59030: LD_INT 0
59032: PPUSH
// uc_side := 0 ;
59033: LD_ADDR_OWVAR 20
59037: PUSH
59038: LD_INT 0
59040: ST_TO_ADDR
// uc_nation := 0 ;
59041: LD_ADDR_OWVAR 21
59045: PUSH
59046: LD_INT 0
59048: ST_TO_ADDR
// hc_class := class_tiger ;
59049: LD_ADDR_OWVAR 28
59053: PUSH
59054: LD_INT 14
59056: ST_TO_ADDR
// hc_gallery :=  ;
59057: LD_ADDR_OWVAR 33
59061: PUSH
59062: LD_STRING 
59064: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59065: LD_ADDR_OWVAR 35
59069: PUSH
59070: LD_VAR 0 1
59074: NEG
59075: PPUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 12
59085: ST_TO_ADDR
// end ;
59086: LD_VAR 0 2
59090: RET
// export function PrepareEnchidna ( ) ; begin
59091: LD_INT 0
59093: PPUSH
// uc_side := 0 ;
59094: LD_ADDR_OWVAR 20
59098: PUSH
59099: LD_INT 0
59101: ST_TO_ADDR
// uc_nation := 0 ;
59102: LD_ADDR_OWVAR 21
59106: PUSH
59107: LD_INT 0
59109: ST_TO_ADDR
// hc_class := class_baggie ;
59110: LD_ADDR_OWVAR 28
59114: PUSH
59115: LD_INT 13
59117: ST_TO_ADDR
// hc_gallery :=  ;
59118: LD_ADDR_OWVAR 33
59122: PUSH
59123: LD_STRING 
59125: ST_TO_ADDR
// end ;
59126: LD_VAR 0 1
59130: RET
// export function PrepareFrog ( ) ; begin
59131: LD_INT 0
59133: PPUSH
// uc_side := 0 ;
59134: LD_ADDR_OWVAR 20
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
// uc_nation := 0 ;
59142: LD_ADDR_OWVAR 21
59146: PUSH
59147: LD_INT 0
59149: ST_TO_ADDR
// hc_class := class_frog ;
59150: LD_ADDR_OWVAR 28
59154: PUSH
59155: LD_INT 19
59157: ST_TO_ADDR
// hc_gallery :=  ;
59158: LD_ADDR_OWVAR 33
59162: PUSH
59163: LD_STRING 
59165: ST_TO_ADDR
// end ;
59166: LD_VAR 0 1
59170: RET
// export function PrepareFish ( ) ; begin
59171: LD_INT 0
59173: PPUSH
// uc_side := 0 ;
59174: LD_ADDR_OWVAR 20
59178: PUSH
59179: LD_INT 0
59181: ST_TO_ADDR
// uc_nation := 0 ;
59182: LD_ADDR_OWVAR 21
59186: PUSH
59187: LD_INT 0
59189: ST_TO_ADDR
// hc_class := class_fish ;
59190: LD_ADDR_OWVAR 28
59194: PUSH
59195: LD_INT 20
59197: ST_TO_ADDR
// hc_gallery :=  ;
59198: LD_ADDR_OWVAR 33
59202: PUSH
59203: LD_STRING 
59205: ST_TO_ADDR
// end ;
59206: LD_VAR 0 1
59210: RET
// export function PrepareBird ( ) ; begin
59211: LD_INT 0
59213: PPUSH
// uc_side := 0 ;
59214: LD_ADDR_OWVAR 20
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
// uc_nation := 0 ;
59222: LD_ADDR_OWVAR 21
59226: PUSH
59227: LD_INT 0
59229: ST_TO_ADDR
// hc_class := class_phororhacos ;
59230: LD_ADDR_OWVAR 28
59234: PUSH
59235: LD_INT 18
59237: ST_TO_ADDR
// hc_gallery :=  ;
59238: LD_ADDR_OWVAR 33
59242: PUSH
59243: LD_STRING 
59245: ST_TO_ADDR
// end ;
59246: LD_VAR 0 1
59250: RET
// export function PrepareHorse ( ) ; begin
59251: LD_INT 0
59253: PPUSH
// uc_side := 0 ;
59254: LD_ADDR_OWVAR 20
59258: PUSH
59259: LD_INT 0
59261: ST_TO_ADDR
// uc_nation := 0 ;
59262: LD_ADDR_OWVAR 21
59266: PUSH
59267: LD_INT 0
59269: ST_TO_ADDR
// hc_class := class_horse ;
59270: LD_ADDR_OWVAR 28
59274: PUSH
59275: LD_INT 21
59277: ST_TO_ADDR
// hc_gallery :=  ;
59278: LD_ADDR_OWVAR 33
59282: PUSH
59283: LD_STRING 
59285: ST_TO_ADDR
// end ;
59286: LD_VAR 0 1
59290: RET
// export function PrepareMastodont ( ) ; begin
59291: LD_INT 0
59293: PPUSH
// uc_side := 0 ;
59294: LD_ADDR_OWVAR 20
59298: PUSH
59299: LD_INT 0
59301: ST_TO_ADDR
// uc_nation := 0 ;
59302: LD_ADDR_OWVAR 21
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59310: LD_ADDR_OWVAR 37
59314: PUSH
59315: LD_INT 31
59317: ST_TO_ADDR
// vc_control := control_rider ;
59318: LD_ADDR_OWVAR 38
59322: PUSH
59323: LD_INT 4
59325: ST_TO_ADDR
// end ;
59326: LD_VAR 0 1
59330: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59331: LD_INT 0
59333: PPUSH
59334: PPUSH
59335: PPUSH
// uc_side = 0 ;
59336: LD_ADDR_OWVAR 20
59340: PUSH
59341: LD_INT 0
59343: ST_TO_ADDR
// uc_nation = 0 ;
59344: LD_ADDR_OWVAR 21
59348: PUSH
59349: LD_INT 0
59351: ST_TO_ADDR
// InitHc_All ( ) ;
59352: CALL_OW 584
// InitVc ;
59356: CALL_OW 20
// if mastodonts then
59360: LD_VAR 0 6
59364: IFFALSE 59431
// for i = 1 to mastodonts do
59366: LD_ADDR_VAR 0 11
59370: PUSH
59371: DOUBLE
59372: LD_INT 1
59374: DEC
59375: ST_TO_ADDR
59376: LD_VAR 0 6
59380: PUSH
59381: FOR_TO
59382: IFFALSE 59429
// begin vc_chassis := 31 ;
59384: LD_ADDR_OWVAR 37
59388: PUSH
59389: LD_INT 31
59391: ST_TO_ADDR
// vc_control := control_rider ;
59392: LD_ADDR_OWVAR 38
59396: PUSH
59397: LD_INT 4
59399: ST_TO_ADDR
// animal := CreateVehicle ;
59400: LD_ADDR_VAR 0 12
59404: PUSH
59405: CALL_OW 45
59409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59410: LD_VAR 0 12
59414: PPUSH
59415: LD_VAR 0 8
59419: PPUSH
59420: LD_INT 0
59422: PPUSH
59423: CALL 61566 0 3
// end ;
59427: GO 59381
59429: POP
59430: POP
// if horses then
59431: LD_VAR 0 5
59435: IFFALSE 59502
// for i = 1 to horses do
59437: LD_ADDR_VAR 0 11
59441: PUSH
59442: DOUBLE
59443: LD_INT 1
59445: DEC
59446: ST_TO_ADDR
59447: LD_VAR 0 5
59451: PUSH
59452: FOR_TO
59453: IFFALSE 59500
// begin hc_class := 21 ;
59455: LD_ADDR_OWVAR 28
59459: PUSH
59460: LD_INT 21
59462: ST_TO_ADDR
// hc_gallery :=  ;
59463: LD_ADDR_OWVAR 33
59467: PUSH
59468: LD_STRING 
59470: ST_TO_ADDR
// animal := CreateHuman ;
59471: LD_ADDR_VAR 0 12
59475: PUSH
59476: CALL_OW 44
59480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59481: LD_VAR 0 12
59485: PPUSH
59486: LD_VAR 0 8
59490: PPUSH
59491: LD_INT 0
59493: PPUSH
59494: CALL 61566 0 3
// end ;
59498: GO 59452
59500: POP
59501: POP
// if birds then
59502: LD_VAR 0 1
59506: IFFALSE 59573
// for i = 1 to birds do
59508: LD_ADDR_VAR 0 11
59512: PUSH
59513: DOUBLE
59514: LD_INT 1
59516: DEC
59517: ST_TO_ADDR
59518: LD_VAR 0 1
59522: PUSH
59523: FOR_TO
59524: IFFALSE 59571
// begin hc_class = 18 ;
59526: LD_ADDR_OWVAR 28
59530: PUSH
59531: LD_INT 18
59533: ST_TO_ADDR
// hc_gallery =  ;
59534: LD_ADDR_OWVAR 33
59538: PUSH
59539: LD_STRING 
59541: ST_TO_ADDR
// animal := CreateHuman ;
59542: LD_ADDR_VAR 0 12
59546: PUSH
59547: CALL_OW 44
59551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59552: LD_VAR 0 12
59556: PPUSH
59557: LD_VAR 0 8
59561: PPUSH
59562: LD_INT 0
59564: PPUSH
59565: CALL 61566 0 3
// end ;
59569: GO 59523
59571: POP
59572: POP
// if tigers then
59573: LD_VAR 0 2
59577: IFFALSE 59661
// for i = 1 to tigers do
59579: LD_ADDR_VAR 0 11
59583: PUSH
59584: DOUBLE
59585: LD_INT 1
59587: DEC
59588: ST_TO_ADDR
59589: LD_VAR 0 2
59593: PUSH
59594: FOR_TO
59595: IFFALSE 59659
// begin hc_class = class_tiger ;
59597: LD_ADDR_OWVAR 28
59601: PUSH
59602: LD_INT 14
59604: ST_TO_ADDR
// hc_gallery =  ;
59605: LD_ADDR_OWVAR 33
59609: PUSH
59610: LD_STRING 
59612: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59613: LD_ADDR_OWVAR 35
59617: PUSH
59618: LD_INT 7
59620: NEG
59621: PPUSH
59622: LD_INT 7
59624: PPUSH
59625: CALL_OW 12
59629: ST_TO_ADDR
// animal := CreateHuman ;
59630: LD_ADDR_VAR 0 12
59634: PUSH
59635: CALL_OW 44
59639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59640: LD_VAR 0 12
59644: PPUSH
59645: LD_VAR 0 8
59649: PPUSH
59650: LD_INT 0
59652: PPUSH
59653: CALL 61566 0 3
// end ;
59657: GO 59594
59659: POP
59660: POP
// if apemans then
59661: LD_VAR 0 3
59665: IFFALSE 59788
// for i = 1 to apemans do
59667: LD_ADDR_VAR 0 11
59671: PUSH
59672: DOUBLE
59673: LD_INT 1
59675: DEC
59676: ST_TO_ADDR
59677: LD_VAR 0 3
59681: PUSH
59682: FOR_TO
59683: IFFALSE 59786
// begin hc_class = class_apeman ;
59685: LD_ADDR_OWVAR 28
59689: PUSH
59690: LD_INT 12
59692: ST_TO_ADDR
// hc_gallery =  ;
59693: LD_ADDR_OWVAR 33
59697: PUSH
59698: LD_STRING 
59700: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59701: LD_ADDR_OWVAR 35
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PPUSH
59710: LD_INT 2
59712: PPUSH
59713: CALL_OW 12
59717: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59718: LD_ADDR_OWVAR 31
59722: PUSH
59723: LD_INT 1
59725: PPUSH
59726: LD_INT 3
59728: PPUSH
59729: CALL_OW 12
59733: PUSH
59734: LD_INT 1
59736: PPUSH
59737: LD_INT 3
59739: PPUSH
59740: CALL_OW 12
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// animal := CreateHuman ;
59757: LD_ADDR_VAR 0 12
59761: PUSH
59762: CALL_OW 44
59766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59767: LD_VAR 0 12
59771: PPUSH
59772: LD_VAR 0 8
59776: PPUSH
59777: LD_INT 0
59779: PPUSH
59780: CALL 61566 0 3
// end ;
59784: GO 59682
59786: POP
59787: POP
// if enchidnas then
59788: LD_VAR 0 4
59792: IFFALSE 59859
// for i = 1 to enchidnas do
59794: LD_ADDR_VAR 0 11
59798: PUSH
59799: DOUBLE
59800: LD_INT 1
59802: DEC
59803: ST_TO_ADDR
59804: LD_VAR 0 4
59808: PUSH
59809: FOR_TO
59810: IFFALSE 59857
// begin hc_class = 13 ;
59812: LD_ADDR_OWVAR 28
59816: PUSH
59817: LD_INT 13
59819: ST_TO_ADDR
// hc_gallery =  ;
59820: LD_ADDR_OWVAR 33
59824: PUSH
59825: LD_STRING 
59827: ST_TO_ADDR
// animal := CreateHuman ;
59828: LD_ADDR_VAR 0 12
59832: PUSH
59833: CALL_OW 44
59837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59838: LD_VAR 0 12
59842: PPUSH
59843: LD_VAR 0 8
59847: PPUSH
59848: LD_INT 0
59850: PPUSH
59851: CALL 61566 0 3
// end ;
59855: GO 59809
59857: POP
59858: POP
// if fishes then
59859: LD_VAR 0 7
59863: IFFALSE 59930
// for i = 1 to fishes do
59865: LD_ADDR_VAR 0 11
59869: PUSH
59870: DOUBLE
59871: LD_INT 1
59873: DEC
59874: ST_TO_ADDR
59875: LD_VAR 0 7
59879: PUSH
59880: FOR_TO
59881: IFFALSE 59928
// begin hc_class = 20 ;
59883: LD_ADDR_OWVAR 28
59887: PUSH
59888: LD_INT 20
59890: ST_TO_ADDR
// hc_gallery =  ;
59891: LD_ADDR_OWVAR 33
59895: PUSH
59896: LD_STRING 
59898: ST_TO_ADDR
// animal := CreateHuman ;
59899: LD_ADDR_VAR 0 12
59903: PUSH
59904: CALL_OW 44
59908: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59909: LD_VAR 0 12
59913: PPUSH
59914: LD_VAR 0 9
59918: PPUSH
59919: LD_INT 0
59921: PPUSH
59922: CALL 61566 0 3
// end ;
59926: GO 59880
59928: POP
59929: POP
// end ;
59930: LD_VAR 0 10
59934: RET
// export function WantHeal ( sci , unit ) ; begin
59935: LD_INT 0
59937: PPUSH
// if GetTaskList ( sci ) > 0 then
59938: LD_VAR 0 1
59942: PPUSH
59943: CALL_OW 437
59947: PUSH
59948: LD_INT 0
59950: GREATER
59951: IFFALSE 60021
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59953: LD_VAR 0 1
59957: PPUSH
59958: CALL_OW 437
59962: PUSH
59963: LD_INT 1
59965: ARRAY
59966: PUSH
59967: LD_INT 1
59969: ARRAY
59970: PUSH
59971: LD_STRING l
59973: EQUAL
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL_OW 437
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PUSH
59989: LD_INT 4
59991: ARRAY
59992: PUSH
59993: LD_VAR 0 2
59997: EQUAL
59998: AND
59999: IFFALSE 60011
// result := true else
60001: LD_ADDR_VAR 0 3
60005: PUSH
60006: LD_INT 1
60008: ST_TO_ADDR
60009: GO 60019
// result := false ;
60011: LD_ADDR_VAR 0 3
60015: PUSH
60016: LD_INT 0
60018: ST_TO_ADDR
// end else
60019: GO 60029
// result := false ;
60021: LD_ADDR_VAR 0 3
60025: PUSH
60026: LD_INT 0
60028: ST_TO_ADDR
// end ;
60029: LD_VAR 0 3
60033: RET
// export function HealTarget ( sci ) ; begin
60034: LD_INT 0
60036: PPUSH
// if not sci then
60037: LD_VAR 0 1
60041: NOT
60042: IFFALSE 60046
// exit ;
60044: GO 60111
// result := 0 ;
60046: LD_ADDR_VAR 0 2
60050: PUSH
60051: LD_INT 0
60053: ST_TO_ADDR
// if GetTaskList ( sci ) then
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 437
60063: IFFALSE 60111
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60065: LD_VAR 0 1
60069: PPUSH
60070: CALL_OW 437
60074: PUSH
60075: LD_INT 1
60077: ARRAY
60078: PUSH
60079: LD_INT 1
60081: ARRAY
60082: PUSH
60083: LD_STRING l
60085: EQUAL
60086: IFFALSE 60111
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60088: LD_ADDR_VAR 0 2
60092: PUSH
60093: LD_VAR 0 1
60097: PPUSH
60098: CALL_OW 437
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PUSH
60107: LD_INT 4
60109: ARRAY
60110: ST_TO_ADDR
// end ;
60111: LD_VAR 0 2
60115: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60116: LD_INT 0
60118: PPUSH
60119: PPUSH
60120: PPUSH
60121: PPUSH
// if not base_units then
60122: LD_VAR 0 1
60126: NOT
60127: IFFALSE 60131
// exit ;
60129: GO 60218
// result := false ;
60131: LD_ADDR_VAR 0 2
60135: PUSH
60136: LD_INT 0
60138: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60139: LD_ADDR_VAR 0 5
60143: PUSH
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_INT 21
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PPUSH
60159: CALL_OW 72
60163: ST_TO_ADDR
// if not tmp then
60164: LD_VAR 0 5
60168: NOT
60169: IFFALSE 60173
// exit ;
60171: GO 60218
// for i in tmp do
60173: LD_ADDR_VAR 0 3
60177: PUSH
60178: LD_VAR 0 5
60182: PUSH
60183: FOR_IN
60184: IFFALSE 60216
// begin result := EnemyInRange ( i , 22 ) ;
60186: LD_ADDR_VAR 0 2
60190: PUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: LD_INT 22
60198: PPUSH
60199: CALL 57887 0 2
60203: ST_TO_ADDR
// if result then
60204: LD_VAR 0 2
60208: IFFALSE 60214
// exit ;
60210: POP
60211: POP
60212: GO 60218
// end ;
60214: GO 60183
60216: POP
60217: POP
// end ;
60218: LD_VAR 0 2
60222: RET
// export function FilterByTag ( units , tag ) ; begin
60223: LD_INT 0
60225: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_VAR 0 1
60235: PPUSH
60236: LD_INT 120
60238: PUSH
60239: LD_VAR 0 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PPUSH
60248: CALL_OW 72
60252: ST_TO_ADDR
// end ;
60253: LD_VAR 0 3
60257: RET
// export function IsDriver ( un ) ; begin
60258: LD_INT 0
60260: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60261: LD_ADDR_VAR 0 2
60265: PUSH
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 55
60273: PUSH
60274: EMPTY
60275: LIST
60276: PPUSH
60277: CALL_OW 69
60281: IN
60282: ST_TO_ADDR
// end ;
60283: LD_VAR 0 2
60287: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60288: LD_INT 0
60290: PPUSH
60291: PPUSH
// list := [ ] ;
60292: LD_ADDR_VAR 0 5
60296: PUSH
60297: EMPTY
60298: ST_TO_ADDR
// case d of 0 :
60299: LD_VAR 0 3
60303: PUSH
60304: LD_INT 0
60306: DOUBLE
60307: EQUAL
60308: IFTRUE 60312
60310: GO 60445
60312: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60313: LD_ADDR_VAR 0 5
60317: PUSH
60318: LD_VAR 0 1
60322: PUSH
60323: LD_INT 4
60325: MINUS
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_INT 4
60334: MINUS
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: LD_VAR 0 1
60348: PUSH
60349: LD_INT 3
60351: MINUS
60352: PUSH
60353: LD_VAR 0 2
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: PUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_INT 4
60373: PLUS
60374: PUSH
60375: LD_VAR 0 2
60379: PUSH
60380: LD_INT 4
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: PUSH
60388: LD_VAR 0 1
60392: PUSH
60393: LD_INT 3
60395: PLUS
60396: PUSH
60397: LD_VAR 0 2
60401: PUSH
60402: LD_INT 3
60404: PLUS
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: PUSH
60414: LD_VAR 0 1
60418: PUSH
60419: LD_VAR 0 2
60423: PUSH
60424: LD_INT 4
60426: PLUS
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// end ; 1 :
60443: GO 61143
60445: LD_INT 1
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60586
60453: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60454: LD_ADDR_VAR 0 5
60458: PUSH
60459: LD_VAR 0 1
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_INT 4
60471: MINUS
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: PUSH
60481: LD_VAR 0 1
60485: PUSH
60486: LD_INT 3
60488: MINUS
60489: PUSH
60490: LD_VAR 0 2
60494: PUSH
60495: LD_INT 3
60497: MINUS
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: PUSH
60507: LD_VAR 0 1
60511: PUSH
60512: LD_INT 4
60514: MINUS
60515: PUSH
60516: LD_VAR 0 2
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: PUSH
60529: LD_VAR 0 1
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_INT 3
60541: PLUS
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PUSH
60551: LD_VAR 0 1
60555: PUSH
60556: LD_INT 4
60558: PLUS
60559: PUSH
60560: LD_VAR 0 2
60564: PUSH
60565: LD_INT 4
60567: PLUS
60568: PUSH
60569: LD_INT 5
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: ST_TO_ADDR
// end ; 2 :
60584: GO 61143
60586: LD_INT 2
60588: DOUBLE
60589: EQUAL
60590: IFTRUE 60594
60592: GO 60723
60594: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60595: LD_ADDR_VAR 0 5
60599: PUSH
60600: LD_VAR 0 1
60604: PUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_INT 3
60612: MINUS
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: LD_VAR 0 1
60626: PUSH
60627: LD_INT 4
60629: PLUS
60630: PUSH
60631: LD_VAR 0 2
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: PUSH
60644: LD_VAR 0 1
60648: PUSH
60649: LD_VAR 0 2
60653: PUSH
60654: LD_INT 4
60656: PLUS
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: LD_INT 3
60673: MINUS
60674: PUSH
60675: LD_VAR 0 2
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: PUSH
60688: LD_VAR 0 1
60692: PUSH
60693: LD_INT 4
60695: MINUS
60696: PUSH
60697: LD_VAR 0 2
60701: PUSH
60702: LD_INT 4
60704: MINUS
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// end ; 3 :
60721: GO 61143
60723: LD_INT 3
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60864
60731: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_VAR 0 1
60741: PUSH
60742: LD_INT 3
60744: PLUS
60745: PUSH
60746: LD_VAR 0 2
60750: PUSH
60751: LD_INT 4
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: LD_VAR 0 1
60763: PUSH
60764: LD_INT 4
60766: PLUS
60767: PUSH
60768: LD_VAR 0 2
60772: PUSH
60773: LD_INT 4
60775: PLUS
60776: PUSH
60777: LD_INT 5
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PUSH
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 4
60792: MINUS
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 1
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 4
60819: MINUS
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: PUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 3
60836: MINUS
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 3
60845: MINUS
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// end ; 4 :
60862: GO 61143
60864: LD_INT 4
60866: DOUBLE
60867: EQUAL
60868: IFTRUE 60872
60870: GO 61005
60872: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60873: LD_ADDR_VAR 0 5
60877: PUSH
60878: LD_VAR 0 1
60882: PUSH
60883: LD_VAR 0 2
60887: PUSH
60888: LD_INT 4
60890: PLUS
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: LD_VAR 0 1
60904: PUSH
60905: LD_INT 3
60907: PLUS
60908: PUSH
60909: LD_VAR 0 2
60913: PUSH
60914: LD_INT 3
60916: PLUS
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: PUSH
60926: LD_VAR 0 1
60930: PUSH
60931: LD_INT 4
60933: PLUS
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_INT 4
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: PUSH
60948: LD_VAR 0 1
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 3
60960: MINUS
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_INT 4
60977: MINUS
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_INT 4
60986: MINUS
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// end ; 5 :
61003: GO 61143
61005: LD_INT 5
61007: DOUBLE
61008: EQUAL
61009: IFTRUE 61013
61011: GO 61142
61013: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61014: LD_ADDR_VAR 0 5
61018: PUSH
61019: LD_VAR 0 1
61023: PUSH
61024: LD_INT 4
61026: MINUS
61027: PUSH
61028: LD_VAR 0 2
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: LD_VAR 0 1
61045: PUSH
61046: LD_VAR 0 2
61050: PUSH
61051: LD_INT 4
61053: MINUS
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 1
61067: PUSH
61068: LD_INT 4
61070: PLUS
61071: PUSH
61072: LD_VAR 0 2
61076: PUSH
61077: LD_INT 4
61079: PLUS
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: PUSH
61089: LD_VAR 0 1
61093: PUSH
61094: LD_INT 3
61096: PLUS
61097: PUSH
61098: LD_VAR 0 2
61102: PUSH
61103: LD_INT 4
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: PUSH
61111: LD_VAR 0 1
61115: PUSH
61116: LD_VAR 0 2
61120: PUSH
61121: LD_INT 3
61123: PLUS
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// end ; end ;
61140: GO 61143
61142: POP
// result := list ;
61143: LD_ADDR_VAR 0 4
61147: PUSH
61148: LD_VAR 0 5
61152: ST_TO_ADDR
// end ;
61153: LD_VAR 0 4
61157: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61158: LD_INT 0
61160: PPUSH
61161: PPUSH
61162: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61163: LD_VAR 0 1
61167: NOT
61168: PUSH
61169: LD_VAR 0 2
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 4
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: IN
61192: NOT
61193: OR
61194: IFFALSE 61198
// exit ;
61196: GO 61290
// tmp := [ ] ;
61198: LD_ADDR_VAR 0 5
61202: PUSH
61203: EMPTY
61204: ST_TO_ADDR
// for i in units do
61205: LD_ADDR_VAR 0 4
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: FOR_IN
61216: IFFALSE 61259
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61218: LD_ADDR_VAR 0 5
61222: PUSH
61223: LD_VAR 0 5
61227: PPUSH
61228: LD_VAR 0 5
61232: PUSH
61233: LD_INT 1
61235: PLUS
61236: PPUSH
61237: LD_VAR 0 4
61241: PPUSH
61242: LD_VAR 0 2
61246: PPUSH
61247: CALL_OW 259
61251: PPUSH
61252: CALL_OW 2
61256: ST_TO_ADDR
61257: GO 61215
61259: POP
61260: POP
// if not tmp then
61261: LD_VAR 0 5
61265: NOT
61266: IFFALSE 61270
// exit ;
61268: GO 61290
// result := SortListByListDesc ( units , tmp ) ;
61270: LD_ADDR_VAR 0 3
61274: PUSH
61275: LD_VAR 0 1
61279: PPUSH
61280: LD_VAR 0 5
61284: PPUSH
61285: CALL_OW 77
61289: ST_TO_ADDR
// end ;
61290: LD_VAR 0 3
61294: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61295: LD_INT 0
61297: PPUSH
61298: PPUSH
61299: PPUSH
// result := false ;
61300: LD_ADDR_VAR 0 3
61304: PUSH
61305: LD_INT 0
61307: ST_TO_ADDR
// x := GetX ( building ) ;
61308: LD_ADDR_VAR 0 4
61312: PUSH
61313: LD_VAR 0 2
61317: PPUSH
61318: CALL_OW 250
61322: ST_TO_ADDR
// y := GetY ( building ) ;
61323: LD_ADDR_VAR 0 5
61327: PUSH
61328: LD_VAR 0 2
61332: PPUSH
61333: CALL_OW 251
61337: ST_TO_ADDR
// if not building or not x or not y then
61338: LD_VAR 0 2
61342: NOT
61343: PUSH
61344: LD_VAR 0 4
61348: NOT
61349: OR
61350: PUSH
61351: LD_VAR 0 5
61355: NOT
61356: OR
61357: IFFALSE 61361
// exit ;
61359: GO 61453
// if GetTaskList ( unit ) then
61361: LD_VAR 0 1
61365: PPUSH
61366: CALL_OW 437
61370: IFFALSE 61453
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61372: LD_STRING e
61374: PUSH
61375: LD_VAR 0 1
61379: PPUSH
61380: CALL_OW 437
61384: PUSH
61385: LD_INT 1
61387: ARRAY
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: EQUAL
61393: PUSH
61394: LD_VAR 0 4
61398: PUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: CALL_OW 437
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_INT 2
61415: ARRAY
61416: EQUAL
61417: AND
61418: PUSH
61419: LD_VAR 0 5
61423: PUSH
61424: LD_VAR 0 1
61428: PPUSH
61429: CALL_OW 437
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PUSH
61438: LD_INT 3
61440: ARRAY
61441: EQUAL
61442: AND
61443: IFFALSE 61453
// result := true end ;
61445: LD_ADDR_VAR 0 3
61449: PUSH
61450: LD_INT 1
61452: ST_TO_ADDR
// end ;
61453: LD_VAR 0 3
61457: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61458: LD_INT 0
61460: PPUSH
// result := false ;
61461: LD_ADDR_VAR 0 4
61465: PUSH
61466: LD_INT 0
61468: ST_TO_ADDR
// if GetTaskList ( unit ) then
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 437
61478: IFFALSE 61561
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61480: LD_STRING M
61482: PUSH
61483: LD_VAR 0 1
61487: PPUSH
61488: CALL_OW 437
61492: PUSH
61493: LD_INT 1
61495: ARRAY
61496: PUSH
61497: LD_INT 1
61499: ARRAY
61500: EQUAL
61501: PUSH
61502: LD_VAR 0 2
61506: PUSH
61507: LD_VAR 0 1
61511: PPUSH
61512: CALL_OW 437
61516: PUSH
61517: LD_INT 1
61519: ARRAY
61520: PUSH
61521: LD_INT 2
61523: ARRAY
61524: EQUAL
61525: AND
61526: PUSH
61527: LD_VAR 0 3
61531: PUSH
61532: LD_VAR 0 1
61536: PPUSH
61537: CALL_OW 437
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PUSH
61546: LD_INT 3
61548: ARRAY
61549: EQUAL
61550: AND
61551: IFFALSE 61561
// result := true ;
61553: LD_ADDR_VAR 0 4
61557: PUSH
61558: LD_INT 1
61560: ST_TO_ADDR
// end ; end ;
61561: LD_VAR 0 4
61565: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61566: LD_INT 0
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
// if not unit or not area then
61572: LD_VAR 0 1
61576: NOT
61577: PUSH
61578: LD_VAR 0 2
61582: NOT
61583: OR
61584: IFFALSE 61588
// exit ;
61586: GO 61752
// tmp := AreaToList ( area , i ) ;
61588: LD_ADDR_VAR 0 6
61592: PUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: LD_VAR 0 5
61602: PPUSH
61603: CALL_OW 517
61607: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61608: LD_ADDR_VAR 0 5
61612: PUSH
61613: DOUBLE
61614: LD_INT 1
61616: DEC
61617: ST_TO_ADDR
61618: LD_VAR 0 6
61622: PUSH
61623: LD_INT 1
61625: ARRAY
61626: PUSH
61627: FOR_TO
61628: IFFALSE 61750
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61630: LD_ADDR_VAR 0 7
61634: PUSH
61635: LD_VAR 0 6
61639: PUSH
61640: LD_INT 1
61642: ARRAY
61643: PUSH
61644: LD_VAR 0 5
61648: ARRAY
61649: PUSH
61650: LD_VAR 0 6
61654: PUSH
61655: LD_INT 2
61657: ARRAY
61658: PUSH
61659: LD_VAR 0 5
61663: ARRAY
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61669: LD_VAR 0 7
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: PPUSH
61678: LD_VAR 0 7
61682: PUSH
61683: LD_INT 2
61685: ARRAY
61686: PPUSH
61687: CALL_OW 428
61691: PUSH
61692: LD_INT 0
61694: EQUAL
61695: IFFALSE 61748
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61697: LD_VAR 0 1
61701: PPUSH
61702: LD_VAR 0 7
61706: PUSH
61707: LD_INT 1
61709: ARRAY
61710: PPUSH
61711: LD_VAR 0 7
61715: PUSH
61716: LD_INT 2
61718: ARRAY
61719: PPUSH
61720: LD_VAR 0 3
61724: PPUSH
61725: CALL_OW 48
// result := IsPlaced ( unit ) ;
61729: LD_ADDR_VAR 0 4
61733: PUSH
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 305
61743: ST_TO_ADDR
// exit ;
61744: POP
61745: POP
61746: GO 61752
// end ; end ;
61748: GO 61627
61750: POP
61751: POP
// end ;
61752: LD_VAR 0 4
61756: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61757: LD_INT 0
61759: PPUSH
61760: PPUSH
61761: PPUSH
// if not side or side > 8 then
61762: LD_VAR 0 1
61766: NOT
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_INT 8
61775: GREATER
61776: OR
61777: IFFALSE 61781
// exit ;
61779: GO 61968
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61781: LD_ADDR_VAR 0 4
61785: PUSH
61786: LD_INT 22
61788: PUSH
61789: LD_VAR 0 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 21
61800: PUSH
61801: LD_INT 3
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PPUSH
61812: CALL_OW 69
61816: ST_TO_ADDR
// if not tmp then
61817: LD_VAR 0 4
61821: NOT
61822: IFFALSE 61826
// exit ;
61824: GO 61968
// enable_addtolog := true ;
61826: LD_ADDR_OWVAR 81
61830: PUSH
61831: LD_INT 1
61833: ST_TO_ADDR
// AddToLog ( [ ) ;
61834: LD_STRING [
61836: PPUSH
61837: CALL_OW 561
// for i in tmp do
61841: LD_ADDR_VAR 0 3
61845: PUSH
61846: LD_VAR 0 4
61850: PUSH
61851: FOR_IN
61852: IFFALSE 61959
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61854: LD_STRING [
61856: PUSH
61857: LD_VAR 0 3
61861: PPUSH
61862: CALL_OW 266
61866: STR
61867: PUSH
61868: LD_STRING , 
61870: STR
61871: PUSH
61872: LD_VAR 0 3
61876: PPUSH
61877: CALL_OW 250
61881: STR
61882: PUSH
61883: LD_STRING , 
61885: STR
61886: PUSH
61887: LD_VAR 0 3
61891: PPUSH
61892: CALL_OW 251
61896: STR
61897: PUSH
61898: LD_STRING , 
61900: STR
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: CALL_OW 254
61911: STR
61912: PUSH
61913: LD_STRING , 
61915: STR
61916: PUSH
61917: LD_VAR 0 3
61921: PPUSH
61922: LD_INT 1
61924: PPUSH
61925: CALL_OW 268
61929: STR
61930: PUSH
61931: LD_STRING , 
61933: STR
61934: PUSH
61935: LD_VAR 0 3
61939: PPUSH
61940: LD_INT 2
61942: PPUSH
61943: CALL_OW 268
61947: STR
61948: PUSH
61949: LD_STRING ],
61951: STR
61952: PPUSH
61953: CALL_OW 561
// end ;
61957: GO 61851
61959: POP
61960: POP
// AddToLog ( ]; ) ;
61961: LD_STRING ];
61963: PPUSH
61964: CALL_OW 561
// end ;
61968: LD_VAR 0 2
61972: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61973: LD_INT 0
61975: PPUSH
61976: PPUSH
61977: PPUSH
61978: PPUSH
61979: PPUSH
// if not area or not rate or not max then
61980: LD_VAR 0 1
61984: NOT
61985: PUSH
61986: LD_VAR 0 2
61990: NOT
61991: OR
61992: PUSH
61993: LD_VAR 0 4
61997: NOT
61998: OR
61999: IFFALSE 62003
// exit ;
62001: GO 62192
// while 1 do
62003: LD_INT 1
62005: IFFALSE 62192
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62007: LD_ADDR_VAR 0 9
62011: PUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: LD_INT 1
62019: PPUSH
62020: CALL_OW 287
62024: PUSH
62025: LD_INT 10
62027: MUL
62028: ST_TO_ADDR
// r := rate / 10 ;
62029: LD_ADDR_VAR 0 7
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 10
62041: DIVREAL
62042: ST_TO_ADDR
// time := 1 1$00 ;
62043: LD_ADDR_VAR 0 8
62047: PUSH
62048: LD_INT 2100
62050: ST_TO_ADDR
// if amount < min then
62051: LD_VAR 0 9
62055: PUSH
62056: LD_VAR 0 3
62060: LESS
62061: IFFALSE 62079
// r := r * 2 else
62063: LD_ADDR_VAR 0 7
62067: PUSH
62068: LD_VAR 0 7
62072: PUSH
62073: LD_INT 2
62075: MUL
62076: ST_TO_ADDR
62077: GO 62105
// if amount > max then
62079: LD_VAR 0 9
62083: PUSH
62084: LD_VAR 0 4
62088: GREATER
62089: IFFALSE 62105
// r := r / 2 ;
62091: LD_ADDR_VAR 0 7
62095: PUSH
62096: LD_VAR 0 7
62100: PUSH
62101: LD_INT 2
62103: DIVREAL
62104: ST_TO_ADDR
// time := time / r ;
62105: LD_ADDR_VAR 0 8
62109: PUSH
62110: LD_VAR 0 8
62114: PUSH
62115: LD_VAR 0 7
62119: DIVREAL
62120: ST_TO_ADDR
// if time < 0 then
62121: LD_VAR 0 8
62125: PUSH
62126: LD_INT 0
62128: LESS
62129: IFFALSE 62146
// time := time * - 1 ;
62131: LD_ADDR_VAR 0 8
62135: PUSH
62136: LD_VAR 0 8
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: MUL
62145: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62146: LD_VAR 0 8
62150: PUSH
62151: LD_INT 35
62153: PPUSH
62154: LD_INT 875
62156: PPUSH
62157: CALL_OW 12
62161: PLUS
62162: PPUSH
62163: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62167: LD_INT 1
62169: PPUSH
62170: LD_INT 5
62172: PPUSH
62173: CALL_OW 12
62177: PPUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: LD_INT 1
62185: PPUSH
62186: CALL_OW 55
// end ;
62190: GO 62003
// end ;
62192: LD_VAR 0 5
62196: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62197: LD_INT 0
62199: PPUSH
62200: PPUSH
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
62205: PPUSH
62206: PPUSH
// if not turrets or not factories then
62207: LD_VAR 0 1
62211: NOT
62212: PUSH
62213: LD_VAR 0 2
62217: NOT
62218: OR
62219: IFFALSE 62223
// exit ;
62221: GO 62530
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62223: LD_ADDR_VAR 0 10
62227: PUSH
62228: LD_INT 5
62230: PUSH
62231: LD_INT 6
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: LD_INT 4
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 24
62265: PUSH
62266: LD_INT 25
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 23
62275: PUSH
62276: LD_INT 27
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 42
62289: PUSH
62290: LD_INT 43
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 44
62299: PUSH
62300: LD_INT 46
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 45
62309: PUSH
62310: LD_INT 47
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// result := [ ] ;
62327: LD_ADDR_VAR 0 3
62331: PUSH
62332: EMPTY
62333: ST_TO_ADDR
// for i in turrets do
62334: LD_ADDR_VAR 0 4
62338: PUSH
62339: LD_VAR 0 1
62343: PUSH
62344: FOR_IN
62345: IFFALSE 62528
// begin nat := GetNation ( i ) ;
62347: LD_ADDR_VAR 0 7
62351: PUSH
62352: LD_VAR 0 4
62356: PPUSH
62357: CALL_OW 248
62361: ST_TO_ADDR
// weapon := 0 ;
62362: LD_ADDR_VAR 0 8
62366: PUSH
62367: LD_INT 0
62369: ST_TO_ADDR
// if not nat then
62370: LD_VAR 0 7
62374: NOT
62375: IFFALSE 62379
// continue ;
62377: GO 62344
// for j in list [ nat ] do
62379: LD_ADDR_VAR 0 5
62383: PUSH
62384: LD_VAR 0 10
62388: PUSH
62389: LD_VAR 0 7
62393: ARRAY
62394: PUSH
62395: FOR_IN
62396: IFFALSE 62437
// if GetBWeapon ( i ) = j [ 1 ] then
62398: LD_VAR 0 4
62402: PPUSH
62403: CALL_OW 269
62407: PUSH
62408: LD_VAR 0 5
62412: PUSH
62413: LD_INT 1
62415: ARRAY
62416: EQUAL
62417: IFFALSE 62435
// begin weapon := j [ 2 ] ;
62419: LD_ADDR_VAR 0 8
62423: PUSH
62424: LD_VAR 0 5
62428: PUSH
62429: LD_INT 2
62431: ARRAY
62432: ST_TO_ADDR
// break ;
62433: GO 62437
// end ;
62435: GO 62395
62437: POP
62438: POP
// if not weapon then
62439: LD_VAR 0 8
62443: NOT
62444: IFFALSE 62448
// continue ;
62446: GO 62344
// for k in factories do
62448: LD_ADDR_VAR 0 6
62452: PUSH
62453: LD_VAR 0 2
62457: PUSH
62458: FOR_IN
62459: IFFALSE 62524
// begin weapons := AvailableWeaponList ( k ) ;
62461: LD_ADDR_VAR 0 9
62465: PUSH
62466: LD_VAR 0 6
62470: PPUSH
62471: CALL_OW 478
62475: ST_TO_ADDR
// if not weapons then
62476: LD_VAR 0 9
62480: NOT
62481: IFFALSE 62485
// continue ;
62483: GO 62458
// if weapon in weapons then
62485: LD_VAR 0 8
62489: PUSH
62490: LD_VAR 0 9
62494: IN
62495: IFFALSE 62522
// begin result := [ i , weapon ] ;
62497: LD_ADDR_VAR 0 3
62501: PUSH
62502: LD_VAR 0 4
62506: PUSH
62507: LD_VAR 0 8
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: ST_TO_ADDR
// exit ;
62516: POP
62517: POP
62518: POP
62519: POP
62520: GO 62530
// end ; end ;
62522: GO 62458
62524: POP
62525: POP
// end ;
62526: GO 62344
62528: POP
62529: POP
// end ;
62530: LD_VAR 0 3
62534: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62535: LD_INT 0
62537: PPUSH
// if not side or side > 8 then
62538: LD_VAR 0 3
62542: NOT
62543: PUSH
62544: LD_VAR 0 3
62548: PUSH
62549: LD_INT 8
62551: GREATER
62552: OR
62553: IFFALSE 62557
// exit ;
62555: GO 62616
// if not range then
62557: LD_VAR 0 4
62561: NOT
62562: IFFALSE 62573
// range := - 12 ;
62564: LD_ADDR_VAR 0 4
62568: PUSH
62569: LD_INT 12
62571: NEG
62572: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62573: LD_VAR 0 1
62577: PPUSH
62578: LD_VAR 0 2
62582: PPUSH
62583: LD_VAR 0 3
62587: PPUSH
62588: LD_VAR 0 4
62592: PPUSH
62593: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62597: LD_VAR 0 1
62601: PPUSH
62602: LD_VAR 0 2
62606: PPUSH
62607: LD_VAR 0 3
62611: PPUSH
62612: CALL_OW 331
// end ;
62616: LD_VAR 0 5
62620: RET
// export function Video ( mode ) ; begin
62621: LD_INT 0
62623: PPUSH
// ingame_video = mode ;
62624: LD_ADDR_OWVAR 52
62628: PUSH
62629: LD_VAR 0 1
62633: ST_TO_ADDR
// interface_hidden = mode ;
62634: LD_ADDR_OWVAR 54
62638: PUSH
62639: LD_VAR 0 1
62643: ST_TO_ADDR
// end ;
62644: LD_VAR 0 2
62648: RET
// export function Join ( array , element ) ; begin
62649: LD_INT 0
62651: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62652: LD_ADDR_VAR 0 3
62656: PUSH
62657: LD_VAR 0 1
62661: PPUSH
62662: LD_VAR 0 1
62666: PUSH
62667: LD_INT 1
62669: PLUS
62670: PPUSH
62671: LD_VAR 0 2
62675: PPUSH
62676: CALL_OW 1
62680: ST_TO_ADDR
// end ;
62681: LD_VAR 0 3
62685: RET
// export function JoinUnion ( array , element ) ; begin
62686: LD_INT 0
62688: PPUSH
// result := array union element ;
62689: LD_ADDR_VAR 0 3
62693: PUSH
62694: LD_VAR 0 1
62698: PUSH
62699: LD_VAR 0 2
62703: UNION
62704: ST_TO_ADDR
// end ;
62705: LD_VAR 0 3
62709: RET
// export function GetBehemoths ( side ) ; begin
62710: LD_INT 0
62712: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62713: LD_ADDR_VAR 0 2
62717: PUSH
62718: LD_INT 22
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 31
62732: PUSH
62733: LD_INT 25
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PPUSH
62744: CALL_OW 69
62748: ST_TO_ADDR
// end ;
62749: LD_VAR 0 2
62753: RET
// export function Shuffle ( array ) ; var i , index ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
62758: PPUSH
// result := [ ] ;
62759: LD_ADDR_VAR 0 2
62763: PUSH
62764: EMPTY
62765: ST_TO_ADDR
// if not array then
62766: LD_VAR 0 1
62770: NOT
62771: IFFALSE 62775
// exit ;
62773: GO 62874
// Randomize ;
62775: CALL_OW 10
// for i = array downto 1 do
62779: LD_ADDR_VAR 0 3
62783: PUSH
62784: DOUBLE
62785: LD_VAR 0 1
62789: INC
62790: ST_TO_ADDR
62791: LD_INT 1
62793: PUSH
62794: FOR_DOWNTO
62795: IFFALSE 62872
// begin index := rand ( 1 , array ) ;
62797: LD_ADDR_VAR 0 4
62801: PUSH
62802: LD_INT 1
62804: PPUSH
62805: LD_VAR 0 1
62809: PPUSH
62810: CALL_OW 12
62814: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62815: LD_ADDR_VAR 0 2
62819: PUSH
62820: LD_VAR 0 2
62824: PPUSH
62825: LD_VAR 0 2
62829: PUSH
62830: LD_INT 1
62832: PLUS
62833: PPUSH
62834: LD_VAR 0 1
62838: PUSH
62839: LD_VAR 0 4
62843: ARRAY
62844: PPUSH
62845: CALL_OW 2
62849: ST_TO_ADDR
// array := Delete ( array , index ) ;
62850: LD_ADDR_VAR 0 1
62854: PUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: LD_VAR 0 4
62864: PPUSH
62865: CALL_OW 3
62869: ST_TO_ADDR
// end ;
62870: GO 62794
62872: POP
62873: POP
// end ;
62874: LD_VAR 0 2
62878: RET
// export function GetBaseMaterials ( base ) ; begin
62879: LD_INT 0
62881: PPUSH
// result := [ 0 , 0 , 0 ] ;
62882: LD_ADDR_VAR 0 2
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// if not base then
62901: LD_VAR 0 1
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62959
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: LD_INT 1
62922: PPUSH
62923: CALL_OW 275
62927: PUSH
62928: LD_VAR 0 1
62932: PPUSH
62933: LD_INT 2
62935: PPUSH
62936: CALL_OW 275
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: LD_INT 3
62948: PPUSH
62949: CALL_OW 275
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// end ;
62959: LD_VAR 0 2
62963: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62964: LD_INT 0
62966: PPUSH
62967: PPUSH
// result := array ;
62968: LD_ADDR_VAR 0 3
62972: PUSH
62973: LD_VAR 0 1
62977: ST_TO_ADDR
// if size >= result then
62978: LD_VAR 0 2
62982: PUSH
62983: LD_VAR 0 3
62987: GREATEREQUAL
62988: IFFALSE 62992
// exit ;
62990: GO 63042
// if size then
62992: LD_VAR 0 2
62996: IFFALSE 63042
// for i := array downto size do
62998: LD_ADDR_VAR 0 4
63002: PUSH
63003: DOUBLE
63004: LD_VAR 0 1
63008: INC
63009: ST_TO_ADDR
63010: LD_VAR 0 2
63014: PUSH
63015: FOR_DOWNTO
63016: IFFALSE 63040
// result := Delete ( result , result ) ;
63018: LD_ADDR_VAR 0 3
63022: PUSH
63023: LD_VAR 0 3
63027: PPUSH
63028: LD_VAR 0 3
63032: PPUSH
63033: CALL_OW 3
63037: ST_TO_ADDR
63038: GO 63015
63040: POP
63041: POP
// end ;
63042: LD_VAR 0 3
63046: RET
// export function ComExit ( unit ) ; var tmp ; begin
63047: LD_INT 0
63049: PPUSH
63050: PPUSH
// if not IsInUnit ( unit ) then
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 310
63060: NOT
63061: IFFALSE 63065
// exit ;
63063: GO 63125
// tmp := IsInUnit ( unit ) ;
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: LD_VAR 0 1
63074: PPUSH
63075: CALL_OW 310
63079: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63080: LD_VAR 0 3
63084: PPUSH
63085: CALL_OW 247
63089: PUSH
63090: LD_INT 2
63092: EQUAL
63093: IFFALSE 63106
// ComExitVehicle ( unit ) else
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL_OW 121
63104: GO 63115
// ComExitBuilding ( unit ) ;
63106: LD_VAR 0 1
63110: PPUSH
63111: CALL_OW 122
// result := tmp ;
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_VAR 0 3
63124: ST_TO_ADDR
// end ;
63125: LD_VAR 0 2
63129: RET
// export function ComExitAll ( units ) ; var i ; begin
63130: LD_INT 0
63132: PPUSH
63133: PPUSH
// if not units then
63134: LD_VAR 0 1
63138: NOT
63139: IFFALSE 63143
// exit ;
63141: GO 63169
// for i in units do
63143: LD_ADDR_VAR 0 3
63147: PUSH
63148: LD_VAR 0 1
63152: PUSH
63153: FOR_IN
63154: IFFALSE 63167
// ComExit ( i ) ;
63156: LD_VAR 0 3
63160: PPUSH
63161: CALL 63047 0 1
63165: GO 63153
63167: POP
63168: POP
// end ;
63169: LD_VAR 0 2
63173: RET
// export function ResetHc ; begin
63174: LD_INT 0
63176: PPUSH
// InitHc ;
63177: CALL_OW 19
// hc_importance := 0 ;
63181: LD_ADDR_OWVAR 32
63185: PUSH
63186: LD_INT 0
63188: ST_TO_ADDR
// end ;
63189: LD_VAR 0 1
63193: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63194: LD_INT 0
63196: PPUSH
63197: PPUSH
63198: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63199: LD_ADDR_VAR 0 6
63203: PUSH
63204: LD_VAR 0 1
63208: PUSH
63209: LD_VAR 0 3
63213: PLUS
63214: PUSH
63215: LD_INT 2
63217: DIV
63218: ST_TO_ADDR
// if _x < 0 then
63219: LD_VAR 0 6
63223: PUSH
63224: LD_INT 0
63226: LESS
63227: IFFALSE 63244
// _x := _x * - 1 ;
63229: LD_ADDR_VAR 0 6
63233: PUSH
63234: LD_VAR 0 6
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: MUL
63243: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63244: LD_ADDR_VAR 0 7
63248: PUSH
63249: LD_VAR 0 2
63253: PUSH
63254: LD_VAR 0 4
63258: PLUS
63259: PUSH
63260: LD_INT 2
63262: DIV
63263: ST_TO_ADDR
// if _y < 0 then
63264: LD_VAR 0 7
63268: PUSH
63269: LD_INT 0
63271: LESS
63272: IFFALSE 63289
// _y := _y * - 1 ;
63274: LD_ADDR_VAR 0 7
63278: PUSH
63279: LD_VAR 0 7
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: MUL
63288: ST_TO_ADDR
// result := [ _x , _y ] ;
63289: LD_ADDR_VAR 0 5
63293: PUSH
63294: LD_VAR 0 6
63298: PUSH
63299: LD_VAR 0 7
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: ST_TO_ADDR
// end ;
63308: LD_VAR 0 5
63312: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63313: LD_INT 0
63315: PPUSH
63316: PPUSH
63317: PPUSH
63318: PPUSH
// task := GetTaskList ( unit ) ;
63319: LD_ADDR_VAR 0 7
63323: PUSH
63324: LD_VAR 0 1
63328: PPUSH
63329: CALL_OW 437
63333: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63334: LD_VAR 0 7
63338: NOT
63339: PUSH
63340: LD_VAR 0 1
63344: PPUSH
63345: LD_VAR 0 2
63349: PPUSH
63350: CALL_OW 308
63354: NOT
63355: AND
63356: IFFALSE 63360
// exit ;
63358: GO 63478
// if IsInArea ( unit , area ) then
63360: LD_VAR 0 1
63364: PPUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: CALL_OW 308
63374: IFFALSE 63392
// begin ComMoveToArea ( unit , goAway ) ;
63376: LD_VAR 0 1
63380: PPUSH
63381: LD_VAR 0 3
63385: PPUSH
63386: CALL_OW 113
// exit ;
63390: GO 63478
// end ; if task [ 1 ] [ 1 ] <> M then
63392: LD_VAR 0 7
63396: PUSH
63397: LD_INT 1
63399: ARRAY
63400: PUSH
63401: LD_INT 1
63403: ARRAY
63404: PUSH
63405: LD_STRING M
63407: NONEQUAL
63408: IFFALSE 63412
// exit ;
63410: GO 63478
// x := task [ 1 ] [ 2 ] ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_VAR 0 7
63421: PUSH
63422: LD_INT 1
63424: ARRAY
63425: PUSH
63426: LD_INT 2
63428: ARRAY
63429: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63430: LD_ADDR_VAR 0 6
63434: PUSH
63435: LD_VAR 0 7
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: PUSH
63444: LD_INT 3
63446: ARRAY
63447: ST_TO_ADDR
// if InArea ( x , y , area ) then
63448: LD_VAR 0 5
63452: PPUSH
63453: LD_VAR 0 6
63457: PPUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: CALL_OW 309
63467: IFFALSE 63478
// ComStop ( unit ) ;
63469: LD_VAR 0 1
63473: PPUSH
63474: CALL_OW 141
// end ;
63478: LD_VAR 0 4
63482: RET
// export function Abs ( value ) ; begin
63483: LD_INT 0
63485: PPUSH
// result := value ;
63486: LD_ADDR_VAR 0 2
63490: PUSH
63491: LD_VAR 0 1
63495: ST_TO_ADDR
// if value < 0 then
63496: LD_VAR 0 1
63500: PUSH
63501: LD_INT 0
63503: LESS
63504: IFFALSE 63521
// result := value * - 1 ;
63506: LD_ADDR_VAR 0 2
63510: PUSH
63511: LD_VAR 0 1
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: MUL
63520: ST_TO_ADDR
// end ;
63521: LD_VAR 0 2
63525: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63526: LD_INT 0
63528: PPUSH
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
// if not unit or not building then
63536: LD_VAR 0 1
63540: NOT
63541: PUSH
63542: LD_VAR 0 2
63546: NOT
63547: OR
63548: IFFALSE 63552
// exit ;
63550: GO 63778
// x := GetX ( building ) ;
63552: LD_ADDR_VAR 0 4
63556: PUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: CALL_OW 250
63566: ST_TO_ADDR
// y := GetY ( building ) ;
63567: LD_ADDR_VAR 0 6
63571: PUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: CALL_OW 251
63581: ST_TO_ADDR
// d := GetDir ( building ) ;
63582: LD_ADDR_VAR 0 8
63586: PUSH
63587: LD_VAR 0 2
63591: PPUSH
63592: CALL_OW 254
63596: ST_TO_ADDR
// r := 4 ;
63597: LD_ADDR_VAR 0 9
63601: PUSH
63602: LD_INT 4
63604: ST_TO_ADDR
// for i := 1 to 5 do
63605: LD_ADDR_VAR 0 10
63609: PUSH
63610: DOUBLE
63611: LD_INT 1
63613: DEC
63614: ST_TO_ADDR
63615: LD_INT 5
63617: PUSH
63618: FOR_TO
63619: IFFALSE 63776
// begin _x := ShiftX ( x , d , r + i ) ;
63621: LD_ADDR_VAR 0 5
63625: PUSH
63626: LD_VAR 0 4
63630: PPUSH
63631: LD_VAR 0 8
63635: PPUSH
63636: LD_VAR 0 9
63640: PUSH
63641: LD_VAR 0 10
63645: PLUS
63646: PPUSH
63647: CALL_OW 272
63651: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63652: LD_ADDR_VAR 0 7
63656: PUSH
63657: LD_VAR 0 6
63661: PPUSH
63662: LD_VAR 0 8
63666: PPUSH
63667: LD_VAR 0 9
63671: PUSH
63672: LD_VAR 0 10
63676: PLUS
63677: PPUSH
63678: CALL_OW 273
63682: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63683: LD_VAR 0 5
63687: PPUSH
63688: LD_VAR 0 7
63692: PPUSH
63693: CALL_OW 488
63697: PUSH
63698: LD_VAR 0 5
63702: PPUSH
63703: LD_VAR 0 7
63707: PPUSH
63708: CALL_OW 428
63712: PPUSH
63713: CALL_OW 247
63717: PUSH
63718: LD_INT 3
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: IN
63728: NOT
63729: AND
63730: IFFALSE 63774
// begin ComMoveXY ( unit , _x , _y ) ;
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_VAR 0 5
63741: PPUSH
63742: LD_VAR 0 7
63746: PPUSH
63747: CALL_OW 111
// result := [ _x , _y ] ;
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_VAR 0 5
63760: PUSH
63761: LD_VAR 0 7
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// exit ;
63770: POP
63771: POP
63772: GO 63778
// end ; end ;
63774: GO 63618
63776: POP
63777: POP
// end ;
63778: LD_VAR 0 3
63782: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63783: LD_INT 0
63785: PPUSH
63786: PPUSH
63787: PPUSH
// result := 0 ;
63788: LD_ADDR_VAR 0 3
63792: PUSH
63793: LD_INT 0
63795: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 0
63803: LESS
63804: PUSH
63805: LD_VAR 0 1
63809: PUSH
63810: LD_INT 8
63812: GREATER
63813: OR
63814: PUSH
63815: LD_VAR 0 2
63819: PUSH
63820: LD_INT 0
63822: LESS
63823: OR
63824: PUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_INT 8
63832: GREATER
63833: OR
63834: IFFALSE 63838
// exit ;
63836: GO 63913
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63838: LD_ADDR_VAR 0 4
63842: PUSH
63843: LD_INT 22
63845: PUSH
63846: LD_VAR 0 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PPUSH
63855: CALL_OW 69
63859: PUSH
63860: FOR_IN
63861: IFFALSE 63911
// begin un := UnitShoot ( i ) ;
63863: LD_ADDR_VAR 0 5
63867: PUSH
63868: LD_VAR 0 4
63872: PPUSH
63873: CALL_OW 504
63877: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63878: LD_VAR 0 5
63882: PPUSH
63883: CALL_OW 255
63887: PUSH
63888: LD_VAR 0 1
63892: EQUAL
63893: IFFALSE 63909
// begin result := un ;
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_VAR 0 5
63904: ST_TO_ADDR
// exit ;
63905: POP
63906: POP
63907: GO 63913
// end ; end ;
63909: GO 63860
63911: POP
63912: POP
// end ;
63913: LD_VAR 0 3
63917: RET
// export function GetCargoBay ( units ) ; begin
63918: LD_INT 0
63920: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63921: LD_ADDR_VAR 0 2
63925: PUSH
63926: LD_VAR 0 1
63930: PPUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 34
63936: PUSH
63937: LD_INT 12
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 34
63946: PUSH
63947: LD_INT 51
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 34
63956: PUSH
63957: LD_INT 32
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 34
63966: PUSH
63967: LD_EXP 87
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: PPUSH
63983: CALL_OW 72
63987: ST_TO_ADDR
// end ;
63988: LD_VAR 0 2
63992: RET
// export function Negate ( value ) ; begin
63993: LD_INT 0
63995: PPUSH
// result := not value ;
63996: LD_ADDR_VAR 0 2
64000: PUSH
64001: LD_VAR 0 1
64005: NOT
64006: ST_TO_ADDR
// end ;
64007: LD_VAR 0 2
64011: RET
// export function Inc ( value ) ; begin
64012: LD_INT 0
64014: PPUSH
// result := value + 1 ;
64015: LD_ADDR_VAR 0 2
64019: PUSH
64020: LD_VAR 0 1
64024: PUSH
64025: LD_INT 1
64027: PLUS
64028: ST_TO_ADDR
// end ;
64029: LD_VAR 0 2
64033: RET
// export function Dec ( value ) ; begin
64034: LD_INT 0
64036: PPUSH
// result := value - 1 ;
64037: LD_ADDR_VAR 0 2
64041: PUSH
64042: LD_VAR 0 1
64046: PUSH
64047: LD_INT 1
64049: MINUS
64050: ST_TO_ADDR
// end ;
64051: LD_VAR 0 2
64055: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64056: LD_INT 0
64058: PPUSH
64059: PPUSH
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_VAR 0 2
64075: PPUSH
64076: CALL_OW 488
64080: NOT
64081: PUSH
64082: LD_VAR 0 3
64086: PPUSH
64087: LD_VAR 0 4
64091: PPUSH
64092: CALL_OW 488
64096: NOT
64097: OR
64098: IFFALSE 64111
// begin result := - 1 ;
64100: LD_ADDR_VAR 0 5
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: ST_TO_ADDR
// exit ;
64109: GO 64346
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64111: LD_ADDR_VAR 0 12
64115: PUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_VAR 0 3
64130: PPUSH
64131: LD_VAR 0 4
64135: PPUSH
64136: CALL 63194 0 4
64140: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64141: LD_ADDR_VAR 0 11
64145: PUSH
64146: LD_VAR 0 1
64150: PPUSH
64151: LD_VAR 0 2
64155: PPUSH
64156: LD_VAR 0 12
64160: PUSH
64161: LD_INT 1
64163: ARRAY
64164: PPUSH
64165: LD_VAR 0 12
64169: PUSH
64170: LD_INT 2
64172: ARRAY
64173: PPUSH
64174: CALL_OW 298
64178: ST_TO_ADDR
// distance := 9999 ;
64179: LD_ADDR_VAR 0 10
64183: PUSH
64184: LD_INT 9999
64186: ST_TO_ADDR
// for i := 0 to 5 do
64187: LD_ADDR_VAR 0 6
64191: PUSH
64192: DOUBLE
64193: LD_INT 0
64195: DEC
64196: ST_TO_ADDR
64197: LD_INT 5
64199: PUSH
64200: FOR_TO
64201: IFFALSE 64344
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64203: LD_ADDR_VAR 0 7
64207: PUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: LD_VAR 0 6
64217: PPUSH
64218: LD_VAR 0 11
64222: PPUSH
64223: CALL_OW 272
64227: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64228: LD_ADDR_VAR 0 8
64232: PUSH
64233: LD_VAR 0 2
64237: PPUSH
64238: LD_VAR 0 6
64242: PPUSH
64243: LD_VAR 0 11
64247: PPUSH
64248: CALL_OW 273
64252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64253: LD_VAR 0 7
64257: PPUSH
64258: LD_VAR 0 8
64262: PPUSH
64263: CALL_OW 488
64267: NOT
64268: IFFALSE 64272
// continue ;
64270: GO 64200
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64272: LD_ADDR_VAR 0 9
64276: PUSH
64277: LD_VAR 0 12
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PPUSH
64286: LD_VAR 0 12
64290: PUSH
64291: LD_INT 2
64293: ARRAY
64294: PPUSH
64295: LD_VAR 0 7
64299: PPUSH
64300: LD_VAR 0 8
64304: PPUSH
64305: CALL_OW 298
64309: ST_TO_ADDR
// if tmp < distance then
64310: LD_VAR 0 9
64314: PUSH
64315: LD_VAR 0 10
64319: LESS
64320: IFFALSE 64342
// begin result := i ;
64322: LD_ADDR_VAR 0 5
64326: PUSH
64327: LD_VAR 0 6
64331: ST_TO_ADDR
// distance := tmp ;
64332: LD_ADDR_VAR 0 10
64336: PUSH
64337: LD_VAR 0 9
64341: ST_TO_ADDR
// end ; end ;
64342: GO 64200
64344: POP
64345: POP
// end ;
64346: LD_VAR 0 5
64350: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64351: LD_INT 0
64353: PPUSH
64354: PPUSH
// if not driver or not IsInUnit ( driver ) then
64355: LD_VAR 0 1
64359: NOT
64360: PUSH
64361: LD_VAR 0 1
64365: PPUSH
64366: CALL_OW 310
64370: NOT
64371: OR
64372: IFFALSE 64376
// exit ;
64374: GO 64466
// vehicle := IsInUnit ( driver ) ;
64376: LD_ADDR_VAR 0 3
64380: PUSH
64381: LD_VAR 0 1
64385: PPUSH
64386: CALL_OW 310
64390: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_STRING \
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: PUSH
64426: LD_STRING E
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_VAR 0 3
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PPUSH
64462: CALL_OW 446
// end ;
64466: LD_VAR 0 2
64470: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64471: LD_INT 0
64473: PPUSH
64474: PPUSH
// if not driver or not IsInUnit ( driver ) then
64475: LD_VAR 0 1
64479: NOT
64480: PUSH
64481: LD_VAR 0 1
64485: PPUSH
64486: CALL_OW 310
64490: NOT
64491: OR
64492: IFFALSE 64496
// exit ;
64494: GO 64586
// vehicle := IsInUnit ( driver ) ;
64496: LD_ADDR_VAR 0 3
64500: PUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: CALL_OW 310
64510: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64511: LD_VAR 0 1
64515: PPUSH
64516: LD_STRING \
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: LD_STRING E
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_VAR 0 3
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PPUSH
64582: CALL_OW 447
// end ;
64586: LD_VAR 0 2
64590: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64591: LD_INT 0
64593: PPUSH
64594: PPUSH
64595: PPUSH
// tmp := [ ] ;
64596: LD_ADDR_VAR 0 5
64600: PUSH
64601: EMPTY
64602: ST_TO_ADDR
// for i in units do
64603: LD_ADDR_VAR 0 4
64607: PUSH
64608: LD_VAR 0 1
64612: PUSH
64613: FOR_IN
64614: IFFALSE 64652
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64616: LD_ADDR_VAR 0 5
64620: PUSH
64621: LD_VAR 0 5
64625: PPUSH
64626: LD_VAR 0 5
64630: PUSH
64631: LD_INT 1
64633: PLUS
64634: PPUSH
64635: LD_VAR 0 4
64639: PPUSH
64640: CALL_OW 256
64644: PPUSH
64645: CALL_OW 2
64649: ST_TO_ADDR
64650: GO 64613
64652: POP
64653: POP
// if not tmp then
64654: LD_VAR 0 5
64658: NOT
64659: IFFALSE 64663
// exit ;
64661: GO 64711
// if asc then
64663: LD_VAR 0 2
64667: IFFALSE 64691
// result := SortListByListAsc ( units , tmp ) else
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: LD_VAR 0 5
64683: PPUSH
64684: CALL_OW 76
64688: ST_TO_ADDR
64689: GO 64711
// result := SortListByListDesc ( units , tmp ) ;
64691: LD_ADDR_VAR 0 3
64695: PUSH
64696: LD_VAR 0 1
64700: PPUSH
64701: LD_VAR 0 5
64705: PPUSH
64706: CALL_OW 77
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 3
64715: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64716: LD_INT 0
64718: PPUSH
64719: PPUSH
// task := GetTaskList ( mech ) ;
64720: LD_ADDR_VAR 0 4
64724: PUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 437
64734: ST_TO_ADDR
// if not task then
64735: LD_VAR 0 4
64739: NOT
64740: IFFALSE 64744
// exit ;
64742: GO 64786
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64744: LD_ADDR_VAR 0 3
64748: PUSH
64749: LD_VAR 0 4
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: PUSH
64762: LD_STRING r
64764: EQUAL
64765: PUSH
64766: LD_VAR 0 4
64770: PUSH
64771: LD_INT 1
64773: ARRAY
64774: PUSH
64775: LD_INT 4
64777: ARRAY
64778: PUSH
64779: LD_VAR 0 2
64783: EQUAL
64784: AND
64785: ST_TO_ADDR
// end ;
64786: LD_VAR 0 3
64790: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64791: LD_INT 0
64793: PPUSH
// SetDir ( unit , d ) ;
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 4
64803: PPUSH
64804: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64808: LD_VAR 0 1
64812: PPUSH
64813: LD_VAR 0 2
64817: PPUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: LD_VAR 0 5
64827: PPUSH
64828: CALL_OW 48
// end ;
64832: LD_VAR 0 6
64836: RET
// export function ToNaturalNumber ( number ) ; begin
64837: LD_INT 0
64839: PPUSH
// result := number div 1 ;
64840: LD_ADDR_VAR 0 2
64844: PUSH
64845: LD_VAR 0 1
64849: PUSH
64850: LD_INT 1
64852: DIV
64853: ST_TO_ADDR
// if number < 0 then
64854: LD_VAR 0 1
64858: PUSH
64859: LD_INT 0
64861: LESS
64862: IFFALSE 64872
// result := 0 ;
64864: LD_ADDR_VAR 0 2
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// end ;
64872: LD_VAR 0 2
64876: RET
// export function SortByClass ( units , class ) ; var un ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
// if not units or not class then
64881: LD_VAR 0 1
64885: NOT
64886: PUSH
64887: LD_VAR 0 2
64891: NOT
64892: OR
64893: IFFALSE 64897
// exit ;
64895: GO 64992
// result := [ ] ;
64897: LD_ADDR_VAR 0 3
64901: PUSH
64902: EMPTY
64903: ST_TO_ADDR
// for un in units do
64904: LD_ADDR_VAR 0 4
64908: PUSH
64909: LD_VAR 0 1
64913: PUSH
64914: FOR_IN
64915: IFFALSE 64990
// if GetClass ( un ) = class then
64917: LD_VAR 0 4
64921: PPUSH
64922: CALL_OW 257
64926: PUSH
64927: LD_VAR 0 2
64931: EQUAL
64932: IFFALSE 64959
// result := Insert ( result , 1 , un ) else
64934: LD_ADDR_VAR 0 3
64938: PUSH
64939: LD_VAR 0 3
64943: PPUSH
64944: LD_INT 1
64946: PPUSH
64947: LD_VAR 0 4
64951: PPUSH
64952: CALL_OW 2
64956: ST_TO_ADDR
64957: GO 64988
// result := Replace ( result , result + 1 , un ) ;
64959: LD_ADDR_VAR 0 3
64963: PUSH
64964: LD_VAR 0 3
64968: PPUSH
64969: LD_VAR 0 3
64973: PUSH
64974: LD_INT 1
64976: PLUS
64977: PPUSH
64978: LD_VAR 0 4
64982: PPUSH
64983: CALL_OW 1
64987: ST_TO_ADDR
64988: GO 64914
64990: POP
64991: POP
// end ;
64992: LD_VAR 0 3
64996: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64997: LD_INT 0
64999: PPUSH
65000: PPUSH
65001: PPUSH
65002: PPUSH
65003: PPUSH
65004: PPUSH
65005: PPUSH
// result := [ ] ;
65006: LD_ADDR_VAR 0 4
65010: PUSH
65011: EMPTY
65012: ST_TO_ADDR
// if x - r < 0 then
65013: LD_VAR 0 1
65017: PUSH
65018: LD_VAR 0 3
65022: MINUS
65023: PUSH
65024: LD_INT 0
65026: LESS
65027: IFFALSE 65039
// min_x := 0 else
65029: LD_ADDR_VAR 0 8
65033: PUSH
65034: LD_INT 0
65036: ST_TO_ADDR
65037: GO 65055
// min_x := x - r ;
65039: LD_ADDR_VAR 0 8
65043: PUSH
65044: LD_VAR 0 1
65048: PUSH
65049: LD_VAR 0 3
65053: MINUS
65054: ST_TO_ADDR
// if y - r < 0 then
65055: LD_VAR 0 2
65059: PUSH
65060: LD_VAR 0 3
65064: MINUS
65065: PUSH
65066: LD_INT 0
65068: LESS
65069: IFFALSE 65081
// min_y := 0 else
65071: LD_ADDR_VAR 0 7
65075: PUSH
65076: LD_INT 0
65078: ST_TO_ADDR
65079: GO 65097
// min_y := y - r ;
65081: LD_ADDR_VAR 0 7
65085: PUSH
65086: LD_VAR 0 2
65090: PUSH
65091: LD_VAR 0 3
65095: MINUS
65096: ST_TO_ADDR
// max_x := x + r ;
65097: LD_ADDR_VAR 0 9
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: LD_VAR 0 3
65111: PLUS
65112: ST_TO_ADDR
// max_y := y + r ;
65113: LD_ADDR_VAR 0 10
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_VAR 0 3
65127: PLUS
65128: ST_TO_ADDR
// for _x = min_x to max_x do
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: DOUBLE
65135: LD_VAR 0 8
65139: DEC
65140: ST_TO_ADDR
65141: LD_VAR 0 9
65145: PUSH
65146: FOR_TO
65147: IFFALSE 65248
// for _y = min_y to max_y do
65149: LD_ADDR_VAR 0 6
65153: PUSH
65154: DOUBLE
65155: LD_VAR 0 7
65159: DEC
65160: ST_TO_ADDR
65161: LD_VAR 0 10
65165: PUSH
65166: FOR_TO
65167: IFFALSE 65244
// begin if not ValidHex ( _x , _y ) then
65169: LD_VAR 0 5
65173: PPUSH
65174: LD_VAR 0 6
65178: PPUSH
65179: CALL_OW 488
65183: NOT
65184: IFFALSE 65188
// continue ;
65186: GO 65166
// if GetResourceTypeXY ( _x , _y ) then
65188: LD_VAR 0 5
65192: PPUSH
65193: LD_VAR 0 6
65197: PPUSH
65198: CALL_OW 283
65202: IFFALSE 65242
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65204: LD_ADDR_VAR 0 4
65208: PUSH
65209: LD_VAR 0 4
65213: PPUSH
65214: LD_VAR 0 4
65218: PUSH
65219: LD_INT 1
65221: PLUS
65222: PPUSH
65223: LD_VAR 0 5
65227: PUSH
65228: LD_VAR 0 6
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PPUSH
65237: CALL_OW 1
65241: ST_TO_ADDR
// end ;
65242: GO 65166
65244: POP
65245: POP
65246: GO 65146
65248: POP
65249: POP
// end ;
65250: LD_VAR 0 4
65254: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65255: LD_INT 0
65257: PPUSH
65258: PPUSH
65259: PPUSH
65260: PPUSH
65261: PPUSH
65262: PPUSH
65263: PPUSH
65264: PPUSH
// if not units then
65265: LD_VAR 0 1
65269: NOT
65270: IFFALSE 65274
// exit ;
65272: GO 65800
// result := UnitFilter ( units , [ f_ok ] ) ;
65274: LD_ADDR_VAR 0 3
65278: PUSH
65279: LD_VAR 0 1
65283: PPUSH
65284: LD_INT 50
65286: PUSH
65287: EMPTY
65288: LIST
65289: PPUSH
65290: CALL_OW 72
65294: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65295: LD_ADDR_VAR 0 8
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PPUSH
65309: CALL_OW 255
65313: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65314: LD_ADDR_VAR 0 10
65318: PUSH
65319: LD_INT 29
65321: PUSH
65322: LD_EXP 90
65326: PUSH
65327: LD_INT 49
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// if not result then
65335: LD_VAR 0 3
65339: NOT
65340: IFFALSE 65344
// exit ;
65342: GO 65800
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65344: LD_ADDR_VAR 0 5
65348: PUSH
65349: LD_INT 81
65351: PUSH
65352: LD_VAR 0 8
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PPUSH
65361: CALL_OW 69
65365: ST_TO_ADDR
// for i in result do
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_VAR 0 3
65375: PUSH
65376: FOR_IN
65377: IFFALSE 65798
// begin tag := GetTag ( i ) + 1 ;
65379: LD_ADDR_VAR 0 9
65383: PUSH
65384: LD_VAR 0 4
65388: PPUSH
65389: CALL_OW 110
65393: PUSH
65394: LD_INT 1
65396: PLUS
65397: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65398: LD_ADDR_VAR 0 7
65402: PUSH
65403: LD_VAR 0 4
65407: PPUSH
65408: CALL_OW 250
65412: PPUSH
65413: LD_VAR 0 4
65417: PPUSH
65418: CALL_OW 251
65422: PPUSH
65423: LD_INT 6
65425: PPUSH
65426: CALL 64997 0 3
65430: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65431: LD_VAR 0 4
65435: PPUSH
65436: CALL_OW 247
65440: PUSH
65441: LD_INT 2
65443: EQUAL
65444: PUSH
65445: LD_VAR 0 7
65449: AND
65450: PUSH
65451: LD_VAR 0 4
65455: PPUSH
65456: CALL_OW 264
65460: PUSH
65461: LD_VAR 0 10
65465: IN
65466: NOT
65467: AND
65468: IFFALSE 65507
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65470: LD_VAR 0 4
65474: PPUSH
65475: LD_VAR 0 7
65479: PUSH
65480: LD_INT 1
65482: ARRAY
65483: PUSH
65484: LD_INT 1
65486: ARRAY
65487: PPUSH
65488: LD_VAR 0 7
65492: PUSH
65493: LD_INT 1
65495: ARRAY
65496: PUSH
65497: LD_INT 2
65499: ARRAY
65500: PPUSH
65501: CALL_OW 116
65505: GO 65796
// if path > tag then
65507: LD_VAR 0 2
65511: PUSH
65512: LD_VAR 0 9
65516: GREATER
65517: IFFALSE 65725
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65519: LD_ADDR_VAR 0 6
65523: PUSH
65524: LD_VAR 0 5
65528: PPUSH
65529: LD_INT 91
65531: PUSH
65532: LD_VAR 0 4
65536: PUSH
65537: LD_INT 8
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PPUSH
65545: CALL_OW 72
65549: ST_TO_ADDR
// if nearEnemy then
65550: LD_VAR 0 6
65554: IFFALSE 65623
// begin if GetWeapon ( i ) = ru_time_lapser then
65556: LD_VAR 0 4
65560: PPUSH
65561: CALL_OW 264
65565: PUSH
65566: LD_INT 49
65568: EQUAL
65569: IFFALSE 65597
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65571: LD_VAR 0 4
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: LD_VAR 0 4
65585: PPUSH
65586: CALL_OW 74
65590: PPUSH
65591: CALL_OW 112
65595: GO 65621
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65597: LD_VAR 0 4
65601: PPUSH
65602: LD_VAR 0 6
65606: PPUSH
65607: LD_VAR 0 4
65611: PPUSH
65612: CALL_OW 74
65616: PPUSH
65617: CALL_OW 115
// end else
65621: GO 65723
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65623: LD_VAR 0 4
65627: PPUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_VAR 0 9
65637: ARRAY
65638: PUSH
65639: LD_INT 1
65641: ARRAY
65642: PPUSH
65643: LD_VAR 0 2
65647: PUSH
65648: LD_VAR 0 9
65652: ARRAY
65653: PUSH
65654: LD_INT 2
65656: ARRAY
65657: PPUSH
65658: CALL_OW 297
65662: PUSH
65663: LD_INT 6
65665: GREATER
65666: IFFALSE 65709
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65668: LD_VAR 0 4
65672: PPUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_VAR 0 9
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 2
65692: PUSH
65693: LD_VAR 0 9
65697: ARRAY
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: PPUSH
65703: CALL_OW 114
65707: GO 65723
// SetTag ( i , tag ) ;
65709: LD_VAR 0 4
65713: PPUSH
65714: LD_VAR 0 9
65718: PPUSH
65719: CALL_OW 109
// end else
65723: GO 65796
// if enemy then
65725: LD_VAR 0 5
65729: IFFALSE 65796
// begin if GetWeapon ( i ) = ru_time_lapser then
65731: LD_VAR 0 4
65735: PPUSH
65736: CALL_OW 264
65740: PUSH
65741: LD_INT 49
65743: EQUAL
65744: IFFALSE 65772
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65746: LD_VAR 0 4
65750: PPUSH
65751: LD_VAR 0 5
65755: PPUSH
65756: LD_VAR 0 4
65760: PPUSH
65761: CALL_OW 74
65765: PPUSH
65766: CALL_OW 112
65770: GO 65796
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65772: LD_VAR 0 4
65776: PPUSH
65777: LD_VAR 0 5
65781: PPUSH
65782: LD_VAR 0 4
65786: PPUSH
65787: CALL_OW 74
65791: PPUSH
65792: CALL_OW 115
// end ; end ;
65796: GO 65376
65798: POP
65799: POP
// end ;
65800: LD_VAR 0 3
65804: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65805: LD_INT 0
65807: PPUSH
65808: PPUSH
65809: PPUSH
// if not unit or IsInUnit ( unit ) then
65810: LD_VAR 0 1
65814: NOT
65815: PUSH
65816: LD_VAR 0 1
65820: PPUSH
65821: CALL_OW 310
65825: OR
65826: IFFALSE 65830
// exit ;
65828: GO 65921
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65830: LD_ADDR_VAR 0 4
65834: PUSH
65835: LD_VAR 0 1
65839: PPUSH
65840: CALL_OW 250
65844: PPUSH
65845: LD_VAR 0 2
65849: PPUSH
65850: LD_INT 1
65852: PPUSH
65853: CALL_OW 272
65857: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65858: LD_ADDR_VAR 0 5
65862: PUSH
65863: LD_VAR 0 1
65867: PPUSH
65868: CALL_OW 251
65872: PPUSH
65873: LD_VAR 0 2
65877: PPUSH
65878: LD_INT 1
65880: PPUSH
65881: CALL_OW 273
65885: ST_TO_ADDR
// if ValidHex ( x , y ) then
65886: LD_VAR 0 4
65890: PPUSH
65891: LD_VAR 0 5
65895: PPUSH
65896: CALL_OW 488
65900: IFFALSE 65921
// ComTurnXY ( unit , x , y ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 4
65911: PPUSH
65912: LD_VAR 0 5
65916: PPUSH
65917: CALL_OW 118
// end ;
65921: LD_VAR 0 3
65925: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65926: LD_INT 0
65928: PPUSH
65929: PPUSH
// result := false ;
65930: LD_ADDR_VAR 0 3
65934: PUSH
65935: LD_INT 0
65937: ST_TO_ADDR
// if not units then
65938: LD_VAR 0 2
65942: NOT
65943: IFFALSE 65947
// exit ;
65945: GO 65992
// for i in units do
65947: LD_ADDR_VAR 0 4
65951: PUSH
65952: LD_VAR 0 2
65956: PUSH
65957: FOR_IN
65958: IFFALSE 65990
// if See ( side , i ) then
65960: LD_VAR 0 1
65964: PPUSH
65965: LD_VAR 0 4
65969: PPUSH
65970: CALL_OW 292
65974: IFFALSE 65988
// begin result := true ;
65976: LD_ADDR_VAR 0 3
65980: PUSH
65981: LD_INT 1
65983: ST_TO_ADDR
// exit ;
65984: POP
65985: POP
65986: GO 65992
// end ;
65988: GO 65957
65990: POP
65991: POP
// end ;
65992: LD_VAR 0 3
65996: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
66001: PPUSH
66002: PPUSH
// if not unit or not points then
66003: LD_VAR 0 1
66007: NOT
66008: PUSH
66009: LD_VAR 0 2
66013: NOT
66014: OR
66015: IFFALSE 66019
// exit ;
66017: GO 66109
// dist := 99999 ;
66019: LD_ADDR_VAR 0 5
66023: PUSH
66024: LD_INT 99999
66026: ST_TO_ADDR
// for i in points do
66027: LD_ADDR_VAR 0 4
66031: PUSH
66032: LD_VAR 0 2
66036: PUSH
66037: FOR_IN
66038: IFFALSE 66107
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66040: LD_ADDR_VAR 0 6
66044: PUSH
66045: LD_VAR 0 1
66049: PPUSH
66050: LD_VAR 0 4
66054: PUSH
66055: LD_INT 1
66057: ARRAY
66058: PPUSH
66059: LD_VAR 0 4
66063: PUSH
66064: LD_INT 2
66066: ARRAY
66067: PPUSH
66068: CALL_OW 297
66072: ST_TO_ADDR
// if tmpDist < dist then
66073: LD_VAR 0 6
66077: PUSH
66078: LD_VAR 0 5
66082: LESS
66083: IFFALSE 66105
// begin result := i ;
66085: LD_ADDR_VAR 0 3
66089: PUSH
66090: LD_VAR 0 4
66094: ST_TO_ADDR
// dist := tmpDist ;
66095: LD_ADDR_VAR 0 5
66099: PUSH
66100: LD_VAR 0 6
66104: ST_TO_ADDR
// end ; end ;
66105: GO 66037
66107: POP
66108: POP
// end ;
66109: LD_VAR 0 3
66113: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66114: LD_INT 0
66116: PPUSH
// uc_side := side ;
66117: LD_ADDR_OWVAR 20
66121: PUSH
66122: LD_VAR 0 1
66126: ST_TO_ADDR
// uc_nation := 3 ;
66127: LD_ADDR_OWVAR 21
66131: PUSH
66132: LD_INT 3
66134: ST_TO_ADDR
// vc_chassis := 25 ;
66135: LD_ADDR_OWVAR 37
66139: PUSH
66140: LD_INT 25
66142: ST_TO_ADDR
// vc_engine := engine_siberite ;
66143: LD_ADDR_OWVAR 39
66147: PUSH
66148: LD_INT 3
66150: ST_TO_ADDR
// vc_control := control_computer ;
66151: LD_ADDR_OWVAR 38
66155: PUSH
66156: LD_INT 3
66158: ST_TO_ADDR
// vc_weapon := 59 ;
66159: LD_ADDR_OWVAR 40
66163: PUSH
66164: LD_INT 59
66166: ST_TO_ADDR
// result := CreateVehicle ;
66167: LD_ADDR_VAR 0 5
66171: PUSH
66172: CALL_OW 45
66176: ST_TO_ADDR
// SetDir ( result , d ) ;
66177: LD_VAR 0 5
66181: PPUSH
66182: LD_VAR 0 4
66186: PPUSH
66187: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66191: LD_VAR 0 5
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_VAR 0 3
66205: PPUSH
66206: LD_INT 0
66208: PPUSH
66209: CALL_OW 48
// end ;
66213: LD_VAR 0 5
66217: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
66222: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66223: LD_ADDR_VAR 0 2
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66246: LD_VAR 0 1
66250: NOT
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: CALL_OW 264
66261: PUSH
66262: LD_INT 12
66264: PUSH
66265: LD_INT 51
66267: PUSH
66268: LD_INT 32
66270: PUSH
66271: LD_EXP 87
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: IN
66282: NOT
66283: OR
66284: IFFALSE 66288
// exit ;
66286: GO 66386
// for i := 1 to 3 do
66288: LD_ADDR_VAR 0 3
66292: PUSH
66293: DOUBLE
66294: LD_INT 1
66296: DEC
66297: ST_TO_ADDR
66298: LD_INT 3
66300: PUSH
66301: FOR_TO
66302: IFFALSE 66384
// begin tmp := GetCargo ( cargo , i ) ;
66304: LD_ADDR_VAR 0 4
66308: PUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 3
66318: PPUSH
66319: CALL_OW 289
66323: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66324: LD_ADDR_VAR 0 2
66328: PUSH
66329: LD_VAR 0 2
66333: PPUSH
66334: LD_VAR 0 3
66338: PPUSH
66339: LD_VAR 0 4
66343: PPUSH
66344: CALL_OW 1
66348: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66349: LD_ADDR_VAR 0 2
66353: PUSH
66354: LD_VAR 0 2
66358: PPUSH
66359: LD_INT 4
66361: PPUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 4
66369: ARRAY
66370: PUSH
66371: LD_VAR 0 4
66375: PLUS
66376: PPUSH
66377: CALL_OW 1
66381: ST_TO_ADDR
// end ;
66382: GO 66301
66384: POP
66385: POP
// end ;
66386: LD_VAR 0 2
66390: RET
// export function Length ( array ) ; begin
66391: LD_INT 0
66393: PPUSH
// result := array + 0 ;
66394: LD_ADDR_VAR 0 2
66398: PUSH
66399: LD_VAR 0 1
66403: PUSH
66404: LD_INT 0
66406: PLUS
66407: ST_TO_ADDR
// end ;
66408: LD_VAR 0 2
66412: RET
// export function PrepareArray ( array ) ; begin
66413: LD_INT 0
66415: PPUSH
// result := array diff 0 ;
66416: LD_ADDR_VAR 0 2
66420: PUSH
66421: LD_VAR 0 1
66425: PUSH
66426: LD_INT 0
66428: DIFF
66429: ST_TO_ADDR
// if not result [ 1 ] then
66430: LD_VAR 0 2
66434: PUSH
66435: LD_INT 1
66437: ARRAY
66438: NOT
66439: IFFALSE 66459
// result := Delete ( result , 1 ) ;
66441: LD_ADDR_VAR 0 2
66445: PUSH
66446: LD_VAR 0 2
66450: PPUSH
66451: LD_INT 1
66453: PPUSH
66454: CALL_OW 3
66458: ST_TO_ADDR
// end ; end_of_file
66459: LD_VAR 0 2
66463: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_VAR 0 2
66473: PPUSH
66474: LD_VAR 0 3
66478: PPUSH
66479: LD_VAR 0 4
66483: PPUSH
66484: LD_VAR 0 5
66488: PPUSH
66489: LD_VAR 0 6
66493: PPUSH
66494: CALL 5014 0 6
// end ;
66498: PPOPN 6
66500: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66501: LD_INT 0
66503: PPUSH
// begin if not units then
66504: LD_VAR 0 1
66508: NOT
66509: IFFALSE 66513
// exit ;
66511: GO 66513
// end ;
66513: PPOPN 7
66515: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66516: CALL 4985 0 0
// end ;
66520: PPOPN 1
66522: END
