// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export globalGameSaveCounter ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// every 0 0$1 do
4985: GO 4987
4987: DISABLE
// begin globalGameSaveCounter := 0 ;
4988: LD_ADDR_EXP 15
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4996: LD_STRING setGameSaveCounter(0)
4998: PPUSH
4999: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5003: LD_STRING initStreamRollete();
5005: PPUSH
5006: CALL_OW 559
// InitStreamMode ;
5010: CALL 6336 0 0
// DefineStreamItems ( false ) ;
5014: LD_INT 0
5016: PPUSH
5017: CALL 6800 0 1
// end ;
5021: END
// export function SOS_MapStart ( ) ; begin
5022: LD_INT 0
5024: PPUSH
// if streamModeActive then
5025: LD_EXP 16
5029: IFFALSE 5038
// DefineStreamItems ( true ) ;
5031: LD_INT 1
5033: PPUSH
5034: CALL 6800 0 1
// UpdateLuaVariables ( ) ;
5038: CALL 5055 0 0
// UpdateFactoryWaypoints ( ) ;
5042: CALL 19669 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5046: CALL 19926 0 0
// end ;
5050: LD_VAR 0 1
5054: RET
// function UpdateLuaVariables ( ) ; begin
5055: LD_INT 0
5057: PPUSH
// if globalGameSaveCounter then
5058: LD_EXP 15
5062: IFFALSE 5096
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_EXP 15
5073: PPUSH
5074: CALL 64719 0 1
5078: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5079: LD_STRING setGameSaveCounter(
5081: PUSH
5082: LD_EXP 15
5086: STR
5087: PUSH
5088: LD_STRING )
5090: STR
5091: PPUSH
5092: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5096: LD_STRING setGameDifficulty(
5098: PUSH
5099: LD_OWVAR 67
5103: STR
5104: PUSH
5105: LD_STRING )
5107: STR
5108: PPUSH
5109: CALL_OW 559
// end ;
5113: LD_VAR 0 1
5117: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5118: LD_INT 0
5120: PPUSH
// if p2 = stream_mode then
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 100
5128: EQUAL
5129: IFFALSE 6132
// begin if not StreamModeActive then
5131: LD_EXP 16
5135: NOT
5136: IFFALSE 5146
// StreamModeActive := true ;
5138: LD_ADDR_EXP 16
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 0 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: IFFALSE 5160
// InitStreamMode ;
5156: CALL 6336 0 0
// if p3 = 1 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 1
5167: EQUAL
5168: IFFALSE 5178
// sRocket := true ;
5170: LD_ADDR_EXP 21
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 2 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 2
5185: EQUAL
5186: IFFALSE 5196
// sSpeed := true ;
5188: LD_ADDR_EXP 20
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 3 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 3
5203: EQUAL
5204: IFFALSE 5214
// sEngine := true ;
5206: LD_ADDR_EXP 22
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 4 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 4
5221: EQUAL
5222: IFFALSE 5232
// sSpec := true ;
5224: LD_ADDR_EXP 19
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 5 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 5
5239: EQUAL
5240: IFFALSE 5250
// sLevel := true ;
5242: LD_ADDR_EXP 23
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 6 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: IFFALSE 5268
// sArmoury := true ;
5260: LD_ADDR_EXP 24
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 7 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 7
5275: EQUAL
5276: IFFALSE 5286
// sRadar := true ;
5278: LD_ADDR_EXP 25
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 8 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 8
5293: EQUAL
5294: IFFALSE 5304
// sBunker := true ;
5296: LD_ADDR_EXP 26
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 9 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 9
5311: EQUAL
5312: IFFALSE 5322
// sHack := true ;
5314: LD_ADDR_EXP 27
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 10 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 10
5329: EQUAL
5330: IFFALSE 5340
// sFire := true ;
5332: LD_ADDR_EXP 28
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if p3 = 11 then
5340: LD_VAR 0 3
5344: PUSH
5345: LD_INT 11
5347: EQUAL
5348: IFFALSE 5358
// sRefresh := true ;
5350: LD_ADDR_EXP 29
5354: PUSH
5355: LD_INT 1
5357: ST_TO_ADDR
// if p3 = 12 then
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 12
5365: EQUAL
5366: IFFALSE 5376
// sExp := true ;
5368: LD_ADDR_EXP 30
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if p3 = 13 then
5376: LD_VAR 0 3
5380: PUSH
5381: LD_INT 13
5383: EQUAL
5384: IFFALSE 5394
// sDepot := true ;
5386: LD_ADDR_EXP 31
5390: PUSH
5391: LD_INT 1
5393: ST_TO_ADDR
// if p3 = 14 then
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 14
5401: EQUAL
5402: IFFALSE 5412
// sFlag := true ;
5404: LD_ADDR_EXP 32
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// if p3 = 15 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_INT 15
5419: EQUAL
5420: IFFALSE 5430
// sKamikadze := true ;
5422: LD_ADDR_EXP 40
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// if p3 = 16 then
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 16
5437: EQUAL
5438: IFFALSE 5448
// sTroll := true ;
5440: LD_ADDR_EXP 41
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// if p3 = 17 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 17
5455: EQUAL
5456: IFFALSE 5466
// sSlow := true ;
5458: LD_ADDR_EXP 42
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// if p3 = 18 then
5466: LD_VAR 0 3
5470: PUSH
5471: LD_INT 18
5473: EQUAL
5474: IFFALSE 5484
// sLack := true ;
5476: LD_ADDR_EXP 43
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// if p3 = 19 then
5484: LD_VAR 0 3
5488: PUSH
5489: LD_INT 19
5491: EQUAL
5492: IFFALSE 5502
// sTank := true ;
5494: LD_ADDR_EXP 45
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// if p3 = 20 then
5502: LD_VAR 0 3
5506: PUSH
5507: LD_INT 20
5509: EQUAL
5510: IFFALSE 5520
// sRemote := true ;
5512: LD_ADDR_EXP 46
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// if p3 = 21 then
5520: LD_VAR 0 3
5524: PUSH
5525: LD_INT 21
5527: EQUAL
5528: IFFALSE 5538
// sPowell := true ;
5530: LD_ADDR_EXP 47
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// if p3 = 22 then
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 22
5545: EQUAL
5546: IFFALSE 5556
// sTeleport := true ;
5548: LD_ADDR_EXP 50
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if p3 = 23 then
5556: LD_VAR 0 3
5560: PUSH
5561: LD_INT 23
5563: EQUAL
5564: IFFALSE 5574
// sOilTower := true ;
5566: LD_ADDR_EXP 52
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// if p3 = 24 then
5574: LD_VAR 0 3
5578: PUSH
5579: LD_INT 24
5581: EQUAL
5582: IFFALSE 5592
// sShovel := true ;
5584: LD_ADDR_EXP 53
5588: PUSH
5589: LD_INT 1
5591: ST_TO_ADDR
// if p3 = 25 then
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 25
5599: EQUAL
5600: IFFALSE 5610
// sSheik := true ;
5602: LD_ADDR_EXP 54
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// if p3 = 26 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_INT 26
5617: EQUAL
5618: IFFALSE 5628
// sEarthquake := true ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// if p3 = 27 then
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 27
5635: EQUAL
5636: IFFALSE 5646
// sAI := true ;
5638: LD_ADDR_EXP 57
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// if p3 = 28 then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 28
5653: EQUAL
5654: IFFALSE 5664
// sCargo := true ;
5656: LD_ADDR_EXP 60
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// if p3 = 29 then
5664: LD_VAR 0 3
5668: PUSH
5669: LD_INT 29
5671: EQUAL
5672: IFFALSE 5682
// sDLaser := true ;
5674: LD_ADDR_EXP 61
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// if p3 = 30 then
5682: LD_VAR 0 3
5686: PUSH
5687: LD_INT 30
5689: EQUAL
5690: IFFALSE 5700
// sExchange := true ;
5692: LD_ADDR_EXP 62
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// if p3 = 31 then
5700: LD_VAR 0 3
5704: PUSH
5705: LD_INT 31
5707: EQUAL
5708: IFFALSE 5718
// sFac := true ;
5710: LD_ADDR_EXP 63
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// if p3 = 32 then
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 32
5725: EQUAL
5726: IFFALSE 5736
// sPower := true ;
5728: LD_ADDR_EXP 64
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// if p3 = 33 then
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 33
5743: EQUAL
5744: IFFALSE 5754
// sRandom := true ;
5746: LD_ADDR_EXP 65
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// if p3 = 34 then
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 34
5761: EQUAL
5762: IFFALSE 5772
// sShield := true ;
5764: LD_ADDR_EXP 66
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// if p3 = 35 then
5772: LD_VAR 0 3
5776: PUSH
5777: LD_INT 35
5779: EQUAL
5780: IFFALSE 5790
// sTime := true ;
5782: LD_ADDR_EXP 67
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// if p3 = 36 then
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 36
5797: EQUAL
5798: IFFALSE 5808
// sTools := true ;
5800: LD_ADDR_EXP 68
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// if p3 = 101 then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 101
5815: EQUAL
5816: IFFALSE 5826
// sSold := true ;
5818: LD_ADDR_EXP 33
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// if p3 = 102 then
5826: LD_VAR 0 3
5830: PUSH
5831: LD_INT 102
5833: EQUAL
5834: IFFALSE 5844
// sDiff := true ;
5836: LD_ADDR_EXP 34
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// if p3 = 103 then
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 103
5851: EQUAL
5852: IFFALSE 5862
// sFog := true ;
5854: LD_ADDR_EXP 37
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// if p3 = 104 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 104
5869: EQUAL
5870: IFFALSE 5880
// sReset := true ;
5872: LD_ADDR_EXP 38
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// if p3 = 105 then
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 105
5887: EQUAL
5888: IFFALSE 5898
// sSun := true ;
5890: LD_ADDR_EXP 39
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// if p3 = 106 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 106
5905: EQUAL
5906: IFFALSE 5916
// sTiger := true ;
5908: LD_ADDR_EXP 35
5912: PUSH
5913: LD_INT 1
5915: ST_TO_ADDR
// if p3 = 107 then
5916: LD_VAR 0 3
5920: PUSH
5921: LD_INT 107
5923: EQUAL
5924: IFFALSE 5934
// sBomb := true ;
5926: LD_ADDR_EXP 36
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// if p3 = 108 then
5934: LD_VAR 0 3
5938: PUSH
5939: LD_INT 108
5941: EQUAL
5942: IFFALSE 5952
// sWound := true ;
5944: LD_ADDR_EXP 44
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if p3 = 109 then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 109
5959: EQUAL
5960: IFFALSE 5970
// sBetray := true ;
5962: LD_ADDR_EXP 48
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// if p3 = 110 then
5970: LD_VAR 0 3
5974: PUSH
5975: LD_INT 110
5977: EQUAL
5978: IFFALSE 5988
// sContamin := true ;
5980: LD_ADDR_EXP 49
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// if p3 = 111 then
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 111
5995: EQUAL
5996: IFFALSE 6006
// sOil := true ;
5998: LD_ADDR_EXP 51
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if p3 = 112 then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 112
6013: EQUAL
6014: IFFALSE 6024
// sStu := true ;
6016: LD_ADDR_EXP 55
6020: PUSH
6021: LD_INT 1
6023: ST_TO_ADDR
// if p3 = 113 then
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 113
6031: EQUAL
6032: IFFALSE 6042
// sBazooka := true ;
6034: LD_ADDR_EXP 58
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if p3 = 114 then
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 114
6049: EQUAL
6050: IFFALSE 6060
// sMortar := true ;
6052: LD_ADDR_EXP 59
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// if p3 = 115 then
6060: LD_VAR 0 3
6064: PUSH
6065: LD_INT 115
6067: EQUAL
6068: IFFALSE 6078
// sRanger := true ;
6070: LD_ADDR_EXP 69
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// if p3 = 116 then
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 116
6085: EQUAL
6086: IFFALSE 6096
// sComputer := true ;
6088: LD_ADDR_EXP 70
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// if p3 = 117 then
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 117
6103: EQUAL
6104: IFFALSE 6114
// s30 := true ;
6106: LD_ADDR_EXP 71
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// if p3 = 118 then
6114: LD_VAR 0 3
6118: PUSH
6119: LD_INT 118
6121: EQUAL
6122: IFFALSE 6132
// s60 := true ;
6124: LD_ADDR_EXP 72
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// end ; if p2 = hack_mode then
6132: LD_VAR 0 2
6136: PUSH
6137: LD_INT 101
6139: EQUAL
6140: IFFALSE 6268
// begin case p3 of 1 :
6142: LD_VAR 0 3
6146: PUSH
6147: LD_INT 1
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6162
6155: POP
// hHackUnlimitedResources ; 2 :
6156: CALL 18415 0 0
6160: GO 6268
6162: LD_INT 2
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6177
6170: POP
// hHackSetLevel10 ; 3 :
6171: CALL 18548 0 0
6175: GO 6268
6177: LD_INT 3
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6192
6185: POP
// hHackSetLevel10YourUnits ; 4 :
6186: CALL 18633 0 0
6190: GO 6268
6192: LD_INT 4
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6207
6200: POP
// hHackInvincible ; 5 :
6201: CALL 19081 0 0
6205: GO 6268
6207: LD_INT 5
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6222
6215: POP
// hHackInvisible ; 6 :
6216: CALL 19192 0 0
6220: GO 6268
6222: LD_INT 6
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6230
6228: GO 6237
6230: POP
// hHackChangeYourSide ; 7 :
6231: CALL 19249 0 0
6235: GO 6268
6237: LD_INT 7
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6252
6245: POP
// hHackChangeUnitSide ; 8 :
6246: CALL 19291 0 0
6250: GO 6268
6252: LD_INT 8
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6267
6260: POP
// hHackFog ; end ;
6261: CALL 19392 0 0
6265: GO 6268
6267: POP
// end ; if p2 = game_save_mode then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 102
6275: EQUAL
6276: IFFALSE 6331
// begin if p3 = 1 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6298
// globalGameSaveCounter := p4 ;
6288: LD_ADDR_EXP 15
6292: PUSH
6293: LD_VAR 0 4
6297: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 2
6305: EQUAL
6306: PUSH
6307: LD_EXP 15
6311: AND
6312: IFFALSE 6331
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6314: LD_STRING setGameSaveCounter(
6316: PUSH
6317: LD_EXP 15
6321: STR
6322: PUSH
6323: LD_STRING )
6325: STR
6326: PPUSH
6327: CALL_OW 559
// end ; end ;
6331: LD_VAR 0 7
6335: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6336: LD_INT 0
6338: PPUSH
// streamModeActive := false ;
6339: LD_ADDR_EXP 16
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// normalCounter := 36 ;
6347: LD_ADDR_EXP 17
6351: PUSH
6352: LD_INT 36
6354: ST_TO_ADDR
// hardcoreCounter := 18 ;
6355: LD_ADDR_EXP 18
6359: PUSH
6360: LD_INT 18
6362: ST_TO_ADDR
// sRocket := false ;
6363: LD_ADDR_EXP 21
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sSpeed := false ;
6371: LD_ADDR_EXP 20
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sEngine := false ;
6379: LD_ADDR_EXP 22
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sSpec := false ;
6387: LD_ADDR_EXP 19
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sLevel := false ;
6395: LD_ADDR_EXP 23
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sArmoury := false ;
6403: LD_ADDR_EXP 24
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sRadar := false ;
6411: LD_ADDR_EXP 25
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sBunker := false ;
6419: LD_ADDR_EXP 26
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sHack := false ;
6427: LD_ADDR_EXP 27
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sFire := false ;
6435: LD_ADDR_EXP 28
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sRefresh := false ;
6443: LD_ADDR_EXP 29
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// sExp := false ;
6451: LD_ADDR_EXP 30
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// sDepot := false ;
6459: LD_ADDR_EXP 31
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// sFlag := false ;
6467: LD_ADDR_EXP 32
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// sKamikadze := false ;
6475: LD_ADDR_EXP 40
6479: PUSH
6480: LD_INT 0
6482: ST_TO_ADDR
// sTroll := false ;
6483: LD_ADDR_EXP 41
6487: PUSH
6488: LD_INT 0
6490: ST_TO_ADDR
// sSlow := false ;
6491: LD_ADDR_EXP 42
6495: PUSH
6496: LD_INT 0
6498: ST_TO_ADDR
// sLack := false ;
6499: LD_ADDR_EXP 43
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// sTank := false ;
6507: LD_ADDR_EXP 45
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
// sRemote := false ;
6515: LD_ADDR_EXP 46
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// sPowell := false ;
6523: LD_ADDR_EXP 47
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// sTeleport := false ;
6531: LD_ADDR_EXP 50
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// sOilTower := false ;
6539: LD_ADDR_EXP 52
6543: PUSH
6544: LD_INT 0
6546: ST_TO_ADDR
// sShovel := false ;
6547: LD_ADDR_EXP 53
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
// sSheik := false ;
6555: LD_ADDR_EXP 54
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// sEarthquake := false ;
6563: LD_ADDR_EXP 56
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// sAI := false ;
6571: LD_ADDR_EXP 57
6575: PUSH
6576: LD_INT 0
6578: ST_TO_ADDR
// sCargo := false ;
6579: LD_ADDR_EXP 60
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// sDLaser := false ;
6587: LD_ADDR_EXP 61
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// sExchange := false ;
6595: LD_ADDR_EXP 62
6599: PUSH
6600: LD_INT 0
6602: ST_TO_ADDR
// sFac := false ;
6603: LD_ADDR_EXP 63
6607: PUSH
6608: LD_INT 0
6610: ST_TO_ADDR
// sPower := false ;
6611: LD_ADDR_EXP 64
6615: PUSH
6616: LD_INT 0
6618: ST_TO_ADDR
// sRandom := false ;
6619: LD_ADDR_EXP 65
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// sShield := false ;
6627: LD_ADDR_EXP 66
6631: PUSH
6632: LD_INT 0
6634: ST_TO_ADDR
// sTime := false ;
6635: LD_ADDR_EXP 67
6639: PUSH
6640: LD_INT 0
6642: ST_TO_ADDR
// sTools := false ;
6643: LD_ADDR_EXP 68
6647: PUSH
6648: LD_INT 0
6650: ST_TO_ADDR
// sSold := false ;
6651: LD_ADDR_EXP 33
6655: PUSH
6656: LD_INT 0
6658: ST_TO_ADDR
// sDiff := false ;
6659: LD_ADDR_EXP 34
6663: PUSH
6664: LD_INT 0
6666: ST_TO_ADDR
// sFog := false ;
6667: LD_ADDR_EXP 37
6671: PUSH
6672: LD_INT 0
6674: ST_TO_ADDR
// sReset := false ;
6675: LD_ADDR_EXP 38
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// sSun := false ;
6683: LD_ADDR_EXP 39
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// sTiger := false ;
6691: LD_ADDR_EXP 35
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// sBomb := false ;
6699: LD_ADDR_EXP 36
6703: PUSH
6704: LD_INT 0
6706: ST_TO_ADDR
// sWound := false ;
6707: LD_ADDR_EXP 44
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// sBetray := false ;
6715: LD_ADDR_EXP 48
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// sContamin := false ;
6723: LD_ADDR_EXP 49
6727: PUSH
6728: LD_INT 0
6730: ST_TO_ADDR
// sOil := false ;
6731: LD_ADDR_EXP 51
6735: PUSH
6736: LD_INT 0
6738: ST_TO_ADDR
// sStu := false ;
6739: LD_ADDR_EXP 55
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// sBazooka := false ;
6747: LD_ADDR_EXP 58
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// sMortar := false ;
6755: LD_ADDR_EXP 59
6759: PUSH
6760: LD_INT 0
6762: ST_TO_ADDR
// sRanger := false ;
6763: LD_ADDR_EXP 69
6767: PUSH
6768: LD_INT 0
6770: ST_TO_ADDR
// sComputer := false ;
6771: LD_ADDR_EXP 70
6775: PUSH
6776: LD_INT 0
6778: ST_TO_ADDR
// s30 := false ;
6779: LD_ADDR_EXP 71
6783: PUSH
6784: LD_INT 0
6786: ST_TO_ADDR
// s60 := false ;
6787: LD_ADDR_EXP 72
6791: PUSH
6792: LD_INT 0
6794: ST_TO_ADDR
// end ;
6795: LD_VAR 0 1
6799: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
// result := [ ] ;
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: EMPTY
6815: ST_TO_ADDR
// if campaign_id = 1 then
6816: LD_OWVAR 69
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: IFFALSE 9990
// begin case mission_number of 1 :
6826: LD_OWVAR 70
6830: PUSH
6831: LD_INT 1
6833: DOUBLE
6834: EQUAL
6835: IFTRUE 6839
6837: GO 6915
6839: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 4
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 15
6859: PUSH
6860: LD_INT 16
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 26
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 101
6885: PUSH
6886: LD_INT 102
6888: PUSH
6889: LD_INT 106
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 9988
6915: LD_INT 2
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 7007
6923: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: LD_INT 2
6931: PUSH
6932: LD_INT 4
6934: PUSH
6935: LD_INT 11
6937: PUSH
6938: LD_INT 12
6940: PUSH
6941: LD_INT 15
6943: PUSH
6944: LD_INT 16
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 26
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 101
6969: PUSH
6970: LD_INT 102
6972: PUSH
6973: LD_INT 105
6975: PUSH
6976: LD_INT 106
6978: PUSH
6979: LD_INT 108
6981: PUSH
6982: LD_INT 116
6984: PUSH
6985: LD_INT 117
6987: PUSH
6988: LD_INT 118
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 9988
7007: LD_INT 3
7009: DOUBLE
7010: EQUAL
7011: IFTRUE 7015
7013: GO 7103
7015: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: LD_INT 5
7029: PUSH
7030: LD_INT 11
7032: PUSH
7033: LD_INT 12
7035: PUSH
7036: LD_INT 15
7038: PUSH
7039: LD_INT 16
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_INT 26
7047: PUSH
7048: LD_INT 36
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 101
7065: PUSH
7066: LD_INT 102
7068: PUSH
7069: LD_INT 105
7071: PUSH
7072: LD_INT 106
7074: PUSH
7075: LD_INT 108
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 9988
7103: LD_INT 4
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7207
7111: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 4
7122: PUSH
7123: LD_INT 5
7125: PUSH
7126: LD_INT 8
7128: PUSH
7129: LD_INT 11
7131: PUSH
7132: LD_INT 12
7134: PUSH
7135: LD_INT 15
7137: PUSH
7138: LD_INT 16
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_INT 23
7146: PUSH
7147: LD_INT 26
7149: PUSH
7150: LD_INT 36
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 101
7169: PUSH
7170: LD_INT 102
7172: PUSH
7173: LD_INT 105
7175: PUSH
7176: LD_INT 106
7178: PUSH
7179: LD_INT 108
7181: PUSH
7182: LD_INT 116
7184: PUSH
7185: LD_INT 117
7187: PUSH
7188: LD_INT 118
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: ST_TO_ADDR
7205: GO 9988
7207: LD_INT 5
7209: DOUBLE
7210: EQUAL
7211: IFTRUE 7215
7213: GO 7327
7215: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7216: LD_ADDR_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 5
7229: PUSH
7230: LD_INT 6
7232: PUSH
7233: LD_INT 8
7235: PUSH
7236: LD_INT 11
7238: PUSH
7239: LD_INT 12
7241: PUSH
7242: LD_INT 15
7244: PUSH
7245: LD_INT 16
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 36
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 101
7281: PUSH
7282: LD_INT 102
7284: PUSH
7285: LD_INT 105
7287: PUSH
7288: LD_INT 106
7290: PUSH
7291: LD_INT 108
7293: PUSH
7294: LD_INT 109
7296: PUSH
7297: LD_INT 112
7299: PUSH
7300: LD_INT 116
7302: PUSH
7303: LD_INT 117
7305: PUSH
7306: LD_INT 118
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9988
7327: LD_INT 6
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7467
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 8
7355: PUSH
7356: LD_INT 11
7358: PUSH
7359: LD_INT 12
7361: PUSH
7362: LD_INT 15
7364: PUSH
7365: LD_INT 16
7367: PUSH
7368: LD_INT 20
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 25
7382: PUSH
7383: LD_INT 26
7385: PUSH
7386: LD_INT 30
7388: PUSH
7389: LD_INT 31
7391: PUSH
7392: LD_INT 32
7394: PUSH
7395: LD_INT 36
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 101
7421: PUSH
7422: LD_INT 102
7424: PUSH
7425: LD_INT 105
7427: PUSH
7428: LD_INT 106
7430: PUSH
7431: LD_INT 108
7433: PUSH
7434: LD_INT 109
7436: PUSH
7437: LD_INT 112
7439: PUSH
7440: LD_INT 116
7442: PUSH
7443: LD_INT 117
7445: PUSH
7446: LD_INT 118
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: ST_TO_ADDR
7465: GO 9988
7467: LD_INT 7
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7587
7475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 15
7501: PUSH
7502: LD_INT 16
7504: PUSH
7505: LD_INT 20
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 23
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 26
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 101
7541: PUSH
7542: LD_INT 102
7544: PUSH
7545: LD_INT 103
7547: PUSH
7548: LD_INT 105
7550: PUSH
7551: LD_INT 106
7553: PUSH
7554: LD_INT 108
7556: PUSH
7557: LD_INT 112
7559: PUSH
7560: LD_INT 116
7562: PUSH
7563: LD_INT 117
7565: PUSH
7566: LD_INT 118
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 9988
7587: LD_INT 8
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7735
7595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: LD_INT 6
7612: PUSH
7613: LD_INT 7
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: LD_INT 11
7621: PUSH
7622: LD_INT 12
7624: PUSH
7625: LD_INT 15
7627: PUSH
7628: LD_INT 16
7630: PUSH
7631: LD_INT 20
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_INT 23
7642: PUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 26
7648: PUSH
7649: LD_INT 30
7651: PUSH
7652: LD_INT 31
7654: PUSH
7655: LD_INT 32
7657: PUSH
7658: LD_INT 36
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 101
7685: PUSH
7686: LD_INT 102
7688: PUSH
7689: LD_INT 103
7691: PUSH
7692: LD_INT 105
7694: PUSH
7695: LD_INT 106
7697: PUSH
7698: LD_INT 108
7700: PUSH
7701: LD_INT 109
7703: PUSH
7704: LD_INT 112
7706: PUSH
7707: LD_INT 116
7709: PUSH
7710: LD_INT 117
7712: PUSH
7713: LD_INT 118
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 9988
7735: LD_INT 9
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7891
7743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7744: LD_ADDR_VAR 0 2
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 4
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: LD_INT 6
7760: PUSH
7761: LD_INT 7
7763: PUSH
7764: LD_INT 8
7766: PUSH
7767: LD_INT 11
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 15
7775: PUSH
7776: LD_INT 16
7778: PUSH
7779: LD_INT 20
7781: PUSH
7782: LD_INT 21
7784: PUSH
7785: LD_INT 22
7787: PUSH
7788: LD_INT 23
7790: PUSH
7791: LD_INT 25
7793: PUSH
7794: LD_INT 26
7796: PUSH
7797: LD_INT 28
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 31
7805: PUSH
7806: LD_INT 32
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 105
7846: PUSH
7847: LD_INT 106
7849: PUSH
7850: LD_INT 108
7852: PUSH
7853: LD_INT 109
7855: PUSH
7856: LD_INT 112
7858: PUSH
7859: LD_INT 114
7861: PUSH
7862: LD_INT 116
7864: PUSH
7865: LD_INT 117
7867: PUSH
7868: LD_INT 118
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9988
7891: LD_INT 10
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8095
7899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 4
7910: PUSH
7911: LD_INT 5
7913: PUSH
7914: LD_INT 6
7916: PUSH
7917: LD_INT 7
7919: PUSH
7920: LD_INT 8
7922: PUSH
7923: LD_INT 9
7925: PUSH
7926: LD_INT 10
7928: PUSH
7929: LD_INT 11
7931: PUSH
7932: LD_INT 12
7934: PUSH
7935: LD_INT 13
7937: PUSH
7938: LD_INT 14
7940: PUSH
7941: LD_INT 15
7943: PUSH
7944: LD_INT 16
7946: PUSH
7947: LD_INT 17
7949: PUSH
7950: LD_INT 18
7952: PUSH
7953: LD_INT 19
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 24
7970: PUSH
7971: LD_INT 25
7973: PUSH
7974: LD_INT 26
7976: PUSH
7977: LD_INT 28
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 31
7985: PUSH
7986: LD_INT 32
7988: PUSH
7989: LD_INT 36
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 101
8025: PUSH
8026: LD_INT 102
8028: PUSH
8029: LD_INT 103
8031: PUSH
8032: LD_INT 104
8034: PUSH
8035: LD_INT 105
8037: PUSH
8038: LD_INT 106
8040: PUSH
8041: LD_INT 107
8043: PUSH
8044: LD_INT 108
8046: PUSH
8047: LD_INT 109
8049: PUSH
8050: LD_INT 110
8052: PUSH
8053: LD_INT 111
8055: PUSH
8056: LD_INT 112
8058: PUSH
8059: LD_INT 114
8061: PUSH
8062: LD_INT 116
8064: PUSH
8065: LD_INT 117
8067: PUSH
8068: LD_INT 118
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
8093: GO 9988
8095: LD_INT 11
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8307
8103: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: LD_INT 5
8120: PUSH
8121: LD_INT 6
8123: PUSH
8124: LD_INT 7
8126: PUSH
8127: LD_INT 8
8129: PUSH
8130: LD_INT 9
8132: PUSH
8133: LD_INT 10
8135: PUSH
8136: LD_INT 11
8138: PUSH
8139: LD_INT 12
8141: PUSH
8142: LD_INT 13
8144: PUSH
8145: LD_INT 14
8147: PUSH
8148: LD_INT 15
8150: PUSH
8151: LD_INT 16
8153: PUSH
8154: LD_INT 17
8156: PUSH
8157: LD_INT 18
8159: PUSH
8160: LD_INT 19
8162: PUSH
8163: LD_INT 20
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_INT 23
8174: PUSH
8175: LD_INT 24
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 26
8183: PUSH
8184: LD_INT 28
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 31
8192: PUSH
8193: LD_INT 32
8195: PUSH
8196: LD_INT 34
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 101
8237: PUSH
8238: LD_INT 102
8240: PUSH
8241: LD_INT 103
8243: PUSH
8244: LD_INT 104
8246: PUSH
8247: LD_INT 105
8249: PUSH
8250: LD_INT 106
8252: PUSH
8253: LD_INT 107
8255: PUSH
8256: LD_INT 108
8258: PUSH
8259: LD_INT 109
8261: PUSH
8262: LD_INT 110
8264: PUSH
8265: LD_INT 111
8267: PUSH
8268: LD_INT 112
8270: PUSH
8271: LD_INT 114
8273: PUSH
8274: LD_INT 116
8276: PUSH
8277: LD_INT 117
8279: PUSH
8280: LD_INT 118
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
8305: GO 9988
8307: LD_INT 12
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8535
8315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8316: LD_ADDR_VAR 0 2
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 4
8332: PUSH
8333: LD_INT 5
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: LD_INT 7
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: LD_INT 10
8350: PUSH
8351: LD_INT 11
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: LD_INT 13
8359: PUSH
8360: LD_INT 14
8362: PUSH
8363: LD_INT 15
8365: PUSH
8366: LD_INT 16
8368: PUSH
8369: LD_INT 17
8371: PUSH
8372: LD_INT 18
8374: PUSH
8375: LD_INT 19
8377: PUSH
8378: LD_INT 20
8380: PUSH
8381: LD_INT 21
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 23
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 26
8398: PUSH
8399: LD_INT 27
8401: PUSH
8402: LD_INT 28
8404: PUSH
8405: LD_INT 30
8407: PUSH
8408: LD_INT 31
8410: PUSH
8411: LD_INT 32
8413: PUSH
8414: LD_INT 33
8416: PUSH
8417: LD_INT 34
8419: PUSH
8420: LD_INT 36
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 101
8461: PUSH
8462: LD_INT 102
8464: PUSH
8465: LD_INT 103
8467: PUSH
8468: LD_INT 104
8470: PUSH
8471: LD_INT 105
8473: PUSH
8474: LD_INT 106
8476: PUSH
8477: LD_INT 107
8479: PUSH
8480: LD_INT 108
8482: PUSH
8483: LD_INT 109
8485: PUSH
8486: LD_INT 110
8488: PUSH
8489: LD_INT 111
8491: PUSH
8492: LD_INT 112
8494: PUSH
8495: LD_INT 113
8497: PUSH
8498: LD_INT 114
8500: PUSH
8501: LD_INT 116
8503: PUSH
8504: LD_INT 117
8506: PUSH
8507: LD_INT 118
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: ST_TO_ADDR
8533: GO 9988
8535: LD_INT 13
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8751
8543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: LD_INT 2
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: LD_INT 4
8560: PUSH
8561: LD_INT 5
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 11
8575: PUSH
8576: LD_INT 12
8578: PUSH
8579: LD_INT 14
8581: PUSH
8582: LD_INT 15
8584: PUSH
8585: LD_INT 16
8587: PUSH
8588: LD_INT 17
8590: PUSH
8591: LD_INT 18
8593: PUSH
8594: LD_INT 19
8596: PUSH
8597: LD_INT 20
8599: PUSH
8600: LD_INT 21
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 23
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 26
8617: PUSH
8618: LD_INT 27
8620: PUSH
8621: LD_INT 28
8623: PUSH
8624: LD_INT 30
8626: PUSH
8627: LD_INT 31
8629: PUSH
8630: LD_INT 32
8632: PUSH
8633: LD_INT 33
8635: PUSH
8636: LD_INT 34
8638: PUSH
8639: LD_INT 36
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 101
8677: PUSH
8678: LD_INT 102
8680: PUSH
8681: LD_INT 103
8683: PUSH
8684: LD_INT 104
8686: PUSH
8687: LD_INT 105
8689: PUSH
8690: LD_INT 106
8692: PUSH
8693: LD_INT 107
8695: PUSH
8696: LD_INT 108
8698: PUSH
8699: LD_INT 109
8701: PUSH
8702: LD_INT 110
8704: PUSH
8705: LD_INT 111
8707: PUSH
8708: LD_INT 112
8710: PUSH
8711: LD_INT 113
8713: PUSH
8714: LD_INT 114
8716: PUSH
8717: LD_INT 116
8719: PUSH
8720: LD_INT 117
8722: PUSH
8723: LD_INT 118
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9988
8751: LD_INT 14
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8983
8759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: LD_INT 4
8776: PUSH
8777: LD_INT 5
8779: PUSH
8780: LD_INT 6
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 8
8788: PUSH
8789: LD_INT 9
8791: PUSH
8792: LD_INT 10
8794: PUSH
8795: LD_INT 11
8797: PUSH
8798: LD_INT 12
8800: PUSH
8801: LD_INT 13
8803: PUSH
8804: LD_INT 14
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 17
8815: PUSH
8816: LD_INT 18
8818: PUSH
8819: LD_INT 19
8821: PUSH
8822: LD_INT 20
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 27
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 29
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: LD_INT 32
8860: PUSH
8861: LD_INT 33
8863: PUSH
8864: LD_INT 34
8866: PUSH
8867: LD_INT 36
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 101
8909: PUSH
8910: LD_INT 102
8912: PUSH
8913: LD_INT 103
8915: PUSH
8916: LD_INT 104
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 107
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 109
8933: PUSH
8934: LD_INT 110
8936: PUSH
8937: LD_INT 111
8939: PUSH
8940: LD_INT 112
8942: PUSH
8943: LD_INT 113
8945: PUSH
8946: LD_INT 114
8948: PUSH
8949: LD_INT 116
8951: PUSH
8952: LD_INT 117
8954: PUSH
8955: LD_INT 118
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: ST_TO_ADDR
8981: GO 9988
8983: LD_INT 15
8985: DOUBLE
8986: EQUAL
8987: IFTRUE 8991
8989: GO 9215
8991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8992: LD_ADDR_VAR 0 2
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: LD_INT 6
9014: PUSH
9015: LD_INT 7
9017: PUSH
9018: LD_INT 8
9020: PUSH
9021: LD_INT 9
9023: PUSH
9024: LD_INT 10
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 13
9035: PUSH
9036: LD_INT 14
9038: PUSH
9039: LD_INT 15
9041: PUSH
9042: LD_INT 16
9044: PUSH
9045: LD_INT 17
9047: PUSH
9048: LD_INT 18
9050: PUSH
9051: LD_INT 19
9053: PUSH
9054: LD_INT 20
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 24
9068: PUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 26
9074: PUSH
9075: LD_INT 27
9077: PUSH
9078: LD_INT 28
9080: PUSH
9081: LD_INT 29
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 31
9089: PUSH
9090: LD_INT 32
9092: PUSH
9093: LD_INT 33
9095: PUSH
9096: LD_INT 34
9098: PUSH
9099: LD_INT 36
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 101
9141: PUSH
9142: LD_INT 102
9144: PUSH
9145: LD_INT 103
9147: PUSH
9148: LD_INT 104
9150: PUSH
9151: LD_INT 105
9153: PUSH
9154: LD_INT 106
9156: PUSH
9157: LD_INT 107
9159: PUSH
9160: LD_INT 108
9162: PUSH
9163: LD_INT 109
9165: PUSH
9166: LD_INT 110
9168: PUSH
9169: LD_INT 111
9171: PUSH
9172: LD_INT 112
9174: PUSH
9175: LD_INT 113
9177: PUSH
9178: LD_INT 114
9180: PUSH
9181: LD_INT 116
9183: PUSH
9184: LD_INT 117
9186: PUSH
9187: LD_INT 118
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 9988
9215: LD_INT 16
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9359
9223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 4
9234: PUSH
9235: LD_INT 5
9237: PUSH
9238: LD_INT 7
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 12
9246: PUSH
9247: LD_INT 15
9249: PUSH
9250: LD_INT 16
9252: PUSH
9253: LD_INT 20
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_INT 23
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 26
9270: PUSH
9271: LD_INT 30
9273: PUSH
9274: LD_INT 31
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: LD_INT 33
9282: PUSH
9283: LD_INT 34
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 101
9309: PUSH
9310: LD_INT 102
9312: PUSH
9313: LD_INT 103
9315: PUSH
9316: LD_INT 106
9318: PUSH
9319: LD_INT 108
9321: PUSH
9322: LD_INT 112
9324: PUSH
9325: LD_INT 113
9327: PUSH
9328: LD_INT 114
9330: PUSH
9331: LD_INT 116
9333: PUSH
9334: LD_INT 117
9336: PUSH
9337: LD_INT 118
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: ST_TO_ADDR
9357: GO 9988
9359: LD_INT 17
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9591
9367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: LD_INT 6
9390: PUSH
9391: LD_INT 7
9393: PUSH
9394: LD_INT 8
9396: PUSH
9397: LD_INT 9
9399: PUSH
9400: LD_INT 10
9402: PUSH
9403: LD_INT 11
9405: PUSH
9406: LD_INT 12
9408: PUSH
9409: LD_INT 13
9411: PUSH
9412: LD_INT 14
9414: PUSH
9415: LD_INT 15
9417: PUSH
9418: LD_INT 16
9420: PUSH
9421: LD_INT 17
9423: PUSH
9424: LD_INT 18
9426: PUSH
9427: LD_INT 19
9429: PUSH
9430: LD_INT 20
9432: PUSH
9433: LD_INT 21
9435: PUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 25
9447: PUSH
9448: LD_INT 26
9450: PUSH
9451: LD_INT 27
9453: PUSH
9454: LD_INT 28
9456: PUSH
9457: LD_INT 29
9459: PUSH
9460: LD_INT 30
9462: PUSH
9463: LD_INT 31
9465: PUSH
9466: LD_INT 32
9468: PUSH
9469: LD_INT 33
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 101
9517: PUSH
9518: LD_INT 102
9520: PUSH
9521: LD_INT 103
9523: PUSH
9524: LD_INT 104
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 107
9535: PUSH
9536: LD_INT 108
9538: PUSH
9539: LD_INT 109
9541: PUSH
9542: LD_INT 110
9544: PUSH
9545: LD_INT 111
9547: PUSH
9548: LD_INT 112
9550: PUSH
9551: LD_INT 113
9553: PUSH
9554: LD_INT 114
9556: PUSH
9557: LD_INT 116
9559: PUSH
9560: LD_INT 117
9562: PUSH
9563: LD_INT 118
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: ST_TO_ADDR
9589: GO 9988
9591: LD_INT 18
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9747
9599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: LD_INT 7
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 15
9625: PUSH
9626: LD_INT 16
9628: PUSH
9629: LD_INT 20
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 22
9637: PUSH
9638: LD_INT 23
9640: PUSH
9641: LD_INT 25
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: LD_INT 31
9652: PUSH
9653: LD_INT 32
9655: PUSH
9656: LD_INT 33
9658: PUSH
9659: LD_INT 34
9661: PUSH
9662: LD_INT 35
9664: PUSH
9665: LD_INT 36
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 101
9693: PUSH
9694: LD_INT 102
9696: PUSH
9697: LD_INT 103
9699: PUSH
9700: LD_INT 106
9702: PUSH
9703: LD_INT 108
9705: PUSH
9706: LD_INT 112
9708: PUSH
9709: LD_INT 113
9711: PUSH
9712: LD_INT 114
9714: PUSH
9715: LD_INT 115
9717: PUSH
9718: LD_INT 116
9720: PUSH
9721: LD_INT 117
9723: PUSH
9724: LD_INT 118
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
9745: GO 9988
9747: LD_INT 19
9749: DOUBLE
9750: EQUAL
9751: IFTRUE 9755
9753: GO 9987
9755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: LD_INT 2
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: LD_INT 5
9775: PUSH
9776: LD_INT 6
9778: PUSH
9779: LD_INT 7
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: LD_INT 10
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 13
9799: PUSH
9800: LD_INT 14
9802: PUSH
9803: LD_INT 15
9805: PUSH
9806: LD_INT 16
9808: PUSH
9809: LD_INT 17
9811: PUSH
9812: LD_INT 18
9814: PUSH
9815: LD_INT 19
9817: PUSH
9818: LD_INT 20
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 26
9838: PUSH
9839: LD_INT 27
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 29
9847: PUSH
9848: LD_INT 30
9850: PUSH
9851: LD_INT 31
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 33
9859: PUSH
9860: LD_INT 34
9862: PUSH
9863: LD_INT 35
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 101
9909: PUSH
9910: LD_INT 102
9912: PUSH
9913: LD_INT 103
9915: PUSH
9916: LD_INT 104
9918: PUSH
9919: LD_INT 105
9921: PUSH
9922: LD_INT 106
9924: PUSH
9925: LD_INT 107
9927: PUSH
9928: LD_INT 108
9930: PUSH
9931: LD_INT 109
9933: PUSH
9934: LD_INT 110
9936: PUSH
9937: LD_INT 111
9939: PUSH
9940: LD_INT 112
9942: PUSH
9943: LD_INT 113
9945: PUSH
9946: LD_INT 114
9948: PUSH
9949: LD_INT 115
9951: PUSH
9952: LD_INT 116
9954: PUSH
9955: LD_INT 117
9957: PUSH
9958: LD_INT 118
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: ST_TO_ADDR
9985: GO 9988
9987: POP
// end else
9988: GO 10219
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: LD_INT 4
10006: PUSH
10007: LD_INT 5
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: LD_INT 7
10015: PUSH
10016: LD_INT 8
10018: PUSH
10019: LD_INT 9
10021: PUSH
10022: LD_INT 10
10024: PUSH
10025: LD_INT 11
10027: PUSH
10028: LD_INT 12
10030: PUSH
10031: LD_INT 13
10033: PUSH
10034: LD_INT 14
10036: PUSH
10037: LD_INT 15
10039: PUSH
10040: LD_INT 16
10042: PUSH
10043: LD_INT 17
10045: PUSH
10046: LD_INT 18
10048: PUSH
10049: LD_INT 19
10051: PUSH
10052: LD_INT 20
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_INT 23
10063: PUSH
10064: LD_INT 24
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 26
10072: PUSH
10073: LD_INT 27
10075: PUSH
10076: LD_INT 28
10078: PUSH
10079: LD_INT 29
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 33
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 35
10099: PUSH
10100: LD_INT 36
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 101
10143: PUSH
10144: LD_INT 102
10146: PUSH
10147: LD_INT 103
10149: PUSH
10150: LD_INT 104
10152: PUSH
10153: LD_INT 105
10155: PUSH
10156: LD_INT 106
10158: PUSH
10159: LD_INT 107
10161: PUSH
10162: LD_INT 108
10164: PUSH
10165: LD_INT 109
10167: PUSH
10168: LD_INT 110
10170: PUSH
10171: LD_INT 111
10173: PUSH
10174: LD_INT 112
10176: PUSH
10177: LD_INT 113
10179: PUSH
10180: LD_INT 114
10182: PUSH
10183: LD_INT 115
10185: PUSH
10186: LD_INT 116
10188: PUSH
10189: LD_INT 117
10191: PUSH
10192: LD_INT 118
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: ST_TO_ADDR
// if result then
10219: LD_VAR 0 2
10223: IFFALSE 11009
// begin normal :=  ;
10225: LD_ADDR_VAR 0 5
10229: PUSH
10230: LD_STRING 
10232: ST_TO_ADDR
// hardcore :=  ;
10233: LD_ADDR_VAR 0 6
10237: PUSH
10238: LD_STRING 
10240: ST_TO_ADDR
// active :=  ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_STRING 
10248: ST_TO_ADDR
// for i = 1 to normalCounter do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_EXP 17
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10366
// begin tmp := 0 ;
10267: LD_ADDR_VAR 0 3
10271: PUSH
10272: LD_STRING 0
10274: ST_TO_ADDR
// if result [ 1 ] then
10275: LD_VAR 0 2
10279: PUSH
10280: LD_INT 1
10282: ARRAY
10283: IFFALSE 10348
// if result [ 1 ] [ 1 ] = i then
10285: LD_VAR 0 2
10289: PUSH
10290: LD_INT 1
10292: ARRAY
10293: PUSH
10294: LD_INT 1
10296: ARRAY
10297: PUSH
10298: LD_VAR 0 8
10302: EQUAL
10303: IFFALSE 10348
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10305: LD_ADDR_VAR 0 2
10309: PUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: LD_VAR 0 2
10322: PUSH
10323: LD_INT 1
10325: ARRAY
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 3
10334: PPUSH
10335: CALL_OW 1
10339: ST_TO_ADDR
// tmp := 1 ;
10340: LD_ADDR_VAR 0 3
10344: PUSH
10345: LD_STRING 1
10347: ST_TO_ADDR
// end ; normal := normal & tmp ;
10348: LD_ADDR_VAR 0 5
10352: PUSH
10353: LD_VAR 0 5
10357: PUSH
10358: LD_VAR 0 3
10362: STR
10363: ST_TO_ADDR
// end ;
10364: GO 10264
10366: POP
10367: POP
// for i = 1 to hardcoreCounter do
10368: LD_ADDR_VAR 0 8
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_EXP 18
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10489
// begin tmp := 0 ;
10386: LD_ADDR_VAR 0 3
10390: PUSH
10391: LD_STRING 0
10393: ST_TO_ADDR
// if result [ 2 ] then
10394: LD_VAR 0 2
10398: PUSH
10399: LD_INT 2
10401: ARRAY
10402: IFFALSE 10471
// if result [ 2 ] [ 1 ] = 100 + i then
10404: LD_VAR 0 2
10408: PUSH
10409: LD_INT 2
10411: ARRAY
10412: PUSH
10413: LD_INT 1
10415: ARRAY
10416: PUSH
10417: LD_INT 100
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: EQUAL
10426: IFFALSE 10471
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_VAR 0 2
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 3
10457: PPUSH
10458: CALL_OW 1
10462: ST_TO_ADDR
// tmp := 1 ;
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_STRING 1
10470: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10471: LD_ADDR_VAR 0 6
10475: PUSH
10476: LD_VAR 0 6
10480: PUSH
10481: LD_VAR 0 3
10485: STR
10486: ST_TO_ADDR
// end ;
10487: GO 10383
10489: POP
10490: POP
// if isGameLoad then
10491: LD_VAR 0 1
10495: IFFALSE 10970
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10497: LD_ADDR_VAR 0 4
10501: PUSH
10502: LD_EXP 21
10506: PUSH
10507: LD_EXP 20
10511: PUSH
10512: LD_EXP 22
10516: PUSH
10517: LD_EXP 19
10521: PUSH
10522: LD_EXP 23
10526: PUSH
10527: LD_EXP 24
10531: PUSH
10532: LD_EXP 25
10536: PUSH
10537: LD_EXP 26
10541: PUSH
10542: LD_EXP 27
10546: PUSH
10547: LD_EXP 28
10551: PUSH
10552: LD_EXP 29
10556: PUSH
10557: LD_EXP 30
10561: PUSH
10562: LD_EXP 31
10566: PUSH
10567: LD_EXP 32
10571: PUSH
10572: LD_EXP 40
10576: PUSH
10577: LD_EXP 41
10581: PUSH
10582: LD_EXP 42
10586: PUSH
10587: LD_EXP 43
10591: PUSH
10592: LD_EXP 45
10596: PUSH
10597: LD_EXP 46
10601: PUSH
10602: LD_EXP 47
10606: PUSH
10607: LD_EXP 50
10611: PUSH
10612: LD_EXP 52
10616: PUSH
10617: LD_EXP 53
10621: PUSH
10622: LD_EXP 54
10626: PUSH
10627: LD_EXP 56
10631: PUSH
10632: LD_EXP 57
10636: PUSH
10637: LD_EXP 60
10641: PUSH
10642: LD_EXP 61
10646: PUSH
10647: LD_EXP 62
10651: PUSH
10652: LD_EXP 63
10656: PUSH
10657: LD_EXP 64
10661: PUSH
10662: LD_EXP 65
10666: PUSH
10667: LD_EXP 66
10671: PUSH
10672: LD_EXP 67
10676: PUSH
10677: LD_EXP 68
10681: PUSH
10682: LD_EXP 33
10686: PUSH
10687: LD_EXP 34
10691: PUSH
10692: LD_EXP 37
10696: PUSH
10697: LD_EXP 38
10701: PUSH
10702: LD_EXP 39
10706: PUSH
10707: LD_EXP 35
10711: PUSH
10712: LD_EXP 36
10716: PUSH
10717: LD_EXP 44
10721: PUSH
10722: LD_EXP 48
10726: PUSH
10727: LD_EXP 49
10731: PUSH
10732: LD_EXP 51
10736: PUSH
10737: LD_EXP 55
10741: PUSH
10742: LD_EXP 58
10746: PUSH
10747: LD_EXP 59
10751: PUSH
10752: LD_EXP 69
10756: PUSH
10757: LD_EXP 70
10761: PUSH
10762: LD_EXP 71
10766: PUSH
10767: LD_EXP 72
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// tmp :=  ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_STRING 
10835: ST_TO_ADDR
// for i = 1 to normalCounter do
10836: LD_ADDR_VAR 0 8
10840: PUSH
10841: DOUBLE
10842: LD_INT 1
10844: DEC
10845: ST_TO_ADDR
10846: LD_EXP 17
10850: PUSH
10851: FOR_TO
10852: IFFALSE 10888
// begin if flags [ i ] then
10854: LD_VAR 0 4
10858: PUSH
10859: LD_VAR 0 8
10863: ARRAY
10864: IFFALSE 10886
// tmp := tmp & i & ; ;
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: LD_VAR 0 3
10875: PUSH
10876: LD_VAR 0 8
10880: STR
10881: PUSH
10882: LD_STRING ;
10884: STR
10885: ST_TO_ADDR
// end ;
10886: GO 10851
10888: POP
10889: POP
// for i = 1 to hardcoreCounter do
10890: LD_ADDR_VAR 0 8
10894: PUSH
10895: DOUBLE
10896: LD_INT 1
10898: DEC
10899: ST_TO_ADDR
10900: LD_EXP 18
10904: PUSH
10905: FOR_TO
10906: IFFALSE 10952
// begin if flags [ normalCounter + i ] then
10908: LD_VAR 0 4
10912: PUSH
10913: LD_EXP 17
10917: PUSH
10918: LD_VAR 0 8
10922: PLUS
10923: ARRAY
10924: IFFALSE 10950
// tmp := tmp & ( 100 + i ) & ; ;
10926: LD_ADDR_VAR 0 3
10930: PUSH
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 100
10938: PUSH
10939: LD_VAR 0 8
10943: PLUS
10944: STR
10945: PUSH
10946: LD_STRING ;
10948: STR
10949: ST_TO_ADDR
// end ;
10950: GO 10905
10952: POP
10953: POP
// if tmp then
10954: LD_VAR 0 3
10958: IFFALSE 10970
// active := tmp ;
10960: LD_ADDR_VAR 0 7
10964: PUSH
10965: LD_VAR 0 3
10969: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10970: LD_STRING getStreamItemsFromMission("
10972: PUSH
10973: LD_VAR 0 5
10977: STR
10978: PUSH
10979: LD_STRING ","
10981: STR
10982: PUSH
10983: LD_VAR 0 6
10987: STR
10988: PUSH
10989: LD_STRING ","
10991: STR
10992: PUSH
10993: LD_VAR 0 7
10997: STR
10998: PUSH
10999: LD_STRING ")
11001: STR
11002: PPUSH
11003: CALL_OW 559
// end else
11007: GO 11016
// ToLua ( getStreamItemsFromMission("","","") ) ;
11009: LD_STRING getStreamItemsFromMission("","","")
11011: PPUSH
11012: CALL_OW 559
// end ;
11016: LD_VAR 0 2
11020: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11021: LD_EXP 16
11025: PUSH
11026: LD_EXP 21
11030: AND
11031: IFFALSE 11155
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin enable ;
11040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11041: LD_ADDR_VAR 0 2
11045: PUSH
11046: LD_INT 22
11048: PUSH
11049: LD_OWVAR 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: LD_INT 34
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 34
11073: PUSH
11074: LD_INT 45
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 34
11083: PUSH
11084: LD_INT 28
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 34
11093: PUSH
11094: LD_INT 47
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 2
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11155
// for i in tmp do
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11153
// begin SetLives ( i , 0 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 0
11146: PPUSH
11147: CALL_OW 234
// end ;
11151: GO 11136
11153: POP
11154: POP
// end ;
11155: PPOPN 2
11157: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11158: LD_EXP 16
11162: PUSH
11163: LD_EXP 22
11167: AND
11168: IFFALSE 11252
11170: GO 11172
11172: DISABLE
11173: LD_INT 0
11175: PPUSH
11176: PPUSH
// begin enable ;
11177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_OWVAR 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 32
11197: PUSH
11198: LD_INT 3
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: ST_TO_ADDR
// if not tmp then
11214: LD_VAR 0 2
11218: NOT
11219: IFFALSE 11223
// exit ;
11221: GO 11252
// for i in tmp do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_VAR 0 2
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11250
// begin SetLives ( i , 0 ) ;
11236: LD_VAR 0 1
11240: PPUSH
11241: LD_INT 0
11243: PPUSH
11244: CALL_OW 234
// end ;
11248: GO 11233
11250: POP
11251: POP
// end ;
11252: PPOPN 2
11254: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11255: LD_EXP 16
11259: PUSH
11260: LD_EXP 19
11264: AND
11265: IFFALSE 11358
11267: GO 11269
11269: DISABLE
11270: LD_INT 0
11272: PPUSH
// begin enable ;
11273: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11274: LD_ADDR_VAR 0 1
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_OWVAR 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 25
11296: PUSH
11297: LD_INT 5
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 9
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: PUSH
11339: FOR_IN
11340: IFFALSE 11356
// begin SetClass ( i , 1 ) ;
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 336
// end ;
11354: GO 11339
11356: POP
11357: POP
// end ;
11358: PPOPN 1
11360: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11361: LD_EXP 16
11365: PUSH
11366: LD_EXP 20
11370: AND
11371: PUSH
11372: LD_OWVAR 65
11376: PUSH
11377: LD_INT 7
11379: LESS
11380: AND
11381: IFFALSE 11395
11383: GO 11385
11385: DISABLE
// begin enable ;
11386: ENABLE
// game_speed := 7 ;
11387: LD_ADDR_OWVAR 65
11391: PUSH
11392: LD_INT 7
11394: ST_TO_ADDR
// end ;
11395: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11396: LD_EXP 16
11400: PUSH
11401: LD_EXP 23
11405: AND
11406: IFFALSE 11608
11408: GO 11410
11410: DISABLE
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
11415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_INT 81
11423: PUSH
11424: LD_OWVAR 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: ST_TO_ADDR
// if not tmp then
11452: LD_VAR 0 3
11456: NOT
11457: IFFALSE 11461
// exit ;
11459: GO 11608
// if tmp > 5 then
11461: LD_VAR 0 3
11465: PUSH
11466: LD_INT 5
11468: GREATER
11469: IFFALSE 11481
// k := 5 else
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_INT 5
11478: ST_TO_ADDR
11479: GO 11491
// k := tmp ;
11481: LD_ADDR_VAR 0 2
11485: PUSH
11486: LD_VAR 0 3
11490: ST_TO_ADDR
// for i := 1 to k do
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: DOUBLE
11497: LD_INT 1
11499: DEC
11500: ST_TO_ADDR
11501: LD_VAR 0 2
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11606
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PPUSH
11520: LD_VAR 0 1
11524: PUSH
11525: LD_INT 4
11527: MOD
11528: PUSH
11529: LD_INT 1
11531: PLUS
11532: PPUSH
11533: CALL_OW 259
11537: PUSH
11538: LD_INT 10
11540: LESS
11541: IFFALSE 11604
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11543: LD_VAR 0 3
11547: PUSH
11548: LD_VAR 0 1
11552: ARRAY
11553: PPUSH
11554: LD_VAR 0 1
11558: PUSH
11559: LD_INT 4
11561: MOD
11562: PUSH
11563: LD_INT 1
11565: PLUS
11566: PPUSH
11567: LD_VAR 0 3
11571: PUSH
11572: LD_VAR 0 1
11576: ARRAY
11577: PPUSH
11578: LD_VAR 0 1
11582: PUSH
11583: LD_INT 4
11585: MOD
11586: PUSH
11587: LD_INT 1
11589: PLUS
11590: PPUSH
11591: CALL_OW 259
11595: PUSH
11596: LD_INT 1
11598: PLUS
11599: PPUSH
11600: CALL_OW 237
11604: GO 11506
11606: POP
11607: POP
// end ;
11608: PPOPN 3
11610: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11611: LD_EXP 16
11615: PUSH
11616: LD_EXP 24
11620: AND
11621: IFFALSE 11641
11623: GO 11625
11625: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11626: LD_INT 4
11628: PPUSH
11629: LD_OWVAR 2
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 324
11641: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11642: LD_EXP 16
11646: PUSH
11647: LD_EXP 53
11651: AND
11652: IFFALSE 11672
11654: GO 11656
11656: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11657: LD_INT 19
11659: PPUSH
11660: LD_OWVAR 2
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 324
11672: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11673: LD_EXP 16
11677: PUSH
11678: LD_EXP 25
11682: AND
11683: IFFALSE 11785
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
// begin enable ;
11692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_OWVAR 2
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 34
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 69
11746: ST_TO_ADDR
// if not tmp then
11747: LD_VAR 0 2
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11785
// for i in tmp do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11783
// begin SetLives ( i , 0 ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 234
// end ;
11781: GO 11766
11783: POP
11784: POP
// end ;
11785: PPOPN 2
11787: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11788: LD_EXP 16
11792: PUSH
11793: LD_EXP 26
11797: AND
11798: IFFALSE 11818
11800: GO 11802
11802: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11803: LD_INT 32
11805: PPUSH
11806: LD_OWVAR 2
11810: PPUSH
11811: LD_INT 0
11813: PPUSH
11814: CALL_OW 324
11818: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11819: LD_EXP 16
11823: PUSH
11824: LD_EXP 27
11828: AND
11829: IFFALSE 12010
11831: GO 11833
11833: DISABLE
11834: LD_INT 0
11836: PPUSH
11837: PPUSH
11838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: LD_INT 22
11846: PUSH
11847: LD_OWVAR 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 33
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: ST_TO_ADDR
// if not tmp then
11875: LD_VAR 0 2
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 12010
// side := 0 ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_INT 0
11891: ST_TO_ADDR
// for i := 1 to 8 do
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: DOUBLE
11898: LD_INT 1
11900: DEC
11901: ST_TO_ADDR
11902: LD_INT 8
11904: PUSH
11905: FOR_TO
11906: IFFALSE 11954
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11908: LD_OWVAR 2
11912: PUSH
11913: LD_VAR 0 1
11917: NONEQUAL
11918: PUSH
11919: LD_OWVAR 2
11923: PPUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 81
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: AND
11938: IFFALSE 11952
// begin side := i ;
11940: LD_ADDR_VAR 0 3
11944: PUSH
11945: LD_VAR 0 1
11949: ST_TO_ADDR
// break ;
11950: GO 11954
// end ;
11952: GO 11905
11954: POP
11955: POP
// if not side then
11956: LD_VAR 0 3
11960: NOT
11961: IFFALSE 11965
// exit ;
11963: GO 12010
// for i := 1 to tmp do
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: DOUBLE
11971: LD_INT 1
11973: DEC
11974: ST_TO_ADDR
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12008
// if Prob ( 60 ) then
11983: LD_INT 60
11985: PPUSH
11986: CALL_OW 13
11990: IFFALSE 12006
// SetSide ( i , side ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: CALL_OW 235
12006: GO 11980
12008: POP
12009: POP
// end ;
12010: PPOPN 3
12012: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12013: LD_EXP 16
12017: PUSH
12018: LD_EXP 29
12022: AND
12023: IFFALSE 12142
12025: GO 12027
12027: DISABLE
12028: LD_INT 0
12030: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12031: LD_ADDR_VAR 0 1
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_OWVAR 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: LD_INT 23
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 69
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12140
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 257
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 3
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: IN
12116: IFFALSE 12138
// SetClass ( un , rand ( 1 , 4 ) ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 4
12128: PPUSH
12129: CALL_OW 12
12133: PPUSH
12134: CALL_OW 336
12138: GO 12085
12140: POP
12141: POP
// end ;
12142: PPOPN 1
12144: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12145: LD_EXP 16
12149: PUSH
12150: LD_EXP 28
12154: AND
12155: IFFALSE 12234
12157: GO 12159
12159: DISABLE
12160: LD_INT 0
12162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_OWVAR 2
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 3
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 69
12198: ST_TO_ADDR
// if not tmp then
12199: LD_VAR 0 1
12203: NOT
12204: IFFALSE 12208
// exit ;
12206: GO 12234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 12
12225: ARRAY
12226: PPUSH
12227: LD_INT 100
12229: PPUSH
12230: CALL_OW 234
// end ;
12234: PPOPN 1
12236: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12237: LD_EXP 16
12241: PUSH
12242: LD_EXP 30
12246: AND
12247: IFFALSE 12345
12249: GO 12251
12251: DISABLE
12252: LD_INT 0
12254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12255: LD_ADDR_VAR 0 1
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_OWVAR 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: ST_TO_ADDR
// if not tmp then
12291: LD_VAR 0 1
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 12345
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12300: LD_VAR 0 1
12304: PUSH
12305: LD_INT 1
12307: PPUSH
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 12
12317: ARRAY
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 4
12324: PPUSH
12325: CALL_OW 12
12329: PPUSH
12330: LD_INT 3000
12332: PPUSH
12333: LD_INT 9000
12335: PPUSH
12336: CALL_OW 12
12340: PPUSH
12341: CALL_OW 492
// end ;
12345: PPOPN 1
12347: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12348: LD_EXP 16
12352: PUSH
12353: LD_EXP 31
12357: AND
12358: IFFALSE 12378
12360: GO 12362
12362: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12363: LD_INT 1
12365: PPUSH
12366: LD_OWVAR 2
12370: PPUSH
12371: LD_INT 0
12373: PPUSH
12374: CALL_OW 324
12378: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12379: LD_EXP 16
12383: PUSH
12384: LD_EXP 32
12388: AND
12389: IFFALSE 12472
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: ST_TO_ADDR
// if not tmp then
12434: LD_VAR 0 2
12438: NOT
12439: IFFALSE 12443
// exit ;
12441: GO 12472
// for i in tmp do
12443: LD_ADDR_VAR 0 1
12447: PUSH
12448: LD_VAR 0 2
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12470
// SetBLevel ( i , 10 ) ;
12456: LD_VAR 0 1
12460: PPUSH
12461: LD_INT 10
12463: PPUSH
12464: CALL_OW 241
12468: GO 12453
12470: POP
12471: POP
// end ;
12472: PPOPN 2
12474: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12475: LD_EXP 16
12479: PUSH
12480: LD_EXP 33
12484: AND
12485: IFFALSE 12596
12487: GO 12489
12489: DISABLE
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12495: LD_ADDR_VAR 0 3
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_OWVAR 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 25
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: ST_TO_ADDR
// if not tmp then
12531: LD_VAR 0 3
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12596
// un := tmp [ rand ( 1 , tmp ) ] ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_VAR 0 3
12549: PUSH
12550: LD_INT 1
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: CALL_OW 12
12562: ARRAY
12563: ST_TO_ADDR
// if Crawls ( un ) then
12564: LD_VAR 0 2
12568: PPUSH
12569: CALL_OW 318
12573: IFFALSE 12584
// ComWalk ( un ) ;
12575: LD_VAR 0 2
12579: PPUSH
12580: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12584: LD_VAR 0 2
12588: PPUSH
12589: LD_INT 5
12591: PPUSH
12592: CALL_OW 336
// end ;
12596: PPOPN 3
12598: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12599: LD_EXP 16
12603: PUSH
12604: LD_EXP 34
12608: AND
12609: PUSH
12610: LD_OWVAR 67
12614: PUSH
12615: LD_INT 4
12617: LESS
12618: AND
12619: IFFALSE 12638
12621: GO 12623
12623: DISABLE
// begin Difficulty := Difficulty + 1 ;
12624: LD_ADDR_OWVAR 67
12628: PUSH
12629: LD_OWVAR 67
12633: PUSH
12634: LD_INT 1
12636: PLUS
12637: ST_TO_ADDR
// end ;
12638: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12639: LD_EXP 16
12643: PUSH
12644: LD_EXP 35
12648: AND
12649: IFFALSE 12752
12651: GO 12653
12653: DISABLE
12654: LD_INT 0
12656: PPUSH
// begin for i := 1 to 5 do
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: DOUBLE
12663: LD_INT 1
12665: DEC
12666: ST_TO_ADDR
12667: LD_INT 5
12669: PUSH
12670: FOR_TO
12671: IFFALSE 12750
// begin uc_nation := nation_nature ;
12673: LD_ADDR_OWVAR 21
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// uc_side := 0 ;
12681: LD_ADDR_OWVAR 20
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12689: LD_ADDR_OWVAR 29
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 12
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: ST_TO_ADDR
// hc_agressivity := 20 ;
12704: LD_ADDR_OWVAR 35
12708: PUSH
12709: LD_INT 20
12711: ST_TO_ADDR
// hc_class := class_tiger ;
12712: LD_ADDR_OWVAR 28
12716: PUSH
12717: LD_INT 14
12719: ST_TO_ADDR
// hc_gallery :=  ;
12720: LD_ADDR_OWVAR 33
12724: PUSH
12725: LD_STRING 
12727: ST_TO_ADDR
// hc_name :=  ;
12728: LD_ADDR_OWVAR 26
12732: PUSH
12733: LD_STRING 
12735: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12736: CALL_OW 44
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 51
// end ;
12748: GO 12670
12750: POP
12751: POP
// end ;
12752: PPOPN 1
12754: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12755: LD_EXP 16
12759: PUSH
12760: LD_EXP 36
12764: AND
12765: IFFALSE 12774
12767: GO 12769
12769: DISABLE
// StreamSibBomb ;
12770: CALL 12775 0 0
12774: END
// export function StreamSibBomb ; var i , x , y ; begin
12775: LD_INT 0
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// result := false ;
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// for i := 1 to 16 do
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: DOUBLE
12795: LD_INT 1
12797: DEC
12798: ST_TO_ADDR
12799: LD_INT 16
12801: PUSH
12802: FOR_TO
12803: IFFALSE 13002
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_INT 10
12812: PUSH
12813: LD_INT 20
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 40
12821: PUSH
12822: LD_INT 50
12824: PUSH
12825: LD_INT 60
12827: PUSH
12828: LD_INT 70
12830: PUSH
12831: LD_INT 80
12833: PUSH
12834: LD_INT 90
12836: PUSH
12837: LD_INT 100
12839: PUSH
12840: LD_INT 110
12842: PUSH
12843: LD_INT 120
12845: PUSH
12846: LD_INT 130
12848: PUSH
12849: LD_INT 140
12851: PUSH
12852: LD_INT 150
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 15
12877: PPUSH
12878: CALL_OW 12
12882: ARRAY
12883: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 20
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 40
12900: PUSH
12901: LD_INT 50
12903: PUSH
12904: LD_INT 60
12906: PUSH
12907: LD_INT 70
12909: PUSH
12910: LD_INT 80
12912: PUSH
12913: LD_INT 90
12915: PUSH
12916: LD_INT 100
12918: PUSH
12919: LD_INT 110
12921: PUSH
12922: LD_INT 120
12924: PUSH
12925: LD_INT 130
12927: PUSH
12928: LD_INT 140
12930: PUSH
12931: LD_INT 150
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_INT 15
12956: PPUSH
12957: CALL_OW 12
12961: ARRAY
12962: ST_TO_ADDR
// if ValidHex ( x , y ) then
12963: LD_VAR 0 3
12967: PPUSH
12968: LD_VAR 0 4
12972: PPUSH
12973: CALL_OW 488
12977: IFFALSE 13000
// begin result := [ x , y ] ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_VAR 0 3
12988: PUSH
12989: LD_VAR 0 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// break ;
12998: GO 13002
// end ; end ;
13000: GO 12802
13002: POP
13003: POP
// if result then
13004: LD_VAR 0 1
13008: IFFALSE 13068
// begin ToLua ( playSibBomb() ) ;
13010: LD_STRING playSibBomb()
13012: PPUSH
13013: CALL_OW 559
// wait ( 0 0$14 ) ;
13017: LD_INT 490
13019: PPUSH
13020: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13024: LD_VAR 0 1
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 2
13040: ARRAY
13041: PPUSH
13042: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: PPUSH
13064: CALL_OW 429
// end ; end ;
13068: LD_VAR 0 1
13072: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13073: LD_EXP 16
13077: PUSH
13078: LD_EXP 38
13082: AND
13083: IFFALSE 13095
13085: GO 13087
13087: DISABLE
// YouLost (  ) ;
13088: LD_STRING 
13090: PPUSH
13091: CALL_OW 104
13095: END
// every 0 0$1 trigger StreamModeActive and sFog do
13096: LD_EXP 16
13100: PUSH
13101: LD_EXP 37
13105: AND
13106: IFFALSE 13120
13108: GO 13110
13110: DISABLE
// FogOff ( your_side ) ;
13111: LD_OWVAR 2
13115: PPUSH
13116: CALL_OW 344
13120: END
// every 0 0$1 trigger StreamModeActive and sSun do
13121: LD_EXP 16
13125: PUSH
13126: LD_EXP 39
13130: AND
13131: IFFALSE 13159
13133: GO 13135
13135: DISABLE
// begin solar_recharge_percent := 0 ;
13136: LD_ADDR_OWVAR 79
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13144: LD_INT 10500
13146: PPUSH
13147: CALL_OW 67
// solar_recharge_percent := 100 ;
13151: LD_ADDR_OWVAR 79
13155: PUSH
13156: LD_INT 100
13158: ST_TO_ADDR
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13160: LD_EXP 16
13164: PUSH
13165: LD_EXP 40
13169: AND
13170: IFFALSE 13409
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
13179: PPUSH
// begin tmp := [ ] ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: EMPTY
13186: ST_TO_ADDR
// for i := 1 to 6 do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_INT 6
13199: PUSH
13200: FOR_TO
13201: IFFALSE 13306
// begin uc_nation := nation_nature ;
13203: LD_ADDR_OWVAR 21
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// uc_side := 0 ;
13211: LD_ADDR_OWVAR 20
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13219: LD_ADDR_OWVAR 29
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 12
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// hc_agressivity := 20 ;
13234: LD_ADDR_OWVAR 35
13238: PUSH
13239: LD_INT 20
13241: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13242: LD_ADDR_OWVAR 28
13246: PUSH
13247: LD_INT 17
13249: ST_TO_ADDR
// hc_gallery :=  ;
13250: LD_ADDR_OWVAR 33
13254: PUSH
13255: LD_STRING 
13257: ST_TO_ADDR
// hc_name :=  ;
13258: LD_ADDR_OWVAR 26
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// un := CreateHuman ;
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: CALL_OW 44
13275: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 51
// tmp := tmp ^ un ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_VAR 0 3
13297: PUSH
13298: LD_VAR 0 2
13302: ADD
13303: ST_TO_ADDR
// end ;
13304: GO 13200
13306: POP
13307: POP
// repeat wait ( 0 0$1 ) ;
13308: LD_INT 35
13310: PPUSH
13311: CALL_OW 67
// for un in tmp do
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: LD_VAR 0 3
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13400
// begin if IsDead ( un ) then
13328: LD_VAR 0 2
13332: PPUSH
13333: CALL_OW 301
13337: IFFALSE 13357
// begin tmp := tmp diff un ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_VAR 0 3
13348: PUSH
13349: LD_VAR 0 2
13353: DIFF
13354: ST_TO_ADDR
// continue ;
13355: GO 13325
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13357: LD_VAR 0 2
13361: PPUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 0
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PPUSH
13384: LD_VAR 0 2
13388: PPUSH
13389: CALL_OW 74
13393: PPUSH
13394: CALL_OW 115
// end ;
13398: GO 13325
13400: POP
13401: POP
// until not tmp ;
13402: LD_VAR 0 3
13406: NOT
13407: IFFALSE 13308
// end ;
13409: PPOPN 3
13411: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13412: LD_EXP 16
13416: PUSH
13417: LD_EXP 41
13421: AND
13422: IFFALSE 13476
13424: GO 13426
13426: DISABLE
// begin ToLua ( displayTroll(); ) ;
13427: LD_STRING displayTroll();
13429: PPUSH
13430: CALL_OW 559
// wait ( 3 3$00 ) ;
13434: LD_INT 6300
13436: PPUSH
13437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13441: LD_STRING hideTroll();
13443: PPUSH
13444: CALL_OW 559
// wait ( 1 1$00 ) ;
13448: LD_INT 2100
13450: PPUSH
13451: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13455: LD_STRING displayTroll();
13457: PPUSH
13458: CALL_OW 559
// wait ( 1 1$00 ) ;
13462: LD_INT 2100
13464: PPUSH
13465: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13469: LD_STRING hideTroll();
13471: PPUSH
13472: CALL_OW 559
// end ;
13476: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13477: LD_EXP 16
13481: PUSH
13482: LD_EXP 42
13486: AND
13487: IFFALSE 13550
13489: GO 13491
13491: DISABLE
13492: LD_INT 0
13494: PPUSH
// begin p := 0 ;
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// repeat game_speed := 1 ;
13503: LD_ADDR_OWVAR 65
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13511: LD_INT 35
13513: PPUSH
13514: CALL_OW 67
// p := p + 1 ;
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: LD_INT 1
13530: PLUS
13531: ST_TO_ADDR
// until p >= 60 ;
13532: LD_VAR 0 1
13536: PUSH
13537: LD_INT 60
13539: GREATEREQUAL
13540: IFFALSE 13503
// game_speed := 4 ;
13542: LD_ADDR_OWVAR 65
13546: PUSH
13547: LD_INT 4
13549: ST_TO_ADDR
// end ;
13550: PPOPN 1
13552: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13553: LD_EXP 16
13557: PUSH
13558: LD_EXP 43
13562: AND
13563: IFFALSE 13709
13565: GO 13567
13567: DISABLE
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_OWVAR 2
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 0
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: ST_TO_ADDR
// if not depot then
13626: LD_VAR 0 1
13630: NOT
13631: IFFALSE 13635
// exit ;
13633: GO 13709
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: CALL_OW 274
13663: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13664: LD_VAR 0 2
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 0
13674: PPUSH
13675: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13679: LD_VAR 0 2
13683: PPUSH
13684: LD_INT 2
13686: PPUSH
13687: LD_INT 0
13689: PPUSH
13690: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 3
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 277
// end ;
13709: PPOPN 2
13711: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13712: LD_EXP 16
13716: PUSH
13717: LD_EXP 44
13721: AND
13722: IFFALSE 13819
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_INT 22
13737: PUSH
13738: LD_OWVAR 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 21
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 3
13759: PUSH
13760: LD_INT 23
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: ST_TO_ADDR
// if not tmp then
13784: LD_VAR 0 1
13788: NOT
13789: IFFALSE 13793
// exit ;
13791: GO 13819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13793: LD_VAR 0 1
13797: PUSH
13798: LD_INT 1
13800: PPUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 12
13810: ARRAY
13811: PPUSH
13812: LD_INT 200
13814: PPUSH
13815: CALL_OW 234
// end ;
13819: PPOPN 1
13821: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13822: LD_EXP 16
13826: PUSH
13827: LD_EXP 45
13831: AND
13832: IFFALSE 13911
13834: GO 13836
13836: DISABLE
13837: LD_INT 0
13839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 22
13847: PUSH
13848: LD_OWVAR 2
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 21
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 69
13875: ST_TO_ADDR
// if not tmp then
13876: LD_VAR 0 1
13880: NOT
13881: IFFALSE 13885
// exit ;
13883: GO 13911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13885: LD_VAR 0 1
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: PPUSH
13904: LD_INT 60
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: PPOPN 1
13913: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13914: LD_EXP 16
13918: PUSH
13919: LD_EXP 46
13923: AND
13924: IFFALSE 14023
13926: GO 13928
13928: DISABLE
13929: LD_INT 0
13931: PPUSH
13932: PPUSH
// begin enable ;
13933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13934: LD_ADDR_VAR 0 1
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_OWVAR 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 61
13953: PUSH
13954: EMPTY
13955: LIST
13956: PUSH
13957: LD_INT 33
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 1
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14023
// for i in tmp do
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_VAR 0 1
13995: PUSH
13996: FOR_IN
13997: IFFALSE 14021
// if IsControledBy ( i ) then
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 312
14008: IFFALSE 14019
// ComUnlink ( i ) ;
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 136
14019: GO 13996
14021: POP
14022: POP
// end ;
14023: PPOPN 2
14025: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14026: LD_EXP 16
14030: PUSH
14031: LD_EXP 47
14035: AND
14036: IFFALSE 14176
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
// begin ToLua ( displayPowell(); ) ;
14045: LD_STRING displayPowell();
14047: PPUSH
14048: CALL_OW 559
// uc_side := 0 ;
14052: LD_ADDR_OWVAR 20
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// uc_nation := 2 ;
14060: LD_ADDR_OWVAR 21
14064: PUSH
14065: LD_INT 2
14067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14068: LD_ADDR_OWVAR 37
14072: PUSH
14073: LD_INT 14
14075: ST_TO_ADDR
// vc_engine := engine_siberite ;
14076: LD_ADDR_OWVAR 39
14080: PUSH
14081: LD_INT 3
14083: ST_TO_ADDR
// vc_control := control_apeman ;
14084: LD_ADDR_OWVAR 38
14088: PUSH
14089: LD_INT 5
14091: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14092: LD_ADDR_OWVAR 40
14096: PUSH
14097: LD_INT 29
14099: ST_TO_ADDR
// un := CreateVehicle ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: CALL_OW 45
14109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14122: LD_INT 35
14124: PPUSH
14125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14129: LD_VAR 0 2
14133: PPUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: PPUSH
14151: LD_VAR 0 2
14155: PPUSH
14156: CALL_OW 74
14160: PPUSH
14161: CALL_OW 115
// until IsDead ( un ) ;
14165: LD_VAR 0 2
14169: PPUSH
14170: CALL_OW 301
14174: IFFALSE 14122
// end ;
14176: PPOPN 2
14178: END
// every 0 0$1 trigger StreamModeActive and sStu do
14179: LD_EXP 16
14183: PUSH
14184: LD_EXP 55
14188: AND
14189: IFFALSE 14205
14191: GO 14193
14193: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14194: LD_STRING displayStucuk();
14196: PPUSH
14197: CALL_OW 559
// ResetFog ;
14201: CALL_OW 335
// end ;
14205: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14206: LD_EXP 16
14210: PUSH
14211: LD_EXP 48
14215: AND
14216: IFFALSE 14357
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14225: LD_ADDR_VAR 0 2
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 2
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14357
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 2
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_INT 0
14301: PPUSH
14302: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_OWVAR 3
14315: PUSH
14316: LD_VAR 0 1
14320: DIFF
14321: PPUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 74
14331: PPUSH
14332: CALL_OW 115
// wait ( 0 0$20 ) ;
14336: LD_INT 700
14338: PPUSH
14339: CALL_OW 67
// SetSide ( un , your_side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_OWVAR 2
14352: PPUSH
14353: CALL_OW 235
// end ;
14357: PPOPN 2
14359: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14360: LD_EXP 16
14364: PUSH
14365: LD_EXP 49
14369: AND
14370: IFFALSE 14476
14372: GO 14374
14374: DISABLE
14375: LD_INT 0
14377: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_OWVAR 2
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 30
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not depot then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14476
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14441: LD_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: CALL_OW 250
14454: PPUSH
14455: LD_VAR 0 1
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: CALL_OW 251
14468: PPUSH
14469: LD_INT 70
14471: PPUSH
14472: CALL_OW 495
// end ;
14476: PPOPN 1
14478: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14479: LD_EXP 16
14483: PUSH
14484: LD_EXP 50
14488: AND
14489: IFFALSE 14700
14491: GO 14493
14493: DISABLE
14494: LD_INT 0
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14501: LD_ADDR_VAR 0 5
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_OWVAR 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 21
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// if not tmp then
14537: LD_VAR 0 5
14541: NOT
14542: IFFALSE 14546
// exit ;
14544: GO 14700
// for i in tmp do
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_VAR 0 5
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14698
// begin d := rand ( 0 , 5 ) ;
14559: LD_ADDR_VAR 0 4
14563: PUSH
14564: LD_INT 0
14566: PPUSH
14567: LD_INT 5
14569: PPUSH
14570: CALL_OW 12
14574: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 250
14589: PPUSH
14590: LD_VAR 0 4
14594: PPUSH
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 12
14600: PPUSH
14601: CALL_OW 12
14605: PPUSH
14606: CALL_OW 272
14610: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 251
14625: PPUSH
14626: LD_VAR 0 4
14630: PPUSH
14631: LD_INT 3
14633: PPUSH
14634: LD_INT 12
14636: PPUSH
14637: CALL_OW 12
14641: PPUSH
14642: CALL_OW 273
14646: ST_TO_ADDR
// if ValidHex ( x , y ) then
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_VAR 0 3
14656: PPUSH
14657: CALL_OW 488
14661: IFFALSE 14696
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_VAR 0 3
14677: PPUSH
14678: LD_INT 3
14680: PPUSH
14681: LD_INT 6
14683: PPUSH
14684: CALL_OW 12
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 483
// end ;
14696: GO 14556
14698: POP
14699: POP
// end ;
14700: PPOPN 5
14702: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14703: LD_EXP 16
14707: PUSH
14708: LD_EXP 51
14712: AND
14713: IFFALSE 14807
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_OWVAR 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 32
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: ST_TO_ADDR
// if not tmp then
14769: LD_VAR 0 2
14773: NOT
14774: IFFALSE 14778
// exit ;
14776: GO 14807
// for i in tmp do
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_VAR 0 2
14787: PUSH
14788: FOR_IN
14789: IFFALSE 14805
// SetFuel ( i , 0 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: LD_INT 0
14798: PPUSH
14799: CALL_OW 240
14803: GO 14788
14805: POP
14806: POP
// end ;
14807: PPOPN 2
14809: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14810: LD_EXP 16
14814: PUSH
14815: LD_EXP 52
14819: AND
14820: IFFALSE 14886
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_OWVAR 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 29
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: ST_TO_ADDR
// if not tmp then
14864: LD_VAR 0 1
14868: NOT
14869: IFFALSE 14873
// exit ;
14871: GO 14886
// DestroyUnit ( tmp [ 1 ] ) ;
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: PPUSH
14882: CALL_OW 65
// end ;
14886: PPOPN 1
14888: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14889: LD_EXP 16
14893: PUSH
14894: LD_EXP 54
14898: AND
14899: IFFALSE 15028
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
// begin uc_side := 0 ;
14907: LD_ADDR_OWVAR 20
14911: PUSH
14912: LD_INT 0
14914: ST_TO_ADDR
// uc_nation := nation_arabian ;
14915: LD_ADDR_OWVAR 21
14919: PUSH
14920: LD_INT 2
14922: ST_TO_ADDR
// hc_gallery :=  ;
14923: LD_ADDR_OWVAR 33
14927: PUSH
14928: LD_STRING 
14930: ST_TO_ADDR
// hc_name :=  ;
14931: LD_ADDR_OWVAR 26
14935: PUSH
14936: LD_STRING 
14938: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14939: LD_INT 1
14941: PPUSH
14942: LD_INT 11
14944: PPUSH
14945: LD_INT 10
14947: PPUSH
14948: CALL_OW 380
// un := CreateHuman ;
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: CALL_OW 44
14961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14974: LD_INT 35
14976: PPUSH
14977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14981: LD_VAR 0 1
14985: PPUSH
14986: LD_INT 22
14988: PUSH
14989: LD_OWVAR 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PPUSH
14998: CALL_OW 69
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 74
15012: PPUSH
15013: CALL_OW 115
// until IsDead ( un ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 301
15026: IFFALSE 14974
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15031: LD_EXP 16
15035: PUSH
15036: LD_EXP 56
15040: AND
15041: IFFALSE 15053
15043: GO 15045
15045: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15046: LD_STRING earthquake(getX(game), 0, 32)
15048: PPUSH
15049: CALL_OW 559
15053: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15054: LD_EXP 16
15058: PUSH
15059: LD_EXP 57
15063: AND
15064: IFFALSE 15155
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
// begin enable ;
15072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15073: LD_ADDR_VAR 0 1
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// if not tmp then
15120: LD_VAR 0 1
15124: NOT
15125: IFFALSE 15129
// exit ;
15127: GO 15155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15129: LD_VAR 0 1
15133: PUSH
15134: LD_INT 1
15136: PPUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 12
15146: ARRAY
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 234
// end ;
15155: PPOPN 1
15157: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15158: LD_EXP 16
15162: PUSH
15163: LD_EXP 58
15167: AND
15168: IFFALSE 15309
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15309
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 9
15274: PPUSH
15275: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15279: LD_INT 28
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15294: LD_INT 29
15296: PPUSH
15297: LD_OWVAR 2
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 322
// end ;
15309: PPOPN 3
15311: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15312: LD_EXP 16
15316: PUSH
15317: LD_EXP 59
15321: AND
15322: IFFALSE 15433
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_INT 22
15339: PUSH
15340: LD_OWVAR 2
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 25
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 3
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15433
// un := tmp [ rand ( 1 , tmp ) ] ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 12
15399: ARRAY
15400: ST_TO_ADDR
// if Crawls ( un ) then
15401: LD_VAR 0 2
15405: PPUSH
15406: CALL_OW 318
15410: IFFALSE 15421
// ComWalk ( un ) ;
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15421: LD_VAR 0 2
15425: PPUSH
15426: LD_INT 8
15428: PPUSH
15429: CALL_OW 336
// end ;
15433: PPOPN 3
15435: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15436: LD_EXP 16
15440: PUSH
15441: LD_EXP 60
15445: AND
15446: IFFALSE 15590
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_OWVAR 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 12
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 34
15497: PUSH
15498: LD_INT 51
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 34
15507: PUSH
15508: LD_INT 32
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15590
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15588
// if GetCargo ( i , mat_artifact ) = 0 then
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 4
15560: PPUSH
15561: CALL_OW 289
15565: PUSH
15566: LD_INT 0
15568: EQUAL
15569: IFFALSE 15586
// SetCargo ( i , mat_siberit , 100 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 3
15578: PPUSH
15579: LD_INT 100
15581: PPUSH
15582: CALL_OW 290
15586: GO 15550
15588: POP
15589: POP
// end ;
15590: PPOPN 2
15592: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15593: LD_EXP 16
15597: PUSH
15598: LD_EXP 61
15602: AND
15603: IFFALSE 15786
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_OWVAR 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// if not tmp then
15634: LD_VAR 0 2
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 15786
// for i := 1 to 2 do
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_INT 2
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15784
// begin uc_side := your_side ;
15659: LD_ADDR_OWVAR 20
15663: PUSH
15664: LD_OWVAR 2
15668: ST_TO_ADDR
// uc_nation := nation_american ;
15669: LD_ADDR_OWVAR 21
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// vc_chassis := us_morphling ;
15677: LD_ADDR_OWVAR 37
15681: PUSH
15682: LD_INT 5
15684: ST_TO_ADDR
// vc_engine := engine_siberite ;
15685: LD_ADDR_OWVAR 39
15689: PUSH
15690: LD_INT 3
15692: ST_TO_ADDR
// vc_control := control_computer ;
15693: LD_ADDR_OWVAR 38
15697: PUSH
15698: LD_INT 3
15700: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15701: LD_ADDR_OWVAR 40
15705: PUSH
15706: LD_INT 10
15708: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 310
15722: NOT
15723: IFFALSE 15770
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15725: CALL_OW 45
15729: PPUSH
15730: LD_VAR 0 2
15734: PUSH
15735: LD_INT 1
15737: ARRAY
15738: PPUSH
15739: CALL_OW 250
15743: PPUSH
15744: LD_VAR 0 2
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 251
15757: PPUSH
15758: LD_INT 12
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 50
15768: GO 15782
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15770: CALL_OW 45
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 51
// end ;
15782: GO 15656
15784: POP
15785: POP
// end ;
15786: PPOPN 2
15788: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15789: LD_EXP 16
15793: PUSH
15794: LD_EXP 62
15798: AND
15799: IFFALSE 16021
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15812: LD_ADDR_VAR 0 6
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_OWVAR 2
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 21
15831: PUSH
15832: LD_INT 1
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 23
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 6
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 16021
// s1 := rand ( 1 , 4 ) ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 12
15890: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15891: LD_ADDR_VAR 0 4
15895: PUSH
15896: LD_VAR 0 6
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PPUSH
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 259
15914: ST_TO_ADDR
// if s1 = 1 then
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 1
15922: EQUAL
15923: IFFALSE 15943
// s2 := rand ( 2 , 4 ) else
15925: LD_ADDR_VAR 0 3
15929: PUSH
15930: LD_INT 2
15932: PPUSH
15933: LD_INT 4
15935: PPUSH
15936: CALL_OW 12
15940: ST_TO_ADDR
15941: GO 15951
// s2 := 1 ;
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15951: LD_ADDR_VAR 0 5
15955: PUSH
15956: LD_VAR 0 6
15960: PUSH
15961: LD_INT 1
15963: ARRAY
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: CALL_OW 259
15974: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15975: LD_VAR 0 6
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_VAR 0 5
15993: PPUSH
15994: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15998: LD_VAR 0 6
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 237
// end ;
16021: PPOPN 6
16023: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16024: LD_EXP 16
16028: PUSH
16029: LD_EXP 63
16033: AND
16034: IFFALSE 16113
16036: GO 16038
16038: DISABLE
16039: LD_INT 0
16041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_OWVAR 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 234
// end ;
16113: PPOPN 1
16115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16116: LD_EXP 16
16120: PUSH
16121: LD_EXP 64
16125: AND
16126: IFFALSE 16238
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_OWVAR 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: LD_INT 27
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 30
16167: PUSH
16168: LD_INT 26
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 69
16199: ST_TO_ADDR
// if not tmp then
16200: LD_VAR 0 2
16204: NOT
16205: IFFALSE 16209
// exit ;
16207: GO 16238
// for i in tmp do
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_IN
16220: IFFALSE 16236
// SetLives ( i , 1 ) ;
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 234
16234: GO 16219
16236: POP
16237: POP
// end ;
16238: PPOPN 2
16240: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16241: LD_EXP 16
16245: PUSH
16246: LD_EXP 65
16250: AND
16251: IFFALSE 16538
16253: GO 16255
16255: DISABLE
16256: LD_INT 0
16258: PPUSH
16259: PPUSH
16260: PPUSH
// begin i := rand ( 1 , 7 ) ;
16261: LD_ADDR_VAR 0 1
16265: PUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: CALL_OW 12
16276: ST_TO_ADDR
// case i of 1 :
16277: LD_VAR 0 1
16281: PUSH
16282: LD_INT 1
16284: DOUBLE
16285: EQUAL
16286: IFTRUE 16290
16288: GO 16300
16290: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16291: LD_STRING earthquake(getX(game), 0, 32)
16293: PPUSH
16294: CALL_OW 559
16298: GO 16538
16300: LD_INT 2
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16322
16308: POP
// begin ToLua ( displayStucuk(); ) ;
16309: LD_STRING displayStucuk();
16311: PPUSH
16312: CALL_OW 559
// ResetFog ;
16316: CALL_OW 335
// end ; 3 :
16320: GO 16538
16322: LD_INT 3
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16434
16330: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_OWVAR 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 25
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// if not tmp then
16367: LD_VAR 0 2
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 16538
// un := tmp [ rand ( 1 , tmp ) ] ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_VAR 0 2
16385: PUSH
16386: LD_INT 1
16388: PPUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: CALL_OW 12
16398: ARRAY
16399: ST_TO_ADDR
// if Crawls ( un ) then
16400: LD_VAR 0 3
16404: PPUSH
16405: CALL_OW 318
16409: IFFALSE 16420
// ComWalk ( un ) ;
16411: LD_VAR 0 3
16415: PPUSH
16416: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 8
16427: PPUSH
16428: CALL_OW 336
// end ; 4 :
16432: GO 16538
16434: LD_INT 4
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16516
16442: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 30
16462: PUSH
16463: LD_INT 29
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// if not tmp then
16479: LD_VAR 0 2
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16538
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: PPUSH
16497: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16501: LD_VAR 0 2
16505: PUSH
16506: LD_INT 1
16508: ARRAY
16509: PPUSH
16510: CALL_OW 65
// end ; 5 .. 7 :
16514: GO 16538
16516: LD_INT 5
16518: DOUBLE
16519: GREATEREQUAL
16520: IFFALSE 16528
16522: LD_INT 7
16524: DOUBLE
16525: LESSEQUAL
16526: IFTRUE 16530
16528: GO 16537
16530: POP
// StreamSibBomb ; end ;
16531: CALL 12775 0 0
16535: GO 16538
16537: POP
// end ;
16538: PPOPN 3
16540: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16541: LD_EXP 16
16545: PUSH
16546: LD_EXP 66
16550: AND
16551: IFFALSE 16707
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 81
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if not tmp then
16615: LD_VAR 0 2
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16707
// p := 0 ;
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16632: LD_INT 35
16634: PPUSH
16635: CALL_OW 67
// p := p + 1 ;
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_INT 1
16651: PLUS
16652: ST_TO_ADDR
// for i in tmp do
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_VAR 0 2
16662: PUSH
16663: FOR_IN
16664: IFFALSE 16695
// if GetLives ( i ) < 1000 then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 256
16675: PUSH
16676: LD_INT 1000
16678: LESS
16679: IFFALSE 16693
// SetLives ( i , 1000 ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 1000
16688: PPUSH
16689: CALL_OW 234
16693: GO 16663
16695: POP
16696: POP
// until p > 20 ;
16697: LD_VAR 0 3
16701: PUSH
16702: LD_INT 20
16704: GREATER
16705: IFFALSE 16632
// end ;
16707: PPOPN 3
16709: END
// every 0 0$1 trigger StreamModeActive and sTime do
16710: LD_EXP 16
16714: PUSH
16715: LD_EXP 67
16719: AND
16720: IFFALSE 16755
16722: GO 16724
16724: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16725: LD_INT 28
16727: PPUSH
16728: LD_OWVAR 2
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16740: LD_INT 30
16742: PPUSH
16743: LD_OWVAR 2
16747: PPUSH
16748: LD_INT 2
16750: PPUSH
16751: CALL_OW 322
// end ;
16755: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16756: LD_EXP 16
16760: PUSH
16761: LD_EXP 68
16765: AND
16766: IFFALSE 16887
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16775: LD_ADDR_VAR 0 2
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_OWVAR 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 21
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: ST_TO_ADDR
// if not tmp then
16829: LD_VAR 0 2
16833: NOT
16834: IFFALSE 16838
// exit ;
16836: GO 16887
// for i in tmp do
16838: LD_ADDR_VAR 0 1
16842: PUSH
16843: LD_VAR 0 2
16847: PUSH
16848: FOR_IN
16849: IFFALSE 16885
// begin if Crawls ( i ) then
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 318
16860: IFFALSE 16871
// ComWalk ( i ) ;
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 138
// SetClass ( i , 2 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 2
16878: PPUSH
16879: CALL_OW 336
// end ;
16883: GO 16848
16885: POP
16886: POP
// end ;
16887: PPOPN 2
16889: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16890: LD_EXP 16
16894: PUSH
16895: LD_EXP 69
16899: AND
16900: IFFALSE 17188
16902: GO 16904
16904: DISABLE
16905: LD_INT 0
16907: PPUSH
16908: PPUSH
16909: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16910: LD_OWVAR 2
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16928: LD_INT 9
16930: PPUSH
16931: LD_OWVAR 2
16935: PPUSH
16936: CALL_OW 343
// uc_side := 9 ;
16940: LD_ADDR_OWVAR 20
16944: PUSH
16945: LD_INT 9
16947: ST_TO_ADDR
// uc_nation := 2 ;
16948: LD_ADDR_OWVAR 21
16952: PUSH
16953: LD_INT 2
16955: ST_TO_ADDR
// hc_name := Dark Warrior ;
16956: LD_ADDR_OWVAR 26
16960: PUSH
16961: LD_STRING Dark Warrior
16963: ST_TO_ADDR
// hc_gallery :=  ;
16964: LD_ADDR_OWVAR 33
16968: PUSH
16969: LD_STRING 
16971: ST_TO_ADDR
// hc_noskilllimit := true ;
16972: LD_ADDR_OWVAR 76
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16980: LD_ADDR_OWVAR 31
16984: PUSH
16985: LD_INT 30
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// un := CreateHuman ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: CALL_OW 44
17012: ST_TO_ADDR
// hc_noskilllimit := false ;
17013: LD_ADDR_OWVAR 76
17017: PUSH
17018: LD_INT 0
17020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 51
// ToLua ( playRanger() ) ;
17033: LD_STRING playRanger()
17035: PPUSH
17036: CALL_OW 559
// p := 0 ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17048: LD_INT 35
17050: PPUSH
17051: CALL_OW 67
// p := p + 1 ;
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: LD_INT 1
17067: PLUS
17068: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL_OW 256
17078: PUSH
17079: LD_INT 1000
17081: LESS
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17096: LD_VAR 0 3
17100: PPUSH
17101: LD_INT 81
17103: PUSH
17104: LD_OWVAR 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 91
17115: PUSH
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 30
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 74
17147: PPUSH
17148: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17152: LD_VAR 0 2
17156: PUSH
17157: LD_INT 80
17159: GREATER
17160: PUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: CALL_OW 301
17170: OR
17171: IFFALSE 17048
// if un then
17173: LD_VAR 0 3
17177: IFFALSE 17188
// RemoveUnit ( un ) ;
17179: LD_VAR 0 3
17183: PPUSH
17184: CALL_OW 64
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17191: LD_EXP 70
17195: IFFALSE 17311
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17241: LD_STRING playComputer()
17243: PPUSH
17244: CALL_OW 559
// if not tmp then
17248: LD_VAR 0 2
17252: NOT
17253: IFFALSE 17257
// exit ;
17255: GO 17311
// for i in tmp do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_VAR 0 2
17266: PUSH
17267: FOR_IN
17268: IFFALSE 17309
// for j := 1 to 4 do
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: DOUBLE
17276: LD_INT 1
17278: DEC
17279: ST_TO_ADDR
17280: LD_INT 4
17282: PUSH
17283: FOR_TO
17284: IFFALSE 17305
// SetSkill ( i , j , 10 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 237
17303: GO 17283
17305: POP
17306: POP
17307: GO 17267
17309: POP
17310: POP
// end ;
17311: PPOPN 3
17313: END
// every 0 0$1 trigger s30 do var i , tmp ;
17314: LD_EXP 71
17318: IFFALSE 17387
17320: GO 17322
17322: DISABLE
17323: LD_INT 0
17325: PPUSH
17326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_OWVAR 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: ST_TO_ADDR
// if not tmp then
17349: LD_VAR 0 2
17353: NOT
17354: IFFALSE 17358
// exit ;
17356: GO 17387
// for i in tmp do
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17385
// SetLives ( i , 300 ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 300
17378: PPUSH
17379: CALL_OW 234
17383: GO 17368
17385: POP
17386: POP
// end ;
17387: PPOPN 2
17389: END
// every 0 0$1 trigger s60 do var i , tmp ;
17390: LD_EXP 72
17394: IFFALSE 17463
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17403: LD_ADDR_VAR 0 2
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not tmp then
17425: LD_VAR 0 2
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17463
// for i in tmp do
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: FOR_IN
17445: IFFALSE 17461
// SetLives ( i , 600 ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 600
17454: PPUSH
17455: CALL_OW 234
17459: GO 17444
17461: POP
17462: POP
// end ;
17463: PPOPN 2
17465: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17466: LD_INT 0
17468: PPUSH
// case cmd of 301 :
17469: LD_VAR 0 1
17473: PUSH
17474: LD_INT 301
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17514
17482: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17483: LD_VAR 0 6
17487: PPUSH
17488: LD_VAR 0 7
17492: PPUSH
17493: LD_VAR 0 8
17497: PPUSH
17498: LD_VAR 0 4
17502: PPUSH
17503: LD_VAR 0 5
17507: PPUSH
17508: CALL 18723 0 5
17512: GO 17635
17514: LD_INT 302
17516: DOUBLE
17517: EQUAL
17518: IFTRUE 17522
17520: GO 17559
17522: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17523: LD_VAR 0 6
17527: PPUSH
17528: LD_VAR 0 7
17532: PPUSH
17533: LD_VAR 0 8
17537: PPUSH
17538: LD_VAR 0 9
17542: PPUSH
17543: LD_VAR 0 4
17547: PPUSH
17548: LD_VAR 0 5
17552: PPUSH
17553: CALL 18814 0 6
17557: GO 17635
17559: LD_INT 303
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17604
17567: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17568: LD_VAR 0 6
17572: PPUSH
17573: LD_VAR 0 7
17577: PPUSH
17578: LD_VAR 0 8
17582: PPUSH
17583: LD_VAR 0 9
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: LD_VAR 0 5
17597: PPUSH
17598: CALL 17640 0 6
17602: GO 17635
17604: LD_INT 304
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17612
17610: GO 17634
17612: POP
// hHackTeleport ( unit , x , y ) ; end ;
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_VAR 0 4
17622: PPUSH
17623: LD_VAR 0 5
17627: PPUSH
17628: CALL 19407 0 3
17632: GO 17635
17634: POP
// end ;
17635: LD_VAR 0 12
17639: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17644: LD_VAR 0 1
17648: PUSH
17649: LD_INT 1
17651: LESS
17652: PUSH
17653: LD_VAR 0 1
17657: PUSH
17658: LD_INT 3
17660: GREATER
17661: OR
17662: PUSH
17663: LD_VAR 0 5
17667: PPUSH
17668: LD_VAR 0 6
17672: PPUSH
17673: CALL_OW 428
17677: OR
17678: IFFALSE 17682
// exit ;
17680: GO 18410
// uc_side := your_side ;
17682: LD_ADDR_OWVAR 20
17686: PUSH
17687: LD_OWVAR 2
17691: ST_TO_ADDR
// uc_nation := nation ;
17692: LD_ADDR_OWVAR 21
17696: PUSH
17697: LD_VAR 0 1
17701: ST_TO_ADDR
// bc_level = 1 ;
17702: LD_ADDR_OWVAR 43
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// case btype of 1 :
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 1
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// bc_type := b_depot ; 2 :
17724: LD_ADDR_OWVAR 42
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
17732: GO 18354
17734: LD_INT 2
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17753
17742: POP
// bc_type := b_warehouse ; 3 :
17743: LD_ADDR_OWVAR 42
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
17751: GO 18354
17753: LD_INT 3
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17772
17761: POP
// bc_type := b_lab ; 4 .. 9 :
17762: LD_ADDR_OWVAR 42
17766: PUSH
17767: LD_INT 6
17769: ST_TO_ADDR
17770: GO 18354
17772: LD_INT 4
17774: DOUBLE
17775: GREATEREQUAL
17776: IFFALSE 17784
17778: LD_INT 9
17780: DOUBLE
17781: LESSEQUAL
17782: IFTRUE 17786
17784: GO 17846
17786: POP
// begin bc_type := b_lab_half ;
17787: LD_ADDR_OWVAR 42
17791: PUSH
17792: LD_INT 7
17794: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17795: LD_ADDR_OWVAR 44
17799: PUSH
17800: LD_INT 10
17802: PUSH
17803: LD_INT 11
17805: PUSH
17806: LD_INT 12
17808: PUSH
17809: LD_INT 15
17811: PUSH
17812: LD_INT 14
17814: PUSH
17815: LD_INT 13
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 3
17833: MINUS
17834: ARRAY
17835: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17836: LD_ADDR_OWVAR 45
17840: PUSH
17841: LD_INT 9
17843: ST_TO_ADDR
// end ; 10 .. 13 :
17844: GO 18354
17846: LD_INT 10
17848: DOUBLE
17849: GREATEREQUAL
17850: IFFALSE 17858
17852: LD_INT 13
17854: DOUBLE
17855: LESSEQUAL
17856: IFTRUE 17860
17858: GO 17937
17860: POP
// begin bc_type := b_lab_full ;
17861: LD_ADDR_OWVAR 42
17865: PUSH
17866: LD_INT 8
17868: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17869: LD_ADDR_OWVAR 44
17873: PUSH
17874: LD_INT 10
17876: PUSH
17877: LD_INT 12
17879: PUSH
17880: LD_INT 14
17882: PUSH
17883: LD_INT 13
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: LD_VAR 0 2
17896: PUSH
17897: LD_INT 9
17899: MINUS
17900: ARRAY
17901: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17902: LD_ADDR_OWVAR 45
17906: PUSH
17907: LD_INT 11
17909: PUSH
17910: LD_INT 15
17912: PUSH
17913: LD_INT 12
17915: PUSH
17916: LD_INT 15
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 9
17932: MINUS
17933: ARRAY
17934: ST_TO_ADDR
// end ; 14 :
17935: GO 18354
17937: LD_INT 14
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 17956
17945: POP
// bc_type := b_workshop ; 15 :
17946: LD_ADDR_OWVAR 42
17950: PUSH
17951: LD_INT 2
17953: ST_TO_ADDR
17954: GO 18354
17956: LD_INT 15
17958: DOUBLE
17959: EQUAL
17960: IFTRUE 17964
17962: GO 17975
17964: POP
// bc_type := b_factory ; 16 :
17965: LD_ADDR_OWVAR 42
17969: PUSH
17970: LD_INT 3
17972: ST_TO_ADDR
17973: GO 18354
17975: LD_INT 16
17977: DOUBLE
17978: EQUAL
17979: IFTRUE 17983
17981: GO 17994
17983: POP
// bc_type := b_ext_gun ; 17 :
17984: LD_ADDR_OWVAR 42
17988: PUSH
17989: LD_INT 17
17991: ST_TO_ADDR
17992: GO 18354
17994: LD_INT 17
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18030
18002: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18003: LD_ADDR_OWVAR 42
18007: PUSH
18008: LD_INT 19
18010: PUSH
18011: LD_INT 23
18013: PUSH
18014: LD_INT 19
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: LD_VAR 0 1
18026: ARRAY
18027: ST_TO_ADDR
18028: GO 18354
18030: LD_INT 18
18032: DOUBLE
18033: EQUAL
18034: IFTRUE 18038
18036: GO 18049
18038: POP
// bc_type := b_ext_radar ; 19 :
18039: LD_ADDR_OWVAR 42
18043: PUSH
18044: LD_INT 20
18046: ST_TO_ADDR
18047: GO 18354
18049: LD_INT 19
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18068
18057: POP
// bc_type := b_ext_radio ; 20 :
18058: LD_ADDR_OWVAR 42
18062: PUSH
18063: LD_INT 22
18065: ST_TO_ADDR
18066: GO 18354
18068: LD_INT 20
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18087
18076: POP
// bc_type := b_ext_siberium ; 21 :
18077: LD_ADDR_OWVAR 42
18081: PUSH
18082: LD_INT 21
18084: ST_TO_ADDR
18085: GO 18354
18087: LD_INT 21
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18106
18095: POP
// bc_type := b_ext_computer ; 22 :
18096: LD_ADDR_OWVAR 42
18100: PUSH
18101: LD_INT 24
18103: ST_TO_ADDR
18104: GO 18354
18106: LD_INT 22
18108: DOUBLE
18109: EQUAL
18110: IFTRUE 18114
18112: GO 18125
18114: POP
// bc_type := b_ext_track ; 23 :
18115: LD_ADDR_OWVAR 42
18119: PUSH
18120: LD_INT 16
18122: ST_TO_ADDR
18123: GO 18354
18125: LD_INT 23
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18133
18131: GO 18144
18133: POP
// bc_type := b_ext_laser ; 24 :
18134: LD_ADDR_OWVAR 42
18138: PUSH
18139: LD_INT 25
18141: ST_TO_ADDR
18142: GO 18354
18144: LD_INT 24
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18163
18152: POP
// bc_type := b_control_tower ; 25 :
18153: LD_ADDR_OWVAR 42
18157: PUSH
18158: LD_INT 36
18160: ST_TO_ADDR
18161: GO 18354
18163: LD_INT 25
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18182
18171: POP
// bc_type := b_breastwork ; 26 :
18172: LD_ADDR_OWVAR 42
18176: PUSH
18177: LD_INT 31
18179: ST_TO_ADDR
18180: GO 18354
18182: LD_INT 26
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// bc_type := b_bunker ; 27 :
18191: LD_ADDR_OWVAR 42
18195: PUSH
18196: LD_INT 32
18198: ST_TO_ADDR
18199: GO 18354
18201: LD_INT 27
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18220
18209: POP
// bc_type := b_turret ; 28 :
18210: LD_ADDR_OWVAR 42
18214: PUSH
18215: LD_INT 33
18217: ST_TO_ADDR
18218: GO 18354
18220: LD_INT 28
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18239
18228: POP
// bc_type := b_armoury ; 29 :
18229: LD_ADDR_OWVAR 42
18233: PUSH
18234: LD_INT 4
18236: ST_TO_ADDR
18237: GO 18354
18239: LD_INT 29
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18258
18247: POP
// bc_type := b_barracks ; 30 :
18248: LD_ADDR_OWVAR 42
18252: PUSH
18253: LD_INT 5
18255: ST_TO_ADDR
18256: GO 18354
18258: LD_INT 30
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18277
18266: POP
// bc_type := b_solar_power ; 31 :
18267: LD_ADDR_OWVAR 42
18271: PUSH
18272: LD_INT 27
18274: ST_TO_ADDR
18275: GO 18354
18277: LD_INT 31
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18296
18285: POP
// bc_type := b_oil_power ; 32 :
18286: LD_ADDR_OWVAR 42
18290: PUSH
18291: LD_INT 26
18293: ST_TO_ADDR
18294: GO 18354
18296: LD_INT 32
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18315
18304: POP
// bc_type := b_siberite_power ; 33 :
18305: LD_ADDR_OWVAR 42
18309: PUSH
18310: LD_INT 28
18312: ST_TO_ADDR
18313: GO 18354
18315: LD_INT 33
18317: DOUBLE
18318: EQUAL
18319: IFTRUE 18323
18321: GO 18334
18323: POP
// bc_type := b_oil_mine ; 34 :
18324: LD_ADDR_OWVAR 42
18328: PUSH
18329: LD_INT 29
18331: ST_TO_ADDR
18332: GO 18354
18334: LD_INT 34
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18353
18342: POP
// bc_type := b_siberite_mine ; end ;
18343: LD_ADDR_OWVAR 42
18347: PUSH
18348: LD_INT 30
18350: ST_TO_ADDR
18351: GO 18354
18353: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18354: LD_ADDR_VAR 0 8
18358: PUSH
18359: LD_VAR 0 5
18363: PPUSH
18364: LD_VAR 0 6
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: CALL_OW 47
18378: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18379: LD_OWVAR 42
18383: PUSH
18384: LD_INT 32
18386: PUSH
18387: LD_INT 33
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: IN
18394: IFFALSE 18410
// PlaceWeaponTurret ( b , weapon ) ;
18396: LD_VAR 0 8
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: CALL_OW 431
// end ;
18410: LD_VAR 0 7
18414: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18415: LD_INT 0
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18421: LD_ADDR_VAR 0 4
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_OWVAR 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 30
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: ST_TO_ADDR
// if not tmp then
18475: LD_VAR 0 4
18479: NOT
18480: IFFALSE 18484
// exit ;
18482: GO 18543
// for i in tmp do
18484: LD_ADDR_VAR 0 2
18488: PUSH
18489: LD_VAR 0 4
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18541
// for j = 1 to 3 do
18497: LD_ADDR_VAR 0 3
18501: PUSH
18502: DOUBLE
18503: LD_INT 1
18505: DEC
18506: ST_TO_ADDR
18507: LD_INT 3
18509: PUSH
18510: FOR_TO
18511: IFFALSE 18537
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 274
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: LD_INT 99999
18530: PPUSH
18531: CALL_OW 277
18535: GO 18510
18537: POP
18538: POP
18539: GO 18494
18541: POP
18542: POP
// end ;
18543: LD_VAR 0 1
18547: RET
// export function hHackSetLevel10 ; var i , j ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
18552: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18553: LD_ADDR_VAR 0 2
18557: PUSH
18558: LD_INT 21
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PPUSH
18568: CALL_OW 69
18572: PUSH
18573: FOR_IN
18574: IFFALSE 18626
// if IsSelected ( i ) then
18576: LD_VAR 0 2
18580: PPUSH
18581: CALL_OW 306
18585: IFFALSE 18624
// begin for j := 1 to 4 do
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: DOUBLE
18593: LD_INT 1
18595: DEC
18596: ST_TO_ADDR
18597: LD_INT 4
18599: PUSH
18600: FOR_TO
18601: IFFALSE 18622
// SetSkill ( i , j , 10 ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 10
18615: PPUSH
18616: CALL_OW 237
18620: GO 18600
18622: POP
18623: POP
// end ;
18624: GO 18573
18626: POP
18627: POP
// end ;
18628: LD_VAR 0 1
18632: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18633: LD_INT 0
18635: PPUSH
18636: PPUSH
18637: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18638: LD_ADDR_VAR 0 2
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_OWVAR 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 21
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: PUSH
18674: FOR_IN
18675: IFFALSE 18716
// begin for j := 1 to 4 do
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: DOUBLE
18683: LD_INT 1
18685: DEC
18686: ST_TO_ADDR
18687: LD_INT 4
18689: PUSH
18690: FOR_TO
18691: IFFALSE 18712
// SetSkill ( i , j , 10 ) ;
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 10
18705: PPUSH
18706: CALL_OW 237
18710: GO 18690
18712: POP
18713: POP
// end ;
18714: GO 18674
18716: POP
18717: POP
// end ;
18718: LD_VAR 0 1
18722: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18723: LD_INT 0
18725: PPUSH
// uc_side := your_side ;
18726: LD_ADDR_OWVAR 20
18730: PUSH
18731: LD_OWVAR 2
18735: ST_TO_ADDR
// uc_nation := nation ;
18736: LD_ADDR_OWVAR 21
18740: PUSH
18741: LD_VAR 0 1
18745: ST_TO_ADDR
// InitHc ;
18746: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18750: LD_INT 0
18752: PPUSH
18753: LD_VAR 0 2
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18767: LD_VAR 0 4
18771: PPUSH
18772: LD_VAR 0 5
18776: PPUSH
18777: CALL_OW 428
18781: PUSH
18782: LD_INT 0
18784: EQUAL
18785: IFFALSE 18809
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18787: CALL_OW 44
18791: PPUSH
18792: LD_VAR 0 4
18796: PPUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 48
// end ;
18809: LD_VAR 0 6
18813: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
// uc_side := your_side ;
18818: LD_ADDR_OWVAR 20
18822: PUSH
18823: LD_OWVAR 2
18827: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18828: LD_VAR 0 1
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: LD_INT 4
18844: PUSH
18845: LD_INT 5
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: IN
18855: IFFALSE 18867
// uc_nation := nation_american else
18857: LD_ADDR_OWVAR 21
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
18865: GO 18910
// if chassis in [ 11 , 12 , 13 , 14 ] then
18867: LD_VAR 0 1
18871: PUSH
18872: LD_INT 11
18874: PUSH
18875: LD_INT 12
18877: PUSH
18878: LD_INT 13
18880: PUSH
18881: LD_INT 14
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: IN
18890: IFFALSE 18902
// uc_nation := nation_arabian else
18892: LD_ADDR_OWVAR 21
18896: PUSH
18897: LD_INT 2
18899: ST_TO_ADDR
18900: GO 18910
// uc_nation := nation_russian ;
18902: LD_ADDR_OWVAR 21
18906: PUSH
18907: LD_INT 3
18909: ST_TO_ADDR
// vc_chassis := chassis ;
18910: LD_ADDR_OWVAR 37
18914: PUSH
18915: LD_VAR 0 1
18919: ST_TO_ADDR
// vc_engine := engine ;
18920: LD_ADDR_OWVAR 39
18924: PUSH
18925: LD_VAR 0 2
18929: ST_TO_ADDR
// vc_control := control ;
18930: LD_ADDR_OWVAR 38
18934: PUSH
18935: LD_VAR 0 3
18939: ST_TO_ADDR
// vc_weapon := weapon ;
18940: LD_ADDR_OWVAR 40
18944: PUSH
18945: LD_VAR 0 4
18949: ST_TO_ADDR
// un := CreateVehicle ;
18950: LD_ADDR_VAR 0 8
18954: PUSH
18955: CALL_OW 45
18959: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18960: LD_VAR 0 8
18964: PPUSH
18965: LD_INT 0
18967: PPUSH
18968: LD_INT 5
18970: PPUSH
18971: CALL_OW 12
18975: PPUSH
18976: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18980: LD_VAR 0 8
18984: PPUSH
18985: LD_VAR 0 5
18989: PPUSH
18990: LD_VAR 0 6
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 48
// end ;
19002: LD_VAR 0 7
19006: RET
// export hInvincible ; every 1 do
19007: GO 19009
19009: DISABLE
// hInvincible := [ ] ;
19010: LD_ADDR_EXP 73
19014: PUSH
19015: EMPTY
19016: ST_TO_ADDR
19017: END
// every 10 do var i ;
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
// begin enable ;
19024: ENABLE
// if not hInvincible then
19025: LD_EXP 73
19029: NOT
19030: IFFALSE 19034
// exit ;
19032: GO 19078
// for i in hInvincible do
19034: LD_ADDR_VAR 0 1
19038: PUSH
19039: LD_EXP 73
19043: PUSH
19044: FOR_IN
19045: IFFALSE 19076
// if GetLives ( i ) < 1000 then
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 256
19056: PUSH
19057: LD_INT 1000
19059: LESS
19060: IFFALSE 19074
// SetLives ( i , 1000 ) ;
19062: LD_VAR 0 1
19066: PPUSH
19067: LD_INT 1000
19069: PPUSH
19070: CALL_OW 234
19074: GO 19044
19076: POP
19077: POP
// end ;
19078: PPOPN 1
19080: END
// export function hHackInvincible ; var i ; begin
19081: LD_INT 0
19083: PPUSH
19084: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: LD_INT 21
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 21
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: PUSH
19123: FOR_IN
19124: IFFALSE 19185
// if IsSelected ( i ) then
19126: LD_VAR 0 2
19130: PPUSH
19131: CALL_OW 306
19135: IFFALSE 19183
// begin if i in hInvincible then
19137: LD_VAR 0 2
19141: PUSH
19142: LD_EXP 73
19146: IN
19147: IFFALSE 19167
// hInvincible := hInvincible diff i else
19149: LD_ADDR_EXP 73
19153: PUSH
19154: LD_EXP 73
19158: PUSH
19159: LD_VAR 0 2
19163: DIFF
19164: ST_TO_ADDR
19165: GO 19183
// hInvincible := hInvincible union i ;
19167: LD_ADDR_EXP 73
19171: PUSH
19172: LD_EXP 73
19176: PUSH
19177: LD_VAR 0 2
19181: UNION
19182: ST_TO_ADDR
// end ;
19183: GO 19123
19185: POP
19186: POP
// end ;
19187: LD_VAR 0 1
19191: RET
// export function hHackInvisible ; var i , j ; begin
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
19196: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 21
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19242
// if IsSelected ( i ) then
19220: LD_VAR 0 2
19224: PPUSH
19225: CALL_OW 306
19229: IFFALSE 19240
// ComForceInvisible ( i ) ;
19231: LD_VAR 0 2
19235: PPUSH
19236: CALL_OW 496
19240: GO 19217
19242: POP
19243: POP
// end ;
19244: LD_VAR 0 1
19248: RET
// export function hHackChangeYourSide ; begin
19249: LD_INT 0
19251: PPUSH
// if your_side = 8 then
19252: LD_OWVAR 2
19256: PUSH
19257: LD_INT 8
19259: EQUAL
19260: IFFALSE 19272
// your_side := 0 else
19262: LD_ADDR_OWVAR 2
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
19270: GO 19286
// your_side := your_side + 1 ;
19272: LD_ADDR_OWVAR 2
19276: PUSH
19277: LD_OWVAR 2
19281: PUSH
19282: LD_INT 1
19284: PLUS
19285: ST_TO_ADDR
// end ;
19286: LD_VAR 0 1
19290: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19291: LD_INT 0
19293: PPUSH
19294: PPUSH
19295: PPUSH
// for i in all_units do
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_OWVAR 3
19305: PUSH
19306: FOR_IN
19307: IFFALSE 19385
// if IsSelected ( i ) then
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 306
19318: IFFALSE 19383
// begin j := GetSide ( i ) ;
19320: LD_ADDR_VAR 0 3
19324: PUSH
19325: LD_VAR 0 2
19329: PPUSH
19330: CALL_OW 255
19334: ST_TO_ADDR
// if j = 8 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 8
19342: EQUAL
19343: IFFALSE 19355
// j := 0 else
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
19353: GO 19369
// j := j + 1 ;
19355: LD_ADDR_VAR 0 3
19359: PUSH
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 1
19367: PLUS
19368: ST_TO_ADDR
// SetSide ( i , j ) ;
19369: LD_VAR 0 2
19373: PPUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 235
// end ;
19383: GO 19306
19385: POP
19386: POP
// end ;
19387: LD_VAR 0 1
19391: RET
// export function hHackFog ; begin
19392: LD_INT 0
19394: PPUSH
// FogOff ( true ) ;
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 344
// end ;
19402: LD_VAR 0 1
19406: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19407: LD_INT 0
19409: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19410: LD_VAR 0 1
19414: PPUSH
19415: LD_VAR 0 2
19419: PPUSH
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 483
// CenterOnXY ( x , y ) ;
19435: LD_VAR 0 2
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: CALL_OW 84
// end ;
19449: LD_VAR 0 4
19453: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19458: LD_VAR 0 1
19462: NOT
19463: PUSH
19464: LD_VAR 0 2
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 488
19478: NOT
19479: OR
19480: PUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 266
19490: PUSH
19491: LD_INT 3
19493: NONEQUAL
19494: PUSH
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 247
19504: PUSH
19505: LD_INT 1
19507: EQUAL
19508: NOT
19509: AND
19510: OR
19511: IFFALSE 19515
// exit ;
19513: GO 19664
// if GetType ( factory ) = unit_human then
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL_OW 247
19524: PUSH
19525: LD_INT 1
19527: EQUAL
19528: IFFALSE 19545
// factory := IsInUnit ( factory ) ;
19530: LD_ADDR_VAR 0 1
19534: PUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 310
19544: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 266
19554: PUSH
19555: LD_INT 3
19557: NONEQUAL
19558: IFFALSE 19562
// exit ;
19560: GO 19664
// if HexInfo ( x , y ) = factory then
19562: LD_VAR 0 2
19566: PPUSH
19567: LD_VAR 0 3
19571: PPUSH
19572: CALL_OW 428
19576: PUSH
19577: LD_VAR 0 1
19581: EQUAL
19582: IFFALSE 19609
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19584: LD_ADDR_EXP 74
19588: PUSH
19589: LD_EXP 74
19593: PPUSH
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_INT 0
19601: PPUSH
19602: CALL_OW 1
19606: ST_TO_ADDR
19607: GO 19660
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19609: LD_ADDR_EXP 74
19613: PUSH
19614: LD_EXP 74
19618: PPUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 255
19633: PUSH
19634: LD_VAR 0 1
19638: PUSH
19639: LD_VAR 0 2
19643: PUSH
19644: LD_VAR 0 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 1
19659: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19660: CALL 19669 0 0
// end ;
19664: LD_VAR 0 4
19668: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
19673: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19674: LD_STRING resetFactoryWaypoint();
19676: PPUSH
19677: CALL_OW 559
// if factoryWaypoints then
19681: LD_EXP 74
19685: IFFALSE 19811
// begin list := PrepareArray ( factoryWaypoints ) ;
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_EXP 74
19696: PPUSH
19697: CALL 67116 0 1
19701: ST_TO_ADDR
// for i := 1 to list do
19702: LD_ADDR_VAR 0 2
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_VAR 0 3
19716: PUSH
19717: FOR_TO
19718: IFFALSE 19809
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19720: LD_STRING setFactoryWaypointXY(
19722: PUSH
19723: LD_VAR 0 3
19727: PUSH
19728: LD_VAR 0 2
19732: ARRAY
19733: PUSH
19734: LD_INT 1
19736: ARRAY
19737: STR
19738: PUSH
19739: LD_STRING ,
19741: STR
19742: PUSH
19743: LD_VAR 0 3
19747: PUSH
19748: LD_VAR 0 2
19752: ARRAY
19753: PUSH
19754: LD_INT 2
19756: ARRAY
19757: STR
19758: PUSH
19759: LD_STRING ,
19761: STR
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 2
19772: ARRAY
19773: PUSH
19774: LD_INT 3
19776: ARRAY
19777: STR
19778: PUSH
19779: LD_STRING ,
19781: STR
19782: PUSH
19783: LD_VAR 0 3
19787: PUSH
19788: LD_VAR 0 2
19792: ARRAY
19793: PUSH
19794: LD_INT 4
19796: ARRAY
19797: STR
19798: PUSH
19799: LD_STRING )
19801: STR
19802: PPUSH
19803: CALL_OW 559
19807: GO 19717
19809: POP
19810: POP
// end ; end ;
19811: LD_VAR 0 1
19815: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19816: LD_INT 0
19818: PPUSH
// if HexInfo ( x , y ) = warehouse then
19819: LD_VAR 0 2
19823: PPUSH
19824: LD_VAR 0 3
19828: PPUSH
19829: CALL_OW 428
19833: PUSH
19834: LD_VAR 0 1
19838: EQUAL
19839: IFFALSE 19866
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19841: LD_ADDR_EXP 75
19845: PUSH
19846: LD_EXP 75
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: LD_INT 0
19858: PPUSH
19859: CALL_OW 1
19863: ST_TO_ADDR
19864: GO 19917
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19866: LD_ADDR_EXP 75
19870: PUSH
19871: LD_EXP 75
19875: PPUSH
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 255
19890: PUSH
19891: LD_VAR 0 1
19895: PUSH
19896: LD_VAR 0 2
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 1
19916: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19917: CALL 19926 0 0
// end ;
19921: LD_VAR 0 4
19925: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19931: LD_STRING resetWarehouseGatheringPoints();
19933: PPUSH
19934: CALL_OW 559
// if warehouseGatheringPoints then
19938: LD_EXP 75
19942: IFFALSE 20068
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_EXP 75
19953: PPUSH
19954: CALL 67116 0 1
19958: ST_TO_ADDR
// for i := 1 to list do
19959: LD_ADDR_VAR 0 2
19963: PUSH
19964: DOUBLE
19965: LD_INT 1
19967: DEC
19968: ST_TO_ADDR
19969: LD_VAR 0 3
19973: PUSH
19974: FOR_TO
19975: IFFALSE 20066
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19977: LD_STRING setWarehouseGatheringPointXY(
19979: PUSH
19980: LD_VAR 0 3
19984: PUSH
19985: LD_VAR 0 2
19989: ARRAY
19990: PUSH
19991: LD_INT 1
19993: ARRAY
19994: STR
19995: PUSH
19996: LD_STRING ,
19998: STR
19999: PUSH
20000: LD_VAR 0 3
20004: PUSH
20005: LD_VAR 0 2
20009: ARRAY
20010: PUSH
20011: LD_INT 2
20013: ARRAY
20014: STR
20015: PUSH
20016: LD_STRING ,
20018: STR
20019: PUSH
20020: LD_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: ARRAY
20030: PUSH
20031: LD_INT 3
20033: ARRAY
20034: STR
20035: PUSH
20036: LD_STRING ,
20038: STR
20039: PUSH
20040: LD_VAR 0 3
20044: PUSH
20045: LD_VAR 0 2
20049: ARRAY
20050: PUSH
20051: LD_INT 4
20053: ARRAY
20054: STR
20055: PUSH
20056: LD_STRING )
20058: STR
20059: PPUSH
20060: CALL_OW 559
20064: GO 19974
20066: POP
20067: POP
// end ; end ;
20068: LD_VAR 0 1
20072: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20073: LD_EXP 75
20077: IFFALSE 20762
20079: GO 20081
20081: DISABLE
20082: LD_INT 0
20084: PPUSH
20085: PPUSH
20086: PPUSH
20087: PPUSH
20088: PPUSH
20089: PPUSH
20090: PPUSH
20091: PPUSH
20092: PPUSH
// begin enable ;
20093: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20094: LD_ADDR_VAR 0 3
20098: PUSH
20099: LD_EXP 75
20103: PPUSH
20104: CALL 67116 0 1
20108: ST_TO_ADDR
// if not list then
20109: LD_VAR 0 3
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20762
// for i := 1 to list do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_VAR 0 3
20132: PUSH
20133: FOR_TO
20134: IFFALSE 20760
// begin depot := list [ i ] [ 2 ] ;
20136: LD_ADDR_VAR 0 8
20140: PUSH
20141: LD_VAR 0 3
20145: PUSH
20146: LD_VAR 0 1
20150: ARRAY
20151: PUSH
20152: LD_INT 2
20154: ARRAY
20155: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20156: LD_ADDR_VAR 0 5
20160: PUSH
20161: LD_VAR 0 3
20165: PUSH
20166: LD_VAR 0 1
20170: ARRAY
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20176: LD_VAR 0 8
20180: PPUSH
20181: CALL_OW 301
20185: PUSH
20186: LD_VAR 0 5
20190: PUSH
20191: LD_VAR 0 8
20195: PPUSH
20196: CALL_OW 255
20200: NONEQUAL
20201: OR
20202: IFFALSE 20231
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20204: LD_ADDR_EXP 75
20208: PUSH
20209: LD_EXP 75
20213: PPUSH
20214: LD_VAR 0 8
20218: PPUSH
20219: LD_INT 0
20221: PPUSH
20222: CALL_OW 1
20226: ST_TO_ADDR
// exit ;
20227: POP
20228: POP
20229: GO 20762
// end ; x := list [ i ] [ 3 ] ;
20231: LD_ADDR_VAR 0 6
20235: PUSH
20236: LD_VAR 0 3
20240: PUSH
20241: LD_VAR 0 1
20245: ARRAY
20246: PUSH
20247: LD_INT 3
20249: ARRAY
20250: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20251: LD_ADDR_VAR 0 7
20255: PUSH
20256: LD_VAR 0 3
20260: PUSH
20261: LD_VAR 0 1
20265: ARRAY
20266: PUSH
20267: LD_INT 4
20269: ARRAY
20270: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20271: LD_ADDR_VAR 0 9
20275: PUSH
20276: LD_VAR 0 6
20280: PPUSH
20281: LD_VAR 0 7
20285: PPUSH
20286: LD_INT 16
20288: PPUSH
20289: CALL 65704 0 3
20293: ST_TO_ADDR
// if not cratesNearbyPoint then
20294: LD_VAR 0 9
20298: NOT
20299: IFFALSE 20305
// exit ;
20301: POP
20302: POP
20303: GO 20762
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20305: LD_ADDR_VAR 0 4
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_VAR 0 5
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 3
20324: PUSH
20325: LD_INT 60
20327: PUSH
20328: EMPTY
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 91
20337: PUSH
20338: LD_VAR 0 8
20342: PUSH
20343: LD_INT 6
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 25
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 25
20366: PUSH
20367: LD_INT 16
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: PPUSH
20385: CALL_OW 69
20389: PUSH
20390: LD_VAR 0 8
20394: PPUSH
20395: CALL_OW 313
20399: PPUSH
20400: LD_INT 3
20402: PUSH
20403: LD_INT 60
20405: PUSH
20406: EMPTY
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 25
20428: PUSH
20429: LD_INT 16
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PPUSH
20445: CALL_OW 72
20449: UNION
20450: ST_TO_ADDR
// if tmp then
20451: LD_VAR 0 4
20455: IFFALSE 20535
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20457: LD_ADDR_VAR 0 4
20461: PUSH
20462: LD_VAR 0 4
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL 63673 0 2
20474: ST_TO_ADDR
// for j in tmp do
20475: LD_ADDR_VAR 0 2
20479: PUSH
20480: LD_VAR 0 4
20484: PUSH
20485: FOR_IN
20486: IFFALSE 20529
// begin if IsInUnit ( j ) then
20488: LD_VAR 0 2
20492: PPUSH
20493: CALL_OW 310
20497: IFFALSE 20508
// ComExit ( j ) ;
20499: LD_VAR 0 2
20503: PPUSH
20504: CALL 63756 0 1
// AddComCollect ( j , x , y ) ;
20508: LD_VAR 0 2
20512: PPUSH
20513: LD_VAR 0 6
20517: PPUSH
20518: LD_VAR 0 7
20522: PPUSH
20523: CALL_OW 177
// end ;
20527: GO 20485
20529: POP
20530: POP
// exit ;
20531: POP
20532: POP
20533: GO 20762
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20535: LD_ADDR_VAR 0 4
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_VAR 0 5
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 91
20554: PUSH
20555: LD_VAR 0 8
20559: PUSH
20560: LD_INT 8
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: LD_INT 34
20573: PUSH
20574: LD_INT 12
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 34
20583: PUSH
20584: LD_INT 51
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 34
20593: PUSH
20594: LD_INT 32
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 34
20603: PUSH
20604: LD_INT 89
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 69
20627: ST_TO_ADDR
// if tmp then
20628: LD_VAR 0 4
20632: IFFALSE 20758
// begin for j in tmp do
20634: LD_ADDR_VAR 0 2
20638: PUSH
20639: LD_VAR 0 4
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20756
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 262
20656: PUSH
20657: LD_INT 3
20659: EQUAL
20660: PUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: CALL_OW 261
20670: PUSH
20671: LD_INT 20
20673: GREATER
20674: OR
20675: PUSH
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 314
20685: NOT
20686: AND
20687: PUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 263
20697: PUSH
20698: LD_INT 1
20700: NONEQUAL
20701: PUSH
20702: LD_VAR 0 2
20706: PPUSH
20707: CALL_OW 311
20711: OR
20712: AND
20713: IFFALSE 20754
// begin ComCollect ( j , x , y ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 6
20724: PPUSH
20725: LD_VAR 0 7
20729: PPUSH
20730: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20734: LD_VAR 0 2
20738: PPUSH
20739: LD_VAR 0 8
20743: PPUSH
20744: CALL_OW 172
// exit ;
20748: POP
20749: POP
20750: POP
20751: POP
20752: GO 20762
// end ;
20754: GO 20644
20756: POP
20757: POP
// end ; end ;
20758: GO 20133
20760: POP
20761: POP
// end ; end_of_file
20762: PPOPN 9
20764: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20765: LD_INT 0
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 264
20780: PUSH
20781: LD_INT 91
20783: EQUAL
20784: IFFALSE 20856
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20786: LD_INT 68
20788: PPUSH
20789: LD_VAR 0 1
20793: PPUSH
20794: CALL_OW 255
20798: PPUSH
20799: CALL_OW 321
20803: PUSH
20804: LD_INT 2
20806: EQUAL
20807: IFFALSE 20819
// eff := 70 else
20809: LD_ADDR_VAR 0 4
20813: PUSH
20814: LD_INT 70
20816: ST_TO_ADDR
20817: GO 20827
// eff := 30 ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_INT 30
20826: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 250
20836: PPUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 251
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: CALL_OW 495
// end ; end ;
20856: LD_VAR 0 2
20860: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20861: LD_INT 0
20863: PPUSH
// end ;
20864: LD_VAR 0 4
20868: RET
// export function SOS_Command ( cmd ) ; begin
20869: LD_INT 0
20871: PPUSH
// end ;
20872: LD_VAR 0 2
20876: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20877: LD_INT 0
20879: PPUSH
// end ;
20880: LD_VAR 0 6
20884: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20885: LD_INT 0
20887: PPUSH
20888: PPUSH
// if not vehicle or not factory then
20889: LD_VAR 0 1
20893: NOT
20894: PUSH
20895: LD_VAR 0 2
20899: NOT
20900: OR
20901: IFFALSE 20905
// exit ;
20903: GO 21136
// if factoryWaypoints >= factory then
20905: LD_EXP 74
20909: PUSH
20910: LD_VAR 0 2
20914: GREATEREQUAL
20915: IFFALSE 21136
// if factoryWaypoints [ factory ] then
20917: LD_EXP 74
20921: PUSH
20922: LD_VAR 0 2
20926: ARRAY
20927: IFFALSE 21136
// begin if GetControl ( vehicle ) = control_manual then
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 263
20938: PUSH
20939: LD_INT 1
20941: EQUAL
20942: IFFALSE 21023
// begin driver := IsDrivenBy ( vehicle ) ;
20944: LD_ADDR_VAR 0 4
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 311
20958: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_EXP 74
20968: PUSH
20969: LD_VAR 0 2
20973: ARRAY
20974: PUSH
20975: LD_INT 3
20977: ARRAY
20978: PPUSH
20979: LD_EXP 74
20983: PUSH
20984: LD_VAR 0 2
20988: ARRAY
20989: PUSH
20990: LD_INT 4
20992: ARRAY
20993: PPUSH
20994: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20998: LD_VAR 0 4
21002: PPUSH
21003: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21007: LD_VAR 0 4
21011: PPUSH
21012: LD_VAR 0 2
21016: PPUSH
21017: CALL_OW 180
// end else
21021: GO 21136
// if GetControl ( vehicle ) = control_remote then
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 263
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21097
// begin wait ( 0 0$2 ) ;
21038: LD_INT 70
21040: PPUSH
21041: CALL_OW 67
// if Connect ( vehicle ) then
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL 33964 0 1
21054: IFFALSE 21095
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_EXP 74
21065: PUSH
21066: LD_VAR 0 2
21070: ARRAY
21071: PUSH
21072: LD_INT 3
21074: ARRAY
21075: PPUSH
21076: LD_EXP 74
21080: PUSH
21081: LD_VAR 0 2
21085: ARRAY
21086: PUSH
21087: LD_INT 4
21089: ARRAY
21090: PPUSH
21091: CALL_OW 171
// end else
21095: GO 21136
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21097: LD_VAR 0 1
21101: PPUSH
21102: LD_EXP 74
21106: PUSH
21107: LD_VAR 0 2
21111: ARRAY
21112: PUSH
21113: LD_INT 3
21115: ARRAY
21116: PPUSH
21117: LD_EXP 74
21121: PUSH
21122: LD_VAR 0 2
21126: ARRAY
21127: PUSH
21128: LD_INT 4
21130: ARRAY
21131: PPUSH
21132: CALL_OW 171
// end ; end ;
21136: LD_VAR 0 3
21140: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21141: LD_INT 0
21143: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21144: LD_VAR 0 1
21148: PUSH
21149: LD_INT 250
21151: EQUAL
21152: PUSH
21153: LD_VAR 0 2
21157: PPUSH
21158: CALL_OW 264
21162: PUSH
21163: LD_INT 81
21165: EQUAL
21166: AND
21167: IFFALSE 21188
// MinerPlaceMine ( unit , x , y ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 4
21178: PPUSH
21179: LD_VAR 0 5
21183: PPUSH
21184: CALL 24012 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21188: LD_VAR 0 1
21192: PUSH
21193: LD_INT 251
21195: EQUAL
21196: PUSH
21197: LD_VAR 0 2
21201: PPUSH
21202: CALL_OW 264
21206: PUSH
21207: LD_INT 81
21209: EQUAL
21210: AND
21211: IFFALSE 21232
// MinerDetonateMine ( unit , x , y ) ;
21213: LD_VAR 0 2
21217: PPUSH
21218: LD_VAR 0 4
21222: PPUSH
21223: LD_VAR 0 5
21227: PPUSH
21228: CALL 24287 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21232: LD_VAR 0 1
21236: PUSH
21237: LD_INT 252
21239: EQUAL
21240: PUSH
21241: LD_VAR 0 2
21245: PPUSH
21246: CALL_OW 264
21250: PUSH
21251: LD_INT 81
21253: EQUAL
21254: AND
21255: IFFALSE 21276
// MinerCreateMinefield ( unit , x , y ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL 24704 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21276: LD_VAR 0 1
21280: PUSH
21281: LD_INT 253
21283: EQUAL
21284: PUSH
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 257
21294: PUSH
21295: LD_INT 5
21297: EQUAL
21298: AND
21299: IFFALSE 21320
// ComBinocular ( unit , x , y ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: LD_VAR 0 4
21310: PPUSH
21311: LD_VAR 0 5
21315: PPUSH
21316: CALL 25073 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21320: LD_VAR 0 1
21324: PUSH
21325: LD_INT 254
21327: EQUAL
21328: PUSH
21329: LD_VAR 0 2
21333: PPUSH
21334: CALL_OW 264
21338: PUSH
21339: LD_INT 99
21341: EQUAL
21342: AND
21343: PUSH
21344: LD_VAR 0 3
21348: PPUSH
21349: CALL_OW 263
21353: PUSH
21354: LD_INT 3
21356: EQUAL
21357: AND
21358: IFFALSE 21374
// HackDestroyVehicle ( unit , selectedUnit ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: CALL 23376 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21374: LD_VAR 0 1
21378: PUSH
21379: LD_INT 255
21381: EQUAL
21382: PUSH
21383: LD_VAR 0 2
21387: PPUSH
21388: CALL_OW 264
21392: PUSH
21393: LD_INT 14
21395: PUSH
21396: LD_INT 53
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: IN
21403: AND
21404: PUSH
21405: LD_VAR 0 4
21409: PPUSH
21410: LD_VAR 0 5
21414: PPUSH
21415: CALL_OW 488
21419: AND
21420: IFFALSE 21444
// CutTreeXYR ( unit , x , y , 12 ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 4
21431: PPUSH
21432: LD_VAR 0 5
21436: PPUSH
21437: LD_INT 12
21439: PPUSH
21440: CALL 21539 0 4
// if cmd = 256 then
21444: LD_VAR 0 1
21448: PUSH
21449: LD_INT 256
21451: EQUAL
21452: IFFALSE 21473
// SetFactoryWaypoint ( unit , x , y ) ;
21454: LD_VAR 0 2
21458: PPUSH
21459: LD_VAR 0 4
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL 19454 0 3
// if cmd = 257 then
21473: LD_VAR 0 1
21477: PUSH
21478: LD_INT 257
21480: EQUAL
21481: IFFALSE 21502
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21483: LD_VAR 0 2
21487: PPUSH
21488: LD_VAR 0 4
21492: PPUSH
21493: LD_VAR 0 5
21497: PPUSH
21498: CALL 19816 0 3
// if cmd = 258 then
21502: LD_VAR 0 1
21506: PUSH
21507: LD_INT 258
21509: EQUAL
21510: IFFALSE 21534
// BurnTreeXYR ( unit , x , y , 8 ) ;
21512: LD_VAR 0 2
21516: PPUSH
21517: LD_VAR 0 4
21521: PPUSH
21522: LD_VAR 0 5
21526: PPUSH
21527: LD_INT 8
21529: PPUSH
21530: CALL 21933 0 4
// end ;
21534: LD_VAR 0 6
21538: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
21547: PPUSH
21548: PPUSH
21549: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 302
21559: NOT
21560: PUSH
21561: LD_VAR 0 2
21565: PPUSH
21566: LD_VAR 0 3
21570: PPUSH
21571: CALL_OW 488
21575: NOT
21576: OR
21577: PUSH
21578: LD_VAR 0 4
21582: NOT
21583: OR
21584: IFFALSE 21588
// exit ;
21586: GO 21928
// list := [ ] ;
21588: LD_ADDR_VAR 0 13
21592: PUSH
21593: EMPTY
21594: ST_TO_ADDR
// if x - r < 0 then
21595: LD_VAR 0 2
21599: PUSH
21600: LD_VAR 0 4
21604: MINUS
21605: PUSH
21606: LD_INT 0
21608: LESS
21609: IFFALSE 21621
// min_x := 0 else
21611: LD_ADDR_VAR 0 7
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
21619: GO 21637
// min_x := x - r ;
21621: LD_ADDR_VAR 0 7
21625: PUSH
21626: LD_VAR 0 2
21630: PUSH
21631: LD_VAR 0 4
21635: MINUS
21636: ST_TO_ADDR
// if y - r < 0 then
21637: LD_VAR 0 3
21641: PUSH
21642: LD_VAR 0 4
21646: MINUS
21647: PUSH
21648: LD_INT 0
21650: LESS
21651: IFFALSE 21663
// min_y := 0 else
21653: LD_ADDR_VAR 0 8
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
21661: GO 21679
// min_y := y - r ;
21663: LD_ADDR_VAR 0 8
21667: PUSH
21668: LD_VAR 0 3
21672: PUSH
21673: LD_VAR 0 4
21677: MINUS
21678: ST_TO_ADDR
// max_x := x + r ;
21679: LD_ADDR_VAR 0 9
21683: PUSH
21684: LD_VAR 0 2
21688: PUSH
21689: LD_VAR 0 4
21693: PLUS
21694: ST_TO_ADDR
// max_y := y + r ;
21695: LD_ADDR_VAR 0 10
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_VAR 0 4
21709: PLUS
21710: ST_TO_ADDR
// for _x = min_x to max_x do
21711: LD_ADDR_VAR 0 11
21715: PUSH
21716: DOUBLE
21717: LD_VAR 0 7
21721: DEC
21722: ST_TO_ADDR
21723: LD_VAR 0 9
21727: PUSH
21728: FOR_TO
21729: IFFALSE 21846
// for _y = min_y to max_y do
21731: LD_ADDR_VAR 0 12
21735: PUSH
21736: DOUBLE
21737: LD_VAR 0 8
21741: DEC
21742: ST_TO_ADDR
21743: LD_VAR 0 10
21747: PUSH
21748: FOR_TO
21749: IFFALSE 21842
// begin if not ValidHex ( _x , _y ) then
21751: LD_VAR 0 11
21755: PPUSH
21756: LD_VAR 0 12
21760: PPUSH
21761: CALL_OW 488
21765: NOT
21766: IFFALSE 21770
// continue ;
21768: GO 21748
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21770: LD_VAR 0 11
21774: PPUSH
21775: LD_VAR 0 12
21779: PPUSH
21780: CALL_OW 351
21784: PUSH
21785: LD_VAR 0 11
21789: PPUSH
21790: LD_VAR 0 12
21794: PPUSH
21795: CALL_OW 554
21799: AND
21800: IFFALSE 21840
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21802: LD_ADDR_VAR 0 13
21806: PUSH
21807: LD_VAR 0 13
21811: PPUSH
21812: LD_VAR 0 13
21816: PUSH
21817: LD_INT 1
21819: PLUS
21820: PPUSH
21821: LD_VAR 0 11
21825: PUSH
21826: LD_VAR 0 12
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PPUSH
21835: CALL_OW 2
21839: ST_TO_ADDR
// end ;
21840: GO 21748
21842: POP
21843: POP
21844: GO 21728
21846: POP
21847: POP
// if not list then
21848: LD_VAR 0 13
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21928
// for i in list do
21857: LD_ADDR_VAR 0 6
21861: PUSH
21862: LD_VAR 0 13
21866: PUSH
21867: FOR_IN
21868: IFFALSE 21926
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21870: LD_VAR 0 1
21874: PPUSH
21875: LD_STRING M
21877: PUSH
21878: LD_VAR 0 6
21882: PUSH
21883: LD_INT 1
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 6
21891: PUSH
21892: LD_INT 2
21894: ARRAY
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: PPUSH
21920: CALL_OW 447
21924: GO 21867
21926: POP
21927: POP
// end ;
21928: LD_VAR 0 5
21932: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21933: LD_INT 0
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 302
21953: NOT
21954: PUSH
21955: LD_VAR 0 2
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: CALL_OW 488
21969: NOT
21970: OR
21971: PUSH
21972: LD_VAR 0 4
21976: NOT
21977: OR
21978: IFFALSE 21982
// exit ;
21980: GO 22330
// list := [ ] ;
21982: LD_ADDR_VAR 0 13
21986: PUSH
21987: EMPTY
21988: ST_TO_ADDR
// if x - r < 0 then
21989: LD_VAR 0 2
21993: PUSH
21994: LD_VAR 0 4
21998: MINUS
21999: PUSH
22000: LD_INT 0
22002: LESS
22003: IFFALSE 22015
// min_x := 0 else
22005: LD_ADDR_VAR 0 7
22009: PUSH
22010: LD_INT 0
22012: ST_TO_ADDR
22013: GO 22031
// min_x := x - r ;
22015: LD_ADDR_VAR 0 7
22019: PUSH
22020: LD_VAR 0 2
22024: PUSH
22025: LD_VAR 0 4
22029: MINUS
22030: ST_TO_ADDR
// if y - r < 0 then
22031: LD_VAR 0 3
22035: PUSH
22036: LD_VAR 0 4
22040: MINUS
22041: PUSH
22042: LD_INT 0
22044: LESS
22045: IFFALSE 22057
// min_y := 0 else
22047: LD_ADDR_VAR 0 8
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
22055: GO 22073
// min_y := y - r ;
22057: LD_ADDR_VAR 0 8
22061: PUSH
22062: LD_VAR 0 3
22066: PUSH
22067: LD_VAR 0 4
22071: MINUS
22072: ST_TO_ADDR
// max_x := x + r ;
22073: LD_ADDR_VAR 0 9
22077: PUSH
22078: LD_VAR 0 2
22082: PUSH
22083: LD_VAR 0 4
22087: PLUS
22088: ST_TO_ADDR
// max_y := y + r ;
22089: LD_ADDR_VAR 0 10
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_VAR 0 4
22103: PLUS
22104: ST_TO_ADDR
// for _x = min_x to max_x do
22105: LD_ADDR_VAR 0 11
22109: PUSH
22110: DOUBLE
22111: LD_VAR 0 7
22115: DEC
22116: ST_TO_ADDR
22117: LD_VAR 0 9
22121: PUSH
22122: FOR_TO
22123: IFFALSE 22240
// for _y = min_y to max_y do
22125: LD_ADDR_VAR 0 12
22129: PUSH
22130: DOUBLE
22131: LD_VAR 0 8
22135: DEC
22136: ST_TO_ADDR
22137: LD_VAR 0 10
22141: PUSH
22142: FOR_TO
22143: IFFALSE 22236
// begin if not ValidHex ( _x , _y ) then
22145: LD_VAR 0 11
22149: PPUSH
22150: LD_VAR 0 12
22154: PPUSH
22155: CALL_OW 488
22159: NOT
22160: IFFALSE 22164
// continue ;
22162: GO 22142
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22164: LD_VAR 0 11
22168: PPUSH
22169: LD_VAR 0 12
22173: PPUSH
22174: CALL_OW 351
22178: PUSH
22179: LD_VAR 0 11
22183: PPUSH
22184: LD_VAR 0 12
22188: PPUSH
22189: CALL_OW 554
22193: AND
22194: IFFALSE 22234
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22196: LD_ADDR_VAR 0 13
22200: PUSH
22201: LD_VAR 0 13
22205: PPUSH
22206: LD_VAR 0 13
22210: PUSH
22211: LD_INT 1
22213: PLUS
22214: PPUSH
22215: LD_VAR 0 11
22219: PUSH
22220: LD_VAR 0 12
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PPUSH
22229: CALL_OW 2
22233: ST_TO_ADDR
// end ;
22234: GO 22142
22236: POP
22237: POP
22238: GO 22122
22240: POP
22241: POP
// if not list then
22242: LD_VAR 0 13
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22330
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22251: LD_ADDR_VAR 0 13
22255: PUSH
22256: LD_VAR 0 1
22260: PPUSH
22261: LD_VAR 0 13
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: CALL 31106 0 4
22276: ST_TO_ADDR
// ComStop ( flame ) ;
22277: LD_VAR 0 1
22281: PPUSH
22282: CALL_OW 141
// for i in list do
22286: LD_ADDR_VAR 0 6
22290: PUSH
22291: LD_VAR 0 13
22295: PUSH
22296: FOR_IN
22297: IFFALSE 22328
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22299: LD_VAR 0 1
22303: PPUSH
22304: LD_VAR 0 6
22308: PUSH
22309: LD_INT 1
22311: ARRAY
22312: PPUSH
22313: LD_VAR 0 6
22317: PUSH
22318: LD_INT 2
22320: ARRAY
22321: PPUSH
22322: CALL_OW 176
22326: GO 22296
22328: POP
22329: POP
// end ;
22330: LD_VAR 0 5
22334: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22335: LD_EXP 77
22339: NOT
22340: IFFALSE 22390
22342: GO 22344
22344: DISABLE
// begin initHack := true ;
22345: LD_ADDR_EXP 77
22349: PUSH
22350: LD_INT 1
22352: ST_TO_ADDR
// hackTanks := [ ] ;
22353: LD_ADDR_EXP 78
22357: PUSH
22358: EMPTY
22359: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22360: LD_ADDR_EXP 79
22364: PUSH
22365: EMPTY
22366: ST_TO_ADDR
// hackLimit := 3 ;
22367: LD_ADDR_EXP 80
22371: PUSH
22372: LD_INT 3
22374: ST_TO_ADDR
// hackDist := 12 ;
22375: LD_ADDR_EXP 81
22379: PUSH
22380: LD_INT 12
22382: ST_TO_ADDR
// hackCounter := [ ] ;
22383: LD_ADDR_EXP 82
22387: PUSH
22388: EMPTY
22389: ST_TO_ADDR
// end ;
22390: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22391: LD_EXP 77
22395: PUSH
22396: LD_INT 34
22398: PUSH
22399: LD_INT 99
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: AND
22411: IFFALSE 22664
22413: GO 22415
22415: DISABLE
22416: LD_INT 0
22418: PPUSH
22419: PPUSH
// begin enable ;
22420: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22421: LD_ADDR_VAR 0 1
22425: PUSH
22426: LD_INT 34
22428: PUSH
22429: LD_INT 99
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PPUSH
22436: CALL_OW 69
22440: PUSH
22441: FOR_IN
22442: IFFALSE 22662
// begin if not i in hackTanks then
22444: LD_VAR 0 1
22448: PUSH
22449: LD_EXP 78
22453: IN
22454: NOT
22455: IFFALSE 22538
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22457: LD_ADDR_EXP 78
22461: PUSH
22462: LD_EXP 78
22466: PPUSH
22467: LD_EXP 78
22471: PUSH
22472: LD_INT 1
22474: PLUS
22475: PPUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 1
22485: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22486: LD_ADDR_EXP 79
22490: PUSH
22491: LD_EXP 79
22495: PPUSH
22496: LD_EXP 79
22500: PUSH
22501: LD_INT 1
22503: PLUS
22504: PPUSH
22505: EMPTY
22506: PPUSH
22507: CALL_OW 1
22511: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22512: LD_ADDR_EXP 82
22516: PUSH
22517: LD_EXP 82
22521: PPUSH
22522: LD_EXP 82
22526: PUSH
22527: LD_INT 1
22529: PLUS
22530: PPUSH
22531: EMPTY
22532: PPUSH
22533: CALL_OW 1
22537: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22538: LD_VAR 0 1
22542: PPUSH
22543: CALL_OW 302
22547: NOT
22548: IFFALSE 22561
// begin HackUnlinkAll ( i ) ;
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL 22667 0 1
// continue ;
22559: GO 22441
// end ; HackCheckCapturedStatus ( i ) ;
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL 23110 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22570: LD_ADDR_VAR 0 2
22574: PUSH
22575: LD_INT 81
22577: PUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 255
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 33
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 91
22604: PUSH
22605: LD_VAR 0 1
22609: PUSH
22610: LD_EXP 81
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 50
22622: PUSH
22623: EMPTY
22624: LIST
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: PPUSH
22632: CALL_OW 69
22636: ST_TO_ADDR
// if not tmp then
22637: LD_VAR 0 2
22641: NOT
22642: IFFALSE 22646
// continue ;
22644: GO 22441
// HackLink ( i , tmp ) ;
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: CALL 22803 0 2
// end ;
22660: GO 22441
22662: POP
22663: POP
// end ;
22664: PPOPN 2
22666: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22667: LD_INT 0
22669: PPUSH
22670: PPUSH
22671: PPUSH
// if not hack in hackTanks then
22672: LD_VAR 0 1
22676: PUSH
22677: LD_EXP 78
22681: IN
22682: NOT
22683: IFFALSE 22687
// exit ;
22685: GO 22798
// index := GetElementIndex ( hackTanks , hack ) ;
22687: LD_ADDR_VAR 0 4
22691: PUSH
22692: LD_EXP 78
22696: PPUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL 30403 0 2
22706: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22707: LD_EXP 79
22711: PUSH
22712: LD_VAR 0 4
22716: ARRAY
22717: IFFALSE 22798
// begin for i in hackTanksCaptured [ index ] do
22719: LD_ADDR_VAR 0 3
22723: PUSH
22724: LD_EXP 79
22728: PUSH
22729: LD_VAR 0 4
22733: ARRAY
22734: PUSH
22735: FOR_IN
22736: IFFALSE 22762
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22738: LD_VAR 0 3
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: LD_VAR 0 3
22751: PUSH
22752: LD_INT 2
22754: ARRAY
22755: PPUSH
22756: CALL_OW 235
22760: GO 22735
22762: POP
22763: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22764: LD_ADDR_EXP 79
22768: PUSH
22769: LD_EXP 79
22773: PPUSH
22774: LD_VAR 0 4
22778: PPUSH
22779: EMPTY
22780: PPUSH
22781: CALL_OW 1
22785: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22786: LD_VAR 0 1
22790: PPUSH
22791: LD_INT 0
22793: PPUSH
22794: CALL_OW 505
// end ; end ;
22798: LD_VAR 0 2
22802: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22803: LD_INT 0
22805: PPUSH
22806: PPUSH
22807: PPUSH
// if not hack in hackTanks or not vehicles then
22808: LD_VAR 0 1
22812: PUSH
22813: LD_EXP 78
22817: IN
22818: NOT
22819: PUSH
22820: LD_VAR 0 2
22824: NOT
22825: OR
22826: IFFALSE 22830
// exit ;
22828: GO 23105
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: LD_VAR 0 2
22844: PPUSH
22845: LD_INT 1
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL 31053 0 4
22855: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22856: LD_ADDR_VAR 0 5
22860: PUSH
22861: LD_EXP 78
22865: PPUSH
22866: LD_VAR 0 1
22870: PPUSH
22871: CALL 30403 0 2
22875: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22876: LD_EXP 79
22880: PUSH
22881: LD_VAR 0 5
22885: ARRAY
22886: PUSH
22887: LD_EXP 80
22891: LESS
22892: IFFALSE 23081
// begin for i := 1 to vehicles do
22894: LD_ADDR_VAR 0 4
22898: PUSH
22899: DOUBLE
22900: LD_INT 1
22902: DEC
22903: ST_TO_ADDR
22904: LD_VAR 0 2
22908: PUSH
22909: FOR_TO
22910: IFFALSE 23079
// begin if hackTanksCaptured [ index ] = hackLimit then
22912: LD_EXP 79
22916: PUSH
22917: LD_VAR 0 5
22921: ARRAY
22922: PUSH
22923: LD_EXP 80
22927: EQUAL
22928: IFFALSE 22932
// break ;
22930: GO 23079
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22932: LD_ADDR_EXP 82
22936: PUSH
22937: LD_EXP 82
22941: PPUSH
22942: LD_VAR 0 5
22946: PPUSH
22947: LD_EXP 82
22951: PUSH
22952: LD_VAR 0 5
22956: ARRAY
22957: PUSH
22958: LD_INT 1
22960: PLUS
22961: PPUSH
22962: CALL_OW 1
22966: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22967: LD_ADDR_EXP 79
22971: PUSH
22972: LD_EXP 79
22976: PPUSH
22977: LD_VAR 0 5
22981: PUSH
22982: LD_EXP 79
22986: PUSH
22987: LD_VAR 0 5
22991: ARRAY
22992: PUSH
22993: LD_INT 1
22995: PLUS
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PPUSH
23001: LD_VAR 0 2
23005: PUSH
23006: LD_VAR 0 4
23010: ARRAY
23011: PUSH
23012: LD_VAR 0 2
23016: PUSH
23017: LD_VAR 0 4
23021: ARRAY
23022: PPUSH
23023: CALL_OW 255
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PPUSH
23032: CALL 30618 0 3
23036: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23037: LD_VAR 0 2
23041: PUSH
23042: LD_VAR 0 4
23046: ARRAY
23047: PPUSH
23048: LD_VAR 0 1
23052: PPUSH
23053: CALL_OW 255
23057: PPUSH
23058: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23062: LD_VAR 0 2
23066: PUSH
23067: LD_VAR 0 4
23071: ARRAY
23072: PPUSH
23073: CALL_OW 141
// end ;
23077: GO 22909
23079: POP
23080: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23081: LD_VAR 0 1
23085: PPUSH
23086: LD_EXP 79
23090: PUSH
23091: LD_VAR 0 5
23095: ARRAY
23096: PUSH
23097: LD_INT 0
23099: PLUS
23100: PPUSH
23101: CALL_OW 505
// end ;
23105: LD_VAR 0 3
23109: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23110: LD_INT 0
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
// if not hack in hackTanks then
23116: LD_VAR 0 1
23120: PUSH
23121: LD_EXP 78
23125: IN
23126: NOT
23127: IFFALSE 23131
// exit ;
23129: GO 23371
// index := GetElementIndex ( hackTanks , hack ) ;
23131: LD_ADDR_VAR 0 4
23135: PUSH
23136: LD_EXP 78
23140: PPUSH
23141: LD_VAR 0 1
23145: PPUSH
23146: CALL 30403 0 2
23150: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23151: LD_ADDR_VAR 0 3
23155: PUSH
23156: DOUBLE
23157: LD_EXP 79
23161: PUSH
23162: LD_VAR 0 4
23166: ARRAY
23167: INC
23168: ST_TO_ADDR
23169: LD_INT 1
23171: PUSH
23172: FOR_DOWNTO
23173: IFFALSE 23345
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23175: LD_ADDR_VAR 0 5
23179: PUSH
23180: LD_EXP 79
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: PUSH
23191: LD_VAR 0 3
23195: ARRAY
23196: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23197: LD_VAR 0 5
23201: PUSH
23202: LD_INT 1
23204: ARRAY
23205: PPUSH
23206: CALL_OW 302
23210: NOT
23211: PUSH
23212: LD_VAR 0 5
23216: PUSH
23217: LD_INT 1
23219: ARRAY
23220: PPUSH
23221: CALL_OW 255
23225: PUSH
23226: LD_VAR 0 1
23230: PPUSH
23231: CALL_OW 255
23235: NONEQUAL
23236: OR
23237: IFFALSE 23343
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23239: LD_VAR 0 5
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: CALL_OW 305
23252: PUSH
23253: LD_VAR 0 5
23257: PUSH
23258: LD_INT 1
23260: ARRAY
23261: PPUSH
23262: CALL_OW 255
23266: PUSH
23267: LD_VAR 0 1
23271: PPUSH
23272: CALL_OW 255
23276: EQUAL
23277: AND
23278: IFFALSE 23302
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23280: LD_VAR 0 5
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: LD_VAR 0 5
23293: PUSH
23294: LD_INT 2
23296: ARRAY
23297: PPUSH
23298: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23302: LD_ADDR_EXP 79
23306: PUSH
23307: LD_EXP 79
23311: PPUSH
23312: LD_VAR 0 4
23316: PPUSH
23317: LD_EXP 79
23321: PUSH
23322: LD_VAR 0 4
23326: ARRAY
23327: PPUSH
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 3
23337: PPUSH
23338: CALL_OW 1
23342: ST_TO_ADDR
// end ; end ;
23343: GO 23172
23345: POP
23346: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23347: LD_VAR 0 1
23351: PPUSH
23352: LD_EXP 79
23356: PUSH
23357: LD_VAR 0 4
23361: ARRAY
23362: PUSH
23363: LD_INT 0
23365: PLUS
23366: PPUSH
23367: CALL_OW 505
// end ;
23371: LD_VAR 0 2
23375: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23376: LD_INT 0
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
// if not hack in hackTanks then
23382: LD_VAR 0 1
23386: PUSH
23387: LD_EXP 78
23391: IN
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 23482
// index := GetElementIndex ( hackTanks , hack ) ;
23397: LD_ADDR_VAR 0 5
23401: PUSH
23402: LD_EXP 78
23406: PPUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL 30403 0 2
23416: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23417: LD_ADDR_VAR 0 4
23421: PUSH
23422: DOUBLE
23423: LD_INT 1
23425: DEC
23426: ST_TO_ADDR
23427: LD_EXP 79
23431: PUSH
23432: LD_VAR 0 5
23436: ARRAY
23437: PUSH
23438: FOR_TO
23439: IFFALSE 23480
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23441: LD_EXP 79
23445: PUSH
23446: LD_VAR 0 5
23450: ARRAY
23451: PUSH
23452: LD_VAR 0 4
23456: ARRAY
23457: PUSH
23458: LD_INT 1
23460: ARRAY
23461: PUSH
23462: LD_VAR 0 2
23466: EQUAL
23467: IFFALSE 23478
// KillUnit ( vehicle ) ;
23469: LD_VAR 0 2
23473: PPUSH
23474: CALL_OW 66
23478: GO 23438
23480: POP
23481: POP
// end ;
23482: LD_VAR 0 3
23486: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23487: LD_EXP 83
23491: NOT
23492: IFFALSE 23527
23494: GO 23496
23496: DISABLE
// begin initMiner := true ;
23497: LD_ADDR_EXP 83
23501: PUSH
23502: LD_INT 1
23504: ST_TO_ADDR
// minersList := [ ] ;
23505: LD_ADDR_EXP 84
23509: PUSH
23510: EMPTY
23511: ST_TO_ADDR
// minerMinesList := [ ] ;
23512: LD_ADDR_EXP 85
23516: PUSH
23517: EMPTY
23518: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23519: LD_ADDR_EXP 86
23523: PUSH
23524: LD_INT 5
23526: ST_TO_ADDR
// end ;
23527: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23528: LD_EXP 83
23532: PUSH
23533: LD_INT 34
23535: PUSH
23536: LD_INT 81
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PPUSH
23543: CALL_OW 69
23547: AND
23548: IFFALSE 24009
23550: GO 23552
23552: DISABLE
23553: LD_INT 0
23555: PPUSH
23556: PPUSH
23557: PPUSH
23558: PPUSH
// begin enable ;
23559: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23560: LD_ADDR_VAR 0 1
23564: PUSH
23565: LD_INT 34
23567: PUSH
23568: LD_INT 81
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PPUSH
23575: CALL_OW 69
23579: PUSH
23580: FOR_IN
23581: IFFALSE 23653
// begin if not i in minersList then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_EXP 84
23592: IN
23593: NOT
23594: IFFALSE 23651
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23596: LD_ADDR_EXP 84
23600: PUSH
23601: LD_EXP 84
23605: PPUSH
23606: LD_EXP 84
23610: PUSH
23611: LD_INT 1
23613: PLUS
23614: PPUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 1
23624: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23625: LD_ADDR_EXP 85
23629: PUSH
23630: LD_EXP 85
23634: PPUSH
23635: LD_EXP 85
23639: PUSH
23640: LD_INT 1
23642: PLUS
23643: PPUSH
23644: EMPTY
23645: PPUSH
23646: CALL_OW 1
23650: ST_TO_ADDR
// end end ;
23651: GO 23580
23653: POP
23654: POP
// for i := minerMinesList downto 1 do
23655: LD_ADDR_VAR 0 1
23659: PUSH
23660: DOUBLE
23661: LD_EXP 85
23665: INC
23666: ST_TO_ADDR
23667: LD_INT 1
23669: PUSH
23670: FOR_DOWNTO
23671: IFFALSE 24007
// begin if IsLive ( minersList [ i ] ) then
23673: LD_EXP 84
23677: PUSH
23678: LD_VAR 0 1
23682: ARRAY
23683: PPUSH
23684: CALL_OW 300
23688: IFFALSE 23716
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23690: LD_EXP 84
23694: PUSH
23695: LD_VAR 0 1
23699: ARRAY
23700: PPUSH
23701: LD_EXP 85
23705: PUSH
23706: LD_VAR 0 1
23710: ARRAY
23711: PPUSH
23712: CALL_OW 505
// if not minerMinesList [ i ] then
23716: LD_EXP 85
23720: PUSH
23721: LD_VAR 0 1
23725: ARRAY
23726: NOT
23727: IFFALSE 23731
// continue ;
23729: GO 23670
// for j := minerMinesList [ i ] downto 1 do
23731: LD_ADDR_VAR 0 2
23735: PUSH
23736: DOUBLE
23737: LD_EXP 85
23741: PUSH
23742: LD_VAR 0 1
23746: ARRAY
23747: INC
23748: ST_TO_ADDR
23749: LD_INT 1
23751: PUSH
23752: FOR_DOWNTO
23753: IFFALSE 24003
// begin side := GetSide ( minersList [ i ] ) ;
23755: LD_ADDR_VAR 0 3
23759: PUSH
23760: LD_EXP 84
23764: PUSH
23765: LD_VAR 0 1
23769: ARRAY
23770: PPUSH
23771: CALL_OW 255
23775: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23776: LD_ADDR_VAR 0 4
23780: PUSH
23781: LD_EXP 85
23785: PUSH
23786: LD_VAR 0 1
23790: ARRAY
23791: PUSH
23792: LD_VAR 0 2
23796: ARRAY
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: PPUSH
23802: LD_EXP 85
23806: PUSH
23807: LD_VAR 0 1
23811: ARRAY
23812: PUSH
23813: LD_VAR 0 2
23817: ARRAY
23818: PUSH
23819: LD_INT 2
23821: ARRAY
23822: PPUSH
23823: CALL_OW 428
23827: ST_TO_ADDR
// if not tmp then
23828: LD_VAR 0 4
23832: NOT
23833: IFFALSE 23837
// continue ;
23835: GO 23752
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23837: LD_VAR 0 4
23841: PUSH
23842: LD_INT 81
23844: PUSH
23845: LD_VAR 0 3
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PPUSH
23854: CALL_OW 69
23858: IN
23859: PUSH
23860: LD_EXP 85
23864: PUSH
23865: LD_VAR 0 1
23869: ARRAY
23870: PUSH
23871: LD_VAR 0 2
23875: ARRAY
23876: PUSH
23877: LD_INT 1
23879: ARRAY
23880: PPUSH
23881: LD_EXP 85
23885: PUSH
23886: LD_VAR 0 1
23890: ARRAY
23891: PUSH
23892: LD_VAR 0 2
23896: ARRAY
23897: PUSH
23898: LD_INT 2
23900: ARRAY
23901: PPUSH
23902: CALL_OW 458
23906: AND
23907: IFFALSE 24001
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23909: LD_EXP 85
23913: PUSH
23914: LD_VAR 0 1
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 2
23924: ARRAY
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: PPUSH
23930: LD_EXP 85
23934: PUSH
23935: LD_VAR 0 1
23939: ARRAY
23940: PUSH
23941: LD_VAR 0 2
23945: ARRAY
23946: PUSH
23947: LD_INT 2
23949: ARRAY
23950: PPUSH
23951: LD_VAR 0 3
23955: PPUSH
23956: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23960: LD_ADDR_EXP 85
23964: PUSH
23965: LD_EXP 85
23969: PPUSH
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_EXP 85
23979: PUSH
23980: LD_VAR 0 1
23984: ARRAY
23985: PPUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: CALL_OW 3
23995: PPUSH
23996: CALL_OW 1
24000: ST_TO_ADDR
// end ; end ;
24001: GO 23752
24003: POP
24004: POP
// end ;
24005: GO 23670
24007: POP
24008: POP
// end ;
24009: PPOPN 4
24011: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
// result := false ;
24016: LD_ADDR_VAR 0 4
24020: PUSH
24021: LD_INT 0
24023: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 264
24033: PUSH
24034: LD_INT 81
24036: EQUAL
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24282
// index := GetElementIndex ( minersList , unit ) ;
24042: LD_ADDR_VAR 0 5
24046: PUSH
24047: LD_EXP 84
24051: PPUSH
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL 30403 0 2
24061: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24062: LD_EXP 85
24066: PUSH
24067: LD_VAR 0 5
24071: ARRAY
24072: PUSH
24073: LD_EXP 86
24077: GREATEREQUAL
24078: IFFALSE 24082
// exit ;
24080: GO 24282
// ComMoveXY ( unit , x , y ) ;
24082: LD_VAR 0 1
24086: PPUSH
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_VAR 0 3
24096: PPUSH
24097: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24101: LD_INT 35
24103: PPUSH
24104: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: CALL 62155 0 3
24127: NOT
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: CALL_OW 314
24138: AND
24139: IFFALSE 24143
// exit ;
24141: GO 24282
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24143: LD_VAR 0 2
24147: PPUSH
24148: LD_VAR 0 3
24152: PPUSH
24153: CALL_OW 428
24157: PUSH
24158: LD_VAR 0 1
24162: EQUAL
24163: PUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL_OW 314
24173: NOT
24174: AND
24175: IFFALSE 24101
// PlaySoundXY ( x , y , PlantMine ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_VAR 0 3
24186: PPUSH
24187: LD_STRING PlantMine
24189: PPUSH
24190: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24194: LD_VAR 0 2
24198: PPUSH
24199: LD_VAR 0 3
24203: PPUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 255
24213: PPUSH
24214: LD_INT 0
24216: PPUSH
24217: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24221: LD_ADDR_EXP 85
24225: PUSH
24226: LD_EXP 85
24230: PPUSH
24231: LD_VAR 0 5
24235: PUSH
24236: LD_EXP 85
24240: PUSH
24241: LD_VAR 0 5
24245: ARRAY
24246: PUSH
24247: LD_INT 1
24249: PLUS
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PPUSH
24255: LD_VAR 0 2
24259: PUSH
24260: LD_VAR 0 3
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PPUSH
24269: CALL 30618 0 3
24273: ST_TO_ADDR
// result := true ;
24274: LD_ADDR_VAR 0 4
24278: PUSH
24279: LD_INT 1
24281: ST_TO_ADDR
// end ;
24282: LD_VAR 0 4
24286: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24287: LD_INT 0
24289: PPUSH
24290: PPUSH
24291: PPUSH
// if not unit in minersList then
24292: LD_VAR 0 1
24296: PUSH
24297: LD_EXP 84
24301: IN
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24699
// index := GetElementIndex ( minersList , unit ) ;
24307: LD_ADDR_VAR 0 6
24311: PUSH
24312: LD_EXP 84
24316: PPUSH
24317: LD_VAR 0 1
24321: PPUSH
24322: CALL 30403 0 2
24326: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: DOUBLE
24333: LD_EXP 85
24337: PUSH
24338: LD_VAR 0 6
24342: ARRAY
24343: INC
24344: ST_TO_ADDR
24345: LD_INT 1
24347: PUSH
24348: FOR_DOWNTO
24349: IFFALSE 24510
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24351: LD_EXP 85
24355: PUSH
24356: LD_VAR 0 6
24360: ARRAY
24361: PUSH
24362: LD_VAR 0 5
24366: ARRAY
24367: PUSH
24368: LD_INT 1
24370: ARRAY
24371: PUSH
24372: LD_VAR 0 2
24376: EQUAL
24377: PUSH
24378: LD_EXP 85
24382: PUSH
24383: LD_VAR 0 6
24387: ARRAY
24388: PUSH
24389: LD_VAR 0 5
24393: ARRAY
24394: PUSH
24395: LD_INT 2
24397: ARRAY
24398: PUSH
24399: LD_VAR 0 3
24403: EQUAL
24404: AND
24405: IFFALSE 24508
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24407: LD_EXP 85
24411: PUSH
24412: LD_VAR 0 6
24416: ARRAY
24417: PUSH
24418: LD_VAR 0 5
24422: ARRAY
24423: PUSH
24424: LD_INT 1
24426: ARRAY
24427: PPUSH
24428: LD_EXP 85
24432: PUSH
24433: LD_VAR 0 6
24437: ARRAY
24438: PUSH
24439: LD_VAR 0 5
24443: ARRAY
24444: PUSH
24445: LD_INT 2
24447: ARRAY
24448: PPUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 255
24458: PPUSH
24459: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24463: LD_ADDR_EXP 85
24467: PUSH
24468: LD_EXP 85
24472: PPUSH
24473: LD_VAR 0 6
24477: PPUSH
24478: LD_EXP 85
24482: PUSH
24483: LD_VAR 0 6
24487: ARRAY
24488: PPUSH
24489: LD_VAR 0 5
24493: PPUSH
24494: CALL_OW 3
24498: PPUSH
24499: CALL_OW 1
24503: ST_TO_ADDR
// exit ;
24504: POP
24505: POP
24506: GO 24699
// end ; end ;
24508: GO 24348
24510: POP
24511: POP
// for i := minerMinesList [ index ] downto 1 do
24512: LD_ADDR_VAR 0 5
24516: PUSH
24517: DOUBLE
24518: LD_EXP 85
24522: PUSH
24523: LD_VAR 0 6
24527: ARRAY
24528: INC
24529: ST_TO_ADDR
24530: LD_INT 1
24532: PUSH
24533: FOR_DOWNTO
24534: IFFALSE 24697
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24536: LD_EXP 85
24540: PUSH
24541: LD_VAR 0 6
24545: ARRAY
24546: PUSH
24547: LD_VAR 0 5
24551: ARRAY
24552: PUSH
24553: LD_INT 1
24555: ARRAY
24556: PPUSH
24557: LD_EXP 85
24561: PUSH
24562: LD_VAR 0 6
24566: ARRAY
24567: PUSH
24568: LD_VAR 0 5
24572: ARRAY
24573: PUSH
24574: LD_INT 2
24576: ARRAY
24577: PPUSH
24578: LD_VAR 0 2
24582: PPUSH
24583: LD_VAR 0 3
24587: PPUSH
24588: CALL_OW 298
24592: PUSH
24593: LD_INT 6
24595: LESS
24596: IFFALSE 24695
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24598: LD_EXP 85
24602: PUSH
24603: LD_VAR 0 6
24607: ARRAY
24608: PUSH
24609: LD_VAR 0 5
24613: ARRAY
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: PPUSH
24619: LD_EXP 85
24623: PUSH
24624: LD_VAR 0 6
24628: ARRAY
24629: PUSH
24630: LD_VAR 0 5
24634: ARRAY
24635: PUSH
24636: LD_INT 2
24638: ARRAY
24639: PPUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: CALL_OW 255
24649: PPUSH
24650: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24654: LD_ADDR_EXP 85
24658: PUSH
24659: LD_EXP 85
24663: PPUSH
24664: LD_VAR 0 6
24668: PPUSH
24669: LD_EXP 85
24673: PUSH
24674: LD_VAR 0 6
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 5
24684: PPUSH
24685: CALL_OW 3
24689: PPUSH
24690: CALL_OW 1
24694: ST_TO_ADDR
// end ; end ;
24695: GO 24533
24697: POP
24698: POP
// end ;
24699: LD_VAR 0 4
24703: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
24708: PPUSH
24709: PPUSH
24710: PPUSH
24711: PPUSH
24712: PPUSH
24713: PPUSH
24714: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL_OW 264
24724: PUSH
24725: LD_INT 81
24727: EQUAL
24728: NOT
24729: PUSH
24730: LD_VAR 0 1
24734: PUSH
24735: LD_EXP 84
24739: IN
24740: NOT
24741: OR
24742: IFFALSE 24746
// exit ;
24744: GO 25068
// index := GetElementIndex ( minersList , unit ) ;
24746: LD_ADDR_VAR 0 6
24750: PUSH
24751: LD_EXP 84
24755: PPUSH
24756: LD_VAR 0 1
24760: PPUSH
24761: CALL 30403 0 2
24765: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24766: LD_ADDR_VAR 0 8
24770: PUSH
24771: LD_EXP 86
24775: PUSH
24776: LD_EXP 85
24780: PUSH
24781: LD_VAR 0 6
24785: ARRAY
24786: MINUS
24787: ST_TO_ADDR
// if not minesFreeAmount then
24788: LD_VAR 0 8
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25068
// tmp := [ ] ;
24797: LD_ADDR_VAR 0 7
24801: PUSH
24802: EMPTY
24803: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24804: LD_ADDR_VAR 0 5
24808: PUSH
24809: DOUBLE
24810: LD_INT 1
24812: DEC
24813: ST_TO_ADDR
24814: LD_VAR 0 8
24818: PUSH
24819: FOR_TO
24820: IFFALSE 25015
// begin _d := rand ( 0 , 5 ) ;
24822: LD_ADDR_VAR 0 11
24826: PUSH
24827: LD_INT 0
24829: PPUSH
24830: LD_INT 5
24832: PPUSH
24833: CALL_OW 12
24837: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24838: LD_ADDR_VAR 0 12
24842: PUSH
24843: LD_INT 2
24845: PPUSH
24846: LD_INT 6
24848: PPUSH
24849: CALL_OW 12
24853: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24854: LD_ADDR_VAR 0 9
24858: PUSH
24859: LD_VAR 0 2
24863: PPUSH
24864: LD_VAR 0 11
24868: PPUSH
24869: LD_VAR 0 12
24873: PPUSH
24874: CALL_OW 272
24878: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24879: LD_ADDR_VAR 0 10
24883: PUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: LD_VAR 0 11
24893: PPUSH
24894: LD_VAR 0 12
24898: PPUSH
24899: CALL_OW 273
24903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24904: LD_VAR 0 9
24908: PPUSH
24909: LD_VAR 0 10
24913: PPUSH
24914: CALL_OW 488
24918: PUSH
24919: LD_VAR 0 9
24923: PUSH
24924: LD_VAR 0 10
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_VAR 0 7
24937: IN
24938: NOT
24939: AND
24940: PUSH
24941: LD_VAR 0 9
24945: PPUSH
24946: LD_VAR 0 10
24950: PPUSH
24951: CALL_OW 458
24955: NOT
24956: AND
24957: IFFALSE 24999
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24959: LD_ADDR_VAR 0 7
24963: PUSH
24964: LD_VAR 0 7
24968: PPUSH
24969: LD_VAR 0 7
24973: PUSH
24974: LD_INT 1
24976: PLUS
24977: PPUSH
24978: LD_VAR 0 9
24982: PUSH
24983: LD_VAR 0 10
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PPUSH
24992: CALL_OW 1
24996: ST_TO_ADDR
24997: GO 25013
// i := i - 1 ;
24999: LD_ADDR_VAR 0 5
25003: PUSH
25004: LD_VAR 0 5
25008: PUSH
25009: LD_INT 1
25011: MINUS
25012: ST_TO_ADDR
// end ;
25013: GO 24819
25015: POP
25016: POP
// for i in tmp do
25017: LD_ADDR_VAR 0 5
25021: PUSH
25022: LD_VAR 0 7
25026: PUSH
25027: FOR_IN
25028: IFFALSE 25066
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25030: LD_VAR 0 1
25034: PPUSH
25035: LD_VAR 0 5
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PPUSH
25044: LD_VAR 0 5
25048: PUSH
25049: LD_INT 2
25051: ARRAY
25052: PPUSH
25053: CALL 24012 0 3
25057: NOT
25058: IFFALSE 25064
// exit ;
25060: POP
25061: POP
25062: GO 25068
25064: GO 25027
25066: POP
25067: POP
// end ;
25068: LD_VAR 0 4
25072: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
// if not GetClass ( unit ) = class_sniper then
25082: LD_VAR 0 1
25086: PPUSH
25087: CALL_OW 257
25091: PUSH
25092: LD_INT 5
25094: EQUAL
25095: NOT
25096: IFFALSE 25100
// exit ;
25098: GO 25488
// dist := 8 ;
25100: LD_ADDR_VAR 0 5
25104: PUSH
25105: LD_INT 8
25107: ST_TO_ADDR
// viewRange := 12 ;
25108: LD_ADDR_VAR 0 7
25112: PUSH
25113: LD_INT 12
25115: ST_TO_ADDR
// side := GetSide ( unit ) ;
25116: LD_ADDR_VAR 0 6
25120: PUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 255
25130: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25131: LD_INT 61
25133: PPUSH
25134: LD_VAR 0 6
25138: PPUSH
25139: CALL_OW 321
25143: PUSH
25144: LD_INT 2
25146: EQUAL
25147: IFFALSE 25157
// viewRange := 16 ;
25149: LD_ADDR_VAR 0 7
25153: PUSH
25154: LD_INT 16
25156: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25157: LD_VAR 0 1
25161: PPUSH
25162: LD_VAR 0 2
25166: PPUSH
25167: LD_VAR 0 3
25171: PPUSH
25172: CALL_OW 297
25176: PUSH
25177: LD_VAR 0 5
25181: GREATER
25182: IFFALSE 25261
// begin ComMoveXY ( unit , x , y ) ;
25184: LD_VAR 0 1
25188: PPUSH
25189: LD_VAR 0 2
25193: PPUSH
25194: LD_VAR 0 3
25198: PPUSH
25199: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25203: LD_INT 35
25205: PPUSH
25206: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25210: LD_VAR 0 1
25214: PPUSH
25215: LD_VAR 0 2
25219: PPUSH
25220: LD_VAR 0 3
25224: PPUSH
25225: CALL 62155 0 3
25229: NOT
25230: IFFALSE 25234
// exit ;
25232: GO 25488
// until GetDistUnitXY ( unit , x , y ) < dist ;
25234: LD_VAR 0 1
25238: PPUSH
25239: LD_VAR 0 2
25243: PPUSH
25244: LD_VAR 0 3
25248: PPUSH
25249: CALL_OW 297
25253: PUSH
25254: LD_VAR 0 5
25258: LESS
25259: IFFALSE 25203
// end ; ComTurnXY ( unit , x , y ) ;
25261: LD_VAR 0 1
25265: PPUSH
25266: LD_VAR 0 2
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: CALL_OW 118
// wait ( 5 ) ;
25280: LD_INT 5
25282: PPUSH
25283: CALL_OW 67
// _d := GetDir ( unit ) ;
25287: LD_ADDR_VAR 0 10
25291: PUSH
25292: LD_VAR 0 1
25296: PPUSH
25297: CALL_OW 254
25301: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25302: LD_ADDR_VAR 0 8
25306: PUSH
25307: LD_VAR 0 1
25311: PPUSH
25312: CALL_OW 250
25316: PPUSH
25317: LD_VAR 0 10
25321: PPUSH
25322: LD_VAR 0 5
25326: PPUSH
25327: CALL_OW 272
25331: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 251
25346: PPUSH
25347: LD_VAR 0 10
25351: PPUSH
25352: LD_VAR 0 5
25356: PPUSH
25357: CALL_OW 273
25361: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25362: LD_VAR 0 8
25366: PPUSH
25367: LD_VAR 0 9
25371: PPUSH
25372: CALL_OW 488
25376: NOT
25377: IFFALSE 25381
// exit ;
25379: GO 25488
// ComAnimCustom ( unit , 1 ) ;
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_INT 1
25388: PPUSH
25389: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25393: LD_VAR 0 8
25397: PPUSH
25398: LD_VAR 0 9
25402: PPUSH
25403: LD_VAR 0 6
25407: PPUSH
25408: LD_VAR 0 7
25412: PPUSH
25413: CALL_OW 330
// repeat wait ( 1 ) ;
25417: LD_INT 1
25419: PPUSH
25420: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 316
25433: PUSH
25434: LD_VAR 0 1
25438: PPUSH
25439: CALL_OW 314
25443: OR
25444: PUSH
25445: LD_VAR 0 1
25449: PPUSH
25450: CALL_OW 302
25454: NOT
25455: OR
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 301
25466: OR
25467: IFFALSE 25417
// RemoveSeeing ( _x , _y , side ) ;
25469: LD_VAR 0 8
25473: PPUSH
25474: LD_VAR 0 9
25478: PPUSH
25479: LD_VAR 0 6
25483: PPUSH
25484: CALL_OW 331
// end ; end_of_file
25488: LD_VAR 0 4
25492: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25493: LD_VAR 0 1
25497: PUSH
25498: LD_INT 200
25500: DOUBLE
25501: GREATEREQUAL
25502: IFFALSE 25510
25504: LD_INT 299
25506: DOUBLE
25507: LESSEQUAL
25508: IFTRUE 25512
25510: GO 25544
25512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25513: LD_VAR 0 1
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: LD_VAR 0 3
25527: PPUSH
25528: LD_VAR 0 4
25532: PPUSH
25533: LD_VAR 0 5
25537: PPUSH
25538: CALL 21141 0 5
25542: GO 25621
25544: LD_INT 300
25546: DOUBLE
25547: GREATEREQUAL
25548: IFFALSE 25556
25550: LD_INT 399
25552: DOUBLE
25553: LESSEQUAL
25554: IFTRUE 25558
25556: GO 25620
25558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25559: LD_VAR 0 1
25563: PPUSH
25564: LD_VAR 0 2
25568: PPUSH
25569: LD_VAR 0 3
25573: PPUSH
25574: LD_VAR 0 4
25578: PPUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: LD_VAR 0 6
25588: PPUSH
25589: LD_VAR 0 7
25593: PPUSH
25594: LD_VAR 0 8
25598: PPUSH
25599: LD_VAR 0 9
25603: PPUSH
25604: LD_VAR 0 10
25608: PPUSH
25609: LD_VAR 0 11
25613: PPUSH
25614: CALL 17466 0 11
25618: GO 25621
25620: POP
// end ;
25621: PPOPN 11
25623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_VAR 0 2
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: LD_VAR 0 4
25643: PPUSH
25644: LD_VAR 0 5
25648: PPUSH
25649: CALL 20877 0 5
// end ; end_of_file
25653: PPOPN 5
25655: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
// if exist_mode then
25660: LD_VAR 0 2
25664: IFFALSE 25689
// unit := CreateCharacter ( prefix & ident ) else
25666: LD_ADDR_VAR 0 5
25670: PUSH
25671: LD_VAR 0 3
25675: PUSH
25676: LD_VAR 0 1
25680: STR
25681: PPUSH
25682: CALL_OW 34
25686: ST_TO_ADDR
25687: GO 25704
// unit := NewCharacter ( ident ) ;
25689: LD_ADDR_VAR 0 5
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 25
25703: ST_TO_ADDR
// result := unit ;
25704: LD_ADDR_VAR 0 4
25708: PUSH
25709: LD_VAR 0 5
25713: ST_TO_ADDR
// end ;
25714: LD_VAR 0 4
25718: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25719: LD_INT 0
25721: PPUSH
25722: PPUSH
// if not side or not nation then
25723: LD_VAR 0 1
25727: NOT
25728: PUSH
25729: LD_VAR 0 2
25733: NOT
25734: OR
25735: IFFALSE 25739
// exit ;
25737: GO 26507
// case nation of nation_american :
25739: LD_VAR 0 2
25743: PUSH
25744: LD_INT 1
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25966
25752: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25753: LD_ADDR_VAR 0 4
25757: PUSH
25758: LD_INT 35
25760: PUSH
25761: LD_INT 45
25763: PUSH
25764: LD_INT 46
25766: PUSH
25767: LD_INT 47
25769: PUSH
25770: LD_INT 82
25772: PUSH
25773: LD_INT 83
25775: PUSH
25776: LD_INT 84
25778: PUSH
25779: LD_INT 85
25781: PUSH
25782: LD_INT 86
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 6
25793: PUSH
25794: LD_INT 15
25796: PUSH
25797: LD_INT 16
25799: PUSH
25800: LD_INT 7
25802: PUSH
25803: LD_INT 12
25805: PUSH
25806: LD_INT 13
25808: PUSH
25809: LD_INT 10
25811: PUSH
25812: LD_INT 14
25814: PUSH
25815: LD_INT 20
25817: PUSH
25818: LD_INT 21
25820: PUSH
25821: LD_INT 22
25823: PUSH
25824: LD_INT 25
25826: PUSH
25827: LD_INT 32
25829: PUSH
25830: LD_INT 27
25832: PUSH
25833: LD_INT 36
25835: PUSH
25836: LD_INT 69
25838: PUSH
25839: LD_INT 39
25841: PUSH
25842: LD_INT 34
25844: PUSH
25845: LD_INT 40
25847: PUSH
25848: LD_INT 48
25850: PUSH
25851: LD_INT 49
25853: PUSH
25854: LD_INT 50
25856: PUSH
25857: LD_INT 51
25859: PUSH
25860: LD_INT 52
25862: PUSH
25863: LD_INT 53
25865: PUSH
25866: LD_INT 54
25868: PUSH
25869: LD_INT 55
25871: PUSH
25872: LD_INT 56
25874: PUSH
25875: LD_INT 57
25877: PUSH
25878: LD_INT 58
25880: PUSH
25881: LD_INT 59
25883: PUSH
25884: LD_INT 60
25886: PUSH
25887: LD_INT 61
25889: PUSH
25890: LD_INT 62
25892: PUSH
25893: LD_INT 80
25895: PUSH
25896: LD_INT 82
25898: PUSH
25899: LD_INT 83
25901: PUSH
25902: LD_INT 84
25904: PUSH
25905: LD_INT 85
25907: PUSH
25908: LD_INT 86
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: ST_TO_ADDR
25964: GO 26431
25966: LD_INT 2
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 26200
25974: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25975: LD_ADDR_VAR 0 4
25979: PUSH
25980: LD_INT 35
25982: PUSH
25983: LD_INT 45
25985: PUSH
25986: LD_INT 46
25988: PUSH
25989: LD_INT 47
25991: PUSH
25992: LD_INT 82
25994: PUSH
25995: LD_INT 83
25997: PUSH
25998: LD_INT 84
26000: PUSH
26001: LD_INT 85
26003: PUSH
26004: LD_INT 87
26006: PUSH
26007: LD_INT 70
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 11
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: LD_INT 4
26021: PUSH
26022: LD_INT 5
26024: PUSH
26025: LD_INT 6
26027: PUSH
26028: LD_INT 15
26030: PUSH
26031: LD_INT 18
26033: PUSH
26034: LD_INT 7
26036: PUSH
26037: LD_INT 17
26039: PUSH
26040: LD_INT 8
26042: PUSH
26043: LD_INT 20
26045: PUSH
26046: LD_INT 21
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_INT 72
26054: PUSH
26055: LD_INT 26
26057: PUSH
26058: LD_INT 69
26060: PUSH
26061: LD_INT 39
26063: PUSH
26064: LD_INT 40
26066: PUSH
26067: LD_INT 41
26069: PUSH
26070: LD_INT 42
26072: PUSH
26073: LD_INT 43
26075: PUSH
26076: LD_INT 48
26078: PUSH
26079: LD_INT 49
26081: PUSH
26082: LD_INT 50
26084: PUSH
26085: LD_INT 51
26087: PUSH
26088: LD_INT 52
26090: PUSH
26091: LD_INT 53
26093: PUSH
26094: LD_INT 54
26096: PUSH
26097: LD_INT 55
26099: PUSH
26100: LD_INT 56
26102: PUSH
26103: LD_INT 60
26105: PUSH
26106: LD_INT 61
26108: PUSH
26109: LD_INT 62
26111: PUSH
26112: LD_INT 66
26114: PUSH
26115: LD_INT 67
26117: PUSH
26118: LD_INT 68
26120: PUSH
26121: LD_INT 81
26123: PUSH
26124: LD_INT 82
26126: PUSH
26127: LD_INT 83
26129: PUSH
26130: LD_INT 84
26132: PUSH
26133: LD_INT 85
26135: PUSH
26136: LD_INT 87
26138: PUSH
26139: LD_INT 88
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
26198: GO 26431
26200: LD_INT 3
26202: DOUBLE
26203: EQUAL
26204: IFTRUE 26208
26206: GO 26430
26208: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26209: LD_ADDR_VAR 0 4
26213: PUSH
26214: LD_INT 46
26216: PUSH
26217: LD_INT 47
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 82
26228: PUSH
26229: LD_INT 83
26231: PUSH
26232: LD_INT 84
26234: PUSH
26235: LD_INT 85
26237: PUSH
26238: LD_INT 86
26240: PUSH
26241: LD_INT 11
26243: PUSH
26244: LD_INT 9
26246: PUSH
26247: LD_INT 20
26249: PUSH
26250: LD_INT 19
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 24
26258: PUSH
26259: LD_INT 22
26261: PUSH
26262: LD_INT 25
26264: PUSH
26265: LD_INT 28
26267: PUSH
26268: LD_INT 29
26270: PUSH
26271: LD_INT 30
26273: PUSH
26274: LD_INT 31
26276: PUSH
26277: LD_INT 37
26279: PUSH
26280: LD_INT 38
26282: PUSH
26283: LD_INT 32
26285: PUSH
26286: LD_INT 27
26288: PUSH
26289: LD_INT 33
26291: PUSH
26292: LD_INT 69
26294: PUSH
26295: LD_INT 39
26297: PUSH
26298: LD_INT 34
26300: PUSH
26301: LD_INT 40
26303: PUSH
26304: LD_INT 71
26306: PUSH
26307: LD_INT 23
26309: PUSH
26310: LD_INT 44
26312: PUSH
26313: LD_INT 48
26315: PUSH
26316: LD_INT 49
26318: PUSH
26319: LD_INT 50
26321: PUSH
26322: LD_INT 51
26324: PUSH
26325: LD_INT 52
26327: PUSH
26328: LD_INT 53
26330: PUSH
26331: LD_INT 54
26333: PUSH
26334: LD_INT 55
26336: PUSH
26337: LD_INT 56
26339: PUSH
26340: LD_INT 57
26342: PUSH
26343: LD_INT 58
26345: PUSH
26346: LD_INT 59
26348: PUSH
26349: LD_INT 63
26351: PUSH
26352: LD_INT 64
26354: PUSH
26355: LD_INT 65
26357: PUSH
26358: LD_INT 82
26360: PUSH
26361: LD_INT 83
26363: PUSH
26364: LD_INT 84
26366: PUSH
26367: LD_INT 85
26369: PUSH
26370: LD_INT 86
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
26428: GO 26431
26430: POP
// if state > - 1 and state < 3 then
26431: LD_VAR 0 3
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: GREATER
26440: PUSH
26441: LD_VAR 0 3
26445: PUSH
26446: LD_INT 3
26448: LESS
26449: AND
26450: IFFALSE 26507
// for i in result do
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: LD_VAR 0 4
26461: PUSH
26462: FOR_IN
26463: IFFALSE 26505
// if GetTech ( i , side ) <> state then
26465: LD_VAR 0 5
26469: PPUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 321
26479: PUSH
26480: LD_VAR 0 3
26484: NONEQUAL
26485: IFFALSE 26503
// result := result diff i ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_VAR 0 4
26496: PUSH
26497: LD_VAR 0 5
26501: DIFF
26502: ST_TO_ADDR
26503: GO 26462
26505: POP
26506: POP
// end ;
26507: LD_VAR 0 4
26511: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
26516: PPUSH
// result := true ;
26517: LD_ADDR_VAR 0 3
26521: PUSH
26522: LD_INT 1
26524: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26525: LD_ADDR_VAR 0 5
26529: PUSH
26530: LD_VAR 0 2
26534: PPUSH
26535: CALL_OW 480
26539: ST_TO_ADDR
// if not tmp then
26540: LD_VAR 0 5
26544: NOT
26545: IFFALSE 26549
// exit ;
26547: GO 26598
// for i in tmp do
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_VAR 0 5
26558: PUSH
26559: FOR_IN
26560: IFFALSE 26596
// if GetTech ( i , side ) <> state_researched then
26562: LD_VAR 0 4
26566: PPUSH
26567: LD_VAR 0 1
26571: PPUSH
26572: CALL_OW 321
26576: PUSH
26577: LD_INT 2
26579: NONEQUAL
26580: IFFALSE 26594
// begin result := false ;
26582: LD_ADDR_VAR 0 3
26586: PUSH
26587: LD_INT 0
26589: ST_TO_ADDR
// exit ;
26590: POP
26591: POP
26592: GO 26598
// end ;
26594: GO 26559
26596: POP
26597: POP
// end ;
26598: LD_VAR 0 3
26602: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26603: LD_INT 0
26605: PPUSH
26606: PPUSH
26607: PPUSH
26608: PPUSH
26609: PPUSH
26610: PPUSH
26611: PPUSH
26612: PPUSH
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26618: LD_VAR 0 1
26622: NOT
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 257
26633: PUSH
26634: LD_INT 9
26636: NONEQUAL
26637: OR
26638: IFFALSE 26642
// exit ;
26640: GO 27215
// side := GetSide ( unit ) ;
26642: LD_ADDR_VAR 0 9
26646: PUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 255
26656: ST_TO_ADDR
// tech_space := tech_spacanom ;
26657: LD_ADDR_VAR 0 12
26661: PUSH
26662: LD_INT 29
26664: ST_TO_ADDR
// tech_time := tech_taurad ;
26665: LD_ADDR_VAR 0 13
26669: PUSH
26670: LD_INT 28
26672: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26673: LD_ADDR_VAR 0 11
26677: PUSH
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 310
26687: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26688: LD_VAR 0 11
26692: PPUSH
26693: CALL_OW 247
26697: PUSH
26698: LD_INT 2
26700: EQUAL
26701: IFFALSE 26705
// exit ;
26703: GO 27215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26705: LD_ADDR_VAR 0 8
26709: PUSH
26710: LD_INT 81
26712: PUSH
26713: LD_VAR 0 9
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: LD_INT 21
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL_OW 69
26747: ST_TO_ADDR
// if not tmp then
26748: LD_VAR 0 8
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 27215
// if in_unit then
26757: LD_VAR 0 11
26761: IFFALSE 26785
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26763: LD_ADDR_VAR 0 10
26767: PUSH
26768: LD_VAR 0 8
26772: PPUSH
26773: LD_VAR 0 11
26777: PPUSH
26778: CALL_OW 74
26782: ST_TO_ADDR
26783: GO 26805
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26785: LD_ADDR_VAR 0 10
26789: PUSH
26790: LD_VAR 0 8
26794: PPUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 74
26804: ST_TO_ADDR
// if not enemy then
26805: LD_VAR 0 10
26809: NOT
26810: IFFALSE 26814
// exit ;
26812: GO 27215
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26814: LD_VAR 0 11
26818: PUSH
26819: LD_VAR 0 11
26823: PPUSH
26824: LD_VAR 0 10
26828: PPUSH
26829: CALL_OW 296
26833: PUSH
26834: LD_INT 13
26836: GREATER
26837: AND
26838: PUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_VAR 0 10
26848: PPUSH
26849: CALL_OW 296
26853: PUSH
26854: LD_INT 12
26856: GREATER
26857: OR
26858: IFFALSE 26862
// exit ;
26860: GO 27215
// missile := [ 1 ] ;
26862: LD_ADDR_VAR 0 14
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26873: LD_VAR 0 9
26877: PPUSH
26878: LD_VAR 0 12
26882: PPUSH
26883: CALL_OW 325
26887: IFFALSE 26916
// missile := Replace ( missile , missile + 1 , 2 ) ;
26889: LD_ADDR_VAR 0 14
26893: PUSH
26894: LD_VAR 0 14
26898: PPUSH
26899: LD_VAR 0 14
26903: PUSH
26904: LD_INT 1
26906: PLUS
26907: PPUSH
26908: LD_INT 2
26910: PPUSH
26911: CALL_OW 1
26915: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26916: LD_VAR 0 9
26920: PPUSH
26921: LD_VAR 0 13
26925: PPUSH
26926: CALL_OW 325
26930: PUSH
26931: LD_VAR 0 10
26935: PPUSH
26936: CALL_OW 255
26940: PPUSH
26941: LD_VAR 0 13
26945: PPUSH
26946: CALL_OW 325
26950: NOT
26951: AND
26952: IFFALSE 26981
// missile := Replace ( missile , missile + 1 , 3 ) ;
26954: LD_ADDR_VAR 0 14
26958: PUSH
26959: LD_VAR 0 14
26963: PPUSH
26964: LD_VAR 0 14
26968: PUSH
26969: LD_INT 1
26971: PLUS
26972: PPUSH
26973: LD_INT 3
26975: PPUSH
26976: CALL_OW 1
26980: ST_TO_ADDR
// if missile < 2 then
26981: LD_VAR 0 14
26985: PUSH
26986: LD_INT 2
26988: LESS
26989: IFFALSE 26993
// exit ;
26991: GO 27215
// x := GetX ( enemy ) ;
26993: LD_ADDR_VAR 0 4
26997: PUSH
26998: LD_VAR 0 10
27002: PPUSH
27003: CALL_OW 250
27007: ST_TO_ADDR
// y := GetY ( enemy ) ;
27008: LD_ADDR_VAR 0 5
27012: PUSH
27013: LD_VAR 0 10
27017: PPUSH
27018: CALL_OW 251
27022: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27023: LD_ADDR_VAR 0 6
27027: PUSH
27028: LD_VAR 0 4
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PPUSH
27037: LD_INT 1
27039: PPUSH
27040: CALL_OW 12
27044: PLUS
27045: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27046: LD_ADDR_VAR 0 7
27050: PUSH
27051: LD_VAR 0 5
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PPUSH
27060: LD_INT 1
27062: PPUSH
27063: CALL_OW 12
27067: PLUS
27068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27069: LD_VAR 0 6
27073: PPUSH
27074: LD_VAR 0 7
27078: PPUSH
27079: CALL_OW 488
27083: NOT
27084: IFFALSE 27106
// begin _x := x ;
27086: LD_ADDR_VAR 0 6
27090: PUSH
27091: LD_VAR 0 4
27095: ST_TO_ADDR
// _y := y ;
27096: LD_ADDR_VAR 0 7
27100: PUSH
27101: LD_VAR 0 5
27105: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27106: LD_ADDR_VAR 0 3
27110: PUSH
27111: LD_INT 1
27113: PPUSH
27114: LD_VAR 0 14
27118: PPUSH
27119: CALL_OW 12
27123: ST_TO_ADDR
// case i of 1 :
27124: LD_VAR 0 3
27128: PUSH
27129: LD_INT 1
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27154
27137: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27138: LD_VAR 0 1
27142: PPUSH
27143: LD_VAR 0 10
27147: PPUSH
27148: CALL_OW 115
27152: GO 27215
27154: LD_INT 2
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27184
27162: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27163: LD_VAR 0 1
27167: PPUSH
27168: LD_VAR 0 6
27172: PPUSH
27173: LD_VAR 0 7
27177: PPUSH
27178: CALL_OW 153
27182: GO 27215
27184: LD_INT 3
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27192
27190: GO 27214
27192: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_VAR 0 6
27202: PPUSH
27203: LD_VAR 0 7
27207: PPUSH
27208: CALL_OW 154
27212: GO 27215
27214: POP
// end ;
27215: LD_VAR 0 2
27219: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27220: LD_INT 0
27222: PPUSH
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
// if not unit or not building then
27228: LD_VAR 0 1
27232: NOT
27233: PUSH
27234: LD_VAR 0 2
27238: NOT
27239: OR
27240: IFFALSE 27244
// exit ;
27242: GO 27402
// x := GetX ( building ) ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 250
27258: ST_TO_ADDR
// y := GetY ( building ) ;
27259: LD_ADDR_VAR 0 6
27263: PUSH
27264: LD_VAR 0 2
27268: PPUSH
27269: CALL_OW 251
27273: ST_TO_ADDR
// for i = 0 to 5 do
27274: LD_ADDR_VAR 0 4
27278: PUSH
27279: DOUBLE
27280: LD_INT 0
27282: DEC
27283: ST_TO_ADDR
27284: LD_INT 5
27286: PUSH
27287: FOR_TO
27288: IFFALSE 27400
// begin _x := ShiftX ( x , i , 3 ) ;
27290: LD_ADDR_VAR 0 7
27294: PUSH
27295: LD_VAR 0 5
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_INT 3
27307: PPUSH
27308: CALL_OW 272
27312: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27313: LD_ADDR_VAR 0 8
27317: PUSH
27318: LD_VAR 0 6
27322: PPUSH
27323: LD_VAR 0 4
27327: PPUSH
27328: LD_INT 3
27330: PPUSH
27331: CALL_OW 273
27335: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27336: LD_VAR 0 7
27340: PPUSH
27341: LD_VAR 0 8
27345: PPUSH
27346: CALL_OW 488
27350: NOT
27351: IFFALSE 27355
// continue ;
27353: GO 27287
// if HexInfo ( _x , _y ) = 0 then
27355: LD_VAR 0 7
27359: PPUSH
27360: LD_VAR 0 8
27364: PPUSH
27365: CALL_OW 428
27369: PUSH
27370: LD_INT 0
27372: EQUAL
27373: IFFALSE 27398
// begin ComMoveXY ( unit , _x , _y ) ;
27375: LD_VAR 0 1
27379: PPUSH
27380: LD_VAR 0 7
27384: PPUSH
27385: LD_VAR 0 8
27389: PPUSH
27390: CALL_OW 111
// exit ;
27394: POP
27395: POP
27396: GO 27402
// end ; end ;
27398: GO 27287
27400: POP
27401: POP
// end ;
27402: LD_VAR 0 3
27406: RET
// export function ScanBase ( side , base_area ) ; begin
27407: LD_INT 0
27409: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27410: LD_ADDR_VAR 0 3
27414: PUSH
27415: LD_VAR 0 2
27419: PPUSH
27420: LD_INT 81
27422: PUSH
27423: LD_VAR 0 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 70
27436: ST_TO_ADDR
// end ;
27437: LD_VAR 0 3
27441: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27442: LD_INT 0
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
// result := false ;
27448: LD_ADDR_VAR 0 2
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// side := GetSide ( unit ) ;
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_VAR 0 1
27465: PPUSH
27466: CALL_OW 255
27470: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27471: LD_ADDR_VAR 0 4
27475: PUSH
27476: LD_VAR 0 1
27480: PPUSH
27481: CALL_OW 248
27485: ST_TO_ADDR
// case nat of 1 :
27486: LD_VAR 0 4
27490: PUSH
27491: LD_INT 1
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27499
27497: GO 27510
27499: POP
// tech := tech_lassight ; 2 :
27500: LD_ADDR_VAR 0 5
27504: PUSH
27505: LD_INT 12
27507: ST_TO_ADDR
27508: GO 27549
27510: LD_INT 2
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 27529
27518: POP
// tech := tech_mortar ; 3 :
27519: LD_ADDR_VAR 0 5
27523: PUSH
27524: LD_INT 41
27526: ST_TO_ADDR
27527: GO 27549
27529: LD_INT 3
27531: DOUBLE
27532: EQUAL
27533: IFTRUE 27537
27535: GO 27548
27537: POP
// tech := tech_bazooka ; end ;
27538: LD_ADDR_VAR 0 5
27542: PUSH
27543: LD_INT 44
27545: ST_TO_ADDR
27546: GO 27549
27548: POP
// if Researched ( side , tech ) then
27549: LD_VAR 0 3
27553: PPUSH
27554: LD_VAR 0 5
27558: PPUSH
27559: CALL_OW 325
27563: IFFALSE 27590
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27565: LD_ADDR_VAR 0 2
27569: PUSH
27570: LD_INT 5
27572: PUSH
27573: LD_INT 8
27575: PUSH
27576: LD_INT 9
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: PUSH
27584: LD_VAR 0 4
27588: ARRAY
27589: ST_TO_ADDR
// end ;
27590: LD_VAR 0 2
27594: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
27599: PPUSH
// if not mines then
27600: LD_VAR 0 2
27604: NOT
27605: IFFALSE 27609
// exit ;
27607: GO 27753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: LD_INT 81
27616: PUSH
27617: LD_VAR 0 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 3
27628: PUSH
27629: LD_INT 21
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: ST_TO_ADDR
// for i in mines do
27652: LD_ADDR_VAR 0 4
27656: PUSH
27657: LD_VAR 0 2
27661: PUSH
27662: FOR_IN
27663: IFFALSE 27751
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27665: LD_VAR 0 4
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: LD_VAR 0 4
27678: PUSH
27679: LD_INT 2
27681: ARRAY
27682: PPUSH
27683: CALL_OW 458
27687: NOT
27688: IFFALSE 27692
// continue ;
27690: GO 27662
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27692: LD_VAR 0 4
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PPUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 2
27708: ARRAY
27709: PPUSH
27710: CALL_OW 428
27714: PUSH
27715: LD_VAR 0 5
27719: IN
27720: IFFALSE 27749
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27722: LD_VAR 0 4
27726: PUSH
27727: LD_INT 1
27729: ARRAY
27730: PPUSH
27731: LD_VAR 0 4
27735: PUSH
27736: LD_INT 2
27738: ARRAY
27739: PPUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: CALL_OW 456
// end ;
27749: GO 27662
27751: POP
27752: POP
// end ;
27753: LD_VAR 0 3
27757: RET
// export function Count ( array ) ; begin
27758: LD_INT 0
27760: PPUSH
// result := array + 0 ;
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_VAR 0 1
27770: PUSH
27771: LD_INT 0
27773: PLUS
27774: ST_TO_ADDR
// end ;
27775: LD_VAR 0 2
27779: RET
// export function IsEmpty ( building ) ; begin
27780: LD_INT 0
27782: PPUSH
// if not building then
27783: LD_VAR 0 1
27787: NOT
27788: IFFALSE 27792
// exit ;
27790: GO 27835
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27792: LD_ADDR_VAR 0 2
27796: PUSH
27797: LD_VAR 0 1
27801: PUSH
27802: LD_INT 22
27804: PUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 255
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 58
27821: PUSH
27822: EMPTY
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: IN
27834: ST_TO_ADDR
// end ;
27835: LD_VAR 0 2
27839: RET
// export function IsNotFull ( building ) ; var places ; begin
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
// if not building then
27844: LD_VAR 0 1
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27881
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27853: LD_ADDR_VAR 0 2
27857: PUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 62
27868: PUSH
27869: EMPTY
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PPUSH
27876: CALL_OW 72
27880: ST_TO_ADDR
// end ;
27881: LD_VAR 0 2
27885: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
// tmp := [ ] ;
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: EMPTY
27898: ST_TO_ADDR
// list := [ ] ;
27899: LD_ADDR_VAR 0 5
27903: PUSH
27904: EMPTY
27905: ST_TO_ADDR
// for i = 16 to 25 do
27906: LD_ADDR_VAR 0 4
27910: PUSH
27911: DOUBLE
27912: LD_INT 16
27914: DEC
27915: ST_TO_ADDR
27916: LD_INT 25
27918: PUSH
27919: FOR_TO
27920: IFFALSE 27993
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 22
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 255
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 91
27951: PUSH
27952: LD_VAR 0 1
27956: PUSH
27957: LD_INT 6
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 30
27967: PUSH
27968: LD_VAR 0 4
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: PUSH
27982: EMPTY
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ADD
27990: ST_TO_ADDR
27991: GO 27919
27993: POP
27994: POP
// for i = 1 to tmp do
27995: LD_ADDR_VAR 0 4
27999: PUSH
28000: DOUBLE
28001: LD_INT 1
28003: DEC
28004: ST_TO_ADDR
28005: LD_VAR 0 3
28009: PUSH
28010: FOR_TO
28011: IFFALSE 28099
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28013: LD_ADDR_VAR 0 5
28017: PUSH
28018: LD_VAR 0 5
28022: PUSH
28023: LD_VAR 0 3
28027: PUSH
28028: LD_VAR 0 4
28032: ARRAY
28033: PPUSH
28034: CALL_OW 266
28038: PUSH
28039: LD_VAR 0 3
28043: PUSH
28044: LD_VAR 0 4
28048: ARRAY
28049: PPUSH
28050: CALL_OW 250
28054: PUSH
28055: LD_VAR 0 3
28059: PUSH
28060: LD_VAR 0 4
28064: ARRAY
28065: PPUSH
28066: CALL_OW 251
28070: PUSH
28071: LD_VAR 0 3
28075: PUSH
28076: LD_VAR 0 4
28080: ARRAY
28081: PPUSH
28082: CALL_OW 254
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: ADD
28096: ST_TO_ADDR
28097: GO 28010
28099: POP
28100: POP
// result := list ;
28101: LD_ADDR_VAR 0 2
28105: PUSH
28106: LD_VAR 0 5
28110: ST_TO_ADDR
// end ;
28111: LD_VAR 0 2
28115: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
28120: PPUSH
28121: PPUSH
28122: PPUSH
28123: PPUSH
28124: PPUSH
// if not factory then
28125: LD_VAR 0 1
28129: NOT
28130: IFFALSE 28134
// exit ;
28132: GO 28727
// if control = control_apeman then
28134: LD_VAR 0 4
28138: PUSH
28139: LD_INT 5
28141: EQUAL
28142: IFFALSE 28251
// begin tmp := UnitsInside ( factory ) ;
28144: LD_ADDR_VAR 0 8
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 313
28158: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28159: LD_VAR 0 8
28163: PPUSH
28164: LD_INT 25
28166: PUSH
28167: LD_INT 12
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 72
28178: NOT
28179: IFFALSE 28189
// control := control_manual ;
28181: LD_ADDR_VAR 0 4
28185: PUSH
28186: LD_INT 1
28188: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28189: LD_ADDR_VAR 0 8
28193: PUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL 27886 0 1
28203: ST_TO_ADDR
// if tmp then
28204: LD_VAR 0 8
28208: IFFALSE 28251
// begin for i in tmp do
28210: LD_ADDR_VAR 0 7
28214: PUSH
28215: LD_VAR 0 8
28219: PUSH
28220: FOR_IN
28221: IFFALSE 28249
// if i [ 1 ] = b_ext_radio then
28223: LD_VAR 0 7
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PUSH
28232: LD_INT 22
28234: EQUAL
28235: IFFALSE 28247
// begin control := control_remote ;
28237: LD_ADDR_VAR 0 4
28241: PUSH
28242: LD_INT 2
28244: ST_TO_ADDR
// break ;
28245: GO 28249
// end ;
28247: GO 28220
28249: POP
28250: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28251: LD_VAR 0 1
28255: PPUSH
28256: LD_VAR 0 2
28260: PPUSH
28261: LD_VAR 0 3
28265: PPUSH
28266: LD_VAR 0 4
28270: PPUSH
28271: LD_VAR 0 5
28275: PPUSH
28276: CALL_OW 448
28280: IFFALSE 28315
// begin result := [ chassis , engine , control , weapon ] ;
28282: LD_ADDR_VAR 0 6
28286: PUSH
28287: LD_VAR 0 2
28291: PUSH
28292: LD_VAR 0 3
28296: PUSH
28297: LD_VAR 0 4
28301: PUSH
28302: LD_VAR 0 5
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// exit ;
28313: GO 28727
// end ; _chassis := AvailableChassisList ( factory ) ;
28315: LD_ADDR_VAR 0 9
28319: PUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL_OW 475
28329: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28330: LD_ADDR_VAR 0 11
28334: PUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL_OW 476
28344: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28345: LD_ADDR_VAR 0 12
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 477
28359: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28360: LD_ADDR_VAR 0 10
28364: PUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 478
28374: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28375: LD_VAR 0 9
28379: NOT
28380: PUSH
28381: LD_VAR 0 11
28385: NOT
28386: OR
28387: PUSH
28388: LD_VAR 0 12
28392: NOT
28393: OR
28394: PUSH
28395: LD_VAR 0 10
28399: NOT
28400: OR
28401: IFFALSE 28436
// begin result := [ chassis , engine , control , weapon ] ;
28403: LD_ADDR_VAR 0 6
28407: PUSH
28408: LD_VAR 0 2
28412: PUSH
28413: LD_VAR 0 3
28417: PUSH
28418: LD_VAR 0 4
28422: PUSH
28423: LD_VAR 0 5
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: ST_TO_ADDR
// exit ;
28434: GO 28727
// end ; if not chassis in _chassis then
28436: LD_VAR 0 2
28440: PUSH
28441: LD_VAR 0 9
28445: IN
28446: NOT
28447: IFFALSE 28473
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28449: LD_ADDR_VAR 0 2
28453: PUSH
28454: LD_VAR 0 9
28458: PUSH
28459: LD_INT 1
28461: PPUSH
28462: LD_VAR 0 9
28466: PPUSH
28467: CALL_OW 12
28471: ARRAY
28472: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28473: LD_VAR 0 2
28477: PPUSH
28478: LD_VAR 0 3
28482: PPUSH
28483: CALL 28732 0 2
28487: NOT
28488: IFFALSE 28547
// repeat engine := _engine [ 1 ] ;
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_VAR 0 11
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28504: LD_ADDR_VAR 0 11
28508: PUSH
28509: LD_VAR 0 11
28513: PPUSH
28514: LD_INT 1
28516: PPUSH
28517: CALL_OW 3
28521: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28522: LD_VAR 0 2
28526: PPUSH
28527: LD_VAR 0 3
28531: PPUSH
28532: CALL 28732 0 2
28536: PUSH
28537: LD_VAR 0 11
28541: PUSH
28542: EMPTY
28543: EQUAL
28544: OR
28545: IFFALSE 28490
// if not control in _control then
28547: LD_VAR 0 4
28551: PUSH
28552: LD_VAR 0 12
28556: IN
28557: NOT
28558: IFFALSE 28584
// control := _control [ rand ( 1 , _control ) ] ;
28560: LD_ADDR_VAR 0 4
28564: PUSH
28565: LD_VAR 0 12
28569: PUSH
28570: LD_INT 1
28572: PPUSH
28573: LD_VAR 0 12
28577: PPUSH
28578: CALL_OW 12
28582: ARRAY
28583: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28584: LD_VAR 0 2
28588: PPUSH
28589: LD_VAR 0 5
28593: PPUSH
28594: CALL 28952 0 2
28598: NOT
28599: IFFALSE 28658
// repeat weapon := _weapon [ 1 ] ;
28601: LD_ADDR_VAR 0 5
28605: PUSH
28606: LD_VAR 0 10
28610: PUSH
28611: LD_INT 1
28613: ARRAY
28614: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28615: LD_ADDR_VAR 0 10
28619: PUSH
28620: LD_VAR 0 10
28624: PPUSH
28625: LD_INT 1
28627: PPUSH
28628: CALL_OW 3
28632: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28633: LD_VAR 0 2
28637: PPUSH
28638: LD_VAR 0 5
28642: PPUSH
28643: CALL 28952 0 2
28647: PUSH
28648: LD_VAR 0 10
28652: PUSH
28653: EMPTY
28654: EQUAL
28655: OR
28656: IFFALSE 28601
// result := [ ] ;
28658: LD_ADDR_VAR 0 6
28662: PUSH
28663: EMPTY
28664: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28665: LD_VAR 0 1
28669: PPUSH
28670: LD_VAR 0 2
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: LD_VAR 0 4
28684: PPUSH
28685: LD_VAR 0 5
28689: PPUSH
28690: CALL_OW 448
28694: IFFALSE 28727
// result := [ chassis , engine , control , weapon ] ;
28696: LD_ADDR_VAR 0 6
28700: PUSH
28701: LD_VAR 0 2
28705: PUSH
28706: LD_VAR 0 3
28710: PUSH
28711: LD_VAR 0 4
28715: PUSH
28716: LD_VAR 0 5
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: ST_TO_ADDR
// end ;
28727: LD_VAR 0 6
28731: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28732: LD_INT 0
28734: PPUSH
// if not chassis or not engine then
28735: LD_VAR 0 1
28739: NOT
28740: PUSH
28741: LD_VAR 0 2
28745: NOT
28746: OR
28747: IFFALSE 28751
// exit ;
28749: GO 28947
// case engine of engine_solar :
28751: LD_VAR 0 2
28755: PUSH
28756: LD_INT 2
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28802
28764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 11
28772: PUSH
28773: LD_INT 12
28775: PUSH
28776: LD_INT 13
28778: PUSH
28779: LD_INT 14
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
28800: GO 28931
28802: LD_INT 1
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28872
28810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_INT 11
28818: PUSH
28819: LD_INT 12
28821: PUSH
28822: LD_INT 13
28824: PUSH
28825: LD_INT 14
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: LD_INT 4
28839: PUSH
28840: LD_INT 5
28842: PUSH
28843: LD_INT 21
28845: PUSH
28846: LD_INT 23
28848: PUSH
28849: LD_INT 22
28851: PUSH
28852: LD_INT 24
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
28870: GO 28931
28872: LD_INT 3
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28880
28878: GO 28930
28880: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28881: LD_ADDR_VAR 0 3
28885: PUSH
28886: LD_INT 13
28888: PUSH
28889: LD_INT 14
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: LD_INT 4
28900: PUSH
28901: LD_INT 5
28903: PUSH
28904: LD_INT 21
28906: PUSH
28907: LD_INT 22
28909: PUSH
28910: LD_INT 23
28912: PUSH
28913: LD_INT 24
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: ST_TO_ADDR
28928: GO 28931
28930: POP
// result := ( chassis in result ) ;
28931: LD_ADDR_VAR 0 3
28935: PUSH
28936: LD_VAR 0 1
28940: PUSH
28941: LD_VAR 0 3
28945: IN
28946: ST_TO_ADDR
// end ;
28947: LD_VAR 0 3
28951: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28952: LD_INT 0
28954: PPUSH
// if not chassis or not weapon then
28955: LD_VAR 0 1
28959: NOT
28960: PUSH
28961: LD_VAR 0 2
28965: NOT
28966: OR
28967: IFFALSE 28971
// exit ;
28969: GO 30031
// case weapon of us_machine_gun :
28971: LD_VAR 0 2
28975: PUSH
28976: LD_INT 2
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 29014
28984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: LD_INT 4
29001: PUSH
29002: LD_INT 5
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
29012: GO 30015
29014: LD_INT 3
29016: DOUBLE
29017: EQUAL
29018: IFTRUE 29022
29020: GO 29052
29022: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29023: LD_ADDR_VAR 0 3
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 4
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
29050: GO 30015
29052: LD_INT 11
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29090
29060: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: LD_INT 3
29074: PUSH
29075: LD_INT 4
29077: PUSH
29078: LD_INT 5
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: ST_TO_ADDR
29088: GO 30015
29090: LD_INT 4
29092: DOUBLE
29093: EQUAL
29094: IFTRUE 29098
29096: GO 29124
29098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29099: LD_ADDR_VAR 0 3
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: LD_INT 3
29109: PUSH
29110: LD_INT 4
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
29122: GO 30015
29124: LD_INT 5
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29158
29132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 3
29143: PUSH
29144: LD_INT 4
29146: PUSH
29147: LD_INT 5
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
29156: GO 30015
29158: LD_INT 9
29160: DOUBLE
29161: EQUAL
29162: IFTRUE 29166
29164: GO 29192
29166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29167: LD_ADDR_VAR 0 3
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: LD_INT 4
29180: PUSH
29181: LD_INT 5
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
29190: GO 30015
29192: LD_INT 7
29194: DOUBLE
29195: EQUAL
29196: IFTRUE 29200
29198: GO 29226
29200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29201: LD_ADDR_VAR 0 3
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 30015
29226: LD_INT 12
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29260
29234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 3
29245: PUSH
29246: LD_INT 4
29248: PUSH
29249: LD_INT 5
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
29258: GO 30015
29260: LD_INT 13
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29294
29268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: LD_INT 5
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
29292: GO 30015
29294: LD_INT 14
29296: DOUBLE
29297: EQUAL
29298: IFTRUE 29302
29300: GO 29320
29302: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29303: LD_ADDR_VAR 0 3
29307: PUSH
29308: LD_INT 4
29310: PUSH
29311: LD_INT 5
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: ST_TO_ADDR
29318: GO 30015
29320: LD_INT 6
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29346
29328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 4
29336: PUSH
29337: LD_INT 5
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: ST_TO_ADDR
29344: GO 30015
29346: LD_INT 10
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29372
29354: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 4
29362: PUSH
29363: LD_INT 5
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: ST_TO_ADDR
29370: GO 30015
29372: LD_INT 22
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29406
29380: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 11
29388: PUSH
29389: LD_INT 12
29391: PUSH
29392: LD_INT 13
29394: PUSH
29395: LD_INT 14
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
29404: GO 30015
29406: LD_INT 23
29408: DOUBLE
29409: EQUAL
29410: IFTRUE 29414
29412: GO 29440
29414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: LD_INT 11
29422: PUSH
29423: LD_INT 12
29425: PUSH
29426: LD_INT 13
29428: PUSH
29429: LD_INT 14
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
29438: GO 30015
29440: LD_INT 24
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29474
29448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29449: LD_ADDR_VAR 0 3
29453: PUSH
29454: LD_INT 11
29456: PUSH
29457: LD_INT 12
29459: PUSH
29460: LD_INT 13
29462: PUSH
29463: LD_INT 14
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 30015
29474: LD_INT 30
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29508
29482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 11
29490: PUSH
29491: LD_INT 12
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
29506: GO 30015
29508: LD_INT 25
29510: DOUBLE
29511: EQUAL
29512: IFTRUE 29516
29514: GO 29534
29516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_INT 13
29524: PUSH
29525: LD_INT 14
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: ST_TO_ADDR
29532: GO 30015
29534: LD_INT 27
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 29560
29542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29543: LD_ADDR_VAR 0 3
29547: PUSH
29548: LD_INT 13
29550: PUSH
29551: LD_INT 14
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: ST_TO_ADDR
29558: GO 30015
29560: LD_INT 92
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29594
29568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 11
29576: PUSH
29577: LD_INT 12
29579: PUSH
29580: LD_INT 13
29582: PUSH
29583: LD_INT 14
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 30015
29594: LD_INT 28
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29620
29602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 13
29610: PUSH
29611: LD_INT 14
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: ST_TO_ADDR
29618: GO 30015
29620: LD_INT 29
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29646
29628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 13
29636: PUSH
29637: LD_INT 14
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 30015
29646: LD_INT 31
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29672
29654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 13
29662: PUSH
29663: LD_INT 14
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: ST_TO_ADDR
29670: GO 30015
29672: LD_INT 26
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29698
29680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29681: LD_ADDR_VAR 0 3
29685: PUSH
29686: LD_INT 13
29688: PUSH
29689: LD_INT 14
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: ST_TO_ADDR
29696: GO 30015
29698: LD_INT 42
29700: DOUBLE
29701: EQUAL
29702: IFTRUE 29706
29704: GO 29732
29706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 21
29714: PUSH
29715: LD_INT 22
29717: PUSH
29718: LD_INT 23
29720: PUSH
29721: LD_INT 24
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
29730: GO 30015
29732: LD_INT 43
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29766
29740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 21
29748: PUSH
29749: LD_INT 22
29751: PUSH
29752: LD_INT 23
29754: PUSH
29755: LD_INT 24
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
29764: GO 30015
29766: LD_INT 44
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29800
29774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: LD_INT 21
29782: PUSH
29783: LD_INT 22
29785: PUSH
29786: LD_INT 23
29788: PUSH
29789: LD_INT 24
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: ST_TO_ADDR
29798: GO 30015
29800: LD_INT 45
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 29834
29808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29809: LD_ADDR_VAR 0 3
29813: PUSH
29814: LD_INT 21
29816: PUSH
29817: LD_INT 22
29819: PUSH
29820: LD_INT 23
29822: PUSH
29823: LD_INT 24
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
29832: GO 30015
29834: LD_INT 49
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29868
29842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 21
29850: PUSH
29851: LD_INT 22
29853: PUSH
29854: LD_INT 23
29856: PUSH
29857: LD_INT 24
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: ST_TO_ADDR
29866: GO 30015
29868: LD_INT 51
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29902
29876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 21
29884: PUSH
29885: LD_INT 22
29887: PUSH
29888: LD_INT 23
29890: PUSH
29891: LD_INT 24
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
29900: GO 30015
29902: LD_INT 52
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29936
29910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_INT 21
29918: PUSH
29919: LD_INT 22
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 24
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: ST_TO_ADDR
29934: GO 30015
29936: LD_INT 53
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29962
29944: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: LD_INT 23
29952: PUSH
29953: LD_INT 24
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: ST_TO_ADDR
29960: GO 30015
29962: LD_INT 46
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 29988
29970: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_INT 23
29978: PUSH
29979: LD_INT 24
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: ST_TO_ADDR
29986: GO 30015
29988: LD_INT 47
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30014
29996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_INT 23
30004: PUSH
30005: LD_INT 24
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30015
30014: POP
// result := ( chassis in result ) ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_VAR 0 1
30024: PUSH
30025: LD_VAR 0 3
30029: IN
30030: ST_TO_ADDR
// end ;
30031: LD_VAR 0 3
30035: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30036: LD_INT 0
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
// result := array ;
30045: LD_ADDR_VAR 0 5
30049: PUSH
30050: LD_VAR 0 1
30054: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30055: LD_VAR 0 1
30059: NOT
30060: PUSH
30061: LD_VAR 0 2
30065: NOT
30066: OR
30067: PUSH
30068: LD_VAR 0 3
30072: NOT
30073: OR
30074: PUSH
30075: LD_VAR 0 2
30079: PUSH
30080: LD_VAR 0 1
30084: GREATER
30085: OR
30086: PUSH
30087: LD_VAR 0 3
30091: PUSH
30092: LD_VAR 0 1
30096: GREATER
30097: OR
30098: IFFALSE 30102
// exit ;
30100: GO 30398
// if direction then
30102: LD_VAR 0 4
30106: IFFALSE 30170
// begin d := 1 ;
30108: LD_ADDR_VAR 0 9
30112: PUSH
30113: LD_INT 1
30115: ST_TO_ADDR
// if i_from > i_to then
30116: LD_VAR 0 2
30120: PUSH
30121: LD_VAR 0 3
30125: GREATER
30126: IFFALSE 30152
// length := ( array - i_from ) + i_to else
30128: LD_ADDR_VAR 0 11
30132: PUSH
30133: LD_VAR 0 1
30137: PUSH
30138: LD_VAR 0 2
30142: MINUS
30143: PUSH
30144: LD_VAR 0 3
30148: PLUS
30149: ST_TO_ADDR
30150: GO 30168
// length := i_to - i_from ;
30152: LD_ADDR_VAR 0 11
30156: PUSH
30157: LD_VAR 0 3
30161: PUSH
30162: LD_VAR 0 2
30166: MINUS
30167: ST_TO_ADDR
// end else
30168: GO 30231
// begin d := - 1 ;
30170: LD_ADDR_VAR 0 9
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: ST_TO_ADDR
// if i_from > i_to then
30179: LD_VAR 0 2
30183: PUSH
30184: LD_VAR 0 3
30188: GREATER
30189: IFFALSE 30209
// length := i_from - i_to else
30191: LD_ADDR_VAR 0 11
30195: PUSH
30196: LD_VAR 0 2
30200: PUSH
30201: LD_VAR 0 3
30205: MINUS
30206: ST_TO_ADDR
30207: GO 30231
// length := ( array - i_to ) + i_from ;
30209: LD_ADDR_VAR 0 11
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: LD_VAR 0 3
30223: MINUS
30224: PUSH
30225: LD_VAR 0 2
30229: PLUS
30230: ST_TO_ADDR
// end ; if not length then
30231: LD_VAR 0 11
30235: NOT
30236: IFFALSE 30240
// exit ;
30238: GO 30398
// tmp := array ;
30240: LD_ADDR_VAR 0 10
30244: PUSH
30245: LD_VAR 0 1
30249: ST_TO_ADDR
// for i = 1 to length do
30250: LD_ADDR_VAR 0 6
30254: PUSH
30255: DOUBLE
30256: LD_INT 1
30258: DEC
30259: ST_TO_ADDR
30260: LD_VAR 0 11
30264: PUSH
30265: FOR_TO
30266: IFFALSE 30386
// begin for j = 1 to array do
30268: LD_ADDR_VAR 0 7
30272: PUSH
30273: DOUBLE
30274: LD_INT 1
30276: DEC
30277: ST_TO_ADDR
30278: LD_VAR 0 1
30282: PUSH
30283: FOR_TO
30284: IFFALSE 30372
// begin k := j + d ;
30286: LD_ADDR_VAR 0 8
30290: PUSH
30291: LD_VAR 0 7
30295: PUSH
30296: LD_VAR 0 9
30300: PLUS
30301: ST_TO_ADDR
// if k > array then
30302: LD_VAR 0 8
30306: PUSH
30307: LD_VAR 0 1
30311: GREATER
30312: IFFALSE 30322
// k := 1 ;
30314: LD_ADDR_VAR 0 8
30318: PUSH
30319: LD_INT 1
30321: ST_TO_ADDR
// if not k then
30322: LD_VAR 0 8
30326: NOT
30327: IFFALSE 30339
// k := array ;
30329: LD_ADDR_VAR 0 8
30333: PUSH
30334: LD_VAR 0 1
30338: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30339: LD_ADDR_VAR 0 10
30343: PUSH
30344: LD_VAR 0 10
30348: PPUSH
30349: LD_VAR 0 8
30353: PPUSH
30354: LD_VAR 0 1
30358: PUSH
30359: LD_VAR 0 7
30363: ARRAY
30364: PPUSH
30365: CALL_OW 1
30369: ST_TO_ADDR
// end ;
30370: GO 30283
30372: POP
30373: POP
// array := tmp ;
30374: LD_ADDR_VAR 0 1
30378: PUSH
30379: LD_VAR 0 10
30383: ST_TO_ADDR
// end ;
30384: GO 30265
30386: POP
30387: POP
// result := array ;
30388: LD_ADDR_VAR 0 5
30392: PUSH
30393: LD_VAR 0 1
30397: ST_TO_ADDR
// end ;
30398: LD_VAR 0 5
30402: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30403: LD_INT 0
30405: PPUSH
30406: PPUSH
// result := 0 ;
30407: LD_ADDR_VAR 0 3
30411: PUSH
30412: LD_INT 0
30414: ST_TO_ADDR
// if not array or not value in array then
30415: LD_VAR 0 1
30419: NOT
30420: PUSH
30421: LD_VAR 0 2
30425: PUSH
30426: LD_VAR 0 1
30430: IN
30431: NOT
30432: OR
30433: IFFALSE 30437
// exit ;
30435: GO 30491
// for i = 1 to array do
30437: LD_ADDR_VAR 0 4
30441: PUSH
30442: DOUBLE
30443: LD_INT 1
30445: DEC
30446: ST_TO_ADDR
30447: LD_VAR 0 1
30451: PUSH
30452: FOR_TO
30453: IFFALSE 30489
// if value = array [ i ] then
30455: LD_VAR 0 2
30459: PUSH
30460: LD_VAR 0 1
30464: PUSH
30465: LD_VAR 0 4
30469: ARRAY
30470: EQUAL
30471: IFFALSE 30487
// begin result := i ;
30473: LD_ADDR_VAR 0 3
30477: PUSH
30478: LD_VAR 0 4
30482: ST_TO_ADDR
// exit ;
30483: POP
30484: POP
30485: GO 30491
// end ;
30487: GO 30452
30489: POP
30490: POP
// end ;
30491: LD_VAR 0 3
30495: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30496: LD_INT 0
30498: PPUSH
// vc_chassis := chassis ;
30499: LD_ADDR_OWVAR 37
30503: PUSH
30504: LD_VAR 0 1
30508: ST_TO_ADDR
// vc_engine := engine ;
30509: LD_ADDR_OWVAR 39
30513: PUSH
30514: LD_VAR 0 2
30518: ST_TO_ADDR
// vc_control := control ;
30519: LD_ADDR_OWVAR 38
30523: PUSH
30524: LD_VAR 0 3
30528: ST_TO_ADDR
// vc_weapon := weapon ;
30529: LD_ADDR_OWVAR 40
30533: PUSH
30534: LD_VAR 0 4
30538: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30539: LD_ADDR_OWVAR 41
30543: PUSH
30544: LD_VAR 0 5
30548: ST_TO_ADDR
// end ;
30549: LD_VAR 0 6
30553: RET
// export function WantPlant ( unit ) ; var task ; begin
30554: LD_INT 0
30556: PPUSH
30557: PPUSH
// result := false ;
30558: LD_ADDR_VAR 0 2
30562: PUSH
30563: LD_INT 0
30565: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 437
30580: ST_TO_ADDR
// if task then
30581: LD_VAR 0 3
30585: IFFALSE 30613
// if task [ 1 ] [ 1 ] = p then
30587: LD_VAR 0 3
30591: PUSH
30592: LD_INT 1
30594: ARRAY
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PUSH
30600: LD_STRING p
30602: EQUAL
30603: IFFALSE 30613
// result := true ;
30605: LD_ADDR_VAR 0 2
30609: PUSH
30610: LD_INT 1
30612: ST_TO_ADDR
// end ;
30613: LD_VAR 0 2
30617: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30618: LD_INT 0
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
// if pos < 1 then
30624: LD_VAR 0 2
30628: PUSH
30629: LD_INT 1
30631: LESS
30632: IFFALSE 30636
// exit ;
30634: GO 30939
// if pos = 1 then
30636: LD_VAR 0 2
30640: PUSH
30641: LD_INT 1
30643: EQUAL
30644: IFFALSE 30677
// result := Replace ( arr , pos [ 1 ] , value ) else
30646: LD_ADDR_VAR 0 4
30650: PUSH
30651: LD_VAR 0 1
30655: PPUSH
30656: LD_VAR 0 2
30660: PUSH
30661: LD_INT 1
30663: ARRAY
30664: PPUSH
30665: LD_VAR 0 3
30669: PPUSH
30670: CALL_OW 1
30674: ST_TO_ADDR
30675: GO 30939
// begin tmp := arr ;
30677: LD_ADDR_VAR 0 6
30681: PUSH
30682: LD_VAR 0 1
30686: ST_TO_ADDR
// s_arr := [ tmp ] ;
30687: LD_ADDR_VAR 0 7
30691: PUSH
30692: LD_VAR 0 6
30696: PUSH
30697: EMPTY
30698: LIST
30699: ST_TO_ADDR
// for i = 1 to pos - 1 do
30700: LD_ADDR_VAR 0 5
30704: PUSH
30705: DOUBLE
30706: LD_INT 1
30708: DEC
30709: ST_TO_ADDR
30710: LD_VAR 0 2
30714: PUSH
30715: LD_INT 1
30717: MINUS
30718: PUSH
30719: FOR_TO
30720: IFFALSE 30765
// begin tmp := tmp [ pos [ i ] ] ;
30722: LD_ADDR_VAR 0 6
30726: PUSH
30727: LD_VAR 0 6
30731: PUSH
30732: LD_VAR 0 2
30736: PUSH
30737: LD_VAR 0 5
30741: ARRAY
30742: ARRAY
30743: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30744: LD_ADDR_VAR 0 7
30748: PUSH
30749: LD_VAR 0 7
30753: PUSH
30754: LD_VAR 0 6
30758: PUSH
30759: EMPTY
30760: LIST
30761: ADD
30762: ST_TO_ADDR
// end ;
30763: GO 30719
30765: POP
30766: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30767: LD_ADDR_VAR 0 6
30771: PUSH
30772: LD_VAR 0 6
30776: PPUSH
30777: LD_VAR 0 2
30781: PUSH
30782: LD_VAR 0 2
30786: ARRAY
30787: PPUSH
30788: LD_VAR 0 3
30792: PPUSH
30793: CALL_OW 1
30797: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30798: LD_ADDR_VAR 0 7
30802: PUSH
30803: LD_VAR 0 7
30807: PPUSH
30808: LD_VAR 0 7
30812: PPUSH
30813: LD_VAR 0 6
30817: PPUSH
30818: CALL_OW 1
30822: ST_TO_ADDR
// for i = s_arr downto 2 do
30823: LD_ADDR_VAR 0 5
30827: PUSH
30828: DOUBLE
30829: LD_VAR 0 7
30833: INC
30834: ST_TO_ADDR
30835: LD_INT 2
30837: PUSH
30838: FOR_DOWNTO
30839: IFFALSE 30923
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30841: LD_ADDR_VAR 0 6
30845: PUSH
30846: LD_VAR 0 7
30850: PUSH
30851: LD_VAR 0 5
30855: PUSH
30856: LD_INT 1
30858: MINUS
30859: ARRAY
30860: PPUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_VAR 0 5
30870: PUSH
30871: LD_INT 1
30873: MINUS
30874: ARRAY
30875: PPUSH
30876: LD_VAR 0 7
30880: PUSH
30881: LD_VAR 0 5
30885: ARRAY
30886: PPUSH
30887: CALL_OW 1
30891: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30892: LD_ADDR_VAR 0 7
30896: PUSH
30897: LD_VAR 0 7
30901: PPUSH
30902: LD_VAR 0 5
30906: PUSH
30907: LD_INT 1
30909: MINUS
30910: PPUSH
30911: LD_VAR 0 6
30915: PPUSH
30916: CALL_OW 1
30920: ST_TO_ADDR
// end ;
30921: GO 30838
30923: POP
30924: POP
// result := s_arr [ 1 ] ;
30925: LD_ADDR_VAR 0 4
30929: PUSH
30930: LD_VAR 0 7
30934: PUSH
30935: LD_INT 1
30937: ARRAY
30938: ST_TO_ADDR
// end ; end ;
30939: LD_VAR 0 4
30943: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30944: LD_INT 0
30946: PPUSH
30947: PPUSH
// if not list then
30948: LD_VAR 0 1
30952: NOT
30953: IFFALSE 30957
// exit ;
30955: GO 31048
// i := list [ pos1 ] ;
30957: LD_ADDR_VAR 0 5
30961: PUSH
30962: LD_VAR 0 1
30966: PUSH
30967: LD_VAR 0 2
30971: ARRAY
30972: ST_TO_ADDR
// if not i then
30973: LD_VAR 0 5
30977: NOT
30978: IFFALSE 30982
// exit ;
30980: GO 31048
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30982: LD_ADDR_VAR 0 1
30986: PUSH
30987: LD_VAR 0 1
30991: PPUSH
30992: LD_VAR 0 2
30996: PPUSH
30997: LD_VAR 0 1
31001: PUSH
31002: LD_VAR 0 3
31006: ARRAY
31007: PPUSH
31008: CALL_OW 1
31012: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31013: LD_ADDR_VAR 0 1
31017: PUSH
31018: LD_VAR 0 1
31022: PPUSH
31023: LD_VAR 0 3
31027: PPUSH
31028: LD_VAR 0 5
31032: PPUSH
31033: CALL_OW 1
31037: ST_TO_ADDR
// result := list ;
31038: LD_ADDR_VAR 0 4
31042: PUSH
31043: LD_VAR 0 1
31047: ST_TO_ADDR
// end ;
31048: LD_VAR 0 4
31052: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31053: LD_INT 0
31055: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31056: LD_ADDR_VAR 0 5
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 250
31070: PPUSH
31071: LD_VAR 0 1
31075: PPUSH
31076: CALL_OW 251
31080: PPUSH
31081: LD_VAR 0 2
31085: PPUSH
31086: LD_VAR 0 3
31090: PPUSH
31091: LD_VAR 0 4
31095: PPUSH
31096: CALL 31474 0 5
31100: ST_TO_ADDR
// end ;
31101: LD_VAR 0 5
31105: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31106: LD_INT 0
31108: PPUSH
31109: PPUSH
31110: PPUSH
31111: PPUSH
// if not list or not unit then
31112: LD_VAR 0 2
31116: NOT
31117: PUSH
31118: LD_VAR 0 1
31122: NOT
31123: OR
31124: IFFALSE 31128
// exit ;
31126: GO 31469
// result := [ ] ;
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: EMPTY
31134: ST_TO_ADDR
// for i in list do
31135: LD_ADDR_VAR 0 6
31139: PUSH
31140: LD_VAR 0 2
31144: PUSH
31145: FOR_IN
31146: IFFALSE 31364
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31148: LD_ADDR_VAR 0 8
31152: PUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_VAR 0 6
31162: PUSH
31163: LD_INT 1
31165: ARRAY
31166: PPUSH
31167: LD_VAR 0 6
31171: PUSH
31172: LD_INT 2
31174: ARRAY
31175: PPUSH
31176: CALL_OW 297
31180: ST_TO_ADDR
// if not Count ( result ) then
31181: LD_VAR 0 5
31185: PPUSH
31186: CALL 27758 0 1
31190: NOT
31191: IFFALSE 31224
// begin result := Join ( result , [ i , tmp ] ) ;
31193: LD_ADDR_VAR 0 5
31197: PUSH
31198: LD_VAR 0 5
31202: PPUSH
31203: LD_VAR 0 6
31207: PUSH
31208: LD_VAR 0 8
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL 63358 0 2
31221: ST_TO_ADDR
// continue ;
31222: GO 31145
// end ; if result [ result ] [ 2 ] <= tmp then
31224: LD_VAR 0 5
31228: PUSH
31229: LD_VAR 0 5
31233: ARRAY
31234: PUSH
31235: LD_INT 2
31237: ARRAY
31238: PUSH
31239: LD_VAR 0 8
31243: LESSEQUAL
31244: IFFALSE 31277
// result := Join ( result , [ i , tmp ] ) else
31246: LD_ADDR_VAR 0 5
31250: PUSH
31251: LD_VAR 0 5
31255: PPUSH
31256: LD_VAR 0 6
31260: PUSH
31261: LD_VAR 0 8
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL 63358 0 2
31274: ST_TO_ADDR
31275: GO 31362
// begin for j := 1 to Count ( result ) do
31277: LD_ADDR_VAR 0 7
31281: PUSH
31282: DOUBLE
31283: LD_INT 1
31285: DEC
31286: ST_TO_ADDR
31287: LD_VAR 0 5
31291: PPUSH
31292: CALL 27758 0 1
31296: PUSH
31297: FOR_TO
31298: IFFALSE 31360
// begin if tmp < result [ j ] [ 2 ] then
31300: LD_VAR 0 8
31304: PUSH
31305: LD_VAR 0 5
31309: PUSH
31310: LD_VAR 0 7
31314: ARRAY
31315: PUSH
31316: LD_INT 2
31318: ARRAY
31319: LESS
31320: IFFALSE 31358
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31322: LD_ADDR_VAR 0 5
31326: PUSH
31327: LD_VAR 0 5
31331: PPUSH
31332: LD_VAR 0 7
31336: PPUSH
31337: LD_VAR 0 6
31341: PUSH
31342: LD_VAR 0 8
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PPUSH
31351: CALL_OW 2
31355: ST_TO_ADDR
// break ;
31356: GO 31360
// end ; end ;
31358: GO 31297
31360: POP
31361: POP
// end ; end ;
31362: GO 31145
31364: POP
31365: POP
// if result and not asc then
31366: LD_VAR 0 5
31370: PUSH
31371: LD_VAR 0 3
31375: NOT
31376: AND
31377: IFFALSE 31394
// result := ReverseArray ( result ) ;
31379: LD_ADDR_VAR 0 5
31383: PUSH
31384: LD_VAR 0 5
31388: PPUSH
31389: CALL 58634 0 1
31393: ST_TO_ADDR
// tmp := [ ] ;
31394: LD_ADDR_VAR 0 8
31398: PUSH
31399: EMPTY
31400: ST_TO_ADDR
// if mode then
31401: LD_VAR 0 4
31405: IFFALSE 31469
// begin for i := 1 to result do
31407: LD_ADDR_VAR 0 6
31411: PUSH
31412: DOUBLE
31413: LD_INT 1
31415: DEC
31416: ST_TO_ADDR
31417: LD_VAR 0 5
31421: PUSH
31422: FOR_TO
31423: IFFALSE 31457
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31425: LD_ADDR_VAR 0 8
31429: PUSH
31430: LD_VAR 0 8
31434: PPUSH
31435: LD_VAR 0 5
31439: PUSH
31440: LD_VAR 0 6
31444: ARRAY
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PPUSH
31450: CALL 63358 0 2
31454: ST_TO_ADDR
31455: GO 31422
31457: POP
31458: POP
// result := tmp ;
31459: LD_ADDR_VAR 0 5
31463: PUSH
31464: LD_VAR 0 8
31468: ST_TO_ADDR
// end ; end ;
31469: LD_VAR 0 5
31473: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
// if not list then
31480: LD_VAR 0 3
31484: NOT
31485: IFFALSE 31489
// exit ;
31487: GO 31877
// result := [ ] ;
31489: LD_ADDR_VAR 0 6
31493: PUSH
31494: EMPTY
31495: ST_TO_ADDR
// for i in list do
31496: LD_ADDR_VAR 0 7
31500: PUSH
31501: LD_VAR 0 3
31505: PUSH
31506: FOR_IN
31507: IFFALSE 31709
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31509: LD_ADDR_VAR 0 9
31513: PUSH
31514: LD_VAR 0 7
31518: PPUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 2
31528: PPUSH
31529: CALL_OW 297
31533: ST_TO_ADDR
// if not result then
31534: LD_VAR 0 6
31538: NOT
31539: IFFALSE 31565
// result := [ [ i , tmp ] ] else
31541: LD_ADDR_VAR 0 6
31545: PUSH
31546: LD_VAR 0 7
31550: PUSH
31551: LD_VAR 0 9
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: ST_TO_ADDR
31563: GO 31707
// begin if result [ result ] [ 2 ] < tmp then
31565: LD_VAR 0 6
31569: PUSH
31570: LD_VAR 0 6
31574: ARRAY
31575: PUSH
31576: LD_INT 2
31578: ARRAY
31579: PUSH
31580: LD_VAR 0 9
31584: LESS
31585: IFFALSE 31627
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31587: LD_ADDR_VAR 0 6
31591: PUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_VAR 0 6
31601: PUSH
31602: LD_INT 1
31604: PLUS
31605: PPUSH
31606: LD_VAR 0 7
31610: PUSH
31611: LD_VAR 0 9
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PPUSH
31620: CALL_OW 2
31624: ST_TO_ADDR
31625: GO 31707
// for j = 1 to result do
31627: LD_ADDR_VAR 0 8
31631: PUSH
31632: DOUBLE
31633: LD_INT 1
31635: DEC
31636: ST_TO_ADDR
31637: LD_VAR 0 6
31641: PUSH
31642: FOR_TO
31643: IFFALSE 31705
// begin if tmp < result [ j ] [ 2 ] then
31645: LD_VAR 0 9
31649: PUSH
31650: LD_VAR 0 6
31654: PUSH
31655: LD_VAR 0 8
31659: ARRAY
31660: PUSH
31661: LD_INT 2
31663: ARRAY
31664: LESS
31665: IFFALSE 31703
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31667: LD_ADDR_VAR 0 6
31671: PUSH
31672: LD_VAR 0 6
31676: PPUSH
31677: LD_VAR 0 8
31681: PPUSH
31682: LD_VAR 0 7
31686: PUSH
31687: LD_VAR 0 9
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PPUSH
31696: CALL_OW 2
31700: ST_TO_ADDR
// break ;
31701: GO 31705
// end ; end ;
31703: GO 31642
31705: POP
31706: POP
// end ; end ;
31707: GO 31506
31709: POP
31710: POP
// if result and not asc then
31711: LD_VAR 0 6
31715: PUSH
31716: LD_VAR 0 4
31720: NOT
31721: AND
31722: IFFALSE 31797
// begin tmp := result ;
31724: LD_ADDR_VAR 0 9
31728: PUSH
31729: LD_VAR 0 6
31733: ST_TO_ADDR
// for i = tmp downto 1 do
31734: LD_ADDR_VAR 0 7
31738: PUSH
31739: DOUBLE
31740: LD_VAR 0 9
31744: INC
31745: ST_TO_ADDR
31746: LD_INT 1
31748: PUSH
31749: FOR_DOWNTO
31750: IFFALSE 31795
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31752: LD_ADDR_VAR 0 6
31756: PUSH
31757: LD_VAR 0 6
31761: PPUSH
31762: LD_VAR 0 9
31766: PUSH
31767: LD_VAR 0 7
31771: MINUS
31772: PUSH
31773: LD_INT 1
31775: PLUS
31776: PPUSH
31777: LD_VAR 0 9
31781: PUSH
31782: LD_VAR 0 7
31786: ARRAY
31787: PPUSH
31788: CALL_OW 1
31792: ST_TO_ADDR
31793: GO 31749
31795: POP
31796: POP
// end ; tmp := [ ] ;
31797: LD_ADDR_VAR 0 9
31801: PUSH
31802: EMPTY
31803: ST_TO_ADDR
// if mode then
31804: LD_VAR 0 5
31808: IFFALSE 31877
// begin for i = 1 to result do
31810: LD_ADDR_VAR 0 7
31814: PUSH
31815: DOUBLE
31816: LD_INT 1
31818: DEC
31819: ST_TO_ADDR
31820: LD_VAR 0 6
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31865
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31828: LD_ADDR_VAR 0 9
31832: PUSH
31833: LD_VAR 0 9
31837: PPUSH
31838: LD_VAR 0 7
31842: PPUSH
31843: LD_VAR 0 6
31847: PUSH
31848: LD_VAR 0 7
31852: ARRAY
31853: PUSH
31854: LD_INT 1
31856: ARRAY
31857: PPUSH
31858: CALL_OW 1
31862: ST_TO_ADDR
31863: GO 31825
31865: POP
31866: POP
// result := tmp ;
31867: LD_ADDR_VAR 0 6
31871: PUSH
31872: LD_VAR 0 9
31876: ST_TO_ADDR
// end ; end ;
31877: LD_VAR 0 6
31881: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31890: LD_ADDR_VAR 0 5
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: ST_TO_ADDR
// if not x or not y then
31912: LD_VAR 0 2
31916: NOT
31917: PUSH
31918: LD_VAR 0 3
31922: NOT
31923: OR
31924: IFFALSE 31928
// exit ;
31926: GO 33578
// if not range then
31928: LD_VAR 0 4
31932: NOT
31933: IFFALSE 31943
// range := 10 ;
31935: LD_ADDR_VAR 0 4
31939: PUSH
31940: LD_INT 10
31942: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31943: LD_ADDR_VAR 0 8
31947: PUSH
31948: LD_INT 81
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 92
31962: PUSH
31963: LD_VAR 0 2
31967: PUSH
31968: LD_VAR 0 3
31972: PUSH
31973: LD_VAR 0 4
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: LD_INT 21
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 69
32010: ST_TO_ADDR
// if not tmp then
32011: LD_VAR 0 8
32015: NOT
32016: IFFALSE 32020
// exit ;
32018: GO 33578
// for i in tmp do
32020: LD_ADDR_VAR 0 6
32024: PUSH
32025: LD_VAR 0 8
32029: PUSH
32030: FOR_IN
32031: IFFALSE 33553
// begin points := [ 0 , 0 , 0 ] ;
32033: LD_ADDR_VAR 0 9
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// bpoints := 1 ;
32052: LD_ADDR_VAR 0 10
32056: PUSH
32057: LD_INT 1
32059: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32060: LD_VAR 0 6
32064: PPUSH
32065: CALL_OW 247
32069: PUSH
32070: LD_INT 1
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32656
32078: POP
// begin if GetClass ( i ) = 1 then
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 257
32088: PUSH
32089: LD_INT 1
32091: EQUAL
32092: IFFALSE 32113
// points := [ 10 , 5 , 3 ] ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_INT 10
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32113: LD_VAR 0 6
32117: PPUSH
32118: CALL_OW 257
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: IN
32137: IFFALSE 32158
// points := [ 3 , 2 , 1 ] ;
32139: LD_ADDR_VAR 0 9
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32158: LD_VAR 0 6
32162: PPUSH
32163: CALL_OW 257
32167: PUSH
32168: LD_INT 5
32170: EQUAL
32171: IFFALSE 32192
// points := [ 130 , 5 , 2 ] ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_INT 130
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32192: LD_VAR 0 6
32196: PPUSH
32197: CALL_OW 257
32201: PUSH
32202: LD_INT 8
32204: EQUAL
32205: IFFALSE 32226
// points := [ 35 , 35 , 30 ] ;
32207: LD_ADDR_VAR 0 9
32211: PUSH
32212: LD_INT 35
32214: PUSH
32215: LD_INT 35
32217: PUSH
32218: LD_INT 30
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32226: LD_VAR 0 6
32230: PPUSH
32231: CALL_OW 257
32235: PUSH
32236: LD_INT 9
32238: EQUAL
32239: IFFALSE 32260
// points := [ 20 , 55 , 40 ] ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_INT 20
32248: PUSH
32249: LD_INT 55
32251: PUSH
32252: LD_INT 40
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 257
32269: PUSH
32270: LD_INT 12
32272: PUSH
32273: LD_INT 16
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: IN
32280: IFFALSE 32301
// points := [ 5 , 3 , 2 ] ;
32282: LD_ADDR_VAR 0 9
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32301: LD_VAR 0 6
32305: PPUSH
32306: CALL_OW 257
32310: PUSH
32311: LD_INT 17
32313: EQUAL
32314: IFFALSE 32335
// points := [ 100 , 50 , 75 ] ;
32316: LD_ADDR_VAR 0 9
32320: PUSH
32321: LD_INT 100
32323: PUSH
32324: LD_INT 50
32326: PUSH
32327: LD_INT 75
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 257
32344: PUSH
32345: LD_INT 15
32347: EQUAL
32348: IFFALSE 32369
// points := [ 10 , 5 , 3 ] ;
32350: LD_ADDR_VAR 0 9
32354: PUSH
32355: LD_INT 10
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32369: LD_VAR 0 6
32373: PPUSH
32374: CALL_OW 257
32378: PUSH
32379: LD_INT 14
32381: EQUAL
32382: IFFALSE 32403
// points := [ 10 , 0 , 0 ] ;
32384: LD_ADDR_VAR 0 9
32388: PUSH
32389: LD_INT 10
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32403: LD_VAR 0 6
32407: PPUSH
32408: CALL_OW 257
32412: PUSH
32413: LD_INT 11
32415: EQUAL
32416: IFFALSE 32437
// points := [ 30 , 10 , 5 ] ;
32418: LD_ADDR_VAR 0 9
32422: PUSH
32423: LD_INT 30
32425: PUSH
32426: LD_INT 10
32428: PUSH
32429: LD_INT 5
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_INT 5
32444: PPUSH
32445: CALL_OW 321
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: IFFALSE 32470
// bpoints := bpoints * 1.8 ;
32455: LD_ADDR_VAR 0 10
32459: PUSH
32460: LD_VAR 0 10
32464: PUSH
32465: LD_REAL  1.80000000000000E+0000
32468: MUL
32469: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32470: LD_VAR 0 6
32474: PPUSH
32475: CALL_OW 257
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: IN
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: LD_INT 51
32506: PPUSH
32507: CALL_OW 321
32511: PUSH
32512: LD_INT 2
32514: EQUAL
32515: AND
32516: IFFALSE 32533
// bpoints := bpoints * 1.2 ;
32518: LD_ADDR_VAR 0 10
32522: PUSH
32523: LD_VAR 0 10
32527: PUSH
32528: LD_REAL  1.20000000000000E+0000
32531: MUL
32532: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32533: LD_VAR 0 6
32537: PPUSH
32538: CALL_OW 257
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: LD_INT 7
32548: PUSH
32549: LD_INT 9
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: IN
32557: PUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: LD_INT 52
32565: PPUSH
32566: CALL_OW 321
32570: PUSH
32571: LD_INT 2
32573: EQUAL
32574: AND
32575: IFFALSE 32592
// bpoints := bpoints * 1.5 ;
32577: LD_ADDR_VAR 0 10
32581: PUSH
32582: LD_VAR 0 10
32586: PUSH
32587: LD_REAL  1.50000000000000E+0000
32590: MUL
32591: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32592: LD_VAR 0 1
32596: PPUSH
32597: LD_INT 66
32599: PPUSH
32600: CALL_OW 321
32604: PUSH
32605: LD_INT 2
32607: EQUAL
32608: IFFALSE 32625
// bpoints := bpoints * 1.1 ;
32610: LD_ADDR_VAR 0 10
32614: PUSH
32615: LD_VAR 0 10
32619: PUSH
32620: LD_REAL  1.10000000000000E+0000
32623: MUL
32624: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32625: LD_ADDR_VAR 0 10
32629: PUSH
32630: LD_VAR 0 10
32634: PUSH
32635: LD_VAR 0 6
32639: PPUSH
32640: LD_INT 1
32642: PPUSH
32643: CALL_OW 259
32647: PUSH
32648: LD_REAL  1.15000000000000E+0000
32651: MUL
32652: MUL
32653: ST_TO_ADDR
// end ; unit_vehicle :
32654: GO 33482
32656: LD_INT 2
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 33470
32664: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32665: LD_VAR 0 6
32669: PPUSH
32670: CALL_OW 264
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 42
32680: PUSH
32681: LD_INT 24
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: IN
32689: IFFALSE 32710
// points := [ 25 , 5 , 3 ] ;
32691: LD_ADDR_VAR 0 9
32695: PUSH
32696: LD_INT 25
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: LD_INT 3
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32710: LD_VAR 0 6
32714: PPUSH
32715: CALL_OW 264
32719: PUSH
32720: LD_INT 4
32722: PUSH
32723: LD_INT 43
32725: PUSH
32726: LD_INT 25
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: IN
32734: IFFALSE 32755
// points := [ 40 , 15 , 5 ] ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_INT 40
32743: PUSH
32744: LD_INT 15
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 264
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: LD_INT 23
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: IN
32775: IFFALSE 32796
// points := [ 7 , 25 , 8 ] ;
32777: LD_ADDR_VAR 0 9
32781: PUSH
32782: LD_INT 7
32784: PUSH
32785: LD_INT 25
32787: PUSH
32788: LD_INT 8
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32796: LD_VAR 0 6
32800: PPUSH
32801: CALL_OW 264
32805: PUSH
32806: LD_INT 5
32808: PUSH
32809: LD_INT 27
32811: PUSH
32812: LD_INT 44
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: IN
32820: IFFALSE 32841
// points := [ 14 , 50 , 16 ] ;
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_INT 14
32829: PUSH
32830: LD_INT 50
32832: PUSH
32833: LD_INT 16
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32841: LD_VAR 0 6
32845: PPUSH
32846: CALL_OW 264
32850: PUSH
32851: LD_INT 6
32853: PUSH
32854: LD_INT 46
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: IN
32861: IFFALSE 32882
// points := [ 32 , 120 , 70 ] ;
32863: LD_ADDR_VAR 0 9
32867: PUSH
32868: LD_INT 32
32870: PUSH
32871: LD_INT 120
32873: PUSH
32874: LD_INT 70
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32882: LD_VAR 0 6
32886: PPUSH
32887: CALL_OW 264
32891: PUSH
32892: LD_INT 7
32894: PUSH
32895: LD_INT 28
32897: PUSH
32898: LD_INT 45
32900: PUSH
32901: LD_INT 92
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: IN
32910: IFFALSE 32931
// points := [ 35 , 20 , 45 ] ;
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_INT 35
32919: PUSH
32920: LD_INT 20
32922: PUSH
32923: LD_INT 45
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32931: LD_VAR 0 6
32935: PPUSH
32936: CALL_OW 264
32940: PUSH
32941: LD_INT 47
32943: PUSH
32944: EMPTY
32945: LIST
32946: IN
32947: IFFALSE 32968
// points := [ 67 , 45 , 75 ] ;
32949: LD_ADDR_VAR 0 9
32953: PUSH
32954: LD_INT 67
32956: PUSH
32957: LD_INT 45
32959: PUSH
32960: LD_INT 75
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32968: LD_VAR 0 6
32972: PPUSH
32973: CALL_OW 264
32977: PUSH
32978: LD_INT 26
32980: PUSH
32981: EMPTY
32982: LIST
32983: IN
32984: IFFALSE 33005
// points := [ 120 , 30 , 80 ] ;
32986: LD_ADDR_VAR 0 9
32990: PUSH
32991: LD_INT 120
32993: PUSH
32994: LD_INT 30
32996: PUSH
32997: LD_INT 80
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33005: LD_VAR 0 6
33009: PPUSH
33010: CALL_OW 264
33014: PUSH
33015: LD_INT 22
33017: PUSH
33018: EMPTY
33019: LIST
33020: IN
33021: IFFALSE 33042
// points := [ 40 , 1 , 1 ] ;
33023: LD_ADDR_VAR 0 9
33027: PUSH
33028: LD_INT 40
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33042: LD_VAR 0 6
33046: PPUSH
33047: CALL_OW 264
33051: PUSH
33052: LD_INT 29
33054: PUSH
33055: EMPTY
33056: LIST
33057: IN
33058: IFFALSE 33079
// points := [ 70 , 200 , 400 ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_INT 70
33067: PUSH
33068: LD_INT 200
33070: PUSH
33071: LD_INT 400
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33079: LD_VAR 0 6
33083: PPUSH
33084: CALL_OW 264
33088: PUSH
33089: LD_INT 14
33091: PUSH
33092: LD_INT 53
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: IN
33099: IFFALSE 33120
// points := [ 40 , 10 , 20 ] ;
33101: LD_ADDR_VAR 0 9
33105: PUSH
33106: LD_INT 40
33108: PUSH
33109: LD_INT 10
33111: PUSH
33112: LD_INT 20
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33120: LD_VAR 0 6
33124: PPUSH
33125: CALL_OW 264
33129: PUSH
33130: LD_INT 9
33132: PUSH
33133: EMPTY
33134: LIST
33135: IN
33136: IFFALSE 33157
// points := [ 5 , 70 , 20 ] ;
33138: LD_ADDR_VAR 0 9
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: LD_INT 70
33148: PUSH
33149: LD_INT 20
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33157: LD_VAR 0 6
33161: PPUSH
33162: CALL_OW 264
33166: PUSH
33167: LD_INT 10
33169: PUSH
33170: EMPTY
33171: LIST
33172: IN
33173: IFFALSE 33194
// points := [ 35 , 110 , 70 ] ;
33175: LD_ADDR_VAR 0 9
33179: PUSH
33180: LD_INT 35
33182: PUSH
33183: LD_INT 110
33185: PUSH
33186: LD_INT 70
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33194: LD_VAR 0 6
33198: PPUSH
33199: CALL_OW 265
33203: PUSH
33204: LD_INT 25
33206: EQUAL
33207: IFFALSE 33228
// points := [ 80 , 65 , 100 ] ;
33209: LD_ADDR_VAR 0 9
33213: PUSH
33214: LD_INT 80
33216: PUSH
33217: LD_INT 65
33219: PUSH
33220: LD_INT 100
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 263
33237: PUSH
33238: LD_INT 1
33240: EQUAL
33241: IFFALSE 33276
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33243: LD_ADDR_VAR 0 10
33247: PUSH
33248: LD_VAR 0 10
33252: PUSH
33253: LD_VAR 0 6
33257: PPUSH
33258: CALL_OW 311
33262: PPUSH
33263: LD_INT 3
33265: PPUSH
33266: CALL_OW 259
33270: PUSH
33271: LD_INT 4
33273: MUL
33274: MUL
33275: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33276: LD_VAR 0 6
33280: PPUSH
33281: CALL_OW 263
33285: PUSH
33286: LD_INT 2
33288: EQUAL
33289: IFFALSE 33340
// begin j := IsControledBy ( i ) ;
33291: LD_ADDR_VAR 0 7
33295: PUSH
33296: LD_VAR 0 6
33300: PPUSH
33301: CALL_OW 312
33305: ST_TO_ADDR
// if j then
33306: LD_VAR 0 7
33310: IFFALSE 33340
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33312: LD_ADDR_VAR 0 10
33316: PUSH
33317: LD_VAR 0 10
33321: PUSH
33322: LD_VAR 0 7
33326: PPUSH
33327: LD_INT 3
33329: PPUSH
33330: CALL_OW 259
33334: PUSH
33335: LD_INT 3
33337: MUL
33338: MUL
33339: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33340: LD_VAR 0 6
33344: PPUSH
33345: CALL_OW 264
33349: PUSH
33350: LD_INT 5
33352: PUSH
33353: LD_INT 6
33355: PUSH
33356: LD_INT 46
33358: PUSH
33359: LD_INT 44
33361: PUSH
33362: LD_INT 47
33364: PUSH
33365: LD_INT 45
33367: PUSH
33368: LD_INT 28
33370: PUSH
33371: LD_INT 7
33373: PUSH
33374: LD_INT 27
33376: PUSH
33377: LD_INT 29
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: LD_INT 52
33400: PPUSH
33401: CALL_OW 321
33405: PUSH
33406: LD_INT 2
33408: EQUAL
33409: AND
33410: IFFALSE 33427
// bpoints := bpoints * 1.2 ;
33412: LD_ADDR_VAR 0 10
33416: PUSH
33417: LD_VAR 0 10
33421: PUSH
33422: LD_REAL  1.20000000000000E+0000
33425: MUL
33426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 264
33436: PUSH
33437: LD_INT 6
33439: PUSH
33440: LD_INT 46
33442: PUSH
33443: LD_INT 47
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: IN
33451: IFFALSE 33468
// bpoints := bpoints * 1.2 ;
33453: LD_ADDR_VAR 0 10
33457: PUSH
33458: LD_VAR 0 10
33462: PUSH
33463: LD_REAL  1.20000000000000E+0000
33466: MUL
33467: ST_TO_ADDR
// end ; unit_building :
33468: GO 33482
33470: LD_INT 3
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33481
33478: POP
// ; end ;
33479: GO 33482
33481: POP
// for j = 1 to 3 do
33482: LD_ADDR_VAR 0 7
33486: PUSH
33487: DOUBLE
33488: LD_INT 1
33490: DEC
33491: ST_TO_ADDR
33492: LD_INT 3
33494: PUSH
33495: FOR_TO
33496: IFFALSE 33549
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33498: LD_ADDR_VAR 0 5
33502: PUSH
33503: LD_VAR 0 5
33507: PPUSH
33508: LD_VAR 0 7
33512: PPUSH
33513: LD_VAR 0 5
33517: PUSH
33518: LD_VAR 0 7
33522: ARRAY
33523: PUSH
33524: LD_VAR 0 9
33528: PUSH
33529: LD_VAR 0 7
33533: ARRAY
33534: PUSH
33535: LD_VAR 0 10
33539: MUL
33540: PLUS
33541: PPUSH
33542: CALL_OW 1
33546: ST_TO_ADDR
33547: GO 33495
33549: POP
33550: POP
// end ;
33551: GO 32030
33553: POP
33554: POP
// result := Replace ( result , 4 , tmp ) ;
33555: LD_ADDR_VAR 0 5
33559: PUSH
33560: LD_VAR 0 5
33564: PPUSH
33565: LD_INT 4
33567: PPUSH
33568: LD_VAR 0 8
33572: PPUSH
33573: CALL_OW 1
33577: ST_TO_ADDR
// end ;
33578: LD_VAR 0 5
33582: RET
// export function DangerAtRange ( unit , range ) ; begin
33583: LD_INT 0
33585: PPUSH
// if not unit then
33586: LD_VAR 0 1
33590: NOT
33591: IFFALSE 33595
// exit ;
33593: GO 33640
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33595: LD_ADDR_VAR 0 3
33599: PUSH
33600: LD_VAR 0 1
33604: PPUSH
33605: CALL_OW 255
33609: PPUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: CALL_OW 250
33619: PPUSH
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 251
33629: PPUSH
33630: LD_VAR 0 2
33634: PPUSH
33635: CALL 31882 0 4
33639: ST_TO_ADDR
// end ;
33640: LD_VAR 0 3
33644: RET
// export function DangerInArea ( side , area ) ; begin
33645: LD_INT 0
33647: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33648: LD_ADDR_VAR 0 3
33652: PUSH
33653: LD_VAR 0 2
33657: PPUSH
33658: LD_INT 81
33660: PUSH
33661: LD_VAR 0 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PPUSH
33670: CALL_OW 70
33674: ST_TO_ADDR
// end ;
33675: LD_VAR 0 3
33679: RET
// export function IsExtension ( b ) ; begin
33680: LD_INT 0
33682: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33683: LD_ADDR_VAR 0 2
33687: PUSH
33688: LD_VAR 0 1
33692: PUSH
33693: LD_INT 23
33695: PUSH
33696: LD_INT 20
33698: PUSH
33699: LD_INT 22
33701: PUSH
33702: LD_INT 17
33704: PUSH
33705: LD_INT 24
33707: PUSH
33708: LD_INT 21
33710: PUSH
33711: LD_INT 19
33713: PUSH
33714: LD_INT 16
33716: PUSH
33717: LD_INT 25
33719: PUSH
33720: LD_INT 18
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: IN
33735: ST_TO_ADDR
// end ;
33736: LD_VAR 0 2
33740: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
33745: PPUSH
// result := [ ] ;
33746: LD_ADDR_VAR 0 4
33750: PUSH
33751: EMPTY
33752: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33753: LD_ADDR_VAR 0 5
33757: PUSH
33758: LD_VAR 0 2
33762: PPUSH
33763: LD_INT 21
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PPUSH
33773: CALL_OW 70
33777: ST_TO_ADDR
// if not tmp then
33778: LD_VAR 0 5
33782: NOT
33783: IFFALSE 33787
// exit ;
33785: GO 33851
// if checkLink then
33787: LD_VAR 0 3
33791: IFFALSE 33841
// begin for i in tmp do
33793: LD_ADDR_VAR 0 6
33797: PUSH
33798: LD_VAR 0 5
33802: PUSH
33803: FOR_IN
33804: IFFALSE 33839
// if GetBase ( i ) <> base then
33806: LD_VAR 0 6
33810: PPUSH
33811: CALL_OW 274
33815: PUSH
33816: LD_VAR 0 1
33820: NONEQUAL
33821: IFFALSE 33837
// ComLinkToBase ( base , i ) ;
33823: LD_VAR 0 1
33827: PPUSH
33828: LD_VAR 0 6
33832: PPUSH
33833: CALL_OW 169
33837: GO 33803
33839: POP
33840: POP
// end ; result := tmp ;
33841: LD_ADDR_VAR 0 4
33845: PUSH
33846: LD_VAR 0 5
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 4
33855: RET
// export function ComComplete ( units , b ) ; var i ; begin
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
// if not units then
33860: LD_VAR 0 1
33864: NOT
33865: IFFALSE 33869
// exit ;
33867: GO 33959
// for i in units do
33869: LD_ADDR_VAR 0 4
33873: PUSH
33874: LD_VAR 0 1
33878: PUSH
33879: FOR_IN
33880: IFFALSE 33957
// if BuildingStatus ( b ) = bs_build then
33882: LD_VAR 0 2
33886: PPUSH
33887: CALL_OW 461
33891: PUSH
33892: LD_INT 1
33894: EQUAL
33895: IFFALSE 33955
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_STRING h
33904: PUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: CALL_OW 250
33914: PUSH
33915: LD_VAR 0 2
33919: PPUSH
33920: CALL_OW 251
33924: PUSH
33925: LD_VAR 0 2
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: PPUSH
33951: CALL_OW 446
33955: GO 33879
33957: POP
33958: POP
// end ;
33959: LD_VAR 0 3
33963: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33964: LD_INT 0
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33972: LD_VAR 0 1
33976: NOT
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 263
33987: PUSH
33988: LD_INT 2
33990: NONEQUAL
33991: OR
33992: IFFALSE 33996
// exit ;
33994: GO 34312
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33996: LD_ADDR_VAR 0 6
34000: PUSH
34001: LD_INT 22
34003: PUSH
34004: LD_VAR 0 1
34008: PPUSH
34009: CALL_OW 255
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 30
34023: PUSH
34024: LD_INT 36
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 34
34033: PUSH
34034: LD_INT 31
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL_OW 69
34054: ST_TO_ADDR
// if not tmp then
34055: LD_VAR 0 6
34059: NOT
34060: IFFALSE 34064
// exit ;
34062: GO 34312
// result := [ ] ;
34064: LD_ADDR_VAR 0 2
34068: PUSH
34069: EMPTY
34070: ST_TO_ADDR
// for i in tmp do
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_VAR 0 6
34080: PUSH
34081: FOR_IN
34082: IFFALSE 34153
// begin t := UnitsInside ( i ) ;
34084: LD_ADDR_VAR 0 4
34088: PUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: CALL_OW 313
34098: ST_TO_ADDR
// if t then
34099: LD_VAR 0 4
34103: IFFALSE 34151
// for j in t do
34105: LD_ADDR_VAR 0 7
34109: PUSH
34110: LD_VAR 0 4
34114: PUSH
34115: FOR_IN
34116: IFFALSE 34149
// result := Replace ( result , result + 1 , j ) ;
34118: LD_ADDR_VAR 0 2
34122: PUSH
34123: LD_VAR 0 2
34127: PPUSH
34128: LD_VAR 0 2
34132: PUSH
34133: LD_INT 1
34135: PLUS
34136: PPUSH
34137: LD_VAR 0 7
34141: PPUSH
34142: CALL_OW 1
34146: ST_TO_ADDR
34147: GO 34115
34149: POP
34150: POP
// end ;
34151: GO 34081
34153: POP
34154: POP
// if not result then
34155: LD_VAR 0 2
34159: NOT
34160: IFFALSE 34164
// exit ;
34162: GO 34312
// mech := result [ 1 ] ;
34164: LD_ADDR_VAR 0 5
34168: PUSH
34169: LD_VAR 0 2
34173: PUSH
34174: LD_INT 1
34176: ARRAY
34177: ST_TO_ADDR
// if result > 1 then
34178: LD_VAR 0 2
34182: PUSH
34183: LD_INT 1
34185: GREATER
34186: IFFALSE 34298
// begin for i = 2 to result do
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: DOUBLE
34194: LD_INT 2
34196: DEC
34197: ST_TO_ADDR
34198: LD_VAR 0 2
34202: PUSH
34203: FOR_TO
34204: IFFALSE 34296
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34206: LD_ADDR_VAR 0 4
34210: PUSH
34211: LD_VAR 0 2
34215: PUSH
34216: LD_VAR 0 3
34220: ARRAY
34221: PPUSH
34222: LD_INT 3
34224: PPUSH
34225: CALL_OW 259
34229: PUSH
34230: LD_VAR 0 2
34234: PUSH
34235: LD_VAR 0 3
34239: ARRAY
34240: PPUSH
34241: CALL_OW 432
34245: MINUS
34246: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34247: LD_VAR 0 4
34251: PUSH
34252: LD_VAR 0 5
34256: PPUSH
34257: LD_INT 3
34259: PPUSH
34260: CALL_OW 259
34264: PUSH
34265: LD_VAR 0 5
34269: PPUSH
34270: CALL_OW 432
34274: MINUS
34275: GREATEREQUAL
34276: IFFALSE 34294
// mech := result [ i ] ;
34278: LD_ADDR_VAR 0 5
34282: PUSH
34283: LD_VAR 0 2
34287: PUSH
34288: LD_VAR 0 3
34292: ARRAY
34293: ST_TO_ADDR
// end ;
34294: GO 34203
34296: POP
34297: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34298: LD_VAR 0 1
34302: PPUSH
34303: LD_VAR 0 5
34307: PPUSH
34308: CALL_OW 135
// end ;
34312: LD_VAR 0 2
34316: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34317: LD_INT 0
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
// result := [ ] ;
34332: LD_ADDR_VAR 0 7
34336: PUSH
34337: EMPTY
34338: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 266
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: IN
34359: NOT
34360: IFFALSE 34364
// exit ;
34362: GO 35998
// if name then
34364: LD_VAR 0 3
34368: IFFALSE 34384
// SetBName ( base_dep , name ) ;
34370: LD_VAR 0 1
34374: PPUSH
34375: LD_VAR 0 3
34379: PPUSH
34380: CALL_OW 500
// base := GetBase ( base_dep ) ;
34384: LD_ADDR_VAR 0 15
34388: PUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 274
34398: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34399: LD_ADDR_VAR 0 16
34403: PUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: CALL_OW 255
34413: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34414: LD_ADDR_VAR 0 17
34418: PUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 248
34428: ST_TO_ADDR
// if sources then
34429: LD_VAR 0 5
34433: IFFALSE 34480
// for i = 1 to 3 do
34435: LD_ADDR_VAR 0 8
34439: PUSH
34440: DOUBLE
34441: LD_INT 1
34443: DEC
34444: ST_TO_ADDR
34445: LD_INT 3
34447: PUSH
34448: FOR_TO
34449: IFFALSE 34478
// AddResourceType ( base , i , sources [ i ] ) ;
34451: LD_VAR 0 15
34455: PPUSH
34456: LD_VAR 0 8
34460: PPUSH
34461: LD_VAR 0 5
34465: PUSH
34466: LD_VAR 0 8
34470: ARRAY
34471: PPUSH
34472: CALL_OW 276
34476: GO 34448
34478: POP
34479: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34480: LD_ADDR_VAR 0 18
34484: PUSH
34485: LD_VAR 0 15
34489: PPUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: LD_INT 1
34497: PPUSH
34498: CALL 33741 0 3
34502: ST_TO_ADDR
// InitHc ;
34503: CALL_OW 19
// InitUc ;
34507: CALL_OW 18
// uc_side := side ;
34511: LD_ADDR_OWVAR 20
34515: PUSH
34516: LD_VAR 0 16
34520: ST_TO_ADDR
// uc_nation := nation ;
34521: LD_ADDR_OWVAR 21
34525: PUSH
34526: LD_VAR 0 17
34530: ST_TO_ADDR
// if buildings then
34531: LD_VAR 0 18
34535: IFFALSE 35857
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34537: LD_ADDR_VAR 0 19
34541: PUSH
34542: LD_VAR 0 18
34546: PPUSH
34547: LD_INT 2
34549: PUSH
34550: LD_INT 30
34552: PUSH
34553: LD_INT 29
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 30
34562: PUSH
34563: LD_INT 30
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: PPUSH
34575: CALL_OW 72
34579: ST_TO_ADDR
// if tmp then
34580: LD_VAR 0 19
34584: IFFALSE 34632
// for i in tmp do
34586: LD_ADDR_VAR 0 8
34590: PUSH
34591: LD_VAR 0 19
34595: PUSH
34596: FOR_IN
34597: IFFALSE 34630
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34599: LD_VAR 0 8
34603: PPUSH
34604: CALL_OW 250
34608: PPUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: CALL_OW 251
34618: PPUSH
34619: LD_VAR 0 16
34623: PPUSH
34624: CALL_OW 441
34628: GO 34596
34630: POP
34631: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34632: LD_VAR 0 18
34636: PPUSH
34637: LD_INT 2
34639: PUSH
34640: LD_INT 30
34642: PUSH
34643: LD_INT 32
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 30
34652: PUSH
34653: LD_INT 33
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: PPUSH
34665: CALL_OW 72
34669: IFFALSE 34757
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34671: LD_ADDR_VAR 0 8
34675: PUSH
34676: LD_VAR 0 18
34680: PPUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 30
34686: PUSH
34687: LD_INT 32
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 30
34696: PUSH
34697: LD_INT 33
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: PPUSH
34709: CALL_OW 72
34713: PUSH
34714: FOR_IN
34715: IFFALSE 34755
// begin if not GetBWeapon ( i ) then
34717: LD_VAR 0 8
34721: PPUSH
34722: CALL_OW 269
34726: NOT
34727: IFFALSE 34753
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34729: LD_VAR 0 8
34733: PPUSH
34734: LD_VAR 0 8
34738: PPUSH
34739: LD_VAR 0 2
34743: PPUSH
34744: CALL 36003 0 2
34748: PPUSH
34749: CALL_OW 431
// end ;
34753: GO 34714
34755: POP
34756: POP
// end ; for i = 1 to personel do
34757: LD_ADDR_VAR 0 8
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_VAR 0 6
34771: PUSH
34772: FOR_TO
34773: IFFALSE 35837
// begin if i > 4 then
34775: LD_VAR 0 8
34779: PUSH
34780: LD_INT 4
34782: GREATER
34783: IFFALSE 34787
// break ;
34785: GO 35837
// case i of 1 :
34787: LD_VAR 0 8
34791: PUSH
34792: LD_INT 1
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34880
34800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34801: LD_ADDR_VAR 0 12
34805: PUSH
34806: LD_VAR 0 18
34810: PPUSH
34811: LD_INT 22
34813: PUSH
34814: LD_VAR 0 16
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 58
34825: PUSH
34826: EMPTY
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 30
34834: PUSH
34835: LD_INT 32
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 30
34844: PUSH
34845: LD_INT 4
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 30
34854: PUSH
34855: LD_INT 5
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: PPUSH
34873: CALL_OW 72
34877: ST_TO_ADDR
34878: GO 35102
34880: LD_INT 2
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34888
34886: GO 34950
34888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34889: LD_ADDR_VAR 0 12
34893: PUSH
34894: LD_VAR 0 18
34898: PPUSH
34899: LD_INT 22
34901: PUSH
34902: LD_VAR 0 16
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 30
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 30
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PPUSH
34943: CALL_OW 72
34947: ST_TO_ADDR
34948: GO 35102
34950: LD_INT 3
34952: DOUBLE
34953: EQUAL
34954: IFTRUE 34958
34956: GO 35020
34958: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34959: LD_ADDR_VAR 0 12
34963: PUSH
34964: LD_VAR 0 18
34968: PPUSH
34969: LD_INT 22
34971: PUSH
34972: LD_VAR 0 16
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 30
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 30
34996: PUSH
34997: LD_INT 3
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PPUSH
35013: CALL_OW 72
35017: ST_TO_ADDR
35018: GO 35102
35020: LD_INT 4
35022: DOUBLE
35023: EQUAL
35024: IFTRUE 35028
35026: GO 35101
35028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35029: LD_ADDR_VAR 0 12
35033: PUSH
35034: LD_VAR 0 18
35038: PPUSH
35039: LD_INT 22
35041: PUSH
35042: LD_VAR 0 16
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 30
35056: PUSH
35057: LD_INT 6
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 30
35066: PUSH
35067: LD_INT 7
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 30
35076: PUSH
35077: LD_INT 8
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PPUSH
35094: CALL_OW 72
35098: ST_TO_ADDR
35099: GO 35102
35101: POP
// if i = 1 then
35102: LD_VAR 0 8
35106: PUSH
35107: LD_INT 1
35109: EQUAL
35110: IFFALSE 35221
// begin tmp := [ ] ;
35112: LD_ADDR_VAR 0 19
35116: PUSH
35117: EMPTY
35118: ST_TO_ADDR
// for j in f do
35119: LD_ADDR_VAR 0 9
35123: PUSH
35124: LD_VAR 0 12
35128: PUSH
35129: FOR_IN
35130: IFFALSE 35203
// if GetBType ( j ) = b_bunker then
35132: LD_VAR 0 9
35136: PPUSH
35137: CALL_OW 266
35141: PUSH
35142: LD_INT 32
35144: EQUAL
35145: IFFALSE 35172
// tmp := Insert ( tmp , 1 , j ) else
35147: LD_ADDR_VAR 0 19
35151: PUSH
35152: LD_VAR 0 19
35156: PPUSH
35157: LD_INT 1
35159: PPUSH
35160: LD_VAR 0 9
35164: PPUSH
35165: CALL_OW 2
35169: ST_TO_ADDR
35170: GO 35201
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35172: LD_ADDR_VAR 0 19
35176: PUSH
35177: LD_VAR 0 19
35181: PPUSH
35182: LD_VAR 0 19
35186: PUSH
35187: LD_INT 1
35189: PLUS
35190: PPUSH
35191: LD_VAR 0 9
35195: PPUSH
35196: CALL_OW 2
35200: ST_TO_ADDR
35201: GO 35129
35203: POP
35204: POP
// if tmp then
35205: LD_VAR 0 19
35209: IFFALSE 35221
// f := tmp ;
35211: LD_ADDR_VAR 0 12
35215: PUSH
35216: LD_VAR 0 19
35220: ST_TO_ADDR
// end ; x := personel [ i ] ;
35221: LD_ADDR_VAR 0 13
35225: PUSH
35226: LD_VAR 0 6
35230: PUSH
35231: LD_VAR 0 8
35235: ARRAY
35236: ST_TO_ADDR
// if x = - 1 then
35237: LD_VAR 0 13
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: EQUAL
35246: IFFALSE 35455
// begin for j in f do
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_VAR 0 12
35257: PUSH
35258: FOR_IN
35259: IFFALSE 35451
// repeat InitHc ;
35261: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35265: LD_VAR 0 9
35269: PPUSH
35270: CALL_OW 266
35274: PUSH
35275: LD_INT 5
35277: EQUAL
35278: IFFALSE 35348
// begin if UnitsInside ( j ) < 3 then
35280: LD_VAR 0 9
35284: PPUSH
35285: CALL_OW 313
35289: PUSH
35290: LD_INT 3
35292: LESS
35293: IFFALSE 35329
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35295: LD_INT 0
35297: PPUSH
35298: LD_INT 5
35300: PUSH
35301: LD_INT 8
35303: PUSH
35304: LD_INT 9
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: PUSH
35312: LD_VAR 0 17
35316: ARRAY
35317: PPUSH
35318: LD_VAR 0 4
35322: PPUSH
35323: CALL_OW 380
35327: GO 35346
// PrepareHuman ( false , i , skill ) ;
35329: LD_INT 0
35331: PPUSH
35332: LD_VAR 0 8
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: CALL_OW 380
// end else
35346: GO 35365
// PrepareHuman ( false , i , skill ) ;
35348: LD_INT 0
35350: PPUSH
35351: LD_VAR 0 8
35355: PPUSH
35356: LD_VAR 0 4
35360: PPUSH
35361: CALL_OW 380
// un := CreateHuman ;
35365: LD_ADDR_VAR 0 14
35369: PUSH
35370: CALL_OW 44
35374: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35375: LD_ADDR_VAR 0 7
35379: PUSH
35380: LD_VAR 0 7
35384: PPUSH
35385: LD_INT 1
35387: PPUSH
35388: LD_VAR 0 14
35392: PPUSH
35393: CALL_OW 2
35397: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35398: LD_VAR 0 14
35402: PPUSH
35403: LD_VAR 0 9
35407: PPUSH
35408: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35412: LD_VAR 0 9
35416: PPUSH
35417: CALL_OW 313
35421: PUSH
35422: LD_INT 6
35424: EQUAL
35425: PUSH
35426: LD_VAR 0 9
35430: PPUSH
35431: CALL_OW 266
35435: PUSH
35436: LD_INT 32
35438: PUSH
35439: LD_INT 31
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: IN
35446: OR
35447: IFFALSE 35261
35449: GO 35258
35451: POP
35452: POP
// end else
35453: GO 35835
// for j = 1 to x do
35455: LD_ADDR_VAR 0 9
35459: PUSH
35460: DOUBLE
35461: LD_INT 1
35463: DEC
35464: ST_TO_ADDR
35465: LD_VAR 0 13
35469: PUSH
35470: FOR_TO
35471: IFFALSE 35833
// begin InitHc ;
35473: CALL_OW 19
// if not f then
35477: LD_VAR 0 12
35481: NOT
35482: IFFALSE 35571
// begin PrepareHuman ( false , i , skill ) ;
35484: LD_INT 0
35486: PPUSH
35487: LD_VAR 0 8
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: CALL_OW 380
// un := CreateHuman ;
35501: LD_ADDR_VAR 0 14
35505: PUSH
35506: CALL_OW 44
35510: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35511: LD_ADDR_VAR 0 7
35515: PUSH
35516: LD_VAR 0 7
35520: PPUSH
35521: LD_INT 1
35523: PPUSH
35524: LD_VAR 0 14
35528: PPUSH
35529: CALL_OW 2
35533: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35534: LD_VAR 0 14
35538: PPUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 250
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 251
35558: PPUSH
35559: LD_INT 10
35561: PPUSH
35562: LD_INT 0
35564: PPUSH
35565: CALL_OW 50
// continue ;
35569: GO 35470
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35571: LD_VAR 0 12
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PPUSH
35580: CALL_OW 313
35584: PUSH
35585: LD_VAR 0 12
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: PPUSH
35594: CALL_OW 266
35598: PUSH
35599: LD_INT 32
35601: PUSH
35602: LD_INT 31
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: IN
35609: AND
35610: PUSH
35611: LD_VAR 0 12
35615: PUSH
35616: LD_INT 1
35618: ARRAY
35619: PPUSH
35620: CALL_OW 313
35624: PUSH
35625: LD_INT 6
35627: EQUAL
35628: OR
35629: IFFALSE 35649
// f := Delete ( f , 1 ) ;
35631: LD_ADDR_VAR 0 12
35635: PUSH
35636: LD_VAR 0 12
35640: PPUSH
35641: LD_INT 1
35643: PPUSH
35644: CALL_OW 3
35648: ST_TO_ADDR
// if not f then
35649: LD_VAR 0 12
35653: NOT
35654: IFFALSE 35672
// begin x := x + 2 ;
35656: LD_ADDR_VAR 0 13
35660: PUSH
35661: LD_VAR 0 13
35665: PUSH
35666: LD_INT 2
35668: PLUS
35669: ST_TO_ADDR
// continue ;
35670: GO 35470
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35672: LD_VAR 0 12
35676: PUSH
35677: LD_INT 1
35679: ARRAY
35680: PPUSH
35681: CALL_OW 266
35685: PUSH
35686: LD_INT 5
35688: EQUAL
35689: IFFALSE 35763
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35691: LD_VAR 0 12
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: PPUSH
35700: CALL_OW 313
35704: PUSH
35705: LD_INT 3
35707: LESS
35708: IFFALSE 35744
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35710: LD_INT 0
35712: PPUSH
35713: LD_INT 5
35715: PUSH
35716: LD_INT 8
35718: PUSH
35719: LD_INT 9
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: PUSH
35727: LD_VAR 0 17
35731: ARRAY
35732: PPUSH
35733: LD_VAR 0 4
35737: PPUSH
35738: CALL_OW 380
35742: GO 35761
// PrepareHuman ( false , i , skill ) ;
35744: LD_INT 0
35746: PPUSH
35747: LD_VAR 0 8
35751: PPUSH
35752: LD_VAR 0 4
35756: PPUSH
35757: CALL_OW 380
// end else
35761: GO 35780
// PrepareHuman ( false , i , skill ) ;
35763: LD_INT 0
35765: PPUSH
35766: LD_VAR 0 8
35770: PPUSH
35771: LD_VAR 0 4
35775: PPUSH
35776: CALL_OW 380
// un := CreateHuman ;
35780: LD_ADDR_VAR 0 14
35784: PUSH
35785: CALL_OW 44
35789: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35790: LD_ADDR_VAR 0 7
35794: PUSH
35795: LD_VAR 0 7
35799: PPUSH
35800: LD_INT 1
35802: PPUSH
35803: LD_VAR 0 14
35807: PPUSH
35808: CALL_OW 2
35812: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35813: LD_VAR 0 14
35817: PPUSH
35818: LD_VAR 0 12
35822: PUSH
35823: LD_INT 1
35825: ARRAY
35826: PPUSH
35827: CALL_OW 52
// end ;
35831: GO 35470
35833: POP
35834: POP
// end ;
35835: GO 34772
35837: POP
35838: POP
// result := result ^ buildings ;
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: LD_VAR 0 7
35848: PUSH
35849: LD_VAR 0 18
35853: ADD
35854: ST_TO_ADDR
// end else
35855: GO 35998
// begin for i = 1 to personel do
35857: LD_ADDR_VAR 0 8
35861: PUSH
35862: DOUBLE
35863: LD_INT 1
35865: DEC
35866: ST_TO_ADDR
35867: LD_VAR 0 6
35871: PUSH
35872: FOR_TO
35873: IFFALSE 35996
// begin if i > 4 then
35875: LD_VAR 0 8
35879: PUSH
35880: LD_INT 4
35882: GREATER
35883: IFFALSE 35887
// break ;
35885: GO 35996
// x := personel [ i ] ;
35887: LD_ADDR_VAR 0 13
35891: PUSH
35892: LD_VAR 0 6
35896: PUSH
35897: LD_VAR 0 8
35901: ARRAY
35902: ST_TO_ADDR
// if x = - 1 then
35903: LD_VAR 0 13
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: EQUAL
35912: IFFALSE 35916
// continue ;
35914: GO 35872
// PrepareHuman ( false , i , skill ) ;
35916: LD_INT 0
35918: PPUSH
35919: LD_VAR 0 8
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: CALL_OW 380
// un := CreateHuman ;
35933: LD_ADDR_VAR 0 14
35937: PUSH
35938: CALL_OW 44
35942: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35943: LD_VAR 0 14
35947: PPUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 250
35957: PPUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 251
35967: PPUSH
35968: LD_INT 10
35970: PPUSH
35971: LD_INT 0
35973: PPUSH
35974: CALL_OW 50
// result := result ^ un ;
35978: LD_ADDR_VAR 0 7
35982: PUSH
35983: LD_VAR 0 7
35987: PUSH
35988: LD_VAR 0 14
35992: ADD
35993: ST_TO_ADDR
// end ;
35994: GO 35872
35996: POP
35997: POP
// end ; end ;
35998: LD_VAR 0 7
36002: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36003: LD_INT 0
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
// result := false ;
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_INT 0
36028: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36029: LD_VAR 0 1
36033: NOT
36034: PUSH
36035: LD_VAR 0 1
36039: PPUSH
36040: CALL_OW 266
36044: PUSH
36045: LD_INT 32
36047: PUSH
36048: LD_INT 33
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: IN
36055: NOT
36056: OR
36057: IFFALSE 36061
// exit ;
36059: GO 37170
// nat := GetNation ( tower ) ;
36061: LD_ADDR_VAR 0 12
36065: PUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 248
36075: ST_TO_ADDR
// side := GetSide ( tower ) ;
36076: LD_ADDR_VAR 0 16
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 255
36090: ST_TO_ADDR
// x := GetX ( tower ) ;
36091: LD_ADDR_VAR 0 10
36095: PUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 250
36105: ST_TO_ADDR
// y := GetY ( tower ) ;
36106: LD_ADDR_VAR 0 11
36110: PUSH
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 251
36120: ST_TO_ADDR
// if not x or not y then
36121: LD_VAR 0 10
36125: NOT
36126: PUSH
36127: LD_VAR 0 11
36131: NOT
36132: OR
36133: IFFALSE 36137
// exit ;
36135: GO 37170
// weapon := 0 ;
36137: LD_ADDR_VAR 0 18
36141: PUSH
36142: LD_INT 0
36144: ST_TO_ADDR
// fac_list := [ ] ;
36145: LD_ADDR_VAR 0 17
36149: PUSH
36150: EMPTY
36151: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36152: LD_ADDR_VAR 0 6
36156: PUSH
36157: LD_VAR 0 1
36161: PPUSH
36162: CALL_OW 274
36166: PPUSH
36167: LD_VAR 0 2
36171: PPUSH
36172: LD_INT 0
36174: PPUSH
36175: CALL 33741 0 3
36179: PPUSH
36180: LD_INT 30
36182: PUSH
36183: LD_INT 3
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PPUSH
36190: CALL_OW 72
36194: ST_TO_ADDR
// if not factories then
36195: LD_VAR 0 6
36199: NOT
36200: IFFALSE 36204
// exit ;
36202: GO 37170
// for i in factories do
36204: LD_ADDR_VAR 0 8
36208: PUSH
36209: LD_VAR 0 6
36213: PUSH
36214: FOR_IN
36215: IFFALSE 36240
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36217: LD_ADDR_VAR 0 17
36221: PUSH
36222: LD_VAR 0 17
36226: PUSH
36227: LD_VAR 0 8
36231: PPUSH
36232: CALL_OW 478
36236: UNION
36237: ST_TO_ADDR
36238: GO 36214
36240: POP
36241: POP
// if not fac_list then
36242: LD_VAR 0 17
36246: NOT
36247: IFFALSE 36251
// exit ;
36249: GO 37170
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36251: LD_ADDR_VAR 0 5
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: LD_INT 5
36261: PUSH
36262: LD_INT 9
36264: PUSH
36265: LD_INT 10
36267: PUSH
36268: LD_INT 6
36270: PUSH
36271: LD_INT 7
36273: PUSH
36274: LD_INT 11
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 27
36288: PUSH
36289: LD_INT 28
36291: PUSH
36292: LD_INT 26
36294: PUSH
36295: LD_INT 30
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 43
36306: PUSH
36307: LD_INT 44
36309: PUSH
36310: LD_INT 46
36312: PUSH
36313: LD_INT 45
36315: PUSH
36316: LD_INT 47
36318: PUSH
36319: LD_INT 49
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: LD_VAR 0 12
36339: ARRAY
36340: ST_TO_ADDR
// list := list isect fac_list ;
36341: LD_ADDR_VAR 0 5
36345: PUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_VAR 0 17
36355: ISECT
36356: ST_TO_ADDR
// if not list then
36357: LD_VAR 0 5
36361: NOT
36362: IFFALSE 36366
// exit ;
36364: GO 37170
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36366: LD_VAR 0 12
36370: PUSH
36371: LD_INT 3
36373: EQUAL
36374: PUSH
36375: LD_INT 49
36377: PUSH
36378: LD_VAR 0 5
36382: IN
36383: AND
36384: PUSH
36385: LD_INT 31
36387: PPUSH
36388: LD_VAR 0 16
36392: PPUSH
36393: CALL_OW 321
36397: PUSH
36398: LD_INT 2
36400: EQUAL
36401: AND
36402: IFFALSE 36462
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36404: LD_INT 22
36406: PUSH
36407: LD_VAR 0 16
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 35
36418: PUSH
36419: LD_INT 49
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 91
36428: PUSH
36429: LD_VAR 0 1
36433: PUSH
36434: LD_INT 10
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PPUSH
36447: CALL_OW 69
36451: NOT
36452: IFFALSE 36462
// weapon := ru_time_lapser ;
36454: LD_ADDR_VAR 0 18
36458: PUSH
36459: LD_INT 49
36461: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36462: LD_VAR 0 12
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: IN
36477: PUSH
36478: LD_INT 11
36480: PUSH
36481: LD_VAR 0 5
36485: IN
36486: PUSH
36487: LD_INT 30
36489: PUSH
36490: LD_VAR 0 5
36494: IN
36495: OR
36496: AND
36497: PUSH
36498: LD_INT 6
36500: PPUSH
36501: LD_VAR 0 16
36505: PPUSH
36506: CALL_OW 321
36510: PUSH
36511: LD_INT 2
36513: EQUAL
36514: AND
36515: IFFALSE 36680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36517: LD_INT 22
36519: PUSH
36520: LD_VAR 0 16
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 35
36534: PUSH
36535: LD_INT 11
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 35
36544: PUSH
36545: LD_INT 30
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 91
36559: PUSH
36560: LD_VAR 0 1
36564: PUSH
36565: LD_INT 18
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: PPUSH
36578: CALL_OW 69
36582: NOT
36583: PUSH
36584: LD_INT 22
36586: PUSH
36587: LD_VAR 0 16
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 30
36601: PUSH
36602: LD_INT 32
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 33
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 91
36626: PUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_INT 12
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: PUSH
36645: EMPTY
36646: LIST
36647: PPUSH
36648: CALL_OW 69
36652: PUSH
36653: LD_INT 2
36655: GREATER
36656: AND
36657: IFFALSE 36680
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36659: LD_ADDR_VAR 0 18
36663: PUSH
36664: LD_INT 11
36666: PUSH
36667: LD_INT 30
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_VAR 0 12
36678: ARRAY
36679: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36680: LD_VAR 0 18
36684: NOT
36685: PUSH
36686: LD_INT 40
36688: PPUSH
36689: LD_VAR 0 16
36693: PPUSH
36694: CALL_OW 321
36698: PUSH
36699: LD_INT 2
36701: EQUAL
36702: AND
36703: PUSH
36704: LD_INT 7
36706: PUSH
36707: LD_VAR 0 5
36711: IN
36712: PUSH
36713: LD_INT 28
36715: PUSH
36716: LD_VAR 0 5
36720: IN
36721: OR
36722: PUSH
36723: LD_INT 45
36725: PUSH
36726: LD_VAR 0 5
36730: IN
36731: OR
36732: AND
36733: IFFALSE 36987
// begin hex := GetHexInfo ( x , y ) ;
36735: LD_ADDR_VAR 0 4
36739: PUSH
36740: LD_VAR 0 10
36744: PPUSH
36745: LD_VAR 0 11
36749: PPUSH
36750: CALL_OW 546
36754: ST_TO_ADDR
// if hex [ 1 ] then
36755: LD_VAR 0 4
36759: PUSH
36760: LD_INT 1
36762: ARRAY
36763: IFFALSE 36767
// exit ;
36765: GO 37170
// height := hex [ 2 ] ;
36767: LD_ADDR_VAR 0 15
36771: PUSH
36772: LD_VAR 0 4
36776: PUSH
36777: LD_INT 2
36779: ARRAY
36780: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36781: LD_ADDR_VAR 0 14
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// for i in tmp do
36804: LD_ADDR_VAR 0 8
36808: PUSH
36809: LD_VAR 0 14
36813: PUSH
36814: FOR_IN
36815: IFFALSE 36985
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36817: LD_ADDR_VAR 0 9
36821: PUSH
36822: LD_VAR 0 10
36826: PPUSH
36827: LD_VAR 0 8
36831: PPUSH
36832: LD_INT 5
36834: PPUSH
36835: CALL_OW 272
36839: PUSH
36840: LD_VAR 0 11
36844: PPUSH
36845: LD_VAR 0 8
36849: PPUSH
36850: LD_INT 5
36852: PPUSH
36853: CALL_OW 273
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36862: LD_VAR 0 9
36866: PUSH
36867: LD_INT 1
36869: ARRAY
36870: PPUSH
36871: LD_VAR 0 9
36875: PUSH
36876: LD_INT 2
36878: ARRAY
36879: PPUSH
36880: CALL_OW 488
36884: IFFALSE 36983
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36886: LD_ADDR_VAR 0 4
36890: PUSH
36891: LD_VAR 0 9
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PPUSH
36900: LD_VAR 0 9
36904: PUSH
36905: LD_INT 2
36907: ARRAY
36908: PPUSH
36909: CALL_OW 546
36913: ST_TO_ADDR
// if hex [ 1 ] then
36914: LD_VAR 0 4
36918: PUSH
36919: LD_INT 1
36921: ARRAY
36922: IFFALSE 36926
// continue ;
36924: GO 36814
// h := hex [ 2 ] ;
36926: LD_ADDR_VAR 0 13
36930: PUSH
36931: LD_VAR 0 4
36935: PUSH
36936: LD_INT 2
36938: ARRAY
36939: ST_TO_ADDR
// if h + 7 < height then
36940: LD_VAR 0 13
36944: PUSH
36945: LD_INT 7
36947: PLUS
36948: PUSH
36949: LD_VAR 0 15
36953: LESS
36954: IFFALSE 36983
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36956: LD_ADDR_VAR 0 18
36960: PUSH
36961: LD_INT 7
36963: PUSH
36964: LD_INT 28
36966: PUSH
36967: LD_INT 45
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: PUSH
36975: LD_VAR 0 12
36979: ARRAY
36980: ST_TO_ADDR
// break ;
36981: GO 36985
// end ; end ; end ;
36983: GO 36814
36985: POP
36986: POP
// end ; if not weapon then
36987: LD_VAR 0 18
36991: NOT
36992: IFFALSE 37052
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36994: LD_ADDR_VAR 0 5
36998: PUSH
36999: LD_VAR 0 5
37003: PUSH
37004: LD_INT 11
37006: PUSH
37007: LD_INT 30
37009: PUSH
37010: LD_INT 49
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: DIFF
37018: ST_TO_ADDR
// if not list then
37019: LD_VAR 0 5
37023: NOT
37024: IFFALSE 37028
// exit ;
37026: GO 37170
// weapon := list [ rand ( 1 , list ) ] ;
37028: LD_ADDR_VAR 0 18
37032: PUSH
37033: LD_VAR 0 5
37037: PUSH
37038: LD_INT 1
37040: PPUSH
37041: LD_VAR 0 5
37045: PPUSH
37046: CALL_OW 12
37050: ARRAY
37051: ST_TO_ADDR
// end ; if weapon then
37052: LD_VAR 0 18
37056: IFFALSE 37170
// begin tmp := CostOfWeapon ( weapon ) ;
37058: LD_ADDR_VAR 0 14
37062: PUSH
37063: LD_VAR 0 18
37067: PPUSH
37068: CALL_OW 451
37072: ST_TO_ADDR
// j := GetBase ( tower ) ;
37073: LD_ADDR_VAR 0 9
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: CALL_OW 274
37087: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37088: LD_VAR 0 9
37092: PPUSH
37093: LD_INT 1
37095: PPUSH
37096: CALL_OW 275
37100: PUSH
37101: LD_VAR 0 14
37105: PUSH
37106: LD_INT 1
37108: ARRAY
37109: GREATEREQUAL
37110: PUSH
37111: LD_VAR 0 9
37115: PPUSH
37116: LD_INT 2
37118: PPUSH
37119: CALL_OW 275
37123: PUSH
37124: LD_VAR 0 14
37128: PUSH
37129: LD_INT 2
37131: ARRAY
37132: GREATEREQUAL
37133: AND
37134: PUSH
37135: LD_VAR 0 9
37139: PPUSH
37140: LD_INT 3
37142: PPUSH
37143: CALL_OW 275
37147: PUSH
37148: LD_VAR 0 14
37152: PUSH
37153: LD_INT 3
37155: ARRAY
37156: GREATEREQUAL
37157: AND
37158: IFFALSE 37170
// result := weapon ;
37160: LD_ADDR_VAR 0 3
37164: PUSH
37165: LD_VAR 0 18
37169: ST_TO_ADDR
// end ; end ;
37170: LD_VAR 0 3
37174: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37175: LD_INT 0
37177: PPUSH
37178: PPUSH
// result := true ;
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 1
37186: ST_TO_ADDR
// if array1 = array2 then
37187: LD_VAR 0 1
37191: PUSH
37192: LD_VAR 0 2
37196: EQUAL
37197: IFFALSE 37257
// begin for i = 1 to array1 do
37199: LD_ADDR_VAR 0 4
37203: PUSH
37204: DOUBLE
37205: LD_INT 1
37207: DEC
37208: ST_TO_ADDR
37209: LD_VAR 0 1
37213: PUSH
37214: FOR_TO
37215: IFFALSE 37253
// if array1 [ i ] <> array2 [ i ] then
37217: LD_VAR 0 1
37221: PUSH
37222: LD_VAR 0 4
37226: ARRAY
37227: PUSH
37228: LD_VAR 0 2
37232: PUSH
37233: LD_VAR 0 4
37237: ARRAY
37238: NONEQUAL
37239: IFFALSE 37251
// begin result := false ;
37241: LD_ADDR_VAR 0 3
37245: PUSH
37246: LD_INT 0
37248: ST_TO_ADDR
// break ;
37249: GO 37253
// end ;
37251: GO 37214
37253: POP
37254: POP
// end else
37255: GO 37265
// result := false ;
37257: LD_ADDR_VAR 0 3
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// end ;
37265: LD_VAR 0 3
37269: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
// if not array1 or not array2 then
37274: LD_VAR 0 1
37278: NOT
37279: PUSH
37280: LD_VAR 0 2
37284: NOT
37285: OR
37286: IFFALSE 37290
// exit ;
37288: GO 37354
// result := true ;
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 1
37297: ST_TO_ADDR
// for i = 1 to array1 do
37298: LD_ADDR_VAR 0 4
37302: PUSH
37303: DOUBLE
37304: LD_INT 1
37306: DEC
37307: ST_TO_ADDR
37308: LD_VAR 0 1
37312: PUSH
37313: FOR_TO
37314: IFFALSE 37352
// if array1 [ i ] <> array2 [ i ] then
37316: LD_VAR 0 1
37320: PUSH
37321: LD_VAR 0 4
37325: ARRAY
37326: PUSH
37327: LD_VAR 0 2
37331: PUSH
37332: LD_VAR 0 4
37336: ARRAY
37337: NONEQUAL
37338: IFFALSE 37350
// begin result := false ;
37340: LD_ADDR_VAR 0 3
37344: PUSH
37345: LD_INT 0
37347: ST_TO_ADDR
// break ;
37348: GO 37352
// end ;
37350: GO 37313
37352: POP
37353: POP
// end ;
37354: LD_VAR 0 3
37358: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37359: LD_INT 0
37361: PPUSH
37362: PPUSH
37363: PPUSH
// pom := GetBase ( fac ) ;
37364: LD_ADDR_VAR 0 5
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 274
37378: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_VAR 0 2
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PPUSH
37393: LD_VAR 0 2
37397: PUSH
37398: LD_INT 2
37400: ARRAY
37401: PPUSH
37402: LD_VAR 0 2
37406: PUSH
37407: LD_INT 3
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 2
37415: PUSH
37416: LD_INT 4
37418: ARRAY
37419: PPUSH
37420: CALL_OW 449
37424: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_VAR 0 5
37434: PPUSH
37435: LD_INT 1
37437: PPUSH
37438: CALL_OW 275
37442: PUSH
37443: LD_VAR 0 4
37447: PUSH
37448: LD_INT 1
37450: ARRAY
37451: GREATEREQUAL
37452: PUSH
37453: LD_VAR 0 5
37457: PPUSH
37458: LD_INT 2
37460: PPUSH
37461: CALL_OW 275
37465: PUSH
37466: LD_VAR 0 4
37470: PUSH
37471: LD_INT 2
37473: ARRAY
37474: GREATEREQUAL
37475: AND
37476: PUSH
37477: LD_VAR 0 5
37481: PPUSH
37482: LD_INT 3
37484: PPUSH
37485: CALL_OW 275
37489: PUSH
37490: LD_VAR 0 4
37494: PUSH
37495: LD_INT 3
37497: ARRAY
37498: GREATEREQUAL
37499: AND
37500: ST_TO_ADDR
// end ;
37501: LD_VAR 0 3
37505: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37506: LD_INT 0
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
// pom := GetBase ( building ) ;
37512: LD_ADDR_VAR 0 3
37516: PUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL_OW 274
37526: ST_TO_ADDR
// if not pom then
37527: LD_VAR 0 3
37531: NOT
37532: IFFALSE 37536
// exit ;
37534: GO 37706
// btype := GetBType ( building ) ;
37536: LD_ADDR_VAR 0 5
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 266
37550: ST_TO_ADDR
// if btype = b_armoury then
37551: LD_VAR 0 5
37555: PUSH
37556: LD_INT 4
37558: EQUAL
37559: IFFALSE 37569
// btype := b_barracks ;
37561: LD_ADDR_VAR 0 5
37565: PUSH
37566: LD_INT 5
37568: ST_TO_ADDR
// if btype = b_depot then
37569: LD_VAR 0 5
37573: PUSH
37574: LD_INT 0
37576: EQUAL
37577: IFFALSE 37587
// btype := b_warehouse ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_INT 1
37586: ST_TO_ADDR
// if btype = b_workshop then
37587: LD_VAR 0 5
37591: PUSH
37592: LD_INT 2
37594: EQUAL
37595: IFFALSE 37605
// btype := b_factory ;
37597: LD_ADDR_VAR 0 5
37601: PUSH
37602: LD_INT 3
37604: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37605: LD_ADDR_VAR 0 4
37609: PUSH
37610: LD_VAR 0 5
37614: PPUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 248
37624: PPUSH
37625: CALL_OW 450
37629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37630: LD_ADDR_VAR 0 2
37634: PUSH
37635: LD_VAR 0 3
37639: PPUSH
37640: LD_INT 1
37642: PPUSH
37643: CALL_OW 275
37647: PUSH
37648: LD_VAR 0 4
37652: PUSH
37653: LD_INT 1
37655: ARRAY
37656: GREATEREQUAL
37657: PUSH
37658: LD_VAR 0 3
37662: PPUSH
37663: LD_INT 2
37665: PPUSH
37666: CALL_OW 275
37670: PUSH
37671: LD_VAR 0 4
37675: PUSH
37676: LD_INT 2
37678: ARRAY
37679: GREATEREQUAL
37680: AND
37681: PUSH
37682: LD_VAR 0 3
37686: PPUSH
37687: LD_INT 3
37689: PPUSH
37690: CALL_OW 275
37694: PUSH
37695: LD_VAR 0 4
37699: PUSH
37700: LD_INT 3
37702: ARRAY
37703: GREATEREQUAL
37704: AND
37705: ST_TO_ADDR
// end ;
37706: LD_VAR 0 2
37710: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
37715: PPUSH
// pom := GetBase ( building ) ;
37716: LD_ADDR_VAR 0 4
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 274
37730: ST_TO_ADDR
// if not pom then
37731: LD_VAR 0 4
37735: NOT
37736: IFFALSE 37740
// exit ;
37738: GO 37841
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37740: LD_ADDR_VAR 0 5
37744: PUSH
37745: LD_VAR 0 2
37749: PPUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 248
37759: PPUSH
37760: CALL_OW 450
37764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_VAR 0 4
37774: PPUSH
37775: LD_INT 1
37777: PPUSH
37778: CALL_OW 275
37782: PUSH
37783: LD_VAR 0 5
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: GREATEREQUAL
37792: PUSH
37793: LD_VAR 0 4
37797: PPUSH
37798: LD_INT 2
37800: PPUSH
37801: CALL_OW 275
37805: PUSH
37806: LD_VAR 0 5
37810: PUSH
37811: LD_INT 2
37813: ARRAY
37814: GREATEREQUAL
37815: AND
37816: PUSH
37817: LD_VAR 0 4
37821: PPUSH
37822: LD_INT 3
37824: PPUSH
37825: CALL_OW 275
37829: PUSH
37830: LD_VAR 0 5
37834: PUSH
37835: LD_INT 3
37837: ARRAY
37838: GREATEREQUAL
37839: AND
37840: ST_TO_ADDR
// end ;
37841: LD_VAR 0 3
37845: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37846: LD_INT 0
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
// result := false ;
37859: LD_ADDR_VAR 0 8
37863: PUSH
37864: LD_INT 0
37866: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37867: LD_VAR 0 5
37871: NOT
37872: PUSH
37873: LD_VAR 0 1
37877: NOT
37878: OR
37879: PUSH
37880: LD_VAR 0 2
37884: NOT
37885: OR
37886: PUSH
37887: LD_VAR 0 3
37891: NOT
37892: OR
37893: IFFALSE 37897
// exit ;
37895: GO 38711
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37897: LD_ADDR_VAR 0 14
37901: PUSH
37902: LD_VAR 0 1
37906: PPUSH
37907: LD_VAR 0 2
37911: PPUSH
37912: LD_VAR 0 3
37916: PPUSH
37917: LD_VAR 0 4
37921: PPUSH
37922: LD_VAR 0 5
37926: PUSH
37927: LD_INT 1
37929: ARRAY
37930: PPUSH
37931: CALL_OW 248
37935: PPUSH
37936: LD_INT 0
37938: PPUSH
37939: CALL 39964 0 6
37943: ST_TO_ADDR
// if not hexes then
37944: LD_VAR 0 14
37948: NOT
37949: IFFALSE 37953
// exit ;
37951: GO 38711
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37953: LD_ADDR_VAR 0 17
37957: PUSH
37958: LD_VAR 0 5
37962: PPUSH
37963: LD_INT 22
37965: PUSH
37966: LD_VAR 0 13
37970: PPUSH
37971: CALL_OW 255
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 30
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 30
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PPUSH
38012: CALL_OW 72
38016: ST_TO_ADDR
// for i = 1 to hexes do
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: DOUBLE
38023: LD_INT 1
38025: DEC
38026: ST_TO_ADDR
38027: LD_VAR 0 14
38031: PUSH
38032: FOR_TO
38033: IFFALSE 38709
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38035: LD_ADDR_VAR 0 13
38039: PUSH
38040: LD_VAR 0 14
38044: PUSH
38045: LD_VAR 0 9
38049: ARRAY
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: LD_VAR 0 14
38059: PUSH
38060: LD_VAR 0 9
38064: ARRAY
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: PPUSH
38070: CALL_OW 428
38074: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38075: LD_VAR 0 14
38079: PUSH
38080: LD_VAR 0 9
38084: ARRAY
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PPUSH
38090: LD_VAR 0 14
38094: PUSH
38095: LD_VAR 0 9
38099: ARRAY
38100: PUSH
38101: LD_INT 2
38103: ARRAY
38104: PPUSH
38105: CALL_OW 351
38109: PUSH
38110: LD_VAR 0 14
38114: PUSH
38115: LD_VAR 0 9
38119: ARRAY
38120: PUSH
38121: LD_INT 1
38123: ARRAY
38124: PPUSH
38125: LD_VAR 0 14
38129: PUSH
38130: LD_VAR 0 9
38134: ARRAY
38135: PUSH
38136: LD_INT 2
38138: ARRAY
38139: PPUSH
38140: CALL_OW 488
38144: NOT
38145: OR
38146: PUSH
38147: LD_VAR 0 13
38151: PPUSH
38152: CALL_OW 247
38156: PUSH
38157: LD_INT 3
38159: EQUAL
38160: OR
38161: IFFALSE 38167
// exit ;
38163: POP
38164: POP
38165: GO 38711
// if not tmp then
38167: LD_VAR 0 13
38171: NOT
38172: IFFALSE 38176
// continue ;
38174: GO 38032
// result := true ;
38176: LD_ADDR_VAR 0 8
38180: PUSH
38181: LD_INT 1
38183: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38184: LD_VAR 0 6
38188: PUSH
38189: LD_VAR 0 13
38193: PPUSH
38194: CALL_OW 247
38198: PUSH
38199: LD_INT 2
38201: EQUAL
38202: AND
38203: PUSH
38204: LD_VAR 0 13
38208: PPUSH
38209: CALL_OW 263
38213: PUSH
38214: LD_INT 1
38216: EQUAL
38217: AND
38218: IFFALSE 38382
// begin if IsDrivenBy ( tmp ) then
38220: LD_VAR 0 13
38224: PPUSH
38225: CALL_OW 311
38229: IFFALSE 38233
// continue ;
38231: GO 38032
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38233: LD_VAR 0 6
38237: PPUSH
38238: LD_INT 3
38240: PUSH
38241: LD_INT 60
38243: PUSH
38244: EMPTY
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 3
38253: PUSH
38254: LD_INT 55
38256: PUSH
38257: EMPTY
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PPUSH
38268: CALL_OW 72
38272: IFFALSE 38380
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38274: LD_ADDR_VAR 0 18
38278: PUSH
38279: LD_VAR 0 6
38283: PPUSH
38284: LD_INT 3
38286: PUSH
38287: LD_INT 60
38289: PUSH
38290: EMPTY
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: LD_INT 55
38302: PUSH
38303: EMPTY
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PPUSH
38314: CALL_OW 72
38318: PUSH
38319: LD_INT 1
38321: ARRAY
38322: ST_TO_ADDR
// if IsInUnit ( driver ) then
38323: LD_VAR 0 18
38327: PPUSH
38328: CALL_OW 310
38332: IFFALSE 38343
// ComExit ( driver ) ;
38334: LD_VAR 0 18
38338: PPUSH
38339: CALL 63756 0 1
// AddComEnterUnit ( driver , tmp ) ;
38343: LD_VAR 0 18
38347: PPUSH
38348: LD_VAR 0 13
38352: PPUSH
38353: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38357: LD_VAR 0 18
38361: PPUSH
38362: LD_VAR 0 7
38366: PPUSH
38367: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38371: LD_VAR 0 18
38375: PPUSH
38376: CALL_OW 181
// end ; continue ;
38380: GO 38032
// end ; if not cleaners or not tmp in cleaners then
38382: LD_VAR 0 6
38386: NOT
38387: PUSH
38388: LD_VAR 0 13
38392: PUSH
38393: LD_VAR 0 6
38397: IN
38398: NOT
38399: OR
38400: IFFALSE 38707
// begin if dep then
38402: LD_VAR 0 17
38406: IFFALSE 38542
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38408: LD_ADDR_VAR 0 16
38412: PUSH
38413: LD_VAR 0 17
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PPUSH
38422: CALL_OW 250
38426: PPUSH
38427: LD_VAR 0 17
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: CALL_OW 254
38440: PPUSH
38441: LD_INT 5
38443: PPUSH
38444: CALL_OW 272
38448: PUSH
38449: LD_VAR 0 17
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PPUSH
38458: CALL_OW 251
38462: PPUSH
38463: LD_VAR 0 17
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: PPUSH
38472: CALL_OW 254
38476: PPUSH
38477: LD_INT 5
38479: PPUSH
38480: CALL_OW 273
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38489: LD_VAR 0 16
38493: PUSH
38494: LD_INT 1
38496: ARRAY
38497: PPUSH
38498: LD_VAR 0 16
38502: PUSH
38503: LD_INT 2
38505: ARRAY
38506: PPUSH
38507: CALL_OW 488
38511: IFFALSE 38542
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38513: LD_VAR 0 13
38517: PPUSH
38518: LD_VAR 0 16
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: PPUSH
38527: LD_VAR 0 16
38531: PUSH
38532: LD_INT 2
38534: ARRAY
38535: PPUSH
38536: CALL_OW 111
// continue ;
38540: GO 38032
// end ; end ; r := GetDir ( tmp ) ;
38542: LD_ADDR_VAR 0 15
38546: PUSH
38547: LD_VAR 0 13
38551: PPUSH
38552: CALL_OW 254
38556: ST_TO_ADDR
// if r = 5 then
38557: LD_VAR 0 15
38561: PUSH
38562: LD_INT 5
38564: EQUAL
38565: IFFALSE 38575
// r := 0 ;
38567: LD_ADDR_VAR 0 15
38571: PUSH
38572: LD_INT 0
38574: ST_TO_ADDR
// for j = r to 5 do
38575: LD_ADDR_VAR 0 10
38579: PUSH
38580: DOUBLE
38581: LD_VAR 0 15
38585: DEC
38586: ST_TO_ADDR
38587: LD_INT 5
38589: PUSH
38590: FOR_TO
38591: IFFALSE 38705
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38593: LD_ADDR_VAR 0 11
38597: PUSH
38598: LD_VAR 0 13
38602: PPUSH
38603: CALL_OW 250
38607: PPUSH
38608: LD_VAR 0 10
38612: PPUSH
38613: LD_INT 2
38615: PPUSH
38616: CALL_OW 272
38620: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38621: LD_ADDR_VAR 0 12
38625: PUSH
38626: LD_VAR 0 13
38630: PPUSH
38631: CALL_OW 251
38635: PPUSH
38636: LD_VAR 0 10
38640: PPUSH
38641: LD_INT 2
38643: PPUSH
38644: CALL_OW 273
38648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38649: LD_VAR 0 11
38653: PPUSH
38654: LD_VAR 0 12
38658: PPUSH
38659: CALL_OW 488
38663: PUSH
38664: LD_VAR 0 11
38668: PPUSH
38669: LD_VAR 0 12
38673: PPUSH
38674: CALL_OW 428
38678: NOT
38679: AND
38680: IFFALSE 38703
// begin ComMoveXY ( tmp , _x , _y ) ;
38682: LD_VAR 0 13
38686: PPUSH
38687: LD_VAR 0 11
38691: PPUSH
38692: LD_VAR 0 12
38696: PPUSH
38697: CALL_OW 111
// break ;
38701: GO 38705
// end ; end ;
38703: GO 38590
38705: POP
38706: POP
// end ; end ;
38707: GO 38032
38709: POP
38710: POP
// end ;
38711: LD_VAR 0 8
38715: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38716: LD_INT 0
38718: PPUSH
// result := true ;
38719: LD_ADDR_VAR 0 3
38723: PUSH
38724: LD_INT 1
38726: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38727: LD_VAR 0 2
38731: PUSH
38732: LD_INT 24
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38746
38738: LD_INT 33
38740: DOUBLE
38741: EQUAL
38742: IFTRUE 38746
38744: GO 38771
38746: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_INT 32
38754: PPUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 321
38764: PUSH
38765: LD_INT 2
38767: EQUAL
38768: ST_TO_ADDR
38769: GO 39087
38771: LD_INT 20
38773: DOUBLE
38774: EQUAL
38775: IFTRUE 38779
38777: GO 38804
38779: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_INT 6
38787: PPUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 321
38797: PUSH
38798: LD_INT 2
38800: EQUAL
38801: ST_TO_ADDR
38802: GO 39087
38804: LD_INT 22
38806: DOUBLE
38807: EQUAL
38808: IFTRUE 38818
38810: LD_INT 36
38812: DOUBLE
38813: EQUAL
38814: IFTRUE 38818
38816: GO 38843
38818: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38819: LD_ADDR_VAR 0 3
38823: PUSH
38824: LD_INT 15
38826: PPUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 321
38836: PUSH
38837: LD_INT 2
38839: EQUAL
38840: ST_TO_ADDR
38841: GO 39087
38843: LD_INT 30
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 38876
38851: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38852: LD_ADDR_VAR 0 3
38856: PUSH
38857: LD_INT 20
38859: PPUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 321
38869: PUSH
38870: LD_INT 2
38872: EQUAL
38873: ST_TO_ADDR
38874: GO 39087
38876: LD_INT 28
38878: DOUBLE
38879: EQUAL
38880: IFTRUE 38890
38882: LD_INT 21
38884: DOUBLE
38885: EQUAL
38886: IFTRUE 38890
38888: GO 38915
38890: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38891: LD_ADDR_VAR 0 3
38895: PUSH
38896: LD_INT 21
38898: PPUSH
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL_OW 321
38908: PUSH
38909: LD_INT 2
38911: EQUAL
38912: ST_TO_ADDR
38913: GO 39087
38915: LD_INT 16
38917: DOUBLE
38918: EQUAL
38919: IFTRUE 38923
38921: GO 38948
38923: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38924: LD_ADDR_VAR 0 3
38928: PUSH
38929: LD_INT 84
38931: PPUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 321
38941: PUSH
38942: LD_INT 2
38944: EQUAL
38945: ST_TO_ADDR
38946: GO 39087
38948: LD_INT 19
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38962
38954: LD_INT 23
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38962
38960: GO 38987
38962: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38963: LD_ADDR_VAR 0 3
38967: PUSH
38968: LD_INT 83
38970: PPUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 321
38980: PUSH
38981: LD_INT 2
38983: EQUAL
38984: ST_TO_ADDR
38985: GO 39087
38987: LD_INT 17
38989: DOUBLE
38990: EQUAL
38991: IFTRUE 38995
38993: GO 39020
38995: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38996: LD_ADDR_VAR 0 3
39000: PUSH
39001: LD_INT 39
39003: PPUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 321
39013: PUSH
39014: LD_INT 2
39016: EQUAL
39017: ST_TO_ADDR
39018: GO 39087
39020: LD_INT 18
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39053
39028: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39029: LD_ADDR_VAR 0 3
39033: PUSH
39034: LD_INT 40
39036: PPUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 321
39046: PUSH
39047: LD_INT 2
39049: EQUAL
39050: ST_TO_ADDR
39051: GO 39087
39053: LD_INT 27
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39086
39061: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_INT 35
39069: PPUSH
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 321
39079: PUSH
39080: LD_INT 2
39082: EQUAL
39083: ST_TO_ADDR
39084: GO 39087
39086: POP
// end ;
39087: LD_VAR 0 3
39091: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39092: LD_INT 0
39094: PPUSH
39095: PPUSH
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
// result := false ;
39105: LD_ADDR_VAR 0 6
39109: PUSH
39110: LD_INT 0
39112: ST_TO_ADDR
// if btype = b_depot then
39113: LD_VAR 0 2
39117: PUSH
39118: LD_INT 0
39120: EQUAL
39121: IFFALSE 39133
// begin result := true ;
39123: LD_ADDR_VAR 0 6
39127: PUSH
39128: LD_INT 1
39130: ST_TO_ADDR
// exit ;
39131: GO 39959
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39133: LD_VAR 0 1
39137: NOT
39138: PUSH
39139: LD_VAR 0 1
39143: PPUSH
39144: CALL_OW 266
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: IN
39159: NOT
39160: OR
39161: PUSH
39162: LD_VAR 0 2
39166: NOT
39167: OR
39168: PUSH
39169: LD_VAR 0 5
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: LD_INT 4
39188: PUSH
39189: LD_INT 5
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: IN
39200: NOT
39201: OR
39202: PUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: LD_VAR 0 4
39212: PPUSH
39213: CALL_OW 488
39217: NOT
39218: OR
39219: IFFALSE 39223
// exit ;
39221: GO 39959
// side := GetSide ( depot ) ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 255
39237: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39238: LD_VAR 0 9
39242: PPUSH
39243: LD_VAR 0 2
39247: PPUSH
39248: CALL 38716 0 2
39252: NOT
39253: IFFALSE 39257
// exit ;
39255: GO 39959
// pom := GetBase ( depot ) ;
39257: LD_ADDR_VAR 0 10
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 274
39271: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39272: LD_ADDR_VAR 0 11
39276: PUSH
39277: LD_VAR 0 2
39281: PPUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 248
39291: PPUSH
39292: CALL_OW 450
39296: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39297: LD_VAR 0 10
39301: PPUSH
39302: LD_INT 1
39304: PPUSH
39305: CALL_OW 275
39309: PUSH
39310: LD_VAR 0 11
39314: PUSH
39315: LD_INT 1
39317: ARRAY
39318: GREATEREQUAL
39319: PUSH
39320: LD_VAR 0 10
39324: PPUSH
39325: LD_INT 2
39327: PPUSH
39328: CALL_OW 275
39332: PUSH
39333: LD_VAR 0 11
39337: PUSH
39338: LD_INT 2
39340: ARRAY
39341: GREATEREQUAL
39342: AND
39343: PUSH
39344: LD_VAR 0 10
39348: PPUSH
39349: LD_INT 3
39351: PPUSH
39352: CALL_OW 275
39356: PUSH
39357: LD_VAR 0 11
39361: PUSH
39362: LD_INT 3
39364: ARRAY
39365: GREATEREQUAL
39366: AND
39367: NOT
39368: IFFALSE 39372
// exit ;
39370: GO 39959
// if GetBType ( depot ) = b_depot then
39372: LD_VAR 0 1
39376: PPUSH
39377: CALL_OW 266
39381: PUSH
39382: LD_INT 0
39384: EQUAL
39385: IFFALSE 39397
// dist := 28 else
39387: LD_ADDR_VAR 0 14
39391: PUSH
39392: LD_INT 28
39394: ST_TO_ADDR
39395: GO 39405
// dist := 36 ;
39397: LD_ADDR_VAR 0 14
39401: PUSH
39402: LD_INT 36
39404: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39405: LD_VAR 0 1
39409: PPUSH
39410: LD_VAR 0 3
39414: PPUSH
39415: LD_VAR 0 4
39419: PPUSH
39420: CALL_OW 297
39424: PUSH
39425: LD_VAR 0 14
39429: GREATER
39430: IFFALSE 39434
// exit ;
39432: GO 39959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39434: LD_ADDR_VAR 0 12
39438: PUSH
39439: LD_VAR 0 2
39443: PPUSH
39444: LD_VAR 0 3
39448: PPUSH
39449: LD_VAR 0 4
39453: PPUSH
39454: LD_VAR 0 5
39458: PPUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 248
39468: PPUSH
39469: LD_INT 0
39471: PPUSH
39472: CALL 39964 0 6
39476: ST_TO_ADDR
// if not hexes then
39477: LD_VAR 0 12
39481: NOT
39482: IFFALSE 39486
// exit ;
39484: GO 39959
// hex := GetHexInfo ( x , y ) ;
39486: LD_ADDR_VAR 0 15
39490: PUSH
39491: LD_VAR 0 3
39495: PPUSH
39496: LD_VAR 0 4
39500: PPUSH
39501: CALL_OW 546
39505: ST_TO_ADDR
// if hex [ 1 ] then
39506: LD_VAR 0 15
39510: PUSH
39511: LD_INT 1
39513: ARRAY
39514: IFFALSE 39518
// exit ;
39516: GO 39959
// height := hex [ 2 ] ;
39518: LD_ADDR_VAR 0 13
39522: PUSH
39523: LD_VAR 0 15
39527: PUSH
39528: LD_INT 2
39530: ARRAY
39531: ST_TO_ADDR
// for i = 1 to hexes do
39532: LD_ADDR_VAR 0 7
39536: PUSH
39537: DOUBLE
39538: LD_INT 1
39540: DEC
39541: ST_TO_ADDR
39542: LD_VAR 0 12
39546: PUSH
39547: FOR_TO
39548: IFFALSE 39878
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39550: LD_VAR 0 12
39554: PUSH
39555: LD_VAR 0 7
39559: ARRAY
39560: PUSH
39561: LD_INT 1
39563: ARRAY
39564: PPUSH
39565: LD_VAR 0 12
39569: PUSH
39570: LD_VAR 0 7
39574: ARRAY
39575: PUSH
39576: LD_INT 2
39578: ARRAY
39579: PPUSH
39580: CALL_OW 488
39584: NOT
39585: PUSH
39586: LD_VAR 0 12
39590: PUSH
39591: LD_VAR 0 7
39595: ARRAY
39596: PUSH
39597: LD_INT 1
39599: ARRAY
39600: PPUSH
39601: LD_VAR 0 12
39605: PUSH
39606: LD_VAR 0 7
39610: ARRAY
39611: PUSH
39612: LD_INT 2
39614: ARRAY
39615: PPUSH
39616: CALL_OW 428
39620: PUSH
39621: LD_INT 0
39623: GREATER
39624: OR
39625: PUSH
39626: LD_VAR 0 12
39630: PUSH
39631: LD_VAR 0 7
39635: ARRAY
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: PPUSH
39641: LD_VAR 0 12
39645: PUSH
39646: LD_VAR 0 7
39650: ARRAY
39651: PUSH
39652: LD_INT 2
39654: ARRAY
39655: PPUSH
39656: CALL_OW 351
39660: OR
39661: IFFALSE 39667
// exit ;
39663: POP
39664: POP
39665: GO 39959
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39667: LD_ADDR_VAR 0 8
39671: PUSH
39672: LD_VAR 0 12
39676: PUSH
39677: LD_VAR 0 7
39681: ARRAY
39682: PUSH
39683: LD_INT 1
39685: ARRAY
39686: PPUSH
39687: LD_VAR 0 12
39691: PUSH
39692: LD_VAR 0 7
39696: ARRAY
39697: PUSH
39698: LD_INT 2
39700: ARRAY
39701: PPUSH
39702: CALL_OW 546
39706: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39707: LD_VAR 0 8
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PUSH
39716: LD_VAR 0 8
39720: PUSH
39721: LD_INT 2
39723: ARRAY
39724: PUSH
39725: LD_VAR 0 13
39729: PUSH
39730: LD_INT 2
39732: PLUS
39733: GREATER
39734: OR
39735: PUSH
39736: LD_VAR 0 8
39740: PUSH
39741: LD_INT 2
39743: ARRAY
39744: PUSH
39745: LD_VAR 0 13
39749: PUSH
39750: LD_INT 2
39752: MINUS
39753: LESS
39754: OR
39755: PUSH
39756: LD_VAR 0 8
39760: PUSH
39761: LD_INT 3
39763: ARRAY
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 8
39770: PUSH
39771: LD_INT 9
39773: PUSH
39774: LD_INT 10
39776: PUSH
39777: LD_INT 11
39779: PUSH
39780: LD_INT 12
39782: PUSH
39783: LD_INT 13
39785: PUSH
39786: LD_INT 16
39788: PUSH
39789: LD_INT 17
39791: PUSH
39792: LD_INT 18
39794: PUSH
39795: LD_INT 19
39797: PUSH
39798: LD_INT 20
39800: PUSH
39801: LD_INT 21
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: IN
39819: NOT
39820: OR
39821: PUSH
39822: LD_VAR 0 8
39826: PUSH
39827: LD_INT 5
39829: ARRAY
39830: NOT
39831: OR
39832: PUSH
39833: LD_VAR 0 8
39837: PUSH
39838: LD_INT 6
39840: ARRAY
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 7
39850: PUSH
39851: LD_INT 9
39853: PUSH
39854: LD_INT 10
39856: PUSH
39857: LD_INT 11
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: IN
39868: NOT
39869: OR
39870: IFFALSE 39876
// exit ;
39872: POP
39873: POP
39874: GO 39959
// end ;
39876: GO 39547
39878: POP
39879: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39880: LD_VAR 0 9
39884: PPUSH
39885: LD_VAR 0 3
39889: PPUSH
39890: LD_VAR 0 4
39894: PPUSH
39895: LD_INT 20
39897: PPUSH
39898: CALL 31882 0 4
39902: PUSH
39903: LD_INT 4
39905: ARRAY
39906: IFFALSE 39910
// exit ;
39908: GO 39959
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39910: LD_VAR 0 2
39914: PUSH
39915: LD_INT 29
39917: PUSH
39918: LD_INT 30
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: IN
39925: PUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: LD_VAR 0 4
39935: PPUSH
39936: LD_VAR 0 9
39940: PPUSH
39941: CALL_OW 440
39945: NOT
39946: AND
39947: IFFALSE 39951
// exit ;
39949: GO 39959
// result := true ;
39951: LD_ADDR_VAR 0 6
39955: PUSH
39956: LD_INT 1
39958: ST_TO_ADDR
// end ;
39959: LD_VAR 0 6
39963: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39964: LD_INT 0
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
// result = [ ] ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: EMPTY
40030: ST_TO_ADDR
// temp_list = [ ] ;
40031: LD_ADDR_VAR 0 9
40035: PUSH
40036: EMPTY
40037: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40038: LD_VAR 0 4
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: LD_INT 4
40057: PUSH
40058: LD_INT 5
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: IN
40069: NOT
40070: PUSH
40071: LD_VAR 0 1
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: IN
40086: PUSH
40087: LD_VAR 0 5
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: IN
40106: NOT
40107: AND
40108: OR
40109: IFFALSE 40113
// exit ;
40111: GO 58504
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40113: LD_VAR 0 1
40117: PUSH
40118: LD_INT 6
40120: PUSH
40121: LD_INT 7
40123: PUSH
40124: LD_INT 8
40126: PUSH
40127: LD_INT 13
40129: PUSH
40130: LD_INT 12
40132: PUSH
40133: LD_INT 15
40135: PUSH
40136: LD_INT 11
40138: PUSH
40139: LD_INT 14
40141: PUSH
40142: LD_INT 10
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: IN
40156: IFFALSE 40166
// btype = b_lab ;
40158: LD_ADDR_VAR 0 1
40162: PUSH
40163: LD_INT 6
40165: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40166: LD_VAR 0 6
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: IN
40185: NOT
40186: PUSH
40187: LD_VAR 0 1
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 6
40206: PUSH
40207: LD_INT 36
40209: PUSH
40210: LD_INT 4
40212: PUSH
40213: LD_INT 5
40215: PUSH
40216: LD_INT 31
40218: PUSH
40219: LD_INT 32
40221: PUSH
40222: LD_INT 33
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: IN
40238: NOT
40239: PUSH
40240: LD_VAR 0 6
40244: PUSH
40245: LD_INT 1
40247: EQUAL
40248: AND
40249: OR
40250: PUSH
40251: LD_VAR 0 1
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: IN
40266: NOT
40267: PUSH
40268: LD_VAR 0 6
40272: PUSH
40273: LD_INT 2
40275: EQUAL
40276: AND
40277: OR
40278: IFFALSE 40288
// mode = 0 ;
40280: LD_ADDR_VAR 0 6
40284: PUSH
40285: LD_INT 0
40287: ST_TO_ADDR
// case mode of 0 :
40288: LD_VAR 0 6
40292: PUSH
40293: LD_INT 0
40295: DOUBLE
40296: EQUAL
40297: IFTRUE 40301
40299: GO 51754
40301: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40302: LD_ADDR_VAR 0 11
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40495: LD_ADDR_VAR 0 12
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40691: LD_ADDR_VAR 0 13
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: LD_INT 3
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40890: LD_ADDR_VAR 0 14
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41086: LD_ADDR_VAR 0 15
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41279: LD_ADDR_VAR 0 16
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41472: LD_ADDR_VAR 0 17
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 2
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41702: LD_ADDR_VAR 0 18
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41932: LD_ADDR_VAR 0 19
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42162: LD_ADDR_VAR 0 20
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42392: LD_ADDR_VAR 0 21
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42622: LD_ADDR_VAR 0 22
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 23
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: LD_INT 3
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43132: LD_ADDR_VAR 0 24
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43408: LD_ADDR_VAR 0 25
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 3
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43682: LD_ADDR_VAR 0 26
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43958: LD_ADDR_VAR 0 27
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44238: LD_ADDR_VAR 0 28
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44520: LD_ADDR_VAR 0 29
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 3
44764: NEG
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44799: LD_ADDR_VAR 0 30
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45077: LD_ADDR_VAR 0 31
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 3
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45355: LD_ADDR_VAR 0 32
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 3
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45633: LD_ADDR_VAR 0 33
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 3
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45912: LD_ADDR_VAR 0 34
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46192: LD_ADDR_VAR 0 35
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46304: LD_ADDR_VAR 0 36
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46416: LD_ADDR_VAR 0 37
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46528: LD_ADDR_VAR 0 38
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46640: LD_ADDR_VAR 0 39
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46752: LD_ADDR_VAR 0 40
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46864: LD_ADDR_VAR 0 41
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47214: LD_ADDR_VAR 0 42
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47564: LD_ADDR_VAR 0 43
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47912: LD_ADDR_VAR 0 44
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48262: LD_ADDR_VAR 0 45
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48612: LD_ADDR_VAR 0 46
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 3
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48960: LD_ADDR_VAR 0 47
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49111: LD_ADDR_VAR 0 48
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49258: LD_ADDR_VAR 0 49
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49402: LD_ADDR_VAR 0 50
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49546: LD_ADDR_VAR 0 51
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49693: LD_ADDR_VAR 0 52
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49844: LD_ADDR_VAR 0 53
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50074: LD_ADDR_VAR 0 54
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50304: LD_ADDR_VAR 0 55
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50534: LD_ADDR_VAR 0 56
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50764: LD_ADDR_VAR 0 57
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50994: LD_ADDR_VAR 0 58
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51224: LD_ADDR_VAR 0 59
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51312: LD_ADDR_VAR 0 60
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51400: LD_ADDR_VAR 0 61
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51488: LD_ADDR_VAR 0 62
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51576: LD_ADDR_VAR 0 63
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51664: LD_ADDR_VAR 0 64
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// end ; 1 :
51752: GO 57649
51754: LD_INT 1
51756: DOUBLE
51757: EQUAL
51758: IFTRUE 51762
51760: GO 54385
51762: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51763: LD_ADDR_VAR 0 11
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: LIST
51806: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51807: LD_ADDR_VAR 0 12
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51848: LD_ADDR_VAR 0 13
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: LIST
51887: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51888: LD_ADDR_VAR 0 14
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51929: LD_ADDR_VAR 0 15
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51973: LD_ADDR_VAR 0 16
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52019: LD_ADDR_VAR 0 17
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52063: LD_ADDR_VAR 0 18
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52104: LD_ADDR_VAR 0 19
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52144: LD_ADDR_VAR 0 20
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52185: LD_ADDR_VAR 0 21
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52229: LD_ADDR_VAR 0 22
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52275: LD_ADDR_VAR 0 23
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52319: LD_ADDR_VAR 0 24
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52360: LD_ADDR_VAR 0 25
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 4
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52400: LD_ADDR_VAR 0 26
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52441: LD_ADDR_VAR 0 27
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 4
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52485: LD_ADDR_VAR 0 28
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 4
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52531: LD_ADDR_VAR 0 29
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 4
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 4
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 5
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 5
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 4
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 6
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 6
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 5
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52686: LD_ADDR_VAR 0 30
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 4
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 5
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 5
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 6
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 6
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52829: LD_ADDR_VAR 0 31
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 4
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 4
52876: PUSH
52877: LD_INT 4
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 4
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 5
52896: PUSH
52897: LD_INT 4
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 4
52916: PUSH
52917: LD_INT 5
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 6
52926: PUSH
52927: LD_INT 5
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 6
52936: PUSH
52937: LD_INT 6
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 5
52946: PUSH
52947: LD_INT 6
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52968: LD_ADDR_VAR 0 32
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 4
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 5
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 6
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 6
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53111: LD_ADDR_VAR 0 33
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 4
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 5
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 5
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 5
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 6
53231: NEG
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 6
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53266: LD_ADDR_VAR 0 34
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: LD_INT 4
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 4
53321: NEG
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 4
53333: NEG
53334: PUSH
53335: LD_INT 4
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: LD_INT 5
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 5
53357: NEG
53358: PUSH
53359: LD_INT 4
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 5
53369: NEG
53370: PUSH
53371: LD_INT 5
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 5
53381: NEG
53382: PUSH
53383: LD_INT 6
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 6
53393: NEG
53394: PUSH
53395: LD_INT 5
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 6
53405: NEG
53406: PUSH
53407: LD_INT 6
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53429: LD_ADDR_VAR 0 41
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53473: LD_ADDR_VAR 0 42
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53514: LD_ADDR_VAR 0 43
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53554: LD_ADDR_VAR 0 44
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53595: LD_ADDR_VAR 0 45
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53639: LD_ADDR_VAR 0 46
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53685: LD_ADDR_VAR 0 47
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53718: LD_ADDR_VAR 0 48
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53749: LD_ADDR_VAR 0 49
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53778: LD_ADDR_VAR 0 50
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53807: LD_ADDR_VAR 0 51
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53838: LD_ADDR_VAR 0 52
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53871: LD_ADDR_VAR 0 53
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53915: LD_ADDR_VAR 0 54
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 3
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 3
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53956: LD_ADDR_VAR 0 55
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53996: LD_ADDR_VAR 0 56
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54037: LD_ADDR_VAR 0 57
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54081: LD_ADDR_VAR 0 58
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 3
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54127: LD_ADDR_VAR 0 59
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54171: LD_ADDR_VAR 0 60
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54212: LD_ADDR_VAR 0 61
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: LIST
54251: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54252: LD_ADDR_VAR 0 62
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54293: LD_ADDR_VAR 0 63
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54337: LD_ADDR_VAR 0 64
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: ST_TO_ADDR
// end ; 2 :
54383: GO 57649
54385: LD_INT 2
54387: DOUBLE
54388: EQUAL
54389: IFTRUE 54393
54391: GO 57648
54393: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54394: LD_ADDR_VAR 0 29
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 5
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 5
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 5
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 3
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: LD_INT 4
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 4
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 4
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 4
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 5
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 4
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 5
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 4
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 4
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 4
54779: NEG
54780: PUSH
54781: LD_INT 4
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 4
54791: NEG
54792: PUSH
54793: LD_INT 5
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 5
54839: NEG
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 5
54851: NEG
54852: PUSH
54853: LD_INT 5
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: LD_INT 5
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54932: LD_ADDR_VAR 0 30
54936: PUSH
54937: LD_INT 4
54939: PUSH
54940: LD_INT 4
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 5
54959: PUSH
54960: LD_INT 4
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 5
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 4
54979: PUSH
54980: LD_INT 5
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 4
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 5
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 5
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 3
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 4
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 4
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 4
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 5
55178: NEG
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 5
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 5
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: LD_INT 4
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 4
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: NEG
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 4
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 5
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 4
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 5
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 5
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55479: LD_ADDR_VAR 0 31
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 4
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 5
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 5
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 5
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 4
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 4
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 4
55681: NEG
55682: PUSH
55683: LD_INT 4
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 4
55693: NEG
55694: PUSH
55695: LD_INT 5
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: LD_INT 4
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 5
55741: NEG
55742: PUSH
55743: LD_INT 4
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 5
55753: NEG
55754: PUSH
55755: LD_INT 5
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 5
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 5
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 4
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 3
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 4
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 4
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 5
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 5
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56029: LD_ADDR_VAR 0 32
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 4
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 4
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 5
56092: NEG
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 5
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 4
56210: NEG
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 4
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 5
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 4
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 4
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 5
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 4
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 4
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 5
56461: PUSH
56462: LD_INT 4
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 5
56471: PUSH
56472: LD_INT 5
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: LD_INT 5
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: LD_INT 5
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56576: LD_ADDR_VAR 0 33
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: LD_INT 4
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 4
56595: NEG
56596: PUSH
56597: LD_INT 5
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: LD_INT 4
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 5
56643: NEG
56644: PUSH
56645: LD_INT 4
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 5
56655: NEG
56656: PUSH
56657: LD_INT 5
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 5
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 5
56679: NEG
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 4
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 4
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 5
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 5
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 5
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 4
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 5
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57114: LD_ADDR_VAR 0 34
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 5
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 4
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 3
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 4
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 5
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: LD_INT 5
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 4
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 5
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 5
57346: PUSH
57347: LD_INT 5
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 5
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: LD_INT 5
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 5
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 5
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 5
57578: NEG
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// end ; end ;
57646: GO 57649
57648: POP
// case btype of b_depot , b_warehouse :
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 0
57656: DOUBLE
57657: EQUAL
57658: IFTRUE 57668
57660: LD_INT 1
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57668
57666: GO 57869
57668: POP
// case nation of nation_american :
57669: LD_VAR 0 5
57673: PUSH
57674: LD_INT 1
57676: DOUBLE
57677: EQUAL
57678: IFTRUE 57682
57680: GO 57738
57682: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57683: LD_ADDR_VAR 0 9
57687: PUSH
57688: LD_VAR 0 11
57692: PUSH
57693: LD_VAR 0 12
57697: PUSH
57698: LD_VAR 0 13
57702: PUSH
57703: LD_VAR 0 14
57707: PUSH
57708: LD_VAR 0 15
57712: PUSH
57713: LD_VAR 0 16
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: PUSH
57726: LD_VAR 0 4
57730: PUSH
57731: LD_INT 1
57733: PLUS
57734: ARRAY
57735: ST_TO_ADDR
57736: GO 57867
57738: LD_INT 2
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57746
57744: GO 57802
57746: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57747: LD_ADDR_VAR 0 9
57751: PUSH
57752: LD_VAR 0 17
57756: PUSH
57757: LD_VAR 0 18
57761: PUSH
57762: LD_VAR 0 19
57766: PUSH
57767: LD_VAR 0 20
57771: PUSH
57772: LD_VAR 0 21
57776: PUSH
57777: LD_VAR 0 22
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: LD_VAR 0 4
57794: PUSH
57795: LD_INT 1
57797: PLUS
57798: ARRAY
57799: ST_TO_ADDR
57800: GO 57867
57802: LD_INT 3
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57810
57808: GO 57866
57810: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57811: LD_ADDR_VAR 0 9
57815: PUSH
57816: LD_VAR 0 23
57820: PUSH
57821: LD_VAR 0 24
57825: PUSH
57826: LD_VAR 0 25
57830: PUSH
57831: LD_VAR 0 26
57835: PUSH
57836: LD_VAR 0 27
57840: PUSH
57841: LD_VAR 0 28
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: PUSH
57854: LD_VAR 0 4
57858: PUSH
57859: LD_INT 1
57861: PLUS
57862: ARRAY
57863: ST_TO_ADDR
57864: GO 57867
57866: POP
57867: GO 58422
57869: LD_INT 2
57871: DOUBLE
57872: EQUAL
57873: IFTRUE 57883
57875: LD_INT 3
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 57939
57883: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57884: LD_ADDR_VAR 0 9
57888: PUSH
57889: LD_VAR 0 29
57893: PUSH
57894: LD_VAR 0 30
57898: PUSH
57899: LD_VAR 0 31
57903: PUSH
57904: LD_VAR 0 32
57908: PUSH
57909: LD_VAR 0 33
57913: PUSH
57914: LD_VAR 0 34
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: PUSH
57927: LD_VAR 0 4
57931: PUSH
57932: LD_INT 1
57934: PLUS
57935: ARRAY
57936: ST_TO_ADDR
57937: GO 58422
57939: LD_INT 16
57941: DOUBLE
57942: EQUAL
57943: IFTRUE 58001
57945: LD_INT 17
57947: DOUBLE
57948: EQUAL
57949: IFTRUE 58001
57951: LD_INT 18
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 58001
57957: LD_INT 19
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 58001
57963: LD_INT 22
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 58001
57969: LD_INT 20
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 58001
57975: LD_INT 21
57977: DOUBLE
57978: EQUAL
57979: IFTRUE 58001
57981: LD_INT 23
57983: DOUBLE
57984: EQUAL
57985: IFTRUE 58001
57987: LD_INT 24
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 58001
57993: LD_INT 25
57995: DOUBLE
57996: EQUAL
57997: IFTRUE 58001
57999: GO 58057
58001: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58002: LD_ADDR_VAR 0 9
58006: PUSH
58007: LD_VAR 0 35
58011: PUSH
58012: LD_VAR 0 36
58016: PUSH
58017: LD_VAR 0 37
58021: PUSH
58022: LD_VAR 0 38
58026: PUSH
58027: LD_VAR 0 39
58031: PUSH
58032: LD_VAR 0 40
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: LD_VAR 0 4
58049: PUSH
58050: LD_INT 1
58052: PLUS
58053: ARRAY
58054: ST_TO_ADDR
58055: GO 58422
58057: LD_INT 6
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58113
58063: LD_INT 7
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58113
58069: LD_INT 8
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58113
58075: LD_INT 13
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58113
58081: LD_INT 12
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58113
58087: LD_INT 15
58089: DOUBLE
58090: EQUAL
58091: IFTRUE 58113
58093: LD_INT 11
58095: DOUBLE
58096: EQUAL
58097: IFTRUE 58113
58099: LD_INT 14
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58113
58105: LD_INT 10
58107: DOUBLE
58108: EQUAL
58109: IFTRUE 58113
58111: GO 58169
58113: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58114: LD_ADDR_VAR 0 9
58118: PUSH
58119: LD_VAR 0 41
58123: PUSH
58124: LD_VAR 0 42
58128: PUSH
58129: LD_VAR 0 43
58133: PUSH
58134: LD_VAR 0 44
58138: PUSH
58139: LD_VAR 0 45
58143: PUSH
58144: LD_VAR 0 46
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: PUSH
58157: LD_VAR 0 4
58161: PUSH
58162: LD_INT 1
58164: PLUS
58165: ARRAY
58166: ST_TO_ADDR
58167: GO 58422
58169: LD_INT 36
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58177
58175: GO 58233
58177: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58178: LD_ADDR_VAR 0 9
58182: PUSH
58183: LD_VAR 0 47
58187: PUSH
58188: LD_VAR 0 48
58192: PUSH
58193: LD_VAR 0 49
58197: PUSH
58198: LD_VAR 0 50
58202: PUSH
58203: LD_VAR 0 51
58207: PUSH
58208: LD_VAR 0 52
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: PUSH
58221: LD_VAR 0 4
58225: PUSH
58226: LD_INT 1
58228: PLUS
58229: ARRAY
58230: ST_TO_ADDR
58231: GO 58422
58233: LD_INT 4
58235: DOUBLE
58236: EQUAL
58237: IFTRUE 58259
58239: LD_INT 5
58241: DOUBLE
58242: EQUAL
58243: IFTRUE 58259
58245: LD_INT 34
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58259
58251: LD_INT 37
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58259
58257: GO 58315
58259: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58260: LD_ADDR_VAR 0 9
58264: PUSH
58265: LD_VAR 0 53
58269: PUSH
58270: LD_VAR 0 54
58274: PUSH
58275: LD_VAR 0 55
58279: PUSH
58280: LD_VAR 0 56
58284: PUSH
58285: LD_VAR 0 57
58289: PUSH
58290: LD_VAR 0 58
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: PUSH
58303: LD_VAR 0 4
58307: PUSH
58308: LD_INT 1
58310: PLUS
58311: ARRAY
58312: ST_TO_ADDR
58313: GO 58422
58315: LD_INT 31
58317: DOUBLE
58318: EQUAL
58319: IFTRUE 58365
58321: LD_INT 32
58323: DOUBLE
58324: EQUAL
58325: IFTRUE 58365
58327: LD_INT 33
58329: DOUBLE
58330: EQUAL
58331: IFTRUE 58365
58333: LD_INT 27
58335: DOUBLE
58336: EQUAL
58337: IFTRUE 58365
58339: LD_INT 26
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58365
58345: LD_INT 28
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58365
58351: LD_INT 29
58353: DOUBLE
58354: EQUAL
58355: IFTRUE 58365
58357: LD_INT 30
58359: DOUBLE
58360: EQUAL
58361: IFTRUE 58365
58363: GO 58421
58365: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58366: LD_ADDR_VAR 0 9
58370: PUSH
58371: LD_VAR 0 59
58375: PUSH
58376: LD_VAR 0 60
58380: PUSH
58381: LD_VAR 0 61
58385: PUSH
58386: LD_VAR 0 62
58390: PUSH
58391: LD_VAR 0 63
58395: PUSH
58396: LD_VAR 0 64
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: PUSH
58409: LD_VAR 0 4
58413: PUSH
58414: LD_INT 1
58416: PLUS
58417: ARRAY
58418: ST_TO_ADDR
58419: GO 58422
58421: POP
// temp_list2 = [ ] ;
58422: LD_ADDR_VAR 0 10
58426: PUSH
58427: EMPTY
58428: ST_TO_ADDR
// for i in temp_list do
58429: LD_ADDR_VAR 0 8
58433: PUSH
58434: LD_VAR 0 9
58438: PUSH
58439: FOR_IN
58440: IFFALSE 58492
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58442: LD_ADDR_VAR 0 10
58446: PUSH
58447: LD_VAR 0 10
58451: PUSH
58452: LD_VAR 0 8
58456: PUSH
58457: LD_INT 1
58459: ARRAY
58460: PUSH
58461: LD_VAR 0 2
58465: PLUS
58466: PUSH
58467: LD_VAR 0 8
58471: PUSH
58472: LD_INT 2
58474: ARRAY
58475: PUSH
58476: LD_VAR 0 3
58480: PLUS
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: ADD
58489: ST_TO_ADDR
58490: GO 58439
58492: POP
58493: POP
// result = temp_list2 ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: LD_VAR 0 10
58503: ST_TO_ADDR
// end ;
58504: LD_VAR 0 7
58508: RET
// export function EnemyInRange ( unit , dist ) ; begin
58509: LD_INT 0
58511: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58512: LD_ADDR_VAR 0 3
58516: PUSH
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 255
58526: PPUSH
58527: LD_VAR 0 1
58531: PPUSH
58532: CALL_OW 250
58536: PPUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: CALL_OW 251
58546: PPUSH
58547: LD_VAR 0 2
58551: PPUSH
58552: CALL 31882 0 4
58556: PUSH
58557: LD_INT 4
58559: ARRAY
58560: ST_TO_ADDR
// end ;
58561: LD_VAR 0 3
58565: RET
// export function PlayerSeeMe ( unit ) ; begin
58566: LD_INT 0
58568: PPUSH
// result := See ( your_side , unit ) ;
58569: LD_ADDR_VAR 0 2
58573: PUSH
58574: LD_OWVAR 2
58578: PPUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: CALL_OW 292
58588: ST_TO_ADDR
// end ;
58589: LD_VAR 0 2
58593: RET
// export function ReverseDir ( unit ) ; begin
58594: LD_INT 0
58596: PPUSH
// if not unit then
58597: LD_VAR 0 1
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 58629
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58606: LD_ADDR_VAR 0 2
58610: PUSH
58611: LD_VAR 0 1
58615: PPUSH
58616: CALL_OW 254
58620: PUSH
58621: LD_INT 3
58623: PLUS
58624: PUSH
58625: LD_INT 6
58627: MOD
58628: ST_TO_ADDR
// end ;
58629: LD_VAR 0 2
58633: RET
// export function ReverseArray ( array ) ; var i ; begin
58634: LD_INT 0
58636: PPUSH
58637: PPUSH
// if not array then
58638: LD_VAR 0 1
58642: NOT
58643: IFFALSE 58647
// exit ;
58645: GO 58702
// result := [ ] ;
58647: LD_ADDR_VAR 0 2
58651: PUSH
58652: EMPTY
58653: ST_TO_ADDR
// for i := array downto 1 do
58654: LD_ADDR_VAR 0 3
58658: PUSH
58659: DOUBLE
58660: LD_VAR 0 1
58664: INC
58665: ST_TO_ADDR
58666: LD_INT 1
58668: PUSH
58669: FOR_DOWNTO
58670: IFFALSE 58700
// result := Join ( result , array [ i ] ) ;
58672: LD_ADDR_VAR 0 2
58676: PUSH
58677: LD_VAR 0 2
58681: PPUSH
58682: LD_VAR 0 1
58686: PUSH
58687: LD_VAR 0 3
58691: ARRAY
58692: PPUSH
58693: CALL 63358 0 2
58697: ST_TO_ADDR
58698: GO 58669
58700: POP
58701: POP
// end ;
58702: LD_VAR 0 2
58706: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58707: LD_INT 0
58709: PPUSH
58710: PPUSH
58711: PPUSH
58712: PPUSH
58713: PPUSH
58714: PPUSH
// if not unit or not hexes then
58715: LD_VAR 0 1
58719: NOT
58720: PUSH
58721: LD_VAR 0 2
58725: NOT
58726: OR
58727: IFFALSE 58731
// exit ;
58729: GO 58854
// dist := 9999 ;
58731: LD_ADDR_VAR 0 5
58735: PUSH
58736: LD_INT 9999
58738: ST_TO_ADDR
// for i = 1 to hexes do
58739: LD_ADDR_VAR 0 4
58743: PUSH
58744: DOUBLE
58745: LD_INT 1
58747: DEC
58748: ST_TO_ADDR
58749: LD_VAR 0 2
58753: PUSH
58754: FOR_TO
58755: IFFALSE 58842
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58757: LD_ADDR_VAR 0 6
58761: PUSH
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_VAR 0 2
58771: PUSH
58772: LD_VAR 0 4
58776: ARRAY
58777: PUSH
58778: LD_INT 1
58780: ARRAY
58781: PPUSH
58782: LD_VAR 0 2
58786: PUSH
58787: LD_VAR 0 4
58791: ARRAY
58792: PUSH
58793: LD_INT 2
58795: ARRAY
58796: PPUSH
58797: CALL_OW 297
58801: ST_TO_ADDR
// if tdist < dist then
58802: LD_VAR 0 6
58806: PUSH
58807: LD_VAR 0 5
58811: LESS
58812: IFFALSE 58840
// begin hex := hexes [ i ] ;
58814: LD_ADDR_VAR 0 8
58818: PUSH
58819: LD_VAR 0 2
58823: PUSH
58824: LD_VAR 0 4
58828: ARRAY
58829: ST_TO_ADDR
// dist := tdist ;
58830: LD_ADDR_VAR 0 5
58834: PUSH
58835: LD_VAR 0 6
58839: ST_TO_ADDR
// end ; end ;
58840: GO 58754
58842: POP
58843: POP
// result := hex ;
58844: LD_ADDR_VAR 0 3
58848: PUSH
58849: LD_VAR 0 8
58853: ST_TO_ADDR
// end ;
58854: LD_VAR 0 3
58858: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58859: LD_INT 0
58861: PPUSH
58862: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58863: LD_VAR 0 1
58867: NOT
58868: PUSH
58869: LD_VAR 0 1
58873: PUSH
58874: LD_INT 21
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 23
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PPUSH
58898: CALL_OW 69
58902: IN
58903: NOT
58904: OR
58905: IFFALSE 58909
// exit ;
58907: GO 58956
// for i = 1 to 3 do
58909: LD_ADDR_VAR 0 3
58913: PUSH
58914: DOUBLE
58915: LD_INT 1
58917: DEC
58918: ST_TO_ADDR
58919: LD_INT 3
58921: PUSH
58922: FOR_TO
58923: IFFALSE 58954
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 250
58934: PPUSH
58935: LD_VAR 0 1
58939: PPUSH
58940: CALL_OW 251
58944: PPUSH
58945: LD_INT 1
58947: PPUSH
58948: CALL_OW 453
58952: GO 58922
58954: POP
58955: POP
// end ;
58956: LD_VAR 0 2
58960: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58961: LD_INT 0
58963: PPUSH
58964: PPUSH
58965: PPUSH
58966: PPUSH
58967: PPUSH
58968: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58969: LD_VAR 0 1
58973: NOT
58974: PUSH
58975: LD_VAR 0 2
58979: NOT
58980: OR
58981: PUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 314
58991: OR
58992: IFFALSE 58996
// exit ;
58994: GO 59463
// if GetLives ( i ) < 250 then
58996: LD_VAR 0 4
59000: PPUSH
59001: CALL_OW 256
59005: PUSH
59006: LD_INT 250
59008: LESS
59009: IFFALSE 59022
// begin ComAutodestruct ( i ) ;
59011: LD_VAR 0 4
59015: PPUSH
59016: CALL 58859 0 1
// exit ;
59020: GO 59463
// end ; x := GetX ( enemy_unit ) ;
59022: LD_ADDR_VAR 0 7
59026: PUSH
59027: LD_VAR 0 2
59031: PPUSH
59032: CALL_OW 250
59036: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59037: LD_ADDR_VAR 0 8
59041: PUSH
59042: LD_VAR 0 2
59046: PPUSH
59047: CALL_OW 251
59051: ST_TO_ADDR
// if not x or not y then
59052: LD_VAR 0 7
59056: NOT
59057: PUSH
59058: LD_VAR 0 8
59062: NOT
59063: OR
59064: IFFALSE 59068
// exit ;
59066: GO 59463
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59068: LD_ADDR_VAR 0 6
59072: PUSH
59073: LD_VAR 0 7
59077: PPUSH
59078: LD_INT 0
59080: PPUSH
59081: LD_INT 4
59083: PPUSH
59084: CALL_OW 272
59088: PUSH
59089: LD_VAR 0 8
59093: PPUSH
59094: LD_INT 0
59096: PPUSH
59097: LD_INT 4
59099: PPUSH
59100: CALL_OW 273
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_VAR 0 7
59113: PPUSH
59114: LD_INT 1
59116: PPUSH
59117: LD_INT 4
59119: PPUSH
59120: CALL_OW 272
59124: PUSH
59125: LD_VAR 0 8
59129: PPUSH
59130: LD_INT 1
59132: PPUSH
59133: LD_INT 4
59135: PPUSH
59136: CALL_OW 273
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_VAR 0 7
59149: PPUSH
59150: LD_INT 2
59152: PPUSH
59153: LD_INT 4
59155: PPUSH
59156: CALL_OW 272
59160: PUSH
59161: LD_VAR 0 8
59165: PPUSH
59166: LD_INT 2
59168: PPUSH
59169: LD_INT 4
59171: PPUSH
59172: CALL_OW 273
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_VAR 0 7
59185: PPUSH
59186: LD_INT 3
59188: PPUSH
59189: LD_INT 4
59191: PPUSH
59192: CALL_OW 272
59196: PUSH
59197: LD_VAR 0 8
59201: PPUSH
59202: LD_INT 3
59204: PPUSH
59205: LD_INT 4
59207: PPUSH
59208: CALL_OW 273
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_VAR 0 7
59221: PPUSH
59222: LD_INT 4
59224: PPUSH
59225: LD_INT 4
59227: PPUSH
59228: CALL_OW 272
59232: PUSH
59233: LD_VAR 0 8
59237: PPUSH
59238: LD_INT 4
59240: PPUSH
59241: LD_INT 4
59243: PPUSH
59244: CALL_OW 273
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 7
59257: PPUSH
59258: LD_INT 5
59260: PPUSH
59261: LD_INT 4
59263: PPUSH
59264: CALL_OW 272
59268: PUSH
59269: LD_VAR 0 8
59273: PPUSH
59274: LD_INT 5
59276: PPUSH
59277: LD_INT 4
59279: PPUSH
59280: CALL_OW 273
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// for i = tmp downto 1 do
59297: LD_ADDR_VAR 0 4
59301: PUSH
59302: DOUBLE
59303: LD_VAR 0 6
59307: INC
59308: ST_TO_ADDR
59309: LD_INT 1
59311: PUSH
59312: FOR_DOWNTO
59313: IFFALSE 59414
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59315: LD_VAR 0 6
59319: PUSH
59320: LD_VAR 0 4
59324: ARRAY
59325: PUSH
59326: LD_INT 1
59328: ARRAY
59329: PPUSH
59330: LD_VAR 0 6
59334: PUSH
59335: LD_VAR 0 4
59339: ARRAY
59340: PUSH
59341: LD_INT 2
59343: ARRAY
59344: PPUSH
59345: CALL_OW 488
59349: NOT
59350: PUSH
59351: LD_VAR 0 6
59355: PUSH
59356: LD_VAR 0 4
59360: ARRAY
59361: PUSH
59362: LD_INT 1
59364: ARRAY
59365: PPUSH
59366: LD_VAR 0 6
59370: PUSH
59371: LD_VAR 0 4
59375: ARRAY
59376: PUSH
59377: LD_INT 2
59379: ARRAY
59380: PPUSH
59381: CALL_OW 428
59385: PUSH
59386: LD_INT 0
59388: NONEQUAL
59389: OR
59390: IFFALSE 59412
// tmp := Delete ( tmp , i ) ;
59392: LD_ADDR_VAR 0 6
59396: PUSH
59397: LD_VAR 0 6
59401: PPUSH
59402: LD_VAR 0 4
59406: PPUSH
59407: CALL_OW 3
59411: ST_TO_ADDR
59412: GO 59312
59414: POP
59415: POP
// j := GetClosestHex ( unit , tmp ) ;
59416: LD_ADDR_VAR 0 5
59420: PUSH
59421: LD_VAR 0 1
59425: PPUSH
59426: LD_VAR 0 6
59430: PPUSH
59431: CALL 58707 0 2
59435: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59436: LD_VAR 0 1
59440: PPUSH
59441: LD_VAR 0 5
59445: PUSH
59446: LD_INT 1
59448: ARRAY
59449: PPUSH
59450: LD_VAR 0 5
59454: PUSH
59455: LD_INT 2
59457: ARRAY
59458: PPUSH
59459: CALL_OW 111
// end ;
59463: LD_VAR 0 3
59467: RET
// export function PrepareApemanSoldier ( ) ; begin
59468: LD_INT 0
59470: PPUSH
// uc_nation := 0 ;
59471: LD_ADDR_OWVAR 21
59475: PUSH
59476: LD_INT 0
59478: ST_TO_ADDR
// hc_sex := sex_male ;
59479: LD_ADDR_OWVAR 27
59483: PUSH
59484: LD_INT 1
59486: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59487: LD_ADDR_OWVAR 28
59491: PUSH
59492: LD_INT 15
59494: ST_TO_ADDR
// hc_gallery :=  ;
59495: LD_ADDR_OWVAR 33
59499: PUSH
59500: LD_STRING 
59502: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59503: LD_ADDR_OWVAR 31
59507: PUSH
59508: LD_INT 0
59510: PPUSH
59511: LD_INT 3
59513: PPUSH
59514: CALL_OW 12
59518: PUSH
59519: LD_INT 0
59521: PPUSH
59522: LD_INT 3
59524: PPUSH
59525: CALL_OW 12
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// end ;
59542: LD_VAR 0 1
59546: RET
// export function PrepareApemanEngineer ( ) ; begin
59547: LD_INT 0
59549: PPUSH
// uc_nation := 0 ;
59550: LD_ADDR_OWVAR 21
59554: PUSH
59555: LD_INT 0
59557: ST_TO_ADDR
// hc_sex := sex_male ;
59558: LD_ADDR_OWVAR 27
59562: PUSH
59563: LD_INT 1
59565: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59566: LD_ADDR_OWVAR 28
59570: PUSH
59571: LD_INT 16
59573: ST_TO_ADDR
// hc_gallery :=  ;
59574: LD_ADDR_OWVAR 33
59578: PUSH
59579: LD_STRING 
59581: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59582: LD_ADDR_OWVAR 31
59586: PUSH
59587: LD_INT 0
59589: PPUSH
59590: LD_INT 3
59592: PPUSH
59593: CALL_OW 12
59597: PUSH
59598: LD_INT 0
59600: PPUSH
59601: LD_INT 3
59603: PPUSH
59604: CALL_OW 12
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 1
59625: RET
// export function PrepareApeman ( agressivity ) ; begin
59626: LD_INT 0
59628: PPUSH
// uc_side := 0 ;
59629: LD_ADDR_OWVAR 20
59633: PUSH
59634: LD_INT 0
59636: ST_TO_ADDR
// uc_nation := 0 ;
59637: LD_ADDR_OWVAR 21
59641: PUSH
59642: LD_INT 0
59644: ST_TO_ADDR
// hc_sex := sex_male ;
59645: LD_ADDR_OWVAR 27
59649: PUSH
59650: LD_INT 1
59652: ST_TO_ADDR
// hc_class := class_apeman ;
59653: LD_ADDR_OWVAR 28
59657: PUSH
59658: LD_INT 12
59660: ST_TO_ADDR
// hc_gallery :=  ;
59661: LD_ADDR_OWVAR 33
59665: PUSH
59666: LD_STRING 
59668: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59669: LD_ADDR_OWVAR 35
59673: PUSH
59674: LD_VAR 0 1
59678: NEG
59679: PPUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 12
59689: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59690: LD_ADDR_OWVAR 31
59694: PUSH
59695: LD_INT 0
59697: PPUSH
59698: LD_INT 3
59700: PPUSH
59701: CALL_OW 12
59705: PUSH
59706: LD_INT 0
59708: PPUSH
59709: LD_INT 3
59711: PPUSH
59712: CALL_OW 12
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// end ;
59729: LD_VAR 0 2
59733: RET
// export function PrepareTiger ( agressivity ) ; begin
59734: LD_INT 0
59736: PPUSH
// uc_side := 0 ;
59737: LD_ADDR_OWVAR 20
59741: PUSH
59742: LD_INT 0
59744: ST_TO_ADDR
// uc_nation := 0 ;
59745: LD_ADDR_OWVAR 21
59749: PUSH
59750: LD_INT 0
59752: ST_TO_ADDR
// hc_class := class_tiger ;
59753: LD_ADDR_OWVAR 28
59757: PUSH
59758: LD_INT 14
59760: ST_TO_ADDR
// hc_gallery :=  ;
59761: LD_ADDR_OWVAR 33
59765: PUSH
59766: LD_STRING 
59768: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59769: LD_ADDR_OWVAR 35
59773: PUSH
59774: LD_VAR 0 1
59778: NEG
59779: PPUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 12
59789: ST_TO_ADDR
// end ;
59790: LD_VAR 0 2
59794: RET
// export function PrepareEnchidna ( ) ; begin
59795: LD_INT 0
59797: PPUSH
// uc_side := 0 ;
59798: LD_ADDR_OWVAR 20
59802: PUSH
59803: LD_INT 0
59805: ST_TO_ADDR
// uc_nation := 0 ;
59806: LD_ADDR_OWVAR 21
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// hc_class := class_baggie ;
59814: LD_ADDR_OWVAR 28
59818: PUSH
59819: LD_INT 13
59821: ST_TO_ADDR
// hc_gallery :=  ;
59822: LD_ADDR_OWVAR 33
59826: PUSH
59827: LD_STRING 
59829: ST_TO_ADDR
// end ;
59830: LD_VAR 0 1
59834: RET
// export function PrepareFrog ( ) ; begin
59835: LD_INT 0
59837: PPUSH
// uc_side := 0 ;
59838: LD_ADDR_OWVAR 20
59842: PUSH
59843: LD_INT 0
59845: ST_TO_ADDR
// uc_nation := 0 ;
59846: LD_ADDR_OWVAR 21
59850: PUSH
59851: LD_INT 0
59853: ST_TO_ADDR
// hc_class := class_frog ;
59854: LD_ADDR_OWVAR 28
59858: PUSH
59859: LD_INT 19
59861: ST_TO_ADDR
// hc_gallery :=  ;
59862: LD_ADDR_OWVAR 33
59866: PUSH
59867: LD_STRING 
59869: ST_TO_ADDR
// end ;
59870: LD_VAR 0 1
59874: RET
// export function PrepareFish ( ) ; begin
59875: LD_INT 0
59877: PPUSH
// uc_side := 0 ;
59878: LD_ADDR_OWVAR 20
59882: PUSH
59883: LD_INT 0
59885: ST_TO_ADDR
// uc_nation := 0 ;
59886: LD_ADDR_OWVAR 21
59890: PUSH
59891: LD_INT 0
59893: ST_TO_ADDR
// hc_class := class_fish ;
59894: LD_ADDR_OWVAR 28
59898: PUSH
59899: LD_INT 20
59901: ST_TO_ADDR
// hc_gallery :=  ;
59902: LD_ADDR_OWVAR 33
59906: PUSH
59907: LD_STRING 
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 1
59914: RET
// export function PrepareBird ( ) ; begin
59915: LD_INT 0
59917: PPUSH
// uc_side := 0 ;
59918: LD_ADDR_OWVAR 20
59922: PUSH
59923: LD_INT 0
59925: ST_TO_ADDR
// uc_nation := 0 ;
59926: LD_ADDR_OWVAR 21
59930: PUSH
59931: LD_INT 0
59933: ST_TO_ADDR
// hc_class := class_phororhacos ;
59934: LD_ADDR_OWVAR 28
59938: PUSH
59939: LD_INT 18
59941: ST_TO_ADDR
// hc_gallery :=  ;
59942: LD_ADDR_OWVAR 33
59946: PUSH
59947: LD_STRING 
59949: ST_TO_ADDR
// end ;
59950: LD_VAR 0 1
59954: RET
// export function PrepareHorse ( ) ; begin
59955: LD_INT 0
59957: PPUSH
// uc_side := 0 ;
59958: LD_ADDR_OWVAR 20
59962: PUSH
59963: LD_INT 0
59965: ST_TO_ADDR
// uc_nation := 0 ;
59966: LD_ADDR_OWVAR 21
59970: PUSH
59971: LD_INT 0
59973: ST_TO_ADDR
// hc_class := class_horse ;
59974: LD_ADDR_OWVAR 28
59978: PUSH
59979: LD_INT 21
59981: ST_TO_ADDR
// hc_gallery :=  ;
59982: LD_ADDR_OWVAR 33
59986: PUSH
59987: LD_STRING 
59989: ST_TO_ADDR
// end ;
59990: LD_VAR 0 1
59994: RET
// export function PrepareMastodont ( ) ; begin
59995: LD_INT 0
59997: PPUSH
// uc_side := 0 ;
59998: LD_ADDR_OWVAR 20
60002: PUSH
60003: LD_INT 0
60005: ST_TO_ADDR
// uc_nation := 0 ;
60006: LD_ADDR_OWVAR 21
60010: PUSH
60011: LD_INT 0
60013: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60014: LD_ADDR_OWVAR 37
60018: PUSH
60019: LD_INT 31
60021: ST_TO_ADDR
// vc_control := control_rider ;
60022: LD_ADDR_OWVAR 38
60026: PUSH
60027: LD_INT 4
60029: ST_TO_ADDR
// end ;
60030: LD_VAR 0 1
60034: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60035: LD_INT 0
60037: PPUSH
60038: PPUSH
60039: PPUSH
// uc_side = 0 ;
60040: LD_ADDR_OWVAR 20
60044: PUSH
60045: LD_INT 0
60047: ST_TO_ADDR
// uc_nation = 0 ;
60048: LD_ADDR_OWVAR 21
60052: PUSH
60053: LD_INT 0
60055: ST_TO_ADDR
// InitHc_All ( ) ;
60056: CALL_OW 584
// InitVc ;
60060: CALL_OW 20
// if mastodonts then
60064: LD_VAR 0 6
60068: IFFALSE 60135
// for i = 1 to mastodonts do
60070: LD_ADDR_VAR 0 11
60074: PUSH
60075: DOUBLE
60076: LD_INT 1
60078: DEC
60079: ST_TO_ADDR
60080: LD_VAR 0 6
60084: PUSH
60085: FOR_TO
60086: IFFALSE 60133
// begin vc_chassis := 31 ;
60088: LD_ADDR_OWVAR 37
60092: PUSH
60093: LD_INT 31
60095: ST_TO_ADDR
// vc_control := control_rider ;
60096: LD_ADDR_OWVAR 38
60100: PUSH
60101: LD_INT 4
60103: ST_TO_ADDR
// animal := CreateVehicle ;
60104: LD_ADDR_VAR 0 12
60108: PUSH
60109: CALL_OW 45
60113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60114: LD_VAR 0 12
60118: PPUSH
60119: LD_VAR 0 8
60123: PPUSH
60124: LD_INT 0
60126: PPUSH
60127: CALL 62263 0 3
// end ;
60131: GO 60085
60133: POP
60134: POP
// if horses then
60135: LD_VAR 0 5
60139: IFFALSE 60206
// for i = 1 to horses do
60141: LD_ADDR_VAR 0 11
60145: PUSH
60146: DOUBLE
60147: LD_INT 1
60149: DEC
60150: ST_TO_ADDR
60151: LD_VAR 0 5
60155: PUSH
60156: FOR_TO
60157: IFFALSE 60204
// begin hc_class := 21 ;
60159: LD_ADDR_OWVAR 28
60163: PUSH
60164: LD_INT 21
60166: ST_TO_ADDR
// hc_gallery :=  ;
60167: LD_ADDR_OWVAR 33
60171: PUSH
60172: LD_STRING 
60174: ST_TO_ADDR
// animal := CreateHuman ;
60175: LD_ADDR_VAR 0 12
60179: PUSH
60180: CALL_OW 44
60184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60185: LD_VAR 0 12
60189: PPUSH
60190: LD_VAR 0 8
60194: PPUSH
60195: LD_INT 0
60197: PPUSH
60198: CALL 62263 0 3
// end ;
60202: GO 60156
60204: POP
60205: POP
// if birds then
60206: LD_VAR 0 1
60210: IFFALSE 60277
// for i = 1 to birds do
60212: LD_ADDR_VAR 0 11
60216: PUSH
60217: DOUBLE
60218: LD_INT 1
60220: DEC
60221: ST_TO_ADDR
60222: LD_VAR 0 1
60226: PUSH
60227: FOR_TO
60228: IFFALSE 60275
// begin hc_class := 18 ;
60230: LD_ADDR_OWVAR 28
60234: PUSH
60235: LD_INT 18
60237: ST_TO_ADDR
// hc_gallery =  ;
60238: LD_ADDR_OWVAR 33
60242: PUSH
60243: LD_STRING 
60245: ST_TO_ADDR
// animal := CreateHuman ;
60246: LD_ADDR_VAR 0 12
60250: PUSH
60251: CALL_OW 44
60255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60256: LD_VAR 0 12
60260: PPUSH
60261: LD_VAR 0 8
60265: PPUSH
60266: LD_INT 0
60268: PPUSH
60269: CALL 62263 0 3
// end ;
60273: GO 60227
60275: POP
60276: POP
// if tigers then
60277: LD_VAR 0 2
60281: IFFALSE 60365
// for i = 1 to tigers do
60283: LD_ADDR_VAR 0 11
60287: PUSH
60288: DOUBLE
60289: LD_INT 1
60291: DEC
60292: ST_TO_ADDR
60293: LD_VAR 0 2
60297: PUSH
60298: FOR_TO
60299: IFFALSE 60363
// begin hc_class = class_tiger ;
60301: LD_ADDR_OWVAR 28
60305: PUSH
60306: LD_INT 14
60308: ST_TO_ADDR
// hc_gallery =  ;
60309: LD_ADDR_OWVAR 33
60313: PUSH
60314: LD_STRING 
60316: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60317: LD_ADDR_OWVAR 35
60321: PUSH
60322: LD_INT 7
60324: NEG
60325: PPUSH
60326: LD_INT 7
60328: PPUSH
60329: CALL_OW 12
60333: ST_TO_ADDR
// animal := CreateHuman ;
60334: LD_ADDR_VAR 0 12
60338: PUSH
60339: CALL_OW 44
60343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60344: LD_VAR 0 12
60348: PPUSH
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 0
60356: PPUSH
60357: CALL 62263 0 3
// end ;
60361: GO 60298
60363: POP
60364: POP
// if apemans then
60365: LD_VAR 0 3
60369: IFFALSE 60492
// for i = 1 to apemans do
60371: LD_ADDR_VAR 0 11
60375: PUSH
60376: DOUBLE
60377: LD_INT 1
60379: DEC
60380: ST_TO_ADDR
60381: LD_VAR 0 3
60385: PUSH
60386: FOR_TO
60387: IFFALSE 60490
// begin hc_class = class_apeman ;
60389: LD_ADDR_OWVAR 28
60393: PUSH
60394: LD_INT 12
60396: ST_TO_ADDR
// hc_gallery =  ;
60397: LD_ADDR_OWVAR 33
60401: PUSH
60402: LD_STRING 
60404: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60405: LD_ADDR_OWVAR 35
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PPUSH
60414: LD_INT 2
60416: PPUSH
60417: CALL_OW 12
60421: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60422: LD_ADDR_OWVAR 31
60426: PUSH
60427: LD_INT 1
60429: PPUSH
60430: LD_INT 3
60432: PPUSH
60433: CALL_OW 12
60437: PUSH
60438: LD_INT 1
60440: PPUSH
60441: LD_INT 3
60443: PPUSH
60444: CALL_OW 12
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: ST_TO_ADDR
// animal := CreateHuman ;
60461: LD_ADDR_VAR 0 12
60465: PUSH
60466: CALL_OW 44
60470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60471: LD_VAR 0 12
60475: PPUSH
60476: LD_VAR 0 8
60480: PPUSH
60481: LD_INT 0
60483: PPUSH
60484: CALL 62263 0 3
// end ;
60488: GO 60386
60490: POP
60491: POP
// if enchidnas then
60492: LD_VAR 0 4
60496: IFFALSE 60563
// for i = 1 to enchidnas do
60498: LD_ADDR_VAR 0 11
60502: PUSH
60503: DOUBLE
60504: LD_INT 1
60506: DEC
60507: ST_TO_ADDR
60508: LD_VAR 0 4
60512: PUSH
60513: FOR_TO
60514: IFFALSE 60561
// begin hc_class = 13 ;
60516: LD_ADDR_OWVAR 28
60520: PUSH
60521: LD_INT 13
60523: ST_TO_ADDR
// hc_gallery =  ;
60524: LD_ADDR_OWVAR 33
60528: PUSH
60529: LD_STRING 
60531: ST_TO_ADDR
// animal := CreateHuman ;
60532: LD_ADDR_VAR 0 12
60536: PUSH
60537: CALL_OW 44
60541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60542: LD_VAR 0 12
60546: PPUSH
60547: LD_VAR 0 8
60551: PPUSH
60552: LD_INT 0
60554: PPUSH
60555: CALL 62263 0 3
// end ;
60559: GO 60513
60561: POP
60562: POP
// if fishes then
60563: LD_VAR 0 7
60567: IFFALSE 60634
// for i = 1 to fishes do
60569: LD_ADDR_VAR 0 11
60573: PUSH
60574: DOUBLE
60575: LD_INT 1
60577: DEC
60578: ST_TO_ADDR
60579: LD_VAR 0 7
60583: PUSH
60584: FOR_TO
60585: IFFALSE 60632
// begin hc_class = 20 ;
60587: LD_ADDR_OWVAR 28
60591: PUSH
60592: LD_INT 20
60594: ST_TO_ADDR
// hc_gallery =  ;
60595: LD_ADDR_OWVAR 33
60599: PUSH
60600: LD_STRING 
60602: ST_TO_ADDR
// animal := CreateHuman ;
60603: LD_ADDR_VAR 0 12
60607: PUSH
60608: CALL_OW 44
60612: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60613: LD_VAR 0 12
60617: PPUSH
60618: LD_VAR 0 9
60622: PPUSH
60623: LD_INT 0
60625: PPUSH
60626: CALL 62263 0 3
// end ;
60630: GO 60584
60632: POP
60633: POP
// end ;
60634: LD_VAR 0 10
60638: RET
// export function WantHeal ( sci , unit ) ; begin
60639: LD_INT 0
60641: PPUSH
// if GetTaskList ( sci ) > 0 then
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 437
60651: PUSH
60652: LD_INT 0
60654: GREATER
60655: IFFALSE 60725
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60657: LD_VAR 0 1
60661: PPUSH
60662: CALL_OW 437
60666: PUSH
60667: LD_INT 1
60669: ARRAY
60670: PUSH
60671: LD_INT 1
60673: ARRAY
60674: PUSH
60675: LD_STRING l
60677: EQUAL
60678: PUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 437
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_INT 4
60695: ARRAY
60696: PUSH
60697: LD_VAR 0 2
60701: EQUAL
60702: AND
60703: IFFALSE 60715
// result := true else
60705: LD_ADDR_VAR 0 3
60709: PUSH
60710: LD_INT 1
60712: ST_TO_ADDR
60713: GO 60723
// result := false ;
60715: LD_ADDR_VAR 0 3
60719: PUSH
60720: LD_INT 0
60722: ST_TO_ADDR
// end else
60723: GO 60733
// result := false ;
60725: LD_ADDR_VAR 0 3
60729: PUSH
60730: LD_INT 0
60732: ST_TO_ADDR
// end ;
60733: LD_VAR 0 3
60737: RET
// export function HealTarget ( sci ) ; begin
60738: LD_INT 0
60740: PPUSH
// if not sci then
60741: LD_VAR 0 1
60745: NOT
60746: IFFALSE 60750
// exit ;
60748: GO 60815
// result := 0 ;
60750: LD_ADDR_VAR 0 2
60754: PUSH
60755: LD_INT 0
60757: ST_TO_ADDR
// if GetTaskList ( sci ) then
60758: LD_VAR 0 1
60762: PPUSH
60763: CALL_OW 437
60767: IFFALSE 60815
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60769: LD_VAR 0 1
60773: PPUSH
60774: CALL_OW 437
60778: PUSH
60779: LD_INT 1
60781: ARRAY
60782: PUSH
60783: LD_INT 1
60785: ARRAY
60786: PUSH
60787: LD_STRING l
60789: EQUAL
60790: IFFALSE 60815
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60792: LD_ADDR_VAR 0 2
60796: PUSH
60797: LD_VAR 0 1
60801: PPUSH
60802: CALL_OW 437
60806: PUSH
60807: LD_INT 1
60809: ARRAY
60810: PUSH
60811: LD_INT 4
60813: ARRAY
60814: ST_TO_ADDR
// end ;
60815: LD_VAR 0 2
60819: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60820: LD_INT 0
60822: PPUSH
60823: PPUSH
60824: PPUSH
60825: PPUSH
// if not base_units then
60826: LD_VAR 0 1
60830: NOT
60831: IFFALSE 60835
// exit ;
60833: GO 60922
// result := false ;
60835: LD_ADDR_VAR 0 2
60839: PUSH
60840: LD_INT 0
60842: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60843: LD_ADDR_VAR 0 5
60847: PUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: LD_INT 21
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 72
60867: ST_TO_ADDR
// if not tmp then
60868: LD_VAR 0 5
60872: NOT
60873: IFFALSE 60877
// exit ;
60875: GO 60922
// for i in tmp do
60877: LD_ADDR_VAR 0 3
60881: PUSH
60882: LD_VAR 0 5
60886: PUSH
60887: FOR_IN
60888: IFFALSE 60920
// begin result := EnemyInRange ( i , 22 ) ;
60890: LD_ADDR_VAR 0 2
60894: PUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: LD_INT 22
60902: PPUSH
60903: CALL 58509 0 2
60907: ST_TO_ADDR
// if result then
60908: LD_VAR 0 2
60912: IFFALSE 60918
// exit ;
60914: POP
60915: POP
60916: GO 60922
// end ;
60918: GO 60887
60920: POP
60921: POP
// end ;
60922: LD_VAR 0 2
60926: RET
// export function FilterByTag ( units , tag ) ; begin
60927: LD_INT 0
60929: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60930: LD_ADDR_VAR 0 3
60934: PUSH
60935: LD_VAR 0 1
60939: PPUSH
60940: LD_INT 120
60942: PUSH
60943: LD_VAR 0 2
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PPUSH
60952: CALL_OW 72
60956: ST_TO_ADDR
// end ;
60957: LD_VAR 0 3
60961: RET
// export function IsDriver ( un ) ; begin
60962: LD_INT 0
60964: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60965: LD_ADDR_VAR 0 2
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_INT 55
60977: PUSH
60978: EMPTY
60979: LIST
60980: PPUSH
60981: CALL_OW 69
60985: IN
60986: ST_TO_ADDR
// end ;
60987: LD_VAR 0 2
60991: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60992: LD_INT 0
60994: PPUSH
60995: PPUSH
// list := [ ] ;
60996: LD_ADDR_VAR 0 5
61000: PUSH
61001: EMPTY
61002: ST_TO_ADDR
// case d of 0 :
61003: LD_VAR 0 3
61007: PUSH
61008: LD_INT 0
61010: DOUBLE
61011: EQUAL
61012: IFTRUE 61016
61014: GO 61149
61016: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61017: LD_ADDR_VAR 0 5
61021: PUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_INT 4
61029: MINUS
61030: PUSH
61031: LD_VAR 0 2
61035: PUSH
61036: LD_INT 4
61038: MINUS
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: PUSH
61048: LD_VAR 0 1
61052: PUSH
61053: LD_INT 3
61055: MINUS
61056: PUSH
61057: LD_VAR 0 2
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: PUSH
61070: LD_VAR 0 1
61074: PUSH
61075: LD_INT 4
61077: PLUS
61078: PUSH
61079: LD_VAR 0 2
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: PUSH
61092: LD_VAR 0 1
61096: PUSH
61097: LD_INT 3
61099: PLUS
61100: PUSH
61101: LD_VAR 0 2
61105: PUSH
61106: LD_INT 3
61108: PLUS
61109: PUSH
61110: LD_INT 5
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: LIST
61117: PUSH
61118: LD_VAR 0 1
61122: PUSH
61123: LD_VAR 0 2
61127: PUSH
61128: LD_INT 4
61130: PLUS
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// end ; 1 :
61147: GO 61847
61149: LD_INT 1
61151: DOUBLE
61152: EQUAL
61153: IFTRUE 61157
61155: GO 61290
61157: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61158: LD_ADDR_VAR 0 5
61162: PUSH
61163: LD_VAR 0 1
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 4
61175: MINUS
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: PUSH
61185: LD_VAR 0 1
61189: PUSH
61190: LD_INT 3
61192: MINUS
61193: PUSH
61194: LD_VAR 0 2
61198: PUSH
61199: LD_INT 3
61201: MINUS
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: PUSH
61211: LD_VAR 0 1
61215: PUSH
61216: LD_INT 4
61218: MINUS
61219: PUSH
61220: LD_VAR 0 2
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: PUSH
61233: LD_VAR 0 1
61237: PUSH
61238: LD_VAR 0 2
61242: PUSH
61243: LD_INT 3
61245: PLUS
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: LD_VAR 0 1
61259: PUSH
61260: LD_INT 4
61262: PLUS
61263: PUSH
61264: LD_VAR 0 2
61268: PUSH
61269: LD_INT 4
61271: PLUS
61272: PUSH
61273: LD_INT 5
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// end ; 2 :
61288: GO 61847
61290: LD_INT 2
61292: DOUBLE
61293: EQUAL
61294: IFTRUE 61298
61296: GO 61427
61298: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61299: LD_ADDR_VAR 0 5
61303: PUSH
61304: LD_VAR 0 1
61308: PUSH
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 3
61316: MINUS
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: PUSH
61326: LD_VAR 0 1
61330: PUSH
61331: LD_INT 4
61333: PLUS
61334: PUSH
61335: LD_VAR 0 2
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_VAR 0 2
61357: PUSH
61358: LD_INT 4
61360: PLUS
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: PUSH
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 3
61377: MINUS
61378: PUSH
61379: LD_VAR 0 2
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: PUSH
61392: LD_VAR 0 1
61396: PUSH
61397: LD_INT 4
61399: MINUS
61400: PUSH
61401: LD_VAR 0 2
61405: PUSH
61406: LD_INT 4
61408: MINUS
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// end ; 3 :
61425: GO 61847
61427: LD_INT 3
61429: DOUBLE
61430: EQUAL
61431: IFTRUE 61435
61433: GO 61568
61435: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61436: LD_ADDR_VAR 0 5
61440: PUSH
61441: LD_VAR 0 1
61445: PUSH
61446: LD_INT 3
61448: PLUS
61449: PUSH
61450: LD_VAR 0 2
61454: PUSH
61455: LD_INT 4
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 1
61467: PUSH
61468: LD_INT 4
61470: PLUS
61471: PUSH
61472: LD_VAR 0 2
61476: PUSH
61477: LD_INT 4
61479: PLUS
61480: PUSH
61481: LD_INT 5
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: PUSH
61489: LD_VAR 0 1
61493: PUSH
61494: LD_INT 4
61496: MINUS
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: PUSH
61511: LD_VAR 0 1
61515: PUSH
61516: LD_VAR 0 2
61520: PUSH
61521: LD_INT 4
61523: MINUS
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: PUSH
61533: LD_VAR 0 1
61537: PUSH
61538: LD_INT 3
61540: MINUS
61541: PUSH
61542: LD_VAR 0 2
61546: PUSH
61547: LD_INT 3
61549: MINUS
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: ST_TO_ADDR
// end ; 4 :
61566: GO 61847
61568: LD_INT 4
61570: DOUBLE
61571: EQUAL
61572: IFTRUE 61576
61574: GO 61709
61576: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61577: LD_ADDR_VAR 0 5
61581: PUSH
61582: LD_VAR 0 1
61586: PUSH
61587: LD_VAR 0 2
61591: PUSH
61592: LD_INT 4
61594: PLUS
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: LD_VAR 0 1
61608: PUSH
61609: LD_INT 3
61611: PLUS
61612: PUSH
61613: LD_VAR 0 2
61617: PUSH
61618: LD_INT 3
61620: PLUS
61621: PUSH
61622: LD_INT 5
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: PUSH
61630: LD_VAR 0 1
61634: PUSH
61635: LD_INT 4
61637: PLUS
61638: PUSH
61639: LD_VAR 0 2
61643: PUSH
61644: LD_INT 4
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: PUSH
61652: LD_VAR 0 1
61656: PUSH
61657: LD_VAR 0 2
61661: PUSH
61662: LD_INT 3
61664: MINUS
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: PUSH
61674: LD_VAR 0 1
61678: PUSH
61679: LD_INT 4
61681: MINUS
61682: PUSH
61683: LD_VAR 0 2
61687: PUSH
61688: LD_INT 4
61690: MINUS
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: ST_TO_ADDR
// end ; 5 :
61707: GO 61847
61709: LD_INT 5
61711: DOUBLE
61712: EQUAL
61713: IFTRUE 61717
61715: GO 61846
61717: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61718: LD_ADDR_VAR 0 5
61722: PUSH
61723: LD_VAR 0 1
61727: PUSH
61728: LD_INT 4
61730: MINUS
61731: PUSH
61732: LD_VAR 0 2
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: PUSH
61745: LD_VAR 0 1
61749: PUSH
61750: LD_VAR 0 2
61754: PUSH
61755: LD_INT 4
61757: MINUS
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: LD_INT 4
61774: PLUS
61775: PUSH
61776: LD_VAR 0 2
61780: PUSH
61781: LD_INT 4
61783: PLUS
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: LD_VAR 0 1
61797: PUSH
61798: LD_INT 3
61800: PLUS
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_INT 4
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_VAR 0 2
61824: PUSH
61825: LD_INT 3
61827: PLUS
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: ST_TO_ADDR
// end ; end ;
61844: GO 61847
61846: POP
// result := list ;
61847: LD_ADDR_VAR 0 4
61851: PUSH
61852: LD_VAR 0 5
61856: ST_TO_ADDR
// end ;
61857: LD_VAR 0 4
61861: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61862: LD_INT 0
61864: PPUSH
61865: PPUSH
61866: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61867: LD_VAR 0 1
61871: NOT
61872: PUSH
61873: LD_VAR 0 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 3
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: IN
61896: NOT
61897: OR
61898: IFFALSE 61902
// exit ;
61900: GO 61985
// tmp := [ ] ;
61902: LD_ADDR_VAR 0 5
61906: PUSH
61907: EMPTY
61908: ST_TO_ADDR
// for i in units do
61909: LD_ADDR_VAR 0 4
61913: PUSH
61914: LD_VAR 0 1
61918: PUSH
61919: FOR_IN
61920: IFFALSE 61954
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61922: LD_ADDR_VAR 0 5
61926: PUSH
61927: LD_VAR 0 5
61931: PPUSH
61932: LD_VAR 0 4
61936: PPUSH
61937: LD_VAR 0 2
61941: PPUSH
61942: CALL_OW 259
61946: PPUSH
61947: CALL 63358 0 2
61951: ST_TO_ADDR
61952: GO 61919
61954: POP
61955: POP
// if not tmp then
61956: LD_VAR 0 5
61960: NOT
61961: IFFALSE 61965
// exit ;
61963: GO 61985
// result := SortListByListDesc ( units , tmp ) ;
61965: LD_ADDR_VAR 0 3
61969: PUSH
61970: LD_VAR 0 1
61974: PPUSH
61975: LD_VAR 0 5
61979: PPUSH
61980: CALL_OW 77
61984: ST_TO_ADDR
// end ;
61985: LD_VAR 0 3
61989: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61990: LD_INT 0
61992: PPUSH
61993: PPUSH
61994: PPUSH
// result := false ;
61995: LD_ADDR_VAR 0 3
61999: PUSH
62000: LD_INT 0
62002: ST_TO_ADDR
// if not building then
62003: LD_VAR 0 2
62007: NOT
62008: IFFALSE 62012
// exit ;
62010: GO 62150
// x := GetX ( building ) ;
62012: LD_ADDR_VAR 0 4
62016: PUSH
62017: LD_VAR 0 2
62021: PPUSH
62022: CALL_OW 250
62026: ST_TO_ADDR
// y := GetY ( building ) ;
62027: LD_ADDR_VAR 0 5
62031: PUSH
62032: LD_VAR 0 2
62036: PPUSH
62037: CALL_OW 251
62041: ST_TO_ADDR
// if not x or not y then
62042: LD_VAR 0 4
62046: NOT
62047: PUSH
62048: LD_VAR 0 5
62052: NOT
62053: OR
62054: IFFALSE 62058
// exit ;
62056: GO 62150
// if GetTaskList ( unit ) then
62058: LD_VAR 0 1
62062: PPUSH
62063: CALL_OW 437
62067: IFFALSE 62150
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62069: LD_STRING e
62071: PUSH
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL_OW 437
62081: PUSH
62082: LD_INT 1
62084: ARRAY
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: EQUAL
62090: PUSH
62091: LD_VAR 0 4
62095: PUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 437
62105: PUSH
62106: LD_INT 1
62108: ARRAY
62109: PUSH
62110: LD_INT 2
62112: ARRAY
62113: EQUAL
62114: AND
62115: PUSH
62116: LD_VAR 0 5
62120: PUSH
62121: LD_VAR 0 1
62125: PPUSH
62126: CALL_OW 437
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PUSH
62135: LD_INT 3
62137: ARRAY
62138: EQUAL
62139: AND
62140: IFFALSE 62150
// result := true end ;
62142: LD_ADDR_VAR 0 3
62146: PUSH
62147: LD_INT 1
62149: ST_TO_ADDR
// end ;
62150: LD_VAR 0 3
62154: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62155: LD_INT 0
62157: PPUSH
// result := false ;
62158: LD_ADDR_VAR 0 4
62162: PUSH
62163: LD_INT 0
62165: ST_TO_ADDR
// if GetTaskList ( unit ) then
62166: LD_VAR 0 1
62170: PPUSH
62171: CALL_OW 437
62175: IFFALSE 62258
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62177: LD_STRING M
62179: PUSH
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 437
62189: PUSH
62190: LD_INT 1
62192: ARRAY
62193: PUSH
62194: LD_INT 1
62196: ARRAY
62197: EQUAL
62198: PUSH
62199: LD_VAR 0 2
62203: PUSH
62204: LD_VAR 0 1
62208: PPUSH
62209: CALL_OW 437
62213: PUSH
62214: LD_INT 1
62216: ARRAY
62217: PUSH
62218: LD_INT 2
62220: ARRAY
62221: EQUAL
62222: AND
62223: PUSH
62224: LD_VAR 0 3
62228: PUSH
62229: LD_VAR 0 1
62233: PPUSH
62234: CALL_OW 437
62238: PUSH
62239: LD_INT 1
62241: ARRAY
62242: PUSH
62243: LD_INT 3
62245: ARRAY
62246: EQUAL
62247: AND
62248: IFFALSE 62258
// result := true ;
62250: LD_ADDR_VAR 0 4
62254: PUSH
62255: LD_INT 1
62257: ST_TO_ADDR
// end ; end ;
62258: LD_VAR 0 4
62262: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
62267: PPUSH
62268: PPUSH
// if not unit or not area then
62269: LD_VAR 0 1
62273: NOT
62274: PUSH
62275: LD_VAR 0 2
62279: NOT
62280: OR
62281: IFFALSE 62285
// exit ;
62283: GO 62461
// tmp := AreaToList ( area , i ) ;
62285: LD_ADDR_VAR 0 6
62289: PUSH
62290: LD_VAR 0 2
62294: PPUSH
62295: LD_VAR 0 5
62299: PPUSH
62300: CALL_OW 517
62304: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62305: LD_ADDR_VAR 0 5
62309: PUSH
62310: DOUBLE
62311: LD_INT 1
62313: DEC
62314: ST_TO_ADDR
62315: LD_VAR 0 6
62319: PUSH
62320: LD_INT 1
62322: ARRAY
62323: PUSH
62324: FOR_TO
62325: IFFALSE 62459
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62327: LD_ADDR_VAR 0 7
62331: PUSH
62332: LD_VAR 0 6
62336: PUSH
62337: LD_INT 1
62339: ARRAY
62340: PUSH
62341: LD_VAR 0 5
62345: ARRAY
62346: PUSH
62347: LD_VAR 0 6
62351: PUSH
62352: LD_INT 2
62354: ARRAY
62355: PUSH
62356: LD_VAR 0 5
62360: ARRAY
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62366: LD_INT 92
62368: PUSH
62369: LD_VAR 0 7
62373: PUSH
62374: LD_INT 1
62376: ARRAY
62377: PUSH
62378: LD_VAR 0 7
62382: PUSH
62383: LD_INT 2
62385: ARRAY
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: PPUSH
62396: CALL_OW 69
62400: PUSH
62401: LD_INT 0
62403: EQUAL
62404: IFFALSE 62457
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62406: LD_VAR 0 1
62410: PPUSH
62411: LD_VAR 0 7
62415: PUSH
62416: LD_INT 1
62418: ARRAY
62419: PPUSH
62420: LD_VAR 0 7
62424: PUSH
62425: LD_INT 2
62427: ARRAY
62428: PPUSH
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL_OW 48
// result := IsPlaced ( unit ) ;
62438: LD_ADDR_VAR 0 4
62442: PUSH
62443: LD_VAR 0 1
62447: PPUSH
62448: CALL_OW 305
62452: ST_TO_ADDR
// exit ;
62453: POP
62454: POP
62455: GO 62461
// end ; end ;
62457: GO 62324
62459: POP
62460: POP
// end ;
62461: LD_VAR 0 4
62465: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62466: LD_INT 0
62468: PPUSH
62469: PPUSH
62470: PPUSH
// if not side or side > 8 then
62471: LD_VAR 0 1
62475: NOT
62476: PUSH
62477: LD_VAR 0 1
62481: PUSH
62482: LD_INT 8
62484: GREATER
62485: OR
62486: IFFALSE 62490
// exit ;
62488: GO 62677
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62490: LD_ADDR_VAR 0 4
62494: PUSH
62495: LD_INT 22
62497: PUSH
62498: LD_VAR 0 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 21
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PPUSH
62521: CALL_OW 69
62525: ST_TO_ADDR
// if not tmp then
62526: LD_VAR 0 4
62530: NOT
62531: IFFALSE 62535
// exit ;
62533: GO 62677
// enable_addtolog := true ;
62535: LD_ADDR_OWVAR 81
62539: PUSH
62540: LD_INT 1
62542: ST_TO_ADDR
// AddToLog ( [ ) ;
62543: LD_STRING [
62545: PPUSH
62546: CALL_OW 561
// for i in tmp do
62550: LD_ADDR_VAR 0 3
62554: PUSH
62555: LD_VAR 0 4
62559: PUSH
62560: FOR_IN
62561: IFFALSE 62668
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62563: LD_STRING [
62565: PUSH
62566: LD_VAR 0 3
62570: PPUSH
62571: CALL_OW 266
62575: STR
62576: PUSH
62577: LD_STRING , 
62579: STR
62580: PUSH
62581: LD_VAR 0 3
62585: PPUSH
62586: CALL_OW 250
62590: STR
62591: PUSH
62592: LD_STRING , 
62594: STR
62595: PUSH
62596: LD_VAR 0 3
62600: PPUSH
62601: CALL_OW 251
62605: STR
62606: PUSH
62607: LD_STRING , 
62609: STR
62610: PUSH
62611: LD_VAR 0 3
62615: PPUSH
62616: CALL_OW 254
62620: STR
62621: PUSH
62622: LD_STRING , 
62624: STR
62625: PUSH
62626: LD_VAR 0 3
62630: PPUSH
62631: LD_INT 1
62633: PPUSH
62634: CALL_OW 268
62638: STR
62639: PUSH
62640: LD_STRING , 
62642: STR
62643: PUSH
62644: LD_VAR 0 3
62648: PPUSH
62649: LD_INT 2
62651: PPUSH
62652: CALL_OW 268
62656: STR
62657: PUSH
62658: LD_STRING ],
62660: STR
62661: PPUSH
62662: CALL_OW 561
// end ;
62666: GO 62560
62668: POP
62669: POP
// AddToLog ( ]; ) ;
62670: LD_STRING ];
62672: PPUSH
62673: CALL_OW 561
// end ;
62677: LD_VAR 0 2
62681: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62682: LD_INT 0
62684: PPUSH
62685: PPUSH
62686: PPUSH
62687: PPUSH
62688: PPUSH
// if not area or not rate or not max then
62689: LD_VAR 0 1
62693: NOT
62694: PUSH
62695: LD_VAR 0 2
62699: NOT
62700: OR
62701: PUSH
62702: LD_VAR 0 4
62706: NOT
62707: OR
62708: IFFALSE 62712
// exit ;
62710: GO 62901
// while 1 do
62712: LD_INT 1
62714: IFFALSE 62901
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62716: LD_ADDR_VAR 0 9
62720: PUSH
62721: LD_VAR 0 1
62725: PPUSH
62726: LD_INT 1
62728: PPUSH
62729: CALL_OW 287
62733: PUSH
62734: LD_INT 10
62736: MUL
62737: ST_TO_ADDR
// r := rate / 10 ;
62738: LD_ADDR_VAR 0 7
62742: PUSH
62743: LD_VAR 0 2
62747: PUSH
62748: LD_INT 10
62750: DIVREAL
62751: ST_TO_ADDR
// time := 1 1$00 ;
62752: LD_ADDR_VAR 0 8
62756: PUSH
62757: LD_INT 2100
62759: ST_TO_ADDR
// if amount < min then
62760: LD_VAR 0 9
62764: PUSH
62765: LD_VAR 0 3
62769: LESS
62770: IFFALSE 62788
// r := r * 2 else
62772: LD_ADDR_VAR 0 7
62776: PUSH
62777: LD_VAR 0 7
62781: PUSH
62782: LD_INT 2
62784: MUL
62785: ST_TO_ADDR
62786: GO 62814
// if amount > max then
62788: LD_VAR 0 9
62792: PUSH
62793: LD_VAR 0 4
62797: GREATER
62798: IFFALSE 62814
// r := r / 2 ;
62800: LD_ADDR_VAR 0 7
62804: PUSH
62805: LD_VAR 0 7
62809: PUSH
62810: LD_INT 2
62812: DIVREAL
62813: ST_TO_ADDR
// time := time / r ;
62814: LD_ADDR_VAR 0 8
62818: PUSH
62819: LD_VAR 0 8
62823: PUSH
62824: LD_VAR 0 7
62828: DIVREAL
62829: ST_TO_ADDR
// if time < 0 then
62830: LD_VAR 0 8
62834: PUSH
62835: LD_INT 0
62837: LESS
62838: IFFALSE 62855
// time := time * - 1 ;
62840: LD_ADDR_VAR 0 8
62844: PUSH
62845: LD_VAR 0 8
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: MUL
62854: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62855: LD_VAR 0 8
62859: PUSH
62860: LD_INT 35
62862: PPUSH
62863: LD_INT 875
62865: PPUSH
62866: CALL_OW 12
62870: PLUS
62871: PPUSH
62872: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62876: LD_INT 1
62878: PPUSH
62879: LD_INT 5
62881: PPUSH
62882: CALL_OW 12
62886: PPUSH
62887: LD_VAR 0 1
62891: PPUSH
62892: LD_INT 1
62894: PPUSH
62895: CALL_OW 55
// end ;
62899: GO 62712
// end ;
62901: LD_VAR 0 5
62905: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62906: LD_INT 0
62908: PPUSH
62909: PPUSH
62910: PPUSH
62911: PPUSH
62912: PPUSH
62913: PPUSH
62914: PPUSH
62915: PPUSH
// if not turrets or not factories then
62916: LD_VAR 0 1
62920: NOT
62921: PUSH
62922: LD_VAR 0 2
62926: NOT
62927: OR
62928: IFFALSE 62932
// exit ;
62930: GO 63239
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62932: LD_ADDR_VAR 0 10
62936: PUSH
62937: LD_INT 5
62939: PUSH
62940: LD_INT 6
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 4
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 5
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 24
62974: PUSH
62975: LD_INT 25
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 23
62984: PUSH
62985: LD_INT 27
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 42
62998: PUSH
62999: LD_INT 43
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 44
63008: PUSH
63009: LD_INT 46
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 45
63018: PUSH
63019: LD_INT 47
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: ST_TO_ADDR
// result := [ ] ;
63036: LD_ADDR_VAR 0 3
63040: PUSH
63041: EMPTY
63042: ST_TO_ADDR
// for i in turrets do
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: LD_VAR 0 1
63052: PUSH
63053: FOR_IN
63054: IFFALSE 63237
// begin nat := GetNation ( i ) ;
63056: LD_ADDR_VAR 0 7
63060: PUSH
63061: LD_VAR 0 4
63065: PPUSH
63066: CALL_OW 248
63070: ST_TO_ADDR
// weapon := 0 ;
63071: LD_ADDR_VAR 0 8
63075: PUSH
63076: LD_INT 0
63078: ST_TO_ADDR
// if not nat then
63079: LD_VAR 0 7
63083: NOT
63084: IFFALSE 63088
// continue ;
63086: GO 63053
// for j in list [ nat ] do
63088: LD_ADDR_VAR 0 5
63092: PUSH
63093: LD_VAR 0 10
63097: PUSH
63098: LD_VAR 0 7
63102: ARRAY
63103: PUSH
63104: FOR_IN
63105: IFFALSE 63146
// if GetBWeapon ( i ) = j [ 1 ] then
63107: LD_VAR 0 4
63111: PPUSH
63112: CALL_OW 269
63116: PUSH
63117: LD_VAR 0 5
63121: PUSH
63122: LD_INT 1
63124: ARRAY
63125: EQUAL
63126: IFFALSE 63144
// begin weapon := j [ 2 ] ;
63128: LD_ADDR_VAR 0 8
63132: PUSH
63133: LD_VAR 0 5
63137: PUSH
63138: LD_INT 2
63140: ARRAY
63141: ST_TO_ADDR
// break ;
63142: GO 63146
// end ;
63144: GO 63104
63146: POP
63147: POP
// if not weapon then
63148: LD_VAR 0 8
63152: NOT
63153: IFFALSE 63157
// continue ;
63155: GO 63053
// for k in factories do
63157: LD_ADDR_VAR 0 6
63161: PUSH
63162: LD_VAR 0 2
63166: PUSH
63167: FOR_IN
63168: IFFALSE 63233
// begin weapons := AvailableWeaponList ( k ) ;
63170: LD_ADDR_VAR 0 9
63174: PUSH
63175: LD_VAR 0 6
63179: PPUSH
63180: CALL_OW 478
63184: ST_TO_ADDR
// if not weapons then
63185: LD_VAR 0 9
63189: NOT
63190: IFFALSE 63194
// continue ;
63192: GO 63167
// if weapon in weapons then
63194: LD_VAR 0 8
63198: PUSH
63199: LD_VAR 0 9
63203: IN
63204: IFFALSE 63231
// begin result := [ i , weapon ] ;
63206: LD_ADDR_VAR 0 3
63210: PUSH
63211: LD_VAR 0 4
63215: PUSH
63216: LD_VAR 0 8
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// exit ;
63225: POP
63226: POP
63227: POP
63228: POP
63229: GO 63239
// end ; end ;
63231: GO 63167
63233: POP
63234: POP
// end ;
63235: GO 63053
63237: POP
63238: POP
// end ;
63239: LD_VAR 0 3
63243: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63244: LD_INT 0
63246: PPUSH
// if not side or side > 8 then
63247: LD_VAR 0 3
63251: NOT
63252: PUSH
63253: LD_VAR 0 3
63257: PUSH
63258: LD_INT 8
63260: GREATER
63261: OR
63262: IFFALSE 63266
// exit ;
63264: GO 63325
// if not range then
63266: LD_VAR 0 4
63270: NOT
63271: IFFALSE 63282
// range := - 12 ;
63273: LD_ADDR_VAR 0 4
63277: PUSH
63278: LD_INT 12
63280: NEG
63281: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63282: LD_VAR 0 1
63286: PPUSH
63287: LD_VAR 0 2
63291: PPUSH
63292: LD_VAR 0 3
63296: PPUSH
63297: LD_VAR 0 4
63301: PPUSH
63302: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63306: LD_VAR 0 1
63310: PPUSH
63311: LD_VAR 0 2
63315: PPUSH
63316: LD_VAR 0 3
63320: PPUSH
63321: CALL_OW 331
// end ;
63325: LD_VAR 0 5
63329: RET
// export function Video ( mode ) ; begin
63330: LD_INT 0
63332: PPUSH
// ingame_video = mode ;
63333: LD_ADDR_OWVAR 52
63337: PUSH
63338: LD_VAR 0 1
63342: ST_TO_ADDR
// interface_hidden = mode ;
63343: LD_ADDR_OWVAR 54
63347: PUSH
63348: LD_VAR 0 1
63352: ST_TO_ADDR
// end ;
63353: LD_VAR 0 2
63357: RET
// export function Join ( array , element ) ; begin
63358: LD_INT 0
63360: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63361: LD_ADDR_VAR 0 3
63365: PUSH
63366: LD_VAR 0 1
63370: PPUSH
63371: LD_VAR 0 1
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: PPUSH
63380: LD_VAR 0 2
63384: PPUSH
63385: CALL_OW 1
63389: ST_TO_ADDR
// end ;
63390: LD_VAR 0 3
63394: RET
// export function JoinUnion ( array , element ) ; begin
63395: LD_INT 0
63397: PPUSH
// result := array union element ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_VAR 0 1
63407: PUSH
63408: LD_VAR 0 2
63412: UNION
63413: ST_TO_ADDR
// end ;
63414: LD_VAR 0 3
63418: RET
// export function GetBehemoths ( side ) ; begin
63419: LD_INT 0
63421: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63422: LD_ADDR_VAR 0 2
63426: PUSH
63427: LD_INT 22
63429: PUSH
63430: LD_VAR 0 1
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 31
63441: PUSH
63442: LD_INT 25
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PPUSH
63453: CALL_OW 69
63457: ST_TO_ADDR
// end ;
63458: LD_VAR 0 2
63462: RET
// export function Shuffle ( array ) ; var i , index ; begin
63463: LD_INT 0
63465: PPUSH
63466: PPUSH
63467: PPUSH
// result := [ ] ;
63468: LD_ADDR_VAR 0 2
63472: PUSH
63473: EMPTY
63474: ST_TO_ADDR
// if not array then
63475: LD_VAR 0 1
63479: NOT
63480: IFFALSE 63484
// exit ;
63482: GO 63583
// Randomize ;
63484: CALL_OW 10
// for i = array downto 1 do
63488: LD_ADDR_VAR 0 3
63492: PUSH
63493: DOUBLE
63494: LD_VAR 0 1
63498: INC
63499: ST_TO_ADDR
63500: LD_INT 1
63502: PUSH
63503: FOR_DOWNTO
63504: IFFALSE 63581
// begin index := rand ( 1 , array ) ;
63506: LD_ADDR_VAR 0 4
63510: PUSH
63511: LD_INT 1
63513: PPUSH
63514: LD_VAR 0 1
63518: PPUSH
63519: CALL_OW 12
63523: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63524: LD_ADDR_VAR 0 2
63528: PUSH
63529: LD_VAR 0 2
63533: PPUSH
63534: LD_VAR 0 2
63538: PUSH
63539: LD_INT 1
63541: PLUS
63542: PPUSH
63543: LD_VAR 0 1
63547: PUSH
63548: LD_VAR 0 4
63552: ARRAY
63553: PPUSH
63554: CALL_OW 2
63558: ST_TO_ADDR
// array := Delete ( array , index ) ;
63559: LD_ADDR_VAR 0 1
63563: PUSH
63564: LD_VAR 0 1
63568: PPUSH
63569: LD_VAR 0 4
63573: PPUSH
63574: CALL_OW 3
63578: ST_TO_ADDR
// end ;
63579: GO 63503
63581: POP
63582: POP
// end ;
63583: LD_VAR 0 2
63587: RET
// export function GetBaseMaterials ( base ) ; begin
63588: LD_INT 0
63590: PPUSH
// result := [ 0 , 0 , 0 ] ;
63591: LD_ADDR_VAR 0 2
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: ST_TO_ADDR
// if not base then
63610: LD_VAR 0 1
63614: NOT
63615: IFFALSE 63619
// exit ;
63617: GO 63668
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63619: LD_ADDR_VAR 0 2
63623: PUSH
63624: LD_VAR 0 1
63628: PPUSH
63629: LD_INT 1
63631: PPUSH
63632: CALL_OW 275
63636: PUSH
63637: LD_VAR 0 1
63641: PPUSH
63642: LD_INT 2
63644: PPUSH
63645: CALL_OW 275
63649: PUSH
63650: LD_VAR 0 1
63654: PPUSH
63655: LD_INT 3
63657: PPUSH
63658: CALL_OW 275
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// end ;
63668: LD_VAR 0 2
63672: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63673: LD_INT 0
63675: PPUSH
63676: PPUSH
// result := array ;
63677: LD_ADDR_VAR 0 3
63681: PUSH
63682: LD_VAR 0 1
63686: ST_TO_ADDR
// if size >= result then
63687: LD_VAR 0 2
63691: PUSH
63692: LD_VAR 0 3
63696: GREATEREQUAL
63697: IFFALSE 63701
// exit ;
63699: GO 63751
// if size then
63701: LD_VAR 0 2
63705: IFFALSE 63751
// for i := array downto size do
63707: LD_ADDR_VAR 0 4
63711: PUSH
63712: DOUBLE
63713: LD_VAR 0 1
63717: INC
63718: ST_TO_ADDR
63719: LD_VAR 0 2
63723: PUSH
63724: FOR_DOWNTO
63725: IFFALSE 63749
// result := Delete ( result , result ) ;
63727: LD_ADDR_VAR 0 3
63731: PUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: LD_VAR 0 3
63741: PPUSH
63742: CALL_OW 3
63746: ST_TO_ADDR
63747: GO 63724
63749: POP
63750: POP
// end ;
63751: LD_VAR 0 3
63755: RET
// export function ComExit ( unit ) ; var tmp ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
// if not IsInUnit ( unit ) then
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 310
63769: NOT
63770: IFFALSE 63774
// exit ;
63772: GO 63834
// tmp := IsInUnit ( unit ) ;
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: LD_VAR 0 1
63783: PPUSH
63784: CALL_OW 310
63788: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63789: LD_VAR 0 3
63793: PPUSH
63794: CALL_OW 247
63798: PUSH
63799: LD_INT 2
63801: EQUAL
63802: IFFALSE 63815
// ComExitVehicle ( unit ) else
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 121
63813: GO 63824
// ComExitBuilding ( unit ) ;
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 122
// result := tmp ;
63824: LD_ADDR_VAR 0 2
63828: PUSH
63829: LD_VAR 0 3
63833: ST_TO_ADDR
// end ;
63834: LD_VAR 0 2
63838: RET
// export function ComExitAll ( units ) ; var i ; begin
63839: LD_INT 0
63841: PPUSH
63842: PPUSH
// if not units then
63843: LD_VAR 0 1
63847: NOT
63848: IFFALSE 63852
// exit ;
63850: GO 63878
// for i in units do
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: LD_VAR 0 1
63861: PUSH
63862: FOR_IN
63863: IFFALSE 63876
// ComExit ( i ) ;
63865: LD_VAR 0 3
63869: PPUSH
63870: CALL 63756 0 1
63874: GO 63862
63876: POP
63877: POP
// end ;
63878: LD_VAR 0 2
63882: RET
// export function ResetHc ; begin
63883: LD_INT 0
63885: PPUSH
// InitHc ;
63886: CALL_OW 19
// hc_importance := 0 ;
63890: LD_ADDR_OWVAR 32
63894: PUSH
63895: LD_INT 0
63897: ST_TO_ADDR
// end ;
63898: LD_VAR 0 1
63902: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63903: LD_INT 0
63905: PPUSH
63906: PPUSH
63907: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63908: LD_ADDR_VAR 0 6
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_VAR 0 3
63922: PLUS
63923: PUSH
63924: LD_INT 2
63926: DIV
63927: ST_TO_ADDR
// if _x < 0 then
63928: LD_VAR 0 6
63932: PUSH
63933: LD_INT 0
63935: LESS
63936: IFFALSE 63953
// _x := _x * - 1 ;
63938: LD_ADDR_VAR 0 6
63942: PUSH
63943: LD_VAR 0 6
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: MUL
63952: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63953: LD_ADDR_VAR 0 7
63957: PUSH
63958: LD_VAR 0 2
63962: PUSH
63963: LD_VAR 0 4
63967: PLUS
63968: PUSH
63969: LD_INT 2
63971: DIV
63972: ST_TO_ADDR
// if _y < 0 then
63973: LD_VAR 0 7
63977: PUSH
63978: LD_INT 0
63980: LESS
63981: IFFALSE 63998
// _y := _y * - 1 ;
63983: LD_ADDR_VAR 0 7
63987: PUSH
63988: LD_VAR 0 7
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: MUL
63997: ST_TO_ADDR
// result := [ _x , _y ] ;
63998: LD_ADDR_VAR 0 5
64002: PUSH
64003: LD_VAR 0 6
64007: PUSH
64008: LD_VAR 0 7
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// end ;
64017: LD_VAR 0 5
64021: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64022: LD_INT 0
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
// task := GetTaskList ( unit ) ;
64028: LD_ADDR_VAR 0 7
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: CALL_OW 437
64042: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64043: LD_VAR 0 7
64047: NOT
64048: PUSH
64049: LD_VAR 0 1
64053: PPUSH
64054: LD_VAR 0 2
64058: PPUSH
64059: CALL_OW 308
64063: NOT
64064: AND
64065: IFFALSE 64069
// exit ;
64067: GO 64187
// if IsInArea ( unit , area ) then
64069: LD_VAR 0 1
64073: PPUSH
64074: LD_VAR 0 2
64078: PPUSH
64079: CALL_OW 308
64083: IFFALSE 64101
// begin ComMoveToArea ( unit , goAway ) ;
64085: LD_VAR 0 1
64089: PPUSH
64090: LD_VAR 0 3
64094: PPUSH
64095: CALL_OW 113
// exit ;
64099: GO 64187
// end ; if task [ 1 ] [ 1 ] <> M then
64101: LD_VAR 0 7
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: PUSH
64110: LD_INT 1
64112: ARRAY
64113: PUSH
64114: LD_STRING M
64116: NONEQUAL
64117: IFFALSE 64121
// exit ;
64119: GO 64187
// x := task [ 1 ] [ 2 ] ;
64121: LD_ADDR_VAR 0 5
64125: PUSH
64126: LD_VAR 0 7
64130: PUSH
64131: LD_INT 1
64133: ARRAY
64134: PUSH
64135: LD_INT 2
64137: ARRAY
64138: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64139: LD_ADDR_VAR 0 6
64143: PUSH
64144: LD_VAR 0 7
64148: PUSH
64149: LD_INT 1
64151: ARRAY
64152: PUSH
64153: LD_INT 3
64155: ARRAY
64156: ST_TO_ADDR
// if InArea ( x , y , area ) then
64157: LD_VAR 0 5
64161: PPUSH
64162: LD_VAR 0 6
64166: PPUSH
64167: LD_VAR 0 2
64171: PPUSH
64172: CALL_OW 309
64176: IFFALSE 64187
// ComStop ( unit ) ;
64178: LD_VAR 0 1
64182: PPUSH
64183: CALL_OW 141
// end ;
64187: LD_VAR 0 4
64191: RET
// export function Abs ( value ) ; begin
64192: LD_INT 0
64194: PPUSH
// result := value ;
64195: LD_ADDR_VAR 0 2
64199: PUSH
64200: LD_VAR 0 1
64204: ST_TO_ADDR
// if value < 0 then
64205: LD_VAR 0 1
64209: PUSH
64210: LD_INT 0
64212: LESS
64213: IFFALSE 64230
// result := value * - 1 ;
64215: LD_ADDR_VAR 0 2
64219: PUSH
64220: LD_VAR 0 1
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: MUL
64229: ST_TO_ADDR
// end ;
64230: LD_VAR 0 2
64234: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64235: LD_INT 0
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
// if not unit or not building then
64245: LD_VAR 0 1
64249: NOT
64250: PUSH
64251: LD_VAR 0 2
64255: NOT
64256: OR
64257: IFFALSE 64261
// exit ;
64259: GO 64487
// x := GetX ( building ) ;
64261: LD_ADDR_VAR 0 4
64265: PUSH
64266: LD_VAR 0 2
64270: PPUSH
64271: CALL_OW 250
64275: ST_TO_ADDR
// y := GetY ( building ) ;
64276: LD_ADDR_VAR 0 6
64280: PUSH
64281: LD_VAR 0 2
64285: PPUSH
64286: CALL_OW 251
64290: ST_TO_ADDR
// d := GetDir ( building ) ;
64291: LD_ADDR_VAR 0 8
64295: PUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: CALL_OW 254
64305: ST_TO_ADDR
// r := 4 ;
64306: LD_ADDR_VAR 0 9
64310: PUSH
64311: LD_INT 4
64313: ST_TO_ADDR
// for i := 1 to 5 do
64314: LD_ADDR_VAR 0 10
64318: PUSH
64319: DOUBLE
64320: LD_INT 1
64322: DEC
64323: ST_TO_ADDR
64324: LD_INT 5
64326: PUSH
64327: FOR_TO
64328: IFFALSE 64485
// begin _x := ShiftX ( x , d , r + i ) ;
64330: LD_ADDR_VAR 0 5
64334: PUSH
64335: LD_VAR 0 4
64339: PPUSH
64340: LD_VAR 0 8
64344: PPUSH
64345: LD_VAR 0 9
64349: PUSH
64350: LD_VAR 0 10
64354: PLUS
64355: PPUSH
64356: CALL_OW 272
64360: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64361: LD_ADDR_VAR 0 7
64365: PUSH
64366: LD_VAR 0 6
64370: PPUSH
64371: LD_VAR 0 8
64375: PPUSH
64376: LD_VAR 0 9
64380: PUSH
64381: LD_VAR 0 10
64385: PLUS
64386: PPUSH
64387: CALL_OW 273
64391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64392: LD_VAR 0 5
64396: PPUSH
64397: LD_VAR 0 7
64401: PPUSH
64402: CALL_OW 488
64406: PUSH
64407: LD_VAR 0 5
64411: PPUSH
64412: LD_VAR 0 7
64416: PPUSH
64417: CALL_OW 428
64421: PPUSH
64422: CALL_OW 247
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: IN
64437: NOT
64438: AND
64439: IFFALSE 64483
// begin ComMoveXY ( unit , _x , _y ) ;
64441: LD_VAR 0 1
64445: PPUSH
64446: LD_VAR 0 5
64450: PPUSH
64451: LD_VAR 0 7
64455: PPUSH
64456: CALL_OW 111
// result := [ _x , _y ] ;
64460: LD_ADDR_VAR 0 3
64464: PUSH
64465: LD_VAR 0 5
64469: PUSH
64470: LD_VAR 0 7
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: ST_TO_ADDR
// exit ;
64479: POP
64480: POP
64481: GO 64487
// end ; end ;
64483: GO 64327
64485: POP
64486: POP
// end ;
64487: LD_VAR 0 3
64491: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64492: LD_INT 0
64494: PPUSH
64495: PPUSH
64496: PPUSH
// result := 0 ;
64497: LD_ADDR_VAR 0 3
64501: PUSH
64502: LD_INT 0
64504: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 0
64512: LESS
64513: PUSH
64514: LD_VAR 0 1
64518: PUSH
64519: LD_INT 8
64521: GREATER
64522: OR
64523: PUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 0
64531: LESS
64532: OR
64533: PUSH
64534: LD_VAR 0 2
64538: PUSH
64539: LD_INT 8
64541: GREATER
64542: OR
64543: IFFALSE 64547
// exit ;
64545: GO 64622
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64547: LD_ADDR_VAR 0 4
64551: PUSH
64552: LD_INT 22
64554: PUSH
64555: LD_VAR 0 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PPUSH
64564: CALL_OW 69
64568: PUSH
64569: FOR_IN
64570: IFFALSE 64620
// begin un := UnitShoot ( i ) ;
64572: LD_ADDR_VAR 0 5
64576: PUSH
64577: LD_VAR 0 4
64581: PPUSH
64582: CALL_OW 504
64586: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64587: LD_VAR 0 5
64591: PPUSH
64592: CALL_OW 255
64596: PUSH
64597: LD_VAR 0 1
64601: EQUAL
64602: IFFALSE 64618
// begin result := un ;
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: LD_VAR 0 5
64613: ST_TO_ADDR
// exit ;
64614: POP
64615: POP
64616: GO 64622
// end ; end ;
64618: GO 64569
64620: POP
64621: POP
// end ;
64622: LD_VAR 0 3
64626: RET
// export function GetCargoBay ( units ) ; begin
64627: LD_INT 0
64629: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64630: LD_ADDR_VAR 0 2
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 34
64645: PUSH
64646: LD_INT 12
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 34
64655: PUSH
64656: LD_INT 51
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 34
64665: PUSH
64666: LD_INT 32
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 34
64675: PUSH
64676: LD_INT 89
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: PPUSH
64690: CALL_OW 72
64694: ST_TO_ADDR
// end ;
64695: LD_VAR 0 2
64699: RET
// export function Negate ( value ) ; begin
64700: LD_INT 0
64702: PPUSH
// result := not value ;
64703: LD_ADDR_VAR 0 2
64707: PUSH
64708: LD_VAR 0 1
64712: NOT
64713: ST_TO_ADDR
// end ;
64714: LD_VAR 0 2
64718: RET
// export function Inc ( value ) ; begin
64719: LD_INT 0
64721: PPUSH
// result := value + 1 ;
64722: LD_ADDR_VAR 0 2
64726: PUSH
64727: LD_VAR 0 1
64731: PUSH
64732: LD_INT 1
64734: PLUS
64735: ST_TO_ADDR
// end ;
64736: LD_VAR 0 2
64740: RET
// export function Dec ( value ) ; begin
64741: LD_INT 0
64743: PPUSH
// result := value - 1 ;
64744: LD_ADDR_VAR 0 2
64748: PUSH
64749: LD_VAR 0 1
64753: PUSH
64754: LD_INT 1
64756: MINUS
64757: ST_TO_ADDR
// end ;
64758: LD_VAR 0 2
64762: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64763: LD_INT 0
64765: PPUSH
64766: PPUSH
64767: PPUSH
64768: PPUSH
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64773: LD_VAR 0 1
64777: PPUSH
64778: LD_VAR 0 2
64782: PPUSH
64783: CALL_OW 488
64787: NOT
64788: PUSH
64789: LD_VAR 0 3
64793: PPUSH
64794: LD_VAR 0 4
64798: PPUSH
64799: CALL_OW 488
64803: NOT
64804: OR
64805: IFFALSE 64818
// begin result := - 1 ;
64807: LD_ADDR_VAR 0 5
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: ST_TO_ADDR
// exit ;
64816: GO 65053
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64818: LD_ADDR_VAR 0 12
64822: PUSH
64823: LD_VAR 0 1
64827: PPUSH
64828: LD_VAR 0 2
64832: PPUSH
64833: LD_VAR 0 3
64837: PPUSH
64838: LD_VAR 0 4
64842: PPUSH
64843: CALL 63903 0 4
64847: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64848: LD_ADDR_VAR 0 11
64852: PUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: LD_VAR 0 12
64867: PUSH
64868: LD_INT 1
64870: ARRAY
64871: PPUSH
64872: LD_VAR 0 12
64876: PUSH
64877: LD_INT 2
64879: ARRAY
64880: PPUSH
64881: CALL_OW 298
64885: ST_TO_ADDR
// distance := 9999 ;
64886: LD_ADDR_VAR 0 10
64890: PUSH
64891: LD_INT 9999
64893: ST_TO_ADDR
// for i := 0 to 5 do
64894: LD_ADDR_VAR 0 6
64898: PUSH
64899: DOUBLE
64900: LD_INT 0
64902: DEC
64903: ST_TO_ADDR
64904: LD_INT 5
64906: PUSH
64907: FOR_TO
64908: IFFALSE 65051
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64910: LD_ADDR_VAR 0 7
64914: PUSH
64915: LD_VAR 0 1
64919: PPUSH
64920: LD_VAR 0 6
64924: PPUSH
64925: LD_VAR 0 11
64929: PPUSH
64930: CALL_OW 272
64934: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64935: LD_ADDR_VAR 0 8
64939: PUSH
64940: LD_VAR 0 2
64944: PPUSH
64945: LD_VAR 0 6
64949: PPUSH
64950: LD_VAR 0 11
64954: PPUSH
64955: CALL_OW 273
64959: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64960: LD_VAR 0 7
64964: PPUSH
64965: LD_VAR 0 8
64969: PPUSH
64970: CALL_OW 488
64974: NOT
64975: IFFALSE 64979
// continue ;
64977: GO 64907
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64979: LD_ADDR_VAR 0 9
64983: PUSH
64984: LD_VAR 0 12
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PPUSH
64993: LD_VAR 0 12
64997: PUSH
64998: LD_INT 2
65000: ARRAY
65001: PPUSH
65002: LD_VAR 0 7
65006: PPUSH
65007: LD_VAR 0 8
65011: PPUSH
65012: CALL_OW 298
65016: ST_TO_ADDR
// if tmp < distance then
65017: LD_VAR 0 9
65021: PUSH
65022: LD_VAR 0 10
65026: LESS
65027: IFFALSE 65049
// begin result := i ;
65029: LD_ADDR_VAR 0 5
65033: PUSH
65034: LD_VAR 0 6
65038: ST_TO_ADDR
// distance := tmp ;
65039: LD_ADDR_VAR 0 10
65043: PUSH
65044: LD_VAR 0 9
65048: ST_TO_ADDR
// end ; end ;
65049: GO 64907
65051: POP
65052: POP
// end ;
65053: LD_VAR 0 5
65057: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65058: LD_INT 0
65060: PPUSH
65061: PPUSH
// if not driver or not IsInUnit ( driver ) then
65062: LD_VAR 0 1
65066: NOT
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 310
65077: NOT
65078: OR
65079: IFFALSE 65083
// exit ;
65081: GO 65173
// vehicle := IsInUnit ( driver ) ;
65083: LD_ADDR_VAR 0 3
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 310
65097: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65098: LD_VAR 0 1
65102: PPUSH
65103: LD_STRING \
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: LD_STRING E
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_VAR 0 3
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PPUSH
65169: CALL_OW 446
// end ;
65173: LD_VAR 0 2
65177: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65178: LD_INT 0
65180: PPUSH
65181: PPUSH
// if not driver or not IsInUnit ( driver ) then
65182: LD_VAR 0 1
65186: NOT
65187: PUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 310
65197: NOT
65198: OR
65199: IFFALSE 65203
// exit ;
65201: GO 65293
// vehicle := IsInUnit ( driver ) ;
65203: LD_ADDR_VAR 0 3
65207: PUSH
65208: LD_VAR 0 1
65212: PPUSH
65213: CALL_OW 310
65217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65218: LD_VAR 0 1
65222: PPUSH
65223: LD_STRING \
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: PUSH
65253: LD_STRING E
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_VAR 0 3
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PPUSH
65289: CALL_OW 447
// end ;
65293: LD_VAR 0 2
65297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65298: LD_INT 0
65300: PPUSH
65301: PPUSH
65302: PPUSH
// tmp := [ ] ;
65303: LD_ADDR_VAR 0 5
65307: PUSH
65308: EMPTY
65309: ST_TO_ADDR
// for i in units do
65310: LD_ADDR_VAR 0 4
65314: PUSH
65315: LD_VAR 0 1
65319: PUSH
65320: FOR_IN
65321: IFFALSE 65359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65323: LD_ADDR_VAR 0 5
65327: PUSH
65328: LD_VAR 0 5
65332: PPUSH
65333: LD_VAR 0 5
65337: PUSH
65338: LD_INT 1
65340: PLUS
65341: PPUSH
65342: LD_VAR 0 4
65346: PPUSH
65347: CALL_OW 256
65351: PPUSH
65352: CALL_OW 2
65356: ST_TO_ADDR
65357: GO 65320
65359: POP
65360: POP
// if not tmp then
65361: LD_VAR 0 5
65365: NOT
65366: IFFALSE 65370
// exit ;
65368: GO 65418
// if asc then
65370: LD_VAR 0 2
65374: IFFALSE 65398
// result := SortListByListAsc ( units , tmp ) else
65376: LD_ADDR_VAR 0 3
65380: PUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: LD_VAR 0 5
65390: PPUSH
65391: CALL_OW 76
65395: ST_TO_ADDR
65396: GO 65418
// result := SortListByListDesc ( units , tmp ) ;
65398: LD_ADDR_VAR 0 3
65402: PUSH
65403: LD_VAR 0 1
65407: PPUSH
65408: LD_VAR 0 5
65412: PPUSH
65413: CALL_OW 77
65417: ST_TO_ADDR
// end ;
65418: LD_VAR 0 3
65422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65423: LD_INT 0
65425: PPUSH
65426: PPUSH
// task := GetTaskList ( mech ) ;
65427: LD_ADDR_VAR 0 4
65431: PUSH
65432: LD_VAR 0 1
65436: PPUSH
65437: CALL_OW 437
65441: ST_TO_ADDR
// if not task then
65442: LD_VAR 0 4
65446: NOT
65447: IFFALSE 65451
// exit ;
65449: GO 65493
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65451: LD_ADDR_VAR 0 3
65455: PUSH
65456: LD_VAR 0 4
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PUSH
65465: LD_INT 1
65467: ARRAY
65468: PUSH
65469: LD_STRING r
65471: EQUAL
65472: PUSH
65473: LD_VAR 0 4
65477: PUSH
65478: LD_INT 1
65480: ARRAY
65481: PUSH
65482: LD_INT 4
65484: ARRAY
65485: PUSH
65486: LD_VAR 0 2
65490: EQUAL
65491: AND
65492: ST_TO_ADDR
// end ;
65493: LD_VAR 0 3
65497: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65498: LD_INT 0
65500: PPUSH
// SetDir ( unit , d ) ;
65501: LD_VAR 0 1
65505: PPUSH
65506: LD_VAR 0 4
65510: PPUSH
65511: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65515: LD_VAR 0 1
65519: PPUSH
65520: LD_VAR 0 2
65524: PPUSH
65525: LD_VAR 0 3
65529: PPUSH
65530: LD_VAR 0 5
65534: PPUSH
65535: CALL_OW 48
// end ;
65539: LD_VAR 0 6
65543: RET
// export function ToNaturalNumber ( number ) ; begin
65544: LD_INT 0
65546: PPUSH
// result := number div 1 ;
65547: LD_ADDR_VAR 0 2
65551: PUSH
65552: LD_VAR 0 1
65556: PUSH
65557: LD_INT 1
65559: DIV
65560: ST_TO_ADDR
// if number < 0 then
65561: LD_VAR 0 1
65565: PUSH
65566: LD_INT 0
65568: LESS
65569: IFFALSE 65579
// result := 0 ;
65571: LD_ADDR_VAR 0 2
65575: PUSH
65576: LD_INT 0
65578: ST_TO_ADDR
// end ;
65579: LD_VAR 0 2
65583: RET
// export function SortByClass ( units , class ) ; var un ; begin
65584: LD_INT 0
65586: PPUSH
65587: PPUSH
// if not units or not class then
65588: LD_VAR 0 1
65592: NOT
65593: PUSH
65594: LD_VAR 0 2
65598: NOT
65599: OR
65600: IFFALSE 65604
// exit ;
65602: GO 65699
// result := [ ] ;
65604: LD_ADDR_VAR 0 3
65608: PUSH
65609: EMPTY
65610: ST_TO_ADDR
// for un in units do
65611: LD_ADDR_VAR 0 4
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: FOR_IN
65622: IFFALSE 65697
// if GetClass ( un ) = class then
65624: LD_VAR 0 4
65628: PPUSH
65629: CALL_OW 257
65633: PUSH
65634: LD_VAR 0 2
65638: EQUAL
65639: IFFALSE 65666
// result := Insert ( result , 1 , un ) else
65641: LD_ADDR_VAR 0 3
65645: PUSH
65646: LD_VAR 0 3
65650: PPUSH
65651: LD_INT 1
65653: PPUSH
65654: LD_VAR 0 4
65658: PPUSH
65659: CALL_OW 2
65663: ST_TO_ADDR
65664: GO 65695
// result := Replace ( result , result + 1 , un ) ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_VAR 0 3
65675: PPUSH
65676: LD_VAR 0 3
65680: PUSH
65681: LD_INT 1
65683: PLUS
65684: PPUSH
65685: LD_VAR 0 4
65689: PPUSH
65690: CALL_OW 1
65694: ST_TO_ADDR
65695: GO 65621
65697: POP
65698: POP
// end ;
65699: LD_VAR 0 3
65703: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65704: LD_INT 0
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
65712: PPUSH
// result := [ ] ;
65713: LD_ADDR_VAR 0 4
65717: PUSH
65718: EMPTY
65719: ST_TO_ADDR
// if x - r < 0 then
65720: LD_VAR 0 1
65724: PUSH
65725: LD_VAR 0 3
65729: MINUS
65730: PUSH
65731: LD_INT 0
65733: LESS
65734: IFFALSE 65746
// min_x := 0 else
65736: LD_ADDR_VAR 0 8
65740: PUSH
65741: LD_INT 0
65743: ST_TO_ADDR
65744: GO 65762
// min_x := x - r ;
65746: LD_ADDR_VAR 0 8
65750: PUSH
65751: LD_VAR 0 1
65755: PUSH
65756: LD_VAR 0 3
65760: MINUS
65761: ST_TO_ADDR
// if y - r < 0 then
65762: LD_VAR 0 2
65766: PUSH
65767: LD_VAR 0 3
65771: MINUS
65772: PUSH
65773: LD_INT 0
65775: LESS
65776: IFFALSE 65788
// min_y := 0 else
65778: LD_ADDR_VAR 0 7
65782: PUSH
65783: LD_INT 0
65785: ST_TO_ADDR
65786: GO 65804
// min_y := y - r ;
65788: LD_ADDR_VAR 0 7
65792: PUSH
65793: LD_VAR 0 2
65797: PUSH
65798: LD_VAR 0 3
65802: MINUS
65803: ST_TO_ADDR
// max_x := x + r ;
65804: LD_ADDR_VAR 0 9
65808: PUSH
65809: LD_VAR 0 1
65813: PUSH
65814: LD_VAR 0 3
65818: PLUS
65819: ST_TO_ADDR
// max_y := y + r ;
65820: LD_ADDR_VAR 0 10
65824: PUSH
65825: LD_VAR 0 2
65829: PUSH
65830: LD_VAR 0 3
65834: PLUS
65835: ST_TO_ADDR
// for _x = min_x to max_x do
65836: LD_ADDR_VAR 0 5
65840: PUSH
65841: DOUBLE
65842: LD_VAR 0 8
65846: DEC
65847: ST_TO_ADDR
65848: LD_VAR 0 9
65852: PUSH
65853: FOR_TO
65854: IFFALSE 65955
// for _y = min_y to max_y do
65856: LD_ADDR_VAR 0 6
65860: PUSH
65861: DOUBLE
65862: LD_VAR 0 7
65866: DEC
65867: ST_TO_ADDR
65868: LD_VAR 0 10
65872: PUSH
65873: FOR_TO
65874: IFFALSE 65951
// begin if not ValidHex ( _x , _y ) then
65876: LD_VAR 0 5
65880: PPUSH
65881: LD_VAR 0 6
65885: PPUSH
65886: CALL_OW 488
65890: NOT
65891: IFFALSE 65895
// continue ;
65893: GO 65873
// if GetResourceTypeXY ( _x , _y ) then
65895: LD_VAR 0 5
65899: PPUSH
65900: LD_VAR 0 6
65904: PPUSH
65905: CALL_OW 283
65909: IFFALSE 65949
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65911: LD_ADDR_VAR 0 4
65915: PUSH
65916: LD_VAR 0 4
65920: PPUSH
65921: LD_VAR 0 4
65925: PUSH
65926: LD_INT 1
65928: PLUS
65929: PPUSH
65930: LD_VAR 0 5
65934: PUSH
65935: LD_VAR 0 6
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PPUSH
65944: CALL_OW 1
65948: ST_TO_ADDR
// end ;
65949: GO 65873
65951: POP
65952: POP
65953: GO 65853
65955: POP
65956: POP
// end ;
65957: LD_VAR 0 4
65961: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65962: LD_INT 0
65964: PPUSH
65965: PPUSH
65966: PPUSH
65967: PPUSH
65968: PPUSH
65969: PPUSH
65970: PPUSH
65971: PPUSH
// if not units then
65972: LD_VAR 0 1
65976: NOT
65977: IFFALSE 65981
// exit ;
65979: GO 66505
// result := UnitFilter ( units , [ f_ok ] ) ;
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_INT 50
65993: PUSH
65994: EMPTY
65995: LIST
65996: PPUSH
65997: CALL_OW 72
66001: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66002: LD_ADDR_VAR 0 8
66006: PUSH
66007: LD_VAR 0 1
66011: PUSH
66012: LD_INT 1
66014: ARRAY
66015: PPUSH
66016: CALL_OW 255
66020: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66021: LD_ADDR_VAR 0 10
66025: PUSH
66026: LD_INT 29
66028: PUSH
66029: LD_INT 91
66031: PUSH
66032: LD_INT 49
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: ST_TO_ADDR
// if not result then
66040: LD_VAR 0 3
66044: NOT
66045: IFFALSE 66049
// exit ;
66047: GO 66505
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66049: LD_ADDR_VAR 0 5
66053: PUSH
66054: LD_INT 81
66056: PUSH
66057: LD_VAR 0 8
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PPUSH
66066: CALL_OW 69
66070: ST_TO_ADDR
// for i in result do
66071: LD_ADDR_VAR 0 4
66075: PUSH
66076: LD_VAR 0 3
66080: PUSH
66081: FOR_IN
66082: IFFALSE 66503
// begin tag := GetTag ( i ) + 1 ;
66084: LD_ADDR_VAR 0 9
66088: PUSH
66089: LD_VAR 0 4
66093: PPUSH
66094: CALL_OW 110
66098: PUSH
66099: LD_INT 1
66101: PLUS
66102: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66103: LD_ADDR_VAR 0 7
66107: PUSH
66108: LD_VAR 0 4
66112: PPUSH
66113: CALL_OW 250
66117: PPUSH
66118: LD_VAR 0 4
66122: PPUSH
66123: CALL_OW 251
66127: PPUSH
66128: LD_INT 6
66130: PPUSH
66131: CALL 65704 0 3
66135: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66136: LD_VAR 0 4
66140: PPUSH
66141: CALL_OW 247
66145: PUSH
66146: LD_INT 2
66148: EQUAL
66149: PUSH
66150: LD_VAR 0 7
66154: AND
66155: PUSH
66156: LD_VAR 0 4
66160: PPUSH
66161: CALL_OW 264
66165: PUSH
66166: LD_VAR 0 10
66170: IN
66171: NOT
66172: AND
66173: IFFALSE 66212
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66175: LD_VAR 0 4
66179: PPUSH
66180: LD_VAR 0 7
66184: PUSH
66185: LD_INT 1
66187: ARRAY
66188: PUSH
66189: LD_INT 1
66191: ARRAY
66192: PPUSH
66193: LD_VAR 0 7
66197: PUSH
66198: LD_INT 1
66200: ARRAY
66201: PUSH
66202: LD_INT 2
66204: ARRAY
66205: PPUSH
66206: CALL_OW 116
66210: GO 66501
// if path > tag then
66212: LD_VAR 0 2
66216: PUSH
66217: LD_VAR 0 9
66221: GREATER
66222: IFFALSE 66430
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66224: LD_ADDR_VAR 0 6
66228: PUSH
66229: LD_VAR 0 5
66233: PPUSH
66234: LD_INT 91
66236: PUSH
66237: LD_VAR 0 4
66241: PUSH
66242: LD_INT 8
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PPUSH
66250: CALL_OW 72
66254: ST_TO_ADDR
// if nearEnemy then
66255: LD_VAR 0 6
66259: IFFALSE 66328
// begin if GetWeapon ( i ) = ru_time_lapser then
66261: LD_VAR 0 4
66265: PPUSH
66266: CALL_OW 264
66270: PUSH
66271: LD_INT 49
66273: EQUAL
66274: IFFALSE 66302
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66276: LD_VAR 0 4
66280: PPUSH
66281: LD_VAR 0 6
66285: PPUSH
66286: LD_VAR 0 4
66290: PPUSH
66291: CALL_OW 74
66295: PPUSH
66296: CALL_OW 112
66300: GO 66326
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66302: LD_VAR 0 4
66306: PPUSH
66307: LD_VAR 0 6
66311: PPUSH
66312: LD_VAR 0 4
66316: PPUSH
66317: CALL_OW 74
66321: PPUSH
66322: CALL 67430 0 2
// end else
66326: GO 66428
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66328: LD_VAR 0 4
66332: PPUSH
66333: LD_VAR 0 2
66337: PUSH
66338: LD_VAR 0 9
66342: ARRAY
66343: PUSH
66344: LD_INT 1
66346: ARRAY
66347: PPUSH
66348: LD_VAR 0 2
66352: PUSH
66353: LD_VAR 0 9
66357: ARRAY
66358: PUSH
66359: LD_INT 2
66361: ARRAY
66362: PPUSH
66363: CALL_OW 297
66367: PUSH
66368: LD_INT 6
66370: GREATER
66371: IFFALSE 66414
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66373: LD_VAR 0 4
66377: PPUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_VAR 0 9
66387: ARRAY
66388: PUSH
66389: LD_INT 1
66391: ARRAY
66392: PPUSH
66393: LD_VAR 0 2
66397: PUSH
66398: LD_VAR 0 9
66402: ARRAY
66403: PUSH
66404: LD_INT 2
66406: ARRAY
66407: PPUSH
66408: CALL_OW 114
66412: GO 66428
// SetTag ( i , tag ) ;
66414: LD_VAR 0 4
66418: PPUSH
66419: LD_VAR 0 9
66423: PPUSH
66424: CALL_OW 109
// end else
66428: GO 66501
// if enemy then
66430: LD_VAR 0 5
66434: IFFALSE 66501
// begin if GetWeapon ( i ) = ru_time_lapser then
66436: LD_VAR 0 4
66440: PPUSH
66441: CALL_OW 264
66445: PUSH
66446: LD_INT 49
66448: EQUAL
66449: IFFALSE 66477
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66451: LD_VAR 0 4
66455: PPUSH
66456: LD_VAR 0 5
66460: PPUSH
66461: LD_VAR 0 4
66465: PPUSH
66466: CALL_OW 74
66470: PPUSH
66471: CALL_OW 112
66475: GO 66501
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66477: LD_VAR 0 4
66481: PPUSH
66482: LD_VAR 0 5
66486: PPUSH
66487: LD_VAR 0 4
66491: PPUSH
66492: CALL_OW 74
66496: PPUSH
66497: CALL 67430 0 2
// end ; end ;
66501: GO 66081
66503: POP
66504: POP
// end ;
66505: LD_VAR 0 3
66509: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66510: LD_INT 0
66512: PPUSH
66513: PPUSH
66514: PPUSH
// if not unit or IsInUnit ( unit ) then
66515: LD_VAR 0 1
66519: NOT
66520: PUSH
66521: LD_VAR 0 1
66525: PPUSH
66526: CALL_OW 310
66530: OR
66531: IFFALSE 66535
// exit ;
66533: GO 66626
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66535: LD_ADDR_VAR 0 4
66539: PUSH
66540: LD_VAR 0 1
66544: PPUSH
66545: CALL_OW 250
66549: PPUSH
66550: LD_VAR 0 2
66554: PPUSH
66555: LD_INT 1
66557: PPUSH
66558: CALL_OW 272
66562: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66563: LD_ADDR_VAR 0 5
66567: PUSH
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 251
66577: PPUSH
66578: LD_VAR 0 2
66582: PPUSH
66583: LD_INT 1
66585: PPUSH
66586: CALL_OW 273
66590: ST_TO_ADDR
// if ValidHex ( x , y ) then
66591: LD_VAR 0 4
66595: PPUSH
66596: LD_VAR 0 5
66600: PPUSH
66601: CALL_OW 488
66605: IFFALSE 66626
// ComTurnXY ( unit , x , y ) ;
66607: LD_VAR 0 1
66611: PPUSH
66612: LD_VAR 0 4
66616: PPUSH
66617: LD_VAR 0 5
66621: PPUSH
66622: CALL_OW 118
// end ;
66626: LD_VAR 0 3
66630: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66631: LD_INT 0
66633: PPUSH
66634: PPUSH
// result := false ;
66635: LD_ADDR_VAR 0 3
66639: PUSH
66640: LD_INT 0
66642: ST_TO_ADDR
// if not units then
66643: LD_VAR 0 2
66647: NOT
66648: IFFALSE 66652
// exit ;
66650: GO 66697
// for i in units do
66652: LD_ADDR_VAR 0 4
66656: PUSH
66657: LD_VAR 0 2
66661: PUSH
66662: FOR_IN
66663: IFFALSE 66695
// if See ( side , i ) then
66665: LD_VAR 0 1
66669: PPUSH
66670: LD_VAR 0 4
66674: PPUSH
66675: CALL_OW 292
66679: IFFALSE 66693
// begin result := true ;
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: LD_INT 1
66688: ST_TO_ADDR
// exit ;
66689: POP
66690: POP
66691: GO 66697
// end ;
66693: GO 66662
66695: POP
66696: POP
// end ;
66697: LD_VAR 0 3
66701: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66702: LD_INT 0
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
// if not unit or not points then
66708: LD_VAR 0 1
66712: NOT
66713: PUSH
66714: LD_VAR 0 2
66718: NOT
66719: OR
66720: IFFALSE 66724
// exit ;
66722: GO 66814
// dist := 99999 ;
66724: LD_ADDR_VAR 0 5
66728: PUSH
66729: LD_INT 99999
66731: ST_TO_ADDR
// for i in points do
66732: LD_ADDR_VAR 0 4
66736: PUSH
66737: LD_VAR 0 2
66741: PUSH
66742: FOR_IN
66743: IFFALSE 66812
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66745: LD_ADDR_VAR 0 6
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: LD_VAR 0 4
66759: PUSH
66760: LD_INT 1
66762: ARRAY
66763: PPUSH
66764: LD_VAR 0 4
66768: PUSH
66769: LD_INT 2
66771: ARRAY
66772: PPUSH
66773: CALL_OW 297
66777: ST_TO_ADDR
// if tmpDist < dist then
66778: LD_VAR 0 6
66782: PUSH
66783: LD_VAR 0 5
66787: LESS
66788: IFFALSE 66810
// begin result := i ;
66790: LD_ADDR_VAR 0 3
66794: PUSH
66795: LD_VAR 0 4
66799: ST_TO_ADDR
// dist := tmpDist ;
66800: LD_ADDR_VAR 0 5
66804: PUSH
66805: LD_VAR 0 6
66809: ST_TO_ADDR
// end ; end ;
66810: GO 66742
66812: POP
66813: POP
// end ;
66814: LD_VAR 0 3
66818: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66819: LD_INT 0
66821: PPUSH
// uc_side := side ;
66822: LD_ADDR_OWVAR 20
66826: PUSH
66827: LD_VAR 0 1
66831: ST_TO_ADDR
// uc_nation := 3 ;
66832: LD_ADDR_OWVAR 21
66836: PUSH
66837: LD_INT 3
66839: ST_TO_ADDR
// vc_chassis := 25 ;
66840: LD_ADDR_OWVAR 37
66844: PUSH
66845: LD_INT 25
66847: ST_TO_ADDR
// vc_engine := engine_siberite ;
66848: LD_ADDR_OWVAR 39
66852: PUSH
66853: LD_INT 3
66855: ST_TO_ADDR
// vc_control := control_computer ;
66856: LD_ADDR_OWVAR 38
66860: PUSH
66861: LD_INT 3
66863: ST_TO_ADDR
// vc_weapon := 59 ;
66864: LD_ADDR_OWVAR 40
66868: PUSH
66869: LD_INT 59
66871: ST_TO_ADDR
// result := CreateVehicle ;
66872: LD_ADDR_VAR 0 5
66876: PUSH
66877: CALL_OW 45
66881: ST_TO_ADDR
// SetDir ( result , d ) ;
66882: LD_VAR 0 5
66886: PPUSH
66887: LD_VAR 0 4
66891: PPUSH
66892: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66896: LD_VAR 0 5
66900: PPUSH
66901: LD_VAR 0 2
66905: PPUSH
66906: LD_VAR 0 3
66910: PPUSH
66911: LD_INT 0
66913: PPUSH
66914: CALL_OW 48
// end ;
66918: LD_VAR 0 5
66922: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66923: LD_INT 0
66925: PPUSH
66926: PPUSH
66927: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66928: LD_ADDR_VAR 0 2
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66951: LD_VAR 0 1
66955: NOT
66956: PUSH
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 264
66966: PUSH
66967: LD_INT 12
66969: PUSH
66970: LD_INT 51
66972: PUSH
66973: LD_INT 32
66975: PUSH
66976: LD_INT 89
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: IN
66985: NOT
66986: OR
66987: IFFALSE 66991
// exit ;
66989: GO 67089
// for i := 1 to 3 do
66991: LD_ADDR_VAR 0 3
66995: PUSH
66996: DOUBLE
66997: LD_INT 1
66999: DEC
67000: ST_TO_ADDR
67001: LD_INT 3
67003: PUSH
67004: FOR_TO
67005: IFFALSE 67087
// begin tmp := GetCargo ( cargo , i ) ;
67007: LD_ADDR_VAR 0 4
67011: PUSH
67012: LD_VAR 0 1
67016: PPUSH
67017: LD_VAR 0 3
67021: PPUSH
67022: CALL_OW 289
67026: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67027: LD_ADDR_VAR 0 2
67031: PUSH
67032: LD_VAR 0 2
67036: PPUSH
67037: LD_VAR 0 3
67041: PPUSH
67042: LD_VAR 0 4
67046: PPUSH
67047: CALL_OW 1
67051: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67052: LD_ADDR_VAR 0 2
67056: PUSH
67057: LD_VAR 0 2
67061: PPUSH
67062: LD_INT 4
67064: PPUSH
67065: LD_VAR 0 2
67069: PUSH
67070: LD_INT 4
67072: ARRAY
67073: PUSH
67074: LD_VAR 0 4
67078: PLUS
67079: PPUSH
67080: CALL_OW 1
67084: ST_TO_ADDR
// end ;
67085: GO 67004
67087: POP
67088: POP
// end ;
67089: LD_VAR 0 2
67093: RET
// export function Length ( array ) ; begin
67094: LD_INT 0
67096: PPUSH
// result := array + 0 ;
67097: LD_ADDR_VAR 0 2
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: LD_INT 0
67109: PLUS
67110: ST_TO_ADDR
// end ;
67111: LD_VAR 0 2
67115: RET
// export function PrepareArray ( array ) ; begin
67116: LD_INT 0
67118: PPUSH
// result := array diff 0 ;
67119: LD_ADDR_VAR 0 2
67123: PUSH
67124: LD_VAR 0 1
67128: PUSH
67129: LD_INT 0
67131: DIFF
67132: ST_TO_ADDR
// if not result [ 1 ] then
67133: LD_VAR 0 2
67137: PUSH
67138: LD_INT 1
67140: ARRAY
67141: NOT
67142: IFFALSE 67162
// result := Delete ( result , 1 ) ;
67144: LD_ADDR_VAR 0 2
67148: PUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: LD_INT 1
67156: PPUSH
67157: CALL_OW 3
67161: ST_TO_ADDR
// end ;
67162: LD_VAR 0 2
67166: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67167: LD_INT 0
67169: PPUSH
67170: PPUSH
67171: PPUSH
67172: PPUSH
// sibRocketRange := 25 ;
67173: LD_ADDR_VAR 0 6
67177: PUSH
67178: LD_INT 25
67180: ST_TO_ADDR
// result := false ;
67181: LD_ADDR_VAR 0 4
67185: PUSH
67186: LD_INT 0
67188: ST_TO_ADDR
// for i := 0 to 5 do
67189: LD_ADDR_VAR 0 5
67193: PUSH
67194: DOUBLE
67195: LD_INT 0
67197: DEC
67198: ST_TO_ADDR
67199: LD_INT 5
67201: PUSH
67202: FOR_TO
67203: IFFALSE 67270
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 5
67214: PPUSH
67215: LD_VAR 0 6
67219: PPUSH
67220: CALL_OW 272
67224: PPUSH
67225: LD_VAR 0 2
67229: PPUSH
67230: LD_VAR 0 5
67234: PPUSH
67235: LD_VAR 0 6
67239: PPUSH
67240: CALL_OW 273
67244: PPUSH
67245: LD_VAR 0 3
67249: PPUSH
67250: CALL_OW 309
67254: IFFALSE 67268
// begin result := true ;
67256: LD_ADDR_VAR 0 4
67260: PUSH
67261: LD_INT 1
67263: ST_TO_ADDR
// exit ;
67264: POP
67265: POP
67266: GO 67272
// end ;
67268: GO 67202
67270: POP
67271: POP
// end ;
67272: LD_VAR 0 4
67276: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67277: LD_INT 0
67279: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67280: LD_VAR 0 1
67284: PPUSH
67285: LD_VAR 0 2
67289: PPUSH
67290: LD_INT 0
67292: PPUSH
67293: LD_INT 0
67295: PPUSH
67296: LD_INT 1
67298: PPUSH
67299: LD_INT 0
67301: PPUSH
67302: CALL_OW 587
// end ;
67306: LD_VAR 0 3
67310: RET
// export function CenterOnNow ( unit ) ; begin
67311: LD_INT 0
67313: PPUSH
// result := IsInUnit ( unit ) ;
67314: LD_ADDR_VAR 0 2
67318: PUSH
67319: LD_VAR 0 1
67323: PPUSH
67324: CALL_OW 310
67328: ST_TO_ADDR
// if not result then
67329: LD_VAR 0 2
67333: NOT
67334: IFFALSE 67346
// result := unit ;
67336: LD_ADDR_VAR 0 2
67340: PUSH
67341: LD_VAR 0 1
67345: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67346: LD_VAR 0 1
67350: PPUSH
67351: CALL_OW 87
// end ;
67355: LD_VAR 0 2
67359: RET
// export function ComMoveHex ( unit , hex ) ; begin
67360: LD_INT 0
67362: PPUSH
// if not hex then
67363: LD_VAR 0 2
67367: NOT
67368: IFFALSE 67372
// exit ;
67370: GO 67425
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67372: LD_VAR 0 2
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: PPUSH
67381: LD_VAR 0 2
67385: PUSH
67386: LD_INT 2
67388: ARRAY
67389: PPUSH
67390: CALL_OW 428
67394: IFFALSE 67398
// exit ;
67396: GO 67425
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67398: LD_VAR 0 1
67402: PPUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_INT 1
67410: ARRAY
67411: PPUSH
67412: LD_VAR 0 2
67416: PUSH
67417: LD_INT 2
67419: ARRAY
67420: PPUSH
67421: CALL_OW 111
// end ;
67425: LD_VAR 0 3
67429: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67430: LD_INT 0
67432: PPUSH
67433: PPUSH
67434: PPUSH
// if not unit or not enemy then
67435: LD_VAR 0 1
67439: NOT
67440: PUSH
67441: LD_VAR 0 2
67445: NOT
67446: OR
67447: IFFALSE 67451
// exit ;
67449: GO 67575
// x := GetX ( enemy ) ;
67451: LD_ADDR_VAR 0 4
67455: PUSH
67456: LD_VAR 0 2
67460: PPUSH
67461: CALL_OW 250
67465: ST_TO_ADDR
// y := GetY ( enemy ) ;
67466: LD_ADDR_VAR 0 5
67470: PUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 251
67480: ST_TO_ADDR
// if ValidHex ( x , y ) then
67481: LD_VAR 0 4
67485: PPUSH
67486: LD_VAR 0 5
67490: PPUSH
67491: CALL_OW 488
67495: IFFALSE 67575
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
67497: LD_VAR 0 2
67501: PPUSH
67502: CALL_OW 247
67506: PUSH
67507: LD_INT 3
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: IN
67517: PUSH
67518: LD_VAR 0 1
67522: PPUSH
67523: CALL_OW 255
67527: PPUSH
67528: LD_VAR 0 2
67532: PPUSH
67533: CALL_OW 292
67537: AND
67538: IFFALSE 67556
// ComAttackUnit ( unit , enemy ) else
67540: LD_VAR 0 1
67544: PPUSH
67545: LD_VAR 0 2
67549: PPUSH
67550: CALL_OW 115
67554: GO 67575
// ComAgressiveMove ( unit , x , y ) ;
67556: LD_VAR 0 1
67560: PPUSH
67561: LD_VAR 0 4
67565: PPUSH
67566: LD_VAR 0 5
67570: PPUSH
67571: CALL_OW 114
// end ;
67575: LD_VAR 0 3
67579: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67580: LD_INT 0
67582: PPUSH
67583: PPUSH
67584: PPUSH
// list := AreaToList ( area , 0 ) ;
67585: LD_ADDR_VAR 0 5
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: LD_INT 0
67597: PPUSH
67598: CALL_OW 517
67602: ST_TO_ADDR
// if not list then
67603: LD_VAR 0 5
67607: NOT
67608: IFFALSE 67612
// exit ;
67610: GO 67742
// if all then
67612: LD_VAR 0 2
67616: IFFALSE 67704
// begin for i := 1 to list [ 1 ] do
67618: LD_ADDR_VAR 0 4
67622: PUSH
67623: DOUBLE
67624: LD_INT 1
67626: DEC
67627: ST_TO_ADDR
67628: LD_VAR 0 5
67632: PUSH
67633: LD_INT 1
67635: ARRAY
67636: PUSH
67637: FOR_TO
67638: IFFALSE 67700
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67640: LD_ADDR_VAR 0 3
67644: PUSH
67645: LD_VAR 0 3
67649: PPUSH
67650: LD_VAR 0 3
67654: PUSH
67655: LD_INT 1
67657: PLUS
67658: PPUSH
67659: LD_VAR 0 5
67663: PUSH
67664: LD_INT 1
67666: ARRAY
67667: PUSH
67668: LD_VAR 0 4
67672: ARRAY
67673: PUSH
67674: LD_VAR 0 5
67678: PUSH
67679: LD_INT 2
67681: ARRAY
67682: PUSH
67683: LD_VAR 0 4
67687: ARRAY
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PPUSH
67693: CALL_OW 1
67697: ST_TO_ADDR
67698: GO 67637
67700: POP
67701: POP
// exit ;
67702: GO 67742
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67704: LD_ADDR_VAR 0 3
67708: PUSH
67709: LD_VAR 0 5
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PUSH
67718: LD_INT 1
67720: ARRAY
67721: PUSH
67722: LD_VAR 0 5
67726: PUSH
67727: LD_INT 2
67729: ARRAY
67730: PUSH
67731: LD_INT 1
67733: ARRAY
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: EMPTY
67740: LIST
67741: ST_TO_ADDR
// end ;
67742: LD_VAR 0 3
67746: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67747: LD_INT 0
67749: PPUSH
67750: PPUSH
// list := AreaToList ( area , 0 ) ;
67751: LD_ADDR_VAR 0 4
67755: PUSH
67756: LD_VAR 0 1
67760: PPUSH
67761: LD_INT 0
67763: PPUSH
67764: CALL_OW 517
67768: ST_TO_ADDR
// if not list then
67769: LD_VAR 0 4
67773: NOT
67774: IFFALSE 67778
// exit ;
67776: GO 67819
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67778: LD_ADDR_VAR 0 3
67782: PUSH
67783: LD_VAR 0 4
67787: PUSH
67788: LD_INT 1
67790: ARRAY
67791: PUSH
67792: LD_INT 1
67794: ARRAY
67795: PUSH
67796: LD_VAR 0 4
67800: PUSH
67801: LD_INT 2
67803: ARRAY
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PUSH
67809: LD_VAR 0 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: ST_TO_ADDR
// end ; end_of_file
67819: LD_VAR 0 3
67823: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67824: LD_VAR 0 1
67828: PPUSH
67829: LD_VAR 0 2
67833: PPUSH
67834: LD_VAR 0 3
67838: PPUSH
67839: LD_VAR 0 4
67843: PPUSH
67844: LD_VAR 0 5
67848: PPUSH
67849: LD_VAR 0 6
67853: PPUSH
67854: CALL 5118 0 6
// end ;
67858: PPOPN 6
67860: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67861: LD_INT 0
67863: PPUSH
// begin if not units then
67864: LD_VAR 0 1
67868: NOT
67869: IFFALSE 67873
// exit ;
67871: GO 67873
// end ;
67873: PPOPN 7
67875: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67876: CALL 5022 0 0
// end ;
67880: PPOPN 1
67882: END
