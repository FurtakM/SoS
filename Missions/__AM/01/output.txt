// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4870 0 0
// end ;
4869: END
// function InitStreamMode ; begin
4870: LD_INT 0
4872: PPUSH
// streamModeActive := false ;
4873: LD_ADDR_EXP 15
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// sRocket := false ;
4881: LD_ADDR_EXP 18
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// sSpeed := false ;
4889: LD_ADDR_EXP 17
4893: PUSH
4894: LD_INT 0
4896: ST_TO_ADDR
// sEngine := false ;
4897: LD_ADDR_EXP 19
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// sSpec := false ;
4905: LD_ADDR_EXP 16
4909: PUSH
4910: LD_INT 0
4912: ST_TO_ADDR
// sLevel := false ;
4913: LD_ADDR_EXP 20
4917: PUSH
4918: LD_INT 0
4920: ST_TO_ADDR
// sArmoury := false ;
4921: LD_ADDR_EXP 21
4925: PUSH
4926: LD_INT 0
4928: ST_TO_ADDR
// sRadar := false ;
4929: LD_ADDR_EXP 22
4933: PUSH
4934: LD_INT 0
4936: ST_TO_ADDR
// sBunker := false ;
4937: LD_ADDR_EXP 23
4941: PUSH
4942: LD_INT 0
4944: ST_TO_ADDR
// sHack := false ;
4945: LD_ADDR_EXP 24
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// sFire := false ;
4953: LD_ADDR_EXP 25
4957: PUSH
4958: LD_INT 0
4960: ST_TO_ADDR
// sRefresh := false ;
4961: LD_ADDR_EXP 26
4965: PUSH
4966: LD_INT 0
4968: ST_TO_ADDR
// sExp := false ;
4969: LD_ADDR_EXP 27
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// sDepot := false ;
4977: LD_ADDR_EXP 28
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// sFlag := false ;
4985: LD_ADDR_EXP 29
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// sKamikadze := false ;
4993: LD_ADDR_EXP 37
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// sTroll := false ;
5001: LD_ADDR_EXP 38
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// sSlow := false ;
5009: LD_ADDR_EXP 39
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sLack := false ;
5017: LD_ADDR_EXP 40
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sTank := false ;
5025: LD_ADDR_EXP 42
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sRemote := false ;
5033: LD_ADDR_EXP 43
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sSold := false ;
5041: LD_ADDR_EXP 30
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sDiff := false ;
5049: LD_ADDR_EXP 31
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sFog := false ;
5057: LD_ADDR_EXP 34
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sReset := false ;
5065: LD_ADDR_EXP 35
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// sSun := false ;
5073: LD_ADDR_EXP 36
5077: PUSH
5078: LD_INT 0
5080: ST_TO_ADDR
// sTiger := false ;
5081: LD_ADDR_EXP 32
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// sBomb := false ;
5089: LD_ADDR_EXP 33
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// sWound := false ;
5097: LD_ADDR_EXP 41
5101: PUSH
5102: LD_INT 0
5104: ST_TO_ADDR
// end ;
5105: LD_VAR 0 1
5109: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 100
5117: EQUAL
5118: IFFALSE 5653
// begin if not StreamModeActive then
5120: LD_EXP 15
5124: NOT
5125: IFFALSE 5135
// StreamModeActive := true ;
5127: LD_ADDR_EXP 15
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// if p3 = 0 then
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 0
5142: EQUAL
5143: IFFALSE 5149
// InitStreamMode ;
5145: CALL 4870 0 0
// if p3 = 1 then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 1
5156: EQUAL
5157: IFFALSE 5167
// sRocket := true ;
5159: LD_ADDR_EXP 18
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// if p3 = 2 then
5167: LD_VAR 0 3
5171: PUSH
5172: LD_INT 2
5174: EQUAL
5175: IFFALSE 5185
// sSpeed := true ;
5177: LD_ADDR_EXP 17
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// if p3 = 3 then
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 3
5192: EQUAL
5193: IFFALSE 5203
// sEngine := true ;
5195: LD_ADDR_EXP 19
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if p3 = 4 then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 4
5210: EQUAL
5211: IFFALSE 5221
// sSpec := true ;
5213: LD_ADDR_EXP 16
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// if p3 = 5 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 5
5228: EQUAL
5229: IFFALSE 5239
// sLevel := true ;
5231: LD_ADDR_EXP 20
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 6 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 6
5246: EQUAL
5247: IFFALSE 5257
// sArmoury := true ;
5249: LD_ADDR_EXP 21
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 7 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 7
5264: EQUAL
5265: IFFALSE 5275
// sRadar := true ;
5267: LD_ADDR_EXP 22
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 8 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 8
5282: EQUAL
5283: IFFALSE 5293
// sBunker := true ;
5285: LD_ADDR_EXP 23
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 9 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 9
5300: EQUAL
5301: IFFALSE 5311
// sHack := true ;
5303: LD_ADDR_EXP 24
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 10 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 10
5318: EQUAL
5319: IFFALSE 5329
// sFire := true ;
5321: LD_ADDR_EXP 25
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 11 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 11
5336: EQUAL
5337: IFFALSE 5347
// sRefresh := true ;
5339: LD_ADDR_EXP 26
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 12 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 12
5354: EQUAL
5355: IFFALSE 5365
// sExp := true ;
5357: LD_ADDR_EXP 27
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 13 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 13
5372: EQUAL
5373: IFFALSE 5383
// sDepot := true ;
5375: LD_ADDR_EXP 28
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 14 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 14
5390: EQUAL
5391: IFFALSE 5401
// sFlag := true ;
5393: LD_ADDR_EXP 29
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 15 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 15
5408: EQUAL
5409: IFFALSE 5419
// sKamikadze := true ;
5411: LD_ADDR_EXP 37
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 16 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 16
5426: EQUAL
5427: IFFALSE 5437
// sTroll := true ;
5429: LD_ADDR_EXP 38
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 17 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 17
5444: EQUAL
5445: IFFALSE 5455
// sSlow := true ;
5447: LD_ADDR_EXP 39
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 18 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 18
5462: EQUAL
5463: IFFALSE 5473
// sLack := true ;
5465: LD_ADDR_EXP 40
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 19 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 19
5480: EQUAL
5481: IFFALSE 5491
// sTank := true ;
5483: LD_ADDR_EXP 42
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 20 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 20
5498: EQUAL
5499: IFFALSE 5509
// sRemote := true ;
5501: LD_ADDR_EXP 43
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 101 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 101
5516: EQUAL
5517: IFFALSE 5527
// sSold := true ;
5519: LD_ADDR_EXP 30
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 102 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 102
5534: EQUAL
5535: IFFALSE 5545
// sDiff := true ;
5537: LD_ADDR_EXP 31
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 103 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 103
5552: EQUAL
5553: IFFALSE 5563
// sFog := true ;
5555: LD_ADDR_EXP 34
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 104 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 104
5570: EQUAL
5571: IFFALSE 5581
// sReset := true ;
5573: LD_ADDR_EXP 35
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 105 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 105
5588: EQUAL
5589: IFFALSE 5599
// sSun := true ;
5591: LD_ADDR_EXP 36
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 106 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 106
5606: EQUAL
5607: IFFALSE 5617
// sTiger := true ;
5609: LD_ADDR_EXP 32
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 107 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 107
5624: EQUAL
5625: IFFALSE 5635
// sBomb := true ;
5627: LD_ADDR_EXP 33
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 108 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 108
5642: EQUAL
5643: IFFALSE 5653
// sWound := true ;
5645: LD_ADDR_EXP 41
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// end ; end ;
5653: PPOPN 6
5655: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5656: LD_EXP 15
5660: PUSH
5661: LD_EXP 18
5665: AND
5666: IFFALSE 5787
5668: GO 5670
5670: DISABLE
5671: LD_INT 0
5673: PPUSH
5674: PPUSH
// begin enable ;
5675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5676: LD_ADDR_VAR 0 2
5680: PUSH
5681: LD_INT 22
5683: PUSH
5684: LD_OWVAR 2
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: LD_INT 34
5698: PUSH
5699: LD_INT 7
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 34
5708: PUSH
5709: LD_INT 45
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 34
5718: PUSH
5719: LD_INT 28
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 34
5728: PUSH
5729: LD_INT 47
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 69
5751: ST_TO_ADDR
// if not tmp then
5752: LD_VAR 0 2
5756: NOT
5757: IFFALSE 5761
// exit ;
5759: GO 5787
// for i in tmp do
5761: LD_ADDR_VAR 0 1
5765: PUSH
5766: LD_VAR 0 2
5770: PUSH
5771: FOR_IN
5772: IFFALSE 5785
// begin DestroyUnit ( i ) ;
5774: LD_VAR 0 1
5778: PPUSH
5779: CALL_OW 65
// end ;
5783: GO 5771
5785: POP
5786: POP
// end ;
5787: PPOPN 2
5789: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
5790: LD_EXP 15
5794: PUSH
5795: LD_EXP 19
5799: AND
5800: IFFALSE 5881
5802: GO 5804
5804: DISABLE
5805: LD_INT 0
5807: PPUSH
5808: PPUSH
// begin enable ;
5809: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
5810: LD_ADDR_VAR 0 2
5814: PUSH
5815: LD_INT 22
5817: PUSH
5818: LD_OWVAR 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 32
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PPUSH
5841: CALL_OW 69
5845: ST_TO_ADDR
// if not tmp then
5846: LD_VAR 0 2
5850: NOT
5851: IFFALSE 5855
// exit ;
5853: GO 5881
// for i in tmp do
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 2
5864: PUSH
5865: FOR_IN
5866: IFFALSE 5879
// begin DestroyUnit ( i ) ;
5868: LD_VAR 0 1
5872: PPUSH
5873: CALL_OW 65
// end ;
5877: GO 5865
5879: POP
5880: POP
// end ;
5881: PPOPN 2
5883: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
5884: LD_EXP 15
5888: PUSH
5889: LD_EXP 16
5893: AND
5894: IFFALSE 5987
5896: GO 5898
5898: DISABLE
5899: LD_INT 0
5901: PPUSH
// begin enable ;
5902: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_INT 22
5910: PUSH
5911: LD_OWVAR 2
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 5
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 25
5935: PUSH
5936: LD_INT 9
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 8
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: CALL_OW 69
5967: PUSH
5968: FOR_IN
5969: IFFALSE 5985
// begin SetClass ( i , 1 ) ;
5971: LD_VAR 0 1
5975: PPUSH
5976: LD_INT 1
5978: PPUSH
5979: CALL_OW 336
// end ;
5983: GO 5968
5985: POP
5986: POP
// end ;
5987: PPOPN 1
5989: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
5990: LD_EXP 15
5994: PUSH
5995: LD_EXP 17
5999: AND
6000: PUSH
6001: LD_OWVAR 65
6005: PUSH
6006: LD_INT 7
6008: LESS
6009: AND
6010: IFFALSE 6024
6012: GO 6014
6014: DISABLE
// begin enable ;
6015: ENABLE
// game_speed := 7 ;
6016: LD_ADDR_OWVAR 65
6020: PUSH
6021: LD_INT 7
6023: ST_TO_ADDR
// end ;
6024: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6025: LD_EXP 15
6029: PUSH
6030: LD_EXP 20
6034: AND
6035: IFFALSE 6237
6037: GO 6039
6039: DISABLE
6040: LD_INT 0
6042: PPUSH
6043: PPUSH
6044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: LD_INT 81
6052: PUSH
6053: LD_OWVAR 2
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 1
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 69
6080: ST_TO_ADDR
// if not tmp then
6081: LD_VAR 0 3
6085: NOT
6086: IFFALSE 6090
// exit ;
6088: GO 6237
// if tmp > 5 then
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 5
6097: GREATER
6098: IFFALSE 6110
// k := 5 else
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: LD_INT 5
6107: ST_TO_ADDR
6108: GO 6120
// k := tmp ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: LD_VAR 0 3
6119: ST_TO_ADDR
// for i := 1 to k do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: DOUBLE
6126: LD_INT 1
6128: DEC
6129: ST_TO_ADDR
6130: LD_VAR 0 2
6134: PUSH
6135: FOR_TO
6136: IFFALSE 6235
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6138: LD_VAR 0 3
6142: PUSH
6143: LD_VAR 0 1
6147: ARRAY
6148: PPUSH
6149: LD_VAR 0 1
6153: PUSH
6154: LD_INT 4
6156: MOD
6157: PUSH
6158: LD_INT 1
6160: PLUS
6161: PPUSH
6162: CALL_OW 259
6166: PUSH
6167: LD_INT 10
6169: LESS
6170: IFFALSE 6233
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6172: LD_VAR 0 3
6176: PUSH
6177: LD_VAR 0 1
6181: ARRAY
6182: PPUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 4
6190: MOD
6191: PUSH
6192: LD_INT 1
6194: PLUS
6195: PPUSH
6196: LD_VAR 0 3
6200: PUSH
6201: LD_VAR 0 1
6205: ARRAY
6206: PPUSH
6207: LD_VAR 0 1
6211: PUSH
6212: LD_INT 4
6214: MOD
6215: PUSH
6216: LD_INT 1
6218: PLUS
6219: PPUSH
6220: CALL_OW 259
6224: PUSH
6225: LD_INT 1
6227: PLUS
6228: PPUSH
6229: CALL_OW 237
6233: GO 6135
6235: POP
6236: POP
// end ;
6237: PPOPN 3
6239: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6240: LD_EXP 15
6244: PUSH
6245: LD_EXP 21
6249: AND
6250: IFFALSE 6270
6252: GO 6254
6254: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6255: LD_INT 4
6257: PPUSH
6258: LD_OWVAR 2
6262: PPUSH
6263: LD_INT 0
6265: PPUSH
6266: CALL_OW 324
6270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6271: LD_EXP 15
6275: PUSH
6276: LD_EXP 22
6280: AND
6281: IFFALSE 6380
6283: GO 6285
6285: DISABLE
6286: LD_INT 0
6288: PPUSH
6289: PPUSH
// begin enable ;
6290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6291: LD_ADDR_VAR 0 2
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_OWVAR 2
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 34
6313: PUSH
6314: LD_INT 11
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 34
6323: PUSH
6324: LD_INT 30
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PPUSH
6340: CALL_OW 69
6344: ST_TO_ADDR
// if not tmp then
6345: LD_VAR 0 2
6349: NOT
6350: IFFALSE 6354
// exit ;
6352: GO 6380
// for i in tmp do
6354: LD_ADDR_VAR 0 1
6358: PUSH
6359: LD_VAR 0 2
6363: PUSH
6364: FOR_IN
6365: IFFALSE 6378
// begin DestroyUnit ( i ) ;
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL_OW 65
// end ;
6376: GO 6364
6378: POP
6379: POP
// end ;
6380: PPOPN 2
6382: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6383: LD_EXP 15
6387: PUSH
6388: LD_EXP 23
6392: AND
6393: IFFALSE 6413
6395: GO 6397
6397: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6398: LD_INT 32
6400: PPUSH
6401: LD_OWVAR 2
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 324
6413: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6414: LD_EXP 15
6418: PUSH
6419: LD_EXP 24
6423: AND
6424: IFFALSE 6605
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
6433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_OWVAR 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 33
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 69
6469: ST_TO_ADDR
// if not tmp then
6470: LD_VAR 0 2
6474: NOT
6475: IFFALSE 6479
// exit ;
6477: GO 6605
// side := 0 ;
6479: LD_ADDR_VAR 0 3
6483: PUSH
6484: LD_INT 0
6486: ST_TO_ADDR
// for i := 1 to 8 do
6487: LD_ADDR_VAR 0 1
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_INT 8
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6549
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6503: LD_OWVAR 2
6507: PUSH
6508: LD_VAR 0 1
6512: NONEQUAL
6513: PUSH
6514: LD_OWVAR 2
6518: PPUSH
6519: LD_VAR 0 1
6523: PPUSH
6524: CALL_OW 81
6528: PUSH
6529: LD_INT 2
6531: EQUAL
6532: AND
6533: IFFALSE 6547
// begin side := i ;
6535: LD_ADDR_VAR 0 3
6539: PUSH
6540: LD_VAR 0 1
6544: ST_TO_ADDR
// break ;
6545: GO 6549
// end ;
6547: GO 6500
6549: POP
6550: POP
// if not side then
6551: LD_VAR 0 3
6555: NOT
6556: IFFALSE 6560
// exit ;
6558: GO 6605
// for i := 1 to tmp do
6560: LD_ADDR_VAR 0 1
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_VAR 0 2
6574: PUSH
6575: FOR_TO
6576: IFFALSE 6603
// if Prob ( 30 ) then
6578: LD_INT 30
6580: PPUSH
6581: CALL_OW 13
6585: IFFALSE 6601
// SetSide ( i , side ) ;
6587: LD_VAR 0 1
6591: PPUSH
6592: LD_VAR 0 3
6596: PPUSH
6597: CALL_OW 235
6601: GO 6575
6603: POP
6604: POP
// end ;
6605: PPOPN 3
6607: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6608: LD_EXP 15
6612: PUSH
6613: LD_EXP 26
6617: AND
6618: IFFALSE 6737
6620: GO 6622
6622: DISABLE
6623: LD_INT 0
6625: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_OWVAR 2
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 21
6645: PUSH
6646: LD_INT 1
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 23
6658: PUSH
6659: LD_INT 0
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PPUSH
6675: CALL_OW 69
6679: PUSH
6680: FOR_IN
6681: IFFALSE 6735
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 257
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: LD_INT 2
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 4
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: IN
6711: IFFALSE 6733
// SetClass ( un , rand ( 1 , 4 ) ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_INT 1
6720: PPUSH
6721: LD_INT 4
6723: PPUSH
6724: CALL_OW 12
6728: PPUSH
6729: CALL_OW 336
6733: GO 6680
6735: POP
6736: POP
// end ;
6737: PPOPN 1
6739: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
6740: LD_EXP 15
6744: PUSH
6745: LD_EXP 25
6749: AND
6750: IFFALSE 6829
6752: GO 6754
6754: DISABLE
6755: LD_INT 0
6757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6758: LD_ADDR_VAR 0 1
6762: PUSH
6763: LD_INT 22
6765: PUSH
6766: LD_OWVAR 2
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 21
6777: PUSH
6778: LD_INT 3
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: ST_TO_ADDR
// if not tmp then
6794: LD_VAR 0 1
6798: NOT
6799: IFFALSE 6803
// exit ;
6801: GO 6829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
6803: LD_VAR 0 1
6807: PUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 12
6820: ARRAY
6821: PPUSH
6822: LD_INT 100
6824: PPUSH
6825: CALL_OW 234
// end ;
6829: PPOPN 1
6831: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
6832: LD_EXP 15
6836: PUSH
6837: LD_EXP 27
6841: AND
6842: IFFALSE 6940
6844: GO 6846
6846: DISABLE
6847: LD_INT 0
6849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
6850: LD_ADDR_VAR 0 1
6854: PUSH
6855: LD_INT 22
6857: PUSH
6858: LD_OWVAR 2
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 21
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: ST_TO_ADDR
// if not tmp then
6886: LD_VAR 0 1
6890: NOT
6891: IFFALSE 6895
// exit ;
6893: GO 6940
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
6895: LD_VAR 0 1
6899: PUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: CALL_OW 12
6912: ARRAY
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: CALL_OW 12
6924: PPUSH
6925: LD_INT 3000
6927: PPUSH
6928: LD_INT 9000
6930: PPUSH
6931: CALL_OW 12
6935: PPUSH
6936: CALL_OW 492
// end ;
6940: PPOPN 1
6942: END
// every 0 0$1 trigger StreamModeActive and sDepot do
6943: LD_EXP 15
6947: PUSH
6948: LD_EXP 28
6952: AND
6953: IFFALSE 6973
6955: GO 6957
6957: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
6958: LD_INT 1
6960: PPUSH
6961: LD_OWVAR 2
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 324
6973: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
6974: LD_EXP 15
6978: PUSH
6979: LD_EXP 29
6983: AND
6984: IFFALSE 7067
6986: GO 6988
6988: DISABLE
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_OWVAR 2
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 21
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// if not tmp then
7029: LD_VAR 0 2
7033: NOT
7034: IFFALSE 7038
// exit ;
7036: GO 7067
// for i in tmp do
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_VAR 0 2
7047: PUSH
7048: FOR_IN
7049: IFFALSE 7065
// SetBLevel ( i , 10 ) ;
7051: LD_VAR 0 1
7055: PPUSH
7056: LD_INT 10
7058: PPUSH
7059: CALL_OW 241
7063: GO 7048
7065: POP
7066: POP
// end ;
7067: PPOPN 2
7069: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
7070: LD_EXP 15
7074: PUSH
7075: LD_EXP 30
7079: AND
7080: IFFALSE 7183
7082: GO 7084
7084: DISABLE
7085: LD_INT 0
7087: PPUSH
7088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: LD_INT 22
7096: PUSH
7097: LD_OWVAR 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 25
7108: PUSH
7109: LD_INT 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: ST_TO_ADDR
// if not tmp then
7125: LD_VAR 0 2
7129: NOT
7130: IFFALSE 7134
// exit ;
7132: GO 7183
// for i in tmp do
7134: LD_ADDR_VAR 0 1
7138: PUSH
7139: LD_VAR 0 2
7143: PUSH
7144: FOR_IN
7145: IFFALSE 7181
// begin if Crawls ( i ) then
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 318
7156: IFFALSE 7167
// ComWalk ( i ) ;
7158: LD_VAR 0 1
7162: PPUSH
7163: CALL_OW 138
// SetClass ( i , 4 ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 4
7174: PPUSH
7175: CALL_OW 336
// end ;
7179: GO 7144
7181: POP
7182: POP
// end ;
7183: PPOPN 2
7185: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
7186: LD_EXP 15
7190: PUSH
7191: LD_EXP 31
7195: AND
7196: PUSH
7197: LD_OWVAR 67
7201: PUSH
7202: LD_INT 3
7204: LESS
7205: AND
7206: IFFALSE 7225
7208: GO 7210
7210: DISABLE
// Difficulty := Difficulty + 1 ;
7211: LD_ADDR_OWVAR 67
7215: PUSH
7216: LD_OWVAR 67
7220: PUSH
7221: LD_INT 1
7223: PLUS
7224: ST_TO_ADDR
7225: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7226: LD_EXP 15
7230: PUSH
7231: LD_EXP 32
7235: AND
7236: IFFALSE 7339
7238: GO 7240
7240: DISABLE
7241: LD_INT 0
7243: PPUSH
// begin for i := 1 to 5 do
7244: LD_ADDR_VAR 0 1
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_INT 5
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7337
// begin uc_nation := nation_nature ;
7260: LD_ADDR_OWVAR 21
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// uc_side := 0 ;
7268: LD_ADDR_OWVAR 20
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7276: LD_ADDR_OWVAR 29
7280: PUSH
7281: LD_INT 12
7283: PUSH
7284: LD_INT 12
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: ST_TO_ADDR
// hc_agressivity := 20 ;
7291: LD_ADDR_OWVAR 35
7295: PUSH
7296: LD_INT 20
7298: ST_TO_ADDR
// hc_class := class_tiger ;
7299: LD_ADDR_OWVAR 28
7303: PUSH
7304: LD_INT 14
7306: ST_TO_ADDR
// hc_gallery :=  ;
7307: LD_ADDR_OWVAR 33
7311: PUSH
7312: LD_STRING 
7314: ST_TO_ADDR
// hc_name :=  ;
7315: LD_ADDR_OWVAR 26
7319: PUSH
7320: LD_STRING 
7322: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7323: CALL_OW 44
7327: PPUSH
7328: LD_INT 0
7330: PPUSH
7331: CALL_OW 51
// end ;
7335: GO 7257
7337: POP
7338: POP
// end ;
7339: PPOPN 1
7341: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
7342: LD_EXP 15
7346: PUSH
7347: LD_EXP 33
7351: AND
7352: IFFALSE 7526
7354: GO 7356
7356: DISABLE
7357: LD_INT 0
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
// begin result := false ;
7363: LD_ADDR_VAR 0 4
7367: PUSH
7368: LD_INT 0
7370: ST_TO_ADDR
// for i := 1 to 8 do
7371: LD_ADDR_VAR 0 1
7375: PUSH
7376: DOUBLE
7377: LD_INT 1
7379: DEC
7380: ST_TO_ADDR
7381: LD_INT 8
7383: PUSH
7384: FOR_TO
7385: IFFALSE 7496
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_INT 10
7394: PUSH
7395: LD_INT 50
7397: PUSH
7398: LD_INT 90
7400: PUSH
7401: LD_INT 140
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 1
7412: PPUSH
7413: LD_INT 4
7415: PPUSH
7416: CALL_OW 12
7420: ARRAY
7421: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
7422: LD_ADDR_VAR 0 3
7426: PUSH
7427: LD_INT 10
7429: PUSH
7430: LD_INT 50
7432: PUSH
7433: LD_INT 90
7435: PUSH
7436: LD_INT 140
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 4
7450: PPUSH
7451: CALL_OW 12
7455: ARRAY
7456: ST_TO_ADDR
// if ValidHex ( x , y ) then
7457: LD_VAR 0 2
7461: PPUSH
7462: LD_VAR 0 3
7466: PPUSH
7467: CALL_OW 488
7471: IFFALSE 7494
// begin result := [ x , y ] ;
7473: LD_ADDR_VAR 0 4
7477: PUSH
7478: LD_VAR 0 2
7482: PUSH
7483: LD_VAR 0 3
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: ST_TO_ADDR
// break ;
7492: GO 7496
// end ; end ;
7494: GO 7384
7496: POP
7497: POP
// if result then
7498: LD_VAR 0 4
7502: IFFALSE 7526
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7504: LD_VAR 0 4
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: LD_VAR 0 4
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 429
// end ;
7526: PPOPN 4
7528: END
// every 0 0$1 trigger StreamModeActive and sReset do
7529: LD_EXP 15
7533: PUSH
7534: LD_EXP 35
7538: AND
7539: IFFALSE 7551
7541: GO 7543
7543: DISABLE
// YouLost (  ) ;
7544: LD_STRING 
7546: PPUSH
7547: CALL_OW 104
7551: END
// every 0 0$1 trigger StreamModeActive and sFog do
7552: LD_EXP 15
7556: PUSH
7557: LD_EXP 34
7561: AND
7562: IFFALSE 7576
7564: GO 7566
7566: DISABLE
// FogOff ( your_side ) ;
7567: LD_OWVAR 2
7571: PPUSH
7572: CALL_OW 344
7576: END
// every 0 0$1 trigger StreamModeActive and sSun do
7577: LD_EXP 15
7581: PUSH
7582: LD_EXP 36
7586: AND
7587: IFFALSE 7615
7589: GO 7591
7591: DISABLE
// begin solar_recharge_percent := 0 ;
7592: LD_ADDR_OWVAR 79
7596: PUSH
7597: LD_INT 0
7599: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7600: LD_INT 10500
7602: PPUSH
7603: CALL_OW 67
// solar_recharge_percent := 100 ;
7607: LD_ADDR_OWVAR 79
7611: PUSH
7612: LD_INT 100
7614: ST_TO_ADDR
// end ;
7615: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un ;
7616: LD_EXP 15
7620: PUSH
7621: LD_EXP 37
7625: AND
7626: IFFALSE 7781
7628: GO 7630
7630: DISABLE
7631: LD_INT 0
7633: PPUSH
7634: PPUSH
// begin for i := 1 to 6 do
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: DOUBLE
7641: LD_INT 1
7643: DEC
7644: ST_TO_ADDR
7645: LD_INT 6
7647: PUSH
7648: FOR_TO
7649: IFFALSE 7779
// begin uc_nation := nation_nature ;
7651: LD_ADDR_OWVAR 21
7655: PUSH
7656: LD_INT 0
7658: ST_TO_ADDR
// uc_side := 0 ;
7659: LD_ADDR_OWVAR 20
7663: PUSH
7664: LD_INT 0
7666: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7667: LD_ADDR_OWVAR 29
7671: PUSH
7672: LD_INT 12
7674: PUSH
7675: LD_INT 12
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: ST_TO_ADDR
// hc_agressivity := 20 ;
7682: LD_ADDR_OWVAR 35
7686: PUSH
7687: LD_INT 20
7689: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
7690: LD_ADDR_OWVAR 28
7694: PUSH
7695: LD_INT 17
7697: ST_TO_ADDR
// hc_gallery :=  ;
7698: LD_ADDR_OWVAR 33
7702: PUSH
7703: LD_STRING 
7705: ST_TO_ADDR
// hc_name :=  ;
7706: LD_ADDR_OWVAR 26
7710: PUSH
7711: LD_STRING 
7713: ST_TO_ADDR
// un := CreateHuman ;
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: CALL_OW 44
7723: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
7724: LD_VAR 0 2
7728: PPUSH
7729: LD_INT 1
7731: PPUSH
7732: CALL_OW 51
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_INT 3
7743: PUSH
7744: LD_INT 22
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PPUSH
7758: CALL_OW 69
7762: PPUSH
7763: LD_VAR 0 2
7767: PPUSH
7768: CALL_OW 74
7772: PPUSH
7773: CALL_OW 115
// end ;
7777: GO 7648
7779: POP
7780: POP
// end ;
7781: PPOPN 2
7783: END
// every 0 0$1 trigger StreamModeActive and sTroll do
7784: LD_EXP 15
7788: PUSH
7789: LD_EXP 38
7793: AND
7794: IFFALSE 7820
7796: GO 7798
7798: DISABLE
// begin ToLua ( displayTroll(); ) ;
7799: LD_STRING displayTroll();
7801: PPUSH
7802: CALL_OW 559
// wait ( 3 3$00 ) ;
7806: LD_INT 6300
7808: PPUSH
7809: CALL_OW 67
// ToLua ( hideTroll(); ) ;
7813: LD_STRING hideTroll();
7815: PPUSH
7816: CALL_OW 559
// end ;
7820: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
7821: LD_EXP 15
7825: PUSH
7826: LD_EXP 39
7830: AND
7831: IFFALSE 7894
7833: GO 7835
7835: DISABLE
7836: LD_INT 0
7838: PPUSH
// begin p := 0 ;
7839: LD_ADDR_VAR 0 1
7843: PUSH
7844: LD_INT 0
7846: ST_TO_ADDR
// repeat game_speed := 1 ;
7847: LD_ADDR_OWVAR 65
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7855: LD_INT 35
7857: PPUSH
7858: CALL_OW 67
// p := p + 1 ;
7862: LD_ADDR_VAR 0 1
7866: PUSH
7867: LD_VAR 0 1
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: ST_TO_ADDR
// until p >= 60 ;
7876: LD_VAR 0 1
7880: PUSH
7881: LD_INT 60
7883: GREATEREQUAL
7884: IFFALSE 7847
// game_speed := 4 ;
7886: LD_ADDR_OWVAR 65
7890: PUSH
7891: LD_INT 4
7893: ST_TO_ADDR
// end ;
7894: PPOPN 1
7896: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
7897: LD_EXP 15
7901: PUSH
7902: LD_EXP 40
7906: AND
7907: IFFALSE 8053
7909: GO 7911
7911: DISABLE
7912: LD_INT 0
7914: PPUSH
7915: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7916: LD_ADDR_VAR 0 1
7920: PUSH
7921: LD_INT 22
7923: PUSH
7924: LD_OWVAR 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 2
7935: PUSH
7936: LD_INT 30
7938: PUSH
7939: LD_INT 0
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 30
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 69
7969: ST_TO_ADDR
// if not depot then
7970: LD_VAR 0 1
7974: NOT
7975: IFFALSE 7979
// exit ;
7977: GO 8053
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: LD_VAR 0 1
7988: PUSH
7989: LD_INT 1
7991: PPUSH
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 12
8001: ARRAY
8002: PPUSH
8003: CALL_OW 274
8007: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8023: LD_VAR 0 2
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8038: LD_VAR 0 2
8042: PPUSH
8043: LD_INT 3
8045: PPUSH
8046: LD_INT 0
8048: PPUSH
8049: CALL_OW 277
// end ;
8053: PPOPN 2
8055: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8056: LD_EXP 15
8060: PUSH
8061: LD_EXP 41
8065: AND
8066: IFFALSE 8163
8068: GO 8070
8070: DISABLE
8071: LD_INT 0
8073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8074: LD_ADDR_VAR 0 1
8078: PUSH
8079: LD_INT 22
8081: PUSH
8082: LD_OWVAR 2
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 21
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 3
8103: PUSH
8104: LD_INT 23
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 69
8127: ST_TO_ADDR
// if not tmp then
8128: LD_VAR 0 1
8132: NOT
8133: IFFALSE 8137
// exit ;
8135: GO 8163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8137: LD_VAR 0 1
8141: PUSH
8142: LD_INT 1
8144: PPUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 12
8154: ARRAY
8155: PPUSH
8156: LD_INT 200
8158: PPUSH
8159: CALL_OW 234
// end ;
8163: PPOPN 1
8165: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8166: LD_EXP 15
8170: PUSH
8171: LD_EXP 42
8175: AND
8176: IFFALSE 8255
8178: GO 8180
8180: DISABLE
8181: LD_INT 0
8183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8184: LD_ADDR_VAR 0 1
8188: PUSH
8189: LD_INT 22
8191: PUSH
8192: LD_OWVAR 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 21
8203: PUSH
8204: LD_INT 2
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PPUSH
8215: CALL_OW 69
8219: ST_TO_ADDR
// if not tmp then
8220: LD_VAR 0 1
8224: NOT
8225: IFFALSE 8229
// exit ;
8227: GO 8255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 10 ) ;
8229: LD_VAR 0 1
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_VAR 0 1
8241: PPUSH
8242: CALL_OW 12
8246: ARRAY
8247: PPUSH
8248: LD_INT 10
8250: PPUSH
8251: CALL_OW 234
// end ;
8255: PPOPN 1
8257: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8258: LD_EXP 15
8262: PUSH
8263: LD_EXP 43
8267: AND
8268: IFFALSE 8367
8270: GO 8272
8272: DISABLE
8273: LD_INT 0
8275: PPUSH
8276: PPUSH
// begin enable ;
8277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8278: LD_ADDR_VAR 0 1
8282: PUSH
8283: LD_INT 22
8285: PUSH
8286: LD_OWVAR 2
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 61
8297: PUSH
8298: EMPTY
8299: LIST
8300: PUSH
8301: LD_INT 33
8303: PUSH
8304: LD_INT 2
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 69
8320: ST_TO_ADDR
// if not tmp then
8321: LD_VAR 0 1
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8367
// for i in tmp do
8330: LD_ADDR_VAR 0 2
8334: PUSH
8335: LD_VAR 0 1
8339: PUSH
8340: FOR_IN
8341: IFFALSE 8365
// if IsControledBy ( i ) then
8343: LD_VAR 0 2
8347: PPUSH
8348: CALL_OW 312
8352: IFFALSE 8363
// ComUnlink ( i ) ;
8354: LD_VAR 0 2
8358: PPUSH
8359: CALL_OW 136
8363: GO 8340
8365: POP
8366: POP
// end ;
8367: PPOPN 2
8369: END
