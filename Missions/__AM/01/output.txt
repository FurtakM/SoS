// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3754 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3611 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 43 , 39 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 43
 322: PPUSH
 323: LD_INT 39
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// ComMoveXY ( off , 49 , 41 ) ;
 511: LD_LOC 10
 515: PPUSH
 516: LD_INT 49
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// wait ( 0 0$3 ) ;
 526: LD_INT 105
 528: PPUSH
 529: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 533: LD_LOC 10
 537: PPUSH
 538: LD_STRING DX1-Off-1
 540: PPUSH
 541: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 545: LD_LOC 10
 549: PPUSH
 550: LD_INT 51
 552: PPUSH
 553: LD_INT 38
 555: PPUSH
 556: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 560: LD_LOC 3
 564: PPUSH
 565: LD_INT 50
 567: PPUSH
 568: LD_INT 39
 570: PPUSH
 571: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 575: LD_LOC 6
 579: PPUSH
 580: LD_INT 51
 582: PPUSH
 583: LD_INT 40
 585: PPUSH
 586: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 590: LD_LOC 7
 594: PPUSH
 595: LD_INT 52
 597: PPUSH
 598: LD_INT 41
 600: PPUSH
 601: CALL_OW 111
// wait ( 0 0$1 ) ;
 605: LD_INT 35
 607: PPUSH
 608: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 612: LD_LOC 5
 616: PPUSH
 617: LD_INT 50
 619: PPUSH
 620: LD_INT 40
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 627: LD_LOC 8
 631: PPUSH
 632: LD_INT 51
 634: PPUSH
 635: LD_INT 41
 637: PPUSH
 638: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 642: LD_LOC 9
 646: PPUSH
 647: LD_INT 52
 649: PPUSH
 650: LD_INT 42
 652: PPUSH
 653: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 657: LD_LOC 10
 661: PPUSH
 662: LD_INT 50
 664: PPUSH
 665: LD_INT 47
 667: PPUSH
 668: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 672: LD_LOC 3
 676: PPUSH
 677: LD_INT 65
 679: PPUSH
 680: LD_INT 25
 682: PPUSH
 683: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 687: LD_LOC 6
 691: PPUSH
 692: LD_INT 65
 694: PPUSH
 695: LD_INT 25
 697: PPUSH
 698: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 702: LD_LOC 7
 706: PPUSH
 707: LD_INT 65
 709: PPUSH
 710: LD_INT 25
 712: PPUSH
 713: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 717: LD_LOC 5
 721: PPUSH
 722: LD_INT 65
 724: PPUSH
 725: LD_INT 25
 727: PPUSH
 728: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 732: LD_LOC 8
 736: PPUSH
 737: LD_INT 65
 739: PPUSH
 740: LD_INT 25
 742: PPUSH
 743: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 747: LD_LOC 9
 751: PPUSH
 752: LD_INT 65
 754: PPUSH
 755: LD_INT 25
 757: PPUSH
 758: CALL_OW 178
// wait ( 0 0$2 ) ;
 762: LD_INT 70
 764: PPUSH
 765: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 769: LD_LOC 10
 773: PPUSH
 774: LD_STRING DX1-Off-1a
 776: PPUSH
 777: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 781: LD_LOC 11
 785: PPUSH
 786: LD_INT 75
 788: PPUSH
 789: LD_INT 36
 791: PPUSH
 792: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 796: LD_LOC 10
 800: PPUSH
 801: LD_INT 71
 803: PPUSH
 804: LD_INT 34
 806: PPUSH
 807: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 811: LD_LOC 3
 815: PPUSH
 816: LD_INT 53
 818: PPUSH
 819: LD_INT 44
 821: PPUSH
 822: CALL_OW 111
// commovexy ( joan , 52 , 43 ) ;
 826: LD_LOC 4
 830: PPUSH
 831: LD_INT 52
 833: PPUSH
 834: LD_INT 43
 836: PPUSH
 837: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 841: LD_LOC 3
 845: PPUSH
 846: LD_LOC 4
 850: PPUSH
 851: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 855: LD_LOC 4
 859: PPUSH
 860: LD_LOC 3
 864: PPUSH
 865: CALL_OW 179
// wait ( 0 0$7 ) ;
 869: LD_INT 245
 871: PPUSH
 872: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 876: LD_LOC 3
 880: PPUSH
 881: LD_STRING DX1-JMM-1
 883: PPUSH
 884: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 888: LD_LOC 4
 892: PPUSH
 893: LD_STRING DX1-Joan-1
 895: PPUSH
 896: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 900: LD_LOC 3
 904: PPUSH
 905: LD_STRING DX1-JMM-2
 907: PPUSH
 908: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 912: LD_LOC 4
 916: PPUSH
 917: LD_STRING DX1-Joan-2
 919: PPUSH
 920: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 924: LD_LOC 3
 928: PPUSH
 929: LD_STRING DX1-JMM-3
 931: PPUSH
 932: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 936: LD_LOC 4
 940: PPUSH
 941: LD_STRING DX1-Joan-3
 943: PPUSH
 944: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 948: LD_LOC 3
 952: PPUSH
 953: LD_STRING DX1-JMM-4
 955: PPUSH
 956: CALL_OW 88
// follow = true ;
 960: LD_ADDR_LOC 20
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
 968: LD_INT 10
 970: PPUSH
 971: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 975: LD_STRING M0
 977: PPUSH
 978: CALL_OW 337
// ingame_video = false ;
 982: LD_ADDR_OWVAR 52
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// interface_hidden = false ;
 990: LD_ADDR_OWVAR 54
 994: PUSH
 995: LD_INT 0
 997: ST_TO_ADDR
// wait ( 0 0$1 ) ;
 998: LD_INT 35
1000: PPUSH
1001: CALL_OW 67
// wait ( 0 0$1 ) ;
1005: LD_INT 35
1007: PPUSH
1008: CALL_OW 67
// enable ( 01 ) ;
1012: LD_INT 1
1014: ENABLE_MARKED
// enable ( 02 ) ;
1015: LD_INT 2
1017: ENABLE_MARKED
// enable ( 03 ) ;
1018: LD_INT 3
1020: ENABLE_MARKED
// enable ( 04 ) ;
1021: LD_INT 4
1023: ENABLE_MARKED
// enable ( 05 ) ;
1024: LD_INT 5
1026: ENABLE_MARKED
// end ;
1027: END
// every 3 + 1 trigger isselected ( others ^ allmen ^ [ joan , off ] ) marked 02 do
1028: LD_LOC 11
1032: PUSH
1033: LD_EXP 14
1037: ADD
1038: PUSH
1039: LD_LOC 4
1043: PUSH
1044: LD_LOC 10
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ADD
1053: PPUSH
1054: CALL_OW 306
1058: IFFALSE 1070
1060: GO 1062
1062: DISABLE
// hint ( NPC ) ;
1063: LD_STRING NPC
1065: PPUSH
1066: CALL_OW 339
1070: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
1071: LD_LOC 3
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: CALL_OW 308
1083: IFFALSE 1095
1085: GO 1087
1087: DISABLE
// hint ( Visibility ) ;
1088: LD_STRING Visibility
1090: PPUSH
1091: CALL_OW 339
1095: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1096: LD_LOC 16
1100: NOT
1101: PUSH
1102: LD_LOC 20
1106: AND
1107: IFFALSE 1400
1109: GO 1111
1111: DISABLE
1112: LD_INT 0
1114: PPUSH
1115: PPUSH
1116: PPUSH
1117: PPUSH
1118: PPUSH
1119: PPUSH
1120: PPUSH
1121: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1122: LD_ADDR_VAR 0 1
1126: PUSH
1127: LD_LOC 3
1131: PPUSH
1132: LD_LOC 4
1136: PPUSH
1137: CALL_OW 296
1141: ST_TO_ADDR
// x = getx ( john ) ;
1142: LD_ADDR_VAR 0 4
1146: PUSH
1147: LD_LOC 3
1151: PPUSH
1152: CALL_OW 250
1156: ST_TO_ADDR
// y = gety ( john ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_LOC 3
1166: PPUSH
1167: CALL_OW 251
1171: ST_TO_ADDR
// tmp2 = [ ] ;
1172: LD_ADDR_VAR 0 2
1176: PUSH
1177: EMPTY
1178: ST_TO_ADDR
// tmp3 = [ ] ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: EMPTY
1185: ST_TO_ADDR
// if tmp >= 7 then
1186: LD_VAR 0 1
1190: PUSH
1191: LD_INT 7
1193: GREATEREQUAL
1194: IFFALSE 1399
// begin for dir = 0 to 5 do
1196: LD_ADDR_VAR 0 8
1200: PUSH
1201: DOUBLE
1202: LD_INT 0
1204: DEC
1205: ST_TO_ADDR
1206: LD_INT 5
1208: PUSH
1209: FOR_TO
1210: IFFALSE 1350
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1212: LD_ADDR_VAR 0 6
1216: PUSH
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_VAR 0 8
1226: PPUSH
1227: LD_VAR 0 1
1231: PUSH
1232: LD_INT 2
1234: MINUS
1235: PPUSH
1236: CALL_OW 272
1240: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1241: LD_ADDR_VAR 0 7
1245: PUSH
1246: LD_VAR 0 5
1250: PPUSH
1251: LD_VAR 0 8
1255: PPUSH
1256: LD_VAR 0 1
1260: PUSH
1261: LD_INT 2
1263: MINUS
1264: PPUSH
1265: CALL_OW 273
1269: ST_TO_ADDR
// if ValidHex ( px , py ) then
1270: LD_VAR 0 6
1274: PPUSH
1275: LD_VAR 0 7
1279: PPUSH
1280: CALL_OW 488
1284: IFFALSE 1348
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1286: LD_ADDR_VAR 0 2
1290: PUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_VAR 0 6
1300: PUSH
1301: LD_VAR 0 7
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: EMPTY
1311: LIST
1312: ADD
1313: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1314: LD_ADDR_VAR 0 3
1318: PUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_LOC 4
1328: PPUSH
1329: LD_VAR 0 6
1333: PPUSH
1334: LD_VAR 0 7
1338: PPUSH
1339: CALL_OW 297
1343: PUSH
1344: EMPTY
1345: LIST
1346: ADD
1347: ST_TO_ADDR
// end end ;
1348: GO 1209
1350: POP
1351: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1352: LD_ADDR_VAR 0 1
1356: PUSH
1357: LD_VAR 0 2
1361: PPUSH
1362: LD_VAR 0 3
1366: PPUSH
1367: CALL_OW 79
1371: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1372: LD_LOC 4
1376: PPUSH
1377: LD_VAR 0 1
1381: PUSH
1382: LD_INT 1
1384: ARRAY
1385: PPUSH
1386: LD_VAR 0 1
1390: PUSH
1391: LD_INT 2
1393: ARRAY
1394: PPUSH
1395: CALL_OW 111
// end ; enable ;
1399: ENABLE
// end ;
1400: PPOPN 8
1402: END
// on destinationunreachable ( un ) do if un = joan then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_LOC 4
1412: EQUAL
1413: IFFALSE 1444
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1415: LD_LOC 4
1419: PPUSH
1420: LD_LOC 3
1424: PPUSH
1425: CALL_OW 250
1429: PPUSH
1430: LD_LOC 3
1434: PPUSH
1435: CALL_OW 251
1439: PPUSH
1440: CALL_OW 111
1444: PPOPN 1
1446: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1447: LD_LOC 3
1451: PPUSH
1452: CALL_OW 318
1456: IFFALSE 1487
1458: GO 1460
1460: DISABLE
// begin if not killhim then
1461: LD_LOC 16
1465: NOT
1466: IFFALSE 1480
// say ( joan , DXComments-Joan-1 ) ;
1468: LD_LOC 4
1472: PPUSH
1473: LD_STRING DXComments-Joan-1
1475: PPUSH
1476: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1480: LD_STRING ACH_TROLL
1482: PPUSH
1483: CALL_OW 543
// end ;
1487: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1488: LD_LOC 3
1492: PPUSH
1493: LD_INT 2
1495: PPUSH
1496: CALL_OW 308
1500: IFFALSE 1524
1502: GO 1504
1504: DISABLE
// begin if not killhim then
1505: LD_LOC 16
1509: NOT
1510: IFFALSE 1524
// say ( joan , DXComments-Joan-1a ) ;
1512: LD_LOC 4
1516: PPUSH
1517: LD_STRING DXComments-Joan-1a
1519: PPUSH
1520: CALL_OW 88
// end ;
1524: END
// every 0 0$1 + 1 1$10 marked 29 do
1525: GO 1527
1527: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1528: LD_LOC 3
1532: PPUSH
1533: LD_INT 3
1535: PPUSH
1536: CALL_OW 308
1540: NOT
1541: IFFALSE 1564
// begin if not killhim then
1543: LD_LOC 16
1547: NOT
1548: IFFALSE 1562
// say ( joan , DXComments-Joan-1b ) ;
1550: LD_LOC 4
1554: PPUSH
1555: LD_STRING DXComments-Joan-1b
1557: PPUSH
1558: CALL_OW 88
// end else
1562: GO 1565
// enable ;
1564: ENABLE
// end ;
1565: END
// every 0 0$0.3 trigger not killhim marked 097 do
1566: LD_LOC 16
1570: NOT
1571: IFFALSE 2087
1573: GO 1575
1575: DISABLE
// begin if joanok then
1576: LD_LOC 13
1580: IFFALSE 1755
// if getlives ( joan ) < 1000 then
1582: LD_LOC 4
1586: PPUSH
1587: CALL_OW 256
1591: PUSH
1592: LD_INT 1000
1594: LESS
1595: IFFALSE 1755
// begin if debug then
1597: LD_LOC 19
1601: IFFALSE 1621
// msg ( joan:  & getlives ( joan ) ) ;
1603: LD_STRING joan: 
1605: PUSH
1606: LD_LOC 4
1610: PPUSH
1611: CALL_OW 256
1615: STR
1616: PPUSH
1617: CALL_OW 100
// comhold ( joan ) ;
1621: LD_LOC 4
1625: PPUSH
1626: CALL_OW 140
// dialogueon ;
1630: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1634: LD_LOC 4
1638: PPUSH
1639: LD_STRING DXAttack-Joan-1
1641: PPUSH
1642: CALL_OW 88
// killhim = true ;
1646: LD_ADDR_LOC 16
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// music_class = 1 ;
1654: LD_ADDR_OWVAR 72
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1662: LD_LOC 4
1666: PPUSH
1667: LD_LOC 5
1671: PPUSH
1672: CALL_OW 250
1676: PPUSH
1677: LD_LOC 5
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: CALL_OW 111
// wait ( 0 0$1 ) ;
1691: LD_INT 35
1693: PPUSH
1694: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1698: LD_LOC 1
1702: PPUSH
1703: LD_LOC 2
1707: PPUSH
1708: LD_INT 2
1710: PPUSH
1711: LD_INT 1
1713: PPUSH
1714: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1718: LD_LOC 11
1722: PUSH
1723: LD_LOC 10
1727: PUSH
1728: LD_EXP 1
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: ADD
1737: PPUSH
1738: LD_LOC 3
1742: PPUSH
1743: CALL_OW 115
// joanok = false ;
1747: LD_ADDR_LOC 13
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// end ; if oothersok then
1755: LD_LOC 14
1759: IFFALSE 1954
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1761: LD_LOC 11
1765: PUSH
1766: LD_LOC 10
1770: PUSH
1771: LD_EXP 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: ADD
1780: PPUSH
1781: CALL_OW 256
1785: PUSH
1786: LD_INT 1000
1788: LESS
1789: IFFALSE 1954
// begin if debug then
1791: LD_LOC 19
1795: IFFALSE 1824
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1797: LD_STRING others+off: 
1799: PUSH
1800: LD_LOC 11
1804: PUSH
1805: LD_LOC 10
1809: PUSH
1810: EMPTY
1811: LIST
1812: ADD
1813: PPUSH
1814: CALL_OW 256
1818: STR
1819: PPUSH
1820: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1824: LD_LOC 11
1828: PUSH
1829: LD_LOC 10
1833: PUSH
1834: EMPTY
1835: LIST
1836: ADD
1837: PPUSH
1838: CALL_OW 140
// dialogueon ;
1842: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1846: LD_LOC 4
1850: PPUSH
1851: LD_STRING DXAttack-Joan-1a
1853: PPUSH
1854: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1858: LD_INT 24
1860: PPUSH
1861: CALL_OW 67
// killhim = true ;
1865: LD_ADDR_LOC 16
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// music_class = 1 ;
1873: LD_ADDR_OWVAR 72
1877: PUSH
1878: LD_INT 1
1880: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1881: LD_LOC 5
1885: PPUSH
1886: LD_STRING DXAttack-Sik-1
1888: PPUSH
1889: CALL_OW 88
// dialogueoff ;
1893: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1897: LD_LOC 1
1901: PPUSH
1902: LD_LOC 2
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1917: LD_LOC 11
1921: PUSH
1922: LD_LOC 10
1926: PUSH
1927: LD_EXP 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: ADD
1936: PPUSH
1937: LD_LOC 3
1941: PPUSH
1942: CALL_OW 115
// oothersok = false ;
1946: LD_ADDR_LOC 14
1950: PUSH
1951: LD_INT 0
1953: ST_TO_ADDR
// end ; if buildingsok then
1954: LD_LOC 15
1958: IFFALSE 2079
// if getlives ( budovy ) < 1000 then
1960: LD_LOC 12
1964: PPUSH
1965: CALL_OW 256
1969: PUSH
1970: LD_INT 1000
1972: LESS
1973: IFFALSE 2079
// begin if debug then
1975: LD_LOC 19
1979: IFFALSE 1999
// msg ( budovy:  & getlives ( budovy ) ) ;
1981: LD_STRING budovy: 
1983: PUSH
1984: LD_LOC 12
1988: PPUSH
1989: CALL_OW 256
1993: STR
1994: PPUSH
1995: CALL_OW 100
// dialogueon ;
1999: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2003: LD_LOC 4
2007: PPUSH
2008: LD_STRING DXAttack-Joan-1b
2010: PPUSH
2011: CALL_OW 88
// dialogueoff ;
2015: CALL_OW 7
// follow = false ;
2019: LD_ADDR_LOC 20
2023: PUSH
2024: LD_INT 0
2026: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2027: LD_LOC 4
2031: PPUSH
2032: LD_LOC 5
2036: PPUSH
2037: CALL_OW 250
2041: PPUSH
2042: LD_LOC 5
2046: PPUSH
2047: CALL_OW 251
2051: PPUSH
2052: CALL_OW 111
// buildingsok = false ;
2056: LD_ADDR_LOC 15
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2064: LD_ADDR_LOC 17
2068: PUSH
2069: LD_LOC 12
2073: PPUSH
2074: CALL_OW 256
2078: ST_TO_ADDR
// end ; if not killhim then
2079: LD_LOC 16
2083: NOT
2084: IFFALSE 2087
// enable ;
2086: ENABLE
// end ;
2087: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2088: LD_LOC 15
2092: NOT
2093: PUSH
2094: LD_LOC 16
2098: NOT
2099: AND
2100: IFFALSE 2223
2102: GO 2104
2104: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2105: LD_LOC 17
2109: PUSH
2110: LD_LOC 12
2114: PPUSH
2115: CALL_OW 256
2119: MINUS
2120: PUSH
2121: LD_INT 7
2123: GREATER
2124: IFFALSE 2222
// begin disable ( 097 ) ;
2126: LD_INT 97
2128: DISABLE_MARKED
// disable_07 = true ;
2129: LD_ADDR_LOC 18
2133: PUSH
2134: LD_INT 1
2136: ST_TO_ADDR
// dialogueon ;
2137: CALL_OW 6
// music_class = 1 ;
2141: LD_ADDR_OWVAR 72
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2149: LD_LOC 5
2153: PPUSH
2154: LD_STRING DXAttack-Sik-1
2156: PPUSH
2157: CALL_OW 88
// dialogueoff ;
2161: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2165: LD_LOC 1
2169: PPUSH
2170: LD_LOC 2
2174: PPUSH
2175: LD_INT 2
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2185: LD_LOC 11
2189: PUSH
2190: LD_LOC 10
2194: PUSH
2195: LD_EXP 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: ADD
2204: PPUSH
2205: LD_LOC 3
2209: PPUSH
2210: CALL_OW 115
// killhim = true ;
2214: LD_ADDR_LOC 16
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// end ; enable ;
2222: ENABLE
// end ;
2223: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2224: LD_LOC 3
2228: PPUSH
2229: CALL_OW 310
2233: PUSH
2234: LD_INT 27
2236: EQUAL
2237: PUSH
2238: LD_LOC 16
2242: NOT
2243: AND
2244: IFFALSE 2345
2246: GO 2248
2248: DISABLE
// begin disable ( 097 ) ;
2249: LD_INT 97
2251: DISABLE_MARKED
// disable_07 = true ;
2252: LD_ADDR_LOC 18
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// dialogueon ;
2260: CALL_OW 6
// music_class = 1 ;
2264: LD_ADDR_OWVAR 72
2268: PUSH
2269: LD_INT 1
2271: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2272: LD_LOC 5
2276: PPUSH
2277: LD_STRING DXAttack-Sik-1
2279: PPUSH
2280: CALL_OW 88
// dialogueoff ;
2284: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2288: LD_LOC 1
2292: PPUSH
2293: LD_LOC 2
2297: PPUSH
2298: LD_INT 2
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2308: LD_LOC 11
2312: PUSH
2313: LD_LOC 10
2317: PUSH
2318: LD_EXP 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: ADD
2327: PPUSH
2328: LD_LOC 3
2332: PPUSH
2333: CALL_OW 115
// killhim = true ;
2337: LD_ADDR_LOC 16
2341: PUSH
2342: LD_INT 1
2344: ST_TO_ADDR
// end ;
2345: END
// on unitgoestored ( un ) do if un = john then
2346: LD_VAR 0 1
2350: PUSH
2351: LD_LOC 3
2355: EQUAL
2356: IFFALSE 2447
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2358: LD_LOC 10
2362: PPUSH
2363: LD_LOC 3
2367: PPUSH
2368: CALL_OW 250
2372: PPUSH
2373: LD_LOC 3
2377: PPUSH
2378: CALL_OW 251
2382: PPUSH
2383: CALL_OW 111
// wait ( 0 0$1 ) ;
2387: LD_INT 35
2389: PPUSH
2390: CALL_OW 67
// InGameOn ;
2394: CALL_OW 8
// SetLives ( john , 240 ) ;
2398: LD_LOC 3
2402: PPUSH
2403: LD_INT 240
2405: PPUSH
2406: CALL_OW 234
// SetSide ( john , 8 ) ;
2410: LD_LOC 3
2414: PPUSH
2415: LD_INT 8
2417: PPUSH
2418: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2422: LD_LOC 10
2426: PPUSH
2427: LD_STRING DXAttack-Off-1
2429: PPUSH
2430: CALL_OW 88
// InGameOff ;
2434: CALL_OW 9
// youlost ( Dissmiss ) ;
2438: LD_STRING Dissmiss
2440: PPUSH
2441: CALL_OW 104
// end else
2445: GO 2571
// if not disable_07 then
2447: LD_LOC 18
2451: NOT
2452: IFFALSE 2571
// if ( not killhim ) then
2454: LD_LOC 16
2458: NOT
2459: IFFALSE 2571
// if ( gettype ( un ) = unit_human ) then
2461: LD_VAR 0 1
2465: PPUSH
2466: CALL_OW 247
2470: PUSH
2471: LD_INT 1
2473: EQUAL
2474: IFFALSE 2571
// begin disable ( 06 ) ;
2476: LD_INT 6
2478: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2479: LD_INT 18
2481: PPUSH
2482: CALL_OW 67
// dialogueon ;
2486: CALL_OW 6
// music_class = 1 ;
2490: LD_ADDR_OWVAR 72
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2498: LD_LOC 5
2502: PPUSH
2503: LD_STRING DXAttack-Sik-1
2505: PPUSH
2506: CALL_OW 88
// dialogueoff ;
2510: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2514: LD_LOC 1
2518: PPUSH
2519: LD_LOC 2
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: LD_INT 1
2529: PPUSH
2530: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2534: LD_LOC 11
2538: PUSH
2539: LD_LOC 10
2543: PUSH
2544: LD_EXP 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: ADD
2553: PPUSH
2554: LD_LOC 3
2558: PPUSH
2559: CALL_OW 115
// killhim = true ;
2563: LD_ADDR_LOC 16
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// end ;
2571: PPOPN 1
2573: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2574: LD_LOC 3
2578: PPUSH
2579: LD_INT 4
2581: PPUSH
2582: CALL_OW 308
2586: PUSH
2587: LD_LOC 16
2591: NOT
2592: AND
2593: IFFALSE 3315
2595: GO 2597
2597: DISABLE
// begin follow = false ;
2598: LD_ADDR_LOC 20
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// if Crawls ( john ) then
2606: LD_LOC 3
2610: PPUSH
2611: CALL_OW 318
2615: IFFALSE 2633
// begin ComWalk ( john ) ;
2617: LD_LOC 3
2621: PPUSH
2622: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2626: LD_INT 10
2628: PPUSH
2629: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2633: LD_INT 14
2635: PUSH
2636: EMPTY
2637: LIST
2638: PPUSH
2639: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2643: LD_LOC 3
2647: PPUSH
2648: LD_INT 75
2650: PPUSH
2651: LD_INT 36
2653: PPUSH
2654: CALL_OW 111
// InGameOn ;
2658: CALL_OW 8
// say ( off , DXReady-Off-1 ) ;
2662: LD_LOC 10
2666: PPUSH
2667: LD_STRING DXReady-Off-1
2669: PPUSH
2670: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2674: LD_LOC 5
2678: PPUSH
2679: LD_STRING DXReady-Sik-1
2681: PPUSH
2682: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2686: LD_STRING DXReady-All-1
2688: PPUSH
2689: CALL_OW 96
// wait ( 0 0$2 ) ;
2693: LD_INT 70
2695: PPUSH
2696: CALL_OW 67
// say ( lucy , DXReady-Don-1 ) ;
2700: LD_LOC 6
2704: PPUSH
2705: LD_STRING DXReady-Don-1
2707: PPUSH
2708: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2712: LD_STRING DXReady-All-2
2714: PPUSH
2715: CALL_OW 96
// wait ( 0 0$2 ) ;
2719: LD_INT 70
2721: PPUSH
2722: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2726: LD_EXP 1
2730: PPUSH
2731: LD_STRING DXReady-Off2-1
2733: PPUSH
2734: CALL_OW 88
// wait ( 0 0$1 ) ;
2738: LD_INT 35
2740: PPUSH
2741: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2745: LD_EXP 1
2749: PPUSH
2750: LD_STRING DXReady-Off2-2
2752: PPUSH
2753: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2757: LD_LOC 10
2761: PPUSH
2762: LD_INT 72
2764: PPUSH
2765: LD_INT 29
2767: PPUSH
2768: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 73
2779: PPUSH
2780: LD_INT 31
2782: PPUSH
2783: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2787: LD_LOC 3
2791: PPUSH
2792: LD_INT 67
2794: PPUSH
2795: LD_INT 28
2797: PPUSH
2798: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2802: LD_LOC 6
2806: PPUSH
2807: LD_INT 68
2809: PPUSH
2810: LD_INT 30
2812: PPUSH
2813: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2817: LD_LOC 7
2821: PPUSH
2822: LD_INT 69
2824: PPUSH
2825: LD_INT 32
2827: PPUSH
2828: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2832: LD_LOC 5
2836: PPUSH
2837: LD_INT 66
2839: PPUSH
2840: LD_INT 28
2842: PPUSH
2843: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2847: LD_LOC 8
2851: PPUSH
2852: LD_INT 67
2854: PPUSH
2855: LD_INT 30
2857: PPUSH
2858: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2862: LD_LOC 9
2866: PPUSH
2867: LD_INT 68
2869: PPUSH
2870: LD_INT 32
2872: PPUSH
2873: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2877: LD_LOC 10
2881: PPUSH
2882: LD_INT 49
2884: PPUSH
2885: LD_INT 27
2887: PPUSH
2888: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2892: LD_EXP 1
2896: PPUSH
2897: LD_INT 49
2899: PPUSH
2900: LD_INT 27
2902: PPUSH
2903: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
2907: LD_LOC 3
2911: PPUSH
2912: LD_INT 85
2914: PPUSH
2915: LD_INT 33
2917: PPUSH
2918: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
2922: LD_LOC 6
2926: PPUSH
2927: LD_INT 85
2929: PPUSH
2930: LD_INT 33
2932: PPUSH
2933: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
2937: LD_LOC 7
2941: PPUSH
2942: LD_INT 85
2944: PPUSH
2945: LD_INT 33
2947: PPUSH
2948: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
2952: LD_LOC 5
2956: PPUSH
2957: LD_INT 85
2959: PPUSH
2960: LD_INT 33
2962: PPUSH
2963: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
2967: LD_LOC 8
2971: PPUSH
2972: LD_INT 85
2974: PPUSH
2975: LD_INT 33
2977: PPUSH
2978: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
2982: LD_LOC 9
2986: PPUSH
2987: LD_INT 85
2989: PPUSH
2990: LD_INT 33
2992: PPUSH
2993: CALL_OW 178
// wait ( 0 0$9 ) ;
2997: LD_INT 315
2999: PPUSH
3000: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3004: LD_EXP 1
3008: PPUSH
3009: LD_STRING DXReady-Off2-3
3011: PPUSH
3012: CALL_OW 88
// wait ( 0 0$1 ) ;
3016: LD_INT 35
3018: PPUSH
3019: CALL_OW 67
// case query ( QQuit ) of 1 :
3023: LD_STRING QQuit
3025: PPUSH
3026: CALL_OW 97
3030: PUSH
3031: LD_INT 1
3033: DOUBLE
3034: EQUAL
3035: IFTRUE 3039
3037: GO 3108
3039: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3040: LD_EXP 1
3044: PPUSH
3045: LD_STRING DQrQuit#1-Off2-1
3047: PPUSH
3048: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3052: LD_LOC 3
3056: PPUSH
3057: LD_STRING DQrQuit#1-JMM-1a
3059: PPUSH
3060: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3064: LD_EXP 1
3068: PPUSH
3069: LD_STRING DQrQuit#1-Off2-2
3071: PPUSH
3072: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3076: LD_LOC 3
3080: PPUSH
3081: LD_INT 73
3083: PPUSH
3084: LD_INT 49
3086: PPUSH
3087: CALL_OW 111
// wait ( 0 0$3 ) ;
3091: LD_INT 105
3093: PPUSH
3094: CALL_OW 67
// ingameoff ;
3098: CALL_OW 9
// YouDidSomethingExtraordinary ;
3102: CALL_OW 105
// end ; 2 :
3106: GO 3315
3108: LD_INT 2
3110: DOUBLE
3111: EQUAL
3112: IFTRUE 3116
3114: GO 3314
3116: POP
// begin disable ( 29 ) ;
3117: LD_INT 29
3119: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3120: LD_INT 35
3122: PPUSH
3123: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3127: LD_EXP 1
3131: PPUSH
3132: LD_STRING DXReady-Off2-4
3134: PPUSH
3135: CALL_OW 88
// wait ( 0 0$1 ) ;
3139: LD_INT 35
3141: PPUSH
3142: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3146: LD_LOC 10
3150: PPUSH
3151: LD_STRING DXReady-Off-2
3153: PPUSH
3154: CALL_OW 88
// comenterunit ( will , eon ) ;
3158: LD_LOC 8
3162: PPUSH
3163: LD_INT 14
3165: PPUSH
3166: CALL_OW 120
// wait ( 0 0$3 ) ;
3170: LD_INT 105
3172: PPUSH
3173: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3177: LD_LOC 10
3181: PPUSH
3182: LD_STRING DXReady-Off-3
3184: PPUSH
3185: CALL_OW 88
// comenterunit ( sik , eon ) ;
3189: LD_LOC 5
3193: PPUSH
3194: LD_INT 14
3196: PPUSH
3197: CALL_OW 120
// wait ( 0 0$3 ) ;
3201: LD_INT 105
3203: PPUSH
3204: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3208: LD_LOC 10
3212: PPUSH
3213: LD_STRING DXReady-Off-4
3215: PPUSH
3216: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3220: LD_LOC 6
3224: PPUSH
3225: LD_INT 14
3227: PPUSH
3228: CALL_OW 120
// wait ( 0 0$3 ) ;
3232: LD_INT 105
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-5
3246: PPUSH
3247: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3251: LD_LOC 3
3255: PPUSH
3256: LD_INT 76
3258: PPUSH
3259: LD_INT 34
3261: PPUSH
3262: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3266: LD_LOC 3
3270: PPUSH
3271: LD_INT 76
3273: PPUSH
3274: LD_INT 33
3276: PPUSH
3277: CALL_OW 178
// wait ( 0 0$4 ) ;
3281: LD_INT 140
3283: PPUSH
3284: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3288: LD_LOC 3
3292: PPUSH
3293: LD_STRING DQrQuit#2-JMM-1
3295: PPUSH
3296: CALL_OW 88
// comenterunit ( john , eon ) ;
3300: LD_LOC 3
3304: PPUSH
3305: LD_INT 14
3307: PPUSH
3308: CALL_OW 120
// end ; end ;
3312: GO 3315
3314: POP
// end ;
3315: END
// on enterbuilding ( b , un ) do begin if b = eon then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_INT 14
3323: EQUAL
3324: IFFALSE 3433
// case un of john :
3326: LD_VAR 0 2
3330: PUSH
3331: LD_LOC 3
3335: DOUBLE
3336: EQUAL
3337: IFTRUE 3341
3339: GO 3423
3341: POP
// if not killhim then
3342: LD_LOC 16
3346: NOT
3347: IFFALSE 3380
// begin wait ( 0 0$1.3 ) ;
3349: LD_INT 46
3351: PPUSH
3352: CALL_OW 67
// savecharacters ( john , JMM ) ;
3356: LD_LOC 3
3360: PPUSH
3361: LD_STRING JMM
3363: PPUSH
3364: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3368: LD_STRING 1
3370: PPUSH
3371: LD_STRING %_cont
3373: PPUSH
3374: CALL_OW 340
// end else
3378: GO 3421
// begin placeunitxy ( john , 76 , 34 , false ) ;
3380: LD_LOC 3
3384: PPUSH
3385: LD_INT 76
3387: PPUSH
3388: LD_INT 34
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3398: LD_LOC 11
3402: PUSH
3403: LD_LOC 10
3407: PUSH
3408: EMPTY
3409: LIST
3410: ADD
3411: PPUSH
3412: LD_LOC 3
3416: PPUSH
3417: CALL_OW 115
// end ; else
3421: GO 3433
3423: POP
// RemoveUnit ( un ) ; end ;
3424: LD_VAR 0 2
3428: PPUSH
3429: CALL_OW 64
// end ;
3433: PPOPN 2
3435: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3436: LD_VAR 0 1
3440: PUSH
3441: LD_INT 1
3443: EQUAL
3444: PUSH
3445: LD_VAR 0 2
3449: PUSH
3450: LD_INT 4
3452: EQUAL
3453: AND
3454: PUSH
3455: LD_LOC 16
3459: PUSH
3460: LD_INT 0
3462: EQUAL
3463: AND
3464: IFFALSE 3558
// begin wait ( 0 0$1 ) ;
3466: LD_INT 35
3468: PPUSH
3469: CALL_OW 67
// music_class = 1 ;
3473: LD_ADDR_OWVAR 72
3477: PUSH
3478: LD_INT 1
3480: ST_TO_ADDR
// DialogueOn ;
3481: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3485: LD_LOC 5
3489: PPUSH
3490: LD_STRING DXAttack-Sik-1
3492: PPUSH
3493: CALL_OW 88
// dialogueoff ;
3497: CALL_OW 7
// killhim = true ;
3501: LD_ADDR_LOC 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3509: LD_LOC 1
3513: PPUSH
3514: LD_LOC 2
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: LD_INT 1
3524: PPUSH
3525: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3529: LD_LOC 11
3533: PUSH
3534: LD_LOC 10
3538: PUSH
3539: LD_EXP 1
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: ADD
3548: PPUSH
3549: LD_LOC 3
3553: PPUSH
3554: CALL_OW 115
// end ; end ;
3558: PPOPN 2
3560: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3561: LD_VAR 0 2
3565: PUSH
3566: LD_LOC 3
3570: EQUAL
3571: IFFALSE 3608
// begin async ;
3573: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3574: LD_LOC 4
3578: PPUSH
3579: LD_STRING DXComments-Joan-1
3581: PPUSH
3582: CALL_OW 88
// ComExitVehicle ( john ) ;
3586: LD_LOC 3
3590: PPUSH
3591: CALL_OW 121
// SetSide ( veh , 4 ) ;
3595: LD_VAR 0 1
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: CALL_OW 235
// sync ;
3607: SYNC
// end ; end ; end_of_file
3608: PPOPN 2
3610: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3611: LD_INT 0
3613: PPUSH
// uc_side := 4 ;
3614: LD_ADDR_OWVAR 20
3618: PUSH
3619: LD_INT 4
3621: ST_TO_ADDR
// uc_nation := nation_american ;
3622: LD_ADDR_OWVAR 21
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// hc_importance = 50 ;
3630: LD_ADDR_OWVAR 32
3634: PUSH
3635: LD_INT 50
3637: ST_TO_ADDR
// hc_sex = sex_male ;
3638: LD_ADDR_OWVAR 27
3642: PUSH
3643: LD_INT 1
3645: ST_TO_ADDR
// hc_class = 1 ;
3646: LD_ADDR_OWVAR 28
3650: PUSH
3651: LD_INT 1
3653: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3654: LD_ADDR_OWVAR 30
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: LD_INT 3
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3677: LD_ADDR_OWVAR 31
3681: PUSH
3682: LD_INT 7
3684: PUSH
3685: LD_INT 3
3687: PUSH
3688: LD_INT 2
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3700: LD_ADDR_OWVAR 29
3704: PUSH
3705: LD_INT 11
3707: PUSH
3708: LD_INT 11
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// hc_name := Officer2 ;
3715: LD_ADDR_OWVAR 26
3719: PUSH
3720: LD_STRING Officer2
3722: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3723: LD_ADDR_OWVAR 33
3727: PUSH
3728: LD_STRING AmGalRemake
3730: ST_TO_ADDR
// hc_face_number := 3 ;
3731: LD_ADDR_OWVAR 34
3735: PUSH
3736: LD_INT 3
3738: ST_TO_ADDR
// off2 := CreateHuman ;
3739: LD_ADDR_EXP 1
3743: PUSH
3744: CALL_OW 44
3748: ST_TO_ADDR
// end ;
3749: LD_VAR 0 1
3753: RET
// export function CreatePersonnel ; begin
3754: LD_INT 0
3756: PPUSH
// uc_side := 4 ;
3757: LD_ADDR_OWVAR 20
3761: PUSH
3762: LD_INT 4
3764: ST_TO_ADDR
// uc_nation := nation_american ;
3765: LD_ADDR_OWVAR 21
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// hc_importance = 10 ;
3773: LD_ADDR_OWVAR 32
3777: PUSH
3778: LD_INT 10
3780: ST_TO_ADDR
// hc_name :=  ;
3781: LD_ADDR_OWVAR 26
3785: PUSH
3786: LD_STRING 
3788: ST_TO_ADDR
// hc_gallery :=  ;
3789: LD_ADDR_OWVAR 33
3793: PUSH
3794: LD_STRING 
3796: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 2
3802: NEG
3803: PPUSH
3804: CALL_OW 382
// engi1 := CreateHuman ;
3808: LD_ADDR_EXP 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3818: LD_INT 1
3820: PPUSH
3821: LD_INT 2
3823: NEG
3824: PPUSH
3825: CALL_OW 382
// engi2 := CreateHuman ;
3829: LD_ADDR_EXP 3
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3839: LD_EXP 2
3843: PPUSH
3844: LD_INT 10
3846: PPUSH
3847: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3851: LD_EXP 3
3855: PPUSH
3856: LD_INT 10
3858: PPUSH
3859: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 1
3868: NEG
3869: PPUSH
3870: CALL_OW 383
// truckdriver := CreateHuman ;
3874: LD_ADDR_EXP 4
3878: PUSH
3879: CALL_OW 44
3883: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3884: LD_EXP 4
3888: PPUSH
3889: LD_INT 27
3891: PPUSH
3892: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3896: LD_INT 27
3898: PPUSH
3899: LD_INT 1
3901: PPUSH
3902: LD_INT 100
3904: PPUSH
3905: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
3909: LD_INT 1
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: CALL_OW 381
// hc_class = class_sniper ;
3919: LD_ADDR_OWVAR 28
3923: PUSH
3924: LD_INT 5
3926: ST_TO_ADDR
// snip1 := CreateHuman ;
3927: LD_ADDR_EXP 6
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
3937: LD_INT 2
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL_OW 381
// hc_class = class_sniper ;
3947: LD_ADDR_OWVAR 28
3951: PUSH
3952: LD_INT 5
3954: ST_TO_ADDR
// snip2 := CreateHuman ;
3955: LD_ADDR_EXP 7
3959: PUSH
3960: CALL_OW 44
3964: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
3965: LD_EXP 6
3969: PPUSH
3970: LD_INT 47
3972: PPUSH
3973: LD_INT 17
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
3983: LD_EXP 7
3987: PPUSH
3988: LD_INT 29
3990: PPUSH
3991: LD_INT 31
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4001: LD_EXP 6
4005: PUSH
4006: LD_EXP 7
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PPUSH
4015: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 3
4024: PPUSH
4025: CALL_OW 381
// sol1 := CreateHuman ;
4029: LD_ADDR_EXP 8
4033: PUSH
4034: CALL_OW 44
4038: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4039: LD_EXP 8
4043: PPUSH
4044: LD_INT 2
4046: PPUSH
4047: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4051: LD_EXP 8
4055: PPUSH
4056: LD_INT 15
4058: PPUSH
4059: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: CALL_OW 381
// sol2 := CreateHuman ;
4073: LD_ADDR_EXP 9
4077: PUSH
4078: CALL_OW 44
4082: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4083: LD_INT 1
4085: PPUSH
4086: LD_INT 3
4088: PPUSH
4089: CALL_OW 381
// sol3 := CreateHuman ;
4093: LD_ADDR_EXP 10
4097: PUSH
4098: CALL_OW 44
4102: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4103: LD_EXP 9
4107: PPUSH
4108: LD_INT 40
4110: PPUSH
4111: LD_INT 42
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4121: LD_EXP 10
4125: PPUSH
4126: LD_INT 53
4128: PPUSH
4129: LD_INT 34
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4139: LD_INT 1
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: CALL_OW 381
// pat1 := CreateHuman ;
4149: LD_ADDR_EXP 11
4153: PUSH
4154: CALL_OW 44
4158: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4159: LD_INT 1
4161: PPUSH
4162: LD_INT 3
4164: PPUSH
4165: CALL_OW 381
// pat2 := CreateHuman ;
4169: LD_ADDR_EXP 12
4173: PUSH
4174: CALL_OW 44
4178: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4179: LD_EXP 11
4183: PPUSH
4184: LD_INT 29
4186: PPUSH
4187: LD_INT 6
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4197: LD_EXP 12
4201: PPUSH
4202: LD_INT 30
4204: PPUSH
4205: LD_INT 7
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4215: LD_ADDR_EXP 13
4219: PUSH
4220: LD_EXP 11
4224: PUSH
4225: LD_EXP 12
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 2
4243: PUSH
4244: LD_EXP 3
4248: PUSH
4249: LD_EXP 8
4253: PUSH
4254: LD_EXP 9
4258: PUSH
4259: LD_EXP 10
4263: PUSH
4264: LD_EXP 6
4268: PUSH
4269: LD_EXP 7
4273: PUSH
4274: LD_EXP 13
4278: PUSH
4279: LD_EXP 4
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: ST_TO_ADDR
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 do
4300: GO 4302
4302: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4303: LD_EXP 13
4307: PPUSH
4308: LD_INT 64
4310: PPUSH
4311: LD_INT 22
4313: PPUSH
4314: CALL_OW 171
// wait ( 0 0$25 ) ;
4318: LD_INT 875
4320: PPUSH
4321: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4325: LD_EXP 13
4329: PPUSH
4330: LD_INT 30
4332: PPUSH
4333: LD_INT 8
4335: PPUSH
4336: CALL_OW 171
// wait ( 0 0$25 ) ;
4340: LD_INT 875
4342: PPUSH
4343: CALL_OW 67
// enable ;
4347: ENABLE
// end ;
4348: END
// every 0 0$1 do
4349: GO 4351
4351: DISABLE
// begin SetLives ( truck , 550 ) ;
4352: LD_INT 27
4354: PPUSH
4355: LD_INT 550
4357: PPUSH
4358: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4362: LD_INT 27
4364: PPUSH
4365: LD_INT 42
4367: PPUSH
4368: LD_INT 35
4370: PPUSH
4371: CALL_OW 111
// AddComUnload ( truck ) ;
4375: LD_INT 27
4377: PPUSH
4378: CALL_OW 219
// Wait ( 0 0$8 ) ;
4382: LD_INT 280
4384: PPUSH
4385: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4389: LD_EXP 2
4393: PUSH
4394: LD_EXP 3
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PPUSH
4403: LD_INT 45
4405: PPUSH
4406: LD_INT 36
4408: PPUSH
4409: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4413: LD_EXP 4
4417: PPUSH
4418: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4422: LD_EXP 4
4426: PPUSH
4427: LD_INT 40
4429: PPUSH
4430: LD_INT 33
4432: PPUSH
4433: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4437: LD_INT 35
4439: PPUSH
4440: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4444: LD_EXP 4
4448: PPUSH
4449: LD_INT 27
4451: PPUSH
4452: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4456: LD_INT 27
4458: PPUSH
4459: CALL_OW 256
4463: PUSH
4464: LD_INT 1000
4466: EQUAL
4467: IFFALSE 4437
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4469: LD_EXP 2
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: LD_INT 10
4485: PPUSH
4486: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4490: LD_INT 35
4492: PPUSH
4493: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4497: LD_INT 27
4499: PPUSH
4500: CALL_OW 311
4504: NOT
4505: IFFALSE 4490
// ComEnterUnit ( truckdriver , truck ) ;
4507: LD_EXP 4
4511: PPUSH
4512: LD_INT 27
4514: PPUSH
4515: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4519: LD_EXP 4
4523: PPUSH
4524: LD_INT 74
4526: PPUSH
4527: LD_INT 52
4529: PPUSH
4530: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4534: LD_EXP 4
4538: PPUSH
4539: LD_INT 90
4541: PPUSH
4542: LD_INT 58
4544: PPUSH
4545: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4549: LD_EXP 4
4553: PPUSH
4554: LD_INT 98
4556: PPUSH
4557: LD_INT 61
4559: PPUSH
4560: CALL_OW 171
// end ;
4564: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4565: LD_INT 7
4567: PPUSH
4568: LD_INT 22
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PPUSH
4578: CALL_OW 70
4582: IFFALSE 4630
4584: GO 4586
4586: DISABLE
4587: LD_INT 0
4589: PPUSH
// begin enable ;
4590: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4591: LD_ADDR_VAR 0 1
4595: PUSH
4596: LD_INT 7
4598: PPUSH
4599: LD_INT 22
4601: PUSH
4602: LD_INT 4
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 70
4613: PUSH
4614: FOR_IN
4615: IFFALSE 4628
// RemoveUnit ( i ) ;
4617: LD_VAR 0 1
4621: PPUSH
4622: CALL_OW 64
4626: GO 4614
4628: POP
4629: POP
// end ;
4630: PPOPN 1
4632: END
