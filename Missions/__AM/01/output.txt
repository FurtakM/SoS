// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6078 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6056
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 17091 0 0
5948: GO 6056
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 17224 0 0
5963: GO 6056
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 17309 0 0
5978: GO 6056
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 5 :
5989: CALL 17757 0 0
5993: GO 6056
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 6 :
6004: CALL 17868 0 0
6008: GO 6056
6010: LD_INT 6
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 7 :
6019: CALL 17925 0 0
6023: GO 6056
6025: LD_INT 7
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 8 :
6034: CALL 17967 0 0
6038: GO 6056
6040: LD_INT 8
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; end ;
6049: CALL 18068 0 0
6053: GO 6056
6055: POP
// end ; end ;
6056: PPOPN 6
6058: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6059: GO 6061
6061: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6062: LD_STRING initStreamRollete();
6064: PPUSH
6065: CALL_OW 559
// InitStreamMode ;
6069: CALL 6078 0 0
// DefineStreamItems ( ) ;
6073: CALL 6518 0 0
// end ;
6077: END
// function InitStreamMode ; begin
6078: LD_INT 0
6080: PPUSH
// streamModeActive := false ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// normalCounter := 36 ;
6089: LD_ADDR_EXP 16
6093: PUSH
6094: LD_INT 36
6096: ST_TO_ADDR
// hardcoreCounter := 16 ;
6097: LD_ADDR_EXP 17
6101: PUSH
6102: LD_INT 16
6104: ST_TO_ADDR
// sRocket := false ;
6105: LD_ADDR_EXP 20
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sSpeed := false ;
6113: LD_ADDR_EXP 19
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sEngine := false ;
6121: LD_ADDR_EXP 21
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sSpec := false ;
6129: LD_ADDR_EXP 18
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sLevel := false ;
6137: LD_ADDR_EXP 22
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sArmoury := false ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sRadar := false ;
6153: LD_ADDR_EXP 24
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sBunker := false ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sHack := false ;
6169: LD_ADDR_EXP 26
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sFire := false ;
6177: LD_ADDR_EXP 27
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sRefresh := false ;
6185: LD_ADDR_EXP 28
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sExp := false ;
6193: LD_ADDR_EXP 29
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sDepot := false ;
6201: LD_ADDR_EXP 30
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sFlag := false ;
6209: LD_ADDR_EXP 31
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sKamikadze := false ;
6217: LD_ADDR_EXP 39
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTroll := false ;
6225: LD_ADDR_EXP 40
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSlow := false ;
6233: LD_ADDR_EXP 41
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLack := false ;
6241: LD_ADDR_EXP 42
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sTank := false ;
6249: LD_ADDR_EXP 44
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRemote := false ;
6257: LD_ADDR_EXP 45
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sPowell := false ;
6265: LD_ADDR_EXP 46
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sTeleport := false ;
6273: LD_ADDR_EXP 49
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sOilTower := false ;
6281: LD_ADDR_EXP 51
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sShovel := false ;
6289: LD_ADDR_EXP 52
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sSheik := false ;
6297: LD_ADDR_EXP 53
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sEarthquake := false ;
6305: LD_ADDR_EXP 55
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sAI := false ;
6313: LD_ADDR_EXP 56
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sCargo := false ;
6321: LD_ADDR_EXP 59
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sDLaser := false ;
6329: LD_ADDR_EXP 60
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sExchange := false ;
6337: LD_ADDR_EXP 61
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sFac := false ;
6345: LD_ADDR_EXP 62
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sPower := false ;
6353: LD_ADDR_EXP 63
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRandom := false ;
6361: LD_ADDR_EXP 64
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sShield := false ;
6369: LD_ADDR_EXP 65
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTime := false ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTools := false ;
6385: LD_ADDR_EXP 67
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sSold := false ;
6393: LD_ADDR_EXP 32
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sDiff := false ;
6401: LD_ADDR_EXP 33
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sFog := false ;
6409: LD_ADDR_EXP 36
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sReset := false ;
6417: LD_ADDR_EXP 37
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSun := false ;
6425: LD_ADDR_EXP 38
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sTiger := false ;
6433: LD_ADDR_EXP 34
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBomb := false ;
6441: LD_ADDR_EXP 35
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sWound := false ;
6449: LD_ADDR_EXP 43
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBetray := false ;
6457: LD_ADDR_EXP 47
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sContamin := false ;
6465: LD_ADDR_EXP 48
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sOil := false ;
6473: LD_ADDR_EXP 50
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sStu := false ;
6481: LD_ADDR_EXP 54
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sBazooka := false ;
6489: LD_ADDR_EXP 57
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sMortar := false ;
6497: LD_ADDR_EXP 58
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sRanger := false ;
6505: LD_ADDR_EXP 68
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// result := [ ] ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: EMPTY
6531: ST_TO_ADDR
// if campaign_id = 1 then
6532: LD_OWVAR 69
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: IFFALSE 9478
// begin case mission_number of 1 :
6542: LD_OWVAR 70
6546: PUSH
6547: LD_INT 1
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6619
6555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 26
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 106
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 9476
6619: LD_INT 2
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6699
6627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 4
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 101
6673: PUSH
6674: LD_INT 102
6676: PUSH
6677: LD_INT 105
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: LD_INT 108
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9476
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6783
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9476
6783: LD_INT 4
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6875
6791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 8
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: LD_INT 16
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 101
6849: PUSH
6850: LD_INT 102
6852: PUSH
6853: LD_INT 105
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 108
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9476
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6983
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 8
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: LD_INT 16
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 25
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 105
6955: PUSH
6956: LD_INT 106
6958: PUSH
6959: LD_INT 108
6961: PUSH
6962: LD_INT 109
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 9476
6983: LD_INT 6
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7111
6991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 32
7050: PUSH
7051: LD_INT 36
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 105
7083: PUSH
7084: LD_INT 106
7086: PUSH
7087: LD_INT 108
7089: PUSH
7090: LD_INT 109
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 9476
7111: LD_INT 7
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7219
7119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 4
7130: PUSH
7131: LD_INT 5
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 11
7139: PUSH
7140: LD_INT 12
7142: PUSH
7143: LD_INT 15
7145: PUSH
7146: LD_INT 16
7148: PUSH
7149: LD_INT 20
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 112
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 9476
7219: LD_INT 8
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7355
7227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 6
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 105
7326: PUSH
7327: LD_INT 106
7329: PUSH
7330: LD_INT 108
7332: PUSH
7333: LD_INT 109
7335: PUSH
7336: LD_INT 112
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 9476
7355: LD_INT 9
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7499
7363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7364: LD_ADDR_VAR 0 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 4
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 7
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 28
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 36
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 103
7463: PUSH
7464: LD_INT 105
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: LD_INT 108
7472: PUSH
7473: LD_INT 109
7475: PUSH
7476: LD_INT 112
7478: PUSH
7479: LD_INT 114
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 9476
7499: LD_INT 10
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7691
7507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 7
7527: PUSH
7528: LD_INT 8
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: LD_INT 10
7536: PUSH
7537: LD_INT 11
7539: PUSH
7540: LD_INT 12
7542: PUSH
7543: LD_INT 13
7545: PUSH
7546: LD_INT 14
7548: PUSH
7549: LD_INT 15
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: LD_INT 17
7557: PUSH
7558: LD_INT 18
7560: PUSH
7561: LD_INT 19
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 23
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 28
7587: PUSH
7588: LD_INT 30
7590: PUSH
7591: LD_INT 31
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 36
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 9476
7691: LD_INT 11
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7891
7699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 6
7719: PUSH
7720: LD_INT 7
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: LD_INT 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 11
7734: PUSH
7735: LD_INT 12
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 28
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 31
7788: PUSH
7789: LD_INT 32
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 101
7833: PUSH
7834: LD_INT 102
7836: PUSH
7837: LD_INT 103
7839: PUSH
7840: LD_INT 104
7842: PUSH
7843: LD_INT 105
7845: PUSH
7846: LD_INT 106
7848: PUSH
7849: LD_INT 107
7851: PUSH
7852: LD_INT 108
7854: PUSH
7855: LD_INT 109
7857: PUSH
7858: LD_INT 110
7860: PUSH
7861: LD_INT 111
7863: PUSH
7864: LD_INT 112
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9476
7891: LD_INT 12
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8107
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 31
7994: PUSH
7995: LD_INT 32
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 36
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 9476
8107: LD_INT 13
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8311
8115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 14
8153: PUSH
8154: LD_INT 15
8156: PUSH
8157: LD_INT 16
8159: PUSH
8160: LD_INT 17
8162: PUSH
8163: LD_INT 18
8165: PUSH
8166: LD_INT 19
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 24
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 27
8192: PUSH
8193: LD_INT 28
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 33
8207: PUSH
8208: LD_INT 34
8210: PUSH
8211: LD_INT 36
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 104
8258: PUSH
8259: LD_INT 105
8261: PUSH
8262: LD_INT 106
8264: PUSH
8265: LD_INT 107
8267: PUSH
8268: LD_INT 108
8270: PUSH
8271: LD_INT 109
8273: PUSH
8274: LD_INT 110
8276: PUSH
8277: LD_INT 111
8279: PUSH
8280: LD_INT 112
8282: PUSH
8283: LD_INT 113
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 9476
8311: LD_INT 14
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8531
8319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 4
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: LD_INT 7
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: LD_INT 9
8351: PUSH
8352: LD_INT 10
8354: PUSH
8355: LD_INT 11
8357: PUSH
8358: LD_INT 12
8360: PUSH
8361: LD_INT 13
8363: PUSH
8364: LD_INT 14
8366: PUSH
8367: LD_INT 15
8369: PUSH
8370: LD_INT 16
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 28
8408: PUSH
8409: LD_INT 29
8411: PUSH
8412: LD_INT 30
8414: PUSH
8415: LD_INT 31
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 33
8423: PUSH
8424: LD_INT 34
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 102
8472: PUSH
8473: LD_INT 103
8475: PUSH
8476: LD_INT 104
8478: PUSH
8479: LD_INT 105
8481: PUSH
8482: LD_INT 106
8484: PUSH
8485: LD_INT 107
8487: PUSH
8488: LD_INT 108
8490: PUSH
8491: LD_INT 109
8493: PUSH
8494: LD_INT 110
8496: PUSH
8497: LD_INT 111
8499: PUSH
8500: LD_INT 112
8502: PUSH
8503: LD_INT 113
8505: PUSH
8506: LD_INT 114
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9476
8531: LD_INT 15
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8751
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9476
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8883
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 9476
8883: LD_INT 17
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9103
8891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_INT 7
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 9
8923: PUSH
8924: LD_INT 10
8926: PUSH
8927: LD_INT 11
8929: PUSH
8930: LD_INT 12
8932: PUSH
8933: LD_INT 13
8935: PUSH
8936: LD_INT 14
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 17
8947: PUSH
8948: LD_INT 18
8950: PUSH
8951: LD_INT 19
8953: PUSH
8954: LD_INT 20
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 26
8974: PUSH
8975: LD_INT 27
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 29
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 36
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 101
9041: PUSH
9042: LD_INT 102
9044: PUSH
9045: LD_INT 103
9047: PUSH
9048: LD_INT 104
9050: PUSH
9051: LD_INT 105
9053: PUSH
9054: LD_INT 106
9056: PUSH
9057: LD_INT 107
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 109
9065: PUSH
9066: LD_INT 110
9068: PUSH
9069: LD_INT 111
9071: PUSH
9072: LD_INT 112
9074: PUSH
9075: LD_INT 113
9077: PUSH
9078: LD_INT 114
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9476
9103: LD_INT 18
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9247
9111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 12
9134: PUSH
9135: LD_INT 15
9137: PUSH
9138: LD_INT 16
9140: PUSH
9141: LD_INT 20
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 34
9173: PUSH
9174: LD_INT 35
9176: PUSH
9177: LD_INT 36
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 103
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 115
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: ST_TO_ADDR
9245: GO 9476
9247: LD_INT 19
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9475
9255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 7
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: LD_INT 10
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: LD_INT 15
9305: PUSH
9306: LD_INT 16
9308: PUSH
9309: LD_INT 17
9311: PUSH
9312: LD_INT 18
9314: PUSH
9315: LD_INT 19
9317: PUSH
9318: LD_INT 20
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 24
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 29
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 31
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 33
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 36
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 101
9409: PUSH
9410: LD_INT 102
9412: PUSH
9413: LD_INT 103
9415: PUSH
9416: LD_INT 104
9418: PUSH
9419: LD_INT 105
9421: PUSH
9422: LD_INT 106
9424: PUSH
9425: LD_INT 107
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 109
9433: PUSH
9434: LD_INT 110
9436: PUSH
9437: LD_INT 111
9439: PUSH
9440: LD_INT 112
9442: PUSH
9443: LD_INT 113
9445: PUSH
9446: LD_INT 114
9448: PUSH
9449: LD_INT 115
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// end else
9476: GO 9695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 6
9500: PUSH
9501: LD_INT 7
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 17
9533: PUSH
9534: LD_INT 18
9536: PUSH
9537: LD_INT 19
9539: PUSH
9540: LD_INT 20
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 27
9563: PUSH
9564: LD_INT 28
9566: PUSH
9567: LD_INT 29
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 33
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 36
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 103
9637: PUSH
9638: LD_INT 104
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 107
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 110
9658: PUSH
9659: LD_INT 111
9661: PUSH
9662: LD_INT 112
9664: PUSH
9665: LD_INT 113
9667: PUSH
9668: LD_INT 114
9670: PUSH
9671: LD_INT 115
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: ST_TO_ADDR
// if result then
9695: LD_VAR 0 1
9699: IFFALSE 9988
// begin normal :=  ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_STRING 
9708: ST_TO_ADDR
// hardcore :=  ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// for i = 1 to normalCounter do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_EXP 16
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9834
// begin tmp := 0 ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_STRING 0
9742: ST_TO_ADDR
// if result [ 1 ] then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: IFFALSE 9816
// if result [ 1 ] [ 1 ] = i then
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PUSH
9766: LD_VAR 0 5
9770: EQUAL
9771: IFFALSE 9816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 3
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// tmp := 1 ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_STRING 1
9815: ST_TO_ADDR
// end ; normal := normal & tmp ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_VAR 0 2
9830: STR
9831: ST_TO_ADDR
// end ;
9832: GO 9732
9834: POP
9835: POP
// for i = 1 to hardcoreCounter do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_EXP 17
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9957
// begin tmp := 0 ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_STRING 0
9861: ST_TO_ADDR
// if result [ 2 ] then
9862: LD_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: IFFALSE 9939
// if result [ 2 ] [ 1 ] = 100 + i then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 2
9879: ARRAY
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PUSH
9885: LD_INT 100
9887: PUSH
9888: LD_VAR 0 5
9892: PLUS
9893: EQUAL
9894: IFFALSE 9939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 3
9925: PPUSH
9926: CALL_OW 1
9930: ST_TO_ADDR
// tmp := 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_STRING 1
9938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_VAR 0 2
9953: STR
9954: ST_TO_ADDR
// end ;
9955: GO 9851
9957: POP
9958: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9959: LD_STRING getStreamItemsFromMission("
9961: PUSH
9962: LD_VAR 0 3
9966: STR
9967: PUSH
9968: LD_STRING ","
9970: STR
9971: PUSH
9972: LD_VAR 0 4
9976: STR
9977: PUSH
9978: LD_STRING ")
9980: STR
9981: PPUSH
9982: CALL_OW 559
// end else
9986: GO 9995
// ToLua ( getStreamItemsFromMission("","") ) ;
9988: LD_STRING getStreamItemsFromMission("","")
9990: PPUSH
9991: CALL_OW 559
// end ;
9995: LD_VAR 0 1
9999: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10000: LD_EXP 15
10004: PUSH
10005: LD_EXP 20
10009: AND
10010: IFFALSE 10134
10012: GO 10014
10014: DISABLE
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// begin enable ;
10019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 45
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 47
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if not tmp then
10096: LD_VAR 0 2
10100: NOT
10101: IFFALSE 10105
// exit ;
10103: GO 10134
// for i in tmp do
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_VAR 0 2
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10132
// begin SetLives ( i , 0 ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 234
// end ;
10130: GO 10115
10132: POP
10133: POP
// end ;
10134: PPOPN 2
10136: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10137: LD_EXP 15
10141: PUSH
10142: LD_EXP 21
10146: AND
10147: IFFALSE 10231
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin enable ;
10156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_OWVAR 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 2
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10231
// for i in tmp do
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: FOR_IN
10213: IFFALSE 10229
// begin SetLives ( i , 0 ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 0
10222: PPUSH
10223: CALL_OW 234
// end ;
10227: GO 10212
10229: POP
10230: POP
// end ;
10231: PPOPN 2
10233: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10234: LD_EXP 15
10238: PUSH
10239: LD_EXP 18
10243: AND
10244: IFFALSE 10337
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
// begin enable ;
10252: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10253: LD_ADDR_VAR 0 1
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_OWVAR 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10335
// begin SetClass ( i , 1 ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: GO 10318
10335: POP
10336: POP
// end ;
10337: PPOPN 1
10339: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10340: LD_EXP 15
10344: PUSH
10345: LD_EXP 19
10349: AND
10350: PUSH
10351: LD_OWVAR 65
10355: PUSH
10356: LD_INT 7
10358: LESS
10359: AND
10360: IFFALSE 10374
10362: GO 10364
10364: DISABLE
// begin enable ;
10365: ENABLE
// game_speed := 7 ;
10366: LD_ADDR_OWVAR 65
10370: PUSH
10371: LD_INT 7
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10375: LD_EXP 15
10379: PUSH
10380: LD_EXP 22
10384: AND
10385: IFFALSE 10587
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 81
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10587
// if tmp > 5 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 5
10447: GREATER
10448: IFFALSE 10460
// k := 5 else
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: ST_TO_ADDR
10458: GO 10470
// k := tmp ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_VAR 0 3
10469: ST_TO_ADDR
// for i := 1 to k do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10585
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_VAR 0 1
10497: ARRAY
10498: PPUSH
10499: LD_VAR 0 1
10503: PUSH
10504: LD_INT 4
10506: MOD
10507: PUSH
10508: LD_INT 1
10510: PLUS
10511: PPUSH
10512: CALL_OW 259
10516: PUSH
10517: LD_INT 10
10519: LESS
10520: IFFALSE 10583
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 1
10531: ARRAY
10532: PPUSH
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 4
10540: MOD
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_VAR 0 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 4
10564: MOD
10565: PUSH
10566: LD_INT 1
10568: PLUS
10569: PPUSH
10570: CALL_OW 259
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PPUSH
10579: CALL_OW 237
10583: GO 10485
10585: POP
10586: POP
// end ;
10587: PPOPN 3
10589: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10590: LD_EXP 15
10594: PUSH
10595: LD_EXP 23
10599: AND
10600: IFFALSE 10620
10602: GO 10604
10604: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10605: LD_INT 4
10607: PPUSH
10608: LD_OWVAR 2
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 324
10620: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10621: LD_EXP 15
10625: PUSH
10626: LD_EXP 52
10630: AND
10631: IFFALSE 10651
10633: GO 10635
10635: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10636: LD_INT 19
10638: PPUSH
10639: LD_OWVAR 2
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 324
10651: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10652: LD_EXP 15
10656: PUSH
10657: LD_EXP 24
10661: AND
10662: IFFALSE 10764
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
// begin enable ;
10671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 34
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 34
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10767: LD_EXP 15
10771: PUSH
10772: LD_EXP 25
10776: AND
10777: IFFALSE 10797
10779: GO 10781
10781: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10782: LD_INT 32
10784: PPUSH
10785: LD_OWVAR 2
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 324
10797: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10798: LD_EXP 15
10802: PUSH
10803: LD_EXP 26
10807: AND
10808: IFFALSE 10989
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 33
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 2
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10989
// side := 0 ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10933
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10887: LD_OWVAR 2
10891: PUSH
10892: LD_VAR 0 1
10896: NONEQUAL
10897: PUSH
10898: LD_OWVAR 2
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 81
10912: PUSH
10913: LD_INT 2
10915: EQUAL
10916: AND
10917: IFFALSE 10931
// begin side := i ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// break ;
10929: GO 10933
// end ;
10931: GO 10884
10933: POP
10934: POP
// if not side then
10935: LD_VAR 0 3
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 10989
// for i := 1 to tmp do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: FOR_TO
10960: IFFALSE 10987
// if Prob ( 60 ) then
10962: LD_INT 60
10964: PPUSH
10965: CALL_OW 13
10969: IFFALSE 10985
// SetSide ( i , side ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 235
10985: GO 10959
10987: POP
10988: POP
// end ;
10989: PPOPN 3
10991: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10992: LD_EXP 15
10996: PUSH
10997: LD_EXP 28
11001: AND
11002: IFFALSE 11121
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11119
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 257
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: IN
11095: IFFALSE 11117
// SetClass ( un , rand ( 1 , 4 ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 336
11117: GO 11064
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11124: LD_EXP 15
11128: PUSH
11129: LD_EXP 27
11133: AND
11134: IFFALSE 11213
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_OWVAR 2
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 12
11204: ARRAY
11205: PPUSH
11206: LD_INT 100
11208: PPUSH
11209: CALL_OW 234
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 29
11225: AND
11226: IFFALSE 11324
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11324
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 3000
11311: PPUSH
11312: LD_INT 9000
11314: PPUSH
11315: CALL_OW 12
11319: PPUSH
11320: CALL_OW 492
// end ;
11324: PPOPN 1
11326: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11327: LD_EXP 15
11331: PUSH
11332: LD_EXP 30
11336: AND
11337: IFFALSE 11357
11339: GO 11341
11341: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11342: LD_INT 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 324
11357: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11358: LD_EXP 15
11362: PUSH
11363: LD_EXP 31
11367: AND
11368: IFFALSE 11451
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// if not tmp then
11413: LD_VAR 0 2
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11451
// for i in tmp do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_VAR 0 2
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetBLevel ( i , 10 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 10
11442: PPUSH
11443: CALL_OW 241
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 2
11453: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11454: LD_EXP 15
11458: PUSH
11459: LD_EXP 32
11463: AND
11464: IFFALSE 11575
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_OWVAR 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 25
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 3
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11575
// un := tmp [ rand ( 1 , tmp ) ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 12
11541: ARRAY
11542: ST_TO_ADDR
// if Crawls ( un ) then
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 318
11552: IFFALSE 11563
// ComWalk ( un ) ;
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 5
11570: PPUSH
11571: CALL_OW 336
// end ;
11575: PPOPN 3
11577: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11578: LD_EXP 15
11582: PUSH
11583: LD_EXP 33
11587: AND
11588: PUSH
11589: LD_OWVAR 67
11593: PUSH
11594: LD_INT 3
11596: LESS
11597: AND
11598: IFFALSE 11617
11600: GO 11602
11602: DISABLE
// Difficulty := Difficulty + 1 ;
11603: LD_ADDR_OWVAR 67
11607: PUSH
11608: LD_OWVAR 67
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
11617: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11618: LD_EXP 15
11622: PUSH
11623: LD_EXP 34
11627: AND
11628: IFFALSE 11731
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin for i := 1 to 5 do
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 5
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11729
// begin uc_nation := nation_nature ;
11652: LD_ADDR_OWVAR 21
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// uc_side := 0 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11668: LD_ADDR_OWVAR 29
11672: PUSH
11673: LD_INT 12
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
// hc_agressivity := 20 ;
11683: LD_ADDR_OWVAR 35
11687: PUSH
11688: LD_INT 20
11690: ST_TO_ADDR
// hc_class := class_tiger ;
11691: LD_ADDR_OWVAR 28
11695: PUSH
11696: LD_INT 14
11698: ST_TO_ADDR
// hc_gallery :=  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// hc_name :=  ;
11707: LD_ADDR_OWVAR 26
11711: PUSH
11712: LD_STRING 
11714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11715: CALL_OW 44
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 51
// end ;
11727: GO 11649
11729: POP
11730: POP
// end ;
11731: PPOPN 1
11733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11734: LD_EXP 15
11738: PUSH
11739: LD_EXP 35
11743: AND
11744: IFFALSE 11753
11746: GO 11748
11748: DISABLE
// StreamSibBomb ;
11749: CALL 11754 0 0
11753: END
// export function StreamSibBomb ; var i , x , y ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// result := false ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// for i := 1 to 16 do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 16
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11981
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 20
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 40
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 60
11806: PUSH
11807: LD_INT 70
11809: PUSH
11810: LD_INT 80
11812: PUSH
11813: LD_INT 90
11815: PUSH
11816: LD_INT 100
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 120
11824: PUSH
11825: LD_INT 130
11827: PUSH
11828: LD_INT 140
11830: PUSH
11831: LD_INT 150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 15
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_INT 10
11870: PUSH
11871: LD_INT 20
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 40
11879: PUSH
11880: LD_INT 50
11882: PUSH
11883: LD_INT 60
11885: PUSH
11886: LD_INT 70
11888: PUSH
11889: LD_INT 80
11891: PUSH
11892: LD_INT 90
11894: PUSH
11895: LD_INT 100
11897: PUSH
11898: LD_INT 110
11900: PUSH
11901: LD_INT 120
11903: PUSH
11904: LD_INT 130
11906: PUSH
11907: LD_INT 140
11909: PUSH
11910: LD_INT 150
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 15
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if ValidHex ( x , y ) then
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 488
11956: IFFALSE 11979
// begin result := [ x , y ] ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// break ;
11977: GO 11981
// end ; end ;
11979: GO 11781
11981: POP
11982: POP
// if result then
11983: LD_VAR 0 1
11987: IFFALSE 12047
// begin ToLua ( playSibBomb() ) ;
11989: LD_STRING playSibBomb()
11991: PPUSH
11992: CALL_OW 559
// wait ( 0 0$14 ) ;
11996: LD_INT 490
11998: PPUSH
11999: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PPUSH
12021: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 429
// end ; end ;
12047: LD_VAR 0 1
12051: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12052: LD_EXP 15
12056: PUSH
12057: LD_EXP 37
12061: AND
12062: IFFALSE 12074
12064: GO 12066
12066: DISABLE
// YouLost (  ) ;
12067: LD_STRING 
12069: PPUSH
12070: CALL_OW 104
12074: END
// every 0 0$1 trigger StreamModeActive and sFog do
12075: LD_EXP 15
12079: PUSH
12080: LD_EXP 36
12084: AND
12085: IFFALSE 12099
12087: GO 12089
12089: DISABLE
// FogOff ( your_side ) ;
12090: LD_OWVAR 2
12094: PPUSH
12095: CALL_OW 344
12099: END
// every 0 0$1 trigger StreamModeActive and sSun do
12100: LD_EXP 15
12104: PUSH
12105: LD_EXP 38
12109: AND
12110: IFFALSE 12138
12112: GO 12114
12114: DISABLE
// begin solar_recharge_percent := 0 ;
12115: LD_ADDR_OWVAR 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12123: LD_INT 10500
12125: PPUSH
12126: CALL_OW 67
// solar_recharge_percent := 100 ;
12130: LD_ADDR_OWVAR 79
12134: PUSH
12135: LD_INT 100
12137: ST_TO_ADDR
// end ;
12138: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12139: LD_EXP 15
12143: PUSH
12144: LD_EXP 39
12148: AND
12149: IFFALSE 12388
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
12158: PPUSH
// begin tmp := [ ] ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// for i := 1 to 6 do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12285
// begin uc_nation := nation_nature ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 0
12189: ST_TO_ADDR
// uc_side := 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12198: LD_ADDR_OWVAR 29
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: ST_TO_ADDR
// hc_agressivity := 20 ;
12213: LD_ADDR_OWVAR 35
12217: PUSH
12218: LD_INT 20
12220: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 17
12228: ST_TO_ADDR
// hc_gallery :=  ;
12229: LD_ADDR_OWVAR 33
12233: PUSH
12234: LD_STRING 
12236: ST_TO_ADDR
// hc_name :=  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// un := CreateHuman ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: CALL_OW 44
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 51
// tmp := tmp ^ un ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: ADD
12282: ST_TO_ADDR
// end ;
12283: GO 12179
12285: POP
12286: POP
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// for un in tmp do
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12379
// begin if IsDead ( un ) then
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL_OW 301
12316: IFFALSE 12336
// begin tmp := tmp diff un ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_VAR 0 2
12332: DIFF
12333: ST_TO_ADDR
// continue ;
12334: GO 12304
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12336: LD_VAR 0 2
12340: PPUSH
12341: LD_INT 3
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_VAR 0 2
12367: PPUSH
12368: CALL_OW 74
12372: PPUSH
12373: CALL_OW 115
// end ;
12377: GO 12304
12379: POP
12380: POP
// until not tmp ;
12381: LD_VAR 0 3
12385: NOT
12386: IFFALSE 12287
// end ;
12388: PPOPN 3
12390: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12391: LD_EXP 15
12395: PUSH
12396: LD_EXP 40
12400: AND
12401: IFFALSE 12455
12403: GO 12405
12405: DISABLE
// begin ToLua ( displayTroll(); ) ;
12406: LD_STRING displayTroll();
12408: PPUSH
12409: CALL_OW 559
// wait ( 3 3$00 ) ;
12413: LD_INT 6300
12415: PPUSH
12416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12420: LD_STRING hideTroll();
12422: PPUSH
12423: CALL_OW 559
// wait ( 1 1$00 ) ;
12427: LD_INT 2100
12429: PPUSH
12430: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12434: LD_STRING displayTroll();
12436: PPUSH
12437: CALL_OW 559
// wait ( 1 1$00 ) ;
12441: LD_INT 2100
12443: PPUSH
12444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12448: LD_STRING hideTroll();
12450: PPUSH
12451: CALL_OW 559
// end ;
12455: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12456: LD_EXP 15
12460: PUSH
12461: LD_EXP 41
12465: AND
12466: IFFALSE 12529
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin p := 0 ;
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// repeat game_speed := 1 ;
12482: LD_ADDR_OWVAR 65
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12490: LD_INT 35
12492: PPUSH
12493: CALL_OW 67
// p := p + 1 ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// until p >= 60 ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 60
12518: GREATEREQUAL
12519: IFFALSE 12482
// game_speed := 4 ;
12521: LD_ADDR_OWVAR 65
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// end ;
12529: PPOPN 1
12531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 42
12541: AND
12542: IFFALSE 12688
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_OWVAR 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not depot then
12605: LD_VAR 0 1
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12643: LD_VAR 0 2
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 3
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12691: LD_EXP 15
12695: PUSH
12696: LD_EXP 43
12700: AND
12701: IFFALSE 12798
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 1
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 12
12789: ARRAY
12790: PPUSH
12791: LD_INT 200
12793: PPUSH
12794: CALL_OW 234
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12801: LD_EXP 15
12805: PUSH
12806: LD_EXP 44
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 60
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12893: LD_EXP 15
12897: PUSH
12898: LD_EXP 45
12902: AND
12903: IFFALSE 13002
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 61
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13002
// for i in tmp do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13000
// if IsControledBy ( i ) then
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 312
12987: IFFALSE 12998
// ComUnlink ( i ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: CALL_OW 136
12998: GO 12975
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13005: LD_EXP 15
13009: PUSH
13010: LD_EXP 46
13014: AND
13015: IFFALSE 13155
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
// begin ToLua ( displayPowell(); ) ;
13024: LD_STRING displayPowell();
13026: PPUSH
13027: CALL_OW 559
// uc_side := 0 ;
13031: LD_ADDR_OWVAR 20
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_nation := 2 ;
13039: LD_ADDR_OWVAR 21
13043: PUSH
13044: LD_INT 2
13046: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13047: LD_ADDR_OWVAR 37
13051: PUSH
13052: LD_INT 14
13054: ST_TO_ADDR
// vc_engine := engine_siberite ;
13055: LD_ADDR_OWVAR 39
13059: PUSH
13060: LD_INT 3
13062: ST_TO_ADDR
// vc_control := control_apeman ;
13063: LD_ADDR_OWVAR 38
13067: PUSH
13068: LD_INT 5
13070: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_INT 29
13078: ST_TO_ADDR
// un := CreateVehicle ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13101: LD_INT 35
13103: PPUSH
13104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13108: LD_VAR 0 2
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 74
13139: PPUSH
13140: CALL_OW 115
// until IsDead ( un ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: CALL_OW 301
13153: IFFALSE 13101
// end ;
13155: PPOPN 2
13157: END
// every 0 0$1 trigger StreamModeActive and sStu do
13158: LD_EXP 15
13162: PUSH
13163: LD_EXP 54
13167: AND
13168: IFFALSE 13184
13170: GO 13172
13172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13173: LD_STRING displayStucuk();
13175: PPUSH
13176: CALL_OW 559
// ResetFog ;
13180: CALL_OW 335
// end ;
13184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13185: LD_EXP 15
13189: PUSH
13190: LD_EXP 47
13194: AND
13195: IFFALSE 13336
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: ST_TO_ADDR
// if not tmp then
13240: LD_VAR 0 2
13244: NOT
13245: IFFALSE 13249
// exit ;
13247: GO 13336
// un := tmp [ rand ( 1 , tmp ) ] ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PPUSH
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 12
13271: ARRAY
13272: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_OWVAR 3
13294: PUSH
13295: LD_VAR 0 1
13299: DIFF
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 74
13310: PPUSH
13311: CALL_OW 115
// wait ( 0 0$20 ) ;
13315: LD_INT 700
13317: PPUSH
13318: CALL_OW 67
// SetSide ( un , your_side ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_OWVAR 2
13331: PPUSH
13332: CALL_OW 235
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13339: LD_EXP 15
13343: PUSH
13344: LD_EXP 48
13348: AND
13349: IFFALSE 13455
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_OWVAR 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not depot then
13411: LD_VAR 0 1
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13455
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 251
13447: PPUSH
13448: LD_INT 70
13450: PPUSH
13451: CALL_OW 495
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13458: LD_EXP 15
13462: PUSH
13463: LD_EXP 49
13467: AND
13468: IFFALSE 13679
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 5
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13679
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13677
// begin d := rand ( 0 , 5 ) ;
13538: LD_ADDR_VAR 0 4
13542: PUSH
13543: LD_INT 0
13545: PPUSH
13546: LD_INT 5
13548: PPUSH
13549: CALL_OW 12
13553: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13554: LD_ADDR_VAR 0 2
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 250
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: LD_INT 12
13579: PPUSH
13580: CALL_OW 12
13584: PPUSH
13585: CALL_OW 272
13589: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 251
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: LD_INT 12
13615: PPUSH
13616: CALL_OW 12
13620: PPUSH
13621: CALL_OW 273
13625: ST_TO_ADDR
// if ValidHex ( x , y ) then
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 488
13640: IFFALSE 13675
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_INT 6
13662: PPUSH
13663: CALL_OW 12
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 483
// end ;
13675: GO 13535
13677: POP
13678: POP
// end ;
13679: PPOPN 5
13681: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13682: LD_EXP 15
13686: PUSH
13687: LD_EXP 50
13691: AND
13692: IFFALSE 13786
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_OWVAR 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: ST_TO_ADDR
// if not tmp then
13748: LD_VAR 0 2
13752: NOT
13753: IFFALSE 13757
// exit ;
13755: GO 13786
// for i in tmp do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13784
// SetFuel ( i , 0 ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 240
13782: GO 13767
13784: POP
13785: POP
// end ;
13786: PPOPN 2
13788: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 51
13798: AND
13799: IFFALSE 13865
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 29
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13865
// DestroyUnit ( tmp [ 1 ] ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: CALL_OW 65
// end ;
13865: PPOPN 1
13867: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 53
13877: AND
13878: IFFALSE 14007
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin uc_side := 0 ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// uc_nation := nation_arabian ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_INT 2
13901: ST_TO_ADDR
// hc_gallery :=  ;
13902: LD_ADDR_OWVAR 33
13906: PUSH
13907: LD_STRING 
13909: ST_TO_ADDR
// hc_name :=  ;
13910: LD_ADDR_OWVAR 26
13914: PUSH
13915: LD_STRING 
13917: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 11
13923: PPUSH
13924: LD_INT 10
13926: PPUSH
13927: CALL_OW 380
// un := CreateHuman ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: CALL_OW 44
13940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 74
13991: PPUSH
13992: CALL_OW 115
// until IsDead ( un ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 301
14005: IFFALSE 13953
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14010: LD_EXP 15
14014: PUSH
14015: LD_EXP 55
14019: AND
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14025: LD_STRING earthquake(getX(game), 0, 32)
14027: PPUSH
14028: CALL_OW 559
14032: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14033: LD_EXP 15
14037: PUSH
14038: LD_EXP 56
14042: AND
14043: IFFALSE 14134
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 33
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if not tmp then
14099: LD_VAR 0 1
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14108: LD_VAR 0 1
14112: PUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 12
14125: ARRAY
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 234
// end ;
14134: PPOPN 1
14136: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14137: LD_EXP 15
14141: PUSH
14142: LD_EXP 57
14146: AND
14147: IFFALSE 14288
14149: GO 14151
14151: DISABLE
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// if not tmp then
14193: LD_VAR 0 3
14197: NOT
14198: IFFALSE 14202
// exit ;
14200: GO 14288
// un := tmp [ rand ( 1 , tmp ) ] ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// if Crawls ( un ) then
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 318
14235: IFFALSE 14246
// ComWalk ( un ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 9
14253: PPUSH
14254: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14258: LD_INT 28
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14273: LD_INT 29
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ;
14288: PPOPN 3
14290: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14291: LD_EXP 15
14295: PUSH
14296: LD_EXP 58
14300: AND
14301: IFFALSE 14412
14303: GO 14305
14305: DISABLE
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if not tmp then
14347: LD_VAR 0 3
14351: NOT
14352: IFFALSE 14356
// exit ;
14354: GO 14412
// un := tmp [ rand ( 1 , tmp ) ] ;
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 12
14378: ARRAY
14379: ST_TO_ADDR
// if Crawls ( un ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 318
14389: IFFALSE 14400
// ComWalk ( un ) ;
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_INT 8
14407: PPUSH
14408: CALL_OW 336
// end ;
14412: PPOPN 3
14414: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14415: LD_EXP 15
14419: PUSH
14420: LD_EXP 59
14424: AND
14425: IFFALSE 14569
14427: GO 14429
14429: DISABLE
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 51
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 34
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14569
// for i in tmp do
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14567
// if GetCargo ( i , mat_artifact ) = 0 then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 4
14539: PPUSH
14540: CALL_OW 289
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14565
// SetCargo ( i , mat_siberit , 100 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 3
14557: PPUSH
14558: LD_INT 100
14560: PPUSH
14561: CALL_OW 290
14565: GO 14529
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14572: LD_EXP 15
14576: PUSH
14577: LD_EXP 60
14581: AND
14582: IFFALSE 14765
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// if not tmp then
14613: LD_VAR 0 2
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14765
// for i := 1 to 2 do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 2
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14763
// begin uc_side := your_side ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_OWVAR 2
14647: ST_TO_ADDR
// uc_nation := nation_american ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// vc_chassis := us_morphling ;
14656: LD_ADDR_OWVAR 37
14660: PUSH
14661: LD_INT 5
14663: ST_TO_ADDR
// vc_engine := engine_siberite ;
14664: LD_ADDR_OWVAR 39
14668: PUSH
14669: LD_INT 3
14671: ST_TO_ADDR
// vc_control := control_computer ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_INT 3
14679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14680: LD_ADDR_OWVAR 40
14684: PUSH
14685: LD_INT 10
14687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: CALL_OW 310
14701: NOT
14702: IFFALSE 14749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14704: CALL_OW 45
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 250
14722: PPUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 50
14747: GO 14761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14749: CALL_OW 45
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 51
// end ;
14761: GO 14635
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14768: LD_EXP 15
14772: PUSH
14773: LD_EXP 61
14777: AND
14778: IFFALSE 15000
14780: GO 14782
14782: DISABLE
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15000
// s1 := rand ( 1 , 4 ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 4
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14870: LD_ADDR_VAR 0 4
14874: PUSH
14875: LD_VAR 0 6
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 2
14888: PPUSH
14889: CALL_OW 259
14893: ST_TO_ADDR
// if s1 = 1 then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_INT 1
14901: EQUAL
14902: IFFALSE 14922
// s2 := rand ( 2 , 4 ) else
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_INT 2
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
14920: GO 14930
// s2 := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 6
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: CALL_OW 259
14953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14954: LD_VAR 0 6
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 5
14972: PPUSH
14973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14977: LD_VAR 0 6
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: CALL_OW 237
// end ;
15000: PPOPN 6
15002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15003: LD_EXP 15
15007: PUSH
15008: LD_EXP 62
15012: AND
15013: IFFALSE 15092
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 1
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 234
// end ;
15092: PPOPN 1
15094: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15095: LD_EXP 15
15099: PUSH
15100: LD_EXP 63
15104: AND
15105: IFFALSE 15217
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: LD_INT 26
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15217
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 2
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15215
// SetLives ( i , 1 ) ;
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 234
15213: GO 15198
15215: POP
15216: POP
// end ;
15217: PPOPN 2
15219: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 64
15229: AND
15230: IFFALSE 15504
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin i := rand ( 1 , 7 ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 7
15250: PPUSH
15251: CALL_OW 12
15255: ST_TO_ADDR
// case i of 1 :
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15279
15269: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15270: LD_STRING earthquake(getX(game), 0, 32)
15272: PPUSH
15273: CALL_OW 559
15277: GO 15504
15279: LD_INT 2
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15301
15287: POP
// begin ToLua ( displayStucuk(); ) ;
15288: LD_STRING displayStucuk();
15290: PPUSH
15291: CALL_OW 559
// ResetFog ;
15295: CALL_OW 335
// end ; 3 :
15299: GO 15504
15301: LD_INT 3
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15413
15309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15504
// un := tmp [ rand ( 1 , tmp ) ] ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// if Crawls ( un ) then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 318
15388: IFFALSE 15399
// ComWalk ( un ) ;
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 8
15406: PPUSH
15407: CALL_OW 336
// end ; 4 :
15411: GO 15504
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15482
15421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_OWVAR 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 29
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 2
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15504
// DestroyUnit ( tmp [ 1 ] ) ;
15467: LD_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 65
// end ; 5 .. 7 :
15480: GO 15504
15482: LD_INT 5
15484: DOUBLE
15485: GREATEREQUAL
15486: IFFALSE 15494
15488: LD_INT 7
15490: DOUBLE
15491: LESSEQUAL
15492: IFTRUE 15496
15494: GO 15503
15496: POP
// StreamSibBomb ; end ;
15497: CALL 11754 0 0
15501: GO 15504
15503: POP
// end ;
15504: PPOPN 3
15506: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15507: LD_EXP 15
15511: PUSH
15512: LD_EXP 65
15516: AND
15517: IFFALSE 15673
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
// if not tmp then
15581: LD_VAR 0 2
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15673
// p := 0 ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// p := p + 1 ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 1
15617: PLUS
15618: ST_TO_ADDR
// for i in tmp do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: FOR_IN
15630: IFFALSE 15661
// if GetLives ( i ) < 1000 then
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 256
15641: PUSH
15642: LD_INT 1000
15644: LESS
15645: IFFALSE 15659
// SetLives ( i , 1000 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 1000
15654: PPUSH
15655: CALL_OW 234
15659: GO 15629
15661: POP
15662: POP
// until p > 20 ;
15663: LD_VAR 0 3
15667: PUSH
15668: LD_INT 20
15670: GREATER
15671: IFFALSE 15598
// end ;
15673: PPOPN 3
15675: END
// every 0 0$1 trigger StreamModeActive and sTime do
15676: LD_EXP 15
15680: PUSH
15681: LD_EXP 66
15685: AND
15686: IFFALSE 15721
15688: GO 15690
15690: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15691: LD_INT 28
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15706: LD_INT 30
15708: PPUSH
15709: LD_OWVAR 2
15713: PPUSH
15714: LD_INT 2
15716: PPUSH
15717: CALL_OW 322
// end ;
15721: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15722: LD_EXP 15
15726: PUSH
15727: LD_EXP 67
15731: AND
15732: IFFALSE 15853
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_OWVAR 2
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15853
// for i in tmp do
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: FOR_IN
15815: IFFALSE 15851
// begin if Crawls ( i ) then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( i ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 138
// SetClass ( i , 2 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: GO 15814
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15856: LD_EXP 15
15860: PUSH
15861: LD_EXP 68
15865: AND
15866: IFFALSE 16147
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 9
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15894: LD_INT 9
15896: PPUSH
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 343
// uc_side := 9 ;
15906: LD_ADDR_OWVAR 20
15910: PUSH
15911: LD_INT 9
15913: ST_TO_ADDR
// uc_nation := 2 ;
15914: LD_ADDR_OWVAR 21
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// hc_name := Dark Warrior ;
15922: LD_ADDR_OWVAR 26
15926: PUSH
15927: LD_STRING Dark Warrior
15929: ST_TO_ADDR
// hc_gallery :=  ;
15930: LD_ADDR_OWVAR 33
15934: PUSH
15935: LD_STRING 
15937: ST_TO_ADDR
// hc_noskilllimit := true ;
15938: LD_ADDR_OWVAR 76
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15946: LD_ADDR_OWVAR 31
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// un := CreateHuman ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: CALL_OW 44
15978: ST_TO_ADDR
// hc_noskilllimit := false ;
15979: LD_ADDR_OWVAR 76
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 51
// p := 0 ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16007: LD_INT 35
16009: PPUSH
16010: CALL_OW 67
// p := p + 1 ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PLUS
16027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL_OW 256
16037: PUSH
16038: LD_INT 1000
16040: LESS
16041: IFFALSE 16055
// SetLives ( un , 1000 ) ;
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1000
16050: PPUSH
16051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 81
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 91
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 74
16106: PPUSH
16107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 60
16118: GREATER
16119: PUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 301
16129: OR
16130: IFFALSE 16007
// if un then
16132: LD_VAR 0 3
16136: IFFALSE 16147
// RemoveUnit ( un ) ;
16138: LD_VAR 0 3
16142: PPUSH
16143: CALL_OW 64
// end ;
16147: PPOPN 3
16149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16150: LD_INT 0
16152: PPUSH
// case cmd of 301 :
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 301
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16198
16166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 7
16176: PPUSH
16177: LD_VAR 0 8
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 17399 0 5
16196: GO 16319
16198: LD_INT 302
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16243
16206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16207: LD_VAR 0 6
16211: PPUSH
16212: LD_VAR 0 7
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 9
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 17490 0 6
16241: GO 16319
16243: LD_INT 303
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16288
16251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16252: LD_VAR 0 6
16256: PPUSH
16257: LD_VAR 0 7
16261: PPUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: CALL 16324 0 6
16286: GO 16319
16288: LD_INT 304
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16318
16296: POP
// hHackTeleport ( unit , x , y ) ; end ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL 18083 0 3
16316: GO 16319
16318: POP
// end ;
16319: LD_VAR 0 12
16323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: LESS
16336: PUSH
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 3
16344: GREATER
16345: OR
16346: PUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: LD_VAR 0 6
16356: PPUSH
16357: CALL_OW 428
16361: OR
16362: IFFALSE 16366
// exit ;
16364: GO 17086
// uc_side := your_side ;
16366: LD_ADDR_OWVAR 20
16370: PUSH
16371: LD_OWVAR 2
16375: ST_TO_ADDR
// uc_nation := nation ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_VAR 0 1
16385: ST_TO_ADDR
// bc_level = 1 ;
16386: LD_ADDR_OWVAR 43
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// case btype of 1 :
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_depot ; 2 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
16416: GO 17030
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_warehouse ; 3 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
16435: GO 17030
16437: LD_INT 3
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16456
16445: POP
// bc_type := b_lab ; 4 .. 9 :
16446: LD_ADDR_OWVAR 42
16450: PUSH
16451: LD_INT 6
16453: ST_TO_ADDR
16454: GO 17030
16456: LD_INT 4
16458: DOUBLE
16459: GREATEREQUAL
16460: IFFALSE 16468
16462: LD_INT 9
16464: DOUBLE
16465: LESSEQUAL
16466: IFTRUE 16470
16468: GO 16522
16470: POP
// begin bc_type := b_lab_half ;
16471: LD_ADDR_OWVAR 42
16475: PUSH
16476: LD_INT 7
16478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16479: LD_ADDR_OWVAR 44
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 13
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 3
16517: MINUS
16518: ARRAY
16519: ST_TO_ADDR
// end ; 10 .. 13 :
16520: GO 17030
16522: LD_INT 10
16524: DOUBLE
16525: GREATEREQUAL
16526: IFFALSE 16534
16528: LD_INT 13
16530: DOUBLE
16531: LESSEQUAL
16532: IFTRUE 16536
16534: GO 16613
16536: POP
// begin bc_type := b_lab_full ;
16537: LD_ADDR_OWVAR 42
16541: PUSH
16542: LD_INT 8
16544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16545: LD_ADDR_OWVAR 44
16549: PUSH
16550: LD_INT 10
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 14
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 9
16575: MINUS
16576: ARRAY
16577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16578: LD_ADDR_OWVAR 45
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 15
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 9
16608: MINUS
16609: ARRAY
16610: ST_TO_ADDR
// end ; 14 :
16611: GO 17030
16613: LD_INT 14
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_workshop ; 15 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 2
16629: ST_TO_ADDR
16630: GO 17030
16632: LD_INT 15
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_factory ; 16 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 3
16648: ST_TO_ADDR
16649: GO 17030
16651: LD_INT 16
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16670
16659: POP
// bc_type := b_ext_gun ; 17 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 17
16667: ST_TO_ADDR
16668: GO 17030
16670: LD_INT 17
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16706
16678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16679: LD_ADDR_OWVAR 42
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 19
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: ST_TO_ADDR
16704: GO 17030
16706: LD_INT 18
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radar ; 19 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 20
16722: ST_TO_ADDR
16723: GO 17030
16725: LD_INT 19
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_radio ; 20 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 22
16741: ST_TO_ADDR
16742: GO 17030
16744: LD_INT 20
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_siberium ; 21 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 21
16760: ST_TO_ADDR
16761: GO 17030
16763: LD_INT 21
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_computer ; 22 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 24
16779: ST_TO_ADDR
16780: GO 17030
16782: LD_INT 22
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_track ; 23 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 16
16798: ST_TO_ADDR
16799: GO 17030
16801: LD_INT 23
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_ext_laser ; 24 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 25
16817: ST_TO_ADDR
16818: GO 17030
16820: LD_INT 24
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_control_tower ; 25 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 36
16836: ST_TO_ADDR
16837: GO 17030
16839: LD_INT 25
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_breastwork ; 26 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 31
16855: ST_TO_ADDR
16856: GO 17030
16858: LD_INT 26
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_bunker ; 27 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 32
16874: ST_TO_ADDR
16875: GO 17030
16877: LD_INT 27
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_turret ; 28 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 33
16893: ST_TO_ADDR
16894: GO 17030
16896: LD_INT 28
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_armoury ; 29 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 4
16912: ST_TO_ADDR
16913: GO 17030
16915: LD_INT 29
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_barracks ; 30 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 5
16931: ST_TO_ADDR
16932: GO 17030
16934: LD_INT 30
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_solar_power ; 31 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 27
16950: ST_TO_ADDR
16951: GO 17030
16953: LD_INT 31
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_oil_power ; 32 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 26
16969: ST_TO_ADDR
16970: GO 17030
16972: LD_INT 32
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_siberite_power ; 33 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 28
16988: ST_TO_ADDR
16989: GO 17030
16991: LD_INT 33
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_oil_mine ; 34 :
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 29
17007: ST_TO_ADDR
17008: GO 17030
17010: LD_INT 34
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17029
17018: POP
// bc_type := b_siberite_mine ; end ;
17019: LD_ADDR_OWVAR 42
17023: PUSH
17024: LD_INT 30
17026: ST_TO_ADDR
17027: GO 17030
17029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: CALL_OW 47
17054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17055: LD_OWVAR 42
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: IN
17070: IFFALSE 17086
// PlaceWeaponTurret ( b , weapon ) ;
17072: LD_VAR 0 8
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 431
// end ;
17086: LD_VAR 0 7
17090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 4
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17219
// for i in tmp do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17217
// for j = 1 to 3 do
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_INT 3
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 274
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 99999
17206: PPUSH
17207: CALL_OW 277
17211: GO 17186
17213: POP
17214: POP
17215: GO 17170
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 1
17223: RET
// export function hHackSetLevel10 ; var i , j ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17302
// if IsSelected ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 306
17261: IFFALSE 17300
// begin for j := 1 to 4 do
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 4
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17298
// SetSkill ( i , j , 10 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 237
17296: GO 17276
17298: POP
17299: POP
// end ;
17300: GO 17249
17302: POP
17303: POP
// end ;
17304: LD_VAR 0 1
17308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17392
// begin for j := 1 to 4 do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 4
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17388
// SetSkill ( i , j , 10 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 10
17381: PPUSH
17382: CALL_OW 237
17386: GO 17366
17388: POP
17389: POP
// end ;
17390: GO 17350
17392: POP
17393: POP
// end ;
17394: LD_VAR 0 1
17398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17399: LD_INT 0
17401: PPUSH
// uc_side := your_side ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_OWVAR 2
17411: ST_TO_ADDR
// uc_nation := nation ;
17412: LD_ADDR_OWVAR 21
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// InitHc ;
17422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17426: LD_INT 0
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL_OW 428
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17463: CALL_OW 44
17467: PPUSH
17468: LD_VAR 0 4
17472: PPUSH
17473: LD_VAR 0 5
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 48
// end ;
17485: LD_VAR 0 6
17489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: IN
17531: IFFALSE 17543
// uc_nation := nation_american else
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
17541: GO 17586
// if chassis in [ 11 , 12 , 13 , 14 ] then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17578
// uc_nation := nation_arabian else
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
17576: GO 17586
// uc_nation := nation_russian ;
17578: LD_ADDR_OWVAR 21
17582: PUSH
17583: LD_INT 3
17585: ST_TO_ADDR
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// un := CreateVehicle ;
17626: LD_ADDR_VAR 0 8
17630: PUSH
17631: CALL_OW 45
17635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 12
17651: PPUSH
17652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17656: LD_VAR 0 8
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 48
// end ;
17678: LD_VAR 0 7
17682: RET
// export hInvincible ; every 1 do
17683: GO 17685
17685: DISABLE
// hInvincible := [ ] ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
17693: END
// every 10 do var i ;
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin enable ;
17700: ENABLE
// if not hInvincible then
17701: LD_EXP 69
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17754
// for i in hInvincible do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_EXP 69
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17752
// if GetLives ( i ) < 1000 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 256
17732: PUSH
17733: LD_INT 1000
17735: LESS
17736: IFFALSE 17750
// SetLives ( i , 1000 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 1000
17745: PPUSH
17746: CALL_OW 234
17750: GO 17720
17752: POP
17753: POP
// end ;
17754: PPOPN 1
17756: END
// export function hHackInvincible ; var i ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17861
// if IsSelected ( i ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 306
17811: IFFALSE 17859
// begin if i in hInvincible then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_EXP 69
17822: IN
17823: IFFALSE 17843
// hInvincible := hInvincible diff i else
17825: LD_ADDR_EXP 69
17829: PUSH
17830: LD_EXP 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: ST_TO_ADDR
17841: GO 17859
// hInvincible := hInvincible union i ;
17843: LD_ADDR_EXP 69
17847: PUSH
17848: LD_EXP 69
17852: PUSH
17853: LD_VAR 0 2
17857: UNION
17858: ST_TO_ADDR
// end ;
17859: GO 17799
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackInvisible ; var i , j ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17918
// if IsSelected ( i ) then
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 306
17905: IFFALSE 17916
// ComForceInvisible ( i ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 496
17916: GO 17893
17918: POP
17919: POP
// end ;
17920: LD_VAR 0 1
17924: RET
// export function hHackChangeYourSide ; begin
17925: LD_INT 0
17927: PPUSH
// if your_side = 8 then
17928: LD_OWVAR 2
17932: PUSH
17933: LD_INT 8
17935: EQUAL
17936: IFFALSE 17948
// your_side := 0 else
17938: LD_ADDR_OWVAR 2
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
17946: GO 17962
// your_side := your_side + 1 ;
17948: LD_ADDR_OWVAR 2
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 1
17966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// for i in all_units do
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_OWVAR 3
17981: PUSH
17982: FOR_IN
17983: IFFALSE 18061
// if IsSelected ( i ) then
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 306
17994: IFFALSE 18059
// begin j := GetSide ( i ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// if j = 8 then
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 8
18018: EQUAL
18019: IFFALSE 18031
// j := 0 else
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
18029: GO 18045
// j := j + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// SetSide ( i , j ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 235
// end ;
18059: GO 17982
18061: POP
18062: POP
// end ;
18063: LD_VAR 0 1
18067: RET
// export function hHackFog ; begin
18068: LD_INT 0
18070: PPUSH
// FogOff ( true ) ;
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 344
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 483
// CenterOnXY ( x , y ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 84
// end ; end_of_file
18125: LD_VAR 0 4
18129: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_EXP 84
18150: EQUAL
18151: IFFALSE 18223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 4
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 495
// end ; end ;
18223: LD_VAR 0 2
18227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18228: LD_INT 0
18230: PPUSH
// end ;
18231: LD_VAR 0 4
18235: RET
// export function SOS_Command ( cmd ) ; begin
18236: LD_INT 0
18238: PPUSH
// end ;
18239: LD_VAR 0 2
18243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18244: LD_INT 0
18246: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 250
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_EXP 87
18270: EQUAL
18271: AND
18272: IFFALSE 18293
// MinerPlaceMine ( unit , x , y ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_VAR 0 5
18288: PPUSH
18289: CALL 20634 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18293: LD_VAR 0 1
18297: PUSH
18298: LD_INT 251
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 264
18311: PUSH
18312: LD_EXP 87
18316: EQUAL
18317: AND
18318: IFFALSE 18339
// MinerDetonateMine ( unit , x , y ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: LD_VAR 0 5
18334: PPUSH
18335: CALL 20911 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 252
18346: EQUAL
18347: PUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_EXP 87
18362: EQUAL
18363: AND
18364: IFFALSE 18385
// MinerCreateMinefield ( unit , x , y ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 4
18375: PPUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: CALL 21328 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 253
18392: EQUAL
18393: PUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 257
18403: PUSH
18404: LD_INT 5
18406: EQUAL
18407: AND
18408: IFFALSE 18429
// ComBinocular ( unit , x , y ) ;
18410: LD_VAR 0 2
18414: PPUSH
18415: LD_VAR 0 4
18419: PPUSH
18420: LD_VAR 0 5
18424: PPUSH
18425: CALL 21699 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 254
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 264
18447: PUSH
18448: LD_EXP 82
18452: EQUAL
18453: AND
18454: PUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: CALL_OW 263
18464: PUSH
18465: LD_INT 3
18467: EQUAL
18468: AND
18469: IFFALSE 18485
// HackDestroyVehicle ( unit , selectedUnit ) ;
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: CALL 19994 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18485: LD_VAR 0 1
18489: PUSH
18490: LD_INT 255
18492: EQUAL
18493: PUSH
18494: LD_VAR 0 2
18498: PPUSH
18499: CALL_OW 264
18503: PUSH
18504: LD_INT 14
18506: PUSH
18507: LD_INT 53
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: IN
18514: AND
18515: PUSH
18516: LD_VAR 0 4
18520: PPUSH
18521: LD_VAR 0 5
18525: PPUSH
18526: CALL_OW 488
18530: AND
18531: IFFALSE 18555
// CutTreeXYR ( unit , x , y , 12 ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 4
18542: PPUSH
18543: LD_VAR 0 5
18547: PPUSH
18548: LD_INT 12
18550: PPUSH
18551: CALL 18560 0 4
// end ;
18555: LD_VAR 0 6
18559: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18571: LD_VAR 0 1
18575: NOT
18576: PUSH
18577: LD_VAR 0 2
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: CALL_OW 488
18591: NOT
18592: OR
18593: PUSH
18594: LD_VAR 0 4
18598: NOT
18599: OR
18600: IFFALSE 18604
// exit ;
18602: GO 18944
// list := [ ] ;
18604: LD_ADDR_VAR 0 13
18608: PUSH
18609: EMPTY
18610: ST_TO_ADDR
// if x - r < 0 then
18611: LD_VAR 0 2
18615: PUSH
18616: LD_VAR 0 4
18620: MINUS
18621: PUSH
18622: LD_INT 0
18624: LESS
18625: IFFALSE 18637
// min_x := 0 else
18627: LD_ADDR_VAR 0 7
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
18635: GO 18653
// min_x := x - r ;
18637: LD_ADDR_VAR 0 7
18641: PUSH
18642: LD_VAR 0 2
18646: PUSH
18647: LD_VAR 0 4
18651: MINUS
18652: ST_TO_ADDR
// if y - r < 0 then
18653: LD_VAR 0 3
18657: PUSH
18658: LD_VAR 0 4
18662: MINUS
18663: PUSH
18664: LD_INT 0
18666: LESS
18667: IFFALSE 18679
// min_y := 0 else
18669: LD_ADDR_VAR 0 8
18673: PUSH
18674: LD_INT 0
18676: ST_TO_ADDR
18677: GO 18695
// min_y := y - r ;
18679: LD_ADDR_VAR 0 8
18683: PUSH
18684: LD_VAR 0 3
18688: PUSH
18689: LD_VAR 0 4
18693: MINUS
18694: ST_TO_ADDR
// max_x := x + r ;
18695: LD_ADDR_VAR 0 9
18699: PUSH
18700: LD_VAR 0 2
18704: PUSH
18705: LD_VAR 0 4
18709: PLUS
18710: ST_TO_ADDR
// max_y := y + r ;
18711: LD_ADDR_VAR 0 10
18715: PUSH
18716: LD_VAR 0 3
18720: PUSH
18721: LD_VAR 0 4
18725: PLUS
18726: ST_TO_ADDR
// for _x = min_x to max_x do
18727: LD_ADDR_VAR 0 11
18731: PUSH
18732: DOUBLE
18733: LD_VAR 0 7
18737: DEC
18738: ST_TO_ADDR
18739: LD_VAR 0 9
18743: PUSH
18744: FOR_TO
18745: IFFALSE 18862
// for _y = min_y to max_y do
18747: LD_ADDR_VAR 0 12
18751: PUSH
18752: DOUBLE
18753: LD_VAR 0 8
18757: DEC
18758: ST_TO_ADDR
18759: LD_VAR 0 10
18763: PUSH
18764: FOR_TO
18765: IFFALSE 18858
// begin if not ValidHex ( _x , _y ) then
18767: LD_VAR 0 11
18771: PPUSH
18772: LD_VAR 0 12
18776: PPUSH
18777: CALL_OW 488
18781: NOT
18782: IFFALSE 18786
// continue ;
18784: GO 18764
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18786: LD_VAR 0 11
18790: PPUSH
18791: LD_VAR 0 12
18795: PPUSH
18796: CALL_OW 351
18800: PUSH
18801: LD_VAR 0 11
18805: PPUSH
18806: LD_VAR 0 12
18810: PPUSH
18811: CALL_OW 554
18815: AND
18816: IFFALSE 18856
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18818: LD_ADDR_VAR 0 13
18822: PUSH
18823: LD_VAR 0 13
18827: PPUSH
18828: LD_VAR 0 13
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: PPUSH
18837: LD_VAR 0 11
18841: PUSH
18842: LD_VAR 0 12
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 2
18855: ST_TO_ADDR
// end ;
18856: GO 18764
18858: POP
18859: POP
18860: GO 18744
18862: POP
18863: POP
// if not list then
18864: LD_VAR 0 13
18868: NOT
18869: IFFALSE 18873
// exit ;
18871: GO 18944
// for i in list do
18873: LD_ADDR_VAR 0 6
18877: PUSH
18878: LD_VAR 0 13
18882: PUSH
18883: FOR_IN
18884: IFFALSE 18942
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_STRING M
18893: PUSH
18894: LD_VAR 0 6
18898: PUSH
18899: LD_INT 1
18901: ARRAY
18902: PUSH
18903: LD_VAR 0 6
18907: PUSH
18908: LD_INT 2
18910: ARRAY
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: PPUSH
18936: CALL_OW 447
18940: GO 18883
18942: POP
18943: POP
// end ;
18944: LD_VAR 0 5
18948: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18949: LD_EXP 70
18953: NOT
18954: IFFALSE 19004
18956: GO 18958
18958: DISABLE
// begin initHack := true ;
18959: LD_ADDR_EXP 70
18963: PUSH
18964: LD_INT 1
18966: ST_TO_ADDR
// hackTanks := [ ] ;
18967: LD_ADDR_EXP 71
18971: PUSH
18972: EMPTY
18973: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18974: LD_ADDR_EXP 72
18978: PUSH
18979: EMPTY
18980: ST_TO_ADDR
// hackLimit := 3 ;
18981: LD_ADDR_EXP 73
18985: PUSH
18986: LD_INT 3
18988: ST_TO_ADDR
// hackDist := 12 ;
18989: LD_ADDR_EXP 74
18993: PUSH
18994: LD_INT 12
18996: ST_TO_ADDR
// hackCounter := [ ] ;
18997: LD_ADDR_EXP 75
19001: PUSH
19002: EMPTY
19003: ST_TO_ADDR
// end ;
19004: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19005: LD_EXP 70
19009: PUSH
19010: LD_INT 34
19012: PUSH
19013: LD_EXP 82
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: AND
19027: IFFALSE 19282
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
// begin enable ;
19036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 34
19044: PUSH
19045: LD_EXP 82
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 69
19058: PUSH
19059: FOR_IN
19060: IFFALSE 19280
// begin if not i in hackTanks then
19062: LD_VAR 0 1
19066: PUSH
19067: LD_EXP 71
19071: IN
19072: NOT
19073: IFFALSE 19156
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19075: LD_ADDR_EXP 71
19079: PUSH
19080: LD_EXP 71
19084: PPUSH
19085: LD_EXP 71
19089: PUSH
19090: LD_INT 1
19092: PLUS
19093: PPUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19104: LD_ADDR_EXP 72
19108: PUSH
19109: LD_EXP 72
19113: PPUSH
19114: LD_EXP 72
19118: PUSH
19119: LD_INT 1
19121: PLUS
19122: PPUSH
19123: EMPTY
19124: PPUSH
19125: CALL_OW 1
19129: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19130: LD_ADDR_EXP 75
19134: PUSH
19135: LD_EXP 75
19139: PPUSH
19140: LD_EXP 75
19144: PUSH
19145: LD_INT 1
19147: PLUS
19148: PPUSH
19149: EMPTY
19150: PPUSH
19151: CALL_OW 1
19155: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 302
19165: NOT
19166: IFFALSE 19179
// begin HackUnlinkAll ( i ) ;
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL 19285 0 1
// continue ;
19177: GO 19059
// end ; HackCheckCapturedStatus ( i ) ;
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL 19728 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19188: LD_ADDR_VAR 0 2
19192: PUSH
19193: LD_INT 81
19195: PUSH
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 255
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 33
19212: PUSH
19213: LD_INT 3
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 91
19222: PUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_EXP 74
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 50
19240: PUSH
19241: EMPTY
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: ST_TO_ADDR
// if not tmp then
19255: LD_VAR 0 2
19259: NOT
19260: IFFALSE 19264
// continue ;
19262: GO 19059
// HackLink ( i , tmp ) ;
19264: LD_VAR 0 1
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: CALL 19421 0 2
// end ;
19278: GO 19059
19280: POP
19281: POP
// end ;
19282: PPOPN 2
19284: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
19289: PPUSH
// if not hack in hackTanks then
19290: LD_VAR 0 1
19294: PUSH
19295: LD_EXP 71
19299: IN
19300: NOT
19301: IFFALSE 19305
// exit ;
19303: GO 19416
// index := GetElementIndex ( hackTanks , hack ) ;
19305: LD_ADDR_VAR 0 4
19309: PUSH
19310: LD_EXP 71
19314: PPUSH
19315: LD_VAR 0 1
19319: PPUSH
19320: CALL 27114 0 2
19324: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19325: LD_EXP 72
19329: PUSH
19330: LD_VAR 0 4
19334: ARRAY
19335: IFFALSE 19416
// begin for i in hackTanksCaptured [ index ] do
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_EXP 72
19346: PUSH
19347: LD_VAR 0 4
19351: ARRAY
19352: PUSH
19353: FOR_IN
19354: IFFALSE 19380
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 1
19363: ARRAY
19364: PPUSH
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 2
19372: ARRAY
19373: PPUSH
19374: CALL_OW 235
19378: GO 19353
19380: POP
19381: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19382: LD_ADDR_EXP 72
19386: PUSH
19387: LD_EXP 72
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: EMPTY
19398: PPUSH
19399: CALL_OW 1
19403: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19404: LD_VAR 0 1
19408: PPUSH
19409: LD_INT 0
19411: PPUSH
19412: CALL_OW 505
// end ; end ;
19416: LD_VAR 0 2
19420: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19421: LD_INT 0
19423: PPUSH
19424: PPUSH
19425: PPUSH
// if not hack in hackTanks or not vehicles then
19426: LD_VAR 0 1
19430: PUSH
19431: LD_EXP 71
19435: IN
19436: NOT
19437: PUSH
19438: LD_VAR 0 2
19442: NOT
19443: OR
19444: IFFALSE 19448
// exit ;
19446: GO 19723
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 1
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: CALL 27764 0 4
19473: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19474: LD_ADDR_VAR 0 5
19478: PUSH
19479: LD_EXP 71
19483: PPUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL 27114 0 2
19493: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19494: LD_EXP 72
19498: PUSH
19499: LD_VAR 0 5
19503: ARRAY
19504: PUSH
19505: LD_EXP 73
19509: LESS
19510: IFFALSE 19699
// begin for i := 1 to vehicles do
19512: LD_ADDR_VAR 0 4
19516: PUSH
19517: DOUBLE
19518: LD_INT 1
19520: DEC
19521: ST_TO_ADDR
19522: LD_VAR 0 2
19526: PUSH
19527: FOR_TO
19528: IFFALSE 19697
// begin if hackTanksCaptured [ index ] = hackLimit then
19530: LD_EXP 72
19534: PUSH
19535: LD_VAR 0 5
19539: ARRAY
19540: PUSH
19541: LD_EXP 73
19545: EQUAL
19546: IFFALSE 19550
// break ;
19548: GO 19697
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19550: LD_ADDR_EXP 75
19554: PUSH
19555: LD_EXP 75
19559: PPUSH
19560: LD_VAR 0 5
19564: PPUSH
19565: LD_EXP 75
19569: PUSH
19570: LD_VAR 0 5
19574: ARRAY
19575: PUSH
19576: LD_INT 1
19578: PLUS
19579: PPUSH
19580: CALL_OW 1
19584: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19585: LD_ADDR_EXP 72
19589: PUSH
19590: LD_EXP 72
19594: PPUSH
19595: LD_VAR 0 5
19599: PUSH
19600: LD_EXP 72
19604: PUSH
19605: LD_VAR 0 5
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: PLUS
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: LD_VAR 0 2
19623: PUSH
19624: LD_VAR 0 4
19628: ARRAY
19629: PUSH
19630: LD_VAR 0 2
19634: PUSH
19635: LD_VAR 0 4
19639: ARRAY
19640: PPUSH
19641: CALL_OW 255
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL 27329 0 3
19654: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19655: LD_VAR 0 2
19659: PUSH
19660: LD_VAR 0 4
19664: ARRAY
19665: PPUSH
19666: LD_VAR 0 1
19670: PPUSH
19671: CALL_OW 255
19675: PPUSH
19676: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19680: LD_VAR 0 2
19684: PUSH
19685: LD_VAR 0 4
19689: ARRAY
19690: PPUSH
19691: CALL_OW 141
// end ;
19695: GO 19527
19697: POP
19698: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: LD_EXP 72
19708: PUSH
19709: LD_VAR 0 5
19713: ARRAY
19714: PUSH
19715: LD_INT 0
19717: PLUS
19718: PPUSH
19719: CALL_OW 505
// end ;
19723: LD_VAR 0 3
19727: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
// if not hack in hackTanks then
19734: LD_VAR 0 1
19738: PUSH
19739: LD_EXP 71
19743: IN
19744: NOT
19745: IFFALSE 19749
// exit ;
19747: GO 19989
// index := GetElementIndex ( hackTanks , hack ) ;
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: LD_EXP 71
19758: PPUSH
19759: LD_VAR 0 1
19763: PPUSH
19764: CALL 27114 0 2
19768: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: DOUBLE
19775: LD_EXP 72
19779: PUSH
19780: LD_VAR 0 4
19784: ARRAY
19785: INC
19786: ST_TO_ADDR
19787: LD_INT 1
19789: PUSH
19790: FOR_DOWNTO
19791: IFFALSE 19963
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19793: LD_ADDR_VAR 0 5
19797: PUSH
19798: LD_EXP 72
19802: PUSH
19803: LD_VAR 0 4
19807: ARRAY
19808: PUSH
19809: LD_VAR 0 3
19813: ARRAY
19814: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19815: LD_VAR 0 5
19819: PUSH
19820: LD_INT 1
19822: ARRAY
19823: PPUSH
19824: CALL_OW 302
19828: NOT
19829: PUSH
19830: LD_VAR 0 5
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: PPUSH
19839: CALL_OW 255
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 255
19853: NONEQUAL
19854: OR
19855: IFFALSE 19961
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19857: LD_VAR 0 5
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PPUSH
19866: CALL_OW 305
19870: PUSH
19871: LD_VAR 0 5
19875: PUSH
19876: LD_INT 1
19878: ARRAY
19879: PPUSH
19880: CALL_OW 255
19884: PUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 255
19894: EQUAL
19895: AND
19896: IFFALSE 19920
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19898: LD_VAR 0 5
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PPUSH
19907: LD_VAR 0 5
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: PPUSH
19916: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19920: LD_ADDR_EXP 72
19924: PUSH
19925: LD_EXP 72
19929: PPUSH
19930: LD_VAR 0 4
19934: PPUSH
19935: LD_EXP 72
19939: PUSH
19940: LD_VAR 0 4
19944: ARRAY
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL_OW 3
19955: PPUSH
19956: CALL_OW 1
19960: ST_TO_ADDR
// end ; end ;
19961: GO 19790
19963: POP
19964: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19965: LD_VAR 0 1
19969: PPUSH
19970: LD_EXP 72
19974: PUSH
19975: LD_VAR 0 4
19979: ARRAY
19980: PUSH
19981: LD_INT 0
19983: PLUS
19984: PPUSH
19985: CALL_OW 505
// end ;
19989: LD_VAR 0 2
19993: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
// if not hack in hackTanks then
20000: LD_VAR 0 1
20004: PUSH
20005: LD_EXP 71
20009: IN
20010: NOT
20011: IFFALSE 20015
// exit ;
20013: GO 20100
// index := GetElementIndex ( hackTanks , hack ) ;
20015: LD_ADDR_VAR 0 5
20019: PUSH
20020: LD_EXP 71
20024: PPUSH
20025: LD_VAR 0 1
20029: PPUSH
20030: CALL 27114 0 2
20034: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20035: LD_ADDR_VAR 0 4
20039: PUSH
20040: DOUBLE
20041: LD_INT 1
20043: DEC
20044: ST_TO_ADDR
20045: LD_EXP 72
20049: PUSH
20050: LD_VAR 0 5
20054: ARRAY
20055: PUSH
20056: FOR_TO
20057: IFFALSE 20098
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20059: LD_EXP 72
20063: PUSH
20064: LD_VAR 0 5
20068: ARRAY
20069: PUSH
20070: LD_VAR 0 4
20074: ARRAY
20075: PUSH
20076: LD_INT 1
20078: ARRAY
20079: PUSH
20080: LD_VAR 0 2
20084: EQUAL
20085: IFFALSE 20096
// KillUnit ( vehicle ) ;
20087: LD_VAR 0 2
20091: PPUSH
20092: CALL_OW 66
20096: GO 20056
20098: POP
20099: POP
// end ;
20100: LD_VAR 0 3
20104: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20105: LD_EXP 76
20109: NOT
20110: IFFALSE 20145
20112: GO 20114
20114: DISABLE
// begin initMiner := true ;
20115: LD_ADDR_EXP 76
20119: PUSH
20120: LD_INT 1
20122: ST_TO_ADDR
// minersList := [ ] ;
20123: LD_ADDR_EXP 77
20127: PUSH
20128: EMPTY
20129: ST_TO_ADDR
// minerMinesList := [ ] ;
20130: LD_ADDR_EXP 78
20134: PUSH
20135: EMPTY
20136: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20137: LD_ADDR_EXP 79
20141: PUSH
20142: LD_INT 5
20144: ST_TO_ADDR
// end ;
20145: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20146: LD_EXP 76
20150: PUSH
20151: LD_INT 34
20153: PUSH
20154: LD_EXP 87
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PPUSH
20163: CALL_OW 69
20167: AND
20168: IFFALSE 20631
20170: GO 20172
20172: DISABLE
20173: LD_INT 0
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
// begin enable ;
20179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20180: LD_ADDR_VAR 0 1
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_EXP 87
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: PUSH
20202: FOR_IN
20203: IFFALSE 20275
// begin if not i in minersList then
20205: LD_VAR 0 1
20209: PUSH
20210: LD_EXP 77
20214: IN
20215: NOT
20216: IFFALSE 20273
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20218: LD_ADDR_EXP 77
20222: PUSH
20223: LD_EXP 77
20227: PPUSH
20228: LD_EXP 77
20232: PUSH
20233: LD_INT 1
20235: PLUS
20236: PPUSH
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 1
20246: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20247: LD_ADDR_EXP 78
20251: PUSH
20252: LD_EXP 78
20256: PPUSH
20257: LD_EXP 78
20261: PUSH
20262: LD_INT 1
20264: PLUS
20265: PPUSH
20266: EMPTY
20267: PPUSH
20268: CALL_OW 1
20272: ST_TO_ADDR
// end end ;
20273: GO 20202
20275: POP
20276: POP
// for i := minerMinesList downto 1 do
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: DOUBLE
20283: LD_EXP 78
20287: INC
20288: ST_TO_ADDR
20289: LD_INT 1
20291: PUSH
20292: FOR_DOWNTO
20293: IFFALSE 20629
// begin if IsLive ( minersList [ i ] ) then
20295: LD_EXP 77
20299: PUSH
20300: LD_VAR 0 1
20304: ARRAY
20305: PPUSH
20306: CALL_OW 300
20310: IFFALSE 20338
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20312: LD_EXP 77
20316: PUSH
20317: LD_VAR 0 1
20321: ARRAY
20322: PPUSH
20323: LD_EXP 78
20327: PUSH
20328: LD_VAR 0 1
20332: ARRAY
20333: PPUSH
20334: CALL_OW 505
// if not minerMinesList [ i ] then
20338: LD_EXP 78
20342: PUSH
20343: LD_VAR 0 1
20347: ARRAY
20348: NOT
20349: IFFALSE 20353
// continue ;
20351: GO 20292
// for j := minerMinesList [ i ] downto 1 do
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: DOUBLE
20359: LD_EXP 78
20363: PUSH
20364: LD_VAR 0 1
20368: ARRAY
20369: INC
20370: ST_TO_ADDR
20371: LD_INT 1
20373: PUSH
20374: FOR_DOWNTO
20375: IFFALSE 20625
// begin side := GetSide ( minersList [ i ] ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_EXP 77
20386: PUSH
20387: LD_VAR 0 1
20391: ARRAY
20392: PPUSH
20393: CALL_OW 255
20397: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20398: LD_ADDR_VAR 0 4
20402: PUSH
20403: LD_EXP 78
20407: PUSH
20408: LD_VAR 0 1
20412: ARRAY
20413: PUSH
20414: LD_VAR 0 2
20418: ARRAY
20419: PUSH
20420: LD_INT 1
20422: ARRAY
20423: PPUSH
20424: LD_EXP 78
20428: PUSH
20429: LD_VAR 0 1
20433: ARRAY
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 2
20443: ARRAY
20444: PPUSH
20445: CALL_OW 428
20449: ST_TO_ADDR
// if not tmp then
20450: LD_VAR 0 4
20454: NOT
20455: IFFALSE 20459
// continue ;
20457: GO 20374
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20459: LD_VAR 0 4
20463: PUSH
20464: LD_INT 81
20466: PUSH
20467: LD_VAR 0 3
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: IN
20481: PUSH
20482: LD_EXP 78
20486: PUSH
20487: LD_VAR 0 1
20491: ARRAY
20492: PUSH
20493: LD_VAR 0 2
20497: ARRAY
20498: PUSH
20499: LD_INT 1
20501: ARRAY
20502: PPUSH
20503: LD_EXP 78
20507: PUSH
20508: LD_VAR 0 1
20512: ARRAY
20513: PUSH
20514: LD_VAR 0 2
20518: ARRAY
20519: PUSH
20520: LD_INT 2
20522: ARRAY
20523: PPUSH
20524: CALL_OW 458
20528: AND
20529: IFFALSE 20623
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20531: LD_EXP 78
20535: PUSH
20536: LD_VAR 0 1
20540: ARRAY
20541: PUSH
20542: LD_VAR 0 2
20546: ARRAY
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: PPUSH
20552: LD_EXP 78
20556: PUSH
20557: LD_VAR 0 1
20561: ARRAY
20562: PUSH
20563: LD_VAR 0 2
20567: ARRAY
20568: PUSH
20569: LD_INT 2
20571: ARRAY
20572: PPUSH
20573: LD_VAR 0 3
20577: PPUSH
20578: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20582: LD_ADDR_EXP 78
20586: PUSH
20587: LD_EXP 78
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_EXP 78
20601: PUSH
20602: LD_VAR 0 1
20606: ARRAY
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 3
20617: PPUSH
20618: CALL_OW 1
20622: ST_TO_ADDR
// end ; end ;
20623: GO 20374
20625: POP
20626: POP
// end ;
20627: GO 20292
20629: POP
20630: POP
// end ;
20631: PPOPN 4
20633: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20634: LD_INT 0
20636: PPUSH
20637: PPUSH
// result := false ;
20638: LD_ADDR_VAR 0 4
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 264
20655: PUSH
20656: LD_EXP 87
20660: EQUAL
20661: NOT
20662: IFFALSE 20666
// exit ;
20664: GO 20906
// index := GetElementIndex ( minersList , unit ) ;
20666: LD_ADDR_VAR 0 5
20670: PUSH
20671: LD_EXP 77
20675: PPUSH
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL 27114 0 2
20685: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20686: LD_EXP 78
20690: PUSH
20691: LD_VAR 0 5
20695: ARRAY
20696: PUSH
20697: LD_EXP 79
20701: GREATEREQUAL
20702: IFFALSE 20706
// exit ;
20704: GO 20906
// ComMoveXY ( unit , x , y ) ;
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_VAR 0 2
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20725: LD_INT 35
20727: PPUSH
20728: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: CALL 57178 0 3
20751: NOT
20752: PUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 314
20762: AND
20763: IFFALSE 20767
// exit ;
20765: GO 20906
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL_OW 428
20781: PUSH
20782: LD_VAR 0 1
20786: EQUAL
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 314
20797: NOT
20798: AND
20799: IFFALSE 20725
// PlaySoundXY ( x , y , PlantMine ) ;
20801: LD_VAR 0 2
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: LD_STRING PlantMine
20813: PPUSH
20814: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20818: LD_VAR 0 2
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 255
20837: PPUSH
20838: LD_INT 0
20840: PPUSH
20841: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20845: LD_ADDR_EXP 78
20849: PUSH
20850: LD_EXP 78
20854: PPUSH
20855: LD_VAR 0 5
20859: PUSH
20860: LD_EXP 78
20864: PUSH
20865: LD_VAR 0 5
20869: ARRAY
20870: PUSH
20871: LD_INT 1
20873: PLUS
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PPUSH
20879: LD_VAR 0 2
20883: PUSH
20884: LD_VAR 0 3
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL 27329 0 3
20897: ST_TO_ADDR
// result := true ;
20898: LD_ADDR_VAR 0 4
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// end ;
20906: LD_VAR 0 4
20910: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20911: LD_INT 0
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not unit in minersList then
20916: LD_VAR 0 1
20920: PUSH
20921: LD_EXP 77
20925: IN
20926: NOT
20927: IFFALSE 20931
// exit ;
20929: GO 21323
// index := GetElementIndex ( minersList , unit ) ;
20931: LD_ADDR_VAR 0 6
20935: PUSH
20936: LD_EXP 77
20940: PPUSH
20941: LD_VAR 0 1
20945: PPUSH
20946: CALL 27114 0 2
20950: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: DOUBLE
20957: LD_EXP 78
20961: PUSH
20962: LD_VAR 0 6
20966: ARRAY
20967: INC
20968: ST_TO_ADDR
20969: LD_INT 1
20971: PUSH
20972: FOR_DOWNTO
20973: IFFALSE 21134
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20975: LD_EXP 78
20979: PUSH
20980: LD_VAR 0 6
20984: ARRAY
20985: PUSH
20986: LD_VAR 0 5
20990: ARRAY
20991: PUSH
20992: LD_INT 1
20994: ARRAY
20995: PUSH
20996: LD_VAR 0 2
21000: EQUAL
21001: PUSH
21002: LD_EXP 78
21006: PUSH
21007: LD_VAR 0 6
21011: ARRAY
21012: PUSH
21013: LD_VAR 0 5
21017: ARRAY
21018: PUSH
21019: LD_INT 2
21021: ARRAY
21022: PUSH
21023: LD_VAR 0 3
21027: EQUAL
21028: AND
21029: IFFALSE 21132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21031: LD_EXP 78
21035: PUSH
21036: LD_VAR 0 6
21040: ARRAY
21041: PUSH
21042: LD_VAR 0 5
21046: ARRAY
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: LD_EXP 78
21056: PUSH
21057: LD_VAR 0 6
21061: ARRAY
21062: PUSH
21063: LD_VAR 0 5
21067: ARRAY
21068: PUSH
21069: LD_INT 2
21071: ARRAY
21072: PPUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 255
21082: PPUSH
21083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21087: LD_ADDR_EXP 78
21091: PUSH
21092: LD_EXP 78
21096: PPUSH
21097: LD_VAR 0 6
21101: PPUSH
21102: LD_EXP 78
21106: PUSH
21107: LD_VAR 0 6
21111: ARRAY
21112: PPUSH
21113: LD_VAR 0 5
21117: PPUSH
21118: CALL_OW 3
21122: PPUSH
21123: CALL_OW 1
21127: ST_TO_ADDR
// exit ;
21128: POP
21129: POP
21130: GO 21323
// end ; end ;
21132: GO 20972
21134: POP
21135: POP
// for i := minerMinesList [ index ] downto 1 do
21136: LD_ADDR_VAR 0 5
21140: PUSH
21141: DOUBLE
21142: LD_EXP 78
21146: PUSH
21147: LD_VAR 0 6
21151: ARRAY
21152: INC
21153: ST_TO_ADDR
21154: LD_INT 1
21156: PUSH
21157: FOR_DOWNTO
21158: IFFALSE 21321
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21160: LD_EXP 78
21164: PUSH
21165: LD_VAR 0 6
21169: ARRAY
21170: PUSH
21171: LD_VAR 0 5
21175: ARRAY
21176: PUSH
21177: LD_INT 1
21179: ARRAY
21180: PPUSH
21181: LD_EXP 78
21185: PUSH
21186: LD_VAR 0 6
21190: ARRAY
21191: PUSH
21192: LD_VAR 0 5
21196: ARRAY
21197: PUSH
21198: LD_INT 2
21200: ARRAY
21201: PPUSH
21202: LD_VAR 0 2
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: CALL_OW 298
21216: PUSH
21217: LD_INT 6
21219: LESS
21220: IFFALSE 21319
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21222: LD_EXP 78
21226: PUSH
21227: LD_VAR 0 6
21231: ARRAY
21232: PUSH
21233: LD_VAR 0 5
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: LD_EXP 78
21247: PUSH
21248: LD_VAR 0 6
21252: ARRAY
21253: PUSH
21254: LD_VAR 0 5
21258: ARRAY
21259: PUSH
21260: LD_INT 2
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 255
21273: PPUSH
21274: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21278: LD_ADDR_EXP 78
21282: PUSH
21283: LD_EXP 78
21287: PPUSH
21288: LD_VAR 0 6
21292: PPUSH
21293: LD_EXP 78
21297: PUSH
21298: LD_VAR 0 6
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 5
21308: PPUSH
21309: CALL_OW 3
21313: PPUSH
21314: CALL_OW 1
21318: ST_TO_ADDR
// end ; end ;
21319: GO 21157
21321: POP
21322: POP
// end ;
21323: LD_VAR 0 4
21327: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 264
21348: PUSH
21349: LD_EXP 87
21353: EQUAL
21354: NOT
21355: PUSH
21356: LD_VAR 0 1
21360: PUSH
21361: LD_EXP 77
21365: IN
21366: NOT
21367: OR
21368: IFFALSE 21372
// exit ;
21370: GO 21694
// index := GetElementIndex ( minersList , unit ) ;
21372: LD_ADDR_VAR 0 6
21376: PUSH
21377: LD_EXP 77
21381: PPUSH
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL 27114 0 2
21391: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21392: LD_ADDR_VAR 0 8
21396: PUSH
21397: LD_EXP 79
21401: PUSH
21402: LD_EXP 78
21406: PUSH
21407: LD_VAR 0 6
21411: ARRAY
21412: MINUS
21413: ST_TO_ADDR
// if not minesFreeAmount then
21414: LD_VAR 0 8
21418: NOT
21419: IFFALSE 21423
// exit ;
21421: GO 21694
// tmp := [ ] ;
21423: LD_ADDR_VAR 0 7
21427: PUSH
21428: EMPTY
21429: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: DOUBLE
21436: LD_INT 1
21438: DEC
21439: ST_TO_ADDR
21440: LD_VAR 0 8
21444: PUSH
21445: FOR_TO
21446: IFFALSE 21641
// begin _d := rand ( 0 , 5 ) ;
21448: LD_ADDR_VAR 0 11
21452: PUSH
21453: LD_INT 0
21455: PPUSH
21456: LD_INT 5
21458: PPUSH
21459: CALL_OW 12
21463: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21464: LD_ADDR_VAR 0 12
21468: PUSH
21469: LD_INT 2
21471: PPUSH
21472: LD_INT 6
21474: PPUSH
21475: CALL_OW 12
21479: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21480: LD_ADDR_VAR 0 9
21484: PUSH
21485: LD_VAR 0 2
21489: PPUSH
21490: LD_VAR 0 11
21494: PPUSH
21495: LD_VAR 0 12
21499: PPUSH
21500: CALL_OW 272
21504: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21505: LD_ADDR_VAR 0 10
21509: PUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: LD_VAR 0 11
21519: PPUSH
21520: LD_VAR 0 12
21524: PPUSH
21525: CALL_OW 273
21529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21530: LD_VAR 0 9
21534: PPUSH
21535: LD_VAR 0 10
21539: PPUSH
21540: CALL_OW 488
21544: PUSH
21545: LD_VAR 0 9
21549: PUSH
21550: LD_VAR 0 10
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_VAR 0 7
21563: IN
21564: NOT
21565: AND
21566: PUSH
21567: LD_VAR 0 9
21571: PPUSH
21572: LD_VAR 0 10
21576: PPUSH
21577: CALL_OW 458
21581: NOT
21582: AND
21583: IFFALSE 21625
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21585: LD_ADDR_VAR 0 7
21589: PUSH
21590: LD_VAR 0 7
21594: PPUSH
21595: LD_VAR 0 7
21599: PUSH
21600: LD_INT 1
21602: PLUS
21603: PPUSH
21604: LD_VAR 0 9
21608: PUSH
21609: LD_VAR 0 10
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 1
21622: ST_TO_ADDR
21623: GO 21639
// i := i - 1 ;
21625: LD_ADDR_VAR 0 5
21629: PUSH
21630: LD_VAR 0 5
21634: PUSH
21635: LD_INT 1
21637: MINUS
21638: ST_TO_ADDR
// end ;
21639: GO 21445
21641: POP
21642: POP
// for i in tmp do
21643: LD_ADDR_VAR 0 5
21647: PUSH
21648: LD_VAR 0 7
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21692
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_VAR 0 5
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: PPUSH
21670: LD_VAR 0 5
21674: PUSH
21675: LD_INT 2
21677: ARRAY
21678: PPUSH
21679: CALL 20634 0 3
21683: NOT
21684: IFFALSE 21690
// exit ;
21686: POP
21687: POP
21688: GO 21694
21690: GO 21653
21692: POP
21693: POP
// end ;
21694: LD_VAR 0 4
21698: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21699: LD_INT 0
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
// if not GetClass ( unit ) = class_sniper then
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 257
21717: PUSH
21718: LD_INT 5
21720: EQUAL
21721: NOT
21722: IFFALSE 21726
// exit ;
21724: GO 22103
// dist := 8 ;
21726: LD_ADDR_VAR 0 5
21730: PUSH
21731: LD_INT 8
21733: ST_TO_ADDR
// viewRange := 12 ;
21734: LD_ADDR_VAR 0 7
21738: PUSH
21739: LD_INT 12
21741: ST_TO_ADDR
// side := GetSide ( unit ) ;
21742: LD_ADDR_VAR 0 6
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 255
21756: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21757: LD_INT 61
21759: PPUSH
21760: LD_VAR 0 6
21764: PPUSH
21765: CALL_OW 321
21769: PUSH
21770: LD_INT 2
21772: EQUAL
21773: IFFALSE 21783
// viewRange := 16 ;
21775: LD_ADDR_VAR 0 7
21779: PUSH
21780: LD_INT 16
21782: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_VAR 0 2
21792: PPUSH
21793: LD_VAR 0 3
21797: PPUSH
21798: CALL_OW 297
21802: PUSH
21803: LD_VAR 0 5
21807: GREATER
21808: IFFALSE 21887
// begin ComMoveXY ( unit , x , y ) ;
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21829: LD_INT 35
21831: PPUSH
21832: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21836: LD_VAR 0 1
21840: PPUSH
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL 57178 0 3
21855: NOT
21856: IFFALSE 21860
// exit ;
21858: GO 22103
// until GetDistUnitXY ( unit , x , y ) < dist ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_VAR 0 2
21869: PPUSH
21870: LD_VAR 0 3
21874: PPUSH
21875: CALL_OW 297
21879: PUSH
21880: LD_VAR 0 5
21884: LESS
21885: IFFALSE 21829
// end ; ComTurnXY ( unit , x , y ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 3
21901: PPUSH
21902: CALL_OW 118
// wait ( 5 ) ;
21906: LD_INT 5
21908: PPUSH
21909: CALL_OW 67
// _d := GetDir ( unit ) ;
21913: LD_ADDR_VAR 0 10
21917: PUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 254
21927: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21928: LD_ADDR_VAR 0 8
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 250
21942: PPUSH
21943: LD_VAR 0 10
21947: PPUSH
21948: LD_VAR 0 5
21952: PPUSH
21953: CALL_OW 272
21957: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21958: LD_ADDR_VAR 0 9
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 251
21972: PPUSH
21973: LD_VAR 0 10
21977: PPUSH
21978: LD_VAR 0 5
21982: PPUSH
21983: CALL_OW 273
21987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21988: LD_VAR 0 8
21992: PPUSH
21993: LD_VAR 0 9
21997: PPUSH
21998: CALL_OW 488
22002: NOT
22003: IFFALSE 22007
// exit ;
22005: GO 22103
// ComAnimCustom ( unit , 1 ) ;
22007: LD_VAR 0 1
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22019: LD_VAR 0 8
22023: PPUSH
22024: LD_VAR 0 9
22028: PPUSH
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: CALL_OW 330
// repeat wait ( 1 ) ;
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 67
// until IsIdle ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 316
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 302
22069: NOT
22070: OR
22071: PUSH
22072: LD_VAR 0 1
22076: PPUSH
22077: CALL_OW 301
22081: OR
22082: IFFALSE 22043
// RemoveSeeing ( _x , _y , side ) ;
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: LD_VAR 0 6
22098: PPUSH
22099: CALL_OW 331
// end ; end_of_file
22103: LD_VAR 0 4
22107: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22108: LD_VAR 0 1
22112: PUSH
22113: LD_INT 200
22115: DOUBLE
22116: GREATEREQUAL
22117: IFFALSE 22125
22119: LD_INT 299
22121: DOUBLE
22122: LESSEQUAL
22123: IFTRUE 22127
22125: GO 22159
22127: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_VAR 0 4
22147: PPUSH
22148: LD_VAR 0 5
22152: PPUSH
22153: CALL 18244 0 5
22157: GO 22236
22159: LD_INT 300
22161: DOUBLE
22162: GREATEREQUAL
22163: IFFALSE 22171
22165: LD_INT 399
22167: DOUBLE
22168: LESSEQUAL
22169: IFTRUE 22173
22171: GO 22235
22173: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_VAR 0 2
22183: PPUSH
22184: LD_VAR 0 3
22188: PPUSH
22189: LD_VAR 0 4
22193: PPUSH
22194: LD_VAR 0 5
22198: PPUSH
22199: LD_VAR 0 6
22203: PPUSH
22204: LD_VAR 0 7
22208: PPUSH
22209: LD_VAR 0 8
22213: PPUSH
22214: LD_VAR 0 9
22218: PPUSH
22219: LD_VAR 0 10
22223: PPUSH
22224: LD_VAR 0 11
22228: PPUSH
22229: CALL 16150 0 11
22233: GO 22236
22235: POP
// end ; end_of_file
22236: PPOPN 11
22238: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22239: LD_INT 0
22241: PPUSH
// ar_miner := 81 ;
22242: LD_ADDR_EXP 87
22246: PUSH
22247: LD_INT 81
22249: ST_TO_ADDR
// ar_crane := 88 ;
22250: LD_ADDR_EXP 86
22254: PUSH
22255: LD_INT 88
22257: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22258: LD_ADDR_EXP 81
22262: PUSH
22263: LD_INT 89
22265: ST_TO_ADDR
// us_hack := 99 ;
22266: LD_ADDR_EXP 82
22270: PUSH
22271: LD_INT 99
22273: ST_TO_ADDR
// us_artillery := 97 ;
22274: LD_ADDR_EXP 83
22278: PUSH
22279: LD_INT 97
22281: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22282: LD_ADDR_EXP 84
22286: PUSH
22287: LD_INT 91
22289: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22290: LD_ADDR_EXP 85
22294: PUSH
22295: LD_INT 92
22297: ST_TO_ADDR
// ru_radar := 98 ;
22298: LD_ADDR_EXP 80
22302: PUSH
22303: LD_INT 98
22305: ST_TO_ADDR
// tech_Artillery := 80 ;
22306: LD_ADDR_EXP 88
22310: PUSH
22311: LD_INT 80
22313: ST_TO_ADDR
// tech_RadMat := 81 ;
22314: LD_ADDR_EXP 89
22318: PUSH
22319: LD_INT 81
22321: ST_TO_ADDR
// tech_BasicTools := 82 ;
22322: LD_ADDR_EXP 90
22326: PUSH
22327: LD_INT 82
22329: ST_TO_ADDR
// tech_Cargo := 83 ;
22330: LD_ADDR_EXP 91
22334: PUSH
22335: LD_INT 83
22337: ST_TO_ADDR
// tech_Track := 84 ;
22338: LD_ADDR_EXP 92
22342: PUSH
22343: LD_INT 84
22345: ST_TO_ADDR
// tech_Crane := 85 ;
22346: LD_ADDR_EXP 93
22350: PUSH
22351: LD_INT 85
22353: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22354: LD_ADDR_EXP 94
22358: PUSH
22359: LD_INT 86
22361: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22362: LD_ADDR_EXP 95
22366: PUSH
22367: LD_INT 87
22369: ST_TO_ADDR
// end ;
22370: LD_VAR 0 1
22374: RET
// every 1 do
22375: GO 22377
22377: DISABLE
// InitGlobalVariables ; end_of_file
22378: CALL 22239 0 0
22382: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22383: LD_INT 0
22385: PPUSH
22386: PPUSH
// if exist_mode then
22387: LD_VAR 0 2
22391: IFFALSE 22416
// unit := CreateCharacter ( prefix & ident ) else
22393: LD_ADDR_VAR 0 5
22397: PUSH
22398: LD_VAR 0 3
22402: PUSH
22403: LD_VAR 0 1
22407: STR
22408: PPUSH
22409: CALL_OW 34
22413: ST_TO_ADDR
22414: GO 22431
// unit := NewCharacter ( ident ) ;
22416: LD_ADDR_VAR 0 5
22420: PUSH
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 25
22430: ST_TO_ADDR
// result := unit ;
22431: LD_ADDR_VAR 0 4
22435: PUSH
22436: LD_VAR 0 5
22440: ST_TO_ADDR
// end ;
22441: LD_VAR 0 4
22445: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
// if not side or not nation then
22450: LD_VAR 0 1
22454: NOT
22455: PUSH
22456: LD_VAR 0 2
22460: NOT
22461: OR
22462: IFFALSE 22466
// exit ;
22464: GO 23230
// case nation of nation_american :
22466: LD_VAR 0 2
22470: PUSH
22471: LD_INT 1
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22693
22479: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22480: LD_ADDR_VAR 0 4
22484: PUSH
22485: LD_INT 35
22487: PUSH
22488: LD_INT 45
22490: PUSH
22491: LD_INT 46
22493: PUSH
22494: LD_INT 47
22496: PUSH
22497: LD_INT 82
22499: PUSH
22500: LD_INT 83
22502: PUSH
22503: LD_INT 84
22505: PUSH
22506: LD_INT 85
22508: PUSH
22509: LD_INT 86
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 6
22520: PUSH
22521: LD_INT 15
22523: PUSH
22524: LD_INT 16
22526: PUSH
22527: LD_INT 7
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 13
22535: PUSH
22536: LD_INT 10
22538: PUSH
22539: LD_INT 14
22541: PUSH
22542: LD_INT 20
22544: PUSH
22545: LD_INT 21
22547: PUSH
22548: LD_INT 22
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 32
22556: PUSH
22557: LD_INT 27
22559: PUSH
22560: LD_INT 36
22562: PUSH
22563: LD_INT 69
22565: PUSH
22566: LD_INT 39
22568: PUSH
22569: LD_INT 34
22571: PUSH
22572: LD_INT 40
22574: PUSH
22575: LD_INT 48
22577: PUSH
22578: LD_INT 49
22580: PUSH
22581: LD_INT 50
22583: PUSH
22584: LD_INT 51
22586: PUSH
22587: LD_INT 52
22589: PUSH
22590: LD_INT 53
22592: PUSH
22593: LD_INT 54
22595: PUSH
22596: LD_INT 55
22598: PUSH
22599: LD_INT 56
22601: PUSH
22602: LD_INT 57
22604: PUSH
22605: LD_INT 58
22607: PUSH
22608: LD_INT 59
22610: PUSH
22611: LD_INT 60
22613: PUSH
22614: LD_INT 61
22616: PUSH
22617: LD_INT 62
22619: PUSH
22620: LD_INT 80
22622: PUSH
22623: LD_INT 82
22625: PUSH
22626: LD_INT 83
22628: PUSH
22629: LD_INT 84
22631: PUSH
22632: LD_INT 85
22634: PUSH
22635: LD_INT 86
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: ST_TO_ADDR
22691: GO 23154
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22923
22701: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22702: LD_ADDR_VAR 0 4
22706: PUSH
22707: LD_INT 35
22709: PUSH
22710: LD_INT 45
22712: PUSH
22713: LD_INT 46
22715: PUSH
22716: LD_INT 47
22718: PUSH
22719: LD_INT 82
22721: PUSH
22722: LD_INT 83
22724: PUSH
22725: LD_INT 84
22727: PUSH
22728: LD_INT 85
22730: PUSH
22731: LD_INT 87
22733: PUSH
22734: LD_INT 70
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 11
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: LD_INT 4
22748: PUSH
22749: LD_INT 5
22751: PUSH
22752: LD_INT 6
22754: PUSH
22755: LD_INT 15
22757: PUSH
22758: LD_INT 18
22760: PUSH
22761: LD_INT 7
22763: PUSH
22764: LD_INT 17
22766: PUSH
22767: LD_INT 8
22769: PUSH
22770: LD_INT 20
22772: PUSH
22773: LD_INT 21
22775: PUSH
22776: LD_INT 22
22778: PUSH
22779: LD_INT 72
22781: PUSH
22782: LD_INT 26
22784: PUSH
22785: LD_INT 69
22787: PUSH
22788: LD_INT 39
22790: PUSH
22791: LD_INT 40
22793: PUSH
22794: LD_INT 41
22796: PUSH
22797: LD_INT 42
22799: PUSH
22800: LD_INT 43
22802: PUSH
22803: LD_INT 48
22805: PUSH
22806: LD_INT 49
22808: PUSH
22809: LD_INT 50
22811: PUSH
22812: LD_INT 51
22814: PUSH
22815: LD_INT 52
22817: PUSH
22818: LD_INT 53
22820: PUSH
22821: LD_INT 54
22823: PUSH
22824: LD_INT 55
22826: PUSH
22827: LD_INT 56
22829: PUSH
22830: LD_INT 60
22832: PUSH
22833: LD_INT 61
22835: PUSH
22836: LD_INT 62
22838: PUSH
22839: LD_INT 66
22841: PUSH
22842: LD_INT 67
22844: PUSH
22845: LD_INT 68
22847: PUSH
22848: LD_INT 81
22850: PUSH
22851: LD_INT 82
22853: PUSH
22854: LD_INT 83
22856: PUSH
22857: LD_INT 84
22859: PUSH
22860: LD_INT 85
22862: PUSH
22863: LD_INT 87
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: ST_TO_ADDR
22921: GO 23154
22923: LD_INT 3
22925: DOUBLE
22926: EQUAL
22927: IFTRUE 22931
22929: GO 23153
22931: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_INT 46
22939: PUSH
22940: LD_INT 47
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: LD_INT 82
22951: PUSH
22952: LD_INT 83
22954: PUSH
22955: LD_INT 84
22957: PUSH
22958: LD_INT 85
22960: PUSH
22961: LD_INT 86
22963: PUSH
22964: LD_INT 11
22966: PUSH
22967: LD_INT 9
22969: PUSH
22970: LD_INT 20
22972: PUSH
22973: LD_INT 19
22975: PUSH
22976: LD_INT 21
22978: PUSH
22979: LD_INT 24
22981: PUSH
22982: LD_INT 22
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 28
22990: PUSH
22991: LD_INT 29
22993: PUSH
22994: LD_INT 30
22996: PUSH
22997: LD_INT 31
22999: PUSH
23000: LD_INT 37
23002: PUSH
23003: LD_INT 38
23005: PUSH
23006: LD_INT 32
23008: PUSH
23009: LD_INT 27
23011: PUSH
23012: LD_INT 33
23014: PUSH
23015: LD_INT 69
23017: PUSH
23018: LD_INT 39
23020: PUSH
23021: LD_INT 34
23023: PUSH
23024: LD_INT 40
23026: PUSH
23027: LD_INT 71
23029: PUSH
23030: LD_INT 23
23032: PUSH
23033: LD_INT 44
23035: PUSH
23036: LD_INT 48
23038: PUSH
23039: LD_INT 49
23041: PUSH
23042: LD_INT 50
23044: PUSH
23045: LD_INT 51
23047: PUSH
23048: LD_INT 52
23050: PUSH
23051: LD_INT 53
23053: PUSH
23054: LD_INT 54
23056: PUSH
23057: LD_INT 55
23059: PUSH
23060: LD_INT 56
23062: PUSH
23063: LD_INT 57
23065: PUSH
23066: LD_INT 58
23068: PUSH
23069: LD_INT 59
23071: PUSH
23072: LD_INT 63
23074: PUSH
23075: LD_INT 64
23077: PUSH
23078: LD_INT 65
23080: PUSH
23081: LD_INT 82
23083: PUSH
23084: LD_INT 83
23086: PUSH
23087: LD_INT 84
23089: PUSH
23090: LD_INT 85
23092: PUSH
23093: LD_INT 86
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: ST_TO_ADDR
23151: GO 23154
23153: POP
// if state > - 1 and state < 3 then
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 1
23161: NEG
23162: GREATER
23163: PUSH
23164: LD_VAR 0 3
23168: PUSH
23169: LD_INT 3
23171: LESS
23172: AND
23173: IFFALSE 23230
// for i in result do
23175: LD_ADDR_VAR 0 5
23179: PUSH
23180: LD_VAR 0 4
23184: PUSH
23185: FOR_IN
23186: IFFALSE 23228
// if GetTech ( i , side ) <> state then
23188: LD_VAR 0 5
23192: PPUSH
23193: LD_VAR 0 1
23197: PPUSH
23198: CALL_OW 321
23202: PUSH
23203: LD_VAR 0 3
23207: NONEQUAL
23208: IFFALSE 23226
// result := result diff i ;
23210: LD_ADDR_VAR 0 4
23214: PUSH
23215: LD_VAR 0 4
23219: PUSH
23220: LD_VAR 0 5
23224: DIFF
23225: ST_TO_ADDR
23226: GO 23185
23228: POP
23229: POP
// end ;
23230: LD_VAR 0 4
23234: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23235: LD_INT 0
23237: PPUSH
23238: PPUSH
23239: PPUSH
// result := true ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: LD_INT 1
23247: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23248: LD_ADDR_VAR 0 5
23252: PUSH
23253: LD_VAR 0 2
23257: PPUSH
23258: CALL_OW 480
23262: ST_TO_ADDR
// if not tmp then
23263: LD_VAR 0 5
23267: NOT
23268: IFFALSE 23272
// exit ;
23270: GO 23321
// for i in tmp do
23272: LD_ADDR_VAR 0 4
23276: PUSH
23277: LD_VAR 0 5
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23319
// if GetTech ( i , side ) <> state_researched then
23285: LD_VAR 0 4
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 321
23299: PUSH
23300: LD_INT 2
23302: NONEQUAL
23303: IFFALSE 23317
// begin result := false ;
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 0
23312: ST_TO_ADDR
// exit ;
23313: POP
23314: POP
23315: GO 23321
// end ;
23317: GO 23282
23319: POP
23320: POP
// end ;
23321: LD_VAR 0 3
23325: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23326: LD_INT 0
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23341: LD_VAR 0 1
23345: NOT
23346: PUSH
23347: LD_VAR 0 1
23351: PPUSH
23352: CALL_OW 257
23356: PUSH
23357: LD_INT 9
23359: NONEQUAL
23360: OR
23361: IFFALSE 23365
// exit ;
23363: GO 23938
// side := GetSide ( unit ) ;
23365: LD_ADDR_VAR 0 9
23369: PUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 255
23379: ST_TO_ADDR
// tech_space := tech_spacanom ;
23380: LD_ADDR_VAR 0 12
23384: PUSH
23385: LD_INT 29
23387: ST_TO_ADDR
// tech_time := tech_taurad ;
23388: LD_ADDR_VAR 0 13
23392: PUSH
23393: LD_INT 28
23395: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23396: LD_ADDR_VAR 0 11
23400: PUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 310
23410: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23411: LD_VAR 0 11
23415: PPUSH
23416: CALL_OW 247
23420: PUSH
23421: LD_INT 2
23423: EQUAL
23424: IFFALSE 23428
// exit ;
23426: GO 23938
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23428: LD_ADDR_VAR 0 8
23432: PUSH
23433: LD_INT 81
23435: PUSH
23436: LD_VAR 0 9
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 3
23447: PUSH
23448: LD_INT 21
23450: PUSH
23451: LD_INT 3
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: ST_TO_ADDR
// if not tmp then
23471: LD_VAR 0 8
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23938
// if in_unit then
23480: LD_VAR 0 11
23484: IFFALSE 23508
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23486: LD_ADDR_VAR 0 10
23490: PUSH
23491: LD_VAR 0 8
23495: PPUSH
23496: LD_VAR 0 11
23500: PPUSH
23501: CALL_OW 74
23505: ST_TO_ADDR
23506: GO 23528
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23508: LD_ADDR_VAR 0 10
23512: PUSH
23513: LD_VAR 0 8
23517: PPUSH
23518: LD_VAR 0 1
23522: PPUSH
23523: CALL_OW 74
23527: ST_TO_ADDR
// if not enemy then
23528: LD_VAR 0 10
23532: NOT
23533: IFFALSE 23537
// exit ;
23535: GO 23938
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23537: LD_VAR 0 11
23541: PUSH
23542: LD_VAR 0 11
23546: PPUSH
23547: LD_VAR 0 10
23551: PPUSH
23552: CALL_OW 296
23556: PUSH
23557: LD_INT 13
23559: GREATER
23560: AND
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: LD_VAR 0 10
23571: PPUSH
23572: CALL_OW 296
23576: PUSH
23577: LD_INT 12
23579: GREATER
23580: OR
23581: IFFALSE 23585
// exit ;
23583: GO 23938
// missile := [ 1 ] ;
23585: LD_ADDR_VAR 0 14
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23596: LD_VAR 0 9
23600: PPUSH
23601: LD_VAR 0 12
23605: PPUSH
23606: CALL_OW 325
23610: IFFALSE 23639
// missile := Insert ( missile , missile + 1 , 2 ) ;
23612: LD_ADDR_VAR 0 14
23616: PUSH
23617: LD_VAR 0 14
23621: PPUSH
23622: LD_VAR 0 14
23626: PUSH
23627: LD_INT 1
23629: PLUS
23630: PPUSH
23631: LD_INT 2
23633: PPUSH
23634: CALL_OW 2
23638: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23639: LD_VAR 0 9
23643: PPUSH
23644: LD_VAR 0 13
23648: PPUSH
23649: CALL_OW 325
23653: PUSH
23654: LD_VAR 0 10
23658: PPUSH
23659: CALL_OW 255
23663: PPUSH
23664: LD_VAR 0 13
23668: PPUSH
23669: CALL_OW 325
23673: NOT
23674: AND
23675: IFFALSE 23704
// missile := Insert ( missile , missile + 1 , 3 ) ;
23677: LD_ADDR_VAR 0 14
23681: PUSH
23682: LD_VAR 0 14
23686: PPUSH
23687: LD_VAR 0 14
23691: PUSH
23692: LD_INT 1
23694: PLUS
23695: PPUSH
23696: LD_INT 3
23698: PPUSH
23699: CALL_OW 2
23703: ST_TO_ADDR
// if missile < 2 then
23704: LD_VAR 0 14
23708: PUSH
23709: LD_INT 2
23711: LESS
23712: IFFALSE 23716
// exit ;
23714: GO 23938
// x := GetX ( enemy ) ;
23716: LD_ADDR_VAR 0 4
23720: PUSH
23721: LD_VAR 0 10
23725: PPUSH
23726: CALL_OW 250
23730: ST_TO_ADDR
// y := GetY ( enemy ) ;
23731: LD_ADDR_VAR 0 5
23735: PUSH
23736: LD_VAR 0 10
23740: PPUSH
23741: CALL_OW 251
23745: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23746: LD_ADDR_VAR 0 6
23750: PUSH
23751: LD_VAR 0 4
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PPUSH
23760: LD_INT 1
23762: PPUSH
23763: CALL_OW 12
23767: PLUS
23768: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23769: LD_ADDR_VAR 0 7
23773: PUSH
23774: LD_VAR 0 5
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 12
23790: PLUS
23791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23792: LD_VAR 0 6
23796: PPUSH
23797: LD_VAR 0 7
23801: PPUSH
23802: CALL_OW 488
23806: NOT
23807: IFFALSE 23829
// begin _x := x ;
23809: LD_ADDR_VAR 0 6
23813: PUSH
23814: LD_VAR 0 4
23818: ST_TO_ADDR
// _y := y ;
23819: LD_ADDR_VAR 0 7
23823: PUSH
23824: LD_VAR 0 5
23828: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_INT 1
23836: PPUSH
23837: LD_VAR 0 14
23841: PPUSH
23842: CALL_OW 12
23846: ST_TO_ADDR
// case i of 1 :
23847: LD_VAR 0 3
23851: PUSH
23852: LD_INT 1
23854: DOUBLE
23855: EQUAL
23856: IFTRUE 23860
23858: GO 23877
23860: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23861: LD_VAR 0 1
23865: PPUSH
23866: LD_VAR 0 10
23870: PPUSH
23871: CALL_OW 115
23875: GO 23938
23877: LD_INT 2
23879: DOUBLE
23880: EQUAL
23881: IFTRUE 23885
23883: GO 23907
23885: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23886: LD_VAR 0 1
23890: PPUSH
23891: LD_VAR 0 6
23895: PPUSH
23896: LD_VAR 0 7
23900: PPUSH
23901: CALL_OW 153
23905: GO 23938
23907: LD_INT 3
23909: DOUBLE
23910: EQUAL
23911: IFTRUE 23915
23913: GO 23937
23915: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 6
23925: PPUSH
23926: LD_VAR 0 7
23930: PPUSH
23931: CALL_OW 154
23935: GO 23938
23937: POP
// end ;
23938: LD_VAR 0 2
23942: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
23950: PPUSH
// if not unit or not building then
23951: LD_VAR 0 1
23955: NOT
23956: PUSH
23957: LD_VAR 0 2
23961: NOT
23962: OR
23963: IFFALSE 23967
// exit ;
23965: GO 24125
// x := GetX ( building ) ;
23967: LD_ADDR_VAR 0 5
23971: PUSH
23972: LD_VAR 0 2
23976: PPUSH
23977: CALL_OW 250
23981: ST_TO_ADDR
// y := GetY ( building ) ;
23982: LD_ADDR_VAR 0 6
23986: PUSH
23987: LD_VAR 0 2
23991: PPUSH
23992: CALL_OW 251
23996: ST_TO_ADDR
// for i = 0 to 5 do
23997: LD_ADDR_VAR 0 4
24001: PUSH
24002: DOUBLE
24003: LD_INT 0
24005: DEC
24006: ST_TO_ADDR
24007: LD_INT 5
24009: PUSH
24010: FOR_TO
24011: IFFALSE 24123
// begin _x := ShiftX ( x , i , 3 ) ;
24013: LD_ADDR_VAR 0 7
24017: PUSH
24018: LD_VAR 0 5
24022: PPUSH
24023: LD_VAR 0 4
24027: PPUSH
24028: LD_INT 3
24030: PPUSH
24031: CALL_OW 272
24035: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24036: LD_ADDR_VAR 0 8
24040: PUSH
24041: LD_VAR 0 6
24045: PPUSH
24046: LD_VAR 0 4
24050: PPUSH
24051: LD_INT 3
24053: PPUSH
24054: CALL_OW 273
24058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24059: LD_VAR 0 7
24063: PPUSH
24064: LD_VAR 0 8
24068: PPUSH
24069: CALL_OW 488
24073: NOT
24074: IFFALSE 24078
// continue ;
24076: GO 24010
// if HexInfo ( _x , _y ) = 0 then
24078: LD_VAR 0 7
24082: PPUSH
24083: LD_VAR 0 8
24087: PPUSH
24088: CALL_OW 428
24092: PUSH
24093: LD_INT 0
24095: EQUAL
24096: IFFALSE 24121
// begin ComMoveXY ( unit , _x , _y ) ;
24098: LD_VAR 0 1
24102: PPUSH
24103: LD_VAR 0 7
24107: PPUSH
24108: LD_VAR 0 8
24112: PPUSH
24113: CALL_OW 111
// exit ;
24117: POP
24118: POP
24119: GO 24125
// end ; end ;
24121: GO 24010
24123: POP
24124: POP
// end ;
24125: LD_VAR 0 3
24129: RET
// export function ScanBase ( side , base_area ) ; begin
24130: LD_INT 0
24132: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24133: LD_ADDR_VAR 0 3
24137: PUSH
24138: LD_VAR 0 2
24142: PPUSH
24143: LD_INT 81
24145: PUSH
24146: LD_VAR 0 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 70
24159: ST_TO_ADDR
// end ;
24160: LD_VAR 0 3
24164: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
// result := false ;
24171: LD_ADDR_VAR 0 2
24175: PUSH
24176: LD_INT 0
24178: ST_TO_ADDR
// side := GetSide ( unit ) ;
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 255
24193: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24194: LD_ADDR_VAR 0 4
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 248
24208: ST_TO_ADDR
// case nat of 1 :
24209: LD_VAR 0 4
24213: PUSH
24214: LD_INT 1
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24233
24222: POP
// tech := tech_lassight ; 2 :
24223: LD_ADDR_VAR 0 5
24227: PUSH
24228: LD_INT 12
24230: ST_TO_ADDR
24231: GO 24272
24233: LD_INT 2
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24252
24241: POP
// tech := tech_mortar ; 3 :
24242: LD_ADDR_VAR 0 5
24246: PUSH
24247: LD_INT 41
24249: ST_TO_ADDR
24250: GO 24272
24252: LD_INT 3
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24271
24260: POP
// tech := tech_bazooka ; end ;
24261: LD_ADDR_VAR 0 5
24265: PUSH
24266: LD_INT 44
24268: ST_TO_ADDR
24269: GO 24272
24271: POP
// if Researched ( side , tech ) then
24272: LD_VAR 0 3
24276: PPUSH
24277: LD_VAR 0 5
24281: PPUSH
24282: CALL_OW 325
24286: IFFALSE 24313
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24288: LD_ADDR_VAR 0 2
24292: PUSH
24293: LD_INT 5
24295: PUSH
24296: LD_INT 8
24298: PUSH
24299: LD_INT 9
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: PUSH
24307: LD_VAR 0 4
24311: ARRAY
24312: ST_TO_ADDR
// end ;
24313: LD_VAR 0 2
24317: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
// if not mines then
24323: LD_VAR 0 2
24327: NOT
24328: IFFALSE 24332
// exit ;
24330: GO 24476
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24332: LD_ADDR_VAR 0 5
24336: PUSH
24337: LD_INT 81
24339: PUSH
24340: LD_VAR 0 1
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 3
24351: PUSH
24352: LD_INT 21
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PPUSH
24370: CALL_OW 69
24374: ST_TO_ADDR
// for i in mines do
24375: LD_ADDR_VAR 0 4
24379: PUSH
24380: LD_VAR 0 2
24384: PUSH
24385: FOR_IN
24386: IFFALSE 24474
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24388: LD_VAR 0 4
24392: PUSH
24393: LD_INT 1
24395: ARRAY
24396: PPUSH
24397: LD_VAR 0 4
24401: PUSH
24402: LD_INT 2
24404: ARRAY
24405: PPUSH
24406: CALL_OW 458
24410: NOT
24411: IFFALSE 24415
// continue ;
24413: GO 24385
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24415: LD_VAR 0 4
24419: PUSH
24420: LD_INT 1
24422: ARRAY
24423: PPUSH
24424: LD_VAR 0 4
24428: PUSH
24429: LD_INT 2
24431: ARRAY
24432: PPUSH
24433: CALL_OW 428
24437: PUSH
24438: LD_VAR 0 5
24442: IN
24443: IFFALSE 24472
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24445: LD_VAR 0 4
24449: PUSH
24450: LD_INT 1
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 4
24458: PUSH
24459: LD_INT 2
24461: ARRAY
24462: PPUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 456
// end ;
24472: GO 24385
24474: POP
24475: POP
// end ;
24476: LD_VAR 0 3
24480: RET
// export function Count ( array ) ; var i ; begin
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
// result := 0 ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 0
24492: ST_TO_ADDR
// for i in array do
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_VAR 0 1
24502: PUSH
24503: FOR_IN
24504: IFFALSE 24528
// if i then
24506: LD_VAR 0 3
24510: IFFALSE 24526
// result := result + 1 ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_VAR 0 2
24521: PUSH
24522: LD_INT 1
24524: PLUS
24525: ST_TO_ADDR
24526: GO 24503
24528: POP
24529: POP
// end ;
24530: LD_VAR 0 2
24534: RET
// export function IsEmpty ( building ) ; begin
24535: LD_INT 0
24537: PPUSH
// if not building then
24538: LD_VAR 0 1
24542: NOT
24543: IFFALSE 24547
// exit ;
24545: GO 24590
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24547: LD_ADDR_VAR 0 2
24551: PUSH
24552: LD_VAR 0 1
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_VAR 0 1
24564: PPUSH
24565: CALL_OW 255
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 58
24576: PUSH
24577: EMPTY
24578: LIST
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PPUSH
24584: CALL_OW 69
24588: IN
24589: ST_TO_ADDR
// end ;
24590: LD_VAR 0 2
24594: RET
// export function IsNotFull ( building ) ; begin
24595: LD_INT 0
24597: PPUSH
// if not building then
24598: LD_VAR 0 1
24602: NOT
24603: IFFALSE 24607
// exit ;
24605: GO 24626
// result := UnitsInside ( building ) < 6 ;
24607: LD_ADDR_VAR 0 2
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 313
24621: PUSH
24622: LD_INT 6
24624: LESS
24625: ST_TO_ADDR
// end ;
24626: LD_VAR 0 2
24630: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
// tmp := [ ] ;
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: EMPTY
24643: ST_TO_ADDR
// list := [ ] ;
24644: LD_ADDR_VAR 0 5
24648: PUSH
24649: EMPTY
24650: ST_TO_ADDR
// for i = 16 to 25 do
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: DOUBLE
24657: LD_INT 16
24659: DEC
24660: ST_TO_ADDR
24661: LD_INT 25
24663: PUSH
24664: FOR_TO
24665: IFFALSE 24738
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_VAR 0 3
24676: PUSH
24677: LD_INT 22
24679: PUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 255
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 91
24696: PUSH
24697: LD_VAR 0 1
24701: PUSH
24702: LD_INT 6
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 30
24712: PUSH
24713: LD_VAR 0 4
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: PPUSH
24730: CALL_OW 69
24734: ADD
24735: ST_TO_ADDR
24736: GO 24664
24738: POP
24739: POP
// for i = 1 to tmp do
24740: LD_ADDR_VAR 0 4
24744: PUSH
24745: DOUBLE
24746: LD_INT 1
24748: DEC
24749: ST_TO_ADDR
24750: LD_VAR 0 3
24754: PUSH
24755: FOR_TO
24756: IFFALSE 24844
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_VAR 0 5
24767: PUSH
24768: LD_VAR 0 3
24772: PUSH
24773: LD_VAR 0 4
24777: ARRAY
24778: PPUSH
24779: CALL_OW 266
24783: PUSH
24784: LD_VAR 0 3
24788: PUSH
24789: LD_VAR 0 4
24793: ARRAY
24794: PPUSH
24795: CALL_OW 250
24799: PUSH
24800: LD_VAR 0 3
24804: PUSH
24805: LD_VAR 0 4
24809: ARRAY
24810: PPUSH
24811: CALL_OW 251
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: LD_VAR 0 4
24825: ARRAY
24826: PPUSH
24827: CALL_OW 254
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: ADD
24841: ST_TO_ADDR
24842: GO 24755
24844: POP
24845: POP
// result := list ;
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: LD_VAR 0 5
24855: ST_TO_ADDR
// end ;
24856: LD_VAR 0 2
24860: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24861: LD_INT 0
24863: PPUSH
24864: PPUSH
24865: PPUSH
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
// if not factory then
24870: LD_VAR 0 1
24874: NOT
24875: IFFALSE 24879
// exit ;
24877: GO 25472
// if control = control_apeman then
24879: LD_VAR 0 4
24883: PUSH
24884: LD_INT 5
24886: EQUAL
24887: IFFALSE 24996
// begin tmp := UnitsInside ( factory ) ;
24889: LD_ADDR_VAR 0 8
24893: PUSH
24894: LD_VAR 0 1
24898: PPUSH
24899: CALL_OW 313
24903: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24904: LD_VAR 0 8
24908: PPUSH
24909: LD_INT 25
24911: PUSH
24912: LD_INT 12
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PPUSH
24919: CALL_OW 72
24923: NOT
24924: IFFALSE 24934
// control := control_manual ;
24926: LD_ADDR_VAR 0 4
24930: PUSH
24931: LD_INT 1
24933: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24934: LD_ADDR_VAR 0 8
24938: PUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: CALL 24631 0 1
24948: ST_TO_ADDR
// if tmp then
24949: LD_VAR 0 8
24953: IFFALSE 24996
// begin for i in tmp do
24955: LD_ADDR_VAR 0 7
24959: PUSH
24960: LD_VAR 0 8
24964: PUSH
24965: FOR_IN
24966: IFFALSE 24994
// if i [ 1 ] = b_ext_radio then
24968: LD_VAR 0 7
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PUSH
24977: LD_INT 22
24979: EQUAL
24980: IFFALSE 24992
// begin control := control_remote ;
24982: LD_ADDR_VAR 0 4
24986: PUSH
24987: LD_INT 2
24989: ST_TO_ADDR
// break ;
24990: GO 24994
// end ;
24992: GO 24965
24994: POP
24995: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24996: LD_VAR 0 1
25000: PPUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: LD_VAR 0 4
25015: PPUSH
25016: LD_VAR 0 5
25020: PPUSH
25021: CALL_OW 448
25025: IFFALSE 25060
// begin result := [ chassis , engine , control , weapon ] ;
25027: LD_ADDR_VAR 0 6
25031: PUSH
25032: LD_VAR 0 2
25036: PUSH
25037: LD_VAR 0 3
25041: PUSH
25042: LD_VAR 0 4
25046: PUSH
25047: LD_VAR 0 5
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: ST_TO_ADDR
// exit ;
25058: GO 25472
// end ; _chassis := AvailableChassisList ( factory ) ;
25060: LD_ADDR_VAR 0 9
25064: PUSH
25065: LD_VAR 0 1
25069: PPUSH
25070: CALL_OW 475
25074: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25075: LD_ADDR_VAR 0 11
25079: PUSH
25080: LD_VAR 0 1
25084: PPUSH
25085: CALL_OW 476
25089: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25090: LD_ADDR_VAR 0 12
25094: PUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 477
25104: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25105: LD_ADDR_VAR 0 10
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 478
25119: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25120: LD_VAR 0 9
25124: NOT
25125: PUSH
25126: LD_VAR 0 11
25130: NOT
25131: OR
25132: PUSH
25133: LD_VAR 0 12
25137: NOT
25138: OR
25139: PUSH
25140: LD_VAR 0 10
25144: NOT
25145: OR
25146: IFFALSE 25181
// begin result := [ chassis , engine , control , weapon ] ;
25148: LD_ADDR_VAR 0 6
25152: PUSH
25153: LD_VAR 0 2
25157: PUSH
25158: LD_VAR 0 3
25162: PUSH
25163: LD_VAR 0 4
25167: PUSH
25168: LD_VAR 0 5
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
// exit ;
25179: GO 25472
// end ; if not chassis in _chassis then
25181: LD_VAR 0 2
25185: PUSH
25186: LD_VAR 0 9
25190: IN
25191: NOT
25192: IFFALSE 25218
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25194: LD_ADDR_VAR 0 2
25198: PUSH
25199: LD_VAR 0 9
25203: PUSH
25204: LD_INT 1
25206: PPUSH
25207: LD_VAR 0 9
25211: PPUSH
25212: CALL_OW 12
25216: ARRAY
25217: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_VAR 0 3
25227: PPUSH
25228: CALL 25477 0 2
25232: NOT
25233: IFFALSE 25292
// repeat engine := _engine [ 1 ] ;
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_VAR 0 11
25244: PUSH
25245: LD_INT 1
25247: ARRAY
25248: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25249: LD_ADDR_VAR 0 11
25253: PUSH
25254: LD_VAR 0 11
25258: PPUSH
25259: LD_INT 1
25261: PPUSH
25262: CALL_OW 3
25266: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25267: LD_VAR 0 2
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL 25477 0 2
25281: PUSH
25282: LD_VAR 0 11
25286: PUSH
25287: EMPTY
25288: EQUAL
25289: OR
25290: IFFALSE 25235
// if not control in _control then
25292: LD_VAR 0 4
25296: PUSH
25297: LD_VAR 0 12
25301: IN
25302: NOT
25303: IFFALSE 25329
// control := _control [ rand ( 1 , _control ) ] ;
25305: LD_ADDR_VAR 0 4
25309: PUSH
25310: LD_VAR 0 12
25314: PUSH
25315: LD_INT 1
25317: PPUSH
25318: LD_VAR 0 12
25322: PPUSH
25323: CALL_OW 12
25327: ARRAY
25328: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_VAR 0 5
25338: PPUSH
25339: CALL 25697 0 2
25343: NOT
25344: IFFALSE 25403
// repeat weapon := _weapon [ 1 ] ;
25346: LD_ADDR_VAR 0 5
25350: PUSH
25351: LD_VAR 0 10
25355: PUSH
25356: LD_INT 1
25358: ARRAY
25359: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_VAR 0 10
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: CALL_OW 3
25377: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25378: LD_VAR 0 2
25382: PPUSH
25383: LD_VAR 0 5
25387: PPUSH
25388: CALL 25697 0 2
25392: PUSH
25393: LD_VAR 0 10
25397: PUSH
25398: EMPTY
25399: EQUAL
25400: OR
25401: IFFALSE 25346
// result := [ ] ;
25403: LD_ADDR_VAR 0 6
25407: PUSH
25408: EMPTY
25409: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25410: LD_VAR 0 1
25414: PPUSH
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: LD_VAR 0 4
25429: PPUSH
25430: LD_VAR 0 5
25434: PPUSH
25435: CALL_OW 448
25439: IFFALSE 25472
// result := [ chassis , engine , control , weapon ] ;
25441: LD_ADDR_VAR 0 6
25445: PUSH
25446: LD_VAR 0 2
25450: PUSH
25451: LD_VAR 0 3
25455: PUSH
25456: LD_VAR 0 4
25460: PUSH
25461: LD_VAR 0 5
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: ST_TO_ADDR
// end ;
25472: LD_VAR 0 6
25476: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25477: LD_INT 0
25479: PPUSH
// if not chassis or not engine then
25480: LD_VAR 0 1
25484: NOT
25485: PUSH
25486: LD_VAR 0 2
25490: NOT
25491: OR
25492: IFFALSE 25496
// exit ;
25494: GO 25692
// case engine of engine_solar :
25496: LD_VAR 0 2
25500: PUSH
25501: LD_INT 2
25503: DOUBLE
25504: EQUAL
25505: IFTRUE 25509
25507: GO 25547
25509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25510: LD_ADDR_VAR 0 3
25514: PUSH
25515: LD_INT 11
25517: PUSH
25518: LD_INT 12
25520: PUSH
25521: LD_INT 13
25523: PUSH
25524: LD_INT 14
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
25545: GO 25676
25547: LD_INT 1
25549: DOUBLE
25550: EQUAL
25551: IFTRUE 25555
25553: GO 25617
25555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25556: LD_ADDR_VAR 0 3
25560: PUSH
25561: LD_INT 11
25563: PUSH
25564: LD_INT 12
25566: PUSH
25567: LD_INT 13
25569: PUSH
25570: LD_INT 14
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: LD_INT 4
25584: PUSH
25585: LD_INT 5
25587: PUSH
25588: LD_INT 21
25590: PUSH
25591: LD_INT 23
25593: PUSH
25594: LD_INT 22
25596: PUSH
25597: LD_INT 24
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: ST_TO_ADDR
25615: GO 25676
25617: LD_INT 3
25619: DOUBLE
25620: EQUAL
25621: IFTRUE 25625
25623: GO 25675
25625: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25626: LD_ADDR_VAR 0 3
25630: PUSH
25631: LD_INT 13
25633: PUSH
25634: LD_INT 14
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 3
25642: PUSH
25643: LD_INT 4
25645: PUSH
25646: LD_INT 5
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 24
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: ST_TO_ADDR
25673: GO 25676
25675: POP
// result := ( chassis in result ) ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 1
25685: PUSH
25686: LD_VAR 0 3
25690: IN
25691: ST_TO_ADDR
// end ;
25692: LD_VAR 0 3
25696: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25697: LD_INT 0
25699: PPUSH
// if not chassis or not weapon then
25700: LD_VAR 0 1
25704: NOT
25705: PUSH
25706: LD_VAR 0 2
25710: NOT
25711: OR
25712: IFFALSE 25716
// exit ;
25714: GO 26742
// case weapon of us_machine_gun :
25716: LD_VAR 0 2
25720: PUSH
25721: LD_INT 2
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25759
25729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25730: LD_ADDR_VAR 0 3
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 4
25746: PUSH
25747: LD_INT 5
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: ST_TO_ADDR
25757: GO 26726
25759: LD_INT 3
25761: DOUBLE
25762: EQUAL
25763: IFTRUE 25767
25765: GO 25797
25767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25768: LD_ADDR_VAR 0 3
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 4
25784: PUSH
25785: LD_INT 5
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: ST_TO_ADDR
25795: GO 26726
25797: LD_INT 11
25799: DOUBLE
25800: EQUAL
25801: IFTRUE 25805
25803: GO 25835
25805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: LD_INT 4
25822: PUSH
25823: LD_INT 5
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: ST_TO_ADDR
25833: GO 26726
25835: LD_INT 4
25837: DOUBLE
25838: EQUAL
25839: IFTRUE 25843
25841: GO 25869
25843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25844: LD_ADDR_VAR 0 3
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 3
25854: PUSH
25855: LD_INT 4
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
25867: GO 26726
25869: LD_INT 5
25871: DOUBLE
25872: EQUAL
25873: IFTRUE 25877
25875: GO 25903
25877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: LD_INT 5
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 26726
25903: LD_INT 9
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 25937
25911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25912: LD_ADDR_VAR 0 3
25916: PUSH
25917: LD_INT 2
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 4
25925: PUSH
25926: LD_INT 5
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 26726
25937: LD_INT 7
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25971
25945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 4
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26726
25971: LD_INT 12
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26005
25979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: LD_INT 4
25993: PUSH
25994: LD_INT 5
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26726
26005: LD_INT 13
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26039
26013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: LD_INT 4
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
26037: GO 26726
26039: LD_INT 14
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26065
26047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_INT 4
26055: PUSH
26056: LD_INT 5
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: ST_TO_ADDR
26063: GO 26726
26065: LD_INT 6
26067: DOUBLE
26068: EQUAL
26069: IFTRUE 26073
26071: GO 26091
26073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26074: LD_ADDR_VAR 0 3
26078: PUSH
26079: LD_INT 4
26081: PUSH
26082: LD_INT 5
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: ST_TO_ADDR
26089: GO 26726
26091: LD_INT 10
26093: DOUBLE
26094: EQUAL
26095: IFTRUE 26099
26097: GO 26117
26099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_INT 4
26107: PUSH
26108: LD_INT 5
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: ST_TO_ADDR
26115: GO 26726
26117: LD_INT 22
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26151
26125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 11
26133: PUSH
26134: LD_INT 12
26136: PUSH
26137: LD_INT 13
26139: PUSH
26140: LD_INT 14
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
26149: GO 26726
26151: LD_INT 23
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26185
26159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 11
26167: PUSH
26168: LD_INT 12
26170: PUSH
26171: LD_INT 13
26173: PUSH
26174: LD_INT 14
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 26726
26185: LD_INT 24
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 11
26201: PUSH
26202: LD_INT 12
26204: PUSH
26205: LD_INT 13
26207: PUSH
26208: LD_INT 14
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 26726
26219: LD_INT 30
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 11
26235: PUSH
26236: LD_INT 12
26238: PUSH
26239: LD_INT 13
26241: PUSH
26242: LD_INT 14
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 26726
26253: LD_INT 25
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26279
26261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 13
26269: PUSH
26270: LD_INT 14
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: ST_TO_ADDR
26277: GO 26726
26279: LD_INT 27
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 26305
26287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: LD_INT 13
26295: PUSH
26296: LD_INT 14
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: ST_TO_ADDR
26303: GO 26726
26305: LD_INT 28
26307: DOUBLE
26308: EQUAL
26309: IFTRUE 26313
26311: GO 26331
26313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_INT 13
26321: PUSH
26322: LD_INT 14
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: ST_TO_ADDR
26329: GO 26726
26331: LD_INT 29
26333: DOUBLE
26334: EQUAL
26335: IFTRUE 26339
26337: GO 26357
26339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_INT 13
26347: PUSH
26348: LD_INT 14
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: ST_TO_ADDR
26355: GO 26726
26357: LD_INT 31
26359: DOUBLE
26360: EQUAL
26361: IFTRUE 26365
26363: GO 26383
26365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26366: LD_ADDR_VAR 0 3
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: ST_TO_ADDR
26381: GO 26726
26383: LD_INT 26
26385: DOUBLE
26386: EQUAL
26387: IFTRUE 26391
26389: GO 26409
26391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26392: LD_ADDR_VAR 0 3
26396: PUSH
26397: LD_INT 13
26399: PUSH
26400: LD_INT 14
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: ST_TO_ADDR
26407: GO 26726
26409: LD_INT 42
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26443
26417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_INT 21
26425: PUSH
26426: LD_INT 22
26428: PUSH
26429: LD_INT 23
26431: PUSH
26432: LD_INT 24
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
26441: GO 26726
26443: LD_INT 43
26445: DOUBLE
26446: EQUAL
26447: IFTRUE 26451
26449: GO 26477
26451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26452: LD_ADDR_VAR 0 3
26456: PUSH
26457: LD_INT 21
26459: PUSH
26460: LD_INT 22
26462: PUSH
26463: LD_INT 23
26465: PUSH
26466: LD_INT 24
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
26475: GO 26726
26477: LD_INT 44
26479: DOUBLE
26480: EQUAL
26481: IFTRUE 26485
26483: GO 26511
26485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26486: LD_ADDR_VAR 0 3
26490: PUSH
26491: LD_INT 21
26493: PUSH
26494: LD_INT 22
26496: PUSH
26497: LD_INT 23
26499: PUSH
26500: LD_INT 24
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: ST_TO_ADDR
26509: GO 26726
26511: LD_INT 45
26513: DOUBLE
26514: EQUAL
26515: IFTRUE 26519
26517: GO 26545
26519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_INT 21
26527: PUSH
26528: LD_INT 22
26530: PUSH
26531: LD_INT 23
26533: PUSH
26534: LD_INT 24
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: ST_TO_ADDR
26543: GO 26726
26545: LD_INT 49
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26553
26551: GO 26579
26553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26554: LD_ADDR_VAR 0 3
26558: PUSH
26559: LD_INT 21
26561: PUSH
26562: LD_INT 22
26564: PUSH
26565: LD_INT 23
26567: PUSH
26568: LD_INT 24
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: ST_TO_ADDR
26577: GO 26726
26579: LD_INT 51
26581: DOUBLE
26582: EQUAL
26583: IFTRUE 26587
26585: GO 26613
26587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26588: LD_ADDR_VAR 0 3
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 22
26598: PUSH
26599: LD_INT 23
26601: PUSH
26602: LD_INT 24
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 26726
26613: LD_INT 52
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26647
26621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 21
26629: PUSH
26630: LD_INT 22
26632: PUSH
26633: LD_INT 23
26635: PUSH
26636: LD_INT 24
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: ST_TO_ADDR
26645: GO 26726
26647: LD_INT 53
26649: DOUBLE
26650: EQUAL
26651: IFTRUE 26655
26653: GO 26673
26655: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26656: LD_ADDR_VAR 0 3
26660: PUSH
26661: LD_INT 23
26663: PUSH
26664: LD_INT 24
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: ST_TO_ADDR
26671: GO 26726
26673: LD_INT 46
26675: DOUBLE
26676: EQUAL
26677: IFTRUE 26681
26679: GO 26699
26681: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_INT 23
26689: PUSH
26690: LD_INT 24
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: ST_TO_ADDR
26697: GO 26726
26699: LD_INT 47
26701: DOUBLE
26702: EQUAL
26703: IFTRUE 26707
26705: GO 26725
26707: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26708: LD_ADDR_VAR 0 3
26712: PUSH
26713: LD_INT 23
26715: PUSH
26716: LD_INT 24
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: ST_TO_ADDR
26723: GO 26726
26725: POP
// result := ( chassis in result ) ;
26726: LD_ADDR_VAR 0 3
26730: PUSH
26731: LD_VAR 0 1
26735: PUSH
26736: LD_VAR 0 3
26740: IN
26741: ST_TO_ADDR
// end ;
26742: LD_VAR 0 3
26746: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26747: LD_INT 0
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
// result := array ;
26756: LD_ADDR_VAR 0 5
26760: PUSH
26761: LD_VAR 0 1
26765: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26766: LD_VAR 0 1
26770: NOT
26771: PUSH
26772: LD_VAR 0 2
26776: NOT
26777: OR
26778: PUSH
26779: LD_VAR 0 3
26783: NOT
26784: OR
26785: PUSH
26786: LD_VAR 0 2
26790: PUSH
26791: LD_VAR 0 1
26795: GREATER
26796: OR
26797: PUSH
26798: LD_VAR 0 3
26802: PUSH
26803: LD_VAR 0 1
26807: GREATER
26808: OR
26809: IFFALSE 26813
// exit ;
26811: GO 27109
// if direction then
26813: LD_VAR 0 4
26817: IFFALSE 26881
// begin d := 1 ;
26819: LD_ADDR_VAR 0 9
26823: PUSH
26824: LD_INT 1
26826: ST_TO_ADDR
// if i_from > i_to then
26827: LD_VAR 0 2
26831: PUSH
26832: LD_VAR 0 3
26836: GREATER
26837: IFFALSE 26863
// length := ( array - i_from ) + i_to else
26839: LD_ADDR_VAR 0 11
26843: PUSH
26844: LD_VAR 0 1
26848: PUSH
26849: LD_VAR 0 2
26853: MINUS
26854: PUSH
26855: LD_VAR 0 3
26859: PLUS
26860: ST_TO_ADDR
26861: GO 26879
// length := i_to - i_from ;
26863: LD_ADDR_VAR 0 11
26867: PUSH
26868: LD_VAR 0 3
26872: PUSH
26873: LD_VAR 0 2
26877: MINUS
26878: ST_TO_ADDR
// end else
26879: GO 26942
// begin d := - 1 ;
26881: LD_ADDR_VAR 0 9
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: ST_TO_ADDR
// if i_from > i_to then
26890: LD_VAR 0 2
26894: PUSH
26895: LD_VAR 0 3
26899: GREATER
26900: IFFALSE 26920
// length := i_from - i_to else
26902: LD_ADDR_VAR 0 11
26906: PUSH
26907: LD_VAR 0 2
26911: PUSH
26912: LD_VAR 0 3
26916: MINUS
26917: ST_TO_ADDR
26918: GO 26942
// length := ( array - i_to ) + i_from ;
26920: LD_ADDR_VAR 0 11
26924: PUSH
26925: LD_VAR 0 1
26929: PUSH
26930: LD_VAR 0 3
26934: MINUS
26935: PUSH
26936: LD_VAR 0 2
26940: PLUS
26941: ST_TO_ADDR
// end ; if not length then
26942: LD_VAR 0 11
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27109
// tmp := array ;
26951: LD_ADDR_VAR 0 10
26955: PUSH
26956: LD_VAR 0 1
26960: ST_TO_ADDR
// for i = 1 to length do
26961: LD_ADDR_VAR 0 6
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_VAR 0 11
26975: PUSH
26976: FOR_TO
26977: IFFALSE 27097
// begin for j = 1 to array do
26979: LD_ADDR_VAR 0 7
26983: PUSH
26984: DOUBLE
26985: LD_INT 1
26987: DEC
26988: ST_TO_ADDR
26989: LD_VAR 0 1
26993: PUSH
26994: FOR_TO
26995: IFFALSE 27083
// begin k := j + d ;
26997: LD_ADDR_VAR 0 8
27001: PUSH
27002: LD_VAR 0 7
27006: PUSH
27007: LD_VAR 0 9
27011: PLUS
27012: ST_TO_ADDR
// if k > array then
27013: LD_VAR 0 8
27017: PUSH
27018: LD_VAR 0 1
27022: GREATER
27023: IFFALSE 27033
// k := 1 ;
27025: LD_ADDR_VAR 0 8
27029: PUSH
27030: LD_INT 1
27032: ST_TO_ADDR
// if not k then
27033: LD_VAR 0 8
27037: NOT
27038: IFFALSE 27050
// k := array ;
27040: LD_ADDR_VAR 0 8
27044: PUSH
27045: LD_VAR 0 1
27049: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27050: LD_ADDR_VAR 0 10
27054: PUSH
27055: LD_VAR 0 10
27059: PPUSH
27060: LD_VAR 0 8
27064: PPUSH
27065: LD_VAR 0 1
27069: PUSH
27070: LD_VAR 0 7
27074: ARRAY
27075: PPUSH
27076: CALL_OW 1
27080: ST_TO_ADDR
// end ;
27081: GO 26994
27083: POP
27084: POP
// array := tmp ;
27085: LD_ADDR_VAR 0 1
27089: PUSH
27090: LD_VAR 0 10
27094: ST_TO_ADDR
// end ;
27095: GO 26976
27097: POP
27098: POP
// result := array ;
27099: LD_ADDR_VAR 0 5
27103: PUSH
27104: LD_VAR 0 1
27108: ST_TO_ADDR
// end ;
27109: LD_VAR 0 5
27113: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27114: LD_INT 0
27116: PPUSH
27117: PPUSH
// result := 0 ;
27118: LD_ADDR_VAR 0 3
27122: PUSH
27123: LD_INT 0
27125: ST_TO_ADDR
// if not array or not value in array then
27126: LD_VAR 0 1
27130: NOT
27131: PUSH
27132: LD_VAR 0 2
27136: PUSH
27137: LD_VAR 0 1
27141: IN
27142: NOT
27143: OR
27144: IFFALSE 27148
// exit ;
27146: GO 27202
// for i = 1 to array do
27148: LD_ADDR_VAR 0 4
27152: PUSH
27153: DOUBLE
27154: LD_INT 1
27156: DEC
27157: ST_TO_ADDR
27158: LD_VAR 0 1
27162: PUSH
27163: FOR_TO
27164: IFFALSE 27200
// if value = array [ i ] then
27166: LD_VAR 0 2
27170: PUSH
27171: LD_VAR 0 1
27175: PUSH
27176: LD_VAR 0 4
27180: ARRAY
27181: EQUAL
27182: IFFALSE 27198
// begin result := i ;
27184: LD_ADDR_VAR 0 3
27188: PUSH
27189: LD_VAR 0 4
27193: ST_TO_ADDR
// exit ;
27194: POP
27195: POP
27196: GO 27202
// end ;
27198: GO 27163
27200: POP
27201: POP
// end ;
27202: LD_VAR 0 3
27206: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27207: LD_INT 0
27209: PPUSH
// vc_chassis := chassis ;
27210: LD_ADDR_OWVAR 37
27214: PUSH
27215: LD_VAR 0 1
27219: ST_TO_ADDR
// vc_engine := engine ;
27220: LD_ADDR_OWVAR 39
27224: PUSH
27225: LD_VAR 0 2
27229: ST_TO_ADDR
// vc_control := control ;
27230: LD_ADDR_OWVAR 38
27234: PUSH
27235: LD_VAR 0 3
27239: ST_TO_ADDR
// vc_weapon := weapon ;
27240: LD_ADDR_OWVAR 40
27244: PUSH
27245: LD_VAR 0 4
27249: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27250: LD_ADDR_OWVAR 41
27254: PUSH
27255: LD_VAR 0 5
27259: ST_TO_ADDR
// end ;
27260: LD_VAR 0 6
27264: RET
// export function WantPlant ( unit ) ; var task ; begin
27265: LD_INT 0
27267: PPUSH
27268: PPUSH
// result := false ;
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: LD_INT 0
27276: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL_OW 437
27291: ST_TO_ADDR
// if task then
27292: LD_VAR 0 3
27296: IFFALSE 27324
// if task [ 1 ] [ 1 ] = p then
27298: LD_VAR 0 3
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PUSH
27311: LD_STRING p
27313: EQUAL
27314: IFFALSE 27324
// result := true ;
27316: LD_ADDR_VAR 0 2
27320: PUSH
27321: LD_INT 1
27323: ST_TO_ADDR
// end ;
27324: LD_VAR 0 2
27328: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
// if pos < 1 then
27335: LD_VAR 0 2
27339: PUSH
27340: LD_INT 1
27342: LESS
27343: IFFALSE 27347
// exit ;
27345: GO 27650
// if pos = 1 then
27347: LD_VAR 0 2
27351: PUSH
27352: LD_INT 1
27354: EQUAL
27355: IFFALSE 27388
// result := Replace ( arr , pos [ 1 ] , value ) else
27357: LD_ADDR_VAR 0 4
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: LD_VAR 0 2
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: LD_VAR 0 3
27380: PPUSH
27381: CALL_OW 1
27385: ST_TO_ADDR
27386: GO 27650
// begin tmp := arr ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: LD_VAR 0 1
27397: ST_TO_ADDR
// s_arr := [ tmp ] ;
27398: LD_ADDR_VAR 0 7
27402: PUSH
27403: LD_VAR 0 6
27407: PUSH
27408: EMPTY
27409: LIST
27410: ST_TO_ADDR
// for i = 1 to pos - 1 do
27411: LD_ADDR_VAR 0 5
27415: PUSH
27416: DOUBLE
27417: LD_INT 1
27419: DEC
27420: ST_TO_ADDR
27421: LD_VAR 0 2
27425: PUSH
27426: LD_INT 1
27428: MINUS
27429: PUSH
27430: FOR_TO
27431: IFFALSE 27476
// begin tmp := tmp [ pos [ i ] ] ;
27433: LD_ADDR_VAR 0 6
27437: PUSH
27438: LD_VAR 0 6
27442: PUSH
27443: LD_VAR 0 2
27447: PUSH
27448: LD_VAR 0 5
27452: ARRAY
27453: ARRAY
27454: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27455: LD_ADDR_VAR 0 7
27459: PUSH
27460: LD_VAR 0 7
27464: PUSH
27465: LD_VAR 0 6
27469: PUSH
27470: EMPTY
27471: LIST
27472: ADD
27473: ST_TO_ADDR
// end ;
27474: GO 27430
27476: POP
27477: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27478: LD_ADDR_VAR 0 6
27482: PUSH
27483: LD_VAR 0 6
27487: PPUSH
27488: LD_VAR 0 2
27492: PUSH
27493: LD_VAR 0 2
27497: ARRAY
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: CALL_OW 1
27508: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27509: LD_ADDR_VAR 0 7
27513: PUSH
27514: LD_VAR 0 7
27518: PPUSH
27519: LD_VAR 0 7
27523: PPUSH
27524: LD_VAR 0 6
27528: PPUSH
27529: CALL_OW 1
27533: ST_TO_ADDR
// for i = s_arr downto 2 do
27534: LD_ADDR_VAR 0 5
27538: PUSH
27539: DOUBLE
27540: LD_VAR 0 7
27544: INC
27545: ST_TO_ADDR
27546: LD_INT 2
27548: PUSH
27549: FOR_DOWNTO
27550: IFFALSE 27634
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27552: LD_ADDR_VAR 0 6
27556: PUSH
27557: LD_VAR 0 7
27561: PUSH
27562: LD_VAR 0 5
27566: PUSH
27567: LD_INT 1
27569: MINUS
27570: ARRAY
27571: PPUSH
27572: LD_VAR 0 2
27576: PUSH
27577: LD_VAR 0 5
27581: PUSH
27582: LD_INT 1
27584: MINUS
27585: ARRAY
27586: PPUSH
27587: LD_VAR 0 7
27591: PUSH
27592: LD_VAR 0 5
27596: ARRAY
27597: PPUSH
27598: CALL_OW 1
27602: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: LD_VAR 0 7
27612: PPUSH
27613: LD_VAR 0 5
27617: PUSH
27618: LD_INT 1
27620: MINUS
27621: PPUSH
27622: LD_VAR 0 6
27626: PPUSH
27627: CALL_OW 1
27631: ST_TO_ADDR
// end ;
27632: GO 27549
27634: POP
27635: POP
// result := s_arr [ 1 ] ;
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_VAR 0 7
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: ST_TO_ADDR
// end ; end ;
27650: LD_VAR 0 4
27654: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
// if not list then
27659: LD_VAR 0 1
27663: NOT
27664: IFFALSE 27668
// exit ;
27666: GO 27759
// i := list [ pos1 ] ;
27668: LD_ADDR_VAR 0 5
27672: PUSH
27673: LD_VAR 0 1
27677: PUSH
27678: LD_VAR 0 2
27682: ARRAY
27683: ST_TO_ADDR
// if not i then
27684: LD_VAR 0 5
27688: NOT
27689: IFFALSE 27693
// exit ;
27691: GO 27759
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27693: LD_ADDR_VAR 0 1
27697: PUSH
27698: LD_VAR 0 1
27702: PPUSH
27703: LD_VAR 0 2
27707: PPUSH
27708: LD_VAR 0 1
27712: PUSH
27713: LD_VAR 0 3
27717: ARRAY
27718: PPUSH
27719: CALL_OW 1
27723: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27724: LD_ADDR_VAR 0 1
27728: PUSH
27729: LD_VAR 0 1
27733: PPUSH
27734: LD_VAR 0 3
27738: PPUSH
27739: LD_VAR 0 5
27743: PPUSH
27744: CALL_OW 1
27748: ST_TO_ADDR
// result := list ;
27749: LD_ADDR_VAR 0 4
27753: PUSH
27754: LD_VAR 0 1
27758: ST_TO_ADDR
// end ;
27759: LD_VAR 0 4
27763: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27764: LD_INT 0
27766: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27767: LD_ADDR_VAR 0 5
27771: PUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 250
27781: PPUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 251
27791: PPUSH
27792: LD_VAR 0 2
27796: PPUSH
27797: LD_VAR 0 3
27801: PPUSH
27802: LD_VAR 0 4
27806: PPUSH
27807: CALL 27817 0 5
27811: ST_TO_ADDR
// end ;
27812: LD_VAR 0 5
27816: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27817: LD_INT 0
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
// if not list then
27823: LD_VAR 0 3
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 28220
// result := [ ] ;
27832: LD_ADDR_VAR 0 6
27836: PUSH
27837: EMPTY
27838: ST_TO_ADDR
// for i in list do
27839: LD_ADDR_VAR 0 7
27843: PUSH
27844: LD_VAR 0 3
27848: PUSH
27849: FOR_IN
27850: IFFALSE 28052
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27852: LD_ADDR_VAR 0 9
27856: PUSH
27857: LD_VAR 0 7
27861: PPUSH
27862: LD_VAR 0 1
27866: PPUSH
27867: LD_VAR 0 2
27871: PPUSH
27872: CALL_OW 297
27876: ST_TO_ADDR
// if not result then
27877: LD_VAR 0 6
27881: NOT
27882: IFFALSE 27908
// result := [ [ i , tmp ] ] else
27884: LD_ADDR_VAR 0 6
27888: PUSH
27889: LD_VAR 0 7
27893: PUSH
27894: LD_VAR 0 9
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: ST_TO_ADDR
27906: GO 28050
// begin if result [ result ] [ 2 ] < tmp then
27908: LD_VAR 0 6
27912: PUSH
27913: LD_VAR 0 6
27917: ARRAY
27918: PUSH
27919: LD_INT 2
27921: ARRAY
27922: PUSH
27923: LD_VAR 0 9
27927: LESS
27928: IFFALSE 27970
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27930: LD_ADDR_VAR 0 6
27934: PUSH
27935: LD_VAR 0 6
27939: PPUSH
27940: LD_VAR 0 6
27944: PUSH
27945: LD_INT 1
27947: PLUS
27948: PPUSH
27949: LD_VAR 0 7
27953: PUSH
27954: LD_VAR 0 9
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 2
27967: ST_TO_ADDR
27968: GO 28050
// for j = 1 to result do
27970: LD_ADDR_VAR 0 8
27974: PUSH
27975: DOUBLE
27976: LD_INT 1
27978: DEC
27979: ST_TO_ADDR
27980: LD_VAR 0 6
27984: PUSH
27985: FOR_TO
27986: IFFALSE 28048
// begin if tmp < result [ j ] [ 2 ] then
27988: LD_VAR 0 9
27992: PUSH
27993: LD_VAR 0 6
27997: PUSH
27998: LD_VAR 0 8
28002: ARRAY
28003: PUSH
28004: LD_INT 2
28006: ARRAY
28007: LESS
28008: IFFALSE 28046
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28010: LD_ADDR_VAR 0 6
28014: PUSH
28015: LD_VAR 0 6
28019: PPUSH
28020: LD_VAR 0 8
28024: PPUSH
28025: LD_VAR 0 7
28029: PUSH
28030: LD_VAR 0 9
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PPUSH
28039: CALL_OW 2
28043: ST_TO_ADDR
// break ;
28044: GO 28048
// end ; end ;
28046: GO 27985
28048: POP
28049: POP
// end ; end ;
28050: GO 27849
28052: POP
28053: POP
// if result and not asc then
28054: LD_VAR 0 6
28058: PUSH
28059: LD_VAR 0 4
28063: NOT
28064: AND
28065: IFFALSE 28140
// begin tmp := result ;
28067: LD_ADDR_VAR 0 9
28071: PUSH
28072: LD_VAR 0 6
28076: ST_TO_ADDR
// for i = tmp downto 1 do
28077: LD_ADDR_VAR 0 7
28081: PUSH
28082: DOUBLE
28083: LD_VAR 0 9
28087: INC
28088: ST_TO_ADDR
28089: LD_INT 1
28091: PUSH
28092: FOR_DOWNTO
28093: IFFALSE 28138
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28095: LD_ADDR_VAR 0 6
28099: PUSH
28100: LD_VAR 0 6
28104: PPUSH
28105: LD_VAR 0 9
28109: PUSH
28110: LD_VAR 0 7
28114: MINUS
28115: PUSH
28116: LD_INT 1
28118: PLUS
28119: PPUSH
28120: LD_VAR 0 9
28124: PUSH
28125: LD_VAR 0 7
28129: ARRAY
28130: PPUSH
28131: CALL_OW 1
28135: ST_TO_ADDR
28136: GO 28092
28138: POP
28139: POP
// end ; tmp := [ ] ;
28140: LD_ADDR_VAR 0 9
28144: PUSH
28145: EMPTY
28146: ST_TO_ADDR
// if mode then
28147: LD_VAR 0 5
28151: IFFALSE 28220
// begin for i = 1 to result do
28153: LD_ADDR_VAR 0 7
28157: PUSH
28158: DOUBLE
28159: LD_INT 1
28161: DEC
28162: ST_TO_ADDR
28163: LD_VAR 0 6
28167: PUSH
28168: FOR_TO
28169: IFFALSE 28208
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28171: LD_ADDR_VAR 0 9
28175: PUSH
28176: LD_VAR 0 9
28180: PPUSH
28181: LD_VAR 0 7
28185: PPUSH
28186: LD_VAR 0 6
28190: PUSH
28191: LD_VAR 0 7
28195: ARRAY
28196: PUSH
28197: LD_INT 1
28199: ARRAY
28200: PPUSH
28201: CALL_OW 1
28205: ST_TO_ADDR
28206: GO 28168
28208: POP
28209: POP
// result := tmp ;
28210: LD_ADDR_VAR 0 6
28214: PUSH
28215: LD_VAR 0 9
28219: ST_TO_ADDR
// end ; end ;
28220: LD_VAR 0 6
28224: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
28229: PPUSH
28230: PPUSH
28231: PPUSH
28232: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28233: LD_ADDR_VAR 0 5
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: EMPTY
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// if not x or not y then
28255: LD_VAR 0 2
28259: NOT
28260: PUSH
28261: LD_VAR 0 3
28265: NOT
28266: OR
28267: IFFALSE 28271
// exit ;
28269: GO 29917
// if not range then
28271: LD_VAR 0 4
28275: NOT
28276: IFFALSE 28286
// range := 10 ;
28278: LD_ADDR_VAR 0 4
28282: PUSH
28283: LD_INT 10
28285: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28286: LD_ADDR_VAR 0 8
28290: PUSH
28291: LD_INT 81
28293: PUSH
28294: LD_VAR 0 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 92
28305: PUSH
28306: LD_VAR 0 2
28310: PUSH
28311: LD_VAR 0 3
28315: PUSH
28316: LD_VAR 0 4
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: LD_INT 21
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: PPUSH
28349: CALL_OW 69
28353: ST_TO_ADDR
// if not tmp then
28354: LD_VAR 0 8
28358: NOT
28359: IFFALSE 28363
// exit ;
28361: GO 29917
// for i in tmp do
28363: LD_ADDR_VAR 0 6
28367: PUSH
28368: LD_VAR 0 8
28372: PUSH
28373: FOR_IN
28374: IFFALSE 29892
// begin points := [ 0 , 0 , 0 ] ;
28376: LD_ADDR_VAR 0 9
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// bpoints := 1 ;
28395: LD_ADDR_VAR 0 10
28399: PUSH
28400: LD_INT 1
28402: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28403: LD_VAR 0 6
28407: PPUSH
28408: CALL_OW 247
28412: PUSH
28413: LD_INT 1
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28999
28421: POP
// begin if GetClass ( i ) = 1 then
28422: LD_VAR 0 6
28426: PPUSH
28427: CALL_OW 257
28431: PUSH
28432: LD_INT 1
28434: EQUAL
28435: IFFALSE 28456
// points := [ 10 , 5 , 3 ] ;
28437: LD_ADDR_VAR 0 9
28441: PUSH
28442: LD_INT 10
28444: PUSH
28445: LD_INT 5
28447: PUSH
28448: LD_INT 3
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28456: LD_VAR 0 6
28460: PPUSH
28461: CALL_OW 257
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: LD_INT 4
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: IN
28480: IFFALSE 28501
// points := [ 3 , 2 , 1 ] ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28501: LD_VAR 0 6
28505: PPUSH
28506: CALL_OW 257
28510: PUSH
28511: LD_INT 5
28513: EQUAL
28514: IFFALSE 28535
// points := [ 130 , 5 , 2 ] ;
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_INT 130
28523: PUSH
28524: LD_INT 5
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28535: LD_VAR 0 6
28539: PPUSH
28540: CALL_OW 257
28544: PUSH
28545: LD_INT 8
28547: EQUAL
28548: IFFALSE 28569
// points := [ 35 , 35 , 30 ] ;
28550: LD_ADDR_VAR 0 9
28554: PUSH
28555: LD_INT 35
28557: PUSH
28558: LD_INT 35
28560: PUSH
28561: LD_INT 30
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28569: LD_VAR 0 6
28573: PPUSH
28574: CALL_OW 257
28578: PUSH
28579: LD_INT 9
28581: EQUAL
28582: IFFALSE 28603
// points := [ 20 , 55 , 40 ] ;
28584: LD_ADDR_VAR 0 9
28588: PUSH
28589: LD_INT 20
28591: PUSH
28592: LD_INT 55
28594: PUSH
28595: LD_INT 40
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28603: LD_VAR 0 6
28607: PPUSH
28608: CALL_OW 257
28612: PUSH
28613: LD_INT 12
28615: PUSH
28616: LD_INT 16
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: IN
28623: IFFALSE 28644
// points := [ 5 , 3 , 2 ] ;
28625: LD_ADDR_VAR 0 9
28629: PUSH
28630: LD_INT 5
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28644: LD_VAR 0 6
28648: PPUSH
28649: CALL_OW 257
28653: PUSH
28654: LD_INT 17
28656: EQUAL
28657: IFFALSE 28678
// points := [ 100 , 50 , 75 ] ;
28659: LD_ADDR_VAR 0 9
28663: PUSH
28664: LD_INT 100
28666: PUSH
28667: LD_INT 50
28669: PUSH
28670: LD_INT 75
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28678: LD_VAR 0 6
28682: PPUSH
28683: CALL_OW 257
28687: PUSH
28688: LD_INT 15
28690: EQUAL
28691: IFFALSE 28712
// points := [ 10 , 5 , 3 ] ;
28693: LD_ADDR_VAR 0 9
28697: PUSH
28698: LD_INT 10
28700: PUSH
28701: LD_INT 5
28703: PUSH
28704: LD_INT 3
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28712: LD_VAR 0 6
28716: PPUSH
28717: CALL_OW 257
28721: PUSH
28722: LD_INT 14
28724: EQUAL
28725: IFFALSE 28746
// points := [ 10 , 0 , 0 ] ;
28727: LD_ADDR_VAR 0 9
28731: PUSH
28732: LD_INT 10
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28746: LD_VAR 0 6
28750: PPUSH
28751: CALL_OW 257
28755: PUSH
28756: LD_INT 11
28758: EQUAL
28759: IFFALSE 28780
// points := [ 30 , 10 , 5 ] ;
28761: LD_ADDR_VAR 0 9
28765: PUSH
28766: LD_INT 30
28768: PUSH
28769: LD_INT 10
28771: PUSH
28772: LD_INT 5
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28780: LD_VAR 0 1
28784: PPUSH
28785: LD_INT 5
28787: PPUSH
28788: CALL_OW 321
28792: PUSH
28793: LD_INT 2
28795: EQUAL
28796: IFFALSE 28813
// bpoints := bpoints * 1.8 ;
28798: LD_ADDR_VAR 0 10
28802: PUSH
28803: LD_VAR 0 10
28807: PUSH
28808: LD_REAL  1.80000000000000E+0000
28811: MUL
28812: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28813: LD_VAR 0 6
28817: PPUSH
28818: CALL_OW 257
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 2
28828: PUSH
28829: LD_INT 3
28831: PUSH
28832: LD_INT 4
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: IN
28841: PUSH
28842: LD_VAR 0 1
28846: PPUSH
28847: LD_INT 51
28849: PPUSH
28850: CALL_OW 321
28854: PUSH
28855: LD_INT 2
28857: EQUAL
28858: AND
28859: IFFALSE 28876
// bpoints := bpoints * 1.2 ;
28861: LD_ADDR_VAR 0 10
28865: PUSH
28866: LD_VAR 0 10
28870: PUSH
28871: LD_REAL  1.20000000000000E+0000
28874: MUL
28875: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28876: LD_VAR 0 6
28880: PPUSH
28881: CALL_OW 257
28885: PUSH
28886: LD_INT 5
28888: PUSH
28889: LD_INT 7
28891: PUSH
28892: LD_INT 9
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: IN
28900: PUSH
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_INT 52
28908: PPUSH
28909: CALL_OW 321
28913: PUSH
28914: LD_INT 2
28916: EQUAL
28917: AND
28918: IFFALSE 28935
// bpoints := bpoints * 1.5 ;
28920: LD_ADDR_VAR 0 10
28924: PUSH
28925: LD_VAR 0 10
28929: PUSH
28930: LD_REAL  1.50000000000000E+0000
28933: MUL
28934: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28935: LD_VAR 0 1
28939: PPUSH
28940: LD_INT 66
28942: PPUSH
28943: CALL_OW 321
28947: PUSH
28948: LD_INT 2
28950: EQUAL
28951: IFFALSE 28968
// bpoints := bpoints * 1.1 ;
28953: LD_ADDR_VAR 0 10
28957: PUSH
28958: LD_VAR 0 10
28962: PUSH
28963: LD_REAL  1.10000000000000E+0000
28966: MUL
28967: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28968: LD_ADDR_VAR 0 10
28972: PUSH
28973: LD_VAR 0 10
28977: PUSH
28978: LD_VAR 0 6
28982: PPUSH
28983: LD_INT 1
28985: PPUSH
28986: CALL_OW 259
28990: PUSH
28991: LD_REAL  1.15000000000000E+0000
28994: MUL
28995: MUL
28996: ST_TO_ADDR
// end ; unit_vehicle :
28997: GO 29821
28999: LD_INT 2
29001: DOUBLE
29002: EQUAL
29003: IFTRUE 29007
29005: GO 29809
29007: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29008: LD_VAR 0 6
29012: PPUSH
29013: CALL_OW 264
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: LD_INT 42
29023: PUSH
29024: LD_INT 24
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: IN
29032: IFFALSE 29053
// points := [ 25 , 5 , 3 ] ;
29034: LD_ADDR_VAR 0 9
29038: PUSH
29039: LD_INT 25
29041: PUSH
29042: LD_INT 5
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29053: LD_VAR 0 6
29057: PPUSH
29058: CALL_OW 264
29062: PUSH
29063: LD_INT 4
29065: PUSH
29066: LD_INT 43
29068: PUSH
29069: LD_INT 25
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: IN
29077: IFFALSE 29098
// points := [ 40 , 15 , 5 ] ;
29079: LD_ADDR_VAR 0 9
29083: PUSH
29084: LD_INT 40
29086: PUSH
29087: LD_INT 15
29089: PUSH
29090: LD_INT 5
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29098: LD_VAR 0 6
29102: PPUSH
29103: CALL_OW 264
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: LD_INT 23
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: IN
29118: IFFALSE 29139
// points := [ 7 , 25 , 8 ] ;
29120: LD_ADDR_VAR 0 9
29124: PUSH
29125: LD_INT 7
29127: PUSH
29128: LD_INT 25
29130: PUSH
29131: LD_INT 8
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29139: LD_VAR 0 6
29143: PPUSH
29144: CALL_OW 264
29148: PUSH
29149: LD_INT 5
29151: PUSH
29152: LD_INT 27
29154: PUSH
29155: LD_INT 44
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: IN
29163: IFFALSE 29184
// points := [ 14 , 50 , 16 ] ;
29165: LD_ADDR_VAR 0 9
29169: PUSH
29170: LD_INT 14
29172: PUSH
29173: LD_INT 50
29175: PUSH
29176: LD_INT 16
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29184: LD_VAR 0 6
29188: PPUSH
29189: CALL_OW 264
29193: PUSH
29194: LD_INT 6
29196: PUSH
29197: LD_INT 46
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: IN
29204: IFFALSE 29225
// points := [ 32 , 120 , 70 ] ;
29206: LD_ADDR_VAR 0 9
29210: PUSH
29211: LD_INT 32
29213: PUSH
29214: LD_INT 120
29216: PUSH
29217: LD_INT 70
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29225: LD_VAR 0 6
29229: PPUSH
29230: CALL_OW 264
29234: PUSH
29235: LD_INT 7
29237: PUSH
29238: LD_INT 28
29240: PUSH
29241: LD_INT 45
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: IN
29249: IFFALSE 29270
// points := [ 35 , 20 , 45 ] ;
29251: LD_ADDR_VAR 0 9
29255: PUSH
29256: LD_INT 35
29258: PUSH
29259: LD_INT 20
29261: PUSH
29262: LD_INT 45
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29270: LD_VAR 0 6
29274: PPUSH
29275: CALL_OW 264
29279: PUSH
29280: LD_INT 47
29282: PUSH
29283: EMPTY
29284: LIST
29285: IN
29286: IFFALSE 29307
// points := [ 67 , 45 , 75 ] ;
29288: LD_ADDR_VAR 0 9
29292: PUSH
29293: LD_INT 67
29295: PUSH
29296: LD_INT 45
29298: PUSH
29299: LD_INT 75
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29307: LD_VAR 0 6
29311: PPUSH
29312: CALL_OW 264
29316: PUSH
29317: LD_INT 26
29319: PUSH
29320: EMPTY
29321: LIST
29322: IN
29323: IFFALSE 29344
// points := [ 120 , 30 , 80 ] ;
29325: LD_ADDR_VAR 0 9
29329: PUSH
29330: LD_INT 120
29332: PUSH
29333: LD_INT 30
29335: PUSH
29336: LD_INT 80
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29344: LD_VAR 0 6
29348: PPUSH
29349: CALL_OW 264
29353: PUSH
29354: LD_INT 22
29356: PUSH
29357: EMPTY
29358: LIST
29359: IN
29360: IFFALSE 29381
// points := [ 40 , 1 , 1 ] ;
29362: LD_ADDR_VAR 0 9
29366: PUSH
29367: LD_INT 40
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29381: LD_VAR 0 6
29385: PPUSH
29386: CALL_OW 264
29390: PUSH
29391: LD_INT 29
29393: PUSH
29394: EMPTY
29395: LIST
29396: IN
29397: IFFALSE 29418
// points := [ 70 , 200 , 400 ] ;
29399: LD_ADDR_VAR 0 9
29403: PUSH
29404: LD_INT 70
29406: PUSH
29407: LD_INT 200
29409: PUSH
29410: LD_INT 400
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29418: LD_VAR 0 6
29422: PPUSH
29423: CALL_OW 264
29427: PUSH
29428: LD_INT 14
29430: PUSH
29431: LD_INT 53
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: IN
29438: IFFALSE 29459
// points := [ 40 , 10 , 20 ] ;
29440: LD_ADDR_VAR 0 9
29444: PUSH
29445: LD_INT 40
29447: PUSH
29448: LD_INT 10
29450: PUSH
29451: LD_INT 20
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29459: LD_VAR 0 6
29463: PPUSH
29464: CALL_OW 264
29468: PUSH
29469: LD_INT 9
29471: PUSH
29472: EMPTY
29473: LIST
29474: IN
29475: IFFALSE 29496
// points := [ 5 , 70 , 20 ] ;
29477: LD_ADDR_VAR 0 9
29481: PUSH
29482: LD_INT 5
29484: PUSH
29485: LD_INT 70
29487: PUSH
29488: LD_INT 20
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29496: LD_VAR 0 6
29500: PPUSH
29501: CALL_OW 264
29505: PUSH
29506: LD_INT 10
29508: PUSH
29509: EMPTY
29510: LIST
29511: IN
29512: IFFALSE 29533
// points := [ 35 , 110 , 70 ] ;
29514: LD_ADDR_VAR 0 9
29518: PUSH
29519: LD_INT 35
29521: PUSH
29522: LD_INT 110
29524: PUSH
29525: LD_INT 70
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29533: LD_VAR 0 6
29537: PPUSH
29538: CALL_OW 265
29542: PUSH
29543: LD_INT 25
29545: EQUAL
29546: IFFALSE 29567
// points := [ 80 , 65 , 100 ] ;
29548: LD_ADDR_VAR 0 9
29552: PUSH
29553: LD_INT 80
29555: PUSH
29556: LD_INT 65
29558: PUSH
29559: LD_INT 100
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29567: LD_VAR 0 6
29571: PPUSH
29572: CALL_OW 263
29576: PUSH
29577: LD_INT 1
29579: EQUAL
29580: IFFALSE 29615
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29582: LD_ADDR_VAR 0 10
29586: PUSH
29587: LD_VAR 0 10
29591: PUSH
29592: LD_VAR 0 6
29596: PPUSH
29597: CALL_OW 311
29601: PPUSH
29602: LD_INT 3
29604: PPUSH
29605: CALL_OW 259
29609: PUSH
29610: LD_INT 4
29612: MUL
29613: MUL
29614: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29615: LD_VAR 0 6
29619: PPUSH
29620: CALL_OW 263
29624: PUSH
29625: LD_INT 2
29627: EQUAL
29628: IFFALSE 29679
// begin j := IsControledBy ( i ) ;
29630: LD_ADDR_VAR 0 7
29634: PUSH
29635: LD_VAR 0 6
29639: PPUSH
29640: CALL_OW 312
29644: ST_TO_ADDR
// if j then
29645: LD_VAR 0 7
29649: IFFALSE 29679
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29651: LD_ADDR_VAR 0 10
29655: PUSH
29656: LD_VAR 0 10
29660: PUSH
29661: LD_VAR 0 7
29665: PPUSH
29666: LD_INT 3
29668: PPUSH
29669: CALL_OW 259
29673: PUSH
29674: LD_INT 3
29676: MUL
29677: MUL
29678: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29679: LD_VAR 0 6
29683: PPUSH
29684: CALL_OW 264
29688: PUSH
29689: LD_INT 5
29691: PUSH
29692: LD_INT 6
29694: PUSH
29695: LD_INT 46
29697: PUSH
29698: LD_INT 44
29700: PUSH
29701: LD_INT 47
29703: PUSH
29704: LD_INT 45
29706: PUSH
29707: LD_INT 28
29709: PUSH
29710: LD_INT 7
29712: PUSH
29713: LD_INT 27
29715: PUSH
29716: LD_INT 29
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: IN
29731: PUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_INT 52
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: AND
29749: IFFALSE 29766
// bpoints := bpoints * 1.2 ;
29751: LD_ADDR_VAR 0 10
29755: PUSH
29756: LD_VAR 0 10
29760: PUSH
29761: LD_REAL  1.20000000000000E+0000
29764: MUL
29765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29766: LD_VAR 0 6
29770: PPUSH
29771: CALL_OW 264
29775: PUSH
29776: LD_INT 6
29778: PUSH
29779: LD_INT 46
29781: PUSH
29782: LD_INT 47
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: IN
29790: IFFALSE 29807
// bpoints := bpoints * 1.2 ;
29792: LD_ADDR_VAR 0 10
29796: PUSH
29797: LD_VAR 0 10
29801: PUSH
29802: LD_REAL  1.20000000000000E+0000
29805: MUL
29806: ST_TO_ADDR
// end ; unit_building :
29807: GO 29821
29809: LD_INT 3
29811: DOUBLE
29812: EQUAL
29813: IFTRUE 29817
29815: GO 29820
29817: POP
// ; end ;
29818: GO 29821
29820: POP
// for j = 1 to 3 do
29821: LD_ADDR_VAR 0 7
29825: PUSH
29826: DOUBLE
29827: LD_INT 1
29829: DEC
29830: ST_TO_ADDR
29831: LD_INT 3
29833: PUSH
29834: FOR_TO
29835: IFFALSE 29888
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29837: LD_ADDR_VAR 0 5
29841: PUSH
29842: LD_VAR 0 5
29846: PPUSH
29847: LD_VAR 0 7
29851: PPUSH
29852: LD_VAR 0 5
29856: PUSH
29857: LD_VAR 0 7
29861: ARRAY
29862: PUSH
29863: LD_VAR 0 9
29867: PUSH
29868: LD_VAR 0 7
29872: ARRAY
29873: PUSH
29874: LD_VAR 0 10
29878: MUL
29879: PLUS
29880: PPUSH
29881: CALL_OW 1
29885: ST_TO_ADDR
29886: GO 29834
29888: POP
29889: POP
// end ;
29890: GO 28373
29892: POP
29893: POP
// result := Replace ( result , 4 , tmp ) ;
29894: LD_ADDR_VAR 0 5
29898: PUSH
29899: LD_VAR 0 5
29903: PPUSH
29904: LD_INT 4
29906: PPUSH
29907: LD_VAR 0 8
29911: PPUSH
29912: CALL_OW 1
29916: ST_TO_ADDR
// end ;
29917: LD_VAR 0 5
29921: RET
// export function DangerAtRange ( unit , range ) ; begin
29922: LD_INT 0
29924: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29925: LD_ADDR_VAR 0 3
29929: PUSH
29930: LD_VAR 0 1
29934: PPUSH
29935: CALL_OW 255
29939: PPUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: CALL_OW 250
29949: PPUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: CALL_OW 251
29959: PPUSH
29960: LD_VAR 0 2
29964: PPUSH
29965: CALL 28225 0 4
29969: ST_TO_ADDR
// end ;
29970: LD_VAR 0 3
29974: RET
// export function DangerInArea ( side , area ) ; begin
29975: LD_INT 0
29977: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_VAR 0 2
29987: PPUSH
29988: LD_INT 81
29990: PUSH
29991: LD_VAR 0 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PPUSH
30000: CALL_OW 70
30004: ST_TO_ADDR
// end ;
30005: LD_VAR 0 3
30009: RET
// export function IsExtension ( b ) ; begin
30010: LD_INT 0
30012: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30013: LD_ADDR_VAR 0 2
30017: PUSH
30018: LD_VAR 0 1
30022: PUSH
30023: LD_INT 23
30025: PUSH
30026: LD_INT 20
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_INT 17
30034: PUSH
30035: LD_INT 24
30037: PUSH
30038: LD_INT 21
30040: PUSH
30041: LD_INT 19
30043: PUSH
30044: LD_INT 16
30046: PUSH
30047: LD_INT 25
30049: PUSH
30050: LD_INT 18
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: IN
30065: ST_TO_ADDR
// end ;
30066: LD_VAR 0 2
30070: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30071: LD_INT 0
30073: PPUSH
30074: PPUSH
30075: PPUSH
// result := [ ] ;
30076: LD_ADDR_VAR 0 3
30080: PUSH
30081: EMPTY
30082: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30083: LD_ADDR_VAR 0 4
30087: PUSH
30088: LD_VAR 0 2
30092: PPUSH
30093: LD_INT 21
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 70
30107: ST_TO_ADDR
// if not tmp then
30108: LD_VAR 0 4
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30175
// for i in tmp do
30117: LD_ADDR_VAR 0 5
30121: PUSH
30122: LD_VAR 0 4
30126: PUSH
30127: FOR_IN
30128: IFFALSE 30163
// if GetBase ( i ) <> base then
30130: LD_VAR 0 5
30134: PPUSH
30135: CALL_OW 274
30139: PUSH
30140: LD_VAR 0 1
30144: NONEQUAL
30145: IFFALSE 30161
// ComLinkToBase ( base , i ) ;
30147: LD_VAR 0 1
30151: PPUSH
30152: LD_VAR 0 5
30156: PPUSH
30157: CALL_OW 169
30161: GO 30127
30163: POP
30164: POP
// result := tmp ;
30165: LD_ADDR_VAR 0 3
30169: PUSH
30170: LD_VAR 0 4
30174: ST_TO_ADDR
// end ;
30175: LD_VAR 0 3
30179: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30180: LD_INT 0
30182: PPUSH
30183: PPUSH
// if BuildingStatus ( b ) = bs_build then
30184: LD_VAR 0 2
30188: PPUSH
30189: CALL_OW 461
30193: PUSH
30194: LD_INT 1
30196: EQUAL
30197: IFFALSE 30257
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30199: LD_VAR 0 1
30203: PPUSH
30204: LD_STRING h
30206: PUSH
30207: LD_VAR 0 2
30211: PPUSH
30212: CALL_OW 250
30216: PUSH
30217: LD_VAR 0 2
30221: PPUSH
30222: CALL_OW 251
30226: PUSH
30227: LD_VAR 0 2
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: PPUSH
30253: CALL_OW 446
// end ;
30257: LD_VAR 0 3
30261: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30262: LD_INT 0
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30270: LD_VAR 0 1
30274: NOT
30275: PUSH
30276: LD_VAR 0 1
30280: PPUSH
30281: CALL_OW 263
30285: PUSH
30286: LD_INT 2
30288: EQUAL
30289: NOT
30290: OR
30291: IFFALSE 30295
// exit ;
30293: GO 30611
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_INT 22
30302: PUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 255
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: LD_INT 36
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 31
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PPUSH
30349: CALL_OW 69
30353: ST_TO_ADDR
// if not tmp then
30354: LD_VAR 0 6
30358: NOT
30359: IFFALSE 30363
// exit ;
30361: GO 30611
// result := [ ] ;
30363: LD_ADDR_VAR 0 2
30367: PUSH
30368: EMPTY
30369: ST_TO_ADDR
// for i in tmp do
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_VAR 0 6
30379: PUSH
30380: FOR_IN
30381: IFFALSE 30452
// begin t := UnitsInside ( i ) ;
30383: LD_ADDR_VAR 0 4
30387: PUSH
30388: LD_VAR 0 3
30392: PPUSH
30393: CALL_OW 313
30397: ST_TO_ADDR
// if t then
30398: LD_VAR 0 4
30402: IFFALSE 30450
// for j in t do
30404: LD_ADDR_VAR 0 7
30408: PUSH
30409: LD_VAR 0 4
30413: PUSH
30414: FOR_IN
30415: IFFALSE 30448
// result := Insert ( result , result + 1 , j ) ;
30417: LD_ADDR_VAR 0 2
30421: PUSH
30422: LD_VAR 0 2
30426: PPUSH
30427: LD_VAR 0 2
30431: PUSH
30432: LD_INT 1
30434: PLUS
30435: PPUSH
30436: LD_VAR 0 7
30440: PPUSH
30441: CALL_OW 2
30445: ST_TO_ADDR
30446: GO 30414
30448: POP
30449: POP
// end ;
30450: GO 30380
30452: POP
30453: POP
// if not result then
30454: LD_VAR 0 2
30458: NOT
30459: IFFALSE 30463
// exit ;
30461: GO 30611
// mech := result [ 1 ] ;
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_VAR 0 2
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: ST_TO_ADDR
// if result > 1 then
30477: LD_VAR 0 2
30481: PUSH
30482: LD_INT 1
30484: GREATER
30485: IFFALSE 30597
// for i = 2 to result do
30487: LD_ADDR_VAR 0 3
30491: PUSH
30492: DOUBLE
30493: LD_INT 2
30495: DEC
30496: ST_TO_ADDR
30497: LD_VAR 0 2
30501: PUSH
30502: FOR_TO
30503: IFFALSE 30595
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30505: LD_ADDR_VAR 0 4
30509: PUSH
30510: LD_VAR 0 2
30514: PUSH
30515: LD_VAR 0 3
30519: ARRAY
30520: PPUSH
30521: LD_INT 3
30523: PPUSH
30524: CALL_OW 259
30528: PUSH
30529: LD_VAR 0 2
30533: PUSH
30534: LD_VAR 0 3
30538: ARRAY
30539: PPUSH
30540: CALL_OW 432
30544: MINUS
30545: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30546: LD_VAR 0 4
30550: PUSH
30551: LD_VAR 0 5
30555: PPUSH
30556: LD_INT 3
30558: PPUSH
30559: CALL_OW 259
30563: PUSH
30564: LD_VAR 0 5
30568: PPUSH
30569: CALL_OW 432
30573: MINUS
30574: GREATEREQUAL
30575: IFFALSE 30593
// mech := result [ i ] ;
30577: LD_ADDR_VAR 0 5
30581: PUSH
30582: LD_VAR 0 2
30586: PUSH
30587: LD_VAR 0 3
30591: ARRAY
30592: ST_TO_ADDR
// end ;
30593: GO 30502
30595: POP
30596: POP
// ComLinkTo ( vehicle , mech ) ;
30597: LD_VAR 0 1
30601: PPUSH
30602: LD_VAR 0 5
30606: PPUSH
30607: CALL_OW 135
// end ;
30611: LD_VAR 0 2
30615: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30616: LD_INT 0
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
30624: PPUSH
30625: PPUSH
30626: PPUSH
30627: PPUSH
30628: PPUSH
30629: PPUSH
30630: PPUSH
// result := [ ] ;
30631: LD_ADDR_VAR 0 7
30635: PUSH
30636: EMPTY
30637: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 266
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: IN
30658: NOT
30659: IFFALSE 30663
// exit ;
30661: GO 32294
// if name then
30663: LD_VAR 0 3
30667: IFFALSE 30683
// SetBName ( base_dep , name ) ;
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_VAR 0 3
30678: PPUSH
30679: CALL_OW 500
// base := GetBase ( base_dep ) ;
30683: LD_ADDR_VAR 0 15
30687: PUSH
30688: LD_VAR 0 1
30692: PPUSH
30693: CALL_OW 274
30697: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30698: LD_ADDR_VAR 0 16
30702: PUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 255
30712: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30713: LD_ADDR_VAR 0 17
30717: PUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 248
30727: ST_TO_ADDR
// if sources then
30728: LD_VAR 0 5
30732: IFFALSE 30779
// for i = 1 to 3 do
30734: LD_ADDR_VAR 0 8
30738: PUSH
30739: DOUBLE
30740: LD_INT 1
30742: DEC
30743: ST_TO_ADDR
30744: LD_INT 3
30746: PUSH
30747: FOR_TO
30748: IFFALSE 30777
// AddResourceType ( base , i , sources [ i ] ) ;
30750: LD_VAR 0 15
30754: PPUSH
30755: LD_VAR 0 8
30759: PPUSH
30760: LD_VAR 0 5
30764: PUSH
30765: LD_VAR 0 8
30769: ARRAY
30770: PPUSH
30771: CALL_OW 276
30775: GO 30747
30777: POP
30778: POP
// buildings := GetBaseBuildings ( base , area ) ;
30779: LD_ADDR_VAR 0 18
30783: PUSH
30784: LD_VAR 0 15
30788: PPUSH
30789: LD_VAR 0 2
30793: PPUSH
30794: CALL 30071 0 2
30798: ST_TO_ADDR
// InitHc ;
30799: CALL_OW 19
// InitUc ;
30803: CALL_OW 18
// uc_side := side ;
30807: LD_ADDR_OWVAR 20
30811: PUSH
30812: LD_VAR 0 16
30816: ST_TO_ADDR
// uc_nation := nation ;
30817: LD_ADDR_OWVAR 21
30821: PUSH
30822: LD_VAR 0 17
30826: ST_TO_ADDR
// if buildings then
30827: LD_VAR 0 18
30831: IFFALSE 32153
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30833: LD_ADDR_VAR 0 19
30837: PUSH
30838: LD_VAR 0 18
30842: PPUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 30
30848: PUSH
30849: LD_INT 29
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 30
30858: PUSH
30859: LD_INT 30
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL_OW 72
30875: ST_TO_ADDR
// if tmp then
30876: LD_VAR 0 19
30880: IFFALSE 30928
// for i in tmp do
30882: LD_ADDR_VAR 0 8
30886: PUSH
30887: LD_VAR 0 19
30891: PUSH
30892: FOR_IN
30893: IFFALSE 30926
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30895: LD_VAR 0 8
30899: PPUSH
30900: CALL_OW 250
30904: PPUSH
30905: LD_VAR 0 8
30909: PPUSH
30910: CALL_OW 251
30914: PPUSH
30915: LD_VAR 0 16
30919: PPUSH
30920: CALL_OW 441
30924: GO 30892
30926: POP
30927: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30928: LD_VAR 0 18
30932: PPUSH
30933: LD_INT 2
30935: PUSH
30936: LD_INT 30
30938: PUSH
30939: LD_INT 32
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 30
30948: PUSH
30949: LD_INT 33
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: PPUSH
30961: CALL_OW 72
30965: IFFALSE 31053
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30967: LD_ADDR_VAR 0 8
30971: PUSH
30972: LD_VAR 0 18
30976: PPUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 30
30982: PUSH
30983: LD_INT 32
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 33
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: PPUSH
31005: CALL_OW 72
31009: PUSH
31010: FOR_IN
31011: IFFALSE 31051
// begin if not GetBWeapon ( i ) then
31013: LD_VAR 0 8
31017: PPUSH
31018: CALL_OW 269
31022: NOT
31023: IFFALSE 31049
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31025: LD_VAR 0 8
31029: PPUSH
31030: LD_VAR 0 8
31034: PPUSH
31035: LD_VAR 0 2
31039: PPUSH
31040: CALL 32299 0 2
31044: PPUSH
31045: CALL_OW 431
// end ;
31049: GO 31010
31051: POP
31052: POP
// end ; for i = 1 to personel do
31053: LD_ADDR_VAR 0 8
31057: PUSH
31058: DOUBLE
31059: LD_INT 1
31061: DEC
31062: ST_TO_ADDR
31063: LD_VAR 0 6
31067: PUSH
31068: FOR_TO
31069: IFFALSE 32133
// begin if i > 4 then
31071: LD_VAR 0 8
31075: PUSH
31076: LD_INT 4
31078: GREATER
31079: IFFALSE 31083
// break ;
31081: GO 32133
// case i of 1 :
31083: LD_VAR 0 8
31087: PUSH
31088: LD_INT 1
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31176
31096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31097: LD_ADDR_VAR 0 12
31101: PUSH
31102: LD_VAR 0 18
31106: PPUSH
31107: LD_INT 22
31109: PUSH
31110: LD_VAR 0 16
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 58
31121: PUSH
31122: EMPTY
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 32
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 4
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 5
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: PPUSH
31169: CALL_OW 72
31173: ST_TO_ADDR
31174: GO 31398
31176: LD_INT 2
31178: DOUBLE
31179: EQUAL
31180: IFTRUE 31184
31182: GO 31246
31184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31185: LD_ADDR_VAR 0 12
31189: PUSH
31190: LD_VAR 0 18
31194: PPUSH
31195: LD_INT 22
31197: PUSH
31198: LD_VAR 0 16
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 30
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 30
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PPUSH
31239: CALL_OW 72
31243: ST_TO_ADDR
31244: GO 31398
31246: LD_INT 3
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31316
31254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31255: LD_ADDR_VAR 0 12
31259: PUSH
31260: LD_VAR 0 18
31264: PPUSH
31265: LD_INT 22
31267: PUSH
31268: LD_VAR 0 16
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 30
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 30
31292: PUSH
31293: LD_INT 3
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PPUSH
31309: CALL_OW 72
31313: ST_TO_ADDR
31314: GO 31398
31316: LD_INT 4
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31397
31324: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31325: LD_ADDR_VAR 0 12
31329: PUSH
31330: LD_VAR 0 18
31334: PPUSH
31335: LD_INT 22
31337: PUSH
31338: LD_VAR 0 16
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 30
31352: PUSH
31353: LD_INT 6
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 30
31362: PUSH
31363: LD_INT 7
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 30
31372: PUSH
31373: LD_INT 8
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 72
31394: ST_TO_ADDR
31395: GO 31398
31397: POP
// if i = 1 then
31398: LD_VAR 0 8
31402: PUSH
31403: LD_INT 1
31405: EQUAL
31406: IFFALSE 31517
// begin tmp := [ ] ;
31408: LD_ADDR_VAR 0 19
31412: PUSH
31413: EMPTY
31414: ST_TO_ADDR
// for j in f do
31415: LD_ADDR_VAR 0 9
31419: PUSH
31420: LD_VAR 0 12
31424: PUSH
31425: FOR_IN
31426: IFFALSE 31499
// if GetBType ( j ) = b_bunker then
31428: LD_VAR 0 9
31432: PPUSH
31433: CALL_OW 266
31437: PUSH
31438: LD_INT 32
31440: EQUAL
31441: IFFALSE 31468
// tmp := Insert ( tmp , 1 , j ) else
31443: LD_ADDR_VAR 0 19
31447: PUSH
31448: LD_VAR 0 19
31452: PPUSH
31453: LD_INT 1
31455: PPUSH
31456: LD_VAR 0 9
31460: PPUSH
31461: CALL_OW 2
31465: ST_TO_ADDR
31466: GO 31497
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31468: LD_ADDR_VAR 0 19
31472: PUSH
31473: LD_VAR 0 19
31477: PPUSH
31478: LD_VAR 0 19
31482: PUSH
31483: LD_INT 1
31485: PLUS
31486: PPUSH
31487: LD_VAR 0 9
31491: PPUSH
31492: CALL_OW 2
31496: ST_TO_ADDR
31497: GO 31425
31499: POP
31500: POP
// if tmp then
31501: LD_VAR 0 19
31505: IFFALSE 31517
// f := tmp ;
31507: LD_ADDR_VAR 0 12
31511: PUSH
31512: LD_VAR 0 19
31516: ST_TO_ADDR
// end ; x := personel [ i ] ;
31517: LD_ADDR_VAR 0 13
31521: PUSH
31522: LD_VAR 0 6
31526: PUSH
31527: LD_VAR 0 8
31531: ARRAY
31532: ST_TO_ADDR
// if x = - 1 then
31533: LD_VAR 0 13
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: EQUAL
31542: IFFALSE 31751
// begin for j in f do
31544: LD_ADDR_VAR 0 9
31548: PUSH
31549: LD_VAR 0 12
31553: PUSH
31554: FOR_IN
31555: IFFALSE 31747
// repeat InitHc ;
31557: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31561: LD_VAR 0 9
31565: PPUSH
31566: CALL_OW 266
31570: PUSH
31571: LD_INT 5
31573: EQUAL
31574: IFFALSE 31644
// begin if UnitsInside ( j ) < 3 then
31576: LD_VAR 0 9
31580: PPUSH
31581: CALL_OW 313
31585: PUSH
31586: LD_INT 3
31588: LESS
31589: IFFALSE 31625
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31591: LD_INT 0
31593: PPUSH
31594: LD_INT 5
31596: PUSH
31597: LD_INT 8
31599: PUSH
31600: LD_INT 9
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 17
31612: ARRAY
31613: PPUSH
31614: LD_VAR 0 4
31618: PPUSH
31619: CALL_OW 380
31623: GO 31642
// PrepareHuman ( false , i , skill ) ;
31625: LD_INT 0
31627: PPUSH
31628: LD_VAR 0 8
31632: PPUSH
31633: LD_VAR 0 4
31637: PPUSH
31638: CALL_OW 380
// end else
31642: GO 31661
// PrepareHuman ( false , i , skill ) ;
31644: LD_INT 0
31646: PPUSH
31647: LD_VAR 0 8
31651: PPUSH
31652: LD_VAR 0 4
31656: PPUSH
31657: CALL_OW 380
// un := CreateHuman ;
31661: LD_ADDR_VAR 0 14
31665: PUSH
31666: CALL_OW 44
31670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31671: LD_ADDR_VAR 0 7
31675: PUSH
31676: LD_VAR 0 7
31680: PPUSH
31681: LD_INT 1
31683: PPUSH
31684: LD_VAR 0 14
31688: PPUSH
31689: CALL_OW 2
31693: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31694: LD_VAR 0 14
31698: PPUSH
31699: LD_VAR 0 9
31703: PPUSH
31704: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31708: LD_VAR 0 9
31712: PPUSH
31713: CALL_OW 313
31717: PUSH
31718: LD_INT 6
31720: EQUAL
31721: PUSH
31722: LD_VAR 0 9
31726: PPUSH
31727: CALL_OW 266
31731: PUSH
31732: LD_INT 32
31734: PUSH
31735: LD_INT 31
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: IN
31742: OR
31743: IFFALSE 31557
31745: GO 31554
31747: POP
31748: POP
// end else
31749: GO 32131
// for j = 1 to x do
31751: LD_ADDR_VAR 0 9
31755: PUSH
31756: DOUBLE
31757: LD_INT 1
31759: DEC
31760: ST_TO_ADDR
31761: LD_VAR 0 13
31765: PUSH
31766: FOR_TO
31767: IFFALSE 32129
// begin InitHc ;
31769: CALL_OW 19
// if not f then
31773: LD_VAR 0 12
31777: NOT
31778: IFFALSE 31867
// begin PrepareHuman ( false , i , skill ) ;
31780: LD_INT 0
31782: PPUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 4
31792: PPUSH
31793: CALL_OW 380
// un := CreateHuman ;
31797: LD_ADDR_VAR 0 14
31801: PUSH
31802: CALL_OW 44
31806: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31807: LD_ADDR_VAR 0 7
31811: PUSH
31812: LD_VAR 0 7
31816: PPUSH
31817: LD_INT 1
31819: PPUSH
31820: LD_VAR 0 14
31824: PPUSH
31825: CALL_OW 2
31829: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31830: LD_VAR 0 14
31834: PPUSH
31835: LD_VAR 0 1
31839: PPUSH
31840: CALL_OW 250
31844: PPUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 251
31854: PPUSH
31855: LD_INT 10
31857: PPUSH
31858: LD_INT 0
31860: PPUSH
31861: CALL_OW 50
// continue ;
31865: GO 31766
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31867: LD_VAR 0 12
31871: PUSH
31872: LD_INT 1
31874: ARRAY
31875: PPUSH
31876: CALL_OW 313
31880: PUSH
31881: LD_VAR 0 12
31885: PUSH
31886: LD_INT 1
31888: ARRAY
31889: PPUSH
31890: CALL_OW 266
31894: PUSH
31895: LD_INT 32
31897: PUSH
31898: LD_INT 31
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: IN
31905: AND
31906: PUSH
31907: LD_VAR 0 12
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: CALL_OW 313
31920: PUSH
31921: LD_INT 6
31923: EQUAL
31924: OR
31925: IFFALSE 31945
// f := Delete ( f , 1 ) ;
31927: LD_ADDR_VAR 0 12
31931: PUSH
31932: LD_VAR 0 12
31936: PPUSH
31937: LD_INT 1
31939: PPUSH
31940: CALL_OW 3
31944: ST_TO_ADDR
// if not f then
31945: LD_VAR 0 12
31949: NOT
31950: IFFALSE 31968
// begin x := x + 2 ;
31952: LD_ADDR_VAR 0 13
31956: PUSH
31957: LD_VAR 0 13
31961: PUSH
31962: LD_INT 2
31964: PLUS
31965: ST_TO_ADDR
// continue ;
31966: GO 31766
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31968: LD_VAR 0 12
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: PPUSH
31977: CALL_OW 266
31981: PUSH
31982: LD_INT 5
31984: EQUAL
31985: IFFALSE 32059
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31987: LD_VAR 0 12
31991: PUSH
31992: LD_INT 1
31994: ARRAY
31995: PPUSH
31996: CALL_OW 313
32000: PUSH
32001: LD_INT 3
32003: LESS
32004: IFFALSE 32040
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32006: LD_INT 0
32008: PPUSH
32009: LD_INT 5
32011: PUSH
32012: LD_INT 8
32014: PUSH
32015: LD_INT 9
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: PUSH
32023: LD_VAR 0 17
32027: ARRAY
32028: PPUSH
32029: LD_VAR 0 4
32033: PPUSH
32034: CALL_OW 380
32038: GO 32057
// PrepareHuman ( false , i , skill ) ;
32040: LD_INT 0
32042: PPUSH
32043: LD_VAR 0 8
32047: PPUSH
32048: LD_VAR 0 4
32052: PPUSH
32053: CALL_OW 380
// end else
32057: GO 32076
// PrepareHuman ( false , i , skill ) ;
32059: LD_INT 0
32061: PPUSH
32062: LD_VAR 0 8
32066: PPUSH
32067: LD_VAR 0 4
32071: PPUSH
32072: CALL_OW 380
// un := CreateHuman ;
32076: LD_ADDR_VAR 0 14
32080: PUSH
32081: CALL_OW 44
32085: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32086: LD_ADDR_VAR 0 7
32090: PUSH
32091: LD_VAR 0 7
32095: PPUSH
32096: LD_INT 1
32098: PPUSH
32099: LD_VAR 0 14
32103: PPUSH
32104: CALL_OW 2
32108: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32109: LD_VAR 0 14
32113: PPUSH
32114: LD_VAR 0 12
32118: PUSH
32119: LD_INT 1
32121: ARRAY
32122: PPUSH
32123: CALL_OW 52
// end ;
32127: GO 31766
32129: POP
32130: POP
// end ;
32131: GO 31068
32133: POP
32134: POP
// result := result ^ buildings ;
32135: LD_ADDR_VAR 0 7
32139: PUSH
32140: LD_VAR 0 7
32144: PUSH
32145: LD_VAR 0 18
32149: ADD
32150: ST_TO_ADDR
// end else
32151: GO 32294
// begin for i = 1 to personel do
32153: LD_ADDR_VAR 0 8
32157: PUSH
32158: DOUBLE
32159: LD_INT 1
32161: DEC
32162: ST_TO_ADDR
32163: LD_VAR 0 6
32167: PUSH
32168: FOR_TO
32169: IFFALSE 32292
// begin if i > 4 then
32171: LD_VAR 0 8
32175: PUSH
32176: LD_INT 4
32178: GREATER
32179: IFFALSE 32183
// break ;
32181: GO 32292
// x := personel [ i ] ;
32183: LD_ADDR_VAR 0 13
32187: PUSH
32188: LD_VAR 0 6
32192: PUSH
32193: LD_VAR 0 8
32197: ARRAY
32198: ST_TO_ADDR
// if x = - 1 then
32199: LD_VAR 0 13
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: EQUAL
32208: IFFALSE 32212
// continue ;
32210: GO 32168
// PrepareHuman ( false , i , skill ) ;
32212: LD_INT 0
32214: PPUSH
32215: LD_VAR 0 8
32219: PPUSH
32220: LD_VAR 0 4
32224: PPUSH
32225: CALL_OW 380
// un := CreateHuman ;
32229: LD_ADDR_VAR 0 14
32233: PUSH
32234: CALL_OW 44
32238: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32239: LD_VAR 0 14
32243: PPUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 250
32253: PPUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 251
32263: PPUSH
32264: LD_INT 10
32266: PPUSH
32267: LD_INT 0
32269: PPUSH
32270: CALL_OW 50
// result := result ^ un ;
32274: LD_ADDR_VAR 0 7
32278: PUSH
32279: LD_VAR 0 7
32283: PUSH
32284: LD_VAR 0 14
32288: ADD
32289: ST_TO_ADDR
// end ;
32290: GO 32168
32292: POP
32293: POP
// end ; end ;
32294: LD_VAR 0 7
32298: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32299: LD_INT 0
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
32313: PPUSH
32314: PPUSH
32315: PPUSH
32316: PPUSH
// result := false ;
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 0
32324: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32325: LD_VAR 0 1
32329: NOT
32330: PUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 266
32340: PUSH
32341: LD_INT 32
32343: PUSH
32344: LD_INT 33
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: IN
32351: NOT
32352: OR
32353: IFFALSE 32357
// exit ;
32355: GO 33493
// nat := GetNation ( tower ) ;
32357: LD_ADDR_VAR 0 12
32361: PUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: CALL_OW 248
32371: ST_TO_ADDR
// side := GetSide ( tower ) ;
32372: LD_ADDR_VAR 0 16
32376: PUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 255
32386: ST_TO_ADDR
// x := GetX ( tower ) ;
32387: LD_ADDR_VAR 0 10
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 250
32401: ST_TO_ADDR
// y := GetY ( tower ) ;
32402: LD_ADDR_VAR 0 11
32406: PUSH
32407: LD_VAR 0 1
32411: PPUSH
32412: CALL_OW 251
32416: ST_TO_ADDR
// if not x or not y then
32417: LD_VAR 0 10
32421: NOT
32422: PUSH
32423: LD_VAR 0 11
32427: NOT
32428: OR
32429: IFFALSE 32433
// exit ;
32431: GO 33493
// weapon := 0 ;
32433: LD_ADDR_VAR 0 18
32437: PUSH
32438: LD_INT 0
32440: ST_TO_ADDR
// fac_list := [ ] ;
32441: LD_ADDR_VAR 0 17
32445: PUSH
32446: EMPTY
32447: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32448: LD_ADDR_VAR 0 6
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 274
32462: PPUSH
32463: LD_VAR 0 2
32467: PPUSH
32468: CALL 30071 0 2
32472: PPUSH
32473: LD_INT 30
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PPUSH
32483: CALL_OW 72
32487: ST_TO_ADDR
// if not factories then
32488: LD_VAR 0 6
32492: NOT
32493: IFFALSE 32497
// exit ;
32495: GO 33493
// for i in factories do
32497: LD_ADDR_VAR 0 8
32501: PUSH
32502: LD_VAR 0 6
32506: PUSH
32507: FOR_IN
32508: IFFALSE 32533
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32510: LD_ADDR_VAR 0 17
32514: PUSH
32515: LD_VAR 0 17
32519: PUSH
32520: LD_VAR 0 8
32524: PPUSH
32525: CALL_OW 478
32529: UNION
32530: ST_TO_ADDR
32531: GO 32507
32533: POP
32534: POP
// if not fac_list then
32535: LD_VAR 0 17
32539: NOT
32540: IFFALSE 32544
// exit ;
32542: GO 33493
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32544: LD_ADDR_VAR 0 5
32548: PUSH
32549: LD_INT 4
32551: PUSH
32552: LD_INT 5
32554: PUSH
32555: LD_INT 9
32557: PUSH
32558: LD_INT 10
32560: PUSH
32561: LD_INT 6
32563: PUSH
32564: LD_INT 7
32566: PUSH
32567: LD_INT 11
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 27
32581: PUSH
32582: LD_INT 28
32584: PUSH
32585: LD_INT 26
32587: PUSH
32588: LD_INT 30
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 43
32599: PUSH
32600: LD_INT 44
32602: PUSH
32603: LD_INT 46
32605: PUSH
32606: LD_INT 45
32608: PUSH
32609: LD_INT 47
32611: PUSH
32612: LD_INT 49
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: PUSH
32628: LD_VAR 0 12
32632: ARRAY
32633: ST_TO_ADDR
// for i in list do
32634: LD_ADDR_VAR 0 8
32638: PUSH
32639: LD_VAR 0 5
32643: PUSH
32644: FOR_IN
32645: IFFALSE 32678
// if not i in fac_list then
32647: LD_VAR 0 8
32651: PUSH
32652: LD_VAR 0 17
32656: IN
32657: NOT
32658: IFFALSE 32676
// list := list diff i ;
32660: LD_ADDR_VAR 0 5
32664: PUSH
32665: LD_VAR 0 5
32669: PUSH
32670: LD_VAR 0 8
32674: DIFF
32675: ST_TO_ADDR
32676: GO 32644
32678: POP
32679: POP
// if not list then
32680: LD_VAR 0 5
32684: NOT
32685: IFFALSE 32689
// exit ;
32687: GO 33493
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32689: LD_VAR 0 12
32693: PUSH
32694: LD_INT 3
32696: EQUAL
32697: PUSH
32698: LD_INT 49
32700: PUSH
32701: LD_VAR 0 5
32705: IN
32706: AND
32707: PUSH
32708: LD_INT 31
32710: PPUSH
32711: LD_VAR 0 16
32715: PPUSH
32716: CALL_OW 321
32720: PUSH
32721: LD_INT 2
32723: EQUAL
32724: AND
32725: IFFALSE 32785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32727: LD_INT 22
32729: PUSH
32730: LD_VAR 0 16
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 35
32741: PUSH
32742: LD_INT 49
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 91
32751: PUSH
32752: LD_VAR 0 1
32756: PUSH
32757: LD_INT 10
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 69
32774: NOT
32775: IFFALSE 32785
// weapon := ru_time_lapser ;
32777: LD_ADDR_VAR 0 18
32781: PUSH
32782: LD_INT 49
32784: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32785: LD_VAR 0 12
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: IN
32800: PUSH
32801: LD_INT 11
32803: PUSH
32804: LD_VAR 0 5
32808: IN
32809: PUSH
32810: LD_INT 30
32812: PUSH
32813: LD_VAR 0 5
32817: IN
32818: OR
32819: AND
32820: PUSH
32821: LD_INT 6
32823: PPUSH
32824: LD_VAR 0 16
32828: PPUSH
32829: CALL_OW 321
32833: PUSH
32834: LD_INT 2
32836: EQUAL
32837: AND
32838: IFFALSE 33003
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32840: LD_INT 22
32842: PUSH
32843: LD_VAR 0 16
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 35
32857: PUSH
32858: LD_INT 11
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 35
32867: PUSH
32868: LD_INT 30
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 91
32882: PUSH
32883: LD_VAR 0 1
32887: PUSH
32888: LD_INT 18
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: PPUSH
32901: CALL_OW 69
32905: NOT
32906: PUSH
32907: LD_INT 22
32909: PUSH
32910: LD_VAR 0 16
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 30
32924: PUSH
32925: LD_INT 32
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 30
32934: PUSH
32935: LD_INT 33
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 91
32949: PUSH
32950: LD_VAR 0 1
32954: PUSH
32955: LD_INT 12
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: PUSH
32968: EMPTY
32969: LIST
32970: PPUSH
32971: CALL_OW 69
32975: PUSH
32976: LD_INT 2
32978: GREATER
32979: AND
32980: IFFALSE 33003
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32982: LD_ADDR_VAR 0 18
32986: PUSH
32987: LD_INT 11
32989: PUSH
32990: LD_INT 30
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_VAR 0 12
33001: ARRAY
33002: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33003: LD_VAR 0 18
33007: NOT
33008: PUSH
33009: LD_INT 40
33011: PPUSH
33012: LD_VAR 0 16
33016: PPUSH
33017: CALL_OW 321
33021: PUSH
33022: LD_INT 2
33024: EQUAL
33025: AND
33026: PUSH
33027: LD_INT 7
33029: PUSH
33030: LD_VAR 0 5
33034: IN
33035: PUSH
33036: LD_INT 28
33038: PUSH
33039: LD_VAR 0 5
33043: IN
33044: OR
33045: PUSH
33046: LD_INT 45
33048: PUSH
33049: LD_VAR 0 5
33053: IN
33054: OR
33055: AND
33056: IFFALSE 33310
// begin hex := GetHexInfo ( x , y ) ;
33058: LD_ADDR_VAR 0 4
33062: PUSH
33063: LD_VAR 0 10
33067: PPUSH
33068: LD_VAR 0 11
33072: PPUSH
33073: CALL_OW 546
33077: ST_TO_ADDR
// if hex [ 1 ] then
33078: LD_VAR 0 4
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: IFFALSE 33090
// exit ;
33088: GO 33493
// height := hex [ 2 ] ;
33090: LD_ADDR_VAR 0 15
33094: PUSH
33095: LD_VAR 0 4
33099: PUSH
33100: LD_INT 2
33102: ARRAY
33103: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33104: LD_ADDR_VAR 0 14
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
// for i in tmp do
33127: LD_ADDR_VAR 0 8
33131: PUSH
33132: LD_VAR 0 14
33136: PUSH
33137: FOR_IN
33138: IFFALSE 33308
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_VAR 0 10
33149: PPUSH
33150: LD_VAR 0 8
33154: PPUSH
33155: LD_INT 5
33157: PPUSH
33158: CALL_OW 272
33162: PUSH
33163: LD_VAR 0 11
33167: PPUSH
33168: LD_VAR 0 8
33172: PPUSH
33173: LD_INT 5
33175: PPUSH
33176: CALL_OW 273
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33185: LD_VAR 0 9
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: PPUSH
33194: LD_VAR 0 9
33198: PUSH
33199: LD_INT 2
33201: ARRAY
33202: PPUSH
33203: CALL_OW 488
33207: IFFALSE 33306
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33209: LD_ADDR_VAR 0 4
33213: PUSH
33214: LD_VAR 0 9
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: PPUSH
33223: LD_VAR 0 9
33227: PUSH
33228: LD_INT 2
33230: ARRAY
33231: PPUSH
33232: CALL_OW 546
33236: ST_TO_ADDR
// if hex [ 1 ] then
33237: LD_VAR 0 4
33241: PUSH
33242: LD_INT 1
33244: ARRAY
33245: IFFALSE 33249
// continue ;
33247: GO 33137
// h := hex [ 2 ] ;
33249: LD_ADDR_VAR 0 13
33253: PUSH
33254: LD_VAR 0 4
33258: PUSH
33259: LD_INT 2
33261: ARRAY
33262: ST_TO_ADDR
// if h + 7 < height then
33263: LD_VAR 0 13
33267: PUSH
33268: LD_INT 7
33270: PLUS
33271: PUSH
33272: LD_VAR 0 15
33276: LESS
33277: IFFALSE 33306
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33279: LD_ADDR_VAR 0 18
33283: PUSH
33284: LD_INT 7
33286: PUSH
33287: LD_INT 28
33289: PUSH
33290: LD_INT 45
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: PUSH
33298: LD_VAR 0 12
33302: ARRAY
33303: ST_TO_ADDR
// break ;
33304: GO 33308
// end ; end ; end ;
33306: GO 33137
33308: POP
33309: POP
// end ; if not weapon then
33310: LD_VAR 0 18
33314: NOT
33315: IFFALSE 33375
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33317: LD_ADDR_VAR 0 5
33321: PUSH
33322: LD_VAR 0 5
33326: PUSH
33327: LD_INT 11
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: LD_INT 49
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: DIFF
33341: ST_TO_ADDR
// if not list then
33342: LD_VAR 0 5
33346: NOT
33347: IFFALSE 33351
// exit ;
33349: GO 33493
// weapon := list [ rand ( 1 , list ) ] ;
33351: LD_ADDR_VAR 0 18
33355: PUSH
33356: LD_VAR 0 5
33360: PUSH
33361: LD_INT 1
33363: PPUSH
33364: LD_VAR 0 5
33368: PPUSH
33369: CALL_OW 12
33373: ARRAY
33374: ST_TO_ADDR
// end ; if weapon then
33375: LD_VAR 0 18
33379: IFFALSE 33493
// begin tmp := CostOfWeapon ( weapon ) ;
33381: LD_ADDR_VAR 0 14
33385: PUSH
33386: LD_VAR 0 18
33390: PPUSH
33391: CALL_OW 451
33395: ST_TO_ADDR
// j := GetBase ( tower ) ;
33396: LD_ADDR_VAR 0 9
33400: PUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: CALL_OW 274
33410: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33411: LD_VAR 0 9
33415: PPUSH
33416: LD_INT 1
33418: PPUSH
33419: CALL_OW 275
33423: PUSH
33424: LD_VAR 0 14
33428: PUSH
33429: LD_INT 1
33431: ARRAY
33432: GREATEREQUAL
33433: PUSH
33434: LD_VAR 0 9
33438: PPUSH
33439: LD_INT 2
33441: PPUSH
33442: CALL_OW 275
33446: PUSH
33447: LD_VAR 0 14
33451: PUSH
33452: LD_INT 2
33454: ARRAY
33455: GREATEREQUAL
33456: AND
33457: PUSH
33458: LD_VAR 0 9
33462: PPUSH
33463: LD_INT 3
33465: PPUSH
33466: CALL_OW 275
33470: PUSH
33471: LD_VAR 0 14
33475: PUSH
33476: LD_INT 3
33478: ARRAY
33479: GREATEREQUAL
33480: AND
33481: IFFALSE 33493
// result := weapon ;
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_VAR 0 18
33492: ST_TO_ADDR
// end ; end ;
33493: LD_VAR 0 3
33497: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33498: LD_INT 0
33500: PPUSH
33501: PPUSH
// result := true ;
33502: LD_ADDR_VAR 0 3
33506: PUSH
33507: LD_INT 1
33509: ST_TO_ADDR
// if array1 = array2 then
33510: LD_VAR 0 1
33514: PUSH
33515: LD_VAR 0 2
33519: EQUAL
33520: IFFALSE 33580
// begin for i = 1 to array1 do
33522: LD_ADDR_VAR 0 4
33526: PUSH
33527: DOUBLE
33528: LD_INT 1
33530: DEC
33531: ST_TO_ADDR
33532: LD_VAR 0 1
33536: PUSH
33537: FOR_TO
33538: IFFALSE 33576
// if array1 [ i ] <> array2 [ i ] then
33540: LD_VAR 0 1
33544: PUSH
33545: LD_VAR 0 4
33549: ARRAY
33550: PUSH
33551: LD_VAR 0 2
33555: PUSH
33556: LD_VAR 0 4
33560: ARRAY
33561: NONEQUAL
33562: IFFALSE 33574
// begin result := false ;
33564: LD_ADDR_VAR 0 3
33568: PUSH
33569: LD_INT 0
33571: ST_TO_ADDR
// break ;
33572: GO 33576
// end ;
33574: GO 33537
33576: POP
33577: POP
// end else
33578: GO 33588
// result := false ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 0
33587: ST_TO_ADDR
// end ;
33588: LD_VAR 0 3
33592: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33593: LD_INT 0
33595: PPUSH
33596: PPUSH
33597: PPUSH
// pom := GetBase ( fac ) ;
33598: LD_ADDR_VAR 0 5
33602: PUSH
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 274
33612: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33613: LD_ADDR_VAR 0 4
33617: PUSH
33618: LD_VAR 0 2
33622: PUSH
33623: LD_INT 1
33625: ARRAY
33626: PPUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_INT 2
33634: ARRAY
33635: PPUSH
33636: LD_VAR 0 2
33640: PUSH
33641: LD_INT 3
33643: ARRAY
33644: PPUSH
33645: LD_VAR 0 2
33649: PUSH
33650: LD_INT 4
33652: ARRAY
33653: PPUSH
33654: CALL_OW 449
33658: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33659: LD_ADDR_VAR 0 3
33663: PUSH
33664: LD_VAR 0 5
33668: PPUSH
33669: LD_INT 1
33671: PPUSH
33672: CALL_OW 275
33676: PUSH
33677: LD_VAR 0 4
33681: PUSH
33682: LD_INT 1
33684: ARRAY
33685: GREATEREQUAL
33686: PUSH
33687: LD_VAR 0 5
33691: PPUSH
33692: LD_INT 2
33694: PPUSH
33695: CALL_OW 275
33699: PUSH
33700: LD_VAR 0 4
33704: PUSH
33705: LD_INT 2
33707: ARRAY
33708: GREATEREQUAL
33709: AND
33710: PUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: LD_INT 3
33718: PPUSH
33719: CALL_OW 275
33723: PUSH
33724: LD_VAR 0 4
33728: PUSH
33729: LD_INT 3
33731: ARRAY
33732: GREATEREQUAL
33733: AND
33734: ST_TO_ADDR
// end ;
33735: LD_VAR 0 3
33739: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
// pom := GetBase ( building ) ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: CALL_OW 274
33760: ST_TO_ADDR
// if not pom then
33761: LD_VAR 0 3
33765: NOT
33766: IFFALSE 33770
// exit ;
33768: GO 33940
// btype := GetBType ( building ) ;
33770: LD_ADDR_VAR 0 5
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 266
33784: ST_TO_ADDR
// if btype = b_armoury then
33785: LD_VAR 0 5
33789: PUSH
33790: LD_INT 4
33792: EQUAL
33793: IFFALSE 33803
// btype := b_barracks ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_INT 5
33802: ST_TO_ADDR
// if btype = b_depot then
33803: LD_VAR 0 5
33807: PUSH
33808: LD_INT 0
33810: EQUAL
33811: IFFALSE 33821
// btype := b_warehouse ;
33813: LD_ADDR_VAR 0 5
33817: PUSH
33818: LD_INT 1
33820: ST_TO_ADDR
// if btype = b_workshop then
33821: LD_VAR 0 5
33825: PUSH
33826: LD_INT 2
33828: EQUAL
33829: IFFALSE 33839
// btype := b_factory ;
33831: LD_ADDR_VAR 0 5
33835: PUSH
33836: LD_INT 3
33838: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33839: LD_ADDR_VAR 0 4
33843: PUSH
33844: LD_VAR 0 5
33848: PPUSH
33849: LD_VAR 0 1
33853: PPUSH
33854: CALL_OW 248
33858: PPUSH
33859: CALL_OW 450
33863: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33864: LD_ADDR_VAR 0 2
33868: PUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: LD_INT 1
33876: PPUSH
33877: CALL_OW 275
33881: PUSH
33882: LD_VAR 0 4
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: GREATEREQUAL
33891: PUSH
33892: LD_VAR 0 3
33896: PPUSH
33897: LD_INT 2
33899: PPUSH
33900: CALL_OW 275
33904: PUSH
33905: LD_VAR 0 4
33909: PUSH
33910: LD_INT 2
33912: ARRAY
33913: GREATEREQUAL
33914: AND
33915: PUSH
33916: LD_VAR 0 3
33920: PPUSH
33921: LD_INT 3
33923: PPUSH
33924: CALL_OW 275
33928: PUSH
33929: LD_VAR 0 4
33933: PUSH
33934: LD_INT 3
33936: ARRAY
33937: GREATEREQUAL
33938: AND
33939: ST_TO_ADDR
// end ;
33940: LD_VAR 0 2
33944: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33945: LD_INT 0
33947: PPUSH
33948: PPUSH
33949: PPUSH
// pom := GetBase ( building ) ;
33950: LD_ADDR_VAR 0 4
33954: PUSH
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 274
33964: ST_TO_ADDR
// if not pom then
33965: LD_VAR 0 4
33969: NOT
33970: IFFALSE 33974
// exit ;
33972: GO 34075
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33974: LD_ADDR_VAR 0 5
33978: PUSH
33979: LD_VAR 0 2
33983: PPUSH
33984: LD_VAR 0 1
33988: PPUSH
33989: CALL_OW 248
33993: PPUSH
33994: CALL_OW 450
33998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_VAR 0 4
34008: PPUSH
34009: LD_INT 1
34011: PPUSH
34012: CALL_OW 275
34016: PUSH
34017: LD_VAR 0 5
34021: PUSH
34022: LD_INT 1
34024: ARRAY
34025: GREATEREQUAL
34026: PUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: LD_INT 2
34034: PPUSH
34035: CALL_OW 275
34039: PUSH
34040: LD_VAR 0 5
34044: PUSH
34045: LD_INT 2
34047: ARRAY
34048: GREATEREQUAL
34049: AND
34050: PUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: LD_INT 3
34058: PPUSH
34059: CALL_OW 275
34063: PUSH
34064: LD_VAR 0 5
34068: PUSH
34069: LD_INT 3
34071: ARRAY
34072: GREATEREQUAL
34073: AND
34074: ST_TO_ADDR
// end ;
34075: LD_VAR 0 3
34079: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34080: LD_INT 0
34082: PPUSH
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
// result := false ;
34092: LD_ADDR_VAR 0 6
34096: PUSH
34097: LD_INT 0
34099: ST_TO_ADDR
// if not base or not btype or not x or not y then
34100: LD_VAR 0 1
34104: NOT
34105: PUSH
34106: LD_VAR 0 2
34110: NOT
34111: OR
34112: PUSH
34113: LD_VAR 0 3
34117: NOT
34118: OR
34119: PUSH
34120: LD_VAR 0 4
34124: NOT
34125: OR
34126: IFFALSE 34130
// exit ;
34128: GO 34739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34130: LD_ADDR_VAR 0 12
34134: PUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: LD_VAR 0 4
34149: PPUSH
34150: LD_VAR 0 5
34154: PPUSH
34155: LD_VAR 0 1
34159: PUSH
34160: LD_INT 1
34162: ARRAY
34163: PPUSH
34164: CALL_OW 248
34168: PPUSH
34169: LD_INT 0
34171: PPUSH
34172: CALL 35576 0 6
34176: ST_TO_ADDR
// if not hexes then
34177: LD_VAR 0 12
34181: NOT
34182: IFFALSE 34186
// exit ;
34184: GO 34739
// for i = 1 to hexes do
34186: LD_ADDR_VAR 0 7
34190: PUSH
34191: DOUBLE
34192: LD_INT 1
34194: DEC
34195: ST_TO_ADDR
34196: LD_VAR 0 12
34200: PUSH
34201: FOR_TO
34202: IFFALSE 34737
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34204: LD_ADDR_VAR 0 11
34208: PUSH
34209: LD_VAR 0 12
34213: PUSH
34214: LD_VAR 0 7
34218: ARRAY
34219: PUSH
34220: LD_INT 1
34222: ARRAY
34223: PPUSH
34224: LD_VAR 0 12
34228: PUSH
34229: LD_VAR 0 7
34233: ARRAY
34234: PUSH
34235: LD_INT 2
34237: ARRAY
34238: PPUSH
34239: CALL_OW 428
34243: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34244: LD_VAR 0 12
34248: PUSH
34249: LD_VAR 0 7
34253: ARRAY
34254: PUSH
34255: LD_INT 1
34257: ARRAY
34258: PPUSH
34259: LD_VAR 0 12
34263: PUSH
34264: LD_VAR 0 7
34268: ARRAY
34269: PUSH
34270: LD_INT 2
34272: ARRAY
34273: PPUSH
34274: CALL_OW 351
34278: PUSH
34279: LD_VAR 0 12
34283: PUSH
34284: LD_VAR 0 7
34288: ARRAY
34289: PUSH
34290: LD_INT 1
34292: ARRAY
34293: PPUSH
34294: LD_VAR 0 12
34298: PUSH
34299: LD_VAR 0 7
34303: ARRAY
34304: PUSH
34305: LD_INT 2
34307: ARRAY
34308: PPUSH
34309: CALL_OW 488
34313: NOT
34314: OR
34315: PUSH
34316: LD_VAR 0 11
34320: PPUSH
34321: CALL_OW 247
34325: PUSH
34326: LD_INT 3
34328: EQUAL
34329: OR
34330: IFFALSE 34336
// exit ;
34332: POP
34333: POP
34334: GO 34739
// if not tmp or not tmp in base then
34336: LD_VAR 0 11
34340: NOT
34341: PUSH
34342: LD_VAR 0 11
34346: PUSH
34347: LD_VAR 0 1
34351: IN
34352: NOT
34353: OR
34354: IFFALSE 34358
// continue ;
34356: GO 34201
// result := true ;
34358: LD_ADDR_VAR 0 6
34362: PUSH
34363: LD_INT 1
34365: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34366: LD_ADDR_VAR 0 15
34370: PUSH
34371: LD_VAR 0 1
34375: PPUSH
34376: LD_INT 22
34378: PUSH
34379: LD_VAR 0 11
34383: PPUSH
34384: CALL_OW 255
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 30
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 30
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PPUSH
34425: CALL_OW 72
34429: ST_TO_ADDR
// if dep then
34430: LD_VAR 0 15
34434: IFFALSE 34570
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34436: LD_ADDR_VAR 0 14
34440: PUSH
34441: LD_VAR 0 15
34445: PUSH
34446: LD_INT 1
34448: ARRAY
34449: PPUSH
34450: CALL_OW 250
34454: PPUSH
34455: LD_VAR 0 15
34459: PUSH
34460: LD_INT 1
34462: ARRAY
34463: PPUSH
34464: CALL_OW 254
34468: PPUSH
34469: LD_INT 5
34471: PPUSH
34472: CALL_OW 272
34476: PUSH
34477: LD_VAR 0 15
34481: PUSH
34482: LD_INT 1
34484: ARRAY
34485: PPUSH
34486: CALL_OW 251
34490: PPUSH
34491: LD_VAR 0 15
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PPUSH
34500: CALL_OW 254
34504: PPUSH
34505: LD_INT 5
34507: PPUSH
34508: CALL_OW 273
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34517: LD_VAR 0 14
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PPUSH
34526: LD_VAR 0 14
34530: PUSH
34531: LD_INT 2
34533: ARRAY
34534: PPUSH
34535: CALL_OW 488
34539: IFFALSE 34570
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34541: LD_VAR 0 11
34545: PPUSH
34546: LD_VAR 0 14
34550: PUSH
34551: LD_INT 1
34553: ARRAY
34554: PPUSH
34555: LD_VAR 0 14
34559: PUSH
34560: LD_INT 2
34562: ARRAY
34563: PPUSH
34564: CALL_OW 111
// continue ;
34568: GO 34201
// end ; end ; r := GetDir ( tmp ) ;
34570: LD_ADDR_VAR 0 13
34574: PUSH
34575: LD_VAR 0 11
34579: PPUSH
34580: CALL_OW 254
34584: ST_TO_ADDR
// if r = 5 then
34585: LD_VAR 0 13
34589: PUSH
34590: LD_INT 5
34592: EQUAL
34593: IFFALSE 34603
// r := 0 ;
34595: LD_ADDR_VAR 0 13
34599: PUSH
34600: LD_INT 0
34602: ST_TO_ADDR
// for j = r to 5 do
34603: LD_ADDR_VAR 0 8
34607: PUSH
34608: DOUBLE
34609: LD_VAR 0 13
34613: DEC
34614: ST_TO_ADDR
34615: LD_INT 5
34617: PUSH
34618: FOR_TO
34619: IFFALSE 34733
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_VAR 0 11
34630: PPUSH
34631: CALL_OW 250
34635: PPUSH
34636: LD_VAR 0 8
34640: PPUSH
34641: LD_INT 2
34643: PPUSH
34644: CALL_OW 272
34648: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34649: LD_ADDR_VAR 0 10
34653: PUSH
34654: LD_VAR 0 11
34658: PPUSH
34659: CALL_OW 251
34663: PPUSH
34664: LD_VAR 0 8
34668: PPUSH
34669: LD_INT 2
34671: PPUSH
34672: CALL_OW 273
34676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34677: LD_VAR 0 9
34681: PPUSH
34682: LD_VAR 0 10
34686: PPUSH
34687: CALL_OW 488
34691: PUSH
34692: LD_VAR 0 9
34696: PPUSH
34697: LD_VAR 0 10
34701: PPUSH
34702: CALL_OW 428
34706: NOT
34707: AND
34708: IFFALSE 34731
// begin ComMoveXY ( tmp , _x , _y ) ;
34710: LD_VAR 0 11
34714: PPUSH
34715: LD_VAR 0 9
34719: PPUSH
34720: LD_VAR 0 10
34724: PPUSH
34725: CALL_OW 111
// break ;
34729: GO 34733
// end ; end ;
34731: GO 34618
34733: POP
34734: POP
// end ;
34735: GO 34201
34737: POP
34738: POP
// end ;
34739: LD_VAR 0 6
34743: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
// result := false ;
34756: LD_ADDR_VAR 0 6
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34764: LD_VAR 0 1
34768: NOT
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 266
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: IN
34790: NOT
34791: OR
34792: PUSH
34793: LD_VAR 0 2
34797: NOT
34798: OR
34799: PUSH
34800: LD_VAR 0 5
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 5
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: IN
34831: NOT
34832: OR
34833: PUSH
34834: LD_VAR 0 3
34838: PPUSH
34839: LD_VAR 0 4
34843: PPUSH
34844: CALL_OW 488
34848: NOT
34849: OR
34850: IFFALSE 34854
// exit ;
34852: GO 35571
// pom := GetBase ( depot ) ;
34854: LD_ADDR_VAR 0 10
34858: PUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 274
34868: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34869: LD_ADDR_VAR 0 11
34873: PUSH
34874: LD_VAR 0 2
34878: PPUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 248
34888: PPUSH
34889: CALL_OW 450
34893: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34894: LD_VAR 0 10
34898: PPUSH
34899: LD_INT 1
34901: PPUSH
34902: CALL_OW 275
34906: PUSH
34907: LD_VAR 0 11
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: GREATEREQUAL
34916: PUSH
34917: LD_VAR 0 10
34921: PPUSH
34922: LD_INT 2
34924: PPUSH
34925: CALL_OW 275
34929: PUSH
34930: LD_VAR 0 11
34934: PUSH
34935: LD_INT 2
34937: ARRAY
34938: GREATEREQUAL
34939: AND
34940: PUSH
34941: LD_VAR 0 10
34945: PPUSH
34946: LD_INT 3
34948: PPUSH
34949: CALL_OW 275
34953: PUSH
34954: LD_VAR 0 11
34958: PUSH
34959: LD_INT 3
34961: ARRAY
34962: GREATEREQUAL
34963: AND
34964: NOT
34965: IFFALSE 34969
// exit ;
34967: GO 35571
// if GetBType ( depot ) = b_depot then
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 266
34978: PUSH
34979: LD_INT 0
34981: EQUAL
34982: IFFALSE 34994
// dist := 28 else
34984: LD_ADDR_VAR 0 14
34988: PUSH
34989: LD_INT 28
34991: ST_TO_ADDR
34992: GO 35002
// dist := 36 ;
34994: LD_ADDR_VAR 0 14
34998: PUSH
34999: LD_INT 36
35001: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35002: LD_VAR 0 1
35006: PPUSH
35007: LD_VAR 0 3
35011: PPUSH
35012: LD_VAR 0 4
35016: PPUSH
35017: CALL_OW 297
35021: PUSH
35022: LD_VAR 0 14
35026: GREATER
35027: IFFALSE 35031
// exit ;
35029: GO 35571
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35031: LD_ADDR_VAR 0 12
35035: PUSH
35036: LD_VAR 0 2
35040: PPUSH
35041: LD_VAR 0 3
35045: PPUSH
35046: LD_VAR 0 4
35050: PPUSH
35051: LD_VAR 0 5
35055: PPUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 248
35065: PPUSH
35066: LD_INT 0
35068: PPUSH
35069: CALL 35576 0 6
35073: ST_TO_ADDR
// if not hexes then
35074: LD_VAR 0 12
35078: NOT
35079: IFFALSE 35083
// exit ;
35081: GO 35571
// hex := GetHexInfo ( x , y ) ;
35083: LD_ADDR_VAR 0 15
35087: PUSH
35088: LD_VAR 0 3
35092: PPUSH
35093: LD_VAR 0 4
35097: PPUSH
35098: CALL_OW 546
35102: ST_TO_ADDR
// if hex [ 1 ] then
35103: LD_VAR 0 15
35107: PUSH
35108: LD_INT 1
35110: ARRAY
35111: IFFALSE 35115
// exit ;
35113: GO 35571
// height := hex [ 2 ] ;
35115: LD_ADDR_VAR 0 13
35119: PUSH
35120: LD_VAR 0 15
35124: PUSH
35125: LD_INT 2
35127: ARRAY
35128: ST_TO_ADDR
// for i = 1 to hexes do
35129: LD_ADDR_VAR 0 7
35133: PUSH
35134: DOUBLE
35135: LD_INT 1
35137: DEC
35138: ST_TO_ADDR
35139: LD_VAR 0 12
35143: PUSH
35144: FOR_TO
35145: IFFALSE 35475
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35147: LD_VAR 0 12
35151: PUSH
35152: LD_VAR 0 7
35156: ARRAY
35157: PUSH
35158: LD_INT 1
35160: ARRAY
35161: PPUSH
35162: LD_VAR 0 12
35166: PUSH
35167: LD_VAR 0 7
35171: ARRAY
35172: PUSH
35173: LD_INT 2
35175: ARRAY
35176: PPUSH
35177: CALL_OW 488
35181: NOT
35182: PUSH
35183: LD_VAR 0 12
35187: PUSH
35188: LD_VAR 0 7
35192: ARRAY
35193: PUSH
35194: LD_INT 1
35196: ARRAY
35197: PPUSH
35198: LD_VAR 0 12
35202: PUSH
35203: LD_VAR 0 7
35207: ARRAY
35208: PUSH
35209: LD_INT 2
35211: ARRAY
35212: PPUSH
35213: CALL_OW 428
35217: PUSH
35218: LD_INT 0
35220: GREATER
35221: OR
35222: PUSH
35223: LD_VAR 0 12
35227: PUSH
35228: LD_VAR 0 7
35232: ARRAY
35233: PUSH
35234: LD_INT 1
35236: ARRAY
35237: PPUSH
35238: LD_VAR 0 12
35242: PUSH
35243: LD_VAR 0 7
35247: ARRAY
35248: PUSH
35249: LD_INT 2
35251: ARRAY
35252: PPUSH
35253: CALL_OW 351
35257: OR
35258: IFFALSE 35264
// exit ;
35260: POP
35261: POP
35262: GO 35571
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35264: LD_ADDR_VAR 0 8
35268: PUSH
35269: LD_VAR 0 12
35273: PUSH
35274: LD_VAR 0 7
35278: ARRAY
35279: PUSH
35280: LD_INT 1
35282: ARRAY
35283: PPUSH
35284: LD_VAR 0 12
35288: PUSH
35289: LD_VAR 0 7
35293: ARRAY
35294: PUSH
35295: LD_INT 2
35297: ARRAY
35298: PPUSH
35299: CALL_OW 546
35303: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35304: LD_VAR 0 8
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PUSH
35313: LD_VAR 0 8
35317: PUSH
35318: LD_INT 2
35320: ARRAY
35321: PUSH
35322: LD_VAR 0 13
35326: PUSH
35327: LD_INT 2
35329: PLUS
35330: GREATER
35331: OR
35332: PUSH
35333: LD_VAR 0 8
35337: PUSH
35338: LD_INT 2
35340: ARRAY
35341: PUSH
35342: LD_VAR 0 13
35346: PUSH
35347: LD_INT 2
35349: MINUS
35350: LESS
35351: OR
35352: PUSH
35353: LD_VAR 0 8
35357: PUSH
35358: LD_INT 3
35360: ARRAY
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 8
35367: PUSH
35368: LD_INT 9
35370: PUSH
35371: LD_INT 10
35373: PUSH
35374: LD_INT 11
35376: PUSH
35377: LD_INT 12
35379: PUSH
35380: LD_INT 13
35382: PUSH
35383: LD_INT 16
35385: PUSH
35386: LD_INT 17
35388: PUSH
35389: LD_INT 18
35391: PUSH
35392: LD_INT 19
35394: PUSH
35395: LD_INT 20
35397: PUSH
35398: LD_INT 21
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: IN
35416: NOT
35417: OR
35418: PUSH
35419: LD_VAR 0 8
35423: PUSH
35424: LD_INT 5
35426: ARRAY
35427: NOT
35428: OR
35429: PUSH
35430: LD_VAR 0 8
35434: PUSH
35435: LD_INT 6
35437: ARRAY
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 7
35447: PUSH
35448: LD_INT 9
35450: PUSH
35451: LD_INT 10
35453: PUSH
35454: LD_INT 11
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: IN
35465: NOT
35466: OR
35467: IFFALSE 35473
// exit ;
35469: POP
35470: POP
35471: GO 35571
// end ;
35473: GO 35144
35475: POP
35476: POP
// side := GetSide ( depot ) ;
35477: LD_ADDR_VAR 0 9
35481: PUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 255
35491: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35492: LD_VAR 0 9
35496: PPUSH
35497: LD_VAR 0 3
35501: PPUSH
35502: LD_VAR 0 4
35506: PPUSH
35507: LD_INT 20
35509: PPUSH
35510: CALL 28225 0 4
35514: PUSH
35515: LD_INT 4
35517: ARRAY
35518: IFFALSE 35522
// exit ;
35520: GO 35571
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 29
35529: PUSH
35530: LD_INT 30
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: IN
35537: PUSH
35538: LD_VAR 0 3
35542: PPUSH
35543: LD_VAR 0 4
35547: PPUSH
35548: LD_VAR 0 9
35552: PPUSH
35553: CALL_OW 440
35557: NOT
35558: AND
35559: IFFALSE 35563
// exit ;
35561: GO 35571
// result := true ;
35563: LD_ADDR_VAR 0 6
35567: PUSH
35568: LD_INT 1
35570: ST_TO_ADDR
// end ;
35571: LD_VAR 0 6
35575: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35576: LD_INT 0
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
// result = [ ] ;
35636: LD_ADDR_VAR 0 7
35640: PUSH
35641: EMPTY
35642: ST_TO_ADDR
// temp_list = [ ] ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: EMPTY
35649: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35650: LD_VAR 0 4
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: LD_INT 3
35666: PUSH
35667: LD_INT 4
35669: PUSH
35670: LD_INT 5
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: IN
35681: NOT
35682: PUSH
35683: LD_VAR 0 1
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: IN
35698: PUSH
35699: LD_VAR 0 5
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: NOT
35719: AND
35720: OR
35721: IFFALSE 35725
// exit ;
35723: GO 54116
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35725: LD_VAR 0 1
35729: PUSH
35730: LD_INT 6
35732: PUSH
35733: LD_INT 7
35735: PUSH
35736: LD_INT 8
35738: PUSH
35739: LD_INT 13
35741: PUSH
35742: LD_INT 12
35744: PUSH
35745: LD_INT 15
35747: PUSH
35748: LD_INT 11
35750: PUSH
35751: LD_INT 14
35753: PUSH
35754: LD_INT 10
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: IN
35768: IFFALSE 35778
// btype = b_lab ;
35770: LD_ADDR_VAR 0 1
35774: PUSH
35775: LD_INT 6
35777: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35778: LD_VAR 0 6
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: IN
35797: NOT
35798: PUSH
35799: LD_VAR 0 1
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: LD_INT 6
35818: PUSH
35819: LD_INT 36
35821: PUSH
35822: LD_INT 4
35824: PUSH
35825: LD_INT 5
35827: PUSH
35828: LD_INT 31
35830: PUSH
35831: LD_INT 32
35833: PUSH
35834: LD_INT 33
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: IN
35850: NOT
35851: PUSH
35852: LD_VAR 0 6
35856: PUSH
35857: LD_INT 1
35859: EQUAL
35860: AND
35861: OR
35862: PUSH
35863: LD_VAR 0 1
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: IN
35878: NOT
35879: PUSH
35880: LD_VAR 0 6
35884: PUSH
35885: LD_INT 2
35887: EQUAL
35888: AND
35889: OR
35890: IFFALSE 35900
// mode = 0 ;
35892: LD_ADDR_VAR 0 6
35896: PUSH
35897: LD_INT 0
35899: ST_TO_ADDR
// case mode of 0 :
35900: LD_VAR 0 6
35904: PUSH
35905: LD_INT 0
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35913
35911: GO 47366
35913: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35914: LD_ADDR_VAR 0 11
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36107: LD_ADDR_VAR 0 12
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36303: LD_ADDR_VAR 0 13
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 3
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: NEG
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36502: LD_ADDR_VAR 0 14
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 3
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36698: LD_ADDR_VAR 0 15
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 2
36821: NEG
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36891: LD_ADDR_VAR 0 16
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37084: LD_ADDR_VAR 0 17
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 2
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37314: LD_ADDR_VAR 0 18
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 2
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37544: LD_ADDR_VAR 0 19
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37774: LD_ADDR_VAR 0 20
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38004: LD_ADDR_VAR 0 21
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38234: LD_ADDR_VAR 0 22
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38464: LD_ADDR_VAR 0 23
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38744: LD_ADDR_VAR 0 24
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39020: LD_ADDR_VAR 0 25
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: LD_INT 2
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 3
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39294: LD_ADDR_VAR 0 26
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39570: LD_ADDR_VAR 0 27
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39850: LD_ADDR_VAR 0 28
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 3
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 3
40085: NEG
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 3
40097: NEG
40098: PUSH
40099: LD_INT 2
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40132: LD_ADDR_VAR 0 29
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: LD_INT 3
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40411: LD_ADDR_VAR 0 30
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 3
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40689: LD_ADDR_VAR 0 31
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 3
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40967: LD_ADDR_VAR 0 32
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41245: LD_ADDR_VAR 0 33
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: NEG
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41524: LD_ADDR_VAR 0 34
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 3
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41804: LD_ADDR_VAR 0 35
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41916: LD_ADDR_VAR 0 36
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42028: LD_ADDR_VAR 0 37
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42140: LD_ADDR_VAR 0 38
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42252: LD_ADDR_VAR 0 39
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42364: LD_ADDR_VAR 0 40
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42476: LD_ADDR_VAR 0 41
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 3
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: NEG
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42826: LD_ADDR_VAR 0 42
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: NEG
43136: PUSH
43137: LD_INT 3
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43176: LD_ADDR_VAR 0 43
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43524: LD_ADDR_VAR 0 44
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 3
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 3
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 3
43833: NEG
43834: PUSH
43835: LD_INT 3
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43874: LD_ADDR_VAR 0 45
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 3
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 3
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: LD_INT 3
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44224: LD_ADDR_VAR 0 46
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 3
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44572: LD_ADDR_VAR 0 47
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44723: LD_ADDR_VAR 0 48
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44870: LD_ADDR_VAR 0 49
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45014: LD_ADDR_VAR 0 50
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45158: LD_ADDR_VAR 0 51
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45305: LD_ADDR_VAR 0 52
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45456: LD_ADDR_VAR 0 53
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45686: LD_ADDR_VAR 0 54
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45916: LD_ADDR_VAR 0 55
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46146: LD_ADDR_VAR 0 56
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46376: LD_ADDR_VAR 0 57
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46606: LD_ADDR_VAR 0 58
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46836: LD_ADDR_VAR 0 59
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46924: LD_ADDR_VAR 0 60
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47012: LD_ADDR_VAR 0 61
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47100: LD_ADDR_VAR 0 62
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47188: LD_ADDR_VAR 0 63
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47276: LD_ADDR_VAR 0 64
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// end ; 1 :
47364: GO 53261
47366: LD_INT 1
47368: DOUBLE
47369: EQUAL
47370: IFTRUE 47374
47372: GO 49997
47374: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47375: LD_ADDR_VAR 0 11
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47419: LD_ADDR_VAR 0 12
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47460: LD_ADDR_VAR 0 13
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47500: LD_ADDR_VAR 0 14
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47541: LD_ADDR_VAR 0 15
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47585: LD_ADDR_VAR 0 16
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: NEG
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47631: LD_ADDR_VAR 0 17
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 3
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47675: LD_ADDR_VAR 0 18
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47716: LD_ADDR_VAR 0 19
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47756: LD_ADDR_VAR 0 20
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47797: LD_ADDR_VAR 0 21
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47841: LD_ADDR_VAR 0 22
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47887: LD_ADDR_VAR 0 23
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 4
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47931: LD_ADDR_VAR 0 24
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 4
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47972: LD_ADDR_VAR 0 25
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 4
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: LD_INT 4
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48012: LD_ADDR_VAR 0 26
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 4
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48053: LD_ADDR_VAR 0 27
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 4
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48097: LD_ADDR_VAR 0 28
48101: PUSH
48102: LD_INT 3
48104: NEG
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: LD_INT 4
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 4
48128: NEG
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48143: LD_ADDR_VAR 0 29
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 4
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 4
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 5
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 5
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 4
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 6
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 6
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 5
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48298: LD_ADDR_VAR 0 30
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 4
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 5
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 5
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 6
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 6
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48441: LD_ADDR_VAR 0 31
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 4
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 4
48488: PUSH
48489: LD_INT 4
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 5
48508: PUSH
48509: LD_INT 4
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 5
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 4
48528: PUSH
48529: LD_INT 5
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 6
48538: PUSH
48539: LD_INT 5
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 6
48548: PUSH
48549: LD_INT 6
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 5
48558: PUSH
48559: LD_INT 6
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48580: LD_ADDR_VAR 0 32
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 4
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 5
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 6
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 6
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 5
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48723: LD_ADDR_VAR 0 33
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 4
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 5
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 5
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 5
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 6
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 6
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48878: LD_ADDR_VAR 0 34
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 3
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 4
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 4
48933: NEG
48934: PUSH
48935: LD_INT 3
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 4
48945: NEG
48946: PUSH
48947: LD_INT 4
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: NEG
48958: PUSH
48959: LD_INT 5
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 5
48969: NEG
48970: PUSH
48971: LD_INT 4
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 5
48981: NEG
48982: PUSH
48983: LD_INT 5
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 5
48993: NEG
48994: PUSH
48995: LD_INT 6
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 6
49005: NEG
49006: PUSH
49007: LD_INT 5
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 6
49017: NEG
49018: PUSH
49019: LD_INT 6
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49041: LD_ADDR_VAR 0 41
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49085: LD_ADDR_VAR 0 42
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49126: LD_ADDR_VAR 0 43
49130: PUSH
49131: LD_INT 2
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49166: LD_ADDR_VAR 0 44
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49207: LD_ADDR_VAR 0 45
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49251: LD_ADDR_VAR 0 46
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49297: LD_ADDR_VAR 0 47
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49330: LD_ADDR_VAR 0 48
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49361: LD_ADDR_VAR 0 49
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49390: LD_ADDR_VAR 0 50
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49419: LD_ADDR_VAR 0 51
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49450: LD_ADDR_VAR 0 52
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49483: LD_ADDR_VAR 0 53
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49527: LD_ADDR_VAR 0 54
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49568: LD_ADDR_VAR 0 55
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49608: LD_ADDR_VAR 0 56
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49649: LD_ADDR_VAR 0 57
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49693: LD_ADDR_VAR 0 58
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49739: LD_ADDR_VAR 0 59
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49783: LD_ADDR_VAR 0 60
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49824: LD_ADDR_VAR 0 61
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49864: LD_ADDR_VAR 0 62
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49905: LD_ADDR_VAR 0 63
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49949: LD_ADDR_VAR 0 64
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// end ; 2 :
49995: GO 53261
49997: LD_INT 2
49999: DOUBLE
50000: EQUAL
50001: IFTRUE 50005
50003: GO 53260
50005: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50006: LD_ADDR_VAR 0 29
50010: PUSH
50011: LD_INT 4
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 5
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 5
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 4
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 5
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 4
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: LD_INT 4
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: LD_INT 4
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 4
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 4
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 5
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 5
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 5
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 4
50345: NEG
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 4
50368: NEG
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 4
50391: NEG
50392: PUSH
50393: LD_INT 4
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 4
50403: NEG
50404: PUSH
50405: LD_INT 5
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: LD_INT 4
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 4
50439: NEG
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 5
50451: NEG
50452: PUSH
50453: LD_INT 4
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 5
50463: NEG
50464: PUSH
50465: LD_INT 5
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 5
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 5
50487: NEG
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50544: LD_ADDR_VAR 0 30
50548: PUSH
50549: LD_INT 4
50551: PUSH
50552: LD_INT 4
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 5
50571: PUSH
50572: LD_INT 4
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: PUSH
50592: LD_INT 5
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 4
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 4
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 4
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 4
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 5
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 5
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: LD_INT 4
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 4
50896: NEG
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 4
50908: NEG
50909: PUSH
50910: LD_INT 4
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 4
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 5
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 4
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 5
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 5
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51091: LD_ADDR_VAR 0 31
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 4
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 5
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 5
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 4
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 5
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 4
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 4
51293: NEG
51294: PUSH
51295: LD_INT 4
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 5
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: LD_INT 4
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 4
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 5
51353: NEG
51354: PUSH
51355: LD_INT 4
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 5
51365: NEG
51366: PUSH
51367: LD_INT 5
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: LD_INT 5
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 5
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 4
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 4
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 4
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 5
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 5
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 5
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51641: LD_ADDR_VAR 0 32
51645: PUSH
51646: LD_INT 4
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 4
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 5
51704: NEG
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 5
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 5
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: LD_INT 4
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 4
51810: NEG
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 4
51822: NEG
51823: PUSH
51824: LD_INT 4
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 4
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 4
51846: NEG
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 4
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 5
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 4
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 4
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 5
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 5
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 4
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 4
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 4
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 4
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 5
52073: PUSH
52074: LD_INT 4
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 5
52083: PUSH
52084: LD_INT 5
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 5
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52188: LD_ADDR_VAR 0 33
52192: PUSH
52193: LD_INT 4
52195: NEG
52196: PUSH
52197: LD_INT 4
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 4
52207: NEG
52208: PUSH
52209: LD_INT 5
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: LD_INT 4
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 4
52243: NEG
52244: PUSH
52245: LD_INT 3
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 5
52255: NEG
52256: PUSH
52257: LD_INT 4
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 5
52267: NEG
52268: PUSH
52269: LD_INT 5
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 5
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 5
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 4
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 4
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 4
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 4
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 4
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 5
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 5
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 5
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 4
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 4
52528: PUSH
52529: LD_INT 4
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 4
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 5
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 4
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 5
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52726: LD_ADDR_VAR 0 34
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 4
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 5
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 4
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 3
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 4
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 5
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 5
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 4
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 4
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 5
52948: PUSH
52949: LD_INT 4
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 5
52958: PUSH
52959: LD_INT 5
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: LD_INT 5
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 5
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 5
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 4
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 4
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 4
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 5
53167: NEG
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 5
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// end ; end ;
53258: GO 53261
53260: POP
// case btype of b_depot , b_warehouse :
53261: LD_VAR 0 1
53265: PUSH
53266: LD_INT 0
53268: DOUBLE
53269: EQUAL
53270: IFTRUE 53280
53272: LD_INT 1
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53280
53278: GO 53481
53280: POP
// case nation of nation_american :
53281: LD_VAR 0 5
53285: PUSH
53286: LD_INT 1
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53350
53294: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53295: LD_ADDR_VAR 0 9
53299: PUSH
53300: LD_VAR 0 11
53304: PUSH
53305: LD_VAR 0 12
53309: PUSH
53310: LD_VAR 0 13
53314: PUSH
53315: LD_VAR 0 14
53319: PUSH
53320: LD_VAR 0 15
53324: PUSH
53325: LD_VAR 0 16
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: PUSH
53338: LD_VAR 0 4
53342: PUSH
53343: LD_INT 1
53345: PLUS
53346: ARRAY
53347: ST_TO_ADDR
53348: GO 53479
53350: LD_INT 2
53352: DOUBLE
53353: EQUAL
53354: IFTRUE 53358
53356: GO 53414
53358: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53359: LD_ADDR_VAR 0 9
53363: PUSH
53364: LD_VAR 0 17
53368: PUSH
53369: LD_VAR 0 18
53373: PUSH
53374: LD_VAR 0 19
53378: PUSH
53379: LD_VAR 0 20
53383: PUSH
53384: LD_VAR 0 21
53388: PUSH
53389: LD_VAR 0 22
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: PUSH
53402: LD_VAR 0 4
53406: PUSH
53407: LD_INT 1
53409: PLUS
53410: ARRAY
53411: ST_TO_ADDR
53412: GO 53479
53414: LD_INT 3
53416: DOUBLE
53417: EQUAL
53418: IFTRUE 53422
53420: GO 53478
53422: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53423: LD_ADDR_VAR 0 9
53427: PUSH
53428: LD_VAR 0 23
53432: PUSH
53433: LD_VAR 0 24
53437: PUSH
53438: LD_VAR 0 25
53442: PUSH
53443: LD_VAR 0 26
53447: PUSH
53448: LD_VAR 0 27
53452: PUSH
53453: LD_VAR 0 28
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: PUSH
53466: LD_VAR 0 4
53470: PUSH
53471: LD_INT 1
53473: PLUS
53474: ARRAY
53475: ST_TO_ADDR
53476: GO 53479
53478: POP
53479: GO 54034
53481: LD_INT 2
53483: DOUBLE
53484: EQUAL
53485: IFTRUE 53495
53487: LD_INT 3
53489: DOUBLE
53490: EQUAL
53491: IFTRUE 53495
53493: GO 53551
53495: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53496: LD_ADDR_VAR 0 9
53500: PUSH
53501: LD_VAR 0 29
53505: PUSH
53506: LD_VAR 0 30
53510: PUSH
53511: LD_VAR 0 31
53515: PUSH
53516: LD_VAR 0 32
53520: PUSH
53521: LD_VAR 0 33
53525: PUSH
53526: LD_VAR 0 34
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: PUSH
53539: LD_VAR 0 4
53543: PUSH
53544: LD_INT 1
53546: PLUS
53547: ARRAY
53548: ST_TO_ADDR
53549: GO 54034
53551: LD_INT 16
53553: DOUBLE
53554: EQUAL
53555: IFTRUE 53613
53557: LD_INT 17
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53613
53563: LD_INT 18
53565: DOUBLE
53566: EQUAL
53567: IFTRUE 53613
53569: LD_INT 19
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53613
53575: LD_INT 22
53577: DOUBLE
53578: EQUAL
53579: IFTRUE 53613
53581: LD_INT 20
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53613
53587: LD_INT 21
53589: DOUBLE
53590: EQUAL
53591: IFTRUE 53613
53593: LD_INT 23
53595: DOUBLE
53596: EQUAL
53597: IFTRUE 53613
53599: LD_INT 24
53601: DOUBLE
53602: EQUAL
53603: IFTRUE 53613
53605: LD_INT 25
53607: DOUBLE
53608: EQUAL
53609: IFTRUE 53613
53611: GO 53669
53613: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53614: LD_ADDR_VAR 0 9
53618: PUSH
53619: LD_VAR 0 35
53623: PUSH
53624: LD_VAR 0 36
53628: PUSH
53629: LD_VAR 0 37
53633: PUSH
53634: LD_VAR 0 38
53638: PUSH
53639: LD_VAR 0 39
53643: PUSH
53644: LD_VAR 0 40
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: PUSH
53657: LD_VAR 0 4
53661: PUSH
53662: LD_INT 1
53664: PLUS
53665: ARRAY
53666: ST_TO_ADDR
53667: GO 54034
53669: LD_INT 6
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53725
53675: LD_INT 7
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53725
53681: LD_INT 8
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53725
53687: LD_INT 13
53689: DOUBLE
53690: EQUAL
53691: IFTRUE 53725
53693: LD_INT 12
53695: DOUBLE
53696: EQUAL
53697: IFTRUE 53725
53699: LD_INT 15
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53725
53705: LD_INT 11
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53725
53711: LD_INT 14
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53725
53717: LD_INT 10
53719: DOUBLE
53720: EQUAL
53721: IFTRUE 53725
53723: GO 53781
53725: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53726: LD_ADDR_VAR 0 9
53730: PUSH
53731: LD_VAR 0 41
53735: PUSH
53736: LD_VAR 0 42
53740: PUSH
53741: LD_VAR 0 43
53745: PUSH
53746: LD_VAR 0 44
53750: PUSH
53751: LD_VAR 0 45
53755: PUSH
53756: LD_VAR 0 46
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: PUSH
53769: LD_VAR 0 4
53773: PUSH
53774: LD_INT 1
53776: PLUS
53777: ARRAY
53778: ST_TO_ADDR
53779: GO 54034
53781: LD_INT 36
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53789
53787: GO 53845
53789: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53790: LD_ADDR_VAR 0 9
53794: PUSH
53795: LD_VAR 0 47
53799: PUSH
53800: LD_VAR 0 48
53804: PUSH
53805: LD_VAR 0 49
53809: PUSH
53810: LD_VAR 0 50
53814: PUSH
53815: LD_VAR 0 51
53819: PUSH
53820: LD_VAR 0 52
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: PUSH
53833: LD_VAR 0 4
53837: PUSH
53838: LD_INT 1
53840: PLUS
53841: ARRAY
53842: ST_TO_ADDR
53843: GO 54034
53845: LD_INT 4
53847: DOUBLE
53848: EQUAL
53849: IFTRUE 53871
53851: LD_INT 5
53853: DOUBLE
53854: EQUAL
53855: IFTRUE 53871
53857: LD_INT 34
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53871
53863: LD_INT 37
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53871
53869: GO 53927
53871: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53872: LD_ADDR_VAR 0 9
53876: PUSH
53877: LD_VAR 0 53
53881: PUSH
53882: LD_VAR 0 54
53886: PUSH
53887: LD_VAR 0 55
53891: PUSH
53892: LD_VAR 0 56
53896: PUSH
53897: LD_VAR 0 57
53901: PUSH
53902: LD_VAR 0 58
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: LD_VAR 0 4
53919: PUSH
53920: LD_INT 1
53922: PLUS
53923: ARRAY
53924: ST_TO_ADDR
53925: GO 54034
53927: LD_INT 31
53929: DOUBLE
53930: EQUAL
53931: IFTRUE 53977
53933: LD_INT 32
53935: DOUBLE
53936: EQUAL
53937: IFTRUE 53977
53939: LD_INT 33
53941: DOUBLE
53942: EQUAL
53943: IFTRUE 53977
53945: LD_INT 27
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53977
53951: LD_INT 26
53953: DOUBLE
53954: EQUAL
53955: IFTRUE 53977
53957: LD_INT 28
53959: DOUBLE
53960: EQUAL
53961: IFTRUE 53977
53963: LD_INT 29
53965: DOUBLE
53966: EQUAL
53967: IFTRUE 53977
53969: LD_INT 30
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 53977
53975: GO 54033
53977: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53978: LD_ADDR_VAR 0 9
53982: PUSH
53983: LD_VAR 0 59
53987: PUSH
53988: LD_VAR 0 60
53992: PUSH
53993: LD_VAR 0 61
53997: PUSH
53998: LD_VAR 0 62
54002: PUSH
54003: LD_VAR 0 63
54007: PUSH
54008: LD_VAR 0 64
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: PUSH
54021: LD_VAR 0 4
54025: PUSH
54026: LD_INT 1
54028: PLUS
54029: ARRAY
54030: ST_TO_ADDR
54031: GO 54034
54033: POP
// temp_list2 = [ ] ;
54034: LD_ADDR_VAR 0 10
54038: PUSH
54039: EMPTY
54040: ST_TO_ADDR
// for i in temp_list do
54041: LD_ADDR_VAR 0 8
54045: PUSH
54046: LD_VAR 0 9
54050: PUSH
54051: FOR_IN
54052: IFFALSE 54104
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54054: LD_ADDR_VAR 0 10
54058: PUSH
54059: LD_VAR 0 10
54063: PUSH
54064: LD_VAR 0 8
54068: PUSH
54069: LD_INT 1
54071: ARRAY
54072: PUSH
54073: LD_VAR 0 2
54077: PLUS
54078: PUSH
54079: LD_VAR 0 8
54083: PUSH
54084: LD_INT 2
54086: ARRAY
54087: PUSH
54088: LD_VAR 0 3
54092: PLUS
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: ADD
54101: ST_TO_ADDR
54102: GO 54051
54104: POP
54105: POP
// result = temp_list2 ;
54106: LD_ADDR_VAR 0 7
54110: PUSH
54111: LD_VAR 0 10
54115: ST_TO_ADDR
// end ;
54116: LD_VAR 0 7
54120: RET
// export function EnemyInRange ( unit , dist ) ; begin
54121: LD_INT 0
54123: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54124: LD_ADDR_VAR 0 3
54128: PUSH
54129: LD_VAR 0 1
54133: PPUSH
54134: CALL_OW 255
54138: PPUSH
54139: LD_VAR 0 1
54143: PPUSH
54144: CALL_OW 250
54148: PPUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: CALL_OW 251
54158: PPUSH
54159: LD_VAR 0 2
54163: PPUSH
54164: CALL 28225 0 4
54168: PUSH
54169: LD_INT 4
54171: ARRAY
54172: ST_TO_ADDR
// end ;
54173: LD_VAR 0 3
54177: RET
// export function PlayerSeeMe ( unit ) ; begin
54178: LD_INT 0
54180: PPUSH
// result := See ( your_side , unit ) ;
54181: LD_ADDR_VAR 0 2
54185: PUSH
54186: LD_OWVAR 2
54190: PPUSH
54191: LD_VAR 0 1
54195: PPUSH
54196: CALL_OW 292
54200: ST_TO_ADDR
// end ;
54201: LD_VAR 0 2
54205: RET
// export function ReverseDir ( unit ) ; begin
54206: LD_INT 0
54208: PPUSH
// if not unit then
54209: LD_VAR 0 1
54213: NOT
54214: IFFALSE 54218
// exit ;
54216: GO 54241
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_VAR 0 1
54227: PPUSH
54228: CALL_OW 254
54232: PUSH
54233: LD_INT 3
54235: PLUS
54236: PUSH
54237: LD_INT 6
54239: MOD
54240: ST_TO_ADDR
// end ;
54241: LD_VAR 0 2
54245: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54246: LD_INT 0
54248: PPUSH
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
// if not hexes then
54253: LD_VAR 0 2
54257: NOT
54258: IFFALSE 54262
// exit ;
54260: GO 54410
// dist := 9999 ;
54262: LD_ADDR_VAR 0 5
54266: PUSH
54267: LD_INT 9999
54269: ST_TO_ADDR
// for i = 1 to hexes do
54270: LD_ADDR_VAR 0 4
54274: PUSH
54275: DOUBLE
54276: LD_INT 1
54278: DEC
54279: ST_TO_ADDR
54280: LD_VAR 0 2
54284: PUSH
54285: FOR_TO
54286: IFFALSE 54398
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54288: LD_VAR 0 1
54292: PPUSH
54293: LD_VAR 0 2
54297: PUSH
54298: LD_VAR 0 4
54302: ARRAY
54303: PUSH
54304: LD_INT 1
54306: ARRAY
54307: PPUSH
54308: LD_VAR 0 2
54312: PUSH
54313: LD_VAR 0 4
54317: ARRAY
54318: PUSH
54319: LD_INT 2
54321: ARRAY
54322: PPUSH
54323: CALL_OW 297
54327: PUSH
54328: LD_VAR 0 5
54332: LESS
54333: IFFALSE 54396
// begin hex := hexes [ i ] ;
54335: LD_ADDR_VAR 0 7
54339: PUSH
54340: LD_VAR 0 2
54344: PUSH
54345: LD_VAR 0 4
54349: ARRAY
54350: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54351: LD_ADDR_VAR 0 5
54355: PUSH
54356: LD_VAR 0 1
54360: PPUSH
54361: LD_VAR 0 2
54365: PUSH
54366: LD_VAR 0 4
54370: ARRAY
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: PPUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_VAR 0 4
54385: ARRAY
54386: PUSH
54387: LD_INT 2
54389: ARRAY
54390: PPUSH
54391: CALL_OW 297
54395: ST_TO_ADDR
// end ; end ;
54396: GO 54285
54398: POP
54399: POP
// result := hex ;
54400: LD_ADDR_VAR 0 3
54404: PUSH
54405: LD_VAR 0 7
54409: ST_TO_ADDR
// end ;
54410: LD_VAR 0 3
54414: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54415: LD_INT 0
54417: PPUSH
54418: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54419: LD_VAR 0 1
54423: NOT
54424: PUSH
54425: LD_VAR 0 1
54429: PUSH
54430: LD_INT 21
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 23
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PPUSH
54454: CALL_OW 69
54458: IN
54459: NOT
54460: OR
54461: IFFALSE 54465
// exit ;
54463: GO 54512
// for i = 1 to 3 do
54465: LD_ADDR_VAR 0 3
54469: PUSH
54470: DOUBLE
54471: LD_INT 1
54473: DEC
54474: ST_TO_ADDR
54475: LD_INT 3
54477: PUSH
54478: FOR_TO
54479: IFFALSE 54510
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54481: LD_VAR 0 1
54485: PPUSH
54486: CALL_OW 250
54490: PPUSH
54491: LD_VAR 0 1
54495: PPUSH
54496: CALL_OW 251
54500: PPUSH
54501: LD_INT 1
54503: PPUSH
54504: CALL_OW 453
54508: GO 54478
54510: POP
54511: POP
// end ;
54512: LD_VAR 0 2
54516: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54517: LD_INT 0
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
54523: PPUSH
54524: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54525: LD_VAR 0 1
54529: NOT
54530: PUSH
54531: LD_VAR 0 2
54535: NOT
54536: OR
54537: PUSH
54538: LD_VAR 0 1
54542: PPUSH
54543: CALL_OW 314
54547: OR
54548: IFFALSE 54552
// exit ;
54550: GO 54993
// x := GetX ( enemy_unit ) ;
54552: LD_ADDR_VAR 0 7
54556: PUSH
54557: LD_VAR 0 2
54561: PPUSH
54562: CALL_OW 250
54566: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54567: LD_ADDR_VAR 0 8
54571: PUSH
54572: LD_VAR 0 2
54576: PPUSH
54577: CALL_OW 251
54581: ST_TO_ADDR
// if not x or not y then
54582: LD_VAR 0 7
54586: NOT
54587: PUSH
54588: LD_VAR 0 8
54592: NOT
54593: OR
54594: IFFALSE 54598
// exit ;
54596: GO 54993
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54598: LD_ADDR_VAR 0 6
54602: PUSH
54603: LD_VAR 0 7
54607: PPUSH
54608: LD_INT 0
54610: PPUSH
54611: LD_INT 4
54613: PPUSH
54614: CALL_OW 272
54618: PUSH
54619: LD_VAR 0 8
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: LD_INT 4
54629: PPUSH
54630: CALL_OW 273
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_VAR 0 7
54643: PPUSH
54644: LD_INT 1
54646: PPUSH
54647: LD_INT 4
54649: PPUSH
54650: CALL_OW 272
54654: PUSH
54655: LD_VAR 0 8
54659: PPUSH
54660: LD_INT 1
54662: PPUSH
54663: LD_INT 4
54665: PPUSH
54666: CALL_OW 273
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_VAR 0 7
54679: PPUSH
54680: LD_INT 2
54682: PPUSH
54683: LD_INT 4
54685: PPUSH
54686: CALL_OW 272
54690: PUSH
54691: LD_VAR 0 8
54695: PPUSH
54696: LD_INT 2
54698: PPUSH
54699: LD_INT 4
54701: PPUSH
54702: CALL_OW 273
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_VAR 0 7
54715: PPUSH
54716: LD_INT 3
54718: PPUSH
54719: LD_INT 4
54721: PPUSH
54722: CALL_OW 272
54726: PUSH
54727: LD_VAR 0 8
54731: PPUSH
54732: LD_INT 3
54734: PPUSH
54735: LD_INT 4
54737: PPUSH
54738: CALL_OW 273
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_VAR 0 7
54751: PPUSH
54752: LD_INT 4
54754: PPUSH
54755: LD_INT 4
54757: PPUSH
54758: CALL_OW 272
54762: PUSH
54763: LD_VAR 0 8
54767: PPUSH
54768: LD_INT 4
54770: PPUSH
54771: LD_INT 4
54773: PPUSH
54774: CALL_OW 273
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_VAR 0 7
54787: PPUSH
54788: LD_INT 5
54790: PPUSH
54791: LD_INT 4
54793: PPUSH
54794: CALL_OW 272
54798: PUSH
54799: LD_VAR 0 8
54803: PPUSH
54804: LD_INT 5
54806: PPUSH
54807: LD_INT 4
54809: PPUSH
54810: CALL_OW 273
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// for i = tmp downto 1 do
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: DOUBLE
54833: LD_VAR 0 6
54837: INC
54838: ST_TO_ADDR
54839: LD_INT 1
54841: PUSH
54842: FOR_DOWNTO
54843: IFFALSE 54944
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54845: LD_VAR 0 6
54849: PUSH
54850: LD_VAR 0 4
54854: ARRAY
54855: PUSH
54856: LD_INT 1
54858: ARRAY
54859: PPUSH
54860: LD_VAR 0 6
54864: PUSH
54865: LD_VAR 0 4
54869: ARRAY
54870: PUSH
54871: LD_INT 2
54873: ARRAY
54874: PPUSH
54875: CALL_OW 488
54879: NOT
54880: PUSH
54881: LD_VAR 0 6
54885: PUSH
54886: LD_VAR 0 4
54890: ARRAY
54891: PUSH
54892: LD_INT 1
54894: ARRAY
54895: PPUSH
54896: LD_VAR 0 6
54900: PUSH
54901: LD_VAR 0 4
54905: ARRAY
54906: PUSH
54907: LD_INT 2
54909: ARRAY
54910: PPUSH
54911: CALL_OW 428
54915: PUSH
54916: LD_INT 0
54918: NONEQUAL
54919: OR
54920: IFFALSE 54942
// tmp := Delete ( tmp , i ) ;
54922: LD_ADDR_VAR 0 6
54926: PUSH
54927: LD_VAR 0 6
54931: PPUSH
54932: LD_VAR 0 4
54936: PPUSH
54937: CALL_OW 3
54941: ST_TO_ADDR
54942: GO 54842
54944: POP
54945: POP
// j := GetClosestHex ( unit , tmp ) ;
54946: LD_ADDR_VAR 0 5
54950: PUSH
54951: LD_VAR 0 1
54955: PPUSH
54956: LD_VAR 0 6
54960: PPUSH
54961: CALL 54246 0 2
54965: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54966: LD_VAR 0 1
54970: PPUSH
54971: LD_VAR 0 5
54975: PUSH
54976: LD_INT 1
54978: ARRAY
54979: PPUSH
54980: LD_VAR 0 5
54984: PUSH
54985: LD_INT 2
54987: ARRAY
54988: PPUSH
54989: CALL_OW 111
// end ;
54993: LD_VAR 0 3
54997: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54998: LD_INT 0
55000: PPUSH
55001: PPUSH
55002: PPUSH
// uc_side = 0 ;
55003: LD_ADDR_OWVAR 20
55007: PUSH
55008: LD_INT 0
55010: ST_TO_ADDR
// uc_nation = 0 ;
55011: LD_ADDR_OWVAR 21
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// InitHc ;
55019: CALL_OW 19
// InitVc ;
55023: CALL_OW 20
// if mastodonts then
55027: LD_VAR 0 6
55031: IFFALSE 55098
// for i = 1 to mastodonts do
55033: LD_ADDR_VAR 0 11
55037: PUSH
55038: DOUBLE
55039: LD_INT 1
55041: DEC
55042: ST_TO_ADDR
55043: LD_VAR 0 6
55047: PUSH
55048: FOR_TO
55049: IFFALSE 55096
// begin vc_chassis := 31 ;
55051: LD_ADDR_OWVAR 37
55055: PUSH
55056: LD_INT 31
55058: ST_TO_ADDR
// vc_control := control_rider ;
55059: LD_ADDR_OWVAR 38
55063: PUSH
55064: LD_INT 4
55066: ST_TO_ADDR
// animal := CreateVehicle ;
55067: LD_ADDR_VAR 0 12
55071: PUSH
55072: CALL_OW 45
55076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55077: LD_VAR 0 12
55081: PPUSH
55082: LD_VAR 0 8
55086: PPUSH
55087: LD_INT 0
55089: PPUSH
55090: CALL 57286 0 3
// end ;
55094: GO 55048
55096: POP
55097: POP
// if horses then
55098: LD_VAR 0 5
55102: IFFALSE 55169
// for i = 1 to horses do
55104: LD_ADDR_VAR 0 11
55108: PUSH
55109: DOUBLE
55110: LD_INT 1
55112: DEC
55113: ST_TO_ADDR
55114: LD_VAR 0 5
55118: PUSH
55119: FOR_TO
55120: IFFALSE 55167
// begin hc_class := 21 ;
55122: LD_ADDR_OWVAR 28
55126: PUSH
55127: LD_INT 21
55129: ST_TO_ADDR
// hc_gallery :=  ;
55130: LD_ADDR_OWVAR 33
55134: PUSH
55135: LD_STRING 
55137: ST_TO_ADDR
// animal := CreateHuman ;
55138: LD_ADDR_VAR 0 12
55142: PUSH
55143: CALL_OW 44
55147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55148: LD_VAR 0 12
55152: PPUSH
55153: LD_VAR 0 8
55157: PPUSH
55158: LD_INT 0
55160: PPUSH
55161: CALL 57286 0 3
// end ;
55165: GO 55119
55167: POP
55168: POP
// if birds then
55169: LD_VAR 0 1
55173: IFFALSE 55240
// for i = 1 to birds do
55175: LD_ADDR_VAR 0 11
55179: PUSH
55180: DOUBLE
55181: LD_INT 1
55183: DEC
55184: ST_TO_ADDR
55185: LD_VAR 0 1
55189: PUSH
55190: FOR_TO
55191: IFFALSE 55238
// begin hc_class = 18 ;
55193: LD_ADDR_OWVAR 28
55197: PUSH
55198: LD_INT 18
55200: ST_TO_ADDR
// hc_gallery =  ;
55201: LD_ADDR_OWVAR 33
55205: PUSH
55206: LD_STRING 
55208: ST_TO_ADDR
// animal := CreateHuman ;
55209: LD_ADDR_VAR 0 12
55213: PUSH
55214: CALL_OW 44
55218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55219: LD_VAR 0 12
55223: PPUSH
55224: LD_VAR 0 8
55228: PPUSH
55229: LD_INT 0
55231: PPUSH
55232: CALL 57286 0 3
// end ;
55236: GO 55190
55238: POP
55239: POP
// if tigers then
55240: LD_VAR 0 2
55244: IFFALSE 55328
// for i = 1 to tigers do
55246: LD_ADDR_VAR 0 11
55250: PUSH
55251: DOUBLE
55252: LD_INT 1
55254: DEC
55255: ST_TO_ADDR
55256: LD_VAR 0 2
55260: PUSH
55261: FOR_TO
55262: IFFALSE 55326
// begin hc_class = class_tiger ;
55264: LD_ADDR_OWVAR 28
55268: PUSH
55269: LD_INT 14
55271: ST_TO_ADDR
// hc_gallery =  ;
55272: LD_ADDR_OWVAR 33
55276: PUSH
55277: LD_STRING 
55279: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55280: LD_ADDR_OWVAR 35
55284: PUSH
55285: LD_INT 7
55287: NEG
55288: PPUSH
55289: LD_INT 7
55291: PPUSH
55292: CALL_OW 12
55296: ST_TO_ADDR
// animal := CreateHuman ;
55297: LD_ADDR_VAR 0 12
55301: PUSH
55302: CALL_OW 44
55306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55307: LD_VAR 0 12
55311: PPUSH
55312: LD_VAR 0 8
55316: PPUSH
55317: LD_INT 0
55319: PPUSH
55320: CALL 57286 0 3
// end ;
55324: GO 55261
55326: POP
55327: POP
// if apemans then
55328: LD_VAR 0 3
55332: IFFALSE 55455
// for i = 1 to apemans do
55334: LD_ADDR_VAR 0 11
55338: PUSH
55339: DOUBLE
55340: LD_INT 1
55342: DEC
55343: ST_TO_ADDR
55344: LD_VAR 0 3
55348: PUSH
55349: FOR_TO
55350: IFFALSE 55453
// begin hc_class = class_apeman ;
55352: LD_ADDR_OWVAR 28
55356: PUSH
55357: LD_INT 12
55359: ST_TO_ADDR
// hc_gallery =  ;
55360: LD_ADDR_OWVAR 33
55364: PUSH
55365: LD_STRING 
55367: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55368: LD_ADDR_OWVAR 35
55372: PUSH
55373: LD_INT 5
55375: NEG
55376: PPUSH
55377: LD_INT 5
55379: PPUSH
55380: CALL_OW 12
55384: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55385: LD_ADDR_OWVAR 31
55389: PUSH
55390: LD_INT 1
55392: PPUSH
55393: LD_INT 3
55395: PPUSH
55396: CALL_OW 12
55400: PUSH
55401: LD_INT 1
55403: PPUSH
55404: LD_INT 3
55406: PPUSH
55407: CALL_OW 12
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// animal := CreateHuman ;
55424: LD_ADDR_VAR 0 12
55428: PUSH
55429: CALL_OW 44
55433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55434: LD_VAR 0 12
55438: PPUSH
55439: LD_VAR 0 8
55443: PPUSH
55444: LD_INT 0
55446: PPUSH
55447: CALL 57286 0 3
// end ;
55451: GO 55349
55453: POP
55454: POP
// if enchidnas then
55455: LD_VAR 0 4
55459: IFFALSE 55526
// for i = 1 to enchidnas do
55461: LD_ADDR_VAR 0 11
55465: PUSH
55466: DOUBLE
55467: LD_INT 1
55469: DEC
55470: ST_TO_ADDR
55471: LD_VAR 0 4
55475: PUSH
55476: FOR_TO
55477: IFFALSE 55524
// begin hc_class = 13 ;
55479: LD_ADDR_OWVAR 28
55483: PUSH
55484: LD_INT 13
55486: ST_TO_ADDR
// hc_gallery =  ;
55487: LD_ADDR_OWVAR 33
55491: PUSH
55492: LD_STRING 
55494: ST_TO_ADDR
// animal := CreateHuman ;
55495: LD_ADDR_VAR 0 12
55499: PUSH
55500: CALL_OW 44
55504: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55505: LD_VAR 0 12
55509: PPUSH
55510: LD_VAR 0 8
55514: PPUSH
55515: LD_INT 0
55517: PPUSH
55518: CALL 57286 0 3
// end ;
55522: GO 55476
55524: POP
55525: POP
// if fishes then
55526: LD_VAR 0 7
55530: IFFALSE 55597
// for i = 1 to fishes do
55532: LD_ADDR_VAR 0 11
55536: PUSH
55537: DOUBLE
55538: LD_INT 1
55540: DEC
55541: ST_TO_ADDR
55542: LD_VAR 0 7
55546: PUSH
55547: FOR_TO
55548: IFFALSE 55595
// begin hc_class = 20 ;
55550: LD_ADDR_OWVAR 28
55554: PUSH
55555: LD_INT 20
55557: ST_TO_ADDR
// hc_gallery =  ;
55558: LD_ADDR_OWVAR 33
55562: PUSH
55563: LD_STRING 
55565: ST_TO_ADDR
// animal := CreateHuman ;
55566: LD_ADDR_VAR 0 12
55570: PUSH
55571: CALL_OW 44
55575: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55576: LD_VAR 0 12
55580: PPUSH
55581: LD_VAR 0 9
55585: PPUSH
55586: LD_INT 0
55588: PPUSH
55589: CALL 57286 0 3
// end ;
55593: GO 55547
55595: POP
55596: POP
// end ;
55597: LD_VAR 0 10
55601: RET
// export function WantHeal ( sci , unit ) ; begin
55602: LD_INT 0
55604: PPUSH
// if GetTaskList ( sci ) > 0 then
55605: LD_VAR 0 1
55609: PPUSH
55610: CALL_OW 437
55614: PUSH
55615: LD_INT 0
55617: GREATER
55618: IFFALSE 55688
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55620: LD_VAR 0 1
55624: PPUSH
55625: CALL_OW 437
55629: PUSH
55630: LD_INT 1
55632: ARRAY
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PUSH
55638: LD_STRING l
55640: EQUAL
55641: PUSH
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 437
55651: PUSH
55652: LD_INT 1
55654: ARRAY
55655: PUSH
55656: LD_INT 4
55658: ARRAY
55659: PUSH
55660: LD_VAR 0 2
55664: EQUAL
55665: AND
55666: IFFALSE 55678
// result := true else
55668: LD_ADDR_VAR 0 3
55672: PUSH
55673: LD_INT 1
55675: ST_TO_ADDR
55676: GO 55686
// result := false ;
55678: LD_ADDR_VAR 0 3
55682: PUSH
55683: LD_INT 0
55685: ST_TO_ADDR
// end else
55686: GO 55696
// result := false ;
55688: LD_ADDR_VAR 0 3
55692: PUSH
55693: LD_INT 0
55695: ST_TO_ADDR
// end ;
55696: LD_VAR 0 3
55700: RET
// export function HealTarget ( sci ) ; begin
55701: LD_INT 0
55703: PPUSH
// if not sci then
55704: LD_VAR 0 1
55708: NOT
55709: IFFALSE 55713
// exit ;
55711: GO 55778
// result := 0 ;
55713: LD_ADDR_VAR 0 2
55717: PUSH
55718: LD_INT 0
55720: ST_TO_ADDR
// if GetTaskList ( sci ) then
55721: LD_VAR 0 1
55725: PPUSH
55726: CALL_OW 437
55730: IFFALSE 55778
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55732: LD_VAR 0 1
55736: PPUSH
55737: CALL_OW 437
55741: PUSH
55742: LD_INT 1
55744: ARRAY
55745: PUSH
55746: LD_INT 1
55748: ARRAY
55749: PUSH
55750: LD_STRING l
55752: EQUAL
55753: IFFALSE 55778
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55755: LD_ADDR_VAR 0 2
55759: PUSH
55760: LD_VAR 0 1
55764: PPUSH
55765: CALL_OW 437
55769: PUSH
55770: LD_INT 1
55772: ARRAY
55773: PUSH
55774: LD_INT 4
55776: ARRAY
55777: ST_TO_ADDR
// end ;
55778: LD_VAR 0 2
55782: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55783: LD_INT 0
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
// if not base_units then
55789: LD_VAR 0 1
55793: NOT
55794: IFFALSE 55798
// exit ;
55796: GO 55885
// result := false ;
55798: LD_ADDR_VAR 0 2
55802: PUSH
55803: LD_INT 0
55805: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55806: LD_ADDR_VAR 0 5
55810: PUSH
55811: LD_VAR 0 1
55815: PPUSH
55816: LD_INT 21
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PPUSH
55826: CALL_OW 72
55830: ST_TO_ADDR
// if not tmp then
55831: LD_VAR 0 5
55835: NOT
55836: IFFALSE 55840
// exit ;
55838: GO 55885
// for i in tmp do
55840: LD_ADDR_VAR 0 3
55844: PUSH
55845: LD_VAR 0 5
55849: PUSH
55850: FOR_IN
55851: IFFALSE 55883
// begin result := EnemyInRange ( i , 22 ) ;
55853: LD_ADDR_VAR 0 2
55857: PUSH
55858: LD_VAR 0 3
55862: PPUSH
55863: LD_INT 22
55865: PPUSH
55866: CALL 54121 0 2
55870: ST_TO_ADDR
// if result then
55871: LD_VAR 0 2
55875: IFFALSE 55881
// exit ;
55877: POP
55878: POP
55879: GO 55885
// end ;
55881: GO 55850
55883: POP
55884: POP
// end ;
55885: LD_VAR 0 2
55889: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55890: LD_INT 0
55892: PPUSH
55893: PPUSH
// if not units then
55894: LD_VAR 0 1
55898: NOT
55899: IFFALSE 55903
// exit ;
55901: GO 55973
// result := [ ] ;
55903: LD_ADDR_VAR 0 3
55907: PUSH
55908: EMPTY
55909: ST_TO_ADDR
// for i in units do
55910: LD_ADDR_VAR 0 4
55914: PUSH
55915: LD_VAR 0 1
55919: PUSH
55920: FOR_IN
55921: IFFALSE 55971
// if GetTag ( i ) = tag then
55923: LD_VAR 0 4
55927: PPUSH
55928: CALL_OW 110
55932: PUSH
55933: LD_VAR 0 2
55937: EQUAL
55938: IFFALSE 55969
// result := Insert ( result , result + 1 , i ) ;
55940: LD_ADDR_VAR 0 3
55944: PUSH
55945: LD_VAR 0 3
55949: PPUSH
55950: LD_VAR 0 3
55954: PUSH
55955: LD_INT 1
55957: PLUS
55958: PPUSH
55959: LD_VAR 0 4
55963: PPUSH
55964: CALL_OW 2
55968: ST_TO_ADDR
55969: GO 55920
55971: POP
55972: POP
// end ;
55973: LD_VAR 0 3
55977: RET
// export function IsDriver ( un ) ; begin
55978: LD_INT 0
55980: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55981: LD_ADDR_VAR 0 2
55985: PUSH
55986: LD_VAR 0 1
55990: PUSH
55991: LD_INT 55
55993: PUSH
55994: EMPTY
55995: LIST
55996: PPUSH
55997: CALL_OW 69
56001: IN
56002: ST_TO_ADDR
// end ;
56003: LD_VAR 0 2
56007: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56008: LD_INT 0
56010: PPUSH
56011: PPUSH
// list := [ ] ;
56012: LD_ADDR_VAR 0 5
56016: PUSH
56017: EMPTY
56018: ST_TO_ADDR
// case d of 0 :
56019: LD_VAR 0 3
56023: PUSH
56024: LD_INT 0
56026: DOUBLE
56027: EQUAL
56028: IFTRUE 56032
56030: GO 56165
56032: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56033: LD_ADDR_VAR 0 5
56037: PUSH
56038: LD_VAR 0 1
56042: PUSH
56043: LD_INT 4
56045: MINUS
56046: PUSH
56047: LD_VAR 0 2
56051: PUSH
56052: LD_INT 4
56054: MINUS
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: PUSH
56064: LD_VAR 0 1
56068: PUSH
56069: LD_INT 3
56071: MINUS
56072: PUSH
56073: LD_VAR 0 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 1
56090: PUSH
56091: LD_INT 4
56093: PLUS
56094: PUSH
56095: LD_VAR 0 2
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: PUSH
56108: LD_VAR 0 1
56112: PUSH
56113: LD_INT 3
56115: PLUS
56116: PUSH
56117: LD_VAR 0 2
56121: PUSH
56122: LD_INT 3
56124: PLUS
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: PUSH
56134: LD_VAR 0 1
56138: PUSH
56139: LD_VAR 0 2
56143: PUSH
56144: LD_INT 4
56146: PLUS
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: ST_TO_ADDR
// end ; 1 :
56163: GO 56863
56165: LD_INT 1
56167: DOUBLE
56168: EQUAL
56169: IFTRUE 56173
56171: GO 56306
56173: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56174: LD_ADDR_VAR 0 5
56178: PUSH
56179: LD_VAR 0 1
56183: PUSH
56184: LD_VAR 0 2
56188: PUSH
56189: LD_INT 4
56191: MINUS
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: PUSH
56201: LD_VAR 0 1
56205: PUSH
56206: LD_INT 3
56208: MINUS
56209: PUSH
56210: LD_VAR 0 2
56214: PUSH
56215: LD_INT 3
56217: MINUS
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: LD_VAR 0 1
56231: PUSH
56232: LD_INT 4
56234: MINUS
56235: PUSH
56236: LD_VAR 0 2
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: PUSH
56249: LD_VAR 0 1
56253: PUSH
56254: LD_VAR 0 2
56258: PUSH
56259: LD_INT 3
56261: PLUS
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: PUSH
56271: LD_VAR 0 1
56275: PUSH
56276: LD_INT 4
56278: PLUS
56279: PUSH
56280: LD_VAR 0 2
56284: PUSH
56285: LD_INT 4
56287: PLUS
56288: PUSH
56289: LD_INT 5
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// end ; 2 :
56304: GO 56863
56306: LD_INT 2
56308: DOUBLE
56309: EQUAL
56310: IFTRUE 56314
56312: GO 56443
56314: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56315: LD_ADDR_VAR 0 5
56319: PUSH
56320: LD_VAR 0 1
56324: PUSH
56325: LD_VAR 0 2
56329: PUSH
56330: LD_INT 3
56332: MINUS
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: PUSH
56342: LD_VAR 0 1
56346: PUSH
56347: LD_INT 4
56349: PLUS
56350: PUSH
56351: LD_VAR 0 2
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: LD_VAR 0 1
56368: PUSH
56369: LD_VAR 0 2
56373: PUSH
56374: LD_INT 4
56376: PLUS
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: LD_VAR 0 1
56390: PUSH
56391: LD_INT 3
56393: MINUS
56394: PUSH
56395: LD_VAR 0 2
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: LD_INT 4
56415: MINUS
56416: PUSH
56417: LD_VAR 0 2
56421: PUSH
56422: LD_INT 4
56424: MINUS
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// end ; 3 :
56441: GO 56863
56443: LD_INT 3
56445: DOUBLE
56446: EQUAL
56447: IFTRUE 56451
56449: GO 56584
56451: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56452: LD_ADDR_VAR 0 5
56456: PUSH
56457: LD_VAR 0 1
56461: PUSH
56462: LD_INT 3
56464: PLUS
56465: PUSH
56466: LD_VAR 0 2
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: PUSH
56479: LD_VAR 0 1
56483: PUSH
56484: LD_INT 4
56486: PLUS
56487: PUSH
56488: LD_VAR 0 2
56492: PUSH
56493: LD_INT 4
56495: PLUS
56496: PUSH
56497: LD_INT 5
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: PUSH
56505: LD_VAR 0 1
56509: PUSH
56510: LD_INT 4
56512: MINUS
56513: PUSH
56514: LD_VAR 0 2
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: PUSH
56527: LD_VAR 0 1
56531: PUSH
56532: LD_VAR 0 2
56536: PUSH
56537: LD_INT 4
56539: MINUS
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: PUSH
56549: LD_VAR 0 1
56553: PUSH
56554: LD_INT 3
56556: MINUS
56557: PUSH
56558: LD_VAR 0 2
56562: PUSH
56563: LD_INT 3
56565: MINUS
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// end ; 4 :
56582: GO 56863
56584: LD_INT 4
56586: DOUBLE
56587: EQUAL
56588: IFTRUE 56592
56590: GO 56725
56592: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56593: LD_ADDR_VAR 0 5
56597: PUSH
56598: LD_VAR 0 1
56602: PUSH
56603: LD_VAR 0 2
56607: PUSH
56608: LD_INT 4
56610: PLUS
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: PUSH
56620: LD_VAR 0 1
56624: PUSH
56625: LD_INT 3
56627: PLUS
56628: PUSH
56629: LD_VAR 0 2
56633: PUSH
56634: LD_INT 3
56636: PLUS
56637: PUSH
56638: LD_INT 5
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: PUSH
56646: LD_VAR 0 1
56650: PUSH
56651: LD_INT 4
56653: PLUS
56654: PUSH
56655: LD_VAR 0 2
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: PUSH
56668: LD_VAR 0 1
56672: PUSH
56673: LD_VAR 0 2
56677: PUSH
56678: LD_INT 3
56680: MINUS
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: PUSH
56690: LD_VAR 0 1
56694: PUSH
56695: LD_INT 4
56697: MINUS
56698: PUSH
56699: LD_VAR 0 2
56703: PUSH
56704: LD_INT 4
56706: MINUS
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// end ; 5 :
56723: GO 56863
56725: LD_INT 5
56727: DOUBLE
56728: EQUAL
56729: IFTRUE 56733
56731: GO 56862
56733: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56734: LD_ADDR_VAR 0 5
56738: PUSH
56739: LD_VAR 0 1
56743: PUSH
56744: LD_INT 4
56746: MINUS
56747: PUSH
56748: LD_VAR 0 2
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: PUSH
56761: LD_VAR 0 1
56765: PUSH
56766: LD_VAR 0 2
56770: PUSH
56771: LD_INT 4
56773: MINUS
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: PUSH
56783: LD_VAR 0 1
56787: PUSH
56788: LD_INT 4
56790: PLUS
56791: PUSH
56792: LD_VAR 0 2
56796: PUSH
56797: LD_INT 4
56799: PLUS
56800: PUSH
56801: LD_INT 5
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: PUSH
56809: LD_VAR 0 1
56813: PUSH
56814: LD_INT 3
56816: PLUS
56817: PUSH
56818: LD_VAR 0 2
56822: PUSH
56823: LD_INT 4
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_VAR 0 2
56840: PUSH
56841: LD_INT 3
56843: PLUS
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: ST_TO_ADDR
// end ; end ;
56860: GO 56863
56862: POP
// result := list ;
56863: LD_ADDR_VAR 0 4
56867: PUSH
56868: LD_VAR 0 5
56872: ST_TO_ADDR
// end ;
56873: LD_VAR 0 4
56877: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56878: LD_INT 0
56880: PPUSH
56881: PPUSH
56882: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56883: LD_VAR 0 1
56887: NOT
56888: PUSH
56889: LD_VAR 0 2
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 4
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: IN
56912: NOT
56913: OR
56914: IFFALSE 56918
// exit ;
56916: GO 57010
// tmp := [ ] ;
56918: LD_ADDR_VAR 0 5
56922: PUSH
56923: EMPTY
56924: ST_TO_ADDR
// for i in units do
56925: LD_ADDR_VAR 0 4
56929: PUSH
56930: LD_VAR 0 1
56934: PUSH
56935: FOR_IN
56936: IFFALSE 56979
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56938: LD_ADDR_VAR 0 5
56942: PUSH
56943: LD_VAR 0 5
56947: PPUSH
56948: LD_VAR 0 5
56952: PUSH
56953: LD_INT 1
56955: PLUS
56956: PPUSH
56957: LD_VAR 0 4
56961: PPUSH
56962: LD_VAR 0 2
56966: PPUSH
56967: CALL_OW 259
56971: PPUSH
56972: CALL_OW 2
56976: ST_TO_ADDR
56977: GO 56935
56979: POP
56980: POP
// if not tmp then
56981: LD_VAR 0 5
56985: NOT
56986: IFFALSE 56990
// exit ;
56988: GO 57010
// result := SortListByListDesc ( units , tmp ) ;
56990: LD_ADDR_VAR 0 3
56994: PUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: LD_VAR 0 5
57004: PPUSH
57005: CALL_OW 77
57009: ST_TO_ADDR
// end ;
57010: LD_VAR 0 3
57014: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57015: LD_INT 0
57017: PPUSH
57018: PPUSH
57019: PPUSH
// result := false ;
57020: LD_ADDR_VAR 0 3
57024: PUSH
57025: LD_INT 0
57027: ST_TO_ADDR
// x := GetX ( building ) ;
57028: LD_ADDR_VAR 0 4
57032: PUSH
57033: LD_VAR 0 2
57037: PPUSH
57038: CALL_OW 250
57042: ST_TO_ADDR
// y := GetY ( building ) ;
57043: LD_ADDR_VAR 0 5
57047: PUSH
57048: LD_VAR 0 2
57052: PPUSH
57053: CALL_OW 251
57057: ST_TO_ADDR
// if not building or not x or not y then
57058: LD_VAR 0 2
57062: NOT
57063: PUSH
57064: LD_VAR 0 4
57068: NOT
57069: OR
57070: PUSH
57071: LD_VAR 0 5
57075: NOT
57076: OR
57077: IFFALSE 57081
// exit ;
57079: GO 57173
// if GetTaskList ( unit ) then
57081: LD_VAR 0 1
57085: PPUSH
57086: CALL_OW 437
57090: IFFALSE 57173
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57092: LD_STRING e
57094: PUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: CALL_OW 437
57104: PUSH
57105: LD_INT 1
57107: ARRAY
57108: PUSH
57109: LD_INT 1
57111: ARRAY
57112: EQUAL
57113: PUSH
57114: LD_VAR 0 4
57118: PUSH
57119: LD_VAR 0 1
57123: PPUSH
57124: CALL_OW 437
57128: PUSH
57129: LD_INT 1
57131: ARRAY
57132: PUSH
57133: LD_INT 2
57135: ARRAY
57136: EQUAL
57137: AND
57138: PUSH
57139: LD_VAR 0 5
57143: PUSH
57144: LD_VAR 0 1
57148: PPUSH
57149: CALL_OW 437
57153: PUSH
57154: LD_INT 1
57156: ARRAY
57157: PUSH
57158: LD_INT 3
57160: ARRAY
57161: EQUAL
57162: AND
57163: IFFALSE 57173
// result := true end ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_INT 1
57172: ST_TO_ADDR
// end ;
57173: LD_VAR 0 3
57177: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57178: LD_INT 0
57180: PPUSH
// result := false ;
57181: LD_ADDR_VAR 0 4
57185: PUSH
57186: LD_INT 0
57188: ST_TO_ADDR
// if GetTaskList ( unit ) then
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 437
57198: IFFALSE 57281
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57200: LD_STRING M
57202: PUSH
57203: LD_VAR 0 1
57207: PPUSH
57208: CALL_OW 437
57212: PUSH
57213: LD_INT 1
57215: ARRAY
57216: PUSH
57217: LD_INT 1
57219: ARRAY
57220: EQUAL
57221: PUSH
57222: LD_VAR 0 2
57226: PUSH
57227: LD_VAR 0 1
57231: PPUSH
57232: CALL_OW 437
57236: PUSH
57237: LD_INT 1
57239: ARRAY
57240: PUSH
57241: LD_INT 2
57243: ARRAY
57244: EQUAL
57245: AND
57246: PUSH
57247: LD_VAR 0 3
57251: PUSH
57252: LD_VAR 0 1
57256: PPUSH
57257: CALL_OW 437
57261: PUSH
57262: LD_INT 1
57264: ARRAY
57265: PUSH
57266: LD_INT 3
57268: ARRAY
57269: EQUAL
57270: AND
57271: IFFALSE 57281
// result := true ;
57273: LD_ADDR_VAR 0 4
57277: PUSH
57278: LD_INT 1
57280: ST_TO_ADDR
// end ; end ;
57281: LD_VAR 0 4
57285: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57286: LD_INT 0
57288: PPUSH
57289: PPUSH
57290: PPUSH
57291: PPUSH
// if not unit or not area then
57292: LD_VAR 0 1
57296: NOT
57297: PUSH
57298: LD_VAR 0 2
57302: NOT
57303: OR
57304: IFFALSE 57308
// exit ;
57306: GO 57472
// tmp := AreaToList ( area , i ) ;
57308: LD_ADDR_VAR 0 6
57312: PUSH
57313: LD_VAR 0 2
57317: PPUSH
57318: LD_VAR 0 5
57322: PPUSH
57323: CALL_OW 517
57327: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57328: LD_ADDR_VAR 0 5
57332: PUSH
57333: DOUBLE
57334: LD_INT 1
57336: DEC
57337: ST_TO_ADDR
57338: LD_VAR 0 6
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PUSH
57347: FOR_TO
57348: IFFALSE 57470
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57350: LD_ADDR_VAR 0 7
57354: PUSH
57355: LD_VAR 0 6
57359: PUSH
57360: LD_INT 1
57362: ARRAY
57363: PUSH
57364: LD_VAR 0 5
57368: ARRAY
57369: PUSH
57370: LD_VAR 0 6
57374: PUSH
57375: LD_INT 2
57377: ARRAY
57378: PUSH
57379: LD_VAR 0 5
57383: ARRAY
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57389: LD_VAR 0 7
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: LD_VAR 0 7
57402: PUSH
57403: LD_INT 2
57405: ARRAY
57406: PPUSH
57407: CALL_OW 428
57411: PUSH
57412: LD_INT 0
57414: EQUAL
57415: IFFALSE 57468
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57417: LD_VAR 0 1
57421: PPUSH
57422: LD_VAR 0 7
57426: PUSH
57427: LD_INT 1
57429: ARRAY
57430: PPUSH
57431: LD_VAR 0 7
57435: PUSH
57436: LD_INT 2
57438: ARRAY
57439: PPUSH
57440: LD_VAR 0 3
57444: PPUSH
57445: CALL_OW 48
// result := IsPlaced ( unit ) ;
57449: LD_ADDR_VAR 0 4
57453: PUSH
57454: LD_VAR 0 1
57458: PPUSH
57459: CALL_OW 305
57463: ST_TO_ADDR
// exit ;
57464: POP
57465: POP
57466: GO 57472
// end ; end ;
57468: GO 57347
57470: POP
57471: POP
// end ;
57472: LD_VAR 0 4
57476: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57477: LD_INT 0
57479: PPUSH
57480: PPUSH
57481: PPUSH
// if not side or side > 8 then
57482: LD_VAR 0 1
57486: NOT
57487: PUSH
57488: LD_VAR 0 1
57492: PUSH
57493: LD_INT 8
57495: GREATER
57496: OR
57497: IFFALSE 57501
// exit ;
57499: GO 57688
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57501: LD_ADDR_VAR 0 4
57505: PUSH
57506: LD_INT 22
57508: PUSH
57509: LD_VAR 0 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 21
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PPUSH
57532: CALL_OW 69
57536: ST_TO_ADDR
// if not tmp then
57537: LD_VAR 0 4
57541: NOT
57542: IFFALSE 57546
// exit ;
57544: GO 57688
// enable_addtolog := true ;
57546: LD_ADDR_OWVAR 81
57550: PUSH
57551: LD_INT 1
57553: ST_TO_ADDR
// AddToLog ( [ ) ;
57554: LD_STRING [
57556: PPUSH
57557: CALL_OW 561
// for i in tmp do
57561: LD_ADDR_VAR 0 3
57565: PUSH
57566: LD_VAR 0 4
57570: PUSH
57571: FOR_IN
57572: IFFALSE 57679
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57574: LD_STRING [
57576: PUSH
57577: LD_VAR 0 3
57581: PPUSH
57582: CALL_OW 266
57586: STR
57587: PUSH
57588: LD_STRING , 
57590: STR
57591: PUSH
57592: LD_VAR 0 3
57596: PPUSH
57597: CALL_OW 250
57601: STR
57602: PUSH
57603: LD_STRING , 
57605: STR
57606: PUSH
57607: LD_VAR 0 3
57611: PPUSH
57612: CALL_OW 251
57616: STR
57617: PUSH
57618: LD_STRING , 
57620: STR
57621: PUSH
57622: LD_VAR 0 3
57626: PPUSH
57627: CALL_OW 254
57631: STR
57632: PUSH
57633: LD_STRING , 
57635: STR
57636: PUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: LD_INT 1
57644: PPUSH
57645: CALL_OW 268
57649: STR
57650: PUSH
57651: LD_STRING , 
57653: STR
57654: PUSH
57655: LD_VAR 0 3
57659: PPUSH
57660: LD_INT 2
57662: PPUSH
57663: CALL_OW 268
57667: STR
57668: PUSH
57669: LD_STRING ],
57671: STR
57672: PPUSH
57673: CALL_OW 561
// end ;
57677: GO 57571
57679: POP
57680: POP
// AddToLog ( ]; ) ;
57681: LD_STRING ];
57683: PPUSH
57684: CALL_OW 561
// end ;
57688: LD_VAR 0 2
57692: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57693: LD_INT 0
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
// if not area or not rate or not max then
57700: LD_VAR 0 1
57704: NOT
57705: PUSH
57706: LD_VAR 0 2
57710: NOT
57711: OR
57712: PUSH
57713: LD_VAR 0 4
57717: NOT
57718: OR
57719: IFFALSE 57723
// exit ;
57721: GO 57915
// while 1 do
57723: LD_INT 1
57725: IFFALSE 57915
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57727: LD_ADDR_VAR 0 9
57731: PUSH
57732: LD_VAR 0 1
57736: PPUSH
57737: LD_INT 1
57739: PPUSH
57740: CALL_OW 287
57744: PUSH
57745: LD_INT 10
57747: MUL
57748: ST_TO_ADDR
// r := rate / 10 ;
57749: LD_ADDR_VAR 0 7
57753: PUSH
57754: LD_VAR 0 2
57758: PUSH
57759: LD_INT 10
57761: DIVREAL
57762: ST_TO_ADDR
// time := 1 1$00 ;
57763: LD_ADDR_VAR 0 8
57767: PUSH
57768: LD_INT 2100
57770: ST_TO_ADDR
// if amount < min then
57771: LD_VAR 0 9
57775: PUSH
57776: LD_VAR 0 3
57780: LESS
57781: IFFALSE 57799
// r := r * 2 else
57783: LD_ADDR_VAR 0 7
57787: PUSH
57788: LD_VAR 0 7
57792: PUSH
57793: LD_INT 2
57795: MUL
57796: ST_TO_ADDR
57797: GO 57825
// if amount > max then
57799: LD_VAR 0 9
57803: PUSH
57804: LD_VAR 0 4
57808: GREATER
57809: IFFALSE 57825
// r := r / 2 ;
57811: LD_ADDR_VAR 0 7
57815: PUSH
57816: LD_VAR 0 7
57820: PUSH
57821: LD_INT 2
57823: DIVREAL
57824: ST_TO_ADDR
// time := time / r ;
57825: LD_ADDR_VAR 0 8
57829: PUSH
57830: LD_VAR 0 8
57834: PUSH
57835: LD_VAR 0 7
57839: DIVREAL
57840: ST_TO_ADDR
// if time < 0 then
57841: LD_VAR 0 8
57845: PUSH
57846: LD_INT 0
57848: LESS
57849: IFFALSE 57866
// time := time * - 1 ;
57851: LD_ADDR_VAR 0 8
57855: PUSH
57856: LD_VAR 0 8
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: MUL
57865: ST_TO_ADDR
// wait ( time ) ;
57866: LD_VAR 0 8
57870: PPUSH
57871: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57875: LD_INT 35
57877: PPUSH
57878: LD_INT 875
57880: PPUSH
57881: CALL_OW 12
57885: PPUSH
57886: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57890: LD_INT 1
57892: PPUSH
57893: LD_INT 5
57895: PPUSH
57896: CALL_OW 12
57900: PPUSH
57901: LD_VAR 0 1
57905: PPUSH
57906: LD_INT 1
57908: PPUSH
57909: CALL_OW 55
// end ;
57913: GO 57723
// end ;
57915: LD_VAR 0 5
57919: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57920: LD_INT 0
57922: PPUSH
57923: PPUSH
57924: PPUSH
57925: PPUSH
57926: PPUSH
57927: PPUSH
57928: PPUSH
57929: PPUSH
// if not turrets or not factories then
57930: LD_VAR 0 1
57934: NOT
57935: PUSH
57936: LD_VAR 0 2
57940: NOT
57941: OR
57942: IFFALSE 57946
// exit ;
57944: GO 58253
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57946: LD_ADDR_VAR 0 10
57950: PUSH
57951: LD_INT 5
57953: PUSH
57954: LD_INT 6
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 4
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 5
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 24
57988: PUSH
57989: LD_INT 25
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 23
57998: PUSH
57999: LD_INT 27
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 42
58012: PUSH
58013: LD_INT 43
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 44
58022: PUSH
58023: LD_INT 46
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 45
58032: PUSH
58033: LD_INT 47
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// result := [ ] ;
58050: LD_ADDR_VAR 0 3
58054: PUSH
58055: EMPTY
58056: ST_TO_ADDR
// for i in turrets do
58057: LD_ADDR_VAR 0 4
58061: PUSH
58062: LD_VAR 0 1
58066: PUSH
58067: FOR_IN
58068: IFFALSE 58251
// begin nat := GetNation ( i ) ;
58070: LD_ADDR_VAR 0 7
58074: PUSH
58075: LD_VAR 0 4
58079: PPUSH
58080: CALL_OW 248
58084: ST_TO_ADDR
// weapon := 0 ;
58085: LD_ADDR_VAR 0 8
58089: PUSH
58090: LD_INT 0
58092: ST_TO_ADDR
// if not nat then
58093: LD_VAR 0 7
58097: NOT
58098: IFFALSE 58102
// continue ;
58100: GO 58067
// for j in list [ nat ] do
58102: LD_ADDR_VAR 0 5
58106: PUSH
58107: LD_VAR 0 10
58111: PUSH
58112: LD_VAR 0 7
58116: ARRAY
58117: PUSH
58118: FOR_IN
58119: IFFALSE 58160
// if GetBWeapon ( i ) = j [ 1 ] then
58121: LD_VAR 0 4
58125: PPUSH
58126: CALL_OW 269
58130: PUSH
58131: LD_VAR 0 5
58135: PUSH
58136: LD_INT 1
58138: ARRAY
58139: EQUAL
58140: IFFALSE 58158
// begin weapon := j [ 2 ] ;
58142: LD_ADDR_VAR 0 8
58146: PUSH
58147: LD_VAR 0 5
58151: PUSH
58152: LD_INT 2
58154: ARRAY
58155: ST_TO_ADDR
// break ;
58156: GO 58160
// end ;
58158: GO 58118
58160: POP
58161: POP
// if not weapon then
58162: LD_VAR 0 8
58166: NOT
58167: IFFALSE 58171
// continue ;
58169: GO 58067
// for k in factories do
58171: LD_ADDR_VAR 0 6
58175: PUSH
58176: LD_VAR 0 2
58180: PUSH
58181: FOR_IN
58182: IFFALSE 58247
// begin weapons := AvailableWeaponList ( k ) ;
58184: LD_ADDR_VAR 0 9
58188: PUSH
58189: LD_VAR 0 6
58193: PPUSH
58194: CALL_OW 478
58198: ST_TO_ADDR
// if not weapons then
58199: LD_VAR 0 9
58203: NOT
58204: IFFALSE 58208
// continue ;
58206: GO 58181
// if weapon in weapons then
58208: LD_VAR 0 8
58212: PUSH
58213: LD_VAR 0 9
58217: IN
58218: IFFALSE 58245
// begin result := [ i , weapon ] ;
58220: LD_ADDR_VAR 0 3
58224: PUSH
58225: LD_VAR 0 4
58229: PUSH
58230: LD_VAR 0 8
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// exit ;
58239: POP
58240: POP
58241: POP
58242: POP
58243: GO 58253
// end ; end ;
58245: GO 58181
58247: POP
58248: POP
// end ;
58249: GO 58067
58251: POP
58252: POP
// end ;
58253: LD_VAR 0 3
58257: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58258: LD_INT 0
58260: PPUSH
// if not side or side > 8 then
58261: LD_VAR 0 3
58265: NOT
58266: PUSH
58267: LD_VAR 0 3
58271: PUSH
58272: LD_INT 8
58274: GREATER
58275: OR
58276: IFFALSE 58280
// exit ;
58278: GO 58339
// if not range then
58280: LD_VAR 0 4
58284: NOT
58285: IFFALSE 58296
// range := - 12 ;
58287: LD_ADDR_VAR 0 4
58291: PUSH
58292: LD_INT 12
58294: NEG
58295: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58296: LD_VAR 0 1
58300: PPUSH
58301: LD_VAR 0 2
58305: PPUSH
58306: LD_VAR 0 3
58310: PPUSH
58311: LD_VAR 0 4
58315: PPUSH
58316: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58320: LD_VAR 0 1
58324: PPUSH
58325: LD_VAR 0 2
58329: PPUSH
58330: LD_VAR 0 3
58334: PPUSH
58335: CALL_OW 331
// end ;
58339: LD_VAR 0 5
58343: RET
// export function Video ( mode ) ; begin
58344: LD_INT 0
58346: PPUSH
// ingame_video = mode ;
58347: LD_ADDR_OWVAR 52
58351: PUSH
58352: LD_VAR 0 1
58356: ST_TO_ADDR
// interface_hidden = mode ;
58357: LD_ADDR_OWVAR 54
58361: PUSH
58362: LD_VAR 0 1
58366: ST_TO_ADDR
// end ;
58367: LD_VAR 0 2
58371: RET
// export function Join ( array , element ) ; begin
58372: LD_INT 0
58374: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58375: LD_ADDR_VAR 0 3
58379: PUSH
58380: LD_VAR 0 1
58384: PPUSH
58385: LD_VAR 0 1
58389: PUSH
58390: LD_INT 1
58392: PLUS
58393: PPUSH
58394: LD_VAR 0 2
58398: PPUSH
58399: CALL_OW 1
58403: ST_TO_ADDR
// end ;
58404: LD_VAR 0 3
58408: RET
// export function JoinUnion ( array , element ) ; begin
58409: LD_INT 0
58411: PPUSH
// result := array union element ;
58412: LD_ADDR_VAR 0 3
58416: PUSH
58417: LD_VAR 0 1
58421: PUSH
58422: LD_VAR 0 2
58426: UNION
58427: ST_TO_ADDR
// end ;
58428: LD_VAR 0 3
58432: RET
// export function GetBehemoths ( side ) ; begin
58433: LD_INT 0
58435: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58436: LD_ADDR_VAR 0 2
58440: PUSH
58441: LD_INT 22
58443: PUSH
58444: LD_VAR 0 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 31
58455: PUSH
58456: LD_INT 25
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PPUSH
58467: CALL_OW 69
58471: ST_TO_ADDR
// end ;
58472: LD_VAR 0 2
58476: RET
// export function Shuffle ( array ) ; var i , index ; begin
58477: LD_INT 0
58479: PPUSH
58480: PPUSH
58481: PPUSH
// result := [ ] ;
58482: LD_ADDR_VAR 0 2
58486: PUSH
58487: EMPTY
58488: ST_TO_ADDR
// if not array then
58489: LD_VAR 0 1
58493: NOT
58494: IFFALSE 58498
// exit ;
58496: GO 58597
// Randomize ;
58498: CALL_OW 10
// for i = array downto 1 do
58502: LD_ADDR_VAR 0 3
58506: PUSH
58507: DOUBLE
58508: LD_VAR 0 1
58512: INC
58513: ST_TO_ADDR
58514: LD_INT 1
58516: PUSH
58517: FOR_DOWNTO
58518: IFFALSE 58595
// begin index := rand ( 1 , array ) ;
58520: LD_ADDR_VAR 0 4
58524: PUSH
58525: LD_INT 1
58527: PPUSH
58528: LD_VAR 0 1
58532: PPUSH
58533: CALL_OW 12
58537: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58538: LD_ADDR_VAR 0 2
58542: PUSH
58543: LD_VAR 0 2
58547: PPUSH
58548: LD_VAR 0 2
58552: PUSH
58553: LD_INT 1
58555: PLUS
58556: PPUSH
58557: LD_VAR 0 1
58561: PUSH
58562: LD_VAR 0 4
58566: ARRAY
58567: PPUSH
58568: CALL_OW 2
58572: ST_TO_ADDR
// array := Delete ( array , index ) ;
58573: LD_ADDR_VAR 0 1
58577: PUSH
58578: LD_VAR 0 1
58582: PPUSH
58583: LD_VAR 0 4
58587: PPUSH
58588: CALL_OW 3
58592: ST_TO_ADDR
// end ;
58593: GO 58517
58595: POP
58596: POP
// end ;
58597: LD_VAR 0 2
58601: RET
// export function GetBaseMaterials ( base ) ; begin
58602: LD_INT 0
58604: PPUSH
// result := [ 0 , 0 , 0 ] ;
58605: LD_ADDR_VAR 0 2
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: ST_TO_ADDR
// if not base then
58624: LD_VAR 0 1
58628: NOT
58629: IFFALSE 58633
// exit ;
58631: GO 58682
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58633: LD_ADDR_VAR 0 2
58637: PUSH
58638: LD_VAR 0 1
58642: PPUSH
58643: LD_INT 1
58645: PPUSH
58646: CALL_OW 275
58650: PUSH
58651: LD_VAR 0 1
58655: PPUSH
58656: LD_INT 2
58658: PPUSH
58659: CALL_OW 275
58663: PUSH
58664: LD_VAR 0 1
58668: PPUSH
58669: LD_INT 3
58671: PPUSH
58672: CALL_OW 275
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// end ;
58682: LD_VAR 0 2
58686: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58687: LD_INT 0
58689: PPUSH
58690: PPUSH
// result := array ;
58691: LD_ADDR_VAR 0 3
58695: PUSH
58696: LD_VAR 0 1
58700: ST_TO_ADDR
// if size > 0 then
58701: LD_VAR 0 2
58705: PUSH
58706: LD_INT 0
58708: GREATER
58709: IFFALSE 58755
// for i := array downto size do
58711: LD_ADDR_VAR 0 4
58715: PUSH
58716: DOUBLE
58717: LD_VAR 0 1
58721: INC
58722: ST_TO_ADDR
58723: LD_VAR 0 2
58727: PUSH
58728: FOR_DOWNTO
58729: IFFALSE 58753
// result := Delete ( result , result ) ;
58731: LD_ADDR_VAR 0 3
58735: PUSH
58736: LD_VAR 0 3
58740: PPUSH
58741: LD_VAR 0 3
58745: PPUSH
58746: CALL_OW 3
58750: ST_TO_ADDR
58751: GO 58728
58753: POP
58754: POP
// end ;
58755: LD_VAR 0 3
58759: RET
// export function ComExit ( unit ) ; var tmp ; begin
58760: LD_INT 0
58762: PPUSH
58763: PPUSH
// if not IsInUnit ( unit ) then
58764: LD_VAR 0 1
58768: PPUSH
58769: CALL_OW 310
58773: NOT
58774: IFFALSE 58778
// exit ;
58776: GO 58838
// tmp := IsInUnit ( unit ) ;
58778: LD_ADDR_VAR 0 3
58782: PUSH
58783: LD_VAR 0 1
58787: PPUSH
58788: CALL_OW 310
58792: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58793: LD_VAR 0 3
58797: PPUSH
58798: CALL_OW 247
58802: PUSH
58803: LD_INT 2
58805: EQUAL
58806: IFFALSE 58819
// ComExitVehicle ( unit ) else
58808: LD_VAR 0 1
58812: PPUSH
58813: CALL_OW 121
58817: GO 58828
// ComExitBuilding ( unit ) ;
58819: LD_VAR 0 1
58823: PPUSH
58824: CALL_OW 122
// result := tmp ;
58828: LD_ADDR_VAR 0 2
58832: PUSH
58833: LD_VAR 0 3
58837: ST_TO_ADDR
// end ;
58838: LD_VAR 0 2
58842: RET
// export function ResetHc ; begin
58843: LD_INT 0
58845: PPUSH
// InitHc ;
58846: CALL_OW 19
// hc_importance := 0 ;
58850: LD_ADDR_OWVAR 32
58854: PUSH
58855: LD_INT 0
58857: ST_TO_ADDR
// end ;
58858: LD_VAR 0 1
58862: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58863: LD_INT 0
58865: PPUSH
58866: PPUSH
58867: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58868: LD_ADDR_VAR 0 6
58872: PUSH
58873: LD_VAR 0 1
58877: PUSH
58878: LD_VAR 0 3
58882: PLUS
58883: PUSH
58884: LD_INT 2
58886: DIV
58887: ST_TO_ADDR
// if _x < 0 then
58888: LD_VAR 0 6
58892: PUSH
58893: LD_INT 0
58895: LESS
58896: IFFALSE 58913
// _x := _x * - 1 ;
58898: LD_ADDR_VAR 0 6
58902: PUSH
58903: LD_VAR 0 6
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: MUL
58912: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58913: LD_ADDR_VAR 0 7
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: LD_VAR 0 4
58927: PLUS
58928: PUSH
58929: LD_INT 2
58931: DIV
58932: ST_TO_ADDR
// if _y < 0 then
58933: LD_VAR 0 7
58937: PUSH
58938: LD_INT 0
58940: LESS
58941: IFFALSE 58958
// _y := _y * - 1 ;
58943: LD_ADDR_VAR 0 7
58947: PUSH
58948: LD_VAR 0 7
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: MUL
58957: ST_TO_ADDR
// result := [ _x , _y ] ;
58958: LD_ADDR_VAR 0 5
58962: PUSH
58963: LD_VAR 0 6
58967: PUSH
58968: LD_VAR 0 7
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: ST_TO_ADDR
// end ;
58977: LD_VAR 0 5
58981: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58982: LD_INT 0
58984: PPUSH
58985: PPUSH
58986: PPUSH
58987: PPUSH
// task := GetTaskList ( unit ) ;
58988: LD_ADDR_VAR 0 7
58992: PUSH
58993: LD_VAR 0 1
58997: PPUSH
58998: CALL_OW 437
59002: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59003: LD_VAR 0 7
59007: NOT
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: LD_VAR 0 2
59018: PPUSH
59019: CALL_OW 308
59023: NOT
59024: AND
59025: IFFALSE 59029
// exit ;
59027: GO 59147
// if IsInArea ( unit , area ) then
59029: LD_VAR 0 1
59033: PPUSH
59034: LD_VAR 0 2
59038: PPUSH
59039: CALL_OW 308
59043: IFFALSE 59061
// begin ComMoveToArea ( unit , goAway ) ;
59045: LD_VAR 0 1
59049: PPUSH
59050: LD_VAR 0 3
59054: PPUSH
59055: CALL_OW 113
// exit ;
59059: GO 59147
// end ; if task [ 1 ] [ 1 ] <> M then
59061: LD_VAR 0 7
59065: PUSH
59066: LD_INT 1
59068: ARRAY
59069: PUSH
59070: LD_INT 1
59072: ARRAY
59073: PUSH
59074: LD_STRING M
59076: NONEQUAL
59077: IFFALSE 59081
// exit ;
59079: GO 59147
// x := task [ 1 ] [ 2 ] ;
59081: LD_ADDR_VAR 0 5
59085: PUSH
59086: LD_VAR 0 7
59090: PUSH
59091: LD_INT 1
59093: ARRAY
59094: PUSH
59095: LD_INT 2
59097: ARRAY
59098: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59099: LD_ADDR_VAR 0 6
59103: PUSH
59104: LD_VAR 0 7
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PUSH
59113: LD_INT 3
59115: ARRAY
59116: ST_TO_ADDR
// if InArea ( x , y , area ) then
59117: LD_VAR 0 5
59121: PPUSH
59122: LD_VAR 0 6
59126: PPUSH
59127: LD_VAR 0 2
59131: PPUSH
59132: CALL_OW 309
59136: IFFALSE 59147
// ComStop ( unit ) ;
59138: LD_VAR 0 1
59142: PPUSH
59143: CALL_OW 141
// end ;
59147: LD_VAR 0 4
59151: RET
// export function Abs ( value ) ; begin
59152: LD_INT 0
59154: PPUSH
// result := value ;
59155: LD_ADDR_VAR 0 2
59159: PUSH
59160: LD_VAR 0 1
59164: ST_TO_ADDR
// if value < 0 then
59165: LD_VAR 0 1
59169: PUSH
59170: LD_INT 0
59172: LESS
59173: IFFALSE 59190
// result := value * - 1 ;
59175: LD_ADDR_VAR 0 2
59179: PUSH
59180: LD_VAR 0 1
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: MUL
59189: ST_TO_ADDR
// end ;
59190: LD_VAR 0 2
59194: RET
