// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6108 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6086
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 16279 0 0
5948: GO 6086
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 16412 0 0
5963: GO 6086
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 6 :
5974: CALL 16497 0 0
5978: GO 6086
5980: LD_INT 6
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 7 :
5989: CALL 16945 0 0
5993: GO 6086
5995: LD_INT 7
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 8 :
6004: CALL 17056 0 0
6008: GO 6086
6010: LD_INT 8
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 9 :
6019: CALL 17113 0 0
6023: GO 6086
6025: LD_INT 9
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 10 :
6034: CALL 17155 0 0
6038: GO 6086
6040: LD_INT 10
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; 11 :
6049: CALL 17256 0 0
6053: GO 6086
6055: LD_INT 11
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6070
6063: POP
// hHackApeman ; 12 :
6064: CALL 17271 0 0
6068: GO 6086
6070: LD_INT 12
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6085
6078: POP
// hHackBoom ; end ;
6079: CALL 17356 0 0
6083: GO 6086
6085: POP
// end ; end ;
6086: PPOPN 6
6088: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6089: GO 6091
6091: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6092: LD_STRING initStreamRollete();
6094: PPUSH
6095: CALL_OW 559
// InitStreamMode ;
6099: CALL 6108 0 0
// DefineStreamItems ( ) ;
6103: CALL 6548 0 0
// end ;
6107: END
// function InitStreamMode ; begin
6108: LD_INT 0
6110: PPUSH
// streamModeActive := false ;
6111: LD_ADDR_EXP 15
6115: PUSH
6116: LD_INT 0
6118: ST_TO_ADDR
// normalCounter := 36 ;
6119: LD_ADDR_EXP 16
6123: PUSH
6124: LD_INT 36
6126: ST_TO_ADDR
// hardcoreCounter := 16 ;
6127: LD_ADDR_EXP 17
6131: PUSH
6132: LD_INT 16
6134: ST_TO_ADDR
// sRocket := false ;
6135: LD_ADDR_EXP 20
6139: PUSH
6140: LD_INT 0
6142: ST_TO_ADDR
// sSpeed := false ;
6143: LD_ADDR_EXP 19
6147: PUSH
6148: LD_INT 0
6150: ST_TO_ADDR
// sEngine := false ;
6151: LD_ADDR_EXP 21
6155: PUSH
6156: LD_INT 0
6158: ST_TO_ADDR
// sSpec := false ;
6159: LD_ADDR_EXP 18
6163: PUSH
6164: LD_INT 0
6166: ST_TO_ADDR
// sLevel := false ;
6167: LD_ADDR_EXP 22
6171: PUSH
6172: LD_INT 0
6174: ST_TO_ADDR
// sArmoury := false ;
6175: LD_ADDR_EXP 23
6179: PUSH
6180: LD_INT 0
6182: ST_TO_ADDR
// sRadar := false ;
6183: LD_ADDR_EXP 24
6187: PUSH
6188: LD_INT 0
6190: ST_TO_ADDR
// sBunker := false ;
6191: LD_ADDR_EXP 25
6195: PUSH
6196: LD_INT 0
6198: ST_TO_ADDR
// sHack := false ;
6199: LD_ADDR_EXP 26
6203: PUSH
6204: LD_INT 0
6206: ST_TO_ADDR
// sFire := false ;
6207: LD_ADDR_EXP 27
6211: PUSH
6212: LD_INT 0
6214: ST_TO_ADDR
// sRefresh := false ;
6215: LD_ADDR_EXP 28
6219: PUSH
6220: LD_INT 0
6222: ST_TO_ADDR
// sExp := false ;
6223: LD_ADDR_EXP 29
6227: PUSH
6228: LD_INT 0
6230: ST_TO_ADDR
// sDepot := false ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 0
6238: ST_TO_ADDR
// sFlag := false ;
6239: LD_ADDR_EXP 31
6243: PUSH
6244: LD_INT 0
6246: ST_TO_ADDR
// sKamikadze := false ;
6247: LD_ADDR_EXP 39
6251: PUSH
6252: LD_INT 0
6254: ST_TO_ADDR
// sTroll := false ;
6255: LD_ADDR_EXP 40
6259: PUSH
6260: LD_INT 0
6262: ST_TO_ADDR
// sSlow := false ;
6263: LD_ADDR_EXP 41
6267: PUSH
6268: LD_INT 0
6270: ST_TO_ADDR
// sLack := false ;
6271: LD_ADDR_EXP 42
6275: PUSH
6276: LD_INT 0
6278: ST_TO_ADDR
// sTank := false ;
6279: LD_ADDR_EXP 44
6283: PUSH
6284: LD_INT 0
6286: ST_TO_ADDR
// sRemote := false ;
6287: LD_ADDR_EXP 45
6291: PUSH
6292: LD_INT 0
6294: ST_TO_ADDR
// sPowell := false ;
6295: LD_ADDR_EXP 46
6299: PUSH
6300: LD_INT 0
6302: ST_TO_ADDR
// sTeleport := false ;
6303: LD_ADDR_EXP 49
6307: PUSH
6308: LD_INT 0
6310: ST_TO_ADDR
// sOilTower := false ;
6311: LD_ADDR_EXP 51
6315: PUSH
6316: LD_INT 0
6318: ST_TO_ADDR
// sShovel := false ;
6319: LD_ADDR_EXP 52
6323: PUSH
6324: LD_INT 0
6326: ST_TO_ADDR
// sSheik := false ;
6327: LD_ADDR_EXP 53
6331: PUSH
6332: LD_INT 0
6334: ST_TO_ADDR
// sEarthquake := false ;
6335: LD_ADDR_EXP 55
6339: PUSH
6340: LD_INT 0
6342: ST_TO_ADDR
// sAI := false ;
6343: LD_ADDR_EXP 56
6347: PUSH
6348: LD_INT 0
6350: ST_TO_ADDR
// sCargo := false ;
6351: LD_ADDR_EXP 59
6355: PUSH
6356: LD_INT 0
6358: ST_TO_ADDR
// sDLaser := false ;
6359: LD_ADDR_EXP 60
6363: PUSH
6364: LD_INT 0
6366: ST_TO_ADDR
// sExchange := false ;
6367: LD_ADDR_EXP 61
6371: PUSH
6372: LD_INT 0
6374: ST_TO_ADDR
// sFac := false ;
6375: LD_ADDR_EXP 62
6379: PUSH
6380: LD_INT 0
6382: ST_TO_ADDR
// sPower := false ;
6383: LD_ADDR_EXP 63
6387: PUSH
6388: LD_INT 0
6390: ST_TO_ADDR
// sRandom := false ;
6391: LD_ADDR_EXP 64
6395: PUSH
6396: LD_INT 0
6398: ST_TO_ADDR
// sShield := false ;
6399: LD_ADDR_EXP 65
6403: PUSH
6404: LD_INT 0
6406: ST_TO_ADDR
// sTime := false ;
6407: LD_ADDR_EXP 66
6411: PUSH
6412: LD_INT 0
6414: ST_TO_ADDR
// sTools := false ;
6415: LD_ADDR_EXP 67
6419: PUSH
6420: LD_INT 0
6422: ST_TO_ADDR
// sSold := false ;
6423: LD_ADDR_EXP 32
6427: PUSH
6428: LD_INT 0
6430: ST_TO_ADDR
// sDiff := false ;
6431: LD_ADDR_EXP 33
6435: PUSH
6436: LD_INT 0
6438: ST_TO_ADDR
// sFog := false ;
6439: LD_ADDR_EXP 36
6443: PUSH
6444: LD_INT 0
6446: ST_TO_ADDR
// sReset := false ;
6447: LD_ADDR_EXP 37
6451: PUSH
6452: LD_INT 0
6454: ST_TO_ADDR
// sSun := false ;
6455: LD_ADDR_EXP 38
6459: PUSH
6460: LD_INT 0
6462: ST_TO_ADDR
// sTiger := false ;
6463: LD_ADDR_EXP 34
6467: PUSH
6468: LD_INT 0
6470: ST_TO_ADDR
// sBomb := false ;
6471: LD_ADDR_EXP 35
6475: PUSH
6476: LD_INT 0
6478: ST_TO_ADDR
// sWound := false ;
6479: LD_ADDR_EXP 43
6483: PUSH
6484: LD_INT 0
6486: ST_TO_ADDR
// sBetray := false ;
6487: LD_ADDR_EXP 47
6491: PUSH
6492: LD_INT 0
6494: ST_TO_ADDR
// sContamin := false ;
6495: LD_ADDR_EXP 48
6499: PUSH
6500: LD_INT 0
6502: ST_TO_ADDR
// sOil := false ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// sStu := false ;
6511: LD_ADDR_EXP 54
6515: PUSH
6516: LD_INT 0
6518: ST_TO_ADDR
// sBazooka := false ;
6519: LD_ADDR_EXP 57
6523: PUSH
6524: LD_INT 0
6526: ST_TO_ADDR
// sMortar := false ;
6527: LD_ADDR_EXP 58
6531: PUSH
6532: LD_INT 0
6534: ST_TO_ADDR
// sRanger := false ;
6535: LD_ADDR_EXP 68
6539: PUSH
6540: LD_INT 0
6542: ST_TO_ADDR
// end ;
6543: LD_VAR 0 1
6547: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6548: LD_INT 0
6550: PPUSH
6551: PPUSH
6552: PPUSH
6553: PPUSH
6554: PPUSH
// result := [ ] ;
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: EMPTY
6561: ST_TO_ADDR
// if campaign_id = 1 then
6562: LD_OWVAR 69
6566: PUSH
6567: LD_INT 1
6569: EQUAL
6570: IFFALSE 9508
// begin case mission_number of 1 :
6572: LD_OWVAR 70
6576: PUSH
6577: LD_INT 1
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6649
6585: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: LD_INT 4
6596: PUSH
6597: LD_INT 11
6599: PUSH
6600: LD_INT 12
6602: PUSH
6603: LD_INT 15
6605: PUSH
6606: LD_INT 16
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 23
6614: PUSH
6615: LD_INT 26
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 101
6631: PUSH
6632: LD_INT 102
6634: PUSH
6635: LD_INT 106
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: ST_TO_ADDR
6647: GO 9506
6649: LD_INT 2
6651: DOUBLE
6652: EQUAL
6653: IFTRUE 6657
6655: GO 6729
6657: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_INT 2
6665: PUSH
6666: LD_INT 4
6668: PUSH
6669: LD_INT 11
6671: PUSH
6672: LD_INT 12
6674: PUSH
6675: LD_INT 15
6677: PUSH
6678: LD_INT 16
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 23
6686: PUSH
6687: LD_INT 26
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 101
6703: PUSH
6704: LD_INT 102
6706: PUSH
6707: LD_INT 105
6709: PUSH
6710: LD_INT 106
6712: PUSH
6713: LD_INT 108
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: ST_TO_ADDR
6727: GO 9506
6729: LD_INT 3
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6813
6737: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: LD_INT 4
6748: PUSH
6749: LD_INT 5
6751: PUSH
6752: LD_INT 11
6754: PUSH
6755: LD_INT 12
6757: PUSH
6758: LD_INT 15
6760: PUSH
6761: LD_INT 16
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 26
6769: PUSH
6770: LD_INT 36
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 101
6787: PUSH
6788: LD_INT 102
6790: PUSH
6791: LD_INT 105
6793: PUSH
6794: LD_INT 106
6796: PUSH
6797: LD_INT 108
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: ST_TO_ADDR
6811: GO 9506
6813: LD_INT 4
6815: DOUBLE
6816: EQUAL
6817: IFTRUE 6821
6819: GO 6905
6821: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6822: LD_ADDR_VAR 0 1
6826: PUSH
6827: LD_INT 2
6829: PUSH
6830: LD_INT 4
6832: PUSH
6833: LD_INT 5
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: LD_INT 11
6841: PUSH
6842: LD_INT 12
6844: PUSH
6845: LD_INT 15
6847: PUSH
6848: LD_INT 16
6850: PUSH
6851: LD_INT 22
6853: PUSH
6854: LD_INT 23
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 36
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 101
6879: PUSH
6880: LD_INT 102
6882: PUSH
6883: LD_INT 105
6885: PUSH
6886: LD_INT 106
6888: PUSH
6889: LD_INT 108
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 9506
6905: LD_INT 5
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7013
6913: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6914: LD_ADDR_VAR 0 1
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: LD_INT 5
6927: PUSH
6928: LD_INT 6
6930: PUSH
6931: LD_INT 8
6933: PUSH
6934: LD_INT 11
6936: PUSH
6937: LD_INT 12
6939: PUSH
6940: LD_INT 15
6942: PUSH
6943: LD_INT 16
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_INT 23
6951: PUSH
6952: LD_INT 25
6954: PUSH
6955: LD_INT 26
6957: PUSH
6958: LD_INT 36
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 101
6979: PUSH
6980: LD_INT 102
6982: PUSH
6983: LD_INT 105
6985: PUSH
6986: LD_INT 106
6988: PUSH
6989: LD_INT 108
6991: PUSH
6992: LD_INT 109
6994: PUSH
6995: LD_INT 112
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: ST_TO_ADDR
7011: GO 9506
7013: LD_INT 6
7015: DOUBLE
7016: EQUAL
7017: IFTRUE 7021
7019: GO 7141
7021: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7022: LD_ADDR_VAR 0 1
7026: PUSH
7027: LD_INT 2
7029: PUSH
7030: LD_INT 4
7032: PUSH
7033: LD_INT 5
7035: PUSH
7036: LD_INT 6
7038: PUSH
7039: LD_INT 8
7041: PUSH
7042: LD_INT 11
7044: PUSH
7045: LD_INT 12
7047: PUSH
7048: LD_INT 15
7050: PUSH
7051: LD_INT 16
7053: PUSH
7054: LD_INT 20
7056: PUSH
7057: LD_INT 21
7059: PUSH
7060: LD_INT 22
7062: PUSH
7063: LD_INT 23
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 26
7071: PUSH
7072: LD_INT 30
7074: PUSH
7075: LD_INT 31
7077: PUSH
7078: LD_INT 32
7080: PUSH
7081: LD_INT 36
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 101
7107: PUSH
7108: LD_INT 102
7110: PUSH
7111: LD_INT 105
7113: PUSH
7114: LD_INT 106
7116: PUSH
7117: LD_INT 108
7119: PUSH
7120: LD_INT 109
7122: PUSH
7123: LD_INT 112
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 9506
7141: LD_INT 7
7143: DOUBLE
7144: EQUAL
7145: IFTRUE 7149
7147: GO 7249
7149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7150: LD_ADDR_VAR 0 1
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: LD_INT 4
7160: PUSH
7161: LD_INT 5
7163: PUSH
7164: LD_INT 7
7166: PUSH
7167: LD_INT 11
7169: PUSH
7170: LD_INT 12
7172: PUSH
7173: LD_INT 15
7175: PUSH
7176: LD_INT 16
7178: PUSH
7179: LD_INT 20
7181: PUSH
7182: LD_INT 21
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 23
7190: PUSH
7191: LD_INT 25
7193: PUSH
7194: LD_INT 26
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 101
7215: PUSH
7216: LD_INT 102
7218: PUSH
7219: LD_INT 103
7221: PUSH
7222: LD_INT 105
7224: PUSH
7225: LD_INT 106
7227: PUSH
7228: LD_INT 108
7230: PUSH
7231: LD_INT 112
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: ST_TO_ADDR
7247: GO 9506
7249: LD_INT 8
7251: DOUBLE
7252: EQUAL
7253: IFTRUE 7257
7255: GO 7385
7257: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7258: LD_ADDR_VAR 0 1
7262: PUSH
7263: LD_INT 2
7265: PUSH
7266: LD_INT 4
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: LD_INT 6
7274: PUSH
7275: LD_INT 7
7277: PUSH
7278: LD_INT 8
7280: PUSH
7281: LD_INT 11
7283: PUSH
7284: LD_INT 12
7286: PUSH
7287: LD_INT 15
7289: PUSH
7290: LD_INT 16
7292: PUSH
7293: LD_INT 20
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_INT 23
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 26
7310: PUSH
7311: LD_INT 30
7313: PUSH
7314: LD_INT 31
7316: PUSH
7317: LD_INT 32
7319: PUSH
7320: LD_INT 36
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 101
7347: PUSH
7348: LD_INT 102
7350: PUSH
7351: LD_INT 103
7353: PUSH
7354: LD_INT 105
7356: PUSH
7357: LD_INT 106
7359: PUSH
7360: LD_INT 108
7362: PUSH
7363: LD_INT 109
7365: PUSH
7366: LD_INT 112
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 9506
7385: LD_INT 9
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7529
7393: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7394: LD_ADDR_VAR 0 1
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 5
7407: PUSH
7408: LD_INT 6
7410: PUSH
7411: LD_INT 7
7413: PUSH
7414: LD_INT 8
7416: PUSH
7417: LD_INT 11
7419: PUSH
7420: LD_INT 12
7422: PUSH
7423: LD_INT 15
7425: PUSH
7426: LD_INT 16
7428: PUSH
7429: LD_INT 20
7431: PUSH
7432: LD_INT 21
7434: PUSH
7435: LD_INT 22
7437: PUSH
7438: LD_INT 23
7440: PUSH
7441: LD_INT 25
7443: PUSH
7444: LD_INT 26
7446: PUSH
7447: LD_INT 28
7449: PUSH
7450: LD_INT 30
7452: PUSH
7453: LD_INT 31
7455: PUSH
7456: LD_INT 32
7458: PUSH
7459: LD_INT 36
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 101
7487: PUSH
7488: LD_INT 102
7490: PUSH
7491: LD_INT 103
7493: PUSH
7494: LD_INT 105
7496: PUSH
7497: LD_INT 106
7499: PUSH
7500: LD_INT 108
7502: PUSH
7503: LD_INT 109
7505: PUSH
7506: LD_INT 112
7508: PUSH
7509: LD_INT 114
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: ST_TO_ADDR
7527: GO 9506
7529: LD_INT 10
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7721
7537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7538: LD_ADDR_VAR 0 1
7542: PUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 4
7548: PUSH
7549: LD_INT 5
7551: PUSH
7552: LD_INT 6
7554: PUSH
7555: LD_INT 7
7557: PUSH
7558: LD_INT 8
7560: PUSH
7561: LD_INT 9
7563: PUSH
7564: LD_INT 10
7566: PUSH
7567: LD_INT 11
7569: PUSH
7570: LD_INT 12
7572: PUSH
7573: LD_INT 13
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: LD_INT 15
7581: PUSH
7582: LD_INT 16
7584: PUSH
7585: LD_INT 17
7587: PUSH
7588: LD_INT 18
7590: PUSH
7591: LD_INT 19
7593: PUSH
7594: LD_INT 20
7596: PUSH
7597: LD_INT 21
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 23
7605: PUSH
7606: LD_INT 24
7608: PUSH
7609: LD_INT 25
7611: PUSH
7612: LD_INT 26
7614: PUSH
7615: LD_INT 28
7617: PUSH
7618: LD_INT 30
7620: PUSH
7621: LD_INT 31
7623: PUSH
7624: LD_INT 32
7626: PUSH
7627: LD_INT 36
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 101
7663: PUSH
7664: LD_INT 102
7666: PUSH
7667: LD_INT 103
7669: PUSH
7670: LD_INT 104
7672: PUSH
7673: LD_INT 105
7675: PUSH
7676: LD_INT 106
7678: PUSH
7679: LD_INT 107
7681: PUSH
7682: LD_INT 108
7684: PUSH
7685: LD_INT 109
7687: PUSH
7688: LD_INT 110
7690: PUSH
7691: LD_INT 111
7693: PUSH
7694: LD_INT 112
7696: PUSH
7697: LD_INT 114
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: ST_TO_ADDR
7719: GO 9506
7721: LD_INT 11
7723: DOUBLE
7724: EQUAL
7725: IFTRUE 7729
7727: GO 7921
7729: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7730: LD_ADDR_VAR 0 1
7734: PUSH
7735: LD_INT 2
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 4
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 6
7749: PUSH
7750: LD_INT 7
7752: PUSH
7753: LD_INT 8
7755: PUSH
7756: LD_INT 9
7758: PUSH
7759: LD_INT 10
7761: PUSH
7762: LD_INT 11
7764: PUSH
7765: LD_INT 12
7767: PUSH
7768: LD_INT 13
7770: PUSH
7771: LD_INT 14
7773: PUSH
7774: LD_INT 15
7776: PUSH
7777: LD_INT 16
7779: PUSH
7780: LD_INT 17
7782: PUSH
7783: LD_INT 18
7785: PUSH
7786: LD_INT 19
7788: PUSH
7789: LD_INT 20
7791: PUSH
7792: LD_INT 21
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 24
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 26
7809: PUSH
7810: LD_INT 28
7812: PUSH
7813: LD_INT 30
7815: PUSH
7816: LD_INT 31
7818: PUSH
7819: LD_INT 32
7821: PUSH
7822: LD_INT 34
7824: PUSH
7825: LD_INT 36
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 101
7863: PUSH
7864: LD_INT 102
7866: PUSH
7867: LD_INT 103
7869: PUSH
7870: LD_INT 104
7872: PUSH
7873: LD_INT 105
7875: PUSH
7876: LD_INT 106
7878: PUSH
7879: LD_INT 107
7881: PUSH
7882: LD_INT 108
7884: PUSH
7885: LD_INT 109
7887: PUSH
7888: LD_INT 110
7890: PUSH
7891: LD_INT 111
7893: PUSH
7894: LD_INT 112
7896: PUSH
7897: LD_INT 114
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: ST_TO_ADDR
7919: GO 9506
7921: LD_INT 12
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7929
7927: GO 8137
7929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: LD_INT 4
7946: PUSH
7947: LD_INT 5
7949: PUSH
7950: LD_INT 6
7952: PUSH
7953: LD_INT 7
7955: PUSH
7956: LD_INT 8
7958: PUSH
7959: LD_INT 9
7961: PUSH
7962: LD_INT 10
7964: PUSH
7965: LD_INT 11
7967: PUSH
7968: LD_INT 12
7970: PUSH
7971: LD_INT 13
7973: PUSH
7974: LD_INT 14
7976: PUSH
7977: LD_INT 15
7979: PUSH
7980: LD_INT 16
7982: PUSH
7983: LD_INT 17
7985: PUSH
7986: LD_INT 18
7988: PUSH
7989: LD_INT 19
7991: PUSH
7992: LD_INT 20
7994: PUSH
7995: LD_INT 21
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 23
8003: PUSH
8004: LD_INT 24
8006: PUSH
8007: LD_INT 25
8009: PUSH
8010: LD_INT 26
8012: PUSH
8013: LD_INT 27
8015: PUSH
8016: LD_INT 28
8018: PUSH
8019: LD_INT 30
8021: PUSH
8022: LD_INT 31
8024: PUSH
8025: LD_INT 32
8027: PUSH
8028: LD_INT 33
8030: PUSH
8031: LD_INT 34
8033: PUSH
8034: LD_INT 36
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 101
8075: PUSH
8076: LD_INT 102
8078: PUSH
8079: LD_INT 103
8081: PUSH
8082: LD_INT 104
8084: PUSH
8085: LD_INT 105
8087: PUSH
8088: LD_INT 106
8090: PUSH
8091: LD_INT 107
8093: PUSH
8094: LD_INT 108
8096: PUSH
8097: LD_INT 109
8099: PUSH
8100: LD_INT 110
8102: PUSH
8103: LD_INT 111
8105: PUSH
8106: LD_INT 112
8108: PUSH
8109: LD_INT 113
8111: PUSH
8112: LD_INT 114
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: ST_TO_ADDR
8135: GO 9506
8137: LD_INT 13
8139: DOUBLE
8140: EQUAL
8141: IFTRUE 8145
8143: GO 8341
8145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8146: LD_ADDR_VAR 0 1
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: LD_INT 2
8156: PUSH
8157: LD_INT 3
8159: PUSH
8160: LD_INT 4
8162: PUSH
8163: LD_INT 5
8165: PUSH
8166: LD_INT 8
8168: PUSH
8169: LD_INT 9
8171: PUSH
8172: LD_INT 10
8174: PUSH
8175: LD_INT 11
8177: PUSH
8178: LD_INT 12
8180: PUSH
8181: LD_INT 14
8183: PUSH
8184: LD_INT 15
8186: PUSH
8187: LD_INT 16
8189: PUSH
8190: LD_INT 17
8192: PUSH
8193: LD_INT 18
8195: PUSH
8196: LD_INT 19
8198: PUSH
8199: LD_INT 20
8201: PUSH
8202: LD_INT 21
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_INT 23
8210: PUSH
8211: LD_INT 24
8213: PUSH
8214: LD_INT 25
8216: PUSH
8217: LD_INT 26
8219: PUSH
8220: LD_INT 27
8222: PUSH
8223: LD_INT 28
8225: PUSH
8226: LD_INT 30
8228: PUSH
8229: LD_INT 31
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 33
8237: PUSH
8238: LD_INT 34
8240: PUSH
8241: LD_INT 36
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 101
8279: PUSH
8280: LD_INT 102
8282: PUSH
8283: LD_INT 103
8285: PUSH
8286: LD_INT 104
8288: PUSH
8289: LD_INT 105
8291: PUSH
8292: LD_INT 106
8294: PUSH
8295: LD_INT 107
8297: PUSH
8298: LD_INT 108
8300: PUSH
8301: LD_INT 109
8303: PUSH
8304: LD_INT 110
8306: PUSH
8307: LD_INT 111
8309: PUSH
8310: LD_INT 112
8312: PUSH
8313: LD_INT 113
8315: PUSH
8316: LD_INT 114
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: ST_TO_ADDR
8339: GO 9506
8341: LD_INT 14
8343: DOUBLE
8344: EQUAL
8345: IFTRUE 8349
8347: GO 8561
8349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_INT 1
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: LD_INT 4
8366: PUSH
8367: LD_INT 5
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: LD_INT 7
8375: PUSH
8376: LD_INT 8
8378: PUSH
8379: LD_INT 9
8381: PUSH
8382: LD_INT 10
8384: PUSH
8385: LD_INT 11
8387: PUSH
8388: LD_INT 12
8390: PUSH
8391: LD_INT 13
8393: PUSH
8394: LD_INT 14
8396: PUSH
8397: LD_INT 15
8399: PUSH
8400: LD_INT 16
8402: PUSH
8403: LD_INT 17
8405: PUSH
8406: LD_INT 18
8408: PUSH
8409: LD_INT 19
8411: PUSH
8412: LD_INT 20
8414: PUSH
8415: LD_INT 21
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 23
8423: PUSH
8424: LD_INT 24
8426: PUSH
8427: LD_INT 25
8429: PUSH
8430: LD_INT 26
8432: PUSH
8433: LD_INT 27
8435: PUSH
8436: LD_INT 28
8438: PUSH
8439: LD_INT 29
8441: PUSH
8442: LD_INT 30
8444: PUSH
8445: LD_INT 31
8447: PUSH
8448: LD_INT 32
8450: PUSH
8451: LD_INT 33
8453: PUSH
8454: LD_INT 34
8456: PUSH
8457: LD_INT 36
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 101
8499: PUSH
8500: LD_INT 102
8502: PUSH
8503: LD_INT 103
8505: PUSH
8506: LD_INT 104
8508: PUSH
8509: LD_INT 105
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 107
8517: PUSH
8518: LD_INT 108
8520: PUSH
8521: LD_INT 109
8523: PUSH
8524: LD_INT 110
8526: PUSH
8527: LD_INT 111
8529: PUSH
8530: LD_INT 112
8532: PUSH
8533: LD_INT 113
8535: PUSH
8536: LD_INT 114
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: ST_TO_ADDR
8559: GO 9506
8561: LD_INT 15
8563: DOUBLE
8564: EQUAL
8565: IFTRUE 8569
8567: GO 8781
8569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 4
8586: PUSH
8587: LD_INT 5
8589: PUSH
8590: LD_INT 6
8592: PUSH
8593: LD_INT 7
8595: PUSH
8596: LD_INT 8
8598: PUSH
8599: LD_INT 9
8601: PUSH
8602: LD_INT 10
8604: PUSH
8605: LD_INT 11
8607: PUSH
8608: LD_INT 12
8610: PUSH
8611: LD_INT 13
8613: PUSH
8614: LD_INT 14
8616: PUSH
8617: LD_INT 15
8619: PUSH
8620: LD_INT 16
8622: PUSH
8623: LD_INT 17
8625: PUSH
8626: LD_INT 18
8628: PUSH
8629: LD_INT 19
8631: PUSH
8632: LD_INT 20
8634: PUSH
8635: LD_INT 21
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_INT 23
8643: PUSH
8644: LD_INT 24
8646: PUSH
8647: LD_INT 25
8649: PUSH
8650: LD_INT 26
8652: PUSH
8653: LD_INT 27
8655: PUSH
8656: LD_INT 28
8658: PUSH
8659: LD_INT 29
8661: PUSH
8662: LD_INT 30
8664: PUSH
8665: LD_INT 31
8667: PUSH
8668: LD_INT 32
8670: PUSH
8671: LD_INT 33
8673: PUSH
8674: LD_INT 34
8676: PUSH
8677: LD_INT 36
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 101
8719: PUSH
8720: LD_INT 102
8722: PUSH
8723: LD_INT 103
8725: PUSH
8726: LD_INT 104
8728: PUSH
8729: LD_INT 105
8731: PUSH
8732: LD_INT 106
8734: PUSH
8735: LD_INT 107
8737: PUSH
8738: LD_INT 108
8740: PUSH
8741: LD_INT 109
8743: PUSH
8744: LD_INT 110
8746: PUSH
8747: LD_INT 111
8749: PUSH
8750: LD_INT 112
8752: PUSH
8753: LD_INT 113
8755: PUSH
8756: LD_INT 114
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: ST_TO_ADDR
8779: GO 9506
8781: LD_INT 16
8783: DOUBLE
8784: EQUAL
8785: IFTRUE 8789
8787: GO 8913
8789: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8790: LD_ADDR_VAR 0 1
8794: PUSH
8795: LD_INT 2
8797: PUSH
8798: LD_INT 4
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: LD_INT 7
8806: PUSH
8807: LD_INT 11
8809: PUSH
8810: LD_INT 12
8812: PUSH
8813: LD_INT 15
8815: PUSH
8816: LD_INT 16
8818: PUSH
8819: LD_INT 20
8821: PUSH
8822: LD_INT 21
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 23
8830: PUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 26
8836: PUSH
8837: LD_INT 30
8839: PUSH
8840: LD_INT 31
8842: PUSH
8843: LD_INT 32
8845: PUSH
8846: LD_INT 33
8848: PUSH
8849: LD_INT 34
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 101
8875: PUSH
8876: LD_INT 102
8878: PUSH
8879: LD_INT 103
8881: PUSH
8882: LD_INT 106
8884: PUSH
8885: LD_INT 108
8887: PUSH
8888: LD_INT 112
8890: PUSH
8891: LD_INT 113
8893: PUSH
8894: LD_INT 114
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: ST_TO_ADDR
8911: GO 9506
8913: LD_INT 17
8915: DOUBLE
8916: EQUAL
8917: IFTRUE 8921
8919: GO 9133
8921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 1
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 3
8935: PUSH
8936: LD_INT 4
8938: PUSH
8939: LD_INT 5
8941: PUSH
8942: LD_INT 6
8944: PUSH
8945: LD_INT 7
8947: PUSH
8948: LD_INT 8
8950: PUSH
8951: LD_INT 9
8953: PUSH
8954: LD_INT 10
8956: PUSH
8957: LD_INT 11
8959: PUSH
8960: LD_INT 12
8962: PUSH
8963: LD_INT 13
8965: PUSH
8966: LD_INT 14
8968: PUSH
8969: LD_INT 15
8971: PUSH
8972: LD_INT 16
8974: PUSH
8975: LD_INT 17
8977: PUSH
8978: LD_INT 18
8980: PUSH
8981: LD_INT 19
8983: PUSH
8984: LD_INT 20
8986: PUSH
8987: LD_INT 21
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: LD_INT 23
8995: PUSH
8996: LD_INT 24
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 26
9004: PUSH
9005: LD_INT 27
9007: PUSH
9008: LD_INT 28
9010: PUSH
9011: LD_INT 29
9013: PUSH
9014: LD_INT 30
9016: PUSH
9017: LD_INT 31
9019: PUSH
9020: LD_INT 32
9022: PUSH
9023: LD_INT 33
9025: PUSH
9026: LD_INT 34
9028: PUSH
9029: LD_INT 36
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 103
9077: PUSH
9078: LD_INT 104
9080: PUSH
9081: LD_INT 105
9083: PUSH
9084: LD_INT 106
9086: PUSH
9087: LD_INT 107
9089: PUSH
9090: LD_INT 108
9092: PUSH
9093: LD_INT 109
9095: PUSH
9096: LD_INT 110
9098: PUSH
9099: LD_INT 111
9101: PUSH
9102: LD_INT 112
9104: PUSH
9105: LD_INT 113
9107: PUSH
9108: LD_INT 114
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: ST_TO_ADDR
9131: GO 9506
9133: LD_INT 18
9135: DOUBLE
9136: EQUAL
9137: IFTRUE 9141
9139: GO 9277
9141: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9142: LD_ADDR_VAR 0 1
9146: PUSH
9147: LD_INT 2
9149: PUSH
9150: LD_INT 4
9152: PUSH
9153: LD_INT 5
9155: PUSH
9156: LD_INT 7
9158: PUSH
9159: LD_INT 11
9161: PUSH
9162: LD_INT 12
9164: PUSH
9165: LD_INT 15
9167: PUSH
9168: LD_INT 16
9170: PUSH
9171: LD_INT 20
9173: PUSH
9174: LD_INT 21
9176: PUSH
9177: LD_INT 22
9179: PUSH
9180: LD_INT 23
9182: PUSH
9183: LD_INT 25
9185: PUSH
9186: LD_INT 26
9188: PUSH
9189: LD_INT 30
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: LD_INT 32
9197: PUSH
9198: LD_INT 33
9200: PUSH
9201: LD_INT 34
9203: PUSH
9204: LD_INT 35
9206: PUSH
9207: LD_INT 36
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 101
9235: PUSH
9236: LD_INT 102
9238: PUSH
9239: LD_INT 103
9241: PUSH
9242: LD_INT 106
9244: PUSH
9245: LD_INT 108
9247: PUSH
9248: LD_INT 112
9250: PUSH
9251: LD_INT 113
9253: PUSH
9254: LD_INT 114
9256: PUSH
9257: LD_INT 115
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
9275: GO 9506
9277: LD_INT 19
9279: DOUBLE
9280: EQUAL
9281: IFTRUE 9285
9283: GO 9505
9285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_INT 1
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: LD_INT 3
9299: PUSH
9300: LD_INT 4
9302: PUSH
9303: LD_INT 5
9305: PUSH
9306: LD_INT 6
9308: PUSH
9309: LD_INT 7
9311: PUSH
9312: LD_INT 8
9314: PUSH
9315: LD_INT 9
9317: PUSH
9318: LD_INT 10
9320: PUSH
9321: LD_INT 11
9323: PUSH
9324: LD_INT 12
9326: PUSH
9327: LD_INT 13
9329: PUSH
9330: LD_INT 14
9332: PUSH
9333: LD_INT 15
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: LD_INT 17
9341: PUSH
9342: LD_INT 18
9344: PUSH
9345: LD_INT 19
9347: PUSH
9348: LD_INT 20
9350: PUSH
9351: LD_INT 21
9353: PUSH
9354: LD_INT 22
9356: PUSH
9357: LD_INT 23
9359: PUSH
9360: LD_INT 24
9362: PUSH
9363: LD_INT 25
9365: PUSH
9366: LD_INT 26
9368: PUSH
9369: LD_INT 27
9371: PUSH
9372: LD_INT 28
9374: PUSH
9375: LD_INT 29
9377: PUSH
9378: LD_INT 30
9380: PUSH
9381: LD_INT 31
9383: PUSH
9384: LD_INT 32
9386: PUSH
9387: LD_INT 33
9389: PUSH
9390: LD_INT 34
9392: PUSH
9393: LD_INT 35
9395: PUSH
9396: LD_INT 36
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 101
9439: PUSH
9440: LD_INT 102
9442: PUSH
9443: LD_INT 103
9445: PUSH
9446: LD_INT 104
9448: PUSH
9449: LD_INT 105
9451: PUSH
9452: LD_INT 106
9454: PUSH
9455: LD_INT 107
9457: PUSH
9458: LD_INT 108
9460: PUSH
9461: LD_INT 109
9463: PUSH
9464: LD_INT 110
9466: PUSH
9467: LD_INT 111
9469: PUSH
9470: LD_INT 112
9472: PUSH
9473: LD_INT 113
9475: PUSH
9476: LD_INT 114
9478: PUSH
9479: LD_INT 115
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: ST_TO_ADDR
9503: GO 9506
9505: POP
// end else
9506: GO 9725
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9508: LD_ADDR_VAR 0 1
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: LD_INT 2
9518: PUSH
9519: LD_INT 3
9521: PUSH
9522: LD_INT 4
9524: PUSH
9525: LD_INT 5
9527: PUSH
9528: LD_INT 6
9530: PUSH
9531: LD_INT 7
9533: PUSH
9534: LD_INT 8
9536: PUSH
9537: LD_INT 9
9539: PUSH
9540: LD_INT 10
9542: PUSH
9543: LD_INT 11
9545: PUSH
9546: LD_INT 12
9548: PUSH
9549: LD_INT 13
9551: PUSH
9552: LD_INT 14
9554: PUSH
9555: LD_INT 15
9557: PUSH
9558: LD_INT 16
9560: PUSH
9561: LD_INT 17
9563: PUSH
9564: LD_INT 18
9566: PUSH
9567: LD_INT 19
9569: PUSH
9570: LD_INT 20
9572: PUSH
9573: LD_INT 21
9575: PUSH
9576: LD_INT 22
9578: PUSH
9579: LD_INT 23
9581: PUSH
9582: LD_INT 24
9584: PUSH
9585: LD_INT 25
9587: PUSH
9588: LD_INT 26
9590: PUSH
9591: LD_INT 27
9593: PUSH
9594: LD_INT 28
9596: PUSH
9597: LD_INT 29
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 31
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: LD_INT 33
9611: PUSH
9612: LD_INT 34
9614: PUSH
9615: LD_INT 35
9617: PUSH
9618: LD_INT 36
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 101
9661: PUSH
9662: LD_INT 102
9664: PUSH
9665: LD_INT 103
9667: PUSH
9668: LD_INT 104
9670: PUSH
9671: LD_INT 105
9673: PUSH
9674: LD_INT 106
9676: PUSH
9677: LD_INT 107
9679: PUSH
9680: LD_INT 108
9682: PUSH
9683: LD_INT 109
9685: PUSH
9686: LD_INT 110
9688: PUSH
9689: LD_INT 111
9691: PUSH
9692: LD_INT 112
9694: PUSH
9695: LD_INT 113
9697: PUSH
9698: LD_INT 114
9700: PUSH
9701: LD_INT 115
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: ST_TO_ADDR
// if result then
9725: LD_VAR 0 1
9729: IFFALSE 10018
// begin normal :=  ;
9731: LD_ADDR_VAR 0 3
9735: PUSH
9736: LD_STRING 
9738: ST_TO_ADDR
// hardcore :=  ;
9739: LD_ADDR_VAR 0 4
9743: PUSH
9744: LD_STRING 
9746: ST_TO_ADDR
// for i = 1 to normalCounter do
9747: LD_ADDR_VAR 0 5
9751: PUSH
9752: DOUBLE
9753: LD_INT 1
9755: DEC
9756: ST_TO_ADDR
9757: LD_EXP 16
9761: PUSH
9762: FOR_TO
9763: IFFALSE 9864
// begin tmp := 0 ;
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_STRING 0
9772: ST_TO_ADDR
// if result [ 1 ] then
9773: LD_VAR 0 1
9777: PUSH
9778: LD_INT 1
9780: ARRAY
9781: IFFALSE 9846
// if result [ 1 ] [ 1 ] = i then
9783: LD_VAR 0 1
9787: PUSH
9788: LD_INT 1
9790: ARRAY
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PUSH
9796: LD_VAR 0 5
9800: EQUAL
9801: IFFALSE 9846
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9803: LD_ADDR_VAR 0 1
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: LD_INT 1
9815: PPUSH
9816: LD_VAR 0 1
9820: PUSH
9821: LD_INT 1
9823: ARRAY
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: CALL_OW 3
9832: PPUSH
9833: CALL_OW 1
9837: ST_TO_ADDR
// tmp := 1 ;
9838: LD_ADDR_VAR 0 2
9842: PUSH
9843: LD_STRING 1
9845: ST_TO_ADDR
// end ; normal := normal & tmp ;
9846: LD_ADDR_VAR 0 3
9850: PUSH
9851: LD_VAR 0 3
9855: PUSH
9856: LD_VAR 0 2
9860: STR
9861: ST_TO_ADDR
// end ;
9862: GO 9762
9864: POP
9865: POP
// for i = 1 to hardcoreCounter do
9866: LD_ADDR_VAR 0 5
9870: PUSH
9871: DOUBLE
9872: LD_INT 1
9874: DEC
9875: ST_TO_ADDR
9876: LD_EXP 17
9880: PUSH
9881: FOR_TO
9882: IFFALSE 9987
// begin tmp := 0 ;
9884: LD_ADDR_VAR 0 2
9888: PUSH
9889: LD_STRING 0
9891: ST_TO_ADDR
// if result [ 2 ] then
9892: LD_VAR 0 1
9896: PUSH
9897: LD_INT 2
9899: ARRAY
9900: IFFALSE 9969
// if result [ 2 ] [ 1 ] = 100 + i then
9902: LD_VAR 0 1
9906: PUSH
9907: LD_INT 2
9909: ARRAY
9910: PUSH
9911: LD_INT 1
9913: ARRAY
9914: PUSH
9915: LD_INT 100
9917: PUSH
9918: LD_VAR 0 5
9922: PLUS
9923: EQUAL
9924: IFFALSE 9969
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9926: LD_ADDR_VAR 0 1
9930: PUSH
9931: LD_VAR 0 1
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 2
9946: ARRAY
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 3
9955: PPUSH
9956: CALL_OW 1
9960: ST_TO_ADDR
// tmp := 1 ;
9961: LD_ADDR_VAR 0 2
9965: PUSH
9966: LD_STRING 1
9968: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9969: LD_ADDR_VAR 0 4
9973: PUSH
9974: LD_VAR 0 4
9978: PUSH
9979: LD_VAR 0 2
9983: STR
9984: ST_TO_ADDR
// end ;
9985: GO 9881
9987: POP
9988: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9989: LD_STRING getStreamItemsFromMission("
9991: PUSH
9992: LD_VAR 0 3
9996: STR
9997: PUSH
9998: LD_STRING ","
10000: STR
10001: PUSH
10002: LD_VAR 0 4
10006: STR
10007: PUSH
10008: LD_STRING ")
10010: STR
10011: PPUSH
10012: CALL_OW 559
// end else
10016: GO 10025
// ToLua ( getStreamItemsFromMission("","") ) ;
10018: LD_STRING getStreamItemsFromMission("","")
10020: PPUSH
10021: CALL_OW 559
// end ;
10025: LD_VAR 0 1
10029: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10030: LD_EXP 15
10034: PUSH
10035: LD_EXP 20
10039: AND
10040: IFFALSE 10164
10042: GO 10044
10044: DISABLE
10045: LD_INT 0
10047: PPUSH
10048: PPUSH
// begin enable ;
10049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10050: LD_ADDR_VAR 0 2
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_OWVAR 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 7
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 34
10082: PUSH
10083: LD_INT 45
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 34
10092: PUSH
10093: LD_INT 28
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 34
10102: PUSH
10103: LD_INT 47
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: ST_TO_ADDR
// if not tmp then
10126: LD_VAR 0 2
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10164
// for i in tmp do
10135: LD_ADDR_VAR 0 1
10139: PUSH
10140: LD_VAR 0 2
10144: PUSH
10145: FOR_IN
10146: IFFALSE 10162
// begin SetLives ( i , 0 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: LD_INT 0
10155: PPUSH
10156: CALL_OW 234
// end ;
10160: GO 10145
10162: POP
10163: POP
// end ;
10164: PPOPN 2
10166: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10167: LD_EXP 15
10171: PUSH
10172: LD_EXP 21
10176: AND
10177: IFFALSE 10261
10179: GO 10181
10181: DISABLE
10182: LD_INT 0
10184: PPUSH
10185: PPUSH
// begin enable ;
10186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10187: LD_ADDR_VAR 0 2
10191: PUSH
10192: LD_INT 22
10194: PUSH
10195: LD_OWVAR 2
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 32
10206: PUSH
10207: LD_INT 3
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PPUSH
10218: CALL_OW 69
10222: ST_TO_ADDR
// if not tmp then
10223: LD_VAR 0 2
10227: NOT
10228: IFFALSE 10232
// exit ;
10230: GO 10261
// for i in tmp do
10232: LD_ADDR_VAR 0 1
10236: PUSH
10237: LD_VAR 0 2
10241: PUSH
10242: FOR_IN
10243: IFFALSE 10259
// begin SetLives ( i , 0 ) ;
10245: LD_VAR 0 1
10249: PPUSH
10250: LD_INT 0
10252: PPUSH
10253: CALL_OW 234
// end ;
10257: GO 10242
10259: POP
10260: POP
// end ;
10261: PPOPN 2
10263: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10264: LD_EXP 15
10268: PUSH
10269: LD_EXP 18
10273: AND
10274: IFFALSE 10367
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
// begin enable ;
10282: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10283: LD_ADDR_VAR 0 1
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_OWVAR 2
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: LD_INT 25
10305: PUSH
10306: LD_INT 5
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 25
10315: PUSH
10316: LD_INT 9
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 25
10325: PUSH
10326: LD_INT 8
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 69
10347: PUSH
10348: FOR_IN
10349: IFFALSE 10365
// begin SetClass ( i , 1 ) ;
10351: LD_VAR 0 1
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 336
// end ;
10363: GO 10348
10365: POP
10366: POP
// end ;
10367: PPOPN 1
10369: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10370: LD_EXP 15
10374: PUSH
10375: LD_EXP 19
10379: AND
10380: PUSH
10381: LD_OWVAR 65
10385: PUSH
10386: LD_INT 7
10388: LESS
10389: AND
10390: IFFALSE 10404
10392: GO 10394
10394: DISABLE
// begin enable ;
10395: ENABLE
// game_speed := 7 ;
10396: LD_ADDR_OWVAR 65
10400: PUSH
10401: LD_INT 7
10403: ST_TO_ADDR
// end ;
10404: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10405: LD_EXP 15
10409: PUSH
10410: LD_EXP 22
10414: AND
10415: IFFALSE 10617
10417: GO 10419
10419: DISABLE
10420: LD_INT 0
10422: PPUSH
10423: PPUSH
10424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10425: LD_ADDR_VAR 0 3
10429: PUSH
10430: LD_INT 81
10432: PUSH
10433: LD_OWVAR 2
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 21
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PPUSH
10456: CALL_OW 69
10460: ST_TO_ADDR
// if not tmp then
10461: LD_VAR 0 3
10465: NOT
10466: IFFALSE 10470
// exit ;
10468: GO 10617
// if tmp > 5 then
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 5
10477: GREATER
10478: IFFALSE 10490
// k := 5 else
10480: LD_ADDR_VAR 0 2
10484: PUSH
10485: LD_INT 5
10487: ST_TO_ADDR
10488: GO 10500
// k := tmp ;
10490: LD_ADDR_VAR 0 2
10494: PUSH
10495: LD_VAR 0 3
10499: ST_TO_ADDR
// for i := 1 to k do
10500: LD_ADDR_VAR 0 1
10504: PUSH
10505: DOUBLE
10506: LD_INT 1
10508: DEC
10509: ST_TO_ADDR
10510: LD_VAR 0 2
10514: PUSH
10515: FOR_TO
10516: IFFALSE 10615
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10518: LD_VAR 0 3
10522: PUSH
10523: LD_VAR 0 1
10527: ARRAY
10528: PPUSH
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 4
10536: MOD
10537: PUSH
10538: LD_INT 1
10540: PLUS
10541: PPUSH
10542: CALL_OW 259
10546: PUSH
10547: LD_INT 10
10549: LESS
10550: IFFALSE 10613
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10552: LD_VAR 0 3
10556: PUSH
10557: LD_VAR 0 1
10561: ARRAY
10562: PPUSH
10563: LD_VAR 0 1
10567: PUSH
10568: LD_INT 4
10570: MOD
10571: PUSH
10572: LD_INT 1
10574: PLUS
10575: PPUSH
10576: LD_VAR 0 3
10580: PUSH
10581: LD_VAR 0 1
10585: ARRAY
10586: PPUSH
10587: LD_VAR 0 1
10591: PUSH
10592: LD_INT 4
10594: MOD
10595: PUSH
10596: LD_INT 1
10598: PLUS
10599: PPUSH
10600: CALL_OW 259
10604: PUSH
10605: LD_INT 1
10607: PLUS
10608: PPUSH
10609: CALL_OW 237
10613: GO 10515
10615: POP
10616: POP
// end ;
10617: PPOPN 3
10619: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10620: LD_EXP 15
10624: PUSH
10625: LD_EXP 23
10629: AND
10630: IFFALSE 10650
10632: GO 10634
10634: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10635: LD_INT 4
10637: PPUSH
10638: LD_OWVAR 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 324
10650: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10651: LD_EXP 15
10655: PUSH
10656: LD_EXP 52
10660: AND
10661: IFFALSE 10681
10663: GO 10665
10665: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10666: LD_INT 19
10668: PPUSH
10669: LD_OWVAR 2
10673: PPUSH
10674: LD_INT 0
10676: PPUSH
10677: CALL_OW 324
10681: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10682: LD_EXP 15
10686: PUSH
10687: LD_EXP 24
10691: AND
10692: IFFALSE 10794
10694: GO 10696
10696: DISABLE
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
// begin enable ;
10701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_INT 22
10709: PUSH
10710: LD_OWVAR 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 34
10724: PUSH
10725: LD_INT 11
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 34
10734: PUSH
10735: LD_INT 30
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: ST_TO_ADDR
// if not tmp then
10756: LD_VAR 0 2
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10794
// for i in tmp do
10765: LD_ADDR_VAR 0 1
10769: PUSH
10770: LD_VAR 0 2
10774: PUSH
10775: FOR_IN
10776: IFFALSE 10792
// begin SetLives ( i , 0 ) ;
10778: LD_VAR 0 1
10782: PPUSH
10783: LD_INT 0
10785: PPUSH
10786: CALL_OW 234
// end ;
10790: GO 10775
10792: POP
10793: POP
// end ;
10794: PPOPN 2
10796: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10797: LD_EXP 15
10801: PUSH
10802: LD_EXP 25
10806: AND
10807: IFFALSE 10827
10809: GO 10811
10811: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10812: LD_INT 32
10814: PPUSH
10815: LD_OWVAR 2
10819: PPUSH
10820: LD_INT 0
10822: PPUSH
10823: CALL_OW 324
10827: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10828: LD_EXP 15
10832: PUSH
10833: LD_EXP 26
10837: AND
10838: IFFALSE 11019
10840: GO 10842
10842: DISABLE
10843: LD_INT 0
10845: PPUSH
10846: PPUSH
10847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_OWVAR 2
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 33
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PPUSH
10879: CALL_OW 69
10883: ST_TO_ADDR
// if not tmp then
10884: LD_VAR 0 2
10888: NOT
10889: IFFALSE 10893
// exit ;
10891: GO 11019
// side := 0 ;
10893: LD_ADDR_VAR 0 3
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// for i := 1 to 8 do
10901: LD_ADDR_VAR 0 1
10905: PUSH
10906: DOUBLE
10907: LD_INT 1
10909: DEC
10910: ST_TO_ADDR
10911: LD_INT 8
10913: PUSH
10914: FOR_TO
10915: IFFALSE 10963
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10917: LD_OWVAR 2
10921: PUSH
10922: LD_VAR 0 1
10926: NONEQUAL
10927: PUSH
10928: LD_OWVAR 2
10932: PPUSH
10933: LD_VAR 0 1
10937: PPUSH
10938: CALL_OW 81
10942: PUSH
10943: LD_INT 2
10945: EQUAL
10946: AND
10947: IFFALSE 10961
// begin side := i ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_VAR 0 1
10958: ST_TO_ADDR
// break ;
10959: GO 10963
// end ;
10961: GO 10914
10963: POP
10964: POP
// if not side then
10965: LD_VAR 0 3
10969: NOT
10970: IFFALSE 10974
// exit ;
10972: GO 11019
// for i := 1 to tmp do
10974: LD_ADDR_VAR 0 1
10978: PUSH
10979: DOUBLE
10980: LD_INT 1
10982: DEC
10983: ST_TO_ADDR
10984: LD_VAR 0 2
10988: PUSH
10989: FOR_TO
10990: IFFALSE 11017
// if Prob ( 60 ) then
10992: LD_INT 60
10994: PPUSH
10995: CALL_OW 13
10999: IFFALSE 11015
// SetSide ( i , side ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_VAR 0 3
11010: PPUSH
11011: CALL_OW 235
11015: GO 10989
11017: POP
11018: POP
// end ;
11019: PPOPN 3
11021: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11022: LD_EXP 15
11026: PUSH
11027: LD_EXP 28
11031: AND
11032: IFFALSE 11151
11034: GO 11036
11036: DISABLE
11037: LD_INT 0
11039: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11040: LD_ADDR_VAR 0 1
11044: PUSH
11045: LD_INT 22
11047: PUSH
11048: LD_OWVAR 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 21
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 3
11069: PUSH
11070: LD_INT 23
11072: PUSH
11073: LD_INT 0
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 69
11093: PUSH
11094: FOR_IN
11095: IFFALSE 11149
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11097: LD_VAR 0 1
11101: PPUSH
11102: CALL_OW 257
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: LD_INT 3
11115: PUSH
11116: LD_INT 4
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: IN
11125: IFFALSE 11147
// SetClass ( un , rand ( 1 , 4 ) ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: LD_INT 4
11137: PPUSH
11138: CALL_OW 12
11142: PPUSH
11143: CALL_OW 336
11147: GO 11094
11149: POP
11150: POP
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11154: LD_EXP 15
11158: PUSH
11159: LD_EXP 27
11163: AND
11164: IFFALSE 11243
11166: GO 11168
11168: DISABLE
11169: LD_INT 0
11171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11172: LD_ADDR_VAR 0 1
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_OWVAR 2
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 21
11191: PUSH
11192: LD_INT 3
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: ST_TO_ADDR
// if not tmp then
11208: LD_VAR 0 1
11212: NOT
11213: IFFALSE 11217
// exit ;
11215: GO 11243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11217: LD_VAR 0 1
11221: PUSH
11222: LD_INT 1
11224: PPUSH
11225: LD_VAR 0 1
11229: PPUSH
11230: CALL_OW 12
11234: ARRAY
11235: PPUSH
11236: LD_INT 100
11238: PPUSH
11239: CALL_OW 234
// end ;
11243: PPOPN 1
11245: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11246: LD_EXP 15
11250: PUSH
11251: LD_EXP 29
11255: AND
11256: IFFALSE 11354
11258: GO 11260
11260: DISABLE
11261: LD_INT 0
11263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 22
11271: PUSH
11272: LD_OWVAR 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 21
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 69
11299: ST_TO_ADDR
// if not tmp then
11300: LD_VAR 0 1
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 11354
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11309: LD_VAR 0 1
11313: PUSH
11314: LD_INT 1
11316: PPUSH
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 12
11326: ARRAY
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: LD_INT 4
11333: PPUSH
11334: CALL_OW 12
11338: PPUSH
11339: LD_INT 3000
11341: PPUSH
11342: LD_INT 9000
11344: PPUSH
11345: CALL_OW 12
11349: PPUSH
11350: CALL_OW 492
// end ;
11354: PPOPN 1
11356: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11357: LD_EXP 15
11361: PUSH
11362: LD_EXP 30
11366: AND
11367: IFFALSE 11387
11369: GO 11371
11371: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11372: LD_INT 1
11374: PPUSH
11375: LD_OWVAR 2
11379: PPUSH
11380: LD_INT 0
11382: PPUSH
11383: CALL_OW 324
11387: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11388: LD_EXP 15
11392: PUSH
11393: LD_EXP 31
11397: AND
11398: IFFALSE 11481
11400: GO 11402
11402: DISABLE
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 22
11414: PUSH
11415: LD_OWVAR 2
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 21
11426: PUSH
11427: LD_INT 3
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if not tmp then
11443: LD_VAR 0 2
11447: NOT
11448: IFFALSE 11452
// exit ;
11450: GO 11481
// for i in tmp do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: LD_VAR 0 2
11461: PUSH
11462: FOR_IN
11463: IFFALSE 11479
// SetBLevel ( i , 10 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 10
11472: PPUSH
11473: CALL_OW 241
11477: GO 11462
11479: POP
11480: POP
// end ;
11481: PPOPN 2
11483: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11484: LD_EXP 15
11488: PUSH
11489: LD_EXP 32
11493: AND
11494: IFFALSE 11605
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
11502: PPUSH
11503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11504: LD_ADDR_VAR 0 3
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_OWVAR 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 25
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 69
11539: ST_TO_ADDR
// if not tmp then
11540: LD_VAR 0 3
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11605
// un := tmp [ rand ( 1 , tmp ) ] ;
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: LD_VAR 0 3
11558: PUSH
11559: LD_INT 1
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: CALL_OW 12
11571: ARRAY
11572: ST_TO_ADDR
// if Crawls ( un ) then
11573: LD_VAR 0 2
11577: PPUSH
11578: CALL_OW 318
11582: IFFALSE 11593
// ComWalk ( un ) ;
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11593: LD_VAR 0 2
11597: PPUSH
11598: LD_INT 5
11600: PPUSH
11601: CALL_OW 336
// end ;
11605: PPOPN 3
11607: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11608: LD_EXP 15
11612: PUSH
11613: LD_EXP 33
11617: AND
11618: PUSH
11619: LD_OWVAR 67
11623: PUSH
11624: LD_INT 3
11626: LESS
11627: AND
11628: IFFALSE 11647
11630: GO 11632
11632: DISABLE
// Difficulty := Difficulty + 1 ;
11633: LD_ADDR_OWVAR 67
11637: PUSH
11638: LD_OWVAR 67
11642: PUSH
11643: LD_INT 1
11645: PLUS
11646: ST_TO_ADDR
11647: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11648: LD_EXP 15
11652: PUSH
11653: LD_EXP 34
11657: AND
11658: IFFALSE 11761
11660: GO 11662
11662: DISABLE
11663: LD_INT 0
11665: PPUSH
// begin for i := 1 to 5 do
11666: LD_ADDR_VAR 0 1
11670: PUSH
11671: DOUBLE
11672: LD_INT 1
11674: DEC
11675: ST_TO_ADDR
11676: LD_INT 5
11678: PUSH
11679: FOR_TO
11680: IFFALSE 11759
// begin uc_nation := nation_nature ;
11682: LD_ADDR_OWVAR 21
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// uc_side := 0 ;
11690: LD_ADDR_OWVAR 20
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11698: LD_ADDR_OWVAR 29
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 12
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: ST_TO_ADDR
// hc_agressivity := 20 ;
11713: LD_ADDR_OWVAR 35
11717: PUSH
11718: LD_INT 20
11720: ST_TO_ADDR
// hc_class := class_tiger ;
11721: LD_ADDR_OWVAR 28
11725: PUSH
11726: LD_INT 14
11728: ST_TO_ADDR
// hc_gallery :=  ;
11729: LD_ADDR_OWVAR 33
11733: PUSH
11734: LD_STRING 
11736: ST_TO_ADDR
// hc_name :=  ;
11737: LD_ADDR_OWVAR 26
11741: PUSH
11742: LD_STRING 
11744: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11745: CALL_OW 44
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 51
// end ;
11757: GO 11679
11759: POP
11760: POP
// end ;
11761: PPOPN 1
11763: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11764: LD_EXP 15
11768: PUSH
11769: LD_EXP 35
11773: AND
11774: IFFALSE 11783
11776: GO 11778
11778: DISABLE
// StreamSibBomb ;
11779: CALL 11784 0 0
11783: END
// export function StreamSibBomb ; var i , x , y ; begin
11784: LD_INT 0
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
// result := false ;
11790: LD_ADDR_VAR 0 1
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// for i := 1 to 16 do
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_INT 16
11810: PUSH
11811: FOR_TO
11812: IFFALSE 12011
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11814: LD_ADDR_VAR 0 3
11818: PUSH
11819: LD_INT 10
11821: PUSH
11822: LD_INT 20
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 40
11830: PUSH
11831: LD_INT 50
11833: PUSH
11834: LD_INT 60
11836: PUSH
11837: LD_INT 70
11839: PUSH
11840: LD_INT 80
11842: PUSH
11843: LD_INT 90
11845: PUSH
11846: LD_INT 100
11848: PUSH
11849: LD_INT 110
11851: PUSH
11852: LD_INT 120
11854: PUSH
11855: LD_INT 130
11857: PUSH
11858: LD_INT 140
11860: PUSH
11861: LD_INT 150
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 15
11886: PPUSH
11887: CALL_OW 12
11891: ARRAY
11892: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11893: LD_ADDR_VAR 0 4
11897: PUSH
11898: LD_INT 10
11900: PUSH
11901: LD_INT 20
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 40
11909: PUSH
11910: LD_INT 50
11912: PUSH
11913: LD_INT 60
11915: PUSH
11916: LD_INT 70
11918: PUSH
11919: LD_INT 80
11921: PUSH
11922: LD_INT 90
11924: PUSH
11925: LD_INT 100
11927: PUSH
11928: LD_INT 110
11930: PUSH
11931: LD_INT 120
11933: PUSH
11934: LD_INT 130
11936: PUSH
11937: LD_INT 140
11939: PUSH
11940: LD_INT 150
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 1
11962: PPUSH
11963: LD_INT 15
11965: PPUSH
11966: CALL_OW 12
11970: ARRAY
11971: ST_TO_ADDR
// if ValidHex ( x , y ) then
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_VAR 0 4
11981: PPUSH
11982: CALL_OW 488
11986: IFFALSE 12009
// begin result := [ x , y ] ;
11988: LD_ADDR_VAR 0 1
11992: PUSH
11993: LD_VAR 0 3
11997: PUSH
11998: LD_VAR 0 4
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: ST_TO_ADDR
// break ;
12007: GO 12011
// end ; end ;
12009: GO 11811
12011: POP
12012: POP
// if result then
12013: LD_VAR 0 1
12017: IFFALSE 12077
// begin ToLua ( playSibBomb() ) ;
12019: LD_STRING playSibBomb()
12021: PPUSH
12022: CALL_OW 559
// wait ( 0 0$14 ) ;
12026: LD_INT 490
12028: PPUSH
12029: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12033: LD_VAR 0 1
12037: PUSH
12038: LD_INT 1
12040: ARRAY
12041: PPUSH
12042: LD_VAR 0 1
12046: PUSH
12047: LD_INT 2
12049: ARRAY
12050: PPUSH
12051: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12055: LD_VAR 0 1
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_VAR 0 1
12068: PUSH
12069: LD_INT 2
12071: ARRAY
12072: PPUSH
12073: CALL_OW 429
// end ; end ;
12077: LD_VAR 0 1
12081: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12082: LD_EXP 15
12086: PUSH
12087: LD_EXP 37
12091: AND
12092: IFFALSE 12104
12094: GO 12096
12096: DISABLE
// YouLost (  ) ;
12097: LD_STRING 
12099: PPUSH
12100: CALL_OW 104
12104: END
// every 0 0$1 trigger StreamModeActive and sFog do
12105: LD_EXP 15
12109: PUSH
12110: LD_EXP 36
12114: AND
12115: IFFALSE 12129
12117: GO 12119
12119: DISABLE
// FogOff ( your_side ) ;
12120: LD_OWVAR 2
12124: PPUSH
12125: CALL_OW 344
12129: END
// every 0 0$1 trigger StreamModeActive and sSun do
12130: LD_EXP 15
12134: PUSH
12135: LD_EXP 38
12139: AND
12140: IFFALSE 12168
12142: GO 12144
12144: DISABLE
// begin solar_recharge_percent := 0 ;
12145: LD_ADDR_OWVAR 79
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12153: LD_INT 10500
12155: PPUSH
12156: CALL_OW 67
// solar_recharge_percent := 100 ;
12160: LD_ADDR_OWVAR 79
12164: PUSH
12165: LD_INT 100
12167: ST_TO_ADDR
// end ;
12168: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12169: LD_EXP 15
12173: PUSH
12174: LD_EXP 39
12178: AND
12179: IFFALSE 12418
12181: GO 12183
12183: DISABLE
12184: LD_INT 0
12186: PPUSH
12187: PPUSH
12188: PPUSH
// begin tmp := [ ] ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: EMPTY
12195: ST_TO_ADDR
// for i := 1 to 6 do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: DOUBLE
12202: LD_INT 1
12204: DEC
12205: ST_TO_ADDR
12206: LD_INT 6
12208: PUSH
12209: FOR_TO
12210: IFFALSE 12315
// begin uc_nation := nation_nature ;
12212: LD_ADDR_OWVAR 21
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// uc_side := 0 ;
12220: LD_ADDR_OWVAR 20
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12228: LD_ADDR_OWVAR 29
12232: PUSH
12233: LD_INT 12
12235: PUSH
12236: LD_INT 12
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: ST_TO_ADDR
// hc_agressivity := 20 ;
12243: LD_ADDR_OWVAR 35
12247: PUSH
12248: LD_INT 20
12250: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12251: LD_ADDR_OWVAR 28
12255: PUSH
12256: LD_INT 17
12258: ST_TO_ADDR
// hc_gallery :=  ;
12259: LD_ADDR_OWVAR 33
12263: PUSH
12264: LD_STRING 
12266: ST_TO_ADDR
// hc_name :=  ;
12267: LD_ADDR_OWVAR 26
12271: PUSH
12272: LD_STRING 
12274: ST_TO_ADDR
// un := CreateHuman ;
12275: LD_ADDR_VAR 0 2
12279: PUSH
12280: CALL_OW 44
12284: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12285: LD_VAR 0 2
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: CALL_OW 51
// tmp := tmp ^ un ;
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: LD_VAR 0 3
12306: PUSH
12307: LD_VAR 0 2
12311: ADD
12312: ST_TO_ADDR
// end ;
12313: GO 12209
12315: POP
12316: POP
// repeat wait ( 0 0$1 ) ;
12317: LD_INT 35
12319: PPUSH
12320: CALL_OW 67
// for un in tmp do
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_VAR 0 3
12333: PUSH
12334: FOR_IN
12335: IFFALSE 12409
// begin if IsDead ( un ) then
12337: LD_VAR 0 2
12341: PPUSH
12342: CALL_OW 301
12346: IFFALSE 12366
// begin tmp := tmp diff un ;
12348: LD_ADDR_VAR 0 3
12352: PUSH
12353: LD_VAR 0 3
12357: PUSH
12358: LD_VAR 0 2
12362: DIFF
12363: ST_TO_ADDR
// continue ;
12364: GO 12334
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12366: LD_VAR 0 2
12370: PPUSH
12371: LD_INT 3
12373: PUSH
12374: LD_INT 22
12376: PUSH
12377: LD_INT 0
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PPUSH
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 74
12402: PPUSH
12403: CALL_OW 115
// end ;
12407: GO 12334
12409: POP
12410: POP
// until not tmp ;
12411: LD_VAR 0 3
12415: NOT
12416: IFFALSE 12317
// end ;
12418: PPOPN 3
12420: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12421: LD_EXP 15
12425: PUSH
12426: LD_EXP 40
12430: AND
12431: IFFALSE 12485
12433: GO 12435
12435: DISABLE
// begin ToLua ( displayTroll(); ) ;
12436: LD_STRING displayTroll();
12438: PPUSH
12439: CALL_OW 559
// wait ( 3 3$00 ) ;
12443: LD_INT 6300
12445: PPUSH
12446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12450: LD_STRING hideTroll();
12452: PPUSH
12453: CALL_OW 559
// wait ( 1 1$00 ) ;
12457: LD_INT 2100
12459: PPUSH
12460: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12464: LD_STRING displayTroll();
12466: PPUSH
12467: CALL_OW 559
// wait ( 1 1$00 ) ;
12471: LD_INT 2100
12473: PPUSH
12474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12478: LD_STRING hideTroll();
12480: PPUSH
12481: CALL_OW 559
// end ;
12485: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12486: LD_EXP 15
12490: PUSH
12491: LD_EXP 41
12495: AND
12496: IFFALSE 12559
12498: GO 12500
12500: DISABLE
12501: LD_INT 0
12503: PPUSH
// begin p := 0 ;
12504: LD_ADDR_VAR 0 1
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// repeat game_speed := 1 ;
12512: LD_ADDR_OWVAR 65
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12520: LD_INT 35
12522: PPUSH
12523: CALL_OW 67
// p := p + 1 ;
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_VAR 0 1
12536: PUSH
12537: LD_INT 1
12539: PLUS
12540: ST_TO_ADDR
// until p >= 60 ;
12541: LD_VAR 0 1
12545: PUSH
12546: LD_INT 60
12548: GREATEREQUAL
12549: IFFALSE 12512
// game_speed := 4 ;
12551: LD_ADDR_OWVAR 65
12555: PUSH
12556: LD_INT 4
12558: ST_TO_ADDR
// end ;
12559: PPOPN 1
12561: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12562: LD_EXP 15
12566: PUSH
12567: LD_EXP 42
12571: AND
12572: IFFALSE 12718
12574: GO 12576
12576: DISABLE
12577: LD_INT 0
12579: PPUSH
12580: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_INT 22
12588: PUSH
12589: LD_OWVAR 2
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: LD_INT 30
12603: PUSH
12604: LD_INT 0
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 30
12613: PUSH
12614: LD_INT 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: ST_TO_ADDR
// if not depot then
12635: LD_VAR 0 1
12639: NOT
12640: IFFALSE 12644
// exit ;
12642: GO 12718
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12644: LD_ADDR_VAR 0 2
12648: PUSH
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: PPUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: CALL_OW 12
12666: ARRAY
12667: PPUSH
12668: CALL_OW 274
12672: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12688: LD_VAR 0 2
12692: PPUSH
12693: LD_INT 2
12695: PPUSH
12696: LD_INT 0
12698: PPUSH
12699: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12703: LD_VAR 0 2
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 0
12713: PPUSH
12714: CALL_OW 277
// end ;
12718: PPOPN 2
12720: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12721: LD_EXP 15
12725: PUSH
12726: LD_EXP 43
12730: AND
12731: IFFALSE 12828
12733: GO 12735
12735: DISABLE
12736: LD_INT 0
12738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_OWVAR 2
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 21
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 23
12771: PUSH
12772: LD_INT 0
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 69
12792: ST_TO_ADDR
// if not tmp then
12793: LD_VAR 0 1
12797: NOT
12798: IFFALSE 12802
// exit ;
12800: GO 12828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12802: LD_VAR 0 1
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 1
12814: PPUSH
12815: CALL_OW 12
12819: ARRAY
12820: PPUSH
12821: LD_INT 200
12823: PPUSH
12824: CALL_OW 234
// end ;
12828: PPOPN 1
12830: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12831: LD_EXP 15
12835: PUSH
12836: LD_EXP 44
12840: AND
12841: IFFALSE 12920
12843: GO 12845
12845: DISABLE
12846: LD_INT 0
12848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_INT 22
12856: PUSH
12857: LD_OWVAR 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 21
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// if not tmp then
12885: LD_VAR 0 1
12889: NOT
12890: IFFALSE 12894
// exit ;
12892: GO 12920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12894: LD_VAR 0 1
12898: PUSH
12899: LD_INT 1
12901: PPUSH
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL_OW 12
12911: ARRAY
12912: PPUSH
12913: LD_INT 60
12915: PPUSH
12916: CALL_OW 234
// end ;
12920: PPOPN 1
12922: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12923: LD_EXP 15
12927: PUSH
12928: LD_EXP 45
12932: AND
12933: IFFALSE 13032
12935: GO 12937
12937: DISABLE
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
// begin enable ;
12942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12943: LD_ADDR_VAR 0 1
12947: PUSH
12948: LD_INT 22
12950: PUSH
12951: LD_OWVAR 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 61
12962: PUSH
12963: EMPTY
12964: LIST
12965: PUSH
12966: LD_INT 33
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 69
12985: ST_TO_ADDR
// if not tmp then
12986: LD_VAR 0 1
12990: NOT
12991: IFFALSE 12995
// exit ;
12993: GO 13032
// for i in tmp do
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: LD_VAR 0 1
13004: PUSH
13005: FOR_IN
13006: IFFALSE 13030
// if IsControledBy ( i ) then
13008: LD_VAR 0 2
13012: PPUSH
13013: CALL_OW 312
13017: IFFALSE 13028
// ComUnlink ( i ) ;
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 136
13028: GO 13005
13030: POP
13031: POP
// end ;
13032: PPOPN 2
13034: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13035: LD_EXP 15
13039: PUSH
13040: LD_EXP 46
13044: AND
13045: IFFALSE 13185
13047: GO 13049
13049: DISABLE
13050: LD_INT 0
13052: PPUSH
13053: PPUSH
// begin ToLua ( displayPowell(); ) ;
13054: LD_STRING displayPowell();
13056: PPUSH
13057: CALL_OW 559
// uc_side := 0 ;
13061: LD_ADDR_OWVAR 20
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// uc_nation := 2 ;
13069: LD_ADDR_OWVAR 21
13073: PUSH
13074: LD_INT 2
13076: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13077: LD_ADDR_OWVAR 37
13081: PUSH
13082: LD_INT 14
13084: ST_TO_ADDR
// vc_engine := engine_siberite ;
13085: LD_ADDR_OWVAR 39
13089: PUSH
13090: LD_INT 3
13092: ST_TO_ADDR
// vc_control := control_apeman ;
13093: LD_ADDR_OWVAR 38
13097: PUSH
13098: LD_INT 5
13100: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13101: LD_ADDR_OWVAR 40
13105: PUSH
13106: LD_INT 29
13108: ST_TO_ADDR
// un := CreateVehicle ;
13109: LD_ADDR_VAR 0 2
13113: PUSH
13114: CALL_OW 45
13118: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13131: LD_INT 35
13133: PPUSH
13134: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13138: LD_VAR 0 2
13142: PPUSH
13143: LD_INT 22
13145: PUSH
13146: LD_OWVAR 2
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: PPUSH
13160: LD_VAR 0 2
13164: PPUSH
13165: CALL_OW 74
13169: PPUSH
13170: CALL_OW 115
// until IsDead ( un ) ;
13174: LD_VAR 0 2
13178: PPUSH
13179: CALL_OW 301
13183: IFFALSE 13131
// end ;
13185: PPOPN 2
13187: END
// every 0 0$1 trigger StreamModeActive and sStu do
13188: LD_EXP 15
13192: PUSH
13193: LD_EXP 54
13197: AND
13198: IFFALSE 13214
13200: GO 13202
13202: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13203: LD_STRING displayStucuk();
13205: PPUSH
13206: CALL_OW 559
// ResetFog ;
13210: CALL_OW 335
// end ;
13214: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13215: LD_EXP 15
13219: PUSH
13220: LD_EXP 47
13224: AND
13225: IFFALSE 13366
13227: GO 13229
13229: DISABLE
13230: LD_INT 0
13232: PPUSH
13233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13234: LD_ADDR_VAR 0 2
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_OWVAR 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 21
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// if not tmp then
13270: LD_VAR 0 2
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13366
// un := tmp [ rand ( 1 , tmp ) ] ;
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_VAR 0 2
13288: PUSH
13289: LD_INT 1
13291: PPUSH
13292: LD_VAR 0 2
13296: PPUSH
13297: CALL_OW 12
13301: ARRAY
13302: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13303: LD_VAR 0 1
13307: PPUSH
13308: LD_INT 0
13310: PPUSH
13311: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13315: LD_VAR 0 1
13319: PPUSH
13320: LD_OWVAR 3
13324: PUSH
13325: LD_VAR 0 1
13329: DIFF
13330: PPUSH
13331: LD_VAR 0 1
13335: PPUSH
13336: CALL_OW 74
13340: PPUSH
13341: CALL_OW 115
// wait ( 0 0$20 ) ;
13345: LD_INT 700
13347: PPUSH
13348: CALL_OW 67
// SetSide ( un , your_side ) ;
13352: LD_VAR 0 1
13356: PPUSH
13357: LD_OWVAR 2
13361: PPUSH
13362: CALL_OW 235
// end ;
13366: PPOPN 2
13368: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13369: LD_EXP 15
13373: PUSH
13374: LD_EXP 48
13378: AND
13379: IFFALSE 13485
13381: GO 13383
13383: DISABLE
13384: LD_INT 0
13386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_OWVAR 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 0
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 1
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: ST_TO_ADDR
// if not depot then
13441: LD_VAR 0 1
13445: NOT
13446: IFFALSE 13450
// exit ;
13448: GO 13485
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13450: LD_VAR 0 1
13454: PUSH
13455: LD_INT 1
13457: ARRAY
13458: PPUSH
13459: CALL_OW 250
13463: PPUSH
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: CALL_OW 251
13477: PPUSH
13478: LD_INT 70
13480: PPUSH
13481: CALL_OW 495
// end ;
13485: PPOPN 1
13487: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13488: LD_EXP 15
13492: PUSH
13493: LD_EXP 49
13497: AND
13498: IFFALSE 13709
13500: GO 13502
13502: DISABLE
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
13507: PPUSH
13508: PPUSH
13509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13510: LD_ADDR_VAR 0 5
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_OWVAR 2
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 21
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PPUSH
13541: CALL_OW 69
13545: ST_TO_ADDR
// if not tmp then
13546: LD_VAR 0 5
13550: NOT
13551: IFFALSE 13555
// exit ;
13553: GO 13709
// for i in tmp do
13555: LD_ADDR_VAR 0 1
13559: PUSH
13560: LD_VAR 0 5
13564: PUSH
13565: FOR_IN
13566: IFFALSE 13707
// begin d := rand ( 0 , 5 ) ;
13568: LD_ADDR_VAR 0 4
13572: PUSH
13573: LD_INT 0
13575: PPUSH
13576: LD_INT 5
13578: PPUSH
13579: CALL_OW 12
13583: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13584: LD_ADDR_VAR 0 2
13588: PUSH
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 250
13598: PPUSH
13599: LD_VAR 0 4
13603: PPUSH
13604: LD_INT 3
13606: PPUSH
13607: LD_INT 12
13609: PPUSH
13610: CALL_OW 12
13614: PPUSH
13615: CALL_OW 272
13619: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13620: LD_ADDR_VAR 0 3
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 251
13634: PPUSH
13635: LD_VAR 0 4
13639: PPUSH
13640: LD_INT 3
13642: PPUSH
13643: LD_INT 12
13645: PPUSH
13646: CALL_OW 12
13650: PPUSH
13651: CALL_OW 273
13655: ST_TO_ADDR
// if ValidHex ( x , y ) then
13656: LD_VAR 0 2
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: CALL_OW 488
13670: IFFALSE 13705
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13672: LD_VAR 0 1
13676: PPUSH
13677: LD_VAR 0 2
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 3
13689: PPUSH
13690: LD_INT 6
13692: PPUSH
13693: CALL_OW 12
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 483
// end ;
13705: GO 13565
13707: POP
13708: POP
// end ;
13709: PPOPN 5
13711: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13712: LD_EXP 15
13716: PUSH
13717: LD_EXP 50
13721: AND
13722: IFFALSE 13816
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 32
13750: PUSH
13751: LD_INT 1
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 21
13760: PUSH
13761: LD_INT 2
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: ST_TO_ADDR
// if not tmp then
13778: LD_VAR 0 2
13782: NOT
13783: IFFALSE 13787
// exit ;
13785: GO 13816
// for i in tmp do
13787: LD_ADDR_VAR 0 1
13791: PUSH
13792: LD_VAR 0 2
13796: PUSH
13797: FOR_IN
13798: IFFALSE 13814
// SetFuel ( i , 0 ) ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 0
13807: PPUSH
13808: CALL_OW 240
13812: GO 13797
13814: POP
13815: POP
// end ;
13816: PPOPN 2
13818: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13819: LD_EXP 15
13823: PUSH
13824: LD_EXP 51
13828: AND
13829: IFFALSE 13895
13831: GO 13833
13833: DISABLE
13834: LD_INT 0
13836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13837: LD_ADDR_VAR 0 1
13841: PUSH
13842: LD_INT 22
13844: PUSH
13845: LD_OWVAR 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 30
13856: PUSH
13857: LD_INT 29
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 69
13872: ST_TO_ADDR
// if not tmp then
13873: LD_VAR 0 1
13877: NOT
13878: IFFALSE 13882
// exit ;
13880: GO 13895
// DestroyUnit ( tmp [ 1 ] ) ;
13882: LD_VAR 0 1
13886: PUSH
13887: LD_INT 1
13889: ARRAY
13890: PPUSH
13891: CALL_OW 65
// end ;
13895: PPOPN 1
13897: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13898: LD_EXP 15
13902: PUSH
13903: LD_EXP 53
13907: AND
13908: IFFALSE 14037
13910: GO 13912
13912: DISABLE
13913: LD_INT 0
13915: PPUSH
// begin uc_side := 0 ;
13916: LD_ADDR_OWVAR 20
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// uc_nation := nation_arabian ;
13924: LD_ADDR_OWVAR 21
13928: PUSH
13929: LD_INT 2
13931: ST_TO_ADDR
// hc_gallery :=  ;
13932: LD_ADDR_OWVAR 33
13936: PUSH
13937: LD_STRING 
13939: ST_TO_ADDR
// hc_name :=  ;
13940: LD_ADDR_OWVAR 26
13944: PUSH
13945: LD_STRING 
13947: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 11
13953: PPUSH
13954: LD_INT 10
13956: PPUSH
13957: CALL_OW 380
// un := CreateHuman ;
13961: LD_ADDR_VAR 0 1
13965: PUSH
13966: CALL_OW 44
13970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13971: LD_VAR 0 1
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13983: LD_INT 35
13985: PPUSH
13986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 22
13997: PUSH
13998: LD_OWVAR 2
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: PPUSH
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 74
14021: PPUSH
14022: CALL_OW 115
// until IsDead ( un ) ;
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 301
14035: IFFALSE 13983
// end ;
14037: PPOPN 1
14039: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14040: LD_EXP 15
14044: PUSH
14045: LD_EXP 55
14049: AND
14050: IFFALSE 14062
14052: GO 14054
14054: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14055: LD_STRING earthquake(getX(game), 0, 32)
14057: PPUSH
14058: CALL_OW 559
14062: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14063: LD_EXP 15
14067: PUSH
14068: LD_EXP 56
14072: AND
14073: IFFALSE 14164
14075: GO 14077
14077: DISABLE
14078: LD_INT 0
14080: PPUSH
// begin enable ;
14081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14082: LD_ADDR_VAR 0 1
14086: PUSH
14087: LD_INT 22
14089: PUSH
14090: LD_OWVAR 2
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 21
14101: PUSH
14102: LD_INT 2
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 33
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PPUSH
14124: CALL_OW 69
14128: ST_TO_ADDR
// if not tmp then
14129: LD_VAR 0 1
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 12
14155: ARRAY
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 234
// end ;
14164: PPOPN 1
14166: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14167: LD_EXP 15
14171: PUSH
14172: LD_EXP 57
14176: AND
14177: IFFALSE 14318
14179: GO 14181
14181: DISABLE
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
14186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14187: LD_ADDR_VAR 0 3
14191: PUSH
14192: LD_INT 22
14194: PUSH
14195: LD_OWVAR 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 25
14206: PUSH
14207: LD_INT 1
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: ST_TO_ADDR
// if not tmp then
14223: LD_VAR 0 3
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14318
// un := tmp [ rand ( 1 , tmp ) ] ;
14232: LD_ADDR_VAR 0 2
14236: PUSH
14237: LD_VAR 0 3
14241: PUSH
14242: LD_INT 1
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: CALL_OW 12
14254: ARRAY
14255: ST_TO_ADDR
// if Crawls ( un ) then
14256: LD_VAR 0 2
14260: PPUSH
14261: CALL_OW 318
14265: IFFALSE 14276
// ComWalk ( un ) ;
14267: LD_VAR 0 2
14271: PPUSH
14272: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_INT 9
14283: PPUSH
14284: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14288: LD_INT 28
14290: PPUSH
14291: LD_OWVAR 2
14295: PPUSH
14296: LD_INT 2
14298: PPUSH
14299: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14303: LD_INT 29
14305: PPUSH
14306: LD_OWVAR 2
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: CALL_OW 322
// end ;
14318: PPOPN 3
14320: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14321: LD_EXP 15
14325: PUSH
14326: LD_EXP 58
14330: AND
14331: IFFALSE 14442
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
14339: PPUSH
14340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14341: LD_ADDR_VAR 0 3
14345: PUSH
14346: LD_INT 22
14348: PUSH
14349: LD_OWVAR 2
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 25
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// if not tmp then
14377: LD_VAR 0 3
14381: NOT
14382: IFFALSE 14386
// exit ;
14384: GO 14442
// un := tmp [ rand ( 1 , tmp ) ] ;
14386: LD_ADDR_VAR 0 2
14390: PUSH
14391: LD_VAR 0 3
14395: PUSH
14396: LD_INT 1
14398: PPUSH
14399: LD_VAR 0 3
14403: PPUSH
14404: CALL_OW 12
14408: ARRAY
14409: ST_TO_ADDR
// if Crawls ( un ) then
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 318
14419: IFFALSE 14430
// ComWalk ( un ) ;
14421: LD_VAR 0 2
14425: PPUSH
14426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14430: LD_VAR 0 2
14434: PPUSH
14435: LD_INT 8
14437: PPUSH
14438: CALL_OW 336
// end ;
14442: PPOPN 3
14444: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14445: LD_EXP 15
14449: PUSH
14450: LD_EXP 59
14454: AND
14455: IFFALSE 14599
14457: GO 14459
14459: DISABLE
14460: LD_INT 0
14462: PPUSH
14463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14464: LD_ADDR_VAR 0 2
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_OWVAR 2
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 21
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 34
14496: PUSH
14497: LD_INT 12
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 34
14506: PUSH
14507: LD_INT 51
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 34
14516: PUSH
14517: LD_INT 32
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: ST_TO_ADDR
// if not tmp then
14540: LD_VAR 0 2
14544: NOT
14545: IFFALSE 14549
// exit ;
14547: GO 14599
// for i in tmp do
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: LD_VAR 0 2
14558: PUSH
14559: FOR_IN
14560: IFFALSE 14597
// if GetCargo ( i , mat_artifact ) = 0 then
14562: LD_VAR 0 1
14566: PPUSH
14567: LD_INT 4
14569: PPUSH
14570: CALL_OW 289
14574: PUSH
14575: LD_INT 0
14577: EQUAL
14578: IFFALSE 14595
// SetCargo ( i , mat_siberit , 100 ) ;
14580: LD_VAR 0 1
14584: PPUSH
14585: LD_INT 3
14587: PPUSH
14588: LD_INT 100
14590: PPUSH
14591: CALL_OW 290
14595: GO 14559
14597: POP
14598: POP
// end ;
14599: PPOPN 2
14601: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14602: LD_EXP 15
14606: PUSH
14607: LD_EXP 60
14611: AND
14612: IFFALSE 14795
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_OWVAR 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: ST_TO_ADDR
// if not tmp then
14643: LD_VAR 0 2
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14795
// for i := 1 to 2 do
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: DOUBLE
14658: LD_INT 1
14660: DEC
14661: ST_TO_ADDR
14662: LD_INT 2
14664: PUSH
14665: FOR_TO
14666: IFFALSE 14793
// begin uc_side := your_side ;
14668: LD_ADDR_OWVAR 20
14672: PUSH
14673: LD_OWVAR 2
14677: ST_TO_ADDR
// uc_nation := nation_american ;
14678: LD_ADDR_OWVAR 21
14682: PUSH
14683: LD_INT 1
14685: ST_TO_ADDR
// vc_chassis := us_morphling ;
14686: LD_ADDR_OWVAR 37
14690: PUSH
14691: LD_INT 5
14693: ST_TO_ADDR
// vc_engine := engine_siberite ;
14694: LD_ADDR_OWVAR 39
14698: PUSH
14699: LD_INT 3
14701: ST_TO_ADDR
// vc_control := control_computer ;
14702: LD_ADDR_OWVAR 38
14706: PUSH
14707: LD_INT 3
14709: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14710: LD_ADDR_OWVAR 40
14714: PUSH
14715: LD_INT 10
14717: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 1
14725: ARRAY
14726: PPUSH
14727: CALL_OW 310
14731: NOT
14732: IFFALSE 14779
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14734: CALL_OW 45
14738: PPUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PPUSH
14748: CALL_OW 250
14752: PPUSH
14753: LD_VAR 0 2
14757: PUSH
14758: LD_INT 1
14760: ARRAY
14761: PPUSH
14762: CALL_OW 251
14766: PPUSH
14767: LD_INT 12
14769: PPUSH
14770: LD_INT 1
14772: PPUSH
14773: CALL_OW 50
14777: GO 14791
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14779: CALL_OW 45
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: CALL_OW 51
// end ;
14791: GO 14665
14793: POP
14794: POP
// end ;
14795: PPOPN 2
14797: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14798: LD_EXP 15
14802: PUSH
14803: LD_EXP 61
14807: AND
14808: IFFALSE 15030
14810: GO 14812
14812: DISABLE
14813: LD_INT 0
14815: PPUSH
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
14820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14821: LD_ADDR_VAR 0 6
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_OWVAR 2
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 23
14853: PUSH
14854: LD_INT 0
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if not tmp then
14875: LD_VAR 0 6
14879: NOT
14880: IFFALSE 14884
// exit ;
14882: GO 15030
// s1 := rand ( 1 , 4 ) ;
14884: LD_ADDR_VAR 0 2
14888: PUSH
14889: LD_INT 1
14891: PPUSH
14892: LD_INT 4
14894: PPUSH
14895: CALL_OW 12
14899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: LD_VAR 0 6
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 259
14923: ST_TO_ADDR
// if s1 = 1 then
14924: LD_VAR 0 2
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 14952
// s2 := rand ( 2 , 4 ) else
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_INT 2
14941: PPUSH
14942: LD_INT 4
14944: PPUSH
14945: CALL_OW 12
14949: ST_TO_ADDR
14950: GO 14960
// s2 := 1 ;
14952: LD_ADDR_VAR 0 3
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14960: LD_ADDR_VAR 0 5
14964: PUSH
14965: LD_VAR 0 6
14969: PUSH
14970: LD_INT 1
14972: ARRAY
14973: PPUSH
14974: LD_VAR 0 3
14978: PPUSH
14979: CALL_OW 259
14983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14984: LD_VAR 0 6
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: LD_VAR 0 5
15002: PPUSH
15003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15007: LD_VAR 0 6
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_VAR 0 4
15025: PPUSH
15026: CALL_OW 237
// end ;
15030: PPOPN 6
15032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15033: LD_EXP 15
15037: PUSH
15038: LD_EXP 62
15042: AND
15043: IFFALSE 15122
15045: GO 15047
15047: DISABLE
15048: LD_INT 0
15050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15051: LD_ADDR_VAR 0 1
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_OWVAR 2
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 30
15070: PUSH
15071: LD_INT 3
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PPUSH
15082: CALL_OW 69
15086: ST_TO_ADDR
// if not tmp then
15087: LD_VAR 0 1
15091: NOT
15092: IFFALSE 15096
// exit ;
15094: GO 15122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15096: LD_VAR 0 1
15100: PUSH
15101: LD_INT 1
15103: PPUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: CALL_OW 12
15113: ARRAY
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 234
// end ;
15122: PPOPN 1
15124: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15125: LD_EXP 15
15129: PUSH
15130: LD_EXP 63
15134: AND
15135: IFFALSE 15247
15137: GO 15139
15139: DISABLE
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15144: LD_ADDR_VAR 0 2
15148: PUSH
15149: LD_INT 22
15151: PUSH
15152: LD_OWVAR 2
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 2
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 27
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: LD_INT 26
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 28
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PPUSH
15204: CALL_OW 69
15208: ST_TO_ADDR
// if not tmp then
15209: LD_VAR 0 2
15213: NOT
15214: IFFALSE 15218
// exit ;
15216: GO 15247
// for i in tmp do
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: LD_VAR 0 2
15227: PUSH
15228: FOR_IN
15229: IFFALSE 15245
// SetLives ( i , 1 ) ;
15231: LD_VAR 0 1
15235: PPUSH
15236: LD_INT 1
15238: PPUSH
15239: CALL_OW 234
15243: GO 15228
15245: POP
15246: POP
// end ;
15247: PPOPN 2
15249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15250: LD_EXP 15
15254: PUSH
15255: LD_EXP 64
15259: AND
15260: IFFALSE 15534
15262: GO 15264
15264: DISABLE
15265: LD_INT 0
15267: PPUSH
15268: PPUSH
15269: PPUSH
// begin i := rand ( 1 , 7 ) ;
15270: LD_ADDR_VAR 0 1
15274: PUSH
15275: LD_INT 1
15277: PPUSH
15278: LD_INT 7
15280: PPUSH
15281: CALL_OW 12
15285: ST_TO_ADDR
// case i of 1 :
15286: LD_VAR 0 1
15290: PUSH
15291: LD_INT 1
15293: DOUBLE
15294: EQUAL
15295: IFTRUE 15299
15297: GO 15309
15299: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15300: LD_STRING earthquake(getX(game), 0, 32)
15302: PPUSH
15303: CALL_OW 559
15307: GO 15534
15309: LD_INT 2
15311: DOUBLE
15312: EQUAL
15313: IFTRUE 15317
15315: GO 15331
15317: POP
// begin ToLua ( displayStucuk(); ) ;
15318: LD_STRING displayStucuk();
15320: PPUSH
15321: CALL_OW 559
// ResetFog ;
15325: CALL_OW 335
// end ; 3 :
15329: GO 15534
15331: LD_INT 3
15333: DOUBLE
15334: EQUAL
15335: IFTRUE 15339
15337: GO 15443
15339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15340: LD_ADDR_VAR 0 2
15344: PUSH
15345: LD_INT 22
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 25
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if not tmp then
15376: LD_VAR 0 2
15380: NOT
15381: IFFALSE 15385
// exit ;
15383: GO 15534
// un := tmp [ rand ( 1 , tmp ) ] ;
15385: LD_ADDR_VAR 0 3
15389: PUSH
15390: LD_VAR 0 2
15394: PUSH
15395: LD_INT 1
15397: PPUSH
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL_OW 12
15407: ARRAY
15408: ST_TO_ADDR
// if Crawls ( un ) then
15409: LD_VAR 0 3
15413: PPUSH
15414: CALL_OW 318
15418: IFFALSE 15429
// ComWalk ( un ) ;
15420: LD_VAR 0 3
15424: PPUSH
15425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_INT 8
15436: PPUSH
15437: CALL_OW 336
// end ; 4 :
15441: GO 15534
15443: LD_INT 4
15445: DOUBLE
15446: EQUAL
15447: IFTRUE 15451
15449: GO 15512
15451: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15452: LD_ADDR_VAR 0 2
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_OWVAR 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 30
15471: PUSH
15472: LD_INT 29
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: ST_TO_ADDR
// if not tmp then
15488: LD_VAR 0 2
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 15534
// DestroyUnit ( tmp [ 1 ] ) ;
15497: LD_VAR 0 2
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: PPUSH
15506: CALL_OW 65
// end ; 5 .. 7 :
15510: GO 15534
15512: LD_INT 5
15514: DOUBLE
15515: GREATEREQUAL
15516: IFFALSE 15524
15518: LD_INT 7
15520: DOUBLE
15521: LESSEQUAL
15522: IFTRUE 15526
15524: GO 15533
15526: POP
// StreamSibBomb ; end ;
15527: CALL 11784 0 0
15531: GO 15534
15533: POP
// end ;
15534: PPOPN 3
15536: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15537: LD_EXP 15
15541: PUSH
15542: LD_EXP 65
15546: AND
15547: IFFALSE 15703
15549: GO 15551
15551: DISABLE
15552: LD_INT 0
15554: PPUSH
15555: PPUSH
15556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 81
15564: PUSH
15565: LD_OWVAR 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 21
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 2
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15703
// p := 0 ;
15620: LD_ADDR_VAR 0 3
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15628: LD_INT 35
15630: PPUSH
15631: CALL_OW 67
// p := p + 1 ;
15635: LD_ADDR_VAR 0 3
15639: PUSH
15640: LD_VAR 0 3
15644: PUSH
15645: LD_INT 1
15647: PLUS
15648: ST_TO_ADDR
// for i in tmp do
15649: LD_ADDR_VAR 0 1
15653: PUSH
15654: LD_VAR 0 2
15658: PUSH
15659: FOR_IN
15660: IFFALSE 15691
// if GetLives ( i ) < 1000 then
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 256
15671: PUSH
15672: LD_INT 1000
15674: LESS
15675: IFFALSE 15689
// SetLives ( i , 1000 ) ;
15677: LD_VAR 0 1
15681: PPUSH
15682: LD_INT 1000
15684: PPUSH
15685: CALL_OW 234
15689: GO 15659
15691: POP
15692: POP
// until p > 20 ;
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 20
15700: GREATER
15701: IFFALSE 15628
// end ;
15703: PPOPN 3
15705: END
// every 0 0$1 trigger StreamModeActive and sTime do
15706: LD_EXP 15
15710: PUSH
15711: LD_EXP 66
15715: AND
15716: IFFALSE 15751
15718: GO 15720
15720: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15721: LD_INT 28
15723: PPUSH
15724: LD_OWVAR 2
15728: PPUSH
15729: LD_INT 2
15731: PPUSH
15732: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15736: LD_INT 30
15738: PPUSH
15739: LD_OWVAR 2
15743: PPUSH
15744: LD_INT 2
15746: PPUSH
15747: CALL_OW 322
// end ;
15751: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15752: LD_EXP 15
15756: PUSH
15757: LD_EXP 67
15761: AND
15762: IFFALSE 15883
15764: GO 15766
15766: DISABLE
15767: LD_INT 0
15769: PPUSH
15770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15771: LD_ADDR_VAR 0 2
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_OWVAR 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 21
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: LD_INT 23
15803: PUSH
15804: LD_INT 0
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 69
15824: ST_TO_ADDR
// if not tmp then
15825: LD_VAR 0 2
15829: NOT
15830: IFFALSE 15834
// exit ;
15832: GO 15883
// for i in tmp do
15834: LD_ADDR_VAR 0 1
15838: PUSH
15839: LD_VAR 0 2
15843: PUSH
15844: FOR_IN
15845: IFFALSE 15881
// begin if Crawls ( i ) then
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 318
15856: IFFALSE 15867
// ComWalk ( i ) ;
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 138
// SetClass ( i , 2 ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_INT 2
15874: PPUSH
15875: CALL_OW 336
// end ;
15879: GO 15844
15881: POP
15882: POP
// end ;
15883: PPOPN 2
15885: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15886: LD_EXP 15
15890: PUSH
15891: LD_EXP 68
15895: AND
15896: IFFALSE 16177
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
15905: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15906: LD_OWVAR 2
15910: PPUSH
15911: LD_INT 9
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15924: LD_INT 9
15926: PPUSH
15927: LD_OWVAR 2
15931: PPUSH
15932: CALL_OW 343
// uc_side := 9 ;
15936: LD_ADDR_OWVAR 20
15940: PUSH
15941: LD_INT 9
15943: ST_TO_ADDR
// uc_nation := 2 ;
15944: LD_ADDR_OWVAR 21
15948: PUSH
15949: LD_INT 2
15951: ST_TO_ADDR
// hc_name := Dark Warrior ;
15952: LD_ADDR_OWVAR 26
15956: PUSH
15957: LD_STRING Dark Warrior
15959: ST_TO_ADDR
// hc_gallery :=  ;
15960: LD_ADDR_OWVAR 33
15964: PUSH
15965: LD_STRING 
15967: ST_TO_ADDR
// hc_noskilllimit := true ;
15968: LD_ADDR_OWVAR 76
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15976: LD_ADDR_OWVAR 31
15980: PUSH
15981: LD_INT 30
15983: PUSH
15984: LD_INT 30
15986: PUSH
15987: LD_INT 30
15989: PUSH
15990: LD_INT 30
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// un := CreateHuman ;
15999: LD_ADDR_VAR 0 3
16003: PUSH
16004: CALL_OW 44
16008: ST_TO_ADDR
// hc_noskilllimit := false ;
16009: LD_ADDR_OWVAR 76
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 51
// p := 0 ;
16029: LD_ADDR_VAR 0 2
16033: PUSH
16034: LD_INT 0
16036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16037: LD_INT 35
16039: PPUSH
16040: CALL_OW 67
// p := p + 1 ;
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_VAR 0 2
16053: PUSH
16054: LD_INT 1
16056: PLUS
16057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16058: LD_VAR 0 3
16062: PPUSH
16063: CALL_OW 256
16067: PUSH
16068: LD_INT 1000
16070: LESS
16071: IFFALSE 16085
// SetLives ( un , 1000 ) ;
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_INT 1000
16080: PPUSH
16081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 81
16092: PUSH
16093: LD_OWVAR 2
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 91
16104: PUSH
16105: LD_VAR 0 3
16109: PUSH
16110: LD_INT 30
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: CALL_OW 74
16136: PPUSH
16137: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16141: LD_VAR 0 2
16145: PUSH
16146: LD_INT 60
16148: GREATER
16149: PUSH
16150: LD_VAR 0 3
16154: PPUSH
16155: CALL_OW 301
16159: OR
16160: IFFALSE 16037
// if un then
16162: LD_VAR 0 3
16166: IFFALSE 16177
// RemoveUnit ( un ) ;
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL_OW 64
// end ;
16177: PPOPN 3
16179: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16180: LD_INT 0
16182: PPUSH
// case cmd of 301 :
16183: LD_VAR 0 1
16187: PUSH
16188: LD_INT 301
16190: DOUBLE
16191: EQUAL
16192: IFTRUE 16196
16194: GO 16228
16196: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16197: LD_VAR 0 6
16201: PPUSH
16202: LD_VAR 0 7
16206: PPUSH
16207: LD_VAR 0 8
16211: PPUSH
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_VAR 0 5
16221: PPUSH
16222: CALL 16587 0 5
16226: GO 16274
16228: LD_INT 302
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16273
16236: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; end ;
16237: LD_VAR 0 6
16241: PPUSH
16242: LD_VAR 0 7
16246: PPUSH
16247: LD_VAR 0 8
16251: PPUSH
16252: LD_VAR 0 9
16256: PPUSH
16257: LD_VAR 0 4
16261: PPUSH
16262: LD_VAR 0 5
16266: PPUSH
16267: CALL 16678 0 6
16271: GO 16274
16273: POP
// end ;
16274: LD_VAR 0 12
16278: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16285: LD_ADDR_VAR 0 4
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 30
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PPUSH
16334: CALL_OW 69
16338: ST_TO_ADDR
// if not tmp then
16339: LD_VAR 0 4
16343: NOT
16344: IFFALSE 16348
// exit ;
16346: GO 16407
// for i in tmp do
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: LD_VAR 0 4
16357: PUSH
16358: FOR_IN
16359: IFFALSE 16405
// for j = 1 to 3 do
16361: LD_ADDR_VAR 0 3
16365: PUSH
16366: DOUBLE
16367: LD_INT 1
16369: DEC
16370: ST_TO_ADDR
16371: LD_INT 3
16373: PUSH
16374: FOR_TO
16375: IFFALSE 16401
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 274
16386: PPUSH
16387: LD_VAR 0 3
16391: PPUSH
16392: LD_INT 99999
16394: PPUSH
16395: CALL_OW 277
16399: GO 16374
16401: POP
16402: POP
16403: GO 16358
16405: POP
16406: POP
// end ;
16407: LD_VAR 0 1
16411: RET
// export function hHackSetLevel10 ; var i , j ; begin
16412: LD_INT 0
16414: PPUSH
16415: PPUSH
16416: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: LD_INT 21
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16490
// if IsSelected ( i ) then
16440: LD_VAR 0 2
16444: PPUSH
16445: CALL_OW 306
16449: IFFALSE 16488
// begin for j := 1 to 4 do
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: DOUBLE
16457: LD_INT 1
16459: DEC
16460: ST_TO_ADDR
16461: LD_INT 4
16463: PUSH
16464: FOR_TO
16465: IFFALSE 16486
// SetSkill ( i , j , 10 ) ;
16467: LD_VAR 0 2
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: LD_INT 10
16479: PPUSH
16480: CALL_OW 237
16484: GO 16464
16486: POP
16487: POP
// end ;
16488: GO 16437
16490: POP
16491: POP
// end ;
16492: LD_VAR 0 1
16496: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_OWVAR 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: PUSH
16538: FOR_IN
16539: IFFALSE 16580
// begin for j := 1 to 4 do
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: DOUBLE
16547: LD_INT 1
16549: DEC
16550: ST_TO_ADDR
16551: LD_INT 4
16553: PUSH
16554: FOR_TO
16555: IFFALSE 16576
// SetSkill ( i , j , 10 ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_INT 10
16569: PPUSH
16570: CALL_OW 237
16574: GO 16554
16576: POP
16577: POP
// end ;
16578: GO 16538
16580: POP
16581: POP
// end ;
16582: LD_VAR 0 1
16586: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16587: LD_INT 0
16589: PPUSH
// uc_side := your_side ;
16590: LD_ADDR_OWVAR 20
16594: PUSH
16595: LD_OWVAR 2
16599: ST_TO_ADDR
// uc_nation := nation ;
16600: LD_ADDR_OWVAR 21
16604: PUSH
16605: LD_VAR 0 1
16609: ST_TO_ADDR
// InitHc ;
16610: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16614: LD_INT 0
16616: PPUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16631: LD_VAR 0 4
16635: PPUSH
16636: LD_VAR 0 5
16640: PPUSH
16641: CALL_OW 428
16645: PUSH
16646: LD_INT 0
16648: EQUAL
16649: IFFALSE 16673
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16651: CALL_OW 44
16655: PPUSH
16656: LD_VAR 0 4
16660: PPUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 48
// end ;
16673: LD_VAR 0 6
16677: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16678: LD_INT 0
16680: PPUSH
16681: PPUSH
// uc_side := your_side ;
16682: LD_ADDR_OWVAR 20
16686: PUSH
16687: LD_OWVAR 2
16691: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16692: LD_VAR 0 1
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 3
16705: PUSH
16706: LD_INT 4
16708: PUSH
16709: LD_INT 5
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: IN
16719: IFFALSE 16731
// uc_nation := nation_american else
16721: LD_ADDR_OWVAR 21
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
16729: GO 16774
// if chassis in [ 11 , 12 , 13 , 14 ] then
16731: LD_VAR 0 1
16735: PUSH
16736: LD_INT 11
16738: PUSH
16739: LD_INT 12
16741: PUSH
16742: LD_INT 13
16744: PUSH
16745: LD_INT 14
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: IN
16754: IFFALSE 16766
// uc_nation := nation_arabian else
16756: LD_ADDR_OWVAR 21
16760: PUSH
16761: LD_INT 2
16763: ST_TO_ADDR
16764: GO 16774
// uc_nation := nation_russian ;
16766: LD_ADDR_OWVAR 21
16770: PUSH
16771: LD_INT 3
16773: ST_TO_ADDR
// vc_chassis := chassis ;
16774: LD_ADDR_OWVAR 37
16778: PUSH
16779: LD_VAR 0 1
16783: ST_TO_ADDR
// vc_engine := engine ;
16784: LD_ADDR_OWVAR 39
16788: PUSH
16789: LD_VAR 0 2
16793: ST_TO_ADDR
// vc_control := control ;
16794: LD_ADDR_OWVAR 38
16798: PUSH
16799: LD_VAR 0 3
16803: ST_TO_ADDR
// vc_weapon := weapon ;
16804: LD_ADDR_OWVAR 40
16808: PUSH
16809: LD_VAR 0 4
16813: ST_TO_ADDR
// un := CreateVehicle ;
16814: LD_ADDR_VAR 0 8
16818: PUSH
16819: CALL_OW 45
16823: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16824: LD_VAR 0 8
16828: PPUSH
16829: LD_INT 0
16831: PPUSH
16832: LD_INT 5
16834: PPUSH
16835: CALL_OW 12
16839: PPUSH
16840: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16844: LD_VAR 0 8
16848: PPUSH
16849: LD_VAR 0 5
16853: PPUSH
16854: LD_VAR 0 6
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 48
// end ;
16866: LD_VAR 0 7
16870: RET
// export hInvincible ; every 1 do
16871: GO 16873
16873: DISABLE
// hInvincible := [ ] ;
16874: LD_ADDR_EXP 69
16878: PUSH
16879: EMPTY
16880: ST_TO_ADDR
16881: END
// every 10 do var i ;
16882: GO 16884
16884: DISABLE
16885: LD_INT 0
16887: PPUSH
// begin enable ;
16888: ENABLE
// if not hInvincible then
16889: LD_EXP 69
16893: NOT
16894: IFFALSE 16898
// exit ;
16896: GO 16942
// for i in hInvincible do
16898: LD_ADDR_VAR 0 1
16902: PUSH
16903: LD_EXP 69
16907: PUSH
16908: FOR_IN
16909: IFFALSE 16940
// if GetLives ( i ) < 1000 then
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 256
16920: PUSH
16921: LD_INT 1000
16923: LESS
16924: IFFALSE 16938
// SetLives ( i , 1000 ) ;
16926: LD_VAR 0 1
16930: PPUSH
16931: LD_INT 1000
16933: PPUSH
16934: CALL_OW 234
16938: GO 16908
16940: POP
16941: POP
// end ;
16942: PPOPN 1
16944: END
// export function hHackInvincible ; var i ; begin
16945: LD_INT 0
16947: PPUSH
16948: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16949: LD_ADDR_VAR 0 2
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: LD_INT 21
16959: PUSH
16960: LD_INT 1
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 21
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: PPUSH
16982: CALL_OW 69
16986: PUSH
16987: FOR_IN
16988: IFFALSE 17049
// if IsSelected ( i ) then
16990: LD_VAR 0 2
16994: PPUSH
16995: CALL_OW 306
16999: IFFALSE 17047
// begin if i in hInvincible then
17001: LD_VAR 0 2
17005: PUSH
17006: LD_EXP 69
17010: IN
17011: IFFALSE 17031
// hInvincible := hInvincible diff i else
17013: LD_ADDR_EXP 69
17017: PUSH
17018: LD_EXP 69
17022: PUSH
17023: LD_VAR 0 2
17027: DIFF
17028: ST_TO_ADDR
17029: GO 17047
// hInvincible := hInvincible union i ;
17031: LD_ADDR_EXP 69
17035: PUSH
17036: LD_EXP 69
17040: PUSH
17041: LD_VAR 0 2
17045: UNION
17046: ST_TO_ADDR
// end ;
17047: GO 16987
17049: POP
17050: POP
// end ;
17051: LD_VAR 0 1
17055: RET
// export function hHackInvisible ; var i , j ; begin
17056: LD_INT 0
17058: PPUSH
17059: PPUSH
17060: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PUSH
17081: FOR_IN
17082: IFFALSE 17106
// if IsSelected ( i ) then
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL_OW 306
17093: IFFALSE 17104
// ComForceInvisible ( i ) ;
17095: LD_VAR 0 2
17099: PPUSH
17100: CALL_OW 496
17104: GO 17081
17106: POP
17107: POP
// end ;
17108: LD_VAR 0 1
17112: RET
// export function hHackChangeYourSide ; begin
17113: LD_INT 0
17115: PPUSH
// if your_side = 8 then
17116: LD_OWVAR 2
17120: PUSH
17121: LD_INT 8
17123: EQUAL
17124: IFFALSE 17136
// your_side := 0 else
17126: LD_ADDR_OWVAR 2
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
17134: GO 17150
// your_side := your_side + 1 ;
17136: LD_ADDR_OWVAR 2
17140: PUSH
17141: LD_OWVAR 2
17145: PUSH
17146: LD_INT 1
17148: PLUS
17149: ST_TO_ADDR
// end ;
17150: LD_VAR 0 1
17154: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17155: LD_INT 0
17157: PPUSH
17158: PPUSH
17159: PPUSH
// for i in all_units do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_OWVAR 3
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17249
// if IsSelected ( i ) then
17173: LD_VAR 0 2
17177: PPUSH
17178: CALL_OW 306
17182: IFFALSE 17247
// begin j := GetSide ( i ) ;
17184: LD_ADDR_VAR 0 3
17188: PUSH
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 255
17198: ST_TO_ADDR
// if j = 8 then
17199: LD_VAR 0 3
17203: PUSH
17204: LD_INT 8
17206: EQUAL
17207: IFFALSE 17219
// j := 0 else
17209: LD_ADDR_VAR 0 3
17213: PUSH
17214: LD_INT 0
17216: ST_TO_ADDR
17217: GO 17233
// j := j + 1 ;
17219: LD_ADDR_VAR 0 3
17223: PUSH
17224: LD_VAR 0 3
17228: PUSH
17229: LD_INT 1
17231: PLUS
17232: ST_TO_ADDR
// SetSide ( i , j ) ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_VAR 0 3
17242: PPUSH
17243: CALL_OW 235
// end ;
17247: GO 17170
17249: POP
17250: POP
// end ;
17251: LD_VAR 0 1
17255: RET
// export function hHackFog ; begin
17256: LD_INT 0
17258: PPUSH
// FogOff ( true ) ;
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 344
// end ;
17266: LD_VAR 0 1
17270: RET
// export function hHackApeman ; begin
17271: LD_INT 0
17273: PPUSH
// uc_side := your_side ;
17274: LD_ADDR_OWVAR 20
17278: PUSH
17279: LD_OWVAR 2
17283: ST_TO_ADDR
// uc_nation := 0 ;
17284: LD_ADDR_OWVAR 21
17288: PUSH
17289: LD_INT 0
17291: ST_TO_ADDR
// hc_name :=  ;
17292: LD_ADDR_OWVAR 26
17296: PUSH
17297: LD_STRING 
17299: ST_TO_ADDR
// hc_gallery :=  ;
17300: LD_ADDR_OWVAR 33
17304: PUSH
17305: LD_STRING 
17307: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17308: LD_ADDR_OWVAR 31
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 0
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: ST_TO_ADDR
// hc_class := class_apeman ;
17331: LD_ADDR_OWVAR 28
17335: PUSH
17336: LD_INT 12
17338: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17339: CALL_OW 44
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 51
// end ;
17351: LD_VAR 0 1
17355: RET
// export function hHackBoom ; begin
17356: LD_INT 0
17358: PPUSH
// uc_side := your_side ;
17359: LD_ADDR_OWVAR 20
17363: PUSH
17364: LD_OWVAR 2
17368: ST_TO_ADDR
// uc_nation := 1 ;
17369: LD_ADDR_OWVAR 21
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// vc_chassis := us_morphling ;
17377: LD_ADDR_OWVAR 37
17381: PUSH
17382: LD_INT 5
17384: ST_TO_ADDR
// vc_engine := engine_siberite ;
17385: LD_ADDR_OWVAR 39
17389: PUSH
17390: LD_INT 3
17392: ST_TO_ADDR
// vc_control := control_computer ;
17393: LD_ADDR_OWVAR 38
17397: PUSH
17398: LD_INT 3
17400: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17401: LD_ADDR_OWVAR 40
17405: PUSH
17406: LD_INT 8
17408: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17409: CALL_OW 45
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 51
// end ; end_of_file
17421: LD_VAR 0 1
17425: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17426: LD_INT 0
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17432: LD_VAR 0 1
17436: PPUSH
17437: CALL_OW 264
17441: PUSH
17442: LD_EXP 80
17446: EQUAL
17447: IFFALSE 17519
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17449: LD_INT 68
17451: PPUSH
17452: LD_VAR 0 1
17456: PPUSH
17457: CALL_OW 255
17461: PPUSH
17462: CALL_OW 321
17466: PUSH
17467: LD_INT 2
17469: EQUAL
17470: IFFALSE 17482
// eff := 70 else
17472: LD_ADDR_VAR 0 4
17476: PUSH
17477: LD_INT 70
17479: ST_TO_ADDR
17480: GO 17490
// eff := 30 ;
17482: LD_ADDR_VAR 0 4
17486: PUSH
17487: LD_INT 30
17489: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 250
17499: PPUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 251
17509: PPUSH
17510: LD_VAR 0 4
17514: PPUSH
17515: CALL_OW 495
// end ; end ;
17519: LD_VAR 0 2
17523: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17524: LD_INT 0
17526: PPUSH
// end ;
17527: LD_VAR 0 4
17531: RET
// export function SOS_Command ( cmd ) ; begin
17532: LD_INT 0
17534: PPUSH
// end ;
17535: LD_VAR 0 2
17539: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17540: LD_INT 0
17542: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 254
17550: EQUAL
17551: PUSH
17552: LD_VAR 0 2
17556: PPUSH
17557: CALL_OW 264
17561: PUSH
17562: LD_EXP 78
17566: EQUAL
17567: AND
17568: PUSH
17569: LD_VAR 0 3
17573: PPUSH
17574: CALL_OW 263
17578: PUSH
17579: LD_INT 3
17581: EQUAL
17582: AND
17583: IFFALSE 17599
// HackDestroyVehicle ( unit , selectedUnit ) ;
17585: LD_VAR 0 2
17589: PPUSH
17590: LD_VAR 0 3
17594: PPUSH
17595: CALL 19108 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 255
17606: EQUAL
17607: PUSH
17608: LD_VAR 0 2
17612: PPUSH
17613: CALL_OW 264
17617: PUSH
17618: LD_INT 14
17620: PUSH
17621: LD_INT 53
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: IN
17628: AND
17629: PUSH
17630: LD_VAR 0 4
17634: PPUSH
17635: LD_VAR 0 5
17639: PPUSH
17640: CALL_OW 488
17644: AND
17645: IFFALSE 17669
// CutTreeXYR ( unit , x , y , 12 ) ;
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_VAR 0 4
17656: PPUSH
17657: LD_VAR 0 5
17661: PPUSH
17662: LD_INT 12
17664: PPUSH
17665: CALL 17674 0 4
// end ;
17669: LD_VAR 0 6
17673: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17685: LD_VAR 0 1
17689: NOT
17690: PUSH
17691: LD_VAR 0 2
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: CALL_OW 488
17705: NOT
17706: OR
17707: PUSH
17708: LD_VAR 0 4
17712: NOT
17713: OR
17714: IFFALSE 17718
// exit ;
17716: GO 18058
// list := [ ] ;
17718: LD_ADDR_VAR 0 13
17722: PUSH
17723: EMPTY
17724: ST_TO_ADDR
// if x - r < 0 then
17725: LD_VAR 0 2
17729: PUSH
17730: LD_VAR 0 4
17734: MINUS
17735: PUSH
17736: LD_INT 0
17738: LESS
17739: IFFALSE 17751
// min_x := 0 else
17741: LD_ADDR_VAR 0 7
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
17749: GO 17767
// min_x := x - r ;
17751: LD_ADDR_VAR 0 7
17755: PUSH
17756: LD_VAR 0 2
17760: PUSH
17761: LD_VAR 0 4
17765: MINUS
17766: ST_TO_ADDR
// if y - r < 0 then
17767: LD_VAR 0 3
17771: PUSH
17772: LD_VAR 0 4
17776: MINUS
17777: PUSH
17778: LD_INT 0
17780: LESS
17781: IFFALSE 17793
// min_y := 0 else
17783: LD_ADDR_VAR 0 8
17787: PUSH
17788: LD_INT 0
17790: ST_TO_ADDR
17791: GO 17809
// min_y := y - r ;
17793: LD_ADDR_VAR 0 8
17797: PUSH
17798: LD_VAR 0 3
17802: PUSH
17803: LD_VAR 0 4
17807: MINUS
17808: ST_TO_ADDR
// max_x := x + r ;
17809: LD_ADDR_VAR 0 9
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 4
17823: PLUS
17824: ST_TO_ADDR
// max_y := y + r ;
17825: LD_ADDR_VAR 0 10
17829: PUSH
17830: LD_VAR 0 3
17834: PUSH
17835: LD_VAR 0 4
17839: PLUS
17840: ST_TO_ADDR
// for _x = min_x to max_x do
17841: LD_ADDR_VAR 0 11
17845: PUSH
17846: DOUBLE
17847: LD_VAR 0 7
17851: DEC
17852: ST_TO_ADDR
17853: LD_VAR 0 9
17857: PUSH
17858: FOR_TO
17859: IFFALSE 17976
// for _y = min_y to max_y do
17861: LD_ADDR_VAR 0 12
17865: PUSH
17866: DOUBLE
17867: LD_VAR 0 8
17871: DEC
17872: ST_TO_ADDR
17873: LD_VAR 0 10
17877: PUSH
17878: FOR_TO
17879: IFFALSE 17972
// begin if not ValidHex ( _x , _y ) then
17881: LD_VAR 0 11
17885: PPUSH
17886: LD_VAR 0 12
17890: PPUSH
17891: CALL_OW 488
17895: NOT
17896: IFFALSE 17900
// continue ;
17898: GO 17878
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17900: LD_VAR 0 11
17904: PPUSH
17905: LD_VAR 0 12
17909: PPUSH
17910: CALL_OW 351
17914: PUSH
17915: LD_VAR 0 11
17919: PPUSH
17920: LD_VAR 0 12
17924: PPUSH
17925: CALL_OW 554
17929: AND
17930: IFFALSE 17970
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17932: LD_ADDR_VAR 0 13
17936: PUSH
17937: LD_VAR 0 13
17941: PPUSH
17942: LD_VAR 0 13
17946: PUSH
17947: LD_INT 1
17949: PLUS
17950: PPUSH
17951: LD_VAR 0 11
17955: PUSH
17956: LD_VAR 0 12
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 2
17969: ST_TO_ADDR
// end ;
17970: GO 17878
17972: POP
17973: POP
17974: GO 17858
17976: POP
17977: POP
// if not list then
17978: LD_VAR 0 13
17982: NOT
17983: IFFALSE 17987
// exit ;
17985: GO 18058
// for i in list do
17987: LD_ADDR_VAR 0 6
17991: PUSH
17992: LD_VAR 0 13
17996: PUSH
17997: FOR_IN
17998: IFFALSE 18056
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18000: LD_VAR 0 1
18004: PPUSH
18005: LD_STRING M
18007: PUSH
18008: LD_VAR 0 6
18012: PUSH
18013: LD_INT 1
18015: ARRAY
18016: PUSH
18017: LD_VAR 0 6
18021: PUSH
18022: LD_INT 2
18024: ARRAY
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: LD_INT 0
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: PPUSH
18050: CALL_OW 447
18054: GO 17997
18056: POP
18057: POP
// end ;
18058: LD_VAR 0 5
18062: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18063: LD_EXP 70
18067: NOT
18068: IFFALSE 18118
18070: GO 18072
18072: DISABLE
// begin initHack := true ;
18073: LD_ADDR_EXP 70
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// hackTanks := [ ] ;
18081: LD_ADDR_EXP 71
18085: PUSH
18086: EMPTY
18087: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18088: LD_ADDR_EXP 72
18092: PUSH
18093: EMPTY
18094: ST_TO_ADDR
// hackLimit := 3 ;
18095: LD_ADDR_EXP 73
18099: PUSH
18100: LD_INT 3
18102: ST_TO_ADDR
// hackDist := 12 ;
18103: LD_ADDR_EXP 74
18107: PUSH
18108: LD_INT 12
18110: ST_TO_ADDR
// hackCounter := [ ] ;
18111: LD_ADDR_EXP 75
18115: PUSH
18116: EMPTY
18117: ST_TO_ADDR
// end ;
18118: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18119: LD_EXP 70
18123: PUSH
18124: LD_INT 34
18126: PUSH
18127: LD_EXP 78
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PPUSH
18136: CALL_OW 69
18140: AND
18141: IFFALSE 18396
18143: GO 18145
18145: DISABLE
18146: LD_INT 0
18148: PPUSH
18149: PPUSH
// begin enable ;
18150: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18151: LD_ADDR_VAR 0 1
18155: PUSH
18156: LD_INT 34
18158: PUSH
18159: LD_EXP 78
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PUSH
18173: FOR_IN
18174: IFFALSE 18394
// begin if not i in hackTanks then
18176: LD_VAR 0 1
18180: PUSH
18181: LD_EXP 71
18185: IN
18186: NOT
18187: IFFALSE 18270
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18189: LD_ADDR_EXP 71
18193: PUSH
18194: LD_EXP 71
18198: PPUSH
18199: LD_EXP 71
18203: PUSH
18204: LD_INT 1
18206: PLUS
18207: PPUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL_OW 1
18217: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18218: LD_ADDR_EXP 72
18222: PUSH
18223: LD_EXP 72
18227: PPUSH
18228: LD_EXP 72
18232: PUSH
18233: LD_INT 1
18235: PLUS
18236: PPUSH
18237: EMPTY
18238: PPUSH
18239: CALL_OW 1
18243: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18244: LD_ADDR_EXP 75
18248: PUSH
18249: LD_EXP 75
18253: PPUSH
18254: LD_EXP 75
18258: PUSH
18259: LD_INT 1
18261: PLUS
18262: PPUSH
18263: EMPTY
18264: PPUSH
18265: CALL_OW 1
18269: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 302
18279: NOT
18280: IFFALSE 18293
// begin HackUnlinkAll ( i ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL 18399 0 1
// continue ;
18291: GO 18173
// end ; HackCheckCapturedStatus ( i ) ;
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL 18842 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18302: LD_ADDR_VAR 0 2
18306: PUSH
18307: LD_INT 81
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 255
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 33
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 91
18336: PUSH
18337: LD_VAR 0 1
18341: PUSH
18342: LD_EXP 74
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 50
18354: PUSH
18355: EMPTY
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 69
18368: ST_TO_ADDR
// if not tmp then
18369: LD_VAR 0 2
18373: NOT
18374: IFFALSE 18378
// continue ;
18376: GO 18173
// HackLink ( i , tmp ) ;
18378: LD_VAR 0 1
18382: PPUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL 18535 0 2
// end ;
18392: GO 18173
18394: POP
18395: POP
// end ;
18396: PPOPN 2
18398: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18399: LD_INT 0
18401: PPUSH
18402: PPUSH
18403: PPUSH
// if not hack in hackTanks then
18404: LD_VAR 0 1
18408: PUSH
18409: LD_EXP 71
18413: IN
18414: NOT
18415: IFFALSE 18419
// exit ;
18417: GO 18530
// index := GetElementIndex ( hackTanks , hack ) ;
18419: LD_ADDR_VAR 0 4
18423: PUSH
18424: LD_EXP 71
18428: PPUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL 24290 0 2
18438: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18439: LD_EXP 72
18443: PUSH
18444: LD_VAR 0 4
18448: ARRAY
18449: IFFALSE 18530
// begin for i in hackTanksCaptured [ index ] do
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: LD_EXP 72
18460: PUSH
18461: LD_VAR 0 4
18465: ARRAY
18466: PUSH
18467: FOR_IN
18468: IFFALSE 18494
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18470: LD_VAR 0 3
18474: PUSH
18475: LD_INT 1
18477: ARRAY
18478: PPUSH
18479: LD_VAR 0 3
18483: PUSH
18484: LD_INT 2
18486: ARRAY
18487: PPUSH
18488: CALL_OW 235
18492: GO 18467
18494: POP
18495: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18496: LD_ADDR_EXP 72
18500: PUSH
18501: LD_EXP 72
18505: PPUSH
18506: LD_VAR 0 4
18510: PPUSH
18511: EMPTY
18512: PPUSH
18513: CALL_OW 1
18517: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_INT 0
18525: PPUSH
18526: CALL_OW 505
// end ; end ;
18530: LD_VAR 0 2
18534: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
18539: PPUSH
// if not hack in hackTanks or not vehicles then
18540: LD_VAR 0 1
18544: PUSH
18545: LD_EXP 71
18549: IN
18550: NOT
18551: PUSH
18552: LD_VAR 0 2
18556: NOT
18557: OR
18558: IFFALSE 18562
// exit ;
18560: GO 18837
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18562: LD_ADDR_VAR 0 2
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: LD_VAR 0 2
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL 24940 0 4
18587: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18588: LD_ADDR_VAR 0 5
18592: PUSH
18593: LD_EXP 71
18597: PPUSH
18598: LD_VAR 0 1
18602: PPUSH
18603: CALL 24290 0 2
18607: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18608: LD_EXP 72
18612: PUSH
18613: LD_VAR 0 5
18617: ARRAY
18618: PUSH
18619: LD_EXP 73
18623: LESS
18624: IFFALSE 18813
// begin for i := 1 to vehicles do
18626: LD_ADDR_VAR 0 4
18630: PUSH
18631: DOUBLE
18632: LD_INT 1
18634: DEC
18635: ST_TO_ADDR
18636: LD_VAR 0 2
18640: PUSH
18641: FOR_TO
18642: IFFALSE 18811
// begin if hackTanksCaptured [ index ] = hackLimit then
18644: LD_EXP 72
18648: PUSH
18649: LD_VAR 0 5
18653: ARRAY
18654: PUSH
18655: LD_EXP 73
18659: EQUAL
18660: IFFALSE 18664
// break ;
18662: GO 18811
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18664: LD_ADDR_EXP 75
18668: PUSH
18669: LD_EXP 75
18673: PPUSH
18674: LD_VAR 0 5
18678: PPUSH
18679: LD_EXP 75
18683: PUSH
18684: LD_VAR 0 5
18688: ARRAY
18689: PUSH
18690: LD_INT 1
18692: PLUS
18693: PPUSH
18694: CALL_OW 1
18698: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18699: LD_ADDR_EXP 72
18703: PUSH
18704: LD_EXP 72
18708: PPUSH
18709: LD_VAR 0 5
18713: PUSH
18714: LD_EXP 72
18718: PUSH
18719: LD_VAR 0 5
18723: ARRAY
18724: PUSH
18725: LD_INT 1
18727: PLUS
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PPUSH
18733: LD_VAR 0 2
18737: PUSH
18738: LD_VAR 0 4
18742: ARRAY
18743: PUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_VAR 0 4
18753: ARRAY
18754: PPUSH
18755: CALL_OW 255
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL 24505 0 3
18768: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18769: LD_VAR 0 2
18773: PUSH
18774: LD_VAR 0 4
18778: ARRAY
18779: PPUSH
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 255
18789: PPUSH
18790: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18794: LD_VAR 0 2
18798: PUSH
18799: LD_VAR 0 4
18803: ARRAY
18804: PPUSH
18805: CALL_OW 141
// end ;
18809: GO 18641
18811: POP
18812: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_EXP 72
18822: PUSH
18823: LD_VAR 0 5
18827: ARRAY
18828: PUSH
18829: LD_INT 0
18831: PLUS
18832: PPUSH
18833: CALL_OW 505
// end ;
18837: LD_VAR 0 3
18841: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18842: LD_INT 0
18844: PPUSH
18845: PPUSH
18846: PPUSH
18847: PPUSH
// if not hack in hackTanks then
18848: LD_VAR 0 1
18852: PUSH
18853: LD_EXP 71
18857: IN
18858: NOT
18859: IFFALSE 18863
// exit ;
18861: GO 19103
// index := GetElementIndex ( hackTanks , hack ) ;
18863: LD_ADDR_VAR 0 4
18867: PUSH
18868: LD_EXP 71
18872: PPUSH
18873: LD_VAR 0 1
18877: PPUSH
18878: CALL 24290 0 2
18882: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18883: LD_ADDR_VAR 0 3
18887: PUSH
18888: DOUBLE
18889: LD_EXP 72
18893: PUSH
18894: LD_VAR 0 4
18898: ARRAY
18899: INC
18900: ST_TO_ADDR
18901: LD_INT 1
18903: PUSH
18904: FOR_DOWNTO
18905: IFFALSE 19077
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18907: LD_ADDR_VAR 0 5
18911: PUSH
18912: LD_EXP 72
18916: PUSH
18917: LD_VAR 0 4
18921: ARRAY
18922: PUSH
18923: LD_VAR 0 3
18927: ARRAY
18928: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18929: LD_VAR 0 5
18933: PUSH
18934: LD_INT 1
18936: ARRAY
18937: PPUSH
18938: CALL_OW 302
18942: NOT
18943: PUSH
18944: LD_VAR 0 5
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 255
18957: PUSH
18958: LD_VAR 0 1
18962: PPUSH
18963: CALL_OW 255
18967: NONEQUAL
18968: OR
18969: IFFALSE 19075
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18971: LD_VAR 0 5
18975: PUSH
18976: LD_INT 1
18978: ARRAY
18979: PPUSH
18980: CALL_OW 305
18984: PUSH
18985: LD_VAR 0 5
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: CALL_OW 255
18998: PUSH
18999: LD_VAR 0 1
19003: PPUSH
19004: CALL_OW 255
19008: EQUAL
19009: AND
19010: IFFALSE 19034
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19012: LD_VAR 0 5
19016: PUSH
19017: LD_INT 1
19019: ARRAY
19020: PPUSH
19021: LD_VAR 0 5
19025: PUSH
19026: LD_INT 2
19028: ARRAY
19029: PPUSH
19030: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19034: LD_ADDR_EXP 72
19038: PUSH
19039: LD_EXP 72
19043: PPUSH
19044: LD_VAR 0 4
19048: PPUSH
19049: LD_EXP 72
19053: PUSH
19054: LD_VAR 0 4
19058: ARRAY
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: CALL_OW 3
19069: PPUSH
19070: CALL_OW 1
19074: ST_TO_ADDR
// end ; end ;
19075: GO 18904
19077: POP
19078: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19079: LD_VAR 0 1
19083: PPUSH
19084: LD_EXP 72
19088: PUSH
19089: LD_VAR 0 4
19093: ARRAY
19094: PUSH
19095: LD_INT 0
19097: PLUS
19098: PPUSH
19099: CALL_OW 505
// end ;
19103: LD_VAR 0 2
19107: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
// if not hack in hackTanks then
19114: LD_VAR 0 1
19118: PUSH
19119: LD_EXP 71
19123: IN
19124: NOT
19125: IFFALSE 19129
// exit ;
19127: GO 19214
// index := GetElementIndex ( hackTanks , hack ) ;
19129: LD_ADDR_VAR 0 5
19133: PUSH
19134: LD_EXP 71
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL 24290 0 2
19148: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19149: LD_ADDR_VAR 0 4
19153: PUSH
19154: DOUBLE
19155: LD_INT 1
19157: DEC
19158: ST_TO_ADDR
19159: LD_EXP 72
19163: PUSH
19164: LD_VAR 0 5
19168: ARRAY
19169: PUSH
19170: FOR_TO
19171: IFFALSE 19212
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19173: LD_EXP 72
19177: PUSH
19178: LD_VAR 0 5
19182: ARRAY
19183: PUSH
19184: LD_VAR 0 4
19188: ARRAY
19189: PUSH
19190: LD_INT 1
19192: ARRAY
19193: PUSH
19194: LD_VAR 0 2
19198: EQUAL
19199: IFFALSE 19210
// KillUnit ( vehicle ) ;
19201: LD_VAR 0 2
19205: PPUSH
19206: CALL_OW 66
19210: GO 19170
19212: POP
19213: POP
// end ; end_of_file
19214: LD_VAR 0 3
19218: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin display_strings := [ cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ] ;
19219: LD_ADDR_OWVAR 47
19223: PUSH
19224: LD_VAR 0 1
19228: PUSH
19229: LD_VAR 0 2
19233: PUSH
19234: LD_VAR 0 3
19238: PUSH
19239: LD_VAR 0 4
19243: PUSH
19244: LD_VAR 0 5
19248: PUSH
19249: LD_VAR 0 6
19253: PUSH
19254: LD_VAR 0 7
19258: PUSH
19259: LD_VAR 0 8
19263: PUSH
19264: LD_VAR 0 9
19268: PUSH
19269: LD_VAR 0 10
19273: PUSH
19274: LD_VAR 0 11
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: ST_TO_ADDR
// case cmd of 200 .. 299 :
19292: LD_VAR 0 1
19296: PUSH
19297: LD_INT 200
19299: DOUBLE
19300: GREATEREQUAL
19301: IFFALSE 19309
19303: LD_INT 299
19305: DOUBLE
19306: LESSEQUAL
19307: IFTRUE 19311
19309: GO 19343
19311: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_VAR 0 2
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_VAR 0 4
19331: PPUSH
19332: LD_VAR 0 5
19336: PPUSH
19337: CALL 17540 0 5
19341: GO 19420
19343: LD_INT 300
19345: DOUBLE
19346: GREATEREQUAL
19347: IFFALSE 19355
19349: LD_INT 399
19351: DOUBLE
19352: LESSEQUAL
19353: IFTRUE 19357
19355: GO 19419
19357: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_VAR 0 2
19367: PPUSH
19368: LD_VAR 0 3
19372: PPUSH
19373: LD_VAR 0 4
19377: PPUSH
19378: LD_VAR 0 5
19382: PPUSH
19383: LD_VAR 0 6
19387: PPUSH
19388: LD_VAR 0 7
19392: PPUSH
19393: LD_VAR 0 8
19397: PPUSH
19398: LD_VAR 0 9
19402: PPUSH
19403: LD_VAR 0 10
19407: PPUSH
19408: LD_VAR 0 11
19412: PPUSH
19413: CALL 16180 0 11
19417: GO 19420
19419: POP
// end ; end_of_file
19420: PPOPN 11
19422: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19423: LD_INT 0
19425: PPUSH
// ar_crane := 88 ;
19426: LD_ADDR_EXP 82
19430: PUSH
19431: LD_INT 88
19433: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19434: LD_ADDR_EXP 77
19438: PUSH
19439: LD_INT 89
19441: ST_TO_ADDR
// us_hack := 99 ;
19442: LD_ADDR_EXP 78
19446: PUSH
19447: LD_INT 99
19449: ST_TO_ADDR
// us_artillery := 97 ;
19450: LD_ADDR_EXP 79
19454: PUSH
19455: LD_INT 97
19457: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19458: LD_ADDR_EXP 80
19462: PUSH
19463: LD_INT 91
19465: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19466: LD_ADDR_EXP 81
19470: PUSH
19471: LD_INT 92
19473: ST_TO_ADDR
// ru_radar := 98 ;
19474: LD_ADDR_EXP 76
19478: PUSH
19479: LD_INT 98
19481: ST_TO_ADDR
// tech_Artillery := 80 ;
19482: LD_ADDR_EXP 83
19486: PUSH
19487: LD_INT 80
19489: ST_TO_ADDR
// tech_RadMat := 81 ;
19490: LD_ADDR_EXP 84
19494: PUSH
19495: LD_INT 81
19497: ST_TO_ADDR
// tech_BasicTools := 82 ;
19498: LD_ADDR_EXP 85
19502: PUSH
19503: LD_INT 82
19505: ST_TO_ADDR
// tech_Cargo := 83 ;
19506: LD_ADDR_EXP 86
19510: PUSH
19511: LD_INT 83
19513: ST_TO_ADDR
// tech_Track := 84 ;
19514: LD_ADDR_EXP 87
19518: PUSH
19519: LD_INT 84
19521: ST_TO_ADDR
// tech_Crane := 85 ;
19522: LD_ADDR_EXP 88
19526: PUSH
19527: LD_INT 85
19529: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19530: LD_ADDR_EXP 89
19534: PUSH
19535: LD_INT 86
19537: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19538: LD_ADDR_EXP 90
19542: PUSH
19543: LD_INT 87
19545: ST_TO_ADDR
// end ;
19546: LD_VAR 0 1
19550: RET
// every 1 do
19551: GO 19553
19553: DISABLE
// InitGlobalVariables ; end_of_file
19554: CALL 19423 0 0
19558: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19559: LD_INT 0
19561: PPUSH
19562: PPUSH
// if exist_mode then
19563: LD_VAR 0 2
19567: IFFALSE 19592
// unit := CreateCharacter ( prefix & ident ) else
19569: LD_ADDR_VAR 0 5
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: LD_VAR 0 1
19583: STR
19584: PPUSH
19585: CALL_OW 34
19589: ST_TO_ADDR
19590: GO 19607
// unit := NewCharacter ( ident ) ;
19592: LD_ADDR_VAR 0 5
19596: PUSH
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 25
19606: ST_TO_ADDR
// result := unit ;
19607: LD_ADDR_VAR 0 4
19611: PUSH
19612: LD_VAR 0 5
19616: ST_TO_ADDR
// end ;
19617: LD_VAR 0 4
19621: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
// if not side or not nation then
19626: LD_VAR 0 1
19630: NOT
19631: PUSH
19632: LD_VAR 0 2
19636: NOT
19637: OR
19638: IFFALSE 19642
// exit ;
19640: GO 20406
// case nation of nation_american :
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19869
19655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19656: LD_ADDR_VAR 0 4
19660: PUSH
19661: LD_INT 35
19663: PUSH
19664: LD_INT 45
19666: PUSH
19667: LD_INT 46
19669: PUSH
19670: LD_INT 47
19672: PUSH
19673: LD_INT 82
19675: PUSH
19676: LD_INT 83
19678: PUSH
19679: LD_INT 84
19681: PUSH
19682: LD_INT 85
19684: PUSH
19685: LD_INT 86
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 6
19696: PUSH
19697: LD_INT 15
19699: PUSH
19700: LD_INT 16
19702: PUSH
19703: LD_INT 7
19705: PUSH
19706: LD_INT 12
19708: PUSH
19709: LD_INT 13
19711: PUSH
19712: LD_INT 10
19714: PUSH
19715: LD_INT 14
19717: PUSH
19718: LD_INT 20
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_INT 25
19729: PUSH
19730: LD_INT 32
19732: PUSH
19733: LD_INT 27
19735: PUSH
19736: LD_INT 36
19738: PUSH
19739: LD_INT 69
19741: PUSH
19742: LD_INT 39
19744: PUSH
19745: LD_INT 34
19747: PUSH
19748: LD_INT 40
19750: PUSH
19751: LD_INT 48
19753: PUSH
19754: LD_INT 49
19756: PUSH
19757: LD_INT 50
19759: PUSH
19760: LD_INT 51
19762: PUSH
19763: LD_INT 52
19765: PUSH
19766: LD_INT 53
19768: PUSH
19769: LD_INT 54
19771: PUSH
19772: LD_INT 55
19774: PUSH
19775: LD_INT 56
19777: PUSH
19778: LD_INT 57
19780: PUSH
19781: LD_INT 58
19783: PUSH
19784: LD_INT 59
19786: PUSH
19787: LD_INT 60
19789: PUSH
19790: LD_INT 61
19792: PUSH
19793: LD_INT 62
19795: PUSH
19796: LD_INT 80
19798: PUSH
19799: LD_INT 82
19801: PUSH
19802: LD_INT 83
19804: PUSH
19805: LD_INT 84
19807: PUSH
19808: LD_INT 85
19810: PUSH
19811: LD_INT 86
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: ST_TO_ADDR
19867: GO 20330
19869: LD_INT 2
19871: DOUBLE
19872: EQUAL
19873: IFTRUE 19877
19875: GO 20099
19877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19878: LD_ADDR_VAR 0 4
19882: PUSH
19883: LD_INT 35
19885: PUSH
19886: LD_INT 45
19888: PUSH
19889: LD_INT 46
19891: PUSH
19892: LD_INT 47
19894: PUSH
19895: LD_INT 82
19897: PUSH
19898: LD_INT 83
19900: PUSH
19901: LD_INT 84
19903: PUSH
19904: LD_INT 85
19906: PUSH
19907: LD_INT 87
19909: PUSH
19910: LD_INT 70
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 11
19918: PUSH
19919: LD_INT 3
19921: PUSH
19922: LD_INT 4
19924: PUSH
19925: LD_INT 5
19927: PUSH
19928: LD_INT 6
19930: PUSH
19931: LD_INT 15
19933: PUSH
19934: LD_INT 18
19936: PUSH
19937: LD_INT 7
19939: PUSH
19940: LD_INT 17
19942: PUSH
19943: LD_INT 8
19945: PUSH
19946: LD_INT 20
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 22
19954: PUSH
19955: LD_INT 72
19957: PUSH
19958: LD_INT 26
19960: PUSH
19961: LD_INT 69
19963: PUSH
19964: LD_INT 39
19966: PUSH
19967: LD_INT 40
19969: PUSH
19970: LD_INT 41
19972: PUSH
19973: LD_INT 42
19975: PUSH
19976: LD_INT 43
19978: PUSH
19979: LD_INT 48
19981: PUSH
19982: LD_INT 49
19984: PUSH
19985: LD_INT 50
19987: PUSH
19988: LD_INT 51
19990: PUSH
19991: LD_INT 52
19993: PUSH
19994: LD_INT 53
19996: PUSH
19997: LD_INT 54
19999: PUSH
20000: LD_INT 55
20002: PUSH
20003: LD_INT 56
20005: PUSH
20006: LD_INT 60
20008: PUSH
20009: LD_INT 61
20011: PUSH
20012: LD_INT 62
20014: PUSH
20015: LD_INT 66
20017: PUSH
20018: LD_INT 67
20020: PUSH
20021: LD_INT 68
20023: PUSH
20024: LD_INT 81
20026: PUSH
20027: LD_INT 82
20029: PUSH
20030: LD_INT 83
20032: PUSH
20033: LD_INT 84
20035: PUSH
20036: LD_INT 85
20038: PUSH
20039: LD_INT 87
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: ST_TO_ADDR
20097: GO 20330
20099: LD_INT 3
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20329
20107: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20108: LD_ADDR_VAR 0 4
20112: PUSH
20113: LD_INT 46
20115: PUSH
20116: LD_INT 47
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: LD_INT 82
20127: PUSH
20128: LD_INT 83
20130: PUSH
20131: LD_INT 84
20133: PUSH
20134: LD_INT 85
20136: PUSH
20137: LD_INT 86
20139: PUSH
20140: LD_INT 11
20142: PUSH
20143: LD_INT 9
20145: PUSH
20146: LD_INT 20
20148: PUSH
20149: LD_INT 19
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 24
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_INT 25
20163: PUSH
20164: LD_INT 28
20166: PUSH
20167: LD_INT 29
20169: PUSH
20170: LD_INT 30
20172: PUSH
20173: LD_INT 31
20175: PUSH
20176: LD_INT 37
20178: PUSH
20179: LD_INT 38
20181: PUSH
20182: LD_INT 32
20184: PUSH
20185: LD_INT 27
20187: PUSH
20188: LD_INT 33
20190: PUSH
20191: LD_INT 69
20193: PUSH
20194: LD_INT 39
20196: PUSH
20197: LD_INT 34
20199: PUSH
20200: LD_INT 40
20202: PUSH
20203: LD_INT 71
20205: PUSH
20206: LD_INT 23
20208: PUSH
20209: LD_INT 44
20211: PUSH
20212: LD_INT 48
20214: PUSH
20215: LD_INT 49
20217: PUSH
20218: LD_INT 50
20220: PUSH
20221: LD_INT 51
20223: PUSH
20224: LD_INT 52
20226: PUSH
20227: LD_INT 53
20229: PUSH
20230: LD_INT 54
20232: PUSH
20233: LD_INT 55
20235: PUSH
20236: LD_INT 56
20238: PUSH
20239: LD_INT 57
20241: PUSH
20242: LD_INT 58
20244: PUSH
20245: LD_INT 59
20247: PUSH
20248: LD_INT 63
20250: PUSH
20251: LD_INT 64
20253: PUSH
20254: LD_INT 65
20256: PUSH
20257: LD_INT 82
20259: PUSH
20260: LD_INT 83
20262: PUSH
20263: LD_INT 84
20265: PUSH
20266: LD_INT 85
20268: PUSH
20269: LD_INT 86
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
20327: GO 20330
20329: POP
// if state > - 1 and state < 3 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: GREATER
20339: PUSH
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 3
20347: LESS
20348: AND
20349: IFFALSE 20406
// for i in result do
20351: LD_ADDR_VAR 0 5
20355: PUSH
20356: LD_VAR 0 4
20360: PUSH
20361: FOR_IN
20362: IFFALSE 20404
// if GetTech ( i , side ) <> state then
20364: LD_VAR 0 5
20368: PPUSH
20369: LD_VAR 0 1
20373: PPUSH
20374: CALL_OW 321
20378: PUSH
20379: LD_VAR 0 3
20383: NONEQUAL
20384: IFFALSE 20402
// result := result diff i ;
20386: LD_ADDR_VAR 0 4
20390: PUSH
20391: LD_VAR 0 4
20395: PUSH
20396: LD_VAR 0 5
20400: DIFF
20401: ST_TO_ADDR
20402: GO 20361
20404: POP
20405: POP
// end ;
20406: LD_VAR 0 4
20410: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20411: LD_INT 0
20413: PPUSH
20414: PPUSH
20415: PPUSH
// result := true ;
20416: LD_ADDR_VAR 0 3
20420: PUSH
20421: LD_INT 1
20423: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20424: LD_ADDR_VAR 0 5
20428: PUSH
20429: LD_VAR 0 2
20433: PPUSH
20434: CALL_OW 480
20438: ST_TO_ADDR
// if not tmp then
20439: LD_VAR 0 5
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20497
// for i in tmp do
20448: LD_ADDR_VAR 0 4
20452: PUSH
20453: LD_VAR 0 5
20457: PUSH
20458: FOR_IN
20459: IFFALSE 20495
// if GetTech ( i , side ) <> state_researched then
20461: LD_VAR 0 4
20465: PPUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 321
20475: PUSH
20476: LD_INT 2
20478: NONEQUAL
20479: IFFALSE 20493
// begin result := false ;
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// exit ;
20489: POP
20490: POP
20491: GO 20497
// end ;
20493: GO 20458
20495: POP
20496: POP
// end ;
20497: LD_VAR 0 3
20501: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20517: LD_VAR 0 1
20521: NOT
20522: PUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 257
20532: PUSH
20533: LD_INT 9
20535: NONEQUAL
20536: OR
20537: IFFALSE 20541
// exit ;
20539: GO 21114
// side := GetSide ( unit ) ;
20541: LD_ADDR_VAR 0 9
20545: PUSH
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 255
20555: ST_TO_ADDR
// tech_space := tech_spacanom ;
20556: LD_ADDR_VAR 0 12
20560: PUSH
20561: LD_INT 29
20563: ST_TO_ADDR
// tech_time := tech_taurad ;
20564: LD_ADDR_VAR 0 13
20568: PUSH
20569: LD_INT 28
20571: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20572: LD_ADDR_VAR 0 11
20576: PUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 310
20586: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20587: LD_VAR 0 11
20591: PPUSH
20592: CALL_OW 247
20596: PUSH
20597: LD_INT 2
20599: EQUAL
20600: IFFALSE 20604
// exit ;
20602: GO 21114
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20604: LD_ADDR_VAR 0 8
20608: PUSH
20609: LD_INT 81
20611: PUSH
20612: LD_VAR 0 9
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 21
20626: PUSH
20627: LD_INT 3
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PPUSH
20642: CALL_OW 69
20646: ST_TO_ADDR
// if not tmp then
20647: LD_VAR 0 8
20651: NOT
20652: IFFALSE 20656
// exit ;
20654: GO 21114
// if in_unit then
20656: LD_VAR 0 11
20660: IFFALSE 20684
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20662: LD_ADDR_VAR 0 10
20666: PUSH
20667: LD_VAR 0 8
20671: PPUSH
20672: LD_VAR 0 11
20676: PPUSH
20677: CALL_OW 74
20681: ST_TO_ADDR
20682: GO 20704
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20684: LD_ADDR_VAR 0 10
20688: PUSH
20689: LD_VAR 0 8
20693: PPUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 74
20703: ST_TO_ADDR
// if not enemy then
20704: LD_VAR 0 10
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 21114
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20713: LD_VAR 0 11
20717: PUSH
20718: LD_VAR 0 11
20722: PPUSH
20723: LD_VAR 0 10
20727: PPUSH
20728: CALL_OW 296
20732: PUSH
20733: LD_INT 13
20735: GREATER
20736: AND
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: LD_VAR 0 10
20747: PPUSH
20748: CALL_OW 296
20752: PUSH
20753: LD_INT 12
20755: GREATER
20756: OR
20757: IFFALSE 20761
// exit ;
20759: GO 21114
// missile := [ 1 ] ;
20761: LD_ADDR_VAR 0 14
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: EMPTY
20770: LIST
20771: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20772: LD_VAR 0 9
20776: PPUSH
20777: LD_VAR 0 12
20781: PPUSH
20782: CALL_OW 325
20786: IFFALSE 20815
// missile := Insert ( missile , missile + 1 , 2 ) ;
20788: LD_ADDR_VAR 0 14
20792: PUSH
20793: LD_VAR 0 14
20797: PPUSH
20798: LD_VAR 0 14
20802: PUSH
20803: LD_INT 1
20805: PLUS
20806: PPUSH
20807: LD_INT 2
20809: PPUSH
20810: CALL_OW 2
20814: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20815: LD_VAR 0 9
20819: PPUSH
20820: LD_VAR 0 13
20824: PPUSH
20825: CALL_OW 325
20829: PUSH
20830: LD_VAR 0 10
20834: PPUSH
20835: CALL_OW 255
20839: PPUSH
20840: LD_VAR 0 13
20844: PPUSH
20845: CALL_OW 325
20849: NOT
20850: AND
20851: IFFALSE 20880
// missile := Insert ( missile , missile + 1 , 3 ) ;
20853: LD_ADDR_VAR 0 14
20857: PUSH
20858: LD_VAR 0 14
20862: PPUSH
20863: LD_VAR 0 14
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: PPUSH
20872: LD_INT 3
20874: PPUSH
20875: CALL_OW 2
20879: ST_TO_ADDR
// if missile < 2 then
20880: LD_VAR 0 14
20884: PUSH
20885: LD_INT 2
20887: LESS
20888: IFFALSE 20892
// exit ;
20890: GO 21114
// x := GetX ( enemy ) ;
20892: LD_ADDR_VAR 0 4
20896: PUSH
20897: LD_VAR 0 10
20901: PPUSH
20902: CALL_OW 250
20906: ST_TO_ADDR
// y := GetY ( enemy ) ;
20907: LD_ADDR_VAR 0 5
20911: PUSH
20912: LD_VAR 0 10
20916: PPUSH
20917: CALL_OW 251
20921: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20922: LD_ADDR_VAR 0 6
20926: PUSH
20927: LD_VAR 0 4
20931: PUSH
20932: LD_INT 1
20934: NEG
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 12
20943: PLUS
20944: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20945: LD_ADDR_VAR 0 7
20949: PUSH
20950: LD_VAR 0 5
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PPUSH
20959: LD_INT 1
20961: PPUSH
20962: CALL_OW 12
20966: PLUS
20967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20968: LD_VAR 0 6
20972: PPUSH
20973: LD_VAR 0 7
20977: PPUSH
20978: CALL_OW 488
20982: NOT
20983: IFFALSE 21005
// begin _x := x ;
20985: LD_ADDR_VAR 0 6
20989: PUSH
20990: LD_VAR 0 4
20994: ST_TO_ADDR
// _y := y ;
20995: LD_ADDR_VAR 0 7
20999: PUSH
21000: LD_VAR 0 5
21004: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21005: LD_ADDR_VAR 0 3
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_VAR 0 14
21017: PPUSH
21018: CALL_OW 12
21022: ST_TO_ADDR
// case i of 1 :
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 1
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21053
21036: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_VAR 0 10
21046: PPUSH
21047: CALL_OW 115
21051: GO 21114
21053: LD_INT 2
21055: DOUBLE
21056: EQUAL
21057: IFTRUE 21061
21059: GO 21083
21061: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21062: LD_VAR 0 1
21066: PPUSH
21067: LD_VAR 0 6
21071: PPUSH
21072: LD_VAR 0 7
21076: PPUSH
21077: CALL_OW 153
21081: GO 21114
21083: LD_INT 3
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21113
21091: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21092: LD_VAR 0 1
21096: PPUSH
21097: LD_VAR 0 6
21101: PPUSH
21102: LD_VAR 0 7
21106: PPUSH
21107: CALL_OW 154
21111: GO 21114
21113: POP
// end ;
21114: LD_VAR 0 2
21118: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21119: LD_INT 0
21121: PPUSH
21122: PPUSH
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
// if not unit or not building then
21127: LD_VAR 0 1
21131: NOT
21132: PUSH
21133: LD_VAR 0 2
21137: NOT
21138: OR
21139: IFFALSE 21143
// exit ;
21141: GO 21301
// x := GetX ( building ) ;
21143: LD_ADDR_VAR 0 5
21147: PUSH
21148: LD_VAR 0 2
21152: PPUSH
21153: CALL_OW 250
21157: ST_TO_ADDR
// y := GetY ( building ) ;
21158: LD_ADDR_VAR 0 6
21162: PUSH
21163: LD_VAR 0 2
21167: PPUSH
21168: CALL_OW 251
21172: ST_TO_ADDR
// for i = 0 to 5 do
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: DOUBLE
21179: LD_INT 0
21181: DEC
21182: ST_TO_ADDR
21183: LD_INT 5
21185: PUSH
21186: FOR_TO
21187: IFFALSE 21299
// begin _x := ShiftX ( x , i , 3 ) ;
21189: LD_ADDR_VAR 0 7
21193: PUSH
21194: LD_VAR 0 5
21198: PPUSH
21199: LD_VAR 0 4
21203: PPUSH
21204: LD_INT 3
21206: PPUSH
21207: CALL_OW 272
21211: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21212: LD_ADDR_VAR 0 8
21216: PUSH
21217: LD_VAR 0 6
21221: PPUSH
21222: LD_VAR 0 4
21226: PPUSH
21227: LD_INT 3
21229: PPUSH
21230: CALL_OW 273
21234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21235: LD_VAR 0 7
21239: PPUSH
21240: LD_VAR 0 8
21244: PPUSH
21245: CALL_OW 488
21249: NOT
21250: IFFALSE 21254
// continue ;
21252: GO 21186
// if HexInfo ( _x , _y ) = 0 then
21254: LD_VAR 0 7
21258: PPUSH
21259: LD_VAR 0 8
21263: PPUSH
21264: CALL_OW 428
21268: PUSH
21269: LD_INT 0
21271: EQUAL
21272: IFFALSE 21297
// begin ComMoveXY ( unit , _x , _y ) ;
21274: LD_VAR 0 1
21278: PPUSH
21279: LD_VAR 0 7
21283: PPUSH
21284: LD_VAR 0 8
21288: PPUSH
21289: CALL_OW 111
// exit ;
21293: POP
21294: POP
21295: GO 21301
// end ; end ;
21297: GO 21186
21299: POP
21300: POP
// end ;
21301: LD_VAR 0 3
21305: RET
// export function ScanBase ( side , base_area ) ; begin
21306: LD_INT 0
21308: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21309: LD_ADDR_VAR 0 3
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: LD_INT 81
21321: PUSH
21322: LD_VAR 0 1
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PPUSH
21331: CALL_OW 70
21335: ST_TO_ADDR
// end ;
21336: LD_VAR 0 3
21340: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21341: LD_INT 0
21343: PPUSH
21344: PPUSH
21345: PPUSH
21346: PPUSH
// result := false ;
21347: LD_ADDR_VAR 0 2
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
// side := GetSide ( unit ) ;
21355: LD_ADDR_VAR 0 3
21359: PUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 255
21369: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21370: LD_ADDR_VAR 0 4
21374: PUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL_OW 248
21384: ST_TO_ADDR
// case nat of 1 :
21385: LD_VAR 0 4
21389: PUSH
21390: LD_INT 1
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21409
21398: POP
// tech := tech_lassight ; 2 :
21399: LD_ADDR_VAR 0 5
21403: PUSH
21404: LD_INT 12
21406: ST_TO_ADDR
21407: GO 21448
21409: LD_INT 2
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21428
21417: POP
// tech := tech_mortar ; 3 :
21418: LD_ADDR_VAR 0 5
21422: PUSH
21423: LD_INT 41
21425: ST_TO_ADDR
21426: GO 21448
21428: LD_INT 3
21430: DOUBLE
21431: EQUAL
21432: IFTRUE 21436
21434: GO 21447
21436: POP
// tech := tech_bazooka ; end ;
21437: LD_ADDR_VAR 0 5
21441: PUSH
21442: LD_INT 44
21444: ST_TO_ADDR
21445: GO 21448
21447: POP
// if Researched ( side , tech ) then
21448: LD_VAR 0 3
21452: PPUSH
21453: LD_VAR 0 5
21457: PPUSH
21458: CALL_OW 325
21462: IFFALSE 21489
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_INT 5
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: LD_INT 9
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: LD_VAR 0 4
21487: ARRAY
21488: ST_TO_ADDR
// end ;
21489: LD_VAR 0 2
21493: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21494: LD_INT 0
21496: PPUSH
21497: PPUSH
21498: PPUSH
// if not mines then
21499: LD_VAR 0 2
21503: NOT
21504: IFFALSE 21508
// exit ;
21506: GO 21652
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21508: LD_ADDR_VAR 0 5
21512: PUSH
21513: LD_INT 81
21515: PUSH
21516: LD_VAR 0 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 3
21527: PUSH
21528: LD_INT 21
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PPUSH
21546: CALL_OW 69
21550: ST_TO_ADDR
// for i in mines do
21551: LD_ADDR_VAR 0 4
21555: PUSH
21556: LD_VAR 0 2
21560: PUSH
21561: FOR_IN
21562: IFFALSE 21650
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21564: LD_VAR 0 4
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: LD_VAR 0 4
21577: PUSH
21578: LD_INT 2
21580: ARRAY
21581: PPUSH
21582: CALL_OW 458
21586: NOT
21587: IFFALSE 21591
// continue ;
21589: GO 21561
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21591: LD_VAR 0 4
21595: PUSH
21596: LD_INT 1
21598: ARRAY
21599: PPUSH
21600: LD_VAR 0 4
21604: PUSH
21605: LD_INT 2
21607: ARRAY
21608: PPUSH
21609: CALL_OW 428
21613: PUSH
21614: LD_VAR 0 5
21618: IN
21619: IFFALSE 21648
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21621: LD_VAR 0 4
21625: PUSH
21626: LD_INT 1
21628: ARRAY
21629: PPUSH
21630: LD_VAR 0 4
21634: PUSH
21635: LD_INT 2
21637: ARRAY
21638: PPUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 456
// end ;
21648: GO 21561
21650: POP
21651: POP
// end ;
21652: LD_VAR 0 3
21656: RET
// export function Count ( array ) ; var i ; begin
21657: LD_INT 0
21659: PPUSH
21660: PPUSH
// result := 0 ;
21661: LD_ADDR_VAR 0 2
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// for i in array do
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_VAR 0 1
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21704
// if i then
21682: LD_VAR 0 3
21686: IFFALSE 21702
// result := result + 1 ;
21688: LD_ADDR_VAR 0 2
21692: PUSH
21693: LD_VAR 0 2
21697: PUSH
21698: LD_INT 1
21700: PLUS
21701: ST_TO_ADDR
21702: GO 21679
21704: POP
21705: POP
// end ;
21706: LD_VAR 0 2
21710: RET
// export function IsEmpty ( building ) ; begin
21711: LD_INT 0
21713: PPUSH
// if not building then
21714: LD_VAR 0 1
21718: NOT
21719: IFFALSE 21723
// exit ;
21721: GO 21766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21723: LD_ADDR_VAR 0 2
21727: PUSH
21728: LD_VAR 0 1
21732: PUSH
21733: LD_INT 22
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 255
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 58
21752: PUSH
21753: EMPTY
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: IN
21765: ST_TO_ADDR
// end ;
21766: LD_VAR 0 2
21770: RET
// export function IsNotFull ( building ) ; begin
21771: LD_INT 0
21773: PPUSH
// if not building then
21774: LD_VAR 0 1
21778: NOT
21779: IFFALSE 21783
// exit ;
21781: GO 21802
// result := UnitsInside ( building ) < 6 ;
21783: LD_ADDR_VAR 0 2
21787: PUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 313
21797: PUSH
21798: LD_INT 6
21800: LESS
21801: ST_TO_ADDR
// end ;
21802: LD_VAR 0 2
21806: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21807: LD_INT 0
21809: PPUSH
21810: PPUSH
21811: PPUSH
21812: PPUSH
// tmp := [ ] ;
21813: LD_ADDR_VAR 0 3
21817: PUSH
21818: EMPTY
21819: ST_TO_ADDR
// list := [ ] ;
21820: LD_ADDR_VAR 0 5
21824: PUSH
21825: EMPTY
21826: ST_TO_ADDR
// for i = 16 to 25 do
21827: LD_ADDR_VAR 0 4
21831: PUSH
21832: DOUBLE
21833: LD_INT 16
21835: DEC
21836: ST_TO_ADDR
21837: LD_INT 25
21839: PUSH
21840: FOR_TO
21841: IFFALSE 21914
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21843: LD_ADDR_VAR 0 3
21847: PUSH
21848: LD_VAR 0 3
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 255
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 91
21872: PUSH
21873: LD_VAR 0 1
21877: PUSH
21878: LD_INT 6
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 30
21888: PUSH
21889: LD_VAR 0 4
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: PPUSH
21906: CALL_OW 69
21910: ADD
21911: ST_TO_ADDR
21912: GO 21840
21914: POP
21915: POP
// for i = 1 to tmp do
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: DOUBLE
21922: LD_INT 1
21924: DEC
21925: ST_TO_ADDR
21926: LD_VAR 0 3
21930: PUSH
21931: FOR_TO
21932: IFFALSE 22020
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21934: LD_ADDR_VAR 0 5
21938: PUSH
21939: LD_VAR 0 5
21943: PUSH
21944: LD_VAR 0 3
21948: PUSH
21949: LD_VAR 0 4
21953: ARRAY
21954: PPUSH
21955: CALL_OW 266
21959: PUSH
21960: LD_VAR 0 3
21964: PUSH
21965: LD_VAR 0 4
21969: ARRAY
21970: PPUSH
21971: CALL_OW 250
21975: PUSH
21976: LD_VAR 0 3
21980: PUSH
21981: LD_VAR 0 4
21985: ARRAY
21986: PPUSH
21987: CALL_OW 251
21991: PUSH
21992: LD_VAR 0 3
21996: PUSH
21997: LD_VAR 0 4
22001: ARRAY
22002: PPUSH
22003: CALL_OW 254
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: ADD
22017: ST_TO_ADDR
22018: GO 21931
22020: POP
22021: POP
// result := list ;
22022: LD_ADDR_VAR 0 2
22026: PUSH
22027: LD_VAR 0 5
22031: ST_TO_ADDR
// end ;
22032: LD_VAR 0 2
22036: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
// if not factory then
22046: LD_VAR 0 1
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22648
// if control = control_apeman then
22055: LD_VAR 0 4
22059: PUSH
22060: LD_INT 5
22062: EQUAL
22063: IFFALSE 22172
// begin tmp := UnitsInside ( factory ) ;
22065: LD_ADDR_VAR 0 8
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 313
22079: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22080: LD_VAR 0 8
22084: PPUSH
22085: LD_INT 25
22087: PUSH
22088: LD_INT 12
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 72
22099: NOT
22100: IFFALSE 22110
// control := control_manual ;
22102: LD_ADDR_VAR 0 4
22106: PUSH
22107: LD_INT 1
22109: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22110: LD_ADDR_VAR 0 8
22114: PUSH
22115: LD_VAR 0 1
22119: PPUSH
22120: CALL 21807 0 1
22124: ST_TO_ADDR
// if tmp then
22125: LD_VAR 0 8
22129: IFFALSE 22172
// begin for i in tmp do
22131: LD_ADDR_VAR 0 7
22135: PUSH
22136: LD_VAR 0 8
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22170
// if i [ 1 ] = b_ext_radio then
22144: LD_VAR 0 7
22148: PUSH
22149: LD_INT 1
22151: ARRAY
22152: PUSH
22153: LD_INT 22
22155: EQUAL
22156: IFFALSE 22168
// begin control := control_remote ;
22158: LD_ADDR_VAR 0 4
22162: PUSH
22163: LD_INT 2
22165: ST_TO_ADDR
// break ;
22166: GO 22170
// end ;
22168: GO 22141
22170: POP
22171: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22172: LD_VAR 0 1
22176: PPUSH
22177: LD_VAR 0 2
22181: PPUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: LD_VAR 0 4
22191: PPUSH
22192: LD_VAR 0 5
22196: PPUSH
22197: CALL_OW 448
22201: IFFALSE 22236
// begin result := [ chassis , engine , control , weapon ] ;
22203: LD_ADDR_VAR 0 6
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_VAR 0 3
22217: PUSH
22218: LD_VAR 0 4
22222: PUSH
22223: LD_VAR 0 5
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: ST_TO_ADDR
// exit ;
22234: GO 22648
// end ; _chassis := AvailableChassisList ( factory ) ;
22236: LD_ADDR_VAR 0 9
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 475
22250: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22251: LD_ADDR_VAR 0 11
22255: PUSH
22256: LD_VAR 0 1
22260: PPUSH
22261: CALL_OW 476
22265: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22266: LD_ADDR_VAR 0 12
22270: PUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 477
22280: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22281: LD_ADDR_VAR 0 10
22285: PUSH
22286: LD_VAR 0 1
22290: PPUSH
22291: CALL_OW 478
22295: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22296: LD_VAR 0 9
22300: NOT
22301: PUSH
22302: LD_VAR 0 11
22306: NOT
22307: OR
22308: PUSH
22309: LD_VAR 0 12
22313: NOT
22314: OR
22315: PUSH
22316: LD_VAR 0 10
22320: NOT
22321: OR
22322: IFFALSE 22357
// begin result := [ chassis , engine , control , weapon ] ;
22324: LD_ADDR_VAR 0 6
22328: PUSH
22329: LD_VAR 0 2
22333: PUSH
22334: LD_VAR 0 3
22338: PUSH
22339: LD_VAR 0 4
22343: PUSH
22344: LD_VAR 0 5
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: ST_TO_ADDR
// exit ;
22355: GO 22648
// end ; if not chassis in _chassis then
22357: LD_VAR 0 2
22361: PUSH
22362: LD_VAR 0 9
22366: IN
22367: NOT
22368: IFFALSE 22394
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22370: LD_ADDR_VAR 0 2
22374: PUSH
22375: LD_VAR 0 9
22379: PUSH
22380: LD_INT 1
22382: PPUSH
22383: LD_VAR 0 9
22387: PPUSH
22388: CALL_OW 12
22392: ARRAY
22393: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22394: LD_VAR 0 2
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: CALL 22653 0 2
22408: NOT
22409: IFFALSE 22468
// repeat engine := _engine [ 1 ] ;
22411: LD_ADDR_VAR 0 3
22415: PUSH
22416: LD_VAR 0 11
22420: PUSH
22421: LD_INT 1
22423: ARRAY
22424: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22425: LD_ADDR_VAR 0 11
22429: PUSH
22430: LD_VAR 0 11
22434: PPUSH
22435: LD_INT 1
22437: PPUSH
22438: CALL_OW 3
22442: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22443: LD_VAR 0 2
22447: PPUSH
22448: LD_VAR 0 3
22452: PPUSH
22453: CALL 22653 0 2
22457: PUSH
22458: LD_VAR 0 11
22462: PUSH
22463: EMPTY
22464: EQUAL
22465: OR
22466: IFFALSE 22411
// if not control in _control then
22468: LD_VAR 0 4
22472: PUSH
22473: LD_VAR 0 12
22477: IN
22478: NOT
22479: IFFALSE 22505
// control := _control [ rand ( 1 , _control ) ] ;
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_VAR 0 12
22490: PUSH
22491: LD_INT 1
22493: PPUSH
22494: LD_VAR 0 12
22498: PPUSH
22499: CALL_OW 12
22503: ARRAY
22504: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22505: LD_VAR 0 2
22509: PPUSH
22510: LD_VAR 0 5
22514: PPUSH
22515: CALL 22873 0 2
22519: NOT
22520: IFFALSE 22579
// repeat weapon := _weapon [ 1 ] ;
22522: LD_ADDR_VAR 0 5
22526: PUSH
22527: LD_VAR 0 10
22531: PUSH
22532: LD_INT 1
22534: ARRAY
22535: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22536: LD_ADDR_VAR 0 10
22540: PUSH
22541: LD_VAR 0 10
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 3
22553: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22554: LD_VAR 0 2
22558: PPUSH
22559: LD_VAR 0 5
22563: PPUSH
22564: CALL 22873 0 2
22568: PUSH
22569: LD_VAR 0 10
22573: PUSH
22574: EMPTY
22575: EQUAL
22576: OR
22577: IFFALSE 22522
// result := [ ] ;
22579: LD_ADDR_VAR 0 6
22583: PUSH
22584: EMPTY
22585: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22586: LD_VAR 0 1
22590: PPUSH
22591: LD_VAR 0 2
22595: PPUSH
22596: LD_VAR 0 3
22600: PPUSH
22601: LD_VAR 0 4
22605: PPUSH
22606: LD_VAR 0 5
22610: PPUSH
22611: CALL_OW 448
22615: IFFALSE 22648
// result := [ chassis , engine , control , weapon ] ;
22617: LD_ADDR_VAR 0 6
22621: PUSH
22622: LD_VAR 0 2
22626: PUSH
22627: LD_VAR 0 3
22631: PUSH
22632: LD_VAR 0 4
22636: PUSH
22637: LD_VAR 0 5
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
// end ;
22648: LD_VAR 0 6
22652: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22653: LD_INT 0
22655: PPUSH
// if not chassis or not engine then
22656: LD_VAR 0 1
22660: NOT
22661: PUSH
22662: LD_VAR 0 2
22666: NOT
22667: OR
22668: IFFALSE 22672
// exit ;
22670: GO 22868
// case engine of engine_solar :
22672: LD_VAR 0 2
22676: PUSH
22677: LD_INT 2
22679: DOUBLE
22680: EQUAL
22681: IFTRUE 22685
22683: GO 22723
22685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_INT 11
22693: PUSH
22694: LD_INT 12
22696: PUSH
22697: LD_INT 13
22699: PUSH
22700: LD_INT 14
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 3
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: ST_TO_ADDR
22721: GO 22852
22723: LD_INT 1
22725: DOUBLE
22726: EQUAL
22727: IFTRUE 22731
22729: GO 22793
22731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22732: LD_ADDR_VAR 0 3
22736: PUSH
22737: LD_INT 11
22739: PUSH
22740: LD_INT 12
22742: PUSH
22743: LD_INT 13
22745: PUSH
22746: LD_INT 14
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: LD_INT 4
22760: PUSH
22761: LD_INT 5
22763: PUSH
22764: LD_INT 21
22766: PUSH
22767: LD_INT 23
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_INT 24
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: ST_TO_ADDR
22791: GO 22852
22793: LD_INT 3
22795: DOUBLE
22796: EQUAL
22797: IFTRUE 22801
22799: GO 22851
22801: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22802: LD_ADDR_VAR 0 3
22806: PUSH
22807: LD_INT 13
22809: PUSH
22810: LD_INT 14
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: LD_INT 3
22818: PUSH
22819: LD_INT 4
22821: PUSH
22822: LD_INT 5
22824: PUSH
22825: LD_INT 21
22827: PUSH
22828: LD_INT 22
22830: PUSH
22831: LD_INT 23
22833: PUSH
22834: LD_INT 24
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: ST_TO_ADDR
22849: GO 22852
22851: POP
// result := ( chassis in result ) ;
22852: LD_ADDR_VAR 0 3
22856: PUSH
22857: LD_VAR 0 1
22861: PUSH
22862: LD_VAR 0 3
22866: IN
22867: ST_TO_ADDR
// end ;
22868: LD_VAR 0 3
22872: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22873: LD_INT 0
22875: PPUSH
// if not chassis or not weapon then
22876: LD_VAR 0 1
22880: NOT
22881: PUSH
22882: LD_VAR 0 2
22886: NOT
22887: OR
22888: IFFALSE 22892
// exit ;
22890: GO 23918
// case weapon of us_machine_gun :
22892: LD_VAR 0 2
22896: PUSH
22897: LD_INT 2
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22905
22903: GO 22935
22905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22906: LD_ADDR_VAR 0 3
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: LD_INT 4
22922: PUSH
22923: LD_INT 5
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: ST_TO_ADDR
22933: GO 23902
22935: LD_INT 3
22937: DOUBLE
22938: EQUAL
22939: IFTRUE 22943
22941: GO 22973
22943: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22944: LD_ADDR_VAR 0 3
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: LD_INT 4
22960: PUSH
22961: LD_INT 5
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: ST_TO_ADDR
22971: GO 23902
22973: LD_INT 11
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 23011
22981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22982: LD_ADDR_VAR 0 3
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: LD_INT 4
22998: PUSH
22999: LD_INT 5
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
23009: GO 23902
23011: LD_INT 4
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23045
23019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: LD_INT 4
23033: PUSH
23034: LD_INT 5
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: ST_TO_ADDR
23043: GO 23902
23045: LD_INT 5
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23079
23053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23054: LD_ADDR_VAR 0 3
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 3
23064: PUSH
23065: LD_INT 4
23067: PUSH
23068: LD_INT 5
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: ST_TO_ADDR
23077: GO 23902
23079: LD_INT 9
23081: DOUBLE
23082: EQUAL
23083: IFTRUE 23087
23085: GO 23113
23087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23088: LD_ADDR_VAR 0 3
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 3
23098: PUSH
23099: LD_INT 4
23101: PUSH
23102: LD_INT 5
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 23902
23113: LD_INT 7
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23147
23121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: ST_TO_ADDR
23145: GO 23902
23147: LD_INT 12
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23181
23155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23156: LD_ADDR_VAR 0 3
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: LD_INT 4
23169: PUSH
23170: LD_INT 5
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
23179: GO 23902
23181: LD_INT 13
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23215
23189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 4
23203: PUSH
23204: LD_INT 5
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
23213: GO 23902
23215: LD_INT 14
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23241
23223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_INT 4
23231: PUSH
23232: LD_INT 5
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: ST_TO_ADDR
23239: GO 23902
23241: LD_INT 6
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23267
23249: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: LD_INT 4
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: ST_TO_ADDR
23265: GO 23902
23267: LD_INT 10
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23293
23275: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: ST_TO_ADDR
23291: GO 23902
23293: LD_INT 22
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23327
23301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23302: LD_ADDR_VAR 0 3
23306: PUSH
23307: LD_INT 11
23309: PUSH
23310: LD_INT 12
23312: PUSH
23313: LD_INT 13
23315: PUSH
23316: LD_INT 14
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
23325: GO 23902
23327: LD_INT 23
23329: DOUBLE
23330: EQUAL
23331: IFTRUE 23335
23333: GO 23361
23335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 11
23343: PUSH
23344: LD_INT 12
23346: PUSH
23347: LD_INT 13
23349: PUSH
23350: LD_INT 14
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
23359: GO 23902
23361: LD_INT 24
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23395
23369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 11
23377: PUSH
23378: LD_INT 12
23380: PUSH
23381: LD_INT 13
23383: PUSH
23384: LD_INT 14
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23902
23395: LD_INT 30
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23429
23403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 11
23411: PUSH
23412: LD_INT 12
23414: PUSH
23415: LD_INT 13
23417: PUSH
23418: LD_INT 14
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23902
23429: LD_INT 25
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23455
23437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 13
23445: PUSH
23446: LD_INT 14
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: ST_TO_ADDR
23453: GO 23902
23455: LD_INT 27
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23481
23463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_INT 13
23471: PUSH
23472: LD_INT 14
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: ST_TO_ADDR
23479: GO 23902
23481: LD_INT 28
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23507
23489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23490: LD_ADDR_VAR 0 3
23494: PUSH
23495: LD_INT 13
23497: PUSH
23498: LD_INT 14
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: ST_TO_ADDR
23505: GO 23902
23507: LD_INT 29
23509: DOUBLE
23510: EQUAL
23511: IFTRUE 23515
23513: GO 23533
23515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23516: LD_ADDR_VAR 0 3
23520: PUSH
23521: LD_INT 13
23523: PUSH
23524: LD_INT 14
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: ST_TO_ADDR
23531: GO 23902
23533: LD_INT 31
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 23559
23541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23542: LD_ADDR_VAR 0 3
23546: PUSH
23547: LD_INT 13
23549: PUSH
23550: LD_INT 14
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: ST_TO_ADDR
23557: GO 23902
23559: LD_INT 26
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23585
23567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23568: LD_ADDR_VAR 0 3
23572: PUSH
23573: LD_INT 13
23575: PUSH
23576: LD_INT 14
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 23902
23585: LD_INT 42
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23619
23593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 22
23604: PUSH
23605: LD_INT 23
23607: PUSH
23608: LD_INT 24
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
23617: GO 23902
23619: LD_INT 43
23621: DOUBLE
23622: EQUAL
23623: IFTRUE 23627
23625: GO 23653
23627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: LD_INT 21
23635: PUSH
23636: LD_INT 22
23638: PUSH
23639: LD_INT 23
23641: PUSH
23642: LD_INT 24
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: ST_TO_ADDR
23651: GO 23902
23653: LD_INT 44
23655: DOUBLE
23656: EQUAL
23657: IFTRUE 23661
23659: GO 23687
23661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23662: LD_ADDR_VAR 0 3
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 24
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: ST_TO_ADDR
23685: GO 23902
23687: LD_INT 45
23689: DOUBLE
23690: EQUAL
23691: IFTRUE 23695
23693: GO 23721
23695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23696: LD_ADDR_VAR 0 3
23700: PUSH
23701: LD_INT 21
23703: PUSH
23704: LD_INT 22
23706: PUSH
23707: LD_INT 23
23709: PUSH
23710: LD_INT 24
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: ST_TO_ADDR
23719: GO 23902
23721: LD_INT 49
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23755
23729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23730: LD_ADDR_VAR 0 3
23734: PUSH
23735: LD_INT 21
23737: PUSH
23738: LD_INT 22
23740: PUSH
23741: LD_INT 23
23743: PUSH
23744: LD_INT 24
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: ST_TO_ADDR
23753: GO 23902
23755: LD_INT 51
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23789
23763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 22
23774: PUSH
23775: LD_INT 23
23777: PUSH
23778: LD_INT 24
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: ST_TO_ADDR
23787: GO 23902
23789: LD_INT 52
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 23823
23797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23798: LD_ADDR_VAR 0 3
23802: PUSH
23803: LD_INT 21
23805: PUSH
23806: LD_INT 22
23808: PUSH
23809: LD_INT 23
23811: PUSH
23812: LD_INT 24
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: ST_TO_ADDR
23821: GO 23902
23823: LD_INT 53
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23849
23831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 23
23839: PUSH
23840: LD_INT 24
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: ST_TO_ADDR
23847: GO 23902
23849: LD_INT 46
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23857
23855: GO 23875
23857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23858: LD_ADDR_VAR 0 3
23862: PUSH
23863: LD_INT 23
23865: PUSH
23866: LD_INT 24
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: ST_TO_ADDR
23873: GO 23902
23875: LD_INT 47
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23901
23883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_INT 23
23891: PUSH
23892: LD_INT 24
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: ST_TO_ADDR
23899: GO 23902
23901: POP
// result := ( chassis in result ) ;
23902: LD_ADDR_VAR 0 3
23906: PUSH
23907: LD_VAR 0 1
23911: PUSH
23912: LD_VAR 0 3
23916: IN
23917: ST_TO_ADDR
// end ;
23918: LD_VAR 0 3
23922: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23923: LD_INT 0
23925: PPUSH
23926: PPUSH
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
// result := array ;
23932: LD_ADDR_VAR 0 5
23936: PUSH
23937: LD_VAR 0 1
23941: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23942: LD_VAR 0 1
23946: NOT
23947: PUSH
23948: LD_VAR 0 2
23952: NOT
23953: OR
23954: PUSH
23955: LD_VAR 0 3
23959: NOT
23960: OR
23961: PUSH
23962: LD_VAR 0 2
23966: PUSH
23967: LD_VAR 0 1
23971: GREATER
23972: OR
23973: PUSH
23974: LD_VAR 0 3
23978: PUSH
23979: LD_VAR 0 1
23983: GREATER
23984: OR
23985: IFFALSE 23989
// exit ;
23987: GO 24285
// if direction then
23989: LD_VAR 0 4
23993: IFFALSE 24057
// begin d := 1 ;
23995: LD_ADDR_VAR 0 9
23999: PUSH
24000: LD_INT 1
24002: ST_TO_ADDR
// if i_from > i_to then
24003: LD_VAR 0 2
24007: PUSH
24008: LD_VAR 0 3
24012: GREATER
24013: IFFALSE 24039
// length := ( array - i_from ) + i_to else
24015: LD_ADDR_VAR 0 11
24019: PUSH
24020: LD_VAR 0 1
24024: PUSH
24025: LD_VAR 0 2
24029: MINUS
24030: PUSH
24031: LD_VAR 0 3
24035: PLUS
24036: ST_TO_ADDR
24037: GO 24055
// length := i_to - i_from ;
24039: LD_ADDR_VAR 0 11
24043: PUSH
24044: LD_VAR 0 3
24048: PUSH
24049: LD_VAR 0 2
24053: MINUS
24054: ST_TO_ADDR
// end else
24055: GO 24118
// begin d := - 1 ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: ST_TO_ADDR
// if i_from > i_to then
24066: LD_VAR 0 2
24070: PUSH
24071: LD_VAR 0 3
24075: GREATER
24076: IFFALSE 24096
// length := i_from - i_to else
24078: LD_ADDR_VAR 0 11
24082: PUSH
24083: LD_VAR 0 2
24087: PUSH
24088: LD_VAR 0 3
24092: MINUS
24093: ST_TO_ADDR
24094: GO 24118
// length := ( array - i_to ) + i_from ;
24096: LD_ADDR_VAR 0 11
24100: PUSH
24101: LD_VAR 0 1
24105: PUSH
24106: LD_VAR 0 3
24110: MINUS
24111: PUSH
24112: LD_VAR 0 2
24116: PLUS
24117: ST_TO_ADDR
// end ; if not length then
24118: LD_VAR 0 11
24122: NOT
24123: IFFALSE 24127
// exit ;
24125: GO 24285
// tmp := array ;
24127: LD_ADDR_VAR 0 10
24131: PUSH
24132: LD_VAR 0 1
24136: ST_TO_ADDR
// for i = 1 to length do
24137: LD_ADDR_VAR 0 6
24141: PUSH
24142: DOUBLE
24143: LD_INT 1
24145: DEC
24146: ST_TO_ADDR
24147: LD_VAR 0 11
24151: PUSH
24152: FOR_TO
24153: IFFALSE 24273
// begin for j = 1 to array do
24155: LD_ADDR_VAR 0 7
24159: PUSH
24160: DOUBLE
24161: LD_INT 1
24163: DEC
24164: ST_TO_ADDR
24165: LD_VAR 0 1
24169: PUSH
24170: FOR_TO
24171: IFFALSE 24259
// begin k := j + d ;
24173: LD_ADDR_VAR 0 8
24177: PUSH
24178: LD_VAR 0 7
24182: PUSH
24183: LD_VAR 0 9
24187: PLUS
24188: ST_TO_ADDR
// if k > array then
24189: LD_VAR 0 8
24193: PUSH
24194: LD_VAR 0 1
24198: GREATER
24199: IFFALSE 24209
// k := 1 ;
24201: LD_ADDR_VAR 0 8
24205: PUSH
24206: LD_INT 1
24208: ST_TO_ADDR
// if not k then
24209: LD_VAR 0 8
24213: NOT
24214: IFFALSE 24226
// k := array ;
24216: LD_ADDR_VAR 0 8
24220: PUSH
24221: LD_VAR 0 1
24225: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24226: LD_ADDR_VAR 0 10
24230: PUSH
24231: LD_VAR 0 10
24235: PPUSH
24236: LD_VAR 0 8
24240: PPUSH
24241: LD_VAR 0 1
24245: PUSH
24246: LD_VAR 0 7
24250: ARRAY
24251: PPUSH
24252: CALL_OW 1
24256: ST_TO_ADDR
// end ;
24257: GO 24170
24259: POP
24260: POP
// array := tmp ;
24261: LD_ADDR_VAR 0 1
24265: PUSH
24266: LD_VAR 0 10
24270: ST_TO_ADDR
// end ;
24271: GO 24152
24273: POP
24274: POP
// result := array ;
24275: LD_ADDR_VAR 0 5
24279: PUSH
24280: LD_VAR 0 1
24284: ST_TO_ADDR
// end ;
24285: LD_VAR 0 5
24289: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24290: LD_INT 0
24292: PPUSH
24293: PPUSH
// result := 0 ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: LD_INT 0
24301: ST_TO_ADDR
// if not array or not value in array then
24302: LD_VAR 0 1
24306: NOT
24307: PUSH
24308: LD_VAR 0 2
24312: PUSH
24313: LD_VAR 0 1
24317: IN
24318: NOT
24319: OR
24320: IFFALSE 24324
// exit ;
24322: GO 24378
// for i = 1 to array do
24324: LD_ADDR_VAR 0 4
24328: PUSH
24329: DOUBLE
24330: LD_INT 1
24332: DEC
24333: ST_TO_ADDR
24334: LD_VAR 0 1
24338: PUSH
24339: FOR_TO
24340: IFFALSE 24376
// if value = array [ i ] then
24342: LD_VAR 0 2
24346: PUSH
24347: LD_VAR 0 1
24351: PUSH
24352: LD_VAR 0 4
24356: ARRAY
24357: EQUAL
24358: IFFALSE 24374
// begin result := i ;
24360: LD_ADDR_VAR 0 3
24364: PUSH
24365: LD_VAR 0 4
24369: ST_TO_ADDR
// exit ;
24370: POP
24371: POP
24372: GO 24378
// end ;
24374: GO 24339
24376: POP
24377: POP
// end ;
24378: LD_VAR 0 3
24382: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24383: LD_INT 0
24385: PPUSH
// vc_chassis := chassis ;
24386: LD_ADDR_OWVAR 37
24390: PUSH
24391: LD_VAR 0 1
24395: ST_TO_ADDR
// vc_engine := engine ;
24396: LD_ADDR_OWVAR 39
24400: PUSH
24401: LD_VAR 0 2
24405: ST_TO_ADDR
// vc_control := control ;
24406: LD_ADDR_OWVAR 38
24410: PUSH
24411: LD_VAR 0 3
24415: ST_TO_ADDR
// vc_weapon := weapon ;
24416: LD_ADDR_OWVAR 40
24420: PUSH
24421: LD_VAR 0 4
24425: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24426: LD_ADDR_OWVAR 41
24430: PUSH
24431: LD_VAR 0 5
24435: ST_TO_ADDR
// end ;
24436: LD_VAR 0 6
24440: RET
// export function WantPlant ( unit ) ; var task ; begin
24441: LD_INT 0
24443: PPUSH
24444: PPUSH
// result := false ;
24445: LD_ADDR_VAR 0 2
24449: PUSH
24450: LD_INT 0
24452: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 437
24467: ST_TO_ADDR
// if task then
24468: LD_VAR 0 3
24472: IFFALSE 24500
// if task [ 1 ] [ 1 ] = p then
24474: LD_VAR 0 3
24478: PUSH
24479: LD_INT 1
24481: ARRAY
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PUSH
24487: LD_STRING p
24489: EQUAL
24490: IFFALSE 24500
// result := true ;
24492: LD_ADDR_VAR 0 2
24496: PUSH
24497: LD_INT 1
24499: ST_TO_ADDR
// end ;
24500: LD_VAR 0 2
24504: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
// if pos < 1 then
24511: LD_VAR 0 2
24515: PUSH
24516: LD_INT 1
24518: LESS
24519: IFFALSE 24523
// exit ;
24521: GO 24826
// if pos = 1 then
24523: LD_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: EQUAL
24531: IFFALSE 24564
// result := Replace ( arr , pos [ 1 ] , value ) else
24533: LD_ADDR_VAR 0 4
24537: PUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: LD_VAR 0 2
24547: PUSH
24548: LD_INT 1
24550: ARRAY
24551: PPUSH
24552: LD_VAR 0 3
24556: PPUSH
24557: CALL_OW 1
24561: ST_TO_ADDR
24562: GO 24826
// begin tmp := arr ;
24564: LD_ADDR_VAR 0 6
24568: PUSH
24569: LD_VAR 0 1
24573: ST_TO_ADDR
// s_arr := [ tmp ] ;
24574: LD_ADDR_VAR 0 7
24578: PUSH
24579: LD_VAR 0 6
24583: PUSH
24584: EMPTY
24585: LIST
24586: ST_TO_ADDR
// for i = 1 to pos - 1 do
24587: LD_ADDR_VAR 0 5
24591: PUSH
24592: DOUBLE
24593: LD_INT 1
24595: DEC
24596: ST_TO_ADDR
24597: LD_VAR 0 2
24601: PUSH
24602: LD_INT 1
24604: MINUS
24605: PUSH
24606: FOR_TO
24607: IFFALSE 24652
// begin tmp := tmp [ pos [ i ] ] ;
24609: LD_ADDR_VAR 0 6
24613: PUSH
24614: LD_VAR 0 6
24618: PUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_VAR 0 5
24628: ARRAY
24629: ARRAY
24630: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24631: LD_ADDR_VAR 0 7
24635: PUSH
24636: LD_VAR 0 7
24640: PUSH
24641: LD_VAR 0 6
24645: PUSH
24646: EMPTY
24647: LIST
24648: ADD
24649: ST_TO_ADDR
// end ;
24650: GO 24606
24652: POP
24653: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24654: LD_ADDR_VAR 0 6
24658: PUSH
24659: LD_VAR 0 6
24663: PPUSH
24664: LD_VAR 0 2
24668: PUSH
24669: LD_VAR 0 2
24673: ARRAY
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: CALL_OW 1
24684: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24685: LD_ADDR_VAR 0 7
24689: PUSH
24690: LD_VAR 0 7
24694: PPUSH
24695: LD_VAR 0 7
24699: PPUSH
24700: LD_VAR 0 6
24704: PPUSH
24705: CALL_OW 1
24709: ST_TO_ADDR
// for i = s_arr downto 2 do
24710: LD_ADDR_VAR 0 5
24714: PUSH
24715: DOUBLE
24716: LD_VAR 0 7
24720: INC
24721: ST_TO_ADDR
24722: LD_INT 2
24724: PUSH
24725: FOR_DOWNTO
24726: IFFALSE 24810
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24728: LD_ADDR_VAR 0 6
24732: PUSH
24733: LD_VAR 0 7
24737: PUSH
24738: LD_VAR 0 5
24742: PUSH
24743: LD_INT 1
24745: MINUS
24746: ARRAY
24747: PPUSH
24748: LD_VAR 0 2
24752: PUSH
24753: LD_VAR 0 5
24757: PUSH
24758: LD_INT 1
24760: MINUS
24761: ARRAY
24762: PPUSH
24763: LD_VAR 0 7
24767: PUSH
24768: LD_VAR 0 5
24772: ARRAY
24773: PPUSH
24774: CALL_OW 1
24778: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24779: LD_ADDR_VAR 0 7
24783: PUSH
24784: LD_VAR 0 7
24788: PPUSH
24789: LD_VAR 0 5
24793: PUSH
24794: LD_INT 1
24796: MINUS
24797: PPUSH
24798: LD_VAR 0 6
24802: PPUSH
24803: CALL_OW 1
24807: ST_TO_ADDR
// end ;
24808: GO 24725
24810: POP
24811: POP
// result := s_arr [ 1 ] ;
24812: LD_ADDR_VAR 0 4
24816: PUSH
24817: LD_VAR 0 7
24821: PUSH
24822: LD_INT 1
24824: ARRAY
24825: ST_TO_ADDR
// end ; end ;
24826: LD_VAR 0 4
24830: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24831: LD_INT 0
24833: PPUSH
24834: PPUSH
// if not list then
24835: LD_VAR 0 1
24839: NOT
24840: IFFALSE 24844
// exit ;
24842: GO 24935
// i := list [ pos1 ] ;
24844: LD_ADDR_VAR 0 5
24848: PUSH
24849: LD_VAR 0 1
24853: PUSH
24854: LD_VAR 0 2
24858: ARRAY
24859: ST_TO_ADDR
// if not i then
24860: LD_VAR 0 5
24864: NOT
24865: IFFALSE 24869
// exit ;
24867: GO 24935
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24869: LD_ADDR_VAR 0 1
24873: PUSH
24874: LD_VAR 0 1
24878: PPUSH
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 1
24888: PUSH
24889: LD_VAR 0 3
24893: ARRAY
24894: PPUSH
24895: CALL_OW 1
24899: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24900: LD_ADDR_VAR 0 1
24904: PUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: LD_VAR 0 3
24914: PPUSH
24915: LD_VAR 0 5
24919: PPUSH
24920: CALL_OW 1
24924: ST_TO_ADDR
// result := list ;
24925: LD_ADDR_VAR 0 4
24929: PUSH
24930: LD_VAR 0 1
24934: ST_TO_ADDR
// end ;
24935: LD_VAR 0 4
24939: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24940: LD_INT 0
24942: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24943: LD_ADDR_VAR 0 5
24947: PUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 250
24957: PPUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 251
24967: PPUSH
24968: LD_VAR 0 2
24972: PPUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: LD_VAR 0 4
24982: PPUSH
24983: CALL 24993 0 5
24987: ST_TO_ADDR
// end ;
24988: LD_VAR 0 5
24992: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
// if not list then
24999: LD_VAR 0 3
25003: NOT
25004: IFFALSE 25008
// exit ;
25006: GO 25396
// result := [ ] ;
25008: LD_ADDR_VAR 0 6
25012: PUSH
25013: EMPTY
25014: ST_TO_ADDR
// for i in list do
25015: LD_ADDR_VAR 0 7
25019: PUSH
25020: LD_VAR 0 3
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25228
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25028: LD_ADDR_VAR 0 9
25032: PUSH
25033: LD_VAR 0 7
25037: PPUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: CALL_OW 297
25052: ST_TO_ADDR
// if not result then
25053: LD_VAR 0 6
25057: NOT
25058: IFFALSE 25084
// result := [ [ i , tmp ] ] else
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 7
25069: PUSH
25070: LD_VAR 0 9
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: EMPTY
25080: LIST
25081: ST_TO_ADDR
25082: GO 25226
// begin if result [ result ] [ 2 ] < tmp then
25084: LD_VAR 0 6
25088: PUSH
25089: LD_VAR 0 6
25093: ARRAY
25094: PUSH
25095: LD_INT 2
25097: ARRAY
25098: PUSH
25099: LD_VAR 0 9
25103: LESS
25104: IFFALSE 25146
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25106: LD_ADDR_VAR 0 6
25110: PUSH
25111: LD_VAR 0 6
25115: PPUSH
25116: LD_VAR 0 6
25120: PUSH
25121: LD_INT 1
25123: PLUS
25124: PPUSH
25125: LD_VAR 0 7
25129: PUSH
25130: LD_VAR 0 9
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PPUSH
25139: CALL_OW 2
25143: ST_TO_ADDR
25144: GO 25226
// for j = 1 to result do
25146: LD_ADDR_VAR 0 8
25150: PUSH
25151: DOUBLE
25152: LD_INT 1
25154: DEC
25155: ST_TO_ADDR
25156: LD_VAR 0 6
25160: PUSH
25161: FOR_TO
25162: IFFALSE 25224
// begin if tmp < result [ j ] [ 2 ] then
25164: LD_VAR 0 9
25168: PUSH
25169: LD_VAR 0 6
25173: PUSH
25174: LD_VAR 0 8
25178: ARRAY
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: LESS
25184: IFFALSE 25222
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25186: LD_ADDR_VAR 0 6
25190: PUSH
25191: LD_VAR 0 6
25195: PPUSH
25196: LD_VAR 0 8
25200: PPUSH
25201: LD_VAR 0 7
25205: PUSH
25206: LD_VAR 0 9
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 2
25219: ST_TO_ADDR
// break ;
25220: GO 25224
// end ; end ;
25222: GO 25161
25224: POP
25225: POP
// end ; end ;
25226: GO 25025
25228: POP
25229: POP
// if result and not asc then
25230: LD_VAR 0 6
25234: PUSH
25235: LD_VAR 0 4
25239: NOT
25240: AND
25241: IFFALSE 25316
// begin tmp := result ;
25243: LD_ADDR_VAR 0 9
25247: PUSH
25248: LD_VAR 0 6
25252: ST_TO_ADDR
// for i = tmp downto 1 do
25253: LD_ADDR_VAR 0 7
25257: PUSH
25258: DOUBLE
25259: LD_VAR 0 9
25263: INC
25264: ST_TO_ADDR
25265: LD_INT 1
25267: PUSH
25268: FOR_DOWNTO
25269: IFFALSE 25314
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25271: LD_ADDR_VAR 0 6
25275: PUSH
25276: LD_VAR 0 6
25280: PPUSH
25281: LD_VAR 0 9
25285: PUSH
25286: LD_VAR 0 7
25290: MINUS
25291: PUSH
25292: LD_INT 1
25294: PLUS
25295: PPUSH
25296: LD_VAR 0 9
25300: PUSH
25301: LD_VAR 0 7
25305: ARRAY
25306: PPUSH
25307: CALL_OW 1
25311: ST_TO_ADDR
25312: GO 25268
25314: POP
25315: POP
// end ; tmp := [ ] ;
25316: LD_ADDR_VAR 0 9
25320: PUSH
25321: EMPTY
25322: ST_TO_ADDR
// if mode then
25323: LD_VAR 0 5
25327: IFFALSE 25396
// begin for i = 1 to result do
25329: LD_ADDR_VAR 0 7
25333: PUSH
25334: DOUBLE
25335: LD_INT 1
25337: DEC
25338: ST_TO_ADDR
25339: LD_VAR 0 6
25343: PUSH
25344: FOR_TO
25345: IFFALSE 25384
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25347: LD_ADDR_VAR 0 9
25351: PUSH
25352: LD_VAR 0 9
25356: PPUSH
25357: LD_VAR 0 7
25361: PPUSH
25362: LD_VAR 0 6
25366: PUSH
25367: LD_VAR 0 7
25371: ARRAY
25372: PUSH
25373: LD_INT 1
25375: ARRAY
25376: PPUSH
25377: CALL_OW 1
25381: ST_TO_ADDR
25382: GO 25344
25384: POP
25385: POP
// result := tmp ;
25386: LD_ADDR_VAR 0 6
25390: PUSH
25391: LD_VAR 0 9
25395: ST_TO_ADDR
// end ; end ;
25396: LD_VAR 0 6
25400: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25401: LD_INT 0
25403: PPUSH
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
25408: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25409: LD_ADDR_VAR 0 5
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// if not x or not y then
25431: LD_VAR 0 2
25435: NOT
25436: PUSH
25437: LD_VAR 0 3
25441: NOT
25442: OR
25443: IFFALSE 25447
// exit ;
25445: GO 27093
// if not range then
25447: LD_VAR 0 4
25451: NOT
25452: IFFALSE 25462
// range := 10 ;
25454: LD_ADDR_VAR 0 4
25458: PUSH
25459: LD_INT 10
25461: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25462: LD_ADDR_VAR 0 8
25466: PUSH
25467: LD_INT 81
25469: PUSH
25470: LD_VAR 0 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 92
25481: PUSH
25482: LD_VAR 0 2
25486: PUSH
25487: LD_VAR 0 3
25491: PUSH
25492: LD_VAR 0 4
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: LD_INT 21
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: PPUSH
25525: CALL_OW 69
25529: ST_TO_ADDR
// if not tmp then
25530: LD_VAR 0 8
25534: NOT
25535: IFFALSE 25539
// exit ;
25537: GO 27093
// for i in tmp do
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_VAR 0 8
25548: PUSH
25549: FOR_IN
25550: IFFALSE 27068
// begin points := [ 0 , 0 , 0 ] ;
25552: LD_ADDR_VAR 0 9
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: ST_TO_ADDR
// bpoints := 1 ;
25571: LD_ADDR_VAR 0 10
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25579: LD_VAR 0 6
25583: PPUSH
25584: CALL_OW 247
25588: PUSH
25589: LD_INT 1
25591: DOUBLE
25592: EQUAL
25593: IFTRUE 25597
25595: GO 26175
25597: POP
// begin if GetClass ( i ) = 1 then
25598: LD_VAR 0 6
25602: PPUSH
25603: CALL_OW 257
25607: PUSH
25608: LD_INT 1
25610: EQUAL
25611: IFFALSE 25632
// points := [ 10 , 5 , 3 ] ;
25613: LD_ADDR_VAR 0 9
25617: PUSH
25618: LD_INT 10
25620: PUSH
25621: LD_INT 5
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25632: LD_VAR 0 6
25636: PPUSH
25637: CALL_OW 257
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 3
25647: PUSH
25648: LD_INT 4
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: IN
25656: IFFALSE 25677
// points := [ 3 , 2 , 1 ] ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 5
25689: EQUAL
25690: IFFALSE 25711
// points := [ 130 , 5 , 2 ] ;
25692: LD_ADDR_VAR 0 9
25696: PUSH
25697: LD_INT 130
25699: PUSH
25700: LD_INT 5
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25711: LD_VAR 0 6
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 8
25723: EQUAL
25724: IFFALSE 25745
// points := [ 35 , 35 , 30 ] ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_INT 35
25733: PUSH
25734: LD_INT 35
25736: PUSH
25737: LD_INT 30
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25745: LD_VAR 0 6
25749: PPUSH
25750: CALL_OW 257
25754: PUSH
25755: LD_INT 9
25757: EQUAL
25758: IFFALSE 25779
// points := [ 20 , 55 , 40 ] ;
25760: LD_ADDR_VAR 0 9
25764: PUSH
25765: LD_INT 20
25767: PUSH
25768: LD_INT 55
25770: PUSH
25771: LD_INT 40
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25779: LD_VAR 0 6
25783: PPUSH
25784: CALL_OW 257
25788: PUSH
25789: LD_INT 12
25791: PUSH
25792: LD_INT 16
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: IN
25799: IFFALSE 25820
// points := [ 5 , 3 , 2 ] ;
25801: LD_ADDR_VAR 0 9
25805: PUSH
25806: LD_INT 5
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: LIST
25819: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25820: LD_VAR 0 6
25824: PPUSH
25825: CALL_OW 257
25829: PUSH
25830: LD_INT 17
25832: EQUAL
25833: IFFALSE 25854
// points := [ 100 , 50 , 75 ] ;
25835: LD_ADDR_VAR 0 9
25839: PUSH
25840: LD_INT 100
25842: PUSH
25843: LD_INT 50
25845: PUSH
25846: LD_INT 75
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25854: LD_VAR 0 6
25858: PPUSH
25859: CALL_OW 257
25863: PUSH
25864: LD_INT 15
25866: EQUAL
25867: IFFALSE 25888
// points := [ 10 , 5 , 3 ] ;
25869: LD_ADDR_VAR 0 9
25873: PUSH
25874: LD_INT 10
25876: PUSH
25877: LD_INT 5
25879: PUSH
25880: LD_INT 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25888: LD_VAR 0 6
25892: PPUSH
25893: CALL_OW 257
25897: PUSH
25898: LD_INT 14
25900: EQUAL
25901: IFFALSE 25922
// points := [ 10 , 0 , 0 ] ;
25903: LD_ADDR_VAR 0 9
25907: PUSH
25908: LD_INT 10
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25922: LD_VAR 0 6
25926: PPUSH
25927: CALL_OW 257
25931: PUSH
25932: LD_INT 11
25934: EQUAL
25935: IFFALSE 25956
// points := [ 30 , 10 , 5 ] ;
25937: LD_ADDR_VAR 0 9
25941: PUSH
25942: LD_INT 30
25944: PUSH
25945: LD_INT 10
25947: PUSH
25948: LD_INT 5
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25956: LD_VAR 0 1
25960: PPUSH
25961: LD_INT 5
25963: PPUSH
25964: CALL_OW 321
25968: PUSH
25969: LD_INT 2
25971: EQUAL
25972: IFFALSE 25989
// bpoints := bpoints * 1.8 ;
25974: LD_ADDR_VAR 0 10
25978: PUSH
25979: LD_VAR 0 10
25983: PUSH
25984: LD_REAL  1.80000000000000E+0000
25987: MUL
25988: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25989: LD_VAR 0 6
25993: PPUSH
25994: CALL_OW 257
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: LD_INT 3
26007: PUSH
26008: LD_INT 4
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: IN
26017: PUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_INT 51
26025: PPUSH
26026: CALL_OW 321
26030: PUSH
26031: LD_INT 2
26033: EQUAL
26034: AND
26035: IFFALSE 26052
// bpoints := bpoints * 1.2 ;
26037: LD_ADDR_VAR 0 10
26041: PUSH
26042: LD_VAR 0 10
26046: PUSH
26047: LD_REAL  1.20000000000000E+0000
26050: MUL
26051: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26052: LD_VAR 0 6
26056: PPUSH
26057: CALL_OW 257
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: LD_INT 7
26067: PUSH
26068: LD_INT 9
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: IN
26076: PUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_INT 52
26084: PPUSH
26085: CALL_OW 321
26089: PUSH
26090: LD_INT 2
26092: EQUAL
26093: AND
26094: IFFALSE 26111
// bpoints := bpoints * 1.5 ;
26096: LD_ADDR_VAR 0 10
26100: PUSH
26101: LD_VAR 0 10
26105: PUSH
26106: LD_REAL  1.50000000000000E+0000
26109: MUL
26110: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26111: LD_VAR 0 1
26115: PPUSH
26116: LD_INT 66
26118: PPUSH
26119: CALL_OW 321
26123: PUSH
26124: LD_INT 2
26126: EQUAL
26127: IFFALSE 26144
// bpoints := bpoints * 1.1 ;
26129: LD_ADDR_VAR 0 10
26133: PUSH
26134: LD_VAR 0 10
26138: PUSH
26139: LD_REAL  1.10000000000000E+0000
26142: MUL
26143: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26144: LD_ADDR_VAR 0 10
26148: PUSH
26149: LD_VAR 0 10
26153: PUSH
26154: LD_VAR 0 6
26158: PPUSH
26159: LD_INT 1
26161: PPUSH
26162: CALL_OW 259
26166: PUSH
26167: LD_REAL  1.15000000000000E+0000
26170: MUL
26171: MUL
26172: ST_TO_ADDR
// end ; unit_vehicle :
26173: GO 26997
26175: LD_INT 2
26177: DOUBLE
26178: EQUAL
26179: IFTRUE 26183
26181: GO 26985
26183: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26184: LD_VAR 0 6
26188: PPUSH
26189: CALL_OW 264
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: LD_INT 42
26199: PUSH
26200: LD_INT 24
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: IN
26208: IFFALSE 26229
// points := [ 25 , 5 , 3 ] ;
26210: LD_ADDR_VAR 0 9
26214: PUSH
26215: LD_INT 25
26217: PUSH
26218: LD_INT 5
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26229: LD_VAR 0 6
26233: PPUSH
26234: CALL_OW 264
26238: PUSH
26239: LD_INT 4
26241: PUSH
26242: LD_INT 43
26244: PUSH
26245: LD_INT 25
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: LIST
26252: IN
26253: IFFALSE 26274
// points := [ 40 , 15 , 5 ] ;
26255: LD_ADDR_VAR 0 9
26259: PUSH
26260: LD_INT 40
26262: PUSH
26263: LD_INT 15
26265: PUSH
26266: LD_INT 5
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26274: LD_VAR 0 6
26278: PPUSH
26279: CALL_OW 264
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 23
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: IN
26294: IFFALSE 26315
// points := [ 7 , 25 , 8 ] ;
26296: LD_ADDR_VAR 0 9
26300: PUSH
26301: LD_INT 7
26303: PUSH
26304: LD_INT 25
26306: PUSH
26307: LD_INT 8
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26315: LD_VAR 0 6
26319: PPUSH
26320: CALL_OW 264
26324: PUSH
26325: LD_INT 5
26327: PUSH
26328: LD_INT 27
26330: PUSH
26331: LD_INT 44
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: LIST
26338: IN
26339: IFFALSE 26360
// points := [ 14 , 50 , 16 ] ;
26341: LD_ADDR_VAR 0 9
26345: PUSH
26346: LD_INT 14
26348: PUSH
26349: LD_INT 50
26351: PUSH
26352: LD_INT 16
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26360: LD_VAR 0 6
26364: PPUSH
26365: CALL_OW 264
26369: PUSH
26370: LD_INT 6
26372: PUSH
26373: LD_INT 46
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: IN
26380: IFFALSE 26401
// points := [ 32 , 120 , 70 ] ;
26382: LD_ADDR_VAR 0 9
26386: PUSH
26387: LD_INT 32
26389: PUSH
26390: LD_INT 120
26392: PUSH
26393: LD_INT 70
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26401: LD_VAR 0 6
26405: PPUSH
26406: CALL_OW 264
26410: PUSH
26411: LD_INT 7
26413: PUSH
26414: LD_INT 28
26416: PUSH
26417: LD_INT 45
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: LIST
26424: IN
26425: IFFALSE 26446
// points := [ 35 , 20 , 45 ] ;
26427: LD_ADDR_VAR 0 9
26431: PUSH
26432: LD_INT 35
26434: PUSH
26435: LD_INT 20
26437: PUSH
26438: LD_INT 45
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: LIST
26445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26446: LD_VAR 0 6
26450: PPUSH
26451: CALL_OW 264
26455: PUSH
26456: LD_INT 47
26458: PUSH
26459: EMPTY
26460: LIST
26461: IN
26462: IFFALSE 26483
// points := [ 67 , 45 , 75 ] ;
26464: LD_ADDR_VAR 0 9
26468: PUSH
26469: LD_INT 67
26471: PUSH
26472: LD_INT 45
26474: PUSH
26475: LD_INT 75
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26483: LD_VAR 0 6
26487: PPUSH
26488: CALL_OW 264
26492: PUSH
26493: LD_INT 26
26495: PUSH
26496: EMPTY
26497: LIST
26498: IN
26499: IFFALSE 26520
// points := [ 120 , 30 , 80 ] ;
26501: LD_ADDR_VAR 0 9
26505: PUSH
26506: LD_INT 120
26508: PUSH
26509: LD_INT 30
26511: PUSH
26512: LD_INT 80
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26520: LD_VAR 0 6
26524: PPUSH
26525: CALL_OW 264
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: EMPTY
26534: LIST
26535: IN
26536: IFFALSE 26557
// points := [ 40 , 1 , 1 ] ;
26538: LD_ADDR_VAR 0 9
26542: PUSH
26543: LD_INT 40
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 264
26566: PUSH
26567: LD_INT 29
26569: PUSH
26570: EMPTY
26571: LIST
26572: IN
26573: IFFALSE 26594
// points := [ 70 , 200 , 400 ] ;
26575: LD_ADDR_VAR 0 9
26579: PUSH
26580: LD_INT 70
26582: PUSH
26583: LD_INT 200
26585: PUSH
26586: LD_INT 400
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26594: LD_VAR 0 6
26598: PPUSH
26599: CALL_OW 264
26603: PUSH
26604: LD_INT 14
26606: PUSH
26607: LD_INT 53
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: IN
26614: IFFALSE 26635
// points := [ 40 , 10 , 20 ] ;
26616: LD_ADDR_VAR 0 9
26620: PUSH
26621: LD_INT 40
26623: PUSH
26624: LD_INT 10
26626: PUSH
26627: LD_INT 20
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26635: LD_VAR 0 6
26639: PPUSH
26640: CALL_OW 264
26644: PUSH
26645: LD_INT 9
26647: PUSH
26648: EMPTY
26649: LIST
26650: IN
26651: IFFALSE 26672
// points := [ 5 , 70 , 20 ] ;
26653: LD_ADDR_VAR 0 9
26657: PUSH
26658: LD_INT 5
26660: PUSH
26661: LD_INT 70
26663: PUSH
26664: LD_INT 20
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26672: LD_VAR 0 6
26676: PPUSH
26677: CALL_OW 264
26681: PUSH
26682: LD_INT 10
26684: PUSH
26685: EMPTY
26686: LIST
26687: IN
26688: IFFALSE 26709
// points := [ 35 , 110 , 70 ] ;
26690: LD_ADDR_VAR 0 9
26694: PUSH
26695: LD_INT 35
26697: PUSH
26698: LD_INT 110
26700: PUSH
26701: LD_INT 70
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26709: LD_VAR 0 6
26713: PPUSH
26714: CALL_OW 265
26718: PUSH
26719: LD_INT 25
26721: EQUAL
26722: IFFALSE 26743
// points := [ 80 , 65 , 100 ] ;
26724: LD_ADDR_VAR 0 9
26728: PUSH
26729: LD_INT 80
26731: PUSH
26732: LD_INT 65
26734: PUSH
26735: LD_INT 100
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26743: LD_VAR 0 6
26747: PPUSH
26748: CALL_OW 263
26752: PUSH
26753: LD_INT 1
26755: EQUAL
26756: IFFALSE 26791
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26758: LD_ADDR_VAR 0 10
26762: PUSH
26763: LD_VAR 0 10
26767: PUSH
26768: LD_VAR 0 6
26772: PPUSH
26773: CALL_OW 311
26777: PPUSH
26778: LD_INT 3
26780: PPUSH
26781: CALL_OW 259
26785: PUSH
26786: LD_INT 4
26788: MUL
26789: MUL
26790: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26791: LD_VAR 0 6
26795: PPUSH
26796: CALL_OW 263
26800: PUSH
26801: LD_INT 2
26803: EQUAL
26804: IFFALSE 26855
// begin j := IsControledBy ( i ) ;
26806: LD_ADDR_VAR 0 7
26810: PUSH
26811: LD_VAR 0 6
26815: PPUSH
26816: CALL_OW 312
26820: ST_TO_ADDR
// if j then
26821: LD_VAR 0 7
26825: IFFALSE 26855
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26827: LD_ADDR_VAR 0 10
26831: PUSH
26832: LD_VAR 0 10
26836: PUSH
26837: LD_VAR 0 7
26841: PPUSH
26842: LD_INT 3
26844: PPUSH
26845: CALL_OW 259
26849: PUSH
26850: LD_INT 3
26852: MUL
26853: MUL
26854: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26855: LD_VAR 0 6
26859: PPUSH
26860: CALL_OW 264
26864: PUSH
26865: LD_INT 5
26867: PUSH
26868: LD_INT 6
26870: PUSH
26871: LD_INT 46
26873: PUSH
26874: LD_INT 44
26876: PUSH
26877: LD_INT 47
26879: PUSH
26880: LD_INT 45
26882: PUSH
26883: LD_INT 28
26885: PUSH
26886: LD_INT 7
26888: PUSH
26889: LD_INT 27
26891: PUSH
26892: LD_INT 29
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: IN
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_INT 52
26915: PPUSH
26916: CALL_OW 321
26920: PUSH
26921: LD_INT 2
26923: EQUAL
26924: AND
26925: IFFALSE 26942
// bpoints := bpoints * 1.2 ;
26927: LD_ADDR_VAR 0 10
26931: PUSH
26932: LD_VAR 0 10
26936: PUSH
26937: LD_REAL  1.20000000000000E+0000
26940: MUL
26941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26942: LD_VAR 0 6
26946: PPUSH
26947: CALL_OW 264
26951: PUSH
26952: LD_INT 6
26954: PUSH
26955: LD_INT 46
26957: PUSH
26958: LD_INT 47
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: IN
26966: IFFALSE 26983
// bpoints := bpoints * 1.2 ;
26968: LD_ADDR_VAR 0 10
26972: PUSH
26973: LD_VAR 0 10
26977: PUSH
26978: LD_REAL  1.20000000000000E+0000
26981: MUL
26982: ST_TO_ADDR
// end ; unit_building :
26983: GO 26997
26985: LD_INT 3
26987: DOUBLE
26988: EQUAL
26989: IFTRUE 26993
26991: GO 26996
26993: POP
// ; end ;
26994: GO 26997
26996: POP
// for j = 1 to 3 do
26997: LD_ADDR_VAR 0 7
27001: PUSH
27002: DOUBLE
27003: LD_INT 1
27005: DEC
27006: ST_TO_ADDR
27007: LD_INT 3
27009: PUSH
27010: FOR_TO
27011: IFFALSE 27064
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27013: LD_ADDR_VAR 0 5
27017: PUSH
27018: LD_VAR 0 5
27022: PPUSH
27023: LD_VAR 0 7
27027: PPUSH
27028: LD_VAR 0 5
27032: PUSH
27033: LD_VAR 0 7
27037: ARRAY
27038: PUSH
27039: LD_VAR 0 9
27043: PUSH
27044: LD_VAR 0 7
27048: ARRAY
27049: PUSH
27050: LD_VAR 0 10
27054: MUL
27055: PLUS
27056: PPUSH
27057: CALL_OW 1
27061: ST_TO_ADDR
27062: GO 27010
27064: POP
27065: POP
// end ;
27066: GO 25549
27068: POP
27069: POP
// result := Replace ( result , 4 , tmp ) ;
27070: LD_ADDR_VAR 0 5
27074: PUSH
27075: LD_VAR 0 5
27079: PPUSH
27080: LD_INT 4
27082: PPUSH
27083: LD_VAR 0 8
27087: PPUSH
27088: CALL_OW 1
27092: ST_TO_ADDR
// end ;
27093: LD_VAR 0 5
27097: RET
// export function DangerAtRange ( unit , range ) ; begin
27098: LD_INT 0
27100: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27101: LD_ADDR_VAR 0 3
27105: PUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 255
27115: PPUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: CALL_OW 250
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 251
27135: PPUSH
27136: LD_VAR 0 2
27140: PPUSH
27141: CALL 25401 0 4
27145: ST_TO_ADDR
// end ;
27146: LD_VAR 0 3
27150: RET
// export function DangerInArea ( side , area ) ; begin
27151: LD_INT 0
27153: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_VAR 0 2
27163: PPUSH
27164: LD_INT 81
27166: PUSH
27167: LD_VAR 0 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 70
27180: ST_TO_ADDR
// end ;
27181: LD_VAR 0 3
27185: RET
// export function IsExtension ( b ) ; begin
27186: LD_INT 0
27188: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27189: LD_ADDR_VAR 0 2
27193: PUSH
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 23
27201: PUSH
27202: LD_INT 20
27204: PUSH
27205: LD_INT 22
27207: PUSH
27208: LD_INT 17
27210: PUSH
27211: LD_INT 24
27213: PUSH
27214: LD_INT 21
27216: PUSH
27217: LD_INT 19
27219: PUSH
27220: LD_INT 16
27222: PUSH
27223: LD_INT 25
27225: PUSH
27226: LD_INT 18
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: IN
27241: ST_TO_ADDR
// end ;
27242: LD_VAR 0 2
27246: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
27251: PPUSH
// result := [ ] ;
27252: LD_ADDR_VAR 0 3
27256: PUSH
27257: EMPTY
27258: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27259: LD_ADDR_VAR 0 4
27263: PUSH
27264: LD_VAR 0 2
27268: PPUSH
27269: LD_INT 21
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PPUSH
27279: CALL_OW 70
27283: ST_TO_ADDR
// if not tmp then
27284: LD_VAR 0 4
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27351
// for i in tmp do
27293: LD_ADDR_VAR 0 5
27297: PUSH
27298: LD_VAR 0 4
27302: PUSH
27303: FOR_IN
27304: IFFALSE 27339
// if GetBase ( i ) <> base then
27306: LD_VAR 0 5
27310: PPUSH
27311: CALL_OW 274
27315: PUSH
27316: LD_VAR 0 1
27320: NONEQUAL
27321: IFFALSE 27337
// ComLinkToBase ( base , i ) ;
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 5
27332: PPUSH
27333: CALL_OW 169
27337: GO 27303
27339: POP
27340: POP
// result := tmp ;
27341: LD_ADDR_VAR 0 3
27345: PUSH
27346: LD_VAR 0 4
27350: ST_TO_ADDR
// end ;
27351: LD_VAR 0 3
27355: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27356: LD_INT 0
27358: PPUSH
27359: PPUSH
// if BuildingStatus ( b ) = bs_build then
27360: LD_VAR 0 2
27364: PPUSH
27365: CALL_OW 461
27369: PUSH
27370: LD_INT 1
27372: EQUAL
27373: IFFALSE 27433
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27375: LD_VAR 0 1
27379: PPUSH
27380: LD_STRING h
27382: PUSH
27383: LD_VAR 0 2
27387: PPUSH
27388: CALL_OW 250
27392: PUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: CALL_OW 251
27402: PUSH
27403: LD_VAR 0 2
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: PPUSH
27429: CALL_OW 446
// end ;
27433: LD_VAR 0 3
27437: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27438: LD_INT 0
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27446: LD_VAR 0 1
27450: NOT
27451: PUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 263
27461: PUSH
27462: LD_INT 2
27464: EQUAL
27465: NOT
27466: OR
27467: IFFALSE 27471
// exit ;
27469: GO 27787
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27471: LD_ADDR_VAR 0 6
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 255
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 30
27498: PUSH
27499: LD_INT 36
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 34
27508: PUSH
27509: LD_INT 31
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PPUSH
27525: CALL_OW 69
27529: ST_TO_ADDR
// if not tmp then
27530: LD_VAR 0 6
27534: NOT
27535: IFFALSE 27539
// exit ;
27537: GO 27787
// result := [ ] ;
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: EMPTY
27545: ST_TO_ADDR
// for i in tmp do
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: LD_VAR 0 6
27555: PUSH
27556: FOR_IN
27557: IFFALSE 27628
// begin t := UnitsInside ( i ) ;
27559: LD_ADDR_VAR 0 4
27563: PUSH
27564: LD_VAR 0 3
27568: PPUSH
27569: CALL_OW 313
27573: ST_TO_ADDR
// if t then
27574: LD_VAR 0 4
27578: IFFALSE 27626
// for j in t do
27580: LD_ADDR_VAR 0 7
27584: PUSH
27585: LD_VAR 0 4
27589: PUSH
27590: FOR_IN
27591: IFFALSE 27624
// result := Insert ( result , result + 1 , j ) ;
27593: LD_ADDR_VAR 0 2
27597: PUSH
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_VAR 0 2
27607: PUSH
27608: LD_INT 1
27610: PLUS
27611: PPUSH
27612: LD_VAR 0 7
27616: PPUSH
27617: CALL_OW 2
27621: ST_TO_ADDR
27622: GO 27590
27624: POP
27625: POP
// end ;
27626: GO 27556
27628: POP
27629: POP
// if not result then
27630: LD_VAR 0 2
27634: NOT
27635: IFFALSE 27639
// exit ;
27637: GO 27787
// mech := result [ 1 ] ;
27639: LD_ADDR_VAR 0 5
27643: PUSH
27644: LD_VAR 0 2
27648: PUSH
27649: LD_INT 1
27651: ARRAY
27652: ST_TO_ADDR
// if result > 1 then
27653: LD_VAR 0 2
27657: PUSH
27658: LD_INT 1
27660: GREATER
27661: IFFALSE 27773
// for i = 2 to result do
27663: LD_ADDR_VAR 0 3
27667: PUSH
27668: DOUBLE
27669: LD_INT 2
27671: DEC
27672: ST_TO_ADDR
27673: LD_VAR 0 2
27677: PUSH
27678: FOR_TO
27679: IFFALSE 27771
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27681: LD_ADDR_VAR 0 4
27685: PUSH
27686: LD_VAR 0 2
27690: PUSH
27691: LD_VAR 0 3
27695: ARRAY
27696: PPUSH
27697: LD_INT 3
27699: PPUSH
27700: CALL_OW 259
27704: PUSH
27705: LD_VAR 0 2
27709: PUSH
27710: LD_VAR 0 3
27714: ARRAY
27715: PPUSH
27716: CALL_OW 432
27720: MINUS
27721: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27722: LD_VAR 0 4
27726: PUSH
27727: LD_VAR 0 5
27731: PPUSH
27732: LD_INT 3
27734: PPUSH
27735: CALL_OW 259
27739: PUSH
27740: LD_VAR 0 5
27744: PPUSH
27745: CALL_OW 432
27749: MINUS
27750: GREATEREQUAL
27751: IFFALSE 27769
// mech := result [ i ] ;
27753: LD_ADDR_VAR 0 5
27757: PUSH
27758: LD_VAR 0 2
27762: PUSH
27763: LD_VAR 0 3
27767: ARRAY
27768: ST_TO_ADDR
// end ;
27769: GO 27678
27771: POP
27772: POP
// ComLinkTo ( vehicle , mech ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_VAR 0 5
27782: PPUSH
27783: CALL_OW 135
// end ;
27787: LD_VAR 0 2
27791: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27792: LD_INT 0
27794: PPUSH
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
27804: PPUSH
27805: PPUSH
27806: PPUSH
// result := [ ] ;
27807: LD_ADDR_VAR 0 7
27811: PUSH
27812: EMPTY
27813: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 266
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: IN
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 29470
// if name then
27839: LD_VAR 0 3
27843: IFFALSE 27859
// SetBName ( base_dep , name ) ;
27845: LD_VAR 0 1
27849: PPUSH
27850: LD_VAR 0 3
27854: PPUSH
27855: CALL_OW 500
// base := GetBase ( base_dep ) ;
27859: LD_ADDR_VAR 0 15
27863: PUSH
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL_OW 274
27873: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27874: LD_ADDR_VAR 0 16
27878: PUSH
27879: LD_VAR 0 1
27883: PPUSH
27884: CALL_OW 255
27888: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27889: LD_ADDR_VAR 0 17
27893: PUSH
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL_OW 248
27903: ST_TO_ADDR
// if sources then
27904: LD_VAR 0 5
27908: IFFALSE 27955
// for i = 1 to 3 do
27910: LD_ADDR_VAR 0 8
27914: PUSH
27915: DOUBLE
27916: LD_INT 1
27918: DEC
27919: ST_TO_ADDR
27920: LD_INT 3
27922: PUSH
27923: FOR_TO
27924: IFFALSE 27953
// AddResourceType ( base , i , sources [ i ] ) ;
27926: LD_VAR 0 15
27930: PPUSH
27931: LD_VAR 0 8
27935: PPUSH
27936: LD_VAR 0 5
27940: PUSH
27941: LD_VAR 0 8
27945: ARRAY
27946: PPUSH
27947: CALL_OW 276
27951: GO 27923
27953: POP
27954: POP
// buildings := GetBaseBuildings ( base , area ) ;
27955: LD_ADDR_VAR 0 18
27959: PUSH
27960: LD_VAR 0 15
27964: PPUSH
27965: LD_VAR 0 2
27969: PPUSH
27970: CALL 27247 0 2
27974: ST_TO_ADDR
// InitHc ;
27975: CALL_OW 19
// InitUc ;
27979: CALL_OW 18
// uc_side := side ;
27983: LD_ADDR_OWVAR 20
27987: PUSH
27988: LD_VAR 0 16
27992: ST_TO_ADDR
// uc_nation := nation ;
27993: LD_ADDR_OWVAR 21
27997: PUSH
27998: LD_VAR 0 17
28002: ST_TO_ADDR
// if buildings then
28003: LD_VAR 0 18
28007: IFFALSE 29329
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28009: LD_ADDR_VAR 0 19
28013: PUSH
28014: LD_VAR 0 18
28018: PPUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 30
28024: PUSH
28025: LD_INT 29
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 30
28034: PUSH
28035: LD_INT 30
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 72
28051: ST_TO_ADDR
// if tmp then
28052: LD_VAR 0 19
28056: IFFALSE 28104
// for i in tmp do
28058: LD_ADDR_VAR 0 8
28062: PUSH
28063: LD_VAR 0 19
28067: PUSH
28068: FOR_IN
28069: IFFALSE 28102
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28071: LD_VAR 0 8
28075: PPUSH
28076: CALL_OW 250
28080: PPUSH
28081: LD_VAR 0 8
28085: PPUSH
28086: CALL_OW 251
28090: PPUSH
28091: LD_VAR 0 16
28095: PPUSH
28096: CALL_OW 441
28100: GO 28068
28102: POP
28103: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28104: LD_VAR 0 18
28108: PPUSH
28109: LD_INT 2
28111: PUSH
28112: LD_INT 30
28114: PUSH
28115: LD_INT 32
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 30
28124: PUSH
28125: LD_INT 33
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: PPUSH
28137: CALL_OW 72
28141: IFFALSE 28229
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28143: LD_ADDR_VAR 0 8
28147: PUSH
28148: LD_VAR 0 18
28152: PPUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 30
28158: PUSH
28159: LD_INT 32
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 30
28168: PUSH
28169: LD_INT 33
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: PPUSH
28181: CALL_OW 72
28185: PUSH
28186: FOR_IN
28187: IFFALSE 28227
// begin if not GetBWeapon ( i ) then
28189: LD_VAR 0 8
28193: PPUSH
28194: CALL_OW 269
28198: NOT
28199: IFFALSE 28225
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28201: LD_VAR 0 8
28205: PPUSH
28206: LD_VAR 0 8
28210: PPUSH
28211: LD_VAR 0 2
28215: PPUSH
28216: CALL 29475 0 2
28220: PPUSH
28221: CALL_OW 431
// end ;
28225: GO 28186
28227: POP
28228: POP
// end ; for i = 1 to personel do
28229: LD_ADDR_VAR 0 8
28233: PUSH
28234: DOUBLE
28235: LD_INT 1
28237: DEC
28238: ST_TO_ADDR
28239: LD_VAR 0 6
28243: PUSH
28244: FOR_TO
28245: IFFALSE 29309
// begin if i > 4 then
28247: LD_VAR 0 8
28251: PUSH
28252: LD_INT 4
28254: GREATER
28255: IFFALSE 28259
// break ;
28257: GO 29309
// case i of 1 :
28259: LD_VAR 0 8
28263: PUSH
28264: LD_INT 1
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28352
28272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28273: LD_ADDR_VAR 0 12
28277: PUSH
28278: LD_VAR 0 18
28282: PPUSH
28283: LD_INT 22
28285: PUSH
28286: LD_VAR 0 16
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 58
28297: PUSH
28298: EMPTY
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 30
28306: PUSH
28307: LD_INT 32
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 30
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 30
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: PPUSH
28345: CALL_OW 72
28349: ST_TO_ADDR
28350: GO 28574
28352: LD_INT 2
28354: DOUBLE
28355: EQUAL
28356: IFTRUE 28360
28358: GO 28422
28360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28361: LD_ADDR_VAR 0 12
28365: PUSH
28366: LD_VAR 0 18
28370: PPUSH
28371: LD_INT 22
28373: PUSH
28374: LD_VAR 0 16
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 30
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 30
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PPUSH
28415: CALL_OW 72
28419: ST_TO_ADDR
28420: GO 28574
28422: LD_INT 3
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28430
28428: GO 28492
28430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28431: LD_ADDR_VAR 0 12
28435: PUSH
28436: LD_VAR 0 18
28440: PPUSH
28441: LD_INT 22
28443: PUSH
28444: LD_VAR 0 16
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 30
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 30
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PPUSH
28485: CALL_OW 72
28489: ST_TO_ADDR
28490: GO 28574
28492: LD_INT 4
28494: DOUBLE
28495: EQUAL
28496: IFTRUE 28500
28498: GO 28573
28500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28501: LD_ADDR_VAR 0 12
28505: PUSH
28506: LD_VAR 0 18
28510: PPUSH
28511: LD_INT 22
28513: PUSH
28514: LD_VAR 0 16
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 30
28528: PUSH
28529: LD_INT 6
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 30
28538: PUSH
28539: LD_INT 7
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 30
28548: PUSH
28549: LD_INT 8
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 72
28570: ST_TO_ADDR
28571: GO 28574
28573: POP
// if i = 1 then
28574: LD_VAR 0 8
28578: PUSH
28579: LD_INT 1
28581: EQUAL
28582: IFFALSE 28693
// begin tmp := [ ] ;
28584: LD_ADDR_VAR 0 19
28588: PUSH
28589: EMPTY
28590: ST_TO_ADDR
// for j in f do
28591: LD_ADDR_VAR 0 9
28595: PUSH
28596: LD_VAR 0 12
28600: PUSH
28601: FOR_IN
28602: IFFALSE 28675
// if GetBType ( j ) = b_bunker then
28604: LD_VAR 0 9
28608: PPUSH
28609: CALL_OW 266
28613: PUSH
28614: LD_INT 32
28616: EQUAL
28617: IFFALSE 28644
// tmp := Insert ( tmp , 1 , j ) else
28619: LD_ADDR_VAR 0 19
28623: PUSH
28624: LD_VAR 0 19
28628: PPUSH
28629: LD_INT 1
28631: PPUSH
28632: LD_VAR 0 9
28636: PPUSH
28637: CALL_OW 2
28641: ST_TO_ADDR
28642: GO 28673
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28644: LD_ADDR_VAR 0 19
28648: PUSH
28649: LD_VAR 0 19
28653: PPUSH
28654: LD_VAR 0 19
28658: PUSH
28659: LD_INT 1
28661: PLUS
28662: PPUSH
28663: LD_VAR 0 9
28667: PPUSH
28668: CALL_OW 2
28672: ST_TO_ADDR
28673: GO 28601
28675: POP
28676: POP
// if tmp then
28677: LD_VAR 0 19
28681: IFFALSE 28693
// f := tmp ;
28683: LD_ADDR_VAR 0 12
28687: PUSH
28688: LD_VAR 0 19
28692: ST_TO_ADDR
// end ; x := personel [ i ] ;
28693: LD_ADDR_VAR 0 13
28697: PUSH
28698: LD_VAR 0 6
28702: PUSH
28703: LD_VAR 0 8
28707: ARRAY
28708: ST_TO_ADDR
// if x = - 1 then
28709: LD_VAR 0 13
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: EQUAL
28718: IFFALSE 28927
// begin for j in f do
28720: LD_ADDR_VAR 0 9
28724: PUSH
28725: LD_VAR 0 12
28729: PUSH
28730: FOR_IN
28731: IFFALSE 28923
// repeat InitHc ;
28733: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28737: LD_VAR 0 9
28741: PPUSH
28742: CALL_OW 266
28746: PUSH
28747: LD_INT 5
28749: EQUAL
28750: IFFALSE 28820
// begin if UnitsInside ( j ) < 3 then
28752: LD_VAR 0 9
28756: PPUSH
28757: CALL_OW 313
28761: PUSH
28762: LD_INT 3
28764: LESS
28765: IFFALSE 28801
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28767: LD_INT 0
28769: PPUSH
28770: LD_INT 5
28772: PUSH
28773: LD_INT 8
28775: PUSH
28776: LD_INT 9
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: PUSH
28784: LD_VAR 0 17
28788: ARRAY
28789: PPUSH
28790: LD_VAR 0 4
28794: PPUSH
28795: CALL_OW 380
28799: GO 28818
// PrepareHuman ( false , i , skill ) ;
28801: LD_INT 0
28803: PPUSH
28804: LD_VAR 0 8
28808: PPUSH
28809: LD_VAR 0 4
28813: PPUSH
28814: CALL_OW 380
// end else
28818: GO 28837
// PrepareHuman ( false , i , skill ) ;
28820: LD_INT 0
28822: PPUSH
28823: LD_VAR 0 8
28827: PPUSH
28828: LD_VAR 0 4
28832: PPUSH
28833: CALL_OW 380
// un := CreateHuman ;
28837: LD_ADDR_VAR 0 14
28841: PUSH
28842: CALL_OW 44
28846: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28847: LD_ADDR_VAR 0 7
28851: PUSH
28852: LD_VAR 0 7
28856: PPUSH
28857: LD_INT 1
28859: PPUSH
28860: LD_VAR 0 14
28864: PPUSH
28865: CALL_OW 2
28869: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28870: LD_VAR 0 14
28874: PPUSH
28875: LD_VAR 0 9
28879: PPUSH
28880: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28884: LD_VAR 0 9
28888: PPUSH
28889: CALL_OW 313
28893: PUSH
28894: LD_INT 6
28896: EQUAL
28897: PUSH
28898: LD_VAR 0 9
28902: PPUSH
28903: CALL_OW 266
28907: PUSH
28908: LD_INT 32
28910: PUSH
28911: LD_INT 31
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: IN
28918: OR
28919: IFFALSE 28733
28921: GO 28730
28923: POP
28924: POP
// end else
28925: GO 29307
// for j = 1 to x do
28927: LD_ADDR_VAR 0 9
28931: PUSH
28932: DOUBLE
28933: LD_INT 1
28935: DEC
28936: ST_TO_ADDR
28937: LD_VAR 0 13
28941: PUSH
28942: FOR_TO
28943: IFFALSE 29305
// begin InitHc ;
28945: CALL_OW 19
// if not f then
28949: LD_VAR 0 12
28953: NOT
28954: IFFALSE 29043
// begin PrepareHuman ( false , i , skill ) ;
28956: LD_INT 0
28958: PPUSH
28959: LD_VAR 0 8
28963: PPUSH
28964: LD_VAR 0 4
28968: PPUSH
28969: CALL_OW 380
// un := CreateHuman ;
28973: LD_ADDR_VAR 0 14
28977: PUSH
28978: CALL_OW 44
28982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28983: LD_ADDR_VAR 0 7
28987: PUSH
28988: LD_VAR 0 7
28992: PPUSH
28993: LD_INT 1
28995: PPUSH
28996: LD_VAR 0 14
29000: PPUSH
29001: CALL_OW 2
29005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29006: LD_VAR 0 14
29010: PPUSH
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 250
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 251
29030: PPUSH
29031: LD_INT 10
29033: PPUSH
29034: LD_INT 0
29036: PPUSH
29037: CALL_OW 50
// continue ;
29041: GO 28942
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29043: LD_VAR 0 12
29047: PUSH
29048: LD_INT 1
29050: ARRAY
29051: PPUSH
29052: CALL_OW 313
29056: PUSH
29057: LD_VAR 0 12
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: PPUSH
29066: CALL_OW 266
29070: PUSH
29071: LD_INT 32
29073: PUSH
29074: LD_INT 31
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: IN
29081: AND
29082: PUSH
29083: LD_VAR 0 12
29087: PUSH
29088: LD_INT 1
29090: ARRAY
29091: PPUSH
29092: CALL_OW 313
29096: PUSH
29097: LD_INT 6
29099: EQUAL
29100: OR
29101: IFFALSE 29121
// f := Delete ( f , 1 ) ;
29103: LD_ADDR_VAR 0 12
29107: PUSH
29108: LD_VAR 0 12
29112: PPUSH
29113: LD_INT 1
29115: PPUSH
29116: CALL_OW 3
29120: ST_TO_ADDR
// if not f then
29121: LD_VAR 0 12
29125: NOT
29126: IFFALSE 29144
// begin x := x + 2 ;
29128: LD_ADDR_VAR 0 13
29132: PUSH
29133: LD_VAR 0 13
29137: PUSH
29138: LD_INT 2
29140: PLUS
29141: ST_TO_ADDR
// continue ;
29142: GO 28942
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29144: LD_VAR 0 12
29148: PUSH
29149: LD_INT 1
29151: ARRAY
29152: PPUSH
29153: CALL_OW 266
29157: PUSH
29158: LD_INT 5
29160: EQUAL
29161: IFFALSE 29235
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29163: LD_VAR 0 12
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PPUSH
29172: CALL_OW 313
29176: PUSH
29177: LD_INT 3
29179: LESS
29180: IFFALSE 29216
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29182: LD_INT 0
29184: PPUSH
29185: LD_INT 5
29187: PUSH
29188: LD_INT 8
29190: PUSH
29191: LD_INT 9
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: PUSH
29199: LD_VAR 0 17
29203: ARRAY
29204: PPUSH
29205: LD_VAR 0 4
29209: PPUSH
29210: CALL_OW 380
29214: GO 29233
// PrepareHuman ( false , i , skill ) ;
29216: LD_INT 0
29218: PPUSH
29219: LD_VAR 0 8
29223: PPUSH
29224: LD_VAR 0 4
29228: PPUSH
29229: CALL_OW 380
// end else
29233: GO 29252
// PrepareHuman ( false , i , skill ) ;
29235: LD_INT 0
29237: PPUSH
29238: LD_VAR 0 8
29242: PPUSH
29243: LD_VAR 0 4
29247: PPUSH
29248: CALL_OW 380
// un := CreateHuman ;
29252: LD_ADDR_VAR 0 14
29256: PUSH
29257: CALL_OW 44
29261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29262: LD_ADDR_VAR 0 7
29266: PUSH
29267: LD_VAR 0 7
29271: PPUSH
29272: LD_INT 1
29274: PPUSH
29275: LD_VAR 0 14
29279: PPUSH
29280: CALL_OW 2
29284: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29285: LD_VAR 0 14
29289: PPUSH
29290: LD_VAR 0 12
29294: PUSH
29295: LD_INT 1
29297: ARRAY
29298: PPUSH
29299: CALL_OW 52
// end ;
29303: GO 28942
29305: POP
29306: POP
// end ;
29307: GO 28244
29309: POP
29310: POP
// result := result ^ buildings ;
29311: LD_ADDR_VAR 0 7
29315: PUSH
29316: LD_VAR 0 7
29320: PUSH
29321: LD_VAR 0 18
29325: ADD
29326: ST_TO_ADDR
// end else
29327: GO 29470
// begin for i = 1 to personel do
29329: LD_ADDR_VAR 0 8
29333: PUSH
29334: DOUBLE
29335: LD_INT 1
29337: DEC
29338: ST_TO_ADDR
29339: LD_VAR 0 6
29343: PUSH
29344: FOR_TO
29345: IFFALSE 29468
// begin if i > 4 then
29347: LD_VAR 0 8
29351: PUSH
29352: LD_INT 4
29354: GREATER
29355: IFFALSE 29359
// break ;
29357: GO 29468
// x := personel [ i ] ;
29359: LD_ADDR_VAR 0 13
29363: PUSH
29364: LD_VAR 0 6
29368: PUSH
29369: LD_VAR 0 8
29373: ARRAY
29374: ST_TO_ADDR
// if x = - 1 then
29375: LD_VAR 0 13
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: EQUAL
29384: IFFALSE 29388
// continue ;
29386: GO 29344
// PrepareHuman ( false , i , skill ) ;
29388: LD_INT 0
29390: PPUSH
29391: LD_VAR 0 8
29395: PPUSH
29396: LD_VAR 0 4
29400: PPUSH
29401: CALL_OW 380
// un := CreateHuman ;
29405: LD_ADDR_VAR 0 14
29409: PUSH
29410: CALL_OW 44
29414: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29415: LD_VAR 0 14
29419: PPUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 250
29429: PPUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 251
29439: PPUSH
29440: LD_INT 10
29442: PPUSH
29443: LD_INT 0
29445: PPUSH
29446: CALL_OW 50
// result := result ^ un ;
29450: LD_ADDR_VAR 0 7
29454: PUSH
29455: LD_VAR 0 7
29459: PUSH
29460: LD_VAR 0 14
29464: ADD
29465: ST_TO_ADDR
// end ;
29466: GO 29344
29468: POP
29469: POP
// end ; end ;
29470: LD_VAR 0 7
29474: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29475: LD_INT 0
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
// result := false ;
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_INT 0
29500: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29501: LD_VAR 0 1
29505: NOT
29506: PUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 266
29516: PUSH
29517: LD_INT 32
29519: PUSH
29520: LD_INT 33
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: IN
29527: NOT
29528: OR
29529: IFFALSE 29533
// exit ;
29531: GO 30669
// nat := GetNation ( tower ) ;
29533: LD_ADDR_VAR 0 12
29537: PUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 248
29547: ST_TO_ADDR
// side := GetSide ( tower ) ;
29548: LD_ADDR_VAR 0 16
29552: PUSH
29553: LD_VAR 0 1
29557: PPUSH
29558: CALL_OW 255
29562: ST_TO_ADDR
// x := GetX ( tower ) ;
29563: LD_ADDR_VAR 0 10
29567: PUSH
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 250
29577: ST_TO_ADDR
// y := GetY ( tower ) ;
29578: LD_ADDR_VAR 0 11
29582: PUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 251
29592: ST_TO_ADDR
// if not x or not y then
29593: LD_VAR 0 10
29597: NOT
29598: PUSH
29599: LD_VAR 0 11
29603: NOT
29604: OR
29605: IFFALSE 29609
// exit ;
29607: GO 30669
// weapon := 0 ;
29609: LD_ADDR_VAR 0 18
29613: PUSH
29614: LD_INT 0
29616: ST_TO_ADDR
// fac_list := [ ] ;
29617: LD_ADDR_VAR 0 17
29621: PUSH
29622: EMPTY
29623: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29624: LD_ADDR_VAR 0 6
29628: PUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 274
29638: PPUSH
29639: LD_VAR 0 2
29643: PPUSH
29644: CALL 27247 0 2
29648: PPUSH
29649: LD_INT 30
29651: PUSH
29652: LD_INT 3
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 72
29663: ST_TO_ADDR
// if not factories then
29664: LD_VAR 0 6
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 30669
// for i in factories do
29673: LD_ADDR_VAR 0 8
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: FOR_IN
29684: IFFALSE 29709
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29686: LD_ADDR_VAR 0 17
29690: PUSH
29691: LD_VAR 0 17
29695: PUSH
29696: LD_VAR 0 8
29700: PPUSH
29701: CALL_OW 478
29705: UNION
29706: ST_TO_ADDR
29707: GO 29683
29709: POP
29710: POP
// if not fac_list then
29711: LD_VAR 0 17
29715: NOT
29716: IFFALSE 29720
// exit ;
29718: GO 30669
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29720: LD_ADDR_VAR 0 5
29724: PUSH
29725: LD_INT 4
29727: PUSH
29728: LD_INT 5
29730: PUSH
29731: LD_INT 9
29733: PUSH
29734: LD_INT 10
29736: PUSH
29737: LD_INT 6
29739: PUSH
29740: LD_INT 7
29742: PUSH
29743: LD_INT 11
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 27
29757: PUSH
29758: LD_INT 28
29760: PUSH
29761: LD_INT 26
29763: PUSH
29764: LD_INT 30
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 43
29775: PUSH
29776: LD_INT 44
29778: PUSH
29779: LD_INT 46
29781: PUSH
29782: LD_INT 45
29784: PUSH
29785: LD_INT 47
29787: PUSH
29788: LD_INT 49
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: PUSH
29804: LD_VAR 0 12
29808: ARRAY
29809: ST_TO_ADDR
// for i in list do
29810: LD_ADDR_VAR 0 8
29814: PUSH
29815: LD_VAR 0 5
29819: PUSH
29820: FOR_IN
29821: IFFALSE 29854
// if not i in fac_list then
29823: LD_VAR 0 8
29827: PUSH
29828: LD_VAR 0 17
29832: IN
29833: NOT
29834: IFFALSE 29852
// list := list diff i ;
29836: LD_ADDR_VAR 0 5
29840: PUSH
29841: LD_VAR 0 5
29845: PUSH
29846: LD_VAR 0 8
29850: DIFF
29851: ST_TO_ADDR
29852: GO 29820
29854: POP
29855: POP
// if not list then
29856: LD_VAR 0 5
29860: NOT
29861: IFFALSE 29865
// exit ;
29863: GO 30669
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29865: LD_VAR 0 12
29869: PUSH
29870: LD_INT 3
29872: EQUAL
29873: PUSH
29874: LD_INT 49
29876: PUSH
29877: LD_VAR 0 5
29881: IN
29882: AND
29883: PUSH
29884: LD_INT 31
29886: PPUSH
29887: LD_VAR 0 16
29891: PPUSH
29892: CALL_OW 321
29896: PUSH
29897: LD_INT 2
29899: EQUAL
29900: AND
29901: IFFALSE 29961
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29903: LD_INT 22
29905: PUSH
29906: LD_VAR 0 16
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 35
29917: PUSH
29918: LD_INT 49
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 91
29927: PUSH
29928: LD_VAR 0 1
29932: PUSH
29933: LD_INT 10
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: PPUSH
29946: CALL_OW 69
29950: NOT
29951: IFFALSE 29961
// weapon := ru_time_lapser ;
29953: LD_ADDR_VAR 0 18
29957: PUSH
29958: LD_INT 49
29960: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29961: LD_VAR 0 12
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: IN
29976: PUSH
29977: LD_INT 11
29979: PUSH
29980: LD_VAR 0 5
29984: IN
29985: PUSH
29986: LD_INT 30
29988: PUSH
29989: LD_VAR 0 5
29993: IN
29994: OR
29995: AND
29996: PUSH
29997: LD_INT 6
29999: PPUSH
30000: LD_VAR 0 16
30004: PPUSH
30005: CALL_OW 321
30009: PUSH
30010: LD_INT 2
30012: EQUAL
30013: AND
30014: IFFALSE 30179
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30016: LD_INT 22
30018: PUSH
30019: LD_VAR 0 16
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 35
30033: PUSH
30034: LD_INT 11
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 35
30043: PUSH
30044: LD_INT 30
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 91
30058: PUSH
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 18
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: PPUSH
30077: CALL_OW 69
30081: NOT
30082: PUSH
30083: LD_INT 22
30085: PUSH
30086: LD_VAR 0 16
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: LD_INT 30
30100: PUSH
30101: LD_INT 32
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 30
30110: PUSH
30111: LD_INT 33
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 91
30125: PUSH
30126: LD_VAR 0 1
30130: PUSH
30131: LD_INT 12
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: PPUSH
30147: CALL_OW 69
30151: PUSH
30152: LD_INT 2
30154: GREATER
30155: AND
30156: IFFALSE 30179
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30158: LD_ADDR_VAR 0 18
30162: PUSH
30163: LD_INT 11
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_VAR 0 12
30177: ARRAY
30178: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30179: LD_VAR 0 18
30183: NOT
30184: PUSH
30185: LD_INT 40
30187: PPUSH
30188: LD_VAR 0 16
30192: PPUSH
30193: CALL_OW 321
30197: PUSH
30198: LD_INT 2
30200: EQUAL
30201: AND
30202: PUSH
30203: LD_INT 7
30205: PUSH
30206: LD_VAR 0 5
30210: IN
30211: PUSH
30212: LD_INT 28
30214: PUSH
30215: LD_VAR 0 5
30219: IN
30220: OR
30221: PUSH
30222: LD_INT 45
30224: PUSH
30225: LD_VAR 0 5
30229: IN
30230: OR
30231: AND
30232: IFFALSE 30486
// begin hex := GetHexInfo ( x , y ) ;
30234: LD_ADDR_VAR 0 4
30238: PUSH
30239: LD_VAR 0 10
30243: PPUSH
30244: LD_VAR 0 11
30248: PPUSH
30249: CALL_OW 546
30253: ST_TO_ADDR
// if hex [ 1 ] then
30254: LD_VAR 0 4
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: IFFALSE 30266
// exit ;
30264: GO 30669
// height := hex [ 2 ] ;
30266: LD_ADDR_VAR 0 15
30270: PUSH
30271: LD_VAR 0 4
30275: PUSH
30276: LD_INT 2
30278: ARRAY
30279: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30280: LD_ADDR_VAR 0 14
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 5
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: ST_TO_ADDR
// for i in tmp do
30303: LD_ADDR_VAR 0 8
30307: PUSH
30308: LD_VAR 0 14
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30484
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30316: LD_ADDR_VAR 0 9
30320: PUSH
30321: LD_VAR 0 10
30325: PPUSH
30326: LD_VAR 0 8
30330: PPUSH
30331: LD_INT 5
30333: PPUSH
30334: CALL_OW 272
30338: PUSH
30339: LD_VAR 0 11
30343: PPUSH
30344: LD_VAR 0 8
30348: PPUSH
30349: LD_INT 5
30351: PPUSH
30352: CALL_OW 273
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30361: LD_VAR 0 9
30365: PUSH
30366: LD_INT 1
30368: ARRAY
30369: PPUSH
30370: LD_VAR 0 9
30374: PUSH
30375: LD_INT 2
30377: ARRAY
30378: PPUSH
30379: CALL_OW 488
30383: IFFALSE 30482
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30385: LD_ADDR_VAR 0 4
30389: PUSH
30390: LD_VAR 0 9
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: PPUSH
30399: LD_VAR 0 9
30403: PUSH
30404: LD_INT 2
30406: ARRAY
30407: PPUSH
30408: CALL_OW 546
30412: ST_TO_ADDR
// if hex [ 1 ] then
30413: LD_VAR 0 4
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: IFFALSE 30425
// continue ;
30423: GO 30313
// h := hex [ 2 ] ;
30425: LD_ADDR_VAR 0 13
30429: PUSH
30430: LD_VAR 0 4
30434: PUSH
30435: LD_INT 2
30437: ARRAY
30438: ST_TO_ADDR
// if h + 7 < height then
30439: LD_VAR 0 13
30443: PUSH
30444: LD_INT 7
30446: PLUS
30447: PUSH
30448: LD_VAR 0 15
30452: LESS
30453: IFFALSE 30482
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30455: LD_ADDR_VAR 0 18
30459: PUSH
30460: LD_INT 7
30462: PUSH
30463: LD_INT 28
30465: PUSH
30466: LD_INT 45
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: PUSH
30474: LD_VAR 0 12
30478: ARRAY
30479: ST_TO_ADDR
// break ;
30480: GO 30484
// end ; end ; end ;
30482: GO 30313
30484: POP
30485: POP
// end ; if not weapon then
30486: LD_VAR 0 18
30490: NOT
30491: IFFALSE 30551
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_VAR 0 5
30502: PUSH
30503: LD_INT 11
30505: PUSH
30506: LD_INT 30
30508: PUSH
30509: LD_INT 49
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: DIFF
30517: ST_TO_ADDR
// if not list then
30518: LD_VAR 0 5
30522: NOT
30523: IFFALSE 30527
// exit ;
30525: GO 30669
// weapon := list [ rand ( 1 , list ) ] ;
30527: LD_ADDR_VAR 0 18
30531: PUSH
30532: LD_VAR 0 5
30536: PUSH
30537: LD_INT 1
30539: PPUSH
30540: LD_VAR 0 5
30544: PPUSH
30545: CALL_OW 12
30549: ARRAY
30550: ST_TO_ADDR
// end ; if weapon then
30551: LD_VAR 0 18
30555: IFFALSE 30669
// begin tmp := CostOfWeapon ( weapon ) ;
30557: LD_ADDR_VAR 0 14
30561: PUSH
30562: LD_VAR 0 18
30566: PPUSH
30567: CALL_OW 451
30571: ST_TO_ADDR
// j := GetBase ( tower ) ;
30572: LD_ADDR_VAR 0 9
30576: PUSH
30577: LD_VAR 0 1
30581: PPUSH
30582: CALL_OW 274
30586: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30587: LD_VAR 0 9
30591: PPUSH
30592: LD_INT 1
30594: PPUSH
30595: CALL_OW 275
30599: PUSH
30600: LD_VAR 0 14
30604: PUSH
30605: LD_INT 1
30607: ARRAY
30608: GREATEREQUAL
30609: PUSH
30610: LD_VAR 0 9
30614: PPUSH
30615: LD_INT 2
30617: PPUSH
30618: CALL_OW 275
30622: PUSH
30623: LD_VAR 0 14
30627: PUSH
30628: LD_INT 2
30630: ARRAY
30631: GREATEREQUAL
30632: AND
30633: PUSH
30634: LD_VAR 0 9
30638: PPUSH
30639: LD_INT 3
30641: PPUSH
30642: CALL_OW 275
30646: PUSH
30647: LD_VAR 0 14
30651: PUSH
30652: LD_INT 3
30654: ARRAY
30655: GREATEREQUAL
30656: AND
30657: IFFALSE 30669
// result := weapon ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_VAR 0 18
30668: ST_TO_ADDR
// end ; end ;
30669: LD_VAR 0 3
30673: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30674: LD_INT 0
30676: PPUSH
30677: PPUSH
// result := true ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_INT 1
30685: ST_TO_ADDR
// if array1 = array2 then
30686: LD_VAR 0 1
30690: PUSH
30691: LD_VAR 0 2
30695: EQUAL
30696: IFFALSE 30756
// begin for i = 1 to array1 do
30698: LD_ADDR_VAR 0 4
30702: PUSH
30703: DOUBLE
30704: LD_INT 1
30706: DEC
30707: ST_TO_ADDR
30708: LD_VAR 0 1
30712: PUSH
30713: FOR_TO
30714: IFFALSE 30752
// if array1 [ i ] <> array2 [ i ] then
30716: LD_VAR 0 1
30720: PUSH
30721: LD_VAR 0 4
30725: ARRAY
30726: PUSH
30727: LD_VAR 0 2
30731: PUSH
30732: LD_VAR 0 4
30736: ARRAY
30737: NONEQUAL
30738: IFFALSE 30750
// begin result := false ;
30740: LD_ADDR_VAR 0 3
30744: PUSH
30745: LD_INT 0
30747: ST_TO_ADDR
// break ;
30748: GO 30752
// end ;
30750: GO 30713
30752: POP
30753: POP
// end else
30754: GO 30764
// result := false ;
30756: LD_ADDR_VAR 0 3
30760: PUSH
30761: LD_INT 0
30763: ST_TO_ADDR
// end ;
30764: LD_VAR 0 3
30768: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30769: LD_INT 0
30771: PPUSH
30772: PPUSH
30773: PPUSH
// pom := GetBase ( fac ) ;
30774: LD_ADDR_VAR 0 5
30778: PUSH
30779: LD_VAR 0 1
30783: PPUSH
30784: CALL_OW 274
30788: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30789: LD_ADDR_VAR 0 4
30793: PUSH
30794: LD_VAR 0 2
30798: PUSH
30799: LD_INT 1
30801: ARRAY
30802: PPUSH
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 2
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 2
30816: PUSH
30817: LD_INT 3
30819: ARRAY
30820: PPUSH
30821: LD_VAR 0 2
30825: PUSH
30826: LD_INT 4
30828: ARRAY
30829: PPUSH
30830: CALL_OW 449
30834: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_VAR 0 5
30844: PPUSH
30845: LD_INT 1
30847: PPUSH
30848: CALL_OW 275
30852: PUSH
30853: LD_VAR 0 4
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: GREATEREQUAL
30862: PUSH
30863: LD_VAR 0 5
30867: PPUSH
30868: LD_INT 2
30870: PPUSH
30871: CALL_OW 275
30875: PUSH
30876: LD_VAR 0 4
30880: PUSH
30881: LD_INT 2
30883: ARRAY
30884: GREATEREQUAL
30885: AND
30886: PUSH
30887: LD_VAR 0 5
30891: PPUSH
30892: LD_INT 3
30894: PPUSH
30895: CALL_OW 275
30899: PUSH
30900: LD_VAR 0 4
30904: PUSH
30905: LD_INT 3
30907: ARRAY
30908: GREATEREQUAL
30909: AND
30910: ST_TO_ADDR
// end ;
30911: LD_VAR 0 3
30915: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
// pom := GetBase ( building ) ;
30922: LD_ADDR_VAR 0 3
30926: PUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 274
30936: ST_TO_ADDR
// if not pom then
30937: LD_VAR 0 3
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31116
// btype := GetBType ( building ) ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 266
30960: ST_TO_ADDR
// if btype = b_armoury then
30961: LD_VAR 0 5
30965: PUSH
30966: LD_INT 4
30968: EQUAL
30969: IFFALSE 30979
// btype := b_barracks ;
30971: LD_ADDR_VAR 0 5
30975: PUSH
30976: LD_INT 5
30978: ST_TO_ADDR
// if btype = b_depot then
30979: LD_VAR 0 5
30983: PUSH
30984: LD_INT 0
30986: EQUAL
30987: IFFALSE 30997
// btype := b_warehouse ;
30989: LD_ADDR_VAR 0 5
30993: PUSH
30994: LD_INT 1
30996: ST_TO_ADDR
// if btype = b_workshop then
30997: LD_VAR 0 5
31001: PUSH
31002: LD_INT 2
31004: EQUAL
31005: IFFALSE 31015
// btype := b_factory ;
31007: LD_ADDR_VAR 0 5
31011: PUSH
31012: LD_INT 3
31014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31015: LD_ADDR_VAR 0 4
31019: PUSH
31020: LD_VAR 0 5
31024: PPUSH
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 248
31034: PPUSH
31035: CALL_OW 450
31039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_VAR 0 3
31049: PPUSH
31050: LD_INT 1
31052: PPUSH
31053: CALL_OW 275
31057: PUSH
31058: LD_VAR 0 4
31062: PUSH
31063: LD_INT 1
31065: ARRAY
31066: GREATEREQUAL
31067: PUSH
31068: LD_VAR 0 3
31072: PPUSH
31073: LD_INT 2
31075: PPUSH
31076: CALL_OW 275
31080: PUSH
31081: LD_VAR 0 4
31085: PUSH
31086: LD_INT 2
31088: ARRAY
31089: GREATEREQUAL
31090: AND
31091: PUSH
31092: LD_VAR 0 3
31096: PPUSH
31097: LD_INT 3
31099: PPUSH
31100: CALL_OW 275
31104: PUSH
31105: LD_VAR 0 4
31109: PUSH
31110: LD_INT 3
31112: ARRAY
31113: GREATEREQUAL
31114: AND
31115: ST_TO_ADDR
// end ;
31116: LD_VAR 0 2
31120: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31121: LD_INT 0
31123: PPUSH
31124: PPUSH
31125: PPUSH
// pom := GetBase ( building ) ;
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 274
31140: ST_TO_ADDR
// if not pom then
31141: LD_VAR 0 4
31145: NOT
31146: IFFALSE 31150
// exit ;
31148: GO 31251
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31150: LD_ADDR_VAR 0 5
31154: PUSH
31155: LD_VAR 0 2
31159: PPUSH
31160: LD_VAR 0 1
31164: PPUSH
31165: CALL_OW 248
31169: PPUSH
31170: CALL_OW 450
31174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_VAR 0 4
31184: PPUSH
31185: LD_INT 1
31187: PPUSH
31188: CALL_OW 275
31192: PUSH
31193: LD_VAR 0 5
31197: PUSH
31198: LD_INT 1
31200: ARRAY
31201: GREATEREQUAL
31202: PUSH
31203: LD_VAR 0 4
31207: PPUSH
31208: LD_INT 2
31210: PPUSH
31211: CALL_OW 275
31215: PUSH
31216: LD_VAR 0 5
31220: PUSH
31221: LD_INT 2
31223: ARRAY
31224: GREATEREQUAL
31225: AND
31226: PUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_INT 3
31234: PPUSH
31235: CALL_OW 275
31239: PUSH
31240: LD_VAR 0 5
31244: PUSH
31245: LD_INT 3
31247: ARRAY
31248: GREATEREQUAL
31249: AND
31250: ST_TO_ADDR
// end ;
31251: LD_VAR 0 3
31255: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31256: LD_INT 0
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
// result := false ;
31268: LD_ADDR_VAR 0 6
31272: PUSH
31273: LD_INT 0
31275: ST_TO_ADDR
// if not base or not btype or not x or not y then
31276: LD_VAR 0 1
31280: NOT
31281: PUSH
31282: LD_VAR 0 2
31286: NOT
31287: OR
31288: PUSH
31289: LD_VAR 0 3
31293: NOT
31294: OR
31295: PUSH
31296: LD_VAR 0 4
31300: NOT
31301: OR
31302: IFFALSE 31306
// exit ;
31304: GO 31915
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31306: LD_ADDR_VAR 0 12
31310: PUSH
31311: LD_VAR 0 2
31315: PPUSH
31316: LD_VAR 0 3
31320: PPUSH
31321: LD_VAR 0 4
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: LD_VAR 0 1
31335: PUSH
31336: LD_INT 1
31338: ARRAY
31339: PPUSH
31340: CALL_OW 248
31344: PPUSH
31345: LD_INT 0
31347: PPUSH
31348: CALL 32752 0 6
31352: ST_TO_ADDR
// if not hexes then
31353: LD_VAR 0 12
31357: NOT
31358: IFFALSE 31362
// exit ;
31360: GO 31915
// for i = 1 to hexes do
31362: LD_ADDR_VAR 0 7
31366: PUSH
31367: DOUBLE
31368: LD_INT 1
31370: DEC
31371: ST_TO_ADDR
31372: LD_VAR 0 12
31376: PUSH
31377: FOR_TO
31378: IFFALSE 31913
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31380: LD_ADDR_VAR 0 11
31384: PUSH
31385: LD_VAR 0 12
31389: PUSH
31390: LD_VAR 0 7
31394: ARRAY
31395: PUSH
31396: LD_INT 1
31398: ARRAY
31399: PPUSH
31400: LD_VAR 0 12
31404: PUSH
31405: LD_VAR 0 7
31409: ARRAY
31410: PUSH
31411: LD_INT 2
31413: ARRAY
31414: PPUSH
31415: CALL_OW 428
31419: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31420: LD_VAR 0 12
31424: PUSH
31425: LD_VAR 0 7
31429: ARRAY
31430: PUSH
31431: LD_INT 1
31433: ARRAY
31434: PPUSH
31435: LD_VAR 0 12
31439: PUSH
31440: LD_VAR 0 7
31444: ARRAY
31445: PUSH
31446: LD_INT 2
31448: ARRAY
31449: PPUSH
31450: CALL_OW 351
31454: PUSH
31455: LD_VAR 0 12
31459: PUSH
31460: LD_VAR 0 7
31464: ARRAY
31465: PUSH
31466: LD_INT 1
31468: ARRAY
31469: PPUSH
31470: LD_VAR 0 12
31474: PUSH
31475: LD_VAR 0 7
31479: ARRAY
31480: PUSH
31481: LD_INT 2
31483: ARRAY
31484: PPUSH
31485: CALL_OW 488
31489: NOT
31490: OR
31491: PUSH
31492: LD_VAR 0 11
31496: PPUSH
31497: CALL_OW 247
31501: PUSH
31502: LD_INT 3
31504: EQUAL
31505: OR
31506: IFFALSE 31512
// exit ;
31508: POP
31509: POP
31510: GO 31915
// if not tmp or not tmp in base then
31512: LD_VAR 0 11
31516: NOT
31517: PUSH
31518: LD_VAR 0 11
31522: PUSH
31523: LD_VAR 0 1
31527: IN
31528: NOT
31529: OR
31530: IFFALSE 31534
// continue ;
31532: GO 31377
// result := true ;
31534: LD_ADDR_VAR 0 6
31538: PUSH
31539: LD_INT 1
31541: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31542: LD_ADDR_VAR 0 15
31546: PUSH
31547: LD_VAR 0 1
31551: PPUSH
31552: LD_INT 22
31554: PUSH
31555: LD_VAR 0 11
31559: PPUSH
31560: CALL_OW 255
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: LD_INT 30
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 30
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PPUSH
31601: CALL_OW 72
31605: ST_TO_ADDR
// if dep then
31606: LD_VAR 0 15
31610: IFFALSE 31746
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31612: LD_ADDR_VAR 0 14
31616: PUSH
31617: LD_VAR 0 15
31621: PUSH
31622: LD_INT 1
31624: ARRAY
31625: PPUSH
31626: CALL_OW 250
31630: PPUSH
31631: LD_VAR 0 15
31635: PUSH
31636: LD_INT 1
31638: ARRAY
31639: PPUSH
31640: CALL_OW 254
31644: PPUSH
31645: LD_INT 5
31647: PPUSH
31648: CALL_OW 272
31652: PUSH
31653: LD_VAR 0 15
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: PPUSH
31662: CALL_OW 251
31666: PPUSH
31667: LD_VAR 0 15
31671: PUSH
31672: LD_INT 1
31674: ARRAY
31675: PPUSH
31676: CALL_OW 254
31680: PPUSH
31681: LD_INT 5
31683: PPUSH
31684: CALL_OW 273
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31693: LD_VAR 0 14
31697: PUSH
31698: LD_INT 1
31700: ARRAY
31701: PPUSH
31702: LD_VAR 0 14
31706: PUSH
31707: LD_INT 2
31709: ARRAY
31710: PPUSH
31711: CALL_OW 488
31715: IFFALSE 31746
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31717: LD_VAR 0 11
31721: PPUSH
31722: LD_VAR 0 14
31726: PUSH
31727: LD_INT 1
31729: ARRAY
31730: PPUSH
31731: LD_VAR 0 14
31735: PUSH
31736: LD_INT 2
31738: ARRAY
31739: PPUSH
31740: CALL_OW 111
// continue ;
31744: GO 31377
// end ; end ; r := GetDir ( tmp ) ;
31746: LD_ADDR_VAR 0 13
31750: PUSH
31751: LD_VAR 0 11
31755: PPUSH
31756: CALL_OW 254
31760: ST_TO_ADDR
// if r = 5 then
31761: LD_VAR 0 13
31765: PUSH
31766: LD_INT 5
31768: EQUAL
31769: IFFALSE 31779
// r := 0 ;
31771: LD_ADDR_VAR 0 13
31775: PUSH
31776: LD_INT 0
31778: ST_TO_ADDR
// for j = r to 5 do
31779: LD_ADDR_VAR 0 8
31783: PUSH
31784: DOUBLE
31785: LD_VAR 0 13
31789: DEC
31790: ST_TO_ADDR
31791: LD_INT 5
31793: PUSH
31794: FOR_TO
31795: IFFALSE 31909
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31797: LD_ADDR_VAR 0 9
31801: PUSH
31802: LD_VAR 0 11
31806: PPUSH
31807: CALL_OW 250
31811: PPUSH
31812: LD_VAR 0 8
31816: PPUSH
31817: LD_INT 2
31819: PPUSH
31820: CALL_OW 272
31824: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31825: LD_ADDR_VAR 0 10
31829: PUSH
31830: LD_VAR 0 11
31834: PPUSH
31835: CALL_OW 251
31839: PPUSH
31840: LD_VAR 0 8
31844: PPUSH
31845: LD_INT 2
31847: PPUSH
31848: CALL_OW 273
31852: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31853: LD_VAR 0 9
31857: PPUSH
31858: LD_VAR 0 10
31862: PPUSH
31863: CALL_OW 488
31867: PUSH
31868: LD_VAR 0 9
31872: PPUSH
31873: LD_VAR 0 10
31877: PPUSH
31878: CALL_OW 428
31882: NOT
31883: AND
31884: IFFALSE 31907
// begin ComMoveXY ( tmp , _x , _y ) ;
31886: LD_VAR 0 11
31890: PPUSH
31891: LD_VAR 0 9
31895: PPUSH
31896: LD_VAR 0 10
31900: PPUSH
31901: CALL_OW 111
// break ;
31905: GO 31909
// end ; end ;
31907: GO 31794
31909: POP
31910: POP
// end ;
31911: GO 31377
31913: POP
31914: POP
// end ;
31915: LD_VAR 0 6
31919: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31920: LD_INT 0
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
// result := false ;
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: LD_INT 0
31939: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31940: LD_VAR 0 1
31944: NOT
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 266
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: IN
31966: NOT
31967: OR
31968: PUSH
31969: LD_VAR 0 2
31973: NOT
31974: OR
31975: PUSH
31976: LD_VAR 0 5
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: IN
32007: NOT
32008: OR
32009: PUSH
32010: LD_VAR 0 3
32014: PPUSH
32015: LD_VAR 0 4
32019: PPUSH
32020: CALL_OW 488
32024: NOT
32025: OR
32026: IFFALSE 32030
// exit ;
32028: GO 32747
// pom := GetBase ( depot ) ;
32030: LD_ADDR_VAR 0 10
32034: PUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 274
32044: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32045: LD_ADDR_VAR 0 11
32049: PUSH
32050: LD_VAR 0 2
32054: PPUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 248
32064: PPUSH
32065: CALL_OW 450
32069: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32070: LD_VAR 0 10
32074: PPUSH
32075: LD_INT 1
32077: PPUSH
32078: CALL_OW 275
32082: PUSH
32083: LD_VAR 0 11
32087: PUSH
32088: LD_INT 1
32090: ARRAY
32091: GREATEREQUAL
32092: PUSH
32093: LD_VAR 0 10
32097: PPUSH
32098: LD_INT 2
32100: PPUSH
32101: CALL_OW 275
32105: PUSH
32106: LD_VAR 0 11
32110: PUSH
32111: LD_INT 2
32113: ARRAY
32114: GREATEREQUAL
32115: AND
32116: PUSH
32117: LD_VAR 0 10
32121: PPUSH
32122: LD_INT 3
32124: PPUSH
32125: CALL_OW 275
32129: PUSH
32130: LD_VAR 0 11
32134: PUSH
32135: LD_INT 3
32137: ARRAY
32138: GREATEREQUAL
32139: AND
32140: NOT
32141: IFFALSE 32145
// exit ;
32143: GO 32747
// if GetBType ( depot ) = b_depot then
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 266
32154: PUSH
32155: LD_INT 0
32157: EQUAL
32158: IFFALSE 32170
// dist := 28 else
32160: LD_ADDR_VAR 0 14
32164: PUSH
32165: LD_INT 28
32167: ST_TO_ADDR
32168: GO 32178
// dist := 36 ;
32170: LD_ADDR_VAR 0 14
32174: PUSH
32175: LD_INT 36
32177: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_VAR 0 3
32187: PPUSH
32188: LD_VAR 0 4
32192: PPUSH
32193: CALL_OW 297
32197: PUSH
32198: LD_VAR 0 14
32202: GREATER
32203: IFFALSE 32207
// exit ;
32205: GO 32747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32207: LD_ADDR_VAR 0 12
32211: PUSH
32212: LD_VAR 0 2
32216: PPUSH
32217: LD_VAR 0 3
32221: PPUSH
32222: LD_VAR 0 4
32226: PPUSH
32227: LD_VAR 0 5
32231: PPUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 248
32241: PPUSH
32242: LD_INT 0
32244: PPUSH
32245: CALL 32752 0 6
32249: ST_TO_ADDR
// if not hexes then
32250: LD_VAR 0 12
32254: NOT
32255: IFFALSE 32259
// exit ;
32257: GO 32747
// hex := GetHexInfo ( x , y ) ;
32259: LD_ADDR_VAR 0 15
32263: PUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: LD_VAR 0 4
32273: PPUSH
32274: CALL_OW 546
32278: ST_TO_ADDR
// if hex [ 1 ] then
32279: LD_VAR 0 15
32283: PUSH
32284: LD_INT 1
32286: ARRAY
32287: IFFALSE 32291
// exit ;
32289: GO 32747
// height := hex [ 2 ] ;
32291: LD_ADDR_VAR 0 13
32295: PUSH
32296: LD_VAR 0 15
32300: PUSH
32301: LD_INT 2
32303: ARRAY
32304: ST_TO_ADDR
// for i = 1 to hexes do
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: DOUBLE
32311: LD_INT 1
32313: DEC
32314: ST_TO_ADDR
32315: LD_VAR 0 12
32319: PUSH
32320: FOR_TO
32321: IFFALSE 32651
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32323: LD_VAR 0 12
32327: PUSH
32328: LD_VAR 0 7
32332: ARRAY
32333: PUSH
32334: LD_INT 1
32336: ARRAY
32337: PPUSH
32338: LD_VAR 0 12
32342: PUSH
32343: LD_VAR 0 7
32347: ARRAY
32348: PUSH
32349: LD_INT 2
32351: ARRAY
32352: PPUSH
32353: CALL_OW 488
32357: NOT
32358: PUSH
32359: LD_VAR 0 12
32363: PUSH
32364: LD_VAR 0 7
32368: ARRAY
32369: PUSH
32370: LD_INT 1
32372: ARRAY
32373: PPUSH
32374: LD_VAR 0 12
32378: PUSH
32379: LD_VAR 0 7
32383: ARRAY
32384: PUSH
32385: LD_INT 2
32387: ARRAY
32388: PPUSH
32389: CALL_OW 428
32393: PUSH
32394: LD_INT 0
32396: GREATER
32397: OR
32398: PUSH
32399: LD_VAR 0 12
32403: PUSH
32404: LD_VAR 0 7
32408: ARRAY
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 12
32418: PUSH
32419: LD_VAR 0 7
32423: ARRAY
32424: PUSH
32425: LD_INT 2
32427: ARRAY
32428: PPUSH
32429: CALL_OW 351
32433: OR
32434: IFFALSE 32440
// exit ;
32436: POP
32437: POP
32438: GO 32747
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32440: LD_ADDR_VAR 0 8
32444: PUSH
32445: LD_VAR 0 12
32449: PUSH
32450: LD_VAR 0 7
32454: ARRAY
32455: PUSH
32456: LD_INT 1
32458: ARRAY
32459: PPUSH
32460: LD_VAR 0 12
32464: PUSH
32465: LD_VAR 0 7
32469: ARRAY
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: PPUSH
32475: CALL_OW 546
32479: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32480: LD_VAR 0 8
32484: PUSH
32485: LD_INT 1
32487: ARRAY
32488: PUSH
32489: LD_VAR 0 8
32493: PUSH
32494: LD_INT 2
32496: ARRAY
32497: PUSH
32498: LD_VAR 0 13
32502: PUSH
32503: LD_INT 2
32505: PLUS
32506: GREATER
32507: OR
32508: PUSH
32509: LD_VAR 0 8
32513: PUSH
32514: LD_INT 2
32516: ARRAY
32517: PUSH
32518: LD_VAR 0 13
32522: PUSH
32523: LD_INT 2
32525: MINUS
32526: LESS
32527: OR
32528: PUSH
32529: LD_VAR 0 8
32533: PUSH
32534: LD_INT 3
32536: ARRAY
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: LD_INT 8
32543: PUSH
32544: LD_INT 9
32546: PUSH
32547: LD_INT 10
32549: PUSH
32550: LD_INT 11
32552: PUSH
32553: LD_INT 12
32555: PUSH
32556: LD_INT 13
32558: PUSH
32559: LD_INT 16
32561: PUSH
32562: LD_INT 17
32564: PUSH
32565: LD_INT 18
32567: PUSH
32568: LD_INT 19
32570: PUSH
32571: LD_INT 20
32573: PUSH
32574: LD_INT 21
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: IN
32592: NOT
32593: OR
32594: PUSH
32595: LD_VAR 0 8
32599: PUSH
32600: LD_INT 5
32602: ARRAY
32603: NOT
32604: OR
32605: PUSH
32606: LD_VAR 0 8
32610: PUSH
32611: LD_INT 6
32613: ARRAY
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 7
32623: PUSH
32624: LD_INT 9
32626: PUSH
32627: LD_INT 10
32629: PUSH
32630: LD_INT 11
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: IN
32641: NOT
32642: OR
32643: IFFALSE 32649
// exit ;
32645: POP
32646: POP
32647: GO 32747
// end ;
32649: GO 32320
32651: POP
32652: POP
// side := GetSide ( depot ) ;
32653: LD_ADDR_VAR 0 9
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 255
32667: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32668: LD_VAR 0 9
32672: PPUSH
32673: LD_VAR 0 3
32677: PPUSH
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_INT 20
32685: PPUSH
32686: CALL 25401 0 4
32690: PUSH
32691: LD_INT 4
32693: ARRAY
32694: IFFALSE 32698
// exit ;
32696: GO 32747
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32698: LD_VAR 0 2
32702: PUSH
32703: LD_INT 29
32705: PUSH
32706: LD_INT 30
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: IN
32713: PUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 9
32728: PPUSH
32729: CALL_OW 440
32733: NOT
32734: AND
32735: IFFALSE 32739
// exit ;
32737: GO 32747
// result := true ;
32739: LD_ADDR_VAR 0 6
32743: PUSH
32744: LD_INT 1
32746: ST_TO_ADDR
// end ;
32747: LD_VAR 0 6
32751: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
// result = [ ] ;
32812: LD_ADDR_VAR 0 7
32816: PUSH
32817: EMPTY
32818: ST_TO_ADDR
// temp_list = [ ] ;
32819: LD_ADDR_VAR 0 9
32823: PUSH
32824: EMPTY
32825: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32826: LD_VAR 0 4
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: LD_INT 4
32845: PUSH
32846: LD_INT 5
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: IN
32857: NOT
32858: PUSH
32859: LD_VAR 0 1
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: PUSH
32875: LD_VAR 0 5
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: LD_INT 3
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: IN
32894: NOT
32895: AND
32896: OR
32897: IFFALSE 32901
// exit ;
32899: GO 51292
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_INT 6
32908: PUSH
32909: LD_INT 7
32911: PUSH
32912: LD_INT 8
32914: PUSH
32915: LD_INT 13
32917: PUSH
32918: LD_INT 12
32920: PUSH
32921: LD_INT 15
32923: PUSH
32924: LD_INT 11
32926: PUSH
32927: LD_INT 14
32929: PUSH
32930: LD_INT 10
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: IN
32944: IFFALSE 32954
// btype = b_lab ;
32946: LD_ADDR_VAR 0 1
32950: PUSH
32951: LD_INT 6
32953: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32954: LD_VAR 0 6
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: IN
32973: NOT
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: LD_INT 6
32994: PUSH
32995: LD_INT 36
32997: PUSH
32998: LD_INT 4
33000: PUSH
33001: LD_INT 5
33003: PUSH
33004: LD_INT 31
33006: PUSH
33007: LD_INT 32
33009: PUSH
33010: LD_INT 33
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: IN
33026: NOT
33027: PUSH
33028: LD_VAR 0 6
33032: PUSH
33033: LD_INT 1
33035: EQUAL
33036: AND
33037: OR
33038: PUSH
33039: LD_VAR 0 1
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: IN
33054: NOT
33055: PUSH
33056: LD_VAR 0 6
33060: PUSH
33061: LD_INT 2
33063: EQUAL
33064: AND
33065: OR
33066: IFFALSE 33076
// mode = 0 ;
33068: LD_ADDR_VAR 0 6
33072: PUSH
33073: LD_INT 0
33075: ST_TO_ADDR
// case mode of 0 :
33076: LD_VAR 0 6
33080: PUSH
33081: LD_INT 0
33083: DOUBLE
33084: EQUAL
33085: IFTRUE 33089
33087: GO 44542
33089: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33090: LD_ADDR_VAR 0 11
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: LD_INT 2
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33283: LD_ADDR_VAR 0 12
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33479: LD_ADDR_VAR 0 13
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: LD_INT 2
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: LD_INT 3
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: LD_INT 2
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: NEG
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33678: LD_ADDR_VAR 0 14
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 3
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 3
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33874: LD_ADDR_VAR 0 15
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34067: LD_ADDR_VAR 0 16
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34260: LD_ADDR_VAR 0 17
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34490: LD_ADDR_VAR 0 18
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 2
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34720: LD_ADDR_VAR 0 19
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34950: LD_ADDR_VAR 0 20
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35180: LD_ADDR_VAR 0 21
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35410: LD_ADDR_VAR 0 22
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35640: LD_ADDR_VAR 0 23
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 3
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: LD_INT 3
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35920: LD_ADDR_VAR 0 24
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36196: LD_ADDR_VAR 0 25
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36470: LD_ADDR_VAR 0 26
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 2
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 2
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36746: LD_ADDR_VAR 0 27
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37026: LD_ADDR_VAR 0 28
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 3
37261: NEG
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 3
37273: NEG
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37308: LD_ADDR_VAR 0 29
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: LD_INT 3
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 3
37552: NEG
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37587: LD_ADDR_VAR 0 30
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 3
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 3
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37865: LD_ADDR_VAR 0 31
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38143: LD_ADDR_VAR 0 32
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 3
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 2
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38421: LD_ADDR_VAR 0 33
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: LD_INT 3
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 3
38665: NEG
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38700: LD_ADDR_VAR 0 34
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 3
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38980: LD_ADDR_VAR 0 35
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39092: LD_ADDR_VAR 0 36
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39204: LD_ADDR_VAR 0 37
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39316: LD_ADDR_VAR 0 38
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39428: LD_ADDR_VAR 0 39
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39540: LD_ADDR_VAR 0 40
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39652: LD_ADDR_VAR 0 41
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 3
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: NEG
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 3
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 3
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: LD_INT 2
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 3
39961: NEG
39962: PUSH
39963: LD_INT 3
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40002: LD_ADDR_VAR 0 42
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 3
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 3
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: LD_INT 3
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 3
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 3
40311: NEG
40312: PUSH
40313: LD_INT 3
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40352: LD_ADDR_VAR 0 43
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 3
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 3
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 3
40648: NEG
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40700: LD_ADDR_VAR 0 44
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: LD_INT 3
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 3
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 3
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 3
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41050: LD_ADDR_VAR 0 45
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 3
41347: NEG
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 3
41359: NEG
41360: PUSH
41361: LD_INT 3
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41400: LD_ADDR_VAR 0 46
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 3
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 3
41696: NEG
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41748: LD_ADDR_VAR 0 47
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41899: LD_ADDR_VAR 0 48
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42046: LD_ADDR_VAR 0 49
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42190: LD_ADDR_VAR 0 50
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42334: LD_ADDR_VAR 0 51
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42481: LD_ADDR_VAR 0 52
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42632: LD_ADDR_VAR 0 53
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42862: LD_ADDR_VAR 0 54
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43092: LD_ADDR_VAR 0 55
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43322: LD_ADDR_VAR 0 56
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43552: LD_ADDR_VAR 0 57
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43782: LD_ADDR_VAR 0 58
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44012: LD_ADDR_VAR 0 59
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44100: LD_ADDR_VAR 0 60
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44188: LD_ADDR_VAR 0 61
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44276: LD_ADDR_VAR 0 62
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44364: LD_ADDR_VAR 0 63
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44452: LD_ADDR_VAR 0 64
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// end ; 1 :
44540: GO 50437
44542: LD_INT 1
44544: DOUBLE
44545: EQUAL
44546: IFTRUE 44550
44548: GO 47173
44550: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44551: LD_ADDR_VAR 0 11
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 3
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44595: LD_ADDR_VAR 0 12
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44636: LD_ADDR_VAR 0 13
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44676: LD_ADDR_VAR 0 14
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44717: LD_ADDR_VAR 0 15
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44761: LD_ADDR_VAR 0 16
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: LD_INT 2
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 3
44792: NEG
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44807: LD_ADDR_VAR 0 17
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44851: LD_ADDR_VAR 0 18
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44892: LD_ADDR_VAR 0 19
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44932: LD_ADDR_VAR 0 20
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 3
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 3
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44973: LD_ADDR_VAR 0 21
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 3
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45017: LD_ADDR_VAR 0 22
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 3
45048: NEG
45049: PUSH
45050: LD_INT 3
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45063: LD_ADDR_VAR 0 23
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45107: LD_ADDR_VAR 0 24
45111: PUSH
45112: LD_INT 3
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 3
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 4
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45148: LD_ADDR_VAR 0 25
45152: PUSH
45153: LD_INT 3
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: LD_INT 4
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45188: LD_ADDR_VAR 0 26
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45229: LD_ADDR_VAR 0 27
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45273: LD_ADDR_VAR 0 28
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: NEG
45293: PUSH
45294: LD_INT 4
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 4
45304: NEG
45305: PUSH
45306: LD_INT 3
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45319: LD_ADDR_VAR 0 29
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 3
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 4
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 4
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 5
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 5
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 4
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 6
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 6
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 5
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45474: LD_ADDR_VAR 0 30
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 4
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 4
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 4
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 5
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 5
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 5
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 6
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 6
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45617: LD_ADDR_VAR 0 31
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 4
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: PUSH
45665: LD_INT 4
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 4
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 5
45684: PUSH
45685: LD_INT 4
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 5
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 4
45704: PUSH
45705: LD_INT 5
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 6
45714: PUSH
45715: LD_INT 5
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 6
45724: PUSH
45725: LD_INT 6
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 5
45734: PUSH
45735: LD_INT 6
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45756: LD_ADDR_VAR 0 32
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 4
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 4
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 6
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 6
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 5
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45899: LD_ADDR_VAR 0 33
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 5
45985: NEG
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 5
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 5
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 6
46019: NEG
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 6
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46054: LD_ADDR_VAR 0 34
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: LD_INT 4
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 4
46121: NEG
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 4
46133: NEG
46134: PUSH
46135: LD_INT 5
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 5
46145: NEG
46146: PUSH
46147: LD_INT 4
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 5
46157: NEG
46158: PUSH
46159: LD_INT 5
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 5
46169: NEG
46170: PUSH
46171: LD_INT 6
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 6
46181: NEG
46182: PUSH
46183: LD_INT 5
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 6
46193: NEG
46194: PUSH
46195: LD_INT 6
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46217: LD_ADDR_VAR 0 41
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46261: LD_ADDR_VAR 0 42
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46302: LD_ADDR_VAR 0 43
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46342: LD_ADDR_VAR 0 44
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46383: LD_ADDR_VAR 0 45
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46427: LD_ADDR_VAR 0 46
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46473: LD_ADDR_VAR 0 47
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 3
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46506: LD_ADDR_VAR 0 48
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46537: LD_ADDR_VAR 0 49
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46566: LD_ADDR_VAR 0 50
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46595: LD_ADDR_VAR 0 51
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46626: LD_ADDR_VAR 0 52
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46659: LD_ADDR_VAR 0 53
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46703: LD_ADDR_VAR 0 54
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46744: LD_ADDR_VAR 0 55
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46784: LD_ADDR_VAR 0 56
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46825: LD_ADDR_VAR 0 57
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 3
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46869: LD_ADDR_VAR 0 58
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46915: LD_ADDR_VAR 0 59
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46959: LD_ADDR_VAR 0 60
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47000: LD_ADDR_VAR 0 61
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47040: LD_ADDR_VAR 0 62
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47081: LD_ADDR_VAR 0 63
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47125: LD_ADDR_VAR 0 64
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// end ; 2 :
47171: GO 50437
47173: LD_INT 2
47175: DOUBLE
47176: EQUAL
47177: IFTRUE 47181
47179: GO 50436
47181: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47182: LD_ADDR_VAR 0 29
47186: PUSH
47187: LD_INT 4
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 4
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 5
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 5
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 5
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 4
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 4
47312: PUSH
47313: LD_INT 4
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 4
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 4
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 4
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 5
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 5
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 4
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 5
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 4
47521: NEG
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 4
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 4
47544: NEG
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: LD_INT 4
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 4
47579: NEG
47580: PUSH
47581: LD_INT 5
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: LD_INT 4
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 4
47615: NEG
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 5
47627: NEG
47628: PUSH
47629: LD_INT 4
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 5
47639: NEG
47640: PUSH
47641: LD_INT 5
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: LD_INT 5
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 5
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47720: LD_ADDR_VAR 0 30
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: LD_INT 4
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 4
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 5
47747: PUSH
47748: LD_INT 4
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 5
47757: PUSH
47758: LD_INT 5
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: LD_INT 4
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: LD_INT 5
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 4
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 4
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 4
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: NEG
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 3
47944: NEG
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 4
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 5
47966: NEG
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 5
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 5
47989: NEG
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 3
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: LD_INT 4
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 3
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 4
48072: NEG
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: NEG
48085: PUSH
48086: LD_INT 4
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 4
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 4
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 4
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 5
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 4
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 5
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 5
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48267: LD_ADDR_VAR 0 31
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 4
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 4
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 5
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 5
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: NEG
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 3
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 4
48423: NEG
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 4
48434: NEG
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 4
48446: NEG
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 4
48469: NEG
48470: PUSH
48471: LD_INT 4
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 4
48481: NEG
48482: PUSH
48483: LD_INT 5
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 3
48493: NEG
48494: PUSH
48495: LD_INT 4
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 4
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 5
48529: NEG
48530: PUSH
48531: LD_INT 4
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 5
48541: NEG
48542: PUSH
48543: LD_INT 5
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: LD_INT 5
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 5
48565: NEG
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 4
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 4
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 4
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 4
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 4
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 5
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 5
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48817: LD_ADDR_VAR 0 32
48821: PUSH
48822: LD_INT 4
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 4
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 4
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 5
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 5
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 5
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: LD_INT 3
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: NEG
48939: PUSH
48940: LD_INT 4
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 4
48986: NEG
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 4
48998: NEG
48999: PUSH
49000: LD_INT 4
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 4
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 4
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 4
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 5
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 4
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: LD_INT 4
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 5
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 5
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 4
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 4
49229: PUSH
49230: LD_INT 4
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 5
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 5
49259: PUSH
49260: LD_INT 5
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 4
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 5
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 5
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49364: LD_ADDR_VAR 0 33
49368: PUSH
49369: LD_INT 4
49371: NEG
49372: PUSH
49373: LD_INT 4
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 4
49383: NEG
49384: PUSH
49385: LD_INT 5
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: NEG
49396: PUSH
49397: LD_INT 4
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: LD_INT 3
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 4
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 5
49431: NEG
49432: PUSH
49433: LD_INT 4
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 5
49443: NEG
49444: PUSH
49445: LD_INT 5
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 5
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 4
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 4
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 4
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 4
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 5
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 5
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 4
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 5
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 4
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 4
49704: PUSH
49705: LD_INT 4
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: PUSH
49715: LD_INT 4
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 4
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 4
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 5
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 5
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49902: LD_ADDR_VAR 0 34
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 4
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 5
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 4
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 5
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: LD_INT 5
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 4
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 4
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 4
50104: PUSH
50105: LD_INT 4
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: LD_INT 4
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: LD_INT 5
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: LD_INT 5
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: LD_INT 5
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 3
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 4
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 4
50287: NEG
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 4
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 5
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 5
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 5
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: ST_TO_ADDR
// end ; end ;
50434: GO 50437
50436: POP
// case btype of b_depot , b_warehouse :
50437: LD_VAR 0 1
50441: PUSH
50442: LD_INT 0
50444: DOUBLE
50445: EQUAL
50446: IFTRUE 50456
50448: LD_INT 1
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50456
50454: GO 50657
50456: POP
// case nation of nation_american :
50457: LD_VAR 0 5
50461: PUSH
50462: LD_INT 1
50464: DOUBLE
50465: EQUAL
50466: IFTRUE 50470
50468: GO 50526
50470: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50471: LD_ADDR_VAR 0 9
50475: PUSH
50476: LD_VAR 0 11
50480: PUSH
50481: LD_VAR 0 12
50485: PUSH
50486: LD_VAR 0 13
50490: PUSH
50491: LD_VAR 0 14
50495: PUSH
50496: LD_VAR 0 15
50500: PUSH
50501: LD_VAR 0 16
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: PUSH
50514: LD_VAR 0 4
50518: PUSH
50519: LD_INT 1
50521: PLUS
50522: ARRAY
50523: ST_TO_ADDR
50524: GO 50655
50526: LD_INT 2
50528: DOUBLE
50529: EQUAL
50530: IFTRUE 50534
50532: GO 50590
50534: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50535: LD_ADDR_VAR 0 9
50539: PUSH
50540: LD_VAR 0 17
50544: PUSH
50545: LD_VAR 0 18
50549: PUSH
50550: LD_VAR 0 19
50554: PUSH
50555: LD_VAR 0 20
50559: PUSH
50560: LD_VAR 0 21
50564: PUSH
50565: LD_VAR 0 22
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: PUSH
50578: LD_VAR 0 4
50582: PUSH
50583: LD_INT 1
50585: PLUS
50586: ARRAY
50587: ST_TO_ADDR
50588: GO 50655
50590: LD_INT 3
50592: DOUBLE
50593: EQUAL
50594: IFTRUE 50598
50596: GO 50654
50598: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50599: LD_ADDR_VAR 0 9
50603: PUSH
50604: LD_VAR 0 23
50608: PUSH
50609: LD_VAR 0 24
50613: PUSH
50614: LD_VAR 0 25
50618: PUSH
50619: LD_VAR 0 26
50623: PUSH
50624: LD_VAR 0 27
50628: PUSH
50629: LD_VAR 0 28
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: PUSH
50642: LD_VAR 0 4
50646: PUSH
50647: LD_INT 1
50649: PLUS
50650: ARRAY
50651: ST_TO_ADDR
50652: GO 50655
50654: POP
50655: GO 51210
50657: LD_INT 2
50659: DOUBLE
50660: EQUAL
50661: IFTRUE 50671
50663: LD_INT 3
50665: DOUBLE
50666: EQUAL
50667: IFTRUE 50671
50669: GO 50727
50671: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: LD_VAR 0 29
50681: PUSH
50682: LD_VAR 0 30
50686: PUSH
50687: LD_VAR 0 31
50691: PUSH
50692: LD_VAR 0 32
50696: PUSH
50697: LD_VAR 0 33
50701: PUSH
50702: LD_VAR 0 34
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: PUSH
50715: LD_VAR 0 4
50719: PUSH
50720: LD_INT 1
50722: PLUS
50723: ARRAY
50724: ST_TO_ADDR
50725: GO 51210
50727: LD_INT 16
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50789
50733: LD_INT 17
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50789
50739: LD_INT 18
50741: DOUBLE
50742: EQUAL
50743: IFTRUE 50789
50745: LD_INT 19
50747: DOUBLE
50748: EQUAL
50749: IFTRUE 50789
50751: LD_INT 22
50753: DOUBLE
50754: EQUAL
50755: IFTRUE 50789
50757: LD_INT 20
50759: DOUBLE
50760: EQUAL
50761: IFTRUE 50789
50763: LD_INT 21
50765: DOUBLE
50766: EQUAL
50767: IFTRUE 50789
50769: LD_INT 23
50771: DOUBLE
50772: EQUAL
50773: IFTRUE 50789
50775: LD_INT 24
50777: DOUBLE
50778: EQUAL
50779: IFTRUE 50789
50781: LD_INT 25
50783: DOUBLE
50784: EQUAL
50785: IFTRUE 50789
50787: GO 50845
50789: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50790: LD_ADDR_VAR 0 9
50794: PUSH
50795: LD_VAR 0 35
50799: PUSH
50800: LD_VAR 0 36
50804: PUSH
50805: LD_VAR 0 37
50809: PUSH
50810: LD_VAR 0 38
50814: PUSH
50815: LD_VAR 0 39
50819: PUSH
50820: LD_VAR 0 40
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: PUSH
50833: LD_VAR 0 4
50837: PUSH
50838: LD_INT 1
50840: PLUS
50841: ARRAY
50842: ST_TO_ADDR
50843: GO 51210
50845: LD_INT 6
50847: DOUBLE
50848: EQUAL
50849: IFTRUE 50901
50851: LD_INT 7
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50901
50857: LD_INT 8
50859: DOUBLE
50860: EQUAL
50861: IFTRUE 50901
50863: LD_INT 13
50865: DOUBLE
50866: EQUAL
50867: IFTRUE 50901
50869: LD_INT 12
50871: DOUBLE
50872: EQUAL
50873: IFTRUE 50901
50875: LD_INT 15
50877: DOUBLE
50878: EQUAL
50879: IFTRUE 50901
50881: LD_INT 11
50883: DOUBLE
50884: EQUAL
50885: IFTRUE 50901
50887: LD_INT 14
50889: DOUBLE
50890: EQUAL
50891: IFTRUE 50901
50893: LD_INT 10
50895: DOUBLE
50896: EQUAL
50897: IFTRUE 50901
50899: GO 50957
50901: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50902: LD_ADDR_VAR 0 9
50906: PUSH
50907: LD_VAR 0 41
50911: PUSH
50912: LD_VAR 0 42
50916: PUSH
50917: LD_VAR 0 43
50921: PUSH
50922: LD_VAR 0 44
50926: PUSH
50927: LD_VAR 0 45
50931: PUSH
50932: LD_VAR 0 46
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: PUSH
50945: LD_VAR 0 4
50949: PUSH
50950: LD_INT 1
50952: PLUS
50953: ARRAY
50954: ST_TO_ADDR
50955: GO 51210
50957: LD_INT 36
50959: DOUBLE
50960: EQUAL
50961: IFTRUE 50965
50963: GO 51021
50965: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50966: LD_ADDR_VAR 0 9
50970: PUSH
50971: LD_VAR 0 47
50975: PUSH
50976: LD_VAR 0 48
50980: PUSH
50981: LD_VAR 0 49
50985: PUSH
50986: LD_VAR 0 50
50990: PUSH
50991: LD_VAR 0 51
50995: PUSH
50996: LD_VAR 0 52
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: PUSH
51009: LD_VAR 0 4
51013: PUSH
51014: LD_INT 1
51016: PLUS
51017: ARRAY
51018: ST_TO_ADDR
51019: GO 51210
51021: LD_INT 4
51023: DOUBLE
51024: EQUAL
51025: IFTRUE 51047
51027: LD_INT 5
51029: DOUBLE
51030: EQUAL
51031: IFTRUE 51047
51033: LD_INT 34
51035: DOUBLE
51036: EQUAL
51037: IFTRUE 51047
51039: LD_INT 37
51041: DOUBLE
51042: EQUAL
51043: IFTRUE 51047
51045: GO 51103
51047: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51048: LD_ADDR_VAR 0 9
51052: PUSH
51053: LD_VAR 0 53
51057: PUSH
51058: LD_VAR 0 54
51062: PUSH
51063: LD_VAR 0 55
51067: PUSH
51068: LD_VAR 0 56
51072: PUSH
51073: LD_VAR 0 57
51077: PUSH
51078: LD_VAR 0 58
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: PUSH
51091: LD_VAR 0 4
51095: PUSH
51096: LD_INT 1
51098: PLUS
51099: ARRAY
51100: ST_TO_ADDR
51101: GO 51210
51103: LD_INT 31
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51153
51109: LD_INT 32
51111: DOUBLE
51112: EQUAL
51113: IFTRUE 51153
51115: LD_INT 33
51117: DOUBLE
51118: EQUAL
51119: IFTRUE 51153
51121: LD_INT 27
51123: DOUBLE
51124: EQUAL
51125: IFTRUE 51153
51127: LD_INT 26
51129: DOUBLE
51130: EQUAL
51131: IFTRUE 51153
51133: LD_INT 28
51135: DOUBLE
51136: EQUAL
51137: IFTRUE 51153
51139: LD_INT 29
51141: DOUBLE
51142: EQUAL
51143: IFTRUE 51153
51145: LD_INT 30
51147: DOUBLE
51148: EQUAL
51149: IFTRUE 51153
51151: GO 51209
51153: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51154: LD_ADDR_VAR 0 9
51158: PUSH
51159: LD_VAR 0 59
51163: PUSH
51164: LD_VAR 0 60
51168: PUSH
51169: LD_VAR 0 61
51173: PUSH
51174: LD_VAR 0 62
51178: PUSH
51179: LD_VAR 0 63
51183: PUSH
51184: LD_VAR 0 64
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: PUSH
51197: LD_VAR 0 4
51201: PUSH
51202: LD_INT 1
51204: PLUS
51205: ARRAY
51206: ST_TO_ADDR
51207: GO 51210
51209: POP
// temp_list2 = [ ] ;
51210: LD_ADDR_VAR 0 10
51214: PUSH
51215: EMPTY
51216: ST_TO_ADDR
// for i in temp_list do
51217: LD_ADDR_VAR 0 8
51221: PUSH
51222: LD_VAR 0 9
51226: PUSH
51227: FOR_IN
51228: IFFALSE 51280
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51230: LD_ADDR_VAR 0 10
51234: PUSH
51235: LD_VAR 0 10
51239: PUSH
51240: LD_VAR 0 8
51244: PUSH
51245: LD_INT 1
51247: ARRAY
51248: PUSH
51249: LD_VAR 0 2
51253: PLUS
51254: PUSH
51255: LD_VAR 0 8
51259: PUSH
51260: LD_INT 2
51262: ARRAY
51263: PUSH
51264: LD_VAR 0 3
51268: PLUS
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: ADD
51277: ST_TO_ADDR
51278: GO 51227
51280: POP
51281: POP
// result = temp_list2 ;
51282: LD_ADDR_VAR 0 7
51286: PUSH
51287: LD_VAR 0 10
51291: ST_TO_ADDR
// end ;
51292: LD_VAR 0 7
51296: RET
// export function EnemyInRange ( unit , dist ) ; begin
51297: LD_INT 0
51299: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_VAR 0 1
51309: PPUSH
51310: CALL_OW 255
51314: PPUSH
51315: LD_VAR 0 1
51319: PPUSH
51320: CALL_OW 250
51324: PPUSH
51325: LD_VAR 0 1
51329: PPUSH
51330: CALL_OW 251
51334: PPUSH
51335: LD_VAR 0 2
51339: PPUSH
51340: CALL 25401 0 4
51344: PUSH
51345: LD_INT 4
51347: ARRAY
51348: ST_TO_ADDR
// end ;
51349: LD_VAR 0 3
51353: RET
// export function PlayerSeeMe ( unit ) ; begin
51354: LD_INT 0
51356: PPUSH
// result := See ( your_side , unit ) ;
51357: LD_ADDR_VAR 0 2
51361: PUSH
51362: LD_OWVAR 2
51366: PPUSH
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 292
51376: ST_TO_ADDR
// end ;
51377: LD_VAR 0 2
51381: RET
// export function ReverseDir ( unit ) ; begin
51382: LD_INT 0
51384: PPUSH
// if not unit then
51385: LD_VAR 0 1
51389: NOT
51390: IFFALSE 51394
// exit ;
51392: GO 51417
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51394: LD_ADDR_VAR 0 2
51398: PUSH
51399: LD_VAR 0 1
51403: PPUSH
51404: CALL_OW 254
51408: PUSH
51409: LD_INT 3
51411: PLUS
51412: PUSH
51413: LD_INT 6
51415: MOD
51416: ST_TO_ADDR
// end ;
51417: LD_VAR 0 2
51421: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51422: LD_INT 0
51424: PPUSH
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
// if not hexes then
51429: LD_VAR 0 2
51433: NOT
51434: IFFALSE 51438
// exit ;
51436: GO 51586
// dist := 9999 ;
51438: LD_ADDR_VAR 0 5
51442: PUSH
51443: LD_INT 9999
51445: ST_TO_ADDR
// for i = 1 to hexes do
51446: LD_ADDR_VAR 0 4
51450: PUSH
51451: DOUBLE
51452: LD_INT 1
51454: DEC
51455: ST_TO_ADDR
51456: LD_VAR 0 2
51460: PUSH
51461: FOR_TO
51462: IFFALSE 51574
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51464: LD_VAR 0 1
51468: PPUSH
51469: LD_VAR 0 2
51473: PUSH
51474: LD_VAR 0 4
51478: ARRAY
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PPUSH
51484: LD_VAR 0 2
51488: PUSH
51489: LD_VAR 0 4
51493: ARRAY
51494: PUSH
51495: LD_INT 2
51497: ARRAY
51498: PPUSH
51499: CALL_OW 297
51503: PUSH
51504: LD_VAR 0 5
51508: LESS
51509: IFFALSE 51572
// begin hex := hexes [ i ] ;
51511: LD_ADDR_VAR 0 7
51515: PUSH
51516: LD_VAR 0 2
51520: PUSH
51521: LD_VAR 0 4
51525: ARRAY
51526: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51527: LD_ADDR_VAR 0 5
51531: PUSH
51532: LD_VAR 0 1
51536: PPUSH
51537: LD_VAR 0 2
51541: PUSH
51542: LD_VAR 0 4
51546: ARRAY
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PPUSH
51552: LD_VAR 0 2
51556: PUSH
51557: LD_VAR 0 4
51561: ARRAY
51562: PUSH
51563: LD_INT 2
51565: ARRAY
51566: PPUSH
51567: CALL_OW 297
51571: ST_TO_ADDR
// end ; end ;
51572: GO 51461
51574: POP
51575: POP
// result := hex ;
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: LD_VAR 0 7
51585: ST_TO_ADDR
// end ;
51586: LD_VAR 0 3
51590: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51591: LD_INT 0
51593: PPUSH
51594: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51595: LD_VAR 0 1
51599: NOT
51600: PUSH
51601: LD_VAR 0 1
51605: PUSH
51606: LD_INT 21
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 23
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PPUSH
51630: CALL_OW 69
51634: IN
51635: NOT
51636: OR
51637: IFFALSE 51641
// exit ;
51639: GO 51688
// for i = 1 to 3 do
51641: LD_ADDR_VAR 0 3
51645: PUSH
51646: DOUBLE
51647: LD_INT 1
51649: DEC
51650: ST_TO_ADDR
51651: LD_INT 3
51653: PUSH
51654: FOR_TO
51655: IFFALSE 51686
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51657: LD_VAR 0 1
51661: PPUSH
51662: CALL_OW 250
51666: PPUSH
51667: LD_VAR 0 1
51671: PPUSH
51672: CALL_OW 251
51676: PPUSH
51677: LD_INT 1
51679: PPUSH
51680: CALL_OW 453
51684: GO 51654
51686: POP
51687: POP
// end ;
51688: LD_VAR 0 2
51692: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51693: LD_INT 0
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
51700: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51701: LD_VAR 0 1
51705: NOT
51706: PUSH
51707: LD_VAR 0 2
51711: NOT
51712: OR
51713: PUSH
51714: LD_VAR 0 1
51718: PPUSH
51719: CALL_OW 314
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 52169
// x := GetX ( enemy_unit ) ;
51728: LD_ADDR_VAR 0 7
51732: PUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: CALL_OW 250
51742: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51743: LD_ADDR_VAR 0 8
51747: PUSH
51748: LD_VAR 0 2
51752: PPUSH
51753: CALL_OW 251
51757: ST_TO_ADDR
// if not x or not y then
51758: LD_VAR 0 7
51762: NOT
51763: PUSH
51764: LD_VAR 0 8
51768: NOT
51769: OR
51770: IFFALSE 51774
// exit ;
51772: GO 52169
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51774: LD_ADDR_VAR 0 6
51778: PUSH
51779: LD_VAR 0 7
51783: PPUSH
51784: LD_INT 0
51786: PPUSH
51787: LD_INT 4
51789: PPUSH
51790: CALL_OW 272
51794: PUSH
51795: LD_VAR 0 8
51799: PPUSH
51800: LD_INT 0
51802: PPUSH
51803: LD_INT 4
51805: PPUSH
51806: CALL_OW 273
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_VAR 0 7
51819: PPUSH
51820: LD_INT 1
51822: PPUSH
51823: LD_INT 4
51825: PPUSH
51826: CALL_OW 272
51830: PUSH
51831: LD_VAR 0 8
51835: PPUSH
51836: LD_INT 1
51838: PPUSH
51839: LD_INT 4
51841: PPUSH
51842: CALL_OW 273
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_VAR 0 7
51855: PPUSH
51856: LD_INT 2
51858: PPUSH
51859: LD_INT 4
51861: PPUSH
51862: CALL_OW 272
51866: PUSH
51867: LD_VAR 0 8
51871: PPUSH
51872: LD_INT 2
51874: PPUSH
51875: LD_INT 4
51877: PPUSH
51878: CALL_OW 273
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_VAR 0 7
51891: PPUSH
51892: LD_INT 3
51894: PPUSH
51895: LD_INT 4
51897: PPUSH
51898: CALL_OW 272
51902: PUSH
51903: LD_VAR 0 8
51907: PPUSH
51908: LD_INT 3
51910: PPUSH
51911: LD_INT 4
51913: PPUSH
51914: CALL_OW 273
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_VAR 0 7
51927: PPUSH
51928: LD_INT 4
51930: PPUSH
51931: LD_INT 4
51933: PPUSH
51934: CALL_OW 272
51938: PUSH
51939: LD_VAR 0 8
51943: PPUSH
51944: LD_INT 4
51946: PPUSH
51947: LD_INT 4
51949: PPUSH
51950: CALL_OW 273
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_VAR 0 7
51963: PPUSH
51964: LD_INT 5
51966: PPUSH
51967: LD_INT 4
51969: PPUSH
51970: CALL_OW 272
51974: PUSH
51975: LD_VAR 0 8
51979: PPUSH
51980: LD_INT 5
51982: PPUSH
51983: LD_INT 4
51985: PPUSH
51986: CALL_OW 273
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// for i = tmp downto 1 do
52003: LD_ADDR_VAR 0 4
52007: PUSH
52008: DOUBLE
52009: LD_VAR 0 6
52013: INC
52014: ST_TO_ADDR
52015: LD_INT 1
52017: PUSH
52018: FOR_DOWNTO
52019: IFFALSE 52120
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52021: LD_VAR 0 6
52025: PUSH
52026: LD_VAR 0 4
52030: ARRAY
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: LD_VAR 0 6
52040: PUSH
52041: LD_VAR 0 4
52045: ARRAY
52046: PUSH
52047: LD_INT 2
52049: ARRAY
52050: PPUSH
52051: CALL_OW 488
52055: NOT
52056: PUSH
52057: LD_VAR 0 6
52061: PUSH
52062: LD_VAR 0 4
52066: ARRAY
52067: PUSH
52068: LD_INT 1
52070: ARRAY
52071: PPUSH
52072: LD_VAR 0 6
52076: PUSH
52077: LD_VAR 0 4
52081: ARRAY
52082: PUSH
52083: LD_INT 2
52085: ARRAY
52086: PPUSH
52087: CALL_OW 428
52091: PUSH
52092: LD_INT 0
52094: NONEQUAL
52095: OR
52096: IFFALSE 52118
// tmp := Delete ( tmp , i ) ;
52098: LD_ADDR_VAR 0 6
52102: PUSH
52103: LD_VAR 0 6
52107: PPUSH
52108: LD_VAR 0 4
52112: PPUSH
52113: CALL_OW 3
52117: ST_TO_ADDR
52118: GO 52018
52120: POP
52121: POP
// j := GetClosestHex ( unit , tmp ) ;
52122: LD_ADDR_VAR 0 5
52126: PUSH
52127: LD_VAR 0 1
52131: PPUSH
52132: LD_VAR 0 6
52136: PPUSH
52137: CALL 51422 0 2
52141: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52142: LD_VAR 0 1
52146: PPUSH
52147: LD_VAR 0 5
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PPUSH
52156: LD_VAR 0 5
52160: PUSH
52161: LD_INT 2
52163: ARRAY
52164: PPUSH
52165: CALL_OW 111
// end ;
52169: LD_VAR 0 3
52173: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52174: LD_INT 0
52176: PPUSH
52177: PPUSH
52178: PPUSH
// uc_side = 0 ;
52179: LD_ADDR_OWVAR 20
52183: PUSH
52184: LD_INT 0
52186: ST_TO_ADDR
// uc_nation = 0 ;
52187: LD_ADDR_OWVAR 21
52191: PUSH
52192: LD_INT 0
52194: ST_TO_ADDR
// InitHc ;
52195: CALL_OW 19
// InitVc ;
52199: CALL_OW 20
// if mastodonts then
52203: LD_VAR 0 6
52207: IFFALSE 52274
// for i = 1 to mastodonts do
52209: LD_ADDR_VAR 0 11
52213: PUSH
52214: DOUBLE
52215: LD_INT 1
52217: DEC
52218: ST_TO_ADDR
52219: LD_VAR 0 6
52223: PUSH
52224: FOR_TO
52225: IFFALSE 52272
// begin vc_chassis := 31 ;
52227: LD_ADDR_OWVAR 37
52231: PUSH
52232: LD_INT 31
52234: ST_TO_ADDR
// vc_control := control_rider ;
52235: LD_ADDR_OWVAR 38
52239: PUSH
52240: LD_INT 4
52242: ST_TO_ADDR
// animal := CreateVehicle ;
52243: LD_ADDR_VAR 0 12
52247: PUSH
52248: CALL_OW 45
52252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52253: LD_VAR 0 12
52257: PPUSH
52258: LD_VAR 0 8
52262: PPUSH
52263: LD_INT 0
52265: PPUSH
52266: CALL 54343 0 3
// end ;
52270: GO 52224
52272: POP
52273: POP
// if horses then
52274: LD_VAR 0 5
52278: IFFALSE 52345
// for i = 1 to horses do
52280: LD_ADDR_VAR 0 11
52284: PUSH
52285: DOUBLE
52286: LD_INT 1
52288: DEC
52289: ST_TO_ADDR
52290: LD_VAR 0 5
52294: PUSH
52295: FOR_TO
52296: IFFALSE 52343
// begin hc_class := 21 ;
52298: LD_ADDR_OWVAR 28
52302: PUSH
52303: LD_INT 21
52305: ST_TO_ADDR
// hc_gallery :=  ;
52306: LD_ADDR_OWVAR 33
52310: PUSH
52311: LD_STRING 
52313: ST_TO_ADDR
// animal := CreateHuman ;
52314: LD_ADDR_VAR 0 12
52318: PUSH
52319: CALL_OW 44
52323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52324: LD_VAR 0 12
52328: PPUSH
52329: LD_VAR 0 8
52333: PPUSH
52334: LD_INT 0
52336: PPUSH
52337: CALL 54343 0 3
// end ;
52341: GO 52295
52343: POP
52344: POP
// if birds then
52345: LD_VAR 0 1
52349: IFFALSE 52416
// for i = 1 to birds do
52351: LD_ADDR_VAR 0 11
52355: PUSH
52356: DOUBLE
52357: LD_INT 1
52359: DEC
52360: ST_TO_ADDR
52361: LD_VAR 0 1
52365: PUSH
52366: FOR_TO
52367: IFFALSE 52414
// begin hc_class = 18 ;
52369: LD_ADDR_OWVAR 28
52373: PUSH
52374: LD_INT 18
52376: ST_TO_ADDR
// hc_gallery =  ;
52377: LD_ADDR_OWVAR 33
52381: PUSH
52382: LD_STRING 
52384: ST_TO_ADDR
// animal := CreateHuman ;
52385: LD_ADDR_VAR 0 12
52389: PUSH
52390: CALL_OW 44
52394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52395: LD_VAR 0 12
52399: PPUSH
52400: LD_VAR 0 8
52404: PPUSH
52405: LD_INT 0
52407: PPUSH
52408: CALL 54343 0 3
// end ;
52412: GO 52366
52414: POP
52415: POP
// if tigers then
52416: LD_VAR 0 2
52420: IFFALSE 52504
// for i = 1 to tigers do
52422: LD_ADDR_VAR 0 11
52426: PUSH
52427: DOUBLE
52428: LD_INT 1
52430: DEC
52431: ST_TO_ADDR
52432: LD_VAR 0 2
52436: PUSH
52437: FOR_TO
52438: IFFALSE 52502
// begin hc_class = class_tiger ;
52440: LD_ADDR_OWVAR 28
52444: PUSH
52445: LD_INT 14
52447: ST_TO_ADDR
// hc_gallery =  ;
52448: LD_ADDR_OWVAR 33
52452: PUSH
52453: LD_STRING 
52455: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52456: LD_ADDR_OWVAR 35
52460: PUSH
52461: LD_INT 7
52463: NEG
52464: PPUSH
52465: LD_INT 7
52467: PPUSH
52468: CALL_OW 12
52472: ST_TO_ADDR
// animal := CreateHuman ;
52473: LD_ADDR_VAR 0 12
52477: PUSH
52478: CALL_OW 44
52482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52483: LD_VAR 0 12
52487: PPUSH
52488: LD_VAR 0 8
52492: PPUSH
52493: LD_INT 0
52495: PPUSH
52496: CALL 54343 0 3
// end ;
52500: GO 52437
52502: POP
52503: POP
// if apemans then
52504: LD_VAR 0 3
52508: IFFALSE 52631
// for i = 1 to apemans do
52510: LD_ADDR_VAR 0 11
52514: PUSH
52515: DOUBLE
52516: LD_INT 1
52518: DEC
52519: ST_TO_ADDR
52520: LD_VAR 0 3
52524: PUSH
52525: FOR_TO
52526: IFFALSE 52629
// begin hc_class = class_apeman ;
52528: LD_ADDR_OWVAR 28
52532: PUSH
52533: LD_INT 12
52535: ST_TO_ADDR
// hc_gallery =  ;
52536: LD_ADDR_OWVAR 33
52540: PUSH
52541: LD_STRING 
52543: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52544: LD_ADDR_OWVAR 35
52548: PUSH
52549: LD_INT 5
52551: NEG
52552: PPUSH
52553: LD_INT 5
52555: PPUSH
52556: CALL_OW 12
52560: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52561: LD_ADDR_OWVAR 31
52565: PUSH
52566: LD_INT 1
52568: PPUSH
52569: LD_INT 3
52571: PPUSH
52572: CALL_OW 12
52576: PUSH
52577: LD_INT 1
52579: PPUSH
52580: LD_INT 3
52582: PPUSH
52583: CALL_OW 12
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: ST_TO_ADDR
// animal := CreateHuman ;
52600: LD_ADDR_VAR 0 12
52604: PUSH
52605: CALL_OW 44
52609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52610: LD_VAR 0 12
52614: PPUSH
52615: LD_VAR 0 8
52619: PPUSH
52620: LD_INT 0
52622: PPUSH
52623: CALL 54343 0 3
// end ;
52627: GO 52525
52629: POP
52630: POP
// if enchidnas then
52631: LD_VAR 0 4
52635: IFFALSE 52702
// for i = 1 to enchidnas do
52637: LD_ADDR_VAR 0 11
52641: PUSH
52642: DOUBLE
52643: LD_INT 1
52645: DEC
52646: ST_TO_ADDR
52647: LD_VAR 0 4
52651: PUSH
52652: FOR_TO
52653: IFFALSE 52700
// begin hc_class = 13 ;
52655: LD_ADDR_OWVAR 28
52659: PUSH
52660: LD_INT 13
52662: ST_TO_ADDR
// hc_gallery =  ;
52663: LD_ADDR_OWVAR 33
52667: PUSH
52668: LD_STRING 
52670: ST_TO_ADDR
// animal := CreateHuman ;
52671: LD_ADDR_VAR 0 12
52675: PUSH
52676: CALL_OW 44
52680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52681: LD_VAR 0 12
52685: PPUSH
52686: LD_VAR 0 8
52690: PPUSH
52691: LD_INT 0
52693: PPUSH
52694: CALL 54343 0 3
// end ;
52698: GO 52652
52700: POP
52701: POP
// if fishes then
52702: LD_VAR 0 7
52706: IFFALSE 52773
// for i = 1 to fishes do
52708: LD_ADDR_VAR 0 11
52712: PUSH
52713: DOUBLE
52714: LD_INT 1
52716: DEC
52717: ST_TO_ADDR
52718: LD_VAR 0 7
52722: PUSH
52723: FOR_TO
52724: IFFALSE 52771
// begin hc_class = 20 ;
52726: LD_ADDR_OWVAR 28
52730: PUSH
52731: LD_INT 20
52733: ST_TO_ADDR
// hc_gallery =  ;
52734: LD_ADDR_OWVAR 33
52738: PUSH
52739: LD_STRING 
52741: ST_TO_ADDR
// animal := CreateHuman ;
52742: LD_ADDR_VAR 0 12
52746: PUSH
52747: CALL_OW 44
52751: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52752: LD_VAR 0 12
52756: PPUSH
52757: LD_VAR 0 9
52761: PPUSH
52762: LD_INT 0
52764: PPUSH
52765: CALL 54343 0 3
// end ;
52769: GO 52723
52771: POP
52772: POP
// end ;
52773: LD_VAR 0 10
52777: RET
// export function WantHeal ( sci , unit ) ; begin
52778: LD_INT 0
52780: PPUSH
// if GetTaskList ( sci ) > 0 then
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 437
52790: PUSH
52791: LD_INT 0
52793: GREATER
52794: IFFALSE 52864
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52796: LD_VAR 0 1
52800: PPUSH
52801: CALL_OW 437
52805: PUSH
52806: LD_INT 1
52808: ARRAY
52809: PUSH
52810: LD_INT 1
52812: ARRAY
52813: PUSH
52814: LD_STRING l
52816: EQUAL
52817: PUSH
52818: LD_VAR 0 1
52822: PPUSH
52823: CALL_OW 437
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: PUSH
52832: LD_INT 4
52834: ARRAY
52835: PUSH
52836: LD_VAR 0 2
52840: EQUAL
52841: AND
52842: IFFALSE 52854
// result := true else
52844: LD_ADDR_VAR 0 3
52848: PUSH
52849: LD_INT 1
52851: ST_TO_ADDR
52852: GO 52862
// result := false ;
52854: LD_ADDR_VAR 0 3
52858: PUSH
52859: LD_INT 0
52861: ST_TO_ADDR
// end else
52862: GO 52872
// result := false ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_INT 0
52871: ST_TO_ADDR
// end ;
52872: LD_VAR 0 3
52876: RET
// export function HealTarget ( sci ) ; begin
52877: LD_INT 0
52879: PPUSH
// if not sci then
52880: LD_VAR 0 1
52884: NOT
52885: IFFALSE 52889
// exit ;
52887: GO 52954
// result := 0 ;
52889: LD_ADDR_VAR 0 2
52893: PUSH
52894: LD_INT 0
52896: ST_TO_ADDR
// if GetTaskList ( sci ) then
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 437
52906: IFFALSE 52954
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 437
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: PUSH
52922: LD_INT 1
52924: ARRAY
52925: PUSH
52926: LD_STRING l
52928: EQUAL
52929: IFFALSE 52954
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52931: LD_ADDR_VAR 0 2
52935: PUSH
52936: LD_VAR 0 1
52940: PPUSH
52941: CALL_OW 437
52945: PUSH
52946: LD_INT 1
52948: ARRAY
52949: PUSH
52950: LD_INT 4
52952: ARRAY
52953: ST_TO_ADDR
// end ;
52954: LD_VAR 0 2
52958: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52959: LD_INT 0
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
// if not base_units then
52965: LD_VAR 0 1
52969: NOT
52970: IFFALSE 52974
// exit ;
52972: GO 53061
// result := false ;
52974: LD_ADDR_VAR 0 2
52978: PUSH
52979: LD_INT 0
52981: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52982: LD_ADDR_VAR 0 5
52986: PUSH
52987: LD_VAR 0 1
52991: PPUSH
52992: LD_INT 21
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PPUSH
53002: CALL_OW 72
53006: ST_TO_ADDR
// if not tmp then
53007: LD_VAR 0 5
53011: NOT
53012: IFFALSE 53016
// exit ;
53014: GO 53061
// for i in tmp do
53016: LD_ADDR_VAR 0 3
53020: PUSH
53021: LD_VAR 0 5
53025: PUSH
53026: FOR_IN
53027: IFFALSE 53059
// begin result := EnemyInRange ( i , 22 ) ;
53029: LD_ADDR_VAR 0 2
53033: PUSH
53034: LD_VAR 0 3
53038: PPUSH
53039: LD_INT 22
53041: PPUSH
53042: CALL 51297 0 2
53046: ST_TO_ADDR
// if result then
53047: LD_VAR 0 2
53051: IFFALSE 53057
// exit ;
53053: POP
53054: POP
53055: GO 53061
// end ;
53057: GO 53026
53059: POP
53060: POP
// end ;
53061: LD_VAR 0 2
53065: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
// if not units then
53070: LD_VAR 0 1
53074: NOT
53075: IFFALSE 53079
// exit ;
53077: GO 53149
// result := [ ] ;
53079: LD_ADDR_VAR 0 3
53083: PUSH
53084: EMPTY
53085: ST_TO_ADDR
// for i in units do
53086: LD_ADDR_VAR 0 4
53090: PUSH
53091: LD_VAR 0 1
53095: PUSH
53096: FOR_IN
53097: IFFALSE 53147
// if GetTag ( i ) = tag then
53099: LD_VAR 0 4
53103: PPUSH
53104: CALL_OW 110
53108: PUSH
53109: LD_VAR 0 2
53113: EQUAL
53114: IFFALSE 53145
// result := Insert ( result , result + 1 , i ) ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 3
53125: PPUSH
53126: LD_VAR 0 3
53130: PUSH
53131: LD_INT 1
53133: PLUS
53134: PPUSH
53135: LD_VAR 0 4
53139: PPUSH
53140: CALL_OW 2
53144: ST_TO_ADDR
53145: GO 53096
53147: POP
53148: POP
// end ;
53149: LD_VAR 0 3
53153: RET
// export function IsDriver ( un ) ; begin
53154: LD_INT 0
53156: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53157: LD_ADDR_VAR 0 2
53161: PUSH
53162: LD_VAR 0 1
53166: PUSH
53167: LD_INT 55
53169: PUSH
53170: EMPTY
53171: LIST
53172: PPUSH
53173: CALL_OW 69
53177: IN
53178: ST_TO_ADDR
// end ;
53179: LD_VAR 0 2
53183: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53184: LD_INT 0
53186: PPUSH
53187: PPUSH
// list := [ ] ;
53188: LD_ADDR_VAR 0 5
53192: PUSH
53193: EMPTY
53194: ST_TO_ADDR
// case d of 0 :
53195: LD_VAR 0 3
53199: PUSH
53200: LD_INT 0
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53208
53206: GO 53341
53208: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_VAR 0 1
53218: PUSH
53219: LD_INT 4
53221: MINUS
53222: PUSH
53223: LD_VAR 0 2
53227: PUSH
53228: LD_INT 4
53230: MINUS
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: PUSH
53240: LD_VAR 0 1
53244: PUSH
53245: LD_INT 3
53247: MINUS
53248: PUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 4
53269: PLUS
53270: PUSH
53271: LD_VAR 0 2
53275: PUSH
53276: LD_INT 4
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: PUSH
53284: LD_VAR 0 1
53288: PUSH
53289: LD_INT 3
53291: PLUS
53292: PUSH
53293: LD_VAR 0 2
53297: PUSH
53298: LD_INT 3
53300: PLUS
53301: PUSH
53302: LD_INT 5
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: PUSH
53310: LD_VAR 0 1
53314: PUSH
53315: LD_VAR 0 2
53319: PUSH
53320: LD_INT 4
53322: PLUS
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// end ; 1 :
53339: GO 54039
53341: LD_INT 1
53343: DOUBLE
53344: EQUAL
53345: IFTRUE 53349
53347: GO 53482
53349: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53350: LD_ADDR_VAR 0 5
53354: PUSH
53355: LD_VAR 0 1
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_INT 4
53367: MINUS
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: PUSH
53377: LD_VAR 0 1
53381: PUSH
53382: LD_INT 3
53384: MINUS
53385: PUSH
53386: LD_VAR 0 2
53390: PUSH
53391: LD_INT 3
53393: MINUS
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: LD_VAR 0 1
53407: PUSH
53408: LD_INT 4
53410: MINUS
53411: PUSH
53412: LD_VAR 0 2
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: PUSH
53425: LD_VAR 0 1
53429: PUSH
53430: LD_VAR 0 2
53434: PUSH
53435: LD_INT 3
53437: PLUS
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: PUSH
53447: LD_VAR 0 1
53451: PUSH
53452: LD_INT 4
53454: PLUS
53455: PUSH
53456: LD_VAR 0 2
53460: PUSH
53461: LD_INT 4
53463: PLUS
53464: PUSH
53465: LD_INT 5
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// end ; 2 :
53480: GO 54039
53482: LD_INT 2
53484: DOUBLE
53485: EQUAL
53486: IFTRUE 53490
53488: GO 53619
53490: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53491: LD_ADDR_VAR 0 5
53495: PUSH
53496: LD_VAR 0 1
53500: PUSH
53501: LD_VAR 0 2
53505: PUSH
53506: LD_INT 3
53508: MINUS
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: LD_VAR 0 1
53522: PUSH
53523: LD_INT 4
53525: PLUS
53526: PUSH
53527: LD_VAR 0 2
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: LD_VAR 0 1
53544: PUSH
53545: LD_VAR 0 2
53549: PUSH
53550: LD_INT 4
53552: PLUS
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: PUSH
53562: LD_VAR 0 1
53566: PUSH
53567: LD_INT 3
53569: MINUS
53570: PUSH
53571: LD_VAR 0 2
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: PUSH
53584: LD_VAR 0 1
53588: PUSH
53589: LD_INT 4
53591: MINUS
53592: PUSH
53593: LD_VAR 0 2
53597: PUSH
53598: LD_INT 4
53600: MINUS
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// end ; 3 :
53617: GO 54039
53619: LD_INT 3
53621: DOUBLE
53622: EQUAL
53623: IFTRUE 53627
53625: GO 53760
53627: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53628: LD_ADDR_VAR 0 5
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: LD_INT 3
53640: PLUS
53641: PUSH
53642: LD_VAR 0 2
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 1
53659: PUSH
53660: LD_INT 4
53662: PLUS
53663: PUSH
53664: LD_VAR 0 2
53668: PUSH
53669: LD_INT 4
53671: PLUS
53672: PUSH
53673: LD_INT 5
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: LD_VAR 0 1
53685: PUSH
53686: LD_INT 4
53688: MINUS
53689: PUSH
53690: LD_VAR 0 2
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: PUSH
53703: LD_VAR 0 1
53707: PUSH
53708: LD_VAR 0 2
53712: PUSH
53713: LD_INT 4
53715: MINUS
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: PUSH
53725: LD_VAR 0 1
53729: PUSH
53730: LD_INT 3
53732: MINUS
53733: PUSH
53734: LD_VAR 0 2
53738: PUSH
53739: LD_INT 3
53741: MINUS
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// end ; 4 :
53758: GO 54039
53760: LD_INT 4
53762: DOUBLE
53763: EQUAL
53764: IFTRUE 53768
53766: GO 53901
53768: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53769: LD_ADDR_VAR 0 5
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: LD_VAR 0 2
53783: PUSH
53784: LD_INT 4
53786: PLUS
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: PUSH
53796: LD_VAR 0 1
53800: PUSH
53801: LD_INT 3
53803: PLUS
53804: PUSH
53805: LD_VAR 0 2
53809: PUSH
53810: LD_INT 3
53812: PLUS
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: PUSH
53822: LD_VAR 0 1
53826: PUSH
53827: LD_INT 4
53829: PLUS
53830: PUSH
53831: LD_VAR 0 2
53835: PUSH
53836: LD_INT 4
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: LD_VAR 0 1
53848: PUSH
53849: LD_VAR 0 2
53853: PUSH
53854: LD_INT 3
53856: MINUS
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: PUSH
53866: LD_VAR 0 1
53870: PUSH
53871: LD_INT 4
53873: MINUS
53874: PUSH
53875: LD_VAR 0 2
53879: PUSH
53880: LD_INT 4
53882: MINUS
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// end ; 5 :
53899: GO 54039
53901: LD_INT 5
53903: DOUBLE
53904: EQUAL
53905: IFTRUE 53909
53907: GO 54038
53909: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_VAR 0 1
53919: PUSH
53920: LD_INT 4
53922: MINUS
53923: PUSH
53924: LD_VAR 0 2
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: PUSH
53937: LD_VAR 0 1
53941: PUSH
53942: LD_VAR 0 2
53946: PUSH
53947: LD_INT 4
53949: MINUS
53950: PUSH
53951: LD_INT 3
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: PUSH
53959: LD_VAR 0 1
53963: PUSH
53964: LD_INT 4
53966: PLUS
53967: PUSH
53968: LD_VAR 0 2
53972: PUSH
53973: LD_INT 4
53975: PLUS
53976: PUSH
53977: LD_INT 5
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: PUSH
53985: LD_VAR 0 1
53989: PUSH
53990: LD_INT 3
53992: PLUS
53993: PUSH
53994: LD_VAR 0 2
53998: PUSH
53999: LD_INT 4
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: PUSH
54007: LD_VAR 0 1
54011: PUSH
54012: LD_VAR 0 2
54016: PUSH
54017: LD_INT 3
54019: PLUS
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// end ; end ;
54036: GO 54039
54038: POP
// result := list ;
54039: LD_ADDR_VAR 0 4
54043: PUSH
54044: LD_VAR 0 5
54048: ST_TO_ADDR
// end ;
54049: LD_VAR 0 4
54053: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54054: LD_INT 0
54056: PPUSH
54057: PPUSH
54058: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54059: LD_VAR 0 1
54063: NOT
54064: PUSH
54065: LD_VAR 0 2
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: LD_INT 4
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: IN
54088: NOT
54089: OR
54090: IFFALSE 54094
// exit ;
54092: GO 54186
// tmp := [ ] ;
54094: LD_ADDR_VAR 0 5
54098: PUSH
54099: EMPTY
54100: ST_TO_ADDR
// for i in units do
54101: LD_ADDR_VAR 0 4
54105: PUSH
54106: LD_VAR 0 1
54110: PUSH
54111: FOR_IN
54112: IFFALSE 54155
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54114: LD_ADDR_VAR 0 5
54118: PUSH
54119: LD_VAR 0 5
54123: PPUSH
54124: LD_VAR 0 5
54128: PUSH
54129: LD_INT 1
54131: PLUS
54132: PPUSH
54133: LD_VAR 0 4
54137: PPUSH
54138: LD_VAR 0 2
54142: PPUSH
54143: CALL_OW 259
54147: PPUSH
54148: CALL_OW 2
54152: ST_TO_ADDR
54153: GO 54111
54155: POP
54156: POP
// if not tmp then
54157: LD_VAR 0 5
54161: NOT
54162: IFFALSE 54166
// exit ;
54164: GO 54186
// result := SortListByListDesc ( units , tmp ) ;
54166: LD_ADDR_VAR 0 3
54170: PUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: LD_VAR 0 5
54180: PPUSH
54181: CALL_OW 77
54185: ST_TO_ADDR
// end ;
54186: LD_VAR 0 3
54190: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54191: LD_INT 0
54193: PPUSH
54194: PPUSH
54195: PPUSH
// x := GetX ( building ) ;
54196: LD_ADDR_VAR 0 4
54200: PUSH
54201: LD_VAR 0 2
54205: PPUSH
54206: CALL_OW 250
54210: ST_TO_ADDR
// y := GetY ( building ) ;
54211: LD_ADDR_VAR 0 5
54215: PUSH
54216: LD_VAR 0 2
54220: PPUSH
54221: CALL_OW 251
54225: ST_TO_ADDR
// if GetTaskList ( unit ) then
54226: LD_VAR 0 1
54230: PPUSH
54231: CALL_OW 437
54235: IFFALSE 54330
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54237: LD_STRING e
54239: PUSH
54240: LD_VAR 0 1
54244: PPUSH
54245: CALL_OW 437
54249: PUSH
54250: LD_INT 1
54252: ARRAY
54253: PUSH
54254: LD_INT 1
54256: ARRAY
54257: EQUAL
54258: PUSH
54259: LD_VAR 0 4
54263: PUSH
54264: LD_VAR 0 1
54268: PPUSH
54269: CALL_OW 437
54273: PUSH
54274: LD_INT 1
54276: ARRAY
54277: PUSH
54278: LD_INT 2
54280: ARRAY
54281: EQUAL
54282: AND
54283: PUSH
54284: LD_VAR 0 5
54288: PUSH
54289: LD_VAR 0 1
54293: PPUSH
54294: CALL_OW 437
54298: PUSH
54299: LD_INT 1
54301: ARRAY
54302: PUSH
54303: LD_INT 3
54305: ARRAY
54306: EQUAL
54307: AND
54308: IFFALSE 54320
// result := true else
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_INT 1
54317: ST_TO_ADDR
54318: GO 54328
// result := false ;
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_INT 0
54327: ST_TO_ADDR
// end else
54328: GO 54338
// result := false ;
54330: LD_ADDR_VAR 0 3
54334: PUSH
54335: LD_INT 0
54337: ST_TO_ADDR
// end ;
54338: LD_VAR 0 3
54342: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54343: LD_INT 0
54345: PPUSH
54346: PPUSH
54347: PPUSH
54348: PPUSH
// if not unit or not area then
54349: LD_VAR 0 1
54353: NOT
54354: PUSH
54355: LD_VAR 0 2
54359: NOT
54360: OR
54361: IFFALSE 54365
// exit ;
54363: GO 54529
// tmp := AreaToList ( area , i ) ;
54365: LD_ADDR_VAR 0 6
54369: PUSH
54370: LD_VAR 0 2
54374: PPUSH
54375: LD_VAR 0 5
54379: PPUSH
54380: CALL_OW 517
54384: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54385: LD_ADDR_VAR 0 5
54389: PUSH
54390: DOUBLE
54391: LD_INT 1
54393: DEC
54394: ST_TO_ADDR
54395: LD_VAR 0 6
54399: PUSH
54400: LD_INT 1
54402: ARRAY
54403: PUSH
54404: FOR_TO
54405: IFFALSE 54527
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54407: LD_ADDR_VAR 0 7
54411: PUSH
54412: LD_VAR 0 6
54416: PUSH
54417: LD_INT 1
54419: ARRAY
54420: PUSH
54421: LD_VAR 0 5
54425: ARRAY
54426: PUSH
54427: LD_VAR 0 6
54431: PUSH
54432: LD_INT 2
54434: ARRAY
54435: PUSH
54436: LD_VAR 0 5
54440: ARRAY
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54446: LD_VAR 0 7
54450: PUSH
54451: LD_INT 1
54453: ARRAY
54454: PPUSH
54455: LD_VAR 0 7
54459: PUSH
54460: LD_INT 2
54462: ARRAY
54463: PPUSH
54464: CALL_OW 428
54468: PUSH
54469: LD_INT 0
54471: EQUAL
54472: IFFALSE 54525
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54474: LD_VAR 0 1
54478: PPUSH
54479: LD_VAR 0 7
54483: PUSH
54484: LD_INT 1
54486: ARRAY
54487: PPUSH
54488: LD_VAR 0 7
54492: PUSH
54493: LD_INT 2
54495: ARRAY
54496: PPUSH
54497: LD_VAR 0 3
54501: PPUSH
54502: CALL_OW 48
// result := IsPlaced ( unit ) ;
54506: LD_ADDR_VAR 0 4
54510: PUSH
54511: LD_VAR 0 1
54515: PPUSH
54516: CALL_OW 305
54520: ST_TO_ADDR
// exit ;
54521: POP
54522: POP
54523: GO 54529
// end ; end ;
54525: GO 54404
54527: POP
54528: POP
// end ;
54529: LD_VAR 0 4
54533: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54534: LD_INT 0
54536: PPUSH
54537: PPUSH
54538: PPUSH
// if not side or side > 8 then
54539: LD_VAR 0 1
54543: NOT
54544: PUSH
54545: LD_VAR 0 1
54549: PUSH
54550: LD_INT 8
54552: GREATER
54553: OR
54554: IFFALSE 54558
// exit ;
54556: GO 54745
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54558: LD_ADDR_VAR 0 4
54562: PUSH
54563: LD_INT 22
54565: PUSH
54566: LD_VAR 0 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 21
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PPUSH
54589: CALL_OW 69
54593: ST_TO_ADDR
// if not tmp then
54594: LD_VAR 0 4
54598: NOT
54599: IFFALSE 54603
// exit ;
54601: GO 54745
// enable_addtolog := true ;
54603: LD_ADDR_OWVAR 81
54607: PUSH
54608: LD_INT 1
54610: ST_TO_ADDR
// AddToLog ( [ ) ;
54611: LD_STRING [
54613: PPUSH
54614: CALL_OW 561
// for i in tmp do
54618: LD_ADDR_VAR 0 3
54622: PUSH
54623: LD_VAR 0 4
54627: PUSH
54628: FOR_IN
54629: IFFALSE 54736
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54631: LD_STRING [
54633: PUSH
54634: LD_VAR 0 3
54638: PPUSH
54639: CALL_OW 266
54643: STR
54644: PUSH
54645: LD_STRING , 
54647: STR
54648: PUSH
54649: LD_VAR 0 3
54653: PPUSH
54654: CALL_OW 250
54658: STR
54659: PUSH
54660: LD_STRING , 
54662: STR
54663: PUSH
54664: LD_VAR 0 3
54668: PPUSH
54669: CALL_OW 251
54673: STR
54674: PUSH
54675: LD_STRING , 
54677: STR
54678: PUSH
54679: LD_VAR 0 3
54683: PPUSH
54684: CALL_OW 254
54688: STR
54689: PUSH
54690: LD_STRING , 
54692: STR
54693: PUSH
54694: LD_VAR 0 3
54698: PPUSH
54699: LD_INT 1
54701: PPUSH
54702: CALL_OW 268
54706: STR
54707: PUSH
54708: LD_STRING , 
54710: STR
54711: PUSH
54712: LD_VAR 0 3
54716: PPUSH
54717: LD_INT 2
54719: PPUSH
54720: CALL_OW 268
54724: STR
54725: PUSH
54726: LD_STRING ],
54728: STR
54729: PPUSH
54730: CALL_OW 561
// end ;
54734: GO 54628
54736: POP
54737: POP
// AddToLog ( ]; ) ;
54738: LD_STRING ];
54740: PPUSH
54741: CALL_OW 561
// end ;
54745: LD_VAR 0 2
54749: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54750: LD_INT 0
54752: PPUSH
54753: PPUSH
54754: PPUSH
54755: PPUSH
54756: PPUSH
// if not area or not rate or not max then
54757: LD_VAR 0 1
54761: NOT
54762: PUSH
54763: LD_VAR 0 2
54767: NOT
54768: OR
54769: PUSH
54770: LD_VAR 0 4
54774: NOT
54775: OR
54776: IFFALSE 54780
// exit ;
54778: GO 54972
// while 1 do
54780: LD_INT 1
54782: IFFALSE 54972
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54784: LD_ADDR_VAR 0 9
54788: PUSH
54789: LD_VAR 0 1
54793: PPUSH
54794: LD_INT 1
54796: PPUSH
54797: CALL_OW 287
54801: PUSH
54802: LD_INT 10
54804: MUL
54805: ST_TO_ADDR
// r := rate / 10 ;
54806: LD_ADDR_VAR 0 7
54810: PUSH
54811: LD_VAR 0 2
54815: PUSH
54816: LD_INT 10
54818: DIVREAL
54819: ST_TO_ADDR
// time := 1 1$00 ;
54820: LD_ADDR_VAR 0 8
54824: PUSH
54825: LD_INT 2100
54827: ST_TO_ADDR
// if amount < min then
54828: LD_VAR 0 9
54832: PUSH
54833: LD_VAR 0 3
54837: LESS
54838: IFFALSE 54856
// r := r * 2 else
54840: LD_ADDR_VAR 0 7
54844: PUSH
54845: LD_VAR 0 7
54849: PUSH
54850: LD_INT 2
54852: MUL
54853: ST_TO_ADDR
54854: GO 54882
// if amount > max then
54856: LD_VAR 0 9
54860: PUSH
54861: LD_VAR 0 4
54865: GREATER
54866: IFFALSE 54882
// r := r / 2 ;
54868: LD_ADDR_VAR 0 7
54872: PUSH
54873: LD_VAR 0 7
54877: PUSH
54878: LD_INT 2
54880: DIVREAL
54881: ST_TO_ADDR
// time := time / r ;
54882: LD_ADDR_VAR 0 8
54886: PUSH
54887: LD_VAR 0 8
54891: PUSH
54892: LD_VAR 0 7
54896: DIVREAL
54897: ST_TO_ADDR
// if time < 0 then
54898: LD_VAR 0 8
54902: PUSH
54903: LD_INT 0
54905: LESS
54906: IFFALSE 54923
// time := time * - 1 ;
54908: LD_ADDR_VAR 0 8
54912: PUSH
54913: LD_VAR 0 8
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: MUL
54922: ST_TO_ADDR
// wait ( time ) ;
54923: LD_VAR 0 8
54927: PPUSH
54928: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54932: LD_INT 35
54934: PPUSH
54935: LD_INT 875
54937: PPUSH
54938: CALL_OW 12
54942: PPUSH
54943: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54947: LD_INT 1
54949: PPUSH
54950: LD_INT 5
54952: PPUSH
54953: CALL_OW 12
54957: PPUSH
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_INT 1
54965: PPUSH
54966: CALL_OW 55
// end ;
54970: GO 54780
// end ;
54972: LD_VAR 0 5
54976: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54977: LD_INT 0
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
54983: PPUSH
54984: PPUSH
54985: PPUSH
54986: PPUSH
// if not turrets or not factories then
54987: LD_VAR 0 1
54991: NOT
54992: PUSH
54993: LD_VAR 0 2
54997: NOT
54998: OR
54999: IFFALSE 55003
// exit ;
55001: GO 55310
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55003: LD_ADDR_VAR 0 10
55007: PUSH
55008: LD_INT 5
55010: PUSH
55011: LD_INT 6
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 5
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 24
55045: PUSH
55046: LD_INT 25
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 23
55055: PUSH
55056: LD_INT 27
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 42
55069: PUSH
55070: LD_INT 43
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 44
55079: PUSH
55080: LD_INT 46
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 45
55089: PUSH
55090: LD_INT 47
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// result := [ ] ;
55107: LD_ADDR_VAR 0 3
55111: PUSH
55112: EMPTY
55113: ST_TO_ADDR
// for i in turrets do
55114: LD_ADDR_VAR 0 4
55118: PUSH
55119: LD_VAR 0 1
55123: PUSH
55124: FOR_IN
55125: IFFALSE 55308
// begin nat := GetNation ( i ) ;
55127: LD_ADDR_VAR 0 7
55131: PUSH
55132: LD_VAR 0 4
55136: PPUSH
55137: CALL_OW 248
55141: ST_TO_ADDR
// weapon := 0 ;
55142: LD_ADDR_VAR 0 8
55146: PUSH
55147: LD_INT 0
55149: ST_TO_ADDR
// if not nat then
55150: LD_VAR 0 7
55154: NOT
55155: IFFALSE 55159
// continue ;
55157: GO 55124
// for j in list [ nat ] do
55159: LD_ADDR_VAR 0 5
55163: PUSH
55164: LD_VAR 0 10
55168: PUSH
55169: LD_VAR 0 7
55173: ARRAY
55174: PUSH
55175: FOR_IN
55176: IFFALSE 55217
// if GetBWeapon ( i ) = j [ 1 ] then
55178: LD_VAR 0 4
55182: PPUSH
55183: CALL_OW 269
55187: PUSH
55188: LD_VAR 0 5
55192: PUSH
55193: LD_INT 1
55195: ARRAY
55196: EQUAL
55197: IFFALSE 55215
// begin weapon := j [ 2 ] ;
55199: LD_ADDR_VAR 0 8
55203: PUSH
55204: LD_VAR 0 5
55208: PUSH
55209: LD_INT 2
55211: ARRAY
55212: ST_TO_ADDR
// break ;
55213: GO 55217
// end ;
55215: GO 55175
55217: POP
55218: POP
// if not weapon then
55219: LD_VAR 0 8
55223: NOT
55224: IFFALSE 55228
// continue ;
55226: GO 55124
// for k in factories do
55228: LD_ADDR_VAR 0 6
55232: PUSH
55233: LD_VAR 0 2
55237: PUSH
55238: FOR_IN
55239: IFFALSE 55304
// begin weapons := AvailableWeaponList ( k ) ;
55241: LD_ADDR_VAR 0 9
55245: PUSH
55246: LD_VAR 0 6
55250: PPUSH
55251: CALL_OW 478
55255: ST_TO_ADDR
// if not weapons then
55256: LD_VAR 0 9
55260: NOT
55261: IFFALSE 55265
// continue ;
55263: GO 55238
// if weapon in weapons then
55265: LD_VAR 0 8
55269: PUSH
55270: LD_VAR 0 9
55274: IN
55275: IFFALSE 55302
// begin result := [ i , weapon ] ;
55277: LD_ADDR_VAR 0 3
55281: PUSH
55282: LD_VAR 0 4
55286: PUSH
55287: LD_VAR 0 8
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// exit ;
55296: POP
55297: POP
55298: POP
55299: POP
55300: GO 55310
// end ; end ;
55302: GO 55238
55304: POP
55305: POP
// end ;
55306: GO 55124
55308: POP
55309: POP
// end ;
55310: LD_VAR 0 3
55314: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55315: LD_INT 0
55317: PPUSH
// if not side or side > 8 then
55318: LD_VAR 0 3
55322: NOT
55323: PUSH
55324: LD_VAR 0 3
55328: PUSH
55329: LD_INT 8
55331: GREATER
55332: OR
55333: IFFALSE 55337
// exit ;
55335: GO 55396
// if not range then
55337: LD_VAR 0 4
55341: NOT
55342: IFFALSE 55353
// range := - 12 ;
55344: LD_ADDR_VAR 0 4
55348: PUSH
55349: LD_INT 12
55351: NEG
55352: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55353: LD_VAR 0 1
55357: PPUSH
55358: LD_VAR 0 2
55362: PPUSH
55363: LD_VAR 0 3
55367: PPUSH
55368: LD_VAR 0 4
55372: PPUSH
55373: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55377: LD_VAR 0 1
55381: PPUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_VAR 0 3
55391: PPUSH
55392: CALL_OW 331
// end ;
55396: LD_VAR 0 5
55400: RET
// export function Video ( mode ) ; begin
55401: LD_INT 0
55403: PPUSH
// ingame_video = mode ;
55404: LD_ADDR_OWVAR 52
55408: PUSH
55409: LD_VAR 0 1
55413: ST_TO_ADDR
// interface_hidden = mode ;
55414: LD_ADDR_OWVAR 54
55418: PUSH
55419: LD_VAR 0 1
55423: ST_TO_ADDR
// end ;
55424: LD_VAR 0 2
55428: RET
// export function Join ( array , element ) ; begin
55429: LD_INT 0
55431: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55432: LD_ADDR_VAR 0 3
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_INT 1
55449: PLUS
55450: PPUSH
55451: LD_VAR 0 2
55455: PPUSH
55456: CALL_OW 1
55460: ST_TO_ADDR
// end ;
55461: LD_VAR 0 3
55465: RET
// export function JoinUnion ( array , element ) ; begin
55466: LD_INT 0
55468: PPUSH
// result := array union element ;
55469: LD_ADDR_VAR 0 3
55473: PUSH
55474: LD_VAR 0 1
55478: PUSH
55479: LD_VAR 0 2
55483: UNION
55484: ST_TO_ADDR
// end ;
55485: LD_VAR 0 3
55489: RET
// export function GetBehemoths ( side ) ; begin
55490: LD_INT 0
55492: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55493: LD_ADDR_VAR 0 2
55497: PUSH
55498: LD_INT 22
55500: PUSH
55501: LD_VAR 0 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 31
55512: PUSH
55513: LD_INT 25
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PPUSH
55524: CALL_OW 69
55528: ST_TO_ADDR
// end ;
55529: LD_VAR 0 2
55533: RET
// export function Shuffle ( array ) ; var i , index ; begin
55534: LD_INT 0
55536: PPUSH
55537: PPUSH
55538: PPUSH
// result := [ ] ;
55539: LD_ADDR_VAR 0 2
55543: PUSH
55544: EMPTY
55545: ST_TO_ADDR
// if not array then
55546: LD_VAR 0 1
55550: NOT
55551: IFFALSE 55555
// exit ;
55553: GO 55654
// Randomize ;
55555: CALL_OW 10
// for i = array downto 1 do
55559: LD_ADDR_VAR 0 3
55563: PUSH
55564: DOUBLE
55565: LD_VAR 0 1
55569: INC
55570: ST_TO_ADDR
55571: LD_INT 1
55573: PUSH
55574: FOR_DOWNTO
55575: IFFALSE 55652
// begin index := rand ( 1 , array ) ;
55577: LD_ADDR_VAR 0 4
55581: PUSH
55582: LD_INT 1
55584: PPUSH
55585: LD_VAR 0 1
55589: PPUSH
55590: CALL_OW 12
55594: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55595: LD_ADDR_VAR 0 2
55599: PUSH
55600: LD_VAR 0 2
55604: PPUSH
55605: LD_VAR 0 2
55609: PUSH
55610: LD_INT 1
55612: PLUS
55613: PPUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_VAR 0 4
55623: ARRAY
55624: PPUSH
55625: CALL_OW 2
55629: ST_TO_ADDR
// array := Delete ( array , index ) ;
55630: LD_ADDR_VAR 0 1
55634: PUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: LD_VAR 0 4
55644: PPUSH
55645: CALL_OW 3
55649: ST_TO_ADDR
// end ;
55650: GO 55574
55652: POP
55653: POP
// end ;
55654: LD_VAR 0 2
55658: RET
// export function GetBaseMaterials ( base ) ; begin
55659: LD_INT 0
55661: PPUSH
// result := [ 0 , 0 , 0 ] ;
55662: LD_ADDR_VAR 0 2
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// if not base then
55681: LD_VAR 0 1
55685: NOT
55686: IFFALSE 55690
// exit ;
55688: GO 55739
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55690: LD_ADDR_VAR 0 2
55694: PUSH
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_INT 1
55702: PPUSH
55703: CALL_OW 275
55707: PUSH
55708: LD_VAR 0 1
55712: PPUSH
55713: LD_INT 2
55715: PPUSH
55716: CALL_OW 275
55720: PUSH
55721: LD_VAR 0 1
55725: PPUSH
55726: LD_INT 3
55728: PPUSH
55729: CALL_OW 275
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: ST_TO_ADDR
// end ;
55739: LD_VAR 0 2
55743: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55744: LD_INT 0
55746: PPUSH
55747: PPUSH
// result := array ;
55748: LD_ADDR_VAR 0 3
55752: PUSH
55753: LD_VAR 0 1
55757: ST_TO_ADDR
// if size > 0 then
55758: LD_VAR 0 2
55762: PUSH
55763: LD_INT 0
55765: GREATER
55766: IFFALSE 55812
// for i := array downto size do
55768: LD_ADDR_VAR 0 4
55772: PUSH
55773: DOUBLE
55774: LD_VAR 0 1
55778: INC
55779: ST_TO_ADDR
55780: LD_VAR 0 2
55784: PUSH
55785: FOR_DOWNTO
55786: IFFALSE 55810
// result := Delete ( result , result ) ;
55788: LD_ADDR_VAR 0 3
55792: PUSH
55793: LD_VAR 0 3
55797: PPUSH
55798: LD_VAR 0 3
55802: PPUSH
55803: CALL_OW 3
55807: ST_TO_ADDR
55808: GO 55785
55810: POP
55811: POP
// end ;
55812: LD_VAR 0 3
55816: RET
// export function ComExit ( unit ) ; var tmp ; begin
55817: LD_INT 0
55819: PPUSH
55820: PPUSH
// if not IsInUnit ( unit ) then
55821: LD_VAR 0 1
55825: PPUSH
55826: CALL_OW 310
55830: NOT
55831: IFFALSE 55835
// exit ;
55833: GO 55895
// tmp := IsInUnit ( unit ) ;
55835: LD_ADDR_VAR 0 3
55839: PUSH
55840: LD_VAR 0 1
55844: PPUSH
55845: CALL_OW 310
55849: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55850: LD_VAR 0 3
55854: PPUSH
55855: CALL_OW 247
55859: PUSH
55860: LD_INT 2
55862: EQUAL
55863: IFFALSE 55876
// ComExitVehicle ( unit ) else
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 121
55874: GO 55885
// ComExitBuilding ( unit ) ;
55876: LD_VAR 0 1
55880: PPUSH
55881: CALL_OW 122
// result := tmp ;
55885: LD_ADDR_VAR 0 2
55889: PUSH
55890: LD_VAR 0 3
55894: ST_TO_ADDR
// end ;
55895: LD_VAR 0 2
55899: RET
// export function ResetHc ; begin
55900: LD_INT 0
55902: PPUSH
// InitHc ;
55903: CALL_OW 19
// hc_importance := 0 ;
55907: LD_ADDR_OWVAR 32
55911: PUSH
55912: LD_INT 0
55914: ST_TO_ADDR
// end ;
55915: LD_VAR 0 1
55919: RET
