// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6078 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6056
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 17091 0 0
5948: GO 6056
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 17224 0 0
5963: GO 6056
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 17309 0 0
5978: GO 6056
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 5 :
5989: CALL 17757 0 0
5993: GO 6056
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 6 :
6004: CALL 17868 0 0
6008: GO 6056
6010: LD_INT 6
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 7 :
6019: CALL 17925 0 0
6023: GO 6056
6025: LD_INT 7
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 8 :
6034: CALL 17967 0 0
6038: GO 6056
6040: LD_INT 8
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; end ;
6049: CALL 18068 0 0
6053: GO 6056
6055: POP
// end ; end ;
6056: PPOPN 6
6058: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6059: GO 6061
6061: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6062: LD_STRING initStreamRollete();
6064: PPUSH
6065: CALL_OW 559
// InitStreamMode ;
6069: CALL 6078 0 0
// DefineStreamItems ( ) ;
6073: CALL 6518 0 0
// end ;
6077: END
// function InitStreamMode ; begin
6078: LD_INT 0
6080: PPUSH
// streamModeActive := false ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// normalCounter := 36 ;
6089: LD_ADDR_EXP 16
6093: PUSH
6094: LD_INT 36
6096: ST_TO_ADDR
// hardcoreCounter := 16 ;
6097: LD_ADDR_EXP 17
6101: PUSH
6102: LD_INT 16
6104: ST_TO_ADDR
// sRocket := false ;
6105: LD_ADDR_EXP 20
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sSpeed := false ;
6113: LD_ADDR_EXP 19
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sEngine := false ;
6121: LD_ADDR_EXP 21
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sSpec := false ;
6129: LD_ADDR_EXP 18
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sLevel := false ;
6137: LD_ADDR_EXP 22
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sArmoury := false ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sRadar := false ;
6153: LD_ADDR_EXP 24
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sBunker := false ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sHack := false ;
6169: LD_ADDR_EXP 26
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sFire := false ;
6177: LD_ADDR_EXP 27
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sRefresh := false ;
6185: LD_ADDR_EXP 28
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sExp := false ;
6193: LD_ADDR_EXP 29
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sDepot := false ;
6201: LD_ADDR_EXP 30
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sFlag := false ;
6209: LD_ADDR_EXP 31
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sKamikadze := false ;
6217: LD_ADDR_EXP 39
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTroll := false ;
6225: LD_ADDR_EXP 40
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSlow := false ;
6233: LD_ADDR_EXP 41
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLack := false ;
6241: LD_ADDR_EXP 42
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sTank := false ;
6249: LD_ADDR_EXP 44
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRemote := false ;
6257: LD_ADDR_EXP 45
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sPowell := false ;
6265: LD_ADDR_EXP 46
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sTeleport := false ;
6273: LD_ADDR_EXP 49
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sOilTower := false ;
6281: LD_ADDR_EXP 51
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sShovel := false ;
6289: LD_ADDR_EXP 52
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sSheik := false ;
6297: LD_ADDR_EXP 53
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sEarthquake := false ;
6305: LD_ADDR_EXP 55
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sAI := false ;
6313: LD_ADDR_EXP 56
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sCargo := false ;
6321: LD_ADDR_EXP 59
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sDLaser := false ;
6329: LD_ADDR_EXP 60
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sExchange := false ;
6337: LD_ADDR_EXP 61
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sFac := false ;
6345: LD_ADDR_EXP 62
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sPower := false ;
6353: LD_ADDR_EXP 63
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRandom := false ;
6361: LD_ADDR_EXP 64
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sShield := false ;
6369: LD_ADDR_EXP 65
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTime := false ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTools := false ;
6385: LD_ADDR_EXP 67
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sSold := false ;
6393: LD_ADDR_EXP 32
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sDiff := false ;
6401: LD_ADDR_EXP 33
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sFog := false ;
6409: LD_ADDR_EXP 36
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sReset := false ;
6417: LD_ADDR_EXP 37
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSun := false ;
6425: LD_ADDR_EXP 38
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sTiger := false ;
6433: LD_ADDR_EXP 34
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBomb := false ;
6441: LD_ADDR_EXP 35
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sWound := false ;
6449: LD_ADDR_EXP 43
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBetray := false ;
6457: LD_ADDR_EXP 47
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sContamin := false ;
6465: LD_ADDR_EXP 48
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sOil := false ;
6473: LD_ADDR_EXP 50
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sStu := false ;
6481: LD_ADDR_EXP 54
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sBazooka := false ;
6489: LD_ADDR_EXP 57
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sMortar := false ;
6497: LD_ADDR_EXP 58
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sRanger := false ;
6505: LD_ADDR_EXP 68
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// result := [ ] ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: EMPTY
6531: ST_TO_ADDR
// if campaign_id = 1 then
6532: LD_OWVAR 69
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: IFFALSE 9478
// begin case mission_number of 1 :
6542: LD_OWVAR 70
6546: PUSH
6547: LD_INT 1
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6619
6555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 26
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 106
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 9476
6619: LD_INT 2
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6699
6627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 4
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 101
6673: PUSH
6674: LD_INT 102
6676: PUSH
6677: LD_INT 105
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: LD_INT 108
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9476
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6783
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9476
6783: LD_INT 4
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6875
6791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 8
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: LD_INT 16
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 101
6849: PUSH
6850: LD_INT 102
6852: PUSH
6853: LD_INT 105
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 108
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9476
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6983
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 8
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: LD_INT 16
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 25
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 105
6955: PUSH
6956: LD_INT 106
6958: PUSH
6959: LD_INT 108
6961: PUSH
6962: LD_INT 109
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 9476
6983: LD_INT 6
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7111
6991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 32
7050: PUSH
7051: LD_INT 36
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 105
7083: PUSH
7084: LD_INT 106
7086: PUSH
7087: LD_INT 108
7089: PUSH
7090: LD_INT 109
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 9476
7111: LD_INT 7
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7219
7119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 4
7130: PUSH
7131: LD_INT 5
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 11
7139: PUSH
7140: LD_INT 12
7142: PUSH
7143: LD_INT 15
7145: PUSH
7146: LD_INT 16
7148: PUSH
7149: LD_INT 20
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 112
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 9476
7219: LD_INT 8
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7355
7227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 6
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 105
7326: PUSH
7327: LD_INT 106
7329: PUSH
7330: LD_INT 108
7332: PUSH
7333: LD_INT 109
7335: PUSH
7336: LD_INT 112
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 9476
7355: LD_INT 9
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7499
7363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7364: LD_ADDR_VAR 0 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 4
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 7
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 28
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 36
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 103
7463: PUSH
7464: LD_INT 105
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: LD_INT 108
7472: PUSH
7473: LD_INT 109
7475: PUSH
7476: LD_INT 112
7478: PUSH
7479: LD_INT 114
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 9476
7499: LD_INT 10
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7691
7507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 7
7527: PUSH
7528: LD_INT 8
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: LD_INT 10
7536: PUSH
7537: LD_INT 11
7539: PUSH
7540: LD_INT 12
7542: PUSH
7543: LD_INT 13
7545: PUSH
7546: LD_INT 14
7548: PUSH
7549: LD_INT 15
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: LD_INT 17
7557: PUSH
7558: LD_INT 18
7560: PUSH
7561: LD_INT 19
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 23
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 28
7587: PUSH
7588: LD_INT 30
7590: PUSH
7591: LD_INT 31
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 36
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 9476
7691: LD_INT 11
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7891
7699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 6
7719: PUSH
7720: LD_INT 7
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: LD_INT 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 11
7734: PUSH
7735: LD_INT 12
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 28
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 31
7788: PUSH
7789: LD_INT 32
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 101
7833: PUSH
7834: LD_INT 102
7836: PUSH
7837: LD_INT 103
7839: PUSH
7840: LD_INT 104
7842: PUSH
7843: LD_INT 105
7845: PUSH
7846: LD_INT 106
7848: PUSH
7849: LD_INT 107
7851: PUSH
7852: LD_INT 108
7854: PUSH
7855: LD_INT 109
7857: PUSH
7858: LD_INT 110
7860: PUSH
7861: LD_INT 111
7863: PUSH
7864: LD_INT 112
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9476
7891: LD_INT 12
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8107
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 31
7994: PUSH
7995: LD_INT 32
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 36
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 9476
8107: LD_INT 13
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8311
8115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 14
8153: PUSH
8154: LD_INT 15
8156: PUSH
8157: LD_INT 16
8159: PUSH
8160: LD_INT 17
8162: PUSH
8163: LD_INT 18
8165: PUSH
8166: LD_INT 19
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 24
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 27
8192: PUSH
8193: LD_INT 28
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 33
8207: PUSH
8208: LD_INT 34
8210: PUSH
8211: LD_INT 36
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 104
8258: PUSH
8259: LD_INT 105
8261: PUSH
8262: LD_INT 106
8264: PUSH
8265: LD_INT 107
8267: PUSH
8268: LD_INT 108
8270: PUSH
8271: LD_INT 109
8273: PUSH
8274: LD_INT 110
8276: PUSH
8277: LD_INT 111
8279: PUSH
8280: LD_INT 112
8282: PUSH
8283: LD_INT 113
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 9476
8311: LD_INT 14
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8531
8319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 4
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: LD_INT 7
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: LD_INT 9
8351: PUSH
8352: LD_INT 10
8354: PUSH
8355: LD_INT 11
8357: PUSH
8358: LD_INT 12
8360: PUSH
8361: LD_INT 13
8363: PUSH
8364: LD_INT 14
8366: PUSH
8367: LD_INT 15
8369: PUSH
8370: LD_INT 16
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 28
8408: PUSH
8409: LD_INT 29
8411: PUSH
8412: LD_INT 30
8414: PUSH
8415: LD_INT 31
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 33
8423: PUSH
8424: LD_INT 34
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 102
8472: PUSH
8473: LD_INT 103
8475: PUSH
8476: LD_INT 104
8478: PUSH
8479: LD_INT 105
8481: PUSH
8482: LD_INT 106
8484: PUSH
8485: LD_INT 107
8487: PUSH
8488: LD_INT 108
8490: PUSH
8491: LD_INT 109
8493: PUSH
8494: LD_INT 110
8496: PUSH
8497: LD_INT 111
8499: PUSH
8500: LD_INT 112
8502: PUSH
8503: LD_INT 113
8505: PUSH
8506: LD_INT 114
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9476
8531: LD_INT 15
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8751
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9476
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8883
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 9476
8883: LD_INT 17
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9103
8891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_INT 7
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 9
8923: PUSH
8924: LD_INT 10
8926: PUSH
8927: LD_INT 11
8929: PUSH
8930: LD_INT 12
8932: PUSH
8933: LD_INT 13
8935: PUSH
8936: LD_INT 14
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 17
8947: PUSH
8948: LD_INT 18
8950: PUSH
8951: LD_INT 19
8953: PUSH
8954: LD_INT 20
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 26
8974: PUSH
8975: LD_INT 27
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 29
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 36
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 101
9041: PUSH
9042: LD_INT 102
9044: PUSH
9045: LD_INT 103
9047: PUSH
9048: LD_INT 104
9050: PUSH
9051: LD_INT 105
9053: PUSH
9054: LD_INT 106
9056: PUSH
9057: LD_INT 107
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 109
9065: PUSH
9066: LD_INT 110
9068: PUSH
9069: LD_INT 111
9071: PUSH
9072: LD_INT 112
9074: PUSH
9075: LD_INT 113
9077: PUSH
9078: LD_INT 114
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9476
9103: LD_INT 18
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9247
9111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 12
9134: PUSH
9135: LD_INT 15
9137: PUSH
9138: LD_INT 16
9140: PUSH
9141: LD_INT 20
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 34
9173: PUSH
9174: LD_INT 35
9176: PUSH
9177: LD_INT 36
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 103
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 115
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: ST_TO_ADDR
9245: GO 9476
9247: LD_INT 19
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9475
9255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 7
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: LD_INT 10
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: LD_INT 15
9305: PUSH
9306: LD_INT 16
9308: PUSH
9309: LD_INT 17
9311: PUSH
9312: LD_INT 18
9314: PUSH
9315: LD_INT 19
9317: PUSH
9318: LD_INT 20
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 24
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 29
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 31
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 33
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 36
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 101
9409: PUSH
9410: LD_INT 102
9412: PUSH
9413: LD_INT 103
9415: PUSH
9416: LD_INT 104
9418: PUSH
9419: LD_INT 105
9421: PUSH
9422: LD_INT 106
9424: PUSH
9425: LD_INT 107
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 109
9433: PUSH
9434: LD_INT 110
9436: PUSH
9437: LD_INT 111
9439: PUSH
9440: LD_INT 112
9442: PUSH
9443: LD_INT 113
9445: PUSH
9446: LD_INT 114
9448: PUSH
9449: LD_INT 115
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// end else
9476: GO 9695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 6
9500: PUSH
9501: LD_INT 7
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 17
9533: PUSH
9534: LD_INT 18
9536: PUSH
9537: LD_INT 19
9539: PUSH
9540: LD_INT 20
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 27
9563: PUSH
9564: LD_INT 28
9566: PUSH
9567: LD_INT 29
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 33
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 36
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 103
9637: PUSH
9638: LD_INT 104
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 107
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 110
9658: PUSH
9659: LD_INT 111
9661: PUSH
9662: LD_INT 112
9664: PUSH
9665: LD_INT 113
9667: PUSH
9668: LD_INT 114
9670: PUSH
9671: LD_INT 115
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: ST_TO_ADDR
// if result then
9695: LD_VAR 0 1
9699: IFFALSE 9988
// begin normal :=  ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_STRING 
9708: ST_TO_ADDR
// hardcore :=  ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// for i = 1 to normalCounter do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_EXP 16
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9834
// begin tmp := 0 ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_STRING 0
9742: ST_TO_ADDR
// if result [ 1 ] then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: IFFALSE 9816
// if result [ 1 ] [ 1 ] = i then
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PUSH
9766: LD_VAR 0 5
9770: EQUAL
9771: IFFALSE 9816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 3
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// tmp := 1 ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_STRING 1
9815: ST_TO_ADDR
// end ; normal := normal & tmp ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_VAR 0 2
9830: STR
9831: ST_TO_ADDR
// end ;
9832: GO 9732
9834: POP
9835: POP
// for i = 1 to hardcoreCounter do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_EXP 17
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9957
// begin tmp := 0 ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_STRING 0
9861: ST_TO_ADDR
// if result [ 2 ] then
9862: LD_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: IFFALSE 9939
// if result [ 2 ] [ 1 ] = 100 + i then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 2
9879: ARRAY
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PUSH
9885: LD_INT 100
9887: PUSH
9888: LD_VAR 0 5
9892: PLUS
9893: EQUAL
9894: IFFALSE 9939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 3
9925: PPUSH
9926: CALL_OW 1
9930: ST_TO_ADDR
// tmp := 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_STRING 1
9938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_VAR 0 2
9953: STR
9954: ST_TO_ADDR
// end ;
9955: GO 9851
9957: POP
9958: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9959: LD_STRING getStreamItemsFromMission("
9961: PUSH
9962: LD_VAR 0 3
9966: STR
9967: PUSH
9968: LD_STRING ","
9970: STR
9971: PUSH
9972: LD_VAR 0 4
9976: STR
9977: PUSH
9978: LD_STRING ")
9980: STR
9981: PPUSH
9982: CALL_OW 559
// end else
9986: GO 9995
// ToLua ( getStreamItemsFromMission("","") ) ;
9988: LD_STRING getStreamItemsFromMission("","")
9990: PPUSH
9991: CALL_OW 559
// end ;
9995: LD_VAR 0 1
9999: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10000: LD_EXP 15
10004: PUSH
10005: LD_EXP 20
10009: AND
10010: IFFALSE 10134
10012: GO 10014
10014: DISABLE
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// begin enable ;
10019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 45
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 47
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if not tmp then
10096: LD_VAR 0 2
10100: NOT
10101: IFFALSE 10105
// exit ;
10103: GO 10134
// for i in tmp do
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_VAR 0 2
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10132
// begin SetLives ( i , 0 ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 234
// end ;
10130: GO 10115
10132: POP
10133: POP
// end ;
10134: PPOPN 2
10136: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10137: LD_EXP 15
10141: PUSH
10142: LD_EXP 21
10146: AND
10147: IFFALSE 10231
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin enable ;
10156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_OWVAR 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 2
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10231
// for i in tmp do
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: FOR_IN
10213: IFFALSE 10229
// begin SetLives ( i , 0 ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 0
10222: PPUSH
10223: CALL_OW 234
// end ;
10227: GO 10212
10229: POP
10230: POP
// end ;
10231: PPOPN 2
10233: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10234: LD_EXP 15
10238: PUSH
10239: LD_EXP 18
10243: AND
10244: IFFALSE 10337
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
// begin enable ;
10252: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10253: LD_ADDR_VAR 0 1
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_OWVAR 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10335
// begin SetClass ( i , 1 ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: GO 10318
10335: POP
10336: POP
// end ;
10337: PPOPN 1
10339: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10340: LD_EXP 15
10344: PUSH
10345: LD_EXP 19
10349: AND
10350: PUSH
10351: LD_OWVAR 65
10355: PUSH
10356: LD_INT 7
10358: LESS
10359: AND
10360: IFFALSE 10374
10362: GO 10364
10364: DISABLE
// begin enable ;
10365: ENABLE
// game_speed := 7 ;
10366: LD_ADDR_OWVAR 65
10370: PUSH
10371: LD_INT 7
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10375: LD_EXP 15
10379: PUSH
10380: LD_EXP 22
10384: AND
10385: IFFALSE 10587
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 81
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10587
// if tmp > 5 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 5
10447: GREATER
10448: IFFALSE 10460
// k := 5 else
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: ST_TO_ADDR
10458: GO 10470
// k := tmp ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_VAR 0 3
10469: ST_TO_ADDR
// for i := 1 to k do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10585
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_VAR 0 1
10497: ARRAY
10498: PPUSH
10499: LD_VAR 0 1
10503: PUSH
10504: LD_INT 4
10506: MOD
10507: PUSH
10508: LD_INT 1
10510: PLUS
10511: PPUSH
10512: CALL_OW 259
10516: PUSH
10517: LD_INT 10
10519: LESS
10520: IFFALSE 10583
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 1
10531: ARRAY
10532: PPUSH
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 4
10540: MOD
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_VAR 0 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 4
10564: MOD
10565: PUSH
10566: LD_INT 1
10568: PLUS
10569: PPUSH
10570: CALL_OW 259
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PPUSH
10579: CALL_OW 237
10583: GO 10485
10585: POP
10586: POP
// end ;
10587: PPOPN 3
10589: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10590: LD_EXP 15
10594: PUSH
10595: LD_EXP 23
10599: AND
10600: IFFALSE 10620
10602: GO 10604
10604: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10605: LD_INT 4
10607: PPUSH
10608: LD_OWVAR 2
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 324
10620: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10621: LD_EXP 15
10625: PUSH
10626: LD_EXP 52
10630: AND
10631: IFFALSE 10651
10633: GO 10635
10635: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10636: LD_INT 19
10638: PPUSH
10639: LD_OWVAR 2
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 324
10651: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10652: LD_EXP 15
10656: PUSH
10657: LD_EXP 24
10661: AND
10662: IFFALSE 10764
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
// begin enable ;
10671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 34
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 34
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10767: LD_EXP 15
10771: PUSH
10772: LD_EXP 25
10776: AND
10777: IFFALSE 10797
10779: GO 10781
10781: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10782: LD_INT 32
10784: PPUSH
10785: LD_OWVAR 2
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 324
10797: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10798: LD_EXP 15
10802: PUSH
10803: LD_EXP 26
10807: AND
10808: IFFALSE 10989
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 33
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 2
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10989
// side := 0 ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10933
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10887: LD_OWVAR 2
10891: PUSH
10892: LD_VAR 0 1
10896: NONEQUAL
10897: PUSH
10898: LD_OWVAR 2
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 81
10912: PUSH
10913: LD_INT 2
10915: EQUAL
10916: AND
10917: IFFALSE 10931
// begin side := i ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// break ;
10929: GO 10933
// end ;
10931: GO 10884
10933: POP
10934: POP
// if not side then
10935: LD_VAR 0 3
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 10989
// for i := 1 to tmp do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: FOR_TO
10960: IFFALSE 10987
// if Prob ( 60 ) then
10962: LD_INT 60
10964: PPUSH
10965: CALL_OW 13
10969: IFFALSE 10985
// SetSide ( i , side ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 235
10985: GO 10959
10987: POP
10988: POP
// end ;
10989: PPOPN 3
10991: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10992: LD_EXP 15
10996: PUSH
10997: LD_EXP 28
11001: AND
11002: IFFALSE 11121
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11119
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 257
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: IN
11095: IFFALSE 11117
// SetClass ( un , rand ( 1 , 4 ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 336
11117: GO 11064
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11124: LD_EXP 15
11128: PUSH
11129: LD_EXP 27
11133: AND
11134: IFFALSE 11213
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_OWVAR 2
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 12
11204: ARRAY
11205: PPUSH
11206: LD_INT 100
11208: PPUSH
11209: CALL_OW 234
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 29
11225: AND
11226: IFFALSE 11324
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11324
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 3000
11311: PPUSH
11312: LD_INT 9000
11314: PPUSH
11315: CALL_OW 12
11319: PPUSH
11320: CALL_OW 492
// end ;
11324: PPOPN 1
11326: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11327: LD_EXP 15
11331: PUSH
11332: LD_EXP 30
11336: AND
11337: IFFALSE 11357
11339: GO 11341
11341: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11342: LD_INT 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 324
11357: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11358: LD_EXP 15
11362: PUSH
11363: LD_EXP 31
11367: AND
11368: IFFALSE 11451
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// if not tmp then
11413: LD_VAR 0 2
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11451
// for i in tmp do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_VAR 0 2
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetBLevel ( i , 10 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 10
11442: PPUSH
11443: CALL_OW 241
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 2
11453: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11454: LD_EXP 15
11458: PUSH
11459: LD_EXP 32
11463: AND
11464: IFFALSE 11575
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_OWVAR 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 25
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 3
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11575
// un := tmp [ rand ( 1 , tmp ) ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 12
11541: ARRAY
11542: ST_TO_ADDR
// if Crawls ( un ) then
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 318
11552: IFFALSE 11563
// ComWalk ( un ) ;
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 5
11570: PPUSH
11571: CALL_OW 336
// end ;
11575: PPOPN 3
11577: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11578: LD_EXP 15
11582: PUSH
11583: LD_EXP 33
11587: AND
11588: PUSH
11589: LD_OWVAR 67
11593: PUSH
11594: LD_INT 3
11596: LESS
11597: AND
11598: IFFALSE 11617
11600: GO 11602
11602: DISABLE
// Difficulty := Difficulty + 1 ;
11603: LD_ADDR_OWVAR 67
11607: PUSH
11608: LD_OWVAR 67
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
11617: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11618: LD_EXP 15
11622: PUSH
11623: LD_EXP 34
11627: AND
11628: IFFALSE 11731
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin for i := 1 to 5 do
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 5
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11729
// begin uc_nation := nation_nature ;
11652: LD_ADDR_OWVAR 21
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// uc_side := 0 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11668: LD_ADDR_OWVAR 29
11672: PUSH
11673: LD_INT 12
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
// hc_agressivity := 20 ;
11683: LD_ADDR_OWVAR 35
11687: PUSH
11688: LD_INT 20
11690: ST_TO_ADDR
// hc_class := class_tiger ;
11691: LD_ADDR_OWVAR 28
11695: PUSH
11696: LD_INT 14
11698: ST_TO_ADDR
// hc_gallery :=  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// hc_name :=  ;
11707: LD_ADDR_OWVAR 26
11711: PUSH
11712: LD_STRING 
11714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11715: CALL_OW 44
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 51
// end ;
11727: GO 11649
11729: POP
11730: POP
// end ;
11731: PPOPN 1
11733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11734: LD_EXP 15
11738: PUSH
11739: LD_EXP 35
11743: AND
11744: IFFALSE 11753
11746: GO 11748
11748: DISABLE
// StreamSibBomb ;
11749: CALL 11754 0 0
11753: END
// export function StreamSibBomb ; var i , x , y ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// result := false ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// for i := 1 to 16 do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 16
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11981
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 20
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 40
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 60
11806: PUSH
11807: LD_INT 70
11809: PUSH
11810: LD_INT 80
11812: PUSH
11813: LD_INT 90
11815: PUSH
11816: LD_INT 100
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 120
11824: PUSH
11825: LD_INT 130
11827: PUSH
11828: LD_INT 140
11830: PUSH
11831: LD_INT 150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 15
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_INT 10
11870: PUSH
11871: LD_INT 20
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 40
11879: PUSH
11880: LD_INT 50
11882: PUSH
11883: LD_INT 60
11885: PUSH
11886: LD_INT 70
11888: PUSH
11889: LD_INT 80
11891: PUSH
11892: LD_INT 90
11894: PUSH
11895: LD_INT 100
11897: PUSH
11898: LD_INT 110
11900: PUSH
11901: LD_INT 120
11903: PUSH
11904: LD_INT 130
11906: PUSH
11907: LD_INT 140
11909: PUSH
11910: LD_INT 150
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 15
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if ValidHex ( x , y ) then
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 488
11956: IFFALSE 11979
// begin result := [ x , y ] ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// break ;
11977: GO 11981
// end ; end ;
11979: GO 11781
11981: POP
11982: POP
// if result then
11983: LD_VAR 0 1
11987: IFFALSE 12047
// begin ToLua ( playSibBomb() ) ;
11989: LD_STRING playSibBomb()
11991: PPUSH
11992: CALL_OW 559
// wait ( 0 0$14 ) ;
11996: LD_INT 490
11998: PPUSH
11999: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PPUSH
12021: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 429
// end ; end ;
12047: LD_VAR 0 1
12051: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12052: LD_EXP 15
12056: PUSH
12057: LD_EXP 37
12061: AND
12062: IFFALSE 12074
12064: GO 12066
12066: DISABLE
// YouLost (  ) ;
12067: LD_STRING 
12069: PPUSH
12070: CALL_OW 104
12074: END
// every 0 0$1 trigger StreamModeActive and sFog do
12075: LD_EXP 15
12079: PUSH
12080: LD_EXP 36
12084: AND
12085: IFFALSE 12099
12087: GO 12089
12089: DISABLE
// FogOff ( your_side ) ;
12090: LD_OWVAR 2
12094: PPUSH
12095: CALL_OW 344
12099: END
// every 0 0$1 trigger StreamModeActive and sSun do
12100: LD_EXP 15
12104: PUSH
12105: LD_EXP 38
12109: AND
12110: IFFALSE 12138
12112: GO 12114
12114: DISABLE
// begin solar_recharge_percent := 0 ;
12115: LD_ADDR_OWVAR 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12123: LD_INT 10500
12125: PPUSH
12126: CALL_OW 67
// solar_recharge_percent := 100 ;
12130: LD_ADDR_OWVAR 79
12134: PUSH
12135: LD_INT 100
12137: ST_TO_ADDR
// end ;
12138: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12139: LD_EXP 15
12143: PUSH
12144: LD_EXP 39
12148: AND
12149: IFFALSE 12388
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
12158: PPUSH
// begin tmp := [ ] ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// for i := 1 to 6 do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12285
// begin uc_nation := nation_nature ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 0
12189: ST_TO_ADDR
// uc_side := 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12198: LD_ADDR_OWVAR 29
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: ST_TO_ADDR
// hc_agressivity := 20 ;
12213: LD_ADDR_OWVAR 35
12217: PUSH
12218: LD_INT 20
12220: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 17
12228: ST_TO_ADDR
// hc_gallery :=  ;
12229: LD_ADDR_OWVAR 33
12233: PUSH
12234: LD_STRING 
12236: ST_TO_ADDR
// hc_name :=  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// un := CreateHuman ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: CALL_OW 44
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 51
// tmp := tmp ^ un ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: ADD
12282: ST_TO_ADDR
// end ;
12283: GO 12179
12285: POP
12286: POP
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// for un in tmp do
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12379
// begin if IsDead ( un ) then
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL_OW 301
12316: IFFALSE 12336
// begin tmp := tmp diff un ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_VAR 0 2
12332: DIFF
12333: ST_TO_ADDR
// continue ;
12334: GO 12304
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12336: LD_VAR 0 2
12340: PPUSH
12341: LD_INT 3
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_VAR 0 2
12367: PPUSH
12368: CALL_OW 74
12372: PPUSH
12373: CALL_OW 115
// end ;
12377: GO 12304
12379: POP
12380: POP
// until not tmp ;
12381: LD_VAR 0 3
12385: NOT
12386: IFFALSE 12287
// end ;
12388: PPOPN 3
12390: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12391: LD_EXP 15
12395: PUSH
12396: LD_EXP 40
12400: AND
12401: IFFALSE 12455
12403: GO 12405
12405: DISABLE
// begin ToLua ( displayTroll(); ) ;
12406: LD_STRING displayTroll();
12408: PPUSH
12409: CALL_OW 559
// wait ( 3 3$00 ) ;
12413: LD_INT 6300
12415: PPUSH
12416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12420: LD_STRING hideTroll();
12422: PPUSH
12423: CALL_OW 559
// wait ( 1 1$00 ) ;
12427: LD_INT 2100
12429: PPUSH
12430: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12434: LD_STRING displayTroll();
12436: PPUSH
12437: CALL_OW 559
// wait ( 1 1$00 ) ;
12441: LD_INT 2100
12443: PPUSH
12444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12448: LD_STRING hideTroll();
12450: PPUSH
12451: CALL_OW 559
// end ;
12455: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12456: LD_EXP 15
12460: PUSH
12461: LD_EXP 41
12465: AND
12466: IFFALSE 12529
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin p := 0 ;
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// repeat game_speed := 1 ;
12482: LD_ADDR_OWVAR 65
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12490: LD_INT 35
12492: PPUSH
12493: CALL_OW 67
// p := p + 1 ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// until p >= 60 ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 60
12518: GREATEREQUAL
12519: IFFALSE 12482
// game_speed := 4 ;
12521: LD_ADDR_OWVAR 65
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// end ;
12529: PPOPN 1
12531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 42
12541: AND
12542: IFFALSE 12688
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_OWVAR 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not depot then
12605: LD_VAR 0 1
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12643: LD_VAR 0 2
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 3
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12691: LD_EXP 15
12695: PUSH
12696: LD_EXP 43
12700: AND
12701: IFFALSE 12798
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 1
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 12
12789: ARRAY
12790: PPUSH
12791: LD_INT 200
12793: PPUSH
12794: CALL_OW 234
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12801: LD_EXP 15
12805: PUSH
12806: LD_EXP 44
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 60
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12893: LD_EXP 15
12897: PUSH
12898: LD_EXP 45
12902: AND
12903: IFFALSE 13002
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 61
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13002
// for i in tmp do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13000
// if IsControledBy ( i ) then
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 312
12987: IFFALSE 12998
// ComUnlink ( i ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: CALL_OW 136
12998: GO 12975
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13005: LD_EXP 15
13009: PUSH
13010: LD_EXP 46
13014: AND
13015: IFFALSE 13155
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
// begin ToLua ( displayPowell(); ) ;
13024: LD_STRING displayPowell();
13026: PPUSH
13027: CALL_OW 559
// uc_side := 0 ;
13031: LD_ADDR_OWVAR 20
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_nation := 2 ;
13039: LD_ADDR_OWVAR 21
13043: PUSH
13044: LD_INT 2
13046: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13047: LD_ADDR_OWVAR 37
13051: PUSH
13052: LD_INT 14
13054: ST_TO_ADDR
// vc_engine := engine_siberite ;
13055: LD_ADDR_OWVAR 39
13059: PUSH
13060: LD_INT 3
13062: ST_TO_ADDR
// vc_control := control_apeman ;
13063: LD_ADDR_OWVAR 38
13067: PUSH
13068: LD_INT 5
13070: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_INT 29
13078: ST_TO_ADDR
// un := CreateVehicle ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13101: LD_INT 35
13103: PPUSH
13104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13108: LD_VAR 0 2
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 74
13139: PPUSH
13140: CALL_OW 115
// until IsDead ( un ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: CALL_OW 301
13153: IFFALSE 13101
// end ;
13155: PPOPN 2
13157: END
// every 0 0$1 trigger StreamModeActive and sStu do
13158: LD_EXP 15
13162: PUSH
13163: LD_EXP 54
13167: AND
13168: IFFALSE 13184
13170: GO 13172
13172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13173: LD_STRING displayStucuk();
13175: PPUSH
13176: CALL_OW 559
// ResetFog ;
13180: CALL_OW 335
// end ;
13184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13185: LD_EXP 15
13189: PUSH
13190: LD_EXP 47
13194: AND
13195: IFFALSE 13336
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: ST_TO_ADDR
// if not tmp then
13240: LD_VAR 0 2
13244: NOT
13245: IFFALSE 13249
// exit ;
13247: GO 13336
// un := tmp [ rand ( 1 , tmp ) ] ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PPUSH
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 12
13271: ARRAY
13272: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_OWVAR 3
13294: PUSH
13295: LD_VAR 0 1
13299: DIFF
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 74
13310: PPUSH
13311: CALL_OW 115
// wait ( 0 0$20 ) ;
13315: LD_INT 700
13317: PPUSH
13318: CALL_OW 67
// SetSide ( un , your_side ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_OWVAR 2
13331: PPUSH
13332: CALL_OW 235
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13339: LD_EXP 15
13343: PUSH
13344: LD_EXP 48
13348: AND
13349: IFFALSE 13455
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_OWVAR 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not depot then
13411: LD_VAR 0 1
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13455
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 251
13447: PPUSH
13448: LD_INT 70
13450: PPUSH
13451: CALL_OW 495
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13458: LD_EXP 15
13462: PUSH
13463: LD_EXP 49
13467: AND
13468: IFFALSE 13679
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 5
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13679
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13677
// begin d := rand ( 0 , 5 ) ;
13538: LD_ADDR_VAR 0 4
13542: PUSH
13543: LD_INT 0
13545: PPUSH
13546: LD_INT 5
13548: PPUSH
13549: CALL_OW 12
13553: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13554: LD_ADDR_VAR 0 2
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 250
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: LD_INT 12
13579: PPUSH
13580: CALL_OW 12
13584: PPUSH
13585: CALL_OW 272
13589: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 251
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: LD_INT 12
13615: PPUSH
13616: CALL_OW 12
13620: PPUSH
13621: CALL_OW 273
13625: ST_TO_ADDR
// if ValidHex ( x , y ) then
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 488
13640: IFFALSE 13675
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_INT 6
13662: PPUSH
13663: CALL_OW 12
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 483
// end ;
13675: GO 13535
13677: POP
13678: POP
// end ;
13679: PPOPN 5
13681: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13682: LD_EXP 15
13686: PUSH
13687: LD_EXP 50
13691: AND
13692: IFFALSE 13786
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_OWVAR 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: ST_TO_ADDR
// if not tmp then
13748: LD_VAR 0 2
13752: NOT
13753: IFFALSE 13757
// exit ;
13755: GO 13786
// for i in tmp do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13784
// SetFuel ( i , 0 ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 240
13782: GO 13767
13784: POP
13785: POP
// end ;
13786: PPOPN 2
13788: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 51
13798: AND
13799: IFFALSE 13865
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 29
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13865
// DestroyUnit ( tmp [ 1 ] ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: CALL_OW 65
// end ;
13865: PPOPN 1
13867: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 53
13877: AND
13878: IFFALSE 14007
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin uc_side := 0 ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// uc_nation := nation_arabian ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_INT 2
13901: ST_TO_ADDR
// hc_gallery :=  ;
13902: LD_ADDR_OWVAR 33
13906: PUSH
13907: LD_STRING 
13909: ST_TO_ADDR
// hc_name :=  ;
13910: LD_ADDR_OWVAR 26
13914: PUSH
13915: LD_STRING 
13917: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 11
13923: PPUSH
13924: LD_INT 10
13926: PPUSH
13927: CALL_OW 380
// un := CreateHuman ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: CALL_OW 44
13940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 74
13991: PPUSH
13992: CALL_OW 115
// until IsDead ( un ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 301
14005: IFFALSE 13953
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14010: LD_EXP 15
14014: PUSH
14015: LD_EXP 55
14019: AND
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14025: LD_STRING earthquake(getX(game), 0, 32)
14027: PPUSH
14028: CALL_OW 559
14032: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14033: LD_EXP 15
14037: PUSH
14038: LD_EXP 56
14042: AND
14043: IFFALSE 14134
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 33
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if not tmp then
14099: LD_VAR 0 1
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14108: LD_VAR 0 1
14112: PUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 12
14125: ARRAY
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 234
// end ;
14134: PPOPN 1
14136: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14137: LD_EXP 15
14141: PUSH
14142: LD_EXP 57
14146: AND
14147: IFFALSE 14288
14149: GO 14151
14151: DISABLE
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// if not tmp then
14193: LD_VAR 0 3
14197: NOT
14198: IFFALSE 14202
// exit ;
14200: GO 14288
// un := tmp [ rand ( 1 , tmp ) ] ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// if Crawls ( un ) then
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 318
14235: IFFALSE 14246
// ComWalk ( un ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 9
14253: PPUSH
14254: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14258: LD_INT 28
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14273: LD_INT 29
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ;
14288: PPOPN 3
14290: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14291: LD_EXP 15
14295: PUSH
14296: LD_EXP 58
14300: AND
14301: IFFALSE 14412
14303: GO 14305
14305: DISABLE
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if not tmp then
14347: LD_VAR 0 3
14351: NOT
14352: IFFALSE 14356
// exit ;
14354: GO 14412
// un := tmp [ rand ( 1 , tmp ) ] ;
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 12
14378: ARRAY
14379: ST_TO_ADDR
// if Crawls ( un ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 318
14389: IFFALSE 14400
// ComWalk ( un ) ;
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_INT 8
14407: PPUSH
14408: CALL_OW 336
// end ;
14412: PPOPN 3
14414: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14415: LD_EXP 15
14419: PUSH
14420: LD_EXP 59
14424: AND
14425: IFFALSE 14569
14427: GO 14429
14429: DISABLE
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 51
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 34
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14569
// for i in tmp do
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14567
// if GetCargo ( i , mat_artifact ) = 0 then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 4
14539: PPUSH
14540: CALL_OW 289
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14565
// SetCargo ( i , mat_siberit , 100 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 3
14557: PPUSH
14558: LD_INT 100
14560: PPUSH
14561: CALL_OW 290
14565: GO 14529
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14572: LD_EXP 15
14576: PUSH
14577: LD_EXP 60
14581: AND
14582: IFFALSE 14765
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// if not tmp then
14613: LD_VAR 0 2
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14765
// for i := 1 to 2 do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 2
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14763
// begin uc_side := your_side ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_OWVAR 2
14647: ST_TO_ADDR
// uc_nation := nation_american ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// vc_chassis := us_morphling ;
14656: LD_ADDR_OWVAR 37
14660: PUSH
14661: LD_INT 5
14663: ST_TO_ADDR
// vc_engine := engine_siberite ;
14664: LD_ADDR_OWVAR 39
14668: PUSH
14669: LD_INT 3
14671: ST_TO_ADDR
// vc_control := control_computer ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_INT 3
14679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14680: LD_ADDR_OWVAR 40
14684: PUSH
14685: LD_INT 10
14687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: CALL_OW 310
14701: NOT
14702: IFFALSE 14749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14704: CALL_OW 45
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 250
14722: PPUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 50
14747: GO 14761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14749: CALL_OW 45
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 51
// end ;
14761: GO 14635
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14768: LD_EXP 15
14772: PUSH
14773: LD_EXP 61
14777: AND
14778: IFFALSE 15000
14780: GO 14782
14782: DISABLE
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15000
// s1 := rand ( 1 , 4 ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 4
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14870: LD_ADDR_VAR 0 4
14874: PUSH
14875: LD_VAR 0 6
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 2
14888: PPUSH
14889: CALL_OW 259
14893: ST_TO_ADDR
// if s1 = 1 then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_INT 1
14901: EQUAL
14902: IFFALSE 14922
// s2 := rand ( 2 , 4 ) else
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_INT 2
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
14920: GO 14930
// s2 := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 6
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: CALL_OW 259
14953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14954: LD_VAR 0 6
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 5
14972: PPUSH
14973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14977: LD_VAR 0 6
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: CALL_OW 237
// end ;
15000: PPOPN 6
15002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15003: LD_EXP 15
15007: PUSH
15008: LD_EXP 62
15012: AND
15013: IFFALSE 15092
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 1
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 234
// end ;
15092: PPOPN 1
15094: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15095: LD_EXP 15
15099: PUSH
15100: LD_EXP 63
15104: AND
15105: IFFALSE 15217
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: LD_INT 26
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15217
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 2
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15215
// SetLives ( i , 1 ) ;
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 234
15213: GO 15198
15215: POP
15216: POP
// end ;
15217: PPOPN 2
15219: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 64
15229: AND
15230: IFFALSE 15504
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin i := rand ( 1 , 7 ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 7
15250: PPUSH
15251: CALL_OW 12
15255: ST_TO_ADDR
// case i of 1 :
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15279
15269: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15270: LD_STRING earthquake(getX(game), 0, 32)
15272: PPUSH
15273: CALL_OW 559
15277: GO 15504
15279: LD_INT 2
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15301
15287: POP
// begin ToLua ( displayStucuk(); ) ;
15288: LD_STRING displayStucuk();
15290: PPUSH
15291: CALL_OW 559
// ResetFog ;
15295: CALL_OW 335
// end ; 3 :
15299: GO 15504
15301: LD_INT 3
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15413
15309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15504
// un := tmp [ rand ( 1 , tmp ) ] ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// if Crawls ( un ) then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 318
15388: IFFALSE 15399
// ComWalk ( un ) ;
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 8
15406: PPUSH
15407: CALL_OW 336
// end ; 4 :
15411: GO 15504
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15482
15421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_OWVAR 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 29
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 2
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15504
// DestroyUnit ( tmp [ 1 ] ) ;
15467: LD_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 65
// end ; 5 .. 7 :
15480: GO 15504
15482: LD_INT 5
15484: DOUBLE
15485: GREATEREQUAL
15486: IFFALSE 15494
15488: LD_INT 7
15490: DOUBLE
15491: LESSEQUAL
15492: IFTRUE 15496
15494: GO 15503
15496: POP
// StreamSibBomb ; end ;
15497: CALL 11754 0 0
15501: GO 15504
15503: POP
// end ;
15504: PPOPN 3
15506: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15507: LD_EXP 15
15511: PUSH
15512: LD_EXP 65
15516: AND
15517: IFFALSE 15673
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
// if not tmp then
15581: LD_VAR 0 2
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15673
// p := 0 ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// p := p + 1 ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 1
15617: PLUS
15618: ST_TO_ADDR
// for i in tmp do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: FOR_IN
15630: IFFALSE 15661
// if GetLives ( i ) < 1000 then
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 256
15641: PUSH
15642: LD_INT 1000
15644: LESS
15645: IFFALSE 15659
// SetLives ( i , 1000 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 1000
15654: PPUSH
15655: CALL_OW 234
15659: GO 15629
15661: POP
15662: POP
// until p > 20 ;
15663: LD_VAR 0 3
15667: PUSH
15668: LD_INT 20
15670: GREATER
15671: IFFALSE 15598
// end ;
15673: PPOPN 3
15675: END
// every 0 0$1 trigger StreamModeActive and sTime do
15676: LD_EXP 15
15680: PUSH
15681: LD_EXP 66
15685: AND
15686: IFFALSE 15721
15688: GO 15690
15690: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15691: LD_INT 28
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15706: LD_INT 30
15708: PPUSH
15709: LD_OWVAR 2
15713: PPUSH
15714: LD_INT 2
15716: PPUSH
15717: CALL_OW 322
// end ;
15721: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15722: LD_EXP 15
15726: PUSH
15727: LD_EXP 67
15731: AND
15732: IFFALSE 15853
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_OWVAR 2
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15853
// for i in tmp do
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: FOR_IN
15815: IFFALSE 15851
// begin if Crawls ( i ) then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( i ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 138
// SetClass ( i , 2 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: GO 15814
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15856: LD_EXP 15
15860: PUSH
15861: LD_EXP 68
15865: AND
15866: IFFALSE 16147
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 9
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15894: LD_INT 9
15896: PPUSH
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 343
// uc_side := 9 ;
15906: LD_ADDR_OWVAR 20
15910: PUSH
15911: LD_INT 9
15913: ST_TO_ADDR
// uc_nation := 2 ;
15914: LD_ADDR_OWVAR 21
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// hc_name := Dark Warrior ;
15922: LD_ADDR_OWVAR 26
15926: PUSH
15927: LD_STRING Dark Warrior
15929: ST_TO_ADDR
// hc_gallery :=  ;
15930: LD_ADDR_OWVAR 33
15934: PUSH
15935: LD_STRING 
15937: ST_TO_ADDR
// hc_noskilllimit := true ;
15938: LD_ADDR_OWVAR 76
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15946: LD_ADDR_OWVAR 31
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// un := CreateHuman ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: CALL_OW 44
15978: ST_TO_ADDR
// hc_noskilllimit := false ;
15979: LD_ADDR_OWVAR 76
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 51
// p := 0 ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16007: LD_INT 35
16009: PPUSH
16010: CALL_OW 67
// p := p + 1 ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PLUS
16027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL_OW 256
16037: PUSH
16038: LD_INT 1000
16040: LESS
16041: IFFALSE 16055
// SetLives ( un , 1000 ) ;
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1000
16050: PPUSH
16051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 81
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 91
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 74
16106: PPUSH
16107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 60
16118: GREATER
16119: PUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 301
16129: OR
16130: IFFALSE 16007
// if un then
16132: LD_VAR 0 3
16136: IFFALSE 16147
// RemoveUnit ( un ) ;
16138: LD_VAR 0 3
16142: PPUSH
16143: CALL_OW 64
// end ;
16147: PPOPN 3
16149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16150: LD_INT 0
16152: PPUSH
// case cmd of 301 :
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 301
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16198
16166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 7
16176: PPUSH
16177: LD_VAR 0 8
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 17399 0 5
16196: GO 16319
16198: LD_INT 302
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16243
16206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16207: LD_VAR 0 6
16211: PPUSH
16212: LD_VAR 0 7
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 9
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 17490 0 6
16241: GO 16319
16243: LD_INT 303
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16288
16251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16252: LD_VAR 0 6
16256: PPUSH
16257: LD_VAR 0 7
16261: PPUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: CALL 16324 0 6
16286: GO 16319
16288: LD_INT 304
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16318
16296: POP
// hHackTeleport ( unit , x , y ) ; end ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL 18083 0 3
16316: GO 16319
16318: POP
// end ;
16319: LD_VAR 0 12
16323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: LESS
16336: PUSH
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 3
16344: GREATER
16345: OR
16346: PUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: LD_VAR 0 6
16356: PPUSH
16357: CALL_OW 428
16361: OR
16362: IFFALSE 16366
// exit ;
16364: GO 17086
// uc_side := your_side ;
16366: LD_ADDR_OWVAR 20
16370: PUSH
16371: LD_OWVAR 2
16375: ST_TO_ADDR
// uc_nation := nation ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_VAR 0 1
16385: ST_TO_ADDR
// bc_level = 1 ;
16386: LD_ADDR_OWVAR 43
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// case btype of 1 :
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_depot ; 2 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
16416: GO 17030
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_warehouse ; 3 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
16435: GO 17030
16437: LD_INT 3
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16456
16445: POP
// bc_type := b_lab ; 4 .. 9 :
16446: LD_ADDR_OWVAR 42
16450: PUSH
16451: LD_INT 6
16453: ST_TO_ADDR
16454: GO 17030
16456: LD_INT 4
16458: DOUBLE
16459: GREATEREQUAL
16460: IFFALSE 16468
16462: LD_INT 9
16464: DOUBLE
16465: LESSEQUAL
16466: IFTRUE 16470
16468: GO 16522
16470: POP
// begin bc_type := b_lab_half ;
16471: LD_ADDR_OWVAR 42
16475: PUSH
16476: LD_INT 7
16478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16479: LD_ADDR_OWVAR 44
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 13
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 3
16517: MINUS
16518: ARRAY
16519: ST_TO_ADDR
// end ; 10 .. 13 :
16520: GO 17030
16522: LD_INT 10
16524: DOUBLE
16525: GREATEREQUAL
16526: IFFALSE 16534
16528: LD_INT 13
16530: DOUBLE
16531: LESSEQUAL
16532: IFTRUE 16536
16534: GO 16613
16536: POP
// begin bc_type := b_lab_full ;
16537: LD_ADDR_OWVAR 42
16541: PUSH
16542: LD_INT 8
16544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16545: LD_ADDR_OWVAR 44
16549: PUSH
16550: LD_INT 10
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 14
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 9
16575: MINUS
16576: ARRAY
16577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16578: LD_ADDR_OWVAR 45
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 15
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 9
16608: MINUS
16609: ARRAY
16610: ST_TO_ADDR
// end ; 14 :
16611: GO 17030
16613: LD_INT 14
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_workshop ; 15 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 2
16629: ST_TO_ADDR
16630: GO 17030
16632: LD_INT 15
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_factory ; 16 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 3
16648: ST_TO_ADDR
16649: GO 17030
16651: LD_INT 16
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16670
16659: POP
// bc_type := b_ext_gun ; 17 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 17
16667: ST_TO_ADDR
16668: GO 17030
16670: LD_INT 17
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16706
16678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16679: LD_ADDR_OWVAR 42
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 19
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: ST_TO_ADDR
16704: GO 17030
16706: LD_INT 18
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radar ; 19 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 20
16722: ST_TO_ADDR
16723: GO 17030
16725: LD_INT 19
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_radio ; 20 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 22
16741: ST_TO_ADDR
16742: GO 17030
16744: LD_INT 20
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_siberium ; 21 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 21
16760: ST_TO_ADDR
16761: GO 17030
16763: LD_INT 21
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_computer ; 22 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 24
16779: ST_TO_ADDR
16780: GO 17030
16782: LD_INT 22
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_track ; 23 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 16
16798: ST_TO_ADDR
16799: GO 17030
16801: LD_INT 23
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_ext_laser ; 24 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 25
16817: ST_TO_ADDR
16818: GO 17030
16820: LD_INT 24
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_control_tower ; 25 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 36
16836: ST_TO_ADDR
16837: GO 17030
16839: LD_INT 25
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_breastwork ; 26 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 31
16855: ST_TO_ADDR
16856: GO 17030
16858: LD_INT 26
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_bunker ; 27 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 32
16874: ST_TO_ADDR
16875: GO 17030
16877: LD_INT 27
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_turret ; 28 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 33
16893: ST_TO_ADDR
16894: GO 17030
16896: LD_INT 28
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_armoury ; 29 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 4
16912: ST_TO_ADDR
16913: GO 17030
16915: LD_INT 29
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_barracks ; 30 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 5
16931: ST_TO_ADDR
16932: GO 17030
16934: LD_INT 30
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_solar_power ; 31 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 27
16950: ST_TO_ADDR
16951: GO 17030
16953: LD_INT 31
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_oil_power ; 32 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 26
16969: ST_TO_ADDR
16970: GO 17030
16972: LD_INT 32
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_siberite_power ; 33 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 28
16988: ST_TO_ADDR
16989: GO 17030
16991: LD_INT 33
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_oil_mine ; 34 :
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 29
17007: ST_TO_ADDR
17008: GO 17030
17010: LD_INT 34
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17029
17018: POP
// bc_type := b_siberite_mine ; end ;
17019: LD_ADDR_OWVAR 42
17023: PUSH
17024: LD_INT 30
17026: ST_TO_ADDR
17027: GO 17030
17029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: CALL_OW 47
17054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17055: LD_OWVAR 42
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: IN
17070: IFFALSE 17086
// PlaceWeaponTurret ( b , weapon ) ;
17072: LD_VAR 0 8
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 431
// end ;
17086: LD_VAR 0 7
17090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 4
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17219
// for i in tmp do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17217
// for j = 1 to 3 do
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_INT 3
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 274
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 99999
17206: PPUSH
17207: CALL_OW 277
17211: GO 17186
17213: POP
17214: POP
17215: GO 17170
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 1
17223: RET
// export function hHackSetLevel10 ; var i , j ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17302
// if IsSelected ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 306
17261: IFFALSE 17300
// begin for j := 1 to 4 do
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 4
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17298
// SetSkill ( i , j , 10 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 237
17296: GO 17276
17298: POP
17299: POP
// end ;
17300: GO 17249
17302: POP
17303: POP
// end ;
17304: LD_VAR 0 1
17308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17392
// begin for j := 1 to 4 do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 4
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17388
// SetSkill ( i , j , 10 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 10
17381: PPUSH
17382: CALL_OW 237
17386: GO 17366
17388: POP
17389: POP
// end ;
17390: GO 17350
17392: POP
17393: POP
// end ;
17394: LD_VAR 0 1
17398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17399: LD_INT 0
17401: PPUSH
// uc_side := your_side ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_OWVAR 2
17411: ST_TO_ADDR
// uc_nation := nation ;
17412: LD_ADDR_OWVAR 21
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// InitHc ;
17422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17426: LD_INT 0
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL_OW 428
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17463: CALL_OW 44
17467: PPUSH
17468: LD_VAR 0 4
17472: PPUSH
17473: LD_VAR 0 5
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 48
// end ;
17485: LD_VAR 0 6
17489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: IN
17531: IFFALSE 17543
// uc_nation := nation_american else
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
17541: GO 17586
// if chassis in [ 11 , 12 , 13 , 14 ] then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17578
// uc_nation := nation_arabian else
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
17576: GO 17586
// uc_nation := nation_russian ;
17578: LD_ADDR_OWVAR 21
17582: PUSH
17583: LD_INT 3
17585: ST_TO_ADDR
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// un := CreateVehicle ;
17626: LD_ADDR_VAR 0 8
17630: PUSH
17631: CALL_OW 45
17635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 12
17651: PPUSH
17652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17656: LD_VAR 0 8
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 48
// end ;
17678: LD_VAR 0 7
17682: RET
// export hInvincible ; every 1 do
17683: GO 17685
17685: DISABLE
// hInvincible := [ ] ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
17693: END
// every 10 do var i ;
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin enable ;
17700: ENABLE
// if not hInvincible then
17701: LD_EXP 69
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17754
// for i in hInvincible do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_EXP 69
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17752
// if GetLives ( i ) < 1000 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 256
17732: PUSH
17733: LD_INT 1000
17735: LESS
17736: IFFALSE 17750
// SetLives ( i , 1000 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 1000
17745: PPUSH
17746: CALL_OW 234
17750: GO 17720
17752: POP
17753: POP
// end ;
17754: PPOPN 1
17756: END
// export function hHackInvincible ; var i ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17861
// if IsSelected ( i ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 306
17811: IFFALSE 17859
// begin if i in hInvincible then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_EXP 69
17822: IN
17823: IFFALSE 17843
// hInvincible := hInvincible diff i else
17825: LD_ADDR_EXP 69
17829: PUSH
17830: LD_EXP 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: ST_TO_ADDR
17841: GO 17859
// hInvincible := hInvincible union i ;
17843: LD_ADDR_EXP 69
17847: PUSH
17848: LD_EXP 69
17852: PUSH
17853: LD_VAR 0 2
17857: UNION
17858: ST_TO_ADDR
// end ;
17859: GO 17799
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackInvisible ; var i , j ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17918
// if IsSelected ( i ) then
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 306
17905: IFFALSE 17916
// ComForceInvisible ( i ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 496
17916: GO 17893
17918: POP
17919: POP
// end ;
17920: LD_VAR 0 1
17924: RET
// export function hHackChangeYourSide ; begin
17925: LD_INT 0
17927: PPUSH
// if your_side = 8 then
17928: LD_OWVAR 2
17932: PUSH
17933: LD_INT 8
17935: EQUAL
17936: IFFALSE 17948
// your_side := 0 else
17938: LD_ADDR_OWVAR 2
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
17946: GO 17962
// your_side := your_side + 1 ;
17948: LD_ADDR_OWVAR 2
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 1
17966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// for i in all_units do
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_OWVAR 3
17981: PUSH
17982: FOR_IN
17983: IFFALSE 18061
// if IsSelected ( i ) then
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 306
17994: IFFALSE 18059
// begin j := GetSide ( i ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// if j = 8 then
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 8
18018: EQUAL
18019: IFFALSE 18031
// j := 0 else
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
18029: GO 18045
// j := j + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// SetSide ( i , j ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 235
// end ;
18059: GO 17982
18061: POP
18062: POP
// end ;
18063: LD_VAR 0 1
18067: RET
// export function hHackFog ; begin
18068: LD_INT 0
18070: PPUSH
// FogOff ( true ) ;
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 344
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 483
// CenterOnXY ( x , y ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 84
// end ; end_of_file
18125: LD_VAR 0 4
18129: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_EXP 80
18150: EQUAL
18151: IFFALSE 18223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 4
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 495
// end ; end ;
18223: LD_VAR 0 2
18227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18228: LD_INT 0
18230: PPUSH
// end ;
18231: LD_VAR 0 4
18235: RET
// export function SOS_Command ( cmd ) ; begin
18236: LD_INT 0
18238: PPUSH
// end ;
18239: LD_VAR 0 2
18243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18244: LD_INT 0
18246: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 254
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_EXP 78
18270: EQUAL
18271: AND
18272: PUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: CALL_OW 263
18282: PUSH
18283: LD_INT 3
18285: EQUAL
18286: AND
18287: IFFALSE 18303
// HackDestroyVehicle ( unit , selectedUnit ) ;
18289: LD_VAR 0 2
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: CALL 19812 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18303: LD_VAR 0 1
18307: PUSH
18308: LD_INT 255
18310: EQUAL
18311: PUSH
18312: LD_VAR 0 2
18316: PPUSH
18317: CALL_OW 264
18321: PUSH
18322: LD_INT 14
18324: PUSH
18325: LD_INT 53
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: IN
18332: AND
18333: PUSH
18334: LD_VAR 0 4
18338: PPUSH
18339: LD_VAR 0 5
18343: PPUSH
18344: CALL_OW 488
18348: AND
18349: IFFALSE 18373
// CutTreeXYR ( unit , x , y , 12 ) ;
18351: LD_VAR 0 2
18355: PPUSH
18356: LD_VAR 0 4
18360: PPUSH
18361: LD_VAR 0 5
18365: PPUSH
18366: LD_INT 12
18368: PPUSH
18369: CALL 18378 0 4
// end ;
18373: LD_VAR 0 6
18377: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18378: LD_INT 0
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18389: LD_VAR 0 1
18393: NOT
18394: PUSH
18395: LD_VAR 0 2
18399: PPUSH
18400: LD_VAR 0 3
18404: PPUSH
18405: CALL_OW 488
18409: NOT
18410: OR
18411: PUSH
18412: LD_VAR 0 4
18416: NOT
18417: OR
18418: IFFALSE 18422
// exit ;
18420: GO 18762
// list := [ ] ;
18422: LD_ADDR_VAR 0 13
18426: PUSH
18427: EMPTY
18428: ST_TO_ADDR
// if x - r < 0 then
18429: LD_VAR 0 2
18433: PUSH
18434: LD_VAR 0 4
18438: MINUS
18439: PUSH
18440: LD_INT 0
18442: LESS
18443: IFFALSE 18455
// min_x := 0 else
18445: LD_ADDR_VAR 0 7
18449: PUSH
18450: LD_INT 0
18452: ST_TO_ADDR
18453: GO 18471
// min_x := x - r ;
18455: LD_ADDR_VAR 0 7
18459: PUSH
18460: LD_VAR 0 2
18464: PUSH
18465: LD_VAR 0 4
18469: MINUS
18470: ST_TO_ADDR
// if y - r < 0 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_VAR 0 4
18480: MINUS
18481: PUSH
18482: LD_INT 0
18484: LESS
18485: IFFALSE 18497
// min_y := 0 else
18487: LD_ADDR_VAR 0 8
18491: PUSH
18492: LD_INT 0
18494: ST_TO_ADDR
18495: GO 18513
// min_y := y - r ;
18497: LD_ADDR_VAR 0 8
18501: PUSH
18502: LD_VAR 0 3
18506: PUSH
18507: LD_VAR 0 4
18511: MINUS
18512: ST_TO_ADDR
// max_x := x + r ;
18513: LD_ADDR_VAR 0 9
18517: PUSH
18518: LD_VAR 0 2
18522: PUSH
18523: LD_VAR 0 4
18527: PLUS
18528: ST_TO_ADDR
// max_y := y + r ;
18529: LD_ADDR_VAR 0 10
18533: PUSH
18534: LD_VAR 0 3
18538: PUSH
18539: LD_VAR 0 4
18543: PLUS
18544: ST_TO_ADDR
// for _x = min_x to max_x do
18545: LD_ADDR_VAR 0 11
18549: PUSH
18550: DOUBLE
18551: LD_VAR 0 7
18555: DEC
18556: ST_TO_ADDR
18557: LD_VAR 0 9
18561: PUSH
18562: FOR_TO
18563: IFFALSE 18680
// for _y = min_y to max_y do
18565: LD_ADDR_VAR 0 12
18569: PUSH
18570: DOUBLE
18571: LD_VAR 0 8
18575: DEC
18576: ST_TO_ADDR
18577: LD_VAR 0 10
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18676
// begin if not ValidHex ( _x , _y ) then
18585: LD_VAR 0 11
18589: PPUSH
18590: LD_VAR 0 12
18594: PPUSH
18595: CALL_OW 488
18599: NOT
18600: IFFALSE 18604
// continue ;
18602: GO 18582
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18604: LD_VAR 0 11
18608: PPUSH
18609: LD_VAR 0 12
18613: PPUSH
18614: CALL_OW 351
18618: PUSH
18619: LD_VAR 0 11
18623: PPUSH
18624: LD_VAR 0 12
18628: PPUSH
18629: CALL_OW 554
18633: AND
18634: IFFALSE 18674
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18636: LD_ADDR_VAR 0 13
18640: PUSH
18641: LD_VAR 0 13
18645: PPUSH
18646: LD_VAR 0 13
18650: PUSH
18651: LD_INT 1
18653: PLUS
18654: PPUSH
18655: LD_VAR 0 11
18659: PUSH
18660: LD_VAR 0 12
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 2
18673: ST_TO_ADDR
// end ;
18674: GO 18582
18676: POP
18677: POP
18678: GO 18562
18680: POP
18681: POP
// if not list then
18682: LD_VAR 0 13
18686: NOT
18687: IFFALSE 18691
// exit ;
18689: GO 18762
// for i in list do
18691: LD_ADDR_VAR 0 6
18695: PUSH
18696: LD_VAR 0 13
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18760
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_STRING M
18711: PUSH
18712: LD_VAR 0 6
18716: PUSH
18717: LD_INT 1
18719: ARRAY
18720: PUSH
18721: LD_VAR 0 6
18725: PUSH
18726: LD_INT 2
18728: ARRAY
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: PPUSH
18754: CALL_OW 447
18758: GO 18701
18760: POP
18761: POP
// end ;
18762: LD_VAR 0 5
18766: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18767: LD_EXP 70
18771: NOT
18772: IFFALSE 18822
18774: GO 18776
18776: DISABLE
// begin initHack := true ;
18777: LD_ADDR_EXP 70
18781: PUSH
18782: LD_INT 1
18784: ST_TO_ADDR
// hackTanks := [ ] ;
18785: LD_ADDR_EXP 71
18789: PUSH
18790: EMPTY
18791: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18792: LD_ADDR_EXP 72
18796: PUSH
18797: EMPTY
18798: ST_TO_ADDR
// hackLimit := 3 ;
18799: LD_ADDR_EXP 73
18803: PUSH
18804: LD_INT 3
18806: ST_TO_ADDR
// hackDist := 12 ;
18807: LD_ADDR_EXP 74
18811: PUSH
18812: LD_INT 12
18814: ST_TO_ADDR
// hackCounter := [ ] ;
18815: LD_ADDR_EXP 75
18819: PUSH
18820: EMPTY
18821: ST_TO_ADDR
// end ;
18822: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18823: LD_EXP 70
18827: PUSH
18828: LD_INT 34
18830: PUSH
18831: LD_EXP 78
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL_OW 69
18844: AND
18845: IFFALSE 19100
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
// begin enable ;
18854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18855: LD_ADDR_VAR 0 1
18859: PUSH
18860: LD_INT 34
18862: PUSH
18863: LD_EXP 78
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 69
18876: PUSH
18877: FOR_IN
18878: IFFALSE 19098
// begin if not i in hackTanks then
18880: LD_VAR 0 1
18884: PUSH
18885: LD_EXP 71
18889: IN
18890: NOT
18891: IFFALSE 18974
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18893: LD_ADDR_EXP 71
18897: PUSH
18898: LD_EXP 71
18902: PPUSH
18903: LD_EXP 71
18907: PUSH
18908: LD_INT 1
18910: PLUS
18911: PPUSH
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL_OW 1
18921: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18922: LD_ADDR_EXP 72
18926: PUSH
18927: LD_EXP 72
18931: PPUSH
18932: LD_EXP 72
18936: PUSH
18937: LD_INT 1
18939: PLUS
18940: PPUSH
18941: EMPTY
18942: PPUSH
18943: CALL_OW 1
18947: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18948: LD_ADDR_EXP 75
18952: PUSH
18953: LD_EXP 75
18957: PPUSH
18958: LD_EXP 75
18962: PUSH
18963: LD_INT 1
18965: PLUS
18966: PPUSH
18967: EMPTY
18968: PPUSH
18969: CALL_OW 1
18973: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 302
18983: NOT
18984: IFFALSE 18997
// begin HackUnlinkAll ( i ) ;
18986: LD_VAR 0 1
18990: PPUSH
18991: CALL 19103 0 1
// continue ;
18995: GO 18877
// end ; HackCheckCapturedStatus ( i ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL 19546 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_INT 81
19013: PUSH
19014: LD_VAR 0 1
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 33
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 91
19040: PUSH
19041: LD_VAR 0 1
19045: PUSH
19046: LD_EXP 74
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 50
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: ST_TO_ADDR
// if not tmp then
19073: LD_VAR 0 2
19077: NOT
19078: IFFALSE 19082
// continue ;
19080: GO 18877
// HackLink ( i , tmp ) ;
19082: LD_VAR 0 1
19086: PPUSH
19087: LD_VAR 0 2
19091: PPUSH
19092: CALL 19239 0 2
// end ;
19096: GO 18877
19098: POP
19099: POP
// end ;
19100: PPOPN 2
19102: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
// if not hack in hackTanks then
19108: LD_VAR 0 1
19112: PUSH
19113: LD_EXP 71
19117: IN
19118: NOT
19119: IFFALSE 19123
// exit ;
19121: GO 19234
// index := GetElementIndex ( hackTanks , hack ) ;
19123: LD_ADDR_VAR 0 4
19127: PUSH
19128: LD_EXP 71
19132: PPUSH
19133: LD_VAR 0 1
19137: PPUSH
19138: CALL 24921 0 2
19142: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19143: LD_EXP 72
19147: PUSH
19148: LD_VAR 0 4
19152: ARRAY
19153: IFFALSE 19234
// begin for i in hackTanksCaptured [ index ] do
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_EXP 72
19164: PUSH
19165: LD_VAR 0 4
19169: ARRAY
19170: PUSH
19171: FOR_IN
19172: IFFALSE 19198
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19174: LD_VAR 0 3
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: LD_VAR 0 3
19187: PUSH
19188: LD_INT 2
19190: ARRAY
19191: PPUSH
19192: CALL_OW 235
19196: GO 19171
19198: POP
19199: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19200: LD_ADDR_EXP 72
19204: PUSH
19205: LD_EXP 72
19209: PPUSH
19210: LD_VAR 0 4
19214: PPUSH
19215: EMPTY
19216: PPUSH
19217: CALL_OW 1
19221: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19222: LD_VAR 0 1
19226: PPUSH
19227: LD_INT 0
19229: PPUSH
19230: CALL_OW 505
// end ; end ;
19234: LD_VAR 0 2
19238: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19239: LD_INT 0
19241: PPUSH
19242: PPUSH
19243: PPUSH
// if not hack in hackTanks or not vehicles then
19244: LD_VAR 0 1
19248: PUSH
19249: LD_EXP 71
19253: IN
19254: NOT
19255: PUSH
19256: LD_VAR 0 2
19260: NOT
19261: OR
19262: IFFALSE 19266
// exit ;
19264: GO 19541
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_VAR 0 2
19280: PPUSH
19281: LD_INT 1
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL 25571 0 4
19291: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19292: LD_ADDR_VAR 0 5
19296: PUSH
19297: LD_EXP 71
19301: PPUSH
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL 24921 0 2
19311: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19312: LD_EXP 72
19316: PUSH
19317: LD_VAR 0 5
19321: ARRAY
19322: PUSH
19323: LD_EXP 73
19327: LESS
19328: IFFALSE 19517
// begin for i := 1 to vehicles do
19330: LD_ADDR_VAR 0 4
19334: PUSH
19335: DOUBLE
19336: LD_INT 1
19338: DEC
19339: ST_TO_ADDR
19340: LD_VAR 0 2
19344: PUSH
19345: FOR_TO
19346: IFFALSE 19515
// begin if hackTanksCaptured [ index ] = hackLimit then
19348: LD_EXP 72
19352: PUSH
19353: LD_VAR 0 5
19357: ARRAY
19358: PUSH
19359: LD_EXP 73
19363: EQUAL
19364: IFFALSE 19368
// break ;
19366: GO 19515
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19368: LD_ADDR_EXP 75
19372: PUSH
19373: LD_EXP 75
19377: PPUSH
19378: LD_VAR 0 5
19382: PPUSH
19383: LD_EXP 75
19387: PUSH
19388: LD_VAR 0 5
19392: ARRAY
19393: PUSH
19394: LD_INT 1
19396: PLUS
19397: PPUSH
19398: CALL_OW 1
19402: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19403: LD_ADDR_EXP 72
19407: PUSH
19408: LD_EXP 72
19412: PPUSH
19413: LD_VAR 0 5
19417: PUSH
19418: LD_EXP 72
19422: PUSH
19423: LD_VAR 0 5
19427: ARRAY
19428: PUSH
19429: LD_INT 1
19431: PLUS
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: LD_VAR 0 2
19441: PUSH
19442: LD_VAR 0 4
19446: ARRAY
19447: PUSH
19448: LD_VAR 0 2
19452: PUSH
19453: LD_VAR 0 4
19457: ARRAY
19458: PPUSH
19459: CALL_OW 255
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL 25136 0 3
19472: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19473: LD_VAR 0 2
19477: PUSH
19478: LD_VAR 0 4
19482: ARRAY
19483: PPUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL_OW 255
19493: PPUSH
19494: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19498: LD_VAR 0 2
19502: PUSH
19503: LD_VAR 0 4
19507: ARRAY
19508: PPUSH
19509: CALL_OW 141
// end ;
19513: GO 19345
19515: POP
19516: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19517: LD_VAR 0 1
19521: PPUSH
19522: LD_EXP 72
19526: PUSH
19527: LD_VAR 0 5
19531: ARRAY
19532: PUSH
19533: LD_INT 0
19535: PLUS
19536: PPUSH
19537: CALL_OW 505
// end ;
19541: LD_VAR 0 3
19545: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19546: LD_INT 0
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
// if not hack in hackTanks then
19552: LD_VAR 0 1
19556: PUSH
19557: LD_EXP 71
19561: IN
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19807
// index := GetElementIndex ( hackTanks , hack ) ;
19567: LD_ADDR_VAR 0 4
19571: PUSH
19572: LD_EXP 71
19576: PPUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL 24921 0 2
19586: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19587: LD_ADDR_VAR 0 3
19591: PUSH
19592: DOUBLE
19593: LD_EXP 72
19597: PUSH
19598: LD_VAR 0 4
19602: ARRAY
19603: INC
19604: ST_TO_ADDR
19605: LD_INT 1
19607: PUSH
19608: FOR_DOWNTO
19609: IFFALSE 19781
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19611: LD_ADDR_VAR 0 5
19615: PUSH
19616: LD_EXP 72
19620: PUSH
19621: LD_VAR 0 4
19625: ARRAY
19626: PUSH
19627: LD_VAR 0 3
19631: ARRAY
19632: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19633: LD_VAR 0 5
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: CALL_OW 302
19646: NOT
19647: PUSH
19648: LD_VAR 0 5
19652: PUSH
19653: LD_INT 1
19655: ARRAY
19656: PPUSH
19657: CALL_OW 255
19661: PUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: CALL_OW 255
19671: NONEQUAL
19672: OR
19673: IFFALSE 19779
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19675: LD_VAR 0 5
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: CALL_OW 305
19688: PUSH
19689: LD_VAR 0 5
19693: PUSH
19694: LD_INT 1
19696: ARRAY
19697: PPUSH
19698: CALL_OW 255
19702: PUSH
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 255
19712: EQUAL
19713: AND
19714: IFFALSE 19738
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19716: LD_VAR 0 5
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PPUSH
19725: LD_VAR 0 5
19729: PUSH
19730: LD_INT 2
19732: ARRAY
19733: PPUSH
19734: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19738: LD_ADDR_EXP 72
19742: PUSH
19743: LD_EXP 72
19747: PPUSH
19748: LD_VAR 0 4
19752: PPUSH
19753: LD_EXP 72
19757: PUSH
19758: LD_VAR 0 4
19762: ARRAY
19763: PPUSH
19764: LD_VAR 0 3
19768: PPUSH
19769: CALL_OW 3
19773: PPUSH
19774: CALL_OW 1
19778: ST_TO_ADDR
// end ; end ;
19779: GO 19608
19781: POP
19782: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_EXP 72
19792: PUSH
19793: LD_VAR 0 4
19797: ARRAY
19798: PUSH
19799: LD_INT 0
19801: PLUS
19802: PPUSH
19803: CALL_OW 505
// end ;
19807: LD_VAR 0 2
19811: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
19816: PPUSH
19817: PPUSH
// if not hack in hackTanks then
19818: LD_VAR 0 1
19822: PUSH
19823: LD_EXP 71
19827: IN
19828: NOT
19829: IFFALSE 19833
// exit ;
19831: GO 19918
// index := GetElementIndex ( hackTanks , hack ) ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_EXP 71
19842: PPUSH
19843: LD_VAR 0 1
19847: PPUSH
19848: CALL 24921 0 2
19852: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19853: LD_ADDR_VAR 0 4
19857: PUSH
19858: DOUBLE
19859: LD_INT 1
19861: DEC
19862: ST_TO_ADDR
19863: LD_EXP 72
19867: PUSH
19868: LD_VAR 0 5
19872: ARRAY
19873: PUSH
19874: FOR_TO
19875: IFFALSE 19916
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19877: LD_EXP 72
19881: PUSH
19882: LD_VAR 0 5
19886: ARRAY
19887: PUSH
19888: LD_VAR 0 4
19892: ARRAY
19893: PUSH
19894: LD_INT 1
19896: ARRAY
19897: PUSH
19898: LD_VAR 0 2
19902: EQUAL
19903: IFFALSE 19914
// KillUnit ( vehicle ) ;
19905: LD_VAR 0 2
19909: PPUSH
19910: CALL_OW 66
19914: GO 19874
19916: POP
19917: POP
// end ; end_of_file
19918: LD_VAR 0 3
19922: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19923: LD_VAR 0 1
19927: PUSH
19928: LD_INT 200
19930: DOUBLE
19931: GREATEREQUAL
19932: IFFALSE 19940
19934: LD_INT 299
19936: DOUBLE
19937: LESSEQUAL
19938: IFTRUE 19942
19940: GO 19974
19942: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: LD_VAR 0 4
19962: PPUSH
19963: LD_VAR 0 5
19967: PPUSH
19968: CALL 18244 0 5
19972: GO 20051
19974: LD_INT 300
19976: DOUBLE
19977: GREATEREQUAL
19978: IFFALSE 19986
19980: LD_INT 399
19982: DOUBLE
19983: LESSEQUAL
19984: IFTRUE 19988
19986: GO 20050
19988: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19989: LD_VAR 0 1
19993: PPUSH
19994: LD_VAR 0 2
19998: PPUSH
19999: LD_VAR 0 3
20003: PPUSH
20004: LD_VAR 0 4
20008: PPUSH
20009: LD_VAR 0 5
20013: PPUSH
20014: LD_VAR 0 6
20018: PPUSH
20019: LD_VAR 0 7
20023: PPUSH
20024: LD_VAR 0 8
20028: PPUSH
20029: LD_VAR 0 9
20033: PPUSH
20034: LD_VAR 0 10
20038: PPUSH
20039: LD_VAR 0 11
20043: PPUSH
20044: CALL 16150 0 11
20048: GO 20051
20050: POP
// end ; end_of_file
20051: PPOPN 11
20053: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20054: LD_INT 0
20056: PPUSH
// ar_crane := 88 ;
20057: LD_ADDR_EXP 82
20061: PUSH
20062: LD_INT 88
20064: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20065: LD_ADDR_EXP 77
20069: PUSH
20070: LD_INT 89
20072: ST_TO_ADDR
// us_hack := 99 ;
20073: LD_ADDR_EXP 78
20077: PUSH
20078: LD_INT 99
20080: ST_TO_ADDR
// us_artillery := 97 ;
20081: LD_ADDR_EXP 79
20085: PUSH
20086: LD_INT 97
20088: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20089: LD_ADDR_EXP 80
20093: PUSH
20094: LD_INT 91
20096: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20097: LD_ADDR_EXP 81
20101: PUSH
20102: LD_INT 92
20104: ST_TO_ADDR
// ru_radar := 98 ;
20105: LD_ADDR_EXP 76
20109: PUSH
20110: LD_INT 98
20112: ST_TO_ADDR
// tech_Artillery := 80 ;
20113: LD_ADDR_EXP 83
20117: PUSH
20118: LD_INT 80
20120: ST_TO_ADDR
// tech_RadMat := 81 ;
20121: LD_ADDR_EXP 84
20125: PUSH
20126: LD_INT 81
20128: ST_TO_ADDR
// tech_BasicTools := 82 ;
20129: LD_ADDR_EXP 85
20133: PUSH
20134: LD_INT 82
20136: ST_TO_ADDR
// tech_Cargo := 83 ;
20137: LD_ADDR_EXP 86
20141: PUSH
20142: LD_INT 83
20144: ST_TO_ADDR
// tech_Track := 84 ;
20145: LD_ADDR_EXP 87
20149: PUSH
20150: LD_INT 84
20152: ST_TO_ADDR
// tech_Crane := 85 ;
20153: LD_ADDR_EXP 88
20157: PUSH
20158: LD_INT 85
20160: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20161: LD_ADDR_EXP 89
20165: PUSH
20166: LD_INT 86
20168: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20169: LD_ADDR_EXP 90
20173: PUSH
20174: LD_INT 87
20176: ST_TO_ADDR
// end ;
20177: LD_VAR 0 1
20181: RET
// every 1 do
20182: GO 20184
20184: DISABLE
// InitGlobalVariables ; end_of_file
20185: CALL 20054 0 0
20189: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20190: LD_INT 0
20192: PPUSH
20193: PPUSH
// if exist_mode then
20194: LD_VAR 0 2
20198: IFFALSE 20223
// unit := CreateCharacter ( prefix & ident ) else
20200: LD_ADDR_VAR 0 5
20204: PUSH
20205: LD_VAR 0 3
20209: PUSH
20210: LD_VAR 0 1
20214: STR
20215: PPUSH
20216: CALL_OW 34
20220: ST_TO_ADDR
20221: GO 20238
// unit := NewCharacter ( ident ) ;
20223: LD_ADDR_VAR 0 5
20227: PUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 25
20237: ST_TO_ADDR
// result := unit ;
20238: LD_ADDR_VAR 0 4
20242: PUSH
20243: LD_VAR 0 5
20247: ST_TO_ADDR
// end ;
20248: LD_VAR 0 4
20252: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// if not side or not nation then
20257: LD_VAR 0 1
20261: NOT
20262: PUSH
20263: LD_VAR 0 2
20267: NOT
20268: OR
20269: IFFALSE 20273
// exit ;
20271: GO 21037
// case nation of nation_american :
20273: LD_VAR 0 2
20277: PUSH
20278: LD_INT 1
20280: DOUBLE
20281: EQUAL
20282: IFTRUE 20286
20284: GO 20500
20286: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20287: LD_ADDR_VAR 0 4
20291: PUSH
20292: LD_INT 35
20294: PUSH
20295: LD_INT 45
20297: PUSH
20298: LD_INT 46
20300: PUSH
20301: LD_INT 47
20303: PUSH
20304: LD_INT 82
20306: PUSH
20307: LD_INT 83
20309: PUSH
20310: LD_INT 84
20312: PUSH
20313: LD_INT 85
20315: PUSH
20316: LD_INT 86
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 6
20327: PUSH
20328: LD_INT 15
20330: PUSH
20331: LD_INT 16
20333: PUSH
20334: LD_INT 7
20336: PUSH
20337: LD_INT 12
20339: PUSH
20340: LD_INT 13
20342: PUSH
20343: LD_INT 10
20345: PUSH
20346: LD_INT 14
20348: PUSH
20349: LD_INT 20
20351: PUSH
20352: LD_INT 21
20354: PUSH
20355: LD_INT 22
20357: PUSH
20358: LD_INT 25
20360: PUSH
20361: LD_INT 32
20363: PUSH
20364: LD_INT 27
20366: PUSH
20367: LD_INT 36
20369: PUSH
20370: LD_INT 69
20372: PUSH
20373: LD_INT 39
20375: PUSH
20376: LD_INT 34
20378: PUSH
20379: LD_INT 40
20381: PUSH
20382: LD_INT 48
20384: PUSH
20385: LD_INT 49
20387: PUSH
20388: LD_INT 50
20390: PUSH
20391: LD_INT 51
20393: PUSH
20394: LD_INT 52
20396: PUSH
20397: LD_INT 53
20399: PUSH
20400: LD_INT 54
20402: PUSH
20403: LD_INT 55
20405: PUSH
20406: LD_INT 56
20408: PUSH
20409: LD_INT 57
20411: PUSH
20412: LD_INT 58
20414: PUSH
20415: LD_INT 59
20417: PUSH
20418: LD_INT 60
20420: PUSH
20421: LD_INT 61
20423: PUSH
20424: LD_INT 62
20426: PUSH
20427: LD_INT 80
20429: PUSH
20430: LD_INT 82
20432: PUSH
20433: LD_INT 83
20435: PUSH
20436: LD_INT 84
20438: PUSH
20439: LD_INT 85
20441: PUSH
20442: LD_INT 86
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: ST_TO_ADDR
20498: GO 20961
20500: LD_INT 2
20502: DOUBLE
20503: EQUAL
20504: IFTRUE 20508
20506: GO 20730
20508: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20509: LD_ADDR_VAR 0 4
20513: PUSH
20514: LD_INT 35
20516: PUSH
20517: LD_INT 45
20519: PUSH
20520: LD_INT 46
20522: PUSH
20523: LD_INT 47
20525: PUSH
20526: LD_INT 82
20528: PUSH
20529: LD_INT 83
20531: PUSH
20532: LD_INT 84
20534: PUSH
20535: LD_INT 85
20537: PUSH
20538: LD_INT 87
20540: PUSH
20541: LD_INT 70
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 11
20549: PUSH
20550: LD_INT 3
20552: PUSH
20553: LD_INT 4
20555: PUSH
20556: LD_INT 5
20558: PUSH
20559: LD_INT 6
20561: PUSH
20562: LD_INT 15
20564: PUSH
20565: LD_INT 18
20567: PUSH
20568: LD_INT 7
20570: PUSH
20571: LD_INT 17
20573: PUSH
20574: LD_INT 8
20576: PUSH
20577: LD_INT 20
20579: PUSH
20580: LD_INT 21
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 72
20588: PUSH
20589: LD_INT 26
20591: PUSH
20592: LD_INT 69
20594: PUSH
20595: LD_INT 39
20597: PUSH
20598: LD_INT 40
20600: PUSH
20601: LD_INT 41
20603: PUSH
20604: LD_INT 42
20606: PUSH
20607: LD_INT 43
20609: PUSH
20610: LD_INT 48
20612: PUSH
20613: LD_INT 49
20615: PUSH
20616: LD_INT 50
20618: PUSH
20619: LD_INT 51
20621: PUSH
20622: LD_INT 52
20624: PUSH
20625: LD_INT 53
20627: PUSH
20628: LD_INT 54
20630: PUSH
20631: LD_INT 55
20633: PUSH
20634: LD_INT 56
20636: PUSH
20637: LD_INT 60
20639: PUSH
20640: LD_INT 61
20642: PUSH
20643: LD_INT 62
20645: PUSH
20646: LD_INT 66
20648: PUSH
20649: LD_INT 67
20651: PUSH
20652: LD_INT 68
20654: PUSH
20655: LD_INT 81
20657: PUSH
20658: LD_INT 82
20660: PUSH
20661: LD_INT 83
20663: PUSH
20664: LD_INT 84
20666: PUSH
20667: LD_INT 85
20669: PUSH
20670: LD_INT 87
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
20728: GO 20961
20730: LD_INT 3
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20960
20738: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20739: LD_ADDR_VAR 0 4
20743: PUSH
20744: LD_INT 46
20746: PUSH
20747: LD_INT 47
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 82
20758: PUSH
20759: LD_INT 83
20761: PUSH
20762: LD_INT 84
20764: PUSH
20765: LD_INT 85
20767: PUSH
20768: LD_INT 86
20770: PUSH
20771: LD_INT 11
20773: PUSH
20774: LD_INT 9
20776: PUSH
20777: LD_INT 20
20779: PUSH
20780: LD_INT 19
20782: PUSH
20783: LD_INT 21
20785: PUSH
20786: LD_INT 24
20788: PUSH
20789: LD_INT 22
20791: PUSH
20792: LD_INT 25
20794: PUSH
20795: LD_INT 28
20797: PUSH
20798: LD_INT 29
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: LD_INT 31
20806: PUSH
20807: LD_INT 37
20809: PUSH
20810: LD_INT 38
20812: PUSH
20813: LD_INT 32
20815: PUSH
20816: LD_INT 27
20818: PUSH
20819: LD_INT 33
20821: PUSH
20822: LD_INT 69
20824: PUSH
20825: LD_INT 39
20827: PUSH
20828: LD_INT 34
20830: PUSH
20831: LD_INT 40
20833: PUSH
20834: LD_INT 71
20836: PUSH
20837: LD_INT 23
20839: PUSH
20840: LD_INT 44
20842: PUSH
20843: LD_INT 48
20845: PUSH
20846: LD_INT 49
20848: PUSH
20849: LD_INT 50
20851: PUSH
20852: LD_INT 51
20854: PUSH
20855: LD_INT 52
20857: PUSH
20858: LD_INT 53
20860: PUSH
20861: LD_INT 54
20863: PUSH
20864: LD_INT 55
20866: PUSH
20867: LD_INT 56
20869: PUSH
20870: LD_INT 57
20872: PUSH
20873: LD_INT 58
20875: PUSH
20876: LD_INT 59
20878: PUSH
20879: LD_INT 63
20881: PUSH
20882: LD_INT 64
20884: PUSH
20885: LD_INT 65
20887: PUSH
20888: LD_INT 82
20890: PUSH
20891: LD_INT 83
20893: PUSH
20894: LD_INT 84
20896: PUSH
20897: LD_INT 85
20899: PUSH
20900: LD_INT 86
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: ST_TO_ADDR
20958: GO 20961
20960: POP
// if state > - 1 and state < 3 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: GREATER
20970: PUSH
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 3
20978: LESS
20979: AND
20980: IFFALSE 21037
// for i in result do
20982: LD_ADDR_VAR 0 5
20986: PUSH
20987: LD_VAR 0 4
20991: PUSH
20992: FOR_IN
20993: IFFALSE 21035
// if GetTech ( i , side ) <> state then
20995: LD_VAR 0 5
20999: PPUSH
21000: LD_VAR 0 1
21004: PPUSH
21005: CALL_OW 321
21009: PUSH
21010: LD_VAR 0 3
21014: NONEQUAL
21015: IFFALSE 21033
// result := result diff i ;
21017: LD_ADDR_VAR 0 4
21021: PUSH
21022: LD_VAR 0 4
21026: PUSH
21027: LD_VAR 0 5
21031: DIFF
21032: ST_TO_ADDR
21033: GO 20992
21035: POP
21036: POP
// end ;
21037: LD_VAR 0 4
21041: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21042: LD_INT 0
21044: PPUSH
21045: PPUSH
21046: PPUSH
// result := true ;
21047: LD_ADDR_VAR 0 3
21051: PUSH
21052: LD_INT 1
21054: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21055: LD_ADDR_VAR 0 5
21059: PUSH
21060: LD_VAR 0 2
21064: PPUSH
21065: CALL_OW 480
21069: ST_TO_ADDR
// if not tmp then
21070: LD_VAR 0 5
21074: NOT
21075: IFFALSE 21079
// exit ;
21077: GO 21128
// for i in tmp do
21079: LD_ADDR_VAR 0 4
21083: PUSH
21084: LD_VAR 0 5
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21126
// if GetTech ( i , side ) <> state_researched then
21092: LD_VAR 0 4
21096: PPUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 321
21106: PUSH
21107: LD_INT 2
21109: NONEQUAL
21110: IFFALSE 21124
// begin result := false ;
21112: LD_ADDR_VAR 0 3
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// exit ;
21120: POP
21121: POP
21122: GO 21128
// end ;
21124: GO 21089
21126: POP
21127: POP
// end ;
21128: LD_VAR 0 3
21132: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21133: LD_INT 0
21135: PPUSH
21136: PPUSH
21137: PPUSH
21138: PPUSH
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21148: LD_VAR 0 1
21152: NOT
21153: PUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 257
21163: PUSH
21164: LD_INT 9
21166: NONEQUAL
21167: OR
21168: IFFALSE 21172
// exit ;
21170: GO 21745
// side := GetSide ( unit ) ;
21172: LD_ADDR_VAR 0 9
21176: PUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 255
21186: ST_TO_ADDR
// tech_space := tech_spacanom ;
21187: LD_ADDR_VAR 0 12
21191: PUSH
21192: LD_INT 29
21194: ST_TO_ADDR
// tech_time := tech_taurad ;
21195: LD_ADDR_VAR 0 13
21199: PUSH
21200: LD_INT 28
21202: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21203: LD_ADDR_VAR 0 11
21207: PUSH
21208: LD_VAR 0 1
21212: PPUSH
21213: CALL_OW 310
21217: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21218: LD_VAR 0 11
21222: PPUSH
21223: CALL_OW 247
21227: PUSH
21228: LD_INT 2
21230: EQUAL
21231: IFFALSE 21235
// exit ;
21233: GO 21745
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21235: LD_ADDR_VAR 0 8
21239: PUSH
21240: LD_INT 81
21242: PUSH
21243: LD_VAR 0 9
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PPUSH
21273: CALL_OW 69
21277: ST_TO_ADDR
// if not tmp then
21278: LD_VAR 0 8
21282: NOT
21283: IFFALSE 21287
// exit ;
21285: GO 21745
// if in_unit then
21287: LD_VAR 0 11
21291: IFFALSE 21315
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21293: LD_ADDR_VAR 0 10
21297: PUSH
21298: LD_VAR 0 8
21302: PPUSH
21303: LD_VAR 0 11
21307: PPUSH
21308: CALL_OW 74
21312: ST_TO_ADDR
21313: GO 21335
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21315: LD_ADDR_VAR 0 10
21319: PUSH
21320: LD_VAR 0 8
21324: PPUSH
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 74
21334: ST_TO_ADDR
// if not enemy then
21335: LD_VAR 0 10
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21745
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21344: LD_VAR 0 11
21348: PUSH
21349: LD_VAR 0 11
21353: PPUSH
21354: LD_VAR 0 10
21358: PPUSH
21359: CALL_OW 296
21363: PUSH
21364: LD_INT 13
21366: GREATER
21367: AND
21368: PUSH
21369: LD_VAR 0 1
21373: PPUSH
21374: LD_VAR 0 10
21378: PPUSH
21379: CALL_OW 296
21383: PUSH
21384: LD_INT 12
21386: GREATER
21387: OR
21388: IFFALSE 21392
// exit ;
21390: GO 21745
// missile := [ 1 ] ;
21392: LD_ADDR_VAR 0 14
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21403: LD_VAR 0 9
21407: PPUSH
21408: LD_VAR 0 12
21412: PPUSH
21413: CALL_OW 325
21417: IFFALSE 21446
// missile := Insert ( missile , missile + 1 , 2 ) ;
21419: LD_ADDR_VAR 0 14
21423: PUSH
21424: LD_VAR 0 14
21428: PPUSH
21429: LD_VAR 0 14
21433: PUSH
21434: LD_INT 1
21436: PLUS
21437: PPUSH
21438: LD_INT 2
21440: PPUSH
21441: CALL_OW 2
21445: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21446: LD_VAR 0 9
21450: PPUSH
21451: LD_VAR 0 13
21455: PPUSH
21456: CALL_OW 325
21460: PUSH
21461: LD_VAR 0 10
21465: PPUSH
21466: CALL_OW 255
21470: PPUSH
21471: LD_VAR 0 13
21475: PPUSH
21476: CALL_OW 325
21480: NOT
21481: AND
21482: IFFALSE 21511
// missile := Insert ( missile , missile + 1 , 3 ) ;
21484: LD_ADDR_VAR 0 14
21488: PUSH
21489: LD_VAR 0 14
21493: PPUSH
21494: LD_VAR 0 14
21498: PUSH
21499: LD_INT 1
21501: PLUS
21502: PPUSH
21503: LD_INT 3
21505: PPUSH
21506: CALL_OW 2
21510: ST_TO_ADDR
// if missile < 2 then
21511: LD_VAR 0 14
21515: PUSH
21516: LD_INT 2
21518: LESS
21519: IFFALSE 21523
// exit ;
21521: GO 21745
// x := GetX ( enemy ) ;
21523: LD_ADDR_VAR 0 4
21527: PUSH
21528: LD_VAR 0 10
21532: PPUSH
21533: CALL_OW 250
21537: ST_TO_ADDR
// y := GetY ( enemy ) ;
21538: LD_ADDR_VAR 0 5
21542: PUSH
21543: LD_VAR 0 10
21547: PPUSH
21548: CALL_OW 251
21552: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21553: LD_ADDR_VAR 0 6
21557: PUSH
21558: LD_VAR 0 4
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PPUSH
21567: LD_INT 1
21569: PPUSH
21570: CALL_OW 12
21574: PLUS
21575: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21576: LD_ADDR_VAR 0 7
21580: PUSH
21581: LD_VAR 0 5
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PPUSH
21590: LD_INT 1
21592: PPUSH
21593: CALL_OW 12
21597: PLUS
21598: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21599: LD_VAR 0 6
21603: PPUSH
21604: LD_VAR 0 7
21608: PPUSH
21609: CALL_OW 488
21613: NOT
21614: IFFALSE 21636
// begin _x := x ;
21616: LD_ADDR_VAR 0 6
21620: PUSH
21621: LD_VAR 0 4
21625: ST_TO_ADDR
// _y := y ;
21626: LD_ADDR_VAR 0 7
21630: PUSH
21631: LD_VAR 0 5
21635: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21636: LD_ADDR_VAR 0 3
21640: PUSH
21641: LD_INT 1
21643: PPUSH
21644: LD_VAR 0 14
21648: PPUSH
21649: CALL_OW 12
21653: ST_TO_ADDR
// case i of 1 :
21654: LD_VAR 0 3
21658: PUSH
21659: LD_INT 1
21661: DOUBLE
21662: EQUAL
21663: IFTRUE 21667
21665: GO 21684
21667: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_VAR 0 10
21677: PPUSH
21678: CALL_OW 115
21682: GO 21745
21684: LD_INT 2
21686: DOUBLE
21687: EQUAL
21688: IFTRUE 21692
21690: GO 21714
21692: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_VAR 0 6
21702: PPUSH
21703: LD_VAR 0 7
21707: PPUSH
21708: CALL_OW 153
21712: GO 21745
21714: LD_INT 3
21716: DOUBLE
21717: EQUAL
21718: IFTRUE 21722
21720: GO 21744
21722: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21723: LD_VAR 0 1
21727: PPUSH
21728: LD_VAR 0 6
21732: PPUSH
21733: LD_VAR 0 7
21737: PPUSH
21738: CALL_OW 154
21742: GO 21745
21744: POP
// end ;
21745: LD_VAR 0 2
21749: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
21754: PPUSH
21755: PPUSH
21756: PPUSH
21757: PPUSH
// if not unit or not building then
21758: LD_VAR 0 1
21762: NOT
21763: PUSH
21764: LD_VAR 0 2
21768: NOT
21769: OR
21770: IFFALSE 21774
// exit ;
21772: GO 21932
// x := GetX ( building ) ;
21774: LD_ADDR_VAR 0 5
21778: PUSH
21779: LD_VAR 0 2
21783: PPUSH
21784: CALL_OW 250
21788: ST_TO_ADDR
// y := GetY ( building ) ;
21789: LD_ADDR_VAR 0 6
21793: PUSH
21794: LD_VAR 0 2
21798: PPUSH
21799: CALL_OW 251
21803: ST_TO_ADDR
// for i = 0 to 5 do
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: DOUBLE
21810: LD_INT 0
21812: DEC
21813: ST_TO_ADDR
21814: LD_INT 5
21816: PUSH
21817: FOR_TO
21818: IFFALSE 21930
// begin _x := ShiftX ( x , i , 3 ) ;
21820: LD_ADDR_VAR 0 7
21824: PUSH
21825: LD_VAR 0 5
21829: PPUSH
21830: LD_VAR 0 4
21834: PPUSH
21835: LD_INT 3
21837: PPUSH
21838: CALL_OW 272
21842: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21843: LD_ADDR_VAR 0 8
21847: PUSH
21848: LD_VAR 0 6
21852: PPUSH
21853: LD_VAR 0 4
21857: PPUSH
21858: LD_INT 3
21860: PPUSH
21861: CALL_OW 273
21865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21866: LD_VAR 0 7
21870: PPUSH
21871: LD_VAR 0 8
21875: PPUSH
21876: CALL_OW 488
21880: NOT
21881: IFFALSE 21885
// continue ;
21883: GO 21817
// if HexInfo ( _x , _y ) = 0 then
21885: LD_VAR 0 7
21889: PPUSH
21890: LD_VAR 0 8
21894: PPUSH
21895: CALL_OW 428
21899: PUSH
21900: LD_INT 0
21902: EQUAL
21903: IFFALSE 21928
// begin ComMoveXY ( unit , _x , _y ) ;
21905: LD_VAR 0 1
21909: PPUSH
21910: LD_VAR 0 7
21914: PPUSH
21915: LD_VAR 0 8
21919: PPUSH
21920: CALL_OW 111
// exit ;
21924: POP
21925: POP
21926: GO 21932
// end ; end ;
21928: GO 21817
21930: POP
21931: POP
// end ;
21932: LD_VAR 0 3
21936: RET
// export function ScanBase ( side , base_area ) ; begin
21937: LD_INT 0
21939: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21940: LD_ADDR_VAR 0 3
21944: PUSH
21945: LD_VAR 0 2
21949: PPUSH
21950: LD_INT 81
21952: PUSH
21953: LD_VAR 0 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 70
21966: ST_TO_ADDR
// end ;
21967: LD_VAR 0 3
21971: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21972: LD_INT 0
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
// result := false ;
21978: LD_ADDR_VAR 0 2
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// side := GetSide ( unit ) ;
21986: LD_ADDR_VAR 0 3
21990: PUSH
21991: LD_VAR 0 1
21995: PPUSH
21996: CALL_OW 255
22000: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22001: LD_ADDR_VAR 0 4
22005: PUSH
22006: LD_VAR 0 1
22010: PPUSH
22011: CALL_OW 248
22015: ST_TO_ADDR
// case nat of 1 :
22016: LD_VAR 0 4
22020: PUSH
22021: LD_INT 1
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22040
22029: POP
// tech := tech_lassight ; 2 :
22030: LD_ADDR_VAR 0 5
22034: PUSH
22035: LD_INT 12
22037: ST_TO_ADDR
22038: GO 22079
22040: LD_INT 2
22042: DOUBLE
22043: EQUAL
22044: IFTRUE 22048
22046: GO 22059
22048: POP
// tech := tech_mortar ; 3 :
22049: LD_ADDR_VAR 0 5
22053: PUSH
22054: LD_INT 41
22056: ST_TO_ADDR
22057: GO 22079
22059: LD_INT 3
22061: DOUBLE
22062: EQUAL
22063: IFTRUE 22067
22065: GO 22078
22067: POP
// tech := tech_bazooka ; end ;
22068: LD_ADDR_VAR 0 5
22072: PUSH
22073: LD_INT 44
22075: ST_TO_ADDR
22076: GO 22079
22078: POP
// if Researched ( side , tech ) then
22079: LD_VAR 0 3
22083: PPUSH
22084: LD_VAR 0 5
22088: PPUSH
22089: CALL_OW 325
22093: IFFALSE 22120
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_INT 5
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: LD_INT 9
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: LD_VAR 0 4
22118: ARRAY
22119: ST_TO_ADDR
// end ;
22120: LD_VAR 0 2
22124: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22125: LD_INT 0
22127: PPUSH
22128: PPUSH
22129: PPUSH
// if not mines then
22130: LD_VAR 0 2
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 22283
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_INT 81
22146: PUSH
22147: LD_VAR 0 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 21
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PPUSH
22177: CALL_OW 69
22181: ST_TO_ADDR
// for i in mines do
22182: LD_ADDR_VAR 0 4
22186: PUSH
22187: LD_VAR 0 2
22191: PUSH
22192: FOR_IN
22193: IFFALSE 22281
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22195: LD_VAR 0 4
22199: PUSH
22200: LD_INT 1
22202: ARRAY
22203: PPUSH
22204: LD_VAR 0 4
22208: PUSH
22209: LD_INT 2
22211: ARRAY
22212: PPUSH
22213: CALL_OW 458
22217: NOT
22218: IFFALSE 22222
// continue ;
22220: GO 22192
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22222: LD_VAR 0 4
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: LD_VAR 0 4
22235: PUSH
22236: LD_INT 2
22238: ARRAY
22239: PPUSH
22240: CALL_OW 428
22244: PUSH
22245: LD_VAR 0 5
22249: IN
22250: IFFALSE 22279
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22252: LD_VAR 0 4
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: PPUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_INT 2
22268: ARRAY
22269: PPUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 456
// end ;
22279: GO 22192
22281: POP
22282: POP
// end ;
22283: LD_VAR 0 3
22287: RET
// export function Count ( array ) ; var i ; begin
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
// result := 0 ;
22292: LD_ADDR_VAR 0 2
22296: PUSH
22297: LD_INT 0
22299: ST_TO_ADDR
// for i in array do
22300: LD_ADDR_VAR 0 3
22304: PUSH
22305: LD_VAR 0 1
22309: PUSH
22310: FOR_IN
22311: IFFALSE 22335
// if i then
22313: LD_VAR 0 3
22317: IFFALSE 22333
// result := result + 1 ;
22319: LD_ADDR_VAR 0 2
22323: PUSH
22324: LD_VAR 0 2
22328: PUSH
22329: LD_INT 1
22331: PLUS
22332: ST_TO_ADDR
22333: GO 22310
22335: POP
22336: POP
// end ;
22337: LD_VAR 0 2
22341: RET
// export function IsEmpty ( building ) ; begin
22342: LD_INT 0
22344: PPUSH
// if not building then
22345: LD_VAR 0 1
22349: NOT
22350: IFFALSE 22354
// exit ;
22352: GO 22397
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_VAR 0 1
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 255
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 58
22383: PUSH
22384: EMPTY
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PPUSH
22391: CALL_OW 69
22395: IN
22396: ST_TO_ADDR
// end ;
22397: LD_VAR 0 2
22401: RET
// export function IsNotFull ( building ) ; begin
22402: LD_INT 0
22404: PPUSH
// if not building then
22405: LD_VAR 0 1
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22433
// result := UnitsInside ( building ) < 6 ;
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 313
22428: PUSH
22429: LD_INT 6
22431: LESS
22432: ST_TO_ADDR
// end ;
22433: LD_VAR 0 2
22437: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
// tmp := [ ] ;
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: EMPTY
22450: ST_TO_ADDR
// list := [ ] ;
22451: LD_ADDR_VAR 0 5
22455: PUSH
22456: EMPTY
22457: ST_TO_ADDR
// for i = 16 to 25 do
22458: LD_ADDR_VAR 0 4
22462: PUSH
22463: DOUBLE
22464: LD_INT 16
22466: DEC
22467: ST_TO_ADDR
22468: LD_INT 25
22470: PUSH
22471: FOR_TO
22472: IFFALSE 22545
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22474: LD_ADDR_VAR 0 3
22478: PUSH
22479: LD_VAR 0 3
22483: PUSH
22484: LD_INT 22
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 255
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 91
22503: PUSH
22504: LD_VAR 0 1
22508: PUSH
22509: LD_INT 6
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_VAR 0 4
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: PPUSH
22537: CALL_OW 69
22541: ADD
22542: ST_TO_ADDR
22543: GO 22471
22545: POP
22546: POP
// for i = 1 to tmp do
22547: LD_ADDR_VAR 0 4
22551: PUSH
22552: DOUBLE
22553: LD_INT 1
22555: DEC
22556: ST_TO_ADDR
22557: LD_VAR 0 3
22561: PUSH
22562: FOR_TO
22563: IFFALSE 22651
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22565: LD_ADDR_VAR 0 5
22569: PUSH
22570: LD_VAR 0 5
22574: PUSH
22575: LD_VAR 0 3
22579: PUSH
22580: LD_VAR 0 4
22584: ARRAY
22585: PPUSH
22586: CALL_OW 266
22590: PUSH
22591: LD_VAR 0 3
22595: PUSH
22596: LD_VAR 0 4
22600: ARRAY
22601: PPUSH
22602: CALL_OW 250
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 4
22616: ARRAY
22617: PPUSH
22618: CALL_OW 251
22622: PUSH
22623: LD_VAR 0 3
22627: PUSH
22628: LD_VAR 0 4
22632: ARRAY
22633: PPUSH
22634: CALL_OW 254
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: ADD
22648: ST_TO_ADDR
22649: GO 22562
22651: POP
22652: POP
// result := list ;
22653: LD_ADDR_VAR 0 2
22657: PUSH
22658: LD_VAR 0 5
22662: ST_TO_ADDR
// end ;
22663: LD_VAR 0 2
22667: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
22675: PPUSH
22676: PPUSH
// if not factory then
22677: LD_VAR 0 1
22681: NOT
22682: IFFALSE 22686
// exit ;
22684: GO 23279
// if control = control_apeman then
22686: LD_VAR 0 4
22690: PUSH
22691: LD_INT 5
22693: EQUAL
22694: IFFALSE 22803
// begin tmp := UnitsInside ( factory ) ;
22696: LD_ADDR_VAR 0 8
22700: PUSH
22701: LD_VAR 0 1
22705: PPUSH
22706: CALL_OW 313
22710: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22711: LD_VAR 0 8
22715: PPUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 12
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 72
22730: NOT
22731: IFFALSE 22741
// control := control_manual ;
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: LD_INT 1
22740: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22741: LD_ADDR_VAR 0 8
22745: PUSH
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL 22438 0 1
22755: ST_TO_ADDR
// if tmp then
22756: LD_VAR 0 8
22760: IFFALSE 22803
// begin for i in tmp do
22762: LD_ADDR_VAR 0 7
22766: PUSH
22767: LD_VAR 0 8
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22801
// if i [ 1 ] = b_ext_radio then
22775: LD_VAR 0 7
22779: PUSH
22780: LD_INT 1
22782: ARRAY
22783: PUSH
22784: LD_INT 22
22786: EQUAL
22787: IFFALSE 22799
// begin control := control_remote ;
22789: LD_ADDR_VAR 0 4
22793: PUSH
22794: LD_INT 2
22796: ST_TO_ADDR
// break ;
22797: GO 22801
// end ;
22799: GO 22772
22801: POP
22802: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_VAR 0 2
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_VAR 0 4
22822: PPUSH
22823: LD_VAR 0 5
22827: PPUSH
22828: CALL_OW 448
22832: IFFALSE 22867
// begin result := [ chassis , engine , control , weapon ] ;
22834: LD_ADDR_VAR 0 6
22838: PUSH
22839: LD_VAR 0 2
22843: PUSH
22844: LD_VAR 0 3
22848: PUSH
22849: LD_VAR 0 4
22853: PUSH
22854: LD_VAR 0 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
// exit ;
22865: GO 23279
// end ; _chassis := AvailableChassisList ( factory ) ;
22867: LD_ADDR_VAR 0 9
22871: PUSH
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL_OW 475
22881: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22882: LD_ADDR_VAR 0 11
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 476
22896: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22897: LD_ADDR_VAR 0 12
22901: PUSH
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL_OW 477
22911: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22912: LD_ADDR_VAR 0 10
22916: PUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 478
22926: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22927: LD_VAR 0 9
22931: NOT
22932: PUSH
22933: LD_VAR 0 11
22937: NOT
22938: OR
22939: PUSH
22940: LD_VAR 0 12
22944: NOT
22945: OR
22946: PUSH
22947: LD_VAR 0 10
22951: NOT
22952: OR
22953: IFFALSE 22988
// begin result := [ chassis , engine , control , weapon ] ;
22955: LD_ADDR_VAR 0 6
22959: PUSH
22960: LD_VAR 0 2
22964: PUSH
22965: LD_VAR 0 3
22969: PUSH
22970: LD_VAR 0 4
22974: PUSH
22975: LD_VAR 0 5
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
// exit ;
22986: GO 23279
// end ; if not chassis in _chassis then
22988: LD_VAR 0 2
22992: PUSH
22993: LD_VAR 0 9
22997: IN
22998: NOT
22999: IFFALSE 23025
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_VAR 0 9
23010: PUSH
23011: LD_INT 1
23013: PPUSH
23014: LD_VAR 0 9
23018: PPUSH
23019: CALL_OW 12
23023: ARRAY
23024: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: CALL 23284 0 2
23039: NOT
23040: IFFALSE 23099
// repeat engine := _engine [ 1 ] ;
23042: LD_ADDR_VAR 0 3
23046: PUSH
23047: LD_VAR 0 11
23051: PUSH
23052: LD_INT 1
23054: ARRAY
23055: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23056: LD_ADDR_VAR 0 11
23060: PUSH
23061: LD_VAR 0 11
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 3
23073: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23074: LD_VAR 0 2
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: CALL 23284 0 2
23088: PUSH
23089: LD_VAR 0 11
23093: PUSH
23094: EMPTY
23095: EQUAL
23096: OR
23097: IFFALSE 23042
// if not control in _control then
23099: LD_VAR 0 4
23103: PUSH
23104: LD_VAR 0 12
23108: IN
23109: NOT
23110: IFFALSE 23136
// control := _control [ rand ( 1 , _control ) ] ;
23112: LD_ADDR_VAR 0 4
23116: PUSH
23117: LD_VAR 0 12
23121: PUSH
23122: LD_INT 1
23124: PPUSH
23125: LD_VAR 0 12
23129: PPUSH
23130: CALL_OW 12
23134: ARRAY
23135: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23136: LD_VAR 0 2
23140: PPUSH
23141: LD_VAR 0 5
23145: PPUSH
23146: CALL 23504 0 2
23150: NOT
23151: IFFALSE 23210
// repeat weapon := _weapon [ 1 ] ;
23153: LD_ADDR_VAR 0 5
23157: PUSH
23158: LD_VAR 0 10
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23167: LD_ADDR_VAR 0 10
23171: PUSH
23172: LD_VAR 0 10
23176: PPUSH
23177: LD_INT 1
23179: PPUSH
23180: CALL_OW 3
23184: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23185: LD_VAR 0 2
23189: PPUSH
23190: LD_VAR 0 5
23194: PPUSH
23195: CALL 23504 0 2
23199: PUSH
23200: LD_VAR 0 10
23204: PUSH
23205: EMPTY
23206: EQUAL
23207: OR
23208: IFFALSE 23153
// result := [ ] ;
23210: LD_ADDR_VAR 0 6
23214: PUSH
23215: EMPTY
23216: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_VAR 0 2
23226: PPUSH
23227: LD_VAR 0 3
23231: PPUSH
23232: LD_VAR 0 4
23236: PPUSH
23237: LD_VAR 0 5
23241: PPUSH
23242: CALL_OW 448
23246: IFFALSE 23279
// result := [ chassis , engine , control , weapon ] ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 2
23257: PUSH
23258: LD_VAR 0 3
23262: PUSH
23263: LD_VAR 0 4
23267: PUSH
23268: LD_VAR 0 5
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// end ;
23279: LD_VAR 0 6
23283: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23284: LD_INT 0
23286: PPUSH
// if not chassis or not engine then
23287: LD_VAR 0 1
23291: NOT
23292: PUSH
23293: LD_VAR 0 2
23297: NOT
23298: OR
23299: IFFALSE 23303
// exit ;
23301: GO 23499
// case engine of engine_solar :
23303: LD_VAR 0 2
23307: PUSH
23308: LD_INT 2
23310: DOUBLE
23311: EQUAL
23312: IFTRUE 23316
23314: GO 23354
23316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23317: LD_ADDR_VAR 0 3
23321: PUSH
23322: LD_INT 11
23324: PUSH
23325: LD_INT 12
23327: PUSH
23328: LD_INT 13
23330: PUSH
23331: LD_INT 14
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 2
23339: PUSH
23340: LD_INT 3
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: ST_TO_ADDR
23352: GO 23483
23354: LD_INT 1
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23424
23362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 11
23370: PUSH
23371: LD_INT 12
23373: PUSH
23374: LD_INT 13
23376: PUSH
23377: LD_INT 14
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: LD_INT 4
23391: PUSH
23392: LD_INT 5
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 23
23400: PUSH
23401: LD_INT 22
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: ST_TO_ADDR
23422: GO 23483
23424: LD_INT 3
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23482
23432: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_INT 13
23440: PUSH
23441: LD_INT 14
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 23483
23482: POP
// result := ( chassis in result ) ;
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_VAR 0 1
23492: PUSH
23493: LD_VAR 0 3
23497: IN
23498: ST_TO_ADDR
// end ;
23499: LD_VAR 0 3
23503: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23504: LD_INT 0
23506: PPUSH
// if not chassis or not weapon then
23507: LD_VAR 0 1
23511: NOT
23512: PUSH
23513: LD_VAR 0 2
23517: NOT
23518: OR
23519: IFFALSE 23523
// exit ;
23521: GO 24549
// case weapon of us_machine_gun :
23523: LD_VAR 0 2
23527: PUSH
23528: LD_INT 2
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23566
23536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23537: LD_ADDR_VAR 0 3
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: LD_INT 4
23553: PUSH
23554: LD_INT 5
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: ST_TO_ADDR
23564: GO 24533
23566: LD_INT 3
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23604
23574: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 4
23591: PUSH
23592: LD_INT 5
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: ST_TO_ADDR
23602: GO 24533
23604: LD_INT 11
23606: DOUBLE
23607: EQUAL
23608: IFTRUE 23612
23610: GO 23642
23612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 3
23626: PUSH
23627: LD_INT 4
23629: PUSH
23630: LD_INT 5
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: ST_TO_ADDR
23640: GO 24533
23642: LD_INT 4
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23676
23650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23651: LD_ADDR_VAR 0 3
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 4
23664: PUSH
23665: LD_INT 5
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
23674: GO 24533
23676: LD_INT 5
23678: DOUBLE
23679: EQUAL
23680: IFTRUE 23684
23682: GO 23710
23684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23685: LD_ADDR_VAR 0 3
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: LD_INT 4
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
23708: GO 24533
23710: LD_INT 9
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23744
23718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 4
23732: PUSH
23733: LD_INT 5
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 24533
23744: LD_INT 7
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23778
23752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: LD_INT 4
23766: PUSH
23767: LD_INT 5
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 24533
23778: LD_INT 12
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23812
23786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 3
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24533
23812: LD_INT 13
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23846
23820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 4
23834: PUSH
23835: LD_INT 5
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
23844: GO 24533
23846: LD_INT 14
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23872
23854: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 4
23862: PUSH
23863: LD_INT 5
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 24533
23872: LD_INT 6
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23898
23880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_INT 4
23888: PUSH
23889: LD_INT 5
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: ST_TO_ADDR
23896: GO 24533
23898: LD_INT 10
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23924
23906: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23907: LD_ADDR_VAR 0 3
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: LD_INT 5
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: ST_TO_ADDR
23922: GO 24533
23924: LD_INT 22
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23958
23932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23933: LD_ADDR_VAR 0 3
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 13
23946: PUSH
23947: LD_INT 14
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: ST_TO_ADDR
23956: GO 24533
23958: LD_INT 23
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23992
23966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_INT 11
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: LD_INT 13
23980: PUSH
23981: LD_INT 14
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
23990: GO 24533
23992: LD_INT 24
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24026
24000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_INT 11
24008: PUSH
24009: LD_INT 12
24011: PUSH
24012: LD_INT 13
24014: PUSH
24015: LD_INT 14
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: ST_TO_ADDR
24024: GO 24533
24026: LD_INT 30
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24060
24034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: LD_INT 11
24042: PUSH
24043: LD_INT 12
24045: PUSH
24046: LD_INT 13
24048: PUSH
24049: LD_INT 14
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
24058: GO 24533
24060: LD_INT 25
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24086
24068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24069: LD_ADDR_VAR 0 3
24073: PUSH
24074: LD_INT 13
24076: PUSH
24077: LD_INT 14
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24533
24086: LD_INT 27
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24112
24094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 13
24102: PUSH
24103: LD_INT 14
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: ST_TO_ADDR
24110: GO 24533
24112: LD_INT 28
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24138
24120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 13
24128: PUSH
24129: LD_INT 14
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: ST_TO_ADDR
24136: GO 24533
24138: LD_INT 29
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24164
24146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: LD_INT 13
24154: PUSH
24155: LD_INT 14
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: ST_TO_ADDR
24162: GO 24533
24164: LD_INT 31
24166: DOUBLE
24167: EQUAL
24168: IFTRUE 24172
24170: GO 24190
24172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: LD_INT 13
24180: PUSH
24181: LD_INT 14
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: ST_TO_ADDR
24188: GO 24533
24190: LD_INT 26
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24216
24198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_INT 13
24206: PUSH
24207: LD_INT 14
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: ST_TO_ADDR
24214: GO 24533
24216: LD_INT 42
24218: DOUBLE
24219: EQUAL
24220: IFTRUE 24224
24222: GO 24250
24224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24225: LD_ADDR_VAR 0 3
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 22
24235: PUSH
24236: LD_INT 23
24238: PUSH
24239: LD_INT 24
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: ST_TO_ADDR
24248: GO 24533
24250: LD_INT 43
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24284
24258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24259: LD_ADDR_VAR 0 3
24263: PUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 22
24269: PUSH
24270: LD_INT 23
24272: PUSH
24273: LD_INT 24
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
24282: GO 24533
24284: LD_INT 44
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24318
24292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24293: LD_ADDR_VAR 0 3
24297: PUSH
24298: LD_INT 21
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_INT 23
24306: PUSH
24307: LD_INT 24
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: ST_TO_ADDR
24316: GO 24533
24318: LD_INT 45
24320: DOUBLE
24321: EQUAL
24322: IFTRUE 24326
24324: GO 24352
24326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24327: LD_ADDR_VAR 0 3
24331: PUSH
24332: LD_INT 21
24334: PUSH
24335: LD_INT 22
24337: PUSH
24338: LD_INT 23
24340: PUSH
24341: LD_INT 24
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: ST_TO_ADDR
24350: GO 24533
24352: LD_INT 49
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24386
24360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 23
24374: PUSH
24375: LD_INT 24
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 24533
24386: LD_INT 51
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24420
24394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24395: LD_ADDR_VAR 0 3
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_INT 23
24408: PUSH
24409: LD_INT 24
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
24418: GO 24533
24420: LD_INT 52
24422: DOUBLE
24423: EQUAL
24424: IFTRUE 24428
24426: GO 24454
24428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24429: LD_ADDR_VAR 0 3
24433: PUSH
24434: LD_INT 21
24436: PUSH
24437: LD_INT 22
24439: PUSH
24440: LD_INT 23
24442: PUSH
24443: LD_INT 24
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: ST_TO_ADDR
24452: GO 24533
24454: LD_INT 53
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24480
24462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: LD_INT 23
24470: PUSH
24471: LD_INT 24
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: ST_TO_ADDR
24478: GO 24533
24480: LD_INT 46
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24506
24488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_INT 23
24496: PUSH
24497: LD_INT 24
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: ST_TO_ADDR
24504: GO 24533
24506: LD_INT 47
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24532
24514: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_INT 23
24522: PUSH
24523: LD_INT 24
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: ST_TO_ADDR
24530: GO 24533
24532: POP
// result := ( chassis in result ) ;
24533: LD_ADDR_VAR 0 3
24537: PUSH
24538: LD_VAR 0 1
24542: PUSH
24543: LD_VAR 0 3
24547: IN
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 3
24553: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
// result := array ;
24563: LD_ADDR_VAR 0 5
24567: PUSH
24568: LD_VAR 0 1
24572: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24573: LD_VAR 0 1
24577: NOT
24578: PUSH
24579: LD_VAR 0 2
24583: NOT
24584: OR
24585: PUSH
24586: LD_VAR 0 3
24590: NOT
24591: OR
24592: PUSH
24593: LD_VAR 0 2
24597: PUSH
24598: LD_VAR 0 1
24602: GREATER
24603: OR
24604: PUSH
24605: LD_VAR 0 3
24609: PUSH
24610: LD_VAR 0 1
24614: GREATER
24615: OR
24616: IFFALSE 24620
// exit ;
24618: GO 24916
// if direction then
24620: LD_VAR 0 4
24624: IFFALSE 24688
// begin d := 1 ;
24626: LD_ADDR_VAR 0 9
24630: PUSH
24631: LD_INT 1
24633: ST_TO_ADDR
// if i_from > i_to then
24634: LD_VAR 0 2
24638: PUSH
24639: LD_VAR 0 3
24643: GREATER
24644: IFFALSE 24670
// length := ( array - i_from ) + i_to else
24646: LD_ADDR_VAR 0 11
24650: PUSH
24651: LD_VAR 0 1
24655: PUSH
24656: LD_VAR 0 2
24660: MINUS
24661: PUSH
24662: LD_VAR 0 3
24666: PLUS
24667: ST_TO_ADDR
24668: GO 24686
// length := i_to - i_from ;
24670: LD_ADDR_VAR 0 11
24674: PUSH
24675: LD_VAR 0 3
24679: PUSH
24680: LD_VAR 0 2
24684: MINUS
24685: ST_TO_ADDR
// end else
24686: GO 24749
// begin d := - 1 ;
24688: LD_ADDR_VAR 0 9
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: ST_TO_ADDR
// if i_from > i_to then
24697: LD_VAR 0 2
24701: PUSH
24702: LD_VAR 0 3
24706: GREATER
24707: IFFALSE 24727
// length := i_from - i_to else
24709: LD_ADDR_VAR 0 11
24713: PUSH
24714: LD_VAR 0 2
24718: PUSH
24719: LD_VAR 0 3
24723: MINUS
24724: ST_TO_ADDR
24725: GO 24749
// length := ( array - i_to ) + i_from ;
24727: LD_ADDR_VAR 0 11
24731: PUSH
24732: LD_VAR 0 1
24736: PUSH
24737: LD_VAR 0 3
24741: MINUS
24742: PUSH
24743: LD_VAR 0 2
24747: PLUS
24748: ST_TO_ADDR
// end ; if not length then
24749: LD_VAR 0 11
24753: NOT
24754: IFFALSE 24758
// exit ;
24756: GO 24916
// tmp := array ;
24758: LD_ADDR_VAR 0 10
24762: PUSH
24763: LD_VAR 0 1
24767: ST_TO_ADDR
// for i = 1 to length do
24768: LD_ADDR_VAR 0 6
24772: PUSH
24773: DOUBLE
24774: LD_INT 1
24776: DEC
24777: ST_TO_ADDR
24778: LD_VAR 0 11
24782: PUSH
24783: FOR_TO
24784: IFFALSE 24904
// begin for j = 1 to array do
24786: LD_ADDR_VAR 0 7
24790: PUSH
24791: DOUBLE
24792: LD_INT 1
24794: DEC
24795: ST_TO_ADDR
24796: LD_VAR 0 1
24800: PUSH
24801: FOR_TO
24802: IFFALSE 24890
// begin k := j + d ;
24804: LD_ADDR_VAR 0 8
24808: PUSH
24809: LD_VAR 0 7
24813: PUSH
24814: LD_VAR 0 9
24818: PLUS
24819: ST_TO_ADDR
// if k > array then
24820: LD_VAR 0 8
24824: PUSH
24825: LD_VAR 0 1
24829: GREATER
24830: IFFALSE 24840
// k := 1 ;
24832: LD_ADDR_VAR 0 8
24836: PUSH
24837: LD_INT 1
24839: ST_TO_ADDR
// if not k then
24840: LD_VAR 0 8
24844: NOT
24845: IFFALSE 24857
// k := array ;
24847: LD_ADDR_VAR 0 8
24851: PUSH
24852: LD_VAR 0 1
24856: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24857: LD_ADDR_VAR 0 10
24861: PUSH
24862: LD_VAR 0 10
24866: PPUSH
24867: LD_VAR 0 8
24871: PPUSH
24872: LD_VAR 0 1
24876: PUSH
24877: LD_VAR 0 7
24881: ARRAY
24882: PPUSH
24883: CALL_OW 1
24887: ST_TO_ADDR
// end ;
24888: GO 24801
24890: POP
24891: POP
// array := tmp ;
24892: LD_ADDR_VAR 0 1
24896: PUSH
24897: LD_VAR 0 10
24901: ST_TO_ADDR
// end ;
24902: GO 24783
24904: POP
24905: POP
// result := array ;
24906: LD_ADDR_VAR 0 5
24910: PUSH
24911: LD_VAR 0 1
24915: ST_TO_ADDR
// end ;
24916: LD_VAR 0 5
24920: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24921: LD_INT 0
24923: PPUSH
24924: PPUSH
// result := 0 ;
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_INT 0
24932: ST_TO_ADDR
// if not array or not value in array then
24933: LD_VAR 0 1
24937: NOT
24938: PUSH
24939: LD_VAR 0 2
24943: PUSH
24944: LD_VAR 0 1
24948: IN
24949: NOT
24950: OR
24951: IFFALSE 24955
// exit ;
24953: GO 25009
// for i = 1 to array do
24955: LD_ADDR_VAR 0 4
24959: PUSH
24960: DOUBLE
24961: LD_INT 1
24963: DEC
24964: ST_TO_ADDR
24965: LD_VAR 0 1
24969: PUSH
24970: FOR_TO
24971: IFFALSE 25007
// if value = array [ i ] then
24973: LD_VAR 0 2
24977: PUSH
24978: LD_VAR 0 1
24982: PUSH
24983: LD_VAR 0 4
24987: ARRAY
24988: EQUAL
24989: IFFALSE 25005
// begin result := i ;
24991: LD_ADDR_VAR 0 3
24995: PUSH
24996: LD_VAR 0 4
25000: ST_TO_ADDR
// exit ;
25001: POP
25002: POP
25003: GO 25009
// end ;
25005: GO 24970
25007: POP
25008: POP
// end ;
25009: LD_VAR 0 3
25013: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25014: LD_INT 0
25016: PPUSH
// vc_chassis := chassis ;
25017: LD_ADDR_OWVAR 37
25021: PUSH
25022: LD_VAR 0 1
25026: ST_TO_ADDR
// vc_engine := engine ;
25027: LD_ADDR_OWVAR 39
25031: PUSH
25032: LD_VAR 0 2
25036: ST_TO_ADDR
// vc_control := control ;
25037: LD_ADDR_OWVAR 38
25041: PUSH
25042: LD_VAR 0 3
25046: ST_TO_ADDR
// vc_weapon := weapon ;
25047: LD_ADDR_OWVAR 40
25051: PUSH
25052: LD_VAR 0 4
25056: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25057: LD_ADDR_OWVAR 41
25061: PUSH
25062: LD_VAR 0 5
25066: ST_TO_ADDR
// end ;
25067: LD_VAR 0 6
25071: RET
// export function WantPlant ( unit ) ; var task ; begin
25072: LD_INT 0
25074: PPUSH
25075: PPUSH
// result := false ;
25076: LD_ADDR_VAR 0 2
25080: PUSH
25081: LD_INT 0
25083: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25084: LD_ADDR_VAR 0 3
25088: PUSH
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 437
25098: ST_TO_ADDR
// if task then
25099: LD_VAR 0 3
25103: IFFALSE 25131
// if task [ 1 ] [ 1 ] = p then
25105: LD_VAR 0 3
25109: PUSH
25110: LD_INT 1
25112: ARRAY
25113: PUSH
25114: LD_INT 1
25116: ARRAY
25117: PUSH
25118: LD_STRING p
25120: EQUAL
25121: IFFALSE 25131
// result := true ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_INT 1
25130: ST_TO_ADDR
// end ;
25131: LD_VAR 0 2
25135: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25136: LD_INT 0
25138: PPUSH
25139: PPUSH
25140: PPUSH
25141: PPUSH
// if pos < 1 then
25142: LD_VAR 0 2
25146: PUSH
25147: LD_INT 1
25149: LESS
25150: IFFALSE 25154
// exit ;
25152: GO 25457
// if pos = 1 then
25154: LD_VAR 0 2
25158: PUSH
25159: LD_INT 1
25161: EQUAL
25162: IFFALSE 25195
// result := Replace ( arr , pos [ 1 ] , value ) else
25164: LD_ADDR_VAR 0 4
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: LD_VAR 0 2
25178: PUSH
25179: LD_INT 1
25181: ARRAY
25182: PPUSH
25183: LD_VAR 0 3
25187: PPUSH
25188: CALL_OW 1
25192: ST_TO_ADDR
25193: GO 25457
// begin tmp := arr ;
25195: LD_ADDR_VAR 0 6
25199: PUSH
25200: LD_VAR 0 1
25204: ST_TO_ADDR
// s_arr := [ tmp ] ;
25205: LD_ADDR_VAR 0 7
25209: PUSH
25210: LD_VAR 0 6
25214: PUSH
25215: EMPTY
25216: LIST
25217: ST_TO_ADDR
// for i = 1 to pos - 1 do
25218: LD_ADDR_VAR 0 5
25222: PUSH
25223: DOUBLE
25224: LD_INT 1
25226: DEC
25227: ST_TO_ADDR
25228: LD_VAR 0 2
25232: PUSH
25233: LD_INT 1
25235: MINUS
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25283
// begin tmp := tmp [ pos [ i ] ] ;
25240: LD_ADDR_VAR 0 6
25244: PUSH
25245: LD_VAR 0 6
25249: PUSH
25250: LD_VAR 0 2
25254: PUSH
25255: LD_VAR 0 5
25259: ARRAY
25260: ARRAY
25261: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25262: LD_ADDR_VAR 0 7
25266: PUSH
25267: LD_VAR 0 7
25271: PUSH
25272: LD_VAR 0 6
25276: PUSH
25277: EMPTY
25278: LIST
25279: ADD
25280: ST_TO_ADDR
// end ;
25281: GO 25237
25283: POP
25284: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25285: LD_ADDR_VAR 0 6
25289: PUSH
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 2
25299: PUSH
25300: LD_VAR 0 2
25304: ARRAY
25305: PPUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: CALL_OW 1
25315: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25316: LD_ADDR_VAR 0 7
25320: PUSH
25321: LD_VAR 0 7
25325: PPUSH
25326: LD_VAR 0 7
25330: PPUSH
25331: LD_VAR 0 6
25335: PPUSH
25336: CALL_OW 1
25340: ST_TO_ADDR
// for i = s_arr downto 2 do
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: DOUBLE
25347: LD_VAR 0 7
25351: INC
25352: ST_TO_ADDR
25353: LD_INT 2
25355: PUSH
25356: FOR_DOWNTO
25357: IFFALSE 25441
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25359: LD_ADDR_VAR 0 6
25363: PUSH
25364: LD_VAR 0 7
25368: PUSH
25369: LD_VAR 0 5
25373: PUSH
25374: LD_INT 1
25376: MINUS
25377: ARRAY
25378: PPUSH
25379: LD_VAR 0 2
25383: PUSH
25384: LD_VAR 0 5
25388: PUSH
25389: LD_INT 1
25391: MINUS
25392: ARRAY
25393: PPUSH
25394: LD_VAR 0 7
25398: PUSH
25399: LD_VAR 0 5
25403: ARRAY
25404: PPUSH
25405: CALL_OW 1
25409: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25410: LD_ADDR_VAR 0 7
25414: PUSH
25415: LD_VAR 0 7
25419: PPUSH
25420: LD_VAR 0 5
25424: PUSH
25425: LD_INT 1
25427: MINUS
25428: PPUSH
25429: LD_VAR 0 6
25433: PPUSH
25434: CALL_OW 1
25438: ST_TO_ADDR
// end ;
25439: GO 25356
25441: POP
25442: POP
// result := s_arr [ 1 ] ;
25443: LD_ADDR_VAR 0 4
25447: PUSH
25448: LD_VAR 0 7
25452: PUSH
25453: LD_INT 1
25455: ARRAY
25456: ST_TO_ADDR
// end ; end ;
25457: LD_VAR 0 4
25461: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25462: LD_INT 0
25464: PPUSH
25465: PPUSH
// if not list then
25466: LD_VAR 0 1
25470: NOT
25471: IFFALSE 25475
// exit ;
25473: GO 25566
// i := list [ pos1 ] ;
25475: LD_ADDR_VAR 0 5
25479: PUSH
25480: LD_VAR 0 1
25484: PUSH
25485: LD_VAR 0 2
25489: ARRAY
25490: ST_TO_ADDR
// if not i then
25491: LD_VAR 0 5
25495: NOT
25496: IFFALSE 25500
// exit ;
25498: GO 25566
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25500: LD_ADDR_VAR 0 1
25504: PUSH
25505: LD_VAR 0 1
25509: PPUSH
25510: LD_VAR 0 2
25514: PPUSH
25515: LD_VAR 0 1
25519: PUSH
25520: LD_VAR 0 3
25524: ARRAY
25525: PPUSH
25526: CALL_OW 1
25530: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25531: LD_ADDR_VAR 0 1
25535: PUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: LD_VAR 0 5
25550: PPUSH
25551: CALL_OW 1
25555: ST_TO_ADDR
// result := list ;
25556: LD_ADDR_VAR 0 4
25560: PUSH
25561: LD_VAR 0 1
25565: ST_TO_ADDR
// end ;
25566: LD_VAR 0 4
25570: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25571: LD_INT 0
25573: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25574: LD_ADDR_VAR 0 5
25578: PUSH
25579: LD_VAR 0 1
25583: PPUSH
25584: CALL_OW 250
25588: PPUSH
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 251
25598: PPUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: LD_VAR 0 3
25608: PPUSH
25609: LD_VAR 0 4
25613: PPUSH
25614: CALL 25624 0 5
25618: ST_TO_ADDR
// end ;
25619: LD_VAR 0 5
25623: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25624: LD_INT 0
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
// if not list then
25630: LD_VAR 0 3
25634: NOT
25635: IFFALSE 25639
// exit ;
25637: GO 26027
// result := [ ] ;
25639: LD_ADDR_VAR 0 6
25643: PUSH
25644: EMPTY
25645: ST_TO_ADDR
// for i in list do
25646: LD_ADDR_VAR 0 7
25650: PUSH
25651: LD_VAR 0 3
25655: PUSH
25656: FOR_IN
25657: IFFALSE 25859
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25659: LD_ADDR_VAR 0 9
25663: PUSH
25664: LD_VAR 0 7
25668: PPUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: LD_VAR 0 2
25678: PPUSH
25679: CALL_OW 297
25683: ST_TO_ADDR
// if not result then
25684: LD_VAR 0 6
25688: NOT
25689: IFFALSE 25715
// result := [ [ i , tmp ] ] else
25691: LD_ADDR_VAR 0 6
25695: PUSH
25696: LD_VAR 0 7
25700: PUSH
25701: LD_VAR 0 9
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: ST_TO_ADDR
25713: GO 25857
// begin if result [ result ] [ 2 ] < tmp then
25715: LD_VAR 0 6
25719: PUSH
25720: LD_VAR 0 6
25724: ARRAY
25725: PUSH
25726: LD_INT 2
25728: ARRAY
25729: PUSH
25730: LD_VAR 0 9
25734: LESS
25735: IFFALSE 25777
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25737: LD_ADDR_VAR 0 6
25741: PUSH
25742: LD_VAR 0 6
25746: PPUSH
25747: LD_VAR 0 6
25751: PUSH
25752: LD_INT 1
25754: PLUS
25755: PPUSH
25756: LD_VAR 0 7
25760: PUSH
25761: LD_VAR 0 9
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PPUSH
25770: CALL_OW 2
25774: ST_TO_ADDR
25775: GO 25857
// for j = 1 to result do
25777: LD_ADDR_VAR 0 8
25781: PUSH
25782: DOUBLE
25783: LD_INT 1
25785: DEC
25786: ST_TO_ADDR
25787: LD_VAR 0 6
25791: PUSH
25792: FOR_TO
25793: IFFALSE 25855
// begin if tmp < result [ j ] [ 2 ] then
25795: LD_VAR 0 9
25799: PUSH
25800: LD_VAR 0 6
25804: PUSH
25805: LD_VAR 0 8
25809: ARRAY
25810: PUSH
25811: LD_INT 2
25813: ARRAY
25814: LESS
25815: IFFALSE 25853
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25817: LD_ADDR_VAR 0 6
25821: PUSH
25822: LD_VAR 0 6
25826: PPUSH
25827: LD_VAR 0 8
25831: PPUSH
25832: LD_VAR 0 7
25836: PUSH
25837: LD_VAR 0 9
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 2
25850: ST_TO_ADDR
// break ;
25851: GO 25855
// end ; end ;
25853: GO 25792
25855: POP
25856: POP
// end ; end ;
25857: GO 25656
25859: POP
25860: POP
// if result and not asc then
25861: LD_VAR 0 6
25865: PUSH
25866: LD_VAR 0 4
25870: NOT
25871: AND
25872: IFFALSE 25947
// begin tmp := result ;
25874: LD_ADDR_VAR 0 9
25878: PUSH
25879: LD_VAR 0 6
25883: ST_TO_ADDR
// for i = tmp downto 1 do
25884: LD_ADDR_VAR 0 7
25888: PUSH
25889: DOUBLE
25890: LD_VAR 0 9
25894: INC
25895: ST_TO_ADDR
25896: LD_INT 1
25898: PUSH
25899: FOR_DOWNTO
25900: IFFALSE 25945
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25902: LD_ADDR_VAR 0 6
25906: PUSH
25907: LD_VAR 0 6
25911: PPUSH
25912: LD_VAR 0 9
25916: PUSH
25917: LD_VAR 0 7
25921: MINUS
25922: PUSH
25923: LD_INT 1
25925: PLUS
25926: PPUSH
25927: LD_VAR 0 9
25931: PUSH
25932: LD_VAR 0 7
25936: ARRAY
25937: PPUSH
25938: CALL_OW 1
25942: ST_TO_ADDR
25943: GO 25899
25945: POP
25946: POP
// end ; tmp := [ ] ;
25947: LD_ADDR_VAR 0 9
25951: PUSH
25952: EMPTY
25953: ST_TO_ADDR
// if mode then
25954: LD_VAR 0 5
25958: IFFALSE 26027
// begin for i = 1 to result do
25960: LD_ADDR_VAR 0 7
25964: PUSH
25965: DOUBLE
25966: LD_INT 1
25968: DEC
25969: ST_TO_ADDR
25970: LD_VAR 0 6
25974: PUSH
25975: FOR_TO
25976: IFFALSE 26015
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25978: LD_ADDR_VAR 0 9
25982: PUSH
25983: LD_VAR 0 9
25987: PPUSH
25988: LD_VAR 0 7
25992: PPUSH
25993: LD_VAR 0 6
25997: PUSH
25998: LD_VAR 0 7
26002: ARRAY
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: PPUSH
26008: CALL_OW 1
26012: ST_TO_ADDR
26013: GO 25975
26015: POP
26016: POP
// result := tmp ;
26017: LD_ADDR_VAR 0 6
26021: PUSH
26022: LD_VAR 0 9
26026: ST_TO_ADDR
// end ; end ;
26027: LD_VAR 0 6
26031: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26032: LD_INT 0
26034: PPUSH
26035: PPUSH
26036: PPUSH
26037: PPUSH
26038: PPUSH
26039: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26040: LD_ADDR_VAR 0 5
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: EMPTY
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
// if not x or not y then
26062: LD_VAR 0 2
26066: NOT
26067: PUSH
26068: LD_VAR 0 3
26072: NOT
26073: OR
26074: IFFALSE 26078
// exit ;
26076: GO 27724
// if not range then
26078: LD_VAR 0 4
26082: NOT
26083: IFFALSE 26093
// range := 10 ;
26085: LD_ADDR_VAR 0 4
26089: PUSH
26090: LD_INT 10
26092: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26093: LD_ADDR_VAR 0 8
26097: PUSH
26098: LD_INT 81
26100: PUSH
26101: LD_VAR 0 1
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 92
26112: PUSH
26113: LD_VAR 0 2
26117: PUSH
26118: LD_VAR 0 3
26122: PUSH
26123: LD_VAR 0 4
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: LD_INT 21
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: PPUSH
26156: CALL_OW 69
26160: ST_TO_ADDR
// if not tmp then
26161: LD_VAR 0 8
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 27724
// for i in tmp do
26170: LD_ADDR_VAR 0 6
26174: PUSH
26175: LD_VAR 0 8
26179: PUSH
26180: FOR_IN
26181: IFFALSE 27699
// begin points := [ 0 , 0 , 0 ] ;
26183: LD_ADDR_VAR 0 9
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: ST_TO_ADDR
// bpoints := 1 ;
26202: LD_ADDR_VAR 0 10
26206: PUSH
26207: LD_INT 1
26209: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26210: LD_VAR 0 6
26214: PPUSH
26215: CALL_OW 247
26219: PUSH
26220: LD_INT 1
26222: DOUBLE
26223: EQUAL
26224: IFTRUE 26228
26226: GO 26806
26228: POP
// begin if GetClass ( i ) = 1 then
26229: LD_VAR 0 6
26233: PPUSH
26234: CALL_OW 257
26238: PUSH
26239: LD_INT 1
26241: EQUAL
26242: IFFALSE 26263
// points := [ 10 , 5 , 3 ] ;
26244: LD_ADDR_VAR 0 9
26248: PUSH
26249: LD_INT 10
26251: PUSH
26252: LD_INT 5
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26263: LD_VAR 0 6
26267: PPUSH
26268: CALL_OW 257
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 3
26278: PUSH
26279: LD_INT 4
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: LIST
26286: IN
26287: IFFALSE 26308
// points := [ 3 , 2 , 1 ] ;
26289: LD_ADDR_VAR 0 9
26293: PUSH
26294: LD_INT 3
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26308: LD_VAR 0 6
26312: PPUSH
26313: CALL_OW 257
26317: PUSH
26318: LD_INT 5
26320: EQUAL
26321: IFFALSE 26342
// points := [ 130 , 5 , 2 ] ;
26323: LD_ADDR_VAR 0 9
26327: PUSH
26328: LD_INT 130
26330: PUSH
26331: LD_INT 5
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26342: LD_VAR 0 6
26346: PPUSH
26347: CALL_OW 257
26351: PUSH
26352: LD_INT 8
26354: EQUAL
26355: IFFALSE 26376
// points := [ 35 , 35 , 30 ] ;
26357: LD_ADDR_VAR 0 9
26361: PUSH
26362: LD_INT 35
26364: PUSH
26365: LD_INT 35
26367: PUSH
26368: LD_INT 30
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26376: LD_VAR 0 6
26380: PPUSH
26381: CALL_OW 257
26385: PUSH
26386: LD_INT 9
26388: EQUAL
26389: IFFALSE 26410
// points := [ 20 , 55 , 40 ] ;
26391: LD_ADDR_VAR 0 9
26395: PUSH
26396: LD_INT 20
26398: PUSH
26399: LD_INT 55
26401: PUSH
26402: LD_INT 40
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26410: LD_VAR 0 6
26414: PPUSH
26415: CALL_OW 257
26419: PUSH
26420: LD_INT 12
26422: PUSH
26423: LD_INT 16
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: IN
26430: IFFALSE 26451
// points := [ 5 , 3 , 2 ] ;
26432: LD_ADDR_VAR 0 9
26436: PUSH
26437: LD_INT 5
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26451: LD_VAR 0 6
26455: PPUSH
26456: CALL_OW 257
26460: PUSH
26461: LD_INT 17
26463: EQUAL
26464: IFFALSE 26485
// points := [ 100 , 50 , 75 ] ;
26466: LD_ADDR_VAR 0 9
26470: PUSH
26471: LD_INT 100
26473: PUSH
26474: LD_INT 50
26476: PUSH
26477: LD_INT 75
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26485: LD_VAR 0 6
26489: PPUSH
26490: CALL_OW 257
26494: PUSH
26495: LD_INT 15
26497: EQUAL
26498: IFFALSE 26519
// points := [ 10 , 5 , 3 ] ;
26500: LD_ADDR_VAR 0 9
26504: PUSH
26505: LD_INT 10
26507: PUSH
26508: LD_INT 5
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26519: LD_VAR 0 6
26523: PPUSH
26524: CALL_OW 257
26528: PUSH
26529: LD_INT 14
26531: EQUAL
26532: IFFALSE 26553
// points := [ 10 , 0 , 0 ] ;
26534: LD_ADDR_VAR 0 9
26538: PUSH
26539: LD_INT 10
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26553: LD_VAR 0 6
26557: PPUSH
26558: CALL_OW 257
26562: PUSH
26563: LD_INT 11
26565: EQUAL
26566: IFFALSE 26587
// points := [ 30 , 10 , 5 ] ;
26568: LD_ADDR_VAR 0 9
26572: PUSH
26573: LD_INT 30
26575: PUSH
26576: LD_INT 10
26578: PUSH
26579: LD_INT 5
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26587: LD_VAR 0 1
26591: PPUSH
26592: LD_INT 5
26594: PPUSH
26595: CALL_OW 321
26599: PUSH
26600: LD_INT 2
26602: EQUAL
26603: IFFALSE 26620
// bpoints := bpoints * 1.8 ;
26605: LD_ADDR_VAR 0 10
26609: PUSH
26610: LD_VAR 0 10
26614: PUSH
26615: LD_REAL  1.80000000000000E+0000
26618: MUL
26619: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26620: LD_VAR 0 6
26624: PPUSH
26625: CALL_OW 257
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: LD_INT 3
26638: PUSH
26639: LD_INT 4
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: IN
26648: PUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: LD_INT 51
26656: PPUSH
26657: CALL_OW 321
26661: PUSH
26662: LD_INT 2
26664: EQUAL
26665: AND
26666: IFFALSE 26683
// bpoints := bpoints * 1.2 ;
26668: LD_ADDR_VAR 0 10
26672: PUSH
26673: LD_VAR 0 10
26677: PUSH
26678: LD_REAL  1.20000000000000E+0000
26681: MUL
26682: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26683: LD_VAR 0 6
26687: PPUSH
26688: CALL_OW 257
26692: PUSH
26693: LD_INT 5
26695: PUSH
26696: LD_INT 7
26698: PUSH
26699: LD_INT 9
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: IN
26707: PUSH
26708: LD_VAR 0 1
26712: PPUSH
26713: LD_INT 52
26715: PPUSH
26716: CALL_OW 321
26720: PUSH
26721: LD_INT 2
26723: EQUAL
26724: AND
26725: IFFALSE 26742
// bpoints := bpoints * 1.5 ;
26727: LD_ADDR_VAR 0 10
26731: PUSH
26732: LD_VAR 0 10
26736: PUSH
26737: LD_REAL  1.50000000000000E+0000
26740: MUL
26741: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_INT 66
26749: PPUSH
26750: CALL_OW 321
26754: PUSH
26755: LD_INT 2
26757: EQUAL
26758: IFFALSE 26775
// bpoints := bpoints * 1.1 ;
26760: LD_ADDR_VAR 0 10
26764: PUSH
26765: LD_VAR 0 10
26769: PUSH
26770: LD_REAL  1.10000000000000E+0000
26773: MUL
26774: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26775: LD_ADDR_VAR 0 10
26779: PUSH
26780: LD_VAR 0 10
26784: PUSH
26785: LD_VAR 0 6
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: CALL_OW 259
26797: PUSH
26798: LD_REAL  1.15000000000000E+0000
26801: MUL
26802: MUL
26803: ST_TO_ADDR
// end ; unit_vehicle :
26804: GO 27628
26806: LD_INT 2
26808: DOUBLE
26809: EQUAL
26810: IFTRUE 26814
26812: GO 27616
26814: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26815: LD_VAR 0 6
26819: PPUSH
26820: CALL_OW 264
26824: PUSH
26825: LD_INT 2
26827: PUSH
26828: LD_INT 42
26830: PUSH
26831: LD_INT 24
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: IN
26839: IFFALSE 26860
// points := [ 25 , 5 , 3 ] ;
26841: LD_ADDR_VAR 0 9
26845: PUSH
26846: LD_INT 25
26848: PUSH
26849: LD_INT 5
26851: PUSH
26852: LD_INT 3
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26860: LD_VAR 0 6
26864: PPUSH
26865: CALL_OW 264
26869: PUSH
26870: LD_INT 4
26872: PUSH
26873: LD_INT 43
26875: PUSH
26876: LD_INT 25
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: IN
26884: IFFALSE 26905
// points := [ 40 , 15 , 5 ] ;
26886: LD_ADDR_VAR 0 9
26890: PUSH
26891: LD_INT 40
26893: PUSH
26894: LD_INT 15
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26905: LD_VAR 0 6
26909: PPUSH
26910: CALL_OW 264
26914: PUSH
26915: LD_INT 3
26917: PUSH
26918: LD_INT 23
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: IN
26925: IFFALSE 26946
// points := [ 7 , 25 , 8 ] ;
26927: LD_ADDR_VAR 0 9
26931: PUSH
26932: LD_INT 7
26934: PUSH
26935: LD_INT 25
26937: PUSH
26938: LD_INT 8
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26946: LD_VAR 0 6
26950: PPUSH
26951: CALL_OW 264
26955: PUSH
26956: LD_INT 5
26958: PUSH
26959: LD_INT 27
26961: PUSH
26962: LD_INT 44
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: IN
26970: IFFALSE 26991
// points := [ 14 , 50 , 16 ] ;
26972: LD_ADDR_VAR 0 9
26976: PUSH
26977: LD_INT 14
26979: PUSH
26980: LD_INT 50
26982: PUSH
26983: LD_INT 16
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26991: LD_VAR 0 6
26995: PPUSH
26996: CALL_OW 264
27000: PUSH
27001: LD_INT 6
27003: PUSH
27004: LD_INT 46
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: IN
27011: IFFALSE 27032
// points := [ 32 , 120 , 70 ] ;
27013: LD_ADDR_VAR 0 9
27017: PUSH
27018: LD_INT 32
27020: PUSH
27021: LD_INT 120
27023: PUSH
27024: LD_INT 70
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27032: LD_VAR 0 6
27036: PPUSH
27037: CALL_OW 264
27041: PUSH
27042: LD_INT 7
27044: PUSH
27045: LD_INT 28
27047: PUSH
27048: LD_INT 45
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: IN
27056: IFFALSE 27077
// points := [ 35 , 20 , 45 ] ;
27058: LD_ADDR_VAR 0 9
27062: PUSH
27063: LD_INT 35
27065: PUSH
27066: LD_INT 20
27068: PUSH
27069: LD_INT 45
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27077: LD_VAR 0 6
27081: PPUSH
27082: CALL_OW 264
27086: PUSH
27087: LD_INT 47
27089: PUSH
27090: EMPTY
27091: LIST
27092: IN
27093: IFFALSE 27114
// points := [ 67 , 45 , 75 ] ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: LD_INT 67
27102: PUSH
27103: LD_INT 45
27105: PUSH
27106: LD_INT 75
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27114: LD_VAR 0 6
27118: PPUSH
27119: CALL_OW 264
27123: PUSH
27124: LD_INT 26
27126: PUSH
27127: EMPTY
27128: LIST
27129: IN
27130: IFFALSE 27151
// points := [ 120 , 30 , 80 ] ;
27132: LD_ADDR_VAR 0 9
27136: PUSH
27137: LD_INT 120
27139: PUSH
27140: LD_INT 30
27142: PUSH
27143: LD_INT 80
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27151: LD_VAR 0 6
27155: PPUSH
27156: CALL_OW 264
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: EMPTY
27165: LIST
27166: IN
27167: IFFALSE 27188
// points := [ 40 , 1 , 1 ] ;
27169: LD_ADDR_VAR 0 9
27173: PUSH
27174: LD_INT 40
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27188: LD_VAR 0 6
27192: PPUSH
27193: CALL_OW 264
27197: PUSH
27198: LD_INT 29
27200: PUSH
27201: EMPTY
27202: LIST
27203: IN
27204: IFFALSE 27225
// points := [ 70 , 200 , 400 ] ;
27206: LD_ADDR_VAR 0 9
27210: PUSH
27211: LD_INT 70
27213: PUSH
27214: LD_INT 200
27216: PUSH
27217: LD_INT 400
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27225: LD_VAR 0 6
27229: PPUSH
27230: CALL_OW 264
27234: PUSH
27235: LD_INT 14
27237: PUSH
27238: LD_INT 53
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: IN
27245: IFFALSE 27266
// points := [ 40 , 10 , 20 ] ;
27247: LD_ADDR_VAR 0 9
27251: PUSH
27252: LD_INT 40
27254: PUSH
27255: LD_INT 10
27257: PUSH
27258: LD_INT 20
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27266: LD_VAR 0 6
27270: PPUSH
27271: CALL_OW 264
27275: PUSH
27276: LD_INT 9
27278: PUSH
27279: EMPTY
27280: LIST
27281: IN
27282: IFFALSE 27303
// points := [ 5 , 70 , 20 ] ;
27284: LD_ADDR_VAR 0 9
27288: PUSH
27289: LD_INT 5
27291: PUSH
27292: LD_INT 70
27294: PUSH
27295: LD_INT 20
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27303: LD_VAR 0 6
27307: PPUSH
27308: CALL_OW 264
27312: PUSH
27313: LD_INT 10
27315: PUSH
27316: EMPTY
27317: LIST
27318: IN
27319: IFFALSE 27340
// points := [ 35 , 110 , 70 ] ;
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_INT 35
27328: PUSH
27329: LD_INT 110
27331: PUSH
27332: LD_INT 70
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27340: LD_VAR 0 6
27344: PPUSH
27345: CALL_OW 265
27349: PUSH
27350: LD_INT 25
27352: EQUAL
27353: IFFALSE 27374
// points := [ 80 , 65 , 100 ] ;
27355: LD_ADDR_VAR 0 9
27359: PUSH
27360: LD_INT 80
27362: PUSH
27363: LD_INT 65
27365: PUSH
27366: LD_INT 100
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 263
27383: PUSH
27384: LD_INT 1
27386: EQUAL
27387: IFFALSE 27422
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27389: LD_ADDR_VAR 0 10
27393: PUSH
27394: LD_VAR 0 10
27398: PUSH
27399: LD_VAR 0 6
27403: PPUSH
27404: CALL_OW 311
27408: PPUSH
27409: LD_INT 3
27411: PPUSH
27412: CALL_OW 259
27416: PUSH
27417: LD_INT 4
27419: MUL
27420: MUL
27421: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27422: LD_VAR 0 6
27426: PPUSH
27427: CALL_OW 263
27431: PUSH
27432: LD_INT 2
27434: EQUAL
27435: IFFALSE 27486
// begin j := IsControledBy ( i ) ;
27437: LD_ADDR_VAR 0 7
27441: PUSH
27442: LD_VAR 0 6
27446: PPUSH
27447: CALL_OW 312
27451: ST_TO_ADDR
// if j then
27452: LD_VAR 0 7
27456: IFFALSE 27486
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27458: LD_ADDR_VAR 0 10
27462: PUSH
27463: LD_VAR 0 10
27467: PUSH
27468: LD_VAR 0 7
27472: PPUSH
27473: LD_INT 3
27475: PPUSH
27476: CALL_OW 259
27480: PUSH
27481: LD_INT 3
27483: MUL
27484: MUL
27485: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27486: LD_VAR 0 6
27490: PPUSH
27491: CALL_OW 264
27495: PUSH
27496: LD_INT 5
27498: PUSH
27499: LD_INT 6
27501: PUSH
27502: LD_INT 46
27504: PUSH
27505: LD_INT 44
27507: PUSH
27508: LD_INT 47
27510: PUSH
27511: LD_INT 45
27513: PUSH
27514: LD_INT 28
27516: PUSH
27517: LD_INT 7
27519: PUSH
27520: LD_INT 27
27522: PUSH
27523: LD_INT 29
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: IN
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: LD_INT 52
27546: PPUSH
27547: CALL_OW 321
27551: PUSH
27552: LD_INT 2
27554: EQUAL
27555: AND
27556: IFFALSE 27573
// bpoints := bpoints * 1.2 ;
27558: LD_ADDR_VAR 0 10
27562: PUSH
27563: LD_VAR 0 10
27567: PUSH
27568: LD_REAL  1.20000000000000E+0000
27571: MUL
27572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27573: LD_VAR 0 6
27577: PPUSH
27578: CALL_OW 264
27582: PUSH
27583: LD_INT 6
27585: PUSH
27586: LD_INT 46
27588: PUSH
27589: LD_INT 47
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: IN
27597: IFFALSE 27614
// bpoints := bpoints * 1.2 ;
27599: LD_ADDR_VAR 0 10
27603: PUSH
27604: LD_VAR 0 10
27608: PUSH
27609: LD_REAL  1.20000000000000E+0000
27612: MUL
27613: ST_TO_ADDR
// end ; unit_building :
27614: GO 27628
27616: LD_INT 3
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27627
27624: POP
// ; end ;
27625: GO 27628
27627: POP
// for j = 1 to 3 do
27628: LD_ADDR_VAR 0 7
27632: PUSH
27633: DOUBLE
27634: LD_INT 1
27636: DEC
27637: ST_TO_ADDR
27638: LD_INT 3
27640: PUSH
27641: FOR_TO
27642: IFFALSE 27695
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27644: LD_ADDR_VAR 0 5
27648: PUSH
27649: LD_VAR 0 5
27653: PPUSH
27654: LD_VAR 0 7
27658: PPUSH
27659: LD_VAR 0 5
27663: PUSH
27664: LD_VAR 0 7
27668: ARRAY
27669: PUSH
27670: LD_VAR 0 9
27674: PUSH
27675: LD_VAR 0 7
27679: ARRAY
27680: PUSH
27681: LD_VAR 0 10
27685: MUL
27686: PLUS
27687: PPUSH
27688: CALL_OW 1
27692: ST_TO_ADDR
27693: GO 27641
27695: POP
27696: POP
// end ;
27697: GO 26180
27699: POP
27700: POP
// result := Replace ( result , 4 , tmp ) ;
27701: LD_ADDR_VAR 0 5
27705: PUSH
27706: LD_VAR 0 5
27710: PPUSH
27711: LD_INT 4
27713: PPUSH
27714: LD_VAR 0 8
27718: PPUSH
27719: CALL_OW 1
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 5
27728: RET
// export function DangerAtRange ( unit , range ) ; begin
27729: LD_INT 0
27731: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27732: LD_ADDR_VAR 0 3
27736: PUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 255
27746: PPUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 250
27756: PPUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 251
27766: PPUSH
27767: LD_VAR 0 2
27771: PPUSH
27772: CALL 26032 0 4
27776: ST_TO_ADDR
// end ;
27777: LD_VAR 0 3
27781: RET
// export function DangerInArea ( side , area ) ; begin
27782: LD_INT 0
27784: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: LD_VAR 0 2
27794: PPUSH
27795: LD_INT 81
27797: PUSH
27798: LD_VAR 0 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 70
27811: ST_TO_ADDR
// end ;
27812: LD_VAR 0 3
27816: RET
// export function IsExtension ( b ) ; begin
27817: LD_INT 0
27819: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27820: LD_ADDR_VAR 0 2
27824: PUSH
27825: LD_VAR 0 1
27829: PUSH
27830: LD_INT 23
27832: PUSH
27833: LD_INT 20
27835: PUSH
27836: LD_INT 22
27838: PUSH
27839: LD_INT 17
27841: PUSH
27842: LD_INT 24
27844: PUSH
27845: LD_INT 21
27847: PUSH
27848: LD_INT 19
27850: PUSH
27851: LD_INT 16
27853: PUSH
27854: LD_INT 25
27856: PUSH
27857: LD_INT 18
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: IN
27872: ST_TO_ADDR
// end ;
27873: LD_VAR 0 2
27877: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
27882: PPUSH
// result := [ ] ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: EMPTY
27889: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27890: LD_ADDR_VAR 0 4
27894: PUSH
27895: LD_VAR 0 2
27899: PPUSH
27900: LD_INT 21
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PPUSH
27910: CALL_OW 70
27914: ST_TO_ADDR
// if not tmp then
27915: LD_VAR 0 4
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 27982
// for i in tmp do
27924: LD_ADDR_VAR 0 5
27928: PUSH
27929: LD_VAR 0 4
27933: PUSH
27934: FOR_IN
27935: IFFALSE 27970
// if GetBase ( i ) <> base then
27937: LD_VAR 0 5
27941: PPUSH
27942: CALL_OW 274
27946: PUSH
27947: LD_VAR 0 1
27951: NONEQUAL
27952: IFFALSE 27968
// ComLinkToBase ( base , i ) ;
27954: LD_VAR 0 1
27958: PPUSH
27959: LD_VAR 0 5
27963: PPUSH
27964: CALL_OW 169
27968: GO 27934
27970: POP
27971: POP
// result := tmp ;
27972: LD_ADDR_VAR 0 3
27976: PUSH
27977: LD_VAR 0 4
27981: ST_TO_ADDR
// end ;
27982: LD_VAR 0 3
27986: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
// if BuildingStatus ( b ) = bs_build then
27991: LD_VAR 0 2
27995: PPUSH
27996: CALL_OW 461
28000: PUSH
28001: LD_INT 1
28003: EQUAL
28004: IFFALSE 28064
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_STRING h
28013: PUSH
28014: LD_VAR 0 2
28018: PPUSH
28019: CALL_OW 250
28023: PUSH
28024: LD_VAR 0 2
28028: PPUSH
28029: CALL_OW 251
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: PPUSH
28060: CALL_OW 446
// end ;
28064: LD_VAR 0 3
28068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28069: LD_INT 0
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28077: LD_VAR 0 1
28081: NOT
28082: PUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 263
28092: PUSH
28093: LD_INT 2
28095: EQUAL
28096: NOT
28097: OR
28098: IFFALSE 28102
// exit ;
28100: GO 28418
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28102: LD_ADDR_VAR 0 6
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 255
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 30
28129: PUSH
28130: LD_INT 36
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 34
28139: PUSH
28140: LD_INT 31
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PPUSH
28156: CALL_OW 69
28160: ST_TO_ADDR
// if not tmp then
28161: LD_VAR 0 6
28165: NOT
28166: IFFALSE 28170
// exit ;
28168: GO 28418
// result := [ ] ;
28170: LD_ADDR_VAR 0 2
28174: PUSH
28175: EMPTY
28176: ST_TO_ADDR
// for i in tmp do
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_VAR 0 6
28186: PUSH
28187: FOR_IN
28188: IFFALSE 28259
// begin t := UnitsInside ( i ) ;
28190: LD_ADDR_VAR 0 4
28194: PUSH
28195: LD_VAR 0 3
28199: PPUSH
28200: CALL_OW 313
28204: ST_TO_ADDR
// if t then
28205: LD_VAR 0 4
28209: IFFALSE 28257
// for j in t do
28211: LD_ADDR_VAR 0 7
28215: PUSH
28216: LD_VAR 0 4
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28255
// result := Insert ( result , result + 1 , j ) ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_VAR 0 2
28238: PUSH
28239: LD_INT 1
28241: PLUS
28242: PPUSH
28243: LD_VAR 0 7
28247: PPUSH
28248: CALL_OW 2
28252: ST_TO_ADDR
28253: GO 28221
28255: POP
28256: POP
// end ;
28257: GO 28187
28259: POP
28260: POP
// if not result then
28261: LD_VAR 0 2
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28418
// mech := result [ 1 ] ;
28270: LD_ADDR_VAR 0 5
28274: PUSH
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: ST_TO_ADDR
// if result > 1 then
28284: LD_VAR 0 2
28288: PUSH
28289: LD_INT 1
28291: GREATER
28292: IFFALSE 28404
// for i = 2 to result do
28294: LD_ADDR_VAR 0 3
28298: PUSH
28299: DOUBLE
28300: LD_INT 2
28302: DEC
28303: ST_TO_ADDR
28304: LD_VAR 0 2
28308: PUSH
28309: FOR_TO
28310: IFFALSE 28402
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28312: LD_ADDR_VAR 0 4
28316: PUSH
28317: LD_VAR 0 2
28321: PUSH
28322: LD_VAR 0 3
28326: ARRAY
28327: PPUSH
28328: LD_INT 3
28330: PPUSH
28331: CALL_OW 259
28335: PUSH
28336: LD_VAR 0 2
28340: PUSH
28341: LD_VAR 0 3
28345: ARRAY
28346: PPUSH
28347: CALL_OW 432
28351: MINUS
28352: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28353: LD_VAR 0 4
28357: PUSH
28358: LD_VAR 0 5
28362: PPUSH
28363: LD_INT 3
28365: PPUSH
28366: CALL_OW 259
28370: PUSH
28371: LD_VAR 0 5
28375: PPUSH
28376: CALL_OW 432
28380: MINUS
28381: GREATEREQUAL
28382: IFFALSE 28400
// mech := result [ i ] ;
28384: LD_ADDR_VAR 0 5
28388: PUSH
28389: LD_VAR 0 2
28393: PUSH
28394: LD_VAR 0 3
28398: ARRAY
28399: ST_TO_ADDR
// end ;
28400: GO 28309
28402: POP
28403: POP
// ComLinkTo ( vehicle , mech ) ;
28404: LD_VAR 0 1
28408: PPUSH
28409: LD_VAR 0 5
28413: PPUSH
28414: CALL_OW 135
// end ;
28418: LD_VAR 0 2
28422: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
28429: PPUSH
28430: PPUSH
28431: PPUSH
28432: PPUSH
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
// result := [ ] ;
28438: LD_ADDR_VAR 0 7
28442: PUSH
28443: EMPTY
28444: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 266
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: IN
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 30101
// if name then
28470: LD_VAR 0 3
28474: IFFALSE 28490
// SetBName ( base_dep , name ) ;
28476: LD_VAR 0 1
28480: PPUSH
28481: LD_VAR 0 3
28485: PPUSH
28486: CALL_OW 500
// base := GetBase ( base_dep ) ;
28490: LD_ADDR_VAR 0 15
28494: PUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 274
28504: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28505: LD_ADDR_VAR 0 16
28509: PUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL_OW 255
28519: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28520: LD_ADDR_VAR 0 17
28524: PUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 248
28534: ST_TO_ADDR
// if sources then
28535: LD_VAR 0 5
28539: IFFALSE 28586
// for i = 1 to 3 do
28541: LD_ADDR_VAR 0 8
28545: PUSH
28546: DOUBLE
28547: LD_INT 1
28549: DEC
28550: ST_TO_ADDR
28551: LD_INT 3
28553: PUSH
28554: FOR_TO
28555: IFFALSE 28584
// AddResourceType ( base , i , sources [ i ] ) ;
28557: LD_VAR 0 15
28561: PPUSH
28562: LD_VAR 0 8
28566: PPUSH
28567: LD_VAR 0 5
28571: PUSH
28572: LD_VAR 0 8
28576: ARRAY
28577: PPUSH
28578: CALL_OW 276
28582: GO 28554
28584: POP
28585: POP
// buildings := GetBaseBuildings ( base , area ) ;
28586: LD_ADDR_VAR 0 18
28590: PUSH
28591: LD_VAR 0 15
28595: PPUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL 27878 0 2
28605: ST_TO_ADDR
// InitHc ;
28606: CALL_OW 19
// InitUc ;
28610: CALL_OW 18
// uc_side := side ;
28614: LD_ADDR_OWVAR 20
28618: PUSH
28619: LD_VAR 0 16
28623: ST_TO_ADDR
// uc_nation := nation ;
28624: LD_ADDR_OWVAR 21
28628: PUSH
28629: LD_VAR 0 17
28633: ST_TO_ADDR
// if buildings then
28634: LD_VAR 0 18
28638: IFFALSE 29960
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28640: LD_ADDR_VAR 0 19
28644: PUSH
28645: LD_VAR 0 18
28649: PPUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 30
28655: PUSH
28656: LD_INT 29
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 30
28665: PUSH
28666: LD_INT 30
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: PPUSH
28678: CALL_OW 72
28682: ST_TO_ADDR
// if tmp then
28683: LD_VAR 0 19
28687: IFFALSE 28735
// for i in tmp do
28689: LD_ADDR_VAR 0 8
28693: PUSH
28694: LD_VAR 0 19
28698: PUSH
28699: FOR_IN
28700: IFFALSE 28733
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28702: LD_VAR 0 8
28706: PPUSH
28707: CALL_OW 250
28711: PPUSH
28712: LD_VAR 0 8
28716: PPUSH
28717: CALL_OW 251
28721: PPUSH
28722: LD_VAR 0 16
28726: PPUSH
28727: CALL_OW 441
28731: GO 28699
28733: POP
28734: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28735: LD_VAR 0 18
28739: PPUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 30
28745: PUSH
28746: LD_INT 32
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 33
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 72
28772: IFFALSE 28860
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28774: LD_ADDR_VAR 0 8
28778: PUSH
28779: LD_VAR 0 18
28783: PPUSH
28784: LD_INT 2
28786: PUSH
28787: LD_INT 30
28789: PUSH
28790: LD_INT 32
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 30
28799: PUSH
28800: LD_INT 33
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: PPUSH
28812: CALL_OW 72
28816: PUSH
28817: FOR_IN
28818: IFFALSE 28858
// begin if not GetBWeapon ( i ) then
28820: LD_VAR 0 8
28824: PPUSH
28825: CALL_OW 269
28829: NOT
28830: IFFALSE 28856
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28832: LD_VAR 0 8
28836: PPUSH
28837: LD_VAR 0 8
28841: PPUSH
28842: LD_VAR 0 2
28846: PPUSH
28847: CALL 30106 0 2
28851: PPUSH
28852: CALL_OW 431
// end ;
28856: GO 28817
28858: POP
28859: POP
// end ; for i = 1 to personel do
28860: LD_ADDR_VAR 0 8
28864: PUSH
28865: DOUBLE
28866: LD_INT 1
28868: DEC
28869: ST_TO_ADDR
28870: LD_VAR 0 6
28874: PUSH
28875: FOR_TO
28876: IFFALSE 29940
// begin if i > 4 then
28878: LD_VAR 0 8
28882: PUSH
28883: LD_INT 4
28885: GREATER
28886: IFFALSE 28890
// break ;
28888: GO 29940
// case i of 1 :
28890: LD_VAR 0 8
28894: PUSH
28895: LD_INT 1
28897: DOUBLE
28898: EQUAL
28899: IFTRUE 28903
28901: GO 28983
28903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28904: LD_ADDR_VAR 0 12
28908: PUSH
28909: LD_VAR 0 18
28913: PPUSH
28914: LD_INT 22
28916: PUSH
28917: LD_VAR 0 16
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 58
28928: PUSH
28929: EMPTY
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 30
28937: PUSH
28938: LD_INT 32
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 30
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 30
28957: PUSH
28958: LD_INT 5
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 72
28980: ST_TO_ADDR
28981: GO 29205
28983: LD_INT 2
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29053
28991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28992: LD_ADDR_VAR 0 12
28996: PUSH
28997: LD_VAR 0 18
29001: PPUSH
29002: LD_INT 22
29004: PUSH
29005: LD_VAR 0 16
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: LD_INT 30
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 30
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PPUSH
29046: CALL_OW 72
29050: ST_TO_ADDR
29051: GO 29205
29053: LD_INT 3
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29123
29061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29062: LD_ADDR_VAR 0 12
29066: PUSH
29067: LD_VAR 0 18
29071: PPUSH
29072: LD_INT 22
29074: PUSH
29075: LD_VAR 0 16
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: LD_INT 30
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 30
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 72
29120: ST_TO_ADDR
29121: GO 29205
29123: LD_INT 4
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29204
29131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29132: LD_ADDR_VAR 0 12
29136: PUSH
29137: LD_VAR 0 18
29141: PPUSH
29142: LD_INT 22
29144: PUSH
29145: LD_VAR 0 16
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: LD_INT 30
29159: PUSH
29160: LD_INT 6
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 30
29169: PUSH
29170: LD_INT 7
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 30
29179: PUSH
29180: LD_INT 8
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 72
29201: ST_TO_ADDR
29202: GO 29205
29204: POP
// if i = 1 then
29205: LD_VAR 0 8
29209: PUSH
29210: LD_INT 1
29212: EQUAL
29213: IFFALSE 29324
// begin tmp := [ ] ;
29215: LD_ADDR_VAR 0 19
29219: PUSH
29220: EMPTY
29221: ST_TO_ADDR
// for j in f do
29222: LD_ADDR_VAR 0 9
29226: PUSH
29227: LD_VAR 0 12
29231: PUSH
29232: FOR_IN
29233: IFFALSE 29306
// if GetBType ( j ) = b_bunker then
29235: LD_VAR 0 9
29239: PPUSH
29240: CALL_OW 266
29244: PUSH
29245: LD_INT 32
29247: EQUAL
29248: IFFALSE 29275
// tmp := Insert ( tmp , 1 , j ) else
29250: LD_ADDR_VAR 0 19
29254: PUSH
29255: LD_VAR 0 19
29259: PPUSH
29260: LD_INT 1
29262: PPUSH
29263: LD_VAR 0 9
29267: PPUSH
29268: CALL_OW 2
29272: ST_TO_ADDR
29273: GO 29304
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29275: LD_ADDR_VAR 0 19
29279: PUSH
29280: LD_VAR 0 19
29284: PPUSH
29285: LD_VAR 0 19
29289: PUSH
29290: LD_INT 1
29292: PLUS
29293: PPUSH
29294: LD_VAR 0 9
29298: PPUSH
29299: CALL_OW 2
29303: ST_TO_ADDR
29304: GO 29232
29306: POP
29307: POP
// if tmp then
29308: LD_VAR 0 19
29312: IFFALSE 29324
// f := tmp ;
29314: LD_ADDR_VAR 0 12
29318: PUSH
29319: LD_VAR 0 19
29323: ST_TO_ADDR
// end ; x := personel [ i ] ;
29324: LD_ADDR_VAR 0 13
29328: PUSH
29329: LD_VAR 0 6
29333: PUSH
29334: LD_VAR 0 8
29338: ARRAY
29339: ST_TO_ADDR
// if x = - 1 then
29340: LD_VAR 0 13
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: EQUAL
29349: IFFALSE 29558
// begin for j in f do
29351: LD_ADDR_VAR 0 9
29355: PUSH
29356: LD_VAR 0 12
29360: PUSH
29361: FOR_IN
29362: IFFALSE 29554
// repeat InitHc ;
29364: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29368: LD_VAR 0 9
29372: PPUSH
29373: CALL_OW 266
29377: PUSH
29378: LD_INT 5
29380: EQUAL
29381: IFFALSE 29451
// begin if UnitsInside ( j ) < 3 then
29383: LD_VAR 0 9
29387: PPUSH
29388: CALL_OW 313
29392: PUSH
29393: LD_INT 3
29395: LESS
29396: IFFALSE 29432
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29398: LD_INT 0
29400: PPUSH
29401: LD_INT 5
29403: PUSH
29404: LD_INT 8
29406: PUSH
29407: LD_INT 9
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: LIST
29414: PUSH
29415: LD_VAR 0 17
29419: ARRAY
29420: PPUSH
29421: LD_VAR 0 4
29425: PPUSH
29426: CALL_OW 380
29430: GO 29449
// PrepareHuman ( false , i , skill ) ;
29432: LD_INT 0
29434: PPUSH
29435: LD_VAR 0 8
29439: PPUSH
29440: LD_VAR 0 4
29444: PPUSH
29445: CALL_OW 380
// end else
29449: GO 29468
// PrepareHuman ( false , i , skill ) ;
29451: LD_INT 0
29453: PPUSH
29454: LD_VAR 0 8
29458: PPUSH
29459: LD_VAR 0 4
29463: PPUSH
29464: CALL_OW 380
// un := CreateHuman ;
29468: LD_ADDR_VAR 0 14
29472: PUSH
29473: CALL_OW 44
29477: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29478: LD_ADDR_VAR 0 7
29482: PUSH
29483: LD_VAR 0 7
29487: PPUSH
29488: LD_INT 1
29490: PPUSH
29491: LD_VAR 0 14
29495: PPUSH
29496: CALL_OW 2
29500: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29501: LD_VAR 0 14
29505: PPUSH
29506: LD_VAR 0 9
29510: PPUSH
29511: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29515: LD_VAR 0 9
29519: PPUSH
29520: CALL_OW 313
29524: PUSH
29525: LD_INT 6
29527: EQUAL
29528: PUSH
29529: LD_VAR 0 9
29533: PPUSH
29534: CALL_OW 266
29538: PUSH
29539: LD_INT 32
29541: PUSH
29542: LD_INT 31
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: IN
29549: OR
29550: IFFALSE 29364
29552: GO 29361
29554: POP
29555: POP
// end else
29556: GO 29938
// for j = 1 to x do
29558: LD_ADDR_VAR 0 9
29562: PUSH
29563: DOUBLE
29564: LD_INT 1
29566: DEC
29567: ST_TO_ADDR
29568: LD_VAR 0 13
29572: PUSH
29573: FOR_TO
29574: IFFALSE 29936
// begin InitHc ;
29576: CALL_OW 19
// if not f then
29580: LD_VAR 0 12
29584: NOT
29585: IFFALSE 29674
// begin PrepareHuman ( false , i , skill ) ;
29587: LD_INT 0
29589: PPUSH
29590: LD_VAR 0 8
29594: PPUSH
29595: LD_VAR 0 4
29599: PPUSH
29600: CALL_OW 380
// un := CreateHuman ;
29604: LD_ADDR_VAR 0 14
29608: PUSH
29609: CALL_OW 44
29613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29614: LD_ADDR_VAR 0 7
29618: PUSH
29619: LD_VAR 0 7
29623: PPUSH
29624: LD_INT 1
29626: PPUSH
29627: LD_VAR 0 14
29631: PPUSH
29632: CALL_OW 2
29636: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29637: LD_VAR 0 14
29641: PPUSH
29642: LD_VAR 0 1
29646: PPUSH
29647: CALL_OW 250
29651: PPUSH
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 251
29661: PPUSH
29662: LD_INT 10
29664: PPUSH
29665: LD_INT 0
29667: PPUSH
29668: CALL_OW 50
// continue ;
29672: GO 29573
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29674: LD_VAR 0 12
29678: PUSH
29679: LD_INT 1
29681: ARRAY
29682: PPUSH
29683: CALL_OW 313
29687: PUSH
29688: LD_VAR 0 12
29692: PUSH
29693: LD_INT 1
29695: ARRAY
29696: PPUSH
29697: CALL_OW 266
29701: PUSH
29702: LD_INT 32
29704: PUSH
29705: LD_INT 31
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: IN
29712: AND
29713: PUSH
29714: LD_VAR 0 12
29718: PUSH
29719: LD_INT 1
29721: ARRAY
29722: PPUSH
29723: CALL_OW 313
29727: PUSH
29728: LD_INT 6
29730: EQUAL
29731: OR
29732: IFFALSE 29752
// f := Delete ( f , 1 ) ;
29734: LD_ADDR_VAR 0 12
29738: PUSH
29739: LD_VAR 0 12
29743: PPUSH
29744: LD_INT 1
29746: PPUSH
29747: CALL_OW 3
29751: ST_TO_ADDR
// if not f then
29752: LD_VAR 0 12
29756: NOT
29757: IFFALSE 29775
// begin x := x + 2 ;
29759: LD_ADDR_VAR 0 13
29763: PUSH
29764: LD_VAR 0 13
29768: PUSH
29769: LD_INT 2
29771: PLUS
29772: ST_TO_ADDR
// continue ;
29773: GO 29573
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29775: LD_VAR 0 12
29779: PUSH
29780: LD_INT 1
29782: ARRAY
29783: PPUSH
29784: CALL_OW 266
29788: PUSH
29789: LD_INT 5
29791: EQUAL
29792: IFFALSE 29866
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29794: LD_VAR 0 12
29798: PUSH
29799: LD_INT 1
29801: ARRAY
29802: PPUSH
29803: CALL_OW 313
29807: PUSH
29808: LD_INT 3
29810: LESS
29811: IFFALSE 29847
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29813: LD_INT 0
29815: PPUSH
29816: LD_INT 5
29818: PUSH
29819: LD_INT 8
29821: PUSH
29822: LD_INT 9
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: PUSH
29830: LD_VAR 0 17
29834: ARRAY
29835: PPUSH
29836: LD_VAR 0 4
29840: PPUSH
29841: CALL_OW 380
29845: GO 29864
// PrepareHuman ( false , i , skill ) ;
29847: LD_INT 0
29849: PPUSH
29850: LD_VAR 0 8
29854: PPUSH
29855: LD_VAR 0 4
29859: PPUSH
29860: CALL_OW 380
// end else
29864: GO 29883
// PrepareHuman ( false , i , skill ) ;
29866: LD_INT 0
29868: PPUSH
29869: LD_VAR 0 8
29873: PPUSH
29874: LD_VAR 0 4
29878: PPUSH
29879: CALL_OW 380
// un := CreateHuman ;
29883: LD_ADDR_VAR 0 14
29887: PUSH
29888: CALL_OW 44
29892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29893: LD_ADDR_VAR 0 7
29897: PUSH
29898: LD_VAR 0 7
29902: PPUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_VAR 0 14
29910: PPUSH
29911: CALL_OW 2
29915: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29916: LD_VAR 0 14
29920: PPUSH
29921: LD_VAR 0 12
29925: PUSH
29926: LD_INT 1
29928: ARRAY
29929: PPUSH
29930: CALL_OW 52
// end ;
29934: GO 29573
29936: POP
29937: POP
// end ;
29938: GO 28875
29940: POP
29941: POP
// result := result ^ buildings ;
29942: LD_ADDR_VAR 0 7
29946: PUSH
29947: LD_VAR 0 7
29951: PUSH
29952: LD_VAR 0 18
29956: ADD
29957: ST_TO_ADDR
// end else
29958: GO 30101
// begin for i = 1 to personel do
29960: LD_ADDR_VAR 0 8
29964: PUSH
29965: DOUBLE
29966: LD_INT 1
29968: DEC
29969: ST_TO_ADDR
29970: LD_VAR 0 6
29974: PUSH
29975: FOR_TO
29976: IFFALSE 30099
// begin if i > 4 then
29978: LD_VAR 0 8
29982: PUSH
29983: LD_INT 4
29985: GREATER
29986: IFFALSE 29990
// break ;
29988: GO 30099
// x := personel [ i ] ;
29990: LD_ADDR_VAR 0 13
29994: PUSH
29995: LD_VAR 0 6
29999: PUSH
30000: LD_VAR 0 8
30004: ARRAY
30005: ST_TO_ADDR
// if x = - 1 then
30006: LD_VAR 0 13
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: EQUAL
30015: IFFALSE 30019
// continue ;
30017: GO 29975
// PrepareHuman ( false , i , skill ) ;
30019: LD_INT 0
30021: PPUSH
30022: LD_VAR 0 8
30026: PPUSH
30027: LD_VAR 0 4
30031: PPUSH
30032: CALL_OW 380
// un := CreateHuman ;
30036: LD_ADDR_VAR 0 14
30040: PUSH
30041: CALL_OW 44
30045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30046: LD_VAR 0 14
30050: PPUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 250
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 251
30070: PPUSH
30071: LD_INT 10
30073: PPUSH
30074: LD_INT 0
30076: PPUSH
30077: CALL_OW 50
// result := result ^ un ;
30081: LD_ADDR_VAR 0 7
30085: PUSH
30086: LD_VAR 0 7
30090: PUSH
30091: LD_VAR 0 14
30095: ADD
30096: ST_TO_ADDR
// end ;
30097: GO 29975
30099: POP
30100: POP
// end ; end ;
30101: LD_VAR 0 7
30105: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30106: LD_INT 0
30108: PPUSH
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
30113: PPUSH
30114: PPUSH
30115: PPUSH
30116: PPUSH
30117: PPUSH
30118: PPUSH
30119: PPUSH
30120: PPUSH
30121: PPUSH
30122: PPUSH
30123: PPUSH
// result := false ;
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_INT 0
30131: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30132: LD_VAR 0 1
30136: NOT
30137: PUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: CALL_OW 266
30147: PUSH
30148: LD_INT 32
30150: PUSH
30151: LD_INT 33
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: IN
30158: NOT
30159: OR
30160: IFFALSE 30164
// exit ;
30162: GO 31300
// nat := GetNation ( tower ) ;
30164: LD_ADDR_VAR 0 12
30168: PUSH
30169: LD_VAR 0 1
30173: PPUSH
30174: CALL_OW 248
30178: ST_TO_ADDR
// side := GetSide ( tower ) ;
30179: LD_ADDR_VAR 0 16
30183: PUSH
30184: LD_VAR 0 1
30188: PPUSH
30189: CALL_OW 255
30193: ST_TO_ADDR
// x := GetX ( tower ) ;
30194: LD_ADDR_VAR 0 10
30198: PUSH
30199: LD_VAR 0 1
30203: PPUSH
30204: CALL_OW 250
30208: ST_TO_ADDR
// y := GetY ( tower ) ;
30209: LD_ADDR_VAR 0 11
30213: PUSH
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 251
30223: ST_TO_ADDR
// if not x or not y then
30224: LD_VAR 0 10
30228: NOT
30229: PUSH
30230: LD_VAR 0 11
30234: NOT
30235: OR
30236: IFFALSE 30240
// exit ;
30238: GO 31300
// weapon := 0 ;
30240: LD_ADDR_VAR 0 18
30244: PUSH
30245: LD_INT 0
30247: ST_TO_ADDR
// fac_list := [ ] ;
30248: LD_ADDR_VAR 0 17
30252: PUSH
30253: EMPTY
30254: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30255: LD_ADDR_VAR 0 6
30259: PUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 274
30269: PPUSH
30270: LD_VAR 0 2
30274: PPUSH
30275: CALL 27878 0 2
30279: PPUSH
30280: LD_INT 30
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PPUSH
30290: CALL_OW 72
30294: ST_TO_ADDR
// if not factories then
30295: LD_VAR 0 6
30299: NOT
30300: IFFALSE 30304
// exit ;
30302: GO 31300
// for i in factories do
30304: LD_ADDR_VAR 0 8
30308: PUSH
30309: LD_VAR 0 6
30313: PUSH
30314: FOR_IN
30315: IFFALSE 30340
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30317: LD_ADDR_VAR 0 17
30321: PUSH
30322: LD_VAR 0 17
30326: PUSH
30327: LD_VAR 0 8
30331: PPUSH
30332: CALL_OW 478
30336: UNION
30337: ST_TO_ADDR
30338: GO 30314
30340: POP
30341: POP
// if not fac_list then
30342: LD_VAR 0 17
30346: NOT
30347: IFFALSE 30351
// exit ;
30349: GO 31300
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_INT 4
30358: PUSH
30359: LD_INT 5
30361: PUSH
30362: LD_INT 9
30364: PUSH
30365: LD_INT 10
30367: PUSH
30368: LD_INT 6
30370: PUSH
30371: LD_INT 7
30373: PUSH
30374: LD_INT 11
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 27
30388: PUSH
30389: LD_INT 28
30391: PUSH
30392: LD_INT 26
30394: PUSH
30395: LD_INT 30
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 43
30406: PUSH
30407: LD_INT 44
30409: PUSH
30410: LD_INT 46
30412: PUSH
30413: LD_INT 45
30415: PUSH
30416: LD_INT 47
30418: PUSH
30419: LD_INT 49
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: PUSH
30435: LD_VAR 0 12
30439: ARRAY
30440: ST_TO_ADDR
// for i in list do
30441: LD_ADDR_VAR 0 8
30445: PUSH
30446: LD_VAR 0 5
30450: PUSH
30451: FOR_IN
30452: IFFALSE 30485
// if not i in fac_list then
30454: LD_VAR 0 8
30458: PUSH
30459: LD_VAR 0 17
30463: IN
30464: NOT
30465: IFFALSE 30483
// list := list diff i ;
30467: LD_ADDR_VAR 0 5
30471: PUSH
30472: LD_VAR 0 5
30476: PUSH
30477: LD_VAR 0 8
30481: DIFF
30482: ST_TO_ADDR
30483: GO 30451
30485: POP
30486: POP
// if not list then
30487: LD_VAR 0 5
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 31300
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30496: LD_VAR 0 12
30500: PUSH
30501: LD_INT 3
30503: EQUAL
30504: PUSH
30505: LD_INT 49
30507: PUSH
30508: LD_VAR 0 5
30512: IN
30513: AND
30514: PUSH
30515: LD_INT 31
30517: PPUSH
30518: LD_VAR 0 16
30522: PPUSH
30523: CALL_OW 321
30527: PUSH
30528: LD_INT 2
30530: EQUAL
30531: AND
30532: IFFALSE 30592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30534: LD_INT 22
30536: PUSH
30537: LD_VAR 0 16
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 35
30548: PUSH
30549: LD_INT 49
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 91
30558: PUSH
30559: LD_VAR 0 1
30563: PUSH
30564: LD_INT 10
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: PPUSH
30577: CALL_OW 69
30581: NOT
30582: IFFALSE 30592
// weapon := ru_time_lapser ;
30584: LD_ADDR_VAR 0 18
30588: PUSH
30589: LD_INT 49
30591: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30592: LD_VAR 0 12
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: IN
30607: PUSH
30608: LD_INT 11
30610: PUSH
30611: LD_VAR 0 5
30615: IN
30616: PUSH
30617: LD_INT 30
30619: PUSH
30620: LD_VAR 0 5
30624: IN
30625: OR
30626: AND
30627: PUSH
30628: LD_INT 6
30630: PPUSH
30631: LD_VAR 0 16
30635: PPUSH
30636: CALL_OW 321
30640: PUSH
30641: LD_INT 2
30643: EQUAL
30644: AND
30645: IFFALSE 30810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30647: LD_INT 22
30649: PUSH
30650: LD_VAR 0 16
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 35
30664: PUSH
30665: LD_INT 11
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 35
30674: PUSH
30675: LD_INT 30
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 91
30689: PUSH
30690: LD_VAR 0 1
30694: PUSH
30695: LD_INT 18
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: PPUSH
30708: CALL_OW 69
30712: NOT
30713: PUSH
30714: LD_INT 22
30716: PUSH
30717: LD_VAR 0 16
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 30
30731: PUSH
30732: LD_INT 32
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 30
30741: PUSH
30742: LD_INT 33
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 91
30756: PUSH
30757: LD_VAR 0 1
30761: PUSH
30762: LD_INT 12
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: PPUSH
30778: CALL_OW 69
30782: PUSH
30783: LD_INT 2
30785: GREATER
30786: AND
30787: IFFALSE 30810
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30789: LD_ADDR_VAR 0 18
30793: PUSH
30794: LD_INT 11
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_VAR 0 12
30808: ARRAY
30809: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30810: LD_VAR 0 18
30814: NOT
30815: PUSH
30816: LD_INT 40
30818: PPUSH
30819: LD_VAR 0 16
30823: PPUSH
30824: CALL_OW 321
30828: PUSH
30829: LD_INT 2
30831: EQUAL
30832: AND
30833: PUSH
30834: LD_INT 7
30836: PUSH
30837: LD_VAR 0 5
30841: IN
30842: PUSH
30843: LD_INT 28
30845: PUSH
30846: LD_VAR 0 5
30850: IN
30851: OR
30852: PUSH
30853: LD_INT 45
30855: PUSH
30856: LD_VAR 0 5
30860: IN
30861: OR
30862: AND
30863: IFFALSE 31117
// begin hex := GetHexInfo ( x , y ) ;
30865: LD_ADDR_VAR 0 4
30869: PUSH
30870: LD_VAR 0 10
30874: PPUSH
30875: LD_VAR 0 11
30879: PPUSH
30880: CALL_OW 546
30884: ST_TO_ADDR
// if hex [ 1 ] then
30885: LD_VAR 0 4
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: IFFALSE 30897
// exit ;
30895: GO 31300
// height := hex [ 2 ] ;
30897: LD_ADDR_VAR 0 15
30901: PUSH
30902: LD_VAR 0 4
30906: PUSH
30907: LD_INT 2
30909: ARRAY
30910: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30911: LD_ADDR_VAR 0 14
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 2
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: LD_INT 5
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// for i in tmp do
30934: LD_ADDR_VAR 0 8
30938: PUSH
30939: LD_VAR 0 14
30943: PUSH
30944: FOR_IN
30945: IFFALSE 31115
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_VAR 0 10
30956: PPUSH
30957: LD_VAR 0 8
30961: PPUSH
30962: LD_INT 5
30964: PPUSH
30965: CALL_OW 272
30969: PUSH
30970: LD_VAR 0 11
30974: PPUSH
30975: LD_VAR 0 8
30979: PPUSH
30980: LD_INT 5
30982: PPUSH
30983: CALL_OW 273
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30992: LD_VAR 0 9
30996: PUSH
30997: LD_INT 1
30999: ARRAY
31000: PPUSH
31001: LD_VAR 0 9
31005: PUSH
31006: LD_INT 2
31008: ARRAY
31009: PPUSH
31010: CALL_OW 488
31014: IFFALSE 31113
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31016: LD_ADDR_VAR 0 4
31020: PUSH
31021: LD_VAR 0 9
31025: PUSH
31026: LD_INT 1
31028: ARRAY
31029: PPUSH
31030: LD_VAR 0 9
31034: PUSH
31035: LD_INT 2
31037: ARRAY
31038: PPUSH
31039: CALL_OW 546
31043: ST_TO_ADDR
// if hex [ 1 ] then
31044: LD_VAR 0 4
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: IFFALSE 31056
// continue ;
31054: GO 30944
// h := hex [ 2 ] ;
31056: LD_ADDR_VAR 0 13
31060: PUSH
31061: LD_VAR 0 4
31065: PUSH
31066: LD_INT 2
31068: ARRAY
31069: ST_TO_ADDR
// if h + 7 < height then
31070: LD_VAR 0 13
31074: PUSH
31075: LD_INT 7
31077: PLUS
31078: PUSH
31079: LD_VAR 0 15
31083: LESS
31084: IFFALSE 31113
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31086: LD_ADDR_VAR 0 18
31090: PUSH
31091: LD_INT 7
31093: PUSH
31094: LD_INT 28
31096: PUSH
31097: LD_INT 45
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: PUSH
31105: LD_VAR 0 12
31109: ARRAY
31110: ST_TO_ADDR
// break ;
31111: GO 31115
// end ; end ; end ;
31113: GO 30944
31115: POP
31116: POP
// end ; if not weapon then
31117: LD_VAR 0 18
31121: NOT
31122: IFFALSE 31182
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31124: LD_ADDR_VAR 0 5
31128: PUSH
31129: LD_VAR 0 5
31133: PUSH
31134: LD_INT 11
31136: PUSH
31137: LD_INT 30
31139: PUSH
31140: LD_INT 49
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: DIFF
31148: ST_TO_ADDR
// if not list then
31149: LD_VAR 0 5
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31300
// weapon := list [ rand ( 1 , list ) ] ;
31158: LD_ADDR_VAR 0 18
31162: PUSH
31163: LD_VAR 0 5
31167: PUSH
31168: LD_INT 1
31170: PPUSH
31171: LD_VAR 0 5
31175: PPUSH
31176: CALL_OW 12
31180: ARRAY
31181: ST_TO_ADDR
// end ; if weapon then
31182: LD_VAR 0 18
31186: IFFALSE 31300
// begin tmp := CostOfWeapon ( weapon ) ;
31188: LD_ADDR_VAR 0 14
31192: PUSH
31193: LD_VAR 0 18
31197: PPUSH
31198: CALL_OW 451
31202: ST_TO_ADDR
// j := GetBase ( tower ) ;
31203: LD_ADDR_VAR 0 9
31207: PUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 274
31217: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31218: LD_VAR 0 9
31222: PPUSH
31223: LD_INT 1
31225: PPUSH
31226: CALL_OW 275
31230: PUSH
31231: LD_VAR 0 14
31235: PUSH
31236: LD_INT 1
31238: ARRAY
31239: GREATEREQUAL
31240: PUSH
31241: LD_VAR 0 9
31245: PPUSH
31246: LD_INT 2
31248: PPUSH
31249: CALL_OW 275
31253: PUSH
31254: LD_VAR 0 14
31258: PUSH
31259: LD_INT 2
31261: ARRAY
31262: GREATEREQUAL
31263: AND
31264: PUSH
31265: LD_VAR 0 9
31269: PPUSH
31270: LD_INT 3
31272: PPUSH
31273: CALL_OW 275
31277: PUSH
31278: LD_VAR 0 14
31282: PUSH
31283: LD_INT 3
31285: ARRAY
31286: GREATEREQUAL
31287: AND
31288: IFFALSE 31300
// result := weapon ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_VAR 0 18
31299: ST_TO_ADDR
// end ; end ;
31300: LD_VAR 0 3
31304: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31305: LD_INT 0
31307: PPUSH
31308: PPUSH
// result := true ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_INT 1
31316: ST_TO_ADDR
// if array1 = array2 then
31317: LD_VAR 0 1
31321: PUSH
31322: LD_VAR 0 2
31326: EQUAL
31327: IFFALSE 31387
// begin for i = 1 to array1 do
31329: LD_ADDR_VAR 0 4
31333: PUSH
31334: DOUBLE
31335: LD_INT 1
31337: DEC
31338: ST_TO_ADDR
31339: LD_VAR 0 1
31343: PUSH
31344: FOR_TO
31345: IFFALSE 31383
// if array1 [ i ] <> array2 [ i ] then
31347: LD_VAR 0 1
31351: PUSH
31352: LD_VAR 0 4
31356: ARRAY
31357: PUSH
31358: LD_VAR 0 2
31362: PUSH
31363: LD_VAR 0 4
31367: ARRAY
31368: NONEQUAL
31369: IFFALSE 31381
// begin result := false ;
31371: LD_ADDR_VAR 0 3
31375: PUSH
31376: LD_INT 0
31378: ST_TO_ADDR
// break ;
31379: GO 31383
// end ;
31381: GO 31344
31383: POP
31384: POP
// end else
31385: GO 31395
// result := false ;
31387: LD_ADDR_VAR 0 3
31391: PUSH
31392: LD_INT 0
31394: ST_TO_ADDR
// end ;
31395: LD_VAR 0 3
31399: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// pom := GetBase ( fac ) ;
31405: LD_ADDR_VAR 0 5
31409: PUSH
31410: LD_VAR 0 1
31414: PPUSH
31415: CALL_OW 274
31419: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31420: LD_ADDR_VAR 0 4
31424: PUSH
31425: LD_VAR 0 2
31429: PUSH
31430: LD_INT 1
31432: ARRAY
31433: PPUSH
31434: LD_VAR 0 2
31438: PUSH
31439: LD_INT 2
31441: ARRAY
31442: PPUSH
31443: LD_VAR 0 2
31447: PUSH
31448: LD_INT 3
31450: ARRAY
31451: PPUSH
31452: LD_VAR 0 2
31456: PUSH
31457: LD_INT 4
31459: ARRAY
31460: PPUSH
31461: CALL_OW 449
31465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31466: LD_ADDR_VAR 0 3
31470: PUSH
31471: LD_VAR 0 5
31475: PPUSH
31476: LD_INT 1
31478: PPUSH
31479: CALL_OW 275
31483: PUSH
31484: LD_VAR 0 4
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: GREATEREQUAL
31493: PUSH
31494: LD_VAR 0 5
31498: PPUSH
31499: LD_INT 2
31501: PPUSH
31502: CALL_OW 275
31506: PUSH
31507: LD_VAR 0 4
31511: PUSH
31512: LD_INT 2
31514: ARRAY
31515: GREATEREQUAL
31516: AND
31517: PUSH
31518: LD_VAR 0 5
31522: PPUSH
31523: LD_INT 3
31525: PPUSH
31526: CALL_OW 275
31530: PUSH
31531: LD_VAR 0 4
31535: PUSH
31536: LD_INT 3
31538: ARRAY
31539: GREATEREQUAL
31540: AND
31541: ST_TO_ADDR
// end ;
31542: LD_VAR 0 3
31546: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31547: LD_INT 0
31549: PPUSH
31550: PPUSH
31551: PPUSH
31552: PPUSH
// pom := GetBase ( building ) ;
31553: LD_ADDR_VAR 0 3
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 274
31567: ST_TO_ADDR
// if not pom then
31568: LD_VAR 0 3
31572: NOT
31573: IFFALSE 31577
// exit ;
31575: GO 31747
// btype := GetBType ( building ) ;
31577: LD_ADDR_VAR 0 5
31581: PUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: CALL_OW 266
31591: ST_TO_ADDR
// if btype = b_armoury then
31592: LD_VAR 0 5
31596: PUSH
31597: LD_INT 4
31599: EQUAL
31600: IFFALSE 31610
// btype := b_barracks ;
31602: LD_ADDR_VAR 0 5
31606: PUSH
31607: LD_INT 5
31609: ST_TO_ADDR
// if btype = b_depot then
31610: LD_VAR 0 5
31614: PUSH
31615: LD_INT 0
31617: EQUAL
31618: IFFALSE 31628
// btype := b_warehouse ;
31620: LD_ADDR_VAR 0 5
31624: PUSH
31625: LD_INT 1
31627: ST_TO_ADDR
// if btype = b_workshop then
31628: LD_VAR 0 5
31632: PUSH
31633: LD_INT 2
31635: EQUAL
31636: IFFALSE 31646
// btype := b_factory ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_INT 3
31645: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31646: LD_ADDR_VAR 0 4
31650: PUSH
31651: LD_VAR 0 5
31655: PPUSH
31656: LD_VAR 0 1
31660: PPUSH
31661: CALL_OW 248
31665: PPUSH
31666: CALL_OW 450
31670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31671: LD_ADDR_VAR 0 2
31675: PUSH
31676: LD_VAR 0 3
31680: PPUSH
31681: LD_INT 1
31683: PPUSH
31684: CALL_OW 275
31688: PUSH
31689: LD_VAR 0 4
31693: PUSH
31694: LD_INT 1
31696: ARRAY
31697: GREATEREQUAL
31698: PUSH
31699: LD_VAR 0 3
31703: PPUSH
31704: LD_INT 2
31706: PPUSH
31707: CALL_OW 275
31711: PUSH
31712: LD_VAR 0 4
31716: PUSH
31717: LD_INT 2
31719: ARRAY
31720: GREATEREQUAL
31721: AND
31722: PUSH
31723: LD_VAR 0 3
31727: PPUSH
31728: LD_INT 3
31730: PPUSH
31731: CALL_OW 275
31735: PUSH
31736: LD_VAR 0 4
31740: PUSH
31741: LD_INT 3
31743: ARRAY
31744: GREATEREQUAL
31745: AND
31746: ST_TO_ADDR
// end ;
31747: LD_VAR 0 2
31751: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31752: LD_INT 0
31754: PPUSH
31755: PPUSH
31756: PPUSH
// pom := GetBase ( building ) ;
31757: LD_ADDR_VAR 0 4
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 274
31771: ST_TO_ADDR
// if not pom then
31772: LD_VAR 0 4
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31882
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31781: LD_ADDR_VAR 0 5
31785: PUSH
31786: LD_VAR 0 2
31790: PPUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 248
31800: PPUSH
31801: CALL_OW 450
31805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31806: LD_ADDR_VAR 0 3
31810: PUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: LD_INT 1
31818: PPUSH
31819: CALL_OW 275
31823: PUSH
31824: LD_VAR 0 5
31828: PUSH
31829: LD_INT 1
31831: ARRAY
31832: GREATEREQUAL
31833: PUSH
31834: LD_VAR 0 4
31838: PPUSH
31839: LD_INT 2
31841: PPUSH
31842: CALL_OW 275
31846: PUSH
31847: LD_VAR 0 5
31851: PUSH
31852: LD_INT 2
31854: ARRAY
31855: GREATEREQUAL
31856: AND
31857: PUSH
31858: LD_VAR 0 4
31862: PPUSH
31863: LD_INT 3
31865: PPUSH
31866: CALL_OW 275
31870: PUSH
31871: LD_VAR 0 5
31875: PUSH
31876: LD_INT 3
31878: ARRAY
31879: GREATEREQUAL
31880: AND
31881: ST_TO_ADDR
// end ;
31882: LD_VAR 0 3
31886: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31887: LD_INT 0
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
31893: PPUSH
31894: PPUSH
31895: PPUSH
31896: PPUSH
31897: PPUSH
31898: PPUSH
// result := false ;
31899: LD_ADDR_VAR 0 6
31903: PUSH
31904: LD_INT 0
31906: ST_TO_ADDR
// if not base or not btype or not x or not y then
31907: LD_VAR 0 1
31911: NOT
31912: PUSH
31913: LD_VAR 0 2
31917: NOT
31918: OR
31919: PUSH
31920: LD_VAR 0 3
31924: NOT
31925: OR
31926: PUSH
31927: LD_VAR 0 4
31931: NOT
31932: OR
31933: IFFALSE 31937
// exit ;
31935: GO 32546
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31937: LD_ADDR_VAR 0 12
31941: PUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_VAR 0 3
31951: PPUSH
31952: LD_VAR 0 4
31956: PPUSH
31957: LD_VAR 0 5
31961: PPUSH
31962: LD_VAR 0 1
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: CALL_OW 248
31975: PPUSH
31976: LD_INT 0
31978: PPUSH
31979: CALL 33383 0 6
31983: ST_TO_ADDR
// if not hexes then
31984: LD_VAR 0 12
31988: NOT
31989: IFFALSE 31993
// exit ;
31991: GO 32546
// for i = 1 to hexes do
31993: LD_ADDR_VAR 0 7
31997: PUSH
31998: DOUBLE
31999: LD_INT 1
32001: DEC
32002: ST_TO_ADDR
32003: LD_VAR 0 12
32007: PUSH
32008: FOR_TO
32009: IFFALSE 32544
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32011: LD_ADDR_VAR 0 11
32015: PUSH
32016: LD_VAR 0 12
32020: PUSH
32021: LD_VAR 0 7
32025: ARRAY
32026: PUSH
32027: LD_INT 1
32029: ARRAY
32030: PPUSH
32031: LD_VAR 0 12
32035: PUSH
32036: LD_VAR 0 7
32040: ARRAY
32041: PUSH
32042: LD_INT 2
32044: ARRAY
32045: PPUSH
32046: CALL_OW 428
32050: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32051: LD_VAR 0 12
32055: PUSH
32056: LD_VAR 0 7
32060: ARRAY
32061: PUSH
32062: LD_INT 1
32064: ARRAY
32065: PPUSH
32066: LD_VAR 0 12
32070: PUSH
32071: LD_VAR 0 7
32075: ARRAY
32076: PUSH
32077: LD_INT 2
32079: ARRAY
32080: PPUSH
32081: CALL_OW 351
32085: PUSH
32086: LD_VAR 0 12
32090: PUSH
32091: LD_VAR 0 7
32095: ARRAY
32096: PUSH
32097: LD_INT 1
32099: ARRAY
32100: PPUSH
32101: LD_VAR 0 12
32105: PUSH
32106: LD_VAR 0 7
32110: ARRAY
32111: PUSH
32112: LD_INT 2
32114: ARRAY
32115: PPUSH
32116: CALL_OW 488
32120: NOT
32121: OR
32122: PUSH
32123: LD_VAR 0 11
32127: PPUSH
32128: CALL_OW 247
32132: PUSH
32133: LD_INT 3
32135: EQUAL
32136: OR
32137: IFFALSE 32143
// exit ;
32139: POP
32140: POP
32141: GO 32546
// if not tmp or not tmp in base then
32143: LD_VAR 0 11
32147: NOT
32148: PUSH
32149: LD_VAR 0 11
32153: PUSH
32154: LD_VAR 0 1
32158: IN
32159: NOT
32160: OR
32161: IFFALSE 32165
// continue ;
32163: GO 32008
// result := true ;
32165: LD_ADDR_VAR 0 6
32169: PUSH
32170: LD_INT 1
32172: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32173: LD_ADDR_VAR 0 15
32177: PUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_INT 22
32185: PUSH
32186: LD_VAR 0 11
32190: PPUSH
32191: CALL_OW 255
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 30
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 30
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PPUSH
32232: CALL_OW 72
32236: ST_TO_ADDR
// if dep then
32237: LD_VAR 0 15
32241: IFFALSE 32377
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32243: LD_ADDR_VAR 0 14
32247: PUSH
32248: LD_VAR 0 15
32252: PUSH
32253: LD_INT 1
32255: ARRAY
32256: PPUSH
32257: CALL_OW 250
32261: PPUSH
32262: LD_VAR 0 15
32266: PUSH
32267: LD_INT 1
32269: ARRAY
32270: PPUSH
32271: CALL_OW 254
32275: PPUSH
32276: LD_INT 5
32278: PPUSH
32279: CALL_OW 272
32283: PUSH
32284: LD_VAR 0 15
32288: PUSH
32289: LD_INT 1
32291: ARRAY
32292: PPUSH
32293: CALL_OW 251
32297: PPUSH
32298: LD_VAR 0 15
32302: PUSH
32303: LD_INT 1
32305: ARRAY
32306: PPUSH
32307: CALL_OW 254
32311: PPUSH
32312: LD_INT 5
32314: PPUSH
32315: CALL_OW 273
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32324: LD_VAR 0 14
32328: PUSH
32329: LD_INT 1
32331: ARRAY
32332: PPUSH
32333: LD_VAR 0 14
32337: PUSH
32338: LD_INT 2
32340: ARRAY
32341: PPUSH
32342: CALL_OW 488
32346: IFFALSE 32377
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32348: LD_VAR 0 11
32352: PPUSH
32353: LD_VAR 0 14
32357: PUSH
32358: LD_INT 1
32360: ARRAY
32361: PPUSH
32362: LD_VAR 0 14
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: PPUSH
32371: CALL_OW 111
// continue ;
32375: GO 32008
// end ; end ; r := GetDir ( tmp ) ;
32377: LD_ADDR_VAR 0 13
32381: PUSH
32382: LD_VAR 0 11
32386: PPUSH
32387: CALL_OW 254
32391: ST_TO_ADDR
// if r = 5 then
32392: LD_VAR 0 13
32396: PUSH
32397: LD_INT 5
32399: EQUAL
32400: IFFALSE 32410
// r := 0 ;
32402: LD_ADDR_VAR 0 13
32406: PUSH
32407: LD_INT 0
32409: ST_TO_ADDR
// for j = r to 5 do
32410: LD_ADDR_VAR 0 8
32414: PUSH
32415: DOUBLE
32416: LD_VAR 0 13
32420: DEC
32421: ST_TO_ADDR
32422: LD_INT 5
32424: PUSH
32425: FOR_TO
32426: IFFALSE 32540
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32428: LD_ADDR_VAR 0 9
32432: PUSH
32433: LD_VAR 0 11
32437: PPUSH
32438: CALL_OW 250
32442: PPUSH
32443: LD_VAR 0 8
32447: PPUSH
32448: LD_INT 2
32450: PPUSH
32451: CALL_OW 272
32455: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32456: LD_ADDR_VAR 0 10
32460: PUSH
32461: LD_VAR 0 11
32465: PPUSH
32466: CALL_OW 251
32470: PPUSH
32471: LD_VAR 0 8
32475: PPUSH
32476: LD_INT 2
32478: PPUSH
32479: CALL_OW 273
32483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32484: LD_VAR 0 9
32488: PPUSH
32489: LD_VAR 0 10
32493: PPUSH
32494: CALL_OW 488
32498: PUSH
32499: LD_VAR 0 9
32503: PPUSH
32504: LD_VAR 0 10
32508: PPUSH
32509: CALL_OW 428
32513: NOT
32514: AND
32515: IFFALSE 32538
// begin ComMoveXY ( tmp , _x , _y ) ;
32517: LD_VAR 0 11
32521: PPUSH
32522: LD_VAR 0 9
32526: PPUSH
32527: LD_VAR 0 10
32531: PPUSH
32532: CALL_OW 111
// break ;
32536: GO 32540
// end ; end ;
32538: GO 32425
32540: POP
32541: POP
// end ;
32542: GO 32008
32544: POP
32545: POP
// end ;
32546: LD_VAR 0 6
32550: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32551: LD_INT 0
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
// result := false ;
32563: LD_ADDR_VAR 0 6
32567: PUSH
32568: LD_INT 0
32570: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32571: LD_VAR 0 1
32575: NOT
32576: PUSH
32577: LD_VAR 0 1
32581: PPUSH
32582: CALL_OW 266
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: IN
32597: NOT
32598: OR
32599: PUSH
32600: LD_VAR 0 2
32604: NOT
32605: OR
32606: PUSH
32607: LD_VAR 0 5
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: IN
32638: NOT
32639: OR
32640: PUSH
32641: LD_VAR 0 3
32645: PPUSH
32646: LD_VAR 0 4
32650: PPUSH
32651: CALL_OW 488
32655: NOT
32656: OR
32657: IFFALSE 32661
// exit ;
32659: GO 33378
// pom := GetBase ( depot ) ;
32661: LD_ADDR_VAR 0 10
32665: PUSH
32666: LD_VAR 0 1
32670: PPUSH
32671: CALL_OW 274
32675: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32676: LD_ADDR_VAR 0 11
32680: PUSH
32681: LD_VAR 0 2
32685: PPUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 248
32695: PPUSH
32696: CALL_OW 450
32700: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32701: LD_VAR 0 10
32705: PPUSH
32706: LD_INT 1
32708: PPUSH
32709: CALL_OW 275
32713: PUSH
32714: LD_VAR 0 11
32718: PUSH
32719: LD_INT 1
32721: ARRAY
32722: GREATEREQUAL
32723: PUSH
32724: LD_VAR 0 10
32728: PPUSH
32729: LD_INT 2
32731: PPUSH
32732: CALL_OW 275
32736: PUSH
32737: LD_VAR 0 11
32741: PUSH
32742: LD_INT 2
32744: ARRAY
32745: GREATEREQUAL
32746: AND
32747: PUSH
32748: LD_VAR 0 10
32752: PPUSH
32753: LD_INT 3
32755: PPUSH
32756: CALL_OW 275
32760: PUSH
32761: LD_VAR 0 11
32765: PUSH
32766: LD_INT 3
32768: ARRAY
32769: GREATEREQUAL
32770: AND
32771: NOT
32772: IFFALSE 32776
// exit ;
32774: GO 33378
// if GetBType ( depot ) = b_depot then
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 266
32785: PUSH
32786: LD_INT 0
32788: EQUAL
32789: IFFALSE 32801
// dist := 28 else
32791: LD_ADDR_VAR 0 14
32795: PUSH
32796: LD_INT 28
32798: ST_TO_ADDR
32799: GO 32809
// dist := 36 ;
32801: LD_ADDR_VAR 0 14
32805: PUSH
32806: LD_INT 36
32808: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32809: LD_VAR 0 1
32813: PPUSH
32814: LD_VAR 0 3
32818: PPUSH
32819: LD_VAR 0 4
32823: PPUSH
32824: CALL_OW 297
32828: PUSH
32829: LD_VAR 0 14
32833: GREATER
32834: IFFALSE 32838
// exit ;
32836: GO 33378
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32838: LD_ADDR_VAR 0 12
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_VAR 0 3
32852: PPUSH
32853: LD_VAR 0 4
32857: PPUSH
32858: LD_VAR 0 5
32862: PPUSH
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 248
32872: PPUSH
32873: LD_INT 0
32875: PPUSH
32876: CALL 33383 0 6
32880: ST_TO_ADDR
// if not hexes then
32881: LD_VAR 0 12
32885: NOT
32886: IFFALSE 32890
// exit ;
32888: GO 33378
// hex := GetHexInfo ( x , y ) ;
32890: LD_ADDR_VAR 0 15
32894: PUSH
32895: LD_VAR 0 3
32899: PPUSH
32900: LD_VAR 0 4
32904: PPUSH
32905: CALL_OW 546
32909: ST_TO_ADDR
// if hex [ 1 ] then
32910: LD_VAR 0 15
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: IFFALSE 32922
// exit ;
32920: GO 33378
// height := hex [ 2 ] ;
32922: LD_ADDR_VAR 0 13
32926: PUSH
32927: LD_VAR 0 15
32931: PUSH
32932: LD_INT 2
32934: ARRAY
32935: ST_TO_ADDR
// for i = 1 to hexes do
32936: LD_ADDR_VAR 0 7
32940: PUSH
32941: DOUBLE
32942: LD_INT 1
32944: DEC
32945: ST_TO_ADDR
32946: LD_VAR 0 12
32950: PUSH
32951: FOR_TO
32952: IFFALSE 33282
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32954: LD_VAR 0 12
32958: PUSH
32959: LD_VAR 0 7
32963: ARRAY
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_VAR 0 12
32973: PUSH
32974: LD_VAR 0 7
32978: ARRAY
32979: PUSH
32980: LD_INT 2
32982: ARRAY
32983: PPUSH
32984: CALL_OW 488
32988: NOT
32989: PUSH
32990: LD_VAR 0 12
32994: PUSH
32995: LD_VAR 0 7
32999: ARRAY
33000: PUSH
33001: LD_INT 1
33003: ARRAY
33004: PPUSH
33005: LD_VAR 0 12
33009: PUSH
33010: LD_VAR 0 7
33014: ARRAY
33015: PUSH
33016: LD_INT 2
33018: ARRAY
33019: PPUSH
33020: CALL_OW 428
33024: PUSH
33025: LD_INT 0
33027: GREATER
33028: OR
33029: PUSH
33030: LD_VAR 0 12
33034: PUSH
33035: LD_VAR 0 7
33039: ARRAY
33040: PUSH
33041: LD_INT 1
33043: ARRAY
33044: PPUSH
33045: LD_VAR 0 12
33049: PUSH
33050: LD_VAR 0 7
33054: ARRAY
33055: PUSH
33056: LD_INT 2
33058: ARRAY
33059: PPUSH
33060: CALL_OW 351
33064: OR
33065: IFFALSE 33071
// exit ;
33067: POP
33068: POP
33069: GO 33378
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33071: LD_ADDR_VAR 0 8
33075: PUSH
33076: LD_VAR 0 12
33080: PUSH
33081: LD_VAR 0 7
33085: ARRAY
33086: PUSH
33087: LD_INT 1
33089: ARRAY
33090: PPUSH
33091: LD_VAR 0 12
33095: PUSH
33096: LD_VAR 0 7
33100: ARRAY
33101: PUSH
33102: LD_INT 2
33104: ARRAY
33105: PPUSH
33106: CALL_OW 546
33110: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33111: LD_VAR 0 8
33115: PUSH
33116: LD_INT 1
33118: ARRAY
33119: PUSH
33120: LD_VAR 0 8
33124: PUSH
33125: LD_INT 2
33127: ARRAY
33128: PUSH
33129: LD_VAR 0 13
33133: PUSH
33134: LD_INT 2
33136: PLUS
33137: GREATER
33138: OR
33139: PUSH
33140: LD_VAR 0 8
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PUSH
33149: LD_VAR 0 13
33153: PUSH
33154: LD_INT 2
33156: MINUS
33157: LESS
33158: OR
33159: PUSH
33160: LD_VAR 0 8
33164: PUSH
33165: LD_INT 3
33167: ARRAY
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 8
33174: PUSH
33175: LD_INT 9
33177: PUSH
33178: LD_INT 10
33180: PUSH
33181: LD_INT 11
33183: PUSH
33184: LD_INT 12
33186: PUSH
33187: LD_INT 13
33189: PUSH
33190: LD_INT 16
33192: PUSH
33193: LD_INT 17
33195: PUSH
33196: LD_INT 18
33198: PUSH
33199: LD_INT 19
33201: PUSH
33202: LD_INT 20
33204: PUSH
33205: LD_INT 21
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: IN
33223: NOT
33224: OR
33225: PUSH
33226: LD_VAR 0 8
33230: PUSH
33231: LD_INT 5
33233: ARRAY
33234: NOT
33235: OR
33236: PUSH
33237: LD_VAR 0 8
33241: PUSH
33242: LD_INT 6
33244: ARRAY
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 7
33254: PUSH
33255: LD_INT 9
33257: PUSH
33258: LD_INT 10
33260: PUSH
33261: LD_INT 11
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: IN
33272: NOT
33273: OR
33274: IFFALSE 33280
// exit ;
33276: POP
33277: POP
33278: GO 33378
// end ;
33280: GO 32951
33282: POP
33283: POP
// side := GetSide ( depot ) ;
33284: LD_ADDR_VAR 0 9
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 255
33298: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33299: LD_VAR 0 9
33303: PPUSH
33304: LD_VAR 0 3
33308: PPUSH
33309: LD_VAR 0 4
33313: PPUSH
33314: LD_INT 20
33316: PPUSH
33317: CALL 26032 0 4
33321: PUSH
33322: LD_INT 4
33324: ARRAY
33325: IFFALSE 33329
// exit ;
33327: GO 33378
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33329: LD_VAR 0 2
33333: PUSH
33334: LD_INT 29
33336: PUSH
33337: LD_INT 30
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: IN
33344: PUSH
33345: LD_VAR 0 3
33349: PPUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: LD_VAR 0 9
33359: PPUSH
33360: CALL_OW 440
33364: NOT
33365: AND
33366: IFFALSE 33370
// exit ;
33368: GO 33378
// result := true ;
33370: LD_ADDR_VAR 0 6
33374: PUSH
33375: LD_INT 1
33377: ST_TO_ADDR
// end ;
33378: LD_VAR 0 6
33382: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
33404: PPUSH
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
33413: PPUSH
33414: PPUSH
33415: PPUSH
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
33427: PPUSH
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
33432: PPUSH
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
// result = [ ] ;
33443: LD_ADDR_VAR 0 7
33447: PUSH
33448: EMPTY
33449: ST_TO_ADDR
// temp_list = [ ] ;
33450: LD_ADDR_VAR 0 9
33454: PUSH
33455: EMPTY
33456: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33457: LD_VAR 0 4
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: LD_INT 5
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: IN
33488: NOT
33489: PUSH
33490: LD_VAR 0 1
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: IN
33505: PUSH
33506: LD_VAR 0 5
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: IN
33525: NOT
33526: AND
33527: OR
33528: IFFALSE 33532
// exit ;
33530: GO 51923
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33532: LD_VAR 0 1
33536: PUSH
33537: LD_INT 6
33539: PUSH
33540: LD_INT 7
33542: PUSH
33543: LD_INT 8
33545: PUSH
33546: LD_INT 13
33548: PUSH
33549: LD_INT 12
33551: PUSH
33552: LD_INT 15
33554: PUSH
33555: LD_INT 11
33557: PUSH
33558: LD_INT 14
33560: PUSH
33561: LD_INT 10
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: IN
33575: IFFALSE 33585
// btype = b_lab ;
33577: LD_ADDR_VAR 0 1
33581: PUSH
33582: LD_INT 6
33584: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33585: LD_VAR 0 6
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: IN
33604: NOT
33605: PUSH
33606: LD_VAR 0 1
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 3
33622: PUSH
33623: LD_INT 6
33625: PUSH
33626: LD_INT 36
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 31
33637: PUSH
33638: LD_INT 32
33640: PUSH
33641: LD_INT 33
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: IN
33657: NOT
33658: PUSH
33659: LD_VAR 0 6
33663: PUSH
33664: LD_INT 1
33666: EQUAL
33667: AND
33668: OR
33669: PUSH
33670: LD_VAR 0 1
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: IN
33685: NOT
33686: PUSH
33687: LD_VAR 0 6
33691: PUSH
33692: LD_INT 2
33694: EQUAL
33695: AND
33696: OR
33697: IFFALSE 33707
// mode = 0 ;
33699: LD_ADDR_VAR 0 6
33703: PUSH
33704: LD_INT 0
33706: ST_TO_ADDR
// case mode of 0 :
33707: LD_VAR 0 6
33711: PUSH
33712: LD_INT 0
33714: DOUBLE
33715: EQUAL
33716: IFTRUE 33720
33718: GO 45173
33720: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33721: LD_ADDR_VAR 0 11
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 3
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 3
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33914: LD_ADDR_VAR 0 12
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 3
34071: NEG
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 3
34082: NEG
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34110: LD_ADDR_VAR 0 13
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 3
34269: NEG
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: LD_INT 3
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34309: LD_ADDR_VAR 0 14
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34505: LD_ADDR_VAR 0 15
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34698: LD_ADDR_VAR 0 16
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 3
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 3
34855: PUSH
34856: LD_INT 3
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34891: LD_ADDR_VAR 0 17
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35121: LD_ADDR_VAR 0 18
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35351: LD_ADDR_VAR 0 19
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35581: LD_ADDR_VAR 0 20
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35811: LD_ADDR_VAR 0 21
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 2
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 2
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: LD_INT 2
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36041: LD_ADDR_VAR 0 22
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: NEG
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36271: LD_ADDR_VAR 0 23
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 2
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 3
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 3
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36551: LD_ADDR_VAR 0 24
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36827: LD_ADDR_VAR 0 25
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37101: LD_ADDR_VAR 0 26
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37377: LD_ADDR_VAR 0 27
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 2
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 3
37622: NEG
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37657: LD_ADDR_VAR 0 28
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 3
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 3
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37939: LD_ADDR_VAR 0 29
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 3
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 3
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: NEG
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38218: LD_ADDR_VAR 0 30
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38496: LD_ADDR_VAR 0 31
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: LD_INT 3
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 3
38739: NEG
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38774: LD_ADDR_VAR 0 32
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: NEG
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 3
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: NEG
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39052: LD_ADDR_VAR 0 33
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 3
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39331: LD_ADDR_VAR 0 34
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 3
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 3
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39611: LD_ADDR_VAR 0 35
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39723: LD_ADDR_VAR 0 36
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39835: LD_ADDR_VAR 0 37
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39947: LD_ADDR_VAR 0 38
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40059: LD_ADDR_VAR 0 39
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40171: LD_ADDR_VAR 0 40
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40283: LD_ADDR_VAR 0 41
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 3
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 3
40592: NEG
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40633: LD_ADDR_VAR 0 42
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 3
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 3
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: LD_INT 3
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: LD_INT 3
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: LD_INT 3
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40983: LD_ADDR_VAR 0 43
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41331: LD_ADDR_VAR 0 44
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: LD_INT 3
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 3
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 3
41574: PUSH
41575: LD_INT 3
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 3
41640: NEG
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41681: LD_ADDR_VAR 0 45
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 3
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: LD_INT 3
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42031: LD_ADDR_VAR 0 46
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 3
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 3
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 3
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42379: LD_ADDR_VAR 0 47
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42530: LD_ADDR_VAR 0 48
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42677: LD_ADDR_VAR 0 49
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42821: LD_ADDR_VAR 0 50
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42965: LD_ADDR_VAR 0 51
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43112: LD_ADDR_VAR 0 52
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43263: LD_ADDR_VAR 0 53
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43493: LD_ADDR_VAR 0 54
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43723: LD_ADDR_VAR 0 55
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43953: LD_ADDR_VAR 0 56
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44183: LD_ADDR_VAR 0 57
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44413: LD_ADDR_VAR 0 58
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44643: LD_ADDR_VAR 0 59
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44731: LD_ADDR_VAR 0 60
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44819: LD_ADDR_VAR 0 61
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44907: LD_ADDR_VAR 0 62
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44995: LD_ADDR_VAR 0 63
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45083: LD_ADDR_VAR 0 64
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// end ; 1 :
45171: GO 51068
45173: LD_INT 1
45175: DOUBLE
45176: EQUAL
45177: IFTRUE 45181
45179: GO 47804
45181: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45182: LD_ADDR_VAR 0 11
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45226: LD_ADDR_VAR 0 12
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45267: LD_ADDR_VAR 0 13
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: LD_INT 3
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45307: LD_ADDR_VAR 0 14
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 3
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45348: LD_ADDR_VAR 0 15
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45392: LD_ADDR_VAR 0 16
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 3
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: NEG
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45438: LD_ADDR_VAR 0 17
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 3
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45482: LD_ADDR_VAR 0 18
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45523: LD_ADDR_VAR 0 19
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45563: LD_ADDR_VAR 0 20
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 3
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45604: LD_ADDR_VAR 0 21
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45648: LD_ADDR_VAR 0 22
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: LD_INT 3
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45694: LD_ADDR_VAR 0 23
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 3
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 4
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45738: LD_ADDR_VAR 0 24
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 4
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45779: LD_ADDR_VAR 0 25
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 4
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: LD_INT 4
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45819: LD_ADDR_VAR 0 26
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 4
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45860: LD_ADDR_VAR 0 27
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 4
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45904: LD_ADDR_VAR 0 28
45908: PUSH
45909: LD_INT 3
45911: NEG
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 4
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 4
45935: NEG
45936: PUSH
45937: LD_INT 3
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45950: LD_ADDR_VAR 0 29
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 3
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 4
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 4
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 5
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 5
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 4
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 6
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 6
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 5
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46105: LD_ADDR_VAR 0 30
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 4
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 4
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 5
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 5
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 5
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 6
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 6
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46248: LD_ADDR_VAR 0 31
46252: PUSH
46253: LD_INT 3
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 4
46295: PUSH
46296: LD_INT 4
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 4
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: LD_INT 4
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 5
46325: PUSH
46326: LD_INT 5
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: LD_INT 5
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 6
46345: PUSH
46346: LD_INT 5
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 6
46355: PUSH
46356: LD_INT 6
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: LD_INT 6
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46387: LD_ADDR_VAR 0 32
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 4
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 5
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 5
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 4
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 6
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 6
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 5
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46530: LD_ADDR_VAR 0 33
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 4
46582: NEG
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 4
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 5
46616: NEG
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 5
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 6
46650: NEG
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 6
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46685: LD_ADDR_VAR 0 34
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: LD_INT 4
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 4
46740: NEG
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 4
46752: NEG
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 4
46764: NEG
46765: PUSH
46766: LD_INT 5
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 5
46776: NEG
46777: PUSH
46778: LD_INT 4
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 5
46788: NEG
46789: PUSH
46790: LD_INT 5
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 5
46800: NEG
46801: PUSH
46802: LD_INT 6
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 6
46812: NEG
46813: PUSH
46814: LD_INT 5
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 6
46824: NEG
46825: PUSH
46826: LD_INT 6
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46848: LD_ADDR_VAR 0 41
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46892: LD_ADDR_VAR 0 42
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46933: LD_ADDR_VAR 0 43
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46973: LD_ADDR_VAR 0 44
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47014: LD_ADDR_VAR 0 45
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47058: LD_ADDR_VAR 0 46
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 3
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 3
47089: NEG
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47104: LD_ADDR_VAR 0 47
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47137: LD_ADDR_VAR 0 48
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47168: LD_ADDR_VAR 0 49
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47197: LD_ADDR_VAR 0 50
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47226: LD_ADDR_VAR 0 51
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47257: LD_ADDR_VAR 0 52
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47290: LD_ADDR_VAR 0 53
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 3
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 3
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47334: LD_ADDR_VAR 0 54
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47375: LD_ADDR_VAR 0 55
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: LD_INT 3
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47415: LD_ADDR_VAR 0 56
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47456: LD_ADDR_VAR 0 57
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47500: LD_ADDR_VAR 0 58
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: NEG
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47546: LD_ADDR_VAR 0 59
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47590: LD_ADDR_VAR 0 60
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47631: LD_ADDR_VAR 0 61
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47671: LD_ADDR_VAR 0 62
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47712: LD_ADDR_VAR 0 63
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 64
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// end ; 2 :
47802: GO 51068
47804: LD_INT 2
47806: DOUBLE
47807: EQUAL
47808: IFTRUE 47812
47810: GO 51067
47812: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47813: LD_ADDR_VAR 0 29
47817: PUSH
47818: LD_INT 4
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 4
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 5
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 5
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 4
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 4
47943: PUSH
47944: LD_INT 4
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: LD_INT 4
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 4
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 5
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 5
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 4
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 5
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: NEG
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 4
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 4
48198: NEG
48199: PUSH
48200: LD_INT 4
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: LD_INT 5
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 4
48246: NEG
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 5
48258: NEG
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 5
48270: NEG
48271: PUSH
48272: LD_INT 5
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: LD_INT 5
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 5
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48351: LD_ADDR_VAR 0 30
48355: PUSH
48356: LD_INT 4
48358: PUSH
48359: LD_INT 4
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 5
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 5
48388: PUSH
48389: LD_INT 5
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 4
48398: PUSH
48399: LD_INT 5
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 4
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 5
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 5
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 4
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 4
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 4
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 4
48541: NEG
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 4
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 4
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 5
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 5
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 5
48620: NEG
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: LD_INT 4
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 4
48715: NEG
48716: PUSH
48717: LD_INT 4
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 5
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 4
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 5
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 5
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48898: LD_ADDR_VAR 0 31
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 4
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 5
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 4
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 3
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 5
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 3
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 4
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 4
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 4
49100: NEG
49101: PUSH
49102: LD_INT 4
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 4
49112: NEG
49113: PUSH
49114: LD_INT 5
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: LD_INT 4
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 4
49148: NEG
49149: PUSH
49150: LD_INT 3
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 5
49160: NEG
49161: PUSH
49162: LD_INT 4
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 5
49172: NEG
49173: PUSH
49174: LD_INT 5
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 5
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 5
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 4
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 4
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 4
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 4
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 5
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 5
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 5
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49448: LD_ADDR_VAR 0 32
49452: PUSH
49453: LD_INT 4
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 4
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 4
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 5
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 5
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 5
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 4
49617: NEG
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 4
49629: NEG
49630: PUSH
49631: LD_INT 4
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 4
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 5
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 4
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 4
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 5
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 5
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 4
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 4
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 4
49860: PUSH
49861: LD_INT 4
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 4
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 5
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 5
49890: PUSH
49891: LD_INT 5
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 5
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 4
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49995: LD_ADDR_VAR 0 33
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: LD_INT 4
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 4
50014: NEG
50015: PUSH
50016: LD_INT 5
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 4
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 4
50050: NEG
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: NEG
50063: PUSH
50064: LD_INT 4
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 5
50074: NEG
50075: PUSH
50076: LD_INT 5
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 5
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 5
50098: NEG
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 4
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 4
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 4
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 4
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 5
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 5
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 4
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 5
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 4
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 4
50335: PUSH
50336: LD_INT 4
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 4
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 4
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 4
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 4
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 5
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 5
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 5
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50533: LD_ADDR_VAR 0 34
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 4
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 4
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 4
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 5
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 5
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 4
50735: PUSH
50736: LD_INT 4
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 5
50755: PUSH
50756: LD_INT 4
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 5
50765: PUSH
50766: LD_INT 5
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: LD_INT 4
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 5
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 4
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 5
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 5
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 5
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: ST_TO_ADDR
// end ; end ;
51065: GO 51068
51067: POP
// case btype of b_depot , b_warehouse :
51068: LD_VAR 0 1
51072: PUSH
51073: LD_INT 0
51075: DOUBLE
51076: EQUAL
51077: IFTRUE 51087
51079: LD_INT 1
51081: DOUBLE
51082: EQUAL
51083: IFTRUE 51087
51085: GO 51288
51087: POP
// case nation of nation_american :
51088: LD_VAR 0 5
51092: PUSH
51093: LD_INT 1
51095: DOUBLE
51096: EQUAL
51097: IFTRUE 51101
51099: GO 51157
51101: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51102: LD_ADDR_VAR 0 9
51106: PUSH
51107: LD_VAR 0 11
51111: PUSH
51112: LD_VAR 0 12
51116: PUSH
51117: LD_VAR 0 13
51121: PUSH
51122: LD_VAR 0 14
51126: PUSH
51127: LD_VAR 0 15
51131: PUSH
51132: LD_VAR 0 16
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: PUSH
51145: LD_VAR 0 4
51149: PUSH
51150: LD_INT 1
51152: PLUS
51153: ARRAY
51154: ST_TO_ADDR
51155: GO 51286
51157: LD_INT 2
51159: DOUBLE
51160: EQUAL
51161: IFTRUE 51165
51163: GO 51221
51165: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51166: LD_ADDR_VAR 0 9
51170: PUSH
51171: LD_VAR 0 17
51175: PUSH
51176: LD_VAR 0 18
51180: PUSH
51181: LD_VAR 0 19
51185: PUSH
51186: LD_VAR 0 20
51190: PUSH
51191: LD_VAR 0 21
51195: PUSH
51196: LD_VAR 0 22
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: PUSH
51209: LD_VAR 0 4
51213: PUSH
51214: LD_INT 1
51216: PLUS
51217: ARRAY
51218: ST_TO_ADDR
51219: GO 51286
51221: LD_INT 3
51223: DOUBLE
51224: EQUAL
51225: IFTRUE 51229
51227: GO 51285
51229: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51230: LD_ADDR_VAR 0 9
51234: PUSH
51235: LD_VAR 0 23
51239: PUSH
51240: LD_VAR 0 24
51244: PUSH
51245: LD_VAR 0 25
51249: PUSH
51250: LD_VAR 0 26
51254: PUSH
51255: LD_VAR 0 27
51259: PUSH
51260: LD_VAR 0 28
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: PUSH
51273: LD_VAR 0 4
51277: PUSH
51278: LD_INT 1
51280: PLUS
51281: ARRAY
51282: ST_TO_ADDR
51283: GO 51286
51285: POP
51286: GO 51841
51288: LD_INT 2
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51302
51294: LD_INT 3
51296: DOUBLE
51297: EQUAL
51298: IFTRUE 51302
51300: GO 51358
51302: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51303: LD_ADDR_VAR 0 9
51307: PUSH
51308: LD_VAR 0 29
51312: PUSH
51313: LD_VAR 0 30
51317: PUSH
51318: LD_VAR 0 31
51322: PUSH
51323: LD_VAR 0 32
51327: PUSH
51328: LD_VAR 0 33
51332: PUSH
51333: LD_VAR 0 34
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: LD_VAR 0 4
51350: PUSH
51351: LD_INT 1
51353: PLUS
51354: ARRAY
51355: ST_TO_ADDR
51356: GO 51841
51358: LD_INT 16
51360: DOUBLE
51361: EQUAL
51362: IFTRUE 51420
51364: LD_INT 17
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51420
51370: LD_INT 18
51372: DOUBLE
51373: EQUAL
51374: IFTRUE 51420
51376: LD_INT 19
51378: DOUBLE
51379: EQUAL
51380: IFTRUE 51420
51382: LD_INT 22
51384: DOUBLE
51385: EQUAL
51386: IFTRUE 51420
51388: LD_INT 20
51390: DOUBLE
51391: EQUAL
51392: IFTRUE 51420
51394: LD_INT 21
51396: DOUBLE
51397: EQUAL
51398: IFTRUE 51420
51400: LD_INT 23
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51420
51406: LD_INT 24
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51420
51412: LD_INT 25
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51420
51418: GO 51476
51420: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51421: LD_ADDR_VAR 0 9
51425: PUSH
51426: LD_VAR 0 35
51430: PUSH
51431: LD_VAR 0 36
51435: PUSH
51436: LD_VAR 0 37
51440: PUSH
51441: LD_VAR 0 38
51445: PUSH
51446: LD_VAR 0 39
51450: PUSH
51451: LD_VAR 0 40
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: PUSH
51464: LD_VAR 0 4
51468: PUSH
51469: LD_INT 1
51471: PLUS
51472: ARRAY
51473: ST_TO_ADDR
51474: GO 51841
51476: LD_INT 6
51478: DOUBLE
51479: EQUAL
51480: IFTRUE 51532
51482: LD_INT 7
51484: DOUBLE
51485: EQUAL
51486: IFTRUE 51532
51488: LD_INT 8
51490: DOUBLE
51491: EQUAL
51492: IFTRUE 51532
51494: LD_INT 13
51496: DOUBLE
51497: EQUAL
51498: IFTRUE 51532
51500: LD_INT 12
51502: DOUBLE
51503: EQUAL
51504: IFTRUE 51532
51506: LD_INT 15
51508: DOUBLE
51509: EQUAL
51510: IFTRUE 51532
51512: LD_INT 11
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51532
51518: LD_INT 14
51520: DOUBLE
51521: EQUAL
51522: IFTRUE 51532
51524: LD_INT 10
51526: DOUBLE
51527: EQUAL
51528: IFTRUE 51532
51530: GO 51588
51532: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51533: LD_ADDR_VAR 0 9
51537: PUSH
51538: LD_VAR 0 41
51542: PUSH
51543: LD_VAR 0 42
51547: PUSH
51548: LD_VAR 0 43
51552: PUSH
51553: LD_VAR 0 44
51557: PUSH
51558: LD_VAR 0 45
51562: PUSH
51563: LD_VAR 0 46
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: PUSH
51576: LD_VAR 0 4
51580: PUSH
51581: LD_INT 1
51583: PLUS
51584: ARRAY
51585: ST_TO_ADDR
51586: GO 51841
51588: LD_INT 36
51590: DOUBLE
51591: EQUAL
51592: IFTRUE 51596
51594: GO 51652
51596: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51597: LD_ADDR_VAR 0 9
51601: PUSH
51602: LD_VAR 0 47
51606: PUSH
51607: LD_VAR 0 48
51611: PUSH
51612: LD_VAR 0 49
51616: PUSH
51617: LD_VAR 0 50
51621: PUSH
51622: LD_VAR 0 51
51626: PUSH
51627: LD_VAR 0 52
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: PUSH
51640: LD_VAR 0 4
51644: PUSH
51645: LD_INT 1
51647: PLUS
51648: ARRAY
51649: ST_TO_ADDR
51650: GO 51841
51652: LD_INT 4
51654: DOUBLE
51655: EQUAL
51656: IFTRUE 51678
51658: LD_INT 5
51660: DOUBLE
51661: EQUAL
51662: IFTRUE 51678
51664: LD_INT 34
51666: DOUBLE
51667: EQUAL
51668: IFTRUE 51678
51670: LD_INT 37
51672: DOUBLE
51673: EQUAL
51674: IFTRUE 51678
51676: GO 51734
51678: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51679: LD_ADDR_VAR 0 9
51683: PUSH
51684: LD_VAR 0 53
51688: PUSH
51689: LD_VAR 0 54
51693: PUSH
51694: LD_VAR 0 55
51698: PUSH
51699: LD_VAR 0 56
51703: PUSH
51704: LD_VAR 0 57
51708: PUSH
51709: LD_VAR 0 58
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: PUSH
51722: LD_VAR 0 4
51726: PUSH
51727: LD_INT 1
51729: PLUS
51730: ARRAY
51731: ST_TO_ADDR
51732: GO 51841
51734: LD_INT 31
51736: DOUBLE
51737: EQUAL
51738: IFTRUE 51784
51740: LD_INT 32
51742: DOUBLE
51743: EQUAL
51744: IFTRUE 51784
51746: LD_INT 33
51748: DOUBLE
51749: EQUAL
51750: IFTRUE 51784
51752: LD_INT 27
51754: DOUBLE
51755: EQUAL
51756: IFTRUE 51784
51758: LD_INT 26
51760: DOUBLE
51761: EQUAL
51762: IFTRUE 51784
51764: LD_INT 28
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51784
51770: LD_INT 29
51772: DOUBLE
51773: EQUAL
51774: IFTRUE 51784
51776: LD_INT 30
51778: DOUBLE
51779: EQUAL
51780: IFTRUE 51784
51782: GO 51840
51784: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51785: LD_ADDR_VAR 0 9
51789: PUSH
51790: LD_VAR 0 59
51794: PUSH
51795: LD_VAR 0 60
51799: PUSH
51800: LD_VAR 0 61
51804: PUSH
51805: LD_VAR 0 62
51809: PUSH
51810: LD_VAR 0 63
51814: PUSH
51815: LD_VAR 0 64
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: PUSH
51828: LD_VAR 0 4
51832: PUSH
51833: LD_INT 1
51835: PLUS
51836: ARRAY
51837: ST_TO_ADDR
51838: GO 51841
51840: POP
// temp_list2 = [ ] ;
51841: LD_ADDR_VAR 0 10
51845: PUSH
51846: EMPTY
51847: ST_TO_ADDR
// for i in temp_list do
51848: LD_ADDR_VAR 0 8
51852: PUSH
51853: LD_VAR 0 9
51857: PUSH
51858: FOR_IN
51859: IFFALSE 51911
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51861: LD_ADDR_VAR 0 10
51865: PUSH
51866: LD_VAR 0 10
51870: PUSH
51871: LD_VAR 0 8
51875: PUSH
51876: LD_INT 1
51878: ARRAY
51879: PUSH
51880: LD_VAR 0 2
51884: PLUS
51885: PUSH
51886: LD_VAR 0 8
51890: PUSH
51891: LD_INT 2
51893: ARRAY
51894: PUSH
51895: LD_VAR 0 3
51899: PLUS
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: ADD
51908: ST_TO_ADDR
51909: GO 51858
51911: POP
51912: POP
// result = temp_list2 ;
51913: LD_ADDR_VAR 0 7
51917: PUSH
51918: LD_VAR 0 10
51922: ST_TO_ADDR
// end ;
51923: LD_VAR 0 7
51927: RET
// export function EnemyInRange ( unit , dist ) ; begin
51928: LD_INT 0
51930: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51931: LD_ADDR_VAR 0 3
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 255
51945: PPUSH
51946: LD_VAR 0 1
51950: PPUSH
51951: CALL_OW 250
51955: PPUSH
51956: LD_VAR 0 1
51960: PPUSH
51961: CALL_OW 251
51965: PPUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: CALL 26032 0 4
51975: PUSH
51976: LD_INT 4
51978: ARRAY
51979: ST_TO_ADDR
// end ;
51980: LD_VAR 0 3
51984: RET
// export function PlayerSeeMe ( unit ) ; begin
51985: LD_INT 0
51987: PPUSH
// result := See ( your_side , unit ) ;
51988: LD_ADDR_VAR 0 2
51992: PUSH
51993: LD_OWVAR 2
51997: PPUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 292
52007: ST_TO_ADDR
// end ;
52008: LD_VAR 0 2
52012: RET
// export function ReverseDir ( unit ) ; begin
52013: LD_INT 0
52015: PPUSH
// if not unit then
52016: LD_VAR 0 1
52020: NOT
52021: IFFALSE 52025
// exit ;
52023: GO 52048
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52025: LD_ADDR_VAR 0 2
52029: PUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 254
52039: PUSH
52040: LD_INT 3
52042: PLUS
52043: PUSH
52044: LD_INT 6
52046: MOD
52047: ST_TO_ADDR
// end ;
52048: LD_VAR 0 2
52052: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52053: LD_INT 0
52055: PPUSH
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
// if not hexes then
52060: LD_VAR 0 2
52064: NOT
52065: IFFALSE 52069
// exit ;
52067: GO 52217
// dist := 9999 ;
52069: LD_ADDR_VAR 0 5
52073: PUSH
52074: LD_INT 9999
52076: ST_TO_ADDR
// for i = 1 to hexes do
52077: LD_ADDR_VAR 0 4
52081: PUSH
52082: DOUBLE
52083: LD_INT 1
52085: DEC
52086: ST_TO_ADDR
52087: LD_VAR 0 2
52091: PUSH
52092: FOR_TO
52093: IFFALSE 52205
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52095: LD_VAR 0 1
52099: PPUSH
52100: LD_VAR 0 2
52104: PUSH
52105: LD_VAR 0 4
52109: ARRAY
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PPUSH
52115: LD_VAR 0 2
52119: PUSH
52120: LD_VAR 0 4
52124: ARRAY
52125: PUSH
52126: LD_INT 2
52128: ARRAY
52129: PPUSH
52130: CALL_OW 297
52134: PUSH
52135: LD_VAR 0 5
52139: LESS
52140: IFFALSE 52203
// begin hex := hexes [ i ] ;
52142: LD_ADDR_VAR 0 7
52146: PUSH
52147: LD_VAR 0 2
52151: PUSH
52152: LD_VAR 0 4
52156: ARRAY
52157: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52158: LD_ADDR_VAR 0 5
52162: PUSH
52163: LD_VAR 0 1
52167: PPUSH
52168: LD_VAR 0 2
52172: PUSH
52173: LD_VAR 0 4
52177: ARRAY
52178: PUSH
52179: LD_INT 1
52181: ARRAY
52182: PPUSH
52183: LD_VAR 0 2
52187: PUSH
52188: LD_VAR 0 4
52192: ARRAY
52193: PUSH
52194: LD_INT 2
52196: ARRAY
52197: PPUSH
52198: CALL_OW 297
52202: ST_TO_ADDR
// end ; end ;
52203: GO 52092
52205: POP
52206: POP
// result := hex ;
52207: LD_ADDR_VAR 0 3
52211: PUSH
52212: LD_VAR 0 7
52216: ST_TO_ADDR
// end ;
52217: LD_VAR 0 3
52221: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52222: LD_INT 0
52224: PPUSH
52225: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52226: LD_VAR 0 1
52230: NOT
52231: PUSH
52232: LD_VAR 0 1
52236: PUSH
52237: LD_INT 21
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 23
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PPUSH
52261: CALL_OW 69
52265: IN
52266: NOT
52267: OR
52268: IFFALSE 52272
// exit ;
52270: GO 52319
// for i = 1 to 3 do
52272: LD_ADDR_VAR 0 3
52276: PUSH
52277: DOUBLE
52278: LD_INT 1
52280: DEC
52281: ST_TO_ADDR
52282: LD_INT 3
52284: PUSH
52285: FOR_TO
52286: IFFALSE 52317
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52288: LD_VAR 0 1
52292: PPUSH
52293: CALL_OW 250
52297: PPUSH
52298: LD_VAR 0 1
52302: PPUSH
52303: CALL_OW 251
52307: PPUSH
52308: LD_INT 1
52310: PPUSH
52311: CALL_OW 453
52315: GO 52285
52317: POP
52318: POP
// end ;
52319: LD_VAR 0 2
52323: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52324: LD_INT 0
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52332: LD_VAR 0 1
52336: NOT
52337: PUSH
52338: LD_VAR 0 2
52342: NOT
52343: OR
52344: PUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL_OW 314
52354: OR
52355: IFFALSE 52359
// exit ;
52357: GO 52800
// x := GetX ( enemy_unit ) ;
52359: LD_ADDR_VAR 0 7
52363: PUSH
52364: LD_VAR 0 2
52368: PPUSH
52369: CALL_OW 250
52373: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52374: LD_ADDR_VAR 0 8
52378: PUSH
52379: LD_VAR 0 2
52383: PPUSH
52384: CALL_OW 251
52388: ST_TO_ADDR
// if not x or not y then
52389: LD_VAR 0 7
52393: NOT
52394: PUSH
52395: LD_VAR 0 8
52399: NOT
52400: OR
52401: IFFALSE 52405
// exit ;
52403: GO 52800
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52405: LD_ADDR_VAR 0 6
52409: PUSH
52410: LD_VAR 0 7
52414: PPUSH
52415: LD_INT 0
52417: PPUSH
52418: LD_INT 4
52420: PPUSH
52421: CALL_OW 272
52425: PUSH
52426: LD_VAR 0 8
52430: PPUSH
52431: LD_INT 0
52433: PPUSH
52434: LD_INT 4
52436: PPUSH
52437: CALL_OW 273
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_VAR 0 7
52450: PPUSH
52451: LD_INT 1
52453: PPUSH
52454: LD_INT 4
52456: PPUSH
52457: CALL_OW 272
52461: PUSH
52462: LD_VAR 0 8
52466: PPUSH
52467: LD_INT 1
52469: PPUSH
52470: LD_INT 4
52472: PPUSH
52473: CALL_OW 273
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_VAR 0 7
52486: PPUSH
52487: LD_INT 2
52489: PPUSH
52490: LD_INT 4
52492: PPUSH
52493: CALL_OW 272
52497: PUSH
52498: LD_VAR 0 8
52502: PPUSH
52503: LD_INT 2
52505: PPUSH
52506: LD_INT 4
52508: PPUSH
52509: CALL_OW 273
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_VAR 0 7
52522: PPUSH
52523: LD_INT 3
52525: PPUSH
52526: LD_INT 4
52528: PPUSH
52529: CALL_OW 272
52533: PUSH
52534: LD_VAR 0 8
52538: PPUSH
52539: LD_INT 3
52541: PPUSH
52542: LD_INT 4
52544: PPUSH
52545: CALL_OW 273
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_VAR 0 7
52558: PPUSH
52559: LD_INT 4
52561: PPUSH
52562: LD_INT 4
52564: PPUSH
52565: CALL_OW 272
52569: PUSH
52570: LD_VAR 0 8
52574: PPUSH
52575: LD_INT 4
52577: PPUSH
52578: LD_INT 4
52580: PPUSH
52581: CALL_OW 273
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_VAR 0 7
52594: PPUSH
52595: LD_INT 5
52597: PPUSH
52598: LD_INT 4
52600: PPUSH
52601: CALL_OW 272
52605: PUSH
52606: LD_VAR 0 8
52610: PPUSH
52611: LD_INT 5
52613: PPUSH
52614: LD_INT 4
52616: PPUSH
52617: CALL_OW 273
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// for i = tmp downto 1 do
52634: LD_ADDR_VAR 0 4
52638: PUSH
52639: DOUBLE
52640: LD_VAR 0 6
52644: INC
52645: ST_TO_ADDR
52646: LD_INT 1
52648: PUSH
52649: FOR_DOWNTO
52650: IFFALSE 52751
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52652: LD_VAR 0 6
52656: PUSH
52657: LD_VAR 0 4
52661: ARRAY
52662: PUSH
52663: LD_INT 1
52665: ARRAY
52666: PPUSH
52667: LD_VAR 0 6
52671: PUSH
52672: LD_VAR 0 4
52676: ARRAY
52677: PUSH
52678: LD_INT 2
52680: ARRAY
52681: PPUSH
52682: CALL_OW 488
52686: NOT
52687: PUSH
52688: LD_VAR 0 6
52692: PUSH
52693: LD_VAR 0 4
52697: ARRAY
52698: PUSH
52699: LD_INT 1
52701: ARRAY
52702: PPUSH
52703: LD_VAR 0 6
52707: PUSH
52708: LD_VAR 0 4
52712: ARRAY
52713: PUSH
52714: LD_INT 2
52716: ARRAY
52717: PPUSH
52718: CALL_OW 428
52722: PUSH
52723: LD_INT 0
52725: NONEQUAL
52726: OR
52727: IFFALSE 52749
// tmp := Delete ( tmp , i ) ;
52729: LD_ADDR_VAR 0 6
52733: PUSH
52734: LD_VAR 0 6
52738: PPUSH
52739: LD_VAR 0 4
52743: PPUSH
52744: CALL_OW 3
52748: ST_TO_ADDR
52749: GO 52649
52751: POP
52752: POP
// j := GetClosestHex ( unit , tmp ) ;
52753: LD_ADDR_VAR 0 5
52757: PUSH
52758: LD_VAR 0 1
52762: PPUSH
52763: LD_VAR 0 6
52767: PPUSH
52768: CALL 52053 0 2
52772: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52773: LD_VAR 0 1
52777: PPUSH
52778: LD_VAR 0 5
52782: PUSH
52783: LD_INT 1
52785: ARRAY
52786: PPUSH
52787: LD_VAR 0 5
52791: PUSH
52792: LD_INT 2
52794: ARRAY
52795: PPUSH
52796: CALL_OW 111
// end ;
52800: LD_VAR 0 3
52804: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52805: LD_INT 0
52807: PPUSH
52808: PPUSH
52809: PPUSH
// uc_side = 0 ;
52810: LD_ADDR_OWVAR 20
52814: PUSH
52815: LD_INT 0
52817: ST_TO_ADDR
// uc_nation = 0 ;
52818: LD_ADDR_OWVAR 21
52822: PUSH
52823: LD_INT 0
52825: ST_TO_ADDR
// InitHc ;
52826: CALL_OW 19
// InitVc ;
52830: CALL_OW 20
// if mastodonts then
52834: LD_VAR 0 6
52838: IFFALSE 52905
// for i = 1 to mastodonts do
52840: LD_ADDR_VAR 0 11
52844: PUSH
52845: DOUBLE
52846: LD_INT 1
52848: DEC
52849: ST_TO_ADDR
52850: LD_VAR 0 6
52854: PUSH
52855: FOR_TO
52856: IFFALSE 52903
// begin vc_chassis := 31 ;
52858: LD_ADDR_OWVAR 37
52862: PUSH
52863: LD_INT 31
52865: ST_TO_ADDR
// vc_control := control_rider ;
52866: LD_ADDR_OWVAR 38
52870: PUSH
52871: LD_INT 4
52873: ST_TO_ADDR
// animal := CreateVehicle ;
52874: LD_ADDR_VAR 0 12
52878: PUSH
52879: CALL_OW 45
52883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52884: LD_VAR 0 12
52888: PPUSH
52889: LD_VAR 0 8
52893: PPUSH
52894: LD_INT 0
52896: PPUSH
52897: CALL 54974 0 3
// end ;
52901: GO 52855
52903: POP
52904: POP
// if horses then
52905: LD_VAR 0 5
52909: IFFALSE 52976
// for i = 1 to horses do
52911: LD_ADDR_VAR 0 11
52915: PUSH
52916: DOUBLE
52917: LD_INT 1
52919: DEC
52920: ST_TO_ADDR
52921: LD_VAR 0 5
52925: PUSH
52926: FOR_TO
52927: IFFALSE 52974
// begin hc_class := 21 ;
52929: LD_ADDR_OWVAR 28
52933: PUSH
52934: LD_INT 21
52936: ST_TO_ADDR
// hc_gallery :=  ;
52937: LD_ADDR_OWVAR 33
52941: PUSH
52942: LD_STRING 
52944: ST_TO_ADDR
// animal := CreateHuman ;
52945: LD_ADDR_VAR 0 12
52949: PUSH
52950: CALL_OW 44
52954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52955: LD_VAR 0 12
52959: PPUSH
52960: LD_VAR 0 8
52964: PPUSH
52965: LD_INT 0
52967: PPUSH
52968: CALL 54974 0 3
// end ;
52972: GO 52926
52974: POP
52975: POP
// if birds then
52976: LD_VAR 0 1
52980: IFFALSE 53047
// for i = 1 to birds do
52982: LD_ADDR_VAR 0 11
52986: PUSH
52987: DOUBLE
52988: LD_INT 1
52990: DEC
52991: ST_TO_ADDR
52992: LD_VAR 0 1
52996: PUSH
52997: FOR_TO
52998: IFFALSE 53045
// begin hc_class = 18 ;
53000: LD_ADDR_OWVAR 28
53004: PUSH
53005: LD_INT 18
53007: ST_TO_ADDR
// hc_gallery =  ;
53008: LD_ADDR_OWVAR 33
53012: PUSH
53013: LD_STRING 
53015: ST_TO_ADDR
// animal := CreateHuman ;
53016: LD_ADDR_VAR 0 12
53020: PUSH
53021: CALL_OW 44
53025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53026: LD_VAR 0 12
53030: PPUSH
53031: LD_VAR 0 8
53035: PPUSH
53036: LD_INT 0
53038: PPUSH
53039: CALL 54974 0 3
// end ;
53043: GO 52997
53045: POP
53046: POP
// if tigers then
53047: LD_VAR 0 2
53051: IFFALSE 53135
// for i = 1 to tigers do
53053: LD_ADDR_VAR 0 11
53057: PUSH
53058: DOUBLE
53059: LD_INT 1
53061: DEC
53062: ST_TO_ADDR
53063: LD_VAR 0 2
53067: PUSH
53068: FOR_TO
53069: IFFALSE 53133
// begin hc_class = class_tiger ;
53071: LD_ADDR_OWVAR 28
53075: PUSH
53076: LD_INT 14
53078: ST_TO_ADDR
// hc_gallery =  ;
53079: LD_ADDR_OWVAR 33
53083: PUSH
53084: LD_STRING 
53086: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53087: LD_ADDR_OWVAR 35
53091: PUSH
53092: LD_INT 7
53094: NEG
53095: PPUSH
53096: LD_INT 7
53098: PPUSH
53099: CALL_OW 12
53103: ST_TO_ADDR
// animal := CreateHuman ;
53104: LD_ADDR_VAR 0 12
53108: PUSH
53109: CALL_OW 44
53113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53114: LD_VAR 0 12
53118: PPUSH
53119: LD_VAR 0 8
53123: PPUSH
53124: LD_INT 0
53126: PPUSH
53127: CALL 54974 0 3
// end ;
53131: GO 53068
53133: POP
53134: POP
// if apemans then
53135: LD_VAR 0 3
53139: IFFALSE 53262
// for i = 1 to apemans do
53141: LD_ADDR_VAR 0 11
53145: PUSH
53146: DOUBLE
53147: LD_INT 1
53149: DEC
53150: ST_TO_ADDR
53151: LD_VAR 0 3
53155: PUSH
53156: FOR_TO
53157: IFFALSE 53260
// begin hc_class = class_apeman ;
53159: LD_ADDR_OWVAR 28
53163: PUSH
53164: LD_INT 12
53166: ST_TO_ADDR
// hc_gallery =  ;
53167: LD_ADDR_OWVAR 33
53171: PUSH
53172: LD_STRING 
53174: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53175: LD_ADDR_OWVAR 35
53179: PUSH
53180: LD_INT 5
53182: NEG
53183: PPUSH
53184: LD_INT 5
53186: PPUSH
53187: CALL_OW 12
53191: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53192: LD_ADDR_OWVAR 31
53196: PUSH
53197: LD_INT 1
53199: PPUSH
53200: LD_INT 3
53202: PPUSH
53203: CALL_OW 12
53207: PUSH
53208: LD_INT 1
53210: PPUSH
53211: LD_INT 3
53213: PPUSH
53214: CALL_OW 12
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// animal := CreateHuman ;
53231: LD_ADDR_VAR 0 12
53235: PUSH
53236: CALL_OW 44
53240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53241: LD_VAR 0 12
53245: PPUSH
53246: LD_VAR 0 8
53250: PPUSH
53251: LD_INT 0
53253: PPUSH
53254: CALL 54974 0 3
// end ;
53258: GO 53156
53260: POP
53261: POP
// if enchidnas then
53262: LD_VAR 0 4
53266: IFFALSE 53333
// for i = 1 to enchidnas do
53268: LD_ADDR_VAR 0 11
53272: PUSH
53273: DOUBLE
53274: LD_INT 1
53276: DEC
53277: ST_TO_ADDR
53278: LD_VAR 0 4
53282: PUSH
53283: FOR_TO
53284: IFFALSE 53331
// begin hc_class = 13 ;
53286: LD_ADDR_OWVAR 28
53290: PUSH
53291: LD_INT 13
53293: ST_TO_ADDR
// hc_gallery =  ;
53294: LD_ADDR_OWVAR 33
53298: PUSH
53299: LD_STRING 
53301: ST_TO_ADDR
// animal := CreateHuman ;
53302: LD_ADDR_VAR 0 12
53306: PUSH
53307: CALL_OW 44
53311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53312: LD_VAR 0 12
53316: PPUSH
53317: LD_VAR 0 8
53321: PPUSH
53322: LD_INT 0
53324: PPUSH
53325: CALL 54974 0 3
// end ;
53329: GO 53283
53331: POP
53332: POP
// if fishes then
53333: LD_VAR 0 7
53337: IFFALSE 53404
// for i = 1 to fishes do
53339: LD_ADDR_VAR 0 11
53343: PUSH
53344: DOUBLE
53345: LD_INT 1
53347: DEC
53348: ST_TO_ADDR
53349: LD_VAR 0 7
53353: PUSH
53354: FOR_TO
53355: IFFALSE 53402
// begin hc_class = 20 ;
53357: LD_ADDR_OWVAR 28
53361: PUSH
53362: LD_INT 20
53364: ST_TO_ADDR
// hc_gallery =  ;
53365: LD_ADDR_OWVAR 33
53369: PUSH
53370: LD_STRING 
53372: ST_TO_ADDR
// animal := CreateHuman ;
53373: LD_ADDR_VAR 0 12
53377: PUSH
53378: CALL_OW 44
53382: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53383: LD_VAR 0 12
53387: PPUSH
53388: LD_VAR 0 9
53392: PPUSH
53393: LD_INT 0
53395: PPUSH
53396: CALL 54974 0 3
// end ;
53400: GO 53354
53402: POP
53403: POP
// end ;
53404: LD_VAR 0 10
53408: RET
// export function WantHeal ( sci , unit ) ; begin
53409: LD_INT 0
53411: PPUSH
// if GetTaskList ( sci ) > 0 then
53412: LD_VAR 0 1
53416: PPUSH
53417: CALL_OW 437
53421: PUSH
53422: LD_INT 0
53424: GREATER
53425: IFFALSE 53495
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53427: LD_VAR 0 1
53431: PPUSH
53432: CALL_OW 437
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PUSH
53441: LD_INT 1
53443: ARRAY
53444: PUSH
53445: LD_STRING l
53447: EQUAL
53448: PUSH
53449: LD_VAR 0 1
53453: PPUSH
53454: CALL_OW 437
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: PUSH
53463: LD_INT 4
53465: ARRAY
53466: PUSH
53467: LD_VAR 0 2
53471: EQUAL
53472: AND
53473: IFFALSE 53485
// result := true else
53475: LD_ADDR_VAR 0 3
53479: PUSH
53480: LD_INT 1
53482: ST_TO_ADDR
53483: GO 53493
// result := false ;
53485: LD_ADDR_VAR 0 3
53489: PUSH
53490: LD_INT 0
53492: ST_TO_ADDR
// end else
53493: GO 53503
// result := false ;
53495: LD_ADDR_VAR 0 3
53499: PUSH
53500: LD_INT 0
53502: ST_TO_ADDR
// end ;
53503: LD_VAR 0 3
53507: RET
// export function HealTarget ( sci ) ; begin
53508: LD_INT 0
53510: PPUSH
// if not sci then
53511: LD_VAR 0 1
53515: NOT
53516: IFFALSE 53520
// exit ;
53518: GO 53585
// result := 0 ;
53520: LD_ADDR_VAR 0 2
53524: PUSH
53525: LD_INT 0
53527: ST_TO_ADDR
// if GetTaskList ( sci ) then
53528: LD_VAR 0 1
53532: PPUSH
53533: CALL_OW 437
53537: IFFALSE 53585
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53539: LD_VAR 0 1
53543: PPUSH
53544: CALL_OW 437
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: PUSH
53557: LD_STRING l
53559: EQUAL
53560: IFFALSE 53585
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53562: LD_ADDR_VAR 0 2
53566: PUSH
53567: LD_VAR 0 1
53571: PPUSH
53572: CALL_OW 437
53576: PUSH
53577: LD_INT 1
53579: ARRAY
53580: PUSH
53581: LD_INT 4
53583: ARRAY
53584: ST_TO_ADDR
// end ;
53585: LD_VAR 0 2
53589: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53590: LD_INT 0
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
// if not base_units then
53596: LD_VAR 0 1
53600: NOT
53601: IFFALSE 53605
// exit ;
53603: GO 53692
// result := false ;
53605: LD_ADDR_VAR 0 2
53609: PUSH
53610: LD_INT 0
53612: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53613: LD_ADDR_VAR 0 5
53617: PUSH
53618: LD_VAR 0 1
53622: PPUSH
53623: LD_INT 21
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PPUSH
53633: CALL_OW 72
53637: ST_TO_ADDR
// if not tmp then
53638: LD_VAR 0 5
53642: NOT
53643: IFFALSE 53647
// exit ;
53645: GO 53692
// for i in tmp do
53647: LD_ADDR_VAR 0 3
53651: PUSH
53652: LD_VAR 0 5
53656: PUSH
53657: FOR_IN
53658: IFFALSE 53690
// begin result := EnemyInRange ( i , 22 ) ;
53660: LD_ADDR_VAR 0 2
53664: PUSH
53665: LD_VAR 0 3
53669: PPUSH
53670: LD_INT 22
53672: PPUSH
53673: CALL 51928 0 2
53677: ST_TO_ADDR
// if result then
53678: LD_VAR 0 2
53682: IFFALSE 53688
// exit ;
53684: POP
53685: POP
53686: GO 53692
// end ;
53688: GO 53657
53690: POP
53691: POP
// end ;
53692: LD_VAR 0 2
53696: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53697: LD_INT 0
53699: PPUSH
53700: PPUSH
// if not units then
53701: LD_VAR 0 1
53705: NOT
53706: IFFALSE 53710
// exit ;
53708: GO 53780
// result := [ ] ;
53710: LD_ADDR_VAR 0 3
53714: PUSH
53715: EMPTY
53716: ST_TO_ADDR
// for i in units do
53717: LD_ADDR_VAR 0 4
53721: PUSH
53722: LD_VAR 0 1
53726: PUSH
53727: FOR_IN
53728: IFFALSE 53778
// if GetTag ( i ) = tag then
53730: LD_VAR 0 4
53734: PPUSH
53735: CALL_OW 110
53739: PUSH
53740: LD_VAR 0 2
53744: EQUAL
53745: IFFALSE 53776
// result := Insert ( result , result + 1 , i ) ;
53747: LD_ADDR_VAR 0 3
53751: PUSH
53752: LD_VAR 0 3
53756: PPUSH
53757: LD_VAR 0 3
53761: PUSH
53762: LD_INT 1
53764: PLUS
53765: PPUSH
53766: LD_VAR 0 4
53770: PPUSH
53771: CALL_OW 2
53775: ST_TO_ADDR
53776: GO 53727
53778: POP
53779: POP
// end ;
53780: LD_VAR 0 3
53784: RET
// export function IsDriver ( un ) ; begin
53785: LD_INT 0
53787: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53788: LD_ADDR_VAR 0 2
53792: PUSH
53793: LD_VAR 0 1
53797: PUSH
53798: LD_INT 55
53800: PUSH
53801: EMPTY
53802: LIST
53803: PPUSH
53804: CALL_OW 69
53808: IN
53809: ST_TO_ADDR
// end ;
53810: LD_VAR 0 2
53814: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53815: LD_INT 0
53817: PPUSH
53818: PPUSH
// list := [ ] ;
53819: LD_ADDR_VAR 0 5
53823: PUSH
53824: EMPTY
53825: ST_TO_ADDR
// case d of 0 :
53826: LD_VAR 0 3
53830: PUSH
53831: LD_INT 0
53833: DOUBLE
53834: EQUAL
53835: IFTRUE 53839
53837: GO 53972
53839: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53840: LD_ADDR_VAR 0 5
53844: PUSH
53845: LD_VAR 0 1
53849: PUSH
53850: LD_INT 4
53852: MINUS
53853: PUSH
53854: LD_VAR 0 2
53858: PUSH
53859: LD_INT 4
53861: MINUS
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: LD_INT 3
53878: MINUS
53879: PUSH
53880: LD_VAR 0 2
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: PUSH
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 4
53900: PLUS
53901: PUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: LD_VAR 0 1
53919: PUSH
53920: LD_INT 3
53922: PLUS
53923: PUSH
53924: LD_VAR 0 2
53928: PUSH
53929: LD_INT 3
53931: PLUS
53932: PUSH
53933: LD_INT 5
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: PUSH
53941: LD_VAR 0 1
53945: PUSH
53946: LD_VAR 0 2
53950: PUSH
53951: LD_INT 4
53953: PLUS
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// end ; 1 :
53970: GO 54670
53972: LD_INT 1
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53980
53978: GO 54113
53980: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53981: LD_ADDR_VAR 0 5
53985: PUSH
53986: LD_VAR 0 1
53990: PUSH
53991: LD_VAR 0 2
53995: PUSH
53996: LD_INT 4
53998: MINUS
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: PUSH
54008: LD_VAR 0 1
54012: PUSH
54013: LD_INT 3
54015: MINUS
54016: PUSH
54017: LD_VAR 0 2
54021: PUSH
54022: LD_INT 3
54024: MINUS
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: PUSH
54034: LD_VAR 0 1
54038: PUSH
54039: LD_INT 4
54041: MINUS
54042: PUSH
54043: LD_VAR 0 2
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: PUSH
54056: LD_VAR 0 1
54060: PUSH
54061: LD_VAR 0 2
54065: PUSH
54066: LD_INT 3
54068: PLUS
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: PUSH
54078: LD_VAR 0 1
54082: PUSH
54083: LD_INT 4
54085: PLUS
54086: PUSH
54087: LD_VAR 0 2
54091: PUSH
54092: LD_INT 4
54094: PLUS
54095: PUSH
54096: LD_INT 5
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// end ; 2 :
54111: GO 54670
54113: LD_INT 2
54115: DOUBLE
54116: EQUAL
54117: IFTRUE 54121
54119: GO 54250
54121: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54122: LD_ADDR_VAR 0 5
54126: PUSH
54127: LD_VAR 0 1
54131: PUSH
54132: LD_VAR 0 2
54136: PUSH
54137: LD_INT 3
54139: MINUS
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: PUSH
54149: LD_VAR 0 1
54153: PUSH
54154: LD_INT 4
54156: PLUS
54157: PUSH
54158: LD_VAR 0 2
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: LIST
54170: PUSH
54171: LD_VAR 0 1
54175: PUSH
54176: LD_VAR 0 2
54180: PUSH
54181: LD_INT 4
54183: PLUS
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: PUSH
54193: LD_VAR 0 1
54197: PUSH
54198: LD_INT 3
54200: MINUS
54201: PUSH
54202: LD_VAR 0 2
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: PUSH
54215: LD_VAR 0 1
54219: PUSH
54220: LD_INT 4
54222: MINUS
54223: PUSH
54224: LD_VAR 0 2
54228: PUSH
54229: LD_INT 4
54231: MINUS
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// end ; 3 :
54248: GO 54670
54250: LD_INT 3
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54258
54256: GO 54391
54258: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54259: LD_ADDR_VAR 0 5
54263: PUSH
54264: LD_VAR 0 1
54268: PUSH
54269: LD_INT 3
54271: PLUS
54272: PUSH
54273: LD_VAR 0 2
54277: PUSH
54278: LD_INT 4
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: PUSH
54286: LD_VAR 0 1
54290: PUSH
54291: LD_INT 4
54293: PLUS
54294: PUSH
54295: LD_VAR 0 2
54299: PUSH
54300: LD_INT 4
54302: PLUS
54303: PUSH
54304: LD_INT 5
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: PUSH
54312: LD_VAR 0 1
54316: PUSH
54317: LD_INT 4
54319: MINUS
54320: PUSH
54321: LD_VAR 0 2
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: PUSH
54334: LD_VAR 0 1
54338: PUSH
54339: LD_VAR 0 2
54343: PUSH
54344: LD_INT 4
54346: MINUS
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: PUSH
54356: LD_VAR 0 1
54360: PUSH
54361: LD_INT 3
54363: MINUS
54364: PUSH
54365: LD_VAR 0 2
54369: PUSH
54370: LD_INT 3
54372: MINUS
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// end ; 4 :
54389: GO 54670
54391: LD_INT 4
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54399
54397: GO 54532
54399: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 1
54409: PUSH
54410: LD_VAR 0 2
54414: PUSH
54415: LD_INT 4
54417: PLUS
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: PUSH
54427: LD_VAR 0 1
54431: PUSH
54432: LD_INT 3
54434: PLUS
54435: PUSH
54436: LD_VAR 0 2
54440: PUSH
54441: LD_INT 3
54443: PLUS
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: PUSH
54453: LD_VAR 0 1
54457: PUSH
54458: LD_INT 4
54460: PLUS
54461: PUSH
54462: LD_VAR 0 2
54466: PUSH
54467: LD_INT 4
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: PUSH
54475: LD_VAR 0 1
54479: PUSH
54480: LD_VAR 0 2
54484: PUSH
54485: LD_INT 3
54487: MINUS
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: PUSH
54497: LD_VAR 0 1
54501: PUSH
54502: LD_INT 4
54504: MINUS
54505: PUSH
54506: LD_VAR 0 2
54510: PUSH
54511: LD_INT 4
54513: MINUS
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: ST_TO_ADDR
// end ; 5 :
54530: GO 54670
54532: LD_INT 5
54534: DOUBLE
54535: EQUAL
54536: IFTRUE 54540
54538: GO 54669
54540: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54541: LD_ADDR_VAR 0 5
54545: PUSH
54546: LD_VAR 0 1
54550: PUSH
54551: LD_INT 4
54553: MINUS
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: PUSH
54568: LD_VAR 0 1
54572: PUSH
54573: LD_VAR 0 2
54577: PUSH
54578: LD_INT 4
54580: MINUS
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: PUSH
54590: LD_VAR 0 1
54594: PUSH
54595: LD_INT 4
54597: PLUS
54598: PUSH
54599: LD_VAR 0 2
54603: PUSH
54604: LD_INT 4
54606: PLUS
54607: PUSH
54608: LD_INT 5
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: PUSH
54616: LD_VAR 0 1
54620: PUSH
54621: LD_INT 3
54623: PLUS
54624: PUSH
54625: LD_VAR 0 2
54629: PUSH
54630: LD_INT 4
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: PUSH
54638: LD_VAR 0 1
54642: PUSH
54643: LD_VAR 0 2
54647: PUSH
54648: LD_INT 3
54650: PLUS
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// end ; end ;
54667: GO 54670
54669: POP
// result := list ;
54670: LD_ADDR_VAR 0 4
54674: PUSH
54675: LD_VAR 0 5
54679: ST_TO_ADDR
// end ;
54680: LD_VAR 0 4
54684: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54685: LD_INT 0
54687: PPUSH
54688: PPUSH
54689: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54690: LD_VAR 0 1
54694: NOT
54695: PUSH
54696: LD_VAR 0 2
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: IN
54719: NOT
54720: OR
54721: IFFALSE 54725
// exit ;
54723: GO 54817
// tmp := [ ] ;
54725: LD_ADDR_VAR 0 5
54729: PUSH
54730: EMPTY
54731: ST_TO_ADDR
// for i in units do
54732: LD_ADDR_VAR 0 4
54736: PUSH
54737: LD_VAR 0 1
54741: PUSH
54742: FOR_IN
54743: IFFALSE 54786
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54745: LD_ADDR_VAR 0 5
54749: PUSH
54750: LD_VAR 0 5
54754: PPUSH
54755: LD_VAR 0 5
54759: PUSH
54760: LD_INT 1
54762: PLUS
54763: PPUSH
54764: LD_VAR 0 4
54768: PPUSH
54769: LD_VAR 0 2
54773: PPUSH
54774: CALL_OW 259
54778: PPUSH
54779: CALL_OW 2
54783: ST_TO_ADDR
54784: GO 54742
54786: POP
54787: POP
// if not tmp then
54788: LD_VAR 0 5
54792: NOT
54793: IFFALSE 54797
// exit ;
54795: GO 54817
// result := SortListByListDesc ( units , tmp ) ;
54797: LD_ADDR_VAR 0 3
54801: PUSH
54802: LD_VAR 0 1
54806: PPUSH
54807: LD_VAR 0 5
54811: PPUSH
54812: CALL_OW 77
54816: ST_TO_ADDR
// end ;
54817: LD_VAR 0 3
54821: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54822: LD_INT 0
54824: PPUSH
54825: PPUSH
54826: PPUSH
// x := GetX ( building ) ;
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: LD_VAR 0 2
54836: PPUSH
54837: CALL_OW 250
54841: ST_TO_ADDR
// y := GetY ( building ) ;
54842: LD_ADDR_VAR 0 5
54846: PUSH
54847: LD_VAR 0 2
54851: PPUSH
54852: CALL_OW 251
54856: ST_TO_ADDR
// if GetTaskList ( unit ) then
54857: LD_VAR 0 1
54861: PPUSH
54862: CALL_OW 437
54866: IFFALSE 54961
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54868: LD_STRING e
54870: PUSH
54871: LD_VAR 0 1
54875: PPUSH
54876: CALL_OW 437
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_INT 1
54887: ARRAY
54888: EQUAL
54889: PUSH
54890: LD_VAR 0 4
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 437
54904: PUSH
54905: LD_INT 1
54907: ARRAY
54908: PUSH
54909: LD_INT 2
54911: ARRAY
54912: EQUAL
54913: AND
54914: PUSH
54915: LD_VAR 0 5
54919: PUSH
54920: LD_VAR 0 1
54924: PPUSH
54925: CALL_OW 437
54929: PUSH
54930: LD_INT 1
54932: ARRAY
54933: PUSH
54934: LD_INT 3
54936: ARRAY
54937: EQUAL
54938: AND
54939: IFFALSE 54951
// result := true else
54941: LD_ADDR_VAR 0 3
54945: PUSH
54946: LD_INT 1
54948: ST_TO_ADDR
54949: GO 54959
// result := false ;
54951: LD_ADDR_VAR 0 3
54955: PUSH
54956: LD_INT 0
54958: ST_TO_ADDR
// end else
54959: GO 54969
// result := false ;
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: LD_INT 0
54968: ST_TO_ADDR
// end ;
54969: LD_VAR 0 3
54973: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54974: LD_INT 0
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
// if not unit or not area then
54980: LD_VAR 0 1
54984: NOT
54985: PUSH
54986: LD_VAR 0 2
54990: NOT
54991: OR
54992: IFFALSE 54996
// exit ;
54994: GO 55160
// tmp := AreaToList ( area , i ) ;
54996: LD_ADDR_VAR 0 6
55000: PUSH
55001: LD_VAR 0 2
55005: PPUSH
55006: LD_VAR 0 5
55010: PPUSH
55011: CALL_OW 517
55015: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55016: LD_ADDR_VAR 0 5
55020: PUSH
55021: DOUBLE
55022: LD_INT 1
55024: DEC
55025: ST_TO_ADDR
55026: LD_VAR 0 6
55030: PUSH
55031: LD_INT 1
55033: ARRAY
55034: PUSH
55035: FOR_TO
55036: IFFALSE 55158
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55038: LD_ADDR_VAR 0 7
55042: PUSH
55043: LD_VAR 0 6
55047: PUSH
55048: LD_INT 1
55050: ARRAY
55051: PUSH
55052: LD_VAR 0 5
55056: ARRAY
55057: PUSH
55058: LD_VAR 0 6
55062: PUSH
55063: LD_INT 2
55065: ARRAY
55066: PUSH
55067: LD_VAR 0 5
55071: ARRAY
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55077: LD_VAR 0 7
55081: PUSH
55082: LD_INT 1
55084: ARRAY
55085: PPUSH
55086: LD_VAR 0 7
55090: PUSH
55091: LD_INT 2
55093: ARRAY
55094: PPUSH
55095: CALL_OW 428
55099: PUSH
55100: LD_INT 0
55102: EQUAL
55103: IFFALSE 55156
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55105: LD_VAR 0 1
55109: PPUSH
55110: LD_VAR 0 7
55114: PUSH
55115: LD_INT 1
55117: ARRAY
55118: PPUSH
55119: LD_VAR 0 7
55123: PUSH
55124: LD_INT 2
55126: ARRAY
55127: PPUSH
55128: LD_VAR 0 3
55132: PPUSH
55133: CALL_OW 48
// result := IsPlaced ( unit ) ;
55137: LD_ADDR_VAR 0 4
55141: PUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: CALL_OW 305
55151: ST_TO_ADDR
// exit ;
55152: POP
55153: POP
55154: GO 55160
// end ; end ;
55156: GO 55035
55158: POP
55159: POP
// end ;
55160: LD_VAR 0 4
55164: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55165: LD_INT 0
55167: PPUSH
55168: PPUSH
55169: PPUSH
// if not side or side > 8 then
55170: LD_VAR 0 1
55174: NOT
55175: PUSH
55176: LD_VAR 0 1
55180: PUSH
55181: LD_INT 8
55183: GREATER
55184: OR
55185: IFFALSE 55189
// exit ;
55187: GO 55376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55189: LD_ADDR_VAR 0 4
55193: PUSH
55194: LD_INT 22
55196: PUSH
55197: LD_VAR 0 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 21
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PPUSH
55220: CALL_OW 69
55224: ST_TO_ADDR
// if not tmp then
55225: LD_VAR 0 4
55229: NOT
55230: IFFALSE 55234
// exit ;
55232: GO 55376
// enable_addtolog := true ;
55234: LD_ADDR_OWVAR 81
55238: PUSH
55239: LD_INT 1
55241: ST_TO_ADDR
// AddToLog ( [ ) ;
55242: LD_STRING [
55244: PPUSH
55245: CALL_OW 561
// for i in tmp do
55249: LD_ADDR_VAR 0 3
55253: PUSH
55254: LD_VAR 0 4
55258: PUSH
55259: FOR_IN
55260: IFFALSE 55367
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55262: LD_STRING [
55264: PUSH
55265: LD_VAR 0 3
55269: PPUSH
55270: CALL_OW 266
55274: STR
55275: PUSH
55276: LD_STRING , 
55278: STR
55279: PUSH
55280: LD_VAR 0 3
55284: PPUSH
55285: CALL_OW 250
55289: STR
55290: PUSH
55291: LD_STRING , 
55293: STR
55294: PUSH
55295: LD_VAR 0 3
55299: PPUSH
55300: CALL_OW 251
55304: STR
55305: PUSH
55306: LD_STRING , 
55308: STR
55309: PUSH
55310: LD_VAR 0 3
55314: PPUSH
55315: CALL_OW 254
55319: STR
55320: PUSH
55321: LD_STRING , 
55323: STR
55324: PUSH
55325: LD_VAR 0 3
55329: PPUSH
55330: LD_INT 1
55332: PPUSH
55333: CALL_OW 268
55337: STR
55338: PUSH
55339: LD_STRING , 
55341: STR
55342: PUSH
55343: LD_VAR 0 3
55347: PPUSH
55348: LD_INT 2
55350: PPUSH
55351: CALL_OW 268
55355: STR
55356: PUSH
55357: LD_STRING ],
55359: STR
55360: PPUSH
55361: CALL_OW 561
// end ;
55365: GO 55259
55367: POP
55368: POP
// AddToLog ( ]; ) ;
55369: LD_STRING ];
55371: PPUSH
55372: CALL_OW 561
// end ;
55376: LD_VAR 0 2
55380: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55381: LD_INT 0
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
// if not area or not rate or not max then
55388: LD_VAR 0 1
55392: NOT
55393: PUSH
55394: LD_VAR 0 2
55398: NOT
55399: OR
55400: PUSH
55401: LD_VAR 0 4
55405: NOT
55406: OR
55407: IFFALSE 55411
// exit ;
55409: GO 55603
// while 1 do
55411: LD_INT 1
55413: IFFALSE 55603
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55415: LD_ADDR_VAR 0 9
55419: PUSH
55420: LD_VAR 0 1
55424: PPUSH
55425: LD_INT 1
55427: PPUSH
55428: CALL_OW 287
55432: PUSH
55433: LD_INT 10
55435: MUL
55436: ST_TO_ADDR
// r := rate / 10 ;
55437: LD_ADDR_VAR 0 7
55441: PUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 10
55449: DIVREAL
55450: ST_TO_ADDR
// time := 1 1$00 ;
55451: LD_ADDR_VAR 0 8
55455: PUSH
55456: LD_INT 2100
55458: ST_TO_ADDR
// if amount < min then
55459: LD_VAR 0 9
55463: PUSH
55464: LD_VAR 0 3
55468: LESS
55469: IFFALSE 55487
// r := r * 2 else
55471: LD_ADDR_VAR 0 7
55475: PUSH
55476: LD_VAR 0 7
55480: PUSH
55481: LD_INT 2
55483: MUL
55484: ST_TO_ADDR
55485: GO 55513
// if amount > max then
55487: LD_VAR 0 9
55491: PUSH
55492: LD_VAR 0 4
55496: GREATER
55497: IFFALSE 55513
// r := r / 2 ;
55499: LD_ADDR_VAR 0 7
55503: PUSH
55504: LD_VAR 0 7
55508: PUSH
55509: LD_INT 2
55511: DIVREAL
55512: ST_TO_ADDR
// time := time / r ;
55513: LD_ADDR_VAR 0 8
55517: PUSH
55518: LD_VAR 0 8
55522: PUSH
55523: LD_VAR 0 7
55527: DIVREAL
55528: ST_TO_ADDR
// if time < 0 then
55529: LD_VAR 0 8
55533: PUSH
55534: LD_INT 0
55536: LESS
55537: IFFALSE 55554
// time := time * - 1 ;
55539: LD_ADDR_VAR 0 8
55543: PUSH
55544: LD_VAR 0 8
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: MUL
55553: ST_TO_ADDR
// wait ( time ) ;
55554: LD_VAR 0 8
55558: PPUSH
55559: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55563: LD_INT 35
55565: PPUSH
55566: LD_INT 875
55568: PPUSH
55569: CALL_OW 12
55573: PPUSH
55574: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55578: LD_INT 1
55580: PPUSH
55581: LD_INT 5
55583: PPUSH
55584: CALL_OW 12
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: LD_INT 1
55596: PPUSH
55597: CALL_OW 55
// end ;
55601: GO 55411
// end ;
55603: LD_VAR 0 5
55607: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55608: LD_INT 0
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
// if not turrets or not factories then
55618: LD_VAR 0 1
55622: NOT
55623: PUSH
55624: LD_VAR 0 2
55628: NOT
55629: OR
55630: IFFALSE 55634
// exit ;
55632: GO 55941
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55634: LD_ADDR_VAR 0 10
55638: PUSH
55639: LD_INT 5
55641: PUSH
55642: LD_INT 6
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 4
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 5
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 24
55676: PUSH
55677: LD_INT 25
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 23
55686: PUSH
55687: LD_INT 27
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 42
55700: PUSH
55701: LD_INT 43
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 44
55710: PUSH
55711: LD_INT 46
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 45
55720: PUSH
55721: LD_INT 47
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: ST_TO_ADDR
// result := [ ] ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: EMPTY
55744: ST_TO_ADDR
// for i in turrets do
55745: LD_ADDR_VAR 0 4
55749: PUSH
55750: LD_VAR 0 1
55754: PUSH
55755: FOR_IN
55756: IFFALSE 55939
// begin nat := GetNation ( i ) ;
55758: LD_ADDR_VAR 0 7
55762: PUSH
55763: LD_VAR 0 4
55767: PPUSH
55768: CALL_OW 248
55772: ST_TO_ADDR
// weapon := 0 ;
55773: LD_ADDR_VAR 0 8
55777: PUSH
55778: LD_INT 0
55780: ST_TO_ADDR
// if not nat then
55781: LD_VAR 0 7
55785: NOT
55786: IFFALSE 55790
// continue ;
55788: GO 55755
// for j in list [ nat ] do
55790: LD_ADDR_VAR 0 5
55794: PUSH
55795: LD_VAR 0 10
55799: PUSH
55800: LD_VAR 0 7
55804: ARRAY
55805: PUSH
55806: FOR_IN
55807: IFFALSE 55848
// if GetBWeapon ( i ) = j [ 1 ] then
55809: LD_VAR 0 4
55813: PPUSH
55814: CALL_OW 269
55818: PUSH
55819: LD_VAR 0 5
55823: PUSH
55824: LD_INT 1
55826: ARRAY
55827: EQUAL
55828: IFFALSE 55846
// begin weapon := j [ 2 ] ;
55830: LD_ADDR_VAR 0 8
55834: PUSH
55835: LD_VAR 0 5
55839: PUSH
55840: LD_INT 2
55842: ARRAY
55843: ST_TO_ADDR
// break ;
55844: GO 55848
// end ;
55846: GO 55806
55848: POP
55849: POP
// if not weapon then
55850: LD_VAR 0 8
55854: NOT
55855: IFFALSE 55859
// continue ;
55857: GO 55755
// for k in factories do
55859: LD_ADDR_VAR 0 6
55863: PUSH
55864: LD_VAR 0 2
55868: PUSH
55869: FOR_IN
55870: IFFALSE 55935
// begin weapons := AvailableWeaponList ( k ) ;
55872: LD_ADDR_VAR 0 9
55876: PUSH
55877: LD_VAR 0 6
55881: PPUSH
55882: CALL_OW 478
55886: ST_TO_ADDR
// if not weapons then
55887: LD_VAR 0 9
55891: NOT
55892: IFFALSE 55896
// continue ;
55894: GO 55869
// if weapon in weapons then
55896: LD_VAR 0 8
55900: PUSH
55901: LD_VAR 0 9
55905: IN
55906: IFFALSE 55933
// begin result := [ i , weapon ] ;
55908: LD_ADDR_VAR 0 3
55912: PUSH
55913: LD_VAR 0 4
55917: PUSH
55918: LD_VAR 0 8
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// exit ;
55927: POP
55928: POP
55929: POP
55930: POP
55931: GO 55941
// end ; end ;
55933: GO 55869
55935: POP
55936: POP
// end ;
55937: GO 55755
55939: POP
55940: POP
// end ;
55941: LD_VAR 0 3
55945: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55946: LD_INT 0
55948: PPUSH
// if not side or side > 8 then
55949: LD_VAR 0 3
55953: NOT
55954: PUSH
55955: LD_VAR 0 3
55959: PUSH
55960: LD_INT 8
55962: GREATER
55963: OR
55964: IFFALSE 55968
// exit ;
55966: GO 56027
// if not range then
55968: LD_VAR 0 4
55972: NOT
55973: IFFALSE 55984
// range := - 12 ;
55975: LD_ADDR_VAR 0 4
55979: PUSH
55980: LD_INT 12
55982: NEG
55983: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55984: LD_VAR 0 1
55988: PPUSH
55989: LD_VAR 0 2
55993: PPUSH
55994: LD_VAR 0 3
55998: PPUSH
55999: LD_VAR 0 4
56003: PPUSH
56004: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56008: LD_VAR 0 1
56012: PPUSH
56013: LD_VAR 0 2
56017: PPUSH
56018: LD_VAR 0 3
56022: PPUSH
56023: CALL_OW 331
// end ;
56027: LD_VAR 0 5
56031: RET
// export function Video ( mode ) ; begin
56032: LD_INT 0
56034: PPUSH
// ingame_video = mode ;
56035: LD_ADDR_OWVAR 52
56039: PUSH
56040: LD_VAR 0 1
56044: ST_TO_ADDR
// interface_hidden = mode ;
56045: LD_ADDR_OWVAR 54
56049: PUSH
56050: LD_VAR 0 1
56054: ST_TO_ADDR
// end ;
56055: LD_VAR 0 2
56059: RET
// export function Join ( array , element ) ; begin
56060: LD_INT 0
56062: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56063: LD_ADDR_VAR 0 3
56067: PUSH
56068: LD_VAR 0 1
56072: PPUSH
56073: LD_VAR 0 1
56077: PUSH
56078: LD_INT 1
56080: PLUS
56081: PPUSH
56082: LD_VAR 0 2
56086: PPUSH
56087: CALL_OW 1
56091: ST_TO_ADDR
// end ;
56092: LD_VAR 0 3
56096: RET
// export function JoinUnion ( array , element ) ; begin
56097: LD_INT 0
56099: PPUSH
// result := array union element ;
56100: LD_ADDR_VAR 0 3
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_VAR 0 2
56114: UNION
56115: ST_TO_ADDR
// end ;
56116: LD_VAR 0 3
56120: RET
// export function GetBehemoths ( side ) ; begin
56121: LD_INT 0
56123: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56124: LD_ADDR_VAR 0 2
56128: PUSH
56129: LD_INT 22
56131: PUSH
56132: LD_VAR 0 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 31
56143: PUSH
56144: LD_INT 25
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PPUSH
56155: CALL_OW 69
56159: ST_TO_ADDR
// end ;
56160: LD_VAR 0 2
56164: RET
// export function Shuffle ( array ) ; var i , index ; begin
56165: LD_INT 0
56167: PPUSH
56168: PPUSH
56169: PPUSH
// result := [ ] ;
56170: LD_ADDR_VAR 0 2
56174: PUSH
56175: EMPTY
56176: ST_TO_ADDR
// if not array then
56177: LD_VAR 0 1
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56285
// Randomize ;
56186: CALL_OW 10
// for i = array downto 1 do
56190: LD_ADDR_VAR 0 3
56194: PUSH
56195: DOUBLE
56196: LD_VAR 0 1
56200: INC
56201: ST_TO_ADDR
56202: LD_INT 1
56204: PUSH
56205: FOR_DOWNTO
56206: IFFALSE 56283
// begin index := rand ( 1 , array ) ;
56208: LD_ADDR_VAR 0 4
56212: PUSH
56213: LD_INT 1
56215: PPUSH
56216: LD_VAR 0 1
56220: PPUSH
56221: CALL_OW 12
56225: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56226: LD_ADDR_VAR 0 2
56230: PUSH
56231: LD_VAR 0 2
56235: PPUSH
56236: LD_VAR 0 2
56240: PUSH
56241: LD_INT 1
56243: PLUS
56244: PPUSH
56245: LD_VAR 0 1
56249: PUSH
56250: LD_VAR 0 4
56254: ARRAY
56255: PPUSH
56256: CALL_OW 2
56260: ST_TO_ADDR
// array := Delete ( array , index ) ;
56261: LD_ADDR_VAR 0 1
56265: PUSH
56266: LD_VAR 0 1
56270: PPUSH
56271: LD_VAR 0 4
56275: PPUSH
56276: CALL_OW 3
56280: ST_TO_ADDR
// end ;
56281: GO 56205
56283: POP
56284: POP
// end ;
56285: LD_VAR 0 2
56289: RET
// export function GetBaseMaterials ( base ) ; begin
56290: LD_INT 0
56292: PPUSH
// result := [ 0 , 0 , 0 ] ;
56293: LD_ADDR_VAR 0 2
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// if not base then
56312: LD_VAR 0 1
56316: NOT
56317: IFFALSE 56321
// exit ;
56319: GO 56370
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56321: LD_ADDR_VAR 0 2
56325: PUSH
56326: LD_VAR 0 1
56330: PPUSH
56331: LD_INT 1
56333: PPUSH
56334: CALL_OW 275
56338: PUSH
56339: LD_VAR 0 1
56343: PPUSH
56344: LD_INT 2
56346: PPUSH
56347: CALL_OW 275
56351: PUSH
56352: LD_VAR 0 1
56356: PPUSH
56357: LD_INT 3
56359: PPUSH
56360: CALL_OW 275
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 2
56374: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56375: LD_INT 0
56377: PPUSH
56378: PPUSH
// result := array ;
56379: LD_ADDR_VAR 0 3
56383: PUSH
56384: LD_VAR 0 1
56388: ST_TO_ADDR
// if size > 0 then
56389: LD_VAR 0 2
56393: PUSH
56394: LD_INT 0
56396: GREATER
56397: IFFALSE 56443
// for i := array downto size do
56399: LD_ADDR_VAR 0 4
56403: PUSH
56404: DOUBLE
56405: LD_VAR 0 1
56409: INC
56410: ST_TO_ADDR
56411: LD_VAR 0 2
56415: PUSH
56416: FOR_DOWNTO
56417: IFFALSE 56441
// result := Delete ( result , result ) ;
56419: LD_ADDR_VAR 0 3
56423: PUSH
56424: LD_VAR 0 3
56428: PPUSH
56429: LD_VAR 0 3
56433: PPUSH
56434: CALL_OW 3
56438: ST_TO_ADDR
56439: GO 56416
56441: POP
56442: POP
// end ;
56443: LD_VAR 0 3
56447: RET
// export function ComExit ( unit ) ; var tmp ; begin
56448: LD_INT 0
56450: PPUSH
56451: PPUSH
// if not IsInUnit ( unit ) then
56452: LD_VAR 0 1
56456: PPUSH
56457: CALL_OW 310
56461: NOT
56462: IFFALSE 56466
// exit ;
56464: GO 56526
// tmp := IsInUnit ( unit ) ;
56466: LD_ADDR_VAR 0 3
56470: PUSH
56471: LD_VAR 0 1
56475: PPUSH
56476: CALL_OW 310
56480: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56481: LD_VAR 0 3
56485: PPUSH
56486: CALL_OW 247
56490: PUSH
56491: LD_INT 2
56493: EQUAL
56494: IFFALSE 56507
// ComExitVehicle ( unit ) else
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 121
56505: GO 56516
// ComExitBuilding ( unit ) ;
56507: LD_VAR 0 1
56511: PPUSH
56512: CALL_OW 122
// result := tmp ;
56516: LD_ADDR_VAR 0 2
56520: PUSH
56521: LD_VAR 0 3
56525: ST_TO_ADDR
// end ;
56526: LD_VAR 0 2
56530: RET
// export function ResetHc ; begin
56531: LD_INT 0
56533: PPUSH
// InitHc ;
56534: CALL_OW 19
// hc_importance := 0 ;
56538: LD_ADDR_OWVAR 32
56542: PUSH
56543: LD_INT 0
56545: ST_TO_ADDR
// end ;
56546: LD_VAR 0 1
56550: RET
