// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6123 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6101
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 16249 0 0
5948: GO 6101
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 16382 0 0
5963: GO 6101
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 5 :
5974: CALL 16467 0 0
5978: GO 6101
5980: LD_INT 5
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackSpawnVehicle ; 6 :
5989: CALL 16648 0 0
5993: GO 6101
5995: LD_INT 6
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvincible ; 7 :
6004: CALL 17194 0 0
6008: GO 6101
6010: LD_INT 7
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackInvisible ; 8 :
6019: CALL 17305 0 0
6023: GO 6101
6025: LD_INT 8
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeYourSide ; 9 :
6034: CALL 17362 0 0
6038: GO 6101
6040: LD_INT 9
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackChangeUnitSide ; 10 :
6049: CALL 17404 0 0
6053: GO 6101
6055: LD_INT 10
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6070
6063: POP
// hHackFog ; 11 :
6064: CALL 17505 0 0
6068: GO 6101
6070: LD_INT 11
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6085
6078: POP
// hHackApeman ; 12 :
6079: CALL 17520 0 0
6083: GO 6101
6085: LD_INT 12
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6100
6093: POP
// hHackBoom ; end ;
6094: CALL 17605 0 0
6098: GO 6101
6100: POP
// end ; end ;
6101: PPOPN 6
6103: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6104: GO 6106
6106: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6107: LD_STRING initStreamRollete();
6109: PPUSH
6110: CALL_OW 559
// InitStreamMode ;
6114: CALL 6123 0 0
// DefineStreamItems ( ) ;
6118: CALL 6563 0 0
// end ;
6122: END
// function InitStreamMode ; begin
6123: LD_INT 0
6125: PPUSH
// streamModeActive := false ;
6126: LD_ADDR_EXP 15
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// normalCounter := 36 ;
6134: LD_ADDR_EXP 16
6138: PUSH
6139: LD_INT 36
6141: ST_TO_ADDR
// hardcoreCounter := 16 ;
6142: LD_ADDR_EXP 17
6146: PUSH
6147: LD_INT 16
6149: ST_TO_ADDR
// sRocket := false ;
6150: LD_ADDR_EXP 20
6154: PUSH
6155: LD_INT 0
6157: ST_TO_ADDR
// sSpeed := false ;
6158: LD_ADDR_EXP 19
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// sEngine := false ;
6166: LD_ADDR_EXP 21
6170: PUSH
6171: LD_INT 0
6173: ST_TO_ADDR
// sSpec := false ;
6174: LD_ADDR_EXP 18
6178: PUSH
6179: LD_INT 0
6181: ST_TO_ADDR
// sLevel := false ;
6182: LD_ADDR_EXP 22
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// sArmoury := false ;
6190: LD_ADDR_EXP 23
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// sRadar := false ;
6198: LD_ADDR_EXP 24
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// sBunker := false ;
6206: LD_ADDR_EXP 25
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// sHack := false ;
6214: LD_ADDR_EXP 26
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// sFire := false ;
6222: LD_ADDR_EXP 27
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sRefresh := false ;
6230: LD_ADDR_EXP 28
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sExp := false ;
6238: LD_ADDR_EXP 29
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sDepot := false ;
6246: LD_ADDR_EXP 30
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sFlag := false ;
6254: LD_ADDR_EXP 31
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sKamikadze := false ;
6262: LD_ADDR_EXP 39
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sTroll := false ;
6270: LD_ADDR_EXP 40
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sSlow := false ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sLack := false ;
6286: LD_ADDR_EXP 42
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sTank := false ;
6294: LD_ADDR_EXP 44
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sRemote := false ;
6302: LD_ADDR_EXP 45
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sPowell := false ;
6310: LD_ADDR_EXP 46
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sTeleport := false ;
6318: LD_ADDR_EXP 49
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sOilTower := false ;
6326: LD_ADDR_EXP 51
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sShovel := false ;
6334: LD_ADDR_EXP 52
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sSheik := false ;
6342: LD_ADDR_EXP 53
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sEarthquake := false ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sAI := false ;
6358: LD_ADDR_EXP 56
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sCargo := false ;
6366: LD_ADDR_EXP 59
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sDLaser := false ;
6374: LD_ADDR_EXP 60
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sExchange := false ;
6382: LD_ADDR_EXP 61
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sFac := false ;
6390: LD_ADDR_EXP 62
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sPower := false ;
6398: LD_ADDR_EXP 63
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sRandom := false ;
6406: LD_ADDR_EXP 64
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sShield := false ;
6414: LD_ADDR_EXP 65
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// sTime := false ;
6422: LD_ADDR_EXP 66
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// sTools := false ;
6430: LD_ADDR_EXP 67
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// sSold := false ;
6438: LD_ADDR_EXP 32
6442: PUSH
6443: LD_INT 0
6445: ST_TO_ADDR
// sDiff := false ;
6446: LD_ADDR_EXP 33
6450: PUSH
6451: LD_INT 0
6453: ST_TO_ADDR
// sFog := false ;
6454: LD_ADDR_EXP 36
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// sReset := false ;
6462: LD_ADDR_EXP 37
6466: PUSH
6467: LD_INT 0
6469: ST_TO_ADDR
// sSun := false ;
6470: LD_ADDR_EXP 38
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// sTiger := false ;
6478: LD_ADDR_EXP 34
6482: PUSH
6483: LD_INT 0
6485: ST_TO_ADDR
// sBomb := false ;
6486: LD_ADDR_EXP 35
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// sWound := false ;
6494: LD_ADDR_EXP 43
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// sBetray := false ;
6502: LD_ADDR_EXP 47
6506: PUSH
6507: LD_INT 0
6509: ST_TO_ADDR
// sContamin := false ;
6510: LD_ADDR_EXP 48
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// sOil := false ;
6518: LD_ADDR_EXP 50
6522: PUSH
6523: LD_INT 0
6525: ST_TO_ADDR
// sStu := false ;
6526: LD_ADDR_EXP 54
6530: PUSH
6531: LD_INT 0
6533: ST_TO_ADDR
// sBazooka := false ;
6534: LD_ADDR_EXP 57
6538: PUSH
6539: LD_INT 0
6541: ST_TO_ADDR
// sMortar := false ;
6542: LD_ADDR_EXP 58
6546: PUSH
6547: LD_INT 0
6549: ST_TO_ADDR
// sRanger := false ;
6550: LD_ADDR_EXP 68
6554: PUSH
6555: LD_INT 0
6557: ST_TO_ADDR
// end ;
6558: LD_VAR 0 1
6562: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6563: LD_INT 0
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
6569: PPUSH
// result := [ ] ;
6570: LD_ADDR_VAR 0 1
6574: PUSH
6575: EMPTY
6576: ST_TO_ADDR
// if campaign_id = 1 then
6577: LD_OWVAR 69
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 9523
// begin case mission_number of 1 :
6587: LD_OWVAR 70
6591: PUSH
6592: LD_INT 1
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6664
6600: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6601: LD_ADDR_VAR 0 1
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 11
6614: PUSH
6615: LD_INT 12
6617: PUSH
6618: LD_INT 15
6620: PUSH
6621: LD_INT 16
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 23
6629: PUSH
6630: LD_INT 26
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 101
6646: PUSH
6647: LD_INT 102
6649: PUSH
6650: LD_INT 106
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 9521
6664: LD_INT 2
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6744
6672: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 2
6680: PUSH
6681: LD_INT 4
6683: PUSH
6684: LD_INT 11
6686: PUSH
6687: LD_INT 12
6689: PUSH
6690: LD_INT 15
6692: PUSH
6693: LD_INT 16
6695: PUSH
6696: LD_INT 22
6698: PUSH
6699: LD_INT 23
6701: PUSH
6702: LD_INT 26
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 101
6718: PUSH
6719: LD_INT 102
6721: PUSH
6722: LD_INT 105
6724: PUSH
6725: LD_INT 106
6727: PUSH
6728: LD_INT 108
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 9521
6744: LD_INT 3
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6828
6752: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 2
6760: PUSH
6761: LD_INT 4
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: LD_INT 11
6769: PUSH
6770: LD_INT 12
6772: PUSH
6773: LD_INT 15
6775: PUSH
6776: LD_INT 16
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 26
6784: PUSH
6785: LD_INT 36
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 101
6802: PUSH
6803: LD_INT 102
6805: PUSH
6806: LD_INT 105
6808: PUSH
6809: LD_INT 106
6811: PUSH
6812: LD_INT 108
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: ST_TO_ADDR
6826: GO 9521
6828: LD_INT 4
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6920
6836: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: LD_INT 4
6847: PUSH
6848: LD_INT 5
6850: PUSH
6851: LD_INT 8
6853: PUSH
6854: LD_INT 11
6856: PUSH
6857: LD_INT 12
6859: PUSH
6860: LD_INT 15
6862: PUSH
6863: LD_INT 16
6865: PUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 23
6871: PUSH
6872: LD_INT 26
6874: PUSH
6875: LD_INT 36
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 101
6894: PUSH
6895: LD_INT 102
6897: PUSH
6898: LD_INT 105
6900: PUSH
6901: LD_INT 106
6903: PUSH
6904: LD_INT 108
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: ST_TO_ADDR
6918: GO 9521
6920: LD_INT 5
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 7028
6928: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6929: LD_ADDR_VAR 0 1
6933: PUSH
6934: LD_INT 2
6936: PUSH
6937: LD_INT 4
6939: PUSH
6940: LD_INT 5
6942: PUSH
6943: LD_INT 6
6945: PUSH
6946: LD_INT 8
6948: PUSH
6949: LD_INT 11
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: LD_INT 15
6957: PUSH
6958: LD_INT 16
6960: PUSH
6961: LD_INT 22
6963: PUSH
6964: LD_INT 23
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 26
6972: PUSH
6973: LD_INT 36
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 101
6994: PUSH
6995: LD_INT 102
6997: PUSH
6998: LD_INT 105
7000: PUSH
7001: LD_INT 106
7003: PUSH
7004: LD_INT 108
7006: PUSH
7007: LD_INT 109
7009: PUSH
7010: LD_INT 112
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: ST_TO_ADDR
7026: GO 9521
7028: LD_INT 6
7030: DOUBLE
7031: EQUAL
7032: IFTRUE 7036
7034: GO 7156
7036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7037: LD_ADDR_VAR 0 1
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: LD_INT 4
7047: PUSH
7048: LD_INT 5
7050: PUSH
7051: LD_INT 6
7053: PUSH
7054: LD_INT 8
7056: PUSH
7057: LD_INT 11
7059: PUSH
7060: LD_INT 12
7062: PUSH
7063: LD_INT 15
7065: PUSH
7066: LD_INT 16
7068: PUSH
7069: LD_INT 20
7071: PUSH
7072: LD_INT 21
7074: PUSH
7075: LD_INT 22
7077: PUSH
7078: LD_INT 23
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 26
7086: PUSH
7087: LD_INT 30
7089: PUSH
7090: LD_INT 31
7092: PUSH
7093: LD_INT 32
7095: PUSH
7096: LD_INT 36
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 101
7122: PUSH
7123: LD_INT 102
7125: PUSH
7126: LD_INT 105
7128: PUSH
7129: LD_INT 106
7131: PUSH
7132: LD_INT 108
7134: PUSH
7135: LD_INT 109
7137: PUSH
7138: LD_INT 112
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: ST_TO_ADDR
7154: GO 9521
7156: LD_INT 7
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7264
7164: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7165: LD_ADDR_VAR 0 1
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 4
7175: PUSH
7176: LD_INT 5
7178: PUSH
7179: LD_INT 7
7181: PUSH
7182: LD_INT 11
7184: PUSH
7185: LD_INT 12
7187: PUSH
7188: LD_INT 15
7190: PUSH
7191: LD_INT 16
7193: PUSH
7194: LD_INT 20
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 22
7202: PUSH
7203: LD_INT 23
7205: PUSH
7206: LD_INT 25
7208: PUSH
7209: LD_INT 26
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 101
7230: PUSH
7231: LD_INT 102
7233: PUSH
7234: LD_INT 103
7236: PUSH
7237: LD_INT 105
7239: PUSH
7240: LD_INT 106
7242: PUSH
7243: LD_INT 108
7245: PUSH
7246: LD_INT 112
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: ST_TO_ADDR
7262: GO 9521
7264: LD_INT 8
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7272
7270: GO 7400
7272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: LD_INT 6
7289: PUSH
7290: LD_INT 7
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: LD_INT 11
7298: PUSH
7299: LD_INT 12
7301: PUSH
7302: LD_INT 15
7304: PUSH
7305: LD_INT 16
7307: PUSH
7308: LD_INT 20
7310: PUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 26
7325: PUSH
7326: LD_INT 30
7328: PUSH
7329: LD_INT 31
7331: PUSH
7332: LD_INT 32
7334: PUSH
7335: LD_INT 36
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 101
7362: PUSH
7363: LD_INT 102
7365: PUSH
7366: LD_INT 103
7368: PUSH
7369: LD_INT 105
7371: PUSH
7372: LD_INT 106
7374: PUSH
7375: LD_INT 108
7377: PUSH
7378: LD_INT 109
7380: PUSH
7381: LD_INT 112
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 9521
7400: LD_INT 9
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7544
7408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 4
7419: PUSH
7420: LD_INT 5
7422: PUSH
7423: LD_INT 6
7425: PUSH
7426: LD_INT 7
7428: PUSH
7429: LD_INT 8
7431: PUSH
7432: LD_INT 11
7434: PUSH
7435: LD_INT 12
7437: PUSH
7438: LD_INT 15
7440: PUSH
7441: LD_INT 16
7443: PUSH
7444: LD_INT 20
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 23
7455: PUSH
7456: LD_INT 25
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 28
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 31
7470: PUSH
7471: LD_INT 32
7473: PUSH
7474: LD_INT 36
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 101
7502: PUSH
7503: LD_INT 102
7505: PUSH
7506: LD_INT 103
7508: PUSH
7509: LD_INT 105
7511: PUSH
7512: LD_INT 106
7514: PUSH
7515: LD_INT 108
7517: PUSH
7518: LD_INT 109
7520: PUSH
7521: LD_INT 112
7523: PUSH
7524: LD_INT 114
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: ST_TO_ADDR
7542: GO 9521
7544: LD_INT 10
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7736
7552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7553: LD_ADDR_VAR 0 1
7557: PUSH
7558: LD_INT 2
7560: PUSH
7561: LD_INT 4
7563: PUSH
7564: LD_INT 5
7566: PUSH
7567: LD_INT 6
7569: PUSH
7570: LD_INT 7
7572: PUSH
7573: LD_INT 8
7575: PUSH
7576: LD_INT 9
7578: PUSH
7579: LD_INT 10
7581: PUSH
7582: LD_INT 11
7584: PUSH
7585: LD_INT 12
7587: PUSH
7588: LD_INT 13
7590: PUSH
7591: LD_INT 14
7593: PUSH
7594: LD_INT 15
7596: PUSH
7597: LD_INT 16
7599: PUSH
7600: LD_INT 17
7602: PUSH
7603: LD_INT 18
7605: PUSH
7606: LD_INT 19
7608: PUSH
7609: LD_INT 20
7611: PUSH
7612: LD_INT 21
7614: PUSH
7615: LD_INT 22
7617: PUSH
7618: LD_INT 23
7620: PUSH
7621: LD_INT 24
7623: PUSH
7624: LD_INT 25
7626: PUSH
7627: LD_INT 26
7629: PUSH
7630: LD_INT 28
7632: PUSH
7633: LD_INT 30
7635: PUSH
7636: LD_INT 31
7638: PUSH
7639: LD_INT 32
7641: PUSH
7642: LD_INT 36
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 101
7678: PUSH
7679: LD_INT 102
7681: PUSH
7682: LD_INT 103
7684: PUSH
7685: LD_INT 104
7687: PUSH
7688: LD_INT 105
7690: PUSH
7691: LD_INT 106
7693: PUSH
7694: LD_INT 107
7696: PUSH
7697: LD_INT 108
7699: PUSH
7700: LD_INT 109
7702: PUSH
7703: LD_INT 110
7705: PUSH
7706: LD_INT 111
7708: PUSH
7709: LD_INT 112
7711: PUSH
7712: LD_INT 114
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: ST_TO_ADDR
7734: GO 9521
7736: LD_INT 11
7738: DOUBLE
7739: EQUAL
7740: IFTRUE 7744
7742: GO 7936
7744: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7745: LD_ADDR_VAR 0 1
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: LD_INT 5
7761: PUSH
7762: LD_INT 6
7764: PUSH
7765: LD_INT 7
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: LD_INT 9
7773: PUSH
7774: LD_INT 10
7776: PUSH
7777: LD_INT 11
7779: PUSH
7780: LD_INT 12
7782: PUSH
7783: LD_INT 13
7785: PUSH
7786: LD_INT 14
7788: PUSH
7789: LD_INT 15
7791: PUSH
7792: LD_INT 16
7794: PUSH
7795: LD_INT 17
7797: PUSH
7798: LD_INT 18
7800: PUSH
7801: LD_INT 19
7803: PUSH
7804: LD_INT 20
7806: PUSH
7807: LD_INT 21
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: LD_INT 24
7818: PUSH
7819: LD_INT 25
7821: PUSH
7822: LD_INT 26
7824: PUSH
7825: LD_INT 28
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 31
7833: PUSH
7834: LD_INT 32
7836: PUSH
7837: LD_INT 34
7839: PUSH
7840: LD_INT 36
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 101
7878: PUSH
7879: LD_INT 102
7881: PUSH
7882: LD_INT 103
7884: PUSH
7885: LD_INT 104
7887: PUSH
7888: LD_INT 105
7890: PUSH
7891: LD_INT 106
7893: PUSH
7894: LD_INT 107
7896: PUSH
7897: LD_INT 108
7899: PUSH
7900: LD_INT 109
7902: PUSH
7903: LD_INT 110
7905: PUSH
7906: LD_INT 111
7908: PUSH
7909: LD_INT 112
7911: PUSH
7912: LD_INT 114
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 9521
7936: LD_INT 12
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 8152
7944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_INT 1
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: LD_INT 5
7964: PUSH
7965: LD_INT 6
7967: PUSH
7968: LD_INT 7
7970: PUSH
7971: LD_INT 8
7973: PUSH
7974: LD_INT 9
7976: PUSH
7977: LD_INT 10
7979: PUSH
7980: LD_INT 11
7982: PUSH
7983: LD_INT 12
7985: PUSH
7986: LD_INT 13
7988: PUSH
7989: LD_INT 14
7991: PUSH
7992: LD_INT 15
7994: PUSH
7995: LD_INT 16
7997: PUSH
7998: LD_INT 17
8000: PUSH
8001: LD_INT 18
8003: PUSH
8004: LD_INT 19
8006: PUSH
8007: LD_INT 20
8009: PUSH
8010: LD_INT 21
8012: PUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 23
8018: PUSH
8019: LD_INT 24
8021: PUSH
8022: LD_INT 25
8024: PUSH
8025: LD_INT 26
8027: PUSH
8028: LD_INT 27
8030: PUSH
8031: LD_INT 28
8033: PUSH
8034: LD_INT 30
8036: PUSH
8037: LD_INT 31
8039: PUSH
8040: LD_INT 32
8042: PUSH
8043: LD_INT 33
8045: PUSH
8046: LD_INT 34
8048: PUSH
8049: LD_INT 36
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 101
8090: PUSH
8091: LD_INT 102
8093: PUSH
8094: LD_INT 103
8096: PUSH
8097: LD_INT 104
8099: PUSH
8100: LD_INT 105
8102: PUSH
8103: LD_INT 106
8105: PUSH
8106: LD_INT 107
8108: PUSH
8109: LD_INT 108
8111: PUSH
8112: LD_INT 109
8114: PUSH
8115: LD_INT 110
8117: PUSH
8118: LD_INT 111
8120: PUSH
8121: LD_INT 112
8123: PUSH
8124: LD_INT 113
8126: PUSH
8127: LD_INT 114
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: ST_TO_ADDR
8150: GO 9521
8152: LD_INT 13
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8356
8160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: LD_INT 3
8174: PUSH
8175: LD_INT 4
8177: PUSH
8178: LD_INT 5
8180: PUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 10
8189: PUSH
8190: LD_INT 11
8192: PUSH
8193: LD_INT 12
8195: PUSH
8196: LD_INT 14
8198: PUSH
8199: LD_INT 15
8201: PUSH
8202: LD_INT 16
8204: PUSH
8205: LD_INT 17
8207: PUSH
8208: LD_INT 18
8210: PUSH
8211: LD_INT 19
8213: PUSH
8214: LD_INT 20
8216: PUSH
8217: LD_INT 21
8219: PUSH
8220: LD_INT 22
8222: PUSH
8223: LD_INT 23
8225: PUSH
8226: LD_INT 24
8228: PUSH
8229: LD_INT 25
8231: PUSH
8232: LD_INT 26
8234: PUSH
8235: LD_INT 27
8237: PUSH
8238: LD_INT 28
8240: PUSH
8241: LD_INT 30
8243: PUSH
8244: LD_INT 31
8246: PUSH
8247: LD_INT 32
8249: PUSH
8250: LD_INT 33
8252: PUSH
8253: LD_INT 34
8255: PUSH
8256: LD_INT 36
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 101
8294: PUSH
8295: LD_INT 102
8297: PUSH
8298: LD_INT 103
8300: PUSH
8301: LD_INT 104
8303: PUSH
8304: LD_INT 105
8306: PUSH
8307: LD_INT 106
8309: PUSH
8310: LD_INT 107
8312: PUSH
8313: LD_INT 108
8315: PUSH
8316: LD_INT 109
8318: PUSH
8319: LD_INT 110
8321: PUSH
8322: LD_INT 111
8324: PUSH
8325: LD_INT 112
8327: PUSH
8328: LD_INT 113
8330: PUSH
8331: LD_INT 114
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: ST_TO_ADDR
8354: GO 9521
8356: LD_INT 14
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8364
8362: GO 8576
8364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8365: LD_ADDR_VAR 0 1
8369: PUSH
8370: LD_INT 1
8372: PUSH
8373: LD_INT 2
8375: PUSH
8376: LD_INT 3
8378: PUSH
8379: LD_INT 4
8381: PUSH
8382: LD_INT 5
8384: PUSH
8385: LD_INT 6
8387: PUSH
8388: LD_INT 7
8390: PUSH
8391: LD_INT 8
8393: PUSH
8394: LD_INT 9
8396: PUSH
8397: LD_INT 10
8399: PUSH
8400: LD_INT 11
8402: PUSH
8403: LD_INT 12
8405: PUSH
8406: LD_INT 13
8408: PUSH
8409: LD_INT 14
8411: PUSH
8412: LD_INT 15
8414: PUSH
8415: LD_INT 16
8417: PUSH
8418: LD_INT 17
8420: PUSH
8421: LD_INT 18
8423: PUSH
8424: LD_INT 19
8426: PUSH
8427: LD_INT 20
8429: PUSH
8430: LD_INT 21
8432: PUSH
8433: LD_INT 22
8435: PUSH
8436: LD_INT 23
8438: PUSH
8439: LD_INT 24
8441: PUSH
8442: LD_INT 25
8444: PUSH
8445: LD_INT 26
8447: PUSH
8448: LD_INT 27
8450: PUSH
8451: LD_INT 28
8453: PUSH
8454: LD_INT 29
8456: PUSH
8457: LD_INT 30
8459: PUSH
8460: LD_INT 31
8462: PUSH
8463: LD_INT 32
8465: PUSH
8466: LD_INT 33
8468: PUSH
8469: LD_INT 34
8471: PUSH
8472: LD_INT 36
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 101
8514: PUSH
8515: LD_INT 102
8517: PUSH
8518: LD_INT 103
8520: PUSH
8521: LD_INT 104
8523: PUSH
8524: LD_INT 105
8526: PUSH
8527: LD_INT 106
8529: PUSH
8530: LD_INT 107
8532: PUSH
8533: LD_INT 108
8535: PUSH
8536: LD_INT 109
8538: PUSH
8539: LD_INT 110
8541: PUSH
8542: LD_INT 111
8544: PUSH
8545: LD_INT 112
8547: PUSH
8548: LD_INT 113
8550: PUSH
8551: LD_INT 114
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: ST_TO_ADDR
8574: GO 9521
8576: LD_INT 15
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8796
8584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8585: LD_ADDR_VAR 0 1
8589: PUSH
8590: LD_INT 1
8592: PUSH
8593: LD_INT 2
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: LD_INT 6
8607: PUSH
8608: LD_INT 7
8610: PUSH
8611: LD_INT 8
8613: PUSH
8614: LD_INT 9
8616: PUSH
8617: LD_INT 10
8619: PUSH
8620: LD_INT 11
8622: PUSH
8623: LD_INT 12
8625: PUSH
8626: LD_INT 13
8628: PUSH
8629: LD_INT 14
8631: PUSH
8632: LD_INT 15
8634: PUSH
8635: LD_INT 16
8637: PUSH
8638: LD_INT 17
8640: PUSH
8641: LD_INT 18
8643: PUSH
8644: LD_INT 19
8646: PUSH
8647: LD_INT 20
8649: PUSH
8650: LD_INT 21
8652: PUSH
8653: LD_INT 22
8655: PUSH
8656: LD_INT 23
8658: PUSH
8659: LD_INT 24
8661: PUSH
8662: LD_INT 25
8664: PUSH
8665: LD_INT 26
8667: PUSH
8668: LD_INT 27
8670: PUSH
8671: LD_INT 28
8673: PUSH
8674: LD_INT 29
8676: PUSH
8677: LD_INT 30
8679: PUSH
8680: LD_INT 31
8682: PUSH
8683: LD_INT 32
8685: PUSH
8686: LD_INT 33
8688: PUSH
8689: LD_INT 34
8691: PUSH
8692: LD_INT 36
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 101
8734: PUSH
8735: LD_INT 102
8737: PUSH
8738: LD_INT 103
8740: PUSH
8741: LD_INT 104
8743: PUSH
8744: LD_INT 105
8746: PUSH
8747: LD_INT 106
8749: PUSH
8750: LD_INT 107
8752: PUSH
8753: LD_INT 108
8755: PUSH
8756: LD_INT 109
8758: PUSH
8759: LD_INT 110
8761: PUSH
8762: LD_INT 111
8764: PUSH
8765: LD_INT 112
8767: PUSH
8768: LD_INT 113
8770: PUSH
8771: LD_INT 114
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: ST_TO_ADDR
8794: GO 9521
8796: LD_INT 16
8798: DOUBLE
8799: EQUAL
8800: IFTRUE 8804
8802: GO 8928
8804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8805: LD_ADDR_VAR 0 1
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: LD_INT 4
8815: PUSH
8816: LD_INT 5
8818: PUSH
8819: LD_INT 7
8821: PUSH
8822: LD_INT 11
8824: PUSH
8825: LD_INT 12
8827: PUSH
8828: LD_INT 15
8830: PUSH
8831: LD_INT 16
8833: PUSH
8834: LD_INT 20
8836: PUSH
8837: LD_INT 21
8839: PUSH
8840: LD_INT 22
8842: PUSH
8843: LD_INT 23
8845: PUSH
8846: LD_INT 25
8848: PUSH
8849: LD_INT 26
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: LD_INT 32
8860: PUSH
8861: LD_INT 33
8863: PUSH
8864: LD_INT 34
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 101
8890: PUSH
8891: LD_INT 102
8893: PUSH
8894: LD_INT 103
8896: PUSH
8897: LD_INT 106
8899: PUSH
8900: LD_INT 108
8902: PUSH
8903: LD_INT 112
8905: PUSH
8906: LD_INT 113
8908: PUSH
8909: LD_INT 114
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: ST_TO_ADDR
8926: GO 9521
8928: LD_INT 17
8930: DOUBLE
8931: EQUAL
8932: IFTRUE 8936
8934: GO 9148
8936: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8937: LD_ADDR_VAR 0 1
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: LD_INT 2
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 4
8953: PUSH
8954: LD_INT 5
8956: PUSH
8957: LD_INT 6
8959: PUSH
8960: LD_INT 7
8962: PUSH
8963: LD_INT 8
8965: PUSH
8966: LD_INT 9
8968: PUSH
8969: LD_INT 10
8971: PUSH
8972: LD_INT 11
8974: PUSH
8975: LD_INT 12
8977: PUSH
8978: LD_INT 13
8980: PUSH
8981: LD_INT 14
8983: PUSH
8984: LD_INT 15
8986: PUSH
8987: LD_INT 16
8989: PUSH
8990: LD_INT 17
8992: PUSH
8993: LD_INT 18
8995: PUSH
8996: LD_INT 19
8998: PUSH
8999: LD_INT 20
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 22
9007: PUSH
9008: LD_INT 23
9010: PUSH
9011: LD_INT 24
9013: PUSH
9014: LD_INT 25
9016: PUSH
9017: LD_INT 26
9019: PUSH
9020: LD_INT 27
9022: PUSH
9023: LD_INT 28
9025: PUSH
9026: LD_INT 29
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: LD_INT 32
9037: PUSH
9038: LD_INT 33
9040: PUSH
9041: LD_INT 34
9043: PUSH
9044: LD_INT 36
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 101
9086: PUSH
9087: LD_INT 102
9089: PUSH
9090: LD_INT 103
9092: PUSH
9093: LD_INT 104
9095: PUSH
9096: LD_INT 105
9098: PUSH
9099: LD_INT 106
9101: PUSH
9102: LD_INT 107
9104: PUSH
9105: LD_INT 108
9107: PUSH
9108: LD_INT 109
9110: PUSH
9111: LD_INT 110
9113: PUSH
9114: LD_INT 111
9116: PUSH
9117: LD_INT 112
9119: PUSH
9120: LD_INT 113
9122: PUSH
9123: LD_INT 114
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: ST_TO_ADDR
9146: GO 9521
9148: LD_INT 18
9150: DOUBLE
9151: EQUAL
9152: IFTRUE 9156
9154: GO 9292
9156: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9157: LD_ADDR_VAR 0 1
9161: PUSH
9162: LD_INT 2
9164: PUSH
9165: LD_INT 4
9167: PUSH
9168: LD_INT 5
9170: PUSH
9171: LD_INT 7
9173: PUSH
9174: LD_INT 11
9176: PUSH
9177: LD_INT 12
9179: PUSH
9180: LD_INT 15
9182: PUSH
9183: LD_INT 16
9185: PUSH
9186: LD_INT 20
9188: PUSH
9189: LD_INT 21
9191: PUSH
9192: LD_INT 22
9194: PUSH
9195: LD_INT 23
9197: PUSH
9198: LD_INT 25
9200: PUSH
9201: LD_INT 26
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: LD_INT 31
9209: PUSH
9210: LD_INT 32
9212: PUSH
9213: LD_INT 33
9215: PUSH
9216: LD_INT 34
9218: PUSH
9219: LD_INT 35
9221: PUSH
9222: LD_INT 36
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 101
9250: PUSH
9251: LD_INT 102
9253: PUSH
9254: LD_INT 103
9256: PUSH
9257: LD_INT 106
9259: PUSH
9260: LD_INT 108
9262: PUSH
9263: LD_INT 112
9265: PUSH
9266: LD_INT 113
9268: PUSH
9269: LD_INT 114
9271: PUSH
9272: LD_INT 115
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: ST_TO_ADDR
9290: GO 9521
9292: LD_INT 19
9294: DOUBLE
9295: EQUAL
9296: IFTRUE 9300
9298: GO 9520
9300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9301: LD_ADDR_VAR 0 1
9305: PUSH
9306: LD_INT 1
9308: PUSH
9309: LD_INT 2
9311: PUSH
9312: LD_INT 3
9314: PUSH
9315: LD_INT 4
9317: PUSH
9318: LD_INT 5
9320: PUSH
9321: LD_INT 6
9323: PUSH
9324: LD_INT 7
9326: PUSH
9327: LD_INT 8
9329: PUSH
9330: LD_INT 9
9332: PUSH
9333: LD_INT 10
9335: PUSH
9336: LD_INT 11
9338: PUSH
9339: LD_INT 12
9341: PUSH
9342: LD_INT 13
9344: PUSH
9345: LD_INT 14
9347: PUSH
9348: LD_INT 15
9350: PUSH
9351: LD_INT 16
9353: PUSH
9354: LD_INT 17
9356: PUSH
9357: LD_INT 18
9359: PUSH
9360: LD_INT 19
9362: PUSH
9363: LD_INT 20
9365: PUSH
9366: LD_INT 21
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_INT 23
9374: PUSH
9375: LD_INT 24
9377: PUSH
9378: LD_INT 25
9380: PUSH
9381: LD_INT 26
9383: PUSH
9384: LD_INT 27
9386: PUSH
9387: LD_INT 28
9389: PUSH
9390: LD_INT 29
9392: PUSH
9393: LD_INT 30
9395: PUSH
9396: LD_INT 31
9398: PUSH
9399: LD_INT 32
9401: PUSH
9402: LD_INT 33
9404: PUSH
9405: LD_INT 34
9407: PUSH
9408: LD_INT 35
9410: PUSH
9411: LD_INT 36
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 101
9454: PUSH
9455: LD_INT 102
9457: PUSH
9458: LD_INT 103
9460: PUSH
9461: LD_INT 104
9463: PUSH
9464: LD_INT 105
9466: PUSH
9467: LD_INT 106
9469: PUSH
9470: LD_INT 107
9472: PUSH
9473: LD_INT 108
9475: PUSH
9476: LD_INT 109
9478: PUSH
9479: LD_INT 110
9481: PUSH
9482: LD_INT 111
9484: PUSH
9485: LD_INT 112
9487: PUSH
9488: LD_INT 113
9490: PUSH
9491: LD_INT 114
9493: PUSH
9494: LD_INT 115
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: ST_TO_ADDR
9518: GO 9521
9520: POP
// end else
9521: GO 9740
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_INT 1
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: LD_INT 4
9539: PUSH
9540: LD_INT 5
9542: PUSH
9543: LD_INT 6
9545: PUSH
9546: LD_INT 7
9548: PUSH
9549: LD_INT 8
9551: PUSH
9552: LD_INT 9
9554: PUSH
9555: LD_INT 10
9557: PUSH
9558: LD_INT 11
9560: PUSH
9561: LD_INT 12
9563: PUSH
9564: LD_INT 13
9566: PUSH
9567: LD_INT 14
9569: PUSH
9570: LD_INT 15
9572: PUSH
9573: LD_INT 16
9575: PUSH
9576: LD_INT 17
9578: PUSH
9579: LD_INT 18
9581: PUSH
9582: LD_INT 19
9584: PUSH
9585: LD_INT 20
9587: PUSH
9588: LD_INT 21
9590: PUSH
9591: LD_INT 22
9593: PUSH
9594: LD_INT 23
9596: PUSH
9597: LD_INT 24
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 26
9605: PUSH
9606: LD_INT 27
9608: PUSH
9609: LD_INT 28
9611: PUSH
9612: LD_INT 29
9614: PUSH
9615: LD_INT 30
9617: PUSH
9618: LD_INT 31
9620: PUSH
9621: LD_INT 32
9623: PUSH
9624: LD_INT 33
9626: PUSH
9627: LD_INT 34
9629: PUSH
9630: LD_INT 35
9632: PUSH
9633: LD_INT 36
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 101
9676: PUSH
9677: LD_INT 102
9679: PUSH
9680: LD_INT 103
9682: PUSH
9683: LD_INT 104
9685: PUSH
9686: LD_INT 105
9688: PUSH
9689: LD_INT 106
9691: PUSH
9692: LD_INT 107
9694: PUSH
9695: LD_INT 108
9697: PUSH
9698: LD_INT 109
9700: PUSH
9701: LD_INT 110
9703: PUSH
9704: LD_INT 111
9706: PUSH
9707: LD_INT 112
9709: PUSH
9710: LD_INT 113
9712: PUSH
9713: LD_INT 114
9715: PUSH
9716: LD_INT 115
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: ST_TO_ADDR
// if result then
9740: LD_VAR 0 1
9744: IFFALSE 10033
// begin normal :=  ;
9746: LD_ADDR_VAR 0 3
9750: PUSH
9751: LD_STRING 
9753: ST_TO_ADDR
// hardcore :=  ;
9754: LD_ADDR_VAR 0 4
9758: PUSH
9759: LD_STRING 
9761: ST_TO_ADDR
// for i = 1 to normalCounter do
9762: LD_ADDR_VAR 0 5
9766: PUSH
9767: DOUBLE
9768: LD_INT 1
9770: DEC
9771: ST_TO_ADDR
9772: LD_EXP 16
9776: PUSH
9777: FOR_TO
9778: IFFALSE 9879
// begin tmp := 0 ;
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: LD_STRING 0
9787: ST_TO_ADDR
// if result [ 1 ] then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_INT 1
9795: ARRAY
9796: IFFALSE 9861
// if result [ 1 ] [ 1 ] = i then
9798: LD_VAR 0 1
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: PUSH
9807: LD_INT 1
9809: ARRAY
9810: PUSH
9811: LD_VAR 0 5
9815: EQUAL
9816: IFFALSE 9861
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9818: LD_ADDR_VAR 0 1
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: LD_INT 1
9830: PPUSH
9831: LD_VAR 0 1
9835: PUSH
9836: LD_INT 1
9838: ARRAY
9839: PPUSH
9840: LD_INT 1
9842: PPUSH
9843: CALL_OW 3
9847: PPUSH
9848: CALL_OW 1
9852: ST_TO_ADDR
// tmp := 1 ;
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: LD_STRING 1
9860: ST_TO_ADDR
// end ; normal := normal & tmp ;
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: LD_VAR 0 3
9870: PUSH
9871: LD_VAR 0 2
9875: STR
9876: ST_TO_ADDR
// end ;
9877: GO 9777
9879: POP
9880: POP
// for i = 1 to hardcoreCounter do
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: DOUBLE
9887: LD_INT 1
9889: DEC
9890: ST_TO_ADDR
9891: LD_EXP 17
9895: PUSH
9896: FOR_TO
9897: IFFALSE 10002
// begin tmp := 0 ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_STRING 0
9906: ST_TO_ADDR
// if result [ 2 ] then
9907: LD_VAR 0 1
9911: PUSH
9912: LD_INT 2
9914: ARRAY
9915: IFFALSE 9984
// if result [ 2 ] [ 1 ] = 100 + i then
9917: LD_VAR 0 1
9921: PUSH
9922: LD_INT 2
9924: ARRAY
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PUSH
9930: LD_INT 100
9932: PUSH
9933: LD_VAR 0 5
9937: PLUS
9938: EQUAL
9939: IFFALSE 9984
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9941: LD_ADDR_VAR 0 1
9945: PUSH
9946: LD_VAR 0 1
9950: PPUSH
9951: LD_INT 2
9953: PPUSH
9954: LD_VAR 0 1
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: PPUSH
9963: LD_INT 1
9965: PPUSH
9966: CALL_OW 3
9970: PPUSH
9971: CALL_OW 1
9975: ST_TO_ADDR
// tmp := 1 ;
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_STRING 1
9983: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 2
9998: STR
9999: ST_TO_ADDR
// end ;
10000: GO 9896
10002: POP
10003: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10004: LD_STRING getStreamItemsFromMission("
10006: PUSH
10007: LD_VAR 0 3
10011: STR
10012: PUSH
10013: LD_STRING ","
10015: STR
10016: PUSH
10017: LD_VAR 0 4
10021: STR
10022: PUSH
10023: LD_STRING ")
10025: STR
10026: PPUSH
10027: CALL_OW 559
// end else
10031: GO 10040
// ToLua ( getStreamItemsFromMission("","") ) ;
10033: LD_STRING getStreamItemsFromMission("","")
10035: PPUSH
10036: CALL_OW 559
// end ;
10040: LD_VAR 0 1
10044: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10045: LD_EXP 15
10049: PUSH
10050: LD_EXP 20
10054: AND
10055: IFFALSE 10179
10057: GO 10059
10059: DISABLE
10060: LD_INT 0
10062: PPUSH
10063: PPUSH
// begin enable ;
10064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10065: LD_ADDR_VAR 0 2
10069: PUSH
10070: LD_INT 22
10072: PUSH
10073: LD_OWVAR 2
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: LD_INT 34
10087: PUSH
10088: LD_INT 7
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 34
10097: PUSH
10098: LD_INT 45
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 34
10107: PUSH
10108: LD_INT 28
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 34
10117: PUSH
10118: LD_INT 47
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 69
10140: ST_TO_ADDR
// if not tmp then
10141: LD_VAR 0 2
10145: NOT
10146: IFFALSE 10150
// exit ;
10148: GO 10179
// for i in tmp do
10150: LD_ADDR_VAR 0 1
10154: PUSH
10155: LD_VAR 0 2
10159: PUSH
10160: FOR_IN
10161: IFFALSE 10177
// begin SetLives ( i , 0 ) ;
10163: LD_VAR 0 1
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL_OW 234
// end ;
10175: GO 10160
10177: POP
10178: POP
// end ;
10179: PPOPN 2
10181: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10182: LD_EXP 15
10186: PUSH
10187: LD_EXP 21
10191: AND
10192: IFFALSE 10276
10194: GO 10196
10196: DISABLE
10197: LD_INT 0
10199: PPUSH
10200: PPUSH
// begin enable ;
10201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10202: LD_ADDR_VAR 0 2
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_OWVAR 2
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 32
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 69
10237: ST_TO_ADDR
// if not tmp then
10238: LD_VAR 0 2
10242: NOT
10243: IFFALSE 10247
// exit ;
10245: GO 10276
// for i in tmp do
10247: LD_ADDR_VAR 0 1
10251: PUSH
10252: LD_VAR 0 2
10256: PUSH
10257: FOR_IN
10258: IFFALSE 10274
// begin SetLives ( i , 0 ) ;
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 234
// end ;
10272: GO 10257
10274: POP
10275: POP
// end ;
10276: PPOPN 2
10278: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10279: LD_EXP 15
10283: PUSH
10284: LD_EXP 18
10288: AND
10289: IFFALSE 10382
10291: GO 10293
10293: DISABLE
10294: LD_INT 0
10296: PPUSH
// begin enable ;
10297: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10298: LD_ADDR_VAR 0 1
10302: PUSH
10303: LD_INT 22
10305: PUSH
10306: LD_OWVAR 2
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: LD_INT 25
10320: PUSH
10321: LD_INT 5
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 25
10330: PUSH
10331: LD_INT 9
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 25
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 69
10362: PUSH
10363: FOR_IN
10364: IFFALSE 10380
// begin SetClass ( i , 1 ) ;
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 336
// end ;
10378: GO 10363
10380: POP
10381: POP
// end ;
10382: PPOPN 1
10384: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10385: LD_EXP 15
10389: PUSH
10390: LD_EXP 19
10394: AND
10395: PUSH
10396: LD_OWVAR 65
10400: PUSH
10401: LD_INT 7
10403: LESS
10404: AND
10405: IFFALSE 10419
10407: GO 10409
10409: DISABLE
// begin enable ;
10410: ENABLE
// game_speed := 7 ;
10411: LD_ADDR_OWVAR 65
10415: PUSH
10416: LD_INT 7
10418: ST_TO_ADDR
// end ;
10419: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10420: LD_EXP 15
10424: PUSH
10425: LD_EXP 22
10429: AND
10430: IFFALSE 10632
10432: GO 10434
10434: DISABLE
10435: LD_INT 0
10437: PPUSH
10438: PPUSH
10439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10440: LD_ADDR_VAR 0 3
10444: PUSH
10445: LD_INT 81
10447: PUSH
10448: LD_OWVAR 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 21
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: ST_TO_ADDR
// if not tmp then
10476: LD_VAR 0 3
10480: NOT
10481: IFFALSE 10485
// exit ;
10483: GO 10632
// if tmp > 5 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 5
10492: GREATER
10493: IFFALSE 10505
// k := 5 else
10495: LD_ADDR_VAR 0 2
10499: PUSH
10500: LD_INT 5
10502: ST_TO_ADDR
10503: GO 10515
// k := tmp ;
10505: LD_ADDR_VAR 0 2
10509: PUSH
10510: LD_VAR 0 3
10514: ST_TO_ADDR
// for i := 1 to k do
10515: LD_ADDR_VAR 0 1
10519: PUSH
10520: DOUBLE
10521: LD_INT 1
10523: DEC
10524: ST_TO_ADDR
10525: LD_VAR 0 2
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10630
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10533: LD_VAR 0 3
10537: PUSH
10538: LD_VAR 0 1
10542: ARRAY
10543: PPUSH
10544: LD_VAR 0 1
10548: PUSH
10549: LD_INT 4
10551: MOD
10552: PUSH
10553: LD_INT 1
10555: PLUS
10556: PPUSH
10557: CALL_OW 259
10561: PUSH
10562: LD_INT 10
10564: LESS
10565: IFFALSE 10628
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10567: LD_VAR 0 3
10571: PUSH
10572: LD_VAR 0 1
10576: ARRAY
10577: PPUSH
10578: LD_VAR 0 1
10582: PUSH
10583: LD_INT 4
10585: MOD
10586: PUSH
10587: LD_INT 1
10589: PLUS
10590: PPUSH
10591: LD_VAR 0 3
10595: PUSH
10596: LD_VAR 0 1
10600: ARRAY
10601: PPUSH
10602: LD_VAR 0 1
10606: PUSH
10607: LD_INT 4
10609: MOD
10610: PUSH
10611: LD_INT 1
10613: PLUS
10614: PPUSH
10615: CALL_OW 259
10619: PUSH
10620: LD_INT 1
10622: PLUS
10623: PPUSH
10624: CALL_OW 237
10628: GO 10530
10630: POP
10631: POP
// end ;
10632: PPOPN 3
10634: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10635: LD_EXP 15
10639: PUSH
10640: LD_EXP 23
10644: AND
10645: IFFALSE 10665
10647: GO 10649
10649: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10650: LD_INT 4
10652: PPUSH
10653: LD_OWVAR 2
10657: PPUSH
10658: LD_INT 0
10660: PPUSH
10661: CALL_OW 324
10665: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10666: LD_EXP 15
10670: PUSH
10671: LD_EXP 52
10675: AND
10676: IFFALSE 10696
10678: GO 10680
10680: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10681: LD_INT 19
10683: PPUSH
10684: LD_OWVAR 2
10688: PPUSH
10689: LD_INT 0
10691: PPUSH
10692: CALL_OW 324
10696: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10697: LD_EXP 15
10701: PUSH
10702: LD_EXP 24
10706: AND
10707: IFFALSE 10809
10709: GO 10711
10711: DISABLE
10712: LD_INT 0
10714: PPUSH
10715: PPUSH
// begin enable ;
10716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10717: LD_ADDR_VAR 0 2
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_OWVAR 2
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 34
10739: PUSH
10740: LD_INT 11
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 34
10749: PUSH
10750: LD_INT 30
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// if not tmp then
10771: LD_VAR 0 2
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10809
// for i in tmp do
10780: LD_ADDR_VAR 0 1
10784: PUSH
10785: LD_VAR 0 2
10789: PUSH
10790: FOR_IN
10791: IFFALSE 10807
// begin SetLives ( i , 0 ) ;
10793: LD_VAR 0 1
10797: PPUSH
10798: LD_INT 0
10800: PPUSH
10801: CALL_OW 234
// end ;
10805: GO 10790
10807: POP
10808: POP
// end ;
10809: PPOPN 2
10811: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10812: LD_EXP 15
10816: PUSH
10817: LD_EXP 25
10821: AND
10822: IFFALSE 10842
10824: GO 10826
10826: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10827: LD_INT 32
10829: PPUSH
10830: LD_OWVAR 2
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 324
10842: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10843: LD_EXP 15
10847: PUSH
10848: LD_EXP 26
10852: AND
10853: IFFALSE 11034
10855: GO 10857
10857: DISABLE
10858: LD_INT 0
10860: PPUSH
10861: PPUSH
10862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10863: LD_ADDR_VAR 0 2
10867: PUSH
10868: LD_INT 22
10870: PUSH
10871: LD_OWVAR 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PPUSH
10894: CALL_OW 69
10898: ST_TO_ADDR
// if not tmp then
10899: LD_VAR 0 2
10903: NOT
10904: IFFALSE 10908
// exit ;
10906: GO 11034
// side := 0 ;
10908: LD_ADDR_VAR 0 3
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// for i := 1 to 8 do
10916: LD_ADDR_VAR 0 1
10920: PUSH
10921: DOUBLE
10922: LD_INT 1
10924: DEC
10925: ST_TO_ADDR
10926: LD_INT 8
10928: PUSH
10929: FOR_TO
10930: IFFALSE 10978
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10932: LD_OWVAR 2
10936: PUSH
10937: LD_VAR 0 1
10941: NONEQUAL
10942: PUSH
10943: LD_OWVAR 2
10947: PPUSH
10948: LD_VAR 0 1
10952: PPUSH
10953: CALL_OW 81
10957: PUSH
10958: LD_INT 2
10960: EQUAL
10961: AND
10962: IFFALSE 10976
// begin side := i ;
10964: LD_ADDR_VAR 0 3
10968: PUSH
10969: LD_VAR 0 1
10973: ST_TO_ADDR
// break ;
10974: GO 10978
// end ;
10976: GO 10929
10978: POP
10979: POP
// if not side then
10980: LD_VAR 0 3
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i := 1 to tmp do
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: DOUBLE
10995: LD_INT 1
10997: DEC
10998: ST_TO_ADDR
10999: LD_VAR 0 2
11003: PUSH
11004: FOR_TO
11005: IFFALSE 11032
// if Prob ( 60 ) then
11007: LD_INT 60
11009: PPUSH
11010: CALL_OW 13
11014: IFFALSE 11030
// SetSide ( i , side ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: CALL_OW 235
11030: GO 11004
11032: POP
11033: POP
// end ;
11034: PPOPN 3
11036: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11037: LD_EXP 15
11041: PUSH
11042: LD_EXP 28
11046: AND
11047: IFFALSE 11166
11049: GO 11051
11051: DISABLE
11052: LD_INT 0
11054: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11055: LD_ADDR_VAR 0 1
11059: PUSH
11060: LD_INT 22
11062: PUSH
11063: LD_OWVAR 2
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 21
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 3
11084: PUSH
11085: LD_INT 23
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 69
11108: PUSH
11109: FOR_IN
11110: IFFALSE 11164
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 257
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: LD_INT 2
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 4
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: IN
11140: IFFALSE 11162
// SetClass ( un , rand ( 1 , 4 ) ) ;
11142: LD_VAR 0 1
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: LD_INT 4
11152: PPUSH
11153: CALL_OW 12
11157: PPUSH
11158: CALL_OW 336
11162: GO 11109
11164: POP
11165: POP
// end ;
11166: PPOPN 1
11168: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11169: LD_EXP 15
11173: PUSH
11174: LD_EXP 27
11178: AND
11179: IFFALSE 11258
11181: GO 11183
11183: DISABLE
11184: LD_INT 0
11186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11187: LD_ADDR_VAR 0 1
11191: PUSH
11192: LD_INT 22
11194: PUSH
11195: LD_OWVAR 2
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 21
11206: PUSH
11207: LD_INT 3
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 69
11222: ST_TO_ADDR
// if not tmp then
11223: LD_VAR 0 1
11227: NOT
11228: IFFALSE 11232
// exit ;
11230: GO 11258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11232: LD_VAR 0 1
11236: PUSH
11237: LD_INT 1
11239: PPUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 12
11249: ARRAY
11250: PPUSH
11251: LD_INT 100
11253: PPUSH
11254: CALL_OW 234
// end ;
11258: PPOPN 1
11260: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11261: LD_EXP 15
11265: PUSH
11266: LD_EXP 29
11270: AND
11271: IFFALSE 11369
11273: GO 11275
11275: DISABLE
11276: LD_INT 0
11278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_OWVAR 2
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 21
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PPUSH
11310: CALL_OW 69
11314: ST_TO_ADDR
// if not tmp then
11315: LD_VAR 0 1
11319: NOT
11320: IFFALSE 11324
// exit ;
11322: GO 11369
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11324: LD_VAR 0 1
11328: PUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 12
11341: ARRAY
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 4
11348: PPUSH
11349: CALL_OW 12
11353: PPUSH
11354: LD_INT 3000
11356: PPUSH
11357: LD_INT 9000
11359: PPUSH
11360: CALL_OW 12
11364: PPUSH
11365: CALL_OW 492
// end ;
11369: PPOPN 1
11371: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11372: LD_EXP 15
11376: PUSH
11377: LD_EXP 30
11381: AND
11382: IFFALSE 11402
11384: GO 11386
11386: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11387: LD_INT 1
11389: PPUSH
11390: LD_OWVAR 2
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 324
11402: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11403: LD_EXP 15
11407: PUSH
11408: LD_EXP 31
11412: AND
11413: IFFALSE 11496
11415: GO 11417
11417: DISABLE
11418: LD_INT 0
11420: PPUSH
11421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_INT 22
11429: PUSH
11430: LD_OWVAR 2
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 21
11441: PUSH
11442: LD_INT 3
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PPUSH
11453: CALL_OW 69
11457: ST_TO_ADDR
// if not tmp then
11458: LD_VAR 0 2
11462: NOT
11463: IFFALSE 11467
// exit ;
11465: GO 11496
// for i in tmp do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: FOR_IN
11478: IFFALSE 11494
// SetBLevel ( i , 10 ) ;
11480: LD_VAR 0 1
11484: PPUSH
11485: LD_INT 10
11487: PPUSH
11488: CALL_OW 241
11492: GO 11477
11494: POP
11495: POP
// end ;
11496: PPOPN 2
11498: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11499: LD_EXP 15
11503: PUSH
11504: LD_EXP 32
11508: AND
11509: IFFALSE 11620
11511: GO 11513
11513: DISABLE
11514: LD_INT 0
11516: PPUSH
11517: PPUSH
11518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11519: LD_ADDR_VAR 0 3
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_OWVAR 2
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 25
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: ST_TO_ADDR
// if not tmp then
11555: LD_VAR 0 3
11559: NOT
11560: IFFALSE 11564
// exit ;
11562: GO 11620
// un := tmp [ rand ( 1 , tmp ) ] ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_VAR 0 3
11573: PUSH
11574: LD_INT 1
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: CALL_OW 12
11586: ARRAY
11587: ST_TO_ADDR
// if Crawls ( un ) then
11588: LD_VAR 0 2
11592: PPUSH
11593: CALL_OW 318
11597: IFFALSE 11608
// ComWalk ( un ) ;
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11608: LD_VAR 0 2
11612: PPUSH
11613: LD_INT 5
11615: PPUSH
11616: CALL_OW 336
// end ;
11620: PPOPN 3
11622: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11623: LD_EXP 15
11627: PUSH
11628: LD_EXP 33
11632: AND
11633: PUSH
11634: LD_OWVAR 67
11638: PUSH
11639: LD_INT 3
11641: LESS
11642: AND
11643: IFFALSE 11662
11645: GO 11647
11647: DISABLE
// Difficulty := Difficulty + 1 ;
11648: LD_ADDR_OWVAR 67
11652: PUSH
11653: LD_OWVAR 67
11657: PUSH
11658: LD_INT 1
11660: PLUS
11661: ST_TO_ADDR
11662: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11663: LD_EXP 15
11667: PUSH
11668: LD_EXP 34
11672: AND
11673: IFFALSE 11776
11675: GO 11677
11677: DISABLE
11678: LD_INT 0
11680: PPUSH
// begin for i := 1 to 5 do
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: DOUBLE
11687: LD_INT 1
11689: DEC
11690: ST_TO_ADDR
11691: LD_INT 5
11693: PUSH
11694: FOR_TO
11695: IFFALSE 11774
// begin uc_nation := nation_nature ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 0
11704: ST_TO_ADDR
// uc_side := 0 ;
11705: LD_ADDR_OWVAR 20
11709: PUSH
11710: LD_INT 0
11712: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11713: LD_ADDR_OWVAR 29
11717: PUSH
11718: LD_INT 12
11720: PUSH
11721: LD_INT 12
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: ST_TO_ADDR
// hc_agressivity := 20 ;
11728: LD_ADDR_OWVAR 35
11732: PUSH
11733: LD_INT 20
11735: ST_TO_ADDR
// hc_class := class_tiger ;
11736: LD_ADDR_OWVAR 28
11740: PUSH
11741: LD_INT 14
11743: ST_TO_ADDR
// hc_gallery :=  ;
11744: LD_ADDR_OWVAR 33
11748: PUSH
11749: LD_STRING 
11751: ST_TO_ADDR
// hc_name :=  ;
11752: LD_ADDR_OWVAR 26
11756: PUSH
11757: LD_STRING 
11759: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11760: CALL_OW 44
11764: PPUSH
11765: LD_INT 0
11767: PPUSH
11768: CALL_OW 51
// end ;
11772: GO 11694
11774: POP
11775: POP
// end ;
11776: PPOPN 1
11778: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11779: LD_EXP 15
11783: PUSH
11784: LD_EXP 35
11788: AND
11789: IFFALSE 11798
11791: GO 11793
11793: DISABLE
// StreamSibBomb ;
11794: CALL 11799 0 0
11798: END
// export function StreamSibBomb ; var i , x , y ; begin
11799: LD_INT 0
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
// result := false ;
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// for i := 1 to 16 do
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: DOUBLE
11819: LD_INT 1
11821: DEC
11822: ST_TO_ADDR
11823: LD_INT 16
11825: PUSH
11826: FOR_TO
11827: IFFALSE 12026
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_INT 10
11836: PUSH
11837: LD_INT 20
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 40
11845: PUSH
11846: LD_INT 50
11848: PUSH
11849: LD_INT 60
11851: PUSH
11852: LD_INT 70
11854: PUSH
11855: LD_INT 80
11857: PUSH
11858: LD_INT 90
11860: PUSH
11861: LD_INT 100
11863: PUSH
11864: LD_INT 110
11866: PUSH
11867: LD_INT 120
11869: PUSH
11870: LD_INT 130
11872: PUSH
11873: LD_INT 140
11875: PUSH
11876: LD_INT 150
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 15
11901: PPUSH
11902: CALL_OW 12
11906: ARRAY
11907: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11908: LD_ADDR_VAR 0 4
11912: PUSH
11913: LD_INT 10
11915: PUSH
11916: LD_INT 20
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 40
11924: PUSH
11925: LD_INT 50
11927: PUSH
11928: LD_INT 60
11930: PUSH
11931: LD_INT 70
11933: PUSH
11934: LD_INT 80
11936: PUSH
11937: LD_INT 90
11939: PUSH
11940: LD_INT 100
11942: PUSH
11943: LD_INT 110
11945: PUSH
11946: LD_INT 120
11948: PUSH
11949: LD_INT 130
11951: PUSH
11952: LD_INT 140
11954: PUSH
11955: LD_INT 150
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_INT 15
11980: PPUSH
11981: CALL_OW 12
11985: ARRAY
11986: ST_TO_ADDR
// if ValidHex ( x , y ) then
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_VAR 0 4
11996: PPUSH
11997: CALL_OW 488
12001: IFFALSE 12024
// begin result := [ x , y ] ;
12003: LD_ADDR_VAR 0 1
12007: PUSH
12008: LD_VAR 0 3
12012: PUSH
12013: LD_VAR 0 4
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: ST_TO_ADDR
// break ;
12022: GO 12026
// end ; end ;
12024: GO 11826
12026: POP
12027: POP
// if result then
12028: LD_VAR 0 1
12032: IFFALSE 12092
// begin ToLua ( playSibBomb() ) ;
12034: LD_STRING playSibBomb()
12036: PPUSH
12037: CALL_OW 559
// wait ( 0 0$14 ) ;
12041: LD_INT 490
12043: PPUSH
12044: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 1
12055: ARRAY
12056: PPUSH
12057: LD_VAR 0 1
12061: PUSH
12062: LD_INT 2
12064: ARRAY
12065: PPUSH
12066: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12070: LD_VAR 0 1
12074: PUSH
12075: LD_INT 1
12077: ARRAY
12078: PPUSH
12079: LD_VAR 0 1
12083: PUSH
12084: LD_INT 2
12086: ARRAY
12087: PPUSH
12088: CALL_OW 429
// end ; end ;
12092: LD_VAR 0 1
12096: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12097: LD_EXP 15
12101: PUSH
12102: LD_EXP 37
12106: AND
12107: IFFALSE 12119
12109: GO 12111
12111: DISABLE
// YouLost (  ) ;
12112: LD_STRING 
12114: PPUSH
12115: CALL_OW 104
12119: END
// every 0 0$1 trigger StreamModeActive and sFog do
12120: LD_EXP 15
12124: PUSH
12125: LD_EXP 36
12129: AND
12130: IFFALSE 12144
12132: GO 12134
12134: DISABLE
// FogOff ( your_side ) ;
12135: LD_OWVAR 2
12139: PPUSH
12140: CALL_OW 344
12144: END
// every 0 0$1 trigger StreamModeActive and sSun do
12145: LD_EXP 15
12149: PUSH
12150: LD_EXP 38
12154: AND
12155: IFFALSE 12183
12157: GO 12159
12159: DISABLE
// begin solar_recharge_percent := 0 ;
12160: LD_ADDR_OWVAR 79
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12168: LD_INT 10500
12170: PPUSH
12171: CALL_OW 67
// solar_recharge_percent := 100 ;
12175: LD_ADDR_OWVAR 79
12179: PUSH
12180: LD_INT 100
12182: ST_TO_ADDR
// end ;
12183: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12184: LD_EXP 15
12188: PUSH
12189: LD_EXP 39
12193: AND
12194: IFFALSE 12433
12196: GO 12198
12198: DISABLE
12199: LD_INT 0
12201: PPUSH
12202: PPUSH
12203: PPUSH
// begin tmp := [ ] ;
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: EMPTY
12210: ST_TO_ADDR
// for i := 1 to 6 do
12211: LD_ADDR_VAR 0 1
12215: PUSH
12216: DOUBLE
12217: LD_INT 1
12219: DEC
12220: ST_TO_ADDR
12221: LD_INT 6
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12330
// begin uc_nation := nation_nature ;
12227: LD_ADDR_OWVAR 21
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// uc_side := 0 ;
12235: LD_ADDR_OWVAR 20
12239: PUSH
12240: LD_INT 0
12242: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12243: LD_ADDR_OWVAR 29
12247: PUSH
12248: LD_INT 12
12250: PUSH
12251: LD_INT 12
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: ST_TO_ADDR
// hc_agressivity := 20 ;
12258: LD_ADDR_OWVAR 35
12262: PUSH
12263: LD_INT 20
12265: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12266: LD_ADDR_OWVAR 28
12270: PUSH
12271: LD_INT 17
12273: ST_TO_ADDR
// hc_gallery :=  ;
12274: LD_ADDR_OWVAR 33
12278: PUSH
12279: LD_STRING 
12281: ST_TO_ADDR
// hc_name :=  ;
12282: LD_ADDR_OWVAR 26
12286: PUSH
12287: LD_STRING 
12289: ST_TO_ADDR
// un := CreateHuman ;
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: CALL_OW 44
12299: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12300: LD_VAR 0 2
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 51
// tmp := tmp ^ un ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_VAR 0 3
12321: PUSH
12322: LD_VAR 0 2
12326: ADD
12327: ST_TO_ADDR
// end ;
12328: GO 12224
12330: POP
12331: POP
// repeat wait ( 0 0$1 ) ;
12332: LD_INT 35
12334: PPUSH
12335: CALL_OW 67
// for un in tmp do
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_VAR 0 3
12348: PUSH
12349: FOR_IN
12350: IFFALSE 12424
// begin if IsDead ( un ) then
12352: LD_VAR 0 2
12356: PPUSH
12357: CALL_OW 301
12361: IFFALSE 12381
// begin tmp := tmp diff un ;
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_VAR 0 3
12372: PUSH
12373: LD_VAR 0 2
12377: DIFF
12378: ST_TO_ADDR
// continue ;
12379: GO 12349
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12381: LD_VAR 0 2
12385: PPUSH
12386: LD_INT 3
12388: PUSH
12389: LD_INT 22
12391: PUSH
12392: LD_INT 0
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PPUSH
12403: CALL_OW 69
12407: PPUSH
12408: LD_VAR 0 2
12412: PPUSH
12413: CALL_OW 74
12417: PPUSH
12418: CALL_OW 115
// end ;
12422: GO 12349
12424: POP
12425: POP
// until not tmp ;
12426: LD_VAR 0 3
12430: NOT
12431: IFFALSE 12332
// end ;
12433: PPOPN 3
12435: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12436: LD_EXP 15
12440: PUSH
12441: LD_EXP 40
12445: AND
12446: IFFALSE 12500
12448: GO 12450
12450: DISABLE
// begin ToLua ( displayTroll(); ) ;
12451: LD_STRING displayTroll();
12453: PPUSH
12454: CALL_OW 559
// wait ( 3 3$00 ) ;
12458: LD_INT 6300
12460: PPUSH
12461: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12465: LD_STRING hideTroll();
12467: PPUSH
12468: CALL_OW 559
// wait ( 1 1$00 ) ;
12472: LD_INT 2100
12474: PPUSH
12475: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12479: LD_STRING displayTroll();
12481: PPUSH
12482: CALL_OW 559
// wait ( 1 1$00 ) ;
12486: LD_INT 2100
12488: PPUSH
12489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12493: LD_STRING hideTroll();
12495: PPUSH
12496: CALL_OW 559
// end ;
12500: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12501: LD_EXP 15
12505: PUSH
12506: LD_EXP 41
12510: AND
12511: IFFALSE 12574
12513: GO 12515
12515: DISABLE
12516: LD_INT 0
12518: PPUSH
// begin p := 0 ;
12519: LD_ADDR_VAR 0 1
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// repeat game_speed := 1 ;
12527: LD_ADDR_OWVAR 65
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12535: LD_INT 35
12537: PPUSH
12538: CALL_OW 67
// p := p + 1 ;
12542: LD_ADDR_VAR 0 1
12546: PUSH
12547: LD_VAR 0 1
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: ST_TO_ADDR
// until p >= 60 ;
12556: LD_VAR 0 1
12560: PUSH
12561: LD_INT 60
12563: GREATEREQUAL
12564: IFFALSE 12527
// game_speed := 4 ;
12566: LD_ADDR_OWVAR 65
12570: PUSH
12571: LD_INT 4
12573: ST_TO_ADDR
// end ;
12574: PPOPN 1
12576: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12577: LD_EXP 15
12581: PUSH
12582: LD_EXP 42
12586: AND
12587: IFFALSE 12733
12589: GO 12591
12591: DISABLE
12592: LD_INT 0
12594: PPUSH
12595: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12596: LD_ADDR_VAR 0 1
12600: PUSH
12601: LD_INT 22
12603: PUSH
12604: LD_OWVAR 2
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 0
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 30
12628: PUSH
12629: LD_INT 1
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: ST_TO_ADDR
// if not depot then
12650: LD_VAR 0 1
12654: NOT
12655: IFFALSE 12659
// exit ;
12657: GO 12733
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_INT 1
12671: PPUSH
12672: LD_VAR 0 1
12676: PPUSH
12677: CALL_OW 12
12681: ARRAY
12682: PPUSH
12683: CALL_OW 274
12687: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12688: LD_VAR 0 2
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: LD_INT 0
12698: PPUSH
12699: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12703: LD_VAR 0 2
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: LD_INT 0
12713: PPUSH
12714: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_INT 3
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 277
// end ;
12733: PPOPN 2
12735: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12736: LD_EXP 15
12740: PUSH
12741: LD_EXP 43
12745: AND
12746: IFFALSE 12843
12748: GO 12750
12750: DISABLE
12751: LD_INT 0
12753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12754: LD_ADDR_VAR 0 1
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_OWVAR 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 21
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: LD_INT 23
12786: PUSH
12787: LD_INT 0
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// if not tmp then
12808: LD_VAR 0 1
12812: NOT
12813: IFFALSE 12817
// exit ;
12815: GO 12843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12817: LD_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 12
12834: ARRAY
12835: PPUSH
12836: LD_INT 200
12838: PPUSH
12839: CALL_OW 234
// end ;
12843: PPOPN 1
12845: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12846: LD_EXP 15
12850: PUSH
12851: LD_EXP 44
12855: AND
12856: IFFALSE 12935
12858: GO 12860
12860: DISABLE
12861: LD_INT 0
12863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12864: LD_ADDR_VAR 0 1
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 1
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12909: LD_VAR 0 1
12913: PUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_VAR 0 1
12921: PPUSH
12922: CALL_OW 12
12926: ARRAY
12927: PPUSH
12928: LD_INT 60
12930: PPUSH
12931: CALL_OW 234
// end ;
12935: PPOPN 1
12937: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12938: LD_EXP 15
12942: PUSH
12943: LD_EXP 45
12947: AND
12948: IFFALSE 13047
12950: GO 12952
12952: DISABLE
12953: LD_INT 0
12955: PPUSH
12956: PPUSH
// begin enable ;
12957: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12958: LD_ADDR_VAR 0 1
12962: PUSH
12963: LD_INT 22
12965: PUSH
12966: LD_OWVAR 2
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 61
12977: PUSH
12978: EMPTY
12979: LIST
12980: PUSH
12981: LD_INT 33
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: PPUSH
12996: CALL_OW 69
13000: ST_TO_ADDR
// if not tmp then
13001: LD_VAR 0 1
13005: NOT
13006: IFFALSE 13010
// exit ;
13008: GO 13047
// for i in tmp do
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: FOR_IN
13021: IFFALSE 13045
// if IsControledBy ( i ) then
13023: LD_VAR 0 2
13027: PPUSH
13028: CALL_OW 312
13032: IFFALSE 13043
// ComUnlink ( i ) ;
13034: LD_VAR 0 2
13038: PPUSH
13039: CALL_OW 136
13043: GO 13020
13045: POP
13046: POP
// end ;
13047: PPOPN 2
13049: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13050: LD_EXP 15
13054: PUSH
13055: LD_EXP 46
13059: AND
13060: IFFALSE 13200
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
// begin ToLua ( displayPowell(); ) ;
13069: LD_STRING displayPowell();
13071: PPUSH
13072: CALL_OW 559
// uc_side := 0 ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// uc_nation := 2 ;
13084: LD_ADDR_OWVAR 21
13088: PUSH
13089: LD_INT 2
13091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13092: LD_ADDR_OWVAR 37
13096: PUSH
13097: LD_INT 14
13099: ST_TO_ADDR
// vc_engine := engine_siberite ;
13100: LD_ADDR_OWVAR 39
13104: PUSH
13105: LD_INT 3
13107: ST_TO_ADDR
// vc_control := control_apeman ;
13108: LD_ADDR_OWVAR 38
13112: PUSH
13113: LD_INT 5
13115: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13116: LD_ADDR_OWVAR 40
13120: PUSH
13121: LD_INT 29
13123: ST_TO_ADDR
// un := CreateVehicle ;
13124: LD_ADDR_VAR 0 2
13128: PUSH
13129: CALL_OW 45
13133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13134: LD_VAR 0 2
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13146: LD_INT 35
13148: PPUSH
13149: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13153: LD_VAR 0 2
13157: PPUSH
13158: LD_INT 22
13160: PUSH
13161: LD_OWVAR 2
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: PPUSH
13175: LD_VAR 0 2
13179: PPUSH
13180: CALL_OW 74
13184: PPUSH
13185: CALL_OW 115
// until IsDead ( un ) ;
13189: LD_VAR 0 2
13193: PPUSH
13194: CALL_OW 301
13198: IFFALSE 13146
// end ;
13200: PPOPN 2
13202: END
// every 0 0$1 trigger StreamModeActive and sStu do
13203: LD_EXP 15
13207: PUSH
13208: LD_EXP 54
13212: AND
13213: IFFALSE 13229
13215: GO 13217
13217: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13218: LD_STRING displayStucuk();
13220: PPUSH
13221: CALL_OW 559
// ResetFog ;
13225: CALL_OW 335
// end ;
13229: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13230: LD_EXP 15
13234: PUSH
13235: LD_EXP 47
13239: AND
13240: IFFALSE 13381
13242: GO 13244
13244: DISABLE
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_OWVAR 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: ST_TO_ADDR
// if not tmp then
13285: LD_VAR 0 2
13289: NOT
13290: IFFALSE 13294
// exit ;
13292: GO 13381
// un := tmp [ rand ( 1 , tmp ) ] ;
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_VAR 0 2
13303: PUSH
13304: LD_INT 1
13306: PPUSH
13307: LD_VAR 0 2
13311: PPUSH
13312: CALL_OW 12
13316: ARRAY
13317: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13318: LD_VAR 0 1
13322: PPUSH
13323: LD_INT 0
13325: PPUSH
13326: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_OWVAR 3
13339: PUSH
13340: LD_VAR 0 1
13344: DIFF
13345: PPUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 74
13355: PPUSH
13356: CALL_OW 115
// wait ( 0 0$20 ) ;
13360: LD_INT 700
13362: PPUSH
13363: CALL_OW 67
// SetSide ( un , your_side ) ;
13367: LD_VAR 0 1
13371: PPUSH
13372: LD_OWVAR 2
13376: PPUSH
13377: CALL_OW 235
// end ;
13381: PPOPN 2
13383: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13384: LD_EXP 15
13388: PUSH
13389: LD_EXP 48
13393: AND
13394: IFFALSE 13500
13396: GO 13398
13398: DISABLE
13399: LD_INT 0
13401: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_INT 22
13409: PUSH
13410: LD_OWVAR 2
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: LD_INT 30
13424: PUSH
13425: LD_INT 0
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: ST_TO_ADDR
// if not depot then
13456: LD_VAR 0 1
13460: NOT
13461: IFFALSE 13465
// exit ;
13463: GO 13500
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13465: LD_VAR 0 1
13469: PUSH
13470: LD_INT 1
13472: ARRAY
13473: PPUSH
13474: CALL_OW 250
13478: PPUSH
13479: LD_VAR 0 1
13483: PUSH
13484: LD_INT 1
13486: ARRAY
13487: PPUSH
13488: CALL_OW 251
13492: PPUSH
13493: LD_INT 70
13495: PPUSH
13496: CALL_OW 495
// end ;
13500: PPOPN 1
13502: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13503: LD_EXP 15
13507: PUSH
13508: LD_EXP 49
13512: AND
13513: IFFALSE 13724
13515: GO 13517
13517: DISABLE
13518: LD_INT 0
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13525: LD_ADDR_VAR 0 5
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_OWVAR 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 21
13544: PUSH
13545: LD_INT 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// if not tmp then
13561: LD_VAR 0 5
13565: NOT
13566: IFFALSE 13570
// exit ;
13568: GO 13724
// for i in tmp do
13570: LD_ADDR_VAR 0 1
13574: PUSH
13575: LD_VAR 0 5
13579: PUSH
13580: FOR_IN
13581: IFFALSE 13722
// begin d := rand ( 0 , 5 ) ;
13583: LD_ADDR_VAR 0 4
13587: PUSH
13588: LD_INT 0
13590: PPUSH
13591: LD_INT 5
13593: PPUSH
13594: CALL_OW 12
13598: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 250
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: LD_INT 12
13624: PPUSH
13625: CALL_OW 12
13629: PPUSH
13630: CALL_OW 272
13634: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 251
13649: PPUSH
13650: LD_VAR 0 4
13654: PPUSH
13655: LD_INT 3
13657: PPUSH
13658: LD_INT 12
13660: PPUSH
13661: CALL_OW 12
13665: PPUSH
13666: CALL_OW 273
13670: ST_TO_ADDR
// if ValidHex ( x , y ) then
13671: LD_VAR 0 2
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: CALL_OW 488
13685: IFFALSE 13720
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_VAR 0 2
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 3
13704: PPUSH
13705: LD_INT 6
13707: PPUSH
13708: CALL_OW 12
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 483
// end ;
13720: GO 13580
13722: POP
13723: POP
// end ;
13724: PPOPN 5
13726: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13727: LD_EXP 15
13731: PUSH
13732: LD_EXP 50
13736: AND
13737: IFFALSE 13831
13739: GO 13741
13741: DISABLE
13742: LD_INT 0
13744: PPUSH
13745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_OWVAR 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 21
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 69
13792: ST_TO_ADDR
// if not tmp then
13793: LD_VAR 0 2
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 13831
// for i in tmp do
13802: LD_ADDR_VAR 0 1
13806: PUSH
13807: LD_VAR 0 2
13811: PUSH
13812: FOR_IN
13813: IFFALSE 13829
// SetFuel ( i , 0 ) ;
13815: LD_VAR 0 1
13819: PPUSH
13820: LD_INT 0
13822: PPUSH
13823: CALL_OW 240
13827: GO 13812
13829: POP
13830: POP
// end ;
13831: PPOPN 2
13833: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13834: LD_EXP 15
13838: PUSH
13839: LD_EXP 51
13843: AND
13844: IFFALSE 13910
13846: GO 13848
13848: DISABLE
13849: LD_INT 0
13851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13852: LD_ADDR_VAR 0 1
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_OWVAR 2
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_INT 29
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: ST_TO_ADDR
// if not tmp then
13888: LD_VAR 0 1
13892: NOT
13893: IFFALSE 13897
// exit ;
13895: GO 13910
// DestroyUnit ( tmp [ 1 ] ) ;
13897: LD_VAR 0 1
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: CALL_OW 65
// end ;
13910: PPOPN 1
13912: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13913: LD_EXP 15
13917: PUSH
13918: LD_EXP 53
13922: AND
13923: IFFALSE 14052
13925: GO 13927
13927: DISABLE
13928: LD_INT 0
13930: PPUSH
// begin uc_side := 0 ;
13931: LD_ADDR_OWVAR 20
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// uc_nation := nation_arabian ;
13939: LD_ADDR_OWVAR 21
13943: PUSH
13944: LD_INT 2
13946: ST_TO_ADDR
// hc_gallery :=  ;
13947: LD_ADDR_OWVAR 33
13951: PUSH
13952: LD_STRING 
13954: ST_TO_ADDR
// hc_name :=  ;
13955: LD_ADDR_OWVAR 26
13959: PUSH
13960: LD_STRING 
13962: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13963: LD_INT 1
13965: PPUSH
13966: LD_INT 11
13968: PPUSH
13969: LD_INT 10
13971: PPUSH
13972: CALL_OW 380
// un := CreateHuman ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: CALL_OW 44
13985: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13998: LD_INT 35
14000: PPUSH
14001: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14005: LD_VAR 0 1
14009: PPUSH
14010: LD_INT 22
14012: PUSH
14013: LD_OWVAR 2
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PPUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 74
14036: PPUSH
14037: CALL_OW 115
// until IsDead ( un ) ;
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 301
14050: IFFALSE 13998
// end ;
14052: PPOPN 1
14054: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14055: LD_EXP 15
14059: PUSH
14060: LD_EXP 55
14064: AND
14065: IFFALSE 14077
14067: GO 14069
14069: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14070: LD_STRING earthquake(getX(game), 0, 32)
14072: PPUSH
14073: CALL_OW 559
14077: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14078: LD_EXP 15
14082: PUSH
14083: LD_EXP 56
14087: AND
14088: IFFALSE 14179
14090: GO 14092
14092: DISABLE
14093: LD_INT 0
14095: PPUSH
// begin enable ;
14096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14097: LD_ADDR_VAR 0 1
14101: PUSH
14102: LD_INT 22
14104: PUSH
14105: LD_OWVAR 2
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 33
14126: PUSH
14127: LD_INT 3
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 69
14143: ST_TO_ADDR
// if not tmp then
14144: LD_VAR 0 1
14148: NOT
14149: IFFALSE 14153
// exit ;
14151: GO 14179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14153: LD_VAR 0 1
14157: PUSH
14158: LD_INT 1
14160: PPUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 12
14170: ARRAY
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 234
// end ;
14179: PPOPN 1
14181: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14182: LD_EXP 15
14186: PUSH
14187: LD_EXP 57
14191: AND
14192: IFFALSE 14333
14194: GO 14196
14196: DISABLE
14197: LD_INT 0
14199: PPUSH
14200: PPUSH
14201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_OWVAR 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 25
14221: PUSH
14222: LD_INT 1
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// if not tmp then
14238: LD_VAR 0 3
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14333
// un := tmp [ rand ( 1 , tmp ) ] ;
14247: LD_ADDR_VAR 0 2
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_INT 1
14259: PPUSH
14260: LD_VAR 0 3
14264: PPUSH
14265: CALL_OW 12
14269: ARRAY
14270: ST_TO_ADDR
// if Crawls ( un ) then
14271: LD_VAR 0 2
14275: PPUSH
14276: CALL_OW 318
14280: IFFALSE 14291
// ComWalk ( un ) ;
14282: LD_VAR 0 2
14286: PPUSH
14287: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14291: LD_VAR 0 2
14295: PPUSH
14296: LD_INT 9
14298: PPUSH
14299: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14303: LD_INT 28
14305: PPUSH
14306: LD_OWVAR 2
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14318: LD_INT 29
14320: PPUSH
14321: LD_OWVAR 2
14325: PPUSH
14326: LD_INT 2
14328: PPUSH
14329: CALL_OW 322
// end ;
14333: PPOPN 3
14335: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14336: LD_EXP 15
14340: PUSH
14341: LD_EXP 58
14345: AND
14346: IFFALSE 14457
14348: GO 14350
14350: DISABLE
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_OWVAR 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 25
14375: PUSH
14376: LD_INT 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: ST_TO_ADDR
// if not tmp then
14392: LD_VAR 0 3
14396: NOT
14397: IFFALSE 14401
// exit ;
14399: GO 14457
// un := tmp [ rand ( 1 , tmp ) ] ;
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_VAR 0 3
14410: PUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_VAR 0 3
14418: PPUSH
14419: CALL_OW 12
14423: ARRAY
14424: ST_TO_ADDR
// if Crawls ( un ) then
14425: LD_VAR 0 2
14429: PPUSH
14430: CALL_OW 318
14434: IFFALSE 14445
// ComWalk ( un ) ;
14436: LD_VAR 0 2
14440: PPUSH
14441: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14445: LD_VAR 0 2
14449: PPUSH
14450: LD_INT 8
14452: PPUSH
14453: CALL_OW 336
// end ;
14457: PPOPN 3
14459: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14460: LD_EXP 15
14464: PUSH
14465: LD_EXP 59
14469: AND
14470: IFFALSE 14614
14472: GO 14474
14474: DISABLE
14475: LD_INT 0
14477: PPUSH
14478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14479: LD_ADDR_VAR 0 2
14483: PUSH
14484: LD_INT 22
14486: PUSH
14487: LD_OWVAR 2
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 34
14511: PUSH
14512: LD_INT 12
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 34
14521: PUSH
14522: LD_INT 51
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 34
14531: PUSH
14532: LD_INT 32
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 69
14554: ST_TO_ADDR
// if not tmp then
14555: LD_VAR 0 2
14559: NOT
14560: IFFALSE 14564
// exit ;
14562: GO 14614
// for i in tmp do
14564: LD_ADDR_VAR 0 1
14568: PUSH
14569: LD_VAR 0 2
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14612
// if GetCargo ( i , mat_artifact ) = 0 then
14577: LD_VAR 0 1
14581: PPUSH
14582: LD_INT 4
14584: PPUSH
14585: CALL_OW 289
14589: PUSH
14590: LD_INT 0
14592: EQUAL
14593: IFFALSE 14610
// SetCargo ( i , mat_siberit , 100 ) ;
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_INT 3
14602: PPUSH
14603: LD_INT 100
14605: PPUSH
14606: CALL_OW 290
14610: GO 14574
14612: POP
14613: POP
// end ;
14614: PPOPN 2
14616: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14617: LD_EXP 15
14621: PUSH
14622: LD_EXP 60
14626: AND
14627: IFFALSE 14810
14629: GO 14631
14631: DISABLE
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_OWVAR 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PPUSH
14653: CALL_OW 69
14657: ST_TO_ADDR
// if not tmp then
14658: LD_VAR 0 2
14662: NOT
14663: IFFALSE 14667
// exit ;
14665: GO 14810
// for i := 1 to 2 do
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: DOUBLE
14673: LD_INT 1
14675: DEC
14676: ST_TO_ADDR
14677: LD_INT 2
14679: PUSH
14680: FOR_TO
14681: IFFALSE 14808
// begin uc_side := your_side ;
14683: LD_ADDR_OWVAR 20
14687: PUSH
14688: LD_OWVAR 2
14692: ST_TO_ADDR
// uc_nation := nation_american ;
14693: LD_ADDR_OWVAR 21
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// vc_chassis := us_morphling ;
14701: LD_ADDR_OWVAR 37
14705: PUSH
14706: LD_INT 5
14708: ST_TO_ADDR
// vc_engine := engine_siberite ;
14709: LD_ADDR_OWVAR 39
14713: PUSH
14714: LD_INT 3
14716: ST_TO_ADDR
// vc_control := control_computer ;
14717: LD_ADDR_OWVAR 38
14721: PUSH
14722: LD_INT 3
14724: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14725: LD_ADDR_OWVAR 40
14729: PUSH
14730: LD_INT 10
14732: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14733: LD_VAR 0 2
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PPUSH
14742: CALL_OW 310
14746: NOT
14747: IFFALSE 14794
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14749: CALL_OW 45
14753: PPUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: CALL_OW 250
14767: PPUSH
14768: LD_VAR 0 2
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: CALL_OW 251
14781: PPUSH
14782: LD_INT 12
14784: PPUSH
14785: LD_INT 1
14787: PPUSH
14788: CALL_OW 50
14792: GO 14806
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14794: CALL_OW 45
14798: PPUSH
14799: LD_INT 1
14801: PPUSH
14802: CALL_OW 51
// end ;
14806: GO 14680
14808: POP
14809: POP
// end ;
14810: PPOPN 2
14812: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14813: LD_EXP 15
14817: PUSH
14818: LD_EXP 61
14822: AND
14823: IFFALSE 15045
14825: GO 14827
14827: DISABLE
14828: LD_INT 0
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14836: LD_ADDR_VAR 0 6
14840: PUSH
14841: LD_INT 22
14843: PUSH
14844: LD_OWVAR 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 21
14855: PUSH
14856: LD_INT 1
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 23
14868: PUSH
14869: LD_INT 0
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: ST_TO_ADDR
// if not tmp then
14890: LD_VAR 0 6
14894: NOT
14895: IFFALSE 14899
// exit ;
14897: GO 15045
// s1 := rand ( 1 , 4 ) ;
14899: LD_ADDR_VAR 0 2
14903: PUSH
14904: LD_INT 1
14906: PPUSH
14907: LD_INT 4
14909: PPUSH
14910: CALL_OW 12
14914: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14915: LD_ADDR_VAR 0 4
14919: PUSH
14920: LD_VAR 0 6
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 259
14938: ST_TO_ADDR
// if s1 = 1 then
14939: LD_VAR 0 2
14943: PUSH
14944: LD_INT 1
14946: EQUAL
14947: IFFALSE 14967
// s2 := rand ( 2 , 4 ) else
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 2
14956: PPUSH
14957: LD_INT 4
14959: PPUSH
14960: CALL_OW 12
14964: ST_TO_ADDR
14965: GO 14975
// s2 := 1 ;
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_INT 1
14974: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14975: LD_ADDR_VAR 0 5
14979: PUSH
14980: LD_VAR 0 6
14984: PUSH
14985: LD_INT 1
14987: ARRAY
14988: PPUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: CALL_OW 259
14998: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14999: LD_VAR 0 6
15003: PUSH
15004: LD_INT 1
15006: ARRAY
15007: PPUSH
15008: LD_VAR 0 2
15012: PPUSH
15013: LD_VAR 0 5
15017: PPUSH
15018: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15022: LD_VAR 0 6
15026: PUSH
15027: LD_INT 1
15029: ARRAY
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_VAR 0 4
15040: PPUSH
15041: CALL_OW 237
// end ;
15045: PPOPN 6
15047: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15048: LD_EXP 15
15052: PUSH
15053: LD_EXP 62
15057: AND
15058: IFFALSE 15137
15060: GO 15062
15062: DISABLE
15063: LD_INT 0
15065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_OWVAR 2
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: LD_INT 3
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: ST_TO_ADDR
// if not tmp then
15102: LD_VAR 0 1
15106: NOT
15107: IFFALSE 15111
// exit ;
15109: GO 15137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 12
15128: ARRAY
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 234
// end ;
15137: PPOPN 1
15139: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15140: LD_EXP 15
15144: PUSH
15145: LD_EXP 63
15149: AND
15150: IFFALSE 15262
15152: GO 15154
15154: DISABLE
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15159: LD_ADDR_VAR 0 2
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_OWVAR 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 30
15181: PUSH
15182: LD_INT 27
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 30
15191: PUSH
15192: LD_INT 26
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 30
15201: PUSH
15202: LD_INT 28
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: ST_TO_ADDR
// if not tmp then
15224: LD_VAR 0 2
15228: NOT
15229: IFFALSE 15233
// exit ;
15231: GO 15262
// for i in tmp do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_VAR 0 2
15242: PUSH
15243: FOR_IN
15244: IFFALSE 15260
// SetLives ( i , 1 ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 234
15258: GO 15243
15260: POP
15261: POP
// end ;
15262: PPOPN 2
15264: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15265: LD_EXP 15
15269: PUSH
15270: LD_EXP 64
15274: AND
15275: IFFALSE 15549
15277: GO 15279
15279: DISABLE
15280: LD_INT 0
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin i := rand ( 1 , 7 ) ;
15285: LD_ADDR_VAR 0 1
15289: PUSH
15290: LD_INT 1
15292: PPUSH
15293: LD_INT 7
15295: PPUSH
15296: CALL_OW 12
15300: ST_TO_ADDR
// case i of 1 :
15301: LD_VAR 0 1
15305: PUSH
15306: LD_INT 1
15308: DOUBLE
15309: EQUAL
15310: IFTRUE 15314
15312: GO 15324
15314: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15315: LD_STRING earthquake(getX(game), 0, 32)
15317: PPUSH
15318: CALL_OW 559
15322: GO 15549
15324: LD_INT 2
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15346
15332: POP
// begin ToLua ( displayStucuk(); ) ;
15333: LD_STRING displayStucuk();
15335: PPUSH
15336: CALL_OW 559
// ResetFog ;
15340: CALL_OW 335
// end ; 3 :
15344: GO 15549
15346: LD_INT 3
15348: DOUBLE
15349: EQUAL
15350: IFTRUE 15354
15352: GO 15458
15354: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: LD_INT 22
15362: PUSH
15363: LD_OWVAR 2
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 25
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PPUSH
15386: CALL_OW 69
15390: ST_TO_ADDR
// if not tmp then
15391: LD_VAR 0 2
15395: NOT
15396: IFFALSE 15400
// exit ;
15398: GO 15549
// un := tmp [ rand ( 1 , tmp ) ] ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: LD_INT 1
15412: PPUSH
15413: LD_VAR 0 2
15417: PPUSH
15418: CALL_OW 12
15422: ARRAY
15423: ST_TO_ADDR
// if Crawls ( un ) then
15424: LD_VAR 0 3
15428: PPUSH
15429: CALL_OW 318
15433: IFFALSE 15444
// ComWalk ( un ) ;
15435: LD_VAR 0 3
15439: PPUSH
15440: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_INT 8
15451: PPUSH
15452: CALL_OW 336
// end ; 4 :
15456: GO 15549
15458: LD_INT 4
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15527
15466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 22
15474: PUSH
15475: LD_OWVAR 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 29
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PPUSH
15498: CALL_OW 69
15502: ST_TO_ADDR
// if not tmp then
15503: LD_VAR 0 2
15507: NOT
15508: IFFALSE 15512
// exit ;
15510: GO 15549
// DestroyUnit ( tmp [ 1 ] ) ;
15512: LD_VAR 0 2
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PPUSH
15521: CALL_OW 65
// end ; 5 .. 7 :
15525: GO 15549
15527: LD_INT 5
15529: DOUBLE
15530: GREATEREQUAL
15531: IFFALSE 15539
15533: LD_INT 7
15535: DOUBLE
15536: LESSEQUAL
15537: IFTRUE 15541
15539: GO 15548
15541: POP
// StreamSibBomb ; end ;
15542: CALL 11799 0 0
15546: GO 15549
15548: POP
// end ;
15549: PPOPN 3
15551: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15552: LD_EXP 15
15556: PUSH
15557: LD_EXP 65
15561: AND
15562: IFFALSE 15718
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
15570: PPUSH
15571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 81
15579: PUSH
15580: LD_OWVAR 2
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 21
15604: PUSH
15605: LD_INT 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 69
15625: ST_TO_ADDR
// if not tmp then
15626: LD_VAR 0 2
15630: NOT
15631: IFFALSE 15635
// exit ;
15633: GO 15718
// p := 0 ;
15635: LD_ADDR_VAR 0 3
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15643: LD_INT 35
15645: PPUSH
15646: CALL_OW 67
// p := p + 1 ;
15650: LD_ADDR_VAR 0 3
15654: PUSH
15655: LD_VAR 0 3
15659: PUSH
15660: LD_INT 1
15662: PLUS
15663: ST_TO_ADDR
// for i in tmp do
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_VAR 0 2
15673: PUSH
15674: FOR_IN
15675: IFFALSE 15706
// if GetLives ( i ) < 1000 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 1000
15689: LESS
15690: IFFALSE 15704
// SetLives ( i , 1000 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1000
15699: PPUSH
15700: CALL_OW 234
15704: GO 15674
15706: POP
15707: POP
// until p > 20 ;
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 20
15715: GREATER
15716: IFFALSE 15643
// end ;
15718: PPOPN 3
15720: END
// every 0 0$1 trigger StreamModeActive and sTime do
15721: LD_EXP 15
15725: PUSH
15726: LD_EXP 66
15730: AND
15731: IFFALSE 15766
15733: GO 15735
15735: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15736: LD_INT 28
15738: PPUSH
15739: LD_OWVAR 2
15743: PPUSH
15744: LD_INT 2
15746: PPUSH
15747: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15751: LD_INT 30
15753: PPUSH
15754: LD_OWVAR 2
15758: PPUSH
15759: LD_INT 2
15761: PPUSH
15762: CALL_OW 322
// end ;
15766: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15767: LD_EXP 15
15771: PUSH
15772: LD_EXP 67
15776: AND
15777: IFFALSE 15898
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_INT 22
15793: PUSH
15794: LD_OWVAR 2
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 21
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 3
15815: PUSH
15816: LD_INT 23
15818: PUSH
15819: LD_INT 0
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 69
15839: ST_TO_ADDR
// if not tmp then
15840: LD_VAR 0 2
15844: NOT
15845: IFFALSE 15849
// exit ;
15847: GO 15898
// for i in tmp do
15849: LD_ADDR_VAR 0 1
15853: PUSH
15854: LD_VAR 0 2
15858: PUSH
15859: FOR_IN
15860: IFFALSE 15896
// begin if Crawls ( i ) then
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 318
15871: IFFALSE 15882
// ComWalk ( i ) ;
15873: LD_VAR 0 1
15877: PPUSH
15878: CALL_OW 138
// SetClass ( i , 2 ) ;
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 2
15889: PPUSH
15890: CALL_OW 336
// end ;
15894: GO 15859
15896: POP
15897: POP
// end ;
15898: PPOPN 2
15900: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15901: LD_EXP 15
15905: PUSH
15906: LD_EXP 68
15910: AND
15911: IFFALSE 16192
15913: GO 15915
15915: DISABLE
15916: LD_INT 0
15918: PPUSH
15919: PPUSH
15920: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15921: LD_OWVAR 2
15925: PPUSH
15926: LD_INT 9
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15939: LD_INT 9
15941: PPUSH
15942: LD_OWVAR 2
15946: PPUSH
15947: CALL_OW 343
// uc_side := 9 ;
15951: LD_ADDR_OWVAR 20
15955: PUSH
15956: LD_INT 9
15958: ST_TO_ADDR
// uc_nation := 2 ;
15959: LD_ADDR_OWVAR 21
15963: PUSH
15964: LD_INT 2
15966: ST_TO_ADDR
// hc_name := Dark Warrior ;
15967: LD_ADDR_OWVAR 26
15971: PUSH
15972: LD_STRING Dark Warrior
15974: ST_TO_ADDR
// hc_gallery :=  ;
15975: LD_ADDR_OWVAR 33
15979: PUSH
15980: LD_STRING 
15982: ST_TO_ADDR
// hc_noskilllimit := true ;
15983: LD_ADDR_OWVAR 76
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15991: LD_ADDR_OWVAR 31
15995: PUSH
15996: LD_INT 30
15998: PUSH
15999: LD_INT 30
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: LD_INT 30
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: ST_TO_ADDR
// un := CreateHuman ;
16014: LD_ADDR_VAR 0 3
16018: PUSH
16019: CALL_OW 44
16023: ST_TO_ADDR
// hc_noskilllimit := false ;
16024: LD_ADDR_OWVAR 76
16028: PUSH
16029: LD_INT 0
16031: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16032: LD_VAR 0 3
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 51
// p := 0 ;
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_INT 0
16051: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16052: LD_INT 35
16054: PPUSH
16055: CALL_OW 67
// p := p + 1 ;
16059: LD_ADDR_VAR 0 2
16063: PUSH
16064: LD_VAR 0 2
16068: PUSH
16069: LD_INT 1
16071: PLUS
16072: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16073: LD_VAR 0 3
16077: PPUSH
16078: CALL_OW 256
16082: PUSH
16083: LD_INT 1000
16085: LESS
16086: IFFALSE 16100
// SetLives ( un , 1000 ) ;
16088: LD_VAR 0 3
16092: PPUSH
16093: LD_INT 1000
16095: PPUSH
16096: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_INT 81
16107: PUSH
16108: LD_OWVAR 2
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 91
16119: PUSH
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 30
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: PPUSH
16142: LD_VAR 0 3
16146: PPUSH
16147: CALL_OW 74
16151: PPUSH
16152: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16156: LD_VAR 0 2
16160: PUSH
16161: LD_INT 60
16163: GREATER
16164: PUSH
16165: LD_VAR 0 3
16169: PPUSH
16170: CALL_OW 301
16174: OR
16175: IFFALSE 16052
// if un then
16177: LD_VAR 0 3
16181: IFFALSE 16192
// RemoveUnit ( un ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: CALL_OW 64
// end ;
16192: PPOPN 3
16194: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16195: LD_INT 0
16197: PPUSH
// case cmd of 301 :
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 301
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16243
16211: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; end ;
16212: LD_VAR 0 6
16216: PPUSH
16217: LD_VAR 0 7
16221: PPUSH
16222: LD_VAR 0 8
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 16557 0 5
16241: GO 16244
16243: POP
// end ;
16244: LD_VAR 0 12
16248: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16249: LD_INT 0
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16255: LD_ADDR_VAR 0 4
16259: PUSH
16260: LD_INT 22
16262: PUSH
16263: LD_OWVAR 2
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 0
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 30
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: ST_TO_ADDR
// if not tmp then
16309: LD_VAR 0 4
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 16377
// for i in tmp do
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_VAR 0 4
16327: PUSH
16328: FOR_IN
16329: IFFALSE 16375
// for j = 1 to 3 do
16331: LD_ADDR_VAR 0 3
16335: PUSH
16336: DOUBLE
16337: LD_INT 1
16339: DEC
16340: ST_TO_ADDR
16341: LD_INT 3
16343: PUSH
16344: FOR_TO
16345: IFFALSE 16371
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16347: LD_VAR 0 2
16351: PPUSH
16352: CALL_OW 274
16356: PPUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_INT 99999
16364: PPUSH
16365: CALL_OW 277
16369: GO 16344
16371: POP
16372: POP
16373: GO 16328
16375: POP
16376: POP
// end ;
16377: LD_VAR 0 1
16381: RET
// export function hHackSetLevel10 ; var i , j ; begin
16382: LD_INT 0
16384: PPUSH
16385: PPUSH
16386: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16387: LD_ADDR_VAR 0 2
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PPUSH
16402: CALL_OW 69
16406: PUSH
16407: FOR_IN
16408: IFFALSE 16460
// if IsSelected ( i ) then
16410: LD_VAR 0 2
16414: PPUSH
16415: CALL_OW 306
16419: IFFALSE 16458
// begin for j := 1 to 4 do
16421: LD_ADDR_VAR 0 3
16425: PUSH
16426: DOUBLE
16427: LD_INT 1
16429: DEC
16430: ST_TO_ADDR
16431: LD_INT 4
16433: PUSH
16434: FOR_TO
16435: IFFALSE 16456
// SetSkill ( i , j , 10 ) ;
16437: LD_VAR 0 2
16441: PPUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_INT 10
16449: PPUSH
16450: CALL_OW 237
16454: GO 16434
16456: POP
16457: POP
// end ;
16458: GO 16407
16460: POP
16461: POP
// end ;
16462: LD_VAR 0 1
16466: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
16471: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: LD_INT 22
16479: PUSH
16480: LD_OWVAR 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 21
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PPUSH
16503: CALL_OW 69
16507: PUSH
16508: FOR_IN
16509: IFFALSE 16550
// begin for j := 1 to 4 do
16511: LD_ADDR_VAR 0 3
16515: PUSH
16516: DOUBLE
16517: LD_INT 1
16519: DEC
16520: ST_TO_ADDR
16521: LD_INT 4
16523: PUSH
16524: FOR_TO
16525: IFFALSE 16546
// SetSkill ( i , j , 10 ) ;
16527: LD_VAR 0 2
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_INT 10
16539: PPUSH
16540: CALL_OW 237
16544: GO 16524
16546: POP
16547: POP
// end ;
16548: GO 16508
16550: POP
16551: POP
// end ;
16552: LD_VAR 0 1
16556: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16557: LD_INT 0
16559: PPUSH
// uc_side := your_side ;
16560: LD_ADDR_OWVAR 20
16564: PUSH
16565: LD_OWVAR 2
16569: ST_TO_ADDR
// uc_nation := nation ;
16570: LD_ADDR_OWVAR 21
16574: PUSH
16575: LD_VAR 0 1
16579: ST_TO_ADDR
// InitHc ;
16580: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16584: LD_INT 0
16586: PPUSH
16587: LD_VAR 0 2
16591: PPUSH
16592: LD_VAR 0 3
16596: PPUSH
16597: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16601: LD_VAR 0 4
16605: PPUSH
16606: LD_VAR 0 5
16610: PPUSH
16611: CALL_OW 428
16615: PUSH
16616: LD_INT 0
16618: EQUAL
16619: IFFALSE 16643
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16621: CALL_OW 44
16625: PPUSH
16626: LD_VAR 0 4
16630: PPUSH
16631: LD_VAR 0 5
16635: PPUSH
16636: LD_INT 1
16638: PPUSH
16639: CALL_OW 48
// end ;
16643: LD_VAR 0 6
16647: RET
// export function hHackSpawnVehicle ; begin
16648: LD_INT 0
16650: PPUSH
// uc_side := your_side ;
16651: LD_ADDR_OWVAR 20
16655: PUSH
16656: LD_OWVAR 2
16660: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
16661: LD_ADDR_OWVAR 21
16665: PUSH
16666: LD_INT 1
16668: PPUSH
16669: LD_INT 3
16671: PPUSH
16672: CALL_OW 12
16676: ST_TO_ADDR
// InitVc ;
16677: CALL_OW 20
// case uc_nation of 1 :
16681: LD_OWVAR 21
16685: PUSH
16686: LD_INT 1
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16838
16694: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
16695: LD_ADDR_OWVAR 37
16699: PUSH
16700: LD_INT 1
16702: PUSH
16703: LD_INT 2
16705: PUSH
16706: LD_INT 3
16708: PUSH
16709: LD_INT 4
16711: PUSH
16712: LD_INT 5
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_INT 5
16727: PPUSH
16728: CALL_OW 12
16732: ARRAY
16733: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16734: LD_ADDR_OWVAR 39
16738: PUSH
16739: LD_INT 1
16741: PPUSH
16742: LD_INT 3
16744: PPUSH
16745: CALL_OW 12
16749: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
16750: LD_ADDR_OWVAR 38
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: LD_INT 3
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: PPUSH
16772: LD_INT 3
16774: PPUSH
16775: CALL_OW 12
16779: ARRAY
16780: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16781: LD_ADDR_OWVAR 40
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 4
16791: PUSH
16792: LD_INT 5
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: LD_INT 7
16800: PUSH
16801: LD_INT 8
16803: PUSH
16804: LD_INT 9
16806: PUSH
16807: LD_INT 10
16809: PUSH
16810: LD_INT 6
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: PPUSH
16827: LD_INT 9
16829: PPUSH
16830: CALL_OW 12
16834: ARRAY
16835: ST_TO_ADDR
// end ; 2 :
16836: GO 17103
16838: LD_INT 2
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 16970
16846: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16847: LD_ADDR_OWVAR 37
16851: PUSH
16852: LD_INT 11
16854: PUSH
16855: LD_INT 12
16857: PUSH
16858: LD_INT 13
16860: PUSH
16861: LD_INT 14
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 1
16872: PPUSH
16873: LD_INT 4
16875: PPUSH
16876: CALL_OW 12
16880: ARRAY
16881: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16882: LD_ADDR_OWVAR 39
16886: PUSH
16887: LD_INT 1
16889: PPUSH
16890: LD_INT 3
16892: PPUSH
16893: CALL_OW 12
16897: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16898: LD_ADDR_OWVAR 38
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: LD_INT 5
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 3
16922: PPUSH
16923: CALL_OW 12
16927: ARRAY
16928: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16929: LD_ADDR_OWVAR 40
16933: PUSH
16934: LD_INT 24
16936: PUSH
16937: LD_INT 26
16939: PUSH
16940: LD_INT 27
16942: PUSH
16943: LD_INT 28
16945: PUSH
16946: LD_INT 29
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 1
16958: PPUSH
16959: LD_INT 5
16961: PPUSH
16962: CALL_OW 12
16966: ARRAY
16967: ST_TO_ADDR
// end ; 3 :
16968: GO 17103
16970: LD_INT 3
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17102
16978: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16979: LD_ADDR_OWVAR 37
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 23
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 24
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 1
17004: PPUSH
17005: LD_INT 4
17007: PPUSH
17008: CALL_OW 12
17012: ARRAY
17013: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17014: LD_ADDR_OWVAR 39
17018: PUSH
17019: LD_INT 1
17021: PPUSH
17022: LD_INT 3
17024: PPUSH
17025: CALL_OW 12
17029: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17030: LD_ADDR_OWVAR 38
17034: PUSH
17035: LD_INT 1
17037: PUSH
17038: LD_INT 3
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 1
17047: PPUSH
17048: LD_INT 2
17050: PPUSH
17051: CALL_OW 12
17055: ARRAY
17056: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17057: LD_ADDR_OWVAR 40
17061: PUSH
17062: LD_INT 42
17064: PUSH
17065: LD_INT 43
17067: PUSH
17068: LD_INT 44
17070: PUSH
17071: LD_INT 46
17073: PUSH
17074: LD_INT 48
17076: PUSH
17077: LD_INT 47
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: PPUSH
17091: LD_INT 6
17093: PPUSH
17094: CALL_OW 12
17098: ARRAY
17099: ST_TO_ADDR
// end ; end ;
17100: GO 17103
17102: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17103: CALL_OW 45
17107: PPUSH
17108: LD_INT 1
17110: PPUSH
17111: CALL_OW 51
// end ;
17115: LD_VAR 0 1
17119: RET
// export hInvincible ; every 1 do
17120: GO 17122
17122: DISABLE
// hInvincible := [ ] ;
17123: LD_ADDR_EXP 69
17127: PUSH
17128: EMPTY
17129: ST_TO_ADDR
17130: END
// every 10 do var i ;
17131: GO 17133
17133: DISABLE
17134: LD_INT 0
17136: PPUSH
// begin enable ;
17137: ENABLE
// if not hInvincible then
17138: LD_EXP 69
17142: NOT
17143: IFFALSE 17147
// exit ;
17145: GO 17191
// for i in hInvincible do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_EXP 69
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17189
// if GetLives ( i ) < 1000 then
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 256
17169: PUSH
17170: LD_INT 1000
17172: LESS
17173: IFFALSE 17187
// SetLives ( i , 1000 ) ;
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_INT 1000
17182: PPUSH
17183: CALL_OW 234
17187: GO 17157
17189: POP
17190: POP
// end ;
17191: PPOPN 1
17193: END
// export function hHackInvincible ; var i ; begin
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17198: LD_ADDR_VAR 0 2
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: PUSH
17236: FOR_IN
17237: IFFALSE 17298
// if IsSelected ( i ) then
17239: LD_VAR 0 2
17243: PPUSH
17244: CALL_OW 306
17248: IFFALSE 17296
// begin if i in hInvincible then
17250: LD_VAR 0 2
17254: PUSH
17255: LD_EXP 69
17259: IN
17260: IFFALSE 17280
// hInvincible := hInvincible diff i else
17262: LD_ADDR_EXP 69
17266: PUSH
17267: LD_EXP 69
17271: PUSH
17272: LD_VAR 0 2
17276: DIFF
17277: ST_TO_ADDR
17278: GO 17296
// hInvincible := hInvincible union i ;
17280: LD_ADDR_EXP 69
17284: PUSH
17285: LD_EXP 69
17289: PUSH
17290: LD_VAR 0 2
17294: UNION
17295: ST_TO_ADDR
// end ;
17296: GO 17236
17298: POP
17299: POP
// end ;
17300: LD_VAR 0 1
17304: RET
// export function hHackInvisible ; var i , j ; begin
17305: LD_INT 0
17307: PPUSH
17308: PPUSH
17309: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17310: LD_ADDR_VAR 0 2
17314: PUSH
17315: LD_INT 21
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 69
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17355
// if IsSelected ( i ) then
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 306
17342: IFFALSE 17353
// ComForceInvisible ( i ) ;
17344: LD_VAR 0 2
17348: PPUSH
17349: CALL_OW 496
17353: GO 17330
17355: POP
17356: POP
// end ;
17357: LD_VAR 0 1
17361: RET
// export function hHackChangeYourSide ; begin
17362: LD_INT 0
17364: PPUSH
// if your_side = 8 then
17365: LD_OWVAR 2
17369: PUSH
17370: LD_INT 8
17372: EQUAL
17373: IFFALSE 17385
// your_side := 0 else
17375: LD_ADDR_OWVAR 2
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
17383: GO 17399
// your_side := your_side + 1 ;
17385: LD_ADDR_OWVAR 2
17389: PUSH
17390: LD_OWVAR 2
17394: PUSH
17395: LD_INT 1
17397: PLUS
17398: ST_TO_ADDR
// end ;
17399: LD_VAR 0 1
17403: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
17408: PPUSH
// for i in all_units do
17409: LD_ADDR_VAR 0 2
17413: PUSH
17414: LD_OWVAR 3
17418: PUSH
17419: FOR_IN
17420: IFFALSE 17498
// if IsSelected ( i ) then
17422: LD_VAR 0 2
17426: PPUSH
17427: CALL_OW 306
17431: IFFALSE 17496
// begin j := GetSide ( i ) ;
17433: LD_ADDR_VAR 0 3
17437: PUSH
17438: LD_VAR 0 2
17442: PPUSH
17443: CALL_OW 255
17447: ST_TO_ADDR
// if j = 8 then
17448: LD_VAR 0 3
17452: PUSH
17453: LD_INT 8
17455: EQUAL
17456: IFFALSE 17468
// j := 0 else
17458: LD_ADDR_VAR 0 3
17462: PUSH
17463: LD_INT 0
17465: ST_TO_ADDR
17466: GO 17482
// j := j + 1 ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 1
17480: PLUS
17481: ST_TO_ADDR
// SetSide ( i , j ) ;
17482: LD_VAR 0 2
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 235
// end ;
17496: GO 17419
17498: POP
17499: POP
// end ;
17500: LD_VAR 0 1
17504: RET
// export function hHackFog ; begin
17505: LD_INT 0
17507: PPUSH
// FogOff ( true ) ;
17508: LD_INT 1
17510: PPUSH
17511: CALL_OW 344
// end ;
17515: LD_VAR 0 1
17519: RET
// export function hHackApeman ; begin
17520: LD_INT 0
17522: PPUSH
// uc_side := your_side ;
17523: LD_ADDR_OWVAR 20
17527: PUSH
17528: LD_OWVAR 2
17532: ST_TO_ADDR
// uc_nation := 0 ;
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 0
17540: ST_TO_ADDR
// hc_name :=  ;
17541: LD_ADDR_OWVAR 26
17545: PUSH
17546: LD_STRING 
17548: ST_TO_ADDR
// hc_gallery :=  ;
17549: LD_ADDR_OWVAR 33
17553: PUSH
17554: LD_STRING 
17556: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17557: LD_ADDR_OWVAR 31
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: ST_TO_ADDR
// hc_class := class_apeman ;
17580: LD_ADDR_OWVAR 28
17584: PUSH
17585: LD_INT 12
17587: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17588: CALL_OW 44
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 51
// end ;
17600: LD_VAR 0 1
17604: RET
// export function hHackBoom ; begin
17605: LD_INT 0
17607: PPUSH
// uc_side := your_side ;
17608: LD_ADDR_OWVAR 20
17612: PUSH
17613: LD_OWVAR 2
17617: ST_TO_ADDR
// uc_nation := 1 ;
17618: LD_ADDR_OWVAR 21
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// vc_chassis := us_morphling ;
17626: LD_ADDR_OWVAR 37
17630: PUSH
17631: LD_INT 5
17633: ST_TO_ADDR
// vc_engine := engine_siberite ;
17634: LD_ADDR_OWVAR 39
17638: PUSH
17639: LD_INT 3
17641: ST_TO_ADDR
// vc_control := control_computer ;
17642: LD_ADDR_OWVAR 38
17646: PUSH
17647: LD_INT 3
17649: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17650: LD_ADDR_OWVAR 40
17654: PUSH
17655: LD_INT 8
17657: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17658: CALL_OW 45
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 51
// end ; end_of_file
17670: LD_VAR 0 1
17674: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17675: LD_INT 0
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 264
17690: PUSH
17691: LD_EXP 80
17695: EQUAL
17696: IFFALSE 17768
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17698: LD_INT 68
17700: PPUSH
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL_OW 255
17710: PPUSH
17711: CALL_OW 321
17715: PUSH
17716: LD_INT 2
17718: EQUAL
17719: IFFALSE 17731
// eff := 70 else
17721: LD_ADDR_VAR 0 4
17725: PUSH
17726: LD_INT 70
17728: ST_TO_ADDR
17729: GO 17739
// eff := 30 ;
17731: LD_ADDR_VAR 0 4
17735: PUSH
17736: LD_INT 30
17738: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 250
17748: PPUSH
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 251
17758: PPUSH
17759: LD_VAR 0 4
17763: PPUSH
17764: CALL_OW 495
// end ; end ;
17768: LD_VAR 0 2
17772: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17773: LD_INT 0
17775: PPUSH
// end ;
17776: LD_VAR 0 4
17780: RET
// export function SOS_Command ( cmd ) ; begin
17781: LD_INT 0
17783: PPUSH
// end ;
17784: LD_VAR 0 2
17788: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17789: LD_INT 0
17791: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 254
17799: EQUAL
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 264
17810: PUSH
17811: LD_EXP 78
17815: EQUAL
17816: AND
17817: PUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: CALL_OW 263
17827: PUSH
17828: LD_INT 3
17830: EQUAL
17831: AND
17832: IFFALSE 17848
// HackDestroyVehicle ( unit , selectedUnit ) ;
17834: LD_VAR 0 2
17838: PPUSH
17839: LD_VAR 0 3
17843: PPUSH
17844: CALL 19357 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 255
17855: EQUAL
17856: PUSH
17857: LD_VAR 0 2
17861: PPUSH
17862: CALL_OW 264
17866: PUSH
17867: LD_INT 14
17869: PUSH
17870: LD_INT 53
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: IN
17877: AND
17878: PUSH
17879: LD_VAR 0 4
17883: PPUSH
17884: LD_VAR 0 5
17888: PPUSH
17889: CALL_OW 488
17893: AND
17894: IFFALSE 17918
// CutTreeXYR ( unit , x , y , 12 ) ;
17896: LD_VAR 0 2
17900: PPUSH
17901: LD_VAR 0 4
17905: PPUSH
17906: LD_VAR 0 5
17910: PPUSH
17911: LD_INT 12
17913: PPUSH
17914: CALL 17923 0 4
// end ;
17918: LD_VAR 0 6
17922: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17934: LD_VAR 0 1
17938: NOT
17939: PUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 488
17954: NOT
17955: OR
17956: PUSH
17957: LD_VAR 0 4
17961: NOT
17962: OR
17963: IFFALSE 17967
// exit ;
17965: GO 18307
// list := [ ] ;
17967: LD_ADDR_VAR 0 13
17971: PUSH
17972: EMPTY
17973: ST_TO_ADDR
// if x - r < 0 then
17974: LD_VAR 0 2
17978: PUSH
17979: LD_VAR 0 4
17983: MINUS
17984: PUSH
17985: LD_INT 0
17987: LESS
17988: IFFALSE 18000
// min_x := 0 else
17990: LD_ADDR_VAR 0 7
17994: PUSH
17995: LD_INT 0
17997: ST_TO_ADDR
17998: GO 18016
// min_x := x - r ;
18000: LD_ADDR_VAR 0 7
18004: PUSH
18005: LD_VAR 0 2
18009: PUSH
18010: LD_VAR 0 4
18014: MINUS
18015: ST_TO_ADDR
// if y - r < 0 then
18016: LD_VAR 0 3
18020: PUSH
18021: LD_VAR 0 4
18025: MINUS
18026: PUSH
18027: LD_INT 0
18029: LESS
18030: IFFALSE 18042
// min_y := 0 else
18032: LD_ADDR_VAR 0 8
18036: PUSH
18037: LD_INT 0
18039: ST_TO_ADDR
18040: GO 18058
// min_y := y - r ;
18042: LD_ADDR_VAR 0 8
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_VAR 0 4
18056: MINUS
18057: ST_TO_ADDR
// max_x := x + r ;
18058: LD_ADDR_VAR 0 9
18062: PUSH
18063: LD_VAR 0 2
18067: PUSH
18068: LD_VAR 0 4
18072: PLUS
18073: ST_TO_ADDR
// max_y := y + r ;
18074: LD_ADDR_VAR 0 10
18078: PUSH
18079: LD_VAR 0 3
18083: PUSH
18084: LD_VAR 0 4
18088: PLUS
18089: ST_TO_ADDR
// for _x = min_x to max_x do
18090: LD_ADDR_VAR 0 11
18094: PUSH
18095: DOUBLE
18096: LD_VAR 0 7
18100: DEC
18101: ST_TO_ADDR
18102: LD_VAR 0 9
18106: PUSH
18107: FOR_TO
18108: IFFALSE 18225
// for _y = min_y to max_y do
18110: LD_ADDR_VAR 0 12
18114: PUSH
18115: DOUBLE
18116: LD_VAR 0 8
18120: DEC
18121: ST_TO_ADDR
18122: LD_VAR 0 10
18126: PUSH
18127: FOR_TO
18128: IFFALSE 18221
// begin if not ValidHex ( _x , _y ) then
18130: LD_VAR 0 11
18134: PPUSH
18135: LD_VAR 0 12
18139: PPUSH
18140: CALL_OW 488
18144: NOT
18145: IFFALSE 18149
// continue ;
18147: GO 18127
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18149: LD_VAR 0 11
18153: PPUSH
18154: LD_VAR 0 12
18158: PPUSH
18159: CALL_OW 351
18163: PUSH
18164: LD_VAR 0 11
18168: PPUSH
18169: LD_VAR 0 12
18173: PPUSH
18174: CALL_OW 554
18178: AND
18179: IFFALSE 18219
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18181: LD_ADDR_VAR 0 13
18185: PUSH
18186: LD_VAR 0 13
18190: PPUSH
18191: LD_VAR 0 13
18195: PUSH
18196: LD_INT 1
18198: PLUS
18199: PPUSH
18200: LD_VAR 0 11
18204: PUSH
18205: LD_VAR 0 12
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 2
18218: ST_TO_ADDR
// end ;
18219: GO 18127
18221: POP
18222: POP
18223: GO 18107
18225: POP
18226: POP
// if not list then
18227: LD_VAR 0 13
18231: NOT
18232: IFFALSE 18236
// exit ;
18234: GO 18307
// for i in list do
18236: LD_ADDR_VAR 0 6
18240: PUSH
18241: LD_VAR 0 13
18245: PUSH
18246: FOR_IN
18247: IFFALSE 18305
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18249: LD_VAR 0 1
18253: PPUSH
18254: LD_STRING M
18256: PUSH
18257: LD_VAR 0 6
18261: PUSH
18262: LD_INT 1
18264: ARRAY
18265: PUSH
18266: LD_VAR 0 6
18270: PUSH
18271: LD_INT 2
18273: ARRAY
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: LD_INT 0
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: PPUSH
18299: CALL_OW 447
18303: GO 18246
18305: POP
18306: POP
// end ;
18307: LD_VAR 0 5
18311: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18312: LD_EXP 70
18316: NOT
18317: IFFALSE 18367
18319: GO 18321
18321: DISABLE
// begin initHack := true ;
18322: LD_ADDR_EXP 70
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// hackTanks := [ ] ;
18330: LD_ADDR_EXP 71
18334: PUSH
18335: EMPTY
18336: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18337: LD_ADDR_EXP 72
18341: PUSH
18342: EMPTY
18343: ST_TO_ADDR
// hackLimit := 3 ;
18344: LD_ADDR_EXP 73
18348: PUSH
18349: LD_INT 3
18351: ST_TO_ADDR
// hackDist := 12 ;
18352: LD_ADDR_EXP 74
18356: PUSH
18357: LD_INT 12
18359: ST_TO_ADDR
// hackCounter := [ ] ;
18360: LD_ADDR_EXP 75
18364: PUSH
18365: EMPTY
18366: ST_TO_ADDR
// end ;
18367: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18368: LD_EXP 70
18372: PUSH
18373: LD_INT 34
18375: PUSH
18376: LD_EXP 78
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PPUSH
18385: CALL_OW 69
18389: AND
18390: IFFALSE 18645
18392: GO 18394
18394: DISABLE
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
// begin enable ;
18399: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18400: LD_ADDR_VAR 0 1
18404: PUSH
18405: LD_INT 34
18407: PUSH
18408: LD_EXP 78
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: PUSH
18422: FOR_IN
18423: IFFALSE 18643
// begin if not i in hackTanks then
18425: LD_VAR 0 1
18429: PUSH
18430: LD_EXP 71
18434: IN
18435: NOT
18436: IFFALSE 18519
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18438: LD_ADDR_EXP 71
18442: PUSH
18443: LD_EXP 71
18447: PPUSH
18448: LD_EXP 71
18452: PUSH
18453: LD_INT 1
18455: PLUS
18456: PPUSH
18457: LD_VAR 0 1
18461: PPUSH
18462: CALL_OW 1
18466: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18467: LD_ADDR_EXP 72
18471: PUSH
18472: LD_EXP 72
18476: PPUSH
18477: LD_EXP 72
18481: PUSH
18482: LD_INT 1
18484: PLUS
18485: PPUSH
18486: EMPTY
18487: PPUSH
18488: CALL_OW 1
18492: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18493: LD_ADDR_EXP 75
18497: PUSH
18498: LD_EXP 75
18502: PPUSH
18503: LD_EXP 75
18507: PUSH
18508: LD_INT 1
18510: PLUS
18511: PPUSH
18512: EMPTY
18513: PPUSH
18514: CALL_OW 1
18518: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18519: LD_VAR 0 1
18523: PPUSH
18524: CALL_OW 302
18528: NOT
18529: IFFALSE 18542
// begin HackUnlinkAll ( i ) ;
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL 18648 0 1
// continue ;
18540: GO 18422
// end ; HackCheckCapturedStatus ( i ) ;
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL 19091 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18551: LD_ADDR_VAR 0 2
18555: PUSH
18556: LD_INT 81
18558: PUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 255
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 33
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 91
18585: PUSH
18586: LD_VAR 0 1
18590: PUSH
18591: LD_EXP 74
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 50
18603: PUSH
18604: EMPTY
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: ST_TO_ADDR
// if not tmp then
18618: LD_VAR 0 2
18622: NOT
18623: IFFALSE 18627
// continue ;
18625: GO 18422
// HackLink ( i , tmp ) ;
18627: LD_VAR 0 1
18631: PPUSH
18632: LD_VAR 0 2
18636: PPUSH
18637: CALL 18784 0 2
// end ;
18641: GO 18422
18643: POP
18644: POP
// end ;
18645: PPOPN 2
18647: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
18652: PPUSH
// if not hack in hackTanks then
18653: LD_VAR 0 1
18657: PUSH
18658: LD_EXP 71
18662: IN
18663: NOT
18664: IFFALSE 18668
// exit ;
18666: GO 18779
// index := GetElementIndex ( hackTanks , hack ) ;
18668: LD_ADDR_VAR 0 4
18672: PUSH
18673: LD_EXP 71
18677: PPUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL 24539 0 2
18687: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18688: LD_EXP 72
18692: PUSH
18693: LD_VAR 0 4
18697: ARRAY
18698: IFFALSE 18779
// begin for i in hackTanksCaptured [ index ] do
18700: LD_ADDR_VAR 0 3
18704: PUSH
18705: LD_EXP 72
18709: PUSH
18710: LD_VAR 0 4
18714: ARRAY
18715: PUSH
18716: FOR_IN
18717: IFFALSE 18743
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18719: LD_VAR 0 3
18723: PUSH
18724: LD_INT 1
18726: ARRAY
18727: PPUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_INT 2
18735: ARRAY
18736: PPUSH
18737: CALL_OW 235
18741: GO 18716
18743: POP
18744: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18745: LD_ADDR_EXP 72
18749: PUSH
18750: LD_EXP 72
18754: PPUSH
18755: LD_VAR 0 4
18759: PPUSH
18760: EMPTY
18761: PPUSH
18762: CALL_OW 1
18766: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18767: LD_VAR 0 1
18771: PPUSH
18772: LD_INT 0
18774: PPUSH
18775: CALL_OW 505
// end ; end ;
18779: LD_VAR 0 2
18783: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18784: LD_INT 0
18786: PPUSH
18787: PPUSH
18788: PPUSH
// if not hack in hackTanks or not vehicles then
18789: LD_VAR 0 1
18793: PUSH
18794: LD_EXP 71
18798: IN
18799: NOT
18800: PUSH
18801: LD_VAR 0 2
18805: NOT
18806: OR
18807: IFFALSE 18811
// exit ;
18809: GO 19086
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18811: LD_ADDR_VAR 0 2
18815: PUSH
18816: LD_VAR 0 1
18820: PPUSH
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: CALL 25189 0 4
18836: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18837: LD_ADDR_VAR 0 5
18841: PUSH
18842: LD_EXP 71
18846: PPUSH
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL 24539 0 2
18856: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18857: LD_EXP 72
18861: PUSH
18862: LD_VAR 0 5
18866: ARRAY
18867: PUSH
18868: LD_EXP 73
18872: LESS
18873: IFFALSE 19062
// begin for i := 1 to vehicles do
18875: LD_ADDR_VAR 0 4
18879: PUSH
18880: DOUBLE
18881: LD_INT 1
18883: DEC
18884: ST_TO_ADDR
18885: LD_VAR 0 2
18889: PUSH
18890: FOR_TO
18891: IFFALSE 19060
// begin if hackTanksCaptured [ index ] = hackLimit then
18893: LD_EXP 72
18897: PUSH
18898: LD_VAR 0 5
18902: ARRAY
18903: PUSH
18904: LD_EXP 73
18908: EQUAL
18909: IFFALSE 18913
// break ;
18911: GO 19060
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18913: LD_ADDR_EXP 75
18917: PUSH
18918: LD_EXP 75
18922: PPUSH
18923: LD_VAR 0 5
18927: PPUSH
18928: LD_EXP 75
18932: PUSH
18933: LD_VAR 0 5
18937: ARRAY
18938: PUSH
18939: LD_INT 1
18941: PLUS
18942: PPUSH
18943: CALL_OW 1
18947: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18948: LD_ADDR_EXP 72
18952: PUSH
18953: LD_EXP 72
18957: PPUSH
18958: LD_VAR 0 5
18962: PUSH
18963: LD_EXP 72
18967: PUSH
18968: LD_VAR 0 5
18972: ARRAY
18973: PUSH
18974: LD_INT 1
18976: PLUS
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: LD_VAR 0 2
18986: PUSH
18987: LD_VAR 0 4
18991: ARRAY
18992: PUSH
18993: LD_VAR 0 2
18997: PUSH
18998: LD_VAR 0 4
19002: ARRAY
19003: PPUSH
19004: CALL_OW 255
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL 24754 0 3
19017: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19018: LD_VAR 0 2
19022: PUSH
19023: LD_VAR 0 4
19027: ARRAY
19028: PPUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 255
19038: PPUSH
19039: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19043: LD_VAR 0 2
19047: PUSH
19048: LD_VAR 0 4
19052: ARRAY
19053: PPUSH
19054: CALL_OW 141
// end ;
19058: GO 18890
19060: POP
19061: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19062: LD_VAR 0 1
19066: PPUSH
19067: LD_EXP 72
19071: PUSH
19072: LD_VAR 0 5
19076: ARRAY
19077: PUSH
19078: LD_INT 0
19080: PLUS
19081: PPUSH
19082: CALL_OW 505
// end ;
19086: LD_VAR 0 3
19090: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19091: LD_INT 0
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
// if not hack in hackTanks then
19097: LD_VAR 0 1
19101: PUSH
19102: LD_EXP 71
19106: IN
19107: NOT
19108: IFFALSE 19112
// exit ;
19110: GO 19352
// index := GetElementIndex ( hackTanks , hack ) ;
19112: LD_ADDR_VAR 0 4
19116: PUSH
19117: LD_EXP 71
19121: PPUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL 24539 0 2
19131: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: DOUBLE
19138: LD_EXP 72
19142: PUSH
19143: LD_VAR 0 4
19147: ARRAY
19148: INC
19149: ST_TO_ADDR
19150: LD_INT 1
19152: PUSH
19153: FOR_DOWNTO
19154: IFFALSE 19326
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19156: LD_ADDR_VAR 0 5
19160: PUSH
19161: LD_EXP 72
19165: PUSH
19166: LD_VAR 0 4
19170: ARRAY
19171: PUSH
19172: LD_VAR 0 3
19176: ARRAY
19177: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19178: LD_VAR 0 5
19182: PUSH
19183: LD_INT 1
19185: ARRAY
19186: PPUSH
19187: CALL_OW 302
19191: NOT
19192: PUSH
19193: LD_VAR 0 5
19197: PUSH
19198: LD_INT 1
19200: ARRAY
19201: PPUSH
19202: CALL_OW 255
19206: PUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL_OW 255
19216: NONEQUAL
19217: OR
19218: IFFALSE 19324
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19220: LD_VAR 0 5
19224: PUSH
19225: LD_INT 1
19227: ARRAY
19228: PPUSH
19229: CALL_OW 305
19233: PUSH
19234: LD_VAR 0 5
19238: PUSH
19239: LD_INT 1
19241: ARRAY
19242: PPUSH
19243: CALL_OW 255
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 255
19257: EQUAL
19258: AND
19259: IFFALSE 19283
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19261: LD_VAR 0 5
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 5
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19283: LD_ADDR_EXP 72
19287: PUSH
19288: LD_EXP 72
19292: PPUSH
19293: LD_VAR 0 4
19297: PPUSH
19298: LD_EXP 72
19302: PUSH
19303: LD_VAR 0 4
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 3
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// end ; end ;
19324: GO 19153
19326: POP
19327: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_EXP 72
19337: PUSH
19338: LD_VAR 0 4
19342: ARRAY
19343: PUSH
19344: LD_INT 0
19346: PLUS
19347: PPUSH
19348: CALL_OW 505
// end ;
19352: LD_VAR 0 2
19356: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
// if not hack in hackTanks then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 71
19372: IN
19373: NOT
19374: IFFALSE 19378
// exit ;
19376: GO 19463
// index := GetElementIndex ( hackTanks , hack ) ;
19378: LD_ADDR_VAR 0 5
19382: PUSH
19383: LD_EXP 71
19387: PPUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL 24539 0 2
19397: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_EXP 72
19412: PUSH
19413: LD_VAR 0 5
19417: ARRAY
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19461
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19422: LD_EXP 72
19426: PUSH
19427: LD_VAR 0 5
19431: ARRAY
19432: PUSH
19433: LD_VAR 0 4
19437: ARRAY
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: PUSH
19443: LD_VAR 0 2
19447: EQUAL
19448: IFFALSE 19459
// KillUnit ( vehicle ) ;
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 66
19459: GO 19419
19461: POP
19462: POP
// end ; end_of_file
19463: LD_VAR 0 3
19467: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin display_strings := [ cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ] ;
19468: LD_ADDR_OWVAR 47
19472: PUSH
19473: LD_VAR 0 1
19477: PUSH
19478: LD_VAR 0 2
19482: PUSH
19483: LD_VAR 0 3
19487: PUSH
19488: LD_VAR 0 4
19492: PUSH
19493: LD_VAR 0 5
19497: PUSH
19498: LD_VAR 0 6
19502: PUSH
19503: LD_VAR 0 7
19507: PUSH
19508: LD_VAR 0 8
19512: PUSH
19513: LD_VAR 0 9
19517: PUSH
19518: LD_VAR 0 10
19522: PUSH
19523: LD_VAR 0 11
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: ST_TO_ADDR
// case cmd of 200 .. 299 :
19541: LD_VAR 0 1
19545: PUSH
19546: LD_INT 200
19548: DOUBLE
19549: GREATEREQUAL
19550: IFFALSE 19558
19552: LD_INT 299
19554: DOUBLE
19555: LESSEQUAL
19556: IFTRUE 19560
19558: GO 19592
19560: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: LD_VAR 0 3
19575: PPUSH
19576: LD_VAR 0 4
19580: PPUSH
19581: LD_VAR 0 5
19585: PPUSH
19586: CALL 17789 0 5
19590: GO 19669
19592: LD_INT 300
19594: DOUBLE
19595: GREATEREQUAL
19596: IFFALSE 19604
19598: LD_INT 399
19600: DOUBLE
19601: LESSEQUAL
19602: IFTRUE 19606
19604: GO 19668
19606: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: LD_VAR 0 3
19621: PPUSH
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_VAR 0 5
19631: PPUSH
19632: LD_VAR 0 6
19636: PPUSH
19637: LD_VAR 0 7
19641: PPUSH
19642: LD_VAR 0 8
19646: PPUSH
19647: LD_VAR 0 9
19651: PPUSH
19652: LD_VAR 0 10
19656: PPUSH
19657: LD_VAR 0 11
19661: PPUSH
19662: CALL 16195 0 11
19666: GO 19669
19668: POP
// end ; end_of_file
19669: PPOPN 11
19671: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19672: LD_INT 0
19674: PPUSH
// ar_crane := 88 ;
19675: LD_ADDR_EXP 82
19679: PUSH
19680: LD_INT 88
19682: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19683: LD_ADDR_EXP 77
19687: PUSH
19688: LD_INT 89
19690: ST_TO_ADDR
// us_hack := 99 ;
19691: LD_ADDR_EXP 78
19695: PUSH
19696: LD_INT 99
19698: ST_TO_ADDR
// us_artillery := 97 ;
19699: LD_ADDR_EXP 79
19703: PUSH
19704: LD_INT 97
19706: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19707: LD_ADDR_EXP 80
19711: PUSH
19712: LD_INT 91
19714: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19715: LD_ADDR_EXP 81
19719: PUSH
19720: LD_INT 92
19722: ST_TO_ADDR
// ru_radar := 98 ;
19723: LD_ADDR_EXP 76
19727: PUSH
19728: LD_INT 98
19730: ST_TO_ADDR
// tech_Artillery := 80 ;
19731: LD_ADDR_EXP 83
19735: PUSH
19736: LD_INT 80
19738: ST_TO_ADDR
// tech_RadMat := 81 ;
19739: LD_ADDR_EXP 84
19743: PUSH
19744: LD_INT 81
19746: ST_TO_ADDR
// tech_BasicTools := 82 ;
19747: LD_ADDR_EXP 85
19751: PUSH
19752: LD_INT 82
19754: ST_TO_ADDR
// tech_Cargo := 83 ;
19755: LD_ADDR_EXP 86
19759: PUSH
19760: LD_INT 83
19762: ST_TO_ADDR
// tech_Track := 84 ;
19763: LD_ADDR_EXP 87
19767: PUSH
19768: LD_INT 84
19770: ST_TO_ADDR
// tech_Crane := 85 ;
19771: LD_ADDR_EXP 88
19775: PUSH
19776: LD_INT 85
19778: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19779: LD_ADDR_EXP 89
19783: PUSH
19784: LD_INT 86
19786: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19787: LD_ADDR_EXP 90
19791: PUSH
19792: LD_INT 87
19794: ST_TO_ADDR
// end ;
19795: LD_VAR 0 1
19799: RET
// every 1 do
19800: GO 19802
19802: DISABLE
// InitGlobalVariables ; end_of_file
19803: CALL 19672 0 0
19807: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19808: LD_INT 0
19810: PPUSH
19811: PPUSH
// if exist_mode then
19812: LD_VAR 0 2
19816: IFFALSE 19841
// unit := CreateCharacter ( prefix & ident ) else
19818: LD_ADDR_VAR 0 5
19822: PUSH
19823: LD_VAR 0 3
19827: PUSH
19828: LD_VAR 0 1
19832: STR
19833: PPUSH
19834: CALL_OW 34
19838: ST_TO_ADDR
19839: GO 19856
// unit := NewCharacter ( ident ) ;
19841: LD_ADDR_VAR 0 5
19845: PUSH
19846: LD_VAR 0 1
19850: PPUSH
19851: CALL_OW 25
19855: ST_TO_ADDR
// result := unit ;
19856: LD_ADDR_VAR 0 4
19860: PUSH
19861: LD_VAR 0 5
19865: ST_TO_ADDR
// end ;
19866: LD_VAR 0 4
19870: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19871: LD_INT 0
19873: PPUSH
19874: PPUSH
// if not side or not nation then
19875: LD_VAR 0 1
19879: NOT
19880: PUSH
19881: LD_VAR 0 2
19885: NOT
19886: OR
19887: IFFALSE 19891
// exit ;
19889: GO 20655
// case nation of nation_american :
19891: LD_VAR 0 2
19895: PUSH
19896: LD_INT 1
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 20118
19904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19905: LD_ADDR_VAR 0 4
19909: PUSH
19910: LD_INT 35
19912: PUSH
19913: LD_INT 45
19915: PUSH
19916: LD_INT 46
19918: PUSH
19919: LD_INT 47
19921: PUSH
19922: LD_INT 82
19924: PUSH
19925: LD_INT 83
19927: PUSH
19928: LD_INT 84
19930: PUSH
19931: LD_INT 85
19933: PUSH
19934: LD_INT 86
19936: PUSH
19937: LD_INT 1
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 6
19945: PUSH
19946: LD_INT 15
19948: PUSH
19949: LD_INT 16
19951: PUSH
19952: LD_INT 7
19954: PUSH
19955: LD_INT 12
19957: PUSH
19958: LD_INT 13
19960: PUSH
19961: LD_INT 10
19963: PUSH
19964: LD_INT 14
19966: PUSH
19967: LD_INT 20
19969: PUSH
19970: LD_INT 21
19972: PUSH
19973: LD_INT 22
19975: PUSH
19976: LD_INT 25
19978: PUSH
19979: LD_INT 32
19981: PUSH
19982: LD_INT 27
19984: PUSH
19985: LD_INT 36
19987: PUSH
19988: LD_INT 69
19990: PUSH
19991: LD_INT 39
19993: PUSH
19994: LD_INT 34
19996: PUSH
19997: LD_INT 40
19999: PUSH
20000: LD_INT 48
20002: PUSH
20003: LD_INT 49
20005: PUSH
20006: LD_INT 50
20008: PUSH
20009: LD_INT 51
20011: PUSH
20012: LD_INT 52
20014: PUSH
20015: LD_INT 53
20017: PUSH
20018: LD_INT 54
20020: PUSH
20021: LD_INT 55
20023: PUSH
20024: LD_INT 56
20026: PUSH
20027: LD_INT 57
20029: PUSH
20030: LD_INT 58
20032: PUSH
20033: LD_INT 59
20035: PUSH
20036: LD_INT 60
20038: PUSH
20039: LD_INT 61
20041: PUSH
20042: LD_INT 62
20044: PUSH
20045: LD_INT 80
20047: PUSH
20048: LD_INT 82
20050: PUSH
20051: LD_INT 83
20053: PUSH
20054: LD_INT 84
20056: PUSH
20057: LD_INT 85
20059: PUSH
20060: LD_INT 86
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 20579
20118: LD_INT 2
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20348
20126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20127: LD_ADDR_VAR 0 4
20131: PUSH
20132: LD_INT 35
20134: PUSH
20135: LD_INT 45
20137: PUSH
20138: LD_INT 46
20140: PUSH
20141: LD_INT 47
20143: PUSH
20144: LD_INT 82
20146: PUSH
20147: LD_INT 83
20149: PUSH
20150: LD_INT 84
20152: PUSH
20153: LD_INT 85
20155: PUSH
20156: LD_INT 87
20158: PUSH
20159: LD_INT 70
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: LD_INT 11
20167: PUSH
20168: LD_INT 3
20170: PUSH
20171: LD_INT 4
20173: PUSH
20174: LD_INT 5
20176: PUSH
20177: LD_INT 6
20179: PUSH
20180: LD_INT 15
20182: PUSH
20183: LD_INT 18
20185: PUSH
20186: LD_INT 7
20188: PUSH
20189: LD_INT 17
20191: PUSH
20192: LD_INT 8
20194: PUSH
20195: LD_INT 20
20197: PUSH
20198: LD_INT 21
20200: PUSH
20201: LD_INT 22
20203: PUSH
20204: LD_INT 72
20206: PUSH
20207: LD_INT 26
20209: PUSH
20210: LD_INT 69
20212: PUSH
20213: LD_INT 39
20215: PUSH
20216: LD_INT 40
20218: PUSH
20219: LD_INT 41
20221: PUSH
20222: LD_INT 42
20224: PUSH
20225: LD_INT 43
20227: PUSH
20228: LD_INT 48
20230: PUSH
20231: LD_INT 49
20233: PUSH
20234: LD_INT 50
20236: PUSH
20237: LD_INT 51
20239: PUSH
20240: LD_INT 52
20242: PUSH
20243: LD_INT 53
20245: PUSH
20246: LD_INT 54
20248: PUSH
20249: LD_INT 55
20251: PUSH
20252: LD_INT 56
20254: PUSH
20255: LD_INT 60
20257: PUSH
20258: LD_INT 61
20260: PUSH
20261: LD_INT 62
20263: PUSH
20264: LD_INT 66
20266: PUSH
20267: LD_INT 67
20269: PUSH
20270: LD_INT 68
20272: PUSH
20273: LD_INT 81
20275: PUSH
20276: LD_INT 82
20278: PUSH
20279: LD_INT 83
20281: PUSH
20282: LD_INT 84
20284: PUSH
20285: LD_INT 85
20287: PUSH
20288: LD_INT 87
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: ST_TO_ADDR
20346: GO 20579
20348: LD_INT 3
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20578
20356: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20357: LD_ADDR_VAR 0 4
20361: PUSH
20362: LD_INT 46
20364: PUSH
20365: LD_INT 47
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 82
20376: PUSH
20377: LD_INT 83
20379: PUSH
20380: LD_INT 84
20382: PUSH
20383: LD_INT 85
20385: PUSH
20386: LD_INT 86
20388: PUSH
20389: LD_INT 11
20391: PUSH
20392: LD_INT 9
20394: PUSH
20395: LD_INT 20
20397: PUSH
20398: LD_INT 19
20400: PUSH
20401: LD_INT 21
20403: PUSH
20404: LD_INT 24
20406: PUSH
20407: LD_INT 22
20409: PUSH
20410: LD_INT 25
20412: PUSH
20413: LD_INT 28
20415: PUSH
20416: LD_INT 29
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 31
20424: PUSH
20425: LD_INT 37
20427: PUSH
20428: LD_INT 38
20430: PUSH
20431: LD_INT 32
20433: PUSH
20434: LD_INT 27
20436: PUSH
20437: LD_INT 33
20439: PUSH
20440: LD_INT 69
20442: PUSH
20443: LD_INT 39
20445: PUSH
20446: LD_INT 34
20448: PUSH
20449: LD_INT 40
20451: PUSH
20452: LD_INT 71
20454: PUSH
20455: LD_INT 23
20457: PUSH
20458: LD_INT 44
20460: PUSH
20461: LD_INT 48
20463: PUSH
20464: LD_INT 49
20466: PUSH
20467: LD_INT 50
20469: PUSH
20470: LD_INT 51
20472: PUSH
20473: LD_INT 52
20475: PUSH
20476: LD_INT 53
20478: PUSH
20479: LD_INT 54
20481: PUSH
20482: LD_INT 55
20484: PUSH
20485: LD_INT 56
20487: PUSH
20488: LD_INT 57
20490: PUSH
20491: LD_INT 58
20493: PUSH
20494: LD_INT 59
20496: PUSH
20497: LD_INT 63
20499: PUSH
20500: LD_INT 64
20502: PUSH
20503: LD_INT 65
20505: PUSH
20506: LD_INT 82
20508: PUSH
20509: LD_INT 83
20511: PUSH
20512: LD_INT 84
20514: PUSH
20515: LD_INT 85
20517: PUSH
20518: LD_INT 86
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: ST_TO_ADDR
20576: GO 20579
20578: POP
// if state > - 1 and state < 3 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: GREATER
20588: PUSH
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 3
20596: LESS
20597: AND
20598: IFFALSE 20655
// for i in result do
20600: LD_ADDR_VAR 0 5
20604: PUSH
20605: LD_VAR 0 4
20609: PUSH
20610: FOR_IN
20611: IFFALSE 20653
// if GetTech ( i , side ) <> state then
20613: LD_VAR 0 5
20617: PPUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 321
20627: PUSH
20628: LD_VAR 0 3
20632: NONEQUAL
20633: IFFALSE 20651
// result := result diff i ;
20635: LD_ADDR_VAR 0 4
20639: PUSH
20640: LD_VAR 0 4
20644: PUSH
20645: LD_VAR 0 5
20649: DIFF
20650: ST_TO_ADDR
20651: GO 20610
20653: POP
20654: POP
// end ;
20655: LD_VAR 0 4
20659: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20660: LD_INT 0
20662: PPUSH
20663: PPUSH
20664: PPUSH
// result := true ;
20665: LD_ADDR_VAR 0 3
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20673: LD_ADDR_VAR 0 5
20677: PUSH
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 480
20687: ST_TO_ADDR
// if not tmp then
20688: LD_VAR 0 5
20692: NOT
20693: IFFALSE 20697
// exit ;
20695: GO 20746
// for i in tmp do
20697: LD_ADDR_VAR 0 4
20701: PUSH
20702: LD_VAR 0 5
20706: PUSH
20707: FOR_IN
20708: IFFALSE 20744
// if GetTech ( i , side ) <> state_researched then
20710: LD_VAR 0 4
20714: PPUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL_OW 321
20724: PUSH
20725: LD_INT 2
20727: NONEQUAL
20728: IFFALSE 20742
// begin result := false ;
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// exit ;
20738: POP
20739: POP
20740: GO 20746
// end ;
20742: GO 20707
20744: POP
20745: POP
// end ;
20746: LD_VAR 0 3
20750: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20766: LD_VAR 0 1
20770: NOT
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 257
20781: PUSH
20782: LD_INT 9
20784: NONEQUAL
20785: OR
20786: IFFALSE 20790
// exit ;
20788: GO 21363
// side := GetSide ( unit ) ;
20790: LD_ADDR_VAR 0 9
20794: PUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 255
20804: ST_TO_ADDR
// tech_space := tech_spacanom ;
20805: LD_ADDR_VAR 0 12
20809: PUSH
20810: LD_INT 29
20812: ST_TO_ADDR
// tech_time := tech_taurad ;
20813: LD_ADDR_VAR 0 13
20817: PUSH
20818: LD_INT 28
20820: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20821: LD_ADDR_VAR 0 11
20825: PUSH
20826: LD_VAR 0 1
20830: PPUSH
20831: CALL_OW 310
20835: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20836: LD_VAR 0 11
20840: PPUSH
20841: CALL_OW 247
20845: PUSH
20846: LD_INT 2
20848: EQUAL
20849: IFFALSE 20853
// exit ;
20851: GO 21363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20853: LD_ADDR_VAR 0 8
20857: PUSH
20858: LD_INT 81
20860: PUSH
20861: LD_VAR 0 9
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: ST_TO_ADDR
// if not tmp then
20896: LD_VAR 0 8
20900: NOT
20901: IFFALSE 20905
// exit ;
20903: GO 21363
// if in_unit then
20905: LD_VAR 0 11
20909: IFFALSE 20933
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20911: LD_ADDR_VAR 0 10
20915: PUSH
20916: LD_VAR 0 8
20920: PPUSH
20921: LD_VAR 0 11
20925: PPUSH
20926: CALL_OW 74
20930: ST_TO_ADDR
20931: GO 20953
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20933: LD_ADDR_VAR 0 10
20937: PUSH
20938: LD_VAR 0 8
20942: PPUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 74
20952: ST_TO_ADDR
// if not enemy then
20953: LD_VAR 0 10
20957: NOT
20958: IFFALSE 20962
// exit ;
20960: GO 21363
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20962: LD_VAR 0 11
20966: PUSH
20967: LD_VAR 0 11
20971: PPUSH
20972: LD_VAR 0 10
20976: PPUSH
20977: CALL_OW 296
20981: PUSH
20982: LD_INT 13
20984: GREATER
20985: AND
20986: PUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: LD_VAR 0 10
20996: PPUSH
20997: CALL_OW 296
21001: PUSH
21002: LD_INT 12
21004: GREATER
21005: OR
21006: IFFALSE 21010
// exit ;
21008: GO 21363
// missile := [ 1 ] ;
21010: LD_ADDR_VAR 0 14
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: EMPTY
21019: LIST
21020: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21021: LD_VAR 0 9
21025: PPUSH
21026: LD_VAR 0 12
21030: PPUSH
21031: CALL_OW 325
21035: IFFALSE 21064
// missile := Insert ( missile , missile + 1 , 2 ) ;
21037: LD_ADDR_VAR 0 14
21041: PUSH
21042: LD_VAR 0 14
21046: PPUSH
21047: LD_VAR 0 14
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: PPUSH
21056: LD_INT 2
21058: PPUSH
21059: CALL_OW 2
21063: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21064: LD_VAR 0 9
21068: PPUSH
21069: LD_VAR 0 13
21073: PPUSH
21074: CALL_OW 325
21078: PUSH
21079: LD_VAR 0 10
21083: PPUSH
21084: CALL_OW 255
21088: PPUSH
21089: LD_VAR 0 13
21093: PPUSH
21094: CALL_OW 325
21098: NOT
21099: AND
21100: IFFALSE 21129
// missile := Insert ( missile , missile + 1 , 3 ) ;
21102: LD_ADDR_VAR 0 14
21106: PUSH
21107: LD_VAR 0 14
21111: PPUSH
21112: LD_VAR 0 14
21116: PUSH
21117: LD_INT 1
21119: PLUS
21120: PPUSH
21121: LD_INT 3
21123: PPUSH
21124: CALL_OW 2
21128: ST_TO_ADDR
// if missile < 2 then
21129: LD_VAR 0 14
21133: PUSH
21134: LD_INT 2
21136: LESS
21137: IFFALSE 21141
// exit ;
21139: GO 21363
// x := GetX ( enemy ) ;
21141: LD_ADDR_VAR 0 4
21145: PUSH
21146: LD_VAR 0 10
21150: PPUSH
21151: CALL_OW 250
21155: ST_TO_ADDR
// y := GetY ( enemy ) ;
21156: LD_ADDR_VAR 0 5
21160: PUSH
21161: LD_VAR 0 10
21165: PPUSH
21166: CALL_OW 251
21170: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21171: LD_ADDR_VAR 0 6
21175: PUSH
21176: LD_VAR 0 4
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PPUSH
21185: LD_INT 1
21187: PPUSH
21188: CALL_OW 12
21192: PLUS
21193: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21194: LD_ADDR_VAR 0 7
21198: PUSH
21199: LD_VAR 0 5
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PPUSH
21208: LD_INT 1
21210: PPUSH
21211: CALL_OW 12
21215: PLUS
21216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21217: LD_VAR 0 6
21221: PPUSH
21222: LD_VAR 0 7
21226: PPUSH
21227: CALL_OW 488
21231: NOT
21232: IFFALSE 21254
// begin _x := x ;
21234: LD_ADDR_VAR 0 6
21238: PUSH
21239: LD_VAR 0 4
21243: ST_TO_ADDR
// _y := y ;
21244: LD_ADDR_VAR 0 7
21248: PUSH
21249: LD_VAR 0 5
21253: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: LD_INT 1
21261: PPUSH
21262: LD_VAR 0 14
21266: PPUSH
21267: CALL_OW 12
21271: ST_TO_ADDR
// case i of 1 :
21272: LD_VAR 0 3
21276: PUSH
21277: LD_INT 1
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21302
21285: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21286: LD_VAR 0 1
21290: PPUSH
21291: LD_VAR 0 10
21295: PPUSH
21296: CALL_OW 115
21300: GO 21363
21302: LD_INT 2
21304: DOUBLE
21305: EQUAL
21306: IFTRUE 21310
21308: GO 21332
21310: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_VAR 0 6
21320: PPUSH
21321: LD_VAR 0 7
21325: PPUSH
21326: CALL_OW 153
21330: GO 21363
21332: LD_INT 3
21334: DOUBLE
21335: EQUAL
21336: IFTRUE 21340
21338: GO 21362
21340: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21341: LD_VAR 0 1
21345: PPUSH
21346: LD_VAR 0 6
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: CALL_OW 154
21360: GO 21363
21362: POP
// end ;
21363: LD_VAR 0 2
21367: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21368: LD_INT 0
21370: PPUSH
21371: PPUSH
21372: PPUSH
21373: PPUSH
21374: PPUSH
21375: PPUSH
// if not unit or not building then
21376: LD_VAR 0 1
21380: NOT
21381: PUSH
21382: LD_VAR 0 2
21386: NOT
21387: OR
21388: IFFALSE 21392
// exit ;
21390: GO 21550
// x := GetX ( building ) ;
21392: LD_ADDR_VAR 0 5
21396: PUSH
21397: LD_VAR 0 2
21401: PPUSH
21402: CALL_OW 250
21406: ST_TO_ADDR
// y := GetY ( building ) ;
21407: LD_ADDR_VAR 0 6
21411: PUSH
21412: LD_VAR 0 2
21416: PPUSH
21417: CALL_OW 251
21421: ST_TO_ADDR
// for i = 0 to 5 do
21422: LD_ADDR_VAR 0 4
21426: PUSH
21427: DOUBLE
21428: LD_INT 0
21430: DEC
21431: ST_TO_ADDR
21432: LD_INT 5
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21548
// begin _x := ShiftX ( x , i , 3 ) ;
21438: LD_ADDR_VAR 0 7
21442: PUSH
21443: LD_VAR 0 5
21447: PPUSH
21448: LD_VAR 0 4
21452: PPUSH
21453: LD_INT 3
21455: PPUSH
21456: CALL_OW 272
21460: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21461: LD_ADDR_VAR 0 8
21465: PUSH
21466: LD_VAR 0 6
21470: PPUSH
21471: LD_VAR 0 4
21475: PPUSH
21476: LD_INT 3
21478: PPUSH
21479: CALL_OW 273
21483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21484: LD_VAR 0 7
21488: PPUSH
21489: LD_VAR 0 8
21493: PPUSH
21494: CALL_OW 488
21498: NOT
21499: IFFALSE 21503
// continue ;
21501: GO 21435
// if HexInfo ( _x , _y ) = 0 then
21503: LD_VAR 0 7
21507: PPUSH
21508: LD_VAR 0 8
21512: PPUSH
21513: CALL_OW 428
21517: PUSH
21518: LD_INT 0
21520: EQUAL
21521: IFFALSE 21546
// begin ComMoveXY ( unit , _x , _y ) ;
21523: LD_VAR 0 1
21527: PPUSH
21528: LD_VAR 0 7
21532: PPUSH
21533: LD_VAR 0 8
21537: PPUSH
21538: CALL_OW 111
// exit ;
21542: POP
21543: POP
21544: GO 21550
// end ; end ;
21546: GO 21435
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 3
21554: RET
// export function ScanBase ( side , base_area ) ; begin
21555: LD_INT 0
21557: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21558: LD_ADDR_VAR 0 3
21562: PUSH
21563: LD_VAR 0 2
21567: PPUSH
21568: LD_INT 81
21570: PUSH
21571: LD_VAR 0 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 70
21584: ST_TO_ADDR
// end ;
21585: LD_VAR 0 3
21589: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
// result := false ;
21596: LD_ADDR_VAR 0 2
21600: PUSH
21601: LD_INT 0
21603: ST_TO_ADDR
// side := GetSide ( unit ) ;
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: LD_VAR 0 1
21613: PPUSH
21614: CALL_OW 255
21618: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21619: LD_ADDR_VAR 0 4
21623: PUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 248
21633: ST_TO_ADDR
// case nat of 1 :
21634: LD_VAR 0 4
21638: PUSH
21639: LD_INT 1
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21658
21647: POP
// tech := tech_lassight ; 2 :
21648: LD_ADDR_VAR 0 5
21652: PUSH
21653: LD_INT 12
21655: ST_TO_ADDR
21656: GO 21697
21658: LD_INT 2
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21677
21666: POP
// tech := tech_mortar ; 3 :
21667: LD_ADDR_VAR 0 5
21671: PUSH
21672: LD_INT 41
21674: ST_TO_ADDR
21675: GO 21697
21677: LD_INT 3
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// tech := tech_bazooka ; end ;
21686: LD_ADDR_VAR 0 5
21690: PUSH
21691: LD_INT 44
21693: ST_TO_ADDR
21694: GO 21697
21696: POP
// if Researched ( side , tech ) then
21697: LD_VAR 0 3
21701: PPUSH
21702: LD_VAR 0 5
21706: PPUSH
21707: CALL_OW 325
21711: IFFALSE 21738
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21713: LD_ADDR_VAR 0 2
21717: PUSH
21718: LD_INT 5
21720: PUSH
21721: LD_INT 8
21723: PUSH
21724: LD_INT 9
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: LD_VAR 0 4
21736: ARRAY
21737: ST_TO_ADDR
// end ;
21738: LD_VAR 0 2
21742: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21743: LD_INT 0
21745: PPUSH
21746: PPUSH
21747: PPUSH
// if not mines then
21748: LD_VAR 0 2
21752: NOT
21753: IFFALSE 21757
// exit ;
21755: GO 21901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: LD_INT 81
21764: PUSH
21765: LD_VAR 0 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: LD_INT 21
21779: PUSH
21780: LD_INT 3
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: ST_TO_ADDR
// for i in mines do
21800: LD_ADDR_VAR 0 4
21804: PUSH
21805: LD_VAR 0 2
21809: PUSH
21810: FOR_IN
21811: IFFALSE 21899
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21813: LD_VAR 0 4
21817: PUSH
21818: LD_INT 1
21820: ARRAY
21821: PPUSH
21822: LD_VAR 0 4
21826: PUSH
21827: LD_INT 2
21829: ARRAY
21830: PPUSH
21831: CALL_OW 458
21835: NOT
21836: IFFALSE 21840
// continue ;
21838: GO 21810
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21840: LD_VAR 0 4
21844: PUSH
21845: LD_INT 1
21847: ARRAY
21848: PPUSH
21849: LD_VAR 0 4
21853: PUSH
21854: LD_INT 2
21856: ARRAY
21857: PPUSH
21858: CALL_OW 428
21862: PUSH
21863: LD_VAR 0 5
21867: IN
21868: IFFALSE 21897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21870: LD_VAR 0 4
21874: PUSH
21875: LD_INT 1
21877: ARRAY
21878: PPUSH
21879: LD_VAR 0 4
21883: PUSH
21884: LD_INT 2
21886: ARRAY
21887: PPUSH
21888: LD_VAR 0 1
21892: PPUSH
21893: CALL_OW 456
// end ;
21897: GO 21810
21899: POP
21900: POP
// end ;
21901: LD_VAR 0 3
21905: RET
// export function Count ( array ) ; var i ; begin
21906: LD_INT 0
21908: PPUSH
21909: PPUSH
// result := 0 ;
21910: LD_ADDR_VAR 0 2
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// for i in array do
21918: LD_ADDR_VAR 0 3
21922: PUSH
21923: LD_VAR 0 1
21927: PUSH
21928: FOR_IN
21929: IFFALSE 21953
// if i then
21931: LD_VAR 0 3
21935: IFFALSE 21951
// result := result + 1 ;
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_VAR 0 2
21946: PUSH
21947: LD_INT 1
21949: PLUS
21950: ST_TO_ADDR
21951: GO 21928
21953: POP
21954: POP
// end ;
21955: LD_VAR 0 2
21959: RET
// export function IsEmpty ( building ) ; begin
21960: LD_INT 0
21962: PPUSH
// if not building then
21963: LD_VAR 0 1
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22015
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21972: LD_ADDR_VAR 0 2
21976: PUSH
21977: LD_VAR 0 1
21981: PUSH
21982: LD_INT 22
21984: PUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: CALL_OW 255
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 58
22001: PUSH
22002: EMPTY
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PPUSH
22009: CALL_OW 69
22013: IN
22014: ST_TO_ADDR
// end ;
22015: LD_VAR 0 2
22019: RET
// export function IsNotFull ( building ) ; begin
22020: LD_INT 0
22022: PPUSH
// if not building then
22023: LD_VAR 0 1
22027: NOT
22028: IFFALSE 22032
// exit ;
22030: GO 22051
// result := UnitsInside ( building ) < 6 ;
22032: LD_ADDR_VAR 0 2
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 313
22046: PUSH
22047: LD_INT 6
22049: LESS
22050: ST_TO_ADDR
// end ;
22051: LD_VAR 0 2
22055: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22056: LD_INT 0
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
// tmp := [ ] ;
22062: LD_ADDR_VAR 0 3
22066: PUSH
22067: EMPTY
22068: ST_TO_ADDR
// list := [ ] ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: EMPTY
22075: ST_TO_ADDR
// for i = 16 to 25 do
22076: LD_ADDR_VAR 0 4
22080: PUSH
22081: DOUBLE
22082: LD_INT 16
22084: DEC
22085: ST_TO_ADDR
22086: LD_INT 25
22088: PUSH
22089: FOR_TO
22090: IFFALSE 22163
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22092: LD_ADDR_VAR 0 3
22096: PUSH
22097: LD_VAR 0 3
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 255
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 91
22121: PUSH
22122: LD_VAR 0 1
22126: PUSH
22127: LD_INT 6
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_VAR 0 4
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: PPUSH
22155: CALL_OW 69
22159: ADD
22160: ST_TO_ADDR
22161: GO 22089
22163: POP
22164: POP
// for i = 1 to tmp do
22165: LD_ADDR_VAR 0 4
22169: PUSH
22170: DOUBLE
22171: LD_INT 1
22173: DEC
22174: ST_TO_ADDR
22175: LD_VAR 0 3
22179: PUSH
22180: FOR_TO
22181: IFFALSE 22269
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 5
22192: PUSH
22193: LD_VAR 0 3
22197: PUSH
22198: LD_VAR 0 4
22202: ARRAY
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_VAR 0 3
22213: PUSH
22214: LD_VAR 0 4
22218: ARRAY
22219: PPUSH
22220: CALL_OW 250
22224: PUSH
22225: LD_VAR 0 3
22229: PUSH
22230: LD_VAR 0 4
22234: ARRAY
22235: PPUSH
22236: CALL_OW 251
22240: PUSH
22241: LD_VAR 0 3
22245: PUSH
22246: LD_VAR 0 4
22250: ARRAY
22251: PPUSH
22252: CALL_OW 254
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: ADD
22266: ST_TO_ADDR
22267: GO 22180
22269: POP
22270: POP
// result := list ;
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_VAR 0 5
22280: ST_TO_ADDR
// end ;
22281: LD_VAR 0 2
22285: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
22294: PPUSH
// if not factory then
22295: LD_VAR 0 1
22299: NOT
22300: IFFALSE 22304
// exit ;
22302: GO 22897
// if control = control_apeman then
22304: LD_VAR 0 4
22308: PUSH
22309: LD_INT 5
22311: EQUAL
22312: IFFALSE 22421
// begin tmp := UnitsInside ( factory ) ;
22314: LD_ADDR_VAR 0 8
22318: PUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: CALL_OW 313
22328: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22329: LD_VAR 0 8
22333: PPUSH
22334: LD_INT 25
22336: PUSH
22337: LD_INT 12
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 72
22348: NOT
22349: IFFALSE 22359
// control := control_manual ;
22351: LD_ADDR_VAR 0 4
22355: PUSH
22356: LD_INT 1
22358: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22359: LD_ADDR_VAR 0 8
22363: PUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: CALL 22056 0 1
22373: ST_TO_ADDR
// if tmp then
22374: LD_VAR 0 8
22378: IFFALSE 22421
// begin for i in tmp do
22380: LD_ADDR_VAR 0 7
22384: PUSH
22385: LD_VAR 0 8
22389: PUSH
22390: FOR_IN
22391: IFFALSE 22419
// if i [ 1 ] = b_ext_radio then
22393: LD_VAR 0 7
22397: PUSH
22398: LD_INT 1
22400: ARRAY
22401: PUSH
22402: LD_INT 22
22404: EQUAL
22405: IFFALSE 22417
// begin control := control_remote ;
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_INT 2
22414: ST_TO_ADDR
// break ;
22415: GO 22419
// end ;
22417: GO 22390
22419: POP
22420: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22421: LD_VAR 0 1
22425: PPUSH
22426: LD_VAR 0 2
22430: PPUSH
22431: LD_VAR 0 3
22435: PPUSH
22436: LD_VAR 0 4
22440: PPUSH
22441: LD_VAR 0 5
22445: PPUSH
22446: CALL_OW 448
22450: IFFALSE 22485
// begin result := [ chassis , engine , control , weapon ] ;
22452: LD_ADDR_VAR 0 6
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: LD_VAR 0 3
22466: PUSH
22467: LD_VAR 0 4
22471: PUSH
22472: LD_VAR 0 5
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: ST_TO_ADDR
// exit ;
22483: GO 22897
// end ; _chassis := AvailableChassisList ( factory ) ;
22485: LD_ADDR_VAR 0 9
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 475
22499: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22500: LD_ADDR_VAR 0 11
22504: PUSH
22505: LD_VAR 0 1
22509: PPUSH
22510: CALL_OW 476
22514: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22515: LD_ADDR_VAR 0 12
22519: PUSH
22520: LD_VAR 0 1
22524: PPUSH
22525: CALL_OW 477
22529: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22530: LD_ADDR_VAR 0 10
22534: PUSH
22535: LD_VAR 0 1
22539: PPUSH
22540: CALL_OW 478
22544: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22545: LD_VAR 0 9
22549: NOT
22550: PUSH
22551: LD_VAR 0 11
22555: NOT
22556: OR
22557: PUSH
22558: LD_VAR 0 12
22562: NOT
22563: OR
22564: PUSH
22565: LD_VAR 0 10
22569: NOT
22570: OR
22571: IFFALSE 22606
// begin result := [ chassis , engine , control , weapon ] ;
22573: LD_ADDR_VAR 0 6
22577: PUSH
22578: LD_VAR 0 2
22582: PUSH
22583: LD_VAR 0 3
22587: PUSH
22588: LD_VAR 0 4
22592: PUSH
22593: LD_VAR 0 5
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: ST_TO_ADDR
// exit ;
22604: GO 22897
// end ; if not chassis in _chassis then
22606: LD_VAR 0 2
22610: PUSH
22611: LD_VAR 0 9
22615: IN
22616: NOT
22617: IFFALSE 22643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_VAR 0 9
22628: PUSH
22629: LD_INT 1
22631: PPUSH
22632: LD_VAR 0 9
22636: PPUSH
22637: CALL_OW 12
22641: ARRAY
22642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22643: LD_VAR 0 2
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: CALL 22902 0 2
22657: NOT
22658: IFFALSE 22717
// repeat engine := _engine [ 1 ] ;
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_VAR 0 11
22669: PUSH
22670: LD_INT 1
22672: ARRAY
22673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22674: LD_ADDR_VAR 0 11
22678: PUSH
22679: LD_VAR 0 11
22683: PPUSH
22684: LD_INT 1
22686: PPUSH
22687: CALL_OW 3
22691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22692: LD_VAR 0 2
22696: PPUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: CALL 22902 0 2
22706: PUSH
22707: LD_VAR 0 11
22711: PUSH
22712: EMPTY
22713: EQUAL
22714: OR
22715: IFFALSE 22660
// if not control in _control then
22717: LD_VAR 0 4
22721: PUSH
22722: LD_VAR 0 12
22726: IN
22727: NOT
22728: IFFALSE 22754
// control := _control [ rand ( 1 , _control ) ] ;
22730: LD_ADDR_VAR 0 4
22734: PUSH
22735: LD_VAR 0 12
22739: PUSH
22740: LD_INT 1
22742: PPUSH
22743: LD_VAR 0 12
22747: PPUSH
22748: CALL_OW 12
22752: ARRAY
22753: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22754: LD_VAR 0 2
22758: PPUSH
22759: LD_VAR 0 5
22763: PPUSH
22764: CALL 23122 0 2
22768: NOT
22769: IFFALSE 22828
// repeat weapon := _weapon [ 1 ] ;
22771: LD_ADDR_VAR 0 5
22775: PUSH
22776: LD_VAR 0 10
22780: PUSH
22781: LD_INT 1
22783: ARRAY
22784: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22785: LD_ADDR_VAR 0 10
22789: PUSH
22790: LD_VAR 0 10
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 3
22802: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22803: LD_VAR 0 2
22807: PPUSH
22808: LD_VAR 0 5
22812: PPUSH
22813: CALL 23122 0 2
22817: PUSH
22818: LD_VAR 0 10
22822: PUSH
22823: EMPTY
22824: EQUAL
22825: OR
22826: IFFALSE 22771
// result := [ ] ;
22828: LD_ADDR_VAR 0 6
22832: PUSH
22833: EMPTY
22834: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22835: LD_VAR 0 1
22839: PPUSH
22840: LD_VAR 0 2
22844: PPUSH
22845: LD_VAR 0 3
22849: PPUSH
22850: LD_VAR 0 4
22854: PPUSH
22855: LD_VAR 0 5
22859: PPUSH
22860: CALL_OW 448
22864: IFFALSE 22897
// result := [ chassis , engine , control , weapon ] ;
22866: LD_ADDR_VAR 0 6
22870: PUSH
22871: LD_VAR 0 2
22875: PUSH
22876: LD_VAR 0 3
22880: PUSH
22881: LD_VAR 0 4
22885: PUSH
22886: LD_VAR 0 5
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
// end ;
22897: LD_VAR 0 6
22901: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22902: LD_INT 0
22904: PPUSH
// if not chassis or not engine then
22905: LD_VAR 0 1
22909: NOT
22910: PUSH
22911: LD_VAR 0 2
22915: NOT
22916: OR
22917: IFFALSE 22921
// exit ;
22919: GO 23117
// case engine of engine_solar :
22921: LD_VAR 0 2
22925: PUSH
22926: LD_INT 2
22928: DOUBLE
22929: EQUAL
22930: IFTRUE 22934
22932: GO 22972
22934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22935: LD_ADDR_VAR 0 3
22939: PUSH
22940: LD_INT 11
22942: PUSH
22943: LD_INT 12
22945: PUSH
22946: LD_INT 13
22948: PUSH
22949: LD_INT 14
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: ST_TO_ADDR
22970: GO 23101
22972: LD_INT 1
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 23042
22980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22981: LD_ADDR_VAR 0 3
22985: PUSH
22986: LD_INT 11
22988: PUSH
22989: LD_INT 12
22991: PUSH
22992: LD_INT 13
22994: PUSH
22995: LD_INT 14
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 4
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 21
23015: PUSH
23016: LD_INT 23
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_INT 24
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
23040: GO 23101
23042: LD_INT 3
23044: DOUBLE
23045: EQUAL
23046: IFTRUE 23050
23048: GO 23100
23050: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23051: LD_ADDR_VAR 0 3
23055: PUSH
23056: LD_INT 13
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: LD_INT 4
23070: PUSH
23071: LD_INT 5
23073: PUSH
23074: LD_INT 21
23076: PUSH
23077: LD_INT 22
23079: PUSH
23080: LD_INT 23
23082: PUSH
23083: LD_INT 24
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: ST_TO_ADDR
23098: GO 23101
23100: POP
// result := ( chassis in result ) ;
23101: LD_ADDR_VAR 0 3
23105: PUSH
23106: LD_VAR 0 1
23110: PUSH
23111: LD_VAR 0 3
23115: IN
23116: ST_TO_ADDR
// end ;
23117: LD_VAR 0 3
23121: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23122: LD_INT 0
23124: PPUSH
// if not chassis or not weapon then
23125: LD_VAR 0 1
23129: NOT
23130: PUSH
23131: LD_VAR 0 2
23135: NOT
23136: OR
23137: IFFALSE 23141
// exit ;
23139: GO 24167
// case weapon of us_machine_gun :
23141: LD_VAR 0 2
23145: PUSH
23146: LD_INT 2
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23184
23154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23155: LD_ADDR_VAR 0 3
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: LD_INT 4
23171: PUSH
23172: LD_INT 5
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 24151
23184: LD_INT 3
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23222
23192: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: LD_INT 4
23209: PUSH
23210: LD_INT 5
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
23220: GO 24151
23222: LD_INT 11
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23260
23230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: LD_INT 3
23244: PUSH
23245: LD_INT 4
23247: PUSH
23248: LD_INT 5
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: ST_TO_ADDR
23258: GO 24151
23260: LD_INT 4
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23294
23268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 3
23279: PUSH
23280: LD_INT 4
23282: PUSH
23283: LD_INT 5
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: ST_TO_ADDR
23292: GO 24151
23294: LD_INT 5
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23328
23302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: LD_INT 4
23316: PUSH
23317: LD_INT 5
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 24151
23328: LD_INT 9
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23362
23336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
23360: GO 24151
23362: LD_INT 7
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23396
23370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 4
23384: PUSH
23385: LD_INT 5
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
23394: GO 24151
23396: LD_INT 12
23398: DOUBLE
23399: EQUAL
23400: IFTRUE 23404
23402: GO 23430
23404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
23428: GO 24151
23430: LD_INT 13
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23464
23438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23439: LD_ADDR_VAR 0 3
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
23462: GO 24151
23464: LD_INT 14
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23490
23472: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23473: LD_ADDR_VAR 0 3
23477: PUSH
23478: LD_INT 4
23480: PUSH
23481: LD_INT 5
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: ST_TO_ADDR
23488: GO 24151
23490: LD_INT 6
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23516
23498: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_INT 4
23506: PUSH
23507: LD_INT 5
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: ST_TO_ADDR
23514: GO 24151
23516: LD_INT 10
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23542
23524: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: LD_INT 4
23532: PUSH
23533: LD_INT 5
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: ST_TO_ADDR
23540: GO 24151
23542: LD_INT 22
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23576
23550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 11
23558: PUSH
23559: LD_INT 12
23561: PUSH
23562: LD_INT 13
23564: PUSH
23565: LD_INT 14
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 24151
23576: LD_INT 23
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23610
23584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_INT 11
23592: PUSH
23593: LD_INT 12
23595: PUSH
23596: LD_INT 13
23598: PUSH
23599: LD_INT 14
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 24151
23610: LD_INT 24
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23644
23618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 11
23626: PUSH
23627: LD_INT 12
23629: PUSH
23630: LD_INT 13
23632: PUSH
23633: LD_INT 14
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 24151
23644: LD_INT 30
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23678
23652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 11
23660: PUSH
23661: LD_INT 12
23663: PUSH
23664: LD_INT 13
23666: PUSH
23667: LD_INT 14
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 24151
23678: LD_INT 25
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23704
23686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_INT 13
23694: PUSH
23695: LD_INT 14
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: ST_TO_ADDR
23702: GO 24151
23704: LD_INT 27
23706: DOUBLE
23707: EQUAL
23708: IFTRUE 23712
23710: GO 23730
23712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23713: LD_ADDR_VAR 0 3
23717: PUSH
23718: LD_INT 13
23720: PUSH
23721: LD_INT 14
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: ST_TO_ADDR
23728: GO 24151
23730: LD_INT 28
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23756
23738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: LD_INT 13
23746: PUSH
23747: LD_INT 14
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: ST_TO_ADDR
23754: GO 24151
23756: LD_INT 29
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23782
23764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: LD_INT 13
23772: PUSH
23773: LD_INT 14
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: ST_TO_ADDR
23780: GO 24151
23782: LD_INT 31
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23808
23790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: LD_INT 13
23798: PUSH
23799: LD_INT 14
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: ST_TO_ADDR
23806: GO 24151
23808: LD_INT 26
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23816
23814: GO 23834
23816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23817: LD_ADDR_VAR 0 3
23821: PUSH
23822: LD_INT 13
23824: PUSH
23825: LD_INT 14
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: ST_TO_ADDR
23832: GO 24151
23834: LD_INT 42
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23868
23842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 21
23850: PUSH
23851: LD_INT 22
23853: PUSH
23854: LD_INT 23
23856: PUSH
23857: LD_INT 24
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
23866: GO 24151
23868: LD_INT 43
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23902
23876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23877: LD_ADDR_VAR 0 3
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 22
23887: PUSH
23888: LD_INT 23
23890: PUSH
23891: LD_INT 24
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: ST_TO_ADDR
23900: GO 24151
23902: LD_INT 44
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23936
23910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23911: LD_ADDR_VAR 0 3
23915: PUSH
23916: LD_INT 21
23918: PUSH
23919: LD_INT 22
23921: PUSH
23922: LD_INT 23
23924: PUSH
23925: LD_INT 24
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
23934: GO 24151
23936: LD_INT 45
23938: DOUBLE
23939: EQUAL
23940: IFTRUE 23944
23942: GO 23970
23944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23945: LD_ADDR_VAR 0 3
23949: PUSH
23950: LD_INT 21
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_INT 23
23958: PUSH
23959: LD_INT 24
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: ST_TO_ADDR
23968: GO 24151
23970: LD_INT 49
23972: DOUBLE
23973: EQUAL
23974: IFTRUE 23978
23976: GO 24004
23978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23979: LD_ADDR_VAR 0 3
23983: PUSH
23984: LD_INT 21
23986: PUSH
23987: LD_INT 22
23989: PUSH
23990: LD_INT 23
23992: PUSH
23993: LD_INT 24
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: ST_TO_ADDR
24002: GO 24151
24004: LD_INT 51
24006: DOUBLE
24007: EQUAL
24008: IFTRUE 24012
24010: GO 24038
24012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 24
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
24036: GO 24151
24038: LD_INT 52
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24072
24046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 21
24054: PUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 23
24060: PUSH
24061: LD_INT 24
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: ST_TO_ADDR
24070: GO 24151
24072: LD_INT 53
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24098
24080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24081: LD_ADDR_VAR 0 3
24085: PUSH
24086: LD_INT 23
24088: PUSH
24089: LD_INT 24
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: ST_TO_ADDR
24096: GO 24151
24098: LD_INT 46
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24124
24106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_INT 23
24114: PUSH
24115: LD_INT 24
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: ST_TO_ADDR
24122: GO 24151
24124: LD_INT 47
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24150
24132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24133: LD_ADDR_VAR 0 3
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: ST_TO_ADDR
24148: GO 24151
24150: POP
// result := ( chassis in result ) ;
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: LD_VAR 0 1
24160: PUSH
24161: LD_VAR 0 3
24165: IN
24166: ST_TO_ADDR
// end ;
24167: LD_VAR 0 3
24171: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24172: LD_INT 0
24174: PPUSH
24175: PPUSH
24176: PPUSH
24177: PPUSH
24178: PPUSH
24179: PPUSH
24180: PPUSH
// result := array ;
24181: LD_ADDR_VAR 0 5
24185: PUSH
24186: LD_VAR 0 1
24190: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24191: LD_VAR 0 1
24195: NOT
24196: PUSH
24197: LD_VAR 0 2
24201: NOT
24202: OR
24203: PUSH
24204: LD_VAR 0 3
24208: NOT
24209: OR
24210: PUSH
24211: LD_VAR 0 2
24215: PUSH
24216: LD_VAR 0 1
24220: GREATER
24221: OR
24222: PUSH
24223: LD_VAR 0 3
24227: PUSH
24228: LD_VAR 0 1
24232: GREATER
24233: OR
24234: IFFALSE 24238
// exit ;
24236: GO 24534
// if direction then
24238: LD_VAR 0 4
24242: IFFALSE 24306
// begin d := 1 ;
24244: LD_ADDR_VAR 0 9
24248: PUSH
24249: LD_INT 1
24251: ST_TO_ADDR
// if i_from > i_to then
24252: LD_VAR 0 2
24256: PUSH
24257: LD_VAR 0 3
24261: GREATER
24262: IFFALSE 24288
// length := ( array - i_from ) + i_to else
24264: LD_ADDR_VAR 0 11
24268: PUSH
24269: LD_VAR 0 1
24273: PUSH
24274: LD_VAR 0 2
24278: MINUS
24279: PUSH
24280: LD_VAR 0 3
24284: PLUS
24285: ST_TO_ADDR
24286: GO 24304
// length := i_to - i_from ;
24288: LD_ADDR_VAR 0 11
24292: PUSH
24293: LD_VAR 0 3
24297: PUSH
24298: LD_VAR 0 2
24302: MINUS
24303: ST_TO_ADDR
// end else
24304: GO 24367
// begin d := - 1 ;
24306: LD_ADDR_VAR 0 9
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: ST_TO_ADDR
// if i_from > i_to then
24315: LD_VAR 0 2
24319: PUSH
24320: LD_VAR 0 3
24324: GREATER
24325: IFFALSE 24345
// length := i_from - i_to else
24327: LD_ADDR_VAR 0 11
24331: PUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_VAR 0 3
24341: MINUS
24342: ST_TO_ADDR
24343: GO 24367
// length := ( array - i_to ) + i_from ;
24345: LD_ADDR_VAR 0 11
24349: PUSH
24350: LD_VAR 0 1
24354: PUSH
24355: LD_VAR 0 3
24359: MINUS
24360: PUSH
24361: LD_VAR 0 2
24365: PLUS
24366: ST_TO_ADDR
// end ; if not length then
24367: LD_VAR 0 11
24371: NOT
24372: IFFALSE 24376
// exit ;
24374: GO 24534
// tmp := array ;
24376: LD_ADDR_VAR 0 10
24380: PUSH
24381: LD_VAR 0 1
24385: ST_TO_ADDR
// for i = 1 to length do
24386: LD_ADDR_VAR 0 6
24390: PUSH
24391: DOUBLE
24392: LD_INT 1
24394: DEC
24395: ST_TO_ADDR
24396: LD_VAR 0 11
24400: PUSH
24401: FOR_TO
24402: IFFALSE 24522
// begin for j = 1 to array do
24404: LD_ADDR_VAR 0 7
24408: PUSH
24409: DOUBLE
24410: LD_INT 1
24412: DEC
24413: ST_TO_ADDR
24414: LD_VAR 0 1
24418: PUSH
24419: FOR_TO
24420: IFFALSE 24508
// begin k := j + d ;
24422: LD_ADDR_VAR 0 8
24426: PUSH
24427: LD_VAR 0 7
24431: PUSH
24432: LD_VAR 0 9
24436: PLUS
24437: ST_TO_ADDR
// if k > array then
24438: LD_VAR 0 8
24442: PUSH
24443: LD_VAR 0 1
24447: GREATER
24448: IFFALSE 24458
// k := 1 ;
24450: LD_ADDR_VAR 0 8
24454: PUSH
24455: LD_INT 1
24457: ST_TO_ADDR
// if not k then
24458: LD_VAR 0 8
24462: NOT
24463: IFFALSE 24475
// k := array ;
24465: LD_ADDR_VAR 0 8
24469: PUSH
24470: LD_VAR 0 1
24474: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24475: LD_ADDR_VAR 0 10
24479: PUSH
24480: LD_VAR 0 10
24484: PPUSH
24485: LD_VAR 0 8
24489: PPUSH
24490: LD_VAR 0 1
24494: PUSH
24495: LD_VAR 0 7
24499: ARRAY
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// end ;
24506: GO 24419
24508: POP
24509: POP
// array := tmp ;
24510: LD_ADDR_VAR 0 1
24514: PUSH
24515: LD_VAR 0 10
24519: ST_TO_ADDR
// end ;
24520: GO 24401
24522: POP
24523: POP
// result := array ;
24524: LD_ADDR_VAR 0 5
24528: PUSH
24529: LD_VAR 0 1
24533: ST_TO_ADDR
// end ;
24534: LD_VAR 0 5
24538: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24539: LD_INT 0
24541: PPUSH
24542: PPUSH
// result := 0 ;
24543: LD_ADDR_VAR 0 3
24547: PUSH
24548: LD_INT 0
24550: ST_TO_ADDR
// if not array or not value in array then
24551: LD_VAR 0 1
24555: NOT
24556: PUSH
24557: LD_VAR 0 2
24561: PUSH
24562: LD_VAR 0 1
24566: IN
24567: NOT
24568: OR
24569: IFFALSE 24573
// exit ;
24571: GO 24627
// for i = 1 to array do
24573: LD_ADDR_VAR 0 4
24577: PUSH
24578: DOUBLE
24579: LD_INT 1
24581: DEC
24582: ST_TO_ADDR
24583: LD_VAR 0 1
24587: PUSH
24588: FOR_TO
24589: IFFALSE 24625
// if value = array [ i ] then
24591: LD_VAR 0 2
24595: PUSH
24596: LD_VAR 0 1
24600: PUSH
24601: LD_VAR 0 4
24605: ARRAY
24606: EQUAL
24607: IFFALSE 24623
// begin result := i ;
24609: LD_ADDR_VAR 0 3
24613: PUSH
24614: LD_VAR 0 4
24618: ST_TO_ADDR
// exit ;
24619: POP
24620: POP
24621: GO 24627
// end ;
24623: GO 24588
24625: POP
24626: POP
// end ;
24627: LD_VAR 0 3
24631: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24632: LD_INT 0
24634: PPUSH
// vc_chassis := chassis ;
24635: LD_ADDR_OWVAR 37
24639: PUSH
24640: LD_VAR 0 1
24644: ST_TO_ADDR
// vc_engine := engine ;
24645: LD_ADDR_OWVAR 39
24649: PUSH
24650: LD_VAR 0 2
24654: ST_TO_ADDR
// vc_control := control ;
24655: LD_ADDR_OWVAR 38
24659: PUSH
24660: LD_VAR 0 3
24664: ST_TO_ADDR
// vc_weapon := weapon ;
24665: LD_ADDR_OWVAR 40
24669: PUSH
24670: LD_VAR 0 4
24674: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24675: LD_ADDR_OWVAR 41
24679: PUSH
24680: LD_VAR 0 5
24684: ST_TO_ADDR
// end ;
24685: LD_VAR 0 6
24689: RET
// export function WantPlant ( unit ) ; var task ; begin
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// result := false ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 0
24701: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 437
24716: ST_TO_ADDR
// if task then
24717: LD_VAR 0 3
24721: IFFALSE 24749
// if task [ 1 ] [ 1 ] = p then
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 1
24730: ARRAY
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PUSH
24736: LD_STRING p
24738: EQUAL
24739: IFFALSE 24749
// result := true ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_INT 1
24748: ST_TO_ADDR
// end ;
24749: LD_VAR 0 2
24753: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
// if pos < 1 then
24760: LD_VAR 0 2
24764: PUSH
24765: LD_INT 1
24767: LESS
24768: IFFALSE 24772
// exit ;
24770: GO 25075
// if pos = 1 then
24772: LD_VAR 0 2
24776: PUSH
24777: LD_INT 1
24779: EQUAL
24780: IFFALSE 24813
// result := Replace ( arr , pos [ 1 ] , value ) else
24782: LD_ADDR_VAR 0 4
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: LD_VAR 0 2
24796: PUSH
24797: LD_INT 1
24799: ARRAY
24800: PPUSH
24801: LD_VAR 0 3
24805: PPUSH
24806: CALL_OW 1
24810: ST_TO_ADDR
24811: GO 25075
// begin tmp := arr ;
24813: LD_ADDR_VAR 0 6
24817: PUSH
24818: LD_VAR 0 1
24822: ST_TO_ADDR
// s_arr := [ tmp ] ;
24823: LD_ADDR_VAR 0 7
24827: PUSH
24828: LD_VAR 0 6
24832: PUSH
24833: EMPTY
24834: LIST
24835: ST_TO_ADDR
// for i = 1 to pos - 1 do
24836: LD_ADDR_VAR 0 5
24840: PUSH
24841: DOUBLE
24842: LD_INT 1
24844: DEC
24845: ST_TO_ADDR
24846: LD_VAR 0 2
24850: PUSH
24851: LD_INT 1
24853: MINUS
24854: PUSH
24855: FOR_TO
24856: IFFALSE 24901
// begin tmp := tmp [ pos [ i ] ] ;
24858: LD_ADDR_VAR 0 6
24862: PUSH
24863: LD_VAR 0 6
24867: PUSH
24868: LD_VAR 0 2
24872: PUSH
24873: LD_VAR 0 5
24877: ARRAY
24878: ARRAY
24879: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24880: LD_ADDR_VAR 0 7
24884: PUSH
24885: LD_VAR 0 7
24889: PUSH
24890: LD_VAR 0 6
24894: PUSH
24895: EMPTY
24896: LIST
24897: ADD
24898: ST_TO_ADDR
// end ;
24899: GO 24855
24901: POP
24902: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24903: LD_ADDR_VAR 0 6
24907: PUSH
24908: LD_VAR 0 6
24912: PPUSH
24913: LD_VAR 0 2
24917: PUSH
24918: LD_VAR 0 2
24922: ARRAY
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: CALL_OW 1
24933: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24934: LD_ADDR_VAR 0 7
24938: PUSH
24939: LD_VAR 0 7
24943: PPUSH
24944: LD_VAR 0 7
24948: PPUSH
24949: LD_VAR 0 6
24953: PPUSH
24954: CALL_OW 1
24958: ST_TO_ADDR
// for i = s_arr downto 2 do
24959: LD_ADDR_VAR 0 5
24963: PUSH
24964: DOUBLE
24965: LD_VAR 0 7
24969: INC
24970: ST_TO_ADDR
24971: LD_INT 2
24973: PUSH
24974: FOR_DOWNTO
24975: IFFALSE 25059
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24977: LD_ADDR_VAR 0 6
24981: PUSH
24982: LD_VAR 0 7
24986: PUSH
24987: LD_VAR 0 5
24991: PUSH
24992: LD_INT 1
24994: MINUS
24995: ARRAY
24996: PPUSH
24997: LD_VAR 0 2
25001: PUSH
25002: LD_VAR 0 5
25006: PUSH
25007: LD_INT 1
25009: MINUS
25010: ARRAY
25011: PPUSH
25012: LD_VAR 0 7
25016: PUSH
25017: LD_VAR 0 5
25021: ARRAY
25022: PPUSH
25023: CALL_OW 1
25027: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25028: LD_ADDR_VAR 0 7
25032: PUSH
25033: LD_VAR 0 7
25037: PPUSH
25038: LD_VAR 0 5
25042: PUSH
25043: LD_INT 1
25045: MINUS
25046: PPUSH
25047: LD_VAR 0 6
25051: PPUSH
25052: CALL_OW 1
25056: ST_TO_ADDR
// end ;
25057: GO 24974
25059: POP
25060: POP
// result := s_arr [ 1 ] ;
25061: LD_ADDR_VAR 0 4
25065: PUSH
25066: LD_VAR 0 7
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: ST_TO_ADDR
// end ; end ;
25075: LD_VAR 0 4
25079: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
// if not list then
25084: LD_VAR 0 1
25088: NOT
25089: IFFALSE 25093
// exit ;
25091: GO 25184
// i := list [ pos1 ] ;
25093: LD_ADDR_VAR 0 5
25097: PUSH
25098: LD_VAR 0 1
25102: PUSH
25103: LD_VAR 0 2
25107: ARRAY
25108: ST_TO_ADDR
// if not i then
25109: LD_VAR 0 5
25113: NOT
25114: IFFALSE 25118
// exit ;
25116: GO 25184
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25118: LD_ADDR_VAR 0 1
25122: PUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_VAR 0 2
25132: PPUSH
25133: LD_VAR 0 1
25137: PUSH
25138: LD_VAR 0 3
25142: ARRAY
25143: PPUSH
25144: CALL_OW 1
25148: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25149: LD_ADDR_VAR 0 1
25153: PUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: LD_VAR 0 3
25163: PPUSH
25164: LD_VAR 0 5
25168: PPUSH
25169: CALL_OW 1
25173: ST_TO_ADDR
// result := list ;
25174: LD_ADDR_VAR 0 4
25178: PUSH
25179: LD_VAR 0 1
25183: ST_TO_ADDR
// end ;
25184: LD_VAR 0 4
25188: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25189: LD_INT 0
25191: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25192: LD_ADDR_VAR 0 5
25196: PUSH
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 250
25206: PPUSH
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 251
25216: PPUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: LD_VAR 0 3
25226: PPUSH
25227: LD_VAR 0 4
25231: PPUSH
25232: CALL 25242 0 5
25236: ST_TO_ADDR
// end ;
25237: LD_VAR 0 5
25241: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25242: LD_INT 0
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
// if not list then
25248: LD_VAR 0 3
25252: NOT
25253: IFFALSE 25257
// exit ;
25255: GO 25645
// result := [ ] ;
25257: LD_ADDR_VAR 0 6
25261: PUSH
25262: EMPTY
25263: ST_TO_ADDR
// for i in list do
25264: LD_ADDR_VAR 0 7
25268: PUSH
25269: LD_VAR 0 3
25273: PUSH
25274: FOR_IN
25275: IFFALSE 25477
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25277: LD_ADDR_VAR 0 9
25281: PUSH
25282: LD_VAR 0 7
25286: PPUSH
25287: LD_VAR 0 1
25291: PPUSH
25292: LD_VAR 0 2
25296: PPUSH
25297: CALL_OW 297
25301: ST_TO_ADDR
// if not result then
25302: LD_VAR 0 6
25306: NOT
25307: IFFALSE 25333
// result := [ [ i , tmp ] ] else
25309: LD_ADDR_VAR 0 6
25313: PUSH
25314: LD_VAR 0 7
25318: PUSH
25319: LD_VAR 0 9
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: ST_TO_ADDR
25331: GO 25475
// begin if result [ result ] [ 2 ] < tmp then
25333: LD_VAR 0 6
25337: PUSH
25338: LD_VAR 0 6
25342: ARRAY
25343: PUSH
25344: LD_INT 2
25346: ARRAY
25347: PUSH
25348: LD_VAR 0 9
25352: LESS
25353: IFFALSE 25395
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25355: LD_ADDR_VAR 0 6
25359: PUSH
25360: LD_VAR 0 6
25364: PPUSH
25365: LD_VAR 0 6
25369: PUSH
25370: LD_INT 1
25372: PLUS
25373: PPUSH
25374: LD_VAR 0 7
25378: PUSH
25379: LD_VAR 0 9
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PPUSH
25388: CALL_OW 2
25392: ST_TO_ADDR
25393: GO 25475
// for j = 1 to result do
25395: LD_ADDR_VAR 0 8
25399: PUSH
25400: DOUBLE
25401: LD_INT 1
25403: DEC
25404: ST_TO_ADDR
25405: LD_VAR 0 6
25409: PUSH
25410: FOR_TO
25411: IFFALSE 25473
// begin if tmp < result [ j ] [ 2 ] then
25413: LD_VAR 0 9
25417: PUSH
25418: LD_VAR 0 6
25422: PUSH
25423: LD_VAR 0 8
25427: ARRAY
25428: PUSH
25429: LD_INT 2
25431: ARRAY
25432: LESS
25433: IFFALSE 25471
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25435: LD_ADDR_VAR 0 6
25439: PUSH
25440: LD_VAR 0 6
25444: PPUSH
25445: LD_VAR 0 8
25449: PPUSH
25450: LD_VAR 0 7
25454: PUSH
25455: LD_VAR 0 9
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 2
25468: ST_TO_ADDR
// break ;
25469: GO 25473
// end ; end ;
25471: GO 25410
25473: POP
25474: POP
// end ; end ;
25475: GO 25274
25477: POP
25478: POP
// if result and not asc then
25479: LD_VAR 0 6
25483: PUSH
25484: LD_VAR 0 4
25488: NOT
25489: AND
25490: IFFALSE 25565
// begin tmp := result ;
25492: LD_ADDR_VAR 0 9
25496: PUSH
25497: LD_VAR 0 6
25501: ST_TO_ADDR
// for i = tmp downto 1 do
25502: LD_ADDR_VAR 0 7
25506: PUSH
25507: DOUBLE
25508: LD_VAR 0 9
25512: INC
25513: ST_TO_ADDR
25514: LD_INT 1
25516: PUSH
25517: FOR_DOWNTO
25518: IFFALSE 25563
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25520: LD_ADDR_VAR 0 6
25524: PUSH
25525: LD_VAR 0 6
25529: PPUSH
25530: LD_VAR 0 9
25534: PUSH
25535: LD_VAR 0 7
25539: MINUS
25540: PUSH
25541: LD_INT 1
25543: PLUS
25544: PPUSH
25545: LD_VAR 0 9
25549: PUSH
25550: LD_VAR 0 7
25554: ARRAY
25555: PPUSH
25556: CALL_OW 1
25560: ST_TO_ADDR
25561: GO 25517
25563: POP
25564: POP
// end ; tmp := [ ] ;
25565: LD_ADDR_VAR 0 9
25569: PUSH
25570: EMPTY
25571: ST_TO_ADDR
// if mode then
25572: LD_VAR 0 5
25576: IFFALSE 25645
// begin for i = 1 to result do
25578: LD_ADDR_VAR 0 7
25582: PUSH
25583: DOUBLE
25584: LD_INT 1
25586: DEC
25587: ST_TO_ADDR
25588: LD_VAR 0 6
25592: PUSH
25593: FOR_TO
25594: IFFALSE 25633
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25596: LD_ADDR_VAR 0 9
25600: PUSH
25601: LD_VAR 0 9
25605: PPUSH
25606: LD_VAR 0 7
25610: PPUSH
25611: LD_VAR 0 6
25615: PUSH
25616: LD_VAR 0 7
25620: ARRAY
25621: PUSH
25622: LD_INT 1
25624: ARRAY
25625: PPUSH
25626: CALL_OW 1
25630: ST_TO_ADDR
25631: GO 25593
25633: POP
25634: POP
// result := tmp ;
25635: LD_ADDR_VAR 0 6
25639: PUSH
25640: LD_VAR 0 9
25644: ST_TO_ADDR
// end ; end ;
25645: LD_VAR 0 6
25649: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25658: LD_ADDR_VAR 0 5
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: EMPTY
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: ST_TO_ADDR
// if not x or not y then
25680: LD_VAR 0 2
25684: NOT
25685: PUSH
25686: LD_VAR 0 3
25690: NOT
25691: OR
25692: IFFALSE 25696
// exit ;
25694: GO 27342
// if not range then
25696: LD_VAR 0 4
25700: NOT
25701: IFFALSE 25711
// range := 10 ;
25703: LD_ADDR_VAR 0 4
25707: PUSH
25708: LD_INT 10
25710: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25711: LD_ADDR_VAR 0 8
25715: PUSH
25716: LD_INT 81
25718: PUSH
25719: LD_VAR 0 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 92
25730: PUSH
25731: LD_VAR 0 2
25735: PUSH
25736: LD_VAR 0 3
25740: PUSH
25741: LD_VAR 0 4
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 3
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// if not tmp then
25779: LD_VAR 0 8
25783: NOT
25784: IFFALSE 25788
// exit ;
25786: GO 27342
// for i in tmp do
25788: LD_ADDR_VAR 0 6
25792: PUSH
25793: LD_VAR 0 8
25797: PUSH
25798: FOR_IN
25799: IFFALSE 27317
// begin points := [ 0 , 0 , 0 ] ;
25801: LD_ADDR_VAR 0 9
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: LIST
25819: ST_TO_ADDR
// bpoints := 1 ;
25820: LD_ADDR_VAR 0 10
25824: PUSH
25825: LD_INT 1
25827: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25828: LD_VAR 0 6
25832: PPUSH
25833: CALL_OW 247
25837: PUSH
25838: LD_INT 1
25840: DOUBLE
25841: EQUAL
25842: IFTRUE 25846
25844: GO 26424
25846: POP
// begin if GetClass ( i ) = 1 then
25847: LD_VAR 0 6
25851: PPUSH
25852: CALL_OW 257
25856: PUSH
25857: LD_INT 1
25859: EQUAL
25860: IFFALSE 25881
// points := [ 10 , 5 , 3 ] ;
25862: LD_ADDR_VAR 0 9
25866: PUSH
25867: LD_INT 10
25869: PUSH
25870: LD_INT 5
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25881: LD_VAR 0 6
25885: PPUSH
25886: CALL_OW 257
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: LD_INT 3
25896: PUSH
25897: LD_INT 4
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: IN
25905: IFFALSE 25926
// points := [ 3 , 2 , 1 ] ;
25907: LD_ADDR_VAR 0 9
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25926: LD_VAR 0 6
25930: PPUSH
25931: CALL_OW 257
25935: PUSH
25936: LD_INT 5
25938: EQUAL
25939: IFFALSE 25960
// points := [ 130 , 5 , 2 ] ;
25941: LD_ADDR_VAR 0 9
25945: PUSH
25946: LD_INT 130
25948: PUSH
25949: LD_INT 5
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25960: LD_VAR 0 6
25964: PPUSH
25965: CALL_OW 257
25969: PUSH
25970: LD_INT 8
25972: EQUAL
25973: IFFALSE 25994
// points := [ 35 , 35 , 30 ] ;
25975: LD_ADDR_VAR 0 9
25979: PUSH
25980: LD_INT 35
25982: PUSH
25983: LD_INT 35
25985: PUSH
25986: LD_INT 30
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25994: LD_VAR 0 6
25998: PPUSH
25999: CALL_OW 257
26003: PUSH
26004: LD_INT 9
26006: EQUAL
26007: IFFALSE 26028
// points := [ 20 , 55 , 40 ] ;
26009: LD_ADDR_VAR 0 9
26013: PUSH
26014: LD_INT 20
26016: PUSH
26017: LD_INT 55
26019: PUSH
26020: LD_INT 40
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26028: LD_VAR 0 6
26032: PPUSH
26033: CALL_OW 257
26037: PUSH
26038: LD_INT 12
26040: PUSH
26041: LD_INT 16
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: IN
26048: IFFALSE 26069
// points := [ 5 , 3 , 2 ] ;
26050: LD_ADDR_VAR 0 9
26054: PUSH
26055: LD_INT 5
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26069: LD_VAR 0 6
26073: PPUSH
26074: CALL_OW 257
26078: PUSH
26079: LD_INT 17
26081: EQUAL
26082: IFFALSE 26103
// points := [ 100 , 50 , 75 ] ;
26084: LD_ADDR_VAR 0 9
26088: PUSH
26089: LD_INT 100
26091: PUSH
26092: LD_INT 50
26094: PUSH
26095: LD_INT 75
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26103: LD_VAR 0 6
26107: PPUSH
26108: CALL_OW 257
26112: PUSH
26113: LD_INT 15
26115: EQUAL
26116: IFFALSE 26137
// points := [ 10 , 5 , 3 ] ;
26118: LD_ADDR_VAR 0 9
26122: PUSH
26123: LD_INT 10
26125: PUSH
26126: LD_INT 5
26128: PUSH
26129: LD_INT 3
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26137: LD_VAR 0 6
26141: PPUSH
26142: CALL_OW 257
26146: PUSH
26147: LD_INT 14
26149: EQUAL
26150: IFFALSE 26171
// points := [ 10 , 0 , 0 ] ;
26152: LD_ADDR_VAR 0 9
26156: PUSH
26157: LD_INT 10
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26171: LD_VAR 0 6
26175: PPUSH
26176: CALL_OW 257
26180: PUSH
26181: LD_INT 11
26183: EQUAL
26184: IFFALSE 26205
// points := [ 30 , 10 , 5 ] ;
26186: LD_ADDR_VAR 0 9
26190: PUSH
26191: LD_INT 30
26193: PUSH
26194: LD_INT 10
26196: PUSH
26197: LD_INT 5
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26205: LD_VAR 0 1
26209: PPUSH
26210: LD_INT 5
26212: PPUSH
26213: CALL_OW 321
26217: PUSH
26218: LD_INT 2
26220: EQUAL
26221: IFFALSE 26238
// bpoints := bpoints * 1.8 ;
26223: LD_ADDR_VAR 0 10
26227: PUSH
26228: LD_VAR 0 10
26232: PUSH
26233: LD_REAL  1.80000000000000E+0000
26236: MUL
26237: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26238: LD_VAR 0 6
26242: PPUSH
26243: CALL_OW 257
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: LD_INT 4
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: IN
26266: PUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: LD_INT 51
26274: PPUSH
26275: CALL_OW 321
26279: PUSH
26280: LD_INT 2
26282: EQUAL
26283: AND
26284: IFFALSE 26301
// bpoints := bpoints * 1.2 ;
26286: LD_ADDR_VAR 0 10
26290: PUSH
26291: LD_VAR 0 10
26295: PUSH
26296: LD_REAL  1.20000000000000E+0000
26299: MUL
26300: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26301: LD_VAR 0 6
26305: PPUSH
26306: CALL_OW 257
26310: PUSH
26311: LD_INT 5
26313: PUSH
26314: LD_INT 7
26316: PUSH
26317: LD_INT 9
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: LIST
26324: IN
26325: PUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: LD_INT 52
26333: PPUSH
26334: CALL_OW 321
26338: PUSH
26339: LD_INT 2
26341: EQUAL
26342: AND
26343: IFFALSE 26360
// bpoints := bpoints * 1.5 ;
26345: LD_ADDR_VAR 0 10
26349: PUSH
26350: LD_VAR 0 10
26354: PUSH
26355: LD_REAL  1.50000000000000E+0000
26358: MUL
26359: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26360: LD_VAR 0 1
26364: PPUSH
26365: LD_INT 66
26367: PPUSH
26368: CALL_OW 321
26372: PUSH
26373: LD_INT 2
26375: EQUAL
26376: IFFALSE 26393
// bpoints := bpoints * 1.1 ;
26378: LD_ADDR_VAR 0 10
26382: PUSH
26383: LD_VAR 0 10
26387: PUSH
26388: LD_REAL  1.10000000000000E+0000
26391: MUL
26392: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26393: LD_ADDR_VAR 0 10
26397: PUSH
26398: LD_VAR 0 10
26402: PUSH
26403: LD_VAR 0 6
26407: PPUSH
26408: LD_INT 1
26410: PPUSH
26411: CALL_OW 259
26415: PUSH
26416: LD_REAL  1.15000000000000E+0000
26419: MUL
26420: MUL
26421: ST_TO_ADDR
// end ; unit_vehicle :
26422: GO 27246
26424: LD_INT 2
26426: DOUBLE
26427: EQUAL
26428: IFTRUE 26432
26430: GO 27234
26432: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26433: LD_VAR 0 6
26437: PPUSH
26438: CALL_OW 264
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 42
26448: PUSH
26449: LD_INT 24
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: IN
26457: IFFALSE 26478
// points := [ 25 , 5 , 3 ] ;
26459: LD_ADDR_VAR 0 9
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 5
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26478: LD_VAR 0 6
26482: PPUSH
26483: CALL_OW 264
26487: PUSH
26488: LD_INT 4
26490: PUSH
26491: LD_INT 43
26493: PUSH
26494: LD_INT 25
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: IN
26502: IFFALSE 26523
// points := [ 40 , 15 , 5 ] ;
26504: LD_ADDR_VAR 0 9
26508: PUSH
26509: LD_INT 40
26511: PUSH
26512: LD_INT 15
26514: PUSH
26515: LD_INT 5
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26523: LD_VAR 0 6
26527: PPUSH
26528: CALL_OW 264
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 23
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: IN
26543: IFFALSE 26564
// points := [ 7 , 25 , 8 ] ;
26545: LD_ADDR_VAR 0 9
26549: PUSH
26550: LD_INT 7
26552: PUSH
26553: LD_INT 25
26555: PUSH
26556: LD_INT 8
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 264
26573: PUSH
26574: LD_INT 5
26576: PUSH
26577: LD_INT 27
26579: PUSH
26580: LD_INT 44
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: IN
26588: IFFALSE 26609
// points := [ 14 , 50 , 16 ] ;
26590: LD_ADDR_VAR 0 9
26594: PUSH
26595: LD_INT 14
26597: PUSH
26598: LD_INT 50
26600: PUSH
26601: LD_INT 16
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26609: LD_VAR 0 6
26613: PPUSH
26614: CALL_OW 264
26618: PUSH
26619: LD_INT 6
26621: PUSH
26622: LD_INT 46
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: IN
26629: IFFALSE 26650
// points := [ 32 , 120 , 70 ] ;
26631: LD_ADDR_VAR 0 9
26635: PUSH
26636: LD_INT 32
26638: PUSH
26639: LD_INT 120
26641: PUSH
26642: LD_INT 70
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26650: LD_VAR 0 6
26654: PPUSH
26655: CALL_OW 264
26659: PUSH
26660: LD_INT 7
26662: PUSH
26663: LD_INT 28
26665: PUSH
26666: LD_INT 45
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: IN
26674: IFFALSE 26695
// points := [ 35 , 20 , 45 ] ;
26676: LD_ADDR_VAR 0 9
26680: PUSH
26681: LD_INT 35
26683: PUSH
26684: LD_INT 20
26686: PUSH
26687: LD_INT 45
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26695: LD_VAR 0 6
26699: PPUSH
26700: CALL_OW 264
26704: PUSH
26705: LD_INT 47
26707: PUSH
26708: EMPTY
26709: LIST
26710: IN
26711: IFFALSE 26732
// points := [ 67 , 45 , 75 ] ;
26713: LD_ADDR_VAR 0 9
26717: PUSH
26718: LD_INT 67
26720: PUSH
26721: LD_INT 45
26723: PUSH
26724: LD_INT 75
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26732: LD_VAR 0 6
26736: PPUSH
26737: CALL_OW 264
26741: PUSH
26742: LD_INT 26
26744: PUSH
26745: EMPTY
26746: LIST
26747: IN
26748: IFFALSE 26769
// points := [ 120 , 30 , 80 ] ;
26750: LD_ADDR_VAR 0 9
26754: PUSH
26755: LD_INT 120
26757: PUSH
26758: LD_INT 30
26760: PUSH
26761: LD_INT 80
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26769: LD_VAR 0 6
26773: PPUSH
26774: CALL_OW 264
26778: PUSH
26779: LD_INT 22
26781: PUSH
26782: EMPTY
26783: LIST
26784: IN
26785: IFFALSE 26806
// points := [ 40 , 1 , 1 ] ;
26787: LD_ADDR_VAR 0 9
26791: PUSH
26792: LD_INT 40
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26806: LD_VAR 0 6
26810: PPUSH
26811: CALL_OW 264
26815: PUSH
26816: LD_INT 29
26818: PUSH
26819: EMPTY
26820: LIST
26821: IN
26822: IFFALSE 26843
// points := [ 70 , 200 , 400 ] ;
26824: LD_ADDR_VAR 0 9
26828: PUSH
26829: LD_INT 70
26831: PUSH
26832: LD_INT 200
26834: PUSH
26835: LD_INT 400
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26843: LD_VAR 0 6
26847: PPUSH
26848: CALL_OW 264
26852: PUSH
26853: LD_INT 14
26855: PUSH
26856: LD_INT 53
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: IN
26863: IFFALSE 26884
// points := [ 40 , 10 , 20 ] ;
26865: LD_ADDR_VAR 0 9
26869: PUSH
26870: LD_INT 40
26872: PUSH
26873: LD_INT 10
26875: PUSH
26876: LD_INT 20
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26884: LD_VAR 0 6
26888: PPUSH
26889: CALL_OW 264
26893: PUSH
26894: LD_INT 9
26896: PUSH
26897: EMPTY
26898: LIST
26899: IN
26900: IFFALSE 26921
// points := [ 5 , 70 , 20 ] ;
26902: LD_ADDR_VAR 0 9
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: LD_INT 70
26912: PUSH
26913: LD_INT 20
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26921: LD_VAR 0 6
26925: PPUSH
26926: CALL_OW 264
26930: PUSH
26931: LD_INT 10
26933: PUSH
26934: EMPTY
26935: LIST
26936: IN
26937: IFFALSE 26958
// points := [ 35 , 110 , 70 ] ;
26939: LD_ADDR_VAR 0 9
26943: PUSH
26944: LD_INT 35
26946: PUSH
26947: LD_INT 110
26949: PUSH
26950: LD_INT 70
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26958: LD_VAR 0 6
26962: PPUSH
26963: CALL_OW 265
26967: PUSH
26968: LD_INT 25
26970: EQUAL
26971: IFFALSE 26992
// points := [ 80 , 65 , 100 ] ;
26973: LD_ADDR_VAR 0 9
26977: PUSH
26978: LD_INT 80
26980: PUSH
26981: LD_INT 65
26983: PUSH
26984: LD_INT 100
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26992: LD_VAR 0 6
26996: PPUSH
26997: CALL_OW 263
27001: PUSH
27002: LD_INT 1
27004: EQUAL
27005: IFFALSE 27040
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27007: LD_ADDR_VAR 0 10
27011: PUSH
27012: LD_VAR 0 10
27016: PUSH
27017: LD_VAR 0 6
27021: PPUSH
27022: CALL_OW 311
27026: PPUSH
27027: LD_INT 3
27029: PPUSH
27030: CALL_OW 259
27034: PUSH
27035: LD_INT 4
27037: MUL
27038: MUL
27039: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27040: LD_VAR 0 6
27044: PPUSH
27045: CALL_OW 263
27049: PUSH
27050: LD_INT 2
27052: EQUAL
27053: IFFALSE 27104
// begin j := IsControledBy ( i ) ;
27055: LD_ADDR_VAR 0 7
27059: PUSH
27060: LD_VAR 0 6
27064: PPUSH
27065: CALL_OW 312
27069: ST_TO_ADDR
// if j then
27070: LD_VAR 0 7
27074: IFFALSE 27104
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27076: LD_ADDR_VAR 0 10
27080: PUSH
27081: LD_VAR 0 10
27085: PUSH
27086: LD_VAR 0 7
27090: PPUSH
27091: LD_INT 3
27093: PPUSH
27094: CALL_OW 259
27098: PUSH
27099: LD_INT 3
27101: MUL
27102: MUL
27103: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27104: LD_VAR 0 6
27108: PPUSH
27109: CALL_OW 264
27113: PUSH
27114: LD_INT 5
27116: PUSH
27117: LD_INT 6
27119: PUSH
27120: LD_INT 46
27122: PUSH
27123: LD_INT 44
27125: PUSH
27126: LD_INT 47
27128: PUSH
27129: LD_INT 45
27131: PUSH
27132: LD_INT 28
27134: PUSH
27135: LD_INT 7
27137: PUSH
27138: LD_INT 27
27140: PUSH
27141: LD_INT 29
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: IN
27156: PUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_INT 52
27164: PPUSH
27165: CALL_OW 321
27169: PUSH
27170: LD_INT 2
27172: EQUAL
27173: AND
27174: IFFALSE 27191
// bpoints := bpoints * 1.2 ;
27176: LD_ADDR_VAR 0 10
27180: PUSH
27181: LD_VAR 0 10
27185: PUSH
27186: LD_REAL  1.20000000000000E+0000
27189: MUL
27190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27191: LD_VAR 0 6
27195: PPUSH
27196: CALL_OW 264
27200: PUSH
27201: LD_INT 6
27203: PUSH
27204: LD_INT 46
27206: PUSH
27207: LD_INT 47
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: IN
27215: IFFALSE 27232
// bpoints := bpoints * 1.2 ;
27217: LD_ADDR_VAR 0 10
27221: PUSH
27222: LD_VAR 0 10
27226: PUSH
27227: LD_REAL  1.20000000000000E+0000
27230: MUL
27231: ST_TO_ADDR
// end ; unit_building :
27232: GO 27246
27234: LD_INT 3
27236: DOUBLE
27237: EQUAL
27238: IFTRUE 27242
27240: GO 27245
27242: POP
// ; end ;
27243: GO 27246
27245: POP
// for j = 1 to 3 do
27246: LD_ADDR_VAR 0 7
27250: PUSH
27251: DOUBLE
27252: LD_INT 1
27254: DEC
27255: ST_TO_ADDR
27256: LD_INT 3
27258: PUSH
27259: FOR_TO
27260: IFFALSE 27313
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27262: LD_ADDR_VAR 0 5
27266: PUSH
27267: LD_VAR 0 5
27271: PPUSH
27272: LD_VAR 0 7
27276: PPUSH
27277: LD_VAR 0 5
27281: PUSH
27282: LD_VAR 0 7
27286: ARRAY
27287: PUSH
27288: LD_VAR 0 9
27292: PUSH
27293: LD_VAR 0 7
27297: ARRAY
27298: PUSH
27299: LD_VAR 0 10
27303: MUL
27304: PLUS
27305: PPUSH
27306: CALL_OW 1
27310: ST_TO_ADDR
27311: GO 27259
27313: POP
27314: POP
// end ;
27315: GO 25798
27317: POP
27318: POP
// result := Replace ( result , 4 , tmp ) ;
27319: LD_ADDR_VAR 0 5
27323: PUSH
27324: LD_VAR 0 5
27328: PPUSH
27329: LD_INT 4
27331: PPUSH
27332: LD_VAR 0 8
27336: PPUSH
27337: CALL_OW 1
27341: ST_TO_ADDR
// end ;
27342: LD_VAR 0 5
27346: RET
// export function DangerAtRange ( unit , range ) ; begin
27347: LD_INT 0
27349: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 255
27364: PPUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 250
27374: PPUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 251
27384: PPUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL 25650 0 4
27394: ST_TO_ADDR
// end ;
27395: LD_VAR 0 3
27399: RET
// export function DangerInArea ( side , area ) ; begin
27400: LD_INT 0
27402: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: LD_VAR 0 2
27412: PPUSH
27413: LD_INT 81
27415: PUSH
27416: LD_VAR 0 1
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PPUSH
27425: CALL_OW 70
27429: ST_TO_ADDR
// end ;
27430: LD_VAR 0 3
27434: RET
// export function IsExtension ( b ) ; begin
27435: LD_INT 0
27437: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27438: LD_ADDR_VAR 0 2
27442: PUSH
27443: LD_VAR 0 1
27447: PUSH
27448: LD_INT 23
27450: PUSH
27451: LD_INT 20
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_INT 17
27459: PUSH
27460: LD_INT 24
27462: PUSH
27463: LD_INT 21
27465: PUSH
27466: LD_INT 19
27468: PUSH
27469: LD_INT 16
27471: PUSH
27472: LD_INT 25
27474: PUSH
27475: LD_INT 18
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: IN
27490: ST_TO_ADDR
// end ;
27491: LD_VAR 0 2
27495: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
27500: PPUSH
// result := [ ] ;
27501: LD_ADDR_VAR 0 3
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27508: LD_ADDR_VAR 0 4
27512: PUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_INT 21
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PPUSH
27528: CALL_OW 70
27532: ST_TO_ADDR
// if not tmp then
27533: LD_VAR 0 4
27537: NOT
27538: IFFALSE 27542
// exit ;
27540: GO 27600
// for i in tmp do
27542: LD_ADDR_VAR 0 5
27546: PUSH
27547: LD_VAR 0 4
27551: PUSH
27552: FOR_IN
27553: IFFALSE 27588
// if GetBase ( i ) <> base then
27555: LD_VAR 0 5
27559: PPUSH
27560: CALL_OW 274
27564: PUSH
27565: LD_VAR 0 1
27569: NONEQUAL
27570: IFFALSE 27586
// ComLinkToBase ( base , i ) ;
27572: LD_VAR 0 1
27576: PPUSH
27577: LD_VAR 0 5
27581: PPUSH
27582: CALL_OW 169
27586: GO 27552
27588: POP
27589: POP
// result := tmp ;
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: LD_VAR 0 4
27599: ST_TO_ADDR
// end ;
27600: LD_VAR 0 3
27604: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27605: LD_INT 0
27607: PPUSH
27608: PPUSH
// if BuildingStatus ( b ) = bs_build then
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 461
27618: PUSH
27619: LD_INT 1
27621: EQUAL
27622: IFFALSE 27682
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27624: LD_VAR 0 1
27628: PPUSH
27629: LD_STRING h
27631: PUSH
27632: LD_VAR 0 2
27636: PPUSH
27637: CALL_OW 250
27641: PUSH
27642: LD_VAR 0 2
27646: PPUSH
27647: CALL_OW 251
27651: PUSH
27652: LD_VAR 0 2
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: PPUSH
27678: CALL_OW 446
// end ;
27682: LD_VAR 0 3
27686: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27687: LD_INT 0
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
27694: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27695: LD_VAR 0 1
27699: NOT
27700: PUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 263
27710: PUSH
27711: LD_INT 2
27713: EQUAL
27714: NOT
27715: OR
27716: IFFALSE 27720
// exit ;
27718: GO 28036
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27720: LD_ADDR_VAR 0 6
27724: PUSH
27725: LD_INT 22
27727: PUSH
27728: LD_VAR 0 1
27732: PPUSH
27733: CALL_OW 255
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: LD_INT 30
27747: PUSH
27748: LD_INT 36
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 34
27757: PUSH
27758: LD_INT 31
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PPUSH
27774: CALL_OW 69
27778: ST_TO_ADDR
// if not tmp then
27779: LD_VAR 0 6
27783: NOT
27784: IFFALSE 27788
// exit ;
27786: GO 28036
// result := [ ] ;
27788: LD_ADDR_VAR 0 2
27792: PUSH
27793: EMPTY
27794: ST_TO_ADDR
// for i in tmp do
27795: LD_ADDR_VAR 0 3
27799: PUSH
27800: LD_VAR 0 6
27804: PUSH
27805: FOR_IN
27806: IFFALSE 27877
// begin t := UnitsInside ( i ) ;
27808: LD_ADDR_VAR 0 4
27812: PUSH
27813: LD_VAR 0 3
27817: PPUSH
27818: CALL_OW 313
27822: ST_TO_ADDR
// if t then
27823: LD_VAR 0 4
27827: IFFALSE 27875
// for j in t do
27829: LD_ADDR_VAR 0 7
27833: PUSH
27834: LD_VAR 0 4
27838: PUSH
27839: FOR_IN
27840: IFFALSE 27873
// result := Insert ( result , result + 1 , j ) ;
27842: LD_ADDR_VAR 0 2
27846: PUSH
27847: LD_VAR 0 2
27851: PPUSH
27852: LD_VAR 0 2
27856: PUSH
27857: LD_INT 1
27859: PLUS
27860: PPUSH
27861: LD_VAR 0 7
27865: PPUSH
27866: CALL_OW 2
27870: ST_TO_ADDR
27871: GO 27839
27873: POP
27874: POP
// end ;
27875: GO 27805
27877: POP
27878: POP
// if not result then
27879: LD_VAR 0 2
27883: NOT
27884: IFFALSE 27888
// exit ;
27886: GO 28036
// mech := result [ 1 ] ;
27888: LD_ADDR_VAR 0 5
27892: PUSH
27893: LD_VAR 0 2
27897: PUSH
27898: LD_INT 1
27900: ARRAY
27901: ST_TO_ADDR
// if result > 1 then
27902: LD_VAR 0 2
27906: PUSH
27907: LD_INT 1
27909: GREATER
27910: IFFALSE 28022
// for i = 2 to result do
27912: LD_ADDR_VAR 0 3
27916: PUSH
27917: DOUBLE
27918: LD_INT 2
27920: DEC
27921: ST_TO_ADDR
27922: LD_VAR 0 2
27926: PUSH
27927: FOR_TO
27928: IFFALSE 28020
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27930: LD_ADDR_VAR 0 4
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: LD_VAR 0 3
27944: ARRAY
27945: PPUSH
27946: LD_INT 3
27948: PPUSH
27949: CALL_OW 259
27953: PUSH
27954: LD_VAR 0 2
27958: PUSH
27959: LD_VAR 0 3
27963: ARRAY
27964: PPUSH
27965: CALL_OW 432
27969: MINUS
27970: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27971: LD_VAR 0 4
27975: PUSH
27976: LD_VAR 0 5
27980: PPUSH
27981: LD_INT 3
27983: PPUSH
27984: CALL_OW 259
27988: PUSH
27989: LD_VAR 0 5
27993: PPUSH
27994: CALL_OW 432
27998: MINUS
27999: GREATEREQUAL
28000: IFFALSE 28018
// mech := result [ i ] ;
28002: LD_ADDR_VAR 0 5
28006: PUSH
28007: LD_VAR 0 2
28011: PUSH
28012: LD_VAR 0 3
28016: ARRAY
28017: ST_TO_ADDR
// end ;
28018: GO 27927
28020: POP
28021: POP
// ComLinkTo ( vehicle , mech ) ;
28022: LD_VAR 0 1
28026: PPUSH
28027: LD_VAR 0 5
28031: PPUSH
28032: CALL_OW 135
// end ;
28036: LD_VAR 0 2
28040: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28041: LD_INT 0
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
28047: PPUSH
28048: PPUSH
28049: PPUSH
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
28054: PPUSH
28055: PPUSH
// result := [ ] ;
28056: LD_ADDR_VAR 0 7
28060: PUSH
28061: EMPTY
28062: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 266
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: IN
28083: NOT
28084: IFFALSE 28088
// exit ;
28086: GO 29719
// if name then
28088: LD_VAR 0 3
28092: IFFALSE 28108
// SetBName ( base_dep , name ) ;
28094: LD_VAR 0 1
28098: PPUSH
28099: LD_VAR 0 3
28103: PPUSH
28104: CALL_OW 500
// base := GetBase ( base_dep ) ;
28108: LD_ADDR_VAR 0 15
28112: PUSH
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 274
28122: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28123: LD_ADDR_VAR 0 16
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 255
28137: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28138: LD_ADDR_VAR 0 17
28142: PUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 248
28152: ST_TO_ADDR
// if sources then
28153: LD_VAR 0 5
28157: IFFALSE 28204
// for i = 1 to 3 do
28159: LD_ADDR_VAR 0 8
28163: PUSH
28164: DOUBLE
28165: LD_INT 1
28167: DEC
28168: ST_TO_ADDR
28169: LD_INT 3
28171: PUSH
28172: FOR_TO
28173: IFFALSE 28202
// AddResourceType ( base , i , sources [ i ] ) ;
28175: LD_VAR 0 15
28179: PPUSH
28180: LD_VAR 0 8
28184: PPUSH
28185: LD_VAR 0 5
28189: PUSH
28190: LD_VAR 0 8
28194: ARRAY
28195: PPUSH
28196: CALL_OW 276
28200: GO 28172
28202: POP
28203: POP
// buildings := GetBaseBuildings ( base , area ) ;
28204: LD_ADDR_VAR 0 18
28208: PUSH
28209: LD_VAR 0 15
28213: PPUSH
28214: LD_VAR 0 2
28218: PPUSH
28219: CALL 27496 0 2
28223: ST_TO_ADDR
// InitHc ;
28224: CALL_OW 19
// InitUc ;
28228: CALL_OW 18
// uc_side := side ;
28232: LD_ADDR_OWVAR 20
28236: PUSH
28237: LD_VAR 0 16
28241: ST_TO_ADDR
// uc_nation := nation ;
28242: LD_ADDR_OWVAR 21
28246: PUSH
28247: LD_VAR 0 17
28251: ST_TO_ADDR
// if buildings then
28252: LD_VAR 0 18
28256: IFFALSE 29578
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28258: LD_ADDR_VAR 0 19
28262: PUSH
28263: LD_VAR 0 18
28267: PPUSH
28268: LD_INT 2
28270: PUSH
28271: LD_INT 30
28273: PUSH
28274: LD_INT 29
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 30
28283: PUSH
28284: LD_INT 30
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: PPUSH
28296: CALL_OW 72
28300: ST_TO_ADDR
// if tmp then
28301: LD_VAR 0 19
28305: IFFALSE 28353
// for i in tmp do
28307: LD_ADDR_VAR 0 8
28311: PUSH
28312: LD_VAR 0 19
28316: PUSH
28317: FOR_IN
28318: IFFALSE 28351
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28320: LD_VAR 0 8
28324: PPUSH
28325: CALL_OW 250
28329: PPUSH
28330: LD_VAR 0 8
28334: PPUSH
28335: CALL_OW 251
28339: PPUSH
28340: LD_VAR 0 16
28344: PPUSH
28345: CALL_OW 441
28349: GO 28317
28351: POP
28352: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28353: LD_VAR 0 18
28357: PPUSH
28358: LD_INT 2
28360: PUSH
28361: LD_INT 30
28363: PUSH
28364: LD_INT 32
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 30
28373: PUSH
28374: LD_INT 33
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 72
28390: IFFALSE 28478
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28392: LD_ADDR_VAR 0 8
28396: PUSH
28397: LD_VAR 0 18
28401: PPUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 30
28407: PUSH
28408: LD_INT 32
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: LD_INT 33
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 72
28434: PUSH
28435: FOR_IN
28436: IFFALSE 28476
// begin if not GetBWeapon ( i ) then
28438: LD_VAR 0 8
28442: PPUSH
28443: CALL_OW 269
28447: NOT
28448: IFFALSE 28474
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28450: LD_VAR 0 8
28454: PPUSH
28455: LD_VAR 0 8
28459: PPUSH
28460: LD_VAR 0 2
28464: PPUSH
28465: CALL 29724 0 2
28469: PPUSH
28470: CALL_OW 431
// end ;
28474: GO 28435
28476: POP
28477: POP
// end ; for i = 1 to personel do
28478: LD_ADDR_VAR 0 8
28482: PUSH
28483: DOUBLE
28484: LD_INT 1
28486: DEC
28487: ST_TO_ADDR
28488: LD_VAR 0 6
28492: PUSH
28493: FOR_TO
28494: IFFALSE 29558
// begin if i > 4 then
28496: LD_VAR 0 8
28500: PUSH
28501: LD_INT 4
28503: GREATER
28504: IFFALSE 28508
// break ;
28506: GO 29558
// case i of 1 :
28508: LD_VAR 0 8
28512: PUSH
28513: LD_INT 1
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28601
28521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28522: LD_ADDR_VAR 0 12
28526: PUSH
28527: LD_VAR 0 18
28531: PPUSH
28532: LD_INT 22
28534: PUSH
28535: LD_VAR 0 16
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 58
28546: PUSH
28547: EMPTY
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 30
28555: PUSH
28556: LD_INT 32
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 30
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 30
28575: PUSH
28576: LD_INT 5
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: PPUSH
28594: CALL_OW 72
28598: ST_TO_ADDR
28599: GO 28823
28601: LD_INT 2
28603: DOUBLE
28604: EQUAL
28605: IFTRUE 28609
28607: GO 28671
28609: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28610: LD_ADDR_VAR 0 12
28614: PUSH
28615: LD_VAR 0 18
28619: PPUSH
28620: LD_INT 22
28622: PUSH
28623: LD_VAR 0 16
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: LD_INT 30
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 30
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 72
28668: ST_TO_ADDR
28669: GO 28823
28671: LD_INT 3
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28741
28679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28680: LD_ADDR_VAR 0 12
28684: PUSH
28685: LD_VAR 0 18
28689: PPUSH
28690: LD_INT 22
28692: PUSH
28693: LD_VAR 0 16
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 30
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: LD_INT 3
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 72
28738: ST_TO_ADDR
28739: GO 28823
28741: LD_INT 4
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28822
28749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28750: LD_ADDR_VAR 0 12
28754: PUSH
28755: LD_VAR 0 18
28759: PPUSH
28760: LD_INT 22
28762: PUSH
28763: LD_VAR 0 16
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 30
28777: PUSH
28778: LD_INT 6
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 30
28787: PUSH
28788: LD_INT 7
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 30
28797: PUSH
28798: LD_INT 8
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PPUSH
28815: CALL_OW 72
28819: ST_TO_ADDR
28820: GO 28823
28822: POP
// if i = 1 then
28823: LD_VAR 0 8
28827: PUSH
28828: LD_INT 1
28830: EQUAL
28831: IFFALSE 28942
// begin tmp := [ ] ;
28833: LD_ADDR_VAR 0 19
28837: PUSH
28838: EMPTY
28839: ST_TO_ADDR
// for j in f do
28840: LD_ADDR_VAR 0 9
28844: PUSH
28845: LD_VAR 0 12
28849: PUSH
28850: FOR_IN
28851: IFFALSE 28924
// if GetBType ( j ) = b_bunker then
28853: LD_VAR 0 9
28857: PPUSH
28858: CALL_OW 266
28862: PUSH
28863: LD_INT 32
28865: EQUAL
28866: IFFALSE 28893
// tmp := Insert ( tmp , 1 , j ) else
28868: LD_ADDR_VAR 0 19
28872: PUSH
28873: LD_VAR 0 19
28877: PPUSH
28878: LD_INT 1
28880: PPUSH
28881: LD_VAR 0 9
28885: PPUSH
28886: CALL_OW 2
28890: ST_TO_ADDR
28891: GO 28922
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28893: LD_ADDR_VAR 0 19
28897: PUSH
28898: LD_VAR 0 19
28902: PPUSH
28903: LD_VAR 0 19
28907: PUSH
28908: LD_INT 1
28910: PLUS
28911: PPUSH
28912: LD_VAR 0 9
28916: PPUSH
28917: CALL_OW 2
28921: ST_TO_ADDR
28922: GO 28850
28924: POP
28925: POP
// if tmp then
28926: LD_VAR 0 19
28930: IFFALSE 28942
// f := tmp ;
28932: LD_ADDR_VAR 0 12
28936: PUSH
28937: LD_VAR 0 19
28941: ST_TO_ADDR
// end ; x := personel [ i ] ;
28942: LD_ADDR_VAR 0 13
28946: PUSH
28947: LD_VAR 0 6
28951: PUSH
28952: LD_VAR 0 8
28956: ARRAY
28957: ST_TO_ADDR
// if x = - 1 then
28958: LD_VAR 0 13
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: EQUAL
28967: IFFALSE 29176
// begin for j in f do
28969: LD_ADDR_VAR 0 9
28973: PUSH
28974: LD_VAR 0 12
28978: PUSH
28979: FOR_IN
28980: IFFALSE 29172
// repeat InitHc ;
28982: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28986: LD_VAR 0 9
28990: PPUSH
28991: CALL_OW 266
28995: PUSH
28996: LD_INT 5
28998: EQUAL
28999: IFFALSE 29069
// begin if UnitsInside ( j ) < 3 then
29001: LD_VAR 0 9
29005: PPUSH
29006: CALL_OW 313
29010: PUSH
29011: LD_INT 3
29013: LESS
29014: IFFALSE 29050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29016: LD_INT 0
29018: PPUSH
29019: LD_INT 5
29021: PUSH
29022: LD_INT 8
29024: PUSH
29025: LD_INT 9
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: PUSH
29033: LD_VAR 0 17
29037: ARRAY
29038: PPUSH
29039: LD_VAR 0 4
29043: PPUSH
29044: CALL_OW 380
29048: GO 29067
// PrepareHuman ( false , i , skill ) ;
29050: LD_INT 0
29052: PPUSH
29053: LD_VAR 0 8
29057: PPUSH
29058: LD_VAR 0 4
29062: PPUSH
29063: CALL_OW 380
// end else
29067: GO 29086
// PrepareHuman ( false , i , skill ) ;
29069: LD_INT 0
29071: PPUSH
29072: LD_VAR 0 8
29076: PPUSH
29077: LD_VAR 0 4
29081: PPUSH
29082: CALL_OW 380
// un := CreateHuman ;
29086: LD_ADDR_VAR 0 14
29090: PUSH
29091: CALL_OW 44
29095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29096: LD_ADDR_VAR 0 7
29100: PUSH
29101: LD_VAR 0 7
29105: PPUSH
29106: LD_INT 1
29108: PPUSH
29109: LD_VAR 0 14
29113: PPUSH
29114: CALL_OW 2
29118: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29119: LD_VAR 0 14
29123: PPUSH
29124: LD_VAR 0 9
29128: PPUSH
29129: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29133: LD_VAR 0 9
29137: PPUSH
29138: CALL_OW 313
29142: PUSH
29143: LD_INT 6
29145: EQUAL
29146: PUSH
29147: LD_VAR 0 9
29151: PPUSH
29152: CALL_OW 266
29156: PUSH
29157: LD_INT 32
29159: PUSH
29160: LD_INT 31
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: IN
29167: OR
29168: IFFALSE 28982
29170: GO 28979
29172: POP
29173: POP
// end else
29174: GO 29556
// for j = 1 to x do
29176: LD_ADDR_VAR 0 9
29180: PUSH
29181: DOUBLE
29182: LD_INT 1
29184: DEC
29185: ST_TO_ADDR
29186: LD_VAR 0 13
29190: PUSH
29191: FOR_TO
29192: IFFALSE 29554
// begin InitHc ;
29194: CALL_OW 19
// if not f then
29198: LD_VAR 0 12
29202: NOT
29203: IFFALSE 29292
// begin PrepareHuman ( false , i , skill ) ;
29205: LD_INT 0
29207: PPUSH
29208: LD_VAR 0 8
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: CALL_OW 380
// un := CreateHuman ;
29222: LD_ADDR_VAR 0 14
29226: PUSH
29227: CALL_OW 44
29231: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29232: LD_ADDR_VAR 0 7
29236: PUSH
29237: LD_VAR 0 7
29241: PPUSH
29242: LD_INT 1
29244: PPUSH
29245: LD_VAR 0 14
29249: PPUSH
29250: CALL_OW 2
29254: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29255: LD_VAR 0 14
29259: PPUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 250
29269: PPUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 251
29279: PPUSH
29280: LD_INT 10
29282: PPUSH
29283: LD_INT 0
29285: PPUSH
29286: CALL_OW 50
// continue ;
29290: GO 29191
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29292: LD_VAR 0 12
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 313
29305: PUSH
29306: LD_VAR 0 12
29310: PUSH
29311: LD_INT 1
29313: ARRAY
29314: PPUSH
29315: CALL_OW 266
29319: PUSH
29320: LD_INT 32
29322: PUSH
29323: LD_INT 31
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: IN
29330: AND
29331: PUSH
29332: LD_VAR 0 12
29336: PUSH
29337: LD_INT 1
29339: ARRAY
29340: PPUSH
29341: CALL_OW 313
29345: PUSH
29346: LD_INT 6
29348: EQUAL
29349: OR
29350: IFFALSE 29370
// f := Delete ( f , 1 ) ;
29352: LD_ADDR_VAR 0 12
29356: PUSH
29357: LD_VAR 0 12
29361: PPUSH
29362: LD_INT 1
29364: PPUSH
29365: CALL_OW 3
29369: ST_TO_ADDR
// if not f then
29370: LD_VAR 0 12
29374: NOT
29375: IFFALSE 29393
// begin x := x + 2 ;
29377: LD_ADDR_VAR 0 13
29381: PUSH
29382: LD_VAR 0 13
29386: PUSH
29387: LD_INT 2
29389: PLUS
29390: ST_TO_ADDR
// continue ;
29391: GO 29191
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29393: LD_VAR 0 12
29397: PUSH
29398: LD_INT 1
29400: ARRAY
29401: PPUSH
29402: CALL_OW 266
29406: PUSH
29407: LD_INT 5
29409: EQUAL
29410: IFFALSE 29484
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29412: LD_VAR 0 12
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: CALL_OW 313
29425: PUSH
29426: LD_INT 3
29428: LESS
29429: IFFALSE 29465
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29431: LD_INT 0
29433: PPUSH
29434: LD_INT 5
29436: PUSH
29437: LD_INT 8
29439: PUSH
29440: LD_INT 9
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: PUSH
29448: LD_VAR 0 17
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 4
29458: PPUSH
29459: CALL_OW 380
29463: GO 29482
// PrepareHuman ( false , i , skill ) ;
29465: LD_INT 0
29467: PPUSH
29468: LD_VAR 0 8
29472: PPUSH
29473: LD_VAR 0 4
29477: PPUSH
29478: CALL_OW 380
// end else
29482: GO 29501
// PrepareHuman ( false , i , skill ) ;
29484: LD_INT 0
29486: PPUSH
29487: LD_VAR 0 8
29491: PPUSH
29492: LD_VAR 0 4
29496: PPUSH
29497: CALL_OW 380
// un := CreateHuman ;
29501: LD_ADDR_VAR 0 14
29505: PUSH
29506: CALL_OW 44
29510: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29511: LD_ADDR_VAR 0 7
29515: PUSH
29516: LD_VAR 0 7
29520: PPUSH
29521: LD_INT 1
29523: PPUSH
29524: LD_VAR 0 14
29528: PPUSH
29529: CALL_OW 2
29533: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29534: LD_VAR 0 14
29538: PPUSH
29539: LD_VAR 0 12
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PPUSH
29548: CALL_OW 52
// end ;
29552: GO 29191
29554: POP
29555: POP
// end ;
29556: GO 28493
29558: POP
29559: POP
// result := result ^ buildings ;
29560: LD_ADDR_VAR 0 7
29564: PUSH
29565: LD_VAR 0 7
29569: PUSH
29570: LD_VAR 0 18
29574: ADD
29575: ST_TO_ADDR
// end else
29576: GO 29719
// begin for i = 1 to personel do
29578: LD_ADDR_VAR 0 8
29582: PUSH
29583: DOUBLE
29584: LD_INT 1
29586: DEC
29587: ST_TO_ADDR
29588: LD_VAR 0 6
29592: PUSH
29593: FOR_TO
29594: IFFALSE 29717
// begin if i > 4 then
29596: LD_VAR 0 8
29600: PUSH
29601: LD_INT 4
29603: GREATER
29604: IFFALSE 29608
// break ;
29606: GO 29717
// x := personel [ i ] ;
29608: LD_ADDR_VAR 0 13
29612: PUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 8
29622: ARRAY
29623: ST_TO_ADDR
// if x = - 1 then
29624: LD_VAR 0 13
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: EQUAL
29633: IFFALSE 29637
// continue ;
29635: GO 29593
// PrepareHuman ( false , i , skill ) ;
29637: LD_INT 0
29639: PPUSH
29640: LD_VAR 0 8
29644: PPUSH
29645: LD_VAR 0 4
29649: PPUSH
29650: CALL_OW 380
// un := CreateHuman ;
29654: LD_ADDR_VAR 0 14
29658: PUSH
29659: CALL_OW 44
29663: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29664: LD_VAR 0 14
29668: PPUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 250
29678: PPUSH
29679: LD_VAR 0 1
29683: PPUSH
29684: CALL_OW 251
29688: PPUSH
29689: LD_INT 10
29691: PPUSH
29692: LD_INT 0
29694: PPUSH
29695: CALL_OW 50
// result := result ^ un ;
29699: LD_ADDR_VAR 0 7
29703: PUSH
29704: LD_VAR 0 7
29708: PUSH
29709: LD_VAR 0 14
29713: ADD
29714: ST_TO_ADDR
// end ;
29715: GO 29593
29717: POP
29718: POP
// end ; end ;
29719: LD_VAR 0 7
29723: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29724: LD_INT 0
29726: PPUSH
29727: PPUSH
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
// result := false ;
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 0
29749: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29750: LD_VAR 0 1
29754: NOT
29755: PUSH
29756: LD_VAR 0 1
29760: PPUSH
29761: CALL_OW 266
29765: PUSH
29766: LD_INT 32
29768: PUSH
29769: LD_INT 33
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: IN
29776: NOT
29777: OR
29778: IFFALSE 29782
// exit ;
29780: GO 30918
// nat := GetNation ( tower ) ;
29782: LD_ADDR_VAR 0 12
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 248
29796: ST_TO_ADDR
// side := GetSide ( tower ) ;
29797: LD_ADDR_VAR 0 16
29801: PUSH
29802: LD_VAR 0 1
29806: PPUSH
29807: CALL_OW 255
29811: ST_TO_ADDR
// x := GetX ( tower ) ;
29812: LD_ADDR_VAR 0 10
29816: PUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 250
29826: ST_TO_ADDR
// y := GetY ( tower ) ;
29827: LD_ADDR_VAR 0 11
29831: PUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 251
29841: ST_TO_ADDR
// if not x or not y then
29842: LD_VAR 0 10
29846: NOT
29847: PUSH
29848: LD_VAR 0 11
29852: NOT
29853: OR
29854: IFFALSE 29858
// exit ;
29856: GO 30918
// weapon := 0 ;
29858: LD_ADDR_VAR 0 18
29862: PUSH
29863: LD_INT 0
29865: ST_TO_ADDR
// fac_list := [ ] ;
29866: LD_ADDR_VAR 0 17
29870: PUSH
29871: EMPTY
29872: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29873: LD_ADDR_VAR 0 6
29877: PUSH
29878: LD_VAR 0 1
29882: PPUSH
29883: CALL_OW 274
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: CALL 27496 0 2
29897: PPUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PPUSH
29908: CALL_OW 72
29912: ST_TO_ADDR
// if not factories then
29913: LD_VAR 0 6
29917: NOT
29918: IFFALSE 29922
// exit ;
29920: GO 30918
// for i in factories do
29922: LD_ADDR_VAR 0 8
29926: PUSH
29927: LD_VAR 0 6
29931: PUSH
29932: FOR_IN
29933: IFFALSE 29958
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29935: LD_ADDR_VAR 0 17
29939: PUSH
29940: LD_VAR 0 17
29944: PUSH
29945: LD_VAR 0 8
29949: PPUSH
29950: CALL_OW 478
29954: UNION
29955: ST_TO_ADDR
29956: GO 29932
29958: POP
29959: POP
// if not fac_list then
29960: LD_VAR 0 17
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 30918
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29969: LD_ADDR_VAR 0 5
29973: PUSH
29974: LD_INT 4
29976: PUSH
29977: LD_INT 5
29979: PUSH
29980: LD_INT 9
29982: PUSH
29983: LD_INT 10
29985: PUSH
29986: LD_INT 6
29988: PUSH
29989: LD_INT 7
29991: PUSH
29992: LD_INT 11
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 27
30006: PUSH
30007: LD_INT 28
30009: PUSH
30010: LD_INT 26
30012: PUSH
30013: LD_INT 30
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 43
30024: PUSH
30025: LD_INT 44
30027: PUSH
30028: LD_INT 46
30030: PUSH
30031: LD_INT 45
30033: PUSH
30034: LD_INT 47
30036: PUSH
30037: LD_INT 49
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: PUSH
30053: LD_VAR 0 12
30057: ARRAY
30058: ST_TO_ADDR
// for i in list do
30059: LD_ADDR_VAR 0 8
30063: PUSH
30064: LD_VAR 0 5
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30103
// if not i in fac_list then
30072: LD_VAR 0 8
30076: PUSH
30077: LD_VAR 0 17
30081: IN
30082: NOT
30083: IFFALSE 30101
// list := list diff i ;
30085: LD_ADDR_VAR 0 5
30089: PUSH
30090: LD_VAR 0 5
30094: PUSH
30095: LD_VAR 0 8
30099: DIFF
30100: ST_TO_ADDR
30101: GO 30069
30103: POP
30104: POP
// if not list then
30105: LD_VAR 0 5
30109: NOT
30110: IFFALSE 30114
// exit ;
30112: GO 30918
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30114: LD_VAR 0 12
30118: PUSH
30119: LD_INT 3
30121: EQUAL
30122: PUSH
30123: LD_INT 49
30125: PUSH
30126: LD_VAR 0 5
30130: IN
30131: AND
30132: PUSH
30133: LD_INT 31
30135: PPUSH
30136: LD_VAR 0 16
30140: PPUSH
30141: CALL_OW 321
30145: PUSH
30146: LD_INT 2
30148: EQUAL
30149: AND
30150: IFFALSE 30210
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30152: LD_INT 22
30154: PUSH
30155: LD_VAR 0 16
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 35
30166: PUSH
30167: LD_INT 49
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 91
30176: PUSH
30177: LD_VAR 0 1
30181: PUSH
30182: LD_INT 10
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: NOT
30200: IFFALSE 30210
// weapon := ru_time_lapser ;
30202: LD_ADDR_VAR 0 18
30206: PUSH
30207: LD_INT 49
30209: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30210: LD_VAR 0 12
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: IN
30225: PUSH
30226: LD_INT 11
30228: PUSH
30229: LD_VAR 0 5
30233: IN
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_VAR 0 5
30242: IN
30243: OR
30244: AND
30245: PUSH
30246: LD_INT 6
30248: PPUSH
30249: LD_VAR 0 16
30253: PPUSH
30254: CALL_OW 321
30258: PUSH
30259: LD_INT 2
30261: EQUAL
30262: AND
30263: IFFALSE 30428
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30265: LD_INT 22
30267: PUSH
30268: LD_VAR 0 16
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 35
30282: PUSH
30283: LD_INT 11
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 35
30292: PUSH
30293: LD_INT 30
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 91
30307: PUSH
30308: LD_VAR 0 1
30312: PUSH
30313: LD_INT 18
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: PPUSH
30326: CALL_OW 69
30330: NOT
30331: PUSH
30332: LD_INT 22
30334: PUSH
30335: LD_VAR 0 16
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 30
30349: PUSH
30350: LD_INT 32
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 30
30359: PUSH
30360: LD_INT 33
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 91
30374: PUSH
30375: LD_VAR 0 1
30379: PUSH
30380: LD_INT 12
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: PPUSH
30396: CALL_OW 69
30400: PUSH
30401: LD_INT 2
30403: GREATER
30404: AND
30405: IFFALSE 30428
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30407: LD_ADDR_VAR 0 18
30411: PUSH
30412: LD_INT 11
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_VAR 0 12
30426: ARRAY
30427: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30428: LD_VAR 0 18
30432: NOT
30433: PUSH
30434: LD_INT 40
30436: PPUSH
30437: LD_VAR 0 16
30441: PPUSH
30442: CALL_OW 321
30446: PUSH
30447: LD_INT 2
30449: EQUAL
30450: AND
30451: PUSH
30452: LD_INT 7
30454: PUSH
30455: LD_VAR 0 5
30459: IN
30460: PUSH
30461: LD_INT 28
30463: PUSH
30464: LD_VAR 0 5
30468: IN
30469: OR
30470: PUSH
30471: LD_INT 45
30473: PUSH
30474: LD_VAR 0 5
30478: IN
30479: OR
30480: AND
30481: IFFALSE 30735
// begin hex := GetHexInfo ( x , y ) ;
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: LD_VAR 0 10
30492: PPUSH
30493: LD_VAR 0 11
30497: PPUSH
30498: CALL_OW 546
30502: ST_TO_ADDR
// if hex [ 1 ] then
30503: LD_VAR 0 4
30507: PUSH
30508: LD_INT 1
30510: ARRAY
30511: IFFALSE 30515
// exit ;
30513: GO 30918
// height := hex [ 2 ] ;
30515: LD_ADDR_VAR 0 15
30519: PUSH
30520: LD_VAR 0 4
30524: PUSH
30525: LD_INT 2
30527: ARRAY
30528: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30529: LD_ADDR_VAR 0 14
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// for i in tmp do
30552: LD_ADDR_VAR 0 8
30556: PUSH
30557: LD_VAR 0 14
30561: PUSH
30562: FOR_IN
30563: IFFALSE 30733
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30565: LD_ADDR_VAR 0 9
30569: PUSH
30570: LD_VAR 0 10
30574: PPUSH
30575: LD_VAR 0 8
30579: PPUSH
30580: LD_INT 5
30582: PPUSH
30583: CALL_OW 272
30587: PUSH
30588: LD_VAR 0 11
30592: PPUSH
30593: LD_VAR 0 8
30597: PPUSH
30598: LD_INT 5
30600: PPUSH
30601: CALL_OW 273
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30610: LD_VAR 0 9
30614: PUSH
30615: LD_INT 1
30617: ARRAY
30618: PPUSH
30619: LD_VAR 0 9
30623: PUSH
30624: LD_INT 2
30626: ARRAY
30627: PPUSH
30628: CALL_OW 488
30632: IFFALSE 30731
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30634: LD_ADDR_VAR 0 4
30638: PUSH
30639: LD_VAR 0 9
30643: PUSH
30644: LD_INT 1
30646: ARRAY
30647: PPUSH
30648: LD_VAR 0 9
30652: PUSH
30653: LD_INT 2
30655: ARRAY
30656: PPUSH
30657: CALL_OW 546
30661: ST_TO_ADDR
// if hex [ 1 ] then
30662: LD_VAR 0 4
30666: PUSH
30667: LD_INT 1
30669: ARRAY
30670: IFFALSE 30674
// continue ;
30672: GO 30562
// h := hex [ 2 ] ;
30674: LD_ADDR_VAR 0 13
30678: PUSH
30679: LD_VAR 0 4
30683: PUSH
30684: LD_INT 2
30686: ARRAY
30687: ST_TO_ADDR
// if h + 7 < height then
30688: LD_VAR 0 13
30692: PUSH
30693: LD_INT 7
30695: PLUS
30696: PUSH
30697: LD_VAR 0 15
30701: LESS
30702: IFFALSE 30731
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30704: LD_ADDR_VAR 0 18
30708: PUSH
30709: LD_INT 7
30711: PUSH
30712: LD_INT 28
30714: PUSH
30715: LD_INT 45
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: LD_VAR 0 12
30727: ARRAY
30728: ST_TO_ADDR
// break ;
30729: GO 30733
// end ; end ; end ;
30731: GO 30562
30733: POP
30734: POP
// end ; if not weapon then
30735: LD_VAR 0 18
30739: NOT
30740: IFFALSE 30800
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30742: LD_ADDR_VAR 0 5
30746: PUSH
30747: LD_VAR 0 5
30751: PUSH
30752: LD_INT 11
30754: PUSH
30755: LD_INT 30
30757: PUSH
30758: LD_INT 49
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: DIFF
30766: ST_TO_ADDR
// if not list then
30767: LD_VAR 0 5
30771: NOT
30772: IFFALSE 30776
// exit ;
30774: GO 30918
// weapon := list [ rand ( 1 , list ) ] ;
30776: LD_ADDR_VAR 0 18
30780: PUSH
30781: LD_VAR 0 5
30785: PUSH
30786: LD_INT 1
30788: PPUSH
30789: LD_VAR 0 5
30793: PPUSH
30794: CALL_OW 12
30798: ARRAY
30799: ST_TO_ADDR
// end ; if weapon then
30800: LD_VAR 0 18
30804: IFFALSE 30918
// begin tmp := CostOfWeapon ( weapon ) ;
30806: LD_ADDR_VAR 0 14
30810: PUSH
30811: LD_VAR 0 18
30815: PPUSH
30816: CALL_OW 451
30820: ST_TO_ADDR
// j := GetBase ( tower ) ;
30821: LD_ADDR_VAR 0 9
30825: PUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL_OW 274
30835: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30836: LD_VAR 0 9
30840: PPUSH
30841: LD_INT 1
30843: PPUSH
30844: CALL_OW 275
30848: PUSH
30849: LD_VAR 0 14
30853: PUSH
30854: LD_INT 1
30856: ARRAY
30857: GREATEREQUAL
30858: PUSH
30859: LD_VAR 0 9
30863: PPUSH
30864: LD_INT 2
30866: PPUSH
30867: CALL_OW 275
30871: PUSH
30872: LD_VAR 0 14
30876: PUSH
30877: LD_INT 2
30879: ARRAY
30880: GREATEREQUAL
30881: AND
30882: PUSH
30883: LD_VAR 0 9
30887: PPUSH
30888: LD_INT 3
30890: PPUSH
30891: CALL_OW 275
30895: PUSH
30896: LD_VAR 0 14
30900: PUSH
30901: LD_INT 3
30903: ARRAY
30904: GREATEREQUAL
30905: AND
30906: IFFALSE 30918
// result := weapon ;
30908: LD_ADDR_VAR 0 3
30912: PUSH
30913: LD_VAR 0 18
30917: ST_TO_ADDR
// end ; end ;
30918: LD_VAR 0 3
30922: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
// result := true ;
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 1
30934: ST_TO_ADDR
// if array1 = array2 then
30935: LD_VAR 0 1
30939: PUSH
30940: LD_VAR 0 2
30944: EQUAL
30945: IFFALSE 31005
// begin for i = 1 to array1 do
30947: LD_ADDR_VAR 0 4
30951: PUSH
30952: DOUBLE
30953: LD_INT 1
30955: DEC
30956: ST_TO_ADDR
30957: LD_VAR 0 1
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31001
// if array1 [ i ] <> array2 [ i ] then
30965: LD_VAR 0 1
30969: PUSH
30970: LD_VAR 0 4
30974: ARRAY
30975: PUSH
30976: LD_VAR 0 2
30980: PUSH
30981: LD_VAR 0 4
30985: ARRAY
30986: NONEQUAL
30987: IFFALSE 30999
// begin result := false ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 0
30996: ST_TO_ADDR
// break ;
30997: GO 31001
// end ;
30999: GO 30962
31001: POP
31002: POP
// end else
31003: GO 31013
// result := false ;
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_INT 0
31012: ST_TO_ADDR
// end ;
31013: LD_VAR 0 3
31017: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31018: LD_INT 0
31020: PPUSH
31021: PPUSH
31022: PPUSH
// pom := GetBase ( fac ) ;
31023: LD_ADDR_VAR 0 5
31027: PUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: CALL_OW 274
31037: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31038: LD_ADDR_VAR 0 4
31042: PUSH
31043: LD_VAR 0 2
31047: PUSH
31048: LD_INT 1
31050: ARRAY
31051: PPUSH
31052: LD_VAR 0 2
31056: PUSH
31057: LD_INT 2
31059: ARRAY
31060: PPUSH
31061: LD_VAR 0 2
31065: PUSH
31066: LD_INT 3
31068: ARRAY
31069: PPUSH
31070: LD_VAR 0 2
31074: PUSH
31075: LD_INT 4
31077: ARRAY
31078: PPUSH
31079: CALL_OW 449
31083: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31084: LD_ADDR_VAR 0 3
31088: PUSH
31089: LD_VAR 0 5
31093: PPUSH
31094: LD_INT 1
31096: PPUSH
31097: CALL_OW 275
31101: PUSH
31102: LD_VAR 0 4
31106: PUSH
31107: LD_INT 1
31109: ARRAY
31110: GREATEREQUAL
31111: PUSH
31112: LD_VAR 0 5
31116: PPUSH
31117: LD_INT 2
31119: PPUSH
31120: CALL_OW 275
31124: PUSH
31125: LD_VAR 0 4
31129: PUSH
31130: LD_INT 2
31132: ARRAY
31133: GREATEREQUAL
31134: AND
31135: PUSH
31136: LD_VAR 0 5
31140: PPUSH
31141: LD_INT 3
31143: PPUSH
31144: CALL_OW 275
31148: PUSH
31149: LD_VAR 0 4
31153: PUSH
31154: LD_INT 3
31156: ARRAY
31157: GREATEREQUAL
31158: AND
31159: ST_TO_ADDR
// end ;
31160: LD_VAR 0 3
31164: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
// pom := GetBase ( building ) ;
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 274
31185: ST_TO_ADDR
// if not pom then
31186: LD_VAR 0 3
31190: NOT
31191: IFFALSE 31195
// exit ;
31193: GO 31365
// btype := GetBType ( building ) ;
31195: LD_ADDR_VAR 0 5
31199: PUSH
31200: LD_VAR 0 1
31204: PPUSH
31205: CALL_OW 266
31209: ST_TO_ADDR
// if btype = b_armoury then
31210: LD_VAR 0 5
31214: PUSH
31215: LD_INT 4
31217: EQUAL
31218: IFFALSE 31228
// btype := b_barracks ;
31220: LD_ADDR_VAR 0 5
31224: PUSH
31225: LD_INT 5
31227: ST_TO_ADDR
// if btype = b_depot then
31228: LD_VAR 0 5
31232: PUSH
31233: LD_INT 0
31235: EQUAL
31236: IFFALSE 31246
// btype := b_warehouse ;
31238: LD_ADDR_VAR 0 5
31242: PUSH
31243: LD_INT 1
31245: ST_TO_ADDR
// if btype = b_workshop then
31246: LD_VAR 0 5
31250: PUSH
31251: LD_INT 2
31253: EQUAL
31254: IFFALSE 31264
// btype := b_factory ;
31256: LD_ADDR_VAR 0 5
31260: PUSH
31261: LD_INT 3
31263: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31264: LD_ADDR_VAR 0 4
31268: PUSH
31269: LD_VAR 0 5
31273: PPUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: CALL_OW 248
31283: PPUSH
31284: CALL_OW 450
31288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31289: LD_ADDR_VAR 0 2
31293: PUSH
31294: LD_VAR 0 3
31298: PPUSH
31299: LD_INT 1
31301: PPUSH
31302: CALL_OW 275
31306: PUSH
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: GREATEREQUAL
31316: PUSH
31317: LD_VAR 0 3
31321: PPUSH
31322: LD_INT 2
31324: PPUSH
31325: CALL_OW 275
31329: PUSH
31330: LD_VAR 0 4
31334: PUSH
31335: LD_INT 2
31337: ARRAY
31338: GREATEREQUAL
31339: AND
31340: PUSH
31341: LD_VAR 0 3
31345: PPUSH
31346: LD_INT 3
31348: PPUSH
31349: CALL_OW 275
31353: PUSH
31354: LD_VAR 0 4
31358: PUSH
31359: LD_INT 3
31361: ARRAY
31362: GREATEREQUAL
31363: AND
31364: ST_TO_ADDR
// end ;
31365: LD_VAR 0 2
31369: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
31374: PPUSH
// pom := GetBase ( building ) ;
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 274
31389: ST_TO_ADDR
// if not pom then
31390: LD_VAR 0 4
31394: NOT
31395: IFFALSE 31399
// exit ;
31397: GO 31500
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31399: LD_ADDR_VAR 0 5
31403: PUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_VAR 0 1
31413: PPUSH
31414: CALL_OW 248
31418: PPUSH
31419: CALL_OW 450
31423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: LD_VAR 0 4
31433: PPUSH
31434: LD_INT 1
31436: PPUSH
31437: CALL_OW 275
31441: PUSH
31442: LD_VAR 0 5
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: GREATEREQUAL
31451: PUSH
31452: LD_VAR 0 4
31456: PPUSH
31457: LD_INT 2
31459: PPUSH
31460: CALL_OW 275
31464: PUSH
31465: LD_VAR 0 5
31469: PUSH
31470: LD_INT 2
31472: ARRAY
31473: GREATEREQUAL
31474: AND
31475: PUSH
31476: LD_VAR 0 4
31480: PPUSH
31481: LD_INT 3
31483: PPUSH
31484: CALL_OW 275
31488: PUSH
31489: LD_VAR 0 5
31493: PUSH
31494: LD_INT 3
31496: ARRAY
31497: GREATEREQUAL
31498: AND
31499: ST_TO_ADDR
// end ;
31500: LD_VAR 0 3
31504: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
// result := false ;
31517: LD_ADDR_VAR 0 6
31521: PUSH
31522: LD_INT 0
31524: ST_TO_ADDR
// if not base or not btype or not x or not y then
31525: LD_VAR 0 1
31529: NOT
31530: PUSH
31531: LD_VAR 0 2
31535: NOT
31536: OR
31537: PUSH
31538: LD_VAR 0 3
31542: NOT
31543: OR
31544: PUSH
31545: LD_VAR 0 4
31549: NOT
31550: OR
31551: IFFALSE 31555
// exit ;
31553: GO 32164
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31555: LD_ADDR_VAR 0 12
31559: PUSH
31560: LD_VAR 0 2
31564: PPUSH
31565: LD_VAR 0 3
31569: PPUSH
31570: LD_VAR 0 4
31574: PPUSH
31575: LD_VAR 0 5
31579: PPUSH
31580: LD_VAR 0 1
31584: PUSH
31585: LD_INT 1
31587: ARRAY
31588: PPUSH
31589: CALL_OW 248
31593: PPUSH
31594: LD_INT 0
31596: PPUSH
31597: CALL 33001 0 6
31601: ST_TO_ADDR
// if not hexes then
31602: LD_VAR 0 12
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 32164
// for i = 1 to hexes do
31611: LD_ADDR_VAR 0 7
31615: PUSH
31616: DOUBLE
31617: LD_INT 1
31619: DEC
31620: ST_TO_ADDR
31621: LD_VAR 0 12
31625: PUSH
31626: FOR_TO
31627: IFFALSE 32162
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31629: LD_ADDR_VAR 0 11
31633: PUSH
31634: LD_VAR 0 12
31638: PUSH
31639: LD_VAR 0 7
31643: ARRAY
31644: PUSH
31645: LD_INT 1
31647: ARRAY
31648: PPUSH
31649: LD_VAR 0 12
31653: PUSH
31654: LD_VAR 0 7
31658: ARRAY
31659: PUSH
31660: LD_INT 2
31662: ARRAY
31663: PPUSH
31664: CALL_OW 428
31668: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31669: LD_VAR 0 12
31673: PUSH
31674: LD_VAR 0 7
31678: ARRAY
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: PPUSH
31684: LD_VAR 0 12
31688: PUSH
31689: LD_VAR 0 7
31693: ARRAY
31694: PUSH
31695: LD_INT 2
31697: ARRAY
31698: PPUSH
31699: CALL_OW 351
31703: PUSH
31704: LD_VAR 0 12
31708: PUSH
31709: LD_VAR 0 7
31713: ARRAY
31714: PUSH
31715: LD_INT 1
31717: ARRAY
31718: PPUSH
31719: LD_VAR 0 12
31723: PUSH
31724: LD_VAR 0 7
31728: ARRAY
31729: PUSH
31730: LD_INT 2
31732: ARRAY
31733: PPUSH
31734: CALL_OW 488
31738: NOT
31739: OR
31740: PUSH
31741: LD_VAR 0 11
31745: PPUSH
31746: CALL_OW 247
31750: PUSH
31751: LD_INT 3
31753: EQUAL
31754: OR
31755: IFFALSE 31761
// exit ;
31757: POP
31758: POP
31759: GO 32164
// if not tmp or not tmp in base then
31761: LD_VAR 0 11
31765: NOT
31766: PUSH
31767: LD_VAR 0 11
31771: PUSH
31772: LD_VAR 0 1
31776: IN
31777: NOT
31778: OR
31779: IFFALSE 31783
// continue ;
31781: GO 31626
// result := true ;
31783: LD_ADDR_VAR 0 6
31787: PUSH
31788: LD_INT 1
31790: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31791: LD_ADDR_VAR 0 15
31795: PUSH
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_INT 22
31803: PUSH
31804: LD_VAR 0 11
31808: PPUSH
31809: CALL_OW 255
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 30
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 30
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 72
31854: ST_TO_ADDR
// if dep then
31855: LD_VAR 0 15
31859: IFFALSE 31995
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31861: LD_ADDR_VAR 0 14
31865: PUSH
31866: LD_VAR 0 15
31870: PUSH
31871: LD_INT 1
31873: ARRAY
31874: PPUSH
31875: CALL_OW 250
31879: PPUSH
31880: LD_VAR 0 15
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: PPUSH
31889: CALL_OW 254
31893: PPUSH
31894: LD_INT 5
31896: PPUSH
31897: CALL_OW 272
31901: PUSH
31902: LD_VAR 0 15
31906: PUSH
31907: LD_INT 1
31909: ARRAY
31910: PPUSH
31911: CALL_OW 251
31915: PPUSH
31916: LD_VAR 0 15
31920: PUSH
31921: LD_INT 1
31923: ARRAY
31924: PPUSH
31925: CALL_OW 254
31929: PPUSH
31930: LD_INT 5
31932: PPUSH
31933: CALL_OW 273
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31942: LD_VAR 0 14
31946: PUSH
31947: LD_INT 1
31949: ARRAY
31950: PPUSH
31951: LD_VAR 0 14
31955: PUSH
31956: LD_INT 2
31958: ARRAY
31959: PPUSH
31960: CALL_OW 488
31964: IFFALSE 31995
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31966: LD_VAR 0 11
31970: PPUSH
31971: LD_VAR 0 14
31975: PUSH
31976: LD_INT 1
31978: ARRAY
31979: PPUSH
31980: LD_VAR 0 14
31984: PUSH
31985: LD_INT 2
31987: ARRAY
31988: PPUSH
31989: CALL_OW 111
// continue ;
31993: GO 31626
// end ; end ; r := GetDir ( tmp ) ;
31995: LD_ADDR_VAR 0 13
31999: PUSH
32000: LD_VAR 0 11
32004: PPUSH
32005: CALL_OW 254
32009: ST_TO_ADDR
// if r = 5 then
32010: LD_VAR 0 13
32014: PUSH
32015: LD_INT 5
32017: EQUAL
32018: IFFALSE 32028
// r := 0 ;
32020: LD_ADDR_VAR 0 13
32024: PUSH
32025: LD_INT 0
32027: ST_TO_ADDR
// for j = r to 5 do
32028: LD_ADDR_VAR 0 8
32032: PUSH
32033: DOUBLE
32034: LD_VAR 0 13
32038: DEC
32039: ST_TO_ADDR
32040: LD_INT 5
32042: PUSH
32043: FOR_TO
32044: IFFALSE 32158
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32046: LD_ADDR_VAR 0 9
32050: PUSH
32051: LD_VAR 0 11
32055: PPUSH
32056: CALL_OW 250
32060: PPUSH
32061: LD_VAR 0 8
32065: PPUSH
32066: LD_INT 2
32068: PPUSH
32069: CALL_OW 272
32073: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32074: LD_ADDR_VAR 0 10
32078: PUSH
32079: LD_VAR 0 11
32083: PPUSH
32084: CALL_OW 251
32088: PPUSH
32089: LD_VAR 0 8
32093: PPUSH
32094: LD_INT 2
32096: PPUSH
32097: CALL_OW 273
32101: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32102: LD_VAR 0 9
32106: PPUSH
32107: LD_VAR 0 10
32111: PPUSH
32112: CALL_OW 488
32116: PUSH
32117: LD_VAR 0 9
32121: PPUSH
32122: LD_VAR 0 10
32126: PPUSH
32127: CALL_OW 428
32131: NOT
32132: AND
32133: IFFALSE 32156
// begin ComMoveXY ( tmp , _x , _y ) ;
32135: LD_VAR 0 11
32139: PPUSH
32140: LD_VAR 0 9
32144: PPUSH
32145: LD_VAR 0 10
32149: PPUSH
32150: CALL_OW 111
// break ;
32154: GO 32158
// end ; end ;
32156: GO 32043
32158: POP
32159: POP
// end ;
32160: GO 31626
32162: POP
32163: POP
// end ;
32164: LD_VAR 0 6
32168: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
32176: PPUSH
32177: PPUSH
32178: PPUSH
32179: PPUSH
32180: PPUSH
// result := false ;
32181: LD_ADDR_VAR 0 6
32185: PUSH
32186: LD_INT 0
32188: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32189: LD_VAR 0 1
32193: NOT
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 266
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: IN
32215: NOT
32216: OR
32217: PUSH
32218: LD_VAR 0 2
32222: NOT
32223: OR
32224: PUSH
32225: LD_VAR 0 5
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 4
32244: PUSH
32245: LD_INT 5
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: IN
32256: NOT
32257: OR
32258: PUSH
32259: LD_VAR 0 3
32263: PPUSH
32264: LD_VAR 0 4
32268: PPUSH
32269: CALL_OW 488
32273: NOT
32274: OR
32275: IFFALSE 32279
// exit ;
32277: GO 32996
// pom := GetBase ( depot ) ;
32279: LD_ADDR_VAR 0 10
32283: PUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 274
32293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32294: LD_ADDR_VAR 0 11
32298: PUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL_OW 248
32313: PPUSH
32314: CALL_OW 450
32318: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32319: LD_VAR 0 10
32323: PPUSH
32324: LD_INT 1
32326: PPUSH
32327: CALL_OW 275
32331: PUSH
32332: LD_VAR 0 11
32336: PUSH
32337: LD_INT 1
32339: ARRAY
32340: GREATEREQUAL
32341: PUSH
32342: LD_VAR 0 10
32346: PPUSH
32347: LD_INT 2
32349: PPUSH
32350: CALL_OW 275
32354: PUSH
32355: LD_VAR 0 11
32359: PUSH
32360: LD_INT 2
32362: ARRAY
32363: GREATEREQUAL
32364: AND
32365: PUSH
32366: LD_VAR 0 10
32370: PPUSH
32371: LD_INT 3
32373: PPUSH
32374: CALL_OW 275
32378: PUSH
32379: LD_VAR 0 11
32383: PUSH
32384: LD_INT 3
32386: ARRAY
32387: GREATEREQUAL
32388: AND
32389: NOT
32390: IFFALSE 32394
// exit ;
32392: GO 32996
// if GetBType ( depot ) = b_depot then
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL_OW 266
32403: PUSH
32404: LD_INT 0
32406: EQUAL
32407: IFFALSE 32419
// dist := 28 else
32409: LD_ADDR_VAR 0 14
32413: PUSH
32414: LD_INT 28
32416: ST_TO_ADDR
32417: GO 32427
// dist := 36 ;
32419: LD_ADDR_VAR 0 14
32423: PUSH
32424: LD_INT 36
32426: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32427: LD_VAR 0 1
32431: PPUSH
32432: LD_VAR 0 3
32436: PPUSH
32437: LD_VAR 0 4
32441: PPUSH
32442: CALL_OW 297
32446: PUSH
32447: LD_VAR 0 14
32451: GREATER
32452: IFFALSE 32456
// exit ;
32454: GO 32996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32456: LD_ADDR_VAR 0 12
32460: PUSH
32461: LD_VAR 0 2
32465: PPUSH
32466: LD_VAR 0 3
32470: PPUSH
32471: LD_VAR 0 4
32475: PPUSH
32476: LD_VAR 0 5
32480: PPUSH
32481: LD_VAR 0 1
32485: PPUSH
32486: CALL_OW 248
32490: PPUSH
32491: LD_INT 0
32493: PPUSH
32494: CALL 33001 0 6
32498: ST_TO_ADDR
// if not hexes then
32499: LD_VAR 0 12
32503: NOT
32504: IFFALSE 32508
// exit ;
32506: GO 32996
// hex := GetHexInfo ( x , y ) ;
32508: LD_ADDR_VAR 0 15
32512: PUSH
32513: LD_VAR 0 3
32517: PPUSH
32518: LD_VAR 0 4
32522: PPUSH
32523: CALL_OW 546
32527: ST_TO_ADDR
// if hex [ 1 ] then
32528: LD_VAR 0 15
32532: PUSH
32533: LD_INT 1
32535: ARRAY
32536: IFFALSE 32540
// exit ;
32538: GO 32996
// height := hex [ 2 ] ;
32540: LD_ADDR_VAR 0 13
32544: PUSH
32545: LD_VAR 0 15
32549: PUSH
32550: LD_INT 2
32552: ARRAY
32553: ST_TO_ADDR
// for i = 1 to hexes do
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: DOUBLE
32560: LD_INT 1
32562: DEC
32563: ST_TO_ADDR
32564: LD_VAR 0 12
32568: PUSH
32569: FOR_TO
32570: IFFALSE 32900
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32572: LD_VAR 0 12
32576: PUSH
32577: LD_VAR 0 7
32581: ARRAY
32582: PUSH
32583: LD_INT 1
32585: ARRAY
32586: PPUSH
32587: LD_VAR 0 12
32591: PUSH
32592: LD_VAR 0 7
32596: ARRAY
32597: PUSH
32598: LD_INT 2
32600: ARRAY
32601: PPUSH
32602: CALL_OW 488
32606: NOT
32607: PUSH
32608: LD_VAR 0 12
32612: PUSH
32613: LD_VAR 0 7
32617: ARRAY
32618: PUSH
32619: LD_INT 1
32621: ARRAY
32622: PPUSH
32623: LD_VAR 0 12
32627: PUSH
32628: LD_VAR 0 7
32632: ARRAY
32633: PUSH
32634: LD_INT 2
32636: ARRAY
32637: PPUSH
32638: CALL_OW 428
32642: PUSH
32643: LD_INT 0
32645: GREATER
32646: OR
32647: PUSH
32648: LD_VAR 0 12
32652: PUSH
32653: LD_VAR 0 7
32657: ARRAY
32658: PUSH
32659: LD_INT 1
32661: ARRAY
32662: PPUSH
32663: LD_VAR 0 12
32667: PUSH
32668: LD_VAR 0 7
32672: ARRAY
32673: PUSH
32674: LD_INT 2
32676: ARRAY
32677: PPUSH
32678: CALL_OW 351
32682: OR
32683: IFFALSE 32689
// exit ;
32685: POP
32686: POP
32687: GO 32996
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32689: LD_ADDR_VAR 0 8
32693: PUSH
32694: LD_VAR 0 12
32698: PUSH
32699: LD_VAR 0 7
32703: ARRAY
32704: PUSH
32705: LD_INT 1
32707: ARRAY
32708: PPUSH
32709: LD_VAR 0 12
32713: PUSH
32714: LD_VAR 0 7
32718: ARRAY
32719: PUSH
32720: LD_INT 2
32722: ARRAY
32723: PPUSH
32724: CALL_OW 546
32728: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32729: LD_VAR 0 8
32733: PUSH
32734: LD_INT 1
32736: ARRAY
32737: PUSH
32738: LD_VAR 0 8
32742: PUSH
32743: LD_INT 2
32745: ARRAY
32746: PUSH
32747: LD_VAR 0 13
32751: PUSH
32752: LD_INT 2
32754: PLUS
32755: GREATER
32756: OR
32757: PUSH
32758: LD_VAR 0 8
32762: PUSH
32763: LD_INT 2
32765: ARRAY
32766: PUSH
32767: LD_VAR 0 13
32771: PUSH
32772: LD_INT 2
32774: MINUS
32775: LESS
32776: OR
32777: PUSH
32778: LD_VAR 0 8
32782: PUSH
32783: LD_INT 3
32785: ARRAY
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 8
32792: PUSH
32793: LD_INT 9
32795: PUSH
32796: LD_INT 10
32798: PUSH
32799: LD_INT 11
32801: PUSH
32802: LD_INT 12
32804: PUSH
32805: LD_INT 13
32807: PUSH
32808: LD_INT 16
32810: PUSH
32811: LD_INT 17
32813: PUSH
32814: LD_INT 18
32816: PUSH
32817: LD_INT 19
32819: PUSH
32820: LD_INT 20
32822: PUSH
32823: LD_INT 21
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: IN
32841: NOT
32842: OR
32843: PUSH
32844: LD_VAR 0 8
32848: PUSH
32849: LD_INT 5
32851: ARRAY
32852: NOT
32853: OR
32854: PUSH
32855: LD_VAR 0 8
32859: PUSH
32860: LD_INT 6
32862: ARRAY
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 7
32872: PUSH
32873: LD_INT 9
32875: PUSH
32876: LD_INT 10
32878: PUSH
32879: LD_INT 11
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: IN
32890: NOT
32891: OR
32892: IFFALSE 32898
// exit ;
32894: POP
32895: POP
32896: GO 32996
// end ;
32898: GO 32569
32900: POP
32901: POP
// side := GetSide ( depot ) ;
32902: LD_ADDR_VAR 0 9
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 255
32916: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32917: LD_VAR 0 9
32921: PPUSH
32922: LD_VAR 0 3
32926: PPUSH
32927: LD_VAR 0 4
32931: PPUSH
32932: LD_INT 20
32934: PPUSH
32935: CALL 25650 0 4
32939: PUSH
32940: LD_INT 4
32942: ARRAY
32943: IFFALSE 32947
// exit ;
32945: GO 32996
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32947: LD_VAR 0 2
32951: PUSH
32952: LD_INT 29
32954: PUSH
32955: LD_INT 30
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: IN
32962: PUSH
32963: LD_VAR 0 3
32967: PPUSH
32968: LD_VAR 0 4
32972: PPUSH
32973: LD_VAR 0 9
32977: PPUSH
32978: CALL_OW 440
32982: NOT
32983: AND
32984: IFFALSE 32988
// exit ;
32986: GO 32996
// result := true ;
32988: LD_ADDR_VAR 0 6
32992: PUSH
32993: LD_INT 1
32995: ST_TO_ADDR
// end ;
32996: LD_VAR 0 6
33000: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33001: LD_INT 0
33003: PPUSH
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
33027: PPUSH
33028: PPUSH
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
// result = [ ] ;
33061: LD_ADDR_VAR 0 7
33065: PUSH
33066: EMPTY
33067: ST_TO_ADDR
// temp_list = [ ] ;
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: EMPTY
33074: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33075: LD_VAR 0 4
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: LD_INT 4
33094: PUSH
33095: LD_INT 5
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: IN
33106: NOT
33107: PUSH
33108: LD_VAR 0 1
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: IN
33123: PUSH
33124: LD_VAR 0 5
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: IN
33143: NOT
33144: AND
33145: OR
33146: IFFALSE 33150
// exit ;
33148: GO 51541
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33150: LD_VAR 0 1
33154: PUSH
33155: LD_INT 6
33157: PUSH
33158: LD_INT 7
33160: PUSH
33161: LD_INT 8
33163: PUSH
33164: LD_INT 13
33166: PUSH
33167: LD_INT 12
33169: PUSH
33170: LD_INT 15
33172: PUSH
33173: LD_INT 11
33175: PUSH
33176: LD_INT 14
33178: PUSH
33179: LD_INT 10
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: IN
33193: IFFALSE 33203
// btype = b_lab ;
33195: LD_ADDR_VAR 0 1
33199: PUSH
33200: LD_INT 6
33202: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33203: LD_VAR 0 6
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: IN
33222: NOT
33223: PUSH
33224: LD_VAR 0 1
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 6
33243: PUSH
33244: LD_INT 36
33246: PUSH
33247: LD_INT 4
33249: PUSH
33250: LD_INT 5
33252: PUSH
33253: LD_INT 31
33255: PUSH
33256: LD_INT 32
33258: PUSH
33259: LD_INT 33
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: IN
33275: NOT
33276: PUSH
33277: LD_VAR 0 6
33281: PUSH
33282: LD_INT 1
33284: EQUAL
33285: AND
33286: OR
33287: PUSH
33288: LD_VAR 0 1
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: IN
33303: NOT
33304: PUSH
33305: LD_VAR 0 6
33309: PUSH
33310: LD_INT 2
33312: EQUAL
33313: AND
33314: OR
33315: IFFALSE 33325
// mode = 0 ;
33317: LD_ADDR_VAR 0 6
33321: PUSH
33322: LD_INT 0
33324: ST_TO_ADDR
// case mode of 0 :
33325: LD_VAR 0 6
33329: PUSH
33330: LD_INT 0
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 44791
33338: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33339: LD_ADDR_VAR 0 11
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 2
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 2
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33532: LD_ADDR_VAR 0 12
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 3
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33728: LD_ADDR_VAR 0 13
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33927: LD_ADDR_VAR 0 14
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34123: LD_ADDR_VAR 0 15
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 3
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34316: LD_ADDR_VAR 0 16
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 2
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34509: LD_ADDR_VAR 0 17
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 18
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34969: LD_ADDR_VAR 0 19
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 20
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35429: LD_ADDR_VAR 0 21
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35659: LD_ADDR_VAR 0 22
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35889: LD_ADDR_VAR 0 23
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: NEG
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 2
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: LD_INT 3
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 3
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36169: LD_ADDR_VAR 0 24
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36445: LD_ADDR_VAR 0 25
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36719: LD_ADDR_VAR 0 26
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 3
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36995: LD_ADDR_VAR 0 27
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 2
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: NEG
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37275: LD_ADDR_VAR 0 28
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: LD_INT 1
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 2
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: LD_INT 3
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 3
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 3
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37557: LD_ADDR_VAR 0 29
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: LD_INT 3
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 3
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37836: LD_ADDR_VAR 0 30
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38114: LD_ADDR_VAR 0 31
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 2
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: LD_INT 3
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 3
38357: NEG
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38392: LD_ADDR_VAR 0 32
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 3
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38670: LD_ADDR_VAR 0 33
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 3
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38949: LD_ADDR_VAR 0 34
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39229: LD_ADDR_VAR 0 35
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39341: LD_ADDR_VAR 0 36
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39453: LD_ADDR_VAR 0 37
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39565: LD_ADDR_VAR 0 38
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39677: LD_ADDR_VAR 0 39
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39789: LD_ADDR_VAR 0 40
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39901: LD_ADDR_VAR 0 41
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 3
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: NEG
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: NEG
40211: PUSH
40212: LD_INT 3
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40251: LD_ADDR_VAR 0 42
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: LD_INT 3
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: LD_INT 3
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 3
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40601: LD_ADDR_VAR 0 43
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40949: LD_ADDR_VAR 0 44
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 3
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 3
41246: NEG
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: NEG
41259: PUSH
41260: LD_INT 3
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41299: LD_ADDR_VAR 0 45
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 3
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: LD_INT 3
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41649: LD_ADDR_VAR 0 46
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 2
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: NEG
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41997: LD_ADDR_VAR 0 47
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42148: LD_ADDR_VAR 0 48
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42295: LD_ADDR_VAR 0 49
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42439: LD_ADDR_VAR 0 50
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42583: LD_ADDR_VAR 0 51
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42730: LD_ADDR_VAR 0 52
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 53
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43111: LD_ADDR_VAR 0 54
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43341: LD_ADDR_VAR 0 55
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43571: LD_ADDR_VAR 0 56
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43801: LD_ADDR_VAR 0 57
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44031: LD_ADDR_VAR 0 58
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44261: LD_ADDR_VAR 0 59
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44349: LD_ADDR_VAR 0 60
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44437: LD_ADDR_VAR 0 61
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44525: LD_ADDR_VAR 0 62
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44613: LD_ADDR_VAR 0 63
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44701: LD_ADDR_VAR 0 64
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// end ; 1 :
44789: GO 50686
44791: LD_INT 1
44793: DOUBLE
44794: EQUAL
44795: IFTRUE 44799
44797: GO 47422
44799: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44800: LD_ADDR_VAR 0 11
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 3
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44844: LD_ADDR_VAR 0 12
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44885: LD_ADDR_VAR 0 13
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44925: LD_ADDR_VAR 0 14
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44966: LD_ADDR_VAR 0 15
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 3
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45010: LD_ADDR_VAR 0 16
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: NEG
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45056: LD_ADDR_VAR 0 17
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45100: LD_ADDR_VAR 0 18
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45141: LD_ADDR_VAR 0 19
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45181: LD_ADDR_VAR 0 20
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45222: LD_ADDR_VAR 0 21
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45266: LD_ADDR_VAR 0 22
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45312: LD_ADDR_VAR 0 23
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 3
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 4
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 3
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45356: LD_ADDR_VAR 0 24
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 4
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45397: LD_ADDR_VAR 0 25
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 4
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: LD_INT 4
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45437: LD_ADDR_VAR 0 26
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 4
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45478: LD_ADDR_VAR 0 27
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 4
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45522: LD_ADDR_VAR 0 28
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 3
45541: NEG
45542: PUSH
45543: LD_INT 4
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 4
45553: NEG
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45568: LD_ADDR_VAR 0 29
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 4
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 4
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 3
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 5
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 5
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 4
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 6
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 6
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 5
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45723: LD_ADDR_VAR 0 30
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 4
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 4
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 4
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 5
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 5
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 5
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 6
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 6
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45866: LD_ADDR_VAR 0 31
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 4
45913: PUSH
45914: LD_INT 4
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 4
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 5
45933: PUSH
45934: LD_INT 4
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 5
45943: PUSH
45944: LD_INT 5
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 4
45953: PUSH
45954: LD_INT 5
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 6
45963: PUSH
45964: LD_INT 5
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 6
45973: PUSH
45974: LD_INT 6
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 5
45983: PUSH
45984: LD_INT 6
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46005: LD_ADDR_VAR 0 32
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 4
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 4
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 5
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 5
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 4
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 6
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 6
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46148: LD_ADDR_VAR 0 33
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 4
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 4
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 5
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 5
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 5
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 6
46268: NEG
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 6
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46303: LD_ADDR_VAR 0 34
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 3
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: LD_INT 3
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 4
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 4
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 4
46370: NEG
46371: PUSH
46372: LD_INT 4
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 4
46382: NEG
46383: PUSH
46384: LD_INT 5
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 5
46394: NEG
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 5
46406: NEG
46407: PUSH
46408: LD_INT 5
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 5
46418: NEG
46419: PUSH
46420: LD_INT 6
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 6
46430: NEG
46431: PUSH
46432: LD_INT 5
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 6
46442: NEG
46443: PUSH
46444: LD_INT 6
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46466: LD_ADDR_VAR 0 41
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46510: LD_ADDR_VAR 0 42
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46551: LD_ADDR_VAR 0 43
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46591: LD_ADDR_VAR 0 44
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 3
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46632: LD_ADDR_VAR 0 45
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46676: LD_ADDR_VAR 0 46
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46722: LD_ADDR_VAR 0 47
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 3
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46755: LD_ADDR_VAR 0 48
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46786: LD_ADDR_VAR 0 49
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46815: LD_ADDR_VAR 0 50
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46844: LD_ADDR_VAR 0 51
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46875: LD_ADDR_VAR 0 52
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46908: LD_ADDR_VAR 0 53
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 3
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46952: LD_ADDR_VAR 0 54
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46993: LD_ADDR_VAR 0 55
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47033: LD_ADDR_VAR 0 56
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47074: LD_ADDR_VAR 0 57
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47118: LD_ADDR_VAR 0 58
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47164: LD_ADDR_VAR 0 59
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47208: LD_ADDR_VAR 0 60
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47249: LD_ADDR_VAR 0 61
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47289: LD_ADDR_VAR 0 62
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47330: LD_ADDR_VAR 0 63
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47374: LD_ADDR_VAR 0 64
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// end ; 2 :
47420: GO 50686
47422: LD_INT 2
47424: DOUBLE
47425: EQUAL
47426: IFTRUE 47430
47428: GO 50685
47430: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47431: LD_ADDR_VAR 0 29
47435: PUSH
47436: LD_INT 4
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 4
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 5
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 4
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 5
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 4
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 4
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 4
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 4
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 4
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 4
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 5
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 5
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 4
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 4
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 4
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: NEG
47817: PUSH
47818: LD_INT 4
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: NEG
47829: PUSH
47830: LD_INT 5
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: LD_INT 4
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 4
47864: NEG
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 5
47876: NEG
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 5
47888: NEG
47889: PUSH
47890: LD_INT 5
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: NEG
47901: PUSH
47902: LD_INT 5
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 5
47912: NEG
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47969: LD_ADDR_VAR 0 30
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 4
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 5
47996: PUSH
47997: LD_INT 4
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 5
48006: PUSH
48007: LD_INT 5
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: LD_INT 5
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 5
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 5
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 4
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 4
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 4
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 4
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: NEG
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 5
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 5
48238: NEG
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: NEG
48262: PUSH
48263: LD_INT 3
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: LD_INT 4
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 4
48321: NEG
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 4
48333: NEG
48334: PUSH
48335: LD_INT 4
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 4
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 4
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 4
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 5
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 4
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 4
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 5
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 5
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48516: LD_ADDR_VAR 0 31
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 4
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 4
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 5
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 5
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 4
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 5
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 4
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 4
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 4
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 4
48718: NEG
48719: PUSH
48720: LD_INT 4
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 4
48730: NEG
48731: PUSH
48732: LD_INT 5
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 4
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 4
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 5
48790: NEG
48791: PUSH
48792: LD_INT 5
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: LD_INT 5
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 5
48814: NEG
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 4
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 4
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 4
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 5
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 5
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 4
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 5
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49066: LD_ADDR_VAR 0 32
49070: PUSH
49071: LD_INT 4
49073: NEG
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 4
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 4
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 5
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 5
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: LD_INT 3
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: LD_INT 4
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 4
49235: NEG
49236: PUSH
49237: LD_INT 3
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 4
49247: NEG
49248: PUSH
49249: LD_INT 4
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 4
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 4
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 4
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 5
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 4
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 4
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 5
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 3
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 5
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 4
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 4
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 4
49478: PUSH
49479: LD_INT 4
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 4
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 5
49498: PUSH
49499: LD_INT 4
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 5
49508: PUSH
49509: LD_INT 5
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 4
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 4
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 5
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: LD_INT 5
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49613: LD_ADDR_VAR 0 33
49617: PUSH
49618: LD_INT 4
49620: NEG
49621: PUSH
49622: LD_INT 4
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 4
49632: NEG
49633: PUSH
49634: LD_INT 5
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 3
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: LD_INT 4
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 5
49692: NEG
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: LD_INT 5
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 5
49716: NEG
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 4
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 4
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 4
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 5
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 4
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: LD_INT 4
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 4
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 4
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 4
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 4
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 5
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 5
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 5
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50151: LD_ADDR_VAR 0 34
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 4
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 5
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 4
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 5
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: LD_INT 5
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 4
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 4
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 4
50353: PUSH
50354: LD_INT 4
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 5
50383: PUSH
50384: LD_INT 5
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: LD_INT 5
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 5
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: LD_INT 5
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 4
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 4
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 4
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 4
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 4
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 5
50592: NEG
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 5
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 5
50615: NEG
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// end ; end ;
50683: GO 50686
50685: POP
// case btype of b_depot , b_warehouse :
50686: LD_VAR 0 1
50690: PUSH
50691: LD_INT 0
50693: DOUBLE
50694: EQUAL
50695: IFTRUE 50705
50697: LD_INT 1
50699: DOUBLE
50700: EQUAL
50701: IFTRUE 50705
50703: GO 50906
50705: POP
// case nation of nation_american :
50706: LD_VAR 0 5
50710: PUSH
50711: LD_INT 1
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50719
50717: GO 50775
50719: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50720: LD_ADDR_VAR 0 9
50724: PUSH
50725: LD_VAR 0 11
50729: PUSH
50730: LD_VAR 0 12
50734: PUSH
50735: LD_VAR 0 13
50739: PUSH
50740: LD_VAR 0 14
50744: PUSH
50745: LD_VAR 0 15
50749: PUSH
50750: LD_VAR 0 16
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: PUSH
50763: LD_VAR 0 4
50767: PUSH
50768: LD_INT 1
50770: PLUS
50771: ARRAY
50772: ST_TO_ADDR
50773: GO 50904
50775: LD_INT 2
50777: DOUBLE
50778: EQUAL
50779: IFTRUE 50783
50781: GO 50839
50783: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50784: LD_ADDR_VAR 0 9
50788: PUSH
50789: LD_VAR 0 17
50793: PUSH
50794: LD_VAR 0 18
50798: PUSH
50799: LD_VAR 0 19
50803: PUSH
50804: LD_VAR 0 20
50808: PUSH
50809: LD_VAR 0 21
50813: PUSH
50814: LD_VAR 0 22
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: PUSH
50827: LD_VAR 0 4
50831: PUSH
50832: LD_INT 1
50834: PLUS
50835: ARRAY
50836: ST_TO_ADDR
50837: GO 50904
50839: LD_INT 3
50841: DOUBLE
50842: EQUAL
50843: IFTRUE 50847
50845: GO 50903
50847: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50848: LD_ADDR_VAR 0 9
50852: PUSH
50853: LD_VAR 0 23
50857: PUSH
50858: LD_VAR 0 24
50862: PUSH
50863: LD_VAR 0 25
50867: PUSH
50868: LD_VAR 0 26
50872: PUSH
50873: LD_VAR 0 27
50877: PUSH
50878: LD_VAR 0 28
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: PUSH
50891: LD_VAR 0 4
50895: PUSH
50896: LD_INT 1
50898: PLUS
50899: ARRAY
50900: ST_TO_ADDR
50901: GO 50904
50903: POP
50904: GO 51459
50906: LD_INT 2
50908: DOUBLE
50909: EQUAL
50910: IFTRUE 50920
50912: LD_INT 3
50914: DOUBLE
50915: EQUAL
50916: IFTRUE 50920
50918: GO 50976
50920: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50921: LD_ADDR_VAR 0 9
50925: PUSH
50926: LD_VAR 0 29
50930: PUSH
50931: LD_VAR 0 30
50935: PUSH
50936: LD_VAR 0 31
50940: PUSH
50941: LD_VAR 0 32
50945: PUSH
50946: LD_VAR 0 33
50950: PUSH
50951: LD_VAR 0 34
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: LD_VAR 0 4
50968: PUSH
50969: LD_INT 1
50971: PLUS
50972: ARRAY
50973: ST_TO_ADDR
50974: GO 51459
50976: LD_INT 16
50978: DOUBLE
50979: EQUAL
50980: IFTRUE 51038
50982: LD_INT 17
50984: DOUBLE
50985: EQUAL
50986: IFTRUE 51038
50988: LD_INT 18
50990: DOUBLE
50991: EQUAL
50992: IFTRUE 51038
50994: LD_INT 19
50996: DOUBLE
50997: EQUAL
50998: IFTRUE 51038
51000: LD_INT 22
51002: DOUBLE
51003: EQUAL
51004: IFTRUE 51038
51006: LD_INT 20
51008: DOUBLE
51009: EQUAL
51010: IFTRUE 51038
51012: LD_INT 21
51014: DOUBLE
51015: EQUAL
51016: IFTRUE 51038
51018: LD_INT 23
51020: DOUBLE
51021: EQUAL
51022: IFTRUE 51038
51024: LD_INT 24
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51038
51030: LD_INT 25
51032: DOUBLE
51033: EQUAL
51034: IFTRUE 51038
51036: GO 51094
51038: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51039: LD_ADDR_VAR 0 9
51043: PUSH
51044: LD_VAR 0 35
51048: PUSH
51049: LD_VAR 0 36
51053: PUSH
51054: LD_VAR 0 37
51058: PUSH
51059: LD_VAR 0 38
51063: PUSH
51064: LD_VAR 0 39
51068: PUSH
51069: LD_VAR 0 40
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: PUSH
51082: LD_VAR 0 4
51086: PUSH
51087: LD_INT 1
51089: PLUS
51090: ARRAY
51091: ST_TO_ADDR
51092: GO 51459
51094: LD_INT 6
51096: DOUBLE
51097: EQUAL
51098: IFTRUE 51150
51100: LD_INT 7
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51150
51106: LD_INT 8
51108: DOUBLE
51109: EQUAL
51110: IFTRUE 51150
51112: LD_INT 13
51114: DOUBLE
51115: EQUAL
51116: IFTRUE 51150
51118: LD_INT 12
51120: DOUBLE
51121: EQUAL
51122: IFTRUE 51150
51124: LD_INT 15
51126: DOUBLE
51127: EQUAL
51128: IFTRUE 51150
51130: LD_INT 11
51132: DOUBLE
51133: EQUAL
51134: IFTRUE 51150
51136: LD_INT 14
51138: DOUBLE
51139: EQUAL
51140: IFTRUE 51150
51142: LD_INT 10
51144: DOUBLE
51145: EQUAL
51146: IFTRUE 51150
51148: GO 51206
51150: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51151: LD_ADDR_VAR 0 9
51155: PUSH
51156: LD_VAR 0 41
51160: PUSH
51161: LD_VAR 0 42
51165: PUSH
51166: LD_VAR 0 43
51170: PUSH
51171: LD_VAR 0 44
51175: PUSH
51176: LD_VAR 0 45
51180: PUSH
51181: LD_VAR 0 46
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: PUSH
51194: LD_VAR 0 4
51198: PUSH
51199: LD_INT 1
51201: PLUS
51202: ARRAY
51203: ST_TO_ADDR
51204: GO 51459
51206: LD_INT 36
51208: DOUBLE
51209: EQUAL
51210: IFTRUE 51214
51212: GO 51270
51214: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51215: LD_ADDR_VAR 0 9
51219: PUSH
51220: LD_VAR 0 47
51224: PUSH
51225: LD_VAR 0 48
51229: PUSH
51230: LD_VAR 0 49
51234: PUSH
51235: LD_VAR 0 50
51239: PUSH
51240: LD_VAR 0 51
51244: PUSH
51245: LD_VAR 0 52
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: PUSH
51258: LD_VAR 0 4
51262: PUSH
51263: LD_INT 1
51265: PLUS
51266: ARRAY
51267: ST_TO_ADDR
51268: GO 51459
51270: LD_INT 4
51272: DOUBLE
51273: EQUAL
51274: IFTRUE 51296
51276: LD_INT 5
51278: DOUBLE
51279: EQUAL
51280: IFTRUE 51296
51282: LD_INT 34
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51296
51288: LD_INT 37
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51352
51296: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51297: LD_ADDR_VAR 0 9
51301: PUSH
51302: LD_VAR 0 53
51306: PUSH
51307: LD_VAR 0 54
51311: PUSH
51312: LD_VAR 0 55
51316: PUSH
51317: LD_VAR 0 56
51321: PUSH
51322: LD_VAR 0 57
51326: PUSH
51327: LD_VAR 0 58
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_VAR 0 4
51344: PUSH
51345: LD_INT 1
51347: PLUS
51348: ARRAY
51349: ST_TO_ADDR
51350: GO 51459
51352: LD_INT 31
51354: DOUBLE
51355: EQUAL
51356: IFTRUE 51402
51358: LD_INT 32
51360: DOUBLE
51361: EQUAL
51362: IFTRUE 51402
51364: LD_INT 33
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51402
51370: LD_INT 27
51372: DOUBLE
51373: EQUAL
51374: IFTRUE 51402
51376: LD_INT 26
51378: DOUBLE
51379: EQUAL
51380: IFTRUE 51402
51382: LD_INT 28
51384: DOUBLE
51385: EQUAL
51386: IFTRUE 51402
51388: LD_INT 29
51390: DOUBLE
51391: EQUAL
51392: IFTRUE 51402
51394: LD_INT 30
51396: DOUBLE
51397: EQUAL
51398: IFTRUE 51402
51400: GO 51458
51402: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51403: LD_ADDR_VAR 0 9
51407: PUSH
51408: LD_VAR 0 59
51412: PUSH
51413: LD_VAR 0 60
51417: PUSH
51418: LD_VAR 0 61
51422: PUSH
51423: LD_VAR 0 62
51427: PUSH
51428: LD_VAR 0 63
51432: PUSH
51433: LD_VAR 0 64
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: PUSH
51446: LD_VAR 0 4
51450: PUSH
51451: LD_INT 1
51453: PLUS
51454: ARRAY
51455: ST_TO_ADDR
51456: GO 51459
51458: POP
// temp_list2 = [ ] ;
51459: LD_ADDR_VAR 0 10
51463: PUSH
51464: EMPTY
51465: ST_TO_ADDR
// for i in temp_list do
51466: LD_ADDR_VAR 0 8
51470: PUSH
51471: LD_VAR 0 9
51475: PUSH
51476: FOR_IN
51477: IFFALSE 51529
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51479: LD_ADDR_VAR 0 10
51483: PUSH
51484: LD_VAR 0 10
51488: PUSH
51489: LD_VAR 0 8
51493: PUSH
51494: LD_INT 1
51496: ARRAY
51497: PUSH
51498: LD_VAR 0 2
51502: PLUS
51503: PUSH
51504: LD_VAR 0 8
51508: PUSH
51509: LD_INT 2
51511: ARRAY
51512: PUSH
51513: LD_VAR 0 3
51517: PLUS
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: ADD
51526: ST_TO_ADDR
51527: GO 51476
51529: POP
51530: POP
// result = temp_list2 ;
51531: LD_ADDR_VAR 0 7
51535: PUSH
51536: LD_VAR 0 10
51540: ST_TO_ADDR
// end ;
51541: LD_VAR 0 7
51545: RET
// export function EnemyInRange ( unit , dist ) ; begin
51546: LD_INT 0
51548: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51549: LD_ADDR_VAR 0 3
51553: PUSH
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 255
51563: PPUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 250
51573: PPUSH
51574: LD_VAR 0 1
51578: PPUSH
51579: CALL_OW 251
51583: PPUSH
51584: LD_VAR 0 2
51588: PPUSH
51589: CALL 25650 0 4
51593: PUSH
51594: LD_INT 4
51596: ARRAY
51597: ST_TO_ADDR
// end ;
51598: LD_VAR 0 3
51602: RET
// export function PlayerSeeMe ( unit ) ; begin
51603: LD_INT 0
51605: PPUSH
// result := See ( your_side , unit ) ;
51606: LD_ADDR_VAR 0 2
51610: PUSH
51611: LD_OWVAR 2
51615: PPUSH
51616: LD_VAR 0 1
51620: PPUSH
51621: CALL_OW 292
51625: ST_TO_ADDR
// end ;
51626: LD_VAR 0 2
51630: RET
// export function ReverseDir ( unit ) ; begin
51631: LD_INT 0
51633: PPUSH
// if not unit then
51634: LD_VAR 0 1
51638: NOT
51639: IFFALSE 51643
// exit ;
51641: GO 51666
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51643: LD_ADDR_VAR 0 2
51647: PUSH
51648: LD_VAR 0 1
51652: PPUSH
51653: CALL_OW 254
51657: PUSH
51658: LD_INT 3
51660: PLUS
51661: PUSH
51662: LD_INT 6
51664: MOD
51665: ST_TO_ADDR
// end ;
51666: LD_VAR 0 2
51670: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51671: LD_INT 0
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
// if not hexes then
51678: LD_VAR 0 2
51682: NOT
51683: IFFALSE 51687
// exit ;
51685: GO 51835
// dist := 9999 ;
51687: LD_ADDR_VAR 0 5
51691: PUSH
51692: LD_INT 9999
51694: ST_TO_ADDR
// for i = 1 to hexes do
51695: LD_ADDR_VAR 0 4
51699: PUSH
51700: DOUBLE
51701: LD_INT 1
51703: DEC
51704: ST_TO_ADDR
51705: LD_VAR 0 2
51709: PUSH
51710: FOR_TO
51711: IFFALSE 51823
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51713: LD_VAR 0 1
51717: PPUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_VAR 0 4
51727: ARRAY
51728: PUSH
51729: LD_INT 1
51731: ARRAY
51732: PPUSH
51733: LD_VAR 0 2
51737: PUSH
51738: LD_VAR 0 4
51742: ARRAY
51743: PUSH
51744: LD_INT 2
51746: ARRAY
51747: PPUSH
51748: CALL_OW 297
51752: PUSH
51753: LD_VAR 0 5
51757: LESS
51758: IFFALSE 51821
// begin hex := hexes [ i ] ;
51760: LD_ADDR_VAR 0 7
51764: PUSH
51765: LD_VAR 0 2
51769: PUSH
51770: LD_VAR 0 4
51774: ARRAY
51775: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51776: LD_ADDR_VAR 0 5
51780: PUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: LD_VAR 0 2
51790: PUSH
51791: LD_VAR 0 4
51795: ARRAY
51796: PUSH
51797: LD_INT 1
51799: ARRAY
51800: PPUSH
51801: LD_VAR 0 2
51805: PUSH
51806: LD_VAR 0 4
51810: ARRAY
51811: PUSH
51812: LD_INT 2
51814: ARRAY
51815: PPUSH
51816: CALL_OW 297
51820: ST_TO_ADDR
// end ; end ;
51821: GO 51710
51823: POP
51824: POP
// result := hex ;
51825: LD_ADDR_VAR 0 3
51829: PUSH
51830: LD_VAR 0 7
51834: ST_TO_ADDR
// end ;
51835: LD_VAR 0 3
51839: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51840: LD_INT 0
51842: PPUSH
51843: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51844: LD_VAR 0 1
51848: NOT
51849: PUSH
51850: LD_VAR 0 1
51854: PUSH
51855: LD_INT 21
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 23
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PPUSH
51879: CALL_OW 69
51883: IN
51884: NOT
51885: OR
51886: IFFALSE 51890
// exit ;
51888: GO 51937
// for i = 1 to 3 do
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: DOUBLE
51896: LD_INT 1
51898: DEC
51899: ST_TO_ADDR
51900: LD_INT 3
51902: PUSH
51903: FOR_TO
51904: IFFALSE 51935
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51906: LD_VAR 0 1
51910: PPUSH
51911: CALL_OW 250
51915: PPUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: CALL_OW 251
51925: PPUSH
51926: LD_INT 1
51928: PPUSH
51929: CALL_OW 453
51933: GO 51903
51935: POP
51936: POP
// end ;
51937: LD_VAR 0 2
51941: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51942: LD_INT 0
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51950: LD_VAR 0 1
51954: NOT
51955: PUSH
51956: LD_VAR 0 2
51960: NOT
51961: OR
51962: PUSH
51963: LD_VAR 0 1
51967: PPUSH
51968: CALL_OW 314
51972: OR
51973: IFFALSE 51977
// exit ;
51975: GO 52418
// x := GetX ( enemy_unit ) ;
51977: LD_ADDR_VAR 0 7
51981: PUSH
51982: LD_VAR 0 2
51986: PPUSH
51987: CALL_OW 250
51991: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51992: LD_ADDR_VAR 0 8
51996: PUSH
51997: LD_VAR 0 2
52001: PPUSH
52002: CALL_OW 251
52006: ST_TO_ADDR
// if not x or not y then
52007: LD_VAR 0 7
52011: NOT
52012: PUSH
52013: LD_VAR 0 8
52017: NOT
52018: OR
52019: IFFALSE 52023
// exit ;
52021: GO 52418
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52023: LD_ADDR_VAR 0 6
52027: PUSH
52028: LD_VAR 0 7
52032: PPUSH
52033: LD_INT 0
52035: PPUSH
52036: LD_INT 4
52038: PPUSH
52039: CALL_OW 272
52043: PUSH
52044: LD_VAR 0 8
52048: PPUSH
52049: LD_INT 0
52051: PPUSH
52052: LD_INT 4
52054: PPUSH
52055: CALL_OW 273
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_VAR 0 7
52068: PPUSH
52069: LD_INT 1
52071: PPUSH
52072: LD_INT 4
52074: PPUSH
52075: CALL_OW 272
52079: PUSH
52080: LD_VAR 0 8
52084: PPUSH
52085: LD_INT 1
52087: PPUSH
52088: LD_INT 4
52090: PPUSH
52091: CALL_OW 273
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_VAR 0 7
52104: PPUSH
52105: LD_INT 2
52107: PPUSH
52108: LD_INT 4
52110: PPUSH
52111: CALL_OW 272
52115: PUSH
52116: LD_VAR 0 8
52120: PPUSH
52121: LD_INT 2
52123: PPUSH
52124: LD_INT 4
52126: PPUSH
52127: CALL_OW 273
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_VAR 0 7
52140: PPUSH
52141: LD_INT 3
52143: PPUSH
52144: LD_INT 4
52146: PPUSH
52147: CALL_OW 272
52151: PUSH
52152: LD_VAR 0 8
52156: PPUSH
52157: LD_INT 3
52159: PPUSH
52160: LD_INT 4
52162: PPUSH
52163: CALL_OW 273
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_VAR 0 7
52176: PPUSH
52177: LD_INT 4
52179: PPUSH
52180: LD_INT 4
52182: PPUSH
52183: CALL_OW 272
52187: PUSH
52188: LD_VAR 0 8
52192: PPUSH
52193: LD_INT 4
52195: PPUSH
52196: LD_INT 4
52198: PPUSH
52199: CALL_OW 273
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_VAR 0 7
52212: PPUSH
52213: LD_INT 5
52215: PPUSH
52216: LD_INT 4
52218: PPUSH
52219: CALL_OW 272
52223: PUSH
52224: LD_VAR 0 8
52228: PPUSH
52229: LD_INT 5
52231: PPUSH
52232: LD_INT 4
52234: PPUSH
52235: CALL_OW 273
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// for i = tmp downto 1 do
52252: LD_ADDR_VAR 0 4
52256: PUSH
52257: DOUBLE
52258: LD_VAR 0 6
52262: INC
52263: ST_TO_ADDR
52264: LD_INT 1
52266: PUSH
52267: FOR_DOWNTO
52268: IFFALSE 52369
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52270: LD_VAR 0 6
52274: PUSH
52275: LD_VAR 0 4
52279: ARRAY
52280: PUSH
52281: LD_INT 1
52283: ARRAY
52284: PPUSH
52285: LD_VAR 0 6
52289: PUSH
52290: LD_VAR 0 4
52294: ARRAY
52295: PUSH
52296: LD_INT 2
52298: ARRAY
52299: PPUSH
52300: CALL_OW 488
52304: NOT
52305: PUSH
52306: LD_VAR 0 6
52310: PUSH
52311: LD_VAR 0 4
52315: ARRAY
52316: PUSH
52317: LD_INT 1
52319: ARRAY
52320: PPUSH
52321: LD_VAR 0 6
52325: PUSH
52326: LD_VAR 0 4
52330: ARRAY
52331: PUSH
52332: LD_INT 2
52334: ARRAY
52335: PPUSH
52336: CALL_OW 428
52340: PUSH
52341: LD_INT 0
52343: NONEQUAL
52344: OR
52345: IFFALSE 52367
// tmp := Delete ( tmp , i ) ;
52347: LD_ADDR_VAR 0 6
52351: PUSH
52352: LD_VAR 0 6
52356: PPUSH
52357: LD_VAR 0 4
52361: PPUSH
52362: CALL_OW 3
52366: ST_TO_ADDR
52367: GO 52267
52369: POP
52370: POP
// j := GetClosestHex ( unit , tmp ) ;
52371: LD_ADDR_VAR 0 5
52375: PUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: LD_VAR 0 6
52385: PPUSH
52386: CALL 51671 0 2
52390: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52391: LD_VAR 0 1
52395: PPUSH
52396: LD_VAR 0 5
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PPUSH
52405: LD_VAR 0 5
52409: PUSH
52410: LD_INT 2
52412: ARRAY
52413: PPUSH
52414: CALL_OW 111
// end ;
52418: LD_VAR 0 3
52422: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52423: LD_INT 0
52425: PPUSH
52426: PPUSH
52427: PPUSH
// uc_side = 0 ;
52428: LD_ADDR_OWVAR 20
52432: PUSH
52433: LD_INT 0
52435: ST_TO_ADDR
// uc_nation = 0 ;
52436: LD_ADDR_OWVAR 21
52440: PUSH
52441: LD_INT 0
52443: ST_TO_ADDR
// InitHc ;
52444: CALL_OW 19
// InitVc ;
52448: CALL_OW 20
// if mastodonts then
52452: LD_VAR 0 6
52456: IFFALSE 52523
// for i = 1 to mastodonts do
52458: LD_ADDR_VAR 0 11
52462: PUSH
52463: DOUBLE
52464: LD_INT 1
52466: DEC
52467: ST_TO_ADDR
52468: LD_VAR 0 6
52472: PUSH
52473: FOR_TO
52474: IFFALSE 52521
// begin vc_chassis := 31 ;
52476: LD_ADDR_OWVAR 37
52480: PUSH
52481: LD_INT 31
52483: ST_TO_ADDR
// vc_control := control_rider ;
52484: LD_ADDR_OWVAR 38
52488: PUSH
52489: LD_INT 4
52491: ST_TO_ADDR
// animal := CreateVehicle ;
52492: LD_ADDR_VAR 0 12
52496: PUSH
52497: CALL_OW 45
52501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52502: LD_VAR 0 12
52506: PPUSH
52507: LD_VAR 0 8
52511: PPUSH
52512: LD_INT 0
52514: PPUSH
52515: CALL 54592 0 3
// end ;
52519: GO 52473
52521: POP
52522: POP
// if horses then
52523: LD_VAR 0 5
52527: IFFALSE 52594
// for i = 1 to horses do
52529: LD_ADDR_VAR 0 11
52533: PUSH
52534: DOUBLE
52535: LD_INT 1
52537: DEC
52538: ST_TO_ADDR
52539: LD_VAR 0 5
52543: PUSH
52544: FOR_TO
52545: IFFALSE 52592
// begin hc_class := 21 ;
52547: LD_ADDR_OWVAR 28
52551: PUSH
52552: LD_INT 21
52554: ST_TO_ADDR
// hc_gallery :=  ;
52555: LD_ADDR_OWVAR 33
52559: PUSH
52560: LD_STRING 
52562: ST_TO_ADDR
// animal := CreateHuman ;
52563: LD_ADDR_VAR 0 12
52567: PUSH
52568: CALL_OW 44
52572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52573: LD_VAR 0 12
52577: PPUSH
52578: LD_VAR 0 8
52582: PPUSH
52583: LD_INT 0
52585: PPUSH
52586: CALL 54592 0 3
// end ;
52590: GO 52544
52592: POP
52593: POP
// if birds then
52594: LD_VAR 0 1
52598: IFFALSE 52665
// for i = 1 to birds do
52600: LD_ADDR_VAR 0 11
52604: PUSH
52605: DOUBLE
52606: LD_INT 1
52608: DEC
52609: ST_TO_ADDR
52610: LD_VAR 0 1
52614: PUSH
52615: FOR_TO
52616: IFFALSE 52663
// begin hc_class = 18 ;
52618: LD_ADDR_OWVAR 28
52622: PUSH
52623: LD_INT 18
52625: ST_TO_ADDR
// hc_gallery =  ;
52626: LD_ADDR_OWVAR 33
52630: PUSH
52631: LD_STRING 
52633: ST_TO_ADDR
// animal := CreateHuman ;
52634: LD_ADDR_VAR 0 12
52638: PUSH
52639: CALL_OW 44
52643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52644: LD_VAR 0 12
52648: PPUSH
52649: LD_VAR 0 8
52653: PPUSH
52654: LD_INT 0
52656: PPUSH
52657: CALL 54592 0 3
// end ;
52661: GO 52615
52663: POP
52664: POP
// if tigers then
52665: LD_VAR 0 2
52669: IFFALSE 52753
// for i = 1 to tigers do
52671: LD_ADDR_VAR 0 11
52675: PUSH
52676: DOUBLE
52677: LD_INT 1
52679: DEC
52680: ST_TO_ADDR
52681: LD_VAR 0 2
52685: PUSH
52686: FOR_TO
52687: IFFALSE 52751
// begin hc_class = class_tiger ;
52689: LD_ADDR_OWVAR 28
52693: PUSH
52694: LD_INT 14
52696: ST_TO_ADDR
// hc_gallery =  ;
52697: LD_ADDR_OWVAR 33
52701: PUSH
52702: LD_STRING 
52704: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52705: LD_ADDR_OWVAR 35
52709: PUSH
52710: LD_INT 7
52712: NEG
52713: PPUSH
52714: LD_INT 7
52716: PPUSH
52717: CALL_OW 12
52721: ST_TO_ADDR
// animal := CreateHuman ;
52722: LD_ADDR_VAR 0 12
52726: PUSH
52727: CALL_OW 44
52731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52732: LD_VAR 0 12
52736: PPUSH
52737: LD_VAR 0 8
52741: PPUSH
52742: LD_INT 0
52744: PPUSH
52745: CALL 54592 0 3
// end ;
52749: GO 52686
52751: POP
52752: POP
// if apemans then
52753: LD_VAR 0 3
52757: IFFALSE 52880
// for i = 1 to apemans do
52759: LD_ADDR_VAR 0 11
52763: PUSH
52764: DOUBLE
52765: LD_INT 1
52767: DEC
52768: ST_TO_ADDR
52769: LD_VAR 0 3
52773: PUSH
52774: FOR_TO
52775: IFFALSE 52878
// begin hc_class = class_apeman ;
52777: LD_ADDR_OWVAR 28
52781: PUSH
52782: LD_INT 12
52784: ST_TO_ADDR
// hc_gallery =  ;
52785: LD_ADDR_OWVAR 33
52789: PUSH
52790: LD_STRING 
52792: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52793: LD_ADDR_OWVAR 35
52797: PUSH
52798: LD_INT 5
52800: NEG
52801: PPUSH
52802: LD_INT 5
52804: PPUSH
52805: CALL_OW 12
52809: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52810: LD_ADDR_OWVAR 31
52814: PUSH
52815: LD_INT 1
52817: PPUSH
52818: LD_INT 3
52820: PPUSH
52821: CALL_OW 12
52825: PUSH
52826: LD_INT 1
52828: PPUSH
52829: LD_INT 3
52831: PPUSH
52832: CALL_OW 12
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// animal := CreateHuman ;
52849: LD_ADDR_VAR 0 12
52853: PUSH
52854: CALL_OW 44
52858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52859: LD_VAR 0 12
52863: PPUSH
52864: LD_VAR 0 8
52868: PPUSH
52869: LD_INT 0
52871: PPUSH
52872: CALL 54592 0 3
// end ;
52876: GO 52774
52878: POP
52879: POP
// if enchidnas then
52880: LD_VAR 0 4
52884: IFFALSE 52951
// for i = 1 to enchidnas do
52886: LD_ADDR_VAR 0 11
52890: PUSH
52891: DOUBLE
52892: LD_INT 1
52894: DEC
52895: ST_TO_ADDR
52896: LD_VAR 0 4
52900: PUSH
52901: FOR_TO
52902: IFFALSE 52949
// begin hc_class = 13 ;
52904: LD_ADDR_OWVAR 28
52908: PUSH
52909: LD_INT 13
52911: ST_TO_ADDR
// hc_gallery =  ;
52912: LD_ADDR_OWVAR 33
52916: PUSH
52917: LD_STRING 
52919: ST_TO_ADDR
// animal := CreateHuman ;
52920: LD_ADDR_VAR 0 12
52924: PUSH
52925: CALL_OW 44
52929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52930: LD_VAR 0 12
52934: PPUSH
52935: LD_VAR 0 8
52939: PPUSH
52940: LD_INT 0
52942: PPUSH
52943: CALL 54592 0 3
// end ;
52947: GO 52901
52949: POP
52950: POP
// if fishes then
52951: LD_VAR 0 7
52955: IFFALSE 53022
// for i = 1 to fishes do
52957: LD_ADDR_VAR 0 11
52961: PUSH
52962: DOUBLE
52963: LD_INT 1
52965: DEC
52966: ST_TO_ADDR
52967: LD_VAR 0 7
52971: PUSH
52972: FOR_TO
52973: IFFALSE 53020
// begin hc_class = 20 ;
52975: LD_ADDR_OWVAR 28
52979: PUSH
52980: LD_INT 20
52982: ST_TO_ADDR
// hc_gallery =  ;
52983: LD_ADDR_OWVAR 33
52987: PUSH
52988: LD_STRING 
52990: ST_TO_ADDR
// animal := CreateHuman ;
52991: LD_ADDR_VAR 0 12
52995: PUSH
52996: CALL_OW 44
53000: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53001: LD_VAR 0 12
53005: PPUSH
53006: LD_VAR 0 9
53010: PPUSH
53011: LD_INT 0
53013: PPUSH
53014: CALL 54592 0 3
// end ;
53018: GO 52972
53020: POP
53021: POP
// end ;
53022: LD_VAR 0 10
53026: RET
// export function WantHeal ( sci , unit ) ; begin
53027: LD_INT 0
53029: PPUSH
// if GetTaskList ( sci ) > 0 then
53030: LD_VAR 0 1
53034: PPUSH
53035: CALL_OW 437
53039: PUSH
53040: LD_INT 0
53042: GREATER
53043: IFFALSE 53113
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53045: LD_VAR 0 1
53049: PPUSH
53050: CALL_OW 437
53054: PUSH
53055: LD_INT 1
53057: ARRAY
53058: PUSH
53059: LD_INT 1
53061: ARRAY
53062: PUSH
53063: LD_STRING l
53065: EQUAL
53066: PUSH
53067: LD_VAR 0 1
53071: PPUSH
53072: CALL_OW 437
53076: PUSH
53077: LD_INT 1
53079: ARRAY
53080: PUSH
53081: LD_INT 4
53083: ARRAY
53084: PUSH
53085: LD_VAR 0 2
53089: EQUAL
53090: AND
53091: IFFALSE 53103
// result := true else
53093: LD_ADDR_VAR 0 3
53097: PUSH
53098: LD_INT 1
53100: ST_TO_ADDR
53101: GO 53111
// result := false ;
53103: LD_ADDR_VAR 0 3
53107: PUSH
53108: LD_INT 0
53110: ST_TO_ADDR
// end else
53111: GO 53121
// result := false ;
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_INT 0
53120: ST_TO_ADDR
// end ;
53121: LD_VAR 0 3
53125: RET
// export function HealTarget ( sci ) ; begin
53126: LD_INT 0
53128: PPUSH
// if not sci then
53129: LD_VAR 0 1
53133: NOT
53134: IFFALSE 53138
// exit ;
53136: GO 53203
// result := 0 ;
53138: LD_ADDR_VAR 0 2
53142: PUSH
53143: LD_INT 0
53145: ST_TO_ADDR
// if GetTaskList ( sci ) then
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 437
53155: IFFALSE 53203
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 437
53166: PUSH
53167: LD_INT 1
53169: ARRAY
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PUSH
53175: LD_STRING l
53177: EQUAL
53178: IFFALSE 53203
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_VAR 0 1
53189: PPUSH
53190: CALL_OW 437
53194: PUSH
53195: LD_INT 1
53197: ARRAY
53198: PUSH
53199: LD_INT 4
53201: ARRAY
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 2
53207: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53208: LD_INT 0
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
// if not base_units then
53214: LD_VAR 0 1
53218: NOT
53219: IFFALSE 53223
// exit ;
53221: GO 53310
// result := false ;
53223: LD_ADDR_VAR 0 2
53227: PUSH
53228: LD_INT 0
53230: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53231: LD_ADDR_VAR 0 5
53235: PUSH
53236: LD_VAR 0 1
53240: PPUSH
53241: LD_INT 21
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PPUSH
53251: CALL_OW 72
53255: ST_TO_ADDR
// if not tmp then
53256: LD_VAR 0 5
53260: NOT
53261: IFFALSE 53265
// exit ;
53263: GO 53310
// for i in tmp do
53265: LD_ADDR_VAR 0 3
53269: PUSH
53270: LD_VAR 0 5
53274: PUSH
53275: FOR_IN
53276: IFFALSE 53308
// begin result := EnemyInRange ( i , 22 ) ;
53278: LD_ADDR_VAR 0 2
53282: PUSH
53283: LD_VAR 0 3
53287: PPUSH
53288: LD_INT 22
53290: PPUSH
53291: CALL 51546 0 2
53295: ST_TO_ADDR
// if result then
53296: LD_VAR 0 2
53300: IFFALSE 53306
// exit ;
53302: POP
53303: POP
53304: GO 53310
// end ;
53306: GO 53275
53308: POP
53309: POP
// end ;
53310: LD_VAR 0 2
53314: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53315: LD_INT 0
53317: PPUSH
53318: PPUSH
// if not units then
53319: LD_VAR 0 1
53323: NOT
53324: IFFALSE 53328
// exit ;
53326: GO 53398
// result := [ ] ;
53328: LD_ADDR_VAR 0 3
53332: PUSH
53333: EMPTY
53334: ST_TO_ADDR
// for i in units do
53335: LD_ADDR_VAR 0 4
53339: PUSH
53340: LD_VAR 0 1
53344: PUSH
53345: FOR_IN
53346: IFFALSE 53396
// if GetTag ( i ) = tag then
53348: LD_VAR 0 4
53352: PPUSH
53353: CALL_OW 110
53357: PUSH
53358: LD_VAR 0 2
53362: EQUAL
53363: IFFALSE 53394
// result := Insert ( result , result + 1 , i ) ;
53365: LD_ADDR_VAR 0 3
53369: PUSH
53370: LD_VAR 0 3
53374: PPUSH
53375: LD_VAR 0 3
53379: PUSH
53380: LD_INT 1
53382: PLUS
53383: PPUSH
53384: LD_VAR 0 4
53388: PPUSH
53389: CALL_OW 2
53393: ST_TO_ADDR
53394: GO 53345
53396: POP
53397: POP
// end ;
53398: LD_VAR 0 3
53402: RET
// export function IsDriver ( un ) ; begin
53403: LD_INT 0
53405: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53406: LD_ADDR_VAR 0 2
53410: PUSH
53411: LD_VAR 0 1
53415: PUSH
53416: LD_INT 55
53418: PUSH
53419: EMPTY
53420: LIST
53421: PPUSH
53422: CALL_OW 69
53426: IN
53427: ST_TO_ADDR
// end ;
53428: LD_VAR 0 2
53432: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53433: LD_INT 0
53435: PPUSH
53436: PPUSH
// list := [ ] ;
53437: LD_ADDR_VAR 0 5
53441: PUSH
53442: EMPTY
53443: ST_TO_ADDR
// case d of 0 :
53444: LD_VAR 0 3
53448: PUSH
53449: LD_INT 0
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53457
53455: GO 53590
53457: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53458: LD_ADDR_VAR 0 5
53462: PUSH
53463: LD_VAR 0 1
53467: PUSH
53468: LD_INT 4
53470: MINUS
53471: PUSH
53472: LD_VAR 0 2
53476: PUSH
53477: LD_INT 4
53479: MINUS
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: PUSH
53489: LD_VAR 0 1
53493: PUSH
53494: LD_INT 3
53496: MINUS
53497: PUSH
53498: LD_VAR 0 2
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: PUSH
53511: LD_VAR 0 1
53515: PUSH
53516: LD_INT 4
53518: PLUS
53519: PUSH
53520: LD_VAR 0 2
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: PUSH
53533: LD_VAR 0 1
53537: PUSH
53538: LD_INT 3
53540: PLUS
53541: PUSH
53542: LD_VAR 0 2
53546: PUSH
53547: LD_INT 3
53549: PLUS
53550: PUSH
53551: LD_INT 5
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: PUSH
53559: LD_VAR 0 1
53563: PUSH
53564: LD_VAR 0 2
53568: PUSH
53569: LD_INT 4
53571: PLUS
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// end ; 1 :
53588: GO 54288
53590: LD_INT 1
53592: DOUBLE
53593: EQUAL
53594: IFTRUE 53598
53596: GO 53731
53598: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53599: LD_ADDR_VAR 0 5
53603: PUSH
53604: LD_VAR 0 1
53608: PUSH
53609: LD_VAR 0 2
53613: PUSH
53614: LD_INT 4
53616: MINUS
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: PUSH
53626: LD_VAR 0 1
53630: PUSH
53631: LD_INT 3
53633: MINUS
53634: PUSH
53635: LD_VAR 0 2
53639: PUSH
53640: LD_INT 3
53642: MINUS
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: PUSH
53652: LD_VAR 0 1
53656: PUSH
53657: LD_INT 4
53659: MINUS
53660: PUSH
53661: LD_VAR 0 2
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: LD_VAR 0 1
53678: PUSH
53679: LD_VAR 0 2
53683: PUSH
53684: LD_INT 3
53686: PLUS
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: PUSH
53696: LD_VAR 0 1
53700: PUSH
53701: LD_INT 4
53703: PLUS
53704: PUSH
53705: LD_VAR 0 2
53709: PUSH
53710: LD_INT 4
53712: PLUS
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// end ; 2 :
53729: GO 54288
53731: LD_INT 2
53733: DOUBLE
53734: EQUAL
53735: IFTRUE 53739
53737: GO 53868
53739: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53740: LD_ADDR_VAR 0 5
53744: PUSH
53745: LD_VAR 0 1
53749: PUSH
53750: LD_VAR 0 2
53754: PUSH
53755: LD_INT 3
53757: MINUS
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: PUSH
53767: LD_VAR 0 1
53771: PUSH
53772: LD_INT 4
53774: PLUS
53775: PUSH
53776: LD_VAR 0 2
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: PUSH
53789: LD_VAR 0 1
53793: PUSH
53794: LD_VAR 0 2
53798: PUSH
53799: LD_INT 4
53801: PLUS
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: LIST
53810: PUSH
53811: LD_VAR 0 1
53815: PUSH
53816: LD_INT 3
53818: MINUS
53819: PUSH
53820: LD_VAR 0 2
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: PUSH
53833: LD_VAR 0 1
53837: PUSH
53838: LD_INT 4
53840: MINUS
53841: PUSH
53842: LD_VAR 0 2
53846: PUSH
53847: LD_INT 4
53849: MINUS
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: ST_TO_ADDR
// end ; 3 :
53866: GO 54288
53868: LD_INT 3
53870: DOUBLE
53871: EQUAL
53872: IFTRUE 53876
53874: GO 54009
53876: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53877: LD_ADDR_VAR 0 5
53881: PUSH
53882: LD_VAR 0 1
53886: PUSH
53887: LD_INT 3
53889: PLUS
53890: PUSH
53891: LD_VAR 0 2
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: PUSH
53904: LD_VAR 0 1
53908: PUSH
53909: LD_INT 4
53911: PLUS
53912: PUSH
53913: LD_VAR 0 2
53917: PUSH
53918: LD_INT 4
53920: PLUS
53921: PUSH
53922: LD_INT 5
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: PUSH
53930: LD_VAR 0 1
53934: PUSH
53935: LD_INT 4
53937: MINUS
53938: PUSH
53939: LD_VAR 0 2
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: PUSH
53952: LD_VAR 0 1
53956: PUSH
53957: LD_VAR 0 2
53961: PUSH
53962: LD_INT 4
53964: MINUS
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: PUSH
53974: LD_VAR 0 1
53978: PUSH
53979: LD_INT 3
53981: MINUS
53982: PUSH
53983: LD_VAR 0 2
53987: PUSH
53988: LD_INT 3
53990: MINUS
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// end ; 4 :
54007: GO 54288
54009: LD_INT 4
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54017
54015: GO 54150
54017: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54018: LD_ADDR_VAR 0 5
54022: PUSH
54023: LD_VAR 0 1
54027: PUSH
54028: LD_VAR 0 2
54032: PUSH
54033: LD_INT 4
54035: PLUS
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: PUSH
54045: LD_VAR 0 1
54049: PUSH
54050: LD_INT 3
54052: PLUS
54053: PUSH
54054: LD_VAR 0 2
54058: PUSH
54059: LD_INT 3
54061: PLUS
54062: PUSH
54063: LD_INT 5
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: PUSH
54071: LD_VAR 0 1
54075: PUSH
54076: LD_INT 4
54078: PLUS
54079: PUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_INT 4
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: PUSH
54093: LD_VAR 0 1
54097: PUSH
54098: LD_VAR 0 2
54102: PUSH
54103: LD_INT 3
54105: MINUS
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: PUSH
54115: LD_VAR 0 1
54119: PUSH
54120: LD_INT 4
54122: MINUS
54123: PUSH
54124: LD_VAR 0 2
54128: PUSH
54129: LD_INT 4
54131: MINUS
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: ST_TO_ADDR
// end ; 5 :
54148: GO 54288
54150: LD_INT 5
54152: DOUBLE
54153: EQUAL
54154: IFTRUE 54158
54156: GO 54287
54158: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54159: LD_ADDR_VAR 0 5
54163: PUSH
54164: LD_VAR 0 1
54168: PUSH
54169: LD_INT 4
54171: MINUS
54172: PUSH
54173: LD_VAR 0 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: PUSH
54186: LD_VAR 0 1
54190: PUSH
54191: LD_VAR 0 2
54195: PUSH
54196: LD_INT 4
54198: MINUS
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: PUSH
54208: LD_VAR 0 1
54212: PUSH
54213: LD_INT 4
54215: PLUS
54216: PUSH
54217: LD_VAR 0 2
54221: PUSH
54222: LD_INT 4
54224: PLUS
54225: PUSH
54226: LD_INT 5
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: PUSH
54234: LD_VAR 0 1
54238: PUSH
54239: LD_INT 3
54241: PLUS
54242: PUSH
54243: LD_VAR 0 2
54247: PUSH
54248: LD_INT 4
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: PUSH
54256: LD_VAR 0 1
54260: PUSH
54261: LD_VAR 0 2
54265: PUSH
54266: LD_INT 3
54268: PLUS
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// end ; end ;
54285: GO 54288
54287: POP
// result := list ;
54288: LD_ADDR_VAR 0 4
54292: PUSH
54293: LD_VAR 0 5
54297: ST_TO_ADDR
// end ;
54298: LD_VAR 0 4
54302: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54303: LD_INT 0
54305: PPUSH
54306: PPUSH
54307: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54308: LD_VAR 0 1
54312: NOT
54313: PUSH
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 4
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: IN
54337: NOT
54338: OR
54339: IFFALSE 54343
// exit ;
54341: GO 54435
// tmp := [ ] ;
54343: LD_ADDR_VAR 0 5
54347: PUSH
54348: EMPTY
54349: ST_TO_ADDR
// for i in units do
54350: LD_ADDR_VAR 0 4
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: FOR_IN
54361: IFFALSE 54404
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54363: LD_ADDR_VAR 0 5
54367: PUSH
54368: LD_VAR 0 5
54372: PPUSH
54373: LD_VAR 0 5
54377: PUSH
54378: LD_INT 1
54380: PLUS
54381: PPUSH
54382: LD_VAR 0 4
54386: PPUSH
54387: LD_VAR 0 2
54391: PPUSH
54392: CALL_OW 259
54396: PPUSH
54397: CALL_OW 2
54401: ST_TO_ADDR
54402: GO 54360
54404: POP
54405: POP
// if not tmp then
54406: LD_VAR 0 5
54410: NOT
54411: IFFALSE 54415
// exit ;
54413: GO 54435
// result := SortListByListDesc ( units , tmp ) ;
54415: LD_ADDR_VAR 0 3
54419: PUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_VAR 0 5
54429: PPUSH
54430: CALL_OW 77
54434: ST_TO_ADDR
// end ;
54435: LD_VAR 0 3
54439: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54440: LD_INT 0
54442: PPUSH
54443: PPUSH
54444: PPUSH
// x := GetX ( building ) ;
54445: LD_ADDR_VAR 0 4
54449: PUSH
54450: LD_VAR 0 2
54454: PPUSH
54455: CALL_OW 250
54459: ST_TO_ADDR
// y := GetY ( building ) ;
54460: LD_ADDR_VAR 0 5
54464: PUSH
54465: LD_VAR 0 2
54469: PPUSH
54470: CALL_OW 251
54474: ST_TO_ADDR
// if GetTaskList ( unit ) then
54475: LD_VAR 0 1
54479: PPUSH
54480: CALL_OW 437
54484: IFFALSE 54579
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54486: LD_STRING e
54488: PUSH
54489: LD_VAR 0 1
54493: PPUSH
54494: CALL_OW 437
54498: PUSH
54499: LD_INT 1
54501: ARRAY
54502: PUSH
54503: LD_INT 1
54505: ARRAY
54506: EQUAL
54507: PUSH
54508: LD_VAR 0 4
54512: PUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL_OW 437
54522: PUSH
54523: LD_INT 1
54525: ARRAY
54526: PUSH
54527: LD_INT 2
54529: ARRAY
54530: EQUAL
54531: AND
54532: PUSH
54533: LD_VAR 0 5
54537: PUSH
54538: LD_VAR 0 1
54542: PPUSH
54543: CALL_OW 437
54547: PUSH
54548: LD_INT 1
54550: ARRAY
54551: PUSH
54552: LD_INT 3
54554: ARRAY
54555: EQUAL
54556: AND
54557: IFFALSE 54569
// result := true else
54559: LD_ADDR_VAR 0 3
54563: PUSH
54564: LD_INT 1
54566: ST_TO_ADDR
54567: GO 54577
// result := false ;
54569: LD_ADDR_VAR 0 3
54573: PUSH
54574: LD_INT 0
54576: ST_TO_ADDR
// end else
54577: GO 54587
// result := false ;
54579: LD_ADDR_VAR 0 3
54583: PUSH
54584: LD_INT 0
54586: ST_TO_ADDR
// end ;
54587: LD_VAR 0 3
54591: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54592: LD_INT 0
54594: PPUSH
54595: PPUSH
54596: PPUSH
54597: PPUSH
// if not unit or not area then
54598: LD_VAR 0 1
54602: NOT
54603: PUSH
54604: LD_VAR 0 2
54608: NOT
54609: OR
54610: IFFALSE 54614
// exit ;
54612: GO 54778
// tmp := AreaToList ( area , i ) ;
54614: LD_ADDR_VAR 0 6
54618: PUSH
54619: LD_VAR 0 2
54623: PPUSH
54624: LD_VAR 0 5
54628: PPUSH
54629: CALL_OW 517
54633: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54634: LD_ADDR_VAR 0 5
54638: PUSH
54639: DOUBLE
54640: LD_INT 1
54642: DEC
54643: ST_TO_ADDR
54644: LD_VAR 0 6
54648: PUSH
54649: LD_INT 1
54651: ARRAY
54652: PUSH
54653: FOR_TO
54654: IFFALSE 54776
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54656: LD_ADDR_VAR 0 7
54660: PUSH
54661: LD_VAR 0 6
54665: PUSH
54666: LD_INT 1
54668: ARRAY
54669: PUSH
54670: LD_VAR 0 5
54674: ARRAY
54675: PUSH
54676: LD_VAR 0 6
54680: PUSH
54681: LD_INT 2
54683: ARRAY
54684: PUSH
54685: LD_VAR 0 5
54689: ARRAY
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54695: LD_VAR 0 7
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PPUSH
54704: LD_VAR 0 7
54708: PUSH
54709: LD_INT 2
54711: ARRAY
54712: PPUSH
54713: CALL_OW 428
54717: PUSH
54718: LD_INT 0
54720: EQUAL
54721: IFFALSE 54774
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54723: LD_VAR 0 1
54727: PPUSH
54728: LD_VAR 0 7
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 7
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: LD_VAR 0 3
54750: PPUSH
54751: CALL_OW 48
// result := IsPlaced ( unit ) ;
54755: LD_ADDR_VAR 0 4
54759: PUSH
54760: LD_VAR 0 1
54764: PPUSH
54765: CALL_OW 305
54769: ST_TO_ADDR
// exit ;
54770: POP
54771: POP
54772: GO 54778
// end ; end ;
54774: GO 54653
54776: POP
54777: POP
// end ;
54778: LD_VAR 0 4
54782: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54783: LD_INT 0
54785: PPUSH
54786: PPUSH
54787: PPUSH
// if not side or side > 8 then
54788: LD_VAR 0 1
54792: NOT
54793: PUSH
54794: LD_VAR 0 1
54798: PUSH
54799: LD_INT 8
54801: GREATER
54802: OR
54803: IFFALSE 54807
// exit ;
54805: GO 54994
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54807: LD_ADDR_VAR 0 4
54811: PUSH
54812: LD_INT 22
54814: PUSH
54815: LD_VAR 0 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 21
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PPUSH
54838: CALL_OW 69
54842: ST_TO_ADDR
// if not tmp then
54843: LD_VAR 0 4
54847: NOT
54848: IFFALSE 54852
// exit ;
54850: GO 54994
// enable_addtolog := true ;
54852: LD_ADDR_OWVAR 81
54856: PUSH
54857: LD_INT 1
54859: ST_TO_ADDR
// AddToLog ( [ ) ;
54860: LD_STRING [
54862: PPUSH
54863: CALL_OW 561
// for i in tmp do
54867: LD_ADDR_VAR 0 3
54871: PUSH
54872: LD_VAR 0 4
54876: PUSH
54877: FOR_IN
54878: IFFALSE 54985
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54880: LD_STRING [
54882: PUSH
54883: LD_VAR 0 3
54887: PPUSH
54888: CALL_OW 266
54892: STR
54893: PUSH
54894: LD_STRING , 
54896: STR
54897: PUSH
54898: LD_VAR 0 3
54902: PPUSH
54903: CALL_OW 250
54907: STR
54908: PUSH
54909: LD_STRING , 
54911: STR
54912: PUSH
54913: LD_VAR 0 3
54917: PPUSH
54918: CALL_OW 251
54922: STR
54923: PUSH
54924: LD_STRING , 
54926: STR
54927: PUSH
54928: LD_VAR 0 3
54932: PPUSH
54933: CALL_OW 254
54937: STR
54938: PUSH
54939: LD_STRING , 
54941: STR
54942: PUSH
54943: LD_VAR 0 3
54947: PPUSH
54948: LD_INT 1
54950: PPUSH
54951: CALL_OW 268
54955: STR
54956: PUSH
54957: LD_STRING , 
54959: STR
54960: PUSH
54961: LD_VAR 0 3
54965: PPUSH
54966: LD_INT 2
54968: PPUSH
54969: CALL_OW 268
54973: STR
54974: PUSH
54975: LD_STRING ],
54977: STR
54978: PPUSH
54979: CALL_OW 561
// end ;
54983: GO 54877
54985: POP
54986: POP
// AddToLog ( ]; ) ;
54987: LD_STRING ];
54989: PPUSH
54990: CALL_OW 561
// end ;
54994: LD_VAR 0 2
54998: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54999: LD_INT 0
55001: PPUSH
55002: PPUSH
55003: PPUSH
55004: PPUSH
55005: PPUSH
// if not area or not rate or not max then
55006: LD_VAR 0 1
55010: NOT
55011: PUSH
55012: LD_VAR 0 2
55016: NOT
55017: OR
55018: PUSH
55019: LD_VAR 0 4
55023: NOT
55024: OR
55025: IFFALSE 55029
// exit ;
55027: GO 55221
// while 1 do
55029: LD_INT 1
55031: IFFALSE 55221
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55033: LD_ADDR_VAR 0 9
55037: PUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: LD_INT 1
55045: PPUSH
55046: CALL_OW 287
55050: PUSH
55051: LD_INT 10
55053: MUL
55054: ST_TO_ADDR
// r := rate / 10 ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 2
55064: PUSH
55065: LD_INT 10
55067: DIVREAL
55068: ST_TO_ADDR
// time := 1 1$00 ;
55069: LD_ADDR_VAR 0 8
55073: PUSH
55074: LD_INT 2100
55076: ST_TO_ADDR
// if amount < min then
55077: LD_VAR 0 9
55081: PUSH
55082: LD_VAR 0 3
55086: LESS
55087: IFFALSE 55105
// r := r * 2 else
55089: LD_ADDR_VAR 0 7
55093: PUSH
55094: LD_VAR 0 7
55098: PUSH
55099: LD_INT 2
55101: MUL
55102: ST_TO_ADDR
55103: GO 55131
// if amount > max then
55105: LD_VAR 0 9
55109: PUSH
55110: LD_VAR 0 4
55114: GREATER
55115: IFFALSE 55131
// r := r / 2 ;
55117: LD_ADDR_VAR 0 7
55121: PUSH
55122: LD_VAR 0 7
55126: PUSH
55127: LD_INT 2
55129: DIVREAL
55130: ST_TO_ADDR
// time := time / r ;
55131: LD_ADDR_VAR 0 8
55135: PUSH
55136: LD_VAR 0 8
55140: PUSH
55141: LD_VAR 0 7
55145: DIVREAL
55146: ST_TO_ADDR
// if time < 0 then
55147: LD_VAR 0 8
55151: PUSH
55152: LD_INT 0
55154: LESS
55155: IFFALSE 55172
// time := time * - 1 ;
55157: LD_ADDR_VAR 0 8
55161: PUSH
55162: LD_VAR 0 8
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: MUL
55171: ST_TO_ADDR
// wait ( time ) ;
55172: LD_VAR 0 8
55176: PPUSH
55177: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55181: LD_INT 35
55183: PPUSH
55184: LD_INT 875
55186: PPUSH
55187: CALL_OW 12
55191: PPUSH
55192: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55196: LD_INT 1
55198: PPUSH
55199: LD_INT 5
55201: PPUSH
55202: CALL_OW 12
55206: PPUSH
55207: LD_VAR 0 1
55211: PPUSH
55212: LD_INT 1
55214: PPUSH
55215: CALL_OW 55
// end ;
55219: GO 55029
// end ;
55221: LD_VAR 0 5
55225: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55226: LD_INT 0
55228: PPUSH
55229: PPUSH
55230: PPUSH
55231: PPUSH
55232: PPUSH
55233: PPUSH
55234: PPUSH
55235: PPUSH
// if not turrets or not factories then
55236: LD_VAR 0 1
55240: NOT
55241: PUSH
55242: LD_VAR 0 2
55246: NOT
55247: OR
55248: IFFALSE 55252
// exit ;
55250: GO 55559
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55252: LD_ADDR_VAR 0 10
55256: PUSH
55257: LD_INT 5
55259: PUSH
55260: LD_INT 6
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 5
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 24
55294: PUSH
55295: LD_INT 25
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 23
55304: PUSH
55305: LD_INT 27
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 42
55318: PUSH
55319: LD_INT 43
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 44
55328: PUSH
55329: LD_INT 46
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 45
55338: PUSH
55339: LD_INT 47
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// result := [ ] ;
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: EMPTY
55362: ST_TO_ADDR
// for i in turrets do
55363: LD_ADDR_VAR 0 4
55367: PUSH
55368: LD_VAR 0 1
55372: PUSH
55373: FOR_IN
55374: IFFALSE 55557
// begin nat := GetNation ( i ) ;
55376: LD_ADDR_VAR 0 7
55380: PUSH
55381: LD_VAR 0 4
55385: PPUSH
55386: CALL_OW 248
55390: ST_TO_ADDR
// weapon := 0 ;
55391: LD_ADDR_VAR 0 8
55395: PUSH
55396: LD_INT 0
55398: ST_TO_ADDR
// if not nat then
55399: LD_VAR 0 7
55403: NOT
55404: IFFALSE 55408
// continue ;
55406: GO 55373
// for j in list [ nat ] do
55408: LD_ADDR_VAR 0 5
55412: PUSH
55413: LD_VAR 0 10
55417: PUSH
55418: LD_VAR 0 7
55422: ARRAY
55423: PUSH
55424: FOR_IN
55425: IFFALSE 55466
// if GetBWeapon ( i ) = j [ 1 ] then
55427: LD_VAR 0 4
55431: PPUSH
55432: CALL_OW 269
55436: PUSH
55437: LD_VAR 0 5
55441: PUSH
55442: LD_INT 1
55444: ARRAY
55445: EQUAL
55446: IFFALSE 55464
// begin weapon := j [ 2 ] ;
55448: LD_ADDR_VAR 0 8
55452: PUSH
55453: LD_VAR 0 5
55457: PUSH
55458: LD_INT 2
55460: ARRAY
55461: ST_TO_ADDR
// break ;
55462: GO 55466
// end ;
55464: GO 55424
55466: POP
55467: POP
// if not weapon then
55468: LD_VAR 0 8
55472: NOT
55473: IFFALSE 55477
// continue ;
55475: GO 55373
// for k in factories do
55477: LD_ADDR_VAR 0 6
55481: PUSH
55482: LD_VAR 0 2
55486: PUSH
55487: FOR_IN
55488: IFFALSE 55553
// begin weapons := AvailableWeaponList ( k ) ;
55490: LD_ADDR_VAR 0 9
55494: PUSH
55495: LD_VAR 0 6
55499: PPUSH
55500: CALL_OW 478
55504: ST_TO_ADDR
// if not weapons then
55505: LD_VAR 0 9
55509: NOT
55510: IFFALSE 55514
// continue ;
55512: GO 55487
// if weapon in weapons then
55514: LD_VAR 0 8
55518: PUSH
55519: LD_VAR 0 9
55523: IN
55524: IFFALSE 55551
// begin result := [ i , weapon ] ;
55526: LD_ADDR_VAR 0 3
55530: PUSH
55531: LD_VAR 0 4
55535: PUSH
55536: LD_VAR 0 8
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// exit ;
55545: POP
55546: POP
55547: POP
55548: POP
55549: GO 55559
// end ; end ;
55551: GO 55487
55553: POP
55554: POP
// end ;
55555: GO 55373
55557: POP
55558: POP
// end ;
55559: LD_VAR 0 3
55563: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55564: LD_INT 0
55566: PPUSH
// if not side or side > 8 then
55567: LD_VAR 0 3
55571: NOT
55572: PUSH
55573: LD_VAR 0 3
55577: PUSH
55578: LD_INT 8
55580: GREATER
55581: OR
55582: IFFALSE 55586
// exit ;
55584: GO 55645
// if not range then
55586: LD_VAR 0 4
55590: NOT
55591: IFFALSE 55602
// range := - 12 ;
55593: LD_ADDR_VAR 0 4
55597: PUSH
55598: LD_INT 12
55600: NEG
55601: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55602: LD_VAR 0 1
55606: PPUSH
55607: LD_VAR 0 2
55611: PPUSH
55612: LD_VAR 0 3
55616: PPUSH
55617: LD_VAR 0 4
55621: PPUSH
55622: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55626: LD_VAR 0 1
55630: PPUSH
55631: LD_VAR 0 2
55635: PPUSH
55636: LD_VAR 0 3
55640: PPUSH
55641: CALL_OW 331
// end ;
55645: LD_VAR 0 5
55649: RET
// export function Video ( mode ) ; begin
55650: LD_INT 0
55652: PPUSH
// ingame_video = mode ;
55653: LD_ADDR_OWVAR 52
55657: PUSH
55658: LD_VAR 0 1
55662: ST_TO_ADDR
// interface_hidden = mode ;
55663: LD_ADDR_OWVAR 54
55667: PUSH
55668: LD_VAR 0 1
55672: ST_TO_ADDR
// end ;
55673: LD_VAR 0 2
55677: RET
// export function Join ( array , element ) ; begin
55678: LD_INT 0
55680: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55681: LD_ADDR_VAR 0 3
55685: PUSH
55686: LD_VAR 0 1
55690: PPUSH
55691: LD_VAR 0 1
55695: PUSH
55696: LD_INT 1
55698: PLUS
55699: PPUSH
55700: LD_VAR 0 2
55704: PPUSH
55705: CALL_OW 1
55709: ST_TO_ADDR
// end ;
55710: LD_VAR 0 3
55714: RET
// export function JoinUnion ( array , element ) ; begin
55715: LD_INT 0
55717: PPUSH
// result := array union element ;
55718: LD_ADDR_VAR 0 3
55722: PUSH
55723: LD_VAR 0 1
55727: PUSH
55728: LD_VAR 0 2
55732: UNION
55733: ST_TO_ADDR
// end ;
55734: LD_VAR 0 3
55738: RET
// export function GetBehemoths ( side ) ; begin
55739: LD_INT 0
55741: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55742: LD_ADDR_VAR 0 2
55746: PUSH
55747: LD_INT 22
55749: PUSH
55750: LD_VAR 0 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 31
55761: PUSH
55762: LD_INT 25
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PPUSH
55773: CALL_OW 69
55777: ST_TO_ADDR
// end ;
55778: LD_VAR 0 2
55782: RET
// export function Shuffle ( array ) ; var i , index ; begin
55783: LD_INT 0
55785: PPUSH
55786: PPUSH
55787: PPUSH
// result := [ ] ;
55788: LD_ADDR_VAR 0 2
55792: PUSH
55793: EMPTY
55794: ST_TO_ADDR
// if not array then
55795: LD_VAR 0 1
55799: NOT
55800: IFFALSE 55804
// exit ;
55802: GO 55903
// Randomize ;
55804: CALL_OW 10
// for i = array downto 1 do
55808: LD_ADDR_VAR 0 3
55812: PUSH
55813: DOUBLE
55814: LD_VAR 0 1
55818: INC
55819: ST_TO_ADDR
55820: LD_INT 1
55822: PUSH
55823: FOR_DOWNTO
55824: IFFALSE 55901
// begin index := rand ( 1 , array ) ;
55826: LD_ADDR_VAR 0 4
55830: PUSH
55831: LD_INT 1
55833: PPUSH
55834: LD_VAR 0 1
55838: PPUSH
55839: CALL_OW 12
55843: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55844: LD_ADDR_VAR 0 2
55848: PUSH
55849: LD_VAR 0 2
55853: PPUSH
55854: LD_VAR 0 2
55858: PUSH
55859: LD_INT 1
55861: PLUS
55862: PPUSH
55863: LD_VAR 0 1
55867: PUSH
55868: LD_VAR 0 4
55872: ARRAY
55873: PPUSH
55874: CALL_OW 2
55878: ST_TO_ADDR
// array := Delete ( array , index ) ;
55879: LD_ADDR_VAR 0 1
55883: PUSH
55884: LD_VAR 0 1
55888: PPUSH
55889: LD_VAR 0 4
55893: PPUSH
55894: CALL_OW 3
55898: ST_TO_ADDR
// end ;
55899: GO 55823
55901: POP
55902: POP
// end ;
55903: LD_VAR 0 2
55907: RET
// export function GetBaseMaterials ( base ) ; begin
55908: LD_INT 0
55910: PPUSH
// result := [ 0 , 0 , 0 ] ;
55911: LD_ADDR_VAR 0 2
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// if not base then
55930: LD_VAR 0 1
55934: NOT
55935: IFFALSE 55939
// exit ;
55937: GO 55988
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55939: LD_ADDR_VAR 0 2
55943: PUSH
55944: LD_VAR 0 1
55948: PPUSH
55949: LD_INT 1
55951: PPUSH
55952: CALL_OW 275
55956: PUSH
55957: LD_VAR 0 1
55961: PPUSH
55962: LD_INT 2
55964: PPUSH
55965: CALL_OW 275
55969: PUSH
55970: LD_VAR 0 1
55974: PPUSH
55975: LD_INT 3
55977: PPUSH
55978: CALL_OW 275
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// end ;
55988: LD_VAR 0 2
55992: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55993: LD_INT 0
55995: PPUSH
55996: PPUSH
// result := array ;
55997: LD_ADDR_VAR 0 3
56001: PUSH
56002: LD_VAR 0 1
56006: ST_TO_ADDR
// if size > 0 then
56007: LD_VAR 0 2
56011: PUSH
56012: LD_INT 0
56014: GREATER
56015: IFFALSE 56061
// for i := array downto size do
56017: LD_ADDR_VAR 0 4
56021: PUSH
56022: DOUBLE
56023: LD_VAR 0 1
56027: INC
56028: ST_TO_ADDR
56029: LD_VAR 0 2
56033: PUSH
56034: FOR_DOWNTO
56035: IFFALSE 56059
// result := Delete ( result , result ) ;
56037: LD_ADDR_VAR 0 3
56041: PUSH
56042: LD_VAR 0 3
56046: PPUSH
56047: LD_VAR 0 3
56051: PPUSH
56052: CALL_OW 3
56056: ST_TO_ADDR
56057: GO 56034
56059: POP
56060: POP
// end ;
56061: LD_VAR 0 3
56065: RET
// export function ComExit ( unit ) ; var tmp ; begin
56066: LD_INT 0
56068: PPUSH
56069: PPUSH
// if not IsInUnit ( unit ) then
56070: LD_VAR 0 1
56074: PPUSH
56075: CALL_OW 310
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56144
// tmp := IsInUnit ( unit ) ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 310
56098: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56099: LD_VAR 0 3
56103: PPUSH
56104: CALL_OW 247
56108: PUSH
56109: LD_INT 2
56111: EQUAL
56112: IFFALSE 56125
// ComExitVehicle ( unit ) else
56114: LD_VAR 0 1
56118: PPUSH
56119: CALL_OW 121
56123: GO 56134
// ComExitBuilding ( unit ) ;
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL_OW 122
// result := tmp ;
56134: LD_ADDR_VAR 0 2
56138: PUSH
56139: LD_VAR 0 3
56143: ST_TO_ADDR
// end ;
56144: LD_VAR 0 2
56148: RET
// export function ResetHc ; begin
56149: LD_INT 0
56151: PPUSH
// InitHc ;
56152: CALL_OW 19
// hc_importance := 0 ;
56156: LD_ADDR_OWVAR 32
56160: PUSH
56161: LD_INT 0
56163: ST_TO_ADDR
// end ;
56164: LD_VAR 0 1
56168: RET
