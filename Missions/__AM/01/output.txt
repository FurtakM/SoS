// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3880 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3737 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 43 , 39 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 43
 322: PPUSH
 323: LD_INT 39
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// ComMoveXY ( off , 49 , 41 ) ;
 511: LD_LOC 10
 515: PPUSH
 516: LD_INT 49
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// wait ( 0 0$3 ) ;
 526: LD_INT 105
 528: PPUSH
 529: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 533: LD_LOC 10
 537: PPUSH
 538: LD_STRING DX1-Off-1
 540: PPUSH
 541: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 545: LD_LOC 10
 549: PPUSH
 550: LD_INT 51
 552: PPUSH
 553: LD_INT 38
 555: PPUSH
 556: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 560: LD_LOC 3
 564: PPUSH
 565: LD_INT 50
 567: PPUSH
 568: LD_INT 39
 570: PPUSH
 571: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 575: LD_LOC 6
 579: PPUSH
 580: LD_INT 51
 582: PPUSH
 583: LD_INT 40
 585: PPUSH
 586: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 590: LD_LOC 7
 594: PPUSH
 595: LD_INT 52
 597: PPUSH
 598: LD_INT 41
 600: PPUSH
 601: CALL_OW 111
// wait ( 0 0$1 ) ;
 605: LD_INT 35
 607: PPUSH
 608: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 612: LD_LOC 5
 616: PPUSH
 617: LD_INT 50
 619: PPUSH
 620: LD_INT 40
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 627: LD_LOC 8
 631: PPUSH
 632: LD_INT 51
 634: PPUSH
 635: LD_INT 41
 637: PPUSH
 638: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 642: LD_LOC 9
 646: PPUSH
 647: LD_INT 52
 649: PPUSH
 650: LD_INT 42
 652: PPUSH
 653: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 657: LD_LOC 10
 661: PPUSH
 662: LD_INT 50
 664: PPUSH
 665: LD_INT 47
 667: PPUSH
 668: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 672: LD_LOC 3
 676: PPUSH
 677: LD_INT 65
 679: PPUSH
 680: LD_INT 25
 682: PPUSH
 683: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 687: LD_LOC 6
 691: PPUSH
 692: LD_INT 65
 694: PPUSH
 695: LD_INT 25
 697: PPUSH
 698: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 702: LD_LOC 7
 706: PPUSH
 707: LD_INT 65
 709: PPUSH
 710: LD_INT 25
 712: PPUSH
 713: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 717: LD_LOC 5
 721: PPUSH
 722: LD_INT 65
 724: PPUSH
 725: LD_INT 25
 727: PPUSH
 728: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 732: LD_LOC 8
 736: PPUSH
 737: LD_INT 65
 739: PPUSH
 740: LD_INT 25
 742: PPUSH
 743: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 747: LD_LOC 9
 751: PPUSH
 752: LD_INT 65
 754: PPUSH
 755: LD_INT 25
 757: PPUSH
 758: CALL_OW 178
// wait ( 0 0$2 ) ;
 762: LD_INT 70
 764: PPUSH
 765: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 769: LD_LOC 10
 773: PPUSH
 774: LD_STRING DX1-Off-1a
 776: PPUSH
 777: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 781: LD_LOC 11
 785: PPUSH
 786: LD_INT 75
 788: PPUSH
 789: LD_INT 36
 791: PPUSH
 792: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 796: LD_LOC 10
 800: PPUSH
 801: LD_INT 71
 803: PPUSH
 804: LD_INT 34
 806: PPUSH
 807: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 811: LD_LOC 3
 815: PPUSH
 816: LD_INT 53
 818: PPUSH
 819: LD_INT 44
 821: PPUSH
 822: CALL_OW 111
// commovexy ( joan , 52 , 43 ) ;
 826: LD_LOC 4
 830: PPUSH
 831: LD_INT 52
 833: PPUSH
 834: LD_INT 43
 836: PPUSH
 837: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 841: LD_LOC 3
 845: PPUSH
 846: LD_LOC 4
 850: PPUSH
 851: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 855: LD_LOC 4
 859: PPUSH
 860: LD_LOC 3
 864: PPUSH
 865: CALL_OW 179
// wait ( 0 0$7 ) ;
 869: LD_INT 245
 871: PPUSH
 872: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 876: LD_LOC 3
 880: PPUSH
 881: LD_STRING DX1-JMM-1
 883: PPUSH
 884: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 888: LD_LOC 4
 892: PPUSH
 893: LD_STRING DX1-Joan-1
 895: PPUSH
 896: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 900: LD_LOC 3
 904: PPUSH
 905: LD_STRING DX1-JMM-2
 907: PPUSH
 908: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 912: LD_LOC 4
 916: PPUSH
 917: LD_STRING DX1-Joan-2
 919: PPUSH
 920: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 924: LD_LOC 3
 928: PPUSH
 929: LD_STRING DX1-JMM-3
 931: PPUSH
 932: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 936: LD_LOC 4
 940: PPUSH
 941: LD_STRING DX1-Joan-3
 943: PPUSH
 944: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 948: LD_LOC 3
 952: PPUSH
 953: LD_STRING DX1-JMM-4
 955: PPUSH
 956: CALL_OW 88
// follow = true ;
 960: LD_ADDR_LOC 20
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
 968: LD_INT 10
 970: PPUSH
 971: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 975: LD_STRING M0
 977: PPUSH
 978: CALL_OW 337
// ingame_video = false ;
 982: LD_ADDR_OWVAR 52
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// interface_hidden = false ;
 990: LD_ADDR_OWVAR 54
 994: PUSH
 995: LD_INT 0
 997: ST_TO_ADDR
// hintSpec ( Hints , 3 ) ;
 998: LD_STRING Hints
1000: PPUSH
1001: LD_INT 3
1003: PPUSH
1004: CALL_OW 338
// wait ( 0 0$1 ) ;
1008: LD_INT 35
1010: PPUSH
1011: CALL_OW 67
// hint ( Character ) ;
1015: LD_STRING Character
1017: PPUSH
1018: CALL_OW 339
// wait ( 0 0$1 ) ;
1022: LD_INT 35
1024: PPUSH
1025: CALL_OW 67
// enable ( 01 ) ;
1029: LD_INT 1
1031: ENABLE_MARKED
// enable ( 02 ) ;
1032: LD_INT 2
1034: ENABLE_MARKED
// enable ( 03 ) ;
1035: LD_INT 3
1037: ENABLE_MARKED
// enable ( 04 ) ;
1038: LD_INT 4
1040: ENABLE_MARKED
// enable ( 05 ) ;
1041: LD_INT 5
1043: ENABLE_MARKED
// end ;
1044: END
// every 3 trigger isselected ( john ) marked 01 do
1045: LD_LOC 3
1049: PPUSH
1050: CALL_OW 306
1054: IFFALSE 1080
1056: GO 1058
1058: DISABLE
// begin hint ( Selection ) ;
1059: LD_STRING Selection
1061: PPUSH
1062: CALL_OW 339
// wait ( 0 0$1 ) ;
1066: LD_INT 35
1068: PPUSH
1069: CALL_OW 67
// hint ( Commands ) ;
1073: LD_STRING Commands
1075: PPUSH
1076: CALL_OW 339
// end ;
1080: END
// every 3 + 1 trigger isselected ( others ^ allmen ^ [ joan , off ] ) marked 02 do
1081: LD_LOC 11
1085: PUSH
1086: LD_EXP 14
1090: ADD
1091: PUSH
1092: LD_LOC 4
1096: PUSH
1097: LD_LOC 10
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ADD
1106: PPUSH
1107: CALL_OW 306
1111: IFFALSE 1123
1113: GO 1115
1115: DISABLE
// hint ( NPC ) ;
1116: LD_STRING NPC
1118: PPUSH
1119: CALL_OW 339
1123: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
1124: LD_LOC 3
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL_OW 308
1136: IFFALSE 1148
1138: GO 1140
1140: DISABLE
// hint ( Visibility ) ;
1141: LD_STRING Visibility
1143: PPUSH
1144: CALL_OW 339
1148: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1149: LD_LOC 16
1153: NOT
1154: PUSH
1155: LD_LOC 20
1159: AND
1160: IFFALSE 1453
1162: GO 1164
1164: DISABLE
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
1172: PPUSH
1173: PPUSH
1174: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1175: LD_ADDR_VAR 0 1
1179: PUSH
1180: LD_LOC 3
1184: PPUSH
1185: LD_LOC 4
1189: PPUSH
1190: CALL_OW 296
1194: ST_TO_ADDR
// x = getx ( john ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_LOC 3
1204: PPUSH
1205: CALL_OW 250
1209: ST_TO_ADDR
// y = gety ( john ) ;
1210: LD_ADDR_VAR 0 5
1214: PUSH
1215: LD_LOC 3
1219: PPUSH
1220: CALL_OW 251
1224: ST_TO_ADDR
// tmp2 = [ ] ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: EMPTY
1231: ST_TO_ADDR
// tmp3 = [ ] ;
1232: LD_ADDR_VAR 0 3
1236: PUSH
1237: EMPTY
1238: ST_TO_ADDR
// if tmp >= 7 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 7
1246: GREATEREQUAL
1247: IFFALSE 1452
// begin for dir = 0 to 5 do
1249: LD_ADDR_VAR 0 8
1253: PUSH
1254: DOUBLE
1255: LD_INT 0
1257: DEC
1258: ST_TO_ADDR
1259: LD_INT 5
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1403
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1265: LD_ADDR_VAR 0 6
1269: PUSH
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_VAR 0 8
1279: PPUSH
1280: LD_VAR 0 1
1284: PUSH
1285: LD_INT 2
1287: MINUS
1288: PPUSH
1289: CALL_OW 272
1293: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1294: LD_ADDR_VAR 0 7
1298: PUSH
1299: LD_VAR 0 5
1303: PPUSH
1304: LD_VAR 0 8
1308: PPUSH
1309: LD_VAR 0 1
1313: PUSH
1314: LD_INT 2
1316: MINUS
1317: PPUSH
1318: CALL_OW 273
1322: ST_TO_ADDR
// if ValidHex ( px , py ) then
1323: LD_VAR 0 6
1327: PPUSH
1328: LD_VAR 0 7
1332: PPUSH
1333: CALL_OW 488
1337: IFFALSE 1401
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_VAR 0 6
1353: PUSH
1354: LD_VAR 0 7
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: EMPTY
1364: LIST
1365: ADD
1366: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1367: LD_ADDR_VAR 0 3
1371: PUSH
1372: LD_VAR 0 3
1376: PUSH
1377: LD_LOC 4
1381: PPUSH
1382: LD_VAR 0 6
1386: PPUSH
1387: LD_VAR 0 7
1391: PPUSH
1392: CALL_OW 297
1396: PUSH
1397: EMPTY
1398: LIST
1399: ADD
1400: ST_TO_ADDR
// end end ;
1401: GO 1262
1403: POP
1404: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1405: LD_ADDR_VAR 0 1
1409: PUSH
1410: LD_VAR 0 2
1414: PPUSH
1415: LD_VAR 0 3
1419: PPUSH
1420: CALL_OW 79
1424: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1425: LD_LOC 4
1429: PPUSH
1430: LD_VAR 0 1
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: LD_VAR 0 1
1443: PUSH
1444: LD_INT 2
1446: ARRAY
1447: PPUSH
1448: CALL_OW 111
// end ; enable ;
1452: ENABLE
// end ;
1453: PPOPN 8
1455: END
// on destinationunreachable ( un ) do if un = joan then
1456: LD_VAR 0 1
1460: PUSH
1461: LD_LOC 4
1465: EQUAL
1466: IFFALSE 1497
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1468: LD_LOC 4
1472: PPUSH
1473: LD_LOC 3
1477: PPUSH
1478: CALL_OW 250
1482: PPUSH
1483: LD_LOC 3
1487: PPUSH
1488: CALL_OW 251
1492: PPUSH
1493: CALL_OW 111
1497: PPOPN 1
1499: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1500: LD_LOC 3
1504: PPUSH
1505: CALL_OW 318
1509: IFFALSE 1540
1511: GO 1513
1513: DISABLE
// begin if not killhim then
1514: LD_LOC 16
1518: NOT
1519: IFFALSE 1533
// say ( joan , DXComments-Joan-1 ) ;
1521: LD_LOC 4
1525: PPUSH
1526: LD_STRING DXComments-Joan-1
1528: PPUSH
1529: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1533: LD_STRING ACH_TROLL
1535: PPUSH
1536: CALL_OW 543
// end ;
1540: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1541: LD_LOC 3
1545: PPUSH
1546: LD_INT 2
1548: PPUSH
1549: CALL_OW 308
1553: IFFALSE 1577
1555: GO 1557
1557: DISABLE
// begin if not killhim then
1558: LD_LOC 16
1562: NOT
1563: IFFALSE 1577
// say ( joan , DXComments-Joan-1a ) ;
1565: LD_LOC 4
1569: PPUSH
1570: LD_STRING DXComments-Joan-1a
1572: PPUSH
1573: CALL_OW 88
// end ;
1577: END
// every 0 0$1 + 1 1$10 marked 29 do
1578: GO 1580
1580: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1581: LD_LOC 3
1585: PPUSH
1586: LD_INT 3
1588: PPUSH
1589: CALL_OW 308
1593: NOT
1594: IFFALSE 1617
// begin if not killhim then
1596: LD_LOC 16
1600: NOT
1601: IFFALSE 1615
// say ( joan , DXComments-Joan-1b ) ;
1603: LD_LOC 4
1607: PPUSH
1608: LD_STRING DXComments-Joan-1b
1610: PPUSH
1611: CALL_OW 88
// end else
1615: GO 1618
// enable ;
1617: ENABLE
// end ;
1618: END
// every 0 0$0.3 trigger not killhim marked 097 do
1619: LD_LOC 16
1623: NOT
1624: IFFALSE 2148
1626: GO 1628
1628: DISABLE
// begin if joanok then
1629: LD_LOC 13
1633: IFFALSE 1812
// if getlives ( joan ) < 1000 then
1635: LD_LOC 4
1639: PPUSH
1640: CALL_OW 256
1644: PUSH
1645: LD_INT 1000
1647: LESS
1648: IFFALSE 1812
// begin if debug then
1650: LD_LOC 19
1654: IFFALSE 1674
// msg ( joan:  & getlives ( joan ) ) ;
1656: LD_STRING joan: 
1658: PUSH
1659: LD_LOC 4
1663: PPUSH
1664: CALL_OW 256
1668: STR
1669: PPUSH
1670: CALL_OW 100
// comhold ( joan ) ;
1674: LD_LOC 4
1678: PPUSH
1679: CALL_OW 140
// dialogueon ;
1683: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1687: LD_LOC 4
1691: PPUSH
1692: LD_STRING DXAttack-Joan-1
1694: PPUSH
1695: CALL_OW 88
// killhim = true ;
1699: LD_ADDR_LOC 16
1703: PUSH
1704: LD_INT 1
1706: ST_TO_ADDR
// SA_OnAttackFriends ;
1707: CALL 3692 0 0
// music_class = 1 ;
1711: LD_ADDR_OWVAR 72
1715: PUSH
1716: LD_INT 1
1718: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1719: LD_LOC 4
1723: PPUSH
1724: LD_LOC 5
1728: PPUSH
1729: CALL_OW 250
1733: PPUSH
1734: LD_LOC 5
1738: PPUSH
1739: CALL_OW 251
1743: PPUSH
1744: CALL_OW 111
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1755: LD_LOC 1
1759: PPUSH
1760: LD_LOC 2
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1775: LD_LOC 11
1779: PUSH
1780: LD_LOC 10
1784: PUSH
1785: LD_EXP 1
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: ADD
1794: PPUSH
1795: LD_LOC 3
1799: PPUSH
1800: CALL_OW 115
// joanok = false ;
1804: LD_ADDR_LOC 13
1808: PUSH
1809: LD_INT 0
1811: ST_TO_ADDR
// end ; if oothersok then
1812: LD_LOC 14
1816: IFFALSE 2015
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1818: LD_LOC 11
1822: PUSH
1823: LD_LOC 10
1827: PUSH
1828: LD_EXP 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: ADD
1837: PPUSH
1838: CALL_OW 256
1842: PUSH
1843: LD_INT 1000
1845: LESS
1846: IFFALSE 2015
// begin if debug then
1848: LD_LOC 19
1852: IFFALSE 1881
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1854: LD_STRING others+off: 
1856: PUSH
1857: LD_LOC 11
1861: PUSH
1862: LD_LOC 10
1866: PUSH
1867: EMPTY
1868: LIST
1869: ADD
1870: PPUSH
1871: CALL_OW 256
1875: STR
1876: PPUSH
1877: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1881: LD_LOC 11
1885: PUSH
1886: LD_LOC 10
1890: PUSH
1891: EMPTY
1892: LIST
1893: ADD
1894: PPUSH
1895: CALL_OW 140
// dialogueon ;
1899: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1903: LD_LOC 4
1907: PPUSH
1908: LD_STRING DXAttack-Joan-1a
1910: PPUSH
1911: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1915: LD_INT 24
1917: PPUSH
1918: CALL_OW 67
// killhim = true ;
1922: LD_ADDR_LOC 16
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// SA_OnAttackFriends ;
1930: CALL 3692 0 0
// music_class = 1 ;
1934: LD_ADDR_OWVAR 72
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1942: LD_LOC 5
1946: PPUSH
1947: LD_STRING DXAttack-Sik-1
1949: PPUSH
1950: CALL_OW 88
// dialogueoff ;
1954: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1958: LD_LOC 1
1962: PPUSH
1963: LD_LOC 2
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 1
1973: PPUSH
1974: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1978: LD_LOC 11
1982: PUSH
1983: LD_LOC 10
1987: PUSH
1988: LD_EXP 1
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: ADD
1997: PPUSH
1998: LD_LOC 3
2002: PPUSH
2003: CALL_OW 115
// oothersok = false ;
2007: LD_ADDR_LOC 14
2011: PUSH
2012: LD_INT 0
2014: ST_TO_ADDR
// end ; if buildingsok then
2015: LD_LOC 15
2019: IFFALSE 2140
// if getlives ( budovy ) < 1000 then
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: PUSH
2031: LD_INT 1000
2033: LESS
2034: IFFALSE 2140
// begin if debug then
2036: LD_LOC 19
2040: IFFALSE 2060
// msg ( budovy:  & getlives ( budovy ) ) ;
2042: LD_STRING budovy: 
2044: PUSH
2045: LD_LOC 12
2049: PPUSH
2050: CALL_OW 256
2054: STR
2055: PPUSH
2056: CALL_OW 100
// dialogueon ;
2060: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_STRING DXAttack-Joan-1b
2071: PPUSH
2072: CALL_OW 88
// dialogueoff ;
2076: CALL_OW 7
// follow = false ;
2080: LD_ADDR_LOC 20
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2088: LD_LOC 4
2092: PPUSH
2093: LD_LOC 5
2097: PPUSH
2098: CALL_OW 250
2102: PPUSH
2103: LD_LOC 5
2107: PPUSH
2108: CALL_OW 251
2112: PPUSH
2113: CALL_OW 111
// buildingsok = false ;
2117: LD_ADDR_LOC 15
2121: PUSH
2122: LD_INT 0
2124: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2125: LD_ADDR_LOC 17
2129: PUSH
2130: LD_LOC 12
2134: PPUSH
2135: CALL_OW 256
2139: ST_TO_ADDR
// end ; if not killhim then
2140: LD_LOC 16
2144: NOT
2145: IFFALSE 2148
// enable ;
2147: ENABLE
// end ;
2148: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2149: LD_LOC 15
2153: NOT
2154: PUSH
2155: LD_LOC 16
2159: NOT
2160: AND
2161: IFFALSE 2288
2163: GO 2165
2165: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2166: LD_LOC 17
2170: PUSH
2171: LD_LOC 12
2175: PPUSH
2176: CALL_OW 256
2180: MINUS
2181: PUSH
2182: LD_INT 7
2184: GREATER
2185: IFFALSE 2287
// begin disable ( 097 ) ;
2187: LD_INT 97
2189: DISABLE_MARKED
// disable_07 = true ;
2190: LD_ADDR_LOC 18
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// dialogueon ;
2198: CALL_OW 6
// music_class = 1 ;
2202: LD_ADDR_OWVAR 72
2206: PUSH
2207: LD_INT 1
2209: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2210: LD_LOC 5
2214: PPUSH
2215: LD_STRING DXAttack-Sik-1
2217: PPUSH
2218: CALL_OW 88
// dialogueoff ;
2222: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2226: LD_LOC 1
2230: PPUSH
2231: LD_LOC 2
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 1
2241: PPUSH
2242: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2246: LD_LOC 11
2250: PUSH
2251: LD_LOC 10
2255: PUSH
2256: LD_EXP 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: ADD
2265: PPUSH
2266: LD_LOC 3
2270: PPUSH
2271: CALL_OW 115
// killhim = true ;
2275: LD_ADDR_LOC 16
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// SA_OnAttackFriends ;
2283: CALL 3692 0 0
// end ; enable ;
2287: ENABLE
// end ;
2288: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2289: LD_LOC 3
2293: PPUSH
2294: CALL_OW 310
2298: PUSH
2299: LD_INT 27
2301: EQUAL
2302: PUSH
2303: LD_LOC 16
2307: NOT
2308: AND
2309: IFFALSE 2414
2311: GO 2313
2313: DISABLE
// begin disable ( 097 ) ;
2314: LD_INT 97
2316: DISABLE_MARKED
// disable_07 = true ;
2317: LD_ADDR_LOC 18
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// dialogueon ;
2325: CALL_OW 6
// music_class = 1 ;
2329: LD_ADDR_OWVAR 72
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2337: LD_LOC 5
2341: PPUSH
2342: LD_STRING DXAttack-Sik-1
2344: PPUSH
2345: CALL_OW 88
// dialogueoff ;
2349: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2353: LD_LOC 1
2357: PPUSH
2358: LD_LOC 2
2362: PPUSH
2363: LD_INT 2
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2373: LD_LOC 11
2377: PUSH
2378: LD_LOC 10
2382: PUSH
2383: LD_EXP 1
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: ADD
2392: PPUSH
2393: LD_LOC 3
2397: PPUSH
2398: CALL_OW 115
// killhim = true ;
2402: LD_ADDR_LOC 16
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// SA_OnAttackFriends ;
2410: CALL 3692 0 0
// end ;
2414: END
// on unitgoestored ( un ) do if un = john then
2415: LD_VAR 0 1
2419: PUSH
2420: LD_LOC 3
2424: EQUAL
2425: IFFALSE 2516
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2427: LD_LOC 10
2431: PPUSH
2432: LD_LOC 3
2436: PPUSH
2437: CALL_OW 250
2441: PPUSH
2442: LD_LOC 3
2446: PPUSH
2447: CALL_OW 251
2451: PPUSH
2452: CALL_OW 111
// wait ( 0 0$1 ) ;
2456: LD_INT 35
2458: PPUSH
2459: CALL_OW 67
// InGameOn ;
2463: CALL_OW 8
// SetLives ( john , 240 ) ;
2467: LD_LOC 3
2471: PPUSH
2472: LD_INT 240
2474: PPUSH
2475: CALL_OW 234
// SetSide ( john , 8 ) ;
2479: LD_LOC 3
2483: PPUSH
2484: LD_INT 8
2486: PPUSH
2487: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2491: LD_LOC 10
2495: PPUSH
2496: LD_STRING DXAttack-Off-1
2498: PPUSH
2499: CALL_OW 88
// InGameOff ;
2503: CALL_OW 9
// youlost ( Dissmiss ) ;
2507: LD_STRING Dissmiss
2509: PPUSH
2510: CALL_OW 104
// end else
2514: GO 2644
// if not disable_07 then
2516: LD_LOC 18
2520: NOT
2521: IFFALSE 2644
// if ( not killhim ) then
2523: LD_LOC 16
2527: NOT
2528: IFFALSE 2644
// if ( gettype ( un ) = unit_human ) then
2530: LD_VAR 0 1
2534: PPUSH
2535: CALL_OW 247
2539: PUSH
2540: LD_INT 1
2542: EQUAL
2543: IFFALSE 2644
// begin disable ( 06 ) ;
2545: LD_INT 6
2547: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2548: LD_INT 18
2550: PPUSH
2551: CALL_OW 67
// dialogueon ;
2555: CALL_OW 6
// music_class = 1 ;
2559: LD_ADDR_OWVAR 72
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2567: LD_LOC 5
2571: PPUSH
2572: LD_STRING DXAttack-Sik-1
2574: PPUSH
2575: CALL_OW 88
// dialogueoff ;
2579: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2583: LD_LOC 1
2587: PPUSH
2588: LD_LOC 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: LD_INT 1
2598: PPUSH
2599: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2603: LD_LOC 11
2607: PUSH
2608: LD_LOC 10
2612: PUSH
2613: LD_EXP 1
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: ADD
2622: PPUSH
2623: LD_LOC 3
2627: PPUSH
2628: CALL_OW 115
// killhim = true ;
2632: LD_ADDR_LOC 16
2636: PUSH
2637: LD_INT 1
2639: ST_TO_ADDR
// SA_OnAttackFriends ;
2640: CALL 3692 0 0
// end ;
2644: PPOPN 1
2646: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2647: LD_LOC 3
2651: PPUSH
2652: LD_INT 4
2654: PPUSH
2655: CALL_OW 308
2659: PUSH
2660: LD_LOC 16
2664: NOT
2665: AND
2666: IFFALSE 3396
2668: GO 2670
2670: DISABLE
// begin follow = false ;
2671: LD_ADDR_LOC 20
2675: PUSH
2676: LD_INT 0
2678: ST_TO_ADDR
// if Crawls ( john ) then
2679: LD_LOC 3
2683: PPUSH
2684: CALL_OW 318
2688: IFFALSE 2706
// begin ComWalk ( john ) ;
2690: LD_LOC 3
2694: PPUSH
2695: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2699: LD_INT 10
2701: PPUSH
2702: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2706: LD_INT 14
2708: PUSH
2709: EMPTY
2710: LIST
2711: PPUSH
2712: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2716: LD_LOC 3
2720: PPUSH
2721: LD_INT 75
2723: PPUSH
2724: LD_INT 36
2726: PPUSH
2727: CALL_OW 111
// InGameOn ;
2731: CALL_OW 8
// say ( off , DXReady-Off-1 ) ;
2735: LD_LOC 10
2739: PPUSH
2740: LD_STRING DXReady-Off-1
2742: PPUSH
2743: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2747: LD_LOC 5
2751: PPUSH
2752: LD_STRING DXReady-Sik-1
2754: PPUSH
2755: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2759: LD_STRING DXReady-All-1
2761: PPUSH
2762: CALL_OW 96
// wait ( 0 0$2 ) ;
2766: LD_INT 70
2768: PPUSH
2769: CALL_OW 67
// say ( lucy , DXReady-Don-1 ) ;
2773: LD_LOC 6
2777: PPUSH
2778: LD_STRING DXReady-Don-1
2780: PPUSH
2781: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2785: LD_STRING DXReady-All-2
2787: PPUSH
2788: CALL_OW 96
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2799: LD_EXP 1
2803: PPUSH
2804: LD_STRING DXReady-Off2-1
2806: PPUSH
2807: CALL_OW 88
// wait ( 0 0$1 ) ;
2811: LD_INT 35
2813: PPUSH
2814: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2818: LD_EXP 1
2822: PPUSH
2823: LD_STRING DXReady-Off2-2
2825: PPUSH
2826: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2830: LD_LOC 10
2834: PPUSH
2835: LD_INT 72
2837: PPUSH
2838: LD_INT 29
2840: PPUSH
2841: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2845: LD_EXP 1
2849: PPUSH
2850: LD_INT 73
2852: PPUSH
2853: LD_INT 31
2855: PPUSH
2856: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2860: LD_LOC 3
2864: PPUSH
2865: LD_INT 67
2867: PPUSH
2868: LD_INT 28
2870: PPUSH
2871: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2875: LD_LOC 6
2879: PPUSH
2880: LD_INT 68
2882: PPUSH
2883: LD_INT 30
2885: PPUSH
2886: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2890: LD_LOC 7
2894: PPUSH
2895: LD_INT 69
2897: PPUSH
2898: LD_INT 32
2900: PPUSH
2901: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2905: LD_LOC 5
2909: PPUSH
2910: LD_INT 66
2912: PPUSH
2913: LD_INT 28
2915: PPUSH
2916: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2920: LD_LOC 8
2924: PPUSH
2925: LD_INT 67
2927: PPUSH
2928: LD_INT 30
2930: PPUSH
2931: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2935: LD_LOC 9
2939: PPUSH
2940: LD_INT 68
2942: PPUSH
2943: LD_INT 32
2945: PPUSH
2946: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2950: LD_LOC 10
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: LD_INT 27
2960: PPUSH
2961: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2965: LD_EXP 1
2969: PPUSH
2970: LD_INT 49
2972: PPUSH
2973: LD_INT 27
2975: PPUSH
2976: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
2980: LD_LOC 3
2984: PPUSH
2985: LD_INT 85
2987: PPUSH
2988: LD_INT 33
2990: PPUSH
2991: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
2995: LD_LOC 6
2999: PPUSH
3000: LD_INT 85
3002: PPUSH
3003: LD_INT 33
3005: PPUSH
3006: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3010: LD_LOC 7
3014: PPUSH
3015: LD_INT 85
3017: PPUSH
3018: LD_INT 33
3020: PPUSH
3021: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3025: LD_LOC 5
3029: PPUSH
3030: LD_INT 85
3032: PPUSH
3033: LD_INT 33
3035: PPUSH
3036: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3040: LD_LOC 8
3044: PPUSH
3045: LD_INT 85
3047: PPUSH
3048: LD_INT 33
3050: PPUSH
3051: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3055: LD_LOC 9
3059: PPUSH
3060: LD_INT 85
3062: PPUSH
3063: LD_INT 33
3065: PPUSH
3066: CALL_OW 178
// wait ( 0 0$9 ) ;
3070: LD_INT 315
3072: PPUSH
3073: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3077: LD_EXP 1
3081: PPUSH
3082: LD_STRING DXReady-Off2-3
3084: PPUSH
3085: CALL_OW 88
// wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// case query ( QQuit ) of 1 :
3096: LD_STRING QQuit
3098: PPUSH
3099: CALL_OW 97
3103: PUSH
3104: LD_INT 1
3106: DOUBLE
3107: EQUAL
3108: IFTRUE 3112
3110: GO 3185
3112: POP
// begin SA_OnNotEonEnter ;
3113: CALL 3722 0 0
// say ( off2 , DQrQuit#1-Off2-1 ) ;
3117: LD_EXP 1
3121: PPUSH
3122: LD_STRING DQrQuit#1-Off2-1
3124: PPUSH
3125: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3129: LD_LOC 3
3133: PPUSH
3134: LD_STRING DQrQuit#1-JMM-1a
3136: PPUSH
3137: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3141: LD_EXP 1
3145: PPUSH
3146: LD_STRING DQrQuit#1-Off2-2
3148: PPUSH
3149: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3153: LD_LOC 3
3157: PPUSH
3158: LD_INT 73
3160: PPUSH
3161: LD_INT 49
3163: PPUSH
3164: CALL_OW 111
// wait ( 0 0$3 ) ;
3168: LD_INT 105
3170: PPUSH
3171: CALL_OW 67
// ingameoff ;
3175: CALL_OW 9
// YouDidSomethingExtraordinary ;
3179: CALL_OW 105
// end ; 2 :
3183: GO 3396
3185: LD_INT 2
3187: DOUBLE
3188: EQUAL
3189: IFTRUE 3193
3191: GO 3395
3193: POP
// begin SA_OnEonEnter ;
3194: CALL 3707 0 0
// disable ( 29 ) ;
3198: LD_INT 29
3200: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3201: LD_INT 35
3203: PPUSH
3204: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3208: LD_EXP 1
3212: PPUSH
3213: LD_STRING DXReady-Off2-4
3215: PPUSH
3216: CALL_OW 88
// wait ( 0 0$1 ) ;
3220: LD_INT 35
3222: PPUSH
3223: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3227: LD_LOC 10
3231: PPUSH
3232: LD_STRING DXReady-Off-2
3234: PPUSH
3235: CALL_OW 88
// comenterunit ( will , eon ) ;
3239: LD_LOC 8
3243: PPUSH
3244: LD_INT 14
3246: PPUSH
3247: CALL_OW 120
// wait ( 0 0$3 ) ;
3251: LD_INT 105
3253: PPUSH
3254: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3258: LD_LOC 10
3262: PPUSH
3263: LD_STRING DXReady-Off-3
3265: PPUSH
3266: CALL_OW 88
// comenterunit ( sik , eon ) ;
3270: LD_LOC 5
3274: PPUSH
3275: LD_INT 14
3277: PPUSH
3278: CALL_OW 120
// wait ( 0 0$3 ) ;
3282: LD_INT 105
3284: PPUSH
3285: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3289: LD_LOC 10
3293: PPUSH
3294: LD_STRING DXReady-Off-4
3296: PPUSH
3297: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3301: LD_LOC 6
3305: PPUSH
3306: LD_INT 14
3308: PPUSH
3309: CALL_OW 120
// wait ( 0 0$3 ) ;
3313: LD_INT 105
3315: PPUSH
3316: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3320: LD_LOC 10
3324: PPUSH
3325: LD_STRING DXReady-Off-5
3327: PPUSH
3328: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3332: LD_LOC 3
3336: PPUSH
3337: LD_INT 76
3339: PPUSH
3340: LD_INT 34
3342: PPUSH
3343: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3347: LD_LOC 3
3351: PPUSH
3352: LD_INT 76
3354: PPUSH
3355: LD_INT 33
3357: PPUSH
3358: CALL_OW 178
// wait ( 0 0$4 ) ;
3362: LD_INT 140
3364: PPUSH
3365: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3369: LD_LOC 3
3373: PPUSH
3374: LD_STRING DQrQuit#2-JMM-1
3376: PPUSH
3377: CALL_OW 88
// comenterunit ( john , eon ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_INT 14
3388: PPUSH
3389: CALL_OW 120
// end ; end ;
3393: GO 3396
3395: POP
// end ;
3396: END
// on enterbuilding ( b , un ) do begin if b = eon then
3397: LD_VAR 0 1
3401: PUSH
3402: LD_INT 14
3404: EQUAL
3405: IFFALSE 3514
// case un of john :
3407: LD_VAR 0 2
3411: PUSH
3412: LD_LOC 3
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3504
3422: POP
// if not killhim then
3423: LD_LOC 16
3427: NOT
3428: IFFALSE 3461
// begin wait ( 0 0$1.3 ) ;
3430: LD_INT 46
3432: PPUSH
3433: CALL_OW 67
// savecharacters ( john , JMM ) ;
3437: LD_LOC 3
3441: PPUSH
3442: LD_STRING JMM
3444: PPUSH
3445: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3449: LD_STRING 1
3451: PPUSH
3452: LD_STRING %_cont
3454: PPUSH
3455: CALL_OW 340
// end else
3459: GO 3502
// begin placeunitxy ( john , 76 , 34 , false ) ;
3461: LD_LOC 3
3465: PPUSH
3466: LD_INT 76
3468: PPUSH
3469: LD_INT 34
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3479: LD_LOC 11
3483: PUSH
3484: LD_LOC 10
3488: PUSH
3489: EMPTY
3490: LIST
3491: ADD
3492: PPUSH
3493: LD_LOC 3
3497: PPUSH
3498: CALL_OW 115
// end ; else
3502: GO 3514
3504: POP
// RemoveUnit ( un ) ; end ;
3505: LD_VAR 0 2
3509: PPUSH
3510: CALL_OW 64
// end ;
3514: PPOPN 2
3516: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3517: LD_VAR 0 1
3521: PUSH
3522: LD_INT 1
3524: EQUAL
3525: PUSH
3526: LD_VAR 0 2
3530: PUSH
3531: LD_INT 4
3533: EQUAL
3534: AND
3535: PUSH
3536: LD_LOC 16
3540: PUSH
3541: LD_INT 0
3543: EQUAL
3544: AND
3545: IFFALSE 3639
// begin wait ( 0 0$1 ) ;
3547: LD_INT 35
3549: PPUSH
3550: CALL_OW 67
// music_class = 1 ;
3554: LD_ADDR_OWVAR 72
3558: PUSH
3559: LD_INT 1
3561: ST_TO_ADDR
// DialogueOn ;
3562: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3566: LD_LOC 5
3570: PPUSH
3571: LD_STRING DXAttack-Sik-1
3573: PPUSH
3574: CALL_OW 88
// dialogueoff ;
3578: CALL_OW 7
// killhim = true ;
3582: LD_ADDR_LOC 16
3586: PUSH
3587: LD_INT 1
3589: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3590: LD_LOC 1
3594: PPUSH
3595: LD_LOC 2
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3610: LD_LOC 11
3614: PUSH
3615: LD_LOC 10
3619: PUSH
3620: LD_EXP 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: ADD
3629: PPUSH
3630: LD_LOC 3
3634: PPUSH
3635: CALL_OW 115
// end ; end ;
3639: PPOPN 2
3641: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3642: LD_VAR 0 2
3646: PUSH
3647: LD_LOC 3
3651: EQUAL
3652: IFFALSE 3689
// begin async ;
3654: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3655: LD_LOC 4
3659: PPUSH
3660: LD_STRING DXComments-Joan-1
3662: PPUSH
3663: CALL_OW 88
// ComExitVehicle ( john ) ;
3667: LD_LOC 3
3671: PPUSH
3672: CALL_OW 121
// SetSide ( veh , 4 ) ;
3676: LD_VAR 0 1
3680: PPUSH
3681: LD_INT 4
3683: PPUSH
3684: CALL_OW 235
// sync ;
3688: SYNC
// end ; end ; end_of_file
3689: PPOPN 2
3691: END
// export function SA_OnAttackFriends ; begin
3692: LD_INT 0
3694: PPUSH
// SetAchievement ( ACH_MAD ) ;
3695: LD_STRING ACH_MAD
3697: PPUSH
3698: CALL_OW 543
// end ;
3702: LD_VAR 0 1
3706: RET
// export function SA_OnEonEnter ; begin
3707: LD_INT 0
3709: PPUSH
// SetAchievement ( ACH_EON ) ;
3710: LD_STRING ACH_EON
3712: PPUSH
3713: CALL_OW 543
// end ;
3717: LD_VAR 0 1
3721: RET
// export function SA_OnNotEonEnter ; begin
3722: LD_INT 0
3724: PPUSH
// SetAchievement ( ACH_CF ) ;
3725: LD_STRING ACH_CF
3727: PPUSH
3728: CALL_OW 543
// end ; end_of_file
3732: LD_VAR 0 1
3736: RET
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3737: LD_INT 0
3739: PPUSH
// uc_side := 4 ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_INT 4
3747: ST_TO_ADDR
// uc_nation := nation_american ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_INT 1
3755: ST_TO_ADDR
// hc_importance = 50 ;
3756: LD_ADDR_OWVAR 32
3760: PUSH
3761: LD_INT 50
3763: ST_TO_ADDR
// hc_sex = sex_male ;
3764: LD_ADDR_OWVAR 27
3768: PUSH
3769: LD_INT 1
3771: ST_TO_ADDR
// hc_class = 1 ;
3772: LD_ADDR_OWVAR 28
3776: PUSH
3777: LD_INT 1
3779: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3780: LD_ADDR_OWVAR 30
3784: PUSH
3785: LD_INT 7
3787: PUSH
3788: LD_INT 3
3790: PUSH
3791: LD_INT 2
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3803: LD_ADDR_OWVAR 31
3807: PUSH
3808: LD_INT 7
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3826: LD_ADDR_OWVAR 29
3830: PUSH
3831: LD_INT 11
3833: PUSH
3834: LD_INT 11
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// hc_name := Officer2 ;
3841: LD_ADDR_OWVAR 26
3845: PUSH
3846: LD_STRING Officer2
3848: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3849: LD_ADDR_OWVAR 33
3853: PUSH
3854: LD_STRING AmGalRemake
3856: ST_TO_ADDR
// hc_face_number := 3 ;
3857: LD_ADDR_OWVAR 34
3861: PUSH
3862: LD_INT 3
3864: ST_TO_ADDR
// off2 := CreateHuman ;
3865: LD_ADDR_EXP 1
3869: PUSH
3870: CALL_OW 44
3874: ST_TO_ADDR
// end ;
3875: LD_VAR 0 1
3879: RET
// export function CreatePersonnel ; begin
3880: LD_INT 0
3882: PPUSH
// uc_side := 4 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 4
3890: ST_TO_ADDR
// uc_nation := nation_american ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 1
3898: ST_TO_ADDR
// hc_importance = 10 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 10
3906: ST_TO_ADDR
// hc_name :=  ;
3907: LD_ADDR_OWVAR 26
3911: PUSH
3912: LD_STRING 
3914: ST_TO_ADDR
// hc_gallery :=  ;
3915: LD_ADDR_OWVAR 33
3919: PUSH
3920: LD_STRING 
3922: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 2
3928: NEG
3929: PPUSH
3930: CALL_OW 382
// engi1 := CreateHuman ;
3934: LD_ADDR_EXP 2
3938: PUSH
3939: CALL_OW 44
3943: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3944: LD_INT 1
3946: PPUSH
3947: LD_INT 2
3949: NEG
3950: PPUSH
3951: CALL_OW 382
// engi2 := CreateHuman ;
3955: LD_ADDR_EXP 3
3959: PUSH
3960: CALL_OW 44
3964: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3965: LD_EXP 2
3969: PPUSH
3970: LD_INT 10
3972: PPUSH
3973: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3977: LD_EXP 3
3981: PPUSH
3982: LD_INT 10
3984: PPUSH
3985: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 1
3994: NEG
3995: PPUSH
3996: CALL_OW 383
// truckdriver := CreateHuman ;
4000: LD_ADDR_EXP 4
4004: PUSH
4005: CALL_OW 44
4009: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4010: LD_EXP 4
4014: PPUSH
4015: LD_INT 27
4017: PPUSH
4018: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4022: LD_INT 27
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: LD_INT 100
4030: PPUSH
4031: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 381
// hc_class = class_sniper ;
4045: LD_ADDR_OWVAR 28
4049: PUSH
4050: LD_INT 5
4052: ST_TO_ADDR
// snip1 := CreateHuman ;
4053: LD_ADDR_EXP 6
4057: PUSH
4058: CALL_OW 44
4062: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4063: LD_INT 2
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: CALL_OW 381
// hc_class = class_sniper ;
4073: LD_ADDR_OWVAR 28
4077: PUSH
4078: LD_INT 5
4080: ST_TO_ADDR
// snip2 := CreateHuman ;
4081: LD_ADDR_EXP 7
4085: PUSH
4086: CALL_OW 44
4090: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4091: LD_EXP 6
4095: PPUSH
4096: LD_INT 47
4098: PPUSH
4099: LD_INT 17
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4109: LD_EXP 7
4113: PPUSH
4114: LD_INT 29
4116: PPUSH
4117: LD_INT 31
4119: PPUSH
4120: LD_INT 0
4122: PPUSH
4123: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4127: LD_EXP 6
4131: PUSH
4132: LD_EXP 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PPUSH
4141: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4145: LD_INT 1
4147: PPUSH
4148: LD_INT 3
4150: PPUSH
4151: CALL_OW 381
// sol1 := CreateHuman ;
4155: LD_ADDR_EXP 8
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4165: LD_EXP 8
4169: PPUSH
4170: LD_INT 2
4172: PPUSH
4173: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4177: LD_EXP 8
4181: PPUSH
4182: LD_INT 15
4184: PPUSH
4185: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4189: LD_INT 1
4191: PPUSH
4192: LD_INT 3
4194: PPUSH
4195: CALL_OW 381
// sol2 := CreateHuman ;
4199: LD_ADDR_EXP 9
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 3
4214: PPUSH
4215: CALL_OW 381
// sol3 := CreateHuman ;
4219: LD_ADDR_EXP 10
4223: PUSH
4224: CALL_OW 44
4228: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4229: LD_EXP 9
4233: PPUSH
4234: LD_INT 40
4236: PPUSH
4237: LD_INT 42
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4247: LD_EXP 10
4251: PPUSH
4252: LD_INT 53
4254: PPUSH
4255: LD_INT 34
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 381
// pat1 := CreateHuman ;
4275: LD_ADDR_EXP 11
4279: PUSH
4280: CALL_OW 44
4284: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 3
4290: PPUSH
4291: CALL_OW 381
// pat2 := CreateHuman ;
4295: LD_ADDR_EXP 12
4299: PUSH
4300: CALL_OW 44
4304: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4305: LD_EXP 11
4309: PPUSH
4310: LD_INT 29
4312: PPUSH
4313: LD_INT 6
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4323: LD_EXP 12
4327: PPUSH
4328: LD_INT 30
4330: PPUSH
4331: LD_INT 7
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4341: LD_ADDR_EXP 13
4345: PUSH
4346: LD_EXP 11
4350: PUSH
4351: LD_EXP 12
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4360: LD_ADDR_EXP 14
4364: PUSH
4365: LD_EXP 2
4369: PUSH
4370: LD_EXP 3
4374: PUSH
4375: LD_EXP 8
4379: PUSH
4380: LD_EXP 9
4384: PUSH
4385: LD_EXP 10
4389: PUSH
4390: LD_EXP 6
4394: PUSH
4395: LD_EXP 7
4399: PUSH
4400: LD_EXP 13
4404: PUSH
4405: LD_EXP 4
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// end ;
4421: LD_VAR 0 1
4425: RET
// every 0 0$1 do
4426: GO 4428
4428: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4429: LD_EXP 13
4433: PPUSH
4434: LD_INT 64
4436: PPUSH
4437: LD_INT 22
4439: PPUSH
4440: CALL_OW 171
// wait ( 0 0$25 ) ;
4444: LD_INT 875
4446: PPUSH
4447: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4451: LD_EXP 13
4455: PPUSH
4456: LD_INT 30
4458: PPUSH
4459: LD_INT 8
4461: PPUSH
4462: CALL_OW 171
// wait ( 0 0$25 ) ;
4466: LD_INT 875
4468: PPUSH
4469: CALL_OW 67
// enable ;
4473: ENABLE
// end ;
4474: END
// every 0 0$1 do
4475: GO 4477
4477: DISABLE
// begin SetLives ( truck , 550 ) ;
4478: LD_INT 27
4480: PPUSH
4481: LD_INT 550
4483: PPUSH
4484: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4488: LD_INT 27
4490: PPUSH
4491: LD_INT 42
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 111
// AddComUnload ( truck ) ;
4501: LD_INT 27
4503: PPUSH
4504: CALL_OW 219
// Wait ( 0 0$8 ) ;
4508: LD_INT 280
4510: PPUSH
4511: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4515: LD_EXP 2
4519: PUSH
4520: LD_EXP 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: LD_INT 45
4531: PPUSH
4532: LD_INT 36
4534: PPUSH
4535: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4539: LD_EXP 4
4543: PPUSH
4544: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4548: LD_EXP 4
4552: PPUSH
4553: LD_INT 40
4555: PPUSH
4556: LD_INT 33
4558: PPUSH
4559: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4563: LD_INT 35
4565: PPUSH
4566: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_INT 27
4577: PPUSH
4578: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4582: LD_INT 27
4584: PPUSH
4585: CALL_OW 256
4589: PUSH
4590: LD_INT 1000
4592: EQUAL
4593: IFFALSE 4563
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4595: LD_EXP 2
4599: PUSH
4600: LD_EXP 3
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PPUSH
4609: LD_INT 10
4611: PPUSH
4612: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4616: LD_INT 35
4618: PPUSH
4619: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4623: LD_INT 27
4625: PPUSH
4626: CALL_OW 311
4630: NOT
4631: IFFALSE 4616
// ComEnterUnit ( truckdriver , truck ) ;
4633: LD_EXP 4
4637: PPUSH
4638: LD_INT 27
4640: PPUSH
4641: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 74
4652: PPUSH
4653: LD_INT 52
4655: PPUSH
4656: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4660: LD_EXP 4
4664: PPUSH
4665: LD_INT 90
4667: PPUSH
4668: LD_INT 58
4670: PPUSH
4671: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4675: LD_EXP 4
4679: PPUSH
4680: LD_INT 98
4682: PPUSH
4683: LD_INT 61
4685: PPUSH
4686: CALL_OW 171
// end ;
4690: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4691: LD_INT 7
4693: PPUSH
4694: LD_INT 22
4696: PUSH
4697: LD_INT 4
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PPUSH
4704: CALL_OW 70
4708: IFFALSE 4756
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
// begin enable ;
4716: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_INT 7
4724: PPUSH
4725: LD_INT 22
4727: PUSH
4728: LD_INT 4
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 70
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4754
// RemoveUnit ( i ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: CALL_OW 64
4752: GO 4740
4754: POP
4755: POP
// end ;
4756: PPOPN 1
4758: END
