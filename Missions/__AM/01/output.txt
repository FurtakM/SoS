// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4874 0 0
// DefineStreamItems ( ) ;
4869: CALL 5314 0 0
// end ;
4873: END
// function InitStreamMode ; begin
4874: LD_INT 0
4876: PPUSH
// streamModeActive := false ;
4877: LD_ADDR_EXP 15
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// normalCounter := 36 ;
4885: LD_ADDR_EXP 16
4889: PUSH
4890: LD_INT 36
4892: ST_TO_ADDR
// hardcoreCounter := 16 ;
4893: LD_ADDR_EXP 17
4897: PUSH
4898: LD_INT 16
4900: ST_TO_ADDR
// sRocket := false ;
4901: LD_ADDR_EXP 20
4905: PUSH
4906: LD_INT 0
4908: ST_TO_ADDR
// sSpeed := false ;
4909: LD_ADDR_EXP 19
4913: PUSH
4914: LD_INT 0
4916: ST_TO_ADDR
// sEngine := false ;
4917: LD_ADDR_EXP 21
4921: PUSH
4922: LD_INT 0
4924: ST_TO_ADDR
// sSpec := false ;
4925: LD_ADDR_EXP 18
4929: PUSH
4930: LD_INT 0
4932: ST_TO_ADDR
// sLevel := false ;
4933: LD_ADDR_EXP 22
4937: PUSH
4938: LD_INT 0
4940: ST_TO_ADDR
// sArmoury := false ;
4941: LD_ADDR_EXP 23
4945: PUSH
4946: LD_INT 0
4948: ST_TO_ADDR
// sRadar := false ;
4949: LD_ADDR_EXP 24
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// sBunker := false ;
4957: LD_ADDR_EXP 25
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// sHack := false ;
4965: LD_ADDR_EXP 26
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// sFire := false ;
4973: LD_ADDR_EXP 27
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// sRefresh := false ;
4981: LD_ADDR_EXP 28
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// sExp := false ;
4989: LD_ADDR_EXP 29
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// sDepot := false ;
4997: LD_ADDR_EXP 30
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// sFlag := false ;
5005: LD_ADDR_EXP 31
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// sKamikadze := false ;
5013: LD_ADDR_EXP 39
5017: PUSH
5018: LD_INT 0
5020: ST_TO_ADDR
// sTroll := false ;
5021: LD_ADDR_EXP 40
5025: PUSH
5026: LD_INT 0
5028: ST_TO_ADDR
// sSlow := false ;
5029: LD_ADDR_EXP 41
5033: PUSH
5034: LD_INT 0
5036: ST_TO_ADDR
// sLack := false ;
5037: LD_ADDR_EXP 42
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// sTank := false ;
5045: LD_ADDR_EXP 44
5049: PUSH
5050: LD_INT 0
5052: ST_TO_ADDR
// sRemote := false ;
5053: LD_ADDR_EXP 45
5057: PUSH
5058: LD_INT 0
5060: ST_TO_ADDR
// sPowell := false ;
5061: LD_ADDR_EXP 46
5065: PUSH
5066: LD_INT 0
5068: ST_TO_ADDR
// sTeleport := false ;
5069: LD_ADDR_EXP 49
5073: PUSH
5074: LD_INT 0
5076: ST_TO_ADDR
// sOilTower := false ;
5077: LD_ADDR_EXP 51
5081: PUSH
5082: LD_INT 0
5084: ST_TO_ADDR
// sShovel := false ;
5085: LD_ADDR_EXP 52
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
// sSheik := false ;
5093: LD_ADDR_EXP 53
5097: PUSH
5098: LD_INT 0
5100: ST_TO_ADDR
// sEarthquake := false ;
5101: LD_ADDR_EXP 55
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// sAI := false ;
5109: LD_ADDR_EXP 56
5113: PUSH
5114: LD_INT 0
5116: ST_TO_ADDR
// sCargo := false ;
5117: LD_ADDR_EXP 59
5121: PUSH
5122: LD_INT 0
5124: ST_TO_ADDR
// sDLaser := false ;
5125: LD_ADDR_EXP 60
5129: PUSH
5130: LD_INT 0
5132: ST_TO_ADDR
// sExchange := false ;
5133: LD_ADDR_EXP 61
5137: PUSH
5138: LD_INT 0
5140: ST_TO_ADDR
// sFac := false ;
5141: LD_ADDR_EXP 62
5145: PUSH
5146: LD_INT 0
5148: ST_TO_ADDR
// sPower := false ;
5149: LD_ADDR_EXP 63
5153: PUSH
5154: LD_INT 0
5156: ST_TO_ADDR
// sRandom := false ;
5157: LD_ADDR_EXP 64
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// sShield := false ;
5165: LD_ADDR_EXP 65
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// sTime := false ;
5173: LD_ADDR_EXP 66
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
// sTools := false ;
5181: LD_ADDR_EXP 67
5185: PUSH
5186: LD_INT 0
5188: ST_TO_ADDR
// sSold := false ;
5189: LD_ADDR_EXP 32
5193: PUSH
5194: LD_INT 0
5196: ST_TO_ADDR
// sDiff := false ;
5197: LD_ADDR_EXP 33
5201: PUSH
5202: LD_INT 0
5204: ST_TO_ADDR
// sFog := false ;
5205: LD_ADDR_EXP 36
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// sReset := false ;
5213: LD_ADDR_EXP 37
5217: PUSH
5218: LD_INT 0
5220: ST_TO_ADDR
// sSun := false ;
5221: LD_ADDR_EXP 38
5225: PUSH
5226: LD_INT 0
5228: ST_TO_ADDR
// sTiger := false ;
5229: LD_ADDR_EXP 34
5233: PUSH
5234: LD_INT 0
5236: ST_TO_ADDR
// sBomb := false ;
5237: LD_ADDR_EXP 35
5241: PUSH
5242: LD_INT 0
5244: ST_TO_ADDR
// sWound := false ;
5245: LD_ADDR_EXP 43
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// sBetray := false ;
5253: LD_ADDR_EXP 47
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// sContamin := false ;
5261: LD_ADDR_EXP 48
5265: PUSH
5266: LD_INT 0
5268: ST_TO_ADDR
// sOil := false ;
5269: LD_ADDR_EXP 50
5273: PUSH
5274: LD_INT 0
5276: ST_TO_ADDR
// sStu := false ;
5277: LD_ADDR_EXP 54
5281: PUSH
5282: LD_INT 0
5284: ST_TO_ADDR
// sBazooka := false ;
5285: LD_ADDR_EXP 57
5289: PUSH
5290: LD_INT 0
5292: ST_TO_ADDR
// sMortar := false ;
5293: LD_ADDR_EXP 58
5297: PUSH
5298: LD_INT 0
5300: ST_TO_ADDR
// sRanger := false ;
5301: LD_ADDR_EXP 68
5305: PUSH
5306: LD_INT 0
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 1
5313: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
5319: PPUSH
5320: PPUSH
// result := [ ] ;
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// if campaign_id = 1 then
5328: LD_OWVAR 69
5332: PUSH
5333: LD_INT 1
5335: EQUAL
5336: IFFALSE 8274
// begin case mission_number of 1 :
5338: LD_OWVAR 70
5342: PUSH
5343: LD_INT 1
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5415
5351: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 15
5371: PUSH
5372: LD_INT 16
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 26
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 101
5397: PUSH
5398: LD_INT 102
5400: PUSH
5401: LD_INT 106
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 8272
5415: LD_INT 2
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5495
5423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 11
5437: PUSH
5438: LD_INT 12
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: LD_INT 16
5446: PUSH
5447: LD_INT 22
5449: PUSH
5450: LD_INT 23
5452: PUSH
5453: LD_INT 26
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 101
5469: PUSH
5470: LD_INT 102
5472: PUSH
5473: LD_INT 105
5475: PUSH
5476: LD_INT 106
5478: PUSH
5479: LD_INT 108
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 8272
5495: LD_INT 3
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5579
5503: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5504: LD_ADDR_VAR 0 1
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: LD_INT 5
5517: PUSH
5518: LD_INT 11
5520: PUSH
5521: LD_INT 12
5523: PUSH
5524: LD_INT 15
5526: PUSH
5527: LD_INT 16
5529: PUSH
5530: LD_INT 22
5532: PUSH
5533: LD_INT 26
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 101
5553: PUSH
5554: LD_INT 102
5556: PUSH
5557: LD_INT 105
5559: PUSH
5560: LD_INT 106
5562: PUSH
5563: LD_INT 108
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: ST_TO_ADDR
5577: GO 8272
5579: LD_INT 4
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 5671
5587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 4
5598: PUSH
5599: LD_INT 5
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 11
5607: PUSH
5608: LD_INT 12
5610: PUSH
5611: LD_INT 15
5613: PUSH
5614: LD_INT 16
5616: PUSH
5617: LD_INT 22
5619: PUSH
5620: LD_INT 23
5622: PUSH
5623: LD_INT 26
5625: PUSH
5626: LD_INT 36
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 101
5645: PUSH
5646: LD_INT 102
5648: PUSH
5649: LD_INT 105
5651: PUSH
5652: LD_INT 106
5654: PUSH
5655: LD_INT 108
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 8272
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5779
5679: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5680: LD_ADDR_VAR 0 1
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: LD_INT 6
5696: PUSH
5697: LD_INT 8
5699: PUSH
5700: LD_INT 11
5702: PUSH
5703: LD_INT 12
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: LD_INT 16
5711: PUSH
5712: LD_INT 22
5714: PUSH
5715: LD_INT 23
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 36
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 105
5751: PUSH
5752: LD_INT 106
5754: PUSH
5755: LD_INT 108
5757: PUSH
5758: LD_INT 109
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8272
5779: LD_INT 6
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5907
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 8
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 15
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: LD_INT 20
5822: PUSH
5823: LD_INT 21
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 23
5831: PUSH
5832: LD_INT 25
5834: PUSH
5835: LD_INT 26
5837: PUSH
5838: LD_INT 30
5840: PUSH
5841: LD_INT 31
5843: PUSH
5844: LD_INT 32
5846: PUSH
5847: LD_INT 36
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 105
5879: PUSH
5880: LD_INT 106
5882: PUSH
5883: LD_INT 108
5885: PUSH
5886: LD_INT 109
5888: PUSH
5889: LD_INT 112
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 8272
5907: LD_INT 7
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 6015
5915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: LD_INT 2
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 15
5941: PUSH
5942: LD_INT 16
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 21
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 23
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 101
5981: PUSH
5982: LD_INT 102
5984: PUSH
5985: LD_INT 103
5987: PUSH
5988: LD_INT 105
5990: PUSH
5991: LD_INT 106
5993: PUSH
5994: LD_INT 108
5996: PUSH
5997: LD_INT 112
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8272
6015: LD_INT 8
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6151
6023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 6
6040: PUSH
6041: LD_INT 7
6043: PUSH
6044: LD_INT 8
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 20
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 23
6070: PUSH
6071: LD_INT 25
6073: PUSH
6074: LD_INT 26
6076: PUSH
6077: LD_INT 30
6079: PUSH
6080: LD_INT 31
6082: PUSH
6083: LD_INT 32
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 101
6113: PUSH
6114: LD_INT 102
6116: PUSH
6117: LD_INT 103
6119: PUSH
6120: LD_INT 105
6122: PUSH
6123: LD_INT 106
6125: PUSH
6126: LD_INT 108
6128: PUSH
6129: LD_INT 109
6131: PUSH
6132: LD_INT 112
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 8272
6151: LD_INT 9
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6295
6159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6160: LD_ADDR_VAR 0 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: LD_INT 8
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 20
6197: PUSH
6198: LD_INT 21
6200: PUSH
6201: LD_INT 22
6203: PUSH
6204: LD_INT 23
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 28
6215: PUSH
6216: LD_INT 30
6218: PUSH
6219: LD_INT 31
6221: PUSH
6222: LD_INT 32
6224: PUSH
6225: LD_INT 36
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 101
6253: PUSH
6254: LD_INT 102
6256: PUSH
6257: LD_INT 103
6259: PUSH
6260: LD_INT 105
6262: PUSH
6263: LD_INT 106
6265: PUSH
6266: LD_INT 108
6268: PUSH
6269: LD_INT 109
6271: PUSH
6272: LD_INT 112
6274: PUSH
6275: LD_INT 114
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: ST_TO_ADDR
6293: GO 8272
6295: LD_INT 10
6297: DOUBLE
6298: EQUAL
6299: IFTRUE 6303
6301: GO 6487
6303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 5
6317: PUSH
6318: LD_INT 6
6320: PUSH
6321: LD_INT 7
6323: PUSH
6324: LD_INT 8
6326: PUSH
6327: LD_INT 9
6329: PUSH
6330: LD_INT 10
6332: PUSH
6333: LD_INT 11
6335: PUSH
6336: LD_INT 12
6338: PUSH
6339: LD_INT 13
6341: PUSH
6342: LD_INT 14
6344: PUSH
6345: LD_INT 15
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: LD_INT 17
6353: PUSH
6354: LD_INT 18
6356: PUSH
6357: LD_INT 19
6359: PUSH
6360: LD_INT 20
6362: PUSH
6363: LD_INT 21
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 24
6374: PUSH
6375: LD_INT 25
6377: PUSH
6378: LD_INT 26
6380: PUSH
6381: LD_INT 28
6383: PUSH
6384: LD_INT 30
6386: PUSH
6387: LD_INT 31
6389: PUSH
6390: LD_INT 32
6392: PUSH
6393: LD_INT 36
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 101
6429: PUSH
6430: LD_INT 102
6432: PUSH
6433: LD_INT 103
6435: PUSH
6436: LD_INT 104
6438: PUSH
6439: LD_INT 105
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 107
6447: PUSH
6448: LD_INT 108
6450: PUSH
6451: LD_INT 109
6453: PUSH
6454: LD_INT 110
6456: PUSH
6457: LD_INT 111
6459: PUSH
6460: LD_INT 112
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 8272
6487: LD_INT 11
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6687
6495: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: LD_INT 6
6515: PUSH
6516: LD_INT 7
6518: PUSH
6519: LD_INT 8
6521: PUSH
6522: LD_INT 9
6524: PUSH
6525: LD_INT 10
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: LD_INT 15
6542: PUSH
6543: LD_INT 16
6545: PUSH
6546: LD_INT 17
6548: PUSH
6549: LD_INT 18
6551: PUSH
6552: LD_INT 19
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 24
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 26
6575: PUSH
6576: LD_INT 28
6578: PUSH
6579: LD_INT 30
6581: PUSH
6582: LD_INT 31
6584: PUSH
6585: LD_INT 32
6587: PUSH
6588: LD_INT 34
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 101
6629: PUSH
6630: LD_INT 102
6632: PUSH
6633: LD_INT 103
6635: PUSH
6636: LD_INT 104
6638: PUSH
6639: LD_INT 105
6641: PUSH
6642: LD_INT 106
6644: PUSH
6645: LD_INT 107
6647: PUSH
6648: LD_INT 108
6650: PUSH
6651: LD_INT 109
6653: PUSH
6654: LD_INT 110
6656: PUSH
6657: LD_INT 111
6659: PUSH
6660: LD_INT 112
6662: PUSH
6663: LD_INT 114
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 8272
6687: LD_INT 12
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6903
6695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: LD_INT 6
6718: PUSH
6719: LD_INT 7
6721: PUSH
6722: LD_INT 8
6724: PUSH
6725: LD_INT 9
6727: PUSH
6728: LD_INT 10
6730: PUSH
6731: LD_INT 11
6733: PUSH
6734: LD_INT 12
6736: PUSH
6737: LD_INT 13
6739: PUSH
6740: LD_INT 14
6742: PUSH
6743: LD_INT 15
6745: PUSH
6746: LD_INT 16
6748: PUSH
6749: LD_INT 17
6751: PUSH
6752: LD_INT 18
6754: PUSH
6755: LD_INT 19
6757: PUSH
6758: LD_INT 20
6760: PUSH
6761: LD_INT 21
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 23
6769: PUSH
6770: LD_INT 24
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 28
6784: PUSH
6785: LD_INT 30
6787: PUSH
6788: LD_INT 31
6790: PUSH
6791: LD_INT 32
6793: PUSH
6794: LD_INT 33
6796: PUSH
6797: LD_INT 34
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 101
6841: PUSH
6842: LD_INT 102
6844: PUSH
6845: LD_INT 103
6847: PUSH
6848: LD_INT 104
6850: PUSH
6851: LD_INT 105
6853: PUSH
6854: LD_INT 106
6856: PUSH
6857: LD_INT 107
6859: PUSH
6860: LD_INT 108
6862: PUSH
6863: LD_INT 109
6865: PUSH
6866: LD_INT 110
6868: PUSH
6869: LD_INT 111
6871: PUSH
6872: LD_INT 112
6874: PUSH
6875: LD_INT 113
6877: PUSH
6878: LD_INT 114
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
6901: GO 8272
6903: LD_INT 13
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7107
6911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: LD_INT 5
6931: PUSH
6932: LD_INT 8
6934: PUSH
6935: LD_INT 9
6937: PUSH
6938: LD_INT 10
6940: PUSH
6941: LD_INT 11
6943: PUSH
6944: LD_INT 12
6946: PUSH
6947: LD_INT 14
6949: PUSH
6950: LD_INT 15
6952: PUSH
6953: LD_INT 16
6955: PUSH
6956: LD_INT 17
6958: PUSH
6959: LD_INT 18
6961: PUSH
6962: LD_INT 19
6964: PUSH
6965: LD_INT 20
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 26
6985: PUSH
6986: LD_INT 27
6988: PUSH
6989: LD_INT 28
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 31
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: LD_INT 33
7003: PUSH
7004: LD_INT 34
7006: PUSH
7007: LD_INT 36
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 101
7045: PUSH
7046: LD_INT 102
7048: PUSH
7049: LD_INT 103
7051: PUSH
7052: LD_INT 104
7054: PUSH
7055: LD_INT 105
7057: PUSH
7058: LD_INT 106
7060: PUSH
7061: LD_INT 107
7063: PUSH
7064: LD_INT 108
7066: PUSH
7067: LD_INT 109
7069: PUSH
7070: LD_INT 110
7072: PUSH
7073: LD_INT 111
7075: PUSH
7076: LD_INT 112
7078: PUSH
7079: LD_INT 113
7081: PUSH
7082: LD_INT 114
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: ST_TO_ADDR
7105: GO 8272
7107: LD_INT 14
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7327
7115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7116: LD_ADDR_VAR 0 1
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: LD_INT 2
7126: PUSH
7127: LD_INT 3
7129: PUSH
7130: LD_INT 4
7132: PUSH
7133: LD_INT 5
7135: PUSH
7136: LD_INT 6
7138: PUSH
7139: LD_INT 7
7141: PUSH
7142: LD_INT 8
7144: PUSH
7145: LD_INT 9
7147: PUSH
7148: LD_INT 10
7150: PUSH
7151: LD_INT 11
7153: PUSH
7154: LD_INT 12
7156: PUSH
7157: LD_INT 13
7159: PUSH
7160: LD_INT 14
7162: PUSH
7163: LD_INT 15
7165: PUSH
7166: LD_INT 16
7168: PUSH
7169: LD_INT 17
7171: PUSH
7172: LD_INT 18
7174: PUSH
7175: LD_INT 19
7177: PUSH
7178: LD_INT 20
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 26
7198: PUSH
7199: LD_INT 27
7201: PUSH
7202: LD_INT 28
7204: PUSH
7205: LD_INT 29
7207: PUSH
7208: LD_INT 30
7210: PUSH
7211: LD_INT 31
7213: PUSH
7214: LD_INT 32
7216: PUSH
7217: LD_INT 33
7219: PUSH
7220: LD_INT 34
7222: PUSH
7223: LD_INT 36
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 102
7268: PUSH
7269: LD_INT 103
7271: PUSH
7272: LD_INT 104
7274: PUSH
7275: LD_INT 105
7277: PUSH
7278: LD_INT 106
7280: PUSH
7281: LD_INT 107
7283: PUSH
7284: LD_INT 108
7286: PUSH
7287: LD_INT 109
7289: PUSH
7290: LD_INT 110
7292: PUSH
7293: LD_INT 111
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 113
7301: PUSH
7302: LD_INT 114
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 8272
7327: LD_INT 15
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7547
7335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: LD_INT 6
7358: PUSH
7359: LD_INT 7
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 9
7367: PUSH
7368: LD_INT 10
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: LD_INT 15
7385: PUSH
7386: LD_INT 16
7388: PUSH
7389: LD_INT 17
7391: PUSH
7392: LD_INT 18
7394: PUSH
7395: LD_INT 19
7397: PUSH
7398: LD_INT 20
7400: PUSH
7401: LD_INT 21
7403: PUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 26
7418: PUSH
7419: LD_INT 27
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 29
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: LD_INT 33
7439: PUSH
7440: LD_INT 34
7442: PUSH
7443: LD_INT 36
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 101
7485: PUSH
7486: LD_INT 102
7488: PUSH
7489: LD_INT 103
7491: PUSH
7492: LD_INT 104
7494: PUSH
7495: LD_INT 105
7497: PUSH
7498: LD_INT 106
7500: PUSH
7501: LD_INT 107
7503: PUSH
7504: LD_INT 108
7506: PUSH
7507: LD_INT 109
7509: PUSH
7510: LD_INT 110
7512: PUSH
7513: LD_INT 111
7515: PUSH
7516: LD_INT 112
7518: PUSH
7519: LD_INT 113
7521: PUSH
7522: LD_INT 114
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
7545: GO 8272
7547: LD_INT 16
7549: DOUBLE
7550: EQUAL
7551: IFTRUE 7555
7553: GO 7679
7555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7556: LD_ADDR_VAR 0 1
7560: PUSH
7561: LD_INT 2
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: LD_INT 7
7572: PUSH
7573: LD_INT 11
7575: PUSH
7576: LD_INT 12
7578: PUSH
7579: LD_INT 15
7581: PUSH
7582: LD_INT 16
7584: PUSH
7585: LD_INT 20
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 22
7593: PUSH
7594: LD_INT 23
7596: PUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 26
7602: PUSH
7603: LD_INT 30
7605: PUSH
7606: LD_INT 31
7608: PUSH
7609: LD_INT 32
7611: PUSH
7612: LD_INT 33
7614: PUSH
7615: LD_INT 34
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 101
7641: PUSH
7642: LD_INT 102
7644: PUSH
7645: LD_INT 103
7647: PUSH
7648: LD_INT 106
7650: PUSH
7651: LD_INT 108
7653: PUSH
7654: LD_INT 112
7656: PUSH
7657: LD_INT 113
7659: PUSH
7660: LD_INT 114
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: ST_TO_ADDR
7677: GO 8272
7679: LD_INT 17
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7899
7687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7688: LD_ADDR_VAR 0 1
7692: PUSH
7693: LD_INT 1
7695: PUSH
7696: LD_INT 2
7698: PUSH
7699: LD_INT 3
7701: PUSH
7702: LD_INT 4
7704: PUSH
7705: LD_INT 5
7707: PUSH
7708: LD_INT 6
7710: PUSH
7711: LD_INT 7
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 9
7719: PUSH
7720: LD_INT 10
7722: PUSH
7723: LD_INT 11
7725: PUSH
7726: LD_INT 12
7728: PUSH
7729: LD_INT 13
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 29
7779: PUSH
7780: LD_INT 30
7782: PUSH
7783: LD_INT 31
7785: PUSH
7786: LD_INT 32
7788: PUSH
7789: LD_INT 33
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 104
7846: PUSH
7847: LD_INT 105
7849: PUSH
7850: LD_INT 106
7852: PUSH
7853: LD_INT 107
7855: PUSH
7856: LD_INT 108
7858: PUSH
7859: LD_INT 109
7861: PUSH
7862: LD_INT 110
7864: PUSH
7865: LD_INT 111
7867: PUSH
7868: LD_INT 112
7870: PUSH
7871: LD_INT 113
7873: PUSH
7874: LD_INT 114
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 8272
7899: LD_INT 18
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8043
7907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7908: LD_ADDR_VAR 0 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 4
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: LD_INT 7
7924: PUSH
7925: LD_INT 11
7927: PUSH
7928: LD_INT 12
7930: PUSH
7931: LD_INT 15
7933: PUSH
7934: LD_INT 16
7936: PUSH
7937: LD_INT 20
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 23
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 26
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 31
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 35
7972: PUSH
7973: LD_INT 36
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 101
8001: PUSH
8002: LD_INT 102
8004: PUSH
8005: LD_INT 103
8007: PUSH
8008: LD_INT 106
8010: PUSH
8011: LD_INT 108
8013: PUSH
8014: LD_INT 112
8016: PUSH
8017: LD_INT 113
8019: PUSH
8020: LD_INT 114
8022: PUSH
8023: LD_INT 115
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: ST_TO_ADDR
8041: GO 8272
8043: LD_INT 19
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8271
8051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: LD_INT 4
8068: PUSH
8069: LD_INT 5
8071: PUSH
8072: LD_INT 6
8074: PUSH
8075: LD_INT 7
8077: PUSH
8078: LD_INT 8
8080: PUSH
8081: LD_INT 9
8083: PUSH
8084: LD_INT 10
8086: PUSH
8087: LD_INT 11
8089: PUSH
8090: LD_INT 12
8092: PUSH
8093: LD_INT 13
8095: PUSH
8096: LD_INT 14
8098: PUSH
8099: LD_INT 15
8101: PUSH
8102: LD_INT 16
8104: PUSH
8105: LD_INT 17
8107: PUSH
8108: LD_INT 18
8110: PUSH
8111: LD_INT 19
8113: PUSH
8114: LD_INT 20
8116: PUSH
8117: LD_INT 21
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 23
8125: PUSH
8126: LD_INT 24
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 27
8137: PUSH
8138: LD_INT 28
8140: PUSH
8141: LD_INT 29
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 31
8149: PUSH
8150: LD_INT 32
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 34
8158: PUSH
8159: LD_INT 35
8161: PUSH
8162: LD_INT 36
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 101
8205: PUSH
8206: LD_INT 102
8208: PUSH
8209: LD_INT 103
8211: PUSH
8212: LD_INT 104
8214: PUSH
8215: LD_INT 105
8217: PUSH
8218: LD_INT 106
8220: PUSH
8221: LD_INT 107
8223: PUSH
8224: LD_INT 108
8226: PUSH
8227: LD_INT 109
8229: PUSH
8230: LD_INT 110
8232: PUSH
8233: LD_INT 111
8235: PUSH
8236: LD_INT 112
8238: PUSH
8239: LD_INT 113
8241: PUSH
8242: LD_INT 114
8244: PUSH
8245: LD_INT 115
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: ST_TO_ADDR
8269: GO 8272
8271: POP
// end else
8272: GO 8309
// if campaign_id = 5 then
8274: LD_OWVAR 69
8278: PUSH
8279: LD_INT 5
8281: EQUAL
8282: IFFALSE 8309
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
8284: LD_ADDR_VAR 0 1
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 100
8301: PUSH
8302: EMPTY
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
// end ; if result then
8309: LD_VAR 0 1
8313: IFFALSE 8602
// begin normal :=  ;
8315: LD_ADDR_VAR 0 3
8319: PUSH
8320: LD_STRING 
8322: ST_TO_ADDR
// hardcore :=  ;
8323: LD_ADDR_VAR 0 4
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// for i = 1 to normalCounter do
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_EXP 16
8345: PUSH
8346: FOR_TO
8347: IFFALSE 8448
// begin tmp := 0 ;
8349: LD_ADDR_VAR 0 2
8353: PUSH
8354: LD_STRING 0
8356: ST_TO_ADDR
// if result [ 1 ] then
8357: LD_VAR 0 1
8361: PUSH
8362: LD_INT 1
8364: ARRAY
8365: IFFALSE 8430
// if result [ 1 ] [ 1 ] = i then
8367: LD_VAR 0 1
8371: PUSH
8372: LD_INT 1
8374: ARRAY
8375: PUSH
8376: LD_INT 1
8378: ARRAY
8379: PUSH
8380: LD_VAR 0 5
8384: EQUAL
8385: IFFALSE 8430
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: LD_INT 1
8399: PPUSH
8400: LD_VAR 0 1
8404: PUSH
8405: LD_INT 1
8407: ARRAY
8408: PPUSH
8409: LD_INT 1
8411: PPUSH
8412: CALL_OW 3
8416: PPUSH
8417: CALL_OW 1
8421: ST_TO_ADDR
// tmp := 1 ;
8422: LD_ADDR_VAR 0 2
8426: PUSH
8427: LD_STRING 1
8429: ST_TO_ADDR
// end ; normal := normal & tmp ;
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_VAR 0 3
8439: PUSH
8440: LD_VAR 0 2
8444: STR
8445: ST_TO_ADDR
// end ;
8446: GO 8346
8448: POP
8449: POP
// for i = 1 to hardcoreCounter do
8450: LD_ADDR_VAR 0 5
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_EXP 17
8464: PUSH
8465: FOR_TO
8466: IFFALSE 8571
// begin tmp := 0 ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_STRING 0
8475: ST_TO_ADDR
// if result [ 2 ] then
8476: LD_VAR 0 1
8480: PUSH
8481: LD_INT 2
8483: ARRAY
8484: IFFALSE 8553
// if result [ 2 ] [ 1 ] = 100 + i then
8486: LD_VAR 0 1
8490: PUSH
8491: LD_INT 2
8493: ARRAY
8494: PUSH
8495: LD_INT 1
8497: ARRAY
8498: PUSH
8499: LD_INT 100
8501: PUSH
8502: LD_VAR 0 5
8506: PLUS
8507: EQUAL
8508: IFFALSE 8553
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_VAR 0 1
8519: PPUSH
8520: LD_INT 2
8522: PPUSH
8523: LD_VAR 0 1
8527: PUSH
8528: LD_INT 2
8530: ARRAY
8531: PPUSH
8532: LD_INT 1
8534: PPUSH
8535: CALL_OW 3
8539: PPUSH
8540: CALL_OW 1
8544: ST_TO_ADDR
// tmp := 1 ;
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_STRING 1
8552: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8553: LD_ADDR_VAR 0 4
8557: PUSH
8558: LD_VAR 0 4
8562: PUSH
8563: LD_VAR 0 2
8567: STR
8568: ST_TO_ADDR
// end ;
8569: GO 8465
8571: POP
8572: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8573: LD_STRING getStreamItemsFromMission("
8575: PUSH
8576: LD_VAR 0 3
8580: STR
8581: PUSH
8582: LD_STRING ","
8584: STR
8585: PUSH
8586: LD_VAR 0 4
8590: STR
8591: PUSH
8592: LD_STRING ")
8594: STR
8595: PPUSH
8596: CALL_OW 559
// end else
8600: GO 8609
// ToLua ( getStreamItemsFromMission("","") ) ;
8602: LD_STRING getStreamItemsFromMission("","")
8604: PPUSH
8605: CALL_OW 559
// end ;
8609: LD_VAR 0 1
8613: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8614: LD_VAR 0 2
8618: PUSH
8619: LD_INT 100
8621: EQUAL
8622: IFFALSE 9571
// begin if not StreamModeActive then
8624: LD_EXP 15
8628: NOT
8629: IFFALSE 8639
// StreamModeActive := true ;
8631: LD_ADDR_EXP 15
8635: PUSH
8636: LD_INT 1
8638: ST_TO_ADDR
// if p3 = 0 then
8639: LD_VAR 0 3
8643: PUSH
8644: LD_INT 0
8646: EQUAL
8647: IFFALSE 8653
// InitStreamMode ;
8649: CALL 4874 0 0
// if p3 = 1 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 1
8660: EQUAL
8661: IFFALSE 8671
// sRocket := true ;
8663: LD_ADDR_EXP 20
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 2 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 2
8678: EQUAL
8679: IFFALSE 8689
// sSpeed := true ;
8681: LD_ADDR_EXP 19
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 3 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 3
8696: EQUAL
8697: IFFALSE 8707
// sEngine := true ;
8699: LD_ADDR_EXP 21
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 4 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 4
8714: EQUAL
8715: IFFALSE 8725
// sSpec := true ;
8717: LD_ADDR_EXP 18
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 5 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 5
8732: EQUAL
8733: IFFALSE 8743
// sLevel := true ;
8735: LD_ADDR_EXP 22
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 6 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 6
8750: EQUAL
8751: IFFALSE 8761
// sArmoury := true ;
8753: LD_ADDR_EXP 23
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 7 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 7
8768: EQUAL
8769: IFFALSE 8779
// sRadar := true ;
8771: LD_ADDR_EXP 24
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// if p3 = 8 then
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 8
8786: EQUAL
8787: IFFALSE 8797
// sBunker := true ;
8789: LD_ADDR_EXP 25
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// if p3 = 9 then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_INT 9
8804: EQUAL
8805: IFFALSE 8815
// sHack := true ;
8807: LD_ADDR_EXP 26
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// if p3 = 10 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 10
8822: EQUAL
8823: IFFALSE 8833
// sFire := true ;
8825: LD_ADDR_EXP 27
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 11 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 11
8840: EQUAL
8841: IFFALSE 8851
// sRefresh := true ;
8843: LD_ADDR_EXP 28
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 12 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 12
8858: EQUAL
8859: IFFALSE 8869
// sExp := true ;
8861: LD_ADDR_EXP 29
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 13 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 13
8876: EQUAL
8877: IFFALSE 8887
// sDepot := true ;
8879: LD_ADDR_EXP 30
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 14 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 14
8894: EQUAL
8895: IFFALSE 8905
// sFlag := true ;
8897: LD_ADDR_EXP 31
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 15 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 15
8912: EQUAL
8913: IFFALSE 8923
// sKamikadze := true ;
8915: LD_ADDR_EXP 39
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 16 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 16
8930: EQUAL
8931: IFFALSE 8941
// sTroll := true ;
8933: LD_ADDR_EXP 40
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 17 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 17
8948: EQUAL
8949: IFFALSE 8959
// sSlow := true ;
8951: LD_ADDR_EXP 41
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 18 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 18
8966: EQUAL
8967: IFFALSE 8977
// sLack := true ;
8969: LD_ADDR_EXP 42
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 19 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 19
8984: EQUAL
8985: IFFALSE 8995
// sTank := true ;
8987: LD_ADDR_EXP 44
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 20 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 20
9002: EQUAL
9003: IFFALSE 9013
// sRemote := true ;
9005: LD_ADDR_EXP 45
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 21 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 21
9020: EQUAL
9021: IFFALSE 9031
// sPowell := true ;
9023: LD_ADDR_EXP 46
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 22 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 22
9038: EQUAL
9039: IFFALSE 9049
// sTeleport := true ;
9041: LD_ADDR_EXP 49
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 23 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 23
9056: EQUAL
9057: IFFALSE 9067
// sOilTower := true ;
9059: LD_ADDR_EXP 51
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 24 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 24
9074: EQUAL
9075: IFFALSE 9085
// sShovel := true ;
9077: LD_ADDR_EXP 52
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 25 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 25
9092: EQUAL
9093: IFFALSE 9103
// sSheik := true ;
9095: LD_ADDR_EXP 53
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// if p3 = 26 then
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 26
9110: EQUAL
9111: IFFALSE 9121
// sEarthquake := true ;
9113: LD_ADDR_EXP 55
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if p3 = 27 then
9121: LD_VAR 0 3
9125: PUSH
9126: LD_INT 27
9128: EQUAL
9129: IFFALSE 9139
// sAI := true ;
9131: LD_ADDR_EXP 56
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if p3 = 28 then
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 28
9146: EQUAL
9147: IFFALSE 9157
// sCargo := true ;
9149: LD_ADDR_EXP 59
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// if p3 = 29 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 29
9164: EQUAL
9165: IFFALSE 9175
// sDLaser := true ;
9167: LD_ADDR_EXP 60
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// if p3 = 30 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 30
9182: EQUAL
9183: IFFALSE 9193
// sExchange := true ;
9185: LD_ADDR_EXP 61
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// if p3 = 31 then
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 31
9200: EQUAL
9201: IFFALSE 9211
// sFac := true ;
9203: LD_ADDR_EXP 62
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// if p3 = 32 then
9211: LD_VAR 0 3
9215: PUSH
9216: LD_INT 32
9218: EQUAL
9219: IFFALSE 9229
// sPower := true ;
9221: LD_ADDR_EXP 63
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// if p3 = 33 then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 33
9236: EQUAL
9237: IFFALSE 9247
// sRandom := true ;
9239: LD_ADDR_EXP 64
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// if p3 = 34 then
9247: LD_VAR 0 3
9251: PUSH
9252: LD_INT 34
9254: EQUAL
9255: IFFALSE 9265
// sShield := true ;
9257: LD_ADDR_EXP 65
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// if p3 = 35 then
9265: LD_VAR 0 3
9269: PUSH
9270: LD_INT 35
9272: EQUAL
9273: IFFALSE 9283
// sTime := true ;
9275: LD_ADDR_EXP 66
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// if p3 = 36 then
9283: LD_VAR 0 3
9287: PUSH
9288: LD_INT 36
9290: EQUAL
9291: IFFALSE 9301
// sTools := true ;
9293: LD_ADDR_EXP 67
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if p3 = 101 then
9301: LD_VAR 0 3
9305: PUSH
9306: LD_INT 101
9308: EQUAL
9309: IFFALSE 9319
// sSold := true ;
9311: LD_ADDR_EXP 32
9315: PUSH
9316: LD_INT 1
9318: ST_TO_ADDR
// if p3 = 102 then
9319: LD_VAR 0 3
9323: PUSH
9324: LD_INT 102
9326: EQUAL
9327: IFFALSE 9337
// sDiff := true ;
9329: LD_ADDR_EXP 33
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// if p3 = 103 then
9337: LD_VAR 0 3
9341: PUSH
9342: LD_INT 103
9344: EQUAL
9345: IFFALSE 9355
// sFog := true ;
9347: LD_ADDR_EXP 36
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// if p3 = 104 then
9355: LD_VAR 0 3
9359: PUSH
9360: LD_INT 104
9362: EQUAL
9363: IFFALSE 9373
// sReset := true ;
9365: LD_ADDR_EXP 37
9369: PUSH
9370: LD_INT 1
9372: ST_TO_ADDR
// if p3 = 105 then
9373: LD_VAR 0 3
9377: PUSH
9378: LD_INT 105
9380: EQUAL
9381: IFFALSE 9391
// sSun := true ;
9383: LD_ADDR_EXP 38
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// if p3 = 106 then
9391: LD_VAR 0 3
9395: PUSH
9396: LD_INT 106
9398: EQUAL
9399: IFFALSE 9409
// sTiger := true ;
9401: LD_ADDR_EXP 34
9405: PUSH
9406: LD_INT 1
9408: ST_TO_ADDR
// if p3 = 107 then
9409: LD_VAR 0 3
9413: PUSH
9414: LD_INT 107
9416: EQUAL
9417: IFFALSE 9427
// sBomb := true ;
9419: LD_ADDR_EXP 35
9423: PUSH
9424: LD_INT 1
9426: ST_TO_ADDR
// if p3 = 108 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 108
9434: EQUAL
9435: IFFALSE 9445
// sWound := true ;
9437: LD_ADDR_EXP 43
9441: PUSH
9442: LD_INT 1
9444: ST_TO_ADDR
// if p3 = 109 then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 109
9452: EQUAL
9453: IFFALSE 9463
// sBetray := true ;
9455: LD_ADDR_EXP 47
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// if p3 = 110 then
9463: LD_VAR 0 3
9467: PUSH
9468: LD_INT 110
9470: EQUAL
9471: IFFALSE 9481
// sContamin := true ;
9473: LD_ADDR_EXP 48
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
// if p3 = 111 then
9481: LD_VAR 0 3
9485: PUSH
9486: LD_INT 111
9488: EQUAL
9489: IFFALSE 9499
// sOil := true ;
9491: LD_ADDR_EXP 50
9495: PUSH
9496: LD_INT 1
9498: ST_TO_ADDR
// if p3 = 112 then
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 112
9506: EQUAL
9507: IFFALSE 9517
// sStu := true ;
9509: LD_ADDR_EXP 54
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// if p3 = 113 then
9517: LD_VAR 0 3
9521: PUSH
9522: LD_INT 113
9524: EQUAL
9525: IFFALSE 9535
// sBazooka := true ;
9527: LD_ADDR_EXP 57
9531: PUSH
9532: LD_INT 1
9534: ST_TO_ADDR
// if p3 = 114 then
9535: LD_VAR 0 3
9539: PUSH
9540: LD_INT 114
9542: EQUAL
9543: IFFALSE 9553
// sMortar := true ;
9545: LD_ADDR_EXP 58
9549: PUSH
9550: LD_INT 1
9552: ST_TO_ADDR
// if p3 = 115 then
9553: LD_VAR 0 3
9557: PUSH
9558: LD_INT 115
9560: EQUAL
9561: IFFALSE 9571
// sRanger := true ;
9563: LD_ADDR_EXP 68
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// end ; end ;
9571: PPOPN 6
9573: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9574: LD_EXP 15
9578: PUSH
9579: LD_EXP 20
9583: AND
9584: IFFALSE 9708
9586: GO 9588
9588: DISABLE
9589: LD_INT 0
9591: PPUSH
9592: PPUSH
// begin enable ;
9593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9594: LD_ADDR_VAR 0 2
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_OWVAR 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 2
9613: PUSH
9614: LD_INT 34
9616: PUSH
9617: LD_INT 7
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 34
9626: PUSH
9627: LD_INT 45
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 34
9636: PUSH
9637: LD_INT 28
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 34
9646: PUSH
9647: LD_INT 47
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 69
9669: ST_TO_ADDR
// if not tmp then
9670: LD_VAR 0 2
9674: NOT
9675: IFFALSE 9679
// exit ;
9677: GO 9708
// for i in tmp do
9679: LD_ADDR_VAR 0 1
9683: PUSH
9684: LD_VAR 0 2
9688: PUSH
9689: FOR_IN
9690: IFFALSE 9706
// begin SetLives ( i , 0 ) ;
9692: LD_VAR 0 1
9696: PPUSH
9697: LD_INT 0
9699: PPUSH
9700: CALL_OW 234
// end ;
9704: GO 9689
9706: POP
9707: POP
// end ;
9708: PPOPN 2
9710: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9711: LD_EXP 15
9715: PUSH
9716: LD_EXP 21
9720: AND
9721: IFFALSE 9805
9723: GO 9725
9725: DISABLE
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
// begin enable ;
9730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9731: LD_ADDR_VAR 0 2
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_OWVAR 2
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 32
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 69
9766: ST_TO_ADDR
// if not tmp then
9767: LD_VAR 0 2
9771: NOT
9772: IFFALSE 9776
// exit ;
9774: GO 9805
// for i in tmp do
9776: LD_ADDR_VAR 0 1
9780: PUSH
9781: LD_VAR 0 2
9785: PUSH
9786: FOR_IN
9787: IFFALSE 9803
// begin SetLives ( i , 0 ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_INT 0
9796: PPUSH
9797: CALL_OW 234
// end ;
9801: GO 9786
9803: POP
9804: POP
// end ;
9805: PPOPN 2
9807: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9808: LD_EXP 15
9812: PUSH
9813: LD_EXP 18
9817: AND
9818: IFFALSE 9911
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
// begin enable ;
9826: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9827: LD_ADDR_VAR 0 1
9831: PUSH
9832: LD_INT 22
9834: PUSH
9835: LD_OWVAR 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 25
9849: PUSH
9850: LD_INT 5
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 25
9859: PUSH
9860: LD_INT 9
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 8
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PPUSH
9887: CALL_OW 69
9891: PUSH
9892: FOR_IN
9893: IFFALSE 9909
// begin SetClass ( i , 1 ) ;
9895: LD_VAR 0 1
9899: PPUSH
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 336
// end ;
9907: GO 9892
9909: POP
9910: POP
// end ;
9911: PPOPN 1
9913: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9914: LD_EXP 15
9918: PUSH
9919: LD_EXP 19
9923: AND
9924: PUSH
9925: LD_OWVAR 65
9929: PUSH
9930: LD_INT 7
9932: LESS
9933: AND
9934: IFFALSE 9948
9936: GO 9938
9938: DISABLE
// begin enable ;
9939: ENABLE
// game_speed := 7 ;
9940: LD_ADDR_OWVAR 65
9944: PUSH
9945: LD_INT 7
9947: ST_TO_ADDR
// end ;
9948: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9949: LD_EXP 15
9953: PUSH
9954: LD_EXP 22
9958: AND
9959: IFFALSE 10161
9961: GO 9963
9963: DISABLE
9964: LD_INT 0
9966: PPUSH
9967: PPUSH
9968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9969: LD_ADDR_VAR 0 3
9973: PUSH
9974: LD_INT 81
9976: PUSH
9977: LD_OWVAR 2
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 21
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 69
10004: ST_TO_ADDR
// if not tmp then
10005: LD_VAR 0 3
10009: NOT
10010: IFFALSE 10014
// exit ;
10012: GO 10161
// if tmp > 5 then
10014: LD_VAR 0 3
10018: PUSH
10019: LD_INT 5
10021: GREATER
10022: IFFALSE 10034
// k := 5 else
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: LD_INT 5
10031: ST_TO_ADDR
10032: GO 10044
// k := tmp ;
10034: LD_ADDR_VAR 0 2
10038: PUSH
10039: LD_VAR 0 3
10043: ST_TO_ADDR
// for i := 1 to k do
10044: LD_ADDR_VAR 0 1
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_VAR 0 2
10058: PUSH
10059: FOR_TO
10060: IFFALSE 10159
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_VAR 0 1
10071: ARRAY
10072: PPUSH
10073: LD_VAR 0 1
10077: PUSH
10078: LD_INT 4
10080: MOD
10081: PUSH
10082: LD_INT 1
10084: PLUS
10085: PPUSH
10086: CALL_OW 259
10090: PUSH
10091: LD_INT 10
10093: LESS
10094: IFFALSE 10157
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10096: LD_VAR 0 3
10100: PUSH
10101: LD_VAR 0 1
10105: ARRAY
10106: PPUSH
10107: LD_VAR 0 1
10111: PUSH
10112: LD_INT 4
10114: MOD
10115: PUSH
10116: LD_INT 1
10118: PLUS
10119: PPUSH
10120: LD_VAR 0 3
10124: PUSH
10125: LD_VAR 0 1
10129: ARRAY
10130: PPUSH
10131: LD_VAR 0 1
10135: PUSH
10136: LD_INT 4
10138: MOD
10139: PUSH
10140: LD_INT 1
10142: PLUS
10143: PPUSH
10144: CALL_OW 259
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: PPUSH
10153: CALL_OW 237
10157: GO 10059
10159: POP
10160: POP
// end ;
10161: PPOPN 3
10163: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10164: LD_EXP 15
10168: PUSH
10169: LD_EXP 23
10173: AND
10174: IFFALSE 10194
10176: GO 10178
10178: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10179: LD_INT 4
10181: PPUSH
10182: LD_OWVAR 2
10186: PPUSH
10187: LD_INT 0
10189: PPUSH
10190: CALL_OW 324
10194: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10195: LD_EXP 15
10199: PUSH
10200: LD_EXP 52
10204: AND
10205: IFFALSE 10225
10207: GO 10209
10209: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10210: LD_INT 19
10212: PPUSH
10213: LD_OWVAR 2
10217: PPUSH
10218: LD_INT 0
10220: PPUSH
10221: CALL_OW 324
10225: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10226: LD_EXP 15
10230: PUSH
10231: LD_EXP 24
10235: AND
10236: IFFALSE 10338
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
// begin enable ;
10245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10246: LD_ADDR_VAR 0 2
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: LD_OWVAR 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: LD_INT 34
10268: PUSH
10269: LD_INT 11
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 34
10278: PUSH
10279: LD_INT 30
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 69
10299: ST_TO_ADDR
// if not tmp then
10300: LD_VAR 0 2
10304: NOT
10305: IFFALSE 10309
// exit ;
10307: GO 10338
// for i in tmp do
10309: LD_ADDR_VAR 0 1
10313: PUSH
10314: LD_VAR 0 2
10318: PUSH
10319: FOR_IN
10320: IFFALSE 10336
// begin SetLives ( i , 0 ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: LD_INT 0
10329: PPUSH
10330: CALL_OW 234
// end ;
10334: GO 10319
10336: POP
10337: POP
// end ;
10338: PPOPN 2
10340: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10341: LD_EXP 15
10345: PUSH
10346: LD_EXP 25
10350: AND
10351: IFFALSE 10371
10353: GO 10355
10355: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10356: LD_INT 32
10358: PPUSH
10359: LD_OWVAR 2
10363: PPUSH
10364: LD_INT 0
10366: PPUSH
10367: CALL_OW 324
10371: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10372: LD_EXP 15
10376: PUSH
10377: LD_EXP 26
10381: AND
10382: IFFALSE 10563
10384: GO 10386
10386: DISABLE
10387: LD_INT 0
10389: PPUSH
10390: PPUSH
10391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10392: LD_ADDR_VAR 0 2
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_OWVAR 2
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 33
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: ST_TO_ADDR
// if not tmp then
10428: LD_VAR 0 2
10432: NOT
10433: IFFALSE 10437
// exit ;
10435: GO 10563
// side := 0 ;
10437: LD_ADDR_VAR 0 3
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// for i := 1 to 8 do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_INT 8
10457: PUSH
10458: FOR_TO
10459: IFFALSE 10507
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10461: LD_OWVAR 2
10465: PUSH
10466: LD_VAR 0 1
10470: NONEQUAL
10471: PUSH
10472: LD_OWVAR 2
10476: PPUSH
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 81
10486: PUSH
10487: LD_INT 2
10489: EQUAL
10490: AND
10491: IFFALSE 10505
// begin side := i ;
10493: LD_ADDR_VAR 0 3
10497: PUSH
10498: LD_VAR 0 1
10502: ST_TO_ADDR
// break ;
10503: GO 10507
// end ;
10505: GO 10458
10507: POP
10508: POP
// if not side then
10509: LD_VAR 0 3
10513: NOT
10514: IFFALSE 10518
// exit ;
10516: GO 10563
// for i := 1 to tmp do
10518: LD_ADDR_VAR 0 1
10522: PUSH
10523: DOUBLE
10524: LD_INT 1
10526: DEC
10527: ST_TO_ADDR
10528: LD_VAR 0 2
10532: PUSH
10533: FOR_TO
10534: IFFALSE 10561
// if Prob ( 60 ) then
10536: LD_INT 60
10538: PPUSH
10539: CALL_OW 13
10543: IFFALSE 10559
// SetSide ( i , side ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_VAR 0 3
10554: PPUSH
10555: CALL_OW 235
10559: GO 10533
10561: POP
10562: POP
// end ;
10563: PPOPN 3
10565: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10566: LD_EXP 15
10570: PUSH
10571: LD_EXP 28
10575: AND
10576: IFFALSE 10695
10578: GO 10580
10580: DISABLE
10581: LD_INT 0
10583: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10584: LD_ADDR_VAR 0 1
10588: PUSH
10589: LD_INT 22
10591: PUSH
10592: LD_OWVAR 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 21
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 3
10613: PUSH
10614: LD_INT 23
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: PPUSH
10633: CALL_OW 69
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10693
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 257
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: IN
10669: IFFALSE 10691
// SetClass ( un , rand ( 1 , 4 ) ) ;
10671: LD_VAR 0 1
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: LD_INT 4
10681: PPUSH
10682: CALL_OW 12
10686: PPUSH
10687: CALL_OW 336
10691: GO 10638
10693: POP
10694: POP
// end ;
10695: PPOPN 1
10697: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10698: LD_EXP 15
10702: PUSH
10703: LD_EXP 27
10707: AND
10708: IFFALSE 10787
10710: GO 10712
10712: DISABLE
10713: LD_INT 0
10715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 22
10723: PUSH
10724: LD_OWVAR 2
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 3
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 69
10751: ST_TO_ADDR
// if not tmp then
10752: LD_VAR 0 1
10756: NOT
10757: IFFALSE 10761
// exit ;
10759: GO 10787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10761: LD_VAR 0 1
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: LD_VAR 0 1
10773: PPUSH
10774: CALL_OW 12
10778: ARRAY
10779: PPUSH
10780: LD_INT 100
10782: PPUSH
10783: CALL_OW 234
// end ;
10787: PPOPN 1
10789: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10790: LD_EXP 15
10794: PUSH
10795: LD_EXP 29
10799: AND
10800: IFFALSE 10898
10802: GO 10804
10804: DISABLE
10805: LD_INT 0
10807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10808: LD_ADDR_VAR 0 1
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_OWVAR 2
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 21
10827: PUSH
10828: LD_INT 1
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: ST_TO_ADDR
// if not tmp then
10844: LD_VAR 0 1
10848: NOT
10849: IFFALSE 10853
// exit ;
10851: GO 10898
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10853: LD_VAR 0 1
10857: PUSH
10858: LD_INT 1
10860: PPUSH
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 12
10870: ARRAY
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: LD_INT 4
10877: PPUSH
10878: CALL_OW 12
10882: PPUSH
10883: LD_INT 3000
10885: PPUSH
10886: LD_INT 9000
10888: PPUSH
10889: CALL_OW 12
10893: PPUSH
10894: CALL_OW 492
// end ;
10898: PPOPN 1
10900: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10901: LD_EXP 15
10905: PUSH
10906: LD_EXP 30
10910: AND
10911: IFFALSE 10931
10913: GO 10915
10915: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10916: LD_INT 1
10918: PPUSH
10919: LD_OWVAR 2
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 324
10931: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10932: LD_EXP 15
10936: PUSH
10937: LD_EXP 31
10941: AND
10942: IFFALSE 11025
10944: GO 10946
10946: DISABLE
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_INT 22
10958: PUSH
10959: LD_OWVAR 2
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: ST_TO_ADDR
// if not tmp then
10987: LD_VAR 0 2
10991: NOT
10992: IFFALSE 10996
// exit ;
10994: GO 11025
// for i in tmp do
10996: LD_ADDR_VAR 0 1
11000: PUSH
11001: LD_VAR 0 2
11005: PUSH
11006: FOR_IN
11007: IFFALSE 11023
// SetBLevel ( i , 10 ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: LD_INT 10
11016: PPUSH
11017: CALL_OW 241
11021: GO 11006
11023: POP
11024: POP
// end ;
11025: PPOPN 2
11027: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11028: LD_EXP 15
11032: PUSH
11033: LD_EXP 32
11037: AND
11038: IFFALSE 11149
11040: GO 11042
11042: DISABLE
11043: LD_INT 0
11045: PPUSH
11046: PPUSH
11047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11048: LD_ADDR_VAR 0 3
11052: PUSH
11053: LD_INT 22
11055: PUSH
11056: LD_OWVAR 2
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 25
11067: PUSH
11068: LD_INT 1
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: ST_TO_ADDR
// if not tmp then
11084: LD_VAR 0 3
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 11149
// un := tmp [ rand ( 1 , tmp ) ] ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_VAR 0 3
11102: PUSH
11103: LD_INT 1
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: CALL_OW 12
11115: ARRAY
11116: ST_TO_ADDR
// if Crawls ( un ) then
11117: LD_VAR 0 2
11121: PPUSH
11122: CALL_OW 318
11126: IFFALSE 11137
// ComWalk ( un ) ;
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11137: LD_VAR 0 2
11141: PPUSH
11142: LD_INT 5
11144: PPUSH
11145: CALL_OW 336
// end ;
11149: PPOPN 3
11151: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11152: LD_EXP 15
11156: PUSH
11157: LD_EXP 33
11161: AND
11162: PUSH
11163: LD_OWVAR 67
11167: PUSH
11168: LD_INT 3
11170: LESS
11171: AND
11172: IFFALSE 11191
11174: GO 11176
11176: DISABLE
// Difficulty := Difficulty + 1 ;
11177: LD_ADDR_OWVAR 67
11181: PUSH
11182: LD_OWVAR 67
11186: PUSH
11187: LD_INT 1
11189: PLUS
11190: ST_TO_ADDR
11191: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11192: LD_EXP 15
11196: PUSH
11197: LD_EXP 34
11201: AND
11202: IFFALSE 11305
11204: GO 11206
11206: DISABLE
11207: LD_INT 0
11209: PPUSH
// begin for i := 1 to 5 do
11210: LD_ADDR_VAR 0 1
11214: PUSH
11215: DOUBLE
11216: LD_INT 1
11218: DEC
11219: ST_TO_ADDR
11220: LD_INT 5
11222: PUSH
11223: FOR_TO
11224: IFFALSE 11303
// begin uc_nation := nation_nature ;
11226: LD_ADDR_OWVAR 21
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// uc_side := 0 ;
11234: LD_ADDR_OWVAR 20
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11242: LD_ADDR_OWVAR 29
11246: PUSH
11247: LD_INT 12
11249: PUSH
11250: LD_INT 12
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: ST_TO_ADDR
// hc_agressivity := 20 ;
11257: LD_ADDR_OWVAR 35
11261: PUSH
11262: LD_INT 20
11264: ST_TO_ADDR
// hc_class := class_tiger ;
11265: LD_ADDR_OWVAR 28
11269: PUSH
11270: LD_INT 14
11272: ST_TO_ADDR
// hc_gallery :=  ;
11273: LD_ADDR_OWVAR 33
11277: PUSH
11278: LD_STRING 
11280: ST_TO_ADDR
// hc_name :=  ;
11281: LD_ADDR_OWVAR 26
11285: PUSH
11286: LD_STRING 
11288: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11289: CALL_OW 44
11293: PPUSH
11294: LD_INT 0
11296: PPUSH
11297: CALL_OW 51
// end ;
11301: GO 11223
11303: POP
11304: POP
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11308: LD_EXP 15
11312: PUSH
11313: LD_EXP 35
11317: AND
11318: IFFALSE 11327
11320: GO 11322
11322: DISABLE
// StreamSibBomb ;
11323: CALL 11328 0 0
11327: END
// export function StreamSibBomb ; var i , x , y ; begin
11328: LD_INT 0
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
// result := false ;
11334: LD_ADDR_VAR 0 1
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// for i := 1 to 16 do
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: DOUBLE
11348: LD_INT 1
11350: DEC
11351: ST_TO_ADDR
11352: LD_INT 16
11354: PUSH
11355: FOR_TO
11356: IFFALSE 11555
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11358: LD_ADDR_VAR 0 3
11362: PUSH
11363: LD_INT 10
11365: PUSH
11366: LD_INT 20
11368: PUSH
11369: LD_INT 30
11371: PUSH
11372: LD_INT 40
11374: PUSH
11375: LD_INT 50
11377: PUSH
11378: LD_INT 60
11380: PUSH
11381: LD_INT 70
11383: PUSH
11384: LD_INT 80
11386: PUSH
11387: LD_INT 90
11389: PUSH
11390: LD_INT 100
11392: PUSH
11393: LD_INT 110
11395: PUSH
11396: LD_INT 120
11398: PUSH
11399: LD_INT 130
11401: PUSH
11402: LD_INT 140
11404: PUSH
11405: LD_INT 150
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 1
11427: PPUSH
11428: LD_INT 15
11430: PPUSH
11431: CALL_OW 12
11435: ARRAY
11436: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11437: LD_ADDR_VAR 0 4
11441: PUSH
11442: LD_INT 10
11444: PUSH
11445: LD_INT 20
11447: PUSH
11448: LD_INT 30
11450: PUSH
11451: LD_INT 40
11453: PUSH
11454: LD_INT 50
11456: PUSH
11457: LD_INT 60
11459: PUSH
11460: LD_INT 70
11462: PUSH
11463: LD_INT 80
11465: PUSH
11466: LD_INT 90
11468: PUSH
11469: LD_INT 100
11471: PUSH
11472: LD_INT 110
11474: PUSH
11475: LD_INT 120
11477: PUSH
11478: LD_INT 130
11480: PUSH
11481: LD_INT 140
11483: PUSH
11484: LD_INT 150
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 1
11506: PPUSH
11507: LD_INT 15
11509: PPUSH
11510: CALL_OW 12
11514: ARRAY
11515: ST_TO_ADDR
// if ValidHex ( x , y ) then
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_VAR 0 4
11525: PPUSH
11526: CALL_OW 488
11530: IFFALSE 11553
// begin result := [ x , y ] ;
11532: LD_ADDR_VAR 0 1
11536: PUSH
11537: LD_VAR 0 3
11541: PUSH
11542: LD_VAR 0 4
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: ST_TO_ADDR
// break ;
11551: GO 11555
// end ; end ;
11553: GO 11355
11555: POP
11556: POP
// if result then
11557: LD_VAR 0 1
11561: IFFALSE 11621
// begin ToLua ( playSibBomb() ) ;
11563: LD_STRING playSibBomb()
11565: PPUSH
11566: CALL_OW 559
// wait ( 0 0$14 ) ;
11570: LD_INT 490
11572: PPUSH
11573: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11577: LD_VAR 0 1
11581: PUSH
11582: LD_INT 1
11584: ARRAY
11585: PPUSH
11586: LD_VAR 0 1
11590: PUSH
11591: LD_INT 2
11593: ARRAY
11594: PPUSH
11595: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11599: LD_VAR 0 1
11603: PUSH
11604: LD_INT 1
11606: ARRAY
11607: PPUSH
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 2
11615: ARRAY
11616: PPUSH
11617: CALL_OW 429
// end ; end ;
11621: LD_VAR 0 1
11625: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11626: LD_EXP 15
11630: PUSH
11631: LD_EXP 37
11635: AND
11636: IFFALSE 11648
11638: GO 11640
11640: DISABLE
// YouLost (  ) ;
11641: LD_STRING 
11643: PPUSH
11644: CALL_OW 104
11648: END
// every 0 0$1 trigger StreamModeActive and sFog do
11649: LD_EXP 15
11653: PUSH
11654: LD_EXP 36
11658: AND
11659: IFFALSE 11673
11661: GO 11663
11663: DISABLE
// FogOff ( your_side ) ;
11664: LD_OWVAR 2
11668: PPUSH
11669: CALL_OW 344
11673: END
// every 0 0$1 trigger StreamModeActive and sSun do
11674: LD_EXP 15
11678: PUSH
11679: LD_EXP 38
11683: AND
11684: IFFALSE 11712
11686: GO 11688
11688: DISABLE
// begin solar_recharge_percent := 0 ;
11689: LD_ADDR_OWVAR 79
11693: PUSH
11694: LD_INT 0
11696: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11697: LD_INT 10500
11699: PPUSH
11700: CALL_OW 67
// solar_recharge_percent := 100 ;
11704: LD_ADDR_OWVAR 79
11708: PUSH
11709: LD_INT 100
11711: ST_TO_ADDR
// end ;
11712: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11713: LD_EXP 15
11717: PUSH
11718: LD_EXP 39
11722: AND
11723: IFFALSE 11962
11725: GO 11727
11727: DISABLE
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
11732: PPUSH
// begin tmp := [ ] ;
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: EMPTY
11739: ST_TO_ADDR
// for i := 1 to 6 do
11740: LD_ADDR_VAR 0 1
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_INT 6
11752: PUSH
11753: FOR_TO
11754: IFFALSE 11859
// begin uc_nation := nation_nature ;
11756: LD_ADDR_OWVAR 21
11760: PUSH
11761: LD_INT 0
11763: ST_TO_ADDR
// uc_side := 0 ;
11764: LD_ADDR_OWVAR 20
11768: PUSH
11769: LD_INT 0
11771: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11772: LD_ADDR_OWVAR 29
11776: PUSH
11777: LD_INT 12
11779: PUSH
11780: LD_INT 12
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: ST_TO_ADDR
// hc_agressivity := 20 ;
11787: LD_ADDR_OWVAR 35
11791: PUSH
11792: LD_INT 20
11794: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11795: LD_ADDR_OWVAR 28
11799: PUSH
11800: LD_INT 17
11802: ST_TO_ADDR
// hc_gallery :=  ;
11803: LD_ADDR_OWVAR 33
11807: PUSH
11808: LD_STRING 
11810: ST_TO_ADDR
// hc_name :=  ;
11811: LD_ADDR_OWVAR 26
11815: PUSH
11816: LD_STRING 
11818: ST_TO_ADDR
// un := CreateHuman ;
11819: LD_ADDR_VAR 0 2
11823: PUSH
11824: CALL_OW 44
11828: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11829: LD_VAR 0 2
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 51
// tmp := tmp ^ un ;
11841: LD_ADDR_VAR 0 3
11845: PUSH
11846: LD_VAR 0 3
11850: PUSH
11851: LD_VAR 0 2
11855: ADD
11856: ST_TO_ADDR
// end ;
11857: GO 11753
11859: POP
11860: POP
// repeat wait ( 0 0$1 ) ;
11861: LD_INT 35
11863: PPUSH
11864: CALL_OW 67
// for un in tmp do
11868: LD_ADDR_VAR 0 2
11872: PUSH
11873: LD_VAR 0 3
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11953
// begin if IsDead ( un ) then
11881: LD_VAR 0 2
11885: PPUSH
11886: CALL_OW 301
11890: IFFALSE 11910
// begin tmp := tmp diff un ;
11892: LD_ADDR_VAR 0 3
11896: PUSH
11897: LD_VAR 0 3
11901: PUSH
11902: LD_VAR 0 2
11906: DIFF
11907: ST_TO_ADDR
// continue ;
11908: GO 11878
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11910: LD_VAR 0 2
11914: PPUSH
11915: LD_INT 3
11917: PUSH
11918: LD_INT 22
11920: PUSH
11921: LD_INT 0
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: PPUSH
11937: LD_VAR 0 2
11941: PPUSH
11942: CALL_OW 74
11946: PPUSH
11947: CALL_OW 115
// end ;
11951: GO 11878
11953: POP
11954: POP
// until not tmp ;
11955: LD_VAR 0 3
11959: NOT
11960: IFFALSE 11861
// end ;
11962: PPOPN 3
11964: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11965: LD_EXP 15
11969: PUSH
11970: LD_EXP 40
11974: AND
11975: IFFALSE 12029
11977: GO 11979
11979: DISABLE
// begin ToLua ( displayTroll(); ) ;
11980: LD_STRING displayTroll();
11982: PPUSH
11983: CALL_OW 559
// wait ( 3 3$00 ) ;
11987: LD_INT 6300
11989: PPUSH
11990: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11994: LD_STRING hideTroll();
11996: PPUSH
11997: CALL_OW 559
// wait ( 1 1$00 ) ;
12001: LD_INT 2100
12003: PPUSH
12004: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12008: LD_STRING displayTroll();
12010: PPUSH
12011: CALL_OW 559
// wait ( 1 1$00 ) ;
12015: LD_INT 2100
12017: PPUSH
12018: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12022: LD_STRING hideTroll();
12024: PPUSH
12025: CALL_OW 559
// end ;
12029: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12030: LD_EXP 15
12034: PUSH
12035: LD_EXP 41
12039: AND
12040: IFFALSE 12103
12042: GO 12044
12044: DISABLE
12045: LD_INT 0
12047: PPUSH
// begin p := 0 ;
12048: LD_ADDR_VAR 0 1
12052: PUSH
12053: LD_INT 0
12055: ST_TO_ADDR
// repeat game_speed := 1 ;
12056: LD_ADDR_OWVAR 65
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12064: LD_INT 35
12066: PPUSH
12067: CALL_OW 67
// p := p + 1 ;
12071: LD_ADDR_VAR 0 1
12075: PUSH
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 1
12083: PLUS
12084: ST_TO_ADDR
// until p >= 60 ;
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 60
12092: GREATEREQUAL
12093: IFFALSE 12056
// game_speed := 4 ;
12095: LD_ADDR_OWVAR 65
12099: PUSH
12100: LD_INT 4
12102: ST_TO_ADDR
// end ;
12103: PPOPN 1
12105: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12106: LD_EXP 15
12110: PUSH
12111: LD_EXP 42
12115: AND
12116: IFFALSE 12262
12118: GO 12120
12120: DISABLE
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12125: LD_ADDR_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_OWVAR 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: LD_INT 30
12147: PUSH
12148: LD_INT 0
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 69
12178: ST_TO_ADDR
// if not depot then
12179: LD_VAR 0 1
12183: NOT
12184: IFFALSE 12188
// exit ;
12186: GO 12262
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: LD_INT 1
12200: PPUSH
12201: LD_VAR 0 1
12205: PPUSH
12206: CALL_OW 12
12210: ARRAY
12211: PPUSH
12212: CALL_OW 274
12216: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12217: LD_VAR 0 2
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: LD_INT 0
12227: PPUSH
12228: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12232: LD_VAR 0 2
12236: PPUSH
12237: LD_INT 2
12239: PPUSH
12240: LD_INT 0
12242: PPUSH
12243: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12247: LD_VAR 0 2
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 277
// end ;
12262: PPOPN 2
12264: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12265: LD_EXP 15
12269: PUSH
12270: LD_EXP 43
12274: AND
12275: IFFALSE 12372
12277: GO 12279
12279: DISABLE
12280: LD_INT 0
12282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_OWVAR 2
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 3
12312: PUSH
12313: LD_INT 23
12315: PUSH
12316: LD_INT 0
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 69
12336: ST_TO_ADDR
// if not tmp then
12337: LD_VAR 0 1
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12346: LD_VAR 0 1
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 12
12363: ARRAY
12364: PPUSH
12365: LD_INT 200
12367: PPUSH
12368: CALL_OW 234
// end ;
12372: PPOPN 1
12374: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12375: LD_EXP 15
12379: PUSH
12380: LD_EXP 44
12384: AND
12385: IFFALSE 12464
12387: GO 12389
12389: DISABLE
12390: LD_INT 0
12392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12393: LD_ADDR_VAR 0 1
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_OWVAR 2
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 21
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 69
12428: ST_TO_ADDR
// if not tmp then
12429: LD_VAR 0 1
12433: NOT
12434: IFFALSE 12438
// exit ;
12436: GO 12464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12438: LD_VAR 0 1
12442: PUSH
12443: LD_INT 1
12445: PPUSH
12446: LD_VAR 0 1
12450: PPUSH
12451: CALL_OW 12
12455: ARRAY
12456: PPUSH
12457: LD_INT 60
12459: PPUSH
12460: CALL_OW 234
// end ;
12464: PPOPN 1
12466: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12467: LD_EXP 15
12471: PUSH
12472: LD_EXP 45
12476: AND
12477: IFFALSE 12576
12479: GO 12481
12481: DISABLE
12482: LD_INT 0
12484: PPUSH
12485: PPUSH
// begin enable ;
12486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_OWVAR 2
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 61
12506: PUSH
12507: EMPTY
12508: LIST
12509: PUSH
12510: LD_INT 33
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 69
12529: ST_TO_ADDR
// if not tmp then
12530: LD_VAR 0 1
12534: NOT
12535: IFFALSE 12539
// exit ;
12537: GO 12576
// for i in tmp do
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_VAR 0 1
12548: PUSH
12549: FOR_IN
12550: IFFALSE 12574
// if IsControledBy ( i ) then
12552: LD_VAR 0 2
12556: PPUSH
12557: CALL_OW 312
12561: IFFALSE 12572
// ComUnlink ( i ) ;
12563: LD_VAR 0 2
12567: PPUSH
12568: CALL_OW 136
12572: GO 12549
12574: POP
12575: POP
// end ;
12576: PPOPN 2
12578: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12579: LD_EXP 15
12583: PUSH
12584: LD_EXP 46
12588: AND
12589: IFFALSE 12729
12591: GO 12593
12593: DISABLE
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
// begin ToLua ( displayPowell(); ) ;
12598: LD_STRING displayPowell();
12600: PPUSH
12601: CALL_OW 559
// uc_side := 0 ;
12605: LD_ADDR_OWVAR 20
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// uc_nation := 2 ;
12613: LD_ADDR_OWVAR 21
12617: PUSH
12618: LD_INT 2
12620: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12621: LD_ADDR_OWVAR 37
12625: PUSH
12626: LD_INT 14
12628: ST_TO_ADDR
// vc_engine := engine_siberite ;
12629: LD_ADDR_OWVAR 39
12633: PUSH
12634: LD_INT 3
12636: ST_TO_ADDR
// vc_control := control_apeman ;
12637: LD_ADDR_OWVAR 38
12641: PUSH
12642: LD_INT 5
12644: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12645: LD_ADDR_OWVAR 40
12649: PUSH
12650: LD_INT 29
12652: ST_TO_ADDR
// un := CreateVehicle ;
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: CALL_OW 45
12662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12663: LD_VAR 0 2
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12675: LD_INT 35
12677: PPUSH
12678: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12682: LD_VAR 0 2
12686: PPUSH
12687: LD_INT 22
12689: PUSH
12690: LD_OWVAR 2
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 69
12703: PPUSH
12704: LD_VAR 0 2
12708: PPUSH
12709: CALL_OW 74
12713: PPUSH
12714: CALL_OW 115
// until IsDead ( un ) ;
12718: LD_VAR 0 2
12722: PPUSH
12723: CALL_OW 301
12727: IFFALSE 12675
// end ;
12729: PPOPN 2
12731: END
// every 0 0$1 trigger StreamModeActive and sStu do
12732: LD_EXP 15
12736: PUSH
12737: LD_EXP 54
12741: AND
12742: IFFALSE 12758
12744: GO 12746
12746: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12747: LD_STRING displayStucuk();
12749: PPUSH
12750: CALL_OW 559
// ResetFog ;
12754: CALL_OW 335
// end ;
12758: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12759: LD_EXP 15
12763: PUSH
12764: LD_EXP 47
12768: AND
12769: IFFALSE 12910
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12778: LD_ADDR_VAR 0 2
12782: PUSH
12783: LD_INT 22
12785: PUSH
12786: LD_OWVAR 2
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 21
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: ST_TO_ADDR
// if not tmp then
12814: LD_VAR 0 2
12818: NOT
12819: IFFALSE 12823
// exit ;
12821: GO 12910
// un := tmp [ rand ( 1 , tmp ) ] ;
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_VAR 0 2
12832: PUSH
12833: LD_INT 1
12835: PPUSH
12836: LD_VAR 0 2
12840: PPUSH
12841: CALL_OW 12
12845: ARRAY
12846: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12859: LD_VAR 0 1
12863: PPUSH
12864: LD_OWVAR 3
12868: PUSH
12869: LD_VAR 0 1
12873: DIFF
12874: PPUSH
12875: LD_VAR 0 1
12879: PPUSH
12880: CALL_OW 74
12884: PPUSH
12885: CALL_OW 115
// wait ( 0 0$20 ) ;
12889: LD_INT 700
12891: PPUSH
12892: CALL_OW 67
// SetSide ( un , your_side ) ;
12896: LD_VAR 0 1
12900: PPUSH
12901: LD_OWVAR 2
12905: PPUSH
12906: CALL_OW 235
// end ;
12910: PPOPN 2
12912: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12913: LD_EXP 15
12917: PUSH
12918: LD_EXP 48
12922: AND
12923: IFFALSE 13029
12925: GO 12927
12927: DISABLE
12928: LD_INT 0
12930: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12931: LD_ADDR_VAR 0 1
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_OWVAR 2
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 0
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 30
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PPUSH
12980: CALL_OW 69
12984: ST_TO_ADDR
// if not depot then
12985: LD_VAR 0 1
12989: NOT
12990: IFFALSE 12994
// exit ;
12992: GO 13029
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12994: LD_VAR 0 1
12998: PUSH
12999: LD_INT 1
13001: ARRAY
13002: PPUSH
13003: CALL_OW 250
13007: PPUSH
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 1
13015: ARRAY
13016: PPUSH
13017: CALL_OW 251
13021: PPUSH
13022: LD_INT 70
13024: PPUSH
13025: CALL_OW 495
// end ;
13029: PPOPN 1
13031: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13032: LD_EXP 15
13036: PUSH
13037: LD_EXP 49
13041: AND
13042: IFFALSE 13253
13044: GO 13046
13046: DISABLE
13047: LD_INT 0
13049: PPUSH
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13054: LD_ADDR_VAR 0 5
13058: PUSH
13059: LD_INT 22
13061: PUSH
13062: LD_OWVAR 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 21
13073: PUSH
13074: LD_INT 1
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PPUSH
13085: CALL_OW 69
13089: ST_TO_ADDR
// if not tmp then
13090: LD_VAR 0 5
13094: NOT
13095: IFFALSE 13099
// exit ;
13097: GO 13253
// for i in tmp do
13099: LD_ADDR_VAR 0 1
13103: PUSH
13104: LD_VAR 0 5
13108: PUSH
13109: FOR_IN
13110: IFFALSE 13251
// begin d := rand ( 0 , 5 ) ;
13112: LD_ADDR_VAR 0 4
13116: PUSH
13117: LD_INT 0
13119: PPUSH
13120: LD_INT 5
13122: PPUSH
13123: CALL_OW 12
13127: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13128: LD_ADDR_VAR 0 2
13132: PUSH
13133: LD_VAR 0 1
13137: PPUSH
13138: CALL_OW 250
13142: PPUSH
13143: LD_VAR 0 4
13147: PPUSH
13148: LD_INT 3
13150: PPUSH
13151: LD_INT 12
13153: PPUSH
13154: CALL_OW 12
13158: PPUSH
13159: CALL_OW 272
13163: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: LD_VAR 0 1
13173: PPUSH
13174: CALL_OW 251
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_INT 3
13186: PPUSH
13187: LD_INT 12
13189: PPUSH
13190: CALL_OW 12
13194: PPUSH
13195: CALL_OW 273
13199: ST_TO_ADDR
// if ValidHex ( x , y ) then
13200: LD_VAR 0 2
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: CALL_OW 488
13214: IFFALSE 13249
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13216: LD_VAR 0 1
13220: PPUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_VAR 0 3
13230: PPUSH
13231: LD_INT 3
13233: PPUSH
13234: LD_INT 6
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: LD_INT 1
13244: PPUSH
13245: CALL_OW 483
// end ;
13249: GO 13109
13251: POP
13252: POP
// end ;
13253: PPOPN 5
13255: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13256: LD_EXP 15
13260: PUSH
13261: LD_EXP 50
13265: AND
13266: IFFALSE 13360
13268: GO 13270
13270: DISABLE
13271: LD_INT 0
13273: PPUSH
13274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_OWVAR 2
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 32
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: ST_TO_ADDR
// if not tmp then
13322: LD_VAR 0 2
13326: NOT
13327: IFFALSE 13331
// exit ;
13329: GO 13360
// for i in tmp do
13331: LD_ADDR_VAR 0 1
13335: PUSH
13336: LD_VAR 0 2
13340: PUSH
13341: FOR_IN
13342: IFFALSE 13358
// SetFuel ( i , 0 ) ;
13344: LD_VAR 0 1
13348: PPUSH
13349: LD_INT 0
13351: PPUSH
13352: CALL_OW 240
13356: GO 13341
13358: POP
13359: POP
// end ;
13360: PPOPN 2
13362: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13363: LD_EXP 15
13367: PUSH
13368: LD_EXP 51
13372: AND
13373: IFFALSE 13439
13375: GO 13377
13377: DISABLE
13378: LD_INT 0
13380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13381: LD_ADDR_VAR 0 1
13385: PUSH
13386: LD_INT 22
13388: PUSH
13389: LD_OWVAR 2
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: LD_INT 29
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: ST_TO_ADDR
// if not tmp then
13417: LD_VAR 0 1
13421: NOT
13422: IFFALSE 13426
// exit ;
13424: GO 13439
// DestroyUnit ( tmp [ 1 ] ) ;
13426: LD_VAR 0 1
13430: PUSH
13431: LD_INT 1
13433: ARRAY
13434: PPUSH
13435: CALL_OW 65
// end ;
13439: PPOPN 1
13441: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13442: LD_EXP 15
13446: PUSH
13447: LD_EXP 53
13451: AND
13452: IFFALSE 13581
13454: GO 13456
13456: DISABLE
13457: LD_INT 0
13459: PPUSH
// begin uc_side := 0 ;
13460: LD_ADDR_OWVAR 20
13464: PUSH
13465: LD_INT 0
13467: ST_TO_ADDR
// uc_nation := nation_arabian ;
13468: LD_ADDR_OWVAR 21
13472: PUSH
13473: LD_INT 2
13475: ST_TO_ADDR
// hc_gallery :=  ;
13476: LD_ADDR_OWVAR 33
13480: PUSH
13481: LD_STRING 
13483: ST_TO_ADDR
// hc_name :=  ;
13484: LD_ADDR_OWVAR 26
13488: PUSH
13489: LD_STRING 
13491: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13492: LD_INT 1
13494: PPUSH
13495: LD_INT 11
13497: PPUSH
13498: LD_INT 10
13500: PPUSH
13501: CALL_OW 380
// un := CreateHuman ;
13505: LD_ADDR_VAR 0 1
13509: PUSH
13510: CALL_OW 44
13514: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13515: LD_VAR 0 1
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13527: LD_INT 35
13529: PPUSH
13530: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13534: LD_VAR 0 1
13538: PPUSH
13539: LD_INT 22
13541: PUSH
13542: LD_OWVAR 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: PPUSH
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 74
13565: PPUSH
13566: CALL_OW 115
// until IsDead ( un ) ;
13570: LD_VAR 0 1
13574: PPUSH
13575: CALL_OW 301
13579: IFFALSE 13527
// end ;
13581: PPOPN 1
13583: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13584: LD_EXP 15
13588: PUSH
13589: LD_EXP 55
13593: AND
13594: IFFALSE 13606
13596: GO 13598
13598: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13599: LD_STRING earthquake(getX(game), 0, 32)
13601: PPUSH
13602: CALL_OW 559
13606: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13607: LD_EXP 15
13611: PUSH
13612: LD_EXP 56
13616: AND
13617: IFFALSE 13708
13619: GO 13621
13621: DISABLE
13622: LD_INT 0
13624: PPUSH
// begin enable ;
13625: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 33
13655: PUSH
13656: LD_INT 3
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 69
13672: ST_TO_ADDR
// if not tmp then
13673: LD_VAR 0 1
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 13708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13682: LD_VAR 0 1
13686: PUSH
13687: LD_INT 1
13689: PPUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 12
13699: ARRAY
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 234
// end ;
13708: PPOPN 1
13710: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13711: LD_EXP 15
13715: PUSH
13716: LD_EXP 57
13720: AND
13721: IFFALSE 13862
13723: GO 13725
13725: DISABLE
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 1
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PPUSH
13762: CALL_OW 69
13766: ST_TO_ADDR
// if not tmp then
13767: LD_VAR 0 3
13771: NOT
13772: IFFALSE 13776
// exit ;
13774: GO 13862
// un := tmp [ rand ( 1 , tmp ) ] ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_VAR 0 3
13785: PUSH
13786: LD_INT 1
13788: PPUSH
13789: LD_VAR 0 3
13793: PPUSH
13794: CALL_OW 12
13798: ARRAY
13799: ST_TO_ADDR
// if Crawls ( un ) then
13800: LD_VAR 0 2
13804: PPUSH
13805: CALL_OW 318
13809: IFFALSE 13820
// ComWalk ( un ) ;
13811: LD_VAR 0 2
13815: PPUSH
13816: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13820: LD_VAR 0 2
13824: PPUSH
13825: LD_INT 9
13827: PPUSH
13828: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13832: LD_INT 28
13834: PPUSH
13835: LD_OWVAR 2
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13847: LD_INT 29
13849: PPUSH
13850: LD_OWVAR 2
13854: PPUSH
13855: LD_INT 2
13857: PPUSH
13858: CALL_OW 322
// end ;
13862: PPOPN 3
13864: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13865: LD_EXP 15
13869: PUSH
13870: LD_EXP 58
13874: AND
13875: IFFALSE 13986
13877: GO 13879
13879: DISABLE
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13885: LD_ADDR_VAR 0 3
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_OWVAR 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 25
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: ST_TO_ADDR
// if not tmp then
13921: LD_VAR 0 3
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 13986
// un := tmp [ rand ( 1 , tmp ) ] ;
13930: LD_ADDR_VAR 0 2
13934: PUSH
13935: LD_VAR 0 3
13939: PUSH
13940: LD_INT 1
13942: PPUSH
13943: LD_VAR 0 3
13947: PPUSH
13948: CALL_OW 12
13952: ARRAY
13953: ST_TO_ADDR
// if Crawls ( un ) then
13954: LD_VAR 0 2
13958: PPUSH
13959: CALL_OW 318
13963: IFFALSE 13974
// ComWalk ( un ) ;
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13974: LD_VAR 0 2
13978: PPUSH
13979: LD_INT 8
13981: PPUSH
13982: CALL_OW 336
// end ;
13986: PPOPN 3
13988: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13989: LD_EXP 15
13993: PUSH
13994: LD_EXP 59
13998: AND
13999: IFFALSE 14143
14001: GO 14003
14003: DISABLE
14004: LD_INT 0
14006: PPUSH
14007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14008: LD_ADDR_VAR 0 2
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_OWVAR 2
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 21
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: LD_INT 34
14040: PUSH
14041: LD_INT 12
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 34
14050: PUSH
14051: LD_INT 51
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 34
14060: PUSH
14061: LD_INT 32
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: ST_TO_ADDR
// if not tmp then
14084: LD_VAR 0 2
14088: NOT
14089: IFFALSE 14093
// exit ;
14091: GO 14143
// for i in tmp do
14093: LD_ADDR_VAR 0 1
14097: PUSH
14098: LD_VAR 0 2
14102: PUSH
14103: FOR_IN
14104: IFFALSE 14141
// if GetCargo ( i , mat_artifact ) = 0 then
14106: LD_VAR 0 1
14110: PPUSH
14111: LD_INT 4
14113: PPUSH
14114: CALL_OW 289
14118: PUSH
14119: LD_INT 0
14121: EQUAL
14122: IFFALSE 14139
// SetCargo ( i , mat_siberit , 100 ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_INT 3
14131: PPUSH
14132: LD_INT 100
14134: PPUSH
14135: CALL_OW 290
14139: GO 14103
14141: POP
14142: POP
// end ;
14143: PPOPN 2
14145: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14146: LD_EXP 15
14150: PUSH
14151: LD_EXP 60
14155: AND
14156: IFFALSE 14309
14158: GO 14160
14160: DISABLE
14161: LD_INT 0
14163: PPUSH
14164: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14165: LD_ADDR_VAR 0 2
14169: PUSH
14170: LD_INT 22
14172: PUSH
14173: LD_OWVAR 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: ST_TO_ADDR
// if not tmp then
14187: LD_VAR 0 2
14191: NOT
14192: IFFALSE 14196
// exit ;
14194: GO 14309
// for i := 1 to 2 do
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: DOUBLE
14202: LD_INT 1
14204: DEC
14205: ST_TO_ADDR
14206: LD_INT 2
14208: PUSH
14209: FOR_TO
14210: IFFALSE 14307
// begin uc_side := your_side ;
14212: LD_ADDR_OWVAR 20
14216: PUSH
14217: LD_OWVAR 2
14221: ST_TO_ADDR
// uc_nation := nation_american ;
14222: LD_ADDR_OWVAR 21
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// vc_chassis := us_morphling ;
14230: LD_ADDR_OWVAR 37
14234: PUSH
14235: LD_INT 5
14237: ST_TO_ADDR
// vc_engine := engine_siberite ;
14238: LD_ADDR_OWVAR 39
14242: PUSH
14243: LD_INT 3
14245: ST_TO_ADDR
// vc_control := control_computer ;
14246: LD_ADDR_OWVAR 38
14250: PUSH
14251: LD_INT 3
14253: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14254: LD_ADDR_OWVAR 40
14258: PUSH
14259: LD_INT 10
14261: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14262: CALL_OW 45
14266: PPUSH
14267: LD_VAR 0 2
14271: PUSH
14272: LD_INT 1
14274: ARRAY
14275: PPUSH
14276: CALL_OW 250
14280: PPUSH
14281: LD_VAR 0 2
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: CALL_OW 251
14294: PPUSH
14295: LD_INT 12
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 50
// end ;
14305: GO 14209
14307: POP
14308: POP
// end ;
14309: PPOPN 2
14311: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14312: LD_EXP 15
14316: PUSH
14317: LD_EXP 61
14321: AND
14322: IFFALSE 14544
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14335: LD_ADDR_VAR 0 6
14339: PUSH
14340: LD_INT 22
14342: PUSH
14343: LD_OWVAR 2
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 3
14364: PUSH
14365: LD_INT 23
14367: PUSH
14368: LD_INT 0
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ST_TO_ADDR
// if not tmp then
14389: LD_VAR 0 6
14393: NOT
14394: IFFALSE 14398
// exit ;
14396: GO 14544
// s1 := rand ( 1 , 4 ) ;
14398: LD_ADDR_VAR 0 2
14402: PUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_INT 4
14408: PPUSH
14409: CALL_OW 12
14413: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_VAR 0 6
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 259
14437: ST_TO_ADDR
// if s1 = 1 then
14438: LD_VAR 0 2
14442: PUSH
14443: LD_INT 1
14445: EQUAL
14446: IFFALSE 14466
// s2 := rand ( 2 , 4 ) else
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 2
14455: PPUSH
14456: LD_INT 4
14458: PPUSH
14459: CALL_OW 12
14463: ST_TO_ADDR
14464: GO 14474
// s2 := 1 ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_INT 1
14473: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 6
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: CALL_OW 259
14497: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14498: LD_VAR 0 6
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PPUSH
14507: LD_VAR 0 2
14511: PPUSH
14512: LD_VAR 0 5
14516: PPUSH
14517: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14521: LD_VAR 0 6
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PPUSH
14530: LD_VAR 0 3
14534: PPUSH
14535: LD_VAR 0 4
14539: PPUSH
14540: CALL_OW 237
// end ;
14544: PPOPN 6
14546: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14547: LD_EXP 15
14551: PUSH
14552: LD_EXP 62
14556: AND
14557: IFFALSE 14636
14559: GO 14561
14561: DISABLE
14562: LD_INT 0
14564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14565: LD_ADDR_VAR 0 1
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_OWVAR 2
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 30
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: ST_TO_ADDR
// if not tmp then
14601: LD_VAR 0 1
14605: NOT
14606: IFFALSE 14610
// exit ;
14608: GO 14636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14610: LD_VAR 0 1
14614: PUSH
14615: LD_INT 1
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 12
14627: ARRAY
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: CALL_OW 234
// end ;
14636: PPOPN 1
14638: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14639: LD_EXP 15
14643: PUSH
14644: LD_EXP 63
14648: AND
14649: IFFALSE 14761
14651: GO 14653
14653: DISABLE
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14658: LD_ADDR_VAR 0 2
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_OWVAR 2
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 30
14680: PUSH
14681: LD_INT 27
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 26
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 28
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 69
14722: ST_TO_ADDR
// if not tmp then
14723: LD_VAR 0 2
14727: NOT
14728: IFFALSE 14732
// exit ;
14730: GO 14761
// for i in tmp do
14732: LD_ADDR_VAR 0 1
14736: PUSH
14737: LD_VAR 0 2
14741: PUSH
14742: FOR_IN
14743: IFFALSE 14759
// SetLives ( i , 1 ) ;
14745: LD_VAR 0 1
14749: PPUSH
14750: LD_INT 1
14752: PPUSH
14753: CALL_OW 234
14757: GO 14742
14759: POP
14760: POP
// end ;
14761: PPOPN 2
14763: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14764: LD_EXP 15
14768: PUSH
14769: LD_EXP 64
14773: AND
14774: IFFALSE 15048
14776: GO 14778
14778: DISABLE
14779: LD_INT 0
14781: PPUSH
14782: PPUSH
14783: PPUSH
// begin i := rand ( 1 , 7 ) ;
14784: LD_ADDR_VAR 0 1
14788: PUSH
14789: LD_INT 1
14791: PPUSH
14792: LD_INT 7
14794: PPUSH
14795: CALL_OW 12
14799: ST_TO_ADDR
// case i of 1 :
14800: LD_VAR 0 1
14804: PUSH
14805: LD_INT 1
14807: DOUBLE
14808: EQUAL
14809: IFTRUE 14813
14811: GO 14823
14813: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14814: LD_STRING earthquake(getX(game), 0, 32)
14816: PPUSH
14817: CALL_OW 559
14821: GO 15048
14823: LD_INT 2
14825: DOUBLE
14826: EQUAL
14827: IFTRUE 14831
14829: GO 14845
14831: POP
// begin ToLua ( displayStucuk(); ) ;
14832: LD_STRING displayStucuk();
14834: PPUSH
14835: CALL_OW 559
// ResetFog ;
14839: CALL_OW 335
// end ; 3 :
14843: GO 15048
14845: LD_INT 3
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14957
14853: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_OWVAR 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 25
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: ST_TO_ADDR
// if not tmp then
14890: LD_VAR 0 2
14894: NOT
14895: IFFALSE 14899
// exit ;
14897: GO 15048
// un := tmp [ rand ( 1 , tmp ) ] ;
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: PPUSH
14912: LD_VAR 0 2
14916: PPUSH
14917: CALL_OW 12
14921: ARRAY
14922: ST_TO_ADDR
// if Crawls ( un ) then
14923: LD_VAR 0 3
14927: PPUSH
14928: CALL_OW 318
14932: IFFALSE 14943
// ComWalk ( un ) ;
14934: LD_VAR 0 3
14938: PPUSH
14939: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_INT 8
14950: PPUSH
14951: CALL_OW 336
// end ; 4 :
14955: GO 15048
14957: LD_INT 4
14959: DOUBLE
14960: EQUAL
14961: IFTRUE 14965
14963: GO 15026
14965: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14966: LD_ADDR_VAR 0 2
14970: PUSH
14971: LD_INT 22
14973: PUSH
14974: LD_OWVAR 2
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 30
14985: PUSH
14986: LD_INT 29
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// if not tmp then
15002: LD_VAR 0 2
15006: NOT
15007: IFFALSE 15011
// exit ;
15009: GO 15048
// DestroyUnit ( tmp [ 1 ] ) ;
15011: LD_VAR 0 2
15015: PUSH
15016: LD_INT 1
15018: ARRAY
15019: PPUSH
15020: CALL_OW 65
// end ; 5 .. 7 :
15024: GO 15048
15026: LD_INT 5
15028: DOUBLE
15029: GREATEREQUAL
15030: IFFALSE 15038
15032: LD_INT 7
15034: DOUBLE
15035: LESSEQUAL
15036: IFTRUE 15040
15038: GO 15047
15040: POP
// StreamSibBomb ; end ;
15041: CALL 11328 0 0
15045: GO 15048
15047: POP
// end ;
15048: PPOPN 3
15050: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15051: LD_EXP 15
15055: PUSH
15056: LD_EXP 65
15060: AND
15061: IFFALSE 15217
15063: GO 15065
15065: DISABLE
15066: LD_INT 0
15068: PPUSH
15069: PPUSH
15070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_INT 81
15078: PUSH
15079: LD_OWVAR 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 69
15124: ST_TO_ADDR
// if not tmp then
15125: LD_VAR 0 2
15129: NOT
15130: IFFALSE 15134
// exit ;
15132: GO 15217
// p := 0 ;
15134: LD_ADDR_VAR 0 3
15138: PUSH
15139: LD_INT 0
15141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15142: LD_INT 35
15144: PPUSH
15145: CALL_OW 67
// p := p + 1 ;
15149: LD_ADDR_VAR 0 3
15153: PUSH
15154: LD_VAR 0 3
15158: PUSH
15159: LD_INT 1
15161: PLUS
15162: ST_TO_ADDR
// for i in tmp do
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_VAR 0 2
15172: PUSH
15173: FOR_IN
15174: IFFALSE 15205
// if GetLives ( i ) < 1000 then
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 256
15185: PUSH
15186: LD_INT 1000
15188: LESS
15189: IFFALSE 15203
// SetLives ( i , 1000 ) ;
15191: LD_VAR 0 1
15195: PPUSH
15196: LD_INT 1000
15198: PPUSH
15199: CALL_OW 234
15203: GO 15173
15205: POP
15206: POP
// until p > 20 ;
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 20
15214: GREATER
15215: IFFALSE 15142
// end ;
15217: PPOPN 3
15219: END
// every 0 0$1 trigger StreamModeActive and sTime do
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 66
15229: AND
15230: IFFALSE 15265
15232: GO 15234
15234: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15235: LD_INT 28
15237: PPUSH
15238: LD_OWVAR 2
15242: PPUSH
15243: LD_INT 2
15245: PPUSH
15246: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15250: LD_INT 30
15252: PPUSH
15253: LD_OWVAR 2
15257: PPUSH
15258: LD_INT 2
15260: PPUSH
15261: CALL_OW 322
// end ;
15265: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15266: LD_EXP 15
15270: PUSH
15271: LD_EXP 67
15275: AND
15276: IFFALSE 15397
15278: GO 15280
15280: DISABLE
15281: LD_INT 0
15283: PPUSH
15284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_INT 22
15292: PUSH
15293: LD_OWVAR 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 3
15314: PUSH
15315: LD_INT 23
15317: PUSH
15318: LD_INT 0
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: PPUSH
15334: CALL_OW 69
15338: ST_TO_ADDR
// if not tmp then
15339: LD_VAR 0 2
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15397
// for i in tmp do
15348: LD_ADDR_VAR 0 1
15352: PUSH
15353: LD_VAR 0 2
15357: PUSH
15358: FOR_IN
15359: IFFALSE 15395
// begin if Crawls ( i ) then
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 318
15370: IFFALSE 15381
// ComWalk ( i ) ;
15372: LD_VAR 0 1
15376: PPUSH
15377: CALL_OW 138
// SetClass ( i , 2 ) ;
15381: LD_VAR 0 1
15385: PPUSH
15386: LD_INT 2
15388: PPUSH
15389: CALL_OW 336
// end ;
15393: GO 15358
15395: POP
15396: POP
// end ;
15397: PPOPN 2
15399: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15400: LD_EXP 15
15404: PUSH
15405: LD_EXP 68
15409: AND
15410: IFFALSE 15691
15412: GO 15414
15414: DISABLE
15415: LD_INT 0
15417: PPUSH
15418: PPUSH
15419: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15420: LD_OWVAR 2
15424: PPUSH
15425: LD_INT 9
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15438: LD_INT 9
15440: PPUSH
15441: LD_OWVAR 2
15445: PPUSH
15446: CALL_OW 343
// uc_side := 9 ;
15450: LD_ADDR_OWVAR 20
15454: PUSH
15455: LD_INT 9
15457: ST_TO_ADDR
// uc_nation := 2 ;
15458: LD_ADDR_OWVAR 21
15462: PUSH
15463: LD_INT 2
15465: ST_TO_ADDR
// hc_name := Dark Warrior ;
15466: LD_ADDR_OWVAR 26
15470: PUSH
15471: LD_STRING Dark Warrior
15473: ST_TO_ADDR
// hc_gallery :=  ;
15474: LD_ADDR_OWVAR 33
15478: PUSH
15479: LD_STRING 
15481: ST_TO_ADDR
// hc_noskilllimit := true ;
15482: LD_ADDR_OWVAR 76
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15490: LD_ADDR_OWVAR 31
15494: PUSH
15495: LD_INT 30
15497: PUSH
15498: LD_INT 30
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: ST_TO_ADDR
// un := CreateHuman ;
15513: LD_ADDR_VAR 0 3
15517: PUSH
15518: CALL_OW 44
15522: ST_TO_ADDR
// hc_noskilllimit := false ;
15523: LD_ADDR_OWVAR 76
15527: PUSH
15528: LD_INT 0
15530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 51
// p := 0 ;
15543: LD_ADDR_VAR 0 2
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15551: LD_INT 35
15553: PPUSH
15554: CALL_OW 67
// p := p + 1 ;
15558: LD_ADDR_VAR 0 2
15562: PUSH
15563: LD_VAR 0 2
15567: PUSH
15568: LD_INT 1
15570: PLUS
15571: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15572: LD_VAR 0 3
15576: PPUSH
15577: CALL_OW 256
15581: PUSH
15582: LD_INT 1000
15584: LESS
15585: IFFALSE 15599
// SetLives ( un , 1000 ) ;
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 1000
15594: PPUSH
15595: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_INT 81
15606: PUSH
15607: LD_OWVAR 2
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 91
15618: PUSH
15619: LD_VAR 0 3
15623: PUSH
15624: LD_INT 30
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 69
15640: PPUSH
15641: LD_VAR 0 3
15645: PPUSH
15646: CALL_OW 74
15650: PPUSH
15651: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15655: LD_VAR 0 2
15659: PUSH
15660: LD_INT 60
15662: GREATER
15663: PUSH
15664: LD_VAR 0 3
15668: PPUSH
15669: CALL_OW 301
15673: OR
15674: IFFALSE 15551
// if un then
15676: LD_VAR 0 3
15680: IFFALSE 15691
// RemoveUnit ( un ) ;
15682: LD_VAR 0 3
15686: PPUSH
15687: CALL_OW 64
// end ;
15691: PPOPN 3
15693: END
