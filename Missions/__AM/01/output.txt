// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4874 0 0
// DefineStreamItems ( ) ;
4869: CALL 5314 0 0
// end ;
4873: END
// function InitStreamMode ; begin
4874: LD_INT 0
4876: PPUSH
// streamModeActive := false ;
4877: LD_ADDR_EXP 15
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// normalCounter := 26 ;
4885: LD_ADDR_EXP 16
4889: PUSH
4890: LD_INT 26
4892: ST_TO_ADDR
// hardcoreCounter := 12 ;
4893: LD_ADDR_EXP 17
4897: PUSH
4898: LD_INT 12
4900: ST_TO_ADDR
// sRocket := false ;
4901: LD_ADDR_EXP 20
4905: PUSH
4906: LD_INT 0
4908: ST_TO_ADDR
// sSpeed := false ;
4909: LD_ADDR_EXP 19
4913: PUSH
4914: LD_INT 0
4916: ST_TO_ADDR
// sEngine := false ;
4917: LD_ADDR_EXP 21
4921: PUSH
4922: LD_INT 0
4924: ST_TO_ADDR
// sSpec := false ;
4925: LD_ADDR_EXP 18
4929: PUSH
4930: LD_INT 0
4932: ST_TO_ADDR
// sLevel := false ;
4933: LD_ADDR_EXP 22
4937: PUSH
4938: LD_INT 0
4940: ST_TO_ADDR
// sArmoury := false ;
4941: LD_ADDR_EXP 23
4945: PUSH
4946: LD_INT 0
4948: ST_TO_ADDR
// sRadar := false ;
4949: LD_ADDR_EXP 24
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// sBunker := false ;
4957: LD_ADDR_EXP 25
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// sHack := false ;
4965: LD_ADDR_EXP 26
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// sFire := false ;
4973: LD_ADDR_EXP 27
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// sRefresh := false ;
4981: LD_ADDR_EXP 28
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// sExp := false ;
4989: LD_ADDR_EXP 29
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// sDepot := false ;
4997: LD_ADDR_EXP 30
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// sFlag := false ;
5005: LD_ADDR_EXP 31
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// sKamikadze := false ;
5013: LD_ADDR_EXP 39
5017: PUSH
5018: LD_INT 0
5020: ST_TO_ADDR
// sTroll := false ;
5021: LD_ADDR_EXP 40
5025: PUSH
5026: LD_INT 0
5028: ST_TO_ADDR
// sSlow := false ;
5029: LD_ADDR_EXP 41
5033: PUSH
5034: LD_INT 0
5036: ST_TO_ADDR
// sLack := false ;
5037: LD_ADDR_EXP 42
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// sTank := false ;
5045: LD_ADDR_EXP 44
5049: PUSH
5050: LD_INT 0
5052: ST_TO_ADDR
// sRemote := false ;
5053: LD_ADDR_EXP 45
5057: PUSH
5058: LD_INT 0
5060: ST_TO_ADDR
// sPowell := false ;
5061: LD_ADDR_EXP 46
5065: PUSH
5066: LD_INT 0
5068: ST_TO_ADDR
// sTeleport := false ;
5069: LD_ADDR_EXP 49
5073: PUSH
5074: LD_INT 0
5076: ST_TO_ADDR
// sOilTower := false ;
5077: LD_ADDR_EXP 51
5081: PUSH
5082: LD_INT 0
5084: ST_TO_ADDR
// sShovel := false ;
5085: LD_ADDR_EXP 52
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
// sSheik := false ;
5093: LD_ADDR_EXP 53
5097: PUSH
5098: LD_INT 0
5100: ST_TO_ADDR
// sEarthquake := false ;
5101: LD_ADDR_EXP 55
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// sAI := false ;
5109: LD_ADDR_EXP 56
5113: PUSH
5114: LD_INT 0
5116: ST_TO_ADDR
// sCargo := false ;
5117: LD_ADDR_EXP 59
5121: PUSH
5122: LD_INT 0
5124: ST_TO_ADDR
// sDLaser := false ;
5125: LD_ADDR_EXP 60
5129: PUSH
5130: LD_INT 0
5132: ST_TO_ADDR
// sExchange := false ;
5133: LD_ADDR_EXP 61
5137: PUSH
5138: LD_INT 0
5140: ST_TO_ADDR
// sFac := false ;
5141: LD_ADDR_EXP 62
5145: PUSH
5146: LD_INT 0
5148: ST_TO_ADDR
// sPower := false ;
5149: LD_ADDR_EXP 63
5153: PUSH
5154: LD_INT 0
5156: ST_TO_ADDR
// sRandom := false ;
5157: LD_ADDR_EXP 64
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// sShield := false ;
5165: LD_ADDR_EXP 65
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// sTime := false ;
5173: LD_ADDR_EXP 66
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
// sTools := false ;
5181: LD_ADDR_EXP 67
5185: PUSH
5186: LD_INT 0
5188: ST_TO_ADDR
// sSold := false ;
5189: LD_ADDR_EXP 32
5193: PUSH
5194: LD_INT 0
5196: ST_TO_ADDR
// sDiff := false ;
5197: LD_ADDR_EXP 33
5201: PUSH
5202: LD_INT 0
5204: ST_TO_ADDR
// sFog := false ;
5205: LD_ADDR_EXP 36
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// sReset := false ;
5213: LD_ADDR_EXP 37
5217: PUSH
5218: LD_INT 0
5220: ST_TO_ADDR
// sSun := false ;
5221: LD_ADDR_EXP 38
5225: PUSH
5226: LD_INT 0
5228: ST_TO_ADDR
// sTiger := false ;
5229: LD_ADDR_EXP 34
5233: PUSH
5234: LD_INT 0
5236: ST_TO_ADDR
// sBomb := false ;
5237: LD_ADDR_EXP 35
5241: PUSH
5242: LD_INT 0
5244: ST_TO_ADDR
// sWound := false ;
5245: LD_ADDR_EXP 43
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// sBetray := false ;
5253: LD_ADDR_EXP 47
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// sContamin := false ;
5261: LD_ADDR_EXP 48
5265: PUSH
5266: LD_INT 0
5268: ST_TO_ADDR
// sOil := false ;
5269: LD_ADDR_EXP 50
5273: PUSH
5274: LD_INT 0
5276: ST_TO_ADDR
// sStu := false ;
5277: LD_ADDR_EXP 54
5281: PUSH
5282: LD_INT 0
5284: ST_TO_ADDR
// sBazooka := false ;
5285: LD_ADDR_EXP 57
5289: PUSH
5290: LD_INT 0
5292: ST_TO_ADDR
// sMortar := false ;
5293: LD_ADDR_EXP 58
5297: PUSH
5298: LD_INT 0
5300: ST_TO_ADDR
// sRanger := false ;
5301: LD_ADDR_EXP 68
5305: PUSH
5306: LD_INT 0
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 1
5313: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
5319: PPUSH
5320: PPUSH
// result := [ ] ;
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// if campaign_id = 1 then
5328: LD_OWVAR 69
5332: PUSH
5333: LD_INT 1
5335: EQUAL
5336: IFFALSE 8284
// begin case mission_number of 1 :
5338: LD_OWVAR 70
5342: PUSH
5343: LD_INT 1
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5415
5351: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 15
5371: PUSH
5372: LD_INT 16
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 26
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 101
5397: PUSH
5398: LD_INT 102
5400: PUSH
5401: LD_INT 106
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 8284
5415: LD_INT 2
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5495
5423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 11
5437: PUSH
5438: LD_INT 12
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: LD_INT 16
5446: PUSH
5447: LD_INT 22
5449: PUSH
5450: LD_INT 23
5452: PUSH
5453: LD_INT 26
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 101
5469: PUSH
5470: LD_INT 102
5472: PUSH
5473: LD_INT 105
5475: PUSH
5476: LD_INT 106
5478: PUSH
5479: LD_INT 108
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 8284
5495: LD_INT 3
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5579
5503: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5504: LD_ADDR_VAR 0 1
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: LD_INT 5
5517: PUSH
5518: LD_INT 11
5520: PUSH
5521: LD_INT 12
5523: PUSH
5524: LD_INT 15
5526: PUSH
5527: LD_INT 16
5529: PUSH
5530: LD_INT 22
5532: PUSH
5533: LD_INT 26
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 101
5553: PUSH
5554: LD_INT 102
5556: PUSH
5557: LD_INT 105
5559: PUSH
5560: LD_INT 106
5562: PUSH
5563: LD_INT 108
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: ST_TO_ADDR
5577: GO 8284
5579: LD_INT 4
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 5671
5587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 4
5598: PUSH
5599: LD_INT 5
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 11
5607: PUSH
5608: LD_INT 12
5610: PUSH
5611: LD_INT 15
5613: PUSH
5614: LD_INT 16
5616: PUSH
5617: LD_INT 22
5619: PUSH
5620: LD_INT 23
5622: PUSH
5623: LD_INT 26
5625: PUSH
5626: LD_INT 36
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 101
5645: PUSH
5646: LD_INT 102
5648: PUSH
5649: LD_INT 105
5651: PUSH
5652: LD_INT 106
5654: PUSH
5655: LD_INT 108
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 8284
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5779
5679: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5680: LD_ADDR_VAR 0 1
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: LD_INT 6
5696: PUSH
5697: LD_INT 8
5699: PUSH
5700: LD_INT 11
5702: PUSH
5703: LD_INT 12
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: LD_INT 16
5711: PUSH
5712: LD_INT 22
5714: PUSH
5715: LD_INT 23
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 36
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 105
5751: PUSH
5752: LD_INT 106
5754: PUSH
5755: LD_INT 108
5757: PUSH
5758: LD_INT 109
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8284
5779: LD_INT 6
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5907
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 8
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 15
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: LD_INT 20
5822: PUSH
5823: LD_INT 21
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 23
5831: PUSH
5832: LD_INT 25
5834: PUSH
5835: LD_INT 26
5837: PUSH
5838: LD_INT 30
5840: PUSH
5841: LD_INT 31
5843: PUSH
5844: LD_INT 32
5846: PUSH
5847: LD_INT 36
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 105
5879: PUSH
5880: LD_INT 106
5882: PUSH
5883: LD_INT 108
5885: PUSH
5886: LD_INT 109
5888: PUSH
5889: LD_INT 112
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 8284
5907: LD_INT 7
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 6015
5915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: LD_INT 2
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 15
5941: PUSH
5942: LD_INT 16
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 21
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 23
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 101
5981: PUSH
5982: LD_INT 102
5984: PUSH
5985: LD_INT 103
5987: PUSH
5988: LD_INT 105
5990: PUSH
5991: LD_INT 106
5993: PUSH
5994: LD_INT 108
5996: PUSH
5997: LD_INT 112
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8284
6015: LD_INT 8
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6151
6023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 6
6040: PUSH
6041: LD_INT 7
6043: PUSH
6044: LD_INT 8
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 20
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 23
6070: PUSH
6071: LD_INT 25
6073: PUSH
6074: LD_INT 26
6076: PUSH
6077: LD_INT 30
6079: PUSH
6080: LD_INT 31
6082: PUSH
6083: LD_INT 32
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 101
6113: PUSH
6114: LD_INT 102
6116: PUSH
6117: LD_INT 103
6119: PUSH
6120: LD_INT 105
6122: PUSH
6123: LD_INT 106
6125: PUSH
6126: LD_INT 108
6128: PUSH
6129: LD_INT 109
6131: PUSH
6132: LD_INT 112
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 8284
6151: LD_INT 9
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6295
6159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6160: LD_ADDR_VAR 0 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: LD_INT 8
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 20
6197: PUSH
6198: LD_INT 21
6200: PUSH
6201: LD_INT 22
6203: PUSH
6204: LD_INT 23
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 28
6215: PUSH
6216: LD_INT 30
6218: PUSH
6219: LD_INT 31
6221: PUSH
6222: LD_INT 32
6224: PUSH
6225: LD_INT 36
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 101
6253: PUSH
6254: LD_INT 102
6256: PUSH
6257: LD_INT 103
6259: PUSH
6260: LD_INT 105
6262: PUSH
6263: LD_INT 106
6265: PUSH
6266: LD_INT 108
6268: PUSH
6269: LD_INT 109
6271: PUSH
6272: LD_INT 112
6274: PUSH
6275: LD_INT 114
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: ST_TO_ADDR
6293: GO 8284
6295: LD_INT 10
6297: DOUBLE
6298: EQUAL
6299: IFTRUE 6303
6301: GO 6487
6303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 5
6317: PUSH
6318: LD_INT 6
6320: PUSH
6321: LD_INT 7
6323: PUSH
6324: LD_INT 8
6326: PUSH
6327: LD_INT 9
6329: PUSH
6330: LD_INT 10
6332: PUSH
6333: LD_INT 11
6335: PUSH
6336: LD_INT 12
6338: PUSH
6339: LD_INT 13
6341: PUSH
6342: LD_INT 14
6344: PUSH
6345: LD_INT 15
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: LD_INT 17
6353: PUSH
6354: LD_INT 18
6356: PUSH
6357: LD_INT 19
6359: PUSH
6360: LD_INT 20
6362: PUSH
6363: LD_INT 21
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 24
6374: PUSH
6375: LD_INT 25
6377: PUSH
6378: LD_INT 26
6380: PUSH
6381: LD_INT 28
6383: PUSH
6384: LD_INT 30
6386: PUSH
6387: LD_INT 31
6389: PUSH
6390: LD_INT 32
6392: PUSH
6393: LD_INT 36
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 101
6429: PUSH
6430: LD_INT 102
6432: PUSH
6433: LD_INT 103
6435: PUSH
6436: LD_INT 104
6438: PUSH
6439: LD_INT 105
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 107
6447: PUSH
6448: LD_INT 108
6450: PUSH
6451: LD_INT 109
6453: PUSH
6454: LD_INT 110
6456: PUSH
6457: LD_INT 111
6459: PUSH
6460: LD_INT 112
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 8284
6487: LD_INT 11
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6687
6495: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: LD_INT 6
6515: PUSH
6516: LD_INT 7
6518: PUSH
6519: LD_INT 8
6521: PUSH
6522: LD_INT 9
6524: PUSH
6525: LD_INT 10
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: LD_INT 15
6542: PUSH
6543: LD_INT 16
6545: PUSH
6546: LD_INT 17
6548: PUSH
6549: LD_INT 18
6551: PUSH
6552: LD_INT 19
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 24
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 26
6575: PUSH
6576: LD_INT 28
6578: PUSH
6579: LD_INT 30
6581: PUSH
6582: LD_INT 31
6584: PUSH
6585: LD_INT 32
6587: PUSH
6588: LD_INT 34
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 101
6629: PUSH
6630: LD_INT 102
6632: PUSH
6633: LD_INT 103
6635: PUSH
6636: LD_INT 104
6638: PUSH
6639: LD_INT 105
6641: PUSH
6642: LD_INT 106
6644: PUSH
6645: LD_INT 107
6647: PUSH
6648: LD_INT 108
6650: PUSH
6651: LD_INT 109
6653: PUSH
6654: LD_INT 110
6656: PUSH
6657: LD_INT 111
6659: PUSH
6660: LD_INT 112
6662: PUSH
6663: LD_INT 114
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 8284
6687: LD_INT 12
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6903
6695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: LD_INT 6
6718: PUSH
6719: LD_INT 7
6721: PUSH
6722: LD_INT 8
6724: PUSH
6725: LD_INT 9
6727: PUSH
6728: LD_INT 10
6730: PUSH
6731: LD_INT 11
6733: PUSH
6734: LD_INT 12
6736: PUSH
6737: LD_INT 13
6739: PUSH
6740: LD_INT 14
6742: PUSH
6743: LD_INT 15
6745: PUSH
6746: LD_INT 16
6748: PUSH
6749: LD_INT 17
6751: PUSH
6752: LD_INT 18
6754: PUSH
6755: LD_INT 19
6757: PUSH
6758: LD_INT 20
6760: PUSH
6761: LD_INT 21
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 23
6769: PUSH
6770: LD_INT 24
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 28
6784: PUSH
6785: LD_INT 30
6787: PUSH
6788: LD_INT 31
6790: PUSH
6791: LD_INT 32
6793: PUSH
6794: LD_INT 33
6796: PUSH
6797: LD_INT 34
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 101
6841: PUSH
6842: LD_INT 102
6844: PUSH
6845: LD_INT 103
6847: PUSH
6848: LD_INT 104
6850: PUSH
6851: LD_INT 105
6853: PUSH
6854: LD_INT 106
6856: PUSH
6857: LD_INT 107
6859: PUSH
6860: LD_INT 108
6862: PUSH
6863: LD_INT 109
6865: PUSH
6866: LD_INT 110
6868: PUSH
6869: LD_INT 111
6871: PUSH
6872: LD_INT 112
6874: PUSH
6875: LD_INT 113
6877: PUSH
6878: LD_INT 114
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
6901: GO 8284
6903: LD_INT 13
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7119
6911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: LD_INT 5
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: LD_INT 7
6937: PUSH
6938: LD_INT 8
6940: PUSH
6941: LD_INT 9
6943: PUSH
6944: LD_INT 10
6946: PUSH
6947: LD_INT 11
6949: PUSH
6950: LD_INT 12
6952: PUSH
6953: LD_INT 13
6955: PUSH
6956: LD_INT 14
6958: PUSH
6959: LD_INT 15
6961: PUSH
6962: LD_INT 16
6964: PUSH
6965: LD_INT 17
6967: PUSH
6968: LD_INT 18
6970: PUSH
6971: LD_INT 19
6973: PUSH
6974: LD_INT 20
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 23
6985: PUSH
6986: LD_INT 24
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 26
6994: PUSH
6995: LD_INT 27
6997: PUSH
6998: LD_INT 28
7000: PUSH
7001: LD_INT 30
7003: PUSH
7004: LD_INT 31
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: LD_INT 33
7012: PUSH
7013: LD_INT 34
7015: PUSH
7016: LD_INT 36
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 101
7057: PUSH
7058: LD_INT 102
7060: PUSH
7061: LD_INT 103
7063: PUSH
7064: LD_INT 104
7066: PUSH
7067: LD_INT 105
7069: PUSH
7070: LD_INT 106
7072: PUSH
7073: LD_INT 107
7075: PUSH
7076: LD_INT 108
7078: PUSH
7079: LD_INT 109
7081: PUSH
7082: LD_INT 110
7084: PUSH
7085: LD_INT 111
7087: PUSH
7088: LD_INT 112
7090: PUSH
7091: LD_INT 113
7093: PUSH
7094: LD_INT 114
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: ST_TO_ADDR
7117: GO 8284
7119: LD_INT 14
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7339
7127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: LD_INT 4
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: LD_INT 6
7150: PUSH
7151: LD_INT 7
7153: PUSH
7154: LD_INT 8
7156: PUSH
7157: LD_INT 9
7159: PUSH
7160: LD_INT 10
7162: PUSH
7163: LD_INT 11
7165: PUSH
7166: LD_INT 12
7168: PUSH
7169: LD_INT 13
7171: PUSH
7172: LD_INT 14
7174: PUSH
7175: LD_INT 15
7177: PUSH
7178: LD_INT 16
7180: PUSH
7181: LD_INT 17
7183: PUSH
7184: LD_INT 18
7186: PUSH
7187: LD_INT 19
7189: PUSH
7190: LD_INT 20
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 22
7198: PUSH
7199: LD_INT 23
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: LD_INT 25
7207: PUSH
7208: LD_INT 26
7210: PUSH
7211: LD_INT 27
7213: PUSH
7214: LD_INT 28
7216: PUSH
7217: LD_INT 29
7219: PUSH
7220: LD_INT 30
7222: PUSH
7223: LD_INT 31
7225: PUSH
7226: LD_INT 32
7228: PUSH
7229: LD_INT 33
7231: PUSH
7232: LD_INT 34
7234: PUSH
7235: LD_INT 36
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 101
7277: PUSH
7278: LD_INT 102
7280: PUSH
7281: LD_INT 103
7283: PUSH
7284: LD_INT 104
7286: PUSH
7287: LD_INT 105
7289: PUSH
7290: LD_INT 106
7292: PUSH
7293: LD_INT 107
7295: PUSH
7296: LD_INT 108
7298: PUSH
7299: LD_INT 109
7301: PUSH
7302: LD_INT 110
7304: PUSH
7305: LD_INT 111
7307: PUSH
7308: LD_INT 112
7310: PUSH
7311: LD_INT 113
7313: PUSH
7314: LD_INT 114
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: ST_TO_ADDR
7337: GO 8284
7339: LD_INT 15
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7347
7345: GO 7559
7347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7348: LD_ADDR_VAR 0 1
7352: PUSH
7353: LD_INT 1
7355: PUSH
7356: LD_INT 2
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 4
7364: PUSH
7365: LD_INT 5
7367: PUSH
7368: LD_INT 6
7370: PUSH
7371: LD_INT 7
7373: PUSH
7374: LD_INT 8
7376: PUSH
7377: LD_INT 9
7379: PUSH
7380: LD_INT 10
7382: PUSH
7383: LD_INT 11
7385: PUSH
7386: LD_INT 12
7388: PUSH
7389: LD_INT 13
7391: PUSH
7392: LD_INT 14
7394: PUSH
7395: LD_INT 15
7397: PUSH
7398: LD_INT 16
7400: PUSH
7401: LD_INT 17
7403: PUSH
7404: LD_INT 18
7406: PUSH
7407: LD_INT 19
7409: PUSH
7410: LD_INT 20
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 22
7418: PUSH
7419: LD_INT 23
7421: PUSH
7422: LD_INT 24
7424: PUSH
7425: LD_INT 25
7427: PUSH
7428: LD_INT 26
7430: PUSH
7431: LD_INT 27
7433: PUSH
7434: LD_INT 28
7436: PUSH
7437: LD_INT 29
7439: PUSH
7440: LD_INT 30
7442: PUSH
7443: LD_INT 31
7445: PUSH
7446: LD_INT 32
7448: PUSH
7449: LD_INT 33
7451: PUSH
7452: LD_INT 34
7454: PUSH
7455: LD_INT 36
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 101
7497: PUSH
7498: LD_INT 102
7500: PUSH
7501: LD_INT 103
7503: PUSH
7504: LD_INT 104
7506: PUSH
7507: LD_INT 105
7509: PUSH
7510: LD_INT 106
7512: PUSH
7513: LD_INT 107
7515: PUSH
7516: LD_INT 108
7518: PUSH
7519: LD_INT 109
7521: PUSH
7522: LD_INT 110
7524: PUSH
7525: LD_INT 111
7527: PUSH
7528: LD_INT 112
7530: PUSH
7531: LD_INT 113
7533: PUSH
7534: LD_INT 114
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: ST_TO_ADDR
7557: GO 8284
7559: LD_INT 16
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7691
7567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7568: LD_ADDR_VAR 0 1
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: LD_INT 4
7578: PUSH
7579: LD_INT 5
7581: PUSH
7582: LD_INT 7
7584: PUSH
7585: LD_INT 11
7587: PUSH
7588: LD_INT 12
7590: PUSH
7591: LD_INT 15
7593: PUSH
7594: LD_INT 16
7596: PUSH
7597: LD_INT 20
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 23
7608: PUSH
7609: LD_INT 25
7611: PUSH
7612: LD_INT 26
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 31
7620: PUSH
7621: LD_INT 32
7623: PUSH
7624: LD_INT 33
7626: PUSH
7627: LD_INT 34
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 101
7653: PUSH
7654: LD_INT 102
7656: PUSH
7657: LD_INT 103
7659: PUSH
7660: LD_INT 106
7662: PUSH
7663: LD_INT 108
7665: PUSH
7666: LD_INT 112
7668: PUSH
7669: LD_INT 113
7671: PUSH
7672: LD_INT 114
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 8284
7691: LD_INT 17
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7911
7699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 1
7707: PUSH
7708: LD_INT 2
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: LD_INT 4
7716: PUSH
7717: LD_INT 5
7719: PUSH
7720: LD_INT 6
7722: PUSH
7723: LD_INT 7
7725: PUSH
7726: LD_INT 8
7728: PUSH
7729: LD_INT 9
7731: PUSH
7732: LD_INT 10
7734: PUSH
7735: LD_INT 11
7737: PUSH
7738: LD_INT 12
7740: PUSH
7741: LD_INT 13
7743: PUSH
7744: LD_INT 14
7746: PUSH
7747: LD_INT 15
7749: PUSH
7750: LD_INT 16
7752: PUSH
7753: LD_INT 17
7755: PUSH
7756: LD_INT 18
7758: PUSH
7759: LD_INT 19
7761: PUSH
7762: LD_INT 20
7764: PUSH
7765: LD_INT 21
7767: PUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 23
7773: PUSH
7774: LD_INT 24
7776: PUSH
7777: LD_INT 25
7779: PUSH
7780: LD_INT 26
7782: PUSH
7783: LD_INT 27
7785: PUSH
7786: LD_INT 28
7788: PUSH
7789: LD_INT 29
7791: PUSH
7792: LD_INT 30
7794: PUSH
7795: LD_INT 31
7797: PUSH
7798: LD_INT 32
7800: PUSH
7801: LD_INT 33
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 36
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 101
7849: PUSH
7850: LD_INT 102
7852: PUSH
7853: LD_INT 103
7855: PUSH
7856: LD_INT 104
7858: PUSH
7859: LD_INT 105
7861: PUSH
7862: LD_INT 106
7864: PUSH
7865: LD_INT 107
7867: PUSH
7868: LD_INT 108
7870: PUSH
7871: LD_INT 109
7873: PUSH
7874: LD_INT 110
7876: PUSH
7877: LD_INT 111
7879: PUSH
7880: LD_INT 112
7882: PUSH
7883: LD_INT 113
7885: PUSH
7886: LD_INT 114
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: ST_TO_ADDR
7909: GO 8284
7911: LD_INT 18
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7919
7917: GO 8055
7919: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7920: LD_ADDR_VAR 0 1
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: LD_INT 4
7930: PUSH
7931: LD_INT 5
7933: PUSH
7934: LD_INT 7
7936: PUSH
7937: LD_INT 11
7939: PUSH
7940: LD_INT 12
7942: PUSH
7943: LD_INT 15
7945: PUSH
7946: LD_INT 16
7948: PUSH
7949: LD_INT 20
7951: PUSH
7952: LD_INT 21
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_INT 23
7960: PUSH
7961: LD_INT 25
7963: PUSH
7964: LD_INT 26
7966: PUSH
7967: LD_INT 30
7969: PUSH
7970: LD_INT 31
7972: PUSH
7973: LD_INT 32
7975: PUSH
7976: LD_INT 33
7978: PUSH
7979: LD_INT 34
7981: PUSH
7982: LD_INT 35
7984: PUSH
7985: LD_INT 36
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 101
8013: PUSH
8014: LD_INT 102
8016: PUSH
8017: LD_INT 103
8019: PUSH
8020: LD_INT 106
8022: PUSH
8023: LD_INT 108
8025: PUSH
8026: LD_INT 112
8028: PUSH
8029: LD_INT 113
8031: PUSH
8032: LD_INT 114
8034: PUSH
8035: LD_INT 115
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: ST_TO_ADDR
8053: GO 8284
8055: LD_INT 19
8057: DOUBLE
8058: EQUAL
8059: IFTRUE 8063
8061: GO 8283
8063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8064: LD_ADDR_VAR 0 1
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: LD_INT 4
8080: PUSH
8081: LD_INT 5
8083: PUSH
8084: LD_INT 6
8086: PUSH
8087: LD_INT 7
8089: PUSH
8090: LD_INT 8
8092: PUSH
8093: LD_INT 9
8095: PUSH
8096: LD_INT 10
8098: PUSH
8099: LD_INT 11
8101: PUSH
8102: LD_INT 12
8104: PUSH
8105: LD_INT 13
8107: PUSH
8108: LD_INT 14
8110: PUSH
8111: LD_INT 15
8113: PUSH
8114: LD_INT 16
8116: PUSH
8117: LD_INT 17
8119: PUSH
8120: LD_INT 18
8122: PUSH
8123: LD_INT 19
8125: PUSH
8126: LD_INT 20
8128: PUSH
8129: LD_INT 21
8131: PUSH
8132: LD_INT 22
8134: PUSH
8135: LD_INT 23
8137: PUSH
8138: LD_INT 24
8140: PUSH
8141: LD_INT 25
8143: PUSH
8144: LD_INT 26
8146: PUSH
8147: LD_INT 27
8149: PUSH
8150: LD_INT 28
8152: PUSH
8153: LD_INT 29
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 31
8161: PUSH
8162: LD_INT 32
8164: PUSH
8165: LD_INT 33
8167: PUSH
8168: LD_INT 34
8170: PUSH
8171: LD_INT 35
8173: PUSH
8174: LD_INT 36
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 101
8217: PUSH
8218: LD_INT 102
8220: PUSH
8221: LD_INT 103
8223: PUSH
8224: LD_INT 104
8226: PUSH
8227: LD_INT 105
8229: PUSH
8230: LD_INT 106
8232: PUSH
8233: LD_INT 107
8235: PUSH
8236: LD_INT 108
8238: PUSH
8239: LD_INT 109
8241: PUSH
8242: LD_INT 110
8244: PUSH
8245: LD_INT 111
8247: PUSH
8248: LD_INT 112
8250: PUSH
8251: LD_INT 113
8253: PUSH
8254: LD_INT 114
8256: PUSH
8257: LD_INT 115
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: ST_TO_ADDR
8281: GO 8284
8283: POP
// end ; if result then
8284: LD_VAR 0 1
8288: IFFALSE 8577
// begin normal :=  ;
8290: LD_ADDR_VAR 0 3
8294: PUSH
8295: LD_STRING 
8297: ST_TO_ADDR
// hardcore :=  ;
8298: LD_ADDR_VAR 0 4
8302: PUSH
8303: LD_STRING 
8305: ST_TO_ADDR
// for i = 1 to normalCounter do
8306: LD_ADDR_VAR 0 5
8310: PUSH
8311: DOUBLE
8312: LD_INT 1
8314: DEC
8315: ST_TO_ADDR
8316: LD_EXP 16
8320: PUSH
8321: FOR_TO
8322: IFFALSE 8423
// begin tmp := 0 ;
8324: LD_ADDR_VAR 0 2
8328: PUSH
8329: LD_STRING 0
8331: ST_TO_ADDR
// if result [ 1 ] then
8332: LD_VAR 0 1
8336: PUSH
8337: LD_INT 1
8339: ARRAY
8340: IFFALSE 8405
// if result [ 1 ] [ 1 ] = i then
8342: LD_VAR 0 1
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PUSH
8355: LD_VAR 0 5
8359: EQUAL
8360: IFFALSE 8405
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 1
8374: PPUSH
8375: LD_VAR 0 1
8379: PUSH
8380: LD_INT 1
8382: ARRAY
8383: PPUSH
8384: LD_INT 1
8386: PPUSH
8387: CALL_OW 3
8391: PPUSH
8392: CALL_OW 1
8396: ST_TO_ADDR
// tmp := 1 ;
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: LD_STRING 1
8404: ST_TO_ADDR
// end ; normal := normal & tmp ;
8405: LD_ADDR_VAR 0 3
8409: PUSH
8410: LD_VAR 0 3
8414: PUSH
8415: LD_VAR 0 2
8419: STR
8420: ST_TO_ADDR
// end ;
8421: GO 8321
8423: POP
8424: POP
// for i = 1 to hardcoreCounter do
8425: LD_ADDR_VAR 0 5
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_EXP 17
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8546
// begin tmp := 0 ;
8443: LD_ADDR_VAR 0 2
8447: PUSH
8448: LD_STRING 0
8450: ST_TO_ADDR
// if result [ 2 ] then
8451: LD_VAR 0 1
8455: PUSH
8456: LD_INT 2
8458: ARRAY
8459: IFFALSE 8528
// if result [ 2 ] [ 1 ] = 100 + i then
8461: LD_VAR 0 1
8465: PUSH
8466: LD_INT 2
8468: ARRAY
8469: PUSH
8470: LD_INT 1
8472: ARRAY
8473: PUSH
8474: LD_INT 100
8476: PUSH
8477: LD_VAR 0 5
8481: PLUS
8482: EQUAL
8483: IFFALSE 8528
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8485: LD_ADDR_VAR 0 1
8489: PUSH
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_INT 2
8497: PPUSH
8498: LD_VAR 0 1
8502: PUSH
8503: LD_INT 2
8505: ARRAY
8506: PPUSH
8507: LD_INT 1
8509: PPUSH
8510: CALL_OW 3
8514: PPUSH
8515: CALL_OW 1
8519: ST_TO_ADDR
// tmp := 1 ;
8520: LD_ADDR_VAR 0 2
8524: PUSH
8525: LD_STRING 1
8527: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8528: LD_ADDR_VAR 0 4
8532: PUSH
8533: LD_VAR 0 4
8537: PUSH
8538: LD_VAR 0 2
8542: STR
8543: ST_TO_ADDR
// end ;
8544: GO 8440
8546: POP
8547: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8548: LD_STRING getStreamItemsFromMission("
8550: PUSH
8551: LD_VAR 0 3
8555: STR
8556: PUSH
8557: LD_STRING ","
8559: STR
8560: PUSH
8561: LD_VAR 0 4
8565: STR
8566: PUSH
8567: LD_STRING ")
8569: STR
8570: PPUSH
8571: CALL_OW 559
// end else
8575: GO 8584
// ToLua ( getStreamItemsFromMission("","") ) ;
8577: LD_STRING getStreamItemsFromMission("","")
8579: PPUSH
8580: CALL_OW 559
// end ;
8584: LD_VAR 0 1
8588: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_INT 100
8596: EQUAL
8597: IFFALSE 9546
// begin if not StreamModeActive then
8599: LD_EXP 15
8603: NOT
8604: IFFALSE 8614
// StreamModeActive := true ;
8606: LD_ADDR_EXP 15
8610: PUSH
8611: LD_INT 1
8613: ST_TO_ADDR
// if p3 = 0 then
8614: LD_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: EQUAL
8622: IFFALSE 8628
// InitStreamMode ;
8624: CALL 4874 0 0
// if p3 = 1 then
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: EQUAL
8636: IFFALSE 8646
// sRocket := true ;
8638: LD_ADDR_EXP 20
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// if p3 = 2 then
8646: LD_VAR 0 3
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: IFFALSE 8664
// sSpeed := true ;
8656: LD_ADDR_EXP 19
8660: PUSH
8661: LD_INT 1
8663: ST_TO_ADDR
// if p3 = 3 then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_INT 3
8671: EQUAL
8672: IFFALSE 8682
// sEngine := true ;
8674: LD_ADDR_EXP 21
8678: PUSH
8679: LD_INT 1
8681: ST_TO_ADDR
// if p3 = 4 then
8682: LD_VAR 0 3
8686: PUSH
8687: LD_INT 4
8689: EQUAL
8690: IFFALSE 8700
// sSpec := true ;
8692: LD_ADDR_EXP 18
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
// if p3 = 5 then
8700: LD_VAR 0 3
8704: PUSH
8705: LD_INT 5
8707: EQUAL
8708: IFFALSE 8718
// sLevel := true ;
8710: LD_ADDR_EXP 22
8714: PUSH
8715: LD_INT 1
8717: ST_TO_ADDR
// if p3 = 6 then
8718: LD_VAR 0 3
8722: PUSH
8723: LD_INT 6
8725: EQUAL
8726: IFFALSE 8736
// sArmoury := true ;
8728: LD_ADDR_EXP 23
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// if p3 = 7 then
8736: LD_VAR 0 3
8740: PUSH
8741: LD_INT 7
8743: EQUAL
8744: IFFALSE 8754
// sRadar := true ;
8746: LD_ADDR_EXP 24
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// if p3 = 8 then
8754: LD_VAR 0 3
8758: PUSH
8759: LD_INT 8
8761: EQUAL
8762: IFFALSE 8772
// sBunker := true ;
8764: LD_ADDR_EXP 25
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// if p3 = 9 then
8772: LD_VAR 0 3
8776: PUSH
8777: LD_INT 9
8779: EQUAL
8780: IFFALSE 8790
// sHack := true ;
8782: LD_ADDR_EXP 26
8786: PUSH
8787: LD_INT 1
8789: ST_TO_ADDR
// if p3 = 10 then
8790: LD_VAR 0 3
8794: PUSH
8795: LD_INT 10
8797: EQUAL
8798: IFFALSE 8808
// sFire := true ;
8800: LD_ADDR_EXP 27
8804: PUSH
8805: LD_INT 1
8807: ST_TO_ADDR
// if p3 = 11 then
8808: LD_VAR 0 3
8812: PUSH
8813: LD_INT 11
8815: EQUAL
8816: IFFALSE 8826
// sRefresh := true ;
8818: LD_ADDR_EXP 28
8822: PUSH
8823: LD_INT 1
8825: ST_TO_ADDR
// if p3 = 12 then
8826: LD_VAR 0 3
8830: PUSH
8831: LD_INT 12
8833: EQUAL
8834: IFFALSE 8844
// sExp := true ;
8836: LD_ADDR_EXP 29
8840: PUSH
8841: LD_INT 1
8843: ST_TO_ADDR
// if p3 = 13 then
8844: LD_VAR 0 3
8848: PUSH
8849: LD_INT 13
8851: EQUAL
8852: IFFALSE 8862
// sDepot := true ;
8854: LD_ADDR_EXP 30
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// if p3 = 14 then
8862: LD_VAR 0 3
8866: PUSH
8867: LD_INT 14
8869: EQUAL
8870: IFFALSE 8880
// sFlag := true ;
8872: LD_ADDR_EXP 31
8876: PUSH
8877: LD_INT 1
8879: ST_TO_ADDR
// if p3 = 15 then
8880: LD_VAR 0 3
8884: PUSH
8885: LD_INT 15
8887: EQUAL
8888: IFFALSE 8898
// sKamikadze := true ;
8890: LD_ADDR_EXP 39
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if p3 = 16 then
8898: LD_VAR 0 3
8902: PUSH
8903: LD_INT 16
8905: EQUAL
8906: IFFALSE 8916
// sTroll := true ;
8908: LD_ADDR_EXP 40
8912: PUSH
8913: LD_INT 1
8915: ST_TO_ADDR
// if p3 = 17 then
8916: LD_VAR 0 3
8920: PUSH
8921: LD_INT 17
8923: EQUAL
8924: IFFALSE 8934
// sSlow := true ;
8926: LD_ADDR_EXP 41
8930: PUSH
8931: LD_INT 1
8933: ST_TO_ADDR
// if p3 = 18 then
8934: LD_VAR 0 3
8938: PUSH
8939: LD_INT 18
8941: EQUAL
8942: IFFALSE 8952
// sLack := true ;
8944: LD_ADDR_EXP 42
8948: PUSH
8949: LD_INT 1
8951: ST_TO_ADDR
// if p3 = 19 then
8952: LD_VAR 0 3
8956: PUSH
8957: LD_INT 19
8959: EQUAL
8960: IFFALSE 8970
// sTank := true ;
8962: LD_ADDR_EXP 44
8966: PUSH
8967: LD_INT 1
8969: ST_TO_ADDR
// if p3 = 20 then
8970: LD_VAR 0 3
8974: PUSH
8975: LD_INT 20
8977: EQUAL
8978: IFFALSE 8988
// sRemote := true ;
8980: LD_ADDR_EXP 45
8984: PUSH
8985: LD_INT 1
8987: ST_TO_ADDR
// if p3 = 21 then
8988: LD_VAR 0 3
8992: PUSH
8993: LD_INT 21
8995: EQUAL
8996: IFFALSE 9006
// sPowell := true ;
8998: LD_ADDR_EXP 46
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// if p3 = 22 then
9006: LD_VAR 0 3
9010: PUSH
9011: LD_INT 22
9013: EQUAL
9014: IFFALSE 9024
// sTeleport := true ;
9016: LD_ADDR_EXP 49
9020: PUSH
9021: LD_INT 1
9023: ST_TO_ADDR
// if p3 = 23 then
9024: LD_VAR 0 3
9028: PUSH
9029: LD_INT 23
9031: EQUAL
9032: IFFALSE 9042
// sOilTower := true ;
9034: LD_ADDR_EXP 51
9038: PUSH
9039: LD_INT 1
9041: ST_TO_ADDR
// if p3 = 24 then
9042: LD_VAR 0 3
9046: PUSH
9047: LD_INT 24
9049: EQUAL
9050: IFFALSE 9060
// sShovel := true ;
9052: LD_ADDR_EXP 52
9056: PUSH
9057: LD_INT 1
9059: ST_TO_ADDR
// if p3 = 25 then
9060: LD_VAR 0 3
9064: PUSH
9065: LD_INT 25
9067: EQUAL
9068: IFFALSE 9078
// sSheik := true ;
9070: LD_ADDR_EXP 53
9074: PUSH
9075: LD_INT 1
9077: ST_TO_ADDR
// if p3 = 26 then
9078: LD_VAR 0 3
9082: PUSH
9083: LD_INT 26
9085: EQUAL
9086: IFFALSE 9096
// sEarthquake := true ;
9088: LD_ADDR_EXP 55
9092: PUSH
9093: LD_INT 1
9095: ST_TO_ADDR
// if p3 = 27 then
9096: LD_VAR 0 3
9100: PUSH
9101: LD_INT 27
9103: EQUAL
9104: IFFALSE 9114
// sAI := true ;
9106: LD_ADDR_EXP 56
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// if p3 = 28 then
9114: LD_VAR 0 3
9118: PUSH
9119: LD_INT 28
9121: EQUAL
9122: IFFALSE 9132
// sCargo := true ;
9124: LD_ADDR_EXP 59
9128: PUSH
9129: LD_INT 1
9131: ST_TO_ADDR
// if p3 = 29 then
9132: LD_VAR 0 3
9136: PUSH
9137: LD_INT 29
9139: EQUAL
9140: IFFALSE 9150
// sDLaser := true ;
9142: LD_ADDR_EXP 60
9146: PUSH
9147: LD_INT 1
9149: ST_TO_ADDR
// if p3 = 30 then
9150: LD_VAR 0 3
9154: PUSH
9155: LD_INT 30
9157: EQUAL
9158: IFFALSE 9168
// sExchange := true ;
9160: LD_ADDR_EXP 61
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// if p3 = 31 then
9168: LD_VAR 0 3
9172: PUSH
9173: LD_INT 31
9175: EQUAL
9176: IFFALSE 9186
// sFac := true ;
9178: LD_ADDR_EXP 62
9182: PUSH
9183: LD_INT 1
9185: ST_TO_ADDR
// if p3 = 32 then
9186: LD_VAR 0 3
9190: PUSH
9191: LD_INT 32
9193: EQUAL
9194: IFFALSE 9204
// sPower := true ;
9196: LD_ADDR_EXP 63
9200: PUSH
9201: LD_INT 1
9203: ST_TO_ADDR
// if p3 = 33 then
9204: LD_VAR 0 3
9208: PUSH
9209: LD_INT 33
9211: EQUAL
9212: IFFALSE 9222
// sRandom := true ;
9214: LD_ADDR_EXP 64
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// if p3 = 34 then
9222: LD_VAR 0 3
9226: PUSH
9227: LD_INT 34
9229: EQUAL
9230: IFFALSE 9240
// sShield := true ;
9232: LD_ADDR_EXP 65
9236: PUSH
9237: LD_INT 1
9239: ST_TO_ADDR
// if p3 = 35 then
9240: LD_VAR 0 3
9244: PUSH
9245: LD_INT 35
9247: EQUAL
9248: IFFALSE 9258
// sTime := true ;
9250: LD_ADDR_EXP 66
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// if p3 = 36 then
9258: LD_VAR 0 3
9262: PUSH
9263: LD_INT 36
9265: EQUAL
9266: IFFALSE 9276
// sTools := true ;
9268: LD_ADDR_EXP 67
9272: PUSH
9273: LD_INT 1
9275: ST_TO_ADDR
// if p3 = 101 then
9276: LD_VAR 0 3
9280: PUSH
9281: LD_INT 101
9283: EQUAL
9284: IFFALSE 9294
// sSold := true ;
9286: LD_ADDR_EXP 32
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// if p3 = 102 then
9294: LD_VAR 0 3
9298: PUSH
9299: LD_INT 102
9301: EQUAL
9302: IFFALSE 9312
// sDiff := true ;
9304: LD_ADDR_EXP 33
9308: PUSH
9309: LD_INT 1
9311: ST_TO_ADDR
// if p3 = 103 then
9312: LD_VAR 0 3
9316: PUSH
9317: LD_INT 103
9319: EQUAL
9320: IFFALSE 9330
// sFog := true ;
9322: LD_ADDR_EXP 36
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// if p3 = 104 then
9330: LD_VAR 0 3
9334: PUSH
9335: LD_INT 104
9337: EQUAL
9338: IFFALSE 9348
// sReset := true ;
9340: LD_ADDR_EXP 37
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// if p3 = 105 then
9348: LD_VAR 0 3
9352: PUSH
9353: LD_INT 105
9355: EQUAL
9356: IFFALSE 9366
// sSun := true ;
9358: LD_ADDR_EXP 38
9362: PUSH
9363: LD_INT 1
9365: ST_TO_ADDR
// if p3 = 106 then
9366: LD_VAR 0 3
9370: PUSH
9371: LD_INT 106
9373: EQUAL
9374: IFFALSE 9384
// sTiger := true ;
9376: LD_ADDR_EXP 34
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// if p3 = 107 then
9384: LD_VAR 0 3
9388: PUSH
9389: LD_INT 107
9391: EQUAL
9392: IFFALSE 9402
// sBomb := true ;
9394: LD_ADDR_EXP 35
9398: PUSH
9399: LD_INT 1
9401: ST_TO_ADDR
// if p3 = 108 then
9402: LD_VAR 0 3
9406: PUSH
9407: LD_INT 108
9409: EQUAL
9410: IFFALSE 9420
// sWound := true ;
9412: LD_ADDR_EXP 43
9416: PUSH
9417: LD_INT 1
9419: ST_TO_ADDR
// if p3 = 109 then
9420: LD_VAR 0 3
9424: PUSH
9425: LD_INT 109
9427: EQUAL
9428: IFFALSE 9438
// sBetray := true ;
9430: LD_ADDR_EXP 47
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
// if p3 = 110 then
9438: LD_VAR 0 3
9442: PUSH
9443: LD_INT 110
9445: EQUAL
9446: IFFALSE 9456
// sContamin := true ;
9448: LD_ADDR_EXP 48
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if p3 = 111 then
9456: LD_VAR 0 3
9460: PUSH
9461: LD_INT 111
9463: EQUAL
9464: IFFALSE 9474
// sOil := true ;
9466: LD_ADDR_EXP 50
9470: PUSH
9471: LD_INT 1
9473: ST_TO_ADDR
// if p3 = 112 then
9474: LD_VAR 0 3
9478: PUSH
9479: LD_INT 112
9481: EQUAL
9482: IFFALSE 9492
// sStu := true ;
9484: LD_ADDR_EXP 54
9488: PUSH
9489: LD_INT 1
9491: ST_TO_ADDR
// if p3 = 113 then
9492: LD_VAR 0 3
9496: PUSH
9497: LD_INT 113
9499: EQUAL
9500: IFFALSE 9510
// sBazooka := true ;
9502: LD_ADDR_EXP 57
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// if p3 = 114 then
9510: LD_VAR 0 3
9514: PUSH
9515: LD_INT 114
9517: EQUAL
9518: IFFALSE 9528
// sMortar := true ;
9520: LD_ADDR_EXP 58
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// if p3 = 115 then
9528: LD_VAR 0 3
9532: PUSH
9533: LD_INT 115
9535: EQUAL
9536: IFFALSE 9546
// sRanger := true ;
9538: LD_ADDR_EXP 68
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// end ; end ;
9546: PPOPN 6
9548: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9549: LD_EXP 15
9553: PUSH
9554: LD_EXP 20
9558: AND
9559: IFFALSE 9683
9561: GO 9563
9563: DISABLE
9564: LD_INT 0
9566: PPUSH
9567: PPUSH
// begin enable ;
9568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: LD_INT 22
9576: PUSH
9577: LD_OWVAR 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 34
9591: PUSH
9592: LD_INT 7
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 34
9601: PUSH
9602: LD_INT 45
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 34
9611: PUSH
9612: LD_INT 28
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 34
9621: PUSH
9622: LD_INT 47
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 69
9644: ST_TO_ADDR
// if not tmp then
9645: LD_VAR 0 2
9649: NOT
9650: IFFALSE 9654
// exit ;
9652: GO 9683
// for i in tmp do
9654: LD_ADDR_VAR 0 1
9658: PUSH
9659: LD_VAR 0 2
9663: PUSH
9664: FOR_IN
9665: IFFALSE 9681
// begin SetLives ( i , 0 ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: LD_INT 0
9674: PPUSH
9675: CALL_OW 234
// end ;
9679: GO 9664
9681: POP
9682: POP
// end ;
9683: PPOPN 2
9685: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9686: LD_EXP 15
9690: PUSH
9691: LD_EXP 21
9695: AND
9696: IFFALSE 9780
9698: GO 9700
9700: DISABLE
9701: LD_INT 0
9703: PPUSH
9704: PPUSH
// begin enable ;
9705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 32
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if not tmp then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9751
// exit ;
9749: GO 9780
// for i in tmp do
9751: LD_ADDR_VAR 0 1
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9778
// begin SetLives ( i , 0 ) ;
9764: LD_VAR 0 1
9768: PPUSH
9769: LD_INT 0
9771: PPUSH
9772: CALL_OW 234
// end ;
9776: GO 9761
9778: POP
9779: POP
// end ;
9780: PPOPN 2
9782: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9783: LD_EXP 15
9787: PUSH
9788: LD_EXP 18
9792: AND
9793: IFFALSE 9886
9795: GO 9797
9797: DISABLE
9798: LD_INT 0
9800: PPUSH
// begin enable ;
9801: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9802: LD_ADDR_VAR 0 1
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_OWVAR 2
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: LD_INT 25
9824: PUSH
9825: LD_INT 5
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 25
9834: PUSH
9835: LD_INT 9
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 8
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 69
9866: PUSH
9867: FOR_IN
9868: IFFALSE 9884
// begin SetClass ( i , 1 ) ;
9870: LD_VAR 0 1
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: CALL_OW 336
// end ;
9882: GO 9867
9884: POP
9885: POP
// end ;
9886: PPOPN 1
9888: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9889: LD_EXP 15
9893: PUSH
9894: LD_EXP 19
9898: AND
9899: PUSH
9900: LD_OWVAR 65
9904: PUSH
9905: LD_INT 7
9907: LESS
9908: AND
9909: IFFALSE 9923
9911: GO 9913
9913: DISABLE
// begin enable ;
9914: ENABLE
// game_speed := 7 ;
9915: LD_ADDR_OWVAR 65
9919: PUSH
9920: LD_INT 7
9922: ST_TO_ADDR
// end ;
9923: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9924: LD_EXP 15
9928: PUSH
9929: LD_EXP 22
9933: AND
9934: IFFALSE 10136
9936: GO 9938
9938: DISABLE
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
9943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9944: LD_ADDR_VAR 0 3
9948: PUSH
9949: LD_INT 81
9951: PUSH
9952: LD_OWVAR 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 21
9963: PUSH
9964: LD_INT 1
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: ST_TO_ADDR
// if not tmp then
9980: LD_VAR 0 3
9984: NOT
9985: IFFALSE 9989
// exit ;
9987: GO 10136
// if tmp > 5 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 5
9996: GREATER
9997: IFFALSE 10009
// k := 5 else
9999: LD_ADDR_VAR 0 2
10003: PUSH
10004: LD_INT 5
10006: ST_TO_ADDR
10007: GO 10019
// k := tmp ;
10009: LD_ADDR_VAR 0 2
10013: PUSH
10014: LD_VAR 0 3
10018: ST_TO_ADDR
// for i := 1 to k do
10019: LD_ADDR_VAR 0 1
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 2
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10134
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_VAR 0 1
10046: ARRAY
10047: PPUSH
10048: LD_VAR 0 1
10052: PUSH
10053: LD_INT 4
10055: MOD
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: PPUSH
10061: CALL_OW 259
10065: PUSH
10066: LD_INT 10
10068: LESS
10069: IFFALSE 10132
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10071: LD_VAR 0 3
10075: PUSH
10076: LD_VAR 0 1
10080: ARRAY
10081: PPUSH
10082: LD_VAR 0 1
10086: PUSH
10087: LD_INT 4
10089: MOD
10090: PUSH
10091: LD_INT 1
10093: PLUS
10094: PPUSH
10095: LD_VAR 0 3
10099: PUSH
10100: LD_VAR 0 1
10104: ARRAY
10105: PPUSH
10106: LD_VAR 0 1
10110: PUSH
10111: LD_INT 4
10113: MOD
10114: PUSH
10115: LD_INT 1
10117: PLUS
10118: PPUSH
10119: CALL_OW 259
10123: PUSH
10124: LD_INT 1
10126: PLUS
10127: PPUSH
10128: CALL_OW 237
10132: GO 10034
10134: POP
10135: POP
// end ;
10136: PPOPN 3
10138: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10139: LD_EXP 15
10143: PUSH
10144: LD_EXP 23
10148: AND
10149: IFFALSE 10169
10151: GO 10153
10153: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10154: LD_INT 4
10156: PPUSH
10157: LD_OWVAR 2
10161: PPUSH
10162: LD_INT 0
10164: PPUSH
10165: CALL_OW 324
10169: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10170: LD_EXP 15
10174: PUSH
10175: LD_EXP 52
10179: AND
10180: IFFALSE 10200
10182: GO 10184
10184: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10185: LD_INT 19
10187: PPUSH
10188: LD_OWVAR 2
10192: PPUSH
10193: LD_INT 0
10195: PPUSH
10196: CALL_OW 324
10200: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10201: LD_EXP 15
10205: PUSH
10206: LD_EXP 24
10210: AND
10211: IFFALSE 10313
10213: GO 10215
10215: DISABLE
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
// begin enable ;
10220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10221: LD_ADDR_VAR 0 2
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_OWVAR 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: LD_INT 34
10243: PUSH
10244: LD_INT 11
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 34
10253: PUSH
10254: LD_INT 30
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: ST_TO_ADDR
// if not tmp then
10275: LD_VAR 0 2
10279: NOT
10280: IFFALSE 10284
// exit ;
10282: GO 10313
// for i in tmp do
10284: LD_ADDR_VAR 0 1
10288: PUSH
10289: LD_VAR 0 2
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10311
// begin SetLives ( i , 0 ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 234
// end ;
10309: GO 10294
10311: POP
10312: POP
// end ;
10313: PPOPN 2
10315: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10316: LD_EXP 15
10320: PUSH
10321: LD_EXP 25
10325: AND
10326: IFFALSE 10346
10328: GO 10330
10330: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10331: LD_INT 32
10333: PPUSH
10334: LD_OWVAR 2
10338: PPUSH
10339: LD_INT 0
10341: PPUSH
10342: CALL_OW 324
10346: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10347: LD_EXP 15
10351: PUSH
10352: LD_EXP 26
10356: AND
10357: IFFALSE 10538
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: LD_INT 22
10374: PUSH
10375: LD_OWVAR 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 33
10386: PUSH
10387: LD_INT 3
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 69
10402: ST_TO_ADDR
// if not tmp then
10403: LD_VAR 0 2
10407: NOT
10408: IFFALSE 10412
// exit ;
10410: GO 10538
// side := 0 ;
10412: LD_ADDR_VAR 0 3
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// for i := 1 to 8 do
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: DOUBLE
10426: LD_INT 1
10428: DEC
10429: ST_TO_ADDR
10430: LD_INT 8
10432: PUSH
10433: FOR_TO
10434: IFFALSE 10482
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10436: LD_OWVAR 2
10440: PUSH
10441: LD_VAR 0 1
10445: NONEQUAL
10446: PUSH
10447: LD_OWVAR 2
10451: PPUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 81
10461: PUSH
10462: LD_INT 2
10464: EQUAL
10465: AND
10466: IFFALSE 10480
// begin side := i ;
10468: LD_ADDR_VAR 0 3
10472: PUSH
10473: LD_VAR 0 1
10477: ST_TO_ADDR
// break ;
10478: GO 10482
// end ;
10480: GO 10433
10482: POP
10483: POP
// if not side then
10484: LD_VAR 0 3
10488: NOT
10489: IFFALSE 10493
// exit ;
10491: GO 10538
// for i := 1 to tmp do
10493: LD_ADDR_VAR 0 1
10497: PUSH
10498: DOUBLE
10499: LD_INT 1
10501: DEC
10502: ST_TO_ADDR
10503: LD_VAR 0 2
10507: PUSH
10508: FOR_TO
10509: IFFALSE 10536
// if Prob ( 30 ) then
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 13
10518: IFFALSE 10534
// SetSide ( i , side ) ;
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: CALL_OW 235
10534: GO 10508
10536: POP
10537: POP
// end ;
10538: PPOPN 3
10540: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10541: LD_EXP 15
10545: PUSH
10546: LD_EXP 28
10550: AND
10551: IFFALSE 10670
10553: GO 10555
10555: DISABLE
10556: LD_INT 0
10558: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10559: LD_ADDR_VAR 0 1
10563: PUSH
10564: LD_INT 22
10566: PUSH
10567: LD_OWVAR 2
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 21
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 3
10588: PUSH
10589: LD_INT 23
10591: PUSH
10592: LD_INT 0
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 69
10612: PUSH
10613: FOR_IN
10614: IFFALSE 10668
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10616: LD_VAR 0 1
10620: PPUSH
10621: CALL_OW 257
10625: PUSH
10626: LD_INT 1
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 3
10634: PUSH
10635: LD_INT 4
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: IN
10644: IFFALSE 10666
// SetClass ( un , rand ( 1 , 4 ) ) ;
10646: LD_VAR 0 1
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: LD_INT 4
10656: PPUSH
10657: CALL_OW 12
10661: PPUSH
10662: CALL_OW 336
10666: GO 10613
10668: POP
10669: POP
// end ;
10670: PPOPN 1
10672: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10673: LD_EXP 15
10677: PUSH
10678: LD_EXP 27
10682: AND
10683: IFFALSE 10762
10685: GO 10687
10687: DISABLE
10688: LD_INT 0
10690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_INT 22
10698: PUSH
10699: LD_OWVAR 2
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 21
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: ST_TO_ADDR
// if not tmp then
10727: LD_VAR 0 1
10731: NOT
10732: IFFALSE 10736
// exit ;
10734: GO 10762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_VAR 0 1
10748: PPUSH
10749: CALL_OW 12
10753: ARRAY
10754: PPUSH
10755: LD_INT 100
10757: PPUSH
10758: CALL_OW 234
// end ;
10762: PPOPN 1
10764: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10765: LD_EXP 15
10769: PUSH
10770: LD_EXP 29
10774: AND
10775: IFFALSE 10873
10777: GO 10779
10779: DISABLE
10780: LD_INT 0
10782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10783: LD_ADDR_VAR 0 1
10787: PUSH
10788: LD_INT 22
10790: PUSH
10791: LD_OWVAR 2
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 21
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: ST_TO_ADDR
// if not tmp then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10873
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10828: LD_VAR 0 1
10832: PUSH
10833: LD_INT 1
10835: PPUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL_OW 12
10845: ARRAY
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 4
10852: PPUSH
10853: CALL_OW 12
10857: PPUSH
10858: LD_INT 3000
10860: PPUSH
10861: LD_INT 9000
10863: PPUSH
10864: CALL_OW 12
10868: PPUSH
10869: CALL_OW 492
// end ;
10873: PPOPN 1
10875: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10876: LD_EXP 15
10880: PUSH
10881: LD_EXP 30
10885: AND
10886: IFFALSE 10906
10888: GO 10890
10890: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_OWVAR 2
10898: PPUSH
10899: LD_INT 0
10901: PPUSH
10902: CALL_OW 324
10906: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10907: LD_EXP 15
10911: PUSH
10912: LD_EXP 31
10916: AND
10917: IFFALSE 11000
10919: GO 10921
10921: DISABLE
10922: LD_INT 0
10924: PPUSH
10925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10926: LD_ADDR_VAR 0 2
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_OWVAR 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 21
10945: PUSH
10946: LD_INT 3
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PPUSH
10957: CALL_OW 69
10961: ST_TO_ADDR
// if not tmp then
10962: LD_VAR 0 2
10966: NOT
10967: IFFALSE 10971
// exit ;
10969: GO 11000
// for i in tmp do
10971: LD_ADDR_VAR 0 1
10975: PUSH
10976: LD_VAR 0 2
10980: PUSH
10981: FOR_IN
10982: IFFALSE 10998
// SetBLevel ( i , 10 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 10
10991: PPUSH
10992: CALL_OW 241
10996: GO 10981
10998: POP
10999: POP
// end ;
11000: PPOPN 2
11002: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11003: LD_EXP 15
11007: PUSH
11008: LD_EXP 32
11012: AND
11013: IFFALSE 11124
11015: GO 11017
11017: DISABLE
11018: LD_INT 0
11020: PPUSH
11021: PPUSH
11022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11023: LD_ADDR_VAR 0 3
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_OWVAR 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 25
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// if not tmp then
11059: LD_VAR 0 3
11063: NOT
11064: IFFALSE 11068
// exit ;
11066: GO 11124
// un := tmp [ rand ( 1 , tmp ) ] ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_VAR 0 3
11077: PUSH
11078: LD_INT 1
11080: PPUSH
11081: LD_VAR 0 3
11085: PPUSH
11086: CALL_OW 12
11090: ARRAY
11091: ST_TO_ADDR
// if Crawls ( un ) then
11092: LD_VAR 0 2
11096: PPUSH
11097: CALL_OW 318
11101: IFFALSE 11112
// ComWalk ( un ) ;
11103: LD_VAR 0 2
11107: PPUSH
11108: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11112: LD_VAR 0 2
11116: PPUSH
11117: LD_INT 5
11119: PPUSH
11120: CALL_OW 336
// end ;
11124: PPOPN 3
11126: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11127: LD_EXP 15
11131: PUSH
11132: LD_EXP 33
11136: AND
11137: PUSH
11138: LD_OWVAR 67
11142: PUSH
11143: LD_INT 3
11145: LESS
11146: AND
11147: IFFALSE 11166
11149: GO 11151
11151: DISABLE
// Difficulty := Difficulty + 1 ;
11152: LD_ADDR_OWVAR 67
11156: PUSH
11157: LD_OWVAR 67
11161: PUSH
11162: LD_INT 1
11164: PLUS
11165: ST_TO_ADDR
11166: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11167: LD_EXP 15
11171: PUSH
11172: LD_EXP 34
11176: AND
11177: IFFALSE 11280
11179: GO 11181
11181: DISABLE
11182: LD_INT 0
11184: PPUSH
// begin for i := 1 to 5 do
11185: LD_ADDR_VAR 0 1
11189: PUSH
11190: DOUBLE
11191: LD_INT 1
11193: DEC
11194: ST_TO_ADDR
11195: LD_INT 5
11197: PUSH
11198: FOR_TO
11199: IFFALSE 11278
// begin uc_nation := nation_nature ;
11201: LD_ADDR_OWVAR 21
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// uc_side := 0 ;
11209: LD_ADDR_OWVAR 20
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11217: LD_ADDR_OWVAR 29
11221: PUSH
11222: LD_INT 12
11224: PUSH
11225: LD_INT 12
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
// hc_agressivity := 20 ;
11232: LD_ADDR_OWVAR 35
11236: PUSH
11237: LD_INT 20
11239: ST_TO_ADDR
// hc_class := class_tiger ;
11240: LD_ADDR_OWVAR 28
11244: PUSH
11245: LD_INT 14
11247: ST_TO_ADDR
// hc_gallery :=  ;
11248: LD_ADDR_OWVAR 33
11252: PUSH
11253: LD_STRING 
11255: ST_TO_ADDR
// hc_name :=  ;
11256: LD_ADDR_OWVAR 26
11260: PUSH
11261: LD_STRING 
11263: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11264: CALL_OW 44
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 51
// end ;
11276: GO 11198
11278: POP
11279: POP
// end ;
11280: PPOPN 1
11282: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11283: LD_EXP 15
11287: PUSH
11288: LD_EXP 35
11292: AND
11293: IFFALSE 11302
11295: GO 11297
11297: DISABLE
// StreamSibBomb ;
11298: CALL 11303 0 0
11302: END
// export function StreamSibBomb ; var i , x , y ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
11308: PPUSH
// result := false ;
11309: LD_ADDR_VAR 0 1
11313: PUSH
11314: LD_INT 0
11316: ST_TO_ADDR
// for i := 1 to 16 do
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_INT 16
11329: PUSH
11330: FOR_TO
11331: IFFALSE 11530
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: LD_INT 10
11340: PUSH
11341: LD_INT 20
11343: PUSH
11344: LD_INT 30
11346: PUSH
11347: LD_INT 40
11349: PUSH
11350: LD_INT 50
11352: PUSH
11353: LD_INT 60
11355: PUSH
11356: LD_INT 70
11358: PUSH
11359: LD_INT 80
11361: PUSH
11362: LD_INT 90
11364: PUSH
11365: LD_INT 100
11367: PUSH
11368: LD_INT 110
11370: PUSH
11371: LD_INT 120
11373: PUSH
11374: LD_INT 130
11376: PUSH
11377: LD_INT 140
11379: PUSH
11380: LD_INT 150
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_INT 15
11405: PPUSH
11406: CALL_OW 12
11410: ARRAY
11411: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_INT 10
11419: PUSH
11420: LD_INT 20
11422: PUSH
11423: LD_INT 30
11425: PUSH
11426: LD_INT 40
11428: PUSH
11429: LD_INT 50
11431: PUSH
11432: LD_INT 60
11434: PUSH
11435: LD_INT 70
11437: PUSH
11438: LD_INT 80
11440: PUSH
11441: LD_INT 90
11443: PUSH
11444: LD_INT 100
11446: PUSH
11447: LD_INT 110
11449: PUSH
11450: LD_INT 120
11452: PUSH
11453: LD_INT 130
11455: PUSH
11456: LD_INT 140
11458: PUSH
11459: LD_INT 150
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 1
11481: PPUSH
11482: LD_INT 15
11484: PPUSH
11485: CALL_OW 12
11489: ARRAY
11490: ST_TO_ADDR
// if ValidHex ( x , y ) then
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_VAR 0 4
11500: PPUSH
11501: CALL_OW 488
11505: IFFALSE 11528
// begin result := [ x , y ] ;
11507: LD_ADDR_VAR 0 1
11511: PUSH
11512: LD_VAR 0 3
11516: PUSH
11517: LD_VAR 0 4
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// break ;
11526: GO 11530
// end ; end ;
11528: GO 11330
11530: POP
11531: POP
// if result then
11532: LD_VAR 0 1
11536: IFFALSE 11596
// begin ToLua ( playSibBomb() ) ;
11538: LD_STRING playSibBomb()
11540: PPUSH
11541: CALL_OW 559
// wait ( 0 0$14 ) ;
11545: LD_INT 490
11547: PPUSH
11548: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11552: LD_VAR 0 1
11556: PUSH
11557: LD_INT 1
11559: ARRAY
11560: PPUSH
11561: LD_VAR 0 1
11565: PUSH
11566: LD_INT 2
11568: ARRAY
11569: PPUSH
11570: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11574: LD_VAR 0 1
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PPUSH
11583: LD_VAR 0 1
11587: PUSH
11588: LD_INT 2
11590: ARRAY
11591: PPUSH
11592: CALL_OW 429
// end ; end ;
11596: LD_VAR 0 1
11600: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11601: LD_EXP 15
11605: PUSH
11606: LD_EXP 37
11610: AND
11611: IFFALSE 11623
11613: GO 11615
11615: DISABLE
// YouLost (  ) ;
11616: LD_STRING 
11618: PPUSH
11619: CALL_OW 104
11623: END
// every 0 0$1 trigger StreamModeActive and sFog do
11624: LD_EXP 15
11628: PUSH
11629: LD_EXP 36
11633: AND
11634: IFFALSE 11648
11636: GO 11638
11638: DISABLE
// FogOff ( your_side ) ;
11639: LD_OWVAR 2
11643: PPUSH
11644: CALL_OW 344
11648: END
// every 0 0$1 trigger StreamModeActive and sSun do
11649: LD_EXP 15
11653: PUSH
11654: LD_EXP 38
11658: AND
11659: IFFALSE 11687
11661: GO 11663
11663: DISABLE
// begin solar_recharge_percent := 0 ;
11664: LD_ADDR_OWVAR 79
11668: PUSH
11669: LD_INT 0
11671: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11672: LD_INT 10500
11674: PPUSH
11675: CALL_OW 67
// solar_recharge_percent := 100 ;
11679: LD_ADDR_OWVAR 79
11683: PUSH
11684: LD_INT 100
11686: ST_TO_ADDR
// end ;
11687: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11688: LD_EXP 15
11692: PUSH
11693: LD_EXP 39
11697: AND
11698: IFFALSE 11937
11700: GO 11702
11702: DISABLE
11703: LD_INT 0
11705: PPUSH
11706: PPUSH
11707: PPUSH
// begin tmp := [ ] ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// for i := 1 to 6 do
11715: LD_ADDR_VAR 0 1
11719: PUSH
11720: DOUBLE
11721: LD_INT 1
11723: DEC
11724: ST_TO_ADDR
11725: LD_INT 6
11727: PUSH
11728: FOR_TO
11729: IFFALSE 11834
// begin uc_nation := nation_nature ;
11731: LD_ADDR_OWVAR 21
11735: PUSH
11736: LD_INT 0
11738: ST_TO_ADDR
// uc_side := 0 ;
11739: LD_ADDR_OWVAR 20
11743: PUSH
11744: LD_INT 0
11746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11747: LD_ADDR_OWVAR 29
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: LD_INT 12
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: ST_TO_ADDR
// hc_agressivity := 20 ;
11762: LD_ADDR_OWVAR 35
11766: PUSH
11767: LD_INT 20
11769: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11770: LD_ADDR_OWVAR 28
11774: PUSH
11775: LD_INT 17
11777: ST_TO_ADDR
// hc_gallery :=  ;
11778: LD_ADDR_OWVAR 33
11782: PUSH
11783: LD_STRING 
11785: ST_TO_ADDR
// hc_name :=  ;
11786: LD_ADDR_OWVAR 26
11790: PUSH
11791: LD_STRING 
11793: ST_TO_ADDR
// un := CreateHuman ;
11794: LD_ADDR_VAR 0 2
11798: PUSH
11799: CALL_OW 44
11803: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11804: LD_VAR 0 2
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 51
// tmp := tmp ^ un ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_VAR 0 3
11825: PUSH
11826: LD_VAR 0 2
11830: ADD
11831: ST_TO_ADDR
// end ;
11832: GO 11728
11834: POP
11835: POP
// repeat wait ( 0 0$1 ) ;
11836: LD_INT 35
11838: PPUSH
11839: CALL_OW 67
// for un in tmp do
11843: LD_ADDR_VAR 0 2
11847: PUSH
11848: LD_VAR 0 3
11852: PUSH
11853: FOR_IN
11854: IFFALSE 11928
// begin if IsDead ( un ) then
11856: LD_VAR 0 2
11860: PPUSH
11861: CALL_OW 301
11865: IFFALSE 11885
// begin tmp := tmp diff un ;
11867: LD_ADDR_VAR 0 3
11871: PUSH
11872: LD_VAR 0 3
11876: PUSH
11877: LD_VAR 0 2
11881: DIFF
11882: ST_TO_ADDR
// continue ;
11883: GO 11853
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11885: LD_VAR 0 2
11889: PPUSH
11890: LD_INT 3
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: PPUSH
11912: LD_VAR 0 2
11916: PPUSH
11917: CALL_OW 74
11921: PPUSH
11922: CALL_OW 115
// end ;
11926: GO 11853
11928: POP
11929: POP
// until not tmp ;
11930: LD_VAR 0 3
11934: NOT
11935: IFFALSE 11836
// end ;
11937: PPOPN 3
11939: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11940: LD_EXP 15
11944: PUSH
11945: LD_EXP 40
11949: AND
11950: IFFALSE 12004
11952: GO 11954
11954: DISABLE
// begin ToLua ( displayTroll(); ) ;
11955: LD_STRING displayTroll();
11957: PPUSH
11958: CALL_OW 559
// wait ( 3 3$00 ) ;
11962: LD_INT 6300
11964: PPUSH
11965: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11969: LD_STRING hideTroll();
11971: PPUSH
11972: CALL_OW 559
// wait ( 1 1$00 ) ;
11976: LD_INT 2100
11978: PPUSH
11979: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11983: LD_STRING displayTroll();
11985: PPUSH
11986: CALL_OW 559
// wait ( 1 1$00 ) ;
11990: LD_INT 2100
11992: PPUSH
11993: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11997: LD_STRING hideTroll();
11999: PPUSH
12000: CALL_OW 559
// end ;
12004: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12005: LD_EXP 15
12009: PUSH
12010: LD_EXP 41
12014: AND
12015: IFFALSE 12078
12017: GO 12019
12019: DISABLE
12020: LD_INT 0
12022: PPUSH
// begin p := 0 ;
12023: LD_ADDR_VAR 0 1
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// repeat game_speed := 1 ;
12031: LD_ADDR_OWVAR 65
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12039: LD_INT 35
12041: PPUSH
12042: CALL_OW 67
// p := p + 1 ;
12046: LD_ADDR_VAR 0 1
12050: PUSH
12051: LD_VAR 0 1
12055: PUSH
12056: LD_INT 1
12058: PLUS
12059: ST_TO_ADDR
// until p >= 60 ;
12060: LD_VAR 0 1
12064: PUSH
12065: LD_INT 60
12067: GREATEREQUAL
12068: IFFALSE 12031
// game_speed := 4 ;
12070: LD_ADDR_OWVAR 65
12074: PUSH
12075: LD_INT 4
12077: ST_TO_ADDR
// end ;
12078: PPOPN 1
12080: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12081: LD_EXP 15
12085: PUSH
12086: LD_EXP 42
12090: AND
12091: IFFALSE 12237
12093: GO 12095
12095: DISABLE
12096: LD_INT 0
12098: PPUSH
12099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12100: LD_ADDR_VAR 0 1
12104: PUSH
12105: LD_INT 22
12107: PUSH
12108: LD_OWVAR 2
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 2
12119: PUSH
12120: LD_INT 30
12122: PUSH
12123: LD_INT 0
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 30
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if not depot then
12154: LD_VAR 0 1
12158: NOT
12159: IFFALSE 12163
// exit ;
12161: GO 12237
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_VAR 0 1
12172: PUSH
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 12
12185: ARRAY
12186: PPUSH
12187: CALL_OW 274
12191: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12192: LD_VAR 0 2
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: LD_INT 0
12202: PPUSH
12203: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12207: LD_VAR 0 2
12211: PPUSH
12212: LD_INT 2
12214: PPUSH
12215: LD_INT 0
12217: PPUSH
12218: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12222: LD_VAR 0 2
12226: PPUSH
12227: LD_INT 3
12229: PPUSH
12230: LD_INT 0
12232: PPUSH
12233: CALL_OW 277
// end ;
12237: PPOPN 2
12239: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12240: LD_EXP 15
12244: PUSH
12245: LD_EXP 43
12249: AND
12250: IFFALSE 12347
12252: GO 12254
12254: DISABLE
12255: LD_INT 0
12257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12258: LD_ADDR_VAR 0 1
12262: PUSH
12263: LD_INT 22
12265: PUSH
12266: LD_OWVAR 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 21
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 3
12287: PUSH
12288: LD_INT 23
12290: PUSH
12291: LD_INT 0
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: ST_TO_ADDR
// if not tmp then
12312: LD_VAR 0 1
12316: NOT
12317: IFFALSE 12321
// exit ;
12319: GO 12347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12321: LD_VAR 0 1
12325: PUSH
12326: LD_INT 1
12328: PPUSH
12329: LD_VAR 0 1
12333: PPUSH
12334: CALL_OW 12
12338: ARRAY
12339: PPUSH
12340: LD_INT 200
12342: PPUSH
12343: CALL_OW 234
// end ;
12347: PPOPN 1
12349: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12350: LD_EXP 15
12354: PUSH
12355: LD_EXP 44
12359: AND
12360: IFFALSE 12439
12362: GO 12364
12364: DISABLE
12365: LD_INT 0
12367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12368: LD_ADDR_VAR 0 1
12372: PUSH
12373: LD_INT 22
12375: PUSH
12376: LD_OWVAR 2
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 21
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: ST_TO_ADDR
// if not tmp then
12404: LD_VAR 0 1
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 12439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL_OW 12
12430: ARRAY
12431: PPUSH
12432: LD_INT 60
12434: PPUSH
12435: CALL_OW 234
// end ;
12439: PPOPN 1
12441: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12442: LD_EXP 15
12446: PUSH
12447: LD_EXP 45
12451: AND
12452: IFFALSE 12551
12454: GO 12456
12456: DISABLE
12457: LD_INT 0
12459: PPUSH
12460: PPUSH
// begin enable ;
12461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12462: LD_ADDR_VAR 0 1
12466: PUSH
12467: LD_INT 22
12469: PUSH
12470: LD_OWVAR 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 61
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: LD_INT 33
12487: PUSH
12488: LD_INT 2
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 69
12504: ST_TO_ADDR
// if not tmp then
12505: LD_VAR 0 1
12509: NOT
12510: IFFALSE 12514
// exit ;
12512: GO 12551
// for i in tmp do
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: LD_VAR 0 1
12523: PUSH
12524: FOR_IN
12525: IFFALSE 12549
// if IsControledBy ( i ) then
12527: LD_VAR 0 2
12531: PPUSH
12532: CALL_OW 312
12536: IFFALSE 12547
// ComUnlink ( i ) ;
12538: LD_VAR 0 2
12542: PPUSH
12543: CALL_OW 136
12547: GO 12524
12549: POP
12550: POP
// end ;
12551: PPOPN 2
12553: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12554: LD_EXP 15
12558: PUSH
12559: LD_EXP 46
12563: AND
12564: IFFALSE 12698
12566: GO 12568
12568: DISABLE
12569: LD_INT 0
12571: PPUSH
12572: PPUSH
// begin ToLua ( displayPowell(); ) ;
12573: LD_STRING displayPowell();
12575: PPUSH
12576: CALL_OW 559
// uc_side := 0 ;
12580: LD_ADDR_OWVAR 20
12584: PUSH
12585: LD_INT 0
12587: ST_TO_ADDR
// uc_nation := 2 ;
12588: LD_ADDR_OWVAR 21
12592: PUSH
12593: LD_INT 2
12595: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12596: LD_ADDR_OWVAR 37
12600: PUSH
12601: LD_INT 14
12603: ST_TO_ADDR
// vc_engine := engine_siberite ;
12604: LD_ADDR_OWVAR 39
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// vc_control := control_apeman ;
12612: LD_ADDR_OWVAR 38
12616: PUSH
12617: LD_INT 5
12619: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12620: LD_ADDR_OWVAR 40
12624: PUSH
12625: LD_INT 29
12627: ST_TO_ADDR
// un := CreateVehicle ;
12628: LD_ADDR_VAR 0 2
12632: PUSH
12633: CALL_OW 45
12637: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12638: LD_VAR 0 2
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12650: LD_INT 35
12652: PPUSH
12653: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12657: LD_VAR 0 2
12661: PPUSH
12662: LD_OWVAR 3
12666: PUSH
12667: LD_VAR 0 2
12671: DIFF
12672: PPUSH
12673: LD_VAR 0 2
12677: PPUSH
12678: CALL_OW 74
12682: PPUSH
12683: CALL_OW 115
// until IsOk ( un ) ;
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 302
12696: IFFALSE 12650
// end ;
12698: PPOPN 2
12700: END
// every 0 0$1 trigger StreamModeActive and sStu do
12701: LD_EXP 15
12705: PUSH
12706: LD_EXP 54
12710: AND
12711: IFFALSE 12723
12713: GO 12715
12715: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12716: LD_STRING displayStucuk();
12718: PPUSH
12719: CALL_OW 559
// end ;
12723: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12724: LD_EXP 15
12728: PUSH
12729: LD_EXP 47
12733: AND
12734: IFFALSE 12875
12736: GO 12738
12738: DISABLE
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: LD_INT 22
12750: PUSH
12751: LD_OWVAR 2
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 21
12762: PUSH
12763: LD_INT 1
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// if not tmp then
12779: LD_VAR 0 2
12783: NOT
12784: IFFALSE 12788
// exit ;
12786: GO 12875
// un := tmp [ rand ( 1 , tmp ) ] ;
12788: LD_ADDR_VAR 0 1
12792: PUSH
12793: LD_VAR 0 2
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 2
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12824: LD_VAR 0 1
12828: PPUSH
12829: LD_OWVAR 3
12833: PUSH
12834: LD_VAR 0 1
12838: DIFF
12839: PPUSH
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 74
12849: PPUSH
12850: CALL_OW 115
// wait ( 0 0$20 ) ;
12854: LD_INT 700
12856: PPUSH
12857: CALL_OW 67
// SetSide ( un , your_side ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_OWVAR 2
12870: PPUSH
12871: CALL_OW 235
// end ;
12875: PPOPN 2
12877: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12878: LD_EXP 15
12882: PUSH
12883: LD_EXP 48
12887: AND
12888: IFFALSE 12994
12890: GO 12892
12892: DISABLE
12893: LD_INT 0
12895: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 0
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 1
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: ST_TO_ADDR
// if not depot then
12950: LD_VAR 0 1
12954: NOT
12955: IFFALSE 12959
// exit ;
12957: GO 12994
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12959: LD_VAR 0 1
12963: PUSH
12964: LD_INT 1
12966: ARRAY
12967: PPUSH
12968: CALL_OW 250
12972: PPUSH
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 251
12986: PPUSH
12987: LD_INT 70
12989: PPUSH
12990: CALL_OW 495
// end ;
12994: PPOPN 1
12996: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12997: LD_EXP 15
13001: PUSH
13002: LD_EXP 49
13006: AND
13007: IFFALSE 13218
13009: GO 13011
13011: DISABLE
13012: LD_INT 0
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
13018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13019: LD_ADDR_VAR 0 5
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_OWVAR 2
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: ST_TO_ADDR
// if not tmp then
13055: LD_VAR 0 5
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13218
// for i in tmp do
13064: LD_ADDR_VAR 0 1
13068: PUSH
13069: LD_VAR 0 5
13073: PUSH
13074: FOR_IN
13075: IFFALSE 13216
// begin d := rand ( 0 , 5 ) ;
13077: LD_ADDR_VAR 0 4
13081: PUSH
13082: LD_INT 0
13084: PPUSH
13085: LD_INT 5
13087: PPUSH
13088: CALL_OW 12
13092: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13093: LD_ADDR_VAR 0 2
13097: PUSH
13098: LD_VAR 0 1
13102: PPUSH
13103: CALL_OW 250
13107: PPUSH
13108: LD_VAR 0 4
13112: PPUSH
13113: LD_INT 3
13115: PPUSH
13116: LD_INT 12
13118: PPUSH
13119: CALL_OW 12
13123: PPUSH
13124: CALL_OW 272
13128: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13129: LD_ADDR_VAR 0 3
13133: PUSH
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 251
13143: PPUSH
13144: LD_VAR 0 4
13148: PPUSH
13149: LD_INT 3
13151: PPUSH
13152: LD_INT 12
13154: PPUSH
13155: CALL_OW 12
13159: PPUSH
13160: CALL_OW 273
13164: ST_TO_ADDR
// if ValidHex ( x , y ) then
13165: LD_VAR 0 2
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: CALL_OW 488
13179: IFFALSE 13214
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_VAR 0 2
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 6
13201: PPUSH
13202: CALL_OW 12
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 483
// end ;
13214: GO 13074
13216: POP
13217: POP
// end ;
13218: PPOPN 5
13220: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13221: LD_EXP 15
13225: PUSH
13226: LD_EXP 50
13230: AND
13231: IFFALSE 13325
13233: GO 13235
13235: DISABLE
13236: LD_INT 0
13238: PPUSH
13239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13240: LD_ADDR_VAR 0 2
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_OWVAR 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 32
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: ST_TO_ADDR
// if not tmp then
13287: LD_VAR 0 2
13291: NOT
13292: IFFALSE 13296
// exit ;
13294: GO 13325
// for i in tmp do
13296: LD_ADDR_VAR 0 1
13300: PUSH
13301: LD_VAR 0 2
13305: PUSH
13306: FOR_IN
13307: IFFALSE 13323
// SetFuel ( i , 0 ) ;
13309: LD_VAR 0 1
13313: PPUSH
13314: LD_INT 0
13316: PPUSH
13317: CALL_OW 240
13321: GO 13306
13323: POP
13324: POP
// end ;
13325: PPOPN 2
13327: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13328: LD_EXP 15
13332: PUSH
13333: LD_EXP 51
13337: AND
13338: IFFALSE 13404
13340: GO 13342
13342: DISABLE
13343: LD_INT 0
13345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_OWVAR 2
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 30
13365: PUSH
13366: LD_INT 29
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 69
13381: ST_TO_ADDR
// if not tmp then
13382: LD_VAR 0 1
13386: NOT
13387: IFFALSE 13391
// exit ;
13389: GO 13404
// DestroyUnit ( tmp [ 1 ] ) ;
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: CALL_OW 65
// end ;
13404: PPOPN 1
13406: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13407: LD_EXP 15
13411: PUSH
13412: LD_EXP 53
13416: AND
13417: IFFALSE 13546
13419: GO 13421
13421: DISABLE
13422: LD_INT 0
13424: PPUSH
// begin uc_side := 0 ;
13425: LD_ADDR_OWVAR 20
13429: PUSH
13430: LD_INT 0
13432: ST_TO_ADDR
// uc_nation := nation_arabian ;
13433: LD_ADDR_OWVAR 21
13437: PUSH
13438: LD_INT 2
13440: ST_TO_ADDR
// hc_gallery :=  ;
13441: LD_ADDR_OWVAR 33
13445: PUSH
13446: LD_STRING 
13448: ST_TO_ADDR
// hc_name :=  ;
13449: LD_ADDR_OWVAR 26
13453: PUSH
13454: LD_STRING 
13456: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13457: LD_INT 1
13459: PPUSH
13460: LD_INT 11
13462: PPUSH
13463: LD_INT 10
13465: PPUSH
13466: CALL_OW 380
// un := CreateHuman ;
13470: LD_ADDR_VAR 0 1
13474: PUSH
13475: CALL_OW 44
13479: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13480: LD_VAR 0 1
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13492: LD_INT 35
13494: PPUSH
13495: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13499: LD_VAR 0 1
13503: PPUSH
13504: LD_INT 22
13506: PUSH
13507: LD_OWVAR 2
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: PPUSH
13521: LD_VAR 0 1
13525: PPUSH
13526: CALL_OW 74
13530: PPUSH
13531: CALL_OW 115
// until IsDead ( un ) ;
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 301
13544: IFFALSE 13492
// end ;
13546: PPOPN 1
13548: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13549: LD_EXP 15
13553: PUSH
13554: LD_EXP 55
13558: AND
13559: IFFALSE 13571
13561: GO 13563
13563: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13564: LD_STRING earthquake(getX(game), 0, 32)
13566: PPUSH
13567: CALL_OW 559
13571: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13572: LD_EXP 15
13576: PUSH
13577: LD_EXP 56
13581: AND
13582: IFFALSE 13673
13584: GO 13586
13586: DISABLE
13587: LD_INT 0
13589: PPUSH
// begin enable ;
13590: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13591: LD_ADDR_VAR 0 1
13595: PUSH
13596: LD_INT 22
13598: PUSH
13599: LD_OWVAR 2
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 33
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
// if not tmp then
13638: LD_VAR 0 1
13642: NOT
13643: IFFALSE 13647
// exit ;
13645: GO 13673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13647: LD_VAR 0 1
13651: PUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_VAR 0 1
13659: PPUSH
13660: CALL_OW 12
13664: ARRAY
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 234
// end ;
13673: PPOPN 1
13675: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13676: LD_EXP 15
13680: PUSH
13681: LD_EXP 57
13685: AND
13686: IFFALSE 13827
13688: GO 13690
13690: DISABLE
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
13695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_OWVAR 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 25
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 3
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13827
// un := tmp [ rand ( 1 , tmp ) ] ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_VAR 0 3
13750: PUSH
13751: LD_INT 1
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: CALL_OW 12
13763: ARRAY
13764: ST_TO_ADDR
// if Crawls ( un ) then
13765: LD_VAR 0 2
13769: PPUSH
13770: CALL_OW 318
13774: IFFALSE 13785
// ComWalk ( un ) ;
13776: LD_VAR 0 2
13780: PPUSH
13781: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13785: LD_VAR 0 2
13789: PPUSH
13790: LD_INT 9
13792: PPUSH
13793: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13797: LD_INT 28
13799: PPUSH
13800: LD_OWVAR 2
13804: PPUSH
13805: LD_INT 2
13807: PPUSH
13808: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13812: LD_INT 29
13814: PPUSH
13815: LD_OWVAR 2
13819: PPUSH
13820: LD_INT 2
13822: PPUSH
13823: CALL_OW 322
// end ;
13827: PPOPN 3
13829: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13830: LD_EXP 15
13834: PUSH
13835: LD_EXP 58
13839: AND
13840: IFFALSE 13951
13842: GO 13844
13844: DISABLE
13845: LD_INT 0
13847: PPUSH
13848: PPUSH
13849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_OWVAR 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 25
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: ST_TO_ADDR
// if not tmp then
13886: LD_VAR 0 3
13890: NOT
13891: IFFALSE 13895
// exit ;
13893: GO 13951
// un := tmp [ rand ( 1 , tmp ) ] ;
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_VAR 0 3
13912: PPUSH
13913: CALL_OW 12
13917: ARRAY
13918: ST_TO_ADDR
// if Crawls ( un ) then
13919: LD_VAR 0 2
13923: PPUSH
13924: CALL_OW 318
13928: IFFALSE 13939
// ComWalk ( un ) ;
13930: LD_VAR 0 2
13934: PPUSH
13935: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13939: LD_VAR 0 2
13943: PPUSH
13944: LD_INT 8
13946: PPUSH
13947: CALL_OW 336
// end ;
13951: PPOPN 3
13953: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13954: LD_EXP 15
13958: PUSH
13959: LD_EXP 59
13963: AND
13964: IFFALSE 14108
13966: GO 13968
13968: DISABLE
13969: LD_INT 0
13971: PPUSH
13972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13973: LD_ADDR_VAR 0 2
13977: PUSH
13978: LD_INT 22
13980: PUSH
13981: LD_OWVAR 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 2
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 34
14005: PUSH
14006: LD_INT 12
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 34
14015: PUSH
14016: LD_INT 51
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 34
14025: PUSH
14026: LD_INT 32
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: ST_TO_ADDR
// if not tmp then
14049: LD_VAR 0 2
14053: NOT
14054: IFFALSE 14058
// exit ;
14056: GO 14108
// for i in tmp do
14058: LD_ADDR_VAR 0 1
14062: PUSH
14063: LD_VAR 0 2
14067: PUSH
14068: FOR_IN
14069: IFFALSE 14106
// if GetCargo ( i , mat_artifact ) = 0 then
14071: LD_VAR 0 1
14075: PPUSH
14076: LD_INT 4
14078: PPUSH
14079: CALL_OW 289
14083: PUSH
14084: LD_INT 0
14086: EQUAL
14087: IFFALSE 14104
// SetCargo ( i , mat_siberit , 100 ) ;
14089: LD_VAR 0 1
14093: PPUSH
14094: LD_INT 3
14096: PPUSH
14097: LD_INT 100
14099: PPUSH
14100: CALL_OW 290
14104: GO 14068
14106: POP
14107: POP
// end ;
14108: PPOPN 2
14110: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14111: LD_EXP 15
14115: PUSH
14116: LD_EXP 60
14120: AND
14121: IFFALSE 14274
14123: GO 14125
14125: DISABLE
14126: LD_INT 0
14128: PPUSH
14129: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14130: LD_ADDR_VAR 0 2
14134: PUSH
14135: LD_INT 22
14137: PUSH
14138: LD_OWVAR 2
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: ST_TO_ADDR
// if not tmp then
14152: LD_VAR 0 2
14156: NOT
14157: IFFALSE 14161
// exit ;
14159: GO 14274
// for i := 1 to 2 do
14161: LD_ADDR_VAR 0 1
14165: PUSH
14166: DOUBLE
14167: LD_INT 1
14169: DEC
14170: ST_TO_ADDR
14171: LD_INT 2
14173: PUSH
14174: FOR_TO
14175: IFFALSE 14272
// begin uc_side := your_side ;
14177: LD_ADDR_OWVAR 20
14181: PUSH
14182: LD_OWVAR 2
14186: ST_TO_ADDR
// uc_nation := nation_american ;
14187: LD_ADDR_OWVAR 21
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// vc_chassis := us_morphling ;
14195: LD_ADDR_OWVAR 37
14199: PUSH
14200: LD_INT 5
14202: ST_TO_ADDR
// vc_engine := engine_siberite ;
14203: LD_ADDR_OWVAR 39
14207: PUSH
14208: LD_INT 3
14210: ST_TO_ADDR
// vc_control := control_computer ;
14211: LD_ADDR_OWVAR 38
14215: PUSH
14216: LD_INT 3
14218: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14219: LD_ADDR_OWVAR 40
14223: PUSH
14224: LD_INT 10
14226: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14227: CALL_OW 45
14231: PPUSH
14232: LD_VAR 0 2
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: CALL_OW 250
14245: PPUSH
14246: LD_VAR 0 2
14250: PUSH
14251: LD_INT 1
14253: ARRAY
14254: PPUSH
14255: CALL_OW 251
14259: PPUSH
14260: LD_INT 12
14262: PPUSH
14263: LD_INT 1
14265: PPUSH
14266: CALL_OW 50
// end ;
14270: GO 14174
14272: POP
14273: POP
// end ;
14274: PPOPN 2
14276: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14277: LD_EXP 15
14281: PUSH
14282: LD_EXP 61
14286: AND
14287: IFFALSE 14509
14289: GO 14291
14291: DISABLE
14292: LD_INT 0
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14300: LD_ADDR_VAR 0 6
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_OWVAR 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 21
14319: PUSH
14320: LD_INT 1
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 23
14332: PUSH
14333: LD_INT 0
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: ST_TO_ADDR
// if not tmp then
14354: LD_VAR 0 6
14358: NOT
14359: IFFALSE 14363
// exit ;
14361: GO 14509
// s1 := rand ( 1 , 4 ) ;
14363: LD_ADDR_VAR 0 2
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: LD_INT 4
14373: PPUSH
14374: CALL_OW 12
14378: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14379: LD_ADDR_VAR 0 4
14383: PUSH
14384: LD_VAR 0 6
14388: PUSH
14389: LD_INT 1
14391: ARRAY
14392: PPUSH
14393: LD_VAR 0 2
14397: PPUSH
14398: CALL_OW 259
14402: ST_TO_ADDR
// if s1 = 1 then
14403: LD_VAR 0 2
14407: PUSH
14408: LD_INT 1
14410: EQUAL
14411: IFFALSE 14431
// s2 := rand ( 2 , 4 ) else
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 2
14420: PPUSH
14421: LD_INT 4
14423: PPUSH
14424: CALL_OW 12
14428: ST_TO_ADDR
14429: GO 14439
// s2 := 1 ;
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14439: LD_ADDR_VAR 0 5
14443: PUSH
14444: LD_VAR 0 6
14448: PUSH
14449: LD_INT 1
14451: ARRAY
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: CALL_OW 259
14462: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14463: LD_VAR 0 6
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_VAR 0 2
14476: PPUSH
14477: LD_VAR 0 5
14481: PPUSH
14482: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14486: LD_VAR 0 6
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_VAR 0 4
14504: PPUSH
14505: CALL_OW 237
// end ;
14509: PPOPN 6
14511: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14512: LD_EXP 15
14516: PUSH
14517: LD_EXP 62
14521: AND
14522: IFFALSE 14601
14524: GO 14526
14526: DISABLE
14527: LD_INT 0
14529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14530: LD_ADDR_VAR 0 1
14534: PUSH
14535: LD_INT 22
14537: PUSH
14538: LD_OWVAR 2
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 30
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// if not tmp then
14566: LD_VAR 0 1
14570: NOT
14571: IFFALSE 14575
// exit ;
14573: GO 14601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14575: LD_VAR 0 1
14579: PUSH
14580: LD_INT 1
14582: PPUSH
14583: LD_VAR 0 1
14587: PPUSH
14588: CALL_OW 12
14592: ARRAY
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 234
// end ;
14601: PPOPN 1
14603: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14604: LD_EXP 15
14608: PUSH
14609: LD_EXP 63
14613: AND
14614: IFFALSE 14726
14616: GO 14618
14618: DISABLE
14619: LD_INT 0
14621: PPUSH
14622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14623: LD_ADDR_VAR 0 2
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_OWVAR 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: LD_INT 30
14645: PUSH
14646: LD_INT 27
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 30
14655: PUSH
14656: LD_INT 26
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 30
14665: PUSH
14666: LD_INT 28
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PPUSH
14683: CALL_OW 69
14687: ST_TO_ADDR
// if not tmp then
14688: LD_VAR 0 2
14692: NOT
14693: IFFALSE 14697
// exit ;
14695: GO 14726
// for i in tmp do
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: LD_VAR 0 2
14706: PUSH
14707: FOR_IN
14708: IFFALSE 14724
// SetLives ( i , 1 ) ;
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: CALL_OW 234
14722: GO 14707
14724: POP
14725: POP
// end ;
14726: PPOPN 2
14728: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14729: LD_EXP 15
14733: PUSH
14734: LD_EXP 64
14738: AND
14739: IFFALSE 15009
14741: GO 14743
14743: DISABLE
14744: LD_INT 0
14746: PPUSH
14747: PPUSH
14748: PPUSH
// begin i := rand ( 1 , 7 ) ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_INT 7
14759: PPUSH
14760: CALL_OW 12
14764: ST_TO_ADDR
// case i of 1 :
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14788
14778: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14779: LD_STRING earthquake(getX(game), 0, 32)
14781: PPUSH
14782: CALL_OW 559
14786: GO 15009
14788: LD_INT 2
14790: DOUBLE
14791: EQUAL
14792: IFTRUE 14796
14794: GO 14806
14796: POP
// ToLua ( displayStucuk(); ) ; 3 :
14797: LD_STRING displayStucuk();
14799: PPUSH
14800: CALL_OW 559
14804: GO 15009
14806: LD_INT 3
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14918
14814: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14815: LD_ADDR_VAR 0 2
14819: PUSH
14820: LD_INT 22
14822: PUSH
14823: LD_OWVAR 2
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 25
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 69
14850: ST_TO_ADDR
// if not tmp then
14851: LD_VAR 0 2
14855: NOT
14856: IFFALSE 14860
// exit ;
14858: GO 15009
// un := tmp [ rand ( 1 , tmp ) ] ;
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_VAR 0 2
14869: PUSH
14870: LD_INT 1
14872: PPUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL_OW 12
14882: ARRAY
14883: ST_TO_ADDR
// if Crawls ( un ) then
14884: LD_VAR 0 3
14888: PPUSH
14889: CALL_OW 318
14893: IFFALSE 14904
// ComWalk ( un ) ;
14895: LD_VAR 0 3
14899: PPUSH
14900: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 8
14911: PPUSH
14912: CALL_OW 336
// end ; 4 :
14916: GO 15009
14918: LD_INT 4
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14987
14926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14927: LD_ADDR_VAR 0 2
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_OWVAR 2
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 29
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: ST_TO_ADDR
// if not tmp then
14963: LD_VAR 0 2
14967: NOT
14968: IFFALSE 14972
// exit ;
14970: GO 15009
// DestroyUnit ( tmp [ 1 ] ) ;
14972: LD_VAR 0 2
14976: PUSH
14977: LD_INT 1
14979: ARRAY
14980: PPUSH
14981: CALL_OW 65
// end ; 5 .. 7 :
14985: GO 15009
14987: LD_INT 5
14989: DOUBLE
14990: GREATEREQUAL
14991: IFFALSE 14999
14993: LD_INT 7
14995: DOUBLE
14996: LESSEQUAL
14997: IFTRUE 15001
14999: GO 15008
15001: POP
// StreamSibBomb ; end ;
15002: CALL 11303 0 0
15006: GO 15009
15008: POP
// end ;
15009: PPOPN 3
15011: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15012: LD_EXP 15
15016: PUSH
15017: LD_EXP 65
15021: AND
15022: IFFALSE 15178
15024: GO 15026
15026: DISABLE
15027: LD_INT 0
15029: PPUSH
15030: PPUSH
15031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15032: LD_ADDR_VAR 0 2
15036: PUSH
15037: LD_INT 81
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 21
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 69
15085: ST_TO_ADDR
// if not tmp then
15086: LD_VAR 0 2
15090: NOT
15091: IFFALSE 15095
// exit ;
15093: GO 15178
// p := 0 ;
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 0
15102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15103: LD_INT 35
15105: PPUSH
15106: CALL_OW 67
// p := p + 1 ;
15110: LD_ADDR_VAR 0 3
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_INT 1
15122: PLUS
15123: ST_TO_ADDR
// for i in tmp do
15124: LD_ADDR_VAR 0 1
15128: PUSH
15129: LD_VAR 0 2
15133: PUSH
15134: FOR_IN
15135: IFFALSE 15166
// if GetLives ( i ) < 1000 then
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 256
15146: PUSH
15147: LD_INT 1000
15149: LESS
15150: IFFALSE 15164
// SetLives ( i , 1000 ) ;
15152: LD_VAR 0 1
15156: PPUSH
15157: LD_INT 1000
15159: PPUSH
15160: CALL_OW 234
15164: GO 15134
15166: POP
15167: POP
// until p > 20 ;
15168: LD_VAR 0 3
15172: PUSH
15173: LD_INT 20
15175: GREATER
15176: IFFALSE 15103
// end ;
15178: PPOPN 3
15180: END
// every 0 0$1 trigger StreamModeActive and sTime do
15181: LD_EXP 15
15185: PUSH
15186: LD_EXP 66
15190: AND
15191: IFFALSE 15226
15193: GO 15195
15195: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15196: LD_INT 28
15198: PPUSH
15199: LD_OWVAR 2
15203: PPUSH
15204: LD_INT 2
15206: PPUSH
15207: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15211: LD_INT 30
15213: PPUSH
15214: LD_OWVAR 2
15218: PPUSH
15219: LD_INT 2
15221: PPUSH
15222: CALL_OW 322
// end ;
15226: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15227: LD_EXP 15
15231: PUSH
15232: LD_EXP 67
15236: AND
15237: IFFALSE 15358
15239: GO 15241
15241: DISABLE
15242: LD_INT 0
15244: PPUSH
15245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15246: LD_ADDR_VAR 0 2
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_OWVAR 2
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 21
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 23
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 69
15299: ST_TO_ADDR
// if not tmp then
15300: LD_VAR 0 2
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15358
// for i in tmp do
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: LD_VAR 0 2
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15356
// begin if Crawls ( i ) then
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 318
15331: IFFALSE 15342
// ComWalk ( i ) ;
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 138
// SetClass ( i , 2 ) ;
15342: LD_VAR 0 1
15346: PPUSH
15347: LD_INT 2
15349: PPUSH
15350: CALL_OW 336
// end ;
15354: GO 15319
15356: POP
15357: POP
// end ;
15358: PPOPN 2
15360: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15361: LD_EXP 15
15365: PUSH
15366: LD_EXP 68
15370: AND
15371: IFFALSE 15576
15373: GO 15375
15375: DISABLE
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15381: LD_OWVAR 2
15385: PPUSH
15386: LD_INT 9
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15399: LD_INT 9
15401: PPUSH
15402: LD_OWVAR 2
15406: PPUSH
15407: CALL_OW 343
// hc_name := Dark Warrior ;
15411: LD_ADDR_OWVAR 26
15415: PUSH
15416: LD_STRING Dark Warrior
15418: ST_TO_ADDR
// hc_gallery :=  ;
15419: LD_ADDR_OWVAR 33
15423: PUSH
15424: LD_STRING 
15426: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
15427: LD_INT 1
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: LD_INT 10
15435: PPUSH
15436: CALL_OW 380
// un := CreateHuman ;
15440: LD_ADDR_VAR 0 3
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15450: LD_VAR 0 3
15454: PPUSH
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 51
// p := 0 ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15470: LD_INT 35
15472: PPUSH
15473: CALL_OW 67
// if GetLives ( un ) < 1000 then
15477: LD_VAR 0 3
15481: PPUSH
15482: CALL_OW 256
15486: PUSH
15487: LD_INT 1000
15489: LESS
15490: IFFALSE 15504
// SetLives ( un , 1000 ) ;
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1000
15499: PPUSH
15500: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_INT 81
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: PPUSH
15526: LD_VAR 0 3
15530: PPUSH
15531: CALL_OW 74
15535: PPUSH
15536: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15540: LD_VAR 0 2
15544: PUSH
15545: LD_INT 60
15547: GREATER
15548: PUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: CALL_OW 301
15558: OR
15559: IFFALSE 15470
// if un then
15561: LD_VAR 0 3
15565: IFFALSE 15576
// RemoveUnit ( un ) ;
15567: LD_VAR 0 3
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 3
15578: END
