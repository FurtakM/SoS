// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// export function SOS_MapStart ( ) ; begin
4985: LD_INT 0
4987: PPUSH
// if streamModeActive then
4988: LD_EXP 16
4992: IFFALSE 5001
// DefineStreamItems ( true ) ;
4994: LD_INT 1
4996: PPUSH
4997: CALL 6805 0 1
// UpdateLuaVariables ( ) ;
5001: CALL 5018 0 0
// UpdateFactoryWaypoints ( ) ;
5005: CALL 19666 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5009: CALL 19923 0 0
// end ;
5013: LD_VAR 0 1
5017: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
5018: LD_INT 0
5020: PPUSH
// if not globalGameSaveCounter then
5021: LD_EXP 15
5025: NOT
5026: IFFALSE 5037
// ToLua ( setGameSaveCounter(0) ) else
5028: LD_STRING setGameSaveCounter(0)
5030: PPUSH
5031: CALL_OW 559
5035: GO 5069
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5037: LD_ADDR_EXP 15
5041: PUSH
5042: LD_EXP 15
5046: PPUSH
5047: CALL 64043 0 1
5051: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5052: LD_STRING setGameSaveCounter(
5054: PUSH
5055: LD_EXP 15
5059: STR
5060: PUSH
5061: LD_STRING )
5063: STR
5064: PPUSH
5065: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5069: LD_STRING setGameDifficulty(
5071: PUSH
5072: LD_OWVAR 67
5076: STR
5077: PUSH
5078: LD_STRING )
5080: STR
5081: PPUSH
5082: CALL_OW 559
// end ;
5086: LD_VAR 0 1
5090: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5091: LD_INT 0
5093: PPUSH
// if p2 = stream_mode then
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 100
5101: EQUAL
5102: IFFALSE 6105
// begin if not StreamModeActive then
5104: LD_EXP 16
5108: NOT
5109: IFFALSE 5119
// StreamModeActive := true ;
5111: LD_ADDR_EXP 16
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// if p3 = 0 then
5119: LD_VAR 0 3
5123: PUSH
5124: LD_INT 0
5126: EQUAL
5127: IFFALSE 5133
// InitStreamMode ;
5129: CALL 6341 0 0
// if p3 = 1 then
5133: LD_VAR 0 3
5137: PUSH
5138: LD_INT 1
5140: EQUAL
5141: IFFALSE 5151
// sRocket := true ;
5143: LD_ADDR_EXP 21
5147: PUSH
5148: LD_INT 1
5150: ST_TO_ADDR
// if p3 = 2 then
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 2
5158: EQUAL
5159: IFFALSE 5169
// sSpeed := true ;
5161: LD_ADDR_EXP 20
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// if p3 = 3 then
5169: LD_VAR 0 3
5173: PUSH
5174: LD_INT 3
5176: EQUAL
5177: IFFALSE 5187
// sEngine := true ;
5179: LD_ADDR_EXP 22
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// if p3 = 4 then
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 4
5194: EQUAL
5195: IFFALSE 5205
// sSpec := true ;
5197: LD_ADDR_EXP 19
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// if p3 = 5 then
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 5
5212: EQUAL
5213: IFFALSE 5223
// sLevel := true ;
5215: LD_ADDR_EXP 23
5219: PUSH
5220: LD_INT 1
5222: ST_TO_ADDR
// if p3 = 6 then
5223: LD_VAR 0 3
5227: PUSH
5228: LD_INT 6
5230: EQUAL
5231: IFFALSE 5241
// sArmoury := true ;
5233: LD_ADDR_EXP 24
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// if p3 = 7 then
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 7
5248: EQUAL
5249: IFFALSE 5259
// sRadar := true ;
5251: LD_ADDR_EXP 25
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if p3 = 8 then
5259: LD_VAR 0 3
5263: PUSH
5264: LD_INT 8
5266: EQUAL
5267: IFFALSE 5277
// sBunker := true ;
5269: LD_ADDR_EXP 26
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// if p3 = 9 then
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 9
5284: EQUAL
5285: IFFALSE 5295
// sHack := true ;
5287: LD_ADDR_EXP 27
5291: PUSH
5292: LD_INT 1
5294: ST_TO_ADDR
// if p3 = 10 then
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 10
5302: EQUAL
5303: IFFALSE 5313
// sFire := true ;
5305: LD_ADDR_EXP 28
5309: PUSH
5310: LD_INT 1
5312: ST_TO_ADDR
// if p3 = 11 then
5313: LD_VAR 0 3
5317: PUSH
5318: LD_INT 11
5320: EQUAL
5321: IFFALSE 5331
// sRefresh := true ;
5323: LD_ADDR_EXP 29
5327: PUSH
5328: LD_INT 1
5330: ST_TO_ADDR
// if p3 = 12 then
5331: LD_VAR 0 3
5335: PUSH
5336: LD_INT 12
5338: EQUAL
5339: IFFALSE 5349
// sExp := true ;
5341: LD_ADDR_EXP 30
5345: PUSH
5346: LD_INT 1
5348: ST_TO_ADDR
// if p3 = 13 then
5349: LD_VAR 0 3
5353: PUSH
5354: LD_INT 13
5356: EQUAL
5357: IFFALSE 5367
// sDepot := true ;
5359: LD_ADDR_EXP 31
5363: PUSH
5364: LD_INT 1
5366: ST_TO_ADDR
// if p3 = 14 then
5367: LD_VAR 0 3
5371: PUSH
5372: LD_INT 14
5374: EQUAL
5375: IFFALSE 5385
// sFlag := true ;
5377: LD_ADDR_EXP 32
5381: PUSH
5382: LD_INT 1
5384: ST_TO_ADDR
// if p3 = 15 then
5385: LD_VAR 0 3
5389: PUSH
5390: LD_INT 15
5392: EQUAL
5393: IFFALSE 5403
// sKamikadze := true ;
5395: LD_ADDR_EXP 40
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// if p3 = 16 then
5403: LD_VAR 0 3
5407: PUSH
5408: LD_INT 16
5410: EQUAL
5411: IFFALSE 5421
// sTroll := true ;
5413: LD_ADDR_EXP 41
5417: PUSH
5418: LD_INT 1
5420: ST_TO_ADDR
// if p3 = 17 then
5421: LD_VAR 0 3
5425: PUSH
5426: LD_INT 17
5428: EQUAL
5429: IFFALSE 5439
// sSlow := true ;
5431: LD_ADDR_EXP 42
5435: PUSH
5436: LD_INT 1
5438: ST_TO_ADDR
// if p3 = 18 then
5439: LD_VAR 0 3
5443: PUSH
5444: LD_INT 18
5446: EQUAL
5447: IFFALSE 5457
// sLack := true ;
5449: LD_ADDR_EXP 43
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// if p3 = 19 then
5457: LD_VAR 0 3
5461: PUSH
5462: LD_INT 19
5464: EQUAL
5465: IFFALSE 5475
// sTank := true ;
5467: LD_ADDR_EXP 45
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// if p3 = 20 then
5475: LD_VAR 0 3
5479: PUSH
5480: LD_INT 20
5482: EQUAL
5483: IFFALSE 5493
// sRemote := true ;
5485: LD_ADDR_EXP 46
5489: PUSH
5490: LD_INT 1
5492: ST_TO_ADDR
// if p3 = 21 then
5493: LD_VAR 0 3
5497: PUSH
5498: LD_INT 21
5500: EQUAL
5501: IFFALSE 5511
// sPowell := true ;
5503: LD_ADDR_EXP 47
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// if p3 = 22 then
5511: LD_VAR 0 3
5515: PUSH
5516: LD_INT 22
5518: EQUAL
5519: IFFALSE 5529
// sTeleport := true ;
5521: LD_ADDR_EXP 50
5525: PUSH
5526: LD_INT 1
5528: ST_TO_ADDR
// if p3 = 23 then
5529: LD_VAR 0 3
5533: PUSH
5534: LD_INT 23
5536: EQUAL
5537: IFFALSE 5547
// sOilTower := true ;
5539: LD_ADDR_EXP 52
5543: PUSH
5544: LD_INT 1
5546: ST_TO_ADDR
// if p3 = 24 then
5547: LD_VAR 0 3
5551: PUSH
5552: LD_INT 24
5554: EQUAL
5555: IFFALSE 5565
// sShovel := true ;
5557: LD_ADDR_EXP 53
5561: PUSH
5562: LD_INT 1
5564: ST_TO_ADDR
// if p3 = 25 then
5565: LD_VAR 0 3
5569: PUSH
5570: LD_INT 25
5572: EQUAL
5573: IFFALSE 5583
// sSheik := true ;
5575: LD_ADDR_EXP 54
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// if p3 = 26 then
5583: LD_VAR 0 3
5587: PUSH
5588: LD_INT 26
5590: EQUAL
5591: IFFALSE 5601
// sEarthquake := true ;
5593: LD_ADDR_EXP 56
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// if p3 = 27 then
5601: LD_VAR 0 3
5605: PUSH
5606: LD_INT 27
5608: EQUAL
5609: IFFALSE 5619
// sAI := true ;
5611: LD_ADDR_EXP 57
5615: PUSH
5616: LD_INT 1
5618: ST_TO_ADDR
// if p3 = 28 then
5619: LD_VAR 0 3
5623: PUSH
5624: LD_INT 28
5626: EQUAL
5627: IFFALSE 5637
// sCargo := true ;
5629: LD_ADDR_EXP 60
5633: PUSH
5634: LD_INT 1
5636: ST_TO_ADDR
// if p3 = 29 then
5637: LD_VAR 0 3
5641: PUSH
5642: LD_INT 29
5644: EQUAL
5645: IFFALSE 5655
// sDLaser := true ;
5647: LD_ADDR_EXP 61
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// if p3 = 30 then
5655: LD_VAR 0 3
5659: PUSH
5660: LD_INT 30
5662: EQUAL
5663: IFFALSE 5673
// sExchange := true ;
5665: LD_ADDR_EXP 62
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// if p3 = 31 then
5673: LD_VAR 0 3
5677: PUSH
5678: LD_INT 31
5680: EQUAL
5681: IFFALSE 5691
// sFac := true ;
5683: LD_ADDR_EXP 63
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// if p3 = 32 then
5691: LD_VAR 0 3
5695: PUSH
5696: LD_INT 32
5698: EQUAL
5699: IFFALSE 5709
// sPower := true ;
5701: LD_ADDR_EXP 64
5705: PUSH
5706: LD_INT 1
5708: ST_TO_ADDR
// if p3 = 33 then
5709: LD_VAR 0 3
5713: PUSH
5714: LD_INT 33
5716: EQUAL
5717: IFFALSE 5727
// sRandom := true ;
5719: LD_ADDR_EXP 65
5723: PUSH
5724: LD_INT 1
5726: ST_TO_ADDR
// if p3 = 34 then
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 34
5734: EQUAL
5735: IFFALSE 5745
// sShield := true ;
5737: LD_ADDR_EXP 66
5741: PUSH
5742: LD_INT 1
5744: ST_TO_ADDR
// if p3 = 35 then
5745: LD_VAR 0 3
5749: PUSH
5750: LD_INT 35
5752: EQUAL
5753: IFFALSE 5763
// sTime := true ;
5755: LD_ADDR_EXP 67
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// if p3 = 36 then
5763: LD_VAR 0 3
5767: PUSH
5768: LD_INT 36
5770: EQUAL
5771: IFFALSE 5781
// sTools := true ;
5773: LD_ADDR_EXP 68
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// if p3 = 101 then
5781: LD_VAR 0 3
5785: PUSH
5786: LD_INT 101
5788: EQUAL
5789: IFFALSE 5799
// sSold := true ;
5791: LD_ADDR_EXP 33
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// if p3 = 102 then
5799: LD_VAR 0 3
5803: PUSH
5804: LD_INT 102
5806: EQUAL
5807: IFFALSE 5817
// sDiff := true ;
5809: LD_ADDR_EXP 34
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// if p3 = 103 then
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 103
5824: EQUAL
5825: IFFALSE 5835
// sFog := true ;
5827: LD_ADDR_EXP 37
5831: PUSH
5832: LD_INT 1
5834: ST_TO_ADDR
// if p3 = 104 then
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 104
5842: EQUAL
5843: IFFALSE 5853
// sReset := true ;
5845: LD_ADDR_EXP 38
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 105 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 105
5860: EQUAL
5861: IFFALSE 5871
// sSun := true ;
5863: LD_ADDR_EXP 39
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// if p3 = 106 then
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 106
5878: EQUAL
5879: IFFALSE 5889
// sTiger := true ;
5881: LD_ADDR_EXP 35
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// if p3 = 107 then
5889: LD_VAR 0 3
5893: PUSH
5894: LD_INT 107
5896: EQUAL
5897: IFFALSE 5907
// sBomb := true ;
5899: LD_ADDR_EXP 36
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// if p3 = 108 then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 108
5914: EQUAL
5915: IFFALSE 5925
// sWound := true ;
5917: LD_ADDR_EXP 44
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// if p3 = 109 then
5925: LD_VAR 0 3
5929: PUSH
5930: LD_INT 109
5932: EQUAL
5933: IFFALSE 5943
// sBetray := true ;
5935: LD_ADDR_EXP 48
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// if p3 = 110 then
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 110
5950: EQUAL
5951: IFFALSE 5961
// sContamin := true ;
5953: LD_ADDR_EXP 49
5957: PUSH
5958: LD_INT 1
5960: ST_TO_ADDR
// if p3 = 111 then
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 111
5968: EQUAL
5969: IFFALSE 5979
// sOil := true ;
5971: LD_ADDR_EXP 51
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// if p3 = 112 then
5979: LD_VAR 0 3
5983: PUSH
5984: LD_INT 112
5986: EQUAL
5987: IFFALSE 5997
// sStu := true ;
5989: LD_ADDR_EXP 55
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// if p3 = 113 then
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 113
6004: EQUAL
6005: IFFALSE 6015
// sBazooka := true ;
6007: LD_ADDR_EXP 58
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// if p3 = 114 then
6015: LD_VAR 0 3
6019: PUSH
6020: LD_INT 114
6022: EQUAL
6023: IFFALSE 6033
// sMortar := true ;
6025: LD_ADDR_EXP 59
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// if p3 = 115 then
6033: LD_VAR 0 3
6037: PUSH
6038: LD_INT 115
6040: EQUAL
6041: IFFALSE 6051
// sRanger := true ;
6043: LD_ADDR_EXP 69
6047: PUSH
6048: LD_INT 1
6050: ST_TO_ADDR
// if p3 = 116 then
6051: LD_VAR 0 3
6055: PUSH
6056: LD_INT 116
6058: EQUAL
6059: IFFALSE 6069
// sComputer := true ;
6061: LD_ADDR_EXP 70
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// if p3 = 117 then
6069: LD_VAR 0 3
6073: PUSH
6074: LD_INT 117
6076: EQUAL
6077: IFFALSE 6087
// s30 := true ;
6079: LD_ADDR_EXP 71
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// if p3 = 118 then
6087: LD_VAR 0 3
6091: PUSH
6092: LD_INT 118
6094: EQUAL
6095: IFFALSE 6105
// s60 := true ;
6097: LD_ADDR_EXP 72
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// end ; if p2 = hack_mode then
6105: LD_VAR 0 2
6109: PUSH
6110: LD_INT 101
6112: EQUAL
6113: IFFALSE 6241
// begin case p3 of 1 :
6115: LD_VAR 0 3
6119: PUSH
6120: LD_INT 1
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6135
6128: POP
// hHackUnlimitedResources ; 2 :
6129: CALL 18412 0 0
6133: GO 6241
6135: LD_INT 2
6137: DOUBLE
6138: EQUAL
6139: IFTRUE 6143
6141: GO 6150
6143: POP
// hHackSetLevel10 ; 3 :
6144: CALL 18545 0 0
6148: GO 6241
6150: LD_INT 3
6152: DOUBLE
6153: EQUAL
6154: IFTRUE 6158
6156: GO 6165
6158: POP
// hHackSetLevel10YourUnits ; 4 :
6159: CALL 18630 0 0
6163: GO 6241
6165: LD_INT 4
6167: DOUBLE
6168: EQUAL
6169: IFTRUE 6173
6171: GO 6180
6173: POP
// hHackInvincible ; 5 :
6174: CALL 19078 0 0
6178: GO 6241
6180: LD_INT 5
6182: DOUBLE
6183: EQUAL
6184: IFTRUE 6188
6186: GO 6195
6188: POP
// hHackInvisible ; 6 :
6189: CALL 19189 0 0
6193: GO 6241
6195: LD_INT 6
6197: DOUBLE
6198: EQUAL
6199: IFTRUE 6203
6201: GO 6210
6203: POP
// hHackChangeYourSide ; 7 :
6204: CALL 19246 0 0
6208: GO 6241
6210: LD_INT 7
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6218
6216: GO 6225
6218: POP
// hHackChangeUnitSide ; 8 :
6219: CALL 19288 0 0
6223: GO 6241
6225: LD_INT 8
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6233
6231: GO 6240
6233: POP
// hHackFog ; end ;
6234: CALL 19389 0 0
6238: GO 6241
6240: POP
// end ; if p2 = game_save_mode then
6241: LD_VAR 0 2
6245: PUSH
6246: LD_INT 102
6248: EQUAL
6249: IFFALSE 6314
// begin if p3 = 1 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 1
6258: EQUAL
6259: IFFALSE 6271
// globalGameSaveCounter := p4 ;
6261: LD_ADDR_EXP 15
6265: PUSH
6266: LD_VAR 0 4
6270: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 2
6278: EQUAL
6279: PUSH
6280: LD_EXP 15
6284: AND
6285: IFFALSE 6304
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6287: LD_STRING setGameSaveCounter(
6289: PUSH
6290: LD_EXP 15
6294: STR
6295: PUSH
6296: LD_STRING )
6298: STR
6299: PPUSH
6300: CALL_OW 559
// display_strings := globalGameSaveCounter ;
6304: LD_ADDR_OWVAR 47
6308: PUSH
6309: LD_EXP 15
6313: ST_TO_ADDR
// end ; end ;
6314: LD_VAR 0 7
6318: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6319: GO 6321
6321: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6322: LD_STRING initStreamRollete();
6324: PPUSH
6325: CALL_OW 559
// InitStreamMode ;
6329: CALL 6341 0 0
// DefineStreamItems ( false ) ;
6333: LD_INT 0
6335: PPUSH
6336: CALL 6805 0 1
// end ;
6340: END
// function InitStreamMode ; begin
6341: LD_INT 0
6343: PPUSH
// streamModeActive := false ;
6344: LD_ADDR_EXP 16
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// normalCounter := 36 ;
6352: LD_ADDR_EXP 17
6356: PUSH
6357: LD_INT 36
6359: ST_TO_ADDR
// hardcoreCounter := 18 ;
6360: LD_ADDR_EXP 18
6364: PUSH
6365: LD_INT 18
6367: ST_TO_ADDR
// sRocket := false ;
6368: LD_ADDR_EXP 21
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// sSpeed := false ;
6376: LD_ADDR_EXP 20
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// sEngine := false ;
6384: LD_ADDR_EXP 22
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// sSpec := false ;
6392: LD_ADDR_EXP 19
6396: PUSH
6397: LD_INT 0
6399: ST_TO_ADDR
// sLevel := false ;
6400: LD_ADDR_EXP 23
6404: PUSH
6405: LD_INT 0
6407: ST_TO_ADDR
// sArmoury := false ;
6408: LD_ADDR_EXP 24
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// sRadar := false ;
6416: LD_ADDR_EXP 25
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// sBunker := false ;
6424: LD_ADDR_EXP 26
6428: PUSH
6429: LD_INT 0
6431: ST_TO_ADDR
// sHack := false ;
6432: LD_ADDR_EXP 27
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// sFire := false ;
6440: LD_ADDR_EXP 28
6444: PUSH
6445: LD_INT 0
6447: ST_TO_ADDR
// sRefresh := false ;
6448: LD_ADDR_EXP 29
6452: PUSH
6453: LD_INT 0
6455: ST_TO_ADDR
// sExp := false ;
6456: LD_ADDR_EXP 30
6460: PUSH
6461: LD_INT 0
6463: ST_TO_ADDR
// sDepot := false ;
6464: LD_ADDR_EXP 31
6468: PUSH
6469: LD_INT 0
6471: ST_TO_ADDR
// sFlag := false ;
6472: LD_ADDR_EXP 32
6476: PUSH
6477: LD_INT 0
6479: ST_TO_ADDR
// sKamikadze := false ;
6480: LD_ADDR_EXP 40
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// sTroll := false ;
6488: LD_ADDR_EXP 41
6492: PUSH
6493: LD_INT 0
6495: ST_TO_ADDR
// sSlow := false ;
6496: LD_ADDR_EXP 42
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// sLack := false ;
6504: LD_ADDR_EXP 43
6508: PUSH
6509: LD_INT 0
6511: ST_TO_ADDR
// sTank := false ;
6512: LD_ADDR_EXP 45
6516: PUSH
6517: LD_INT 0
6519: ST_TO_ADDR
// sRemote := false ;
6520: LD_ADDR_EXP 46
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// sPowell := false ;
6528: LD_ADDR_EXP 47
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// sTeleport := false ;
6536: LD_ADDR_EXP 50
6540: PUSH
6541: LD_INT 0
6543: ST_TO_ADDR
// sOilTower := false ;
6544: LD_ADDR_EXP 52
6548: PUSH
6549: LD_INT 0
6551: ST_TO_ADDR
// sShovel := false ;
6552: LD_ADDR_EXP 53
6556: PUSH
6557: LD_INT 0
6559: ST_TO_ADDR
// sSheik := false ;
6560: LD_ADDR_EXP 54
6564: PUSH
6565: LD_INT 0
6567: ST_TO_ADDR
// sEarthquake := false ;
6568: LD_ADDR_EXP 56
6572: PUSH
6573: LD_INT 0
6575: ST_TO_ADDR
// sAI := false ;
6576: LD_ADDR_EXP 57
6580: PUSH
6581: LD_INT 0
6583: ST_TO_ADDR
// sCargo := false ;
6584: LD_ADDR_EXP 60
6588: PUSH
6589: LD_INT 0
6591: ST_TO_ADDR
// sDLaser := false ;
6592: LD_ADDR_EXP 61
6596: PUSH
6597: LD_INT 0
6599: ST_TO_ADDR
// sExchange := false ;
6600: LD_ADDR_EXP 62
6604: PUSH
6605: LD_INT 0
6607: ST_TO_ADDR
// sFac := false ;
6608: LD_ADDR_EXP 63
6612: PUSH
6613: LD_INT 0
6615: ST_TO_ADDR
// sPower := false ;
6616: LD_ADDR_EXP 64
6620: PUSH
6621: LD_INT 0
6623: ST_TO_ADDR
// sRandom := false ;
6624: LD_ADDR_EXP 65
6628: PUSH
6629: LD_INT 0
6631: ST_TO_ADDR
// sShield := false ;
6632: LD_ADDR_EXP 66
6636: PUSH
6637: LD_INT 0
6639: ST_TO_ADDR
// sTime := false ;
6640: LD_ADDR_EXP 67
6644: PUSH
6645: LD_INT 0
6647: ST_TO_ADDR
// sTools := false ;
6648: LD_ADDR_EXP 68
6652: PUSH
6653: LD_INT 0
6655: ST_TO_ADDR
// sSold := false ;
6656: LD_ADDR_EXP 33
6660: PUSH
6661: LD_INT 0
6663: ST_TO_ADDR
// sDiff := false ;
6664: LD_ADDR_EXP 34
6668: PUSH
6669: LD_INT 0
6671: ST_TO_ADDR
// sFog := false ;
6672: LD_ADDR_EXP 37
6676: PUSH
6677: LD_INT 0
6679: ST_TO_ADDR
// sReset := false ;
6680: LD_ADDR_EXP 38
6684: PUSH
6685: LD_INT 0
6687: ST_TO_ADDR
// sSun := false ;
6688: LD_ADDR_EXP 39
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// sTiger := false ;
6696: LD_ADDR_EXP 35
6700: PUSH
6701: LD_INT 0
6703: ST_TO_ADDR
// sBomb := false ;
6704: LD_ADDR_EXP 36
6708: PUSH
6709: LD_INT 0
6711: ST_TO_ADDR
// sWound := false ;
6712: LD_ADDR_EXP 44
6716: PUSH
6717: LD_INT 0
6719: ST_TO_ADDR
// sBetray := false ;
6720: LD_ADDR_EXP 48
6724: PUSH
6725: LD_INT 0
6727: ST_TO_ADDR
// sContamin := false ;
6728: LD_ADDR_EXP 49
6732: PUSH
6733: LD_INT 0
6735: ST_TO_ADDR
// sOil := false ;
6736: LD_ADDR_EXP 51
6740: PUSH
6741: LD_INT 0
6743: ST_TO_ADDR
// sStu := false ;
6744: LD_ADDR_EXP 55
6748: PUSH
6749: LD_INT 0
6751: ST_TO_ADDR
// sBazooka := false ;
6752: LD_ADDR_EXP 58
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// sMortar := false ;
6760: LD_ADDR_EXP 59
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// sRanger := false ;
6768: LD_ADDR_EXP 69
6772: PUSH
6773: LD_INT 0
6775: ST_TO_ADDR
// sComputer := false ;
6776: LD_ADDR_EXP 70
6780: PUSH
6781: LD_INT 0
6783: ST_TO_ADDR
// s30 := false ;
6784: LD_ADDR_EXP 71
6788: PUSH
6789: LD_INT 0
6791: ST_TO_ADDR
// s60 := false ;
6792: LD_ADDR_EXP 72
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// end ;
6800: LD_VAR 0 1
6804: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6805: LD_INT 0
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
// result := [ ] ;
6814: LD_ADDR_VAR 0 2
6818: PUSH
6819: EMPTY
6820: ST_TO_ADDR
// if campaign_id = 1 then
6821: LD_OWVAR 69
6825: PUSH
6826: LD_INT 1
6828: EQUAL
6829: IFFALSE 9995
// begin case mission_number of 1 :
6831: LD_OWVAR 70
6835: PUSH
6836: LD_INT 1
6838: DOUBLE
6839: EQUAL
6840: IFTRUE 6844
6842: GO 6920
6844: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6845: LD_ADDR_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: LD_INT 4
6855: PUSH
6856: LD_INT 11
6858: PUSH
6859: LD_INT 12
6861: PUSH
6862: LD_INT 15
6864: PUSH
6865: LD_INT 16
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_INT 23
6873: PUSH
6874: LD_INT 26
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 101
6890: PUSH
6891: LD_INT 102
6893: PUSH
6894: LD_INT 106
6896: PUSH
6897: LD_INT 116
6899: PUSH
6900: LD_INT 117
6902: PUSH
6903: LD_INT 118
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: ST_TO_ADDR
6918: GO 9993
6920: LD_INT 2
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 7012
6928: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6929: LD_ADDR_VAR 0 2
6933: PUSH
6934: LD_INT 2
6936: PUSH
6937: LD_INT 4
6939: PUSH
6940: LD_INT 11
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: LD_INT 15
6948: PUSH
6949: LD_INT 16
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_INT 23
6957: PUSH
6958: LD_INT 26
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 101
6974: PUSH
6975: LD_INT 102
6977: PUSH
6978: LD_INT 105
6980: PUSH
6981: LD_INT 106
6983: PUSH
6984: LD_INT 108
6986: PUSH
6987: LD_INT 116
6989: PUSH
6990: LD_INT 117
6992: PUSH
6993: LD_INT 118
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 9993
7012: LD_INT 3
7014: DOUBLE
7015: EQUAL
7016: IFTRUE 7020
7018: GO 7108
7020: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 4
7031: PUSH
7032: LD_INT 5
7034: PUSH
7035: LD_INT 11
7037: PUSH
7038: LD_INT 12
7040: PUSH
7041: LD_INT 15
7043: PUSH
7044: LD_INT 16
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_INT 26
7052: PUSH
7053: LD_INT 36
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 101
7070: PUSH
7071: LD_INT 102
7073: PUSH
7074: LD_INT 105
7076: PUSH
7077: LD_INT 106
7079: PUSH
7080: LD_INT 108
7082: PUSH
7083: LD_INT 116
7085: PUSH
7086: LD_INT 117
7088: PUSH
7089: LD_INT 118
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: ST_TO_ADDR
7106: GO 9993
7108: LD_INT 4
7110: DOUBLE
7111: EQUAL
7112: IFTRUE 7116
7114: GO 7212
7116: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7117: LD_ADDR_VAR 0 2
7121: PUSH
7122: LD_INT 2
7124: PUSH
7125: LD_INT 4
7127: PUSH
7128: LD_INT 5
7130: PUSH
7131: LD_INT 8
7133: PUSH
7134: LD_INT 11
7136: PUSH
7137: LD_INT 12
7139: PUSH
7140: LD_INT 15
7142: PUSH
7143: LD_INT 16
7145: PUSH
7146: LD_INT 22
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 26
7154: PUSH
7155: LD_INT 36
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 101
7174: PUSH
7175: LD_INT 102
7177: PUSH
7178: LD_INT 105
7180: PUSH
7181: LD_INT 106
7183: PUSH
7184: LD_INT 108
7186: PUSH
7187: LD_INT 116
7189: PUSH
7190: LD_INT 117
7192: PUSH
7193: LD_INT 118
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: ST_TO_ADDR
7210: GO 9993
7212: LD_INT 5
7214: DOUBLE
7215: EQUAL
7216: IFTRUE 7220
7218: GO 7332
7220: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: LD_INT 5
7234: PUSH
7235: LD_INT 6
7237: PUSH
7238: LD_INT 8
7240: PUSH
7241: LD_INT 11
7243: PUSH
7244: LD_INT 12
7246: PUSH
7247: LD_INT 15
7249: PUSH
7250: LD_INT 16
7252: PUSH
7253: LD_INT 22
7255: PUSH
7256: LD_INT 23
7258: PUSH
7259: LD_INT 25
7261: PUSH
7262: LD_INT 26
7264: PUSH
7265: LD_INT 36
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 101
7286: PUSH
7287: LD_INT 102
7289: PUSH
7290: LD_INT 105
7292: PUSH
7293: LD_INT 106
7295: PUSH
7296: LD_INT 108
7298: PUSH
7299: LD_INT 109
7301: PUSH
7302: LD_INT 112
7304: PUSH
7305: LD_INT 116
7307: PUSH
7308: LD_INT 117
7310: PUSH
7311: LD_INT 118
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 9993
7332: LD_INT 6
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7472
7340: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: LD_INT 6
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: LD_INT 11
7363: PUSH
7364: LD_INT 12
7366: PUSH
7367: LD_INT 15
7369: PUSH
7370: LD_INT 16
7372: PUSH
7373: LD_INT 20
7375: PUSH
7376: LD_INT 21
7378: PUSH
7379: LD_INT 22
7381: PUSH
7382: LD_INT 23
7384: PUSH
7385: LD_INT 25
7387: PUSH
7388: LD_INT 26
7390: PUSH
7391: LD_INT 30
7393: PUSH
7394: LD_INT 31
7396: PUSH
7397: LD_INT 32
7399: PUSH
7400: LD_INT 36
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 101
7426: PUSH
7427: LD_INT 102
7429: PUSH
7430: LD_INT 105
7432: PUSH
7433: LD_INT 106
7435: PUSH
7436: LD_INT 108
7438: PUSH
7439: LD_INT 109
7441: PUSH
7442: LD_INT 112
7444: PUSH
7445: LD_INT 116
7447: PUSH
7448: LD_INT 117
7450: PUSH
7451: LD_INT 118
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: ST_TO_ADDR
7470: GO 9993
7472: LD_INT 7
7474: DOUBLE
7475: EQUAL
7476: IFTRUE 7480
7478: GO 7592
7480: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 4
7491: PUSH
7492: LD_INT 5
7494: PUSH
7495: LD_INT 7
7497: PUSH
7498: LD_INT 11
7500: PUSH
7501: LD_INT 12
7503: PUSH
7504: LD_INT 15
7506: PUSH
7507: LD_INT 16
7509: PUSH
7510: LD_INT 20
7512: PUSH
7513: LD_INT 21
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 23
7521: PUSH
7522: LD_INT 25
7524: PUSH
7525: LD_INT 26
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 101
7546: PUSH
7547: LD_INT 102
7549: PUSH
7550: LD_INT 103
7552: PUSH
7553: LD_INT 105
7555: PUSH
7556: LD_INT 106
7558: PUSH
7559: LD_INT 108
7561: PUSH
7562: LD_INT 112
7564: PUSH
7565: LD_INT 116
7567: PUSH
7568: LD_INT 117
7570: PUSH
7571: LD_INT 118
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: ST_TO_ADDR
7590: GO 9993
7592: LD_INT 8
7594: DOUBLE
7595: EQUAL
7596: IFTRUE 7600
7598: GO 7740
7600: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 4
7611: PUSH
7612: LD_INT 5
7614: PUSH
7615: LD_INT 6
7617: PUSH
7618: LD_INT 7
7620: PUSH
7621: LD_INT 8
7623: PUSH
7624: LD_INT 11
7626: PUSH
7627: LD_INT 12
7629: PUSH
7630: LD_INT 15
7632: PUSH
7633: LD_INT 16
7635: PUSH
7636: LD_INT 20
7638: PUSH
7639: LD_INT 21
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_INT 23
7647: PUSH
7648: LD_INT 25
7650: PUSH
7651: LD_INT 26
7653: PUSH
7654: LD_INT 30
7656: PUSH
7657: LD_INT 31
7659: PUSH
7660: LD_INT 32
7662: PUSH
7663: LD_INT 36
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 101
7690: PUSH
7691: LD_INT 102
7693: PUSH
7694: LD_INT 103
7696: PUSH
7697: LD_INT 105
7699: PUSH
7700: LD_INT 106
7702: PUSH
7703: LD_INT 108
7705: PUSH
7706: LD_INT 109
7708: PUSH
7709: LD_INT 112
7711: PUSH
7712: LD_INT 116
7714: PUSH
7715: LD_INT 117
7717: PUSH
7718: LD_INT 118
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: ST_TO_ADDR
7738: GO 9993
7740: LD_INT 9
7742: DOUBLE
7743: EQUAL
7744: IFTRUE 7748
7746: GO 7896
7748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7749: LD_ADDR_VAR 0 2
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 4
7759: PUSH
7760: LD_INT 5
7762: PUSH
7763: LD_INT 6
7765: PUSH
7766: LD_INT 7
7768: PUSH
7769: LD_INT 8
7771: PUSH
7772: LD_INT 11
7774: PUSH
7775: LD_INT 12
7777: PUSH
7778: LD_INT 15
7780: PUSH
7781: LD_INT 16
7783: PUSH
7784: LD_INT 20
7786: PUSH
7787: LD_INT 21
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 23
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 26
7801: PUSH
7802: LD_INT 28
7804: PUSH
7805: LD_INT 30
7807: PUSH
7808: LD_INT 31
7810: PUSH
7811: LD_INT 32
7813: PUSH
7814: LD_INT 36
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 101
7842: PUSH
7843: LD_INT 102
7845: PUSH
7846: LD_INT 103
7848: PUSH
7849: LD_INT 105
7851: PUSH
7852: LD_INT 106
7854: PUSH
7855: LD_INT 108
7857: PUSH
7858: LD_INT 109
7860: PUSH
7861: LD_INT 112
7863: PUSH
7864: LD_INT 114
7866: PUSH
7867: LD_INT 116
7869: PUSH
7870: LD_INT 117
7872: PUSH
7873: LD_INT 118
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 9993
7896: LD_INT 10
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 8100
7904: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7905: LD_ADDR_VAR 0 2
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 4
7915: PUSH
7916: LD_INT 5
7918: PUSH
7919: LD_INT 6
7921: PUSH
7922: LD_INT 7
7924: PUSH
7925: LD_INT 8
7927: PUSH
7928: LD_INT 9
7930: PUSH
7931: LD_INT 10
7933: PUSH
7934: LD_INT 11
7936: PUSH
7937: LD_INT 12
7939: PUSH
7940: LD_INT 13
7942: PUSH
7943: LD_INT 14
7945: PUSH
7946: LD_INT 15
7948: PUSH
7949: LD_INT 16
7951: PUSH
7952: LD_INT 17
7954: PUSH
7955: LD_INT 18
7957: PUSH
7958: LD_INT 19
7960: PUSH
7961: LD_INT 20
7963: PUSH
7964: LD_INT 21
7966: PUSH
7967: LD_INT 22
7969: PUSH
7970: LD_INT 23
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: LD_INT 25
7978: PUSH
7979: LD_INT 26
7981: PUSH
7982: LD_INT 28
7984: PUSH
7985: LD_INT 30
7987: PUSH
7988: LD_INT 31
7990: PUSH
7991: LD_INT 32
7993: PUSH
7994: LD_INT 36
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 101
8030: PUSH
8031: LD_INT 102
8033: PUSH
8034: LD_INT 103
8036: PUSH
8037: LD_INT 104
8039: PUSH
8040: LD_INT 105
8042: PUSH
8043: LD_INT 106
8045: PUSH
8046: LD_INT 107
8048: PUSH
8049: LD_INT 108
8051: PUSH
8052: LD_INT 109
8054: PUSH
8055: LD_INT 110
8057: PUSH
8058: LD_INT 111
8060: PUSH
8061: LD_INT 112
8063: PUSH
8064: LD_INT 114
8066: PUSH
8067: LD_INT 116
8069: PUSH
8070: LD_INT 117
8072: PUSH
8073: LD_INT 118
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: ST_TO_ADDR
8098: GO 9993
8100: LD_INT 11
8102: DOUBLE
8103: EQUAL
8104: IFTRUE 8108
8106: GO 8312
8108: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: LD_INT 6
8128: PUSH
8129: LD_INT 7
8131: PUSH
8132: LD_INT 8
8134: PUSH
8135: LD_INT 9
8137: PUSH
8138: LD_INT 10
8140: PUSH
8141: LD_INT 11
8143: PUSH
8144: LD_INT 12
8146: PUSH
8147: LD_INT 13
8149: PUSH
8150: LD_INT 14
8152: PUSH
8153: LD_INT 15
8155: PUSH
8156: LD_INT 16
8158: PUSH
8159: LD_INT 17
8161: PUSH
8162: LD_INT 18
8164: PUSH
8165: LD_INT 19
8167: PUSH
8168: LD_INT 20
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 23
8179: PUSH
8180: LD_INT 24
8182: PUSH
8183: LD_INT 25
8185: PUSH
8186: LD_INT 26
8188: PUSH
8189: LD_INT 28
8191: PUSH
8192: LD_INT 30
8194: PUSH
8195: LD_INT 31
8197: PUSH
8198: LD_INT 32
8200: PUSH
8201: LD_INT 34
8203: PUSH
8204: LD_INT 36
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 101
8242: PUSH
8243: LD_INT 102
8245: PUSH
8246: LD_INT 103
8248: PUSH
8249: LD_INT 104
8251: PUSH
8252: LD_INT 105
8254: PUSH
8255: LD_INT 106
8257: PUSH
8258: LD_INT 107
8260: PUSH
8261: LD_INT 108
8263: PUSH
8264: LD_INT 109
8266: PUSH
8267: LD_INT 110
8269: PUSH
8270: LD_INT 111
8272: PUSH
8273: LD_INT 112
8275: PUSH
8276: LD_INT 114
8278: PUSH
8279: LD_INT 116
8281: PUSH
8282: LD_INT 117
8284: PUSH
8285: LD_INT 118
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: ST_TO_ADDR
8310: GO 9993
8312: LD_INT 12
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8320
8318: GO 8540
8320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8321: LD_ADDR_VAR 0 2
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: LD_INT 4
8337: PUSH
8338: LD_INT 5
8340: PUSH
8341: LD_INT 6
8343: PUSH
8344: LD_INT 7
8346: PUSH
8347: LD_INT 8
8349: PUSH
8350: LD_INT 9
8352: PUSH
8353: LD_INT 10
8355: PUSH
8356: LD_INT 11
8358: PUSH
8359: LD_INT 12
8361: PUSH
8362: LD_INT 13
8364: PUSH
8365: LD_INT 14
8367: PUSH
8368: LD_INT 15
8370: PUSH
8371: LD_INT 16
8373: PUSH
8374: LD_INT 17
8376: PUSH
8377: LD_INT 18
8379: PUSH
8380: LD_INT 19
8382: PUSH
8383: LD_INT 20
8385: PUSH
8386: LD_INT 21
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 23
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 25
8400: PUSH
8401: LD_INT 26
8403: PUSH
8404: LD_INT 27
8406: PUSH
8407: LD_INT 28
8409: PUSH
8410: LD_INT 30
8412: PUSH
8413: LD_INT 31
8415: PUSH
8416: LD_INT 32
8418: PUSH
8419: LD_INT 33
8421: PUSH
8422: LD_INT 34
8424: PUSH
8425: LD_INT 36
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 101
8466: PUSH
8467: LD_INT 102
8469: PUSH
8470: LD_INT 103
8472: PUSH
8473: LD_INT 104
8475: PUSH
8476: LD_INT 105
8478: PUSH
8479: LD_INT 106
8481: PUSH
8482: LD_INT 107
8484: PUSH
8485: LD_INT 108
8487: PUSH
8488: LD_INT 109
8490: PUSH
8491: LD_INT 110
8493: PUSH
8494: LD_INT 111
8496: PUSH
8497: LD_INT 112
8499: PUSH
8500: LD_INT 113
8502: PUSH
8503: LD_INT 114
8505: PUSH
8506: LD_INT 116
8508: PUSH
8509: LD_INT 117
8511: PUSH
8512: LD_INT 118
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: ST_TO_ADDR
8538: GO 9993
8540: LD_INT 13
8542: DOUBLE
8543: EQUAL
8544: IFTRUE 8548
8546: GO 8756
8548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8549: LD_ADDR_VAR 0 2
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: LD_INT 8
8571: PUSH
8572: LD_INT 9
8574: PUSH
8575: LD_INT 10
8577: PUSH
8578: LD_INT 11
8580: PUSH
8581: LD_INT 12
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 30
8631: PUSH
8632: LD_INT 31
8634: PUSH
8635: LD_INT 32
8637: PUSH
8638: LD_INT 33
8640: PUSH
8641: LD_INT 34
8643: PUSH
8644: LD_INT 36
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 101
8682: PUSH
8683: LD_INT 102
8685: PUSH
8686: LD_INT 103
8688: PUSH
8689: LD_INT 104
8691: PUSH
8692: LD_INT 105
8694: PUSH
8695: LD_INT 106
8697: PUSH
8698: LD_INT 107
8700: PUSH
8701: LD_INT 108
8703: PUSH
8704: LD_INT 109
8706: PUSH
8707: LD_INT 110
8709: PUSH
8710: LD_INT 111
8712: PUSH
8713: LD_INT 112
8715: PUSH
8716: LD_INT 113
8718: PUSH
8719: LD_INT 114
8721: PUSH
8722: LD_INT 116
8724: PUSH
8725: LD_INT 117
8727: PUSH
8728: LD_INT 118
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: ST_TO_ADDR
8754: GO 9993
8756: LD_INT 14
8758: DOUBLE
8759: EQUAL
8760: IFTRUE 8764
8762: GO 8988
8764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: LD_INT 1
8772: PUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 3
8778: PUSH
8779: LD_INT 4
8781: PUSH
8782: LD_INT 5
8784: PUSH
8785: LD_INT 6
8787: PUSH
8788: LD_INT 7
8790: PUSH
8791: LD_INT 8
8793: PUSH
8794: LD_INT 9
8796: PUSH
8797: LD_INT 10
8799: PUSH
8800: LD_INT 11
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: LD_INT 13
8808: PUSH
8809: LD_INT 14
8811: PUSH
8812: LD_INT 15
8814: PUSH
8815: LD_INT 16
8817: PUSH
8818: LD_INT 17
8820: PUSH
8821: LD_INT 18
8823: PUSH
8824: LD_INT 19
8826: PUSH
8827: LD_INT 20
8829: PUSH
8830: LD_INT 21
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 23
8838: PUSH
8839: LD_INT 24
8841: PUSH
8842: LD_INT 25
8844: PUSH
8845: LD_INT 26
8847: PUSH
8848: LD_INT 27
8850: PUSH
8851: LD_INT 28
8853: PUSH
8854: LD_INT 29
8856: PUSH
8857: LD_INT 30
8859: PUSH
8860: LD_INT 31
8862: PUSH
8863: LD_INT 32
8865: PUSH
8866: LD_INT 33
8868: PUSH
8869: LD_INT 34
8871: PUSH
8872: LD_INT 36
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 101
8914: PUSH
8915: LD_INT 102
8917: PUSH
8918: LD_INT 103
8920: PUSH
8921: LD_INT 104
8923: PUSH
8924: LD_INT 105
8926: PUSH
8927: LD_INT 106
8929: PUSH
8930: LD_INT 107
8932: PUSH
8933: LD_INT 108
8935: PUSH
8936: LD_INT 109
8938: PUSH
8939: LD_INT 110
8941: PUSH
8942: LD_INT 111
8944: PUSH
8945: LD_INT 112
8947: PUSH
8948: LD_INT 113
8950: PUSH
8951: LD_INT 114
8953: PUSH
8954: LD_INT 116
8956: PUSH
8957: LD_INT 117
8959: PUSH
8960: LD_INT 118
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: ST_TO_ADDR
8986: GO 9993
8988: LD_INT 15
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9220
8996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_INT 1
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: LD_INT 4
9013: PUSH
9014: LD_INT 5
9016: PUSH
9017: LD_INT 6
9019: PUSH
9020: LD_INT 7
9022: PUSH
9023: LD_INT 8
9025: PUSH
9026: LD_INT 9
9028: PUSH
9029: LD_INT 10
9031: PUSH
9032: LD_INT 11
9034: PUSH
9035: LD_INT 12
9037: PUSH
9038: LD_INT 13
9040: PUSH
9041: LD_INT 14
9043: PUSH
9044: LD_INT 15
9046: PUSH
9047: LD_INT 16
9049: PUSH
9050: LD_INT 17
9052: PUSH
9053: LD_INT 18
9055: PUSH
9056: LD_INT 19
9058: PUSH
9059: LD_INT 20
9061: PUSH
9062: LD_INT 21
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_INT 23
9070: PUSH
9071: LD_INT 24
9073: PUSH
9074: LD_INT 25
9076: PUSH
9077: LD_INT 26
9079: PUSH
9080: LD_INT 27
9082: PUSH
9083: LD_INT 28
9085: PUSH
9086: LD_INT 29
9088: PUSH
9089: LD_INT 30
9091: PUSH
9092: LD_INT 31
9094: PUSH
9095: LD_INT 32
9097: PUSH
9098: LD_INT 33
9100: PUSH
9101: LD_INT 34
9103: PUSH
9104: LD_INT 36
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 101
9146: PUSH
9147: LD_INT 102
9149: PUSH
9150: LD_INT 103
9152: PUSH
9153: LD_INT 104
9155: PUSH
9156: LD_INT 105
9158: PUSH
9159: LD_INT 106
9161: PUSH
9162: LD_INT 107
9164: PUSH
9165: LD_INT 108
9167: PUSH
9168: LD_INT 109
9170: PUSH
9171: LD_INT 110
9173: PUSH
9174: LD_INT 111
9176: PUSH
9177: LD_INT 112
9179: PUSH
9180: LD_INT 113
9182: PUSH
9183: LD_INT 114
9185: PUSH
9186: LD_INT 116
9188: PUSH
9189: LD_INT 117
9191: PUSH
9192: LD_INT 118
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: ST_TO_ADDR
9218: GO 9993
9220: LD_INT 16
9222: DOUBLE
9223: EQUAL
9224: IFTRUE 9228
9226: GO 9364
9228: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 7
9245: PUSH
9246: LD_INT 11
9248: PUSH
9249: LD_INT 12
9251: PUSH
9252: LD_INT 15
9254: PUSH
9255: LD_INT 16
9257: PUSH
9258: LD_INT 20
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 23
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: LD_INT 26
9275: PUSH
9276: LD_INT 30
9278: PUSH
9279: LD_INT 31
9281: PUSH
9282: LD_INT 32
9284: PUSH
9285: LD_INT 33
9287: PUSH
9288: LD_INT 34
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 101
9314: PUSH
9315: LD_INT 102
9317: PUSH
9318: LD_INT 103
9320: PUSH
9321: LD_INT 106
9323: PUSH
9324: LD_INT 108
9326: PUSH
9327: LD_INT 112
9329: PUSH
9330: LD_INT 113
9332: PUSH
9333: LD_INT 114
9335: PUSH
9336: LD_INT 116
9338: PUSH
9339: LD_INT 117
9341: PUSH
9342: LD_INT 118
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: ST_TO_ADDR
9362: GO 9993
9364: LD_INT 17
9366: DOUBLE
9367: EQUAL
9368: IFTRUE 9372
9370: GO 9596
9372: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9373: LD_ADDR_VAR 0 2
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: LD_INT 4
9389: PUSH
9390: LD_INT 5
9392: PUSH
9393: LD_INT 6
9395: PUSH
9396: LD_INT 7
9398: PUSH
9399: LD_INT 8
9401: PUSH
9402: LD_INT 9
9404: PUSH
9405: LD_INT 10
9407: PUSH
9408: LD_INT 11
9410: PUSH
9411: LD_INT 12
9413: PUSH
9414: LD_INT 13
9416: PUSH
9417: LD_INT 14
9419: PUSH
9420: LD_INT 15
9422: PUSH
9423: LD_INT 16
9425: PUSH
9426: LD_INT 17
9428: PUSH
9429: LD_INT 18
9431: PUSH
9432: LD_INT 19
9434: PUSH
9435: LD_INT 20
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 22
9443: PUSH
9444: LD_INT 23
9446: PUSH
9447: LD_INT 24
9449: PUSH
9450: LD_INT 25
9452: PUSH
9453: LD_INT 26
9455: PUSH
9456: LD_INT 27
9458: PUSH
9459: LD_INT 28
9461: PUSH
9462: LD_INT 29
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 31
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: LD_INT 33
9476: PUSH
9477: LD_INT 34
9479: PUSH
9480: LD_INT 36
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 101
9522: PUSH
9523: LD_INT 102
9525: PUSH
9526: LD_INT 103
9528: PUSH
9529: LD_INT 104
9531: PUSH
9532: LD_INT 105
9534: PUSH
9535: LD_INT 106
9537: PUSH
9538: LD_INT 107
9540: PUSH
9541: LD_INT 108
9543: PUSH
9544: LD_INT 109
9546: PUSH
9547: LD_INT 110
9549: PUSH
9550: LD_INT 111
9552: PUSH
9553: LD_INT 112
9555: PUSH
9556: LD_INT 113
9558: PUSH
9559: LD_INT 114
9561: PUSH
9562: LD_INT 116
9564: PUSH
9565: LD_INT 117
9567: PUSH
9568: LD_INT 118
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: ST_TO_ADDR
9594: GO 9993
9596: LD_INT 18
9598: DOUBLE
9599: EQUAL
9600: IFTRUE 9604
9602: GO 9752
9604: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9605: LD_ADDR_VAR 0 2
9609: PUSH
9610: LD_INT 2
9612: PUSH
9613: LD_INT 4
9615: PUSH
9616: LD_INT 5
9618: PUSH
9619: LD_INT 7
9621: PUSH
9622: LD_INT 11
9624: PUSH
9625: LD_INT 12
9627: PUSH
9628: LD_INT 15
9630: PUSH
9631: LD_INT 16
9633: PUSH
9634: LD_INT 20
9636: PUSH
9637: LD_INT 21
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 23
9645: PUSH
9646: LD_INT 25
9648: PUSH
9649: LD_INT 26
9651: PUSH
9652: LD_INT 30
9654: PUSH
9655: LD_INT 31
9657: PUSH
9658: LD_INT 32
9660: PUSH
9661: LD_INT 33
9663: PUSH
9664: LD_INT 34
9666: PUSH
9667: LD_INT 35
9669: PUSH
9670: LD_INT 36
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 101
9698: PUSH
9699: LD_INT 102
9701: PUSH
9702: LD_INT 103
9704: PUSH
9705: LD_INT 106
9707: PUSH
9708: LD_INT 108
9710: PUSH
9711: LD_INT 112
9713: PUSH
9714: LD_INT 113
9716: PUSH
9717: LD_INT 114
9719: PUSH
9720: LD_INT 115
9722: PUSH
9723: LD_INT 116
9725: PUSH
9726: LD_INT 117
9728: PUSH
9729: LD_INT 118
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: ST_TO_ADDR
9750: GO 9993
9752: LD_INT 19
9754: DOUBLE
9755: EQUAL
9756: IFTRUE 9760
9758: GO 9992
9760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9761: LD_ADDR_VAR 0 2
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 4
9777: PUSH
9778: LD_INT 5
9780: PUSH
9781: LD_INT 6
9783: PUSH
9784: LD_INT 7
9786: PUSH
9787: LD_INT 8
9789: PUSH
9790: LD_INT 9
9792: PUSH
9793: LD_INT 10
9795: PUSH
9796: LD_INT 11
9798: PUSH
9799: LD_INT 12
9801: PUSH
9802: LD_INT 13
9804: PUSH
9805: LD_INT 14
9807: PUSH
9808: LD_INT 15
9810: PUSH
9811: LD_INT 16
9813: PUSH
9814: LD_INT 17
9816: PUSH
9817: LD_INT 18
9819: PUSH
9820: LD_INT 19
9822: PUSH
9823: LD_INT 20
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_INT 23
9834: PUSH
9835: LD_INT 24
9837: PUSH
9838: LD_INT 25
9840: PUSH
9841: LD_INT 26
9843: PUSH
9844: LD_INT 27
9846: PUSH
9847: LD_INT 28
9849: PUSH
9850: LD_INT 29
9852: PUSH
9853: LD_INT 30
9855: PUSH
9856: LD_INT 31
9858: PUSH
9859: LD_INT 32
9861: PUSH
9862: LD_INT 33
9864: PUSH
9865: LD_INT 34
9867: PUSH
9868: LD_INT 35
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 101
9914: PUSH
9915: LD_INT 102
9917: PUSH
9918: LD_INT 103
9920: PUSH
9921: LD_INT 104
9923: PUSH
9924: LD_INT 105
9926: PUSH
9927: LD_INT 106
9929: PUSH
9930: LD_INT 107
9932: PUSH
9933: LD_INT 108
9935: PUSH
9936: LD_INT 109
9938: PUSH
9939: LD_INT 110
9941: PUSH
9942: LD_INT 111
9944: PUSH
9945: LD_INT 112
9947: PUSH
9948: LD_INT 113
9950: PUSH
9951: LD_INT 114
9953: PUSH
9954: LD_INT 115
9956: PUSH
9957: LD_INT 116
9959: PUSH
9960: LD_INT 117
9962: PUSH
9963: LD_INT 118
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: ST_TO_ADDR
9990: GO 9993
9992: POP
// end else
9993: GO 10224
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9995: LD_ADDR_VAR 0 2
9999: PUSH
10000: LD_INT 1
10002: PUSH
10003: LD_INT 2
10005: PUSH
10006: LD_INT 3
10008: PUSH
10009: LD_INT 4
10011: PUSH
10012: LD_INT 5
10014: PUSH
10015: LD_INT 6
10017: PUSH
10018: LD_INT 7
10020: PUSH
10021: LD_INT 8
10023: PUSH
10024: LD_INT 9
10026: PUSH
10027: LD_INT 10
10029: PUSH
10030: LD_INT 11
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: LD_INT 13
10038: PUSH
10039: LD_INT 14
10041: PUSH
10042: LD_INT 15
10044: PUSH
10045: LD_INT 16
10047: PUSH
10048: LD_INT 17
10050: PUSH
10051: LD_INT 18
10053: PUSH
10054: LD_INT 19
10056: PUSH
10057: LD_INT 20
10059: PUSH
10060: LD_INT 21
10062: PUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 23
10068: PUSH
10069: LD_INT 24
10071: PUSH
10072: LD_INT 25
10074: PUSH
10075: LD_INT 26
10077: PUSH
10078: LD_INT 27
10080: PUSH
10081: LD_INT 28
10083: PUSH
10084: LD_INT 29
10086: PUSH
10087: LD_INT 30
10089: PUSH
10090: LD_INT 31
10092: PUSH
10093: LD_INT 32
10095: PUSH
10096: LD_INT 33
10098: PUSH
10099: LD_INT 34
10101: PUSH
10102: LD_INT 35
10104: PUSH
10105: LD_INT 36
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 101
10148: PUSH
10149: LD_INT 102
10151: PUSH
10152: LD_INT 103
10154: PUSH
10155: LD_INT 104
10157: PUSH
10158: LD_INT 105
10160: PUSH
10161: LD_INT 106
10163: PUSH
10164: LD_INT 107
10166: PUSH
10167: LD_INT 108
10169: PUSH
10170: LD_INT 109
10172: PUSH
10173: LD_INT 110
10175: PUSH
10176: LD_INT 111
10178: PUSH
10179: LD_INT 112
10181: PUSH
10182: LD_INT 113
10184: PUSH
10185: LD_INT 114
10187: PUSH
10188: LD_INT 115
10190: PUSH
10191: LD_INT 116
10193: PUSH
10194: LD_INT 117
10196: PUSH
10197: LD_INT 118
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: ST_TO_ADDR
// if result then
10224: LD_VAR 0 2
10228: IFFALSE 11014
// begin normal :=  ;
10230: LD_ADDR_VAR 0 5
10234: PUSH
10235: LD_STRING 
10237: ST_TO_ADDR
// hardcore :=  ;
10238: LD_ADDR_VAR 0 6
10242: PUSH
10243: LD_STRING 
10245: ST_TO_ADDR
// active :=  ;
10246: LD_ADDR_VAR 0 7
10250: PUSH
10251: LD_STRING 
10253: ST_TO_ADDR
// for i = 1 to normalCounter do
10254: LD_ADDR_VAR 0 8
10258: PUSH
10259: DOUBLE
10260: LD_INT 1
10262: DEC
10263: ST_TO_ADDR
10264: LD_EXP 17
10268: PUSH
10269: FOR_TO
10270: IFFALSE 10371
// begin tmp := 0 ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_STRING 0
10279: ST_TO_ADDR
// if result [ 1 ] then
10280: LD_VAR 0 2
10284: PUSH
10285: LD_INT 1
10287: ARRAY
10288: IFFALSE 10353
// if result [ 1 ] [ 1 ] = i then
10290: LD_VAR 0 2
10294: PUSH
10295: LD_INT 1
10297: ARRAY
10298: PUSH
10299: LD_INT 1
10301: ARRAY
10302: PUSH
10303: LD_VAR 0 8
10307: EQUAL
10308: IFFALSE 10353
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10310: LD_ADDR_VAR 0 2
10314: PUSH
10315: LD_VAR 0 2
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: LD_VAR 0 2
10327: PUSH
10328: LD_INT 1
10330: ARRAY
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 3
10339: PPUSH
10340: CALL_OW 1
10344: ST_TO_ADDR
// tmp := 1 ;
10345: LD_ADDR_VAR 0 3
10349: PUSH
10350: LD_STRING 1
10352: ST_TO_ADDR
// end ; normal := normal & tmp ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: LD_VAR 0 5
10362: PUSH
10363: LD_VAR 0 3
10367: STR
10368: ST_TO_ADDR
// end ;
10369: GO 10269
10371: POP
10372: POP
// for i = 1 to hardcoreCounter do
10373: LD_ADDR_VAR 0 8
10377: PUSH
10378: DOUBLE
10379: LD_INT 1
10381: DEC
10382: ST_TO_ADDR
10383: LD_EXP 18
10387: PUSH
10388: FOR_TO
10389: IFFALSE 10494
// begin tmp := 0 ;
10391: LD_ADDR_VAR 0 3
10395: PUSH
10396: LD_STRING 0
10398: ST_TO_ADDR
// if result [ 2 ] then
10399: LD_VAR 0 2
10403: PUSH
10404: LD_INT 2
10406: ARRAY
10407: IFFALSE 10476
// if result [ 2 ] [ 1 ] = 100 + i then
10409: LD_VAR 0 2
10413: PUSH
10414: LD_INT 2
10416: ARRAY
10417: PUSH
10418: LD_INT 1
10420: ARRAY
10421: PUSH
10422: LD_INT 100
10424: PUSH
10425: LD_VAR 0 8
10429: PLUS
10430: EQUAL
10431: IFFALSE 10476
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_VAR 0 2
10442: PPUSH
10443: LD_INT 2
10445: PPUSH
10446: LD_VAR 0 2
10450: PUSH
10451: LD_INT 2
10453: ARRAY
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 3
10462: PPUSH
10463: CALL_OW 1
10467: ST_TO_ADDR
// tmp := 1 ;
10468: LD_ADDR_VAR 0 3
10472: PUSH
10473: LD_STRING 1
10475: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10476: LD_ADDR_VAR 0 6
10480: PUSH
10481: LD_VAR 0 6
10485: PUSH
10486: LD_VAR 0 3
10490: STR
10491: ST_TO_ADDR
// end ;
10492: GO 10388
10494: POP
10495: POP
// if isGameLoad then
10496: LD_VAR 0 1
10500: IFFALSE 10975
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_EXP 21
10511: PUSH
10512: LD_EXP 20
10516: PUSH
10517: LD_EXP 22
10521: PUSH
10522: LD_EXP 19
10526: PUSH
10527: LD_EXP 23
10531: PUSH
10532: LD_EXP 24
10536: PUSH
10537: LD_EXP 25
10541: PUSH
10542: LD_EXP 26
10546: PUSH
10547: LD_EXP 27
10551: PUSH
10552: LD_EXP 28
10556: PUSH
10557: LD_EXP 29
10561: PUSH
10562: LD_EXP 30
10566: PUSH
10567: LD_EXP 31
10571: PUSH
10572: LD_EXP 32
10576: PUSH
10577: LD_EXP 40
10581: PUSH
10582: LD_EXP 41
10586: PUSH
10587: LD_EXP 42
10591: PUSH
10592: LD_EXP 43
10596: PUSH
10597: LD_EXP 45
10601: PUSH
10602: LD_EXP 46
10606: PUSH
10607: LD_EXP 47
10611: PUSH
10612: LD_EXP 50
10616: PUSH
10617: LD_EXP 52
10621: PUSH
10622: LD_EXP 53
10626: PUSH
10627: LD_EXP 54
10631: PUSH
10632: LD_EXP 56
10636: PUSH
10637: LD_EXP 57
10641: PUSH
10642: LD_EXP 60
10646: PUSH
10647: LD_EXP 61
10651: PUSH
10652: LD_EXP 62
10656: PUSH
10657: LD_EXP 63
10661: PUSH
10662: LD_EXP 64
10666: PUSH
10667: LD_EXP 65
10671: PUSH
10672: LD_EXP 66
10676: PUSH
10677: LD_EXP 67
10681: PUSH
10682: LD_EXP 68
10686: PUSH
10687: LD_EXP 33
10691: PUSH
10692: LD_EXP 34
10696: PUSH
10697: LD_EXP 37
10701: PUSH
10702: LD_EXP 38
10706: PUSH
10707: LD_EXP 39
10711: PUSH
10712: LD_EXP 35
10716: PUSH
10717: LD_EXP 36
10721: PUSH
10722: LD_EXP 44
10726: PUSH
10727: LD_EXP 48
10731: PUSH
10732: LD_EXP 49
10736: PUSH
10737: LD_EXP 51
10741: PUSH
10742: LD_EXP 55
10746: PUSH
10747: LD_EXP 58
10751: PUSH
10752: LD_EXP 59
10756: PUSH
10757: LD_EXP 69
10761: PUSH
10762: LD_EXP 70
10766: PUSH
10767: LD_EXP 71
10771: PUSH
10772: LD_EXP 72
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: ST_TO_ADDR
// tmp :=  ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: LD_STRING 
10840: ST_TO_ADDR
// for i = 1 to normalCounter do
10841: LD_ADDR_VAR 0 8
10845: PUSH
10846: DOUBLE
10847: LD_INT 1
10849: DEC
10850: ST_TO_ADDR
10851: LD_EXP 17
10855: PUSH
10856: FOR_TO
10857: IFFALSE 10893
// begin if flags [ i ] then
10859: LD_VAR 0 4
10863: PUSH
10864: LD_VAR 0 8
10868: ARRAY
10869: IFFALSE 10891
// tmp := tmp & i & ; ;
10871: LD_ADDR_VAR 0 3
10875: PUSH
10876: LD_VAR 0 3
10880: PUSH
10881: LD_VAR 0 8
10885: STR
10886: PUSH
10887: LD_STRING ;
10889: STR
10890: ST_TO_ADDR
// end ;
10891: GO 10856
10893: POP
10894: POP
// for i = 1 to hardcoreCounter do
10895: LD_ADDR_VAR 0 8
10899: PUSH
10900: DOUBLE
10901: LD_INT 1
10903: DEC
10904: ST_TO_ADDR
10905: LD_EXP 18
10909: PUSH
10910: FOR_TO
10911: IFFALSE 10957
// begin if flags [ normalCounter + i ] then
10913: LD_VAR 0 4
10917: PUSH
10918: LD_EXP 17
10922: PUSH
10923: LD_VAR 0 8
10927: PLUS
10928: ARRAY
10929: IFFALSE 10955
// tmp := tmp & ( 100 + i ) & ; ;
10931: LD_ADDR_VAR 0 3
10935: PUSH
10936: LD_VAR 0 3
10940: PUSH
10941: LD_INT 100
10943: PUSH
10944: LD_VAR 0 8
10948: PLUS
10949: STR
10950: PUSH
10951: LD_STRING ;
10953: STR
10954: ST_TO_ADDR
// end ;
10955: GO 10910
10957: POP
10958: POP
// if tmp then
10959: LD_VAR 0 3
10963: IFFALSE 10975
// active := tmp ;
10965: LD_ADDR_VAR 0 7
10969: PUSH
10970: LD_VAR 0 3
10974: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10975: LD_STRING getStreamItemsFromMission("
10977: PUSH
10978: LD_VAR 0 5
10982: STR
10983: PUSH
10984: LD_STRING ","
10986: STR
10987: PUSH
10988: LD_VAR 0 6
10992: STR
10993: PUSH
10994: LD_STRING ","
10996: STR
10997: PUSH
10998: LD_VAR 0 7
11002: STR
11003: PUSH
11004: LD_STRING ")
11006: STR
11007: PPUSH
11008: CALL_OW 559
// end else
11012: GO 11021
// ToLua ( getStreamItemsFromMission("","","") ) ;
11014: LD_STRING getStreamItemsFromMission("","","")
11016: PPUSH
11017: CALL_OW 559
// end ;
11021: LD_VAR 0 2
11025: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11026: LD_EXP 16
11030: PUSH
11031: LD_EXP 21
11035: AND
11036: IFFALSE 11160
11038: GO 11040
11040: DISABLE
11041: LD_INT 0
11043: PPUSH
11044: PPUSH
// begin enable ;
11045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 22
11053: PUSH
11054: LD_OWVAR 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 34
11068: PUSH
11069: LD_INT 7
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 34
11078: PUSH
11079: LD_INT 45
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 34
11088: PUSH
11089: LD_INT 28
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 34
11098: PUSH
11099: LD_INT 47
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PPUSH
11117: CALL_OW 69
11121: ST_TO_ADDR
// if not tmp then
11122: LD_VAR 0 2
11126: NOT
11127: IFFALSE 11131
// exit ;
11129: GO 11160
// for i in tmp do
11131: LD_ADDR_VAR 0 1
11135: PUSH
11136: LD_VAR 0 2
11140: PUSH
11141: FOR_IN
11142: IFFALSE 11158
// begin SetLives ( i , 0 ) ;
11144: LD_VAR 0 1
11148: PPUSH
11149: LD_INT 0
11151: PPUSH
11152: CALL_OW 234
// end ;
11156: GO 11141
11158: POP
11159: POP
// end ;
11160: PPOPN 2
11162: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11163: LD_EXP 16
11167: PUSH
11168: LD_EXP 22
11172: AND
11173: IFFALSE 11257
11175: GO 11177
11177: DISABLE
11178: LD_INT 0
11180: PPUSH
11181: PPUSH
// begin enable ;
11182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11183: LD_ADDR_VAR 0 2
11187: PUSH
11188: LD_INT 22
11190: PUSH
11191: LD_OWVAR 2
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 32
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: ST_TO_ADDR
// if not tmp then
11219: LD_VAR 0 2
11223: NOT
11224: IFFALSE 11228
// exit ;
11226: GO 11257
// for i in tmp do
11228: LD_ADDR_VAR 0 1
11232: PUSH
11233: LD_VAR 0 2
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11255
// begin SetLives ( i , 0 ) ;
11241: LD_VAR 0 1
11245: PPUSH
11246: LD_INT 0
11248: PPUSH
11249: CALL_OW 234
// end ;
11253: GO 11238
11255: POP
11256: POP
// end ;
11257: PPOPN 2
11259: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11260: LD_EXP 16
11264: PUSH
11265: LD_EXP 19
11269: AND
11270: IFFALSE 11363
11272: GO 11274
11274: DISABLE
11275: LD_INT 0
11277: PPUSH
// begin enable ;
11278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_OWVAR 2
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: LD_INT 25
11301: PUSH
11302: LD_INT 5
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 25
11311: PUSH
11312: LD_INT 9
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 25
11321: PUSH
11322: LD_INT 8
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: PUSH
11344: FOR_IN
11345: IFFALSE 11361
// begin SetClass ( i , 1 ) ;
11347: LD_VAR 0 1
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 336
// end ;
11359: GO 11344
11361: POP
11362: POP
// end ;
11363: PPOPN 1
11365: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11366: LD_EXP 16
11370: PUSH
11371: LD_EXP 20
11375: AND
11376: PUSH
11377: LD_OWVAR 65
11381: PUSH
11382: LD_INT 7
11384: LESS
11385: AND
11386: IFFALSE 11400
11388: GO 11390
11390: DISABLE
// begin enable ;
11391: ENABLE
// game_speed := 7 ;
11392: LD_ADDR_OWVAR 65
11396: PUSH
11397: LD_INT 7
11399: ST_TO_ADDR
// end ;
11400: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11401: LD_EXP 16
11405: PUSH
11406: LD_EXP 23
11410: AND
11411: IFFALSE 11613
11413: GO 11415
11415: DISABLE
11416: LD_INT 0
11418: PPUSH
11419: PPUSH
11420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_INT 81
11428: PUSH
11429: LD_OWVAR 2
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PPUSH
11452: CALL_OW 69
11456: ST_TO_ADDR
// if not tmp then
11457: LD_VAR 0 3
11461: NOT
11462: IFFALSE 11466
// exit ;
11464: GO 11613
// if tmp > 5 then
11466: LD_VAR 0 3
11470: PUSH
11471: LD_INT 5
11473: GREATER
11474: IFFALSE 11486
// k := 5 else
11476: LD_ADDR_VAR 0 2
11480: PUSH
11481: LD_INT 5
11483: ST_TO_ADDR
11484: GO 11496
// k := tmp ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: LD_VAR 0 3
11495: ST_TO_ADDR
// for i := 1 to k do
11496: LD_ADDR_VAR 0 1
11500: PUSH
11501: DOUBLE
11502: LD_INT 1
11504: DEC
11505: ST_TO_ADDR
11506: LD_VAR 0 2
11510: PUSH
11511: FOR_TO
11512: IFFALSE 11611
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_VAR 0 1
11523: ARRAY
11524: PPUSH
11525: LD_VAR 0 1
11529: PUSH
11530: LD_INT 4
11532: MOD
11533: PUSH
11534: LD_INT 1
11536: PLUS
11537: PPUSH
11538: CALL_OW 259
11542: PUSH
11543: LD_INT 10
11545: LESS
11546: IFFALSE 11609
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11548: LD_VAR 0 3
11552: PUSH
11553: LD_VAR 0 1
11557: ARRAY
11558: PPUSH
11559: LD_VAR 0 1
11563: PUSH
11564: LD_INT 4
11566: MOD
11567: PUSH
11568: LD_INT 1
11570: PLUS
11571: PPUSH
11572: LD_VAR 0 3
11576: PUSH
11577: LD_VAR 0 1
11581: ARRAY
11582: PPUSH
11583: LD_VAR 0 1
11587: PUSH
11588: LD_INT 4
11590: MOD
11591: PUSH
11592: LD_INT 1
11594: PLUS
11595: PPUSH
11596: CALL_OW 259
11600: PUSH
11601: LD_INT 1
11603: PLUS
11604: PPUSH
11605: CALL_OW 237
11609: GO 11511
11611: POP
11612: POP
// end ;
11613: PPOPN 3
11615: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11616: LD_EXP 16
11620: PUSH
11621: LD_EXP 24
11625: AND
11626: IFFALSE 11646
11628: GO 11630
11630: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11631: LD_INT 4
11633: PPUSH
11634: LD_OWVAR 2
11638: PPUSH
11639: LD_INT 0
11641: PPUSH
11642: CALL_OW 324
11646: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11647: LD_EXP 16
11651: PUSH
11652: LD_EXP 53
11656: AND
11657: IFFALSE 11677
11659: GO 11661
11661: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11662: LD_INT 19
11664: PPUSH
11665: LD_OWVAR 2
11669: PPUSH
11670: LD_INT 0
11672: PPUSH
11673: CALL_OW 324
11677: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11678: LD_EXP 16
11682: PUSH
11683: LD_EXP 25
11687: AND
11688: IFFALSE 11790
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
// begin enable ;
11697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_OWVAR 2
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 34
11720: PUSH
11721: LD_INT 11
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 34
11730: PUSH
11731: LD_INT 30
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: ST_TO_ADDR
// if not tmp then
11752: LD_VAR 0 2
11756: NOT
11757: IFFALSE 11761
// exit ;
11759: GO 11790
// for i in tmp do
11761: LD_ADDR_VAR 0 1
11765: PUSH
11766: LD_VAR 0 2
11770: PUSH
11771: FOR_IN
11772: IFFALSE 11788
// begin SetLives ( i , 0 ) ;
11774: LD_VAR 0 1
11778: PPUSH
11779: LD_INT 0
11781: PPUSH
11782: CALL_OW 234
// end ;
11786: GO 11771
11788: POP
11789: POP
// end ;
11790: PPOPN 2
11792: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11793: LD_EXP 16
11797: PUSH
11798: LD_EXP 26
11802: AND
11803: IFFALSE 11823
11805: GO 11807
11807: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11808: LD_INT 32
11810: PPUSH
11811: LD_OWVAR 2
11815: PPUSH
11816: LD_INT 0
11818: PPUSH
11819: CALL_OW 324
11823: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11824: LD_EXP 16
11828: PUSH
11829: LD_EXP 27
11833: AND
11834: IFFALSE 12015
11836: GO 11838
11838: DISABLE
11839: LD_INT 0
11841: PPUSH
11842: PPUSH
11843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_INT 22
11851: PUSH
11852: LD_OWVAR 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 33
11863: PUSH
11864: LD_INT 3
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PPUSH
11875: CALL_OW 69
11879: ST_TO_ADDR
// if not tmp then
11880: LD_VAR 0 2
11884: NOT
11885: IFFALSE 11889
// exit ;
11887: GO 12015
// side := 0 ;
11889: LD_ADDR_VAR 0 3
11893: PUSH
11894: LD_INT 0
11896: ST_TO_ADDR
// for i := 1 to 8 do
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: DOUBLE
11903: LD_INT 1
11905: DEC
11906: ST_TO_ADDR
11907: LD_INT 8
11909: PUSH
11910: FOR_TO
11911: IFFALSE 11959
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11913: LD_OWVAR 2
11917: PUSH
11918: LD_VAR 0 1
11922: NONEQUAL
11923: PUSH
11924: LD_OWVAR 2
11928: PPUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 81
11938: PUSH
11939: LD_INT 2
11941: EQUAL
11942: AND
11943: IFFALSE 11957
// begin side := i ;
11945: LD_ADDR_VAR 0 3
11949: PUSH
11950: LD_VAR 0 1
11954: ST_TO_ADDR
// break ;
11955: GO 11959
// end ;
11957: GO 11910
11959: POP
11960: POP
// if not side then
11961: LD_VAR 0 3
11965: NOT
11966: IFFALSE 11970
// exit ;
11968: GO 12015
// for i := 1 to tmp do
11970: LD_ADDR_VAR 0 1
11974: PUSH
11975: DOUBLE
11976: LD_INT 1
11978: DEC
11979: ST_TO_ADDR
11980: LD_VAR 0 2
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12013
// if Prob ( 60 ) then
11988: LD_INT 60
11990: PPUSH
11991: CALL_OW 13
11995: IFFALSE 12011
// SetSide ( i , side ) ;
11997: LD_VAR 0 1
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: CALL_OW 235
12011: GO 11985
12013: POP
12014: POP
// end ;
12015: PPOPN 3
12017: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12018: LD_EXP 16
12022: PUSH
12023: LD_EXP 29
12027: AND
12028: IFFALSE 12147
12030: GO 12032
12032: DISABLE
12033: LD_INT 0
12035: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_OWVAR 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: LD_INT 23
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12145
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 257
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 3
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: IN
12121: IFFALSE 12143
// SetClass ( un , rand ( 1 , 4 ) ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: LD_INT 4
12133: PPUSH
12134: CALL_OW 12
12138: PPUSH
12139: CALL_OW 336
12143: GO 12090
12145: POP
12146: POP
// end ;
12147: PPOPN 1
12149: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12150: LD_EXP 16
12154: PUSH
12155: LD_EXP 28
12159: AND
12160: IFFALSE 12239
12162: GO 12164
12164: DISABLE
12165: LD_INT 0
12167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12168: LD_ADDR_VAR 0 1
12172: PUSH
12173: LD_INT 22
12175: PUSH
12176: LD_OWVAR 2
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 21
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: ST_TO_ADDR
// if not tmp then
12204: LD_VAR 0 1
12208: NOT
12209: IFFALSE 12213
// exit ;
12211: GO 12239
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12213: LD_VAR 0 1
12217: PUSH
12218: LD_INT 1
12220: PPUSH
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 12
12230: ARRAY
12231: PPUSH
12232: LD_INT 100
12234: PPUSH
12235: CALL_OW 234
// end ;
12239: PPOPN 1
12241: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12242: LD_EXP 16
12246: PUSH
12247: LD_EXP 30
12251: AND
12252: IFFALSE 12350
12254: GO 12256
12256: DISABLE
12257: LD_INT 0
12259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12260: LD_ADDR_VAR 0 1
12264: PUSH
12265: LD_INT 22
12267: PUSH
12268: LD_OWVAR 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: ST_TO_ADDR
// if not tmp then
12296: LD_VAR 0 1
12300: NOT
12301: IFFALSE 12305
// exit ;
12303: GO 12350
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12305: LD_VAR 0 1
12309: PUSH
12310: LD_INT 1
12312: PPUSH
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 12
12322: ARRAY
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: LD_INT 4
12329: PPUSH
12330: CALL_OW 12
12334: PPUSH
12335: LD_INT 3000
12337: PPUSH
12338: LD_INT 9000
12340: PPUSH
12341: CALL_OW 12
12345: PPUSH
12346: CALL_OW 492
// end ;
12350: PPOPN 1
12352: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12353: LD_EXP 16
12357: PUSH
12358: LD_EXP 31
12362: AND
12363: IFFALSE 12383
12365: GO 12367
12367: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12368: LD_INT 1
12370: PPUSH
12371: LD_OWVAR 2
12375: PPUSH
12376: LD_INT 0
12378: PPUSH
12379: CALL_OW 324
12383: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12384: LD_EXP 16
12388: PUSH
12389: LD_EXP 32
12393: AND
12394: IFFALSE 12477
12396: GO 12398
12398: DISABLE
12399: LD_INT 0
12401: PPUSH
12402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12403: LD_ADDR_VAR 0 2
12407: PUSH
12408: LD_INT 22
12410: PUSH
12411: LD_OWVAR 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 21
12422: PUSH
12423: LD_INT 3
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: ST_TO_ADDR
// if not tmp then
12439: LD_VAR 0 2
12443: NOT
12444: IFFALSE 12448
// exit ;
12446: GO 12477
// for i in tmp do
12448: LD_ADDR_VAR 0 1
12452: PUSH
12453: LD_VAR 0 2
12457: PUSH
12458: FOR_IN
12459: IFFALSE 12475
// SetBLevel ( i , 10 ) ;
12461: LD_VAR 0 1
12465: PPUSH
12466: LD_INT 10
12468: PPUSH
12469: CALL_OW 241
12473: GO 12458
12475: POP
12476: POP
// end ;
12477: PPOPN 2
12479: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12480: LD_EXP 16
12484: PUSH
12485: LD_EXP 33
12489: AND
12490: IFFALSE 12601
12492: GO 12494
12494: DISABLE
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
12499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_OWVAR 2
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 25
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PPUSH
12531: CALL_OW 69
12535: ST_TO_ADDR
// if not tmp then
12536: LD_VAR 0 3
12540: NOT
12541: IFFALSE 12545
// exit ;
12543: GO 12601
// un := tmp [ rand ( 1 , tmp ) ] ;
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_VAR 0 3
12554: PUSH
12555: LD_INT 1
12557: PPUSH
12558: LD_VAR 0 3
12562: PPUSH
12563: CALL_OW 12
12567: ARRAY
12568: ST_TO_ADDR
// if Crawls ( un ) then
12569: LD_VAR 0 2
12573: PPUSH
12574: CALL_OW 318
12578: IFFALSE 12589
// ComWalk ( un ) ;
12580: LD_VAR 0 2
12584: PPUSH
12585: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_INT 5
12596: PPUSH
12597: CALL_OW 336
// end ;
12601: PPOPN 3
12603: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12604: LD_EXP 16
12608: PUSH
12609: LD_EXP 34
12613: AND
12614: PUSH
12615: LD_OWVAR 67
12619: PUSH
12620: LD_INT 4
12622: LESS
12623: AND
12624: IFFALSE 12643
12626: GO 12628
12628: DISABLE
// begin Difficulty := Difficulty + 1 ;
12629: LD_ADDR_OWVAR 67
12633: PUSH
12634: LD_OWVAR 67
12638: PUSH
12639: LD_INT 1
12641: PLUS
12642: ST_TO_ADDR
// end ;
12643: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12644: LD_EXP 16
12648: PUSH
12649: LD_EXP 35
12653: AND
12654: IFFALSE 12757
12656: GO 12658
12658: DISABLE
12659: LD_INT 0
12661: PPUSH
// begin for i := 1 to 5 do
12662: LD_ADDR_VAR 0 1
12666: PUSH
12667: DOUBLE
12668: LD_INT 1
12670: DEC
12671: ST_TO_ADDR
12672: LD_INT 5
12674: PUSH
12675: FOR_TO
12676: IFFALSE 12755
// begin uc_nation := nation_nature ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 0
12685: ST_TO_ADDR
// uc_side := 0 ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_INT 0
12693: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12694: LD_ADDR_OWVAR 29
12698: PUSH
12699: LD_INT 12
12701: PUSH
12702: LD_INT 12
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: ST_TO_ADDR
// hc_agressivity := 20 ;
12709: LD_ADDR_OWVAR 35
12713: PUSH
12714: LD_INT 20
12716: ST_TO_ADDR
// hc_class := class_tiger ;
12717: LD_ADDR_OWVAR 28
12721: PUSH
12722: LD_INT 14
12724: ST_TO_ADDR
// hc_gallery :=  ;
12725: LD_ADDR_OWVAR 33
12729: PUSH
12730: LD_STRING 
12732: ST_TO_ADDR
// hc_name :=  ;
12733: LD_ADDR_OWVAR 26
12737: PUSH
12738: LD_STRING 
12740: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12741: CALL_OW 44
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 51
// end ;
12753: GO 12675
12755: POP
12756: POP
// end ;
12757: PPOPN 1
12759: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12760: LD_EXP 16
12764: PUSH
12765: LD_EXP 36
12769: AND
12770: IFFALSE 12779
12772: GO 12774
12774: DISABLE
// StreamSibBomb ;
12775: CALL 12780 0 0
12779: END
// export function StreamSibBomb ; var i , x , y ; begin
12780: LD_INT 0
12782: PPUSH
12783: PPUSH
12784: PPUSH
12785: PPUSH
// result := false ;
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// for i := 1 to 16 do
12794: LD_ADDR_VAR 0 2
12798: PUSH
12799: DOUBLE
12800: LD_INT 1
12802: DEC
12803: ST_TO_ADDR
12804: LD_INT 16
12806: PUSH
12807: FOR_TO
12808: IFFALSE 13007
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12810: LD_ADDR_VAR 0 3
12814: PUSH
12815: LD_INT 10
12817: PUSH
12818: LD_INT 20
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 40
12826: PUSH
12827: LD_INT 50
12829: PUSH
12830: LD_INT 60
12832: PUSH
12833: LD_INT 70
12835: PUSH
12836: LD_INT 80
12838: PUSH
12839: LD_INT 90
12841: PUSH
12842: LD_INT 100
12844: PUSH
12845: LD_INT 110
12847: PUSH
12848: LD_INT 120
12850: PUSH
12851: LD_INT 130
12853: PUSH
12854: LD_INT 140
12856: PUSH
12857: LD_INT 150
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_INT 15
12882: PPUSH
12883: CALL_OW 12
12887: ARRAY
12888: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12889: LD_ADDR_VAR 0 4
12893: PUSH
12894: LD_INT 10
12896: PUSH
12897: LD_INT 20
12899: PUSH
12900: LD_INT 30
12902: PUSH
12903: LD_INT 40
12905: PUSH
12906: LD_INT 50
12908: PUSH
12909: LD_INT 60
12911: PUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 80
12917: PUSH
12918: LD_INT 90
12920: PUSH
12921: LD_INT 100
12923: PUSH
12924: LD_INT 110
12926: PUSH
12927: LD_INT 120
12929: PUSH
12930: LD_INT 130
12932: PUSH
12933: LD_INT 140
12935: PUSH
12936: LD_INT 150
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 1
12958: PPUSH
12959: LD_INT 15
12961: PPUSH
12962: CALL_OW 12
12966: ARRAY
12967: ST_TO_ADDR
// if ValidHex ( x , y ) then
12968: LD_VAR 0 3
12972: PPUSH
12973: LD_VAR 0 4
12977: PPUSH
12978: CALL_OW 488
12982: IFFALSE 13005
// begin result := [ x , y ] ;
12984: LD_ADDR_VAR 0 1
12988: PUSH
12989: LD_VAR 0 3
12993: PUSH
12994: LD_VAR 0 4
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: ST_TO_ADDR
// break ;
13003: GO 13007
// end ; end ;
13005: GO 12807
13007: POP
13008: POP
// if result then
13009: LD_VAR 0 1
13013: IFFALSE 13073
// begin ToLua ( playSibBomb() ) ;
13015: LD_STRING playSibBomb()
13017: PPUSH
13018: CALL_OW 559
// wait ( 0 0$14 ) ;
13022: LD_INT 490
13024: PPUSH
13025: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13029: LD_VAR 0 1
13033: PUSH
13034: LD_INT 1
13036: ARRAY
13037: PPUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 2
13045: ARRAY
13046: PPUSH
13047: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: LD_VAR 0 1
13064: PUSH
13065: LD_INT 2
13067: ARRAY
13068: PPUSH
13069: CALL_OW 429
// end ; end ;
13073: LD_VAR 0 1
13077: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13078: LD_EXP 16
13082: PUSH
13083: LD_EXP 38
13087: AND
13088: IFFALSE 13100
13090: GO 13092
13092: DISABLE
// YouLost (  ) ;
13093: LD_STRING 
13095: PPUSH
13096: CALL_OW 104
13100: END
// every 0 0$1 trigger StreamModeActive and sFog do
13101: LD_EXP 16
13105: PUSH
13106: LD_EXP 37
13110: AND
13111: IFFALSE 13125
13113: GO 13115
13115: DISABLE
// FogOff ( your_side ) ;
13116: LD_OWVAR 2
13120: PPUSH
13121: CALL_OW 344
13125: END
// every 0 0$1 trigger StreamModeActive and sSun do
13126: LD_EXP 16
13130: PUSH
13131: LD_EXP 39
13135: AND
13136: IFFALSE 13164
13138: GO 13140
13140: DISABLE
// begin solar_recharge_percent := 0 ;
13141: LD_ADDR_OWVAR 79
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13149: LD_INT 10500
13151: PPUSH
13152: CALL_OW 67
// solar_recharge_percent := 100 ;
13156: LD_ADDR_OWVAR 79
13160: PUSH
13161: LD_INT 100
13163: ST_TO_ADDR
// end ;
13164: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13165: LD_EXP 16
13169: PUSH
13170: LD_EXP 40
13174: AND
13175: IFFALSE 13414
13177: GO 13179
13179: DISABLE
13180: LD_INT 0
13182: PPUSH
13183: PPUSH
13184: PPUSH
// begin tmp := [ ] ;
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: EMPTY
13191: ST_TO_ADDR
// for i := 1 to 6 do
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: DOUBLE
13198: LD_INT 1
13200: DEC
13201: ST_TO_ADDR
13202: LD_INT 6
13204: PUSH
13205: FOR_TO
13206: IFFALSE 13311
// begin uc_nation := nation_nature ;
13208: LD_ADDR_OWVAR 21
13212: PUSH
13213: LD_INT 0
13215: ST_TO_ADDR
// uc_side := 0 ;
13216: LD_ADDR_OWVAR 20
13220: PUSH
13221: LD_INT 0
13223: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13224: LD_ADDR_OWVAR 29
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 12
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: ST_TO_ADDR
// hc_agressivity := 20 ;
13239: LD_ADDR_OWVAR 35
13243: PUSH
13244: LD_INT 20
13246: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13247: LD_ADDR_OWVAR 28
13251: PUSH
13252: LD_INT 17
13254: ST_TO_ADDR
// hc_gallery :=  ;
13255: LD_ADDR_OWVAR 33
13259: PUSH
13260: LD_STRING 
13262: ST_TO_ADDR
// hc_name :=  ;
13263: LD_ADDR_OWVAR 26
13267: PUSH
13268: LD_STRING 
13270: ST_TO_ADDR
// un := CreateHuman ;
13271: LD_ADDR_VAR 0 2
13275: PUSH
13276: CALL_OW 44
13280: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13281: LD_VAR 0 2
13285: PPUSH
13286: LD_INT 1
13288: PPUSH
13289: CALL_OW 51
// tmp := tmp ^ un ;
13293: LD_ADDR_VAR 0 3
13297: PUSH
13298: LD_VAR 0 3
13302: PUSH
13303: LD_VAR 0 2
13307: ADD
13308: ST_TO_ADDR
// end ;
13309: GO 13205
13311: POP
13312: POP
// repeat wait ( 0 0$1 ) ;
13313: LD_INT 35
13315: PPUSH
13316: CALL_OW 67
// for un in tmp do
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: LD_VAR 0 3
13329: PUSH
13330: FOR_IN
13331: IFFALSE 13405
// begin if IsDead ( un ) then
13333: LD_VAR 0 2
13337: PPUSH
13338: CALL_OW 301
13342: IFFALSE 13362
// begin tmp := tmp diff un ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: LD_VAR 0 3
13353: PUSH
13354: LD_VAR 0 2
13358: DIFF
13359: ST_TO_ADDR
// continue ;
13360: GO 13330
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13362: LD_VAR 0 2
13366: PPUSH
13367: LD_INT 3
13369: PUSH
13370: LD_INT 22
13372: PUSH
13373: LD_INT 0
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 69
13388: PPUSH
13389: LD_VAR 0 2
13393: PPUSH
13394: CALL_OW 74
13398: PPUSH
13399: CALL_OW 115
// end ;
13403: GO 13330
13405: POP
13406: POP
// until not tmp ;
13407: LD_VAR 0 3
13411: NOT
13412: IFFALSE 13313
// end ;
13414: PPOPN 3
13416: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13417: LD_EXP 16
13421: PUSH
13422: LD_EXP 41
13426: AND
13427: IFFALSE 13481
13429: GO 13431
13431: DISABLE
// begin ToLua ( displayTroll(); ) ;
13432: LD_STRING displayTroll();
13434: PPUSH
13435: CALL_OW 559
// wait ( 3 3$00 ) ;
13439: LD_INT 6300
13441: PPUSH
13442: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13446: LD_STRING hideTroll();
13448: PPUSH
13449: CALL_OW 559
// wait ( 1 1$00 ) ;
13453: LD_INT 2100
13455: PPUSH
13456: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13460: LD_STRING displayTroll();
13462: PPUSH
13463: CALL_OW 559
// wait ( 1 1$00 ) ;
13467: LD_INT 2100
13469: PPUSH
13470: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13474: LD_STRING hideTroll();
13476: PPUSH
13477: CALL_OW 559
// end ;
13481: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13482: LD_EXP 16
13486: PUSH
13487: LD_EXP 42
13491: AND
13492: IFFALSE 13555
13494: GO 13496
13496: DISABLE
13497: LD_INT 0
13499: PPUSH
// begin p := 0 ;
13500: LD_ADDR_VAR 0 1
13504: PUSH
13505: LD_INT 0
13507: ST_TO_ADDR
// repeat game_speed := 1 ;
13508: LD_ADDR_OWVAR 65
13512: PUSH
13513: LD_INT 1
13515: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13516: LD_INT 35
13518: PPUSH
13519: CALL_OW 67
// p := p + 1 ;
13523: LD_ADDR_VAR 0 1
13527: PUSH
13528: LD_VAR 0 1
13532: PUSH
13533: LD_INT 1
13535: PLUS
13536: ST_TO_ADDR
// until p >= 60 ;
13537: LD_VAR 0 1
13541: PUSH
13542: LD_INT 60
13544: GREATEREQUAL
13545: IFFALSE 13508
// game_speed := 4 ;
13547: LD_ADDR_OWVAR 65
13551: PUSH
13552: LD_INT 4
13554: ST_TO_ADDR
// end ;
13555: PPOPN 1
13557: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13558: LD_EXP 16
13562: PUSH
13563: LD_EXP 43
13567: AND
13568: IFFALSE 13714
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: LD_INT 22
13584: PUSH
13585: LD_OWVAR 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: LD_INT 30
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: ST_TO_ADDR
// if not depot then
13631: LD_VAR 0 1
13635: NOT
13636: IFFALSE 13640
// exit ;
13638: GO 13714
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_VAR 0 1
13649: PUSH
13650: LD_INT 1
13652: PPUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 12
13662: ARRAY
13663: PPUSH
13664: CALL_OW 274
13668: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_INT 1
13676: PPUSH
13677: LD_INT 0
13679: PPUSH
13680: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_INT 2
13691: PPUSH
13692: LD_INT 0
13694: PPUSH
13695: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13699: LD_VAR 0 2
13703: PPUSH
13704: LD_INT 3
13706: PPUSH
13707: LD_INT 0
13709: PPUSH
13710: CALL_OW 277
// end ;
13714: PPOPN 2
13716: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13717: LD_EXP 16
13721: PUSH
13722: LD_EXP 44
13726: AND
13727: IFFALSE 13824
13729: GO 13731
13731: DISABLE
13732: LD_INT 0
13734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13735: LD_ADDR_VAR 0 1
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_OWVAR 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 21
13754: PUSH
13755: LD_INT 1
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: LD_INT 23
13767: PUSH
13768: LD_INT 0
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: ST_TO_ADDR
// if not tmp then
13789: LD_VAR 0 1
13793: NOT
13794: IFFALSE 13798
// exit ;
13796: GO 13824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13798: LD_VAR 0 1
13802: PUSH
13803: LD_INT 1
13805: PPUSH
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 12
13815: ARRAY
13816: PPUSH
13817: LD_INT 200
13819: PPUSH
13820: CALL_OW 234
// end ;
13824: PPOPN 1
13826: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13827: LD_EXP 16
13831: PUSH
13832: LD_EXP 45
13836: AND
13837: IFFALSE 13916
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13845: LD_ADDR_VAR 0 1
13849: PUSH
13850: LD_INT 22
13852: PUSH
13853: LD_OWVAR 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 2
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: ST_TO_ADDR
// if not tmp then
13881: LD_VAR 0 1
13885: NOT
13886: IFFALSE 13890
// exit ;
13888: GO 13916
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 1
13897: PPUSH
13898: LD_VAR 0 1
13902: PPUSH
13903: CALL_OW 12
13907: ARRAY
13908: PPUSH
13909: LD_INT 60
13911: PPUSH
13912: CALL_OW 234
// end ;
13916: PPOPN 1
13918: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13919: LD_EXP 16
13923: PUSH
13924: LD_EXP 46
13928: AND
13929: IFFALSE 14028
13931: GO 13933
13933: DISABLE
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
// begin enable ;
13938: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_OWVAR 2
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 61
13958: PUSH
13959: EMPTY
13960: LIST
13961: PUSH
13962: LD_INT 33
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: ST_TO_ADDR
// if not tmp then
13982: LD_VAR 0 1
13986: NOT
13987: IFFALSE 13991
// exit ;
13989: GO 14028
// for i in tmp do
13991: LD_ADDR_VAR 0 2
13995: PUSH
13996: LD_VAR 0 1
14000: PUSH
14001: FOR_IN
14002: IFFALSE 14026
// if IsControledBy ( i ) then
14004: LD_VAR 0 2
14008: PPUSH
14009: CALL_OW 312
14013: IFFALSE 14024
// ComUnlink ( i ) ;
14015: LD_VAR 0 2
14019: PPUSH
14020: CALL_OW 136
14024: GO 14001
14026: POP
14027: POP
// end ;
14028: PPOPN 2
14030: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14031: LD_EXP 16
14035: PUSH
14036: LD_EXP 47
14040: AND
14041: IFFALSE 14181
14043: GO 14045
14045: DISABLE
14046: LD_INT 0
14048: PPUSH
14049: PPUSH
// begin ToLua ( displayPowell(); ) ;
14050: LD_STRING displayPowell();
14052: PPUSH
14053: CALL_OW 559
// uc_side := 0 ;
14057: LD_ADDR_OWVAR 20
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// uc_nation := 2 ;
14065: LD_ADDR_OWVAR 21
14069: PUSH
14070: LD_INT 2
14072: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14073: LD_ADDR_OWVAR 37
14077: PUSH
14078: LD_INT 14
14080: ST_TO_ADDR
// vc_engine := engine_siberite ;
14081: LD_ADDR_OWVAR 39
14085: PUSH
14086: LD_INT 3
14088: ST_TO_ADDR
// vc_control := control_apeman ;
14089: LD_ADDR_OWVAR 38
14093: PUSH
14094: LD_INT 5
14096: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14097: LD_ADDR_OWVAR 40
14101: PUSH
14102: LD_INT 29
14104: ST_TO_ADDR
// un := CreateVehicle ;
14105: LD_ADDR_VAR 0 2
14109: PUSH
14110: CALL_OW 45
14114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14115: LD_VAR 0 2
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14134: LD_VAR 0 2
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_OWVAR 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PPUSH
14156: LD_VAR 0 2
14160: PPUSH
14161: CALL_OW 74
14165: PPUSH
14166: CALL_OW 115
// until IsDead ( un ) ;
14170: LD_VAR 0 2
14174: PPUSH
14175: CALL_OW 301
14179: IFFALSE 14127
// end ;
14181: PPOPN 2
14183: END
// every 0 0$1 trigger StreamModeActive and sStu do
14184: LD_EXP 16
14188: PUSH
14189: LD_EXP 55
14193: AND
14194: IFFALSE 14210
14196: GO 14198
14198: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14199: LD_STRING displayStucuk();
14201: PPUSH
14202: CALL_OW 559
// ResetFog ;
14206: CALL_OW 335
// end ;
14210: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14211: LD_EXP 16
14215: PUSH
14216: LD_EXP 48
14220: AND
14221: IFFALSE 14362
14223: GO 14225
14225: DISABLE
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14230: LD_ADDR_VAR 0 2
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_OWVAR 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// if not tmp then
14266: LD_VAR 0 2
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14362
// un := tmp [ rand ( 1 , tmp ) ] ;
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: LD_VAR 0 2
14284: PUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: CALL_OW 12
14297: ARRAY
14298: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14299: LD_VAR 0 1
14303: PPUSH
14304: LD_INT 0
14306: PPUSH
14307: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_OWVAR 3
14320: PUSH
14321: LD_VAR 0 1
14325: DIFF
14326: PPUSH
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 74
14336: PPUSH
14337: CALL_OW 115
// wait ( 0 0$20 ) ;
14341: LD_INT 700
14343: PPUSH
14344: CALL_OW 67
// SetSide ( un , your_side ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: LD_OWVAR 2
14357: PPUSH
14358: CALL_OW 235
// end ;
14362: PPOPN 2
14364: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14365: LD_EXP 16
14369: PUSH
14370: LD_EXP 49
14374: AND
14375: IFFALSE 14481
14377: GO 14379
14379: DISABLE
14380: LD_INT 0
14382: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_OWVAR 2
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: LD_INT 30
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 30
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 69
14436: ST_TO_ADDR
// if not depot then
14437: LD_VAR 0 1
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14481
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14446: LD_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: CALL_OW 250
14459: PPUSH
14460: LD_VAR 0 1
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: PPUSH
14469: CALL_OW 251
14473: PPUSH
14474: LD_INT 70
14476: PPUSH
14477: CALL_OW 495
// end ;
14481: PPOPN 1
14483: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14484: LD_EXP 16
14488: PUSH
14489: LD_EXP 50
14493: AND
14494: IFFALSE 14705
14496: GO 14498
14498: DISABLE
14499: LD_INT 0
14501: PPUSH
14502: PPUSH
14503: PPUSH
14504: PPUSH
14505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_INT 22
14513: PUSH
14514: LD_OWVAR 2
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: ST_TO_ADDR
// if not tmp then
14542: LD_VAR 0 5
14546: NOT
14547: IFFALSE 14551
// exit ;
14549: GO 14705
// for i in tmp do
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14703
// begin d := rand ( 0 , 5 ) ;
14564: LD_ADDR_VAR 0 4
14568: PUSH
14569: LD_INT 0
14571: PPUSH
14572: LD_INT 5
14574: PPUSH
14575: CALL_OW 12
14579: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 250
14594: PPUSH
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_INT 3
14602: PPUSH
14603: LD_INT 12
14605: PPUSH
14606: CALL_OW 12
14610: PPUSH
14611: CALL_OW 272
14615: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 251
14630: PPUSH
14631: LD_VAR 0 4
14635: PPUSH
14636: LD_INT 3
14638: PPUSH
14639: LD_INT 12
14641: PPUSH
14642: CALL_OW 12
14646: PPUSH
14647: CALL_OW 273
14651: ST_TO_ADDR
// if ValidHex ( x , y ) then
14652: LD_VAR 0 2
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: CALL_OW 488
14666: IFFALSE 14701
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_VAR 0 2
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: LD_INT 6
14688: PPUSH
14689: CALL_OW 12
14693: PPUSH
14694: LD_INT 1
14696: PPUSH
14697: CALL_OW 483
// end ;
14701: GO 14561
14703: POP
14704: POP
// end ;
14705: PPOPN 5
14707: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14708: LD_EXP 16
14712: PUSH
14713: LD_EXP 51
14717: AND
14718: IFFALSE 14812
14720: GO 14722
14722: DISABLE
14723: LD_INT 0
14725: PPUSH
14726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: LD_INT 22
14734: PUSH
14735: LD_OWVAR 2
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 32
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 21
14756: PUSH
14757: LD_INT 2
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: ST_TO_ADDR
// if not tmp then
14774: LD_VAR 0 2
14778: NOT
14779: IFFALSE 14783
// exit ;
14781: GO 14812
// for i in tmp do
14783: LD_ADDR_VAR 0 1
14787: PUSH
14788: LD_VAR 0 2
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14810
// SetFuel ( i , 0 ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 240
14808: GO 14793
14810: POP
14811: POP
// end ;
14812: PPOPN 2
14814: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14815: LD_EXP 16
14819: PUSH
14820: LD_EXP 52
14824: AND
14825: IFFALSE 14891
14827: GO 14829
14829: DISABLE
14830: LD_INT 0
14832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: LD_INT 22
14840: PUSH
14841: LD_OWVAR 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 29
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 69
14868: ST_TO_ADDR
// if not tmp then
14869: LD_VAR 0 1
14873: NOT
14874: IFFALSE 14878
// exit ;
14876: GO 14891
// DestroyUnit ( tmp [ 1 ] ) ;
14878: LD_VAR 0 1
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PPUSH
14887: CALL_OW 65
// end ;
14891: PPOPN 1
14893: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14894: LD_EXP 16
14898: PUSH
14899: LD_EXP 54
14903: AND
14904: IFFALSE 15033
14906: GO 14908
14908: DISABLE
14909: LD_INT 0
14911: PPUSH
// begin uc_side := 0 ;
14912: LD_ADDR_OWVAR 20
14916: PUSH
14917: LD_INT 0
14919: ST_TO_ADDR
// uc_nation := nation_arabian ;
14920: LD_ADDR_OWVAR 21
14924: PUSH
14925: LD_INT 2
14927: ST_TO_ADDR
// hc_gallery :=  ;
14928: LD_ADDR_OWVAR 33
14932: PUSH
14933: LD_STRING 
14935: ST_TO_ADDR
// hc_name :=  ;
14936: LD_ADDR_OWVAR 26
14940: PUSH
14941: LD_STRING 
14943: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14944: LD_INT 1
14946: PPUSH
14947: LD_INT 11
14949: PPUSH
14950: LD_INT 10
14952: PPUSH
14953: CALL_OW 380
// un := CreateHuman ;
14957: LD_ADDR_VAR 0 1
14961: PUSH
14962: CALL_OW 44
14966: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14979: LD_INT 35
14981: PPUSH
14982: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14986: LD_VAR 0 1
14990: PPUSH
14991: LD_INT 22
14993: PUSH
14994: LD_OWVAR 2
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 74
15017: PPUSH
15018: CALL_OW 115
// until IsDead ( un ) ;
15022: LD_VAR 0 1
15026: PPUSH
15027: CALL_OW 301
15031: IFFALSE 14979
// end ;
15033: PPOPN 1
15035: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15036: LD_EXP 16
15040: PUSH
15041: LD_EXP 56
15045: AND
15046: IFFALSE 15058
15048: GO 15050
15050: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15051: LD_STRING earthquake(getX(game), 0, 32)
15053: PPUSH
15054: CALL_OW 559
15058: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15059: LD_EXP 16
15063: PUSH
15064: LD_EXP 57
15068: AND
15069: IFFALSE 15160
15071: GO 15073
15073: DISABLE
15074: LD_INT 0
15076: PPUSH
// begin enable ;
15077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15078: LD_ADDR_VAR 0 1
15082: PUSH
15083: LD_INT 22
15085: PUSH
15086: LD_OWVAR 2
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 21
15097: PUSH
15098: LD_INT 2
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 33
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 69
15124: ST_TO_ADDR
// if not tmp then
15125: LD_VAR 0 1
15129: NOT
15130: IFFALSE 15134
// exit ;
15132: GO 15160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15134: LD_VAR 0 1
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: CALL_OW 12
15151: ARRAY
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 234
// end ;
15160: PPOPN 1
15162: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15163: LD_EXP 16
15167: PUSH
15168: LD_EXP 58
15172: AND
15173: IFFALSE 15314
15175: GO 15177
15177: DISABLE
15178: LD_INT 0
15180: PPUSH
15181: PPUSH
15182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15183: LD_ADDR_VAR 0 3
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_OWVAR 2
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: ST_TO_ADDR
// if not tmp then
15219: LD_VAR 0 3
15223: NOT
15224: IFFALSE 15228
// exit ;
15226: GO 15314
// un := tmp [ rand ( 1 , tmp ) ] ;
15228: LD_ADDR_VAR 0 2
15232: PUSH
15233: LD_VAR 0 3
15237: PUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: CALL_OW 12
15250: ARRAY
15251: ST_TO_ADDR
// if Crawls ( un ) then
15252: LD_VAR 0 2
15256: PPUSH
15257: CALL_OW 318
15261: IFFALSE 15272
// ComWalk ( un ) ;
15263: LD_VAR 0 2
15267: PPUSH
15268: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15272: LD_VAR 0 2
15276: PPUSH
15277: LD_INT 9
15279: PPUSH
15280: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15284: LD_INT 28
15286: PPUSH
15287: LD_OWVAR 2
15291: PPUSH
15292: LD_INT 2
15294: PPUSH
15295: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15299: LD_INT 29
15301: PPUSH
15302: LD_OWVAR 2
15306: PPUSH
15307: LD_INT 2
15309: PPUSH
15310: CALL_OW 322
// end ;
15314: PPOPN 3
15316: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15317: LD_EXP 16
15321: PUSH
15322: LD_EXP 59
15326: AND
15327: IFFALSE 15438
15329: GO 15331
15331: DISABLE
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
15336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15337: LD_ADDR_VAR 0 3
15341: PUSH
15342: LD_INT 22
15344: PUSH
15345: LD_OWVAR 2
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 25
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: ST_TO_ADDR
// if not tmp then
15373: LD_VAR 0 3
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 15438
// un := tmp [ rand ( 1 , tmp ) ] ;
15382: LD_ADDR_VAR 0 2
15386: PUSH
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 1
15394: PPUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: ST_TO_ADDR
// if Crawls ( un ) then
15406: LD_VAR 0 2
15410: PPUSH
15411: CALL_OW 318
15415: IFFALSE 15426
// ComWalk ( un ) ;
15417: LD_VAR 0 2
15421: PPUSH
15422: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15426: LD_VAR 0 2
15430: PPUSH
15431: LD_INT 8
15433: PPUSH
15434: CALL_OW 336
// end ;
15438: PPOPN 3
15440: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15441: LD_EXP 16
15445: PUSH
15446: LD_EXP 60
15450: AND
15451: IFFALSE 15595
15453: GO 15455
15455: DISABLE
15456: LD_INT 0
15458: PPUSH
15459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15460: LD_ADDR_VAR 0 2
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_OWVAR 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 34
15492: PUSH
15493: LD_INT 12
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 34
15502: PUSH
15503: LD_INT 51
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 32
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: PPUSH
15531: CALL_OW 69
15535: ST_TO_ADDR
// if not tmp then
15536: LD_VAR 0 2
15540: NOT
15541: IFFALSE 15545
// exit ;
15543: GO 15595
// for i in tmp do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_VAR 0 2
15554: PUSH
15555: FOR_IN
15556: IFFALSE 15593
// if GetCargo ( i , mat_artifact ) = 0 then
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_INT 4
15565: PPUSH
15566: CALL_OW 289
15570: PUSH
15571: LD_INT 0
15573: EQUAL
15574: IFFALSE 15591
// SetCargo ( i , mat_siberit , 100 ) ;
15576: LD_VAR 0 1
15580: PPUSH
15581: LD_INT 3
15583: PPUSH
15584: LD_INT 100
15586: PPUSH
15587: CALL_OW 290
15591: GO 15555
15593: POP
15594: POP
// end ;
15595: PPOPN 2
15597: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15598: LD_EXP 16
15602: PUSH
15603: LD_EXP 61
15607: AND
15608: IFFALSE 15791
15610: GO 15612
15612: DISABLE
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PPUSH
15634: CALL_OW 69
15638: ST_TO_ADDR
// if not tmp then
15639: LD_VAR 0 2
15643: NOT
15644: IFFALSE 15648
// exit ;
15646: GO 15791
// for i := 1 to 2 do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: DOUBLE
15654: LD_INT 1
15656: DEC
15657: ST_TO_ADDR
15658: LD_INT 2
15660: PUSH
15661: FOR_TO
15662: IFFALSE 15789
// begin uc_side := your_side ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_OWVAR 2
15673: ST_TO_ADDR
// uc_nation := nation_american ;
15674: LD_ADDR_OWVAR 21
15678: PUSH
15679: LD_INT 1
15681: ST_TO_ADDR
// vc_chassis := us_morphling ;
15682: LD_ADDR_OWVAR 37
15686: PUSH
15687: LD_INT 5
15689: ST_TO_ADDR
// vc_engine := engine_siberite ;
15690: LD_ADDR_OWVAR 39
15694: PUSH
15695: LD_INT 3
15697: ST_TO_ADDR
// vc_control := control_computer ;
15698: LD_ADDR_OWVAR 38
15702: PUSH
15703: LD_INT 3
15705: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15706: LD_ADDR_OWVAR 40
15710: PUSH
15711: LD_INT 10
15713: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15714: LD_VAR 0 2
15718: PUSH
15719: LD_INT 1
15721: ARRAY
15722: PPUSH
15723: CALL_OW 310
15727: NOT
15728: IFFALSE 15775
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15730: CALL_OW 45
15734: PPUSH
15735: LD_VAR 0 2
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: CALL_OW 250
15748: PPUSH
15749: LD_VAR 0 2
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: CALL_OW 251
15762: PPUSH
15763: LD_INT 12
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 50
15773: GO 15787
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15775: CALL_OW 45
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: CALL_OW 51
// end ;
15787: GO 15661
15789: POP
15790: POP
// end ;
15791: PPOPN 2
15793: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15794: LD_EXP 16
15798: PUSH
15799: LD_EXP 62
15803: AND
15804: IFFALSE 16026
15806: GO 15808
15808: DISABLE
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15817: LD_ADDR_VAR 0 6
15821: PUSH
15822: LD_INT 22
15824: PUSH
15825: LD_OWVAR 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 21
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: PUSH
15847: LD_INT 23
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: ST_TO_ADDR
// if not tmp then
15871: LD_VAR 0 6
15875: NOT
15876: IFFALSE 15880
// exit ;
15878: GO 16026
// s1 := rand ( 1 , 4 ) ;
15880: LD_ADDR_VAR 0 2
15884: PUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_INT 4
15890: PPUSH
15891: CALL_OW 12
15895: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15896: LD_ADDR_VAR 0 4
15900: PUSH
15901: LD_VAR 0 6
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: LD_VAR 0 2
15914: PPUSH
15915: CALL_OW 259
15919: ST_TO_ADDR
// if s1 = 1 then
15920: LD_VAR 0 2
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: IFFALSE 15948
// s2 := rand ( 2 , 4 ) else
15930: LD_ADDR_VAR 0 3
15934: PUSH
15935: LD_INT 2
15937: PPUSH
15938: LD_INT 4
15940: PPUSH
15941: CALL_OW 12
15945: ST_TO_ADDR
15946: GO 15956
// s2 := 1 ;
15948: LD_ADDR_VAR 0 3
15952: PUSH
15953: LD_INT 1
15955: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15956: LD_ADDR_VAR 0 5
15960: PUSH
15961: LD_VAR 0 6
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: PPUSH
15970: LD_VAR 0 3
15974: PPUSH
15975: CALL_OW 259
15979: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15980: LD_VAR 0 6
15984: PUSH
15985: LD_INT 1
15987: ARRAY
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: LD_VAR 0 5
15998: PPUSH
15999: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16003: LD_VAR 0 6
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_VAR 0 4
16021: PPUSH
16022: CALL_OW 237
// end ;
16026: PPOPN 6
16028: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16029: LD_EXP 16
16033: PUSH
16034: LD_EXP 63
16038: AND
16039: IFFALSE 16118
16041: GO 16043
16043: DISABLE
16044: LD_INT 0
16046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: LD_INT 22
16054: PUSH
16055: LD_OWVAR 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 30
16066: PUSH
16067: LD_INT 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PPUSH
16078: CALL_OW 69
16082: ST_TO_ADDR
// if not tmp then
16083: LD_VAR 0 1
16087: NOT
16088: IFFALSE 16092
// exit ;
16090: GO 16118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16092: LD_VAR 0 1
16096: PUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 12
16109: ARRAY
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 234
// end ;
16118: PPOPN 1
16120: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16121: LD_EXP 16
16125: PUSH
16126: LD_EXP 64
16130: AND
16131: IFFALSE 16243
16133: GO 16135
16135: DISABLE
16136: LD_INT 0
16138: PPUSH
16139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16140: LD_ADDR_VAR 0 2
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_OWVAR 2
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: LD_INT 30
16162: PUSH
16163: LD_INT 27
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 30
16172: PUSH
16173: LD_INT 26
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 30
16182: PUSH
16183: LD_INT 28
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: ST_TO_ADDR
// if not tmp then
16205: LD_VAR 0 2
16209: NOT
16210: IFFALSE 16214
// exit ;
16212: GO 16243
// for i in tmp do
16214: LD_ADDR_VAR 0 1
16218: PUSH
16219: LD_VAR 0 2
16223: PUSH
16224: FOR_IN
16225: IFFALSE 16241
// SetLives ( i , 1 ) ;
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 1
16234: PPUSH
16235: CALL_OW 234
16239: GO 16224
16241: POP
16242: POP
// end ;
16243: PPOPN 2
16245: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16246: LD_EXP 16
16250: PUSH
16251: LD_EXP 65
16255: AND
16256: IFFALSE 16543
16258: GO 16260
16260: DISABLE
16261: LD_INT 0
16263: PPUSH
16264: PPUSH
16265: PPUSH
// begin i := rand ( 1 , 7 ) ;
16266: LD_ADDR_VAR 0 1
16270: PUSH
16271: LD_INT 1
16273: PPUSH
16274: LD_INT 7
16276: PPUSH
16277: CALL_OW 12
16281: ST_TO_ADDR
// case i of 1 :
16282: LD_VAR 0 1
16286: PUSH
16287: LD_INT 1
16289: DOUBLE
16290: EQUAL
16291: IFTRUE 16295
16293: GO 16305
16295: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16296: LD_STRING earthquake(getX(game), 0, 32)
16298: PPUSH
16299: CALL_OW 559
16303: GO 16543
16305: LD_INT 2
16307: DOUBLE
16308: EQUAL
16309: IFTRUE 16313
16311: GO 16327
16313: POP
// begin ToLua ( displayStucuk(); ) ;
16314: LD_STRING displayStucuk();
16316: PPUSH
16317: CALL_OW 559
// ResetFog ;
16321: CALL_OW 335
// end ; 3 :
16325: GO 16543
16327: LD_INT 3
16329: DOUBLE
16330: EQUAL
16331: IFTRUE 16335
16333: GO 16439
16335: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16336: LD_ADDR_VAR 0 2
16340: PUSH
16341: LD_INT 22
16343: PUSH
16344: LD_OWVAR 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 25
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 69
16371: ST_TO_ADDR
// if not tmp then
16372: LD_VAR 0 2
16376: NOT
16377: IFFALSE 16381
// exit ;
16379: GO 16543
// un := tmp [ rand ( 1 , tmp ) ] ;
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_VAR 0 2
16390: PUSH
16391: LD_INT 1
16393: PPUSH
16394: LD_VAR 0 2
16398: PPUSH
16399: CALL_OW 12
16403: ARRAY
16404: ST_TO_ADDR
// if Crawls ( un ) then
16405: LD_VAR 0 3
16409: PPUSH
16410: CALL_OW 318
16414: IFFALSE 16425
// ComWalk ( un ) ;
16416: LD_VAR 0 3
16420: PPUSH
16421: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16425: LD_VAR 0 3
16429: PPUSH
16430: LD_INT 8
16432: PPUSH
16433: CALL_OW 336
// end ; 4 :
16437: GO 16543
16439: LD_INT 4
16441: DOUBLE
16442: EQUAL
16443: IFTRUE 16447
16445: GO 16521
16447: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_OWVAR 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: LD_INT 29
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: ST_TO_ADDR
// if not tmp then
16484: LD_VAR 0 2
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16543
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16493: LD_VAR 0 2
16497: PUSH
16498: LD_INT 1
16500: ARRAY
16501: PPUSH
16502: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16506: LD_VAR 0 2
16510: PUSH
16511: LD_INT 1
16513: ARRAY
16514: PPUSH
16515: CALL_OW 65
// end ; 5 .. 7 :
16519: GO 16543
16521: LD_INT 5
16523: DOUBLE
16524: GREATEREQUAL
16525: IFFALSE 16533
16527: LD_INT 7
16529: DOUBLE
16530: LESSEQUAL
16531: IFTRUE 16535
16533: GO 16542
16535: POP
// StreamSibBomb ; end ;
16536: CALL 12780 0 0
16540: GO 16543
16542: POP
// end ;
16543: PPOPN 3
16545: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16546: LD_EXP 16
16550: PUSH
16551: LD_EXP 66
16555: AND
16556: IFFALSE 16712
16558: GO 16560
16560: DISABLE
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16566: LD_ADDR_VAR 0 2
16570: PUSH
16571: LD_INT 81
16573: PUSH
16574: LD_OWVAR 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 21
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 69
16619: ST_TO_ADDR
// if not tmp then
16620: LD_VAR 0 2
16624: NOT
16625: IFFALSE 16629
// exit ;
16627: GO 16712
// p := 0 ;
16629: LD_ADDR_VAR 0 3
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16637: LD_INT 35
16639: PPUSH
16640: CALL_OW 67
// p := p + 1 ;
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_VAR 0 3
16653: PUSH
16654: LD_INT 1
16656: PLUS
16657: ST_TO_ADDR
// for i in tmp do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: LD_VAR 0 2
16667: PUSH
16668: FOR_IN
16669: IFFALSE 16700
// if GetLives ( i ) < 1000 then
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 256
16680: PUSH
16681: LD_INT 1000
16683: LESS
16684: IFFALSE 16698
// SetLives ( i , 1000 ) ;
16686: LD_VAR 0 1
16690: PPUSH
16691: LD_INT 1000
16693: PPUSH
16694: CALL_OW 234
16698: GO 16668
16700: POP
16701: POP
// until p > 20 ;
16702: LD_VAR 0 3
16706: PUSH
16707: LD_INT 20
16709: GREATER
16710: IFFALSE 16637
// end ;
16712: PPOPN 3
16714: END
// every 0 0$1 trigger StreamModeActive and sTime do
16715: LD_EXP 16
16719: PUSH
16720: LD_EXP 67
16724: AND
16725: IFFALSE 16760
16727: GO 16729
16729: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16730: LD_INT 28
16732: PPUSH
16733: LD_OWVAR 2
16737: PPUSH
16738: LD_INT 2
16740: PPUSH
16741: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16745: LD_INT 30
16747: PPUSH
16748: LD_OWVAR 2
16752: PPUSH
16753: LD_INT 2
16755: PPUSH
16756: CALL_OW 322
// end ;
16760: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16761: LD_EXP 16
16765: PUSH
16766: LD_EXP 68
16770: AND
16771: IFFALSE 16892
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 22
16787: PUSH
16788: LD_OWVAR 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 21
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 3
16809: PUSH
16810: LD_INT 23
16812: PUSH
16813: LD_INT 0
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: PPUSH
16829: CALL_OW 69
16833: ST_TO_ADDR
// if not tmp then
16834: LD_VAR 0 2
16838: NOT
16839: IFFALSE 16843
// exit ;
16841: GO 16892
// for i in tmp do
16843: LD_ADDR_VAR 0 1
16847: PUSH
16848: LD_VAR 0 2
16852: PUSH
16853: FOR_IN
16854: IFFALSE 16890
// begin if Crawls ( i ) then
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 318
16865: IFFALSE 16876
// ComWalk ( i ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 138
// SetClass ( i , 2 ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: LD_INT 2
16883: PPUSH
16884: CALL_OW 336
// end ;
16888: GO 16853
16890: POP
16891: POP
// end ;
16892: PPOPN 2
16894: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16895: LD_EXP 16
16899: PUSH
16900: LD_EXP 69
16904: AND
16905: IFFALSE 17193
16907: GO 16909
16909: DISABLE
16910: LD_INT 0
16912: PPUSH
16913: PPUSH
16914: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16915: LD_OWVAR 2
16919: PPUSH
16920: LD_INT 9
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16933: LD_INT 9
16935: PPUSH
16936: LD_OWVAR 2
16940: PPUSH
16941: CALL_OW 343
// uc_side := 9 ;
16945: LD_ADDR_OWVAR 20
16949: PUSH
16950: LD_INT 9
16952: ST_TO_ADDR
// uc_nation := 2 ;
16953: LD_ADDR_OWVAR 21
16957: PUSH
16958: LD_INT 2
16960: ST_TO_ADDR
// hc_name := Dark Warrior ;
16961: LD_ADDR_OWVAR 26
16965: PUSH
16966: LD_STRING Dark Warrior
16968: ST_TO_ADDR
// hc_gallery :=  ;
16969: LD_ADDR_OWVAR 33
16973: PUSH
16974: LD_STRING 
16976: ST_TO_ADDR
// hc_noskilllimit := true ;
16977: LD_ADDR_OWVAR 76
16981: PUSH
16982: LD_INT 1
16984: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16985: LD_ADDR_OWVAR 31
16989: PUSH
16990: LD_INT 30
16992: PUSH
16993: LD_INT 30
16995: PUSH
16996: LD_INT 30
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: ST_TO_ADDR
// un := CreateHuman ;
17008: LD_ADDR_VAR 0 3
17012: PUSH
17013: CALL_OW 44
17017: ST_TO_ADDR
// hc_noskilllimit := false ;
17018: LD_ADDR_OWVAR 76
17022: PUSH
17023: LD_INT 0
17025: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 51
// ToLua ( playRanger() ) ;
17038: LD_STRING playRanger()
17040: PPUSH
17041: CALL_OW 559
// p := 0 ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: LD_INT 0
17052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17053: LD_INT 35
17055: PPUSH
17056: CALL_OW 67
// p := p + 1 ;
17060: LD_ADDR_VAR 0 2
17064: PUSH
17065: LD_VAR 0 2
17069: PUSH
17070: LD_INT 1
17072: PLUS
17073: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 256
17083: PUSH
17084: LD_INT 1000
17086: LESS
17087: IFFALSE 17101
// SetLives ( un , 1000 ) ;
17089: LD_VAR 0 3
17093: PPUSH
17094: LD_INT 1000
17096: PPUSH
17097: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 81
17108: PUSH
17109: LD_OWVAR 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 91
17120: PUSH
17121: LD_VAR 0 3
17125: PUSH
17126: LD_INT 30
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: PPUSH
17143: LD_VAR 0 3
17147: PPUSH
17148: CALL_OW 74
17152: PPUSH
17153: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 80
17164: GREATER
17165: PUSH
17166: LD_VAR 0 3
17170: PPUSH
17171: CALL_OW 301
17175: OR
17176: IFFALSE 17053
// if un then
17178: LD_VAR 0 3
17182: IFFALSE 17193
// RemoveUnit ( un ) ;
17184: LD_VAR 0 3
17188: PPUSH
17189: CALL_OW 64
// end ;
17193: PPOPN 3
17195: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17196: LD_EXP 70
17200: IFFALSE 17316
17202: GO 17204
17204: DISABLE
17205: LD_INT 0
17207: PPUSH
17208: PPUSH
17209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_INT 81
17217: PUSH
17218: LD_OWVAR 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 21
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 69
17245: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17246: LD_STRING playComputer()
17248: PPUSH
17249: CALL_OW 559
// if not tmp then
17253: LD_VAR 0 2
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17316
// for i in tmp do
17262: LD_ADDR_VAR 0 1
17266: PUSH
17267: LD_VAR 0 2
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17314
// for j := 1 to 4 do
17275: LD_ADDR_VAR 0 3
17279: PUSH
17280: DOUBLE
17281: LD_INT 1
17283: DEC
17284: ST_TO_ADDR
17285: LD_INT 4
17287: PUSH
17288: FOR_TO
17289: IFFALSE 17310
// SetSkill ( i , j , 10 ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_INT 10
17303: PPUSH
17304: CALL_OW 237
17308: GO 17288
17310: POP
17311: POP
17312: GO 17272
17314: POP
17315: POP
// end ;
17316: PPOPN 3
17318: END
// every 0 0$1 trigger s30 do var i , tmp ;
17319: LD_EXP 71
17323: IFFALSE 17392
17325: GO 17327
17327: DISABLE
17328: LD_INT 0
17330: PPUSH
17331: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_INT 22
17339: PUSH
17340: LD_OWVAR 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: ST_TO_ADDR
// if not tmp then
17354: LD_VAR 0 2
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17392
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17390
// SetLives ( i , 300 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 300
17383: PPUSH
17384: CALL_OW 234
17388: GO 17373
17390: POP
17391: POP
// end ;
17392: PPOPN 2
17394: END
// every 0 0$1 trigger s60 do var i , tmp ;
17395: LD_EXP 72
17399: IFFALSE 17468
17401: GO 17403
17403: DISABLE
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_OWVAR 2
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PPUSH
17425: CALL_OW 69
17429: ST_TO_ADDR
// if not tmp then
17430: LD_VAR 0 2
17434: NOT
17435: IFFALSE 17439
// exit ;
17437: GO 17468
// for i in tmp do
17439: LD_ADDR_VAR 0 1
17443: PUSH
17444: LD_VAR 0 2
17448: PUSH
17449: FOR_IN
17450: IFFALSE 17466
// SetLives ( i , 600 ) ;
17452: LD_VAR 0 1
17456: PPUSH
17457: LD_INT 600
17459: PPUSH
17460: CALL_OW 234
17464: GO 17449
17466: POP
17467: POP
// end ;
17468: PPOPN 2
17470: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17471: LD_INT 0
17473: PPUSH
// case cmd of 301 :
17474: LD_VAR 0 1
17478: PUSH
17479: LD_INT 301
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17519
17487: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17488: LD_VAR 0 6
17492: PPUSH
17493: LD_VAR 0 7
17497: PPUSH
17498: LD_VAR 0 8
17502: PPUSH
17503: LD_VAR 0 4
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: CALL 18720 0 5
17517: GO 17640
17519: LD_INT 302
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17564
17527: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17528: LD_VAR 0 6
17532: PPUSH
17533: LD_VAR 0 7
17537: PPUSH
17538: LD_VAR 0 8
17542: PPUSH
17543: LD_VAR 0 9
17547: PPUSH
17548: LD_VAR 0 4
17552: PPUSH
17553: LD_VAR 0 5
17557: PPUSH
17558: CALL 18811 0 6
17562: GO 17640
17564: LD_INT 303
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17609
17572: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17573: LD_VAR 0 6
17577: PPUSH
17578: LD_VAR 0 7
17582: PPUSH
17583: LD_VAR 0 8
17587: PPUSH
17588: LD_VAR 0 9
17592: PPUSH
17593: LD_VAR 0 4
17597: PPUSH
17598: LD_VAR 0 5
17602: PPUSH
17603: CALL 17645 0 6
17607: GO 17640
17609: LD_INT 304
17611: DOUBLE
17612: EQUAL
17613: IFTRUE 17617
17615: GO 17639
17617: POP
// hHackTeleport ( unit , x , y ) ; end ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_VAR 0 5
17632: PPUSH
17633: CALL 19404 0 3
17637: GO 17640
17639: POP
// end ;
17640: LD_VAR 0 12
17644: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17645: LD_INT 0
17647: PPUSH
17648: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17649: LD_VAR 0 1
17653: PUSH
17654: LD_INT 1
17656: LESS
17657: PUSH
17658: LD_VAR 0 1
17662: PUSH
17663: LD_INT 3
17665: GREATER
17666: OR
17667: PUSH
17668: LD_VAR 0 5
17672: PPUSH
17673: LD_VAR 0 6
17677: PPUSH
17678: CALL_OW 428
17682: OR
17683: IFFALSE 17687
// exit ;
17685: GO 18407
// uc_side := your_side ;
17687: LD_ADDR_OWVAR 20
17691: PUSH
17692: LD_OWVAR 2
17696: ST_TO_ADDR
// uc_nation := nation ;
17697: LD_ADDR_OWVAR 21
17701: PUSH
17702: LD_VAR 0 1
17706: ST_TO_ADDR
// bc_level = 1 ;
17707: LD_ADDR_OWVAR 43
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// case btype of 1 :
17715: LD_VAR 0 2
17719: PUSH
17720: LD_INT 1
17722: DOUBLE
17723: EQUAL
17724: IFTRUE 17728
17726: GO 17739
17728: POP
// bc_type := b_depot ; 2 :
17729: LD_ADDR_OWVAR 42
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
17737: GO 18351
17739: LD_INT 2
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17758
17747: POP
// bc_type := b_warehouse ; 3 :
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
17756: GO 18351
17758: LD_INT 3
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17777
17766: POP
// bc_type := b_lab ; 4 .. 9 :
17767: LD_ADDR_OWVAR 42
17771: PUSH
17772: LD_INT 6
17774: ST_TO_ADDR
17775: GO 18351
17777: LD_INT 4
17779: DOUBLE
17780: GREATEREQUAL
17781: IFFALSE 17789
17783: LD_INT 9
17785: DOUBLE
17786: LESSEQUAL
17787: IFTRUE 17791
17789: GO 17843
17791: POP
// begin bc_type := b_lab_half ;
17792: LD_ADDR_OWVAR 42
17796: PUSH
17797: LD_INT 7
17799: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17800: LD_ADDR_OWVAR 44
17804: PUSH
17805: LD_INT 10
17807: PUSH
17808: LD_INT 11
17810: PUSH
17811: LD_INT 12
17813: PUSH
17814: LD_INT 15
17816: PUSH
17817: LD_INT 14
17819: PUSH
17820: LD_INT 13
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: PUSH
17831: LD_VAR 0 2
17835: PUSH
17836: LD_INT 3
17838: MINUS
17839: ARRAY
17840: ST_TO_ADDR
// end ; 10 .. 13 :
17841: GO 18351
17843: LD_INT 10
17845: DOUBLE
17846: GREATEREQUAL
17847: IFFALSE 17855
17849: LD_INT 13
17851: DOUBLE
17852: LESSEQUAL
17853: IFTRUE 17857
17855: GO 17934
17857: POP
// begin bc_type := b_lab_full ;
17858: LD_ADDR_OWVAR 42
17862: PUSH
17863: LD_INT 8
17865: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17866: LD_ADDR_OWVAR 44
17870: PUSH
17871: LD_INT 10
17873: PUSH
17874: LD_INT 12
17876: PUSH
17877: LD_INT 14
17879: PUSH
17880: LD_INT 13
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: PUSH
17889: LD_VAR 0 2
17893: PUSH
17894: LD_INT 9
17896: MINUS
17897: ARRAY
17898: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17899: LD_ADDR_OWVAR 45
17903: PUSH
17904: LD_INT 11
17906: PUSH
17907: LD_INT 15
17909: PUSH
17910: LD_INT 12
17912: PUSH
17913: LD_INT 15
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: LD_VAR 0 2
17926: PUSH
17927: LD_INT 9
17929: MINUS
17930: ARRAY
17931: ST_TO_ADDR
// end ; 14 :
17932: GO 18351
17934: LD_INT 14
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 17953
17942: POP
// bc_type := b_workshop ; 15 :
17943: LD_ADDR_OWVAR 42
17947: PUSH
17948: LD_INT 2
17950: ST_TO_ADDR
17951: GO 18351
17953: LD_INT 15
17955: DOUBLE
17956: EQUAL
17957: IFTRUE 17961
17959: GO 17972
17961: POP
// bc_type := b_factory ; 16 :
17962: LD_ADDR_OWVAR 42
17966: PUSH
17967: LD_INT 3
17969: ST_TO_ADDR
17970: GO 18351
17972: LD_INT 16
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 17991
17980: POP
// bc_type := b_ext_gun ; 17 :
17981: LD_ADDR_OWVAR 42
17985: PUSH
17986: LD_INT 17
17988: ST_TO_ADDR
17989: GO 18351
17991: LD_INT 17
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 18027
17999: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18000: LD_ADDR_OWVAR 42
18004: PUSH
18005: LD_INT 19
18007: PUSH
18008: LD_INT 23
18010: PUSH
18011: LD_INT 19
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: PUSH
18019: LD_VAR 0 1
18023: ARRAY
18024: ST_TO_ADDR
18025: GO 18351
18027: LD_INT 18
18029: DOUBLE
18030: EQUAL
18031: IFTRUE 18035
18033: GO 18046
18035: POP
// bc_type := b_ext_radar ; 19 :
18036: LD_ADDR_OWVAR 42
18040: PUSH
18041: LD_INT 20
18043: ST_TO_ADDR
18044: GO 18351
18046: LD_INT 19
18048: DOUBLE
18049: EQUAL
18050: IFTRUE 18054
18052: GO 18065
18054: POP
// bc_type := b_ext_radio ; 20 :
18055: LD_ADDR_OWVAR 42
18059: PUSH
18060: LD_INT 22
18062: ST_TO_ADDR
18063: GO 18351
18065: LD_INT 20
18067: DOUBLE
18068: EQUAL
18069: IFTRUE 18073
18071: GO 18084
18073: POP
// bc_type := b_ext_siberium ; 21 :
18074: LD_ADDR_OWVAR 42
18078: PUSH
18079: LD_INT 21
18081: ST_TO_ADDR
18082: GO 18351
18084: LD_INT 21
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18103
18092: POP
// bc_type := b_ext_computer ; 22 :
18093: LD_ADDR_OWVAR 42
18097: PUSH
18098: LD_INT 24
18100: ST_TO_ADDR
18101: GO 18351
18103: LD_INT 22
18105: DOUBLE
18106: EQUAL
18107: IFTRUE 18111
18109: GO 18122
18111: POP
// bc_type := b_ext_track ; 23 :
18112: LD_ADDR_OWVAR 42
18116: PUSH
18117: LD_INT 16
18119: ST_TO_ADDR
18120: GO 18351
18122: LD_INT 23
18124: DOUBLE
18125: EQUAL
18126: IFTRUE 18130
18128: GO 18141
18130: POP
// bc_type := b_ext_laser ; 24 :
18131: LD_ADDR_OWVAR 42
18135: PUSH
18136: LD_INT 25
18138: ST_TO_ADDR
18139: GO 18351
18141: LD_INT 24
18143: DOUBLE
18144: EQUAL
18145: IFTRUE 18149
18147: GO 18160
18149: POP
// bc_type := b_control_tower ; 25 :
18150: LD_ADDR_OWVAR 42
18154: PUSH
18155: LD_INT 36
18157: ST_TO_ADDR
18158: GO 18351
18160: LD_INT 25
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18168
18166: GO 18179
18168: POP
// bc_type := b_breastwork ; 26 :
18169: LD_ADDR_OWVAR 42
18173: PUSH
18174: LD_INT 31
18176: ST_TO_ADDR
18177: GO 18351
18179: LD_INT 26
18181: DOUBLE
18182: EQUAL
18183: IFTRUE 18187
18185: GO 18198
18187: POP
// bc_type := b_bunker ; 27 :
18188: LD_ADDR_OWVAR 42
18192: PUSH
18193: LD_INT 32
18195: ST_TO_ADDR
18196: GO 18351
18198: LD_INT 27
18200: DOUBLE
18201: EQUAL
18202: IFTRUE 18206
18204: GO 18217
18206: POP
// bc_type := b_turret ; 28 :
18207: LD_ADDR_OWVAR 42
18211: PUSH
18212: LD_INT 33
18214: ST_TO_ADDR
18215: GO 18351
18217: LD_INT 28
18219: DOUBLE
18220: EQUAL
18221: IFTRUE 18225
18223: GO 18236
18225: POP
// bc_type := b_armoury ; 29 :
18226: LD_ADDR_OWVAR 42
18230: PUSH
18231: LD_INT 4
18233: ST_TO_ADDR
18234: GO 18351
18236: LD_INT 29
18238: DOUBLE
18239: EQUAL
18240: IFTRUE 18244
18242: GO 18255
18244: POP
// bc_type := b_barracks ; 30 :
18245: LD_ADDR_OWVAR 42
18249: PUSH
18250: LD_INT 5
18252: ST_TO_ADDR
18253: GO 18351
18255: LD_INT 30
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18274
18263: POP
// bc_type := b_solar_power ; 31 :
18264: LD_ADDR_OWVAR 42
18268: PUSH
18269: LD_INT 27
18271: ST_TO_ADDR
18272: GO 18351
18274: LD_INT 31
18276: DOUBLE
18277: EQUAL
18278: IFTRUE 18282
18280: GO 18293
18282: POP
// bc_type := b_oil_power ; 32 :
18283: LD_ADDR_OWVAR 42
18287: PUSH
18288: LD_INT 26
18290: ST_TO_ADDR
18291: GO 18351
18293: LD_INT 32
18295: DOUBLE
18296: EQUAL
18297: IFTRUE 18301
18299: GO 18312
18301: POP
// bc_type := b_siberite_power ; 33 :
18302: LD_ADDR_OWVAR 42
18306: PUSH
18307: LD_INT 28
18309: ST_TO_ADDR
18310: GO 18351
18312: LD_INT 33
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18331
18320: POP
// bc_type := b_oil_mine ; 34 :
18321: LD_ADDR_OWVAR 42
18325: PUSH
18326: LD_INT 29
18328: ST_TO_ADDR
18329: GO 18351
18331: LD_INT 34
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18350
18339: POP
// bc_type := b_siberite_mine ; end ;
18340: LD_ADDR_OWVAR 42
18344: PUSH
18345: LD_INT 30
18347: ST_TO_ADDR
18348: GO 18351
18350: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18351: LD_ADDR_VAR 0 8
18355: PUSH
18356: LD_VAR 0 5
18360: PPUSH
18361: LD_VAR 0 6
18365: PPUSH
18366: LD_VAR 0 3
18370: PPUSH
18371: CALL_OW 47
18375: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18376: LD_OWVAR 42
18380: PUSH
18381: LD_INT 32
18383: PUSH
18384: LD_INT 33
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: IN
18391: IFFALSE 18407
// PlaceWeaponTurret ( b , weapon ) ;
18393: LD_VAR 0 8
18397: PPUSH
18398: LD_VAR 0 4
18402: PPUSH
18403: CALL_OW 431
// end ;
18407: LD_VAR 0 7
18411: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18418: LD_ADDR_VAR 0 4
18422: PUSH
18423: LD_INT 22
18425: PUSH
18426: LD_OWVAR 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 30
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 30
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 4
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18540
// for i in tmp do
18481: LD_ADDR_VAR 0 2
18485: PUSH
18486: LD_VAR 0 4
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18538
// for j = 1 to 3 do
18494: LD_ADDR_VAR 0 3
18498: PUSH
18499: DOUBLE
18500: LD_INT 1
18502: DEC
18503: ST_TO_ADDR
18504: LD_INT 3
18506: PUSH
18507: FOR_TO
18508: IFFALSE 18534
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18510: LD_VAR 0 2
18514: PPUSH
18515: CALL_OW 274
18519: PPUSH
18520: LD_VAR 0 3
18524: PPUSH
18525: LD_INT 99999
18527: PPUSH
18528: CALL_OW 277
18532: GO 18507
18534: POP
18535: POP
18536: GO 18491
18538: POP
18539: POP
// end ;
18540: LD_VAR 0 1
18544: RET
// export function hHackSetLevel10 ; var i , j ; begin
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
18549: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18550: LD_ADDR_VAR 0 2
18554: PUSH
18555: LD_INT 21
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 69
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18623
// if IsSelected ( i ) then
18573: LD_VAR 0 2
18577: PPUSH
18578: CALL_OW 306
18582: IFFALSE 18621
// begin for j := 1 to 4 do
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: DOUBLE
18590: LD_INT 1
18592: DEC
18593: ST_TO_ADDR
18594: LD_INT 4
18596: PUSH
18597: FOR_TO
18598: IFFALSE 18619
// SetSkill ( i , j , 10 ) ;
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: LD_INT 10
18612: PPUSH
18613: CALL_OW 237
18617: GO 18597
18619: POP
18620: POP
// end ;
18621: GO 18570
18623: POP
18624: POP
// end ;
18625: LD_VAR 0 1
18629: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18630: LD_INT 0
18632: PPUSH
18633: PPUSH
18634: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 21
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: PUSH
18671: FOR_IN
18672: IFFALSE 18713
// begin for j := 1 to 4 do
18674: LD_ADDR_VAR 0 3
18678: PUSH
18679: DOUBLE
18680: LD_INT 1
18682: DEC
18683: ST_TO_ADDR
18684: LD_INT 4
18686: PUSH
18687: FOR_TO
18688: IFFALSE 18709
// SetSkill ( i , j , 10 ) ;
18690: LD_VAR 0 2
18694: PPUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: LD_INT 10
18702: PPUSH
18703: CALL_OW 237
18707: GO 18687
18709: POP
18710: POP
// end ;
18711: GO 18671
18713: POP
18714: POP
// end ;
18715: LD_VAR 0 1
18719: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18720: LD_INT 0
18722: PPUSH
// uc_side := your_side ;
18723: LD_ADDR_OWVAR 20
18727: PUSH
18728: LD_OWVAR 2
18732: ST_TO_ADDR
// uc_nation := nation ;
18733: LD_ADDR_OWVAR 21
18737: PUSH
18738: LD_VAR 0 1
18742: ST_TO_ADDR
// InitHc ;
18743: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18747: LD_INT 0
18749: PPUSH
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18764: LD_VAR 0 4
18768: PPUSH
18769: LD_VAR 0 5
18773: PPUSH
18774: CALL_OW 428
18778: PUSH
18779: LD_INT 0
18781: EQUAL
18782: IFFALSE 18806
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18784: CALL_OW 44
18788: PPUSH
18789: LD_VAR 0 4
18793: PPUSH
18794: LD_VAR 0 5
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: CALL_OW 48
// end ;
18806: LD_VAR 0 6
18810: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
// uc_side := your_side ;
18815: LD_ADDR_OWVAR 20
18819: PUSH
18820: LD_OWVAR 2
18824: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18825: LD_VAR 0 1
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: LD_INT 4
18841: PUSH
18842: LD_INT 5
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: IN
18852: IFFALSE 18864
// uc_nation := nation_american else
18854: LD_ADDR_OWVAR 21
18858: PUSH
18859: LD_INT 1
18861: ST_TO_ADDR
18862: GO 18907
// if chassis in [ 11 , 12 , 13 , 14 ] then
18864: LD_VAR 0 1
18868: PUSH
18869: LD_INT 11
18871: PUSH
18872: LD_INT 12
18874: PUSH
18875: LD_INT 13
18877: PUSH
18878: LD_INT 14
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: IN
18887: IFFALSE 18899
// uc_nation := nation_arabian else
18889: LD_ADDR_OWVAR 21
18893: PUSH
18894: LD_INT 2
18896: ST_TO_ADDR
18897: GO 18907
// uc_nation := nation_russian ;
18899: LD_ADDR_OWVAR 21
18903: PUSH
18904: LD_INT 3
18906: ST_TO_ADDR
// vc_chassis := chassis ;
18907: LD_ADDR_OWVAR 37
18911: PUSH
18912: LD_VAR 0 1
18916: ST_TO_ADDR
// vc_engine := engine ;
18917: LD_ADDR_OWVAR 39
18921: PUSH
18922: LD_VAR 0 2
18926: ST_TO_ADDR
// vc_control := control ;
18927: LD_ADDR_OWVAR 38
18931: PUSH
18932: LD_VAR 0 3
18936: ST_TO_ADDR
// vc_weapon := weapon ;
18937: LD_ADDR_OWVAR 40
18941: PUSH
18942: LD_VAR 0 4
18946: ST_TO_ADDR
// un := CreateVehicle ;
18947: LD_ADDR_VAR 0 8
18951: PUSH
18952: CALL_OW 45
18956: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18957: LD_VAR 0 8
18961: PPUSH
18962: LD_INT 0
18964: PPUSH
18965: LD_INT 5
18967: PPUSH
18968: CALL_OW 12
18972: PPUSH
18973: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18977: LD_VAR 0 8
18981: PPUSH
18982: LD_VAR 0 5
18986: PPUSH
18987: LD_VAR 0 6
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 48
// end ;
18999: LD_VAR 0 7
19003: RET
// export hInvincible ; every 1 do
19004: GO 19006
19006: DISABLE
// hInvincible := [ ] ;
19007: LD_ADDR_EXP 73
19011: PUSH
19012: EMPTY
19013: ST_TO_ADDR
19014: END
// every 10 do var i ;
19015: GO 19017
19017: DISABLE
19018: LD_INT 0
19020: PPUSH
// begin enable ;
19021: ENABLE
// if not hInvincible then
19022: LD_EXP 73
19026: NOT
19027: IFFALSE 19031
// exit ;
19029: GO 19075
// for i in hInvincible do
19031: LD_ADDR_VAR 0 1
19035: PUSH
19036: LD_EXP 73
19040: PUSH
19041: FOR_IN
19042: IFFALSE 19073
// if GetLives ( i ) < 1000 then
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL_OW 256
19053: PUSH
19054: LD_INT 1000
19056: LESS
19057: IFFALSE 19071
// SetLives ( i , 1000 ) ;
19059: LD_VAR 0 1
19063: PPUSH
19064: LD_INT 1000
19066: PPUSH
19067: CALL_OW 234
19071: GO 19041
19073: POP
19074: POP
// end ;
19075: PPOPN 1
19077: END
// export function hHackInvincible ; var i ; begin
19078: LD_INT 0
19080: PPUSH
19081: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 21
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 21
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PUSH
19120: FOR_IN
19121: IFFALSE 19182
// if IsSelected ( i ) then
19123: LD_VAR 0 2
19127: PPUSH
19128: CALL_OW 306
19132: IFFALSE 19180
// begin if i in hInvincible then
19134: LD_VAR 0 2
19138: PUSH
19139: LD_EXP 73
19143: IN
19144: IFFALSE 19164
// hInvincible := hInvincible diff i else
19146: LD_ADDR_EXP 73
19150: PUSH
19151: LD_EXP 73
19155: PUSH
19156: LD_VAR 0 2
19160: DIFF
19161: ST_TO_ADDR
19162: GO 19180
// hInvincible := hInvincible union i ;
19164: LD_ADDR_EXP 73
19168: PUSH
19169: LD_EXP 73
19173: PUSH
19174: LD_VAR 0 2
19178: UNION
19179: ST_TO_ADDR
// end ;
19180: GO 19120
19182: POP
19183: POP
// end ;
19184: LD_VAR 0 1
19188: RET
// export function hHackInvisible ; var i , j ; begin
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
19193: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19239
// if IsSelected ( i ) then
19217: LD_VAR 0 2
19221: PPUSH
19222: CALL_OW 306
19226: IFFALSE 19237
// ComForceInvisible ( i ) ;
19228: LD_VAR 0 2
19232: PPUSH
19233: CALL_OW 496
19237: GO 19214
19239: POP
19240: POP
// end ;
19241: LD_VAR 0 1
19245: RET
// export function hHackChangeYourSide ; begin
19246: LD_INT 0
19248: PPUSH
// if your_side = 8 then
19249: LD_OWVAR 2
19253: PUSH
19254: LD_INT 8
19256: EQUAL
19257: IFFALSE 19269
// your_side := 0 else
19259: LD_ADDR_OWVAR 2
19263: PUSH
19264: LD_INT 0
19266: ST_TO_ADDR
19267: GO 19283
// your_side := your_side + 1 ;
19269: LD_ADDR_OWVAR 2
19273: PUSH
19274: LD_OWVAR 2
19278: PUSH
19279: LD_INT 1
19281: PLUS
19282: ST_TO_ADDR
// end ;
19283: LD_VAR 0 1
19287: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
19292: PPUSH
// for i in all_units do
19293: LD_ADDR_VAR 0 2
19297: PUSH
19298: LD_OWVAR 3
19302: PUSH
19303: FOR_IN
19304: IFFALSE 19382
// if IsSelected ( i ) then
19306: LD_VAR 0 2
19310: PPUSH
19311: CALL_OW 306
19315: IFFALSE 19380
// begin j := GetSide ( i ) ;
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: CALL_OW 255
19331: ST_TO_ADDR
// if j = 8 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 8
19339: EQUAL
19340: IFFALSE 19352
// j := 0 else
19342: LD_ADDR_VAR 0 3
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
19350: GO 19366
// j := j + 1 ;
19352: LD_ADDR_VAR 0 3
19356: PUSH
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 1
19364: PLUS
19365: ST_TO_ADDR
// SetSide ( i , j ) ;
19366: LD_VAR 0 2
19370: PPUSH
19371: LD_VAR 0 3
19375: PPUSH
19376: CALL_OW 235
// end ;
19380: GO 19303
19382: POP
19383: POP
// end ;
19384: LD_VAR 0 1
19388: RET
// export function hHackFog ; begin
19389: LD_INT 0
19391: PPUSH
// FogOff ( true ) ;
19392: LD_INT 1
19394: PPUSH
19395: CALL_OW 344
// end ;
19399: LD_VAR 0 1
19403: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19404: LD_INT 0
19406: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19407: LD_VAR 0 1
19411: PPUSH
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 483
// CenterOnXY ( x , y ) ;
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 84
// end ;
19446: LD_VAR 0 4
19450: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19451: LD_INT 0
19453: PPUSH
19454: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19455: LD_VAR 0 1
19459: NOT
19460: PUSH
19461: LD_VAR 0 2
19465: PPUSH
19466: LD_VAR 0 3
19470: PPUSH
19471: CALL_OW 488
19475: NOT
19476: OR
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_INT 3
19490: NONEQUAL
19491: PUSH
19492: LD_VAR 0 1
19496: PPUSH
19497: CALL_OW 247
19501: PUSH
19502: LD_INT 1
19504: EQUAL
19505: NOT
19506: AND
19507: OR
19508: IFFALSE 19512
// exit ;
19510: GO 19661
// if GetType ( factory ) = unit_human then
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 247
19521: PUSH
19522: LD_INT 1
19524: EQUAL
19525: IFFALSE 19542
// factory := IsInUnit ( factory ) ;
19527: LD_ADDR_VAR 0 1
19531: PUSH
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 310
19541: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 266
19551: PUSH
19552: LD_INT 3
19554: NONEQUAL
19555: IFFALSE 19559
// exit ;
19557: GO 19661
// if HexInfo ( x , y ) = factory then
19559: LD_VAR 0 2
19563: PPUSH
19564: LD_VAR 0 3
19568: PPUSH
19569: CALL_OW 428
19573: PUSH
19574: LD_VAR 0 1
19578: EQUAL
19579: IFFALSE 19606
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19581: LD_ADDR_EXP 74
19585: PUSH
19586: LD_EXP 74
19590: PPUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: LD_INT 0
19598: PPUSH
19599: CALL_OW 1
19603: ST_TO_ADDR
19604: GO 19657
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19606: LD_ADDR_EXP 74
19610: PUSH
19611: LD_EXP 74
19615: PPUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 255
19630: PUSH
19631: LD_VAR 0 1
19635: PUSH
19636: LD_VAR 0 2
19640: PUSH
19641: LD_VAR 0 3
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: PPUSH
19652: CALL_OW 1
19656: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19657: CALL 19666 0 0
// end ;
19661: LD_VAR 0 4
19665: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19666: LD_INT 0
19668: PPUSH
19669: PPUSH
19670: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19671: LD_STRING resetFactoryWaypoint();
19673: PPUSH
19674: CALL_OW 559
// if factoryWaypoints then
19678: LD_EXP 74
19682: IFFALSE 19808
// begin list := PrepareArray ( factoryWaypoints ) ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_EXP 74
19693: PPUSH
19694: CALL 66440 0 1
19698: ST_TO_ADDR
// for i := 1 to list do
19699: LD_ADDR_VAR 0 2
19703: PUSH
19704: DOUBLE
19705: LD_INT 1
19707: DEC
19708: ST_TO_ADDR
19709: LD_VAR 0 3
19713: PUSH
19714: FOR_TO
19715: IFFALSE 19806
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19717: LD_STRING setFactoryWaypointXY(
19719: PUSH
19720: LD_VAR 0 3
19724: PUSH
19725: LD_VAR 0 2
19729: ARRAY
19730: PUSH
19731: LD_INT 1
19733: ARRAY
19734: STR
19735: PUSH
19736: LD_STRING ,
19738: STR
19739: PUSH
19740: LD_VAR 0 3
19744: PUSH
19745: LD_VAR 0 2
19749: ARRAY
19750: PUSH
19751: LD_INT 2
19753: ARRAY
19754: STR
19755: PUSH
19756: LD_STRING ,
19758: STR
19759: PUSH
19760: LD_VAR 0 3
19764: PUSH
19765: LD_VAR 0 2
19769: ARRAY
19770: PUSH
19771: LD_INT 3
19773: ARRAY
19774: STR
19775: PUSH
19776: LD_STRING ,
19778: STR
19779: PUSH
19780: LD_VAR 0 3
19784: PUSH
19785: LD_VAR 0 2
19789: ARRAY
19790: PUSH
19791: LD_INT 4
19793: ARRAY
19794: STR
19795: PUSH
19796: LD_STRING )
19798: STR
19799: PPUSH
19800: CALL_OW 559
19804: GO 19714
19806: POP
19807: POP
// end ; end ;
19808: LD_VAR 0 1
19812: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19813: LD_INT 0
19815: PPUSH
// if HexInfo ( x , y ) = warehouse then
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: CALL_OW 428
19830: PUSH
19831: LD_VAR 0 1
19835: EQUAL
19836: IFFALSE 19863
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19838: LD_ADDR_EXP 75
19842: PUSH
19843: LD_EXP 75
19847: PPUSH
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: CALL_OW 1
19860: ST_TO_ADDR
19861: GO 19914
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19863: LD_ADDR_EXP 75
19867: PUSH
19868: LD_EXP 75
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: LD_VAR 0 1
19882: PPUSH
19883: CALL_OW 255
19887: PUSH
19888: LD_VAR 0 1
19892: PUSH
19893: LD_VAR 0 2
19897: PUSH
19898: LD_VAR 0 3
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 1
19913: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19914: CALL 19923 0 0
// end ;
19918: LD_VAR 0 4
19922: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19923: LD_INT 0
19925: PPUSH
19926: PPUSH
19927: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19928: LD_STRING resetWarehouseGatheringPoints();
19930: PPUSH
19931: CALL_OW 559
// if warehouseGatheringPoints then
19935: LD_EXP 75
19939: IFFALSE 20065
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_EXP 75
19950: PPUSH
19951: CALL 66440 0 1
19955: ST_TO_ADDR
// for i := 1 to list do
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: DOUBLE
19962: LD_INT 1
19964: DEC
19965: ST_TO_ADDR
19966: LD_VAR 0 3
19970: PUSH
19971: FOR_TO
19972: IFFALSE 20063
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19974: LD_STRING setWarehouseGatheringPointXY(
19976: PUSH
19977: LD_VAR 0 3
19981: PUSH
19982: LD_VAR 0 2
19986: ARRAY
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: STR
19992: PUSH
19993: LD_STRING ,
19995: STR
19996: PUSH
19997: LD_VAR 0 3
20001: PUSH
20002: LD_VAR 0 2
20006: ARRAY
20007: PUSH
20008: LD_INT 2
20010: ARRAY
20011: STR
20012: PUSH
20013: LD_STRING ,
20015: STR
20016: PUSH
20017: LD_VAR 0 3
20021: PUSH
20022: LD_VAR 0 2
20026: ARRAY
20027: PUSH
20028: LD_INT 3
20030: ARRAY
20031: STR
20032: PUSH
20033: LD_STRING ,
20035: STR
20036: PUSH
20037: LD_VAR 0 3
20041: PUSH
20042: LD_VAR 0 2
20046: ARRAY
20047: PUSH
20048: LD_INT 4
20050: ARRAY
20051: STR
20052: PUSH
20053: LD_STRING )
20055: STR
20056: PPUSH
20057: CALL_OW 559
20061: GO 19971
20063: POP
20064: POP
// end ; end ;
20065: LD_VAR 0 1
20069: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20070: LD_EXP 75
20074: IFFALSE 20759
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
20083: PPUSH
20084: PPUSH
20085: PPUSH
20086: PPUSH
20087: PPUSH
20088: PPUSH
20089: PPUSH
// begin enable ;
20090: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20091: LD_ADDR_VAR 0 3
20095: PUSH
20096: LD_EXP 75
20100: PPUSH
20101: CALL 66440 0 1
20105: ST_TO_ADDR
// if not list then
20106: LD_VAR 0 3
20110: NOT
20111: IFFALSE 20115
// exit ;
20113: GO 20759
// for i := 1 to list do
20115: LD_ADDR_VAR 0 1
20119: PUSH
20120: DOUBLE
20121: LD_INT 1
20123: DEC
20124: ST_TO_ADDR
20125: LD_VAR 0 3
20129: PUSH
20130: FOR_TO
20131: IFFALSE 20757
// begin depot := list [ i ] [ 2 ] ;
20133: LD_ADDR_VAR 0 8
20137: PUSH
20138: LD_VAR 0 3
20142: PUSH
20143: LD_VAR 0 1
20147: ARRAY
20148: PUSH
20149: LD_INT 2
20151: ARRAY
20152: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20153: LD_ADDR_VAR 0 5
20157: PUSH
20158: LD_VAR 0 3
20162: PUSH
20163: LD_VAR 0 1
20167: ARRAY
20168: PUSH
20169: LD_INT 1
20171: ARRAY
20172: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20173: LD_VAR 0 8
20177: PPUSH
20178: CALL_OW 301
20182: PUSH
20183: LD_VAR 0 5
20187: PUSH
20188: LD_VAR 0 8
20192: PPUSH
20193: CALL_OW 255
20197: NONEQUAL
20198: OR
20199: IFFALSE 20228
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20201: LD_ADDR_EXP 75
20205: PUSH
20206: LD_EXP 75
20210: PPUSH
20211: LD_VAR 0 8
20215: PPUSH
20216: LD_INT 0
20218: PPUSH
20219: CALL_OW 1
20223: ST_TO_ADDR
// exit ;
20224: POP
20225: POP
20226: GO 20759
// end ; x := list [ i ] [ 3 ] ;
20228: LD_ADDR_VAR 0 6
20232: PUSH
20233: LD_VAR 0 3
20237: PUSH
20238: LD_VAR 0 1
20242: ARRAY
20243: PUSH
20244: LD_INT 3
20246: ARRAY
20247: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20248: LD_ADDR_VAR 0 7
20252: PUSH
20253: LD_VAR 0 3
20257: PUSH
20258: LD_VAR 0 1
20262: ARRAY
20263: PUSH
20264: LD_INT 4
20266: ARRAY
20267: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20268: LD_ADDR_VAR 0 9
20272: PUSH
20273: LD_VAR 0 6
20277: PPUSH
20278: LD_VAR 0 7
20282: PPUSH
20283: LD_INT 16
20285: PPUSH
20286: CALL 65028 0 3
20290: ST_TO_ADDR
// if not cratesNearbyPoint then
20291: LD_VAR 0 9
20295: NOT
20296: IFFALSE 20302
// exit ;
20298: POP
20299: POP
20300: GO 20759
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20302: LD_ADDR_VAR 0 4
20306: PUSH
20307: LD_INT 22
20309: PUSH
20310: LD_VAR 0 5
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 3
20321: PUSH
20322: LD_INT 60
20324: PUSH
20325: EMPTY
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 91
20334: PUSH
20335: LD_VAR 0 8
20339: PUSH
20340: LD_INT 6
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: LD_INT 25
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 25
20363: PUSH
20364: LD_INT 16
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL_OW 69
20386: PUSH
20387: LD_VAR 0 8
20391: PPUSH
20392: CALL_OW 313
20396: PPUSH
20397: LD_INT 3
20399: PUSH
20400: LD_INT 60
20402: PUSH
20403: EMPTY
20404: LIST
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 25
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 16
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PPUSH
20442: CALL_OW 72
20446: UNION
20447: ST_TO_ADDR
// if tmp then
20448: LD_VAR 0 4
20452: IFFALSE 20532
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20454: LD_ADDR_VAR 0 4
20458: PUSH
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_INT 3
20466: PPUSH
20467: CALL 62997 0 2
20471: ST_TO_ADDR
// for j in tmp do
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: LD_VAR 0 4
20481: PUSH
20482: FOR_IN
20483: IFFALSE 20526
// begin if IsInUnit ( j ) then
20485: LD_VAR 0 2
20489: PPUSH
20490: CALL_OW 310
20494: IFFALSE 20505
// ComExit ( j ) ;
20496: LD_VAR 0 2
20500: PPUSH
20501: CALL 63080 0 1
// AddComCollect ( j , x , y ) ;
20505: LD_VAR 0 2
20509: PPUSH
20510: LD_VAR 0 6
20514: PPUSH
20515: LD_VAR 0 7
20519: PPUSH
20520: CALL_OW 177
// end ;
20524: GO 20482
20526: POP
20527: POP
// exit ;
20528: POP
20529: POP
20530: GO 20759
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: LD_INT 22
20539: PUSH
20540: LD_VAR 0 5
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 91
20551: PUSH
20552: LD_VAR 0 8
20556: PUSH
20557: LD_INT 8
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: LD_INT 34
20570: PUSH
20571: LD_INT 12
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 34
20580: PUSH
20581: LD_INT 51
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 34
20590: PUSH
20591: LD_INT 32
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 34
20600: PUSH
20601: LD_INT 89
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: PPUSH
20620: CALL_OW 69
20624: ST_TO_ADDR
// if tmp then
20625: LD_VAR 0 4
20629: IFFALSE 20755
// begin for j in tmp do
20631: LD_ADDR_VAR 0 2
20635: PUSH
20636: LD_VAR 0 4
20640: PUSH
20641: FOR_IN
20642: IFFALSE 20753
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL_OW 262
20653: PUSH
20654: LD_INT 3
20656: EQUAL
20657: PUSH
20658: LD_VAR 0 2
20662: PPUSH
20663: CALL_OW 261
20667: PUSH
20668: LD_INT 20
20670: GREATER
20671: OR
20672: PUSH
20673: LD_VAR 0 2
20677: PPUSH
20678: CALL_OW 314
20682: NOT
20683: AND
20684: PUSH
20685: LD_VAR 0 2
20689: PPUSH
20690: CALL_OW 263
20694: PUSH
20695: LD_INT 1
20697: NONEQUAL
20698: PUSH
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 311
20708: OR
20709: AND
20710: IFFALSE 20751
// begin ComCollect ( j , x , y ) ;
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 6
20721: PPUSH
20722: LD_VAR 0 7
20726: PPUSH
20727: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20731: LD_VAR 0 2
20735: PPUSH
20736: LD_VAR 0 8
20740: PPUSH
20741: CALL_OW 172
// exit ;
20745: POP
20746: POP
20747: POP
20748: POP
20749: GO 20759
// end ;
20751: GO 20641
20753: POP
20754: POP
// end ; end ;
20755: GO 20130
20757: POP
20758: POP
// end ; end_of_file
20759: PPOPN 9
20761: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20768: LD_VAR 0 1
20772: PPUSH
20773: CALL_OW 264
20777: PUSH
20778: LD_INT 91
20780: EQUAL
20781: IFFALSE 20853
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20783: LD_INT 68
20785: PPUSH
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 255
20795: PPUSH
20796: CALL_OW 321
20800: PUSH
20801: LD_INT 2
20803: EQUAL
20804: IFFALSE 20816
// eff := 70 else
20806: LD_ADDR_VAR 0 4
20810: PUSH
20811: LD_INT 70
20813: ST_TO_ADDR
20814: GO 20824
// eff := 30 ;
20816: LD_ADDR_VAR 0 4
20820: PUSH
20821: LD_INT 30
20823: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 250
20833: PPUSH
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 251
20843: PPUSH
20844: LD_VAR 0 4
20848: PPUSH
20849: CALL_OW 495
// end ; end ;
20853: LD_VAR 0 2
20857: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20858: LD_INT 0
20860: PPUSH
// end ;
20861: LD_VAR 0 4
20865: RET
// export function SOS_Command ( cmd ) ; begin
20866: LD_INT 0
20868: PPUSH
// end ;
20869: LD_VAR 0 2
20873: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20874: LD_INT 0
20876: PPUSH
// end ;
20877: LD_VAR 0 6
20881: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// if not vehicle or not factory then
20886: LD_VAR 0 1
20890: NOT
20891: PUSH
20892: LD_VAR 0 2
20896: NOT
20897: OR
20898: IFFALSE 20902
// exit ;
20900: GO 21133
// if factoryWaypoints >= factory then
20902: LD_EXP 74
20906: PUSH
20907: LD_VAR 0 2
20911: GREATEREQUAL
20912: IFFALSE 21133
// if factoryWaypoints [ factory ] then
20914: LD_EXP 74
20918: PUSH
20919: LD_VAR 0 2
20923: ARRAY
20924: IFFALSE 21133
// begin if GetControl ( vehicle ) = control_manual then
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 263
20935: PUSH
20936: LD_INT 1
20938: EQUAL
20939: IFFALSE 21020
// begin driver := IsDrivenBy ( vehicle ) ;
20941: LD_ADDR_VAR 0 4
20945: PUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 311
20955: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20956: LD_VAR 0 4
20960: PPUSH
20961: LD_EXP 74
20965: PUSH
20966: LD_VAR 0 2
20970: ARRAY
20971: PUSH
20972: LD_INT 3
20974: ARRAY
20975: PPUSH
20976: LD_EXP 74
20980: PUSH
20981: LD_VAR 0 2
20985: ARRAY
20986: PUSH
20987: LD_INT 4
20989: ARRAY
20990: PPUSH
20991: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20995: LD_VAR 0 4
20999: PPUSH
21000: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21004: LD_VAR 0 4
21008: PPUSH
21009: LD_VAR 0 2
21013: PPUSH
21014: CALL_OW 180
// end else
21018: GO 21133
// if GetControl ( vehicle ) = control_remote then
21020: LD_VAR 0 1
21024: PPUSH
21025: CALL_OW 263
21029: PUSH
21030: LD_INT 2
21032: EQUAL
21033: IFFALSE 21094
// begin wait ( 0 0$2 ) ;
21035: LD_INT 70
21037: PPUSH
21038: CALL_OW 67
// if Connect ( vehicle ) then
21042: LD_VAR 0 1
21046: PPUSH
21047: CALL 33320 0 1
21051: IFFALSE 21092
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21053: LD_VAR 0 1
21057: PPUSH
21058: LD_EXP 74
21062: PUSH
21063: LD_VAR 0 2
21067: ARRAY
21068: PUSH
21069: LD_INT 3
21071: ARRAY
21072: PPUSH
21073: LD_EXP 74
21077: PUSH
21078: LD_VAR 0 2
21082: ARRAY
21083: PUSH
21084: LD_INT 4
21086: ARRAY
21087: PPUSH
21088: CALL_OW 171
// end else
21092: GO 21133
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21094: LD_VAR 0 1
21098: PPUSH
21099: LD_EXP 74
21103: PUSH
21104: LD_VAR 0 2
21108: ARRAY
21109: PUSH
21110: LD_INT 3
21112: ARRAY
21113: PPUSH
21114: LD_EXP 74
21118: PUSH
21119: LD_VAR 0 2
21123: ARRAY
21124: PUSH
21125: LD_INT 4
21127: ARRAY
21128: PPUSH
21129: CALL_OW 171
// end ; end ;
21133: LD_VAR 0 3
21137: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21138: LD_INT 0
21140: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21141: LD_VAR 0 1
21145: PUSH
21146: LD_INT 250
21148: EQUAL
21149: PUSH
21150: LD_VAR 0 2
21154: PPUSH
21155: CALL_OW 264
21159: PUSH
21160: LD_INT 81
21162: EQUAL
21163: AND
21164: IFFALSE 21185
// MinerPlaceMine ( unit , x , y ) ;
21166: LD_VAR 0 2
21170: PPUSH
21171: LD_VAR 0 4
21175: PPUSH
21176: LD_VAR 0 5
21180: PPUSH
21181: CALL 23570 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21185: LD_VAR 0 1
21189: PUSH
21190: LD_INT 251
21192: EQUAL
21193: PUSH
21194: LD_VAR 0 2
21198: PPUSH
21199: CALL_OW 264
21203: PUSH
21204: LD_INT 81
21206: EQUAL
21207: AND
21208: IFFALSE 21229
// MinerDetonateMine ( unit , x , y ) ;
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 4
21219: PPUSH
21220: LD_VAR 0 5
21224: PPUSH
21225: CALL 23845 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21229: LD_VAR 0 1
21233: PUSH
21234: LD_INT 252
21236: EQUAL
21237: PUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: CALL_OW 264
21247: PUSH
21248: LD_INT 81
21250: EQUAL
21251: AND
21252: IFFALSE 21273
// MinerCreateMinefield ( unit , x , y ) ;
21254: LD_VAR 0 2
21258: PPUSH
21259: LD_VAR 0 4
21263: PPUSH
21264: LD_VAR 0 5
21268: PPUSH
21269: CALL 24262 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21273: LD_VAR 0 1
21277: PUSH
21278: LD_INT 253
21280: EQUAL
21281: PUSH
21282: LD_VAR 0 2
21286: PPUSH
21287: CALL_OW 257
21291: PUSH
21292: LD_INT 5
21294: EQUAL
21295: AND
21296: IFFALSE 21317
// ComBinocular ( unit , x , y ) ;
21298: LD_VAR 0 2
21302: PPUSH
21303: LD_VAR 0 4
21307: PPUSH
21308: LD_VAR 0 5
21312: PPUSH
21313: CALL 24631 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_INT 254
21324: EQUAL
21325: PUSH
21326: LD_VAR 0 2
21330: PPUSH
21331: CALL_OW 264
21335: PUSH
21336: LD_INT 99
21338: EQUAL
21339: AND
21340: PUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: CALL_OW 263
21350: PUSH
21351: LD_INT 3
21353: EQUAL
21354: AND
21355: IFFALSE 21371
// HackDestroyVehicle ( unit , selectedUnit ) ;
21357: LD_VAR 0 2
21361: PPUSH
21362: LD_VAR 0 3
21366: PPUSH
21367: CALL 22934 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21371: LD_VAR 0 1
21375: PUSH
21376: LD_INT 255
21378: EQUAL
21379: PUSH
21380: LD_VAR 0 2
21384: PPUSH
21385: CALL_OW 264
21389: PUSH
21390: LD_INT 14
21392: PUSH
21393: LD_INT 53
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: IN
21400: AND
21401: PUSH
21402: LD_VAR 0 4
21406: PPUSH
21407: LD_VAR 0 5
21411: PPUSH
21412: CALL_OW 488
21416: AND
21417: IFFALSE 21441
// CutTreeXYR ( unit , x , y , 12 ) ;
21419: LD_VAR 0 2
21423: PPUSH
21424: LD_VAR 0 4
21428: PPUSH
21429: LD_VAR 0 5
21433: PPUSH
21434: LD_INT 12
21436: PPUSH
21437: CALL 21504 0 4
// if cmd = 256 then
21441: LD_VAR 0 1
21445: PUSH
21446: LD_INT 256
21448: EQUAL
21449: IFFALSE 21470
// SetFactoryWaypoint ( unit , x , y ) ;
21451: LD_VAR 0 2
21455: PPUSH
21456: LD_VAR 0 4
21460: PPUSH
21461: LD_VAR 0 5
21465: PPUSH
21466: CALL 19451 0 3
// if cmd = 257 then
21470: LD_VAR 0 1
21474: PUSH
21475: LD_INT 257
21477: EQUAL
21478: IFFALSE 21499
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21480: LD_VAR 0 2
21484: PPUSH
21485: LD_VAR 0 4
21489: PPUSH
21490: LD_VAR 0 5
21494: PPUSH
21495: CALL 19813 0 3
// end ;
21499: LD_VAR 0 6
21503: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21504: LD_INT 0
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
21514: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21515: LD_VAR 0 1
21519: NOT
21520: PUSH
21521: LD_VAR 0 2
21525: PPUSH
21526: LD_VAR 0 3
21530: PPUSH
21531: CALL_OW 488
21535: NOT
21536: OR
21537: PUSH
21538: LD_VAR 0 4
21542: NOT
21543: OR
21544: IFFALSE 21548
// exit ;
21546: GO 21888
// list := [ ] ;
21548: LD_ADDR_VAR 0 13
21552: PUSH
21553: EMPTY
21554: ST_TO_ADDR
// if x - r < 0 then
21555: LD_VAR 0 2
21559: PUSH
21560: LD_VAR 0 4
21564: MINUS
21565: PUSH
21566: LD_INT 0
21568: LESS
21569: IFFALSE 21581
// min_x := 0 else
21571: LD_ADDR_VAR 0 7
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
21579: GO 21597
// min_x := x - r ;
21581: LD_ADDR_VAR 0 7
21585: PUSH
21586: LD_VAR 0 2
21590: PUSH
21591: LD_VAR 0 4
21595: MINUS
21596: ST_TO_ADDR
// if y - r < 0 then
21597: LD_VAR 0 3
21601: PUSH
21602: LD_VAR 0 4
21606: MINUS
21607: PUSH
21608: LD_INT 0
21610: LESS
21611: IFFALSE 21623
// min_y := 0 else
21613: LD_ADDR_VAR 0 8
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
21621: GO 21639
// min_y := y - r ;
21623: LD_ADDR_VAR 0 8
21627: PUSH
21628: LD_VAR 0 3
21632: PUSH
21633: LD_VAR 0 4
21637: MINUS
21638: ST_TO_ADDR
// max_x := x + r ;
21639: LD_ADDR_VAR 0 9
21643: PUSH
21644: LD_VAR 0 2
21648: PUSH
21649: LD_VAR 0 4
21653: PLUS
21654: ST_TO_ADDR
// max_y := y + r ;
21655: LD_ADDR_VAR 0 10
21659: PUSH
21660: LD_VAR 0 3
21664: PUSH
21665: LD_VAR 0 4
21669: PLUS
21670: ST_TO_ADDR
// for _x = min_x to max_x do
21671: LD_ADDR_VAR 0 11
21675: PUSH
21676: DOUBLE
21677: LD_VAR 0 7
21681: DEC
21682: ST_TO_ADDR
21683: LD_VAR 0 9
21687: PUSH
21688: FOR_TO
21689: IFFALSE 21806
// for _y = min_y to max_y do
21691: LD_ADDR_VAR 0 12
21695: PUSH
21696: DOUBLE
21697: LD_VAR 0 8
21701: DEC
21702: ST_TO_ADDR
21703: LD_VAR 0 10
21707: PUSH
21708: FOR_TO
21709: IFFALSE 21802
// begin if not ValidHex ( _x , _y ) then
21711: LD_VAR 0 11
21715: PPUSH
21716: LD_VAR 0 12
21720: PPUSH
21721: CALL_OW 488
21725: NOT
21726: IFFALSE 21730
// continue ;
21728: GO 21708
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21730: LD_VAR 0 11
21734: PPUSH
21735: LD_VAR 0 12
21739: PPUSH
21740: CALL_OW 351
21744: PUSH
21745: LD_VAR 0 11
21749: PPUSH
21750: LD_VAR 0 12
21754: PPUSH
21755: CALL_OW 554
21759: AND
21760: IFFALSE 21800
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21762: LD_ADDR_VAR 0 13
21766: PUSH
21767: LD_VAR 0 13
21771: PPUSH
21772: LD_VAR 0 13
21776: PUSH
21777: LD_INT 1
21779: PLUS
21780: PPUSH
21781: LD_VAR 0 11
21785: PUSH
21786: LD_VAR 0 12
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 2
21799: ST_TO_ADDR
// end ;
21800: GO 21708
21802: POP
21803: POP
21804: GO 21688
21806: POP
21807: POP
// if not list then
21808: LD_VAR 0 13
21812: NOT
21813: IFFALSE 21817
// exit ;
21815: GO 21888
// for i in list do
21817: LD_ADDR_VAR 0 6
21821: PUSH
21822: LD_VAR 0 13
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21886
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_STRING M
21837: PUSH
21838: LD_VAR 0 6
21842: PUSH
21843: LD_INT 1
21845: ARRAY
21846: PUSH
21847: LD_VAR 0 6
21851: PUSH
21852: LD_INT 2
21854: ARRAY
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: PPUSH
21880: CALL_OW 447
21884: GO 21827
21886: POP
21887: POP
// end ;
21888: LD_VAR 0 5
21892: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21893: LD_EXP 77
21897: NOT
21898: IFFALSE 21948
21900: GO 21902
21902: DISABLE
// begin initHack := true ;
21903: LD_ADDR_EXP 77
21907: PUSH
21908: LD_INT 1
21910: ST_TO_ADDR
// hackTanks := [ ] ;
21911: LD_ADDR_EXP 78
21915: PUSH
21916: EMPTY
21917: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21918: LD_ADDR_EXP 79
21922: PUSH
21923: EMPTY
21924: ST_TO_ADDR
// hackLimit := 3 ;
21925: LD_ADDR_EXP 80
21929: PUSH
21930: LD_INT 3
21932: ST_TO_ADDR
// hackDist := 12 ;
21933: LD_ADDR_EXP 81
21937: PUSH
21938: LD_INT 12
21940: ST_TO_ADDR
// hackCounter := [ ] ;
21941: LD_ADDR_EXP 82
21945: PUSH
21946: EMPTY
21947: ST_TO_ADDR
// end ;
21948: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21949: LD_EXP 77
21953: PUSH
21954: LD_INT 34
21956: PUSH
21957: LD_INT 99
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: CALL_OW 69
21968: AND
21969: IFFALSE 22222
21971: GO 21973
21973: DISABLE
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
// begin enable ;
21978: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21979: LD_ADDR_VAR 0 1
21983: PUSH
21984: LD_INT 34
21986: PUSH
21987: LD_INT 99
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 69
21998: PUSH
21999: FOR_IN
22000: IFFALSE 22220
// begin if not i in hackTanks then
22002: LD_VAR 0 1
22006: PUSH
22007: LD_EXP 78
22011: IN
22012: NOT
22013: IFFALSE 22096
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22015: LD_ADDR_EXP 78
22019: PUSH
22020: LD_EXP 78
22024: PPUSH
22025: LD_EXP 78
22029: PUSH
22030: LD_INT 1
22032: PLUS
22033: PPUSH
22034: LD_VAR 0 1
22038: PPUSH
22039: CALL_OW 1
22043: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22044: LD_ADDR_EXP 79
22048: PUSH
22049: LD_EXP 79
22053: PPUSH
22054: LD_EXP 79
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: PPUSH
22063: EMPTY
22064: PPUSH
22065: CALL_OW 1
22069: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22070: LD_ADDR_EXP 82
22074: PUSH
22075: LD_EXP 82
22079: PPUSH
22080: LD_EXP 82
22084: PUSH
22085: LD_INT 1
22087: PLUS
22088: PPUSH
22089: EMPTY
22090: PPUSH
22091: CALL_OW 1
22095: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 302
22105: NOT
22106: IFFALSE 22119
// begin HackUnlinkAll ( i ) ;
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL 22225 0 1
// continue ;
22117: GO 21999
// end ; HackCheckCapturedStatus ( i ) ;
22119: LD_VAR 0 1
22123: PPUSH
22124: CALL 22668 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22128: LD_ADDR_VAR 0 2
22132: PUSH
22133: LD_INT 81
22135: PUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 255
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 33
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 91
22162: PUSH
22163: LD_VAR 0 1
22167: PUSH
22168: LD_EXP 81
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 50
22180: PUSH
22181: EMPTY
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: PPUSH
22190: CALL_OW 69
22194: ST_TO_ADDR
// if not tmp then
22195: LD_VAR 0 2
22199: NOT
22200: IFFALSE 22204
// continue ;
22202: GO 21999
// HackLink ( i , tmp ) ;
22204: LD_VAR 0 1
22208: PPUSH
22209: LD_VAR 0 2
22213: PPUSH
22214: CALL 22361 0 2
// end ;
22218: GO 21999
22220: POP
22221: POP
// end ;
22222: PPOPN 2
22224: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22225: LD_INT 0
22227: PPUSH
22228: PPUSH
22229: PPUSH
// if not hack in hackTanks then
22230: LD_VAR 0 1
22234: PUSH
22235: LD_EXP 78
22239: IN
22240: NOT
22241: IFFALSE 22245
// exit ;
22243: GO 22356
// index := GetElementIndex ( hackTanks , hack ) ;
22245: LD_ADDR_VAR 0 4
22249: PUSH
22250: LD_EXP 78
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL 30136 0 2
22264: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22265: LD_EXP 79
22269: PUSH
22270: LD_VAR 0 4
22274: ARRAY
22275: IFFALSE 22356
// begin for i in hackTanksCaptured [ index ] do
22277: LD_ADDR_VAR 0 3
22281: PUSH
22282: LD_EXP 79
22286: PUSH
22287: LD_VAR 0 4
22291: ARRAY
22292: PUSH
22293: FOR_IN
22294: IFFALSE 22320
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22296: LD_VAR 0 3
22300: PUSH
22301: LD_INT 1
22303: ARRAY
22304: PPUSH
22305: LD_VAR 0 3
22309: PUSH
22310: LD_INT 2
22312: ARRAY
22313: PPUSH
22314: CALL_OW 235
22318: GO 22293
22320: POP
22321: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22322: LD_ADDR_EXP 79
22326: PUSH
22327: LD_EXP 79
22331: PPUSH
22332: LD_VAR 0 4
22336: PPUSH
22337: EMPTY
22338: PPUSH
22339: CALL_OW 1
22343: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22344: LD_VAR 0 1
22348: PPUSH
22349: LD_INT 0
22351: PPUSH
22352: CALL_OW 505
// end ; end ;
22356: LD_VAR 0 2
22360: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22361: LD_INT 0
22363: PPUSH
22364: PPUSH
22365: PPUSH
// if not hack in hackTanks or not vehicles then
22366: LD_VAR 0 1
22370: PUSH
22371: LD_EXP 78
22375: IN
22376: NOT
22377: PUSH
22378: LD_VAR 0 2
22382: NOT
22383: OR
22384: IFFALSE 22388
// exit ;
22386: GO 22663
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: LD_VAR 0 1
22397: PPUSH
22398: LD_VAR 0 2
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: LD_INT 1
22408: PPUSH
22409: CALL 30786 0 4
22413: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22414: LD_ADDR_VAR 0 5
22418: PUSH
22419: LD_EXP 78
22423: PPUSH
22424: LD_VAR 0 1
22428: PPUSH
22429: CALL 30136 0 2
22433: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22434: LD_EXP 79
22438: PUSH
22439: LD_VAR 0 5
22443: ARRAY
22444: PUSH
22445: LD_EXP 80
22449: LESS
22450: IFFALSE 22639
// begin for i := 1 to vehicles do
22452: LD_ADDR_VAR 0 4
22456: PUSH
22457: DOUBLE
22458: LD_INT 1
22460: DEC
22461: ST_TO_ADDR
22462: LD_VAR 0 2
22466: PUSH
22467: FOR_TO
22468: IFFALSE 22637
// begin if hackTanksCaptured [ index ] = hackLimit then
22470: LD_EXP 79
22474: PUSH
22475: LD_VAR 0 5
22479: ARRAY
22480: PUSH
22481: LD_EXP 80
22485: EQUAL
22486: IFFALSE 22490
// break ;
22488: GO 22637
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22490: LD_ADDR_EXP 82
22494: PUSH
22495: LD_EXP 82
22499: PPUSH
22500: LD_VAR 0 5
22504: PPUSH
22505: LD_EXP 82
22509: PUSH
22510: LD_VAR 0 5
22514: ARRAY
22515: PUSH
22516: LD_INT 1
22518: PLUS
22519: PPUSH
22520: CALL_OW 1
22524: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22525: LD_ADDR_EXP 79
22529: PUSH
22530: LD_EXP 79
22534: PPUSH
22535: LD_VAR 0 5
22539: PUSH
22540: LD_EXP 79
22544: PUSH
22545: LD_VAR 0 5
22549: ARRAY
22550: PUSH
22551: LD_INT 1
22553: PLUS
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PPUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_VAR 0 4
22568: ARRAY
22569: PUSH
22570: LD_VAR 0 2
22574: PUSH
22575: LD_VAR 0 4
22579: ARRAY
22580: PPUSH
22581: CALL_OW 255
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PPUSH
22590: CALL 30351 0 3
22594: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22595: LD_VAR 0 2
22599: PUSH
22600: LD_VAR 0 4
22604: ARRAY
22605: PPUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 255
22615: PPUSH
22616: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22620: LD_VAR 0 2
22624: PUSH
22625: LD_VAR 0 4
22629: ARRAY
22630: PPUSH
22631: CALL_OW 141
// end ;
22635: GO 22467
22637: POP
22638: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22639: LD_VAR 0 1
22643: PPUSH
22644: LD_EXP 79
22648: PUSH
22649: LD_VAR 0 5
22653: ARRAY
22654: PUSH
22655: LD_INT 0
22657: PLUS
22658: PPUSH
22659: CALL_OW 505
// end ;
22663: LD_VAR 0 3
22667: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
// if not hack in hackTanks then
22674: LD_VAR 0 1
22678: PUSH
22679: LD_EXP 78
22683: IN
22684: NOT
22685: IFFALSE 22689
// exit ;
22687: GO 22929
// index := GetElementIndex ( hackTanks , hack ) ;
22689: LD_ADDR_VAR 0 4
22693: PUSH
22694: LD_EXP 78
22698: PPUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL 30136 0 2
22708: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: DOUBLE
22715: LD_EXP 79
22719: PUSH
22720: LD_VAR 0 4
22724: ARRAY
22725: INC
22726: ST_TO_ADDR
22727: LD_INT 1
22729: PUSH
22730: FOR_DOWNTO
22731: IFFALSE 22903
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22733: LD_ADDR_VAR 0 5
22737: PUSH
22738: LD_EXP 79
22742: PUSH
22743: LD_VAR 0 4
22747: ARRAY
22748: PUSH
22749: LD_VAR 0 3
22753: ARRAY
22754: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22755: LD_VAR 0 5
22759: PUSH
22760: LD_INT 1
22762: ARRAY
22763: PPUSH
22764: CALL_OW 302
22768: NOT
22769: PUSH
22770: LD_VAR 0 5
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: CALL_OW 255
22783: PUSH
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 255
22793: NONEQUAL
22794: OR
22795: IFFALSE 22901
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22797: LD_VAR 0 5
22801: PUSH
22802: LD_INT 1
22804: ARRAY
22805: PPUSH
22806: CALL_OW 305
22810: PUSH
22811: LD_VAR 0 5
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: CALL_OW 255
22824: PUSH
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 255
22834: EQUAL
22835: AND
22836: IFFALSE 22860
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22838: LD_VAR 0 5
22842: PUSH
22843: LD_INT 1
22845: ARRAY
22846: PPUSH
22847: LD_VAR 0 5
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: PPUSH
22856: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22860: LD_ADDR_EXP 79
22864: PUSH
22865: LD_EXP 79
22869: PPUSH
22870: LD_VAR 0 4
22874: PPUSH
22875: LD_EXP 79
22879: PUSH
22880: LD_VAR 0 4
22884: ARRAY
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: CALL_OW 3
22895: PPUSH
22896: CALL_OW 1
22900: ST_TO_ADDR
// end ; end ;
22901: GO 22730
22903: POP
22904: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22905: LD_VAR 0 1
22909: PPUSH
22910: LD_EXP 79
22914: PUSH
22915: LD_VAR 0 4
22919: ARRAY
22920: PUSH
22921: LD_INT 0
22923: PLUS
22924: PPUSH
22925: CALL_OW 505
// end ;
22929: LD_VAR 0 2
22933: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22934: LD_INT 0
22936: PPUSH
22937: PPUSH
22938: PPUSH
22939: PPUSH
// if not hack in hackTanks then
22940: LD_VAR 0 1
22944: PUSH
22945: LD_EXP 78
22949: IN
22950: NOT
22951: IFFALSE 22955
// exit ;
22953: GO 23040
// index := GetElementIndex ( hackTanks , hack ) ;
22955: LD_ADDR_VAR 0 5
22959: PUSH
22960: LD_EXP 78
22964: PPUSH
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL 30136 0 2
22974: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22975: LD_ADDR_VAR 0 4
22979: PUSH
22980: DOUBLE
22981: LD_INT 1
22983: DEC
22984: ST_TO_ADDR
22985: LD_EXP 79
22989: PUSH
22990: LD_VAR 0 5
22994: ARRAY
22995: PUSH
22996: FOR_TO
22997: IFFALSE 23038
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22999: LD_EXP 79
23003: PUSH
23004: LD_VAR 0 5
23008: ARRAY
23009: PUSH
23010: LD_VAR 0 4
23014: ARRAY
23015: PUSH
23016: LD_INT 1
23018: ARRAY
23019: PUSH
23020: LD_VAR 0 2
23024: EQUAL
23025: IFFALSE 23036
// KillUnit ( vehicle ) ;
23027: LD_VAR 0 2
23031: PPUSH
23032: CALL_OW 66
23036: GO 22996
23038: POP
23039: POP
// end ;
23040: LD_VAR 0 3
23044: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23045: LD_EXP 83
23049: NOT
23050: IFFALSE 23085
23052: GO 23054
23054: DISABLE
// begin initMiner := true ;
23055: LD_ADDR_EXP 83
23059: PUSH
23060: LD_INT 1
23062: ST_TO_ADDR
// minersList := [ ] ;
23063: LD_ADDR_EXP 84
23067: PUSH
23068: EMPTY
23069: ST_TO_ADDR
// minerMinesList := [ ] ;
23070: LD_ADDR_EXP 85
23074: PUSH
23075: EMPTY
23076: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23077: LD_ADDR_EXP 86
23081: PUSH
23082: LD_INT 5
23084: ST_TO_ADDR
// end ;
23085: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23086: LD_EXP 83
23090: PUSH
23091: LD_INT 34
23093: PUSH
23094: LD_INT 81
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: AND
23106: IFFALSE 23567
23108: GO 23110
23110: DISABLE
23111: LD_INT 0
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
// begin enable ;
23117: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23118: LD_ADDR_VAR 0 1
23122: PUSH
23123: LD_INT 34
23125: PUSH
23126: LD_INT 81
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 69
23137: PUSH
23138: FOR_IN
23139: IFFALSE 23211
// begin if not i in minersList then
23141: LD_VAR 0 1
23145: PUSH
23146: LD_EXP 84
23150: IN
23151: NOT
23152: IFFALSE 23209
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23154: LD_ADDR_EXP 84
23158: PUSH
23159: LD_EXP 84
23163: PPUSH
23164: LD_EXP 84
23168: PUSH
23169: LD_INT 1
23171: PLUS
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 1
23182: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23183: LD_ADDR_EXP 85
23187: PUSH
23188: LD_EXP 85
23192: PPUSH
23193: LD_EXP 85
23197: PUSH
23198: LD_INT 1
23200: PLUS
23201: PPUSH
23202: EMPTY
23203: PPUSH
23204: CALL_OW 1
23208: ST_TO_ADDR
// end end ;
23209: GO 23138
23211: POP
23212: POP
// for i := minerMinesList downto 1 do
23213: LD_ADDR_VAR 0 1
23217: PUSH
23218: DOUBLE
23219: LD_EXP 85
23223: INC
23224: ST_TO_ADDR
23225: LD_INT 1
23227: PUSH
23228: FOR_DOWNTO
23229: IFFALSE 23565
// begin if IsLive ( minersList [ i ] ) then
23231: LD_EXP 84
23235: PUSH
23236: LD_VAR 0 1
23240: ARRAY
23241: PPUSH
23242: CALL_OW 300
23246: IFFALSE 23274
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23248: LD_EXP 84
23252: PUSH
23253: LD_VAR 0 1
23257: ARRAY
23258: PPUSH
23259: LD_EXP 85
23263: PUSH
23264: LD_VAR 0 1
23268: ARRAY
23269: PPUSH
23270: CALL_OW 505
// if not minerMinesList [ i ] then
23274: LD_EXP 85
23278: PUSH
23279: LD_VAR 0 1
23283: ARRAY
23284: NOT
23285: IFFALSE 23289
// continue ;
23287: GO 23228
// for j := minerMinesList [ i ] downto 1 do
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: DOUBLE
23295: LD_EXP 85
23299: PUSH
23300: LD_VAR 0 1
23304: ARRAY
23305: INC
23306: ST_TO_ADDR
23307: LD_INT 1
23309: PUSH
23310: FOR_DOWNTO
23311: IFFALSE 23561
// begin side := GetSide ( minersList [ i ] ) ;
23313: LD_ADDR_VAR 0 3
23317: PUSH
23318: LD_EXP 84
23322: PUSH
23323: LD_VAR 0 1
23327: ARRAY
23328: PPUSH
23329: CALL_OW 255
23333: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23334: LD_ADDR_VAR 0 4
23338: PUSH
23339: LD_EXP 85
23343: PUSH
23344: LD_VAR 0 1
23348: ARRAY
23349: PUSH
23350: LD_VAR 0 2
23354: ARRAY
23355: PUSH
23356: LD_INT 1
23358: ARRAY
23359: PPUSH
23360: LD_EXP 85
23364: PUSH
23365: LD_VAR 0 1
23369: ARRAY
23370: PUSH
23371: LD_VAR 0 2
23375: ARRAY
23376: PUSH
23377: LD_INT 2
23379: ARRAY
23380: PPUSH
23381: CALL_OW 428
23385: ST_TO_ADDR
// if not tmp then
23386: LD_VAR 0 4
23390: NOT
23391: IFFALSE 23395
// continue ;
23393: GO 23310
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23395: LD_VAR 0 4
23399: PUSH
23400: LD_INT 81
23402: PUSH
23403: LD_VAR 0 3
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PPUSH
23412: CALL_OW 69
23416: IN
23417: PUSH
23418: LD_EXP 85
23422: PUSH
23423: LD_VAR 0 1
23427: ARRAY
23428: PUSH
23429: LD_VAR 0 2
23433: ARRAY
23434: PUSH
23435: LD_INT 1
23437: ARRAY
23438: PPUSH
23439: LD_EXP 85
23443: PUSH
23444: LD_VAR 0 1
23448: ARRAY
23449: PUSH
23450: LD_VAR 0 2
23454: ARRAY
23455: PUSH
23456: LD_INT 2
23458: ARRAY
23459: PPUSH
23460: CALL_OW 458
23464: AND
23465: IFFALSE 23559
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23467: LD_EXP 85
23471: PUSH
23472: LD_VAR 0 1
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 2
23482: ARRAY
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PPUSH
23488: LD_EXP 85
23492: PUSH
23493: LD_VAR 0 1
23497: ARRAY
23498: PUSH
23499: LD_VAR 0 2
23503: ARRAY
23504: PUSH
23505: LD_INT 2
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23518: LD_ADDR_EXP 85
23522: PUSH
23523: LD_EXP 85
23527: PPUSH
23528: LD_VAR 0 1
23532: PPUSH
23533: LD_EXP 85
23537: PUSH
23538: LD_VAR 0 1
23542: ARRAY
23543: PPUSH
23544: LD_VAR 0 2
23548: PPUSH
23549: CALL_OW 3
23553: PPUSH
23554: CALL_OW 1
23558: ST_TO_ADDR
// end ; end ;
23559: GO 23310
23561: POP
23562: POP
// end ;
23563: GO 23228
23565: POP
23566: POP
// end ;
23567: PPOPN 4
23569: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
// result := false ;
23574: LD_ADDR_VAR 0 4
23578: PUSH
23579: LD_INT 0
23581: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23582: LD_VAR 0 1
23586: PPUSH
23587: CALL_OW 264
23591: PUSH
23592: LD_INT 81
23594: EQUAL
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23840
// index := GetElementIndex ( minersList , unit ) ;
23600: LD_ADDR_VAR 0 5
23604: PUSH
23605: LD_EXP 84
23609: PPUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL 30136 0 2
23619: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23620: LD_EXP 85
23624: PUSH
23625: LD_VAR 0 5
23629: ARRAY
23630: PUSH
23631: LD_EXP 86
23635: GREATEREQUAL
23636: IFFALSE 23640
// exit ;
23638: GO 23840
// ComMoveXY ( unit , x , y ) ;
23640: LD_VAR 0 1
23644: PPUSH
23645: LD_VAR 0 2
23649: PPUSH
23650: LD_VAR 0 3
23654: PPUSH
23655: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23659: LD_INT 35
23661: PPUSH
23662: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23666: LD_VAR 0 1
23670: PPUSH
23671: LD_VAR 0 2
23675: PPUSH
23676: LD_VAR 0 3
23680: PPUSH
23681: CALL 61491 0 3
23685: NOT
23686: PUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 314
23696: AND
23697: IFFALSE 23701
// exit ;
23699: GO 23840
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_VAR 0 3
23710: PPUSH
23711: CALL_OW 428
23715: PUSH
23716: LD_VAR 0 1
23720: EQUAL
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 314
23731: NOT
23732: AND
23733: IFFALSE 23659
// PlaySoundXY ( x , y , PlantMine ) ;
23735: LD_VAR 0 2
23739: PPUSH
23740: LD_VAR 0 3
23744: PPUSH
23745: LD_STRING PlantMine
23747: PPUSH
23748: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: LD_VAR 0 3
23761: PPUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 255
23771: PPUSH
23772: LD_INT 0
23774: PPUSH
23775: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23779: LD_ADDR_EXP 85
23783: PUSH
23784: LD_EXP 85
23788: PPUSH
23789: LD_VAR 0 5
23793: PUSH
23794: LD_EXP 85
23798: PUSH
23799: LD_VAR 0 5
23803: ARRAY
23804: PUSH
23805: LD_INT 1
23807: PLUS
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: LD_VAR 0 2
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PPUSH
23827: CALL 30351 0 3
23831: ST_TO_ADDR
// result := true ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_INT 1
23839: ST_TO_ADDR
// end ;
23840: LD_VAR 0 4
23844: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23845: LD_INT 0
23847: PPUSH
23848: PPUSH
23849: PPUSH
// if not unit in minersList then
23850: LD_VAR 0 1
23854: PUSH
23855: LD_EXP 84
23859: IN
23860: NOT
23861: IFFALSE 23865
// exit ;
23863: GO 24257
// index := GetElementIndex ( minersList , unit ) ;
23865: LD_ADDR_VAR 0 6
23869: PUSH
23870: LD_EXP 84
23874: PPUSH
23875: LD_VAR 0 1
23879: PPUSH
23880: CALL 30136 0 2
23884: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23885: LD_ADDR_VAR 0 5
23889: PUSH
23890: DOUBLE
23891: LD_EXP 85
23895: PUSH
23896: LD_VAR 0 6
23900: ARRAY
23901: INC
23902: ST_TO_ADDR
23903: LD_INT 1
23905: PUSH
23906: FOR_DOWNTO
23907: IFFALSE 24068
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23909: LD_EXP 85
23913: PUSH
23914: LD_VAR 0 6
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 5
23924: ARRAY
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: PUSH
23930: LD_VAR 0 2
23934: EQUAL
23935: PUSH
23936: LD_EXP 85
23940: PUSH
23941: LD_VAR 0 6
23945: ARRAY
23946: PUSH
23947: LD_VAR 0 5
23951: ARRAY
23952: PUSH
23953: LD_INT 2
23955: ARRAY
23956: PUSH
23957: LD_VAR 0 3
23961: EQUAL
23962: AND
23963: IFFALSE 24066
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23965: LD_EXP 85
23969: PUSH
23970: LD_VAR 0 6
23974: ARRAY
23975: PUSH
23976: LD_VAR 0 5
23980: ARRAY
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PPUSH
23986: LD_EXP 85
23990: PUSH
23991: LD_VAR 0 6
23995: ARRAY
23996: PUSH
23997: LD_VAR 0 5
24001: ARRAY
24002: PUSH
24003: LD_INT 2
24005: ARRAY
24006: PPUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 255
24016: PPUSH
24017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24021: LD_ADDR_EXP 85
24025: PUSH
24026: LD_EXP 85
24030: PPUSH
24031: LD_VAR 0 6
24035: PPUSH
24036: LD_EXP 85
24040: PUSH
24041: LD_VAR 0 6
24045: ARRAY
24046: PPUSH
24047: LD_VAR 0 5
24051: PPUSH
24052: CALL_OW 3
24056: PPUSH
24057: CALL_OW 1
24061: ST_TO_ADDR
// exit ;
24062: POP
24063: POP
24064: GO 24257
// end ; end ;
24066: GO 23906
24068: POP
24069: POP
// for i := minerMinesList [ index ] downto 1 do
24070: LD_ADDR_VAR 0 5
24074: PUSH
24075: DOUBLE
24076: LD_EXP 85
24080: PUSH
24081: LD_VAR 0 6
24085: ARRAY
24086: INC
24087: ST_TO_ADDR
24088: LD_INT 1
24090: PUSH
24091: FOR_DOWNTO
24092: IFFALSE 24255
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24094: LD_EXP 85
24098: PUSH
24099: LD_VAR 0 6
24103: ARRAY
24104: PUSH
24105: LD_VAR 0 5
24109: ARRAY
24110: PUSH
24111: LD_INT 1
24113: ARRAY
24114: PPUSH
24115: LD_EXP 85
24119: PUSH
24120: LD_VAR 0 6
24124: ARRAY
24125: PUSH
24126: LD_VAR 0 5
24130: ARRAY
24131: PUSH
24132: LD_INT 2
24134: ARRAY
24135: PPUSH
24136: LD_VAR 0 2
24140: PPUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: CALL_OW 298
24150: PUSH
24151: LD_INT 6
24153: LESS
24154: IFFALSE 24253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24156: LD_EXP 85
24160: PUSH
24161: LD_VAR 0 6
24165: ARRAY
24166: PUSH
24167: LD_VAR 0 5
24171: ARRAY
24172: PUSH
24173: LD_INT 1
24175: ARRAY
24176: PPUSH
24177: LD_EXP 85
24181: PUSH
24182: LD_VAR 0 6
24186: ARRAY
24187: PUSH
24188: LD_VAR 0 5
24192: ARRAY
24193: PUSH
24194: LD_INT 2
24196: ARRAY
24197: PPUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 255
24207: PPUSH
24208: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24212: LD_ADDR_EXP 85
24216: PUSH
24217: LD_EXP 85
24221: PPUSH
24222: LD_VAR 0 6
24226: PPUSH
24227: LD_EXP 85
24231: PUSH
24232: LD_VAR 0 6
24236: ARRAY
24237: PPUSH
24238: LD_VAR 0 5
24242: PPUSH
24243: CALL_OW 3
24247: PPUSH
24248: CALL_OW 1
24252: ST_TO_ADDR
// end ; end ;
24253: GO 24091
24255: POP
24256: POP
// end ;
24257: LD_VAR 0 4
24261: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24262: LD_INT 0
24264: PPUSH
24265: PPUSH
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 264
24282: PUSH
24283: LD_INT 81
24285: EQUAL
24286: NOT
24287: PUSH
24288: LD_VAR 0 1
24292: PUSH
24293: LD_EXP 84
24297: IN
24298: NOT
24299: OR
24300: IFFALSE 24304
// exit ;
24302: GO 24626
// index := GetElementIndex ( minersList , unit ) ;
24304: LD_ADDR_VAR 0 6
24308: PUSH
24309: LD_EXP 84
24313: PPUSH
24314: LD_VAR 0 1
24318: PPUSH
24319: CALL 30136 0 2
24323: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: LD_EXP 86
24333: PUSH
24334: LD_EXP 85
24338: PUSH
24339: LD_VAR 0 6
24343: ARRAY
24344: MINUS
24345: ST_TO_ADDR
// if not minesFreeAmount then
24346: LD_VAR 0 8
24350: NOT
24351: IFFALSE 24355
// exit ;
24353: GO 24626
// tmp := [ ] ;
24355: LD_ADDR_VAR 0 7
24359: PUSH
24360: EMPTY
24361: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24362: LD_ADDR_VAR 0 5
24366: PUSH
24367: DOUBLE
24368: LD_INT 1
24370: DEC
24371: ST_TO_ADDR
24372: LD_VAR 0 8
24376: PUSH
24377: FOR_TO
24378: IFFALSE 24573
// begin _d := rand ( 0 , 5 ) ;
24380: LD_ADDR_VAR 0 11
24384: PUSH
24385: LD_INT 0
24387: PPUSH
24388: LD_INT 5
24390: PPUSH
24391: CALL_OW 12
24395: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24396: LD_ADDR_VAR 0 12
24400: PUSH
24401: LD_INT 2
24403: PPUSH
24404: LD_INT 6
24406: PPUSH
24407: CALL_OW 12
24411: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24412: LD_ADDR_VAR 0 9
24416: PUSH
24417: LD_VAR 0 2
24421: PPUSH
24422: LD_VAR 0 11
24426: PPUSH
24427: LD_VAR 0 12
24431: PPUSH
24432: CALL_OW 272
24436: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24437: LD_ADDR_VAR 0 10
24441: PUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_VAR 0 11
24451: PPUSH
24452: LD_VAR 0 12
24456: PPUSH
24457: CALL_OW 273
24461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24462: LD_VAR 0 9
24466: PPUSH
24467: LD_VAR 0 10
24471: PPUSH
24472: CALL_OW 488
24476: PUSH
24477: LD_VAR 0 9
24481: PUSH
24482: LD_VAR 0 10
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_VAR 0 7
24495: IN
24496: NOT
24497: AND
24498: PUSH
24499: LD_VAR 0 9
24503: PPUSH
24504: LD_VAR 0 10
24508: PPUSH
24509: CALL_OW 458
24513: NOT
24514: AND
24515: IFFALSE 24557
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24517: LD_ADDR_VAR 0 7
24521: PUSH
24522: LD_VAR 0 7
24526: PPUSH
24527: LD_VAR 0 7
24531: PUSH
24532: LD_INT 1
24534: PLUS
24535: PPUSH
24536: LD_VAR 0 9
24540: PUSH
24541: LD_VAR 0 10
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 1
24554: ST_TO_ADDR
24555: GO 24571
// i := i - 1 ;
24557: LD_ADDR_VAR 0 5
24561: PUSH
24562: LD_VAR 0 5
24566: PUSH
24567: LD_INT 1
24569: MINUS
24570: ST_TO_ADDR
// end ;
24571: GO 24377
24573: POP
24574: POP
// for i in tmp do
24575: LD_ADDR_VAR 0 5
24579: PUSH
24580: LD_VAR 0 7
24584: PUSH
24585: FOR_IN
24586: IFFALSE 24624
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24588: LD_VAR 0 1
24592: PPUSH
24593: LD_VAR 0 5
24597: PUSH
24598: LD_INT 1
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 5
24606: PUSH
24607: LD_INT 2
24609: ARRAY
24610: PPUSH
24611: CALL 23570 0 3
24615: NOT
24616: IFFALSE 24622
// exit ;
24618: POP
24619: POP
24620: GO 24626
24622: GO 24585
24624: POP
24625: POP
// end ;
24626: LD_VAR 0 4
24630: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
// if not GetClass ( unit ) = class_sniper then
24640: LD_VAR 0 1
24644: PPUSH
24645: CALL_OW 257
24649: PUSH
24650: LD_INT 5
24652: EQUAL
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 25046
// dist := 8 ;
24658: LD_ADDR_VAR 0 5
24662: PUSH
24663: LD_INT 8
24665: ST_TO_ADDR
// viewRange := 12 ;
24666: LD_ADDR_VAR 0 7
24670: PUSH
24671: LD_INT 12
24673: ST_TO_ADDR
// side := GetSide ( unit ) ;
24674: LD_ADDR_VAR 0 6
24678: PUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 255
24688: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24689: LD_INT 61
24691: PPUSH
24692: LD_VAR 0 6
24696: PPUSH
24697: CALL_OW 321
24701: PUSH
24702: LD_INT 2
24704: EQUAL
24705: IFFALSE 24715
// viewRange := 16 ;
24707: LD_ADDR_VAR 0 7
24711: PUSH
24712: LD_INT 16
24714: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 2
24724: PPUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: CALL_OW 297
24734: PUSH
24735: LD_VAR 0 5
24739: GREATER
24740: IFFALSE 24819
// begin ComMoveXY ( unit , x , y ) ;
24742: LD_VAR 0 1
24746: PPUSH
24747: LD_VAR 0 2
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24761: LD_INT 35
24763: PPUSH
24764: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24768: LD_VAR 0 1
24772: PPUSH
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 3
24782: PPUSH
24783: CALL 61491 0 3
24787: NOT
24788: IFFALSE 24792
// exit ;
24790: GO 25046
// until GetDistUnitXY ( unit , x , y ) < dist ;
24792: LD_VAR 0 1
24796: PPUSH
24797: LD_VAR 0 2
24801: PPUSH
24802: LD_VAR 0 3
24806: PPUSH
24807: CALL_OW 297
24811: PUSH
24812: LD_VAR 0 5
24816: LESS
24817: IFFALSE 24761
// end ; ComTurnXY ( unit , x , y ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_VAR 0 2
24828: PPUSH
24829: LD_VAR 0 3
24833: PPUSH
24834: CALL_OW 118
// wait ( 5 ) ;
24838: LD_INT 5
24840: PPUSH
24841: CALL_OW 67
// _d := GetDir ( unit ) ;
24845: LD_ADDR_VAR 0 10
24849: PUSH
24850: LD_VAR 0 1
24854: PPUSH
24855: CALL_OW 254
24859: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24860: LD_ADDR_VAR 0 8
24864: PUSH
24865: LD_VAR 0 1
24869: PPUSH
24870: CALL_OW 250
24874: PPUSH
24875: LD_VAR 0 10
24879: PPUSH
24880: LD_VAR 0 5
24884: PPUSH
24885: CALL_OW 272
24889: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24890: LD_ADDR_VAR 0 9
24894: PUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 251
24904: PPUSH
24905: LD_VAR 0 10
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL_OW 273
24919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24920: LD_VAR 0 8
24924: PPUSH
24925: LD_VAR 0 9
24929: PPUSH
24930: CALL_OW 488
24934: NOT
24935: IFFALSE 24939
// exit ;
24937: GO 25046
// ComAnimCustom ( unit , 1 ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_INT 1
24946: PPUSH
24947: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24951: LD_VAR 0 8
24955: PPUSH
24956: LD_VAR 0 9
24960: PPUSH
24961: LD_VAR 0 6
24965: PPUSH
24966: LD_VAR 0 7
24970: PPUSH
24971: CALL_OW 330
// repeat wait ( 1 ) ;
24975: LD_INT 1
24977: PPUSH
24978: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 316
24991: PUSH
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL_OW 314
25001: OR
25002: PUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 302
25012: NOT
25013: OR
25014: PUSH
25015: LD_VAR 0 1
25019: PPUSH
25020: CALL_OW 301
25024: OR
25025: IFFALSE 24975
// RemoveSeeing ( _x , _y , side ) ;
25027: LD_VAR 0 8
25031: PPUSH
25032: LD_VAR 0 9
25036: PPUSH
25037: LD_VAR 0 6
25041: PPUSH
25042: CALL_OW 331
// end ; end_of_file
25046: LD_VAR 0 4
25050: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25051: LD_VAR 0 1
25055: PUSH
25056: LD_INT 200
25058: DOUBLE
25059: GREATEREQUAL
25060: IFFALSE 25068
25062: LD_INT 299
25064: DOUBLE
25065: LESSEQUAL
25066: IFTRUE 25070
25068: GO 25102
25070: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25071: LD_VAR 0 1
25075: PPUSH
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: LD_VAR 0 4
25090: PPUSH
25091: LD_VAR 0 5
25095: PPUSH
25096: CALL 21138 0 5
25100: GO 25179
25102: LD_INT 300
25104: DOUBLE
25105: GREATEREQUAL
25106: IFFALSE 25114
25108: LD_INT 399
25110: DOUBLE
25111: LESSEQUAL
25112: IFTRUE 25116
25114: GO 25178
25116: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25117: LD_VAR 0 1
25121: PPUSH
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: LD_VAR 0 4
25136: PPUSH
25137: LD_VAR 0 5
25141: PPUSH
25142: LD_VAR 0 6
25146: PPUSH
25147: LD_VAR 0 7
25151: PPUSH
25152: LD_VAR 0 8
25156: PPUSH
25157: LD_VAR 0 9
25161: PPUSH
25162: LD_VAR 0 10
25166: PPUSH
25167: LD_VAR 0 11
25171: PPUSH
25172: CALL 17471 0 11
25176: GO 25179
25178: POP
// end ;
25179: PPOPN 11
25181: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25182: LD_VAR 0 1
25186: PPUSH
25187: LD_VAR 0 2
25191: PPUSH
25192: LD_VAR 0 3
25196: PPUSH
25197: LD_VAR 0 4
25201: PPUSH
25202: LD_VAR 0 5
25206: PPUSH
25207: CALL 20874 0 5
// end ; end_of_file
25211: PPOPN 5
25213: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25214: LD_INT 0
25216: PPUSH
25217: PPUSH
// if exist_mode then
25218: LD_VAR 0 2
25222: IFFALSE 25247
// unit := CreateCharacter ( prefix & ident ) else
25224: LD_ADDR_VAR 0 5
25228: PUSH
25229: LD_VAR 0 3
25233: PUSH
25234: LD_VAR 0 1
25238: STR
25239: PPUSH
25240: CALL_OW 34
25244: ST_TO_ADDR
25245: GO 25262
// unit := NewCharacter ( ident ) ;
25247: LD_ADDR_VAR 0 5
25251: PUSH
25252: LD_VAR 0 1
25256: PPUSH
25257: CALL_OW 25
25261: ST_TO_ADDR
// result := unit ;
25262: LD_ADDR_VAR 0 4
25266: PUSH
25267: LD_VAR 0 5
25271: ST_TO_ADDR
// end ;
25272: LD_VAR 0 4
25276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25277: LD_INT 0
25279: PPUSH
25280: PPUSH
// if not side or not nation then
25281: LD_VAR 0 1
25285: NOT
25286: PUSH
25287: LD_VAR 0 2
25291: NOT
25292: OR
25293: IFFALSE 25297
// exit ;
25295: GO 26065
// case nation of nation_american :
25297: LD_VAR 0 2
25301: PUSH
25302: LD_INT 1
25304: DOUBLE
25305: EQUAL
25306: IFTRUE 25310
25308: GO 25524
25310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25311: LD_ADDR_VAR 0 4
25315: PUSH
25316: LD_INT 35
25318: PUSH
25319: LD_INT 45
25321: PUSH
25322: LD_INT 46
25324: PUSH
25325: LD_INT 47
25327: PUSH
25328: LD_INT 82
25330: PUSH
25331: LD_INT 83
25333: PUSH
25334: LD_INT 84
25336: PUSH
25337: LD_INT 85
25339: PUSH
25340: LD_INT 86
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 6
25351: PUSH
25352: LD_INT 15
25354: PUSH
25355: LD_INT 16
25357: PUSH
25358: LD_INT 7
25360: PUSH
25361: LD_INT 12
25363: PUSH
25364: LD_INT 13
25366: PUSH
25367: LD_INT 10
25369: PUSH
25370: LD_INT 14
25372: PUSH
25373: LD_INT 20
25375: PUSH
25376: LD_INT 21
25378: PUSH
25379: LD_INT 22
25381: PUSH
25382: LD_INT 25
25384: PUSH
25385: LD_INT 32
25387: PUSH
25388: LD_INT 27
25390: PUSH
25391: LD_INT 36
25393: PUSH
25394: LD_INT 69
25396: PUSH
25397: LD_INT 39
25399: PUSH
25400: LD_INT 34
25402: PUSH
25403: LD_INT 40
25405: PUSH
25406: LD_INT 48
25408: PUSH
25409: LD_INT 49
25411: PUSH
25412: LD_INT 50
25414: PUSH
25415: LD_INT 51
25417: PUSH
25418: LD_INT 52
25420: PUSH
25421: LD_INT 53
25423: PUSH
25424: LD_INT 54
25426: PUSH
25427: LD_INT 55
25429: PUSH
25430: LD_INT 56
25432: PUSH
25433: LD_INT 57
25435: PUSH
25436: LD_INT 58
25438: PUSH
25439: LD_INT 59
25441: PUSH
25442: LD_INT 60
25444: PUSH
25445: LD_INT 61
25447: PUSH
25448: LD_INT 62
25450: PUSH
25451: LD_INT 80
25453: PUSH
25454: LD_INT 82
25456: PUSH
25457: LD_INT 83
25459: PUSH
25460: LD_INT 84
25462: PUSH
25463: LD_INT 85
25465: PUSH
25466: LD_INT 86
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: ST_TO_ADDR
25522: GO 25989
25524: LD_INT 2
25526: DOUBLE
25527: EQUAL
25528: IFTRUE 25532
25530: GO 25758
25532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25533: LD_ADDR_VAR 0 4
25537: PUSH
25538: LD_INT 35
25540: PUSH
25541: LD_INT 45
25543: PUSH
25544: LD_INT 46
25546: PUSH
25547: LD_INT 47
25549: PUSH
25550: LD_INT 82
25552: PUSH
25553: LD_INT 83
25555: PUSH
25556: LD_INT 84
25558: PUSH
25559: LD_INT 85
25561: PUSH
25562: LD_INT 87
25564: PUSH
25565: LD_INT 70
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 11
25573: PUSH
25574: LD_INT 3
25576: PUSH
25577: LD_INT 4
25579: PUSH
25580: LD_INT 5
25582: PUSH
25583: LD_INT 6
25585: PUSH
25586: LD_INT 15
25588: PUSH
25589: LD_INT 18
25591: PUSH
25592: LD_INT 7
25594: PUSH
25595: LD_INT 17
25597: PUSH
25598: LD_INT 8
25600: PUSH
25601: LD_INT 20
25603: PUSH
25604: LD_INT 21
25606: PUSH
25607: LD_INT 22
25609: PUSH
25610: LD_INT 72
25612: PUSH
25613: LD_INT 26
25615: PUSH
25616: LD_INT 69
25618: PUSH
25619: LD_INT 39
25621: PUSH
25622: LD_INT 40
25624: PUSH
25625: LD_INT 41
25627: PUSH
25628: LD_INT 42
25630: PUSH
25631: LD_INT 43
25633: PUSH
25634: LD_INT 48
25636: PUSH
25637: LD_INT 49
25639: PUSH
25640: LD_INT 50
25642: PUSH
25643: LD_INT 51
25645: PUSH
25646: LD_INT 52
25648: PUSH
25649: LD_INT 53
25651: PUSH
25652: LD_INT 54
25654: PUSH
25655: LD_INT 55
25657: PUSH
25658: LD_INT 56
25660: PUSH
25661: LD_INT 60
25663: PUSH
25664: LD_INT 61
25666: PUSH
25667: LD_INT 62
25669: PUSH
25670: LD_INT 66
25672: PUSH
25673: LD_INT 67
25675: PUSH
25676: LD_INT 68
25678: PUSH
25679: LD_INT 81
25681: PUSH
25682: LD_INT 82
25684: PUSH
25685: LD_INT 83
25687: PUSH
25688: LD_INT 84
25690: PUSH
25691: LD_INT 85
25693: PUSH
25694: LD_INT 87
25696: PUSH
25697: LD_INT 88
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: ST_TO_ADDR
25756: GO 25989
25758: LD_INT 3
25760: DOUBLE
25761: EQUAL
25762: IFTRUE 25766
25764: GO 25988
25766: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25767: LD_ADDR_VAR 0 4
25771: PUSH
25772: LD_INT 46
25774: PUSH
25775: LD_INT 47
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 82
25786: PUSH
25787: LD_INT 83
25789: PUSH
25790: LD_INT 84
25792: PUSH
25793: LD_INT 85
25795: PUSH
25796: LD_INT 86
25798: PUSH
25799: LD_INT 11
25801: PUSH
25802: LD_INT 9
25804: PUSH
25805: LD_INT 20
25807: PUSH
25808: LD_INT 19
25810: PUSH
25811: LD_INT 21
25813: PUSH
25814: LD_INT 24
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_INT 25
25822: PUSH
25823: LD_INT 28
25825: PUSH
25826: LD_INT 29
25828: PUSH
25829: LD_INT 30
25831: PUSH
25832: LD_INT 31
25834: PUSH
25835: LD_INT 37
25837: PUSH
25838: LD_INT 38
25840: PUSH
25841: LD_INT 32
25843: PUSH
25844: LD_INT 27
25846: PUSH
25847: LD_INT 33
25849: PUSH
25850: LD_INT 69
25852: PUSH
25853: LD_INT 39
25855: PUSH
25856: LD_INT 34
25858: PUSH
25859: LD_INT 40
25861: PUSH
25862: LD_INT 71
25864: PUSH
25865: LD_INT 23
25867: PUSH
25868: LD_INT 44
25870: PUSH
25871: LD_INT 48
25873: PUSH
25874: LD_INT 49
25876: PUSH
25877: LD_INT 50
25879: PUSH
25880: LD_INT 51
25882: PUSH
25883: LD_INT 52
25885: PUSH
25886: LD_INT 53
25888: PUSH
25889: LD_INT 54
25891: PUSH
25892: LD_INT 55
25894: PUSH
25895: LD_INT 56
25897: PUSH
25898: LD_INT 57
25900: PUSH
25901: LD_INT 58
25903: PUSH
25904: LD_INT 59
25906: PUSH
25907: LD_INT 63
25909: PUSH
25910: LD_INT 64
25912: PUSH
25913: LD_INT 65
25915: PUSH
25916: LD_INT 82
25918: PUSH
25919: LD_INT 83
25921: PUSH
25922: LD_INT 84
25924: PUSH
25925: LD_INT 85
25927: PUSH
25928: LD_INT 86
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: ST_TO_ADDR
25986: GO 25989
25988: POP
// if state > - 1 and state < 3 then
25989: LD_VAR 0 3
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: GREATER
25998: PUSH
25999: LD_VAR 0 3
26003: PUSH
26004: LD_INT 3
26006: LESS
26007: AND
26008: IFFALSE 26065
// for i in result do
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: LD_VAR 0 4
26019: PUSH
26020: FOR_IN
26021: IFFALSE 26063
// if GetTech ( i , side ) <> state then
26023: LD_VAR 0 5
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 321
26037: PUSH
26038: LD_VAR 0 3
26042: NONEQUAL
26043: IFFALSE 26061
// result := result diff i ;
26045: LD_ADDR_VAR 0 4
26049: PUSH
26050: LD_VAR 0 4
26054: PUSH
26055: LD_VAR 0 5
26059: DIFF
26060: ST_TO_ADDR
26061: GO 26020
26063: POP
26064: POP
// end ;
26065: LD_VAR 0 4
26069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26070: LD_INT 0
26072: PPUSH
26073: PPUSH
26074: PPUSH
// result := true ;
26075: LD_ADDR_VAR 0 3
26079: PUSH
26080: LD_INT 1
26082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26083: LD_ADDR_VAR 0 5
26087: PUSH
26088: LD_VAR 0 2
26092: PPUSH
26093: CALL_OW 480
26097: ST_TO_ADDR
// if not tmp then
26098: LD_VAR 0 5
26102: NOT
26103: IFFALSE 26107
// exit ;
26105: GO 26156
// for i in tmp do
26107: LD_ADDR_VAR 0 4
26111: PUSH
26112: LD_VAR 0 5
26116: PUSH
26117: FOR_IN
26118: IFFALSE 26154
// if GetTech ( i , side ) <> state_researched then
26120: LD_VAR 0 4
26124: PPUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 321
26134: PUSH
26135: LD_INT 2
26137: NONEQUAL
26138: IFFALSE 26152
// begin result := false ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// exit ;
26148: POP
26149: POP
26150: GO 26156
// end ;
26152: GO 26117
26154: POP
26155: POP
// end ;
26156: LD_VAR 0 3
26160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26176: LD_VAR 0 1
26180: NOT
26181: PUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL_OW 257
26191: PUSH
26192: LD_INT 9
26194: NONEQUAL
26195: OR
26196: IFFALSE 26200
// exit ;
26198: GO 26773
// side := GetSide ( unit ) ;
26200: LD_ADDR_VAR 0 9
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: CALL_OW 255
26214: ST_TO_ADDR
// tech_space := tech_spacanom ;
26215: LD_ADDR_VAR 0 12
26219: PUSH
26220: LD_INT 29
26222: ST_TO_ADDR
// tech_time := tech_taurad ;
26223: LD_ADDR_VAR 0 13
26227: PUSH
26228: LD_INT 28
26230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26231: LD_ADDR_VAR 0 11
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 310
26245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26246: LD_VAR 0 11
26250: PPUSH
26251: CALL_OW 247
26255: PUSH
26256: LD_INT 2
26258: EQUAL
26259: IFFALSE 26263
// exit ;
26261: GO 26773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26263: LD_ADDR_VAR 0 8
26267: PUSH
26268: LD_INT 81
26270: PUSH
26271: LD_VAR 0 9
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 3
26282: PUSH
26283: LD_INT 21
26285: PUSH
26286: LD_INT 3
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 69
26305: ST_TO_ADDR
// if not tmp then
26306: LD_VAR 0 8
26310: NOT
26311: IFFALSE 26315
// exit ;
26313: GO 26773
// if in_unit then
26315: LD_VAR 0 11
26319: IFFALSE 26343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26321: LD_ADDR_VAR 0 10
26325: PUSH
26326: LD_VAR 0 8
26330: PPUSH
26331: LD_VAR 0 11
26335: PPUSH
26336: CALL_OW 74
26340: ST_TO_ADDR
26341: GO 26363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26343: LD_ADDR_VAR 0 10
26347: PUSH
26348: LD_VAR 0 8
26352: PPUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 74
26362: ST_TO_ADDR
// if not enemy then
26363: LD_VAR 0 10
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26372: LD_VAR 0 11
26376: PUSH
26377: LD_VAR 0 11
26381: PPUSH
26382: LD_VAR 0 10
26386: PPUSH
26387: CALL_OW 296
26391: PUSH
26392: LD_INT 13
26394: GREATER
26395: AND
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: LD_VAR 0 10
26406: PPUSH
26407: CALL_OW 296
26411: PUSH
26412: LD_INT 12
26414: GREATER
26415: OR
26416: IFFALSE 26420
// exit ;
26418: GO 26773
// missile := [ 1 ] ;
26420: LD_ADDR_VAR 0 14
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26431: LD_VAR 0 9
26435: PPUSH
26436: LD_VAR 0 12
26440: PPUSH
26441: CALL_OW 325
26445: IFFALSE 26474
// missile := Replace ( missile , missile + 1 , 2 ) ;
26447: LD_ADDR_VAR 0 14
26451: PUSH
26452: LD_VAR 0 14
26456: PPUSH
26457: LD_VAR 0 14
26461: PUSH
26462: LD_INT 1
26464: PLUS
26465: PPUSH
26466: LD_INT 2
26468: PPUSH
26469: CALL_OW 1
26473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26474: LD_VAR 0 9
26478: PPUSH
26479: LD_VAR 0 13
26483: PPUSH
26484: CALL_OW 325
26488: PUSH
26489: LD_VAR 0 10
26493: PPUSH
26494: CALL_OW 255
26498: PPUSH
26499: LD_VAR 0 13
26503: PPUSH
26504: CALL_OW 325
26508: NOT
26509: AND
26510: IFFALSE 26539
// missile := Replace ( missile , missile + 1 , 3 ) ;
26512: LD_ADDR_VAR 0 14
26516: PUSH
26517: LD_VAR 0 14
26521: PPUSH
26522: LD_VAR 0 14
26526: PUSH
26527: LD_INT 1
26529: PLUS
26530: PPUSH
26531: LD_INT 3
26533: PPUSH
26534: CALL_OW 1
26538: ST_TO_ADDR
// if missile < 2 then
26539: LD_VAR 0 14
26543: PUSH
26544: LD_INT 2
26546: LESS
26547: IFFALSE 26551
// exit ;
26549: GO 26773
// x := GetX ( enemy ) ;
26551: LD_ADDR_VAR 0 4
26555: PUSH
26556: LD_VAR 0 10
26560: PPUSH
26561: CALL_OW 250
26565: ST_TO_ADDR
// y := GetY ( enemy ) ;
26566: LD_ADDR_VAR 0 5
26570: PUSH
26571: LD_VAR 0 10
26575: PPUSH
26576: CALL_OW 251
26580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26581: LD_ADDR_VAR 0 6
26585: PUSH
26586: LD_VAR 0 4
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PPUSH
26595: LD_INT 1
26597: PPUSH
26598: CALL_OW 12
26602: PLUS
26603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26604: LD_ADDR_VAR 0 7
26608: PUSH
26609: LD_VAR 0 5
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PPUSH
26618: LD_INT 1
26620: PPUSH
26621: CALL_OW 12
26625: PLUS
26626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26627: LD_VAR 0 6
26631: PPUSH
26632: LD_VAR 0 7
26636: PPUSH
26637: CALL_OW 488
26641: NOT
26642: IFFALSE 26664
// begin _x := x ;
26644: LD_ADDR_VAR 0 6
26648: PUSH
26649: LD_VAR 0 4
26653: ST_TO_ADDR
// _y := y ;
26654: LD_ADDR_VAR 0 7
26658: PUSH
26659: LD_VAR 0 5
26663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_INT 1
26671: PPUSH
26672: LD_VAR 0 14
26676: PPUSH
26677: CALL_OW 12
26681: ST_TO_ADDR
// case i of 1 :
26682: LD_VAR 0 3
26686: PUSH
26687: LD_INT 1
26689: DOUBLE
26690: EQUAL
26691: IFTRUE 26695
26693: GO 26712
26695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26696: LD_VAR 0 1
26700: PPUSH
26701: LD_VAR 0 10
26705: PPUSH
26706: CALL_OW 115
26710: GO 26773
26712: LD_INT 2
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 26742
26720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26721: LD_VAR 0 1
26725: PPUSH
26726: LD_VAR 0 6
26730: PPUSH
26731: LD_VAR 0 7
26735: PPUSH
26736: CALL_OW 153
26740: GO 26773
26742: LD_INT 3
26744: DOUBLE
26745: EQUAL
26746: IFTRUE 26750
26748: GO 26772
26750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26751: LD_VAR 0 1
26755: PPUSH
26756: LD_VAR 0 6
26760: PPUSH
26761: LD_VAR 0 7
26765: PPUSH
26766: CALL_OW 154
26770: GO 26773
26772: POP
// end ;
26773: LD_VAR 0 2
26777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// if not unit or not building then
26786: LD_VAR 0 1
26790: NOT
26791: PUSH
26792: LD_VAR 0 2
26796: NOT
26797: OR
26798: IFFALSE 26802
// exit ;
26800: GO 26960
// x := GetX ( building ) ;
26802: LD_ADDR_VAR 0 5
26806: PUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: CALL_OW 250
26816: ST_TO_ADDR
// y := GetY ( building ) ;
26817: LD_ADDR_VAR 0 6
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: CALL_OW 251
26831: ST_TO_ADDR
// for i = 0 to 5 do
26832: LD_ADDR_VAR 0 4
26836: PUSH
26837: DOUBLE
26838: LD_INT 0
26840: DEC
26841: ST_TO_ADDR
26842: LD_INT 5
26844: PUSH
26845: FOR_TO
26846: IFFALSE 26958
// begin _x := ShiftX ( x , i , 3 ) ;
26848: LD_ADDR_VAR 0 7
26852: PUSH
26853: LD_VAR 0 5
26857: PPUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: LD_INT 3
26865: PPUSH
26866: CALL_OW 272
26870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26871: LD_ADDR_VAR 0 8
26875: PUSH
26876: LD_VAR 0 6
26880: PPUSH
26881: LD_VAR 0 4
26885: PPUSH
26886: LD_INT 3
26888: PPUSH
26889: CALL_OW 273
26893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26894: LD_VAR 0 7
26898: PPUSH
26899: LD_VAR 0 8
26903: PPUSH
26904: CALL_OW 488
26908: NOT
26909: IFFALSE 26913
// continue ;
26911: GO 26845
// if HexInfo ( _x , _y ) = 0 then
26913: LD_VAR 0 7
26917: PPUSH
26918: LD_VAR 0 8
26922: PPUSH
26923: CALL_OW 428
26927: PUSH
26928: LD_INT 0
26930: EQUAL
26931: IFFALSE 26956
// begin ComMoveXY ( unit , _x , _y ) ;
26933: LD_VAR 0 1
26937: PPUSH
26938: LD_VAR 0 7
26942: PPUSH
26943: LD_VAR 0 8
26947: PPUSH
26948: CALL_OW 111
// exit ;
26952: POP
26953: POP
26954: GO 26960
// end ; end ;
26956: GO 26845
26958: POP
26959: POP
// end ;
26960: LD_VAR 0 3
26964: RET
// export function ScanBase ( side , base_area ) ; begin
26965: LD_INT 0
26967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26968: LD_ADDR_VAR 0 3
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: LD_INT 81
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 70
26994: ST_TO_ADDR
// end ;
26995: LD_VAR 0 3
26999: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27000: LD_INT 0
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
// result := false ;
27006: LD_ADDR_VAR 0 2
27010: PUSH
27011: LD_INT 0
27013: ST_TO_ADDR
// side := GetSide ( unit ) ;
27014: LD_ADDR_VAR 0 3
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 255
27028: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27029: LD_ADDR_VAR 0 4
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 248
27043: ST_TO_ADDR
// case nat of 1 :
27044: LD_VAR 0 4
27048: PUSH
27049: LD_INT 1
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27068
27057: POP
// tech := tech_lassight ; 2 :
27058: LD_ADDR_VAR 0 5
27062: PUSH
27063: LD_INT 12
27065: ST_TO_ADDR
27066: GO 27107
27068: LD_INT 2
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27076
27074: GO 27087
27076: POP
// tech := tech_mortar ; 3 :
27077: LD_ADDR_VAR 0 5
27081: PUSH
27082: LD_INT 41
27084: ST_TO_ADDR
27085: GO 27107
27087: LD_INT 3
27089: DOUBLE
27090: EQUAL
27091: IFTRUE 27095
27093: GO 27106
27095: POP
// tech := tech_bazooka ; end ;
27096: LD_ADDR_VAR 0 5
27100: PUSH
27101: LD_INT 44
27103: ST_TO_ADDR
27104: GO 27107
27106: POP
// if Researched ( side , tech ) then
27107: LD_VAR 0 3
27111: PPUSH
27112: LD_VAR 0 5
27116: PPUSH
27117: CALL_OW 325
27121: IFFALSE 27148
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27123: LD_ADDR_VAR 0 2
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: LD_INT 8
27133: PUSH
27134: LD_INT 9
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: PUSH
27142: LD_VAR 0 4
27146: ARRAY
27147: ST_TO_ADDR
// end ;
27148: LD_VAR 0 2
27152: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27153: LD_INT 0
27155: PPUSH
27156: PPUSH
27157: PPUSH
// if not mines then
27158: LD_VAR 0 2
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27167: LD_ADDR_VAR 0 5
27171: PUSH
27172: LD_INT 81
27174: PUSH
27175: LD_VAR 0 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PPUSH
27205: CALL_OW 69
27209: ST_TO_ADDR
// for i in mines do
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_VAR 0 2
27219: PUSH
27220: FOR_IN
27221: IFFALSE 27309
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27223: LD_VAR 0 4
27227: PUSH
27228: LD_INT 1
27230: ARRAY
27231: PPUSH
27232: LD_VAR 0 4
27236: PUSH
27237: LD_INT 2
27239: ARRAY
27240: PPUSH
27241: CALL_OW 458
27245: NOT
27246: IFFALSE 27250
// continue ;
27248: GO 27220
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27250: LD_VAR 0 4
27254: PUSH
27255: LD_INT 1
27257: ARRAY
27258: PPUSH
27259: LD_VAR 0 4
27263: PUSH
27264: LD_INT 2
27266: ARRAY
27267: PPUSH
27268: CALL_OW 428
27272: PUSH
27273: LD_VAR 0 5
27277: IN
27278: IFFALSE 27307
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27280: LD_VAR 0 4
27284: PUSH
27285: LD_INT 1
27287: ARRAY
27288: PPUSH
27289: LD_VAR 0 4
27293: PUSH
27294: LD_INT 2
27296: ARRAY
27297: PPUSH
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL_OW 456
// end ;
27307: GO 27220
27309: POP
27310: POP
// end ;
27311: LD_VAR 0 3
27315: RET
// export function Count ( array ) ; var i ; begin
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
// result := 0 ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: LD_INT 0
27327: ST_TO_ADDR
// for i in array do
27328: LD_ADDR_VAR 0 3
27332: PUSH
27333: LD_VAR 0 1
27337: PUSH
27338: FOR_IN
27339: IFFALSE 27363
// if i then
27341: LD_VAR 0 3
27345: IFFALSE 27361
// result := result + 1 ;
27347: LD_ADDR_VAR 0 2
27351: PUSH
27352: LD_VAR 0 2
27356: PUSH
27357: LD_INT 1
27359: PLUS
27360: ST_TO_ADDR
27361: GO 27338
27363: POP
27364: POP
// end ;
27365: LD_VAR 0 2
27369: RET
// export function IsEmpty ( building ) ; begin
27370: LD_INT 0
27372: PPUSH
// if not building then
27373: LD_VAR 0 1
27377: NOT
27378: IFFALSE 27382
// exit ;
27380: GO 27425
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 22
27394: PUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 255
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 58
27411: PUSH
27412: EMPTY
27413: LIST
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PPUSH
27419: CALL_OW 69
27423: IN
27424: ST_TO_ADDR
// end ;
27425: LD_VAR 0 2
27429: RET
// export function IsNotFull ( building ) ; var places ; begin
27430: LD_INT 0
27432: PPUSH
27433: PPUSH
// if not building then
27434: LD_VAR 0 1
27438: NOT
27439: IFFALSE 27443
// exit ;
27441: GO 27614
// result := false ;
27443: LD_ADDR_VAR 0 2
27447: PUSH
27448: LD_INT 0
27450: ST_TO_ADDR
// places := 0 ;
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27459: LD_VAR 0 1
27463: PPUSH
27464: CALL_OW 266
27468: PUSH
27469: LD_INT 0
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27531
27475: LD_INT 1
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27531
27481: LD_INT 6
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27531
27487: LD_INT 7
27489: DOUBLE
27490: EQUAL
27491: IFTRUE 27531
27493: LD_INT 8
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27531
27499: LD_INT 4
27501: DOUBLE
27502: EQUAL
27503: IFTRUE 27531
27505: LD_INT 5
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27531
27511: LD_INT 2
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27531
27517: LD_INT 3
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27531
27523: LD_INT 35
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27542
27531: POP
// places := 6 ; b_bunker , b_breastwork :
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 6
27539: ST_TO_ADDR
27540: GO 27587
27542: LD_INT 32
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27556
27548: LD_INT 31
27550: DOUBLE
27551: EQUAL
27552: IFTRUE 27556
27554: GO 27567
27556: POP
// places := 1 ; b_control_tower :
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_INT 1
27564: ST_TO_ADDR
27565: GO 27587
27567: LD_INT 36
27569: DOUBLE
27570: EQUAL
27571: IFTRUE 27575
27573: GO 27586
27575: POP
// places := 3 ; end ;
27576: LD_ADDR_VAR 0 3
27580: PUSH
27581: LD_INT 3
27583: ST_TO_ADDR
27584: GO 27587
27586: POP
// if places then
27587: LD_VAR 0 3
27591: IFFALSE 27614
// result := UnitsInside ( building ) < places ;
27593: LD_ADDR_VAR 0 2
27597: PUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 313
27607: PUSH
27608: LD_VAR 0 3
27612: LESS
27613: ST_TO_ADDR
// end ;
27614: LD_VAR 0 2
27618: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27619: LD_INT 0
27621: PPUSH
27622: PPUSH
27623: PPUSH
27624: PPUSH
// tmp := [ ] ;
27625: LD_ADDR_VAR 0 3
27629: PUSH
27630: EMPTY
27631: ST_TO_ADDR
// list := [ ] ;
27632: LD_ADDR_VAR 0 5
27636: PUSH
27637: EMPTY
27638: ST_TO_ADDR
// for i = 16 to 25 do
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: DOUBLE
27645: LD_INT 16
27647: DEC
27648: ST_TO_ADDR
27649: LD_INT 25
27651: PUSH
27652: FOR_TO
27653: IFFALSE 27726
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27655: LD_ADDR_VAR 0 3
27659: PUSH
27660: LD_VAR 0 3
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 255
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 91
27684: PUSH
27685: LD_VAR 0 1
27689: PUSH
27690: LD_INT 6
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 30
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: PPUSH
27718: CALL_OW 69
27722: ADD
27723: ST_TO_ADDR
27724: GO 27652
27726: POP
27727: POP
// for i = 1 to tmp do
27728: LD_ADDR_VAR 0 4
27732: PUSH
27733: DOUBLE
27734: LD_INT 1
27736: DEC
27737: ST_TO_ADDR
27738: LD_VAR 0 3
27742: PUSH
27743: FOR_TO
27744: IFFALSE 27832
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27746: LD_ADDR_VAR 0 5
27750: PUSH
27751: LD_VAR 0 5
27755: PUSH
27756: LD_VAR 0 3
27760: PUSH
27761: LD_VAR 0 4
27765: ARRAY
27766: PPUSH
27767: CALL_OW 266
27771: PUSH
27772: LD_VAR 0 3
27776: PUSH
27777: LD_VAR 0 4
27781: ARRAY
27782: PPUSH
27783: CALL_OW 250
27787: PUSH
27788: LD_VAR 0 3
27792: PUSH
27793: LD_VAR 0 4
27797: ARRAY
27798: PPUSH
27799: CALL_OW 251
27803: PUSH
27804: LD_VAR 0 3
27808: PUSH
27809: LD_VAR 0 4
27813: ARRAY
27814: PPUSH
27815: CALL_OW 254
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: ADD
27829: ST_TO_ADDR
27830: GO 27743
27832: POP
27833: POP
// result := list ;
27834: LD_ADDR_VAR 0 2
27838: PUSH
27839: LD_VAR 0 5
27843: ST_TO_ADDR
// end ;
27844: LD_VAR 0 2
27848: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27849: LD_INT 0
27851: PPUSH
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
27856: PPUSH
27857: PPUSH
// if not factory then
27858: LD_VAR 0 1
27862: NOT
27863: IFFALSE 27867
// exit ;
27865: GO 28460
// if control = control_apeman then
27867: LD_VAR 0 4
27871: PUSH
27872: LD_INT 5
27874: EQUAL
27875: IFFALSE 27984
// begin tmp := UnitsInside ( factory ) ;
27877: LD_ADDR_VAR 0 8
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 313
27891: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27892: LD_VAR 0 8
27896: PPUSH
27897: LD_INT 25
27899: PUSH
27900: LD_INT 12
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 72
27911: NOT
27912: IFFALSE 27922
// control := control_manual ;
27914: LD_ADDR_VAR 0 4
27918: PUSH
27919: LD_INT 1
27921: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27922: LD_ADDR_VAR 0 8
27926: PUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL 27619 0 1
27936: ST_TO_ADDR
// if tmp then
27937: LD_VAR 0 8
27941: IFFALSE 27984
// begin for i in tmp do
27943: LD_ADDR_VAR 0 7
27947: PUSH
27948: LD_VAR 0 8
27952: PUSH
27953: FOR_IN
27954: IFFALSE 27982
// if i [ 1 ] = b_ext_radio then
27956: LD_VAR 0 7
27960: PUSH
27961: LD_INT 1
27963: ARRAY
27964: PUSH
27965: LD_INT 22
27967: EQUAL
27968: IFFALSE 27980
// begin control := control_remote ;
27970: LD_ADDR_VAR 0 4
27974: PUSH
27975: LD_INT 2
27977: ST_TO_ADDR
// break ;
27978: GO 27982
// end ;
27980: GO 27953
27982: POP
27983: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27984: LD_VAR 0 1
27988: PPUSH
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: LD_VAR 0 4
28003: PPUSH
28004: LD_VAR 0 5
28008: PPUSH
28009: CALL_OW 448
28013: IFFALSE 28048
// begin result := [ chassis , engine , control , weapon ] ;
28015: LD_ADDR_VAR 0 6
28019: PUSH
28020: LD_VAR 0 2
28024: PUSH
28025: LD_VAR 0 3
28029: PUSH
28030: LD_VAR 0 4
28034: PUSH
28035: LD_VAR 0 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
// exit ;
28046: GO 28460
// end ; _chassis := AvailableChassisList ( factory ) ;
28048: LD_ADDR_VAR 0 9
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 475
28062: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28063: LD_ADDR_VAR 0 11
28067: PUSH
28068: LD_VAR 0 1
28072: PPUSH
28073: CALL_OW 476
28077: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28078: LD_ADDR_VAR 0 12
28082: PUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 477
28092: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28093: LD_ADDR_VAR 0 10
28097: PUSH
28098: LD_VAR 0 1
28102: PPUSH
28103: CALL_OW 478
28107: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28108: LD_VAR 0 9
28112: NOT
28113: PUSH
28114: LD_VAR 0 11
28118: NOT
28119: OR
28120: PUSH
28121: LD_VAR 0 12
28125: NOT
28126: OR
28127: PUSH
28128: LD_VAR 0 10
28132: NOT
28133: OR
28134: IFFALSE 28169
// begin result := [ chassis , engine , control , weapon ] ;
28136: LD_ADDR_VAR 0 6
28140: PUSH
28141: LD_VAR 0 2
28145: PUSH
28146: LD_VAR 0 3
28150: PUSH
28151: LD_VAR 0 4
28155: PUSH
28156: LD_VAR 0 5
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// exit ;
28167: GO 28460
// end ; if not chassis in _chassis then
28169: LD_VAR 0 2
28173: PUSH
28174: LD_VAR 0 9
28178: IN
28179: NOT
28180: IFFALSE 28206
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28182: LD_ADDR_VAR 0 2
28186: PUSH
28187: LD_VAR 0 9
28191: PUSH
28192: LD_INT 1
28194: PPUSH
28195: LD_VAR 0 9
28199: PPUSH
28200: CALL_OW 12
28204: ARRAY
28205: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28206: LD_VAR 0 2
28210: PPUSH
28211: LD_VAR 0 3
28215: PPUSH
28216: CALL 28465 0 2
28220: NOT
28221: IFFALSE 28280
// repeat engine := _engine [ 1 ] ;
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_VAR 0 11
28232: PUSH
28233: LD_INT 1
28235: ARRAY
28236: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28237: LD_ADDR_VAR 0 11
28241: PUSH
28242: LD_VAR 0 11
28246: PPUSH
28247: LD_INT 1
28249: PPUSH
28250: CALL_OW 3
28254: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28255: LD_VAR 0 2
28259: PPUSH
28260: LD_VAR 0 3
28264: PPUSH
28265: CALL 28465 0 2
28269: PUSH
28270: LD_VAR 0 11
28274: PUSH
28275: EMPTY
28276: EQUAL
28277: OR
28278: IFFALSE 28223
// if not control in _control then
28280: LD_VAR 0 4
28284: PUSH
28285: LD_VAR 0 12
28289: IN
28290: NOT
28291: IFFALSE 28317
// control := _control [ rand ( 1 , _control ) ] ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_VAR 0 12
28302: PUSH
28303: LD_INT 1
28305: PPUSH
28306: LD_VAR 0 12
28310: PPUSH
28311: CALL_OW 12
28315: ARRAY
28316: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28317: LD_VAR 0 2
28321: PPUSH
28322: LD_VAR 0 5
28326: PPUSH
28327: CALL 28685 0 2
28331: NOT
28332: IFFALSE 28391
// repeat weapon := _weapon [ 1 ] ;
28334: LD_ADDR_VAR 0 5
28338: PUSH
28339: LD_VAR 0 10
28343: PUSH
28344: LD_INT 1
28346: ARRAY
28347: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28348: LD_ADDR_VAR 0 10
28352: PUSH
28353: LD_VAR 0 10
28357: PPUSH
28358: LD_INT 1
28360: PPUSH
28361: CALL_OW 3
28365: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28366: LD_VAR 0 2
28370: PPUSH
28371: LD_VAR 0 5
28375: PPUSH
28376: CALL 28685 0 2
28380: PUSH
28381: LD_VAR 0 10
28385: PUSH
28386: EMPTY
28387: EQUAL
28388: OR
28389: IFFALSE 28334
// result := [ ] ;
28391: LD_ADDR_VAR 0 6
28395: PUSH
28396: EMPTY
28397: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28398: LD_VAR 0 1
28402: PPUSH
28403: LD_VAR 0 2
28407: PPUSH
28408: LD_VAR 0 3
28412: PPUSH
28413: LD_VAR 0 4
28417: PPUSH
28418: LD_VAR 0 5
28422: PPUSH
28423: CALL_OW 448
28427: IFFALSE 28460
// result := [ chassis , engine , control , weapon ] ;
28429: LD_ADDR_VAR 0 6
28433: PUSH
28434: LD_VAR 0 2
28438: PUSH
28439: LD_VAR 0 3
28443: PUSH
28444: LD_VAR 0 4
28448: PUSH
28449: LD_VAR 0 5
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// end ;
28460: LD_VAR 0 6
28464: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28465: LD_INT 0
28467: PPUSH
// if not chassis or not engine then
28468: LD_VAR 0 1
28472: NOT
28473: PUSH
28474: LD_VAR 0 2
28478: NOT
28479: OR
28480: IFFALSE 28484
// exit ;
28482: GO 28680
// case engine of engine_solar :
28484: LD_VAR 0 2
28488: PUSH
28489: LD_INT 2
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28535
28497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_INT 11
28505: PUSH
28506: LD_INT 12
28508: PUSH
28509: LD_INT 13
28511: PUSH
28512: LD_INT 14
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 3
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
28533: GO 28664
28535: LD_INT 1
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28543
28541: GO 28605
28543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_INT 11
28551: PUSH
28552: LD_INT 12
28554: PUSH
28555: LD_INT 13
28557: PUSH
28558: LD_INT 14
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: LD_INT 4
28572: PUSH
28573: LD_INT 5
28575: PUSH
28576: LD_INT 21
28578: PUSH
28579: LD_INT 23
28581: PUSH
28582: LD_INT 22
28584: PUSH
28585: LD_INT 24
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
28603: GO 28664
28605: LD_INT 3
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28663
28613: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 13
28621: PUSH
28622: LD_INT 14
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: LD_INT 4
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: LD_INT 21
28639: PUSH
28640: LD_INT 22
28642: PUSH
28643: LD_INT 23
28645: PUSH
28646: LD_INT 24
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
28661: GO 28664
28663: POP
// result := ( chassis in result ) ;
28664: LD_ADDR_VAR 0 3
28668: PUSH
28669: LD_VAR 0 1
28673: PUSH
28674: LD_VAR 0 3
28678: IN
28679: ST_TO_ADDR
// end ;
28680: LD_VAR 0 3
28684: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28685: LD_INT 0
28687: PPUSH
// if not chassis or not weapon then
28688: LD_VAR 0 1
28692: NOT
28693: PUSH
28694: LD_VAR 0 2
28698: NOT
28699: OR
28700: IFFALSE 28704
// exit ;
28702: GO 29764
// case weapon of us_machine_gun :
28704: LD_VAR 0 2
28708: PUSH
28709: LD_INT 2
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28747
28717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: LD_INT 4
28734: PUSH
28735: LD_INT 5
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
28745: GO 29748
28747: LD_INT 3
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28785
28755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: LD_INT 4
28772: PUSH
28773: LD_INT 5
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: ST_TO_ADDR
28783: GO 29748
28785: LD_INT 11
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28793
28791: GO 28823
28793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28794: LD_ADDR_VAR 0 3
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: LD_INT 3
28807: PUSH
28808: LD_INT 4
28810: PUSH
28811: LD_INT 5
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
28821: GO 29748
28823: LD_INT 4
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28857
28831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28832: LD_ADDR_VAR 0 3
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 3
28842: PUSH
28843: LD_INT 4
28845: PUSH
28846: LD_INT 5
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
28855: GO 29748
28857: LD_INT 5
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28891
28865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: LD_INT 4
28879: PUSH
28880: LD_INT 5
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: ST_TO_ADDR
28889: GO 29748
28891: LD_INT 9
28893: DOUBLE
28894: EQUAL
28895: IFTRUE 28899
28897: GO 28925
28899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28900: LD_ADDR_VAR 0 3
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 3
28910: PUSH
28911: LD_INT 4
28913: PUSH
28914: LD_INT 5
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: ST_TO_ADDR
28923: GO 29748
28925: LD_INT 7
28927: DOUBLE
28928: EQUAL
28929: IFTRUE 28933
28931: GO 28959
28933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: LD_INT 3
28944: PUSH
28945: LD_INT 4
28947: PUSH
28948: LD_INT 5
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
28957: GO 29748
28959: LD_INT 12
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 28967
28965: GO 28993
28967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 4
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: ST_TO_ADDR
28991: GO 29748
28993: LD_INT 13
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29027
29001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 4
29015: PUSH
29016: LD_INT 5
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
29025: GO 29748
29027: LD_INT 14
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29053
29035: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_INT 4
29043: PUSH
29044: LD_INT 5
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: ST_TO_ADDR
29051: GO 29748
29053: LD_INT 6
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29079
29061: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: ST_TO_ADDR
29077: GO 29748
29079: LD_INT 10
29081: DOUBLE
29082: EQUAL
29083: IFTRUE 29087
29085: GO 29105
29087: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_INT 4
29095: PUSH
29096: LD_INT 5
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: ST_TO_ADDR
29103: GO 29748
29105: LD_INT 22
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29139
29113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 11
29121: PUSH
29122: LD_INT 12
29124: PUSH
29125: LD_INT 13
29127: PUSH
29128: LD_INT 14
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
29137: GO 29748
29139: LD_INT 23
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29173
29147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 11
29155: PUSH
29156: LD_INT 12
29158: PUSH
29159: LD_INT 13
29161: PUSH
29162: LD_INT 14
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
29171: GO 29748
29173: LD_INT 24
29175: DOUBLE
29176: EQUAL
29177: IFTRUE 29181
29179: GO 29207
29181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 11
29189: PUSH
29190: LD_INT 12
29192: PUSH
29193: LD_INT 13
29195: PUSH
29196: LD_INT 14
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
29205: GO 29748
29207: LD_INT 30
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29241
29215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 11
29223: PUSH
29224: LD_INT 12
29226: PUSH
29227: LD_INT 13
29229: PUSH
29230: LD_INT 14
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
29239: GO 29748
29241: LD_INT 25
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29267
29249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 13
29257: PUSH
29258: LD_INT 14
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: ST_TO_ADDR
29265: GO 29748
29267: LD_INT 27
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29293
29275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29276: LD_ADDR_VAR 0 3
29280: PUSH
29281: LD_INT 13
29283: PUSH
29284: LD_INT 14
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29748
29293: LD_INT 92
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 11
29309: PUSH
29310: LD_INT 12
29312: PUSH
29313: LD_INT 13
29315: PUSH
29316: LD_INT 14
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29748
29327: LD_INT 28
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29353
29335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 13
29343: PUSH
29344: LD_INT 14
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: ST_TO_ADDR
29351: GO 29748
29353: LD_INT 29
29355: DOUBLE
29356: EQUAL
29357: IFTRUE 29361
29359: GO 29379
29361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_INT 13
29369: PUSH
29370: LD_INT 14
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: ST_TO_ADDR
29377: GO 29748
29379: LD_INT 31
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29405
29387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 13
29395: PUSH
29396: LD_INT 14
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: ST_TO_ADDR
29403: GO 29748
29405: LD_INT 26
29407: DOUBLE
29408: EQUAL
29409: IFTRUE 29413
29411: GO 29431
29413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29414: LD_ADDR_VAR 0 3
29418: PUSH
29419: LD_INT 13
29421: PUSH
29422: LD_INT 14
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: ST_TO_ADDR
29429: GO 29748
29431: LD_INT 42
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29465
29439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 22
29450: PUSH
29451: LD_INT 23
29453: PUSH
29454: LD_INT 24
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 29748
29465: LD_INT 43
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 24
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 29748
29499: LD_INT 44
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29533
29507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 21
29515: PUSH
29516: LD_INT 22
29518: PUSH
29519: LD_INT 23
29521: PUSH
29522: LD_INT 24
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: ST_TO_ADDR
29531: GO 29748
29533: LD_INT 45
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29567
29541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 22
29552: PUSH
29553: LD_INT 23
29555: PUSH
29556: LD_INT 24
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
29565: GO 29748
29567: LD_INT 49
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29601
29575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 21
29583: PUSH
29584: LD_INT 22
29586: PUSH
29587: LD_INT 23
29589: PUSH
29590: LD_INT 24
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
29599: GO 29748
29601: LD_INT 51
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29635
29609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_INT 21
29617: PUSH
29618: LD_INT 22
29620: PUSH
29621: LD_INT 23
29623: PUSH
29624: LD_INT 24
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: ST_TO_ADDR
29633: GO 29748
29635: LD_INT 52
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29669
29643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_INT 21
29651: PUSH
29652: LD_INT 22
29654: PUSH
29655: LD_INT 23
29657: PUSH
29658: LD_INT 24
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
29667: GO 29748
29669: LD_INT 53
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29677
29675: GO 29695
29677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29678: LD_ADDR_VAR 0 3
29682: PUSH
29683: LD_INT 23
29685: PUSH
29686: LD_INT 24
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: ST_TO_ADDR
29693: GO 29748
29695: LD_INT 46
29697: DOUBLE
29698: EQUAL
29699: IFTRUE 29703
29701: GO 29721
29703: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29704: LD_ADDR_VAR 0 3
29708: PUSH
29709: LD_INT 23
29711: PUSH
29712: LD_INT 24
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: ST_TO_ADDR
29719: GO 29748
29721: LD_INT 47
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29747
29729: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29730: LD_ADDR_VAR 0 3
29734: PUSH
29735: LD_INT 23
29737: PUSH
29738: LD_INT 24
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 29748
29747: POP
// result := ( chassis in result ) ;
29748: LD_ADDR_VAR 0 3
29752: PUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_VAR 0 3
29762: IN
29763: ST_TO_ADDR
// end ;
29764: LD_VAR 0 3
29768: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29769: LD_INT 0
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
// result := array ;
29778: LD_ADDR_VAR 0 5
29782: PUSH
29783: LD_VAR 0 1
29787: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29788: LD_VAR 0 1
29792: NOT
29793: PUSH
29794: LD_VAR 0 2
29798: NOT
29799: OR
29800: PUSH
29801: LD_VAR 0 3
29805: NOT
29806: OR
29807: PUSH
29808: LD_VAR 0 2
29812: PUSH
29813: LD_VAR 0 1
29817: GREATER
29818: OR
29819: PUSH
29820: LD_VAR 0 3
29824: PUSH
29825: LD_VAR 0 1
29829: GREATER
29830: OR
29831: IFFALSE 29835
// exit ;
29833: GO 30131
// if direction then
29835: LD_VAR 0 4
29839: IFFALSE 29903
// begin d := 1 ;
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: LD_INT 1
29848: ST_TO_ADDR
// if i_from > i_to then
29849: LD_VAR 0 2
29853: PUSH
29854: LD_VAR 0 3
29858: GREATER
29859: IFFALSE 29885
// length := ( array - i_from ) + i_to else
29861: LD_ADDR_VAR 0 11
29865: PUSH
29866: LD_VAR 0 1
29870: PUSH
29871: LD_VAR 0 2
29875: MINUS
29876: PUSH
29877: LD_VAR 0 3
29881: PLUS
29882: ST_TO_ADDR
29883: GO 29901
// length := i_to - i_from ;
29885: LD_ADDR_VAR 0 11
29889: PUSH
29890: LD_VAR 0 3
29894: PUSH
29895: LD_VAR 0 2
29899: MINUS
29900: ST_TO_ADDR
// end else
29901: GO 29964
// begin d := - 1 ;
29903: LD_ADDR_VAR 0 9
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: ST_TO_ADDR
// if i_from > i_to then
29912: LD_VAR 0 2
29916: PUSH
29917: LD_VAR 0 3
29921: GREATER
29922: IFFALSE 29942
// length := i_from - i_to else
29924: LD_ADDR_VAR 0 11
29928: PUSH
29929: LD_VAR 0 2
29933: PUSH
29934: LD_VAR 0 3
29938: MINUS
29939: ST_TO_ADDR
29940: GO 29964
// length := ( array - i_to ) + i_from ;
29942: LD_ADDR_VAR 0 11
29946: PUSH
29947: LD_VAR 0 1
29951: PUSH
29952: LD_VAR 0 3
29956: MINUS
29957: PUSH
29958: LD_VAR 0 2
29962: PLUS
29963: ST_TO_ADDR
// end ; if not length then
29964: LD_VAR 0 11
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30131
// tmp := array ;
29973: LD_ADDR_VAR 0 10
29977: PUSH
29978: LD_VAR 0 1
29982: ST_TO_ADDR
// for i = 1 to length do
29983: LD_ADDR_VAR 0 6
29987: PUSH
29988: DOUBLE
29989: LD_INT 1
29991: DEC
29992: ST_TO_ADDR
29993: LD_VAR 0 11
29997: PUSH
29998: FOR_TO
29999: IFFALSE 30119
// begin for j = 1 to array do
30001: LD_ADDR_VAR 0 7
30005: PUSH
30006: DOUBLE
30007: LD_INT 1
30009: DEC
30010: ST_TO_ADDR
30011: LD_VAR 0 1
30015: PUSH
30016: FOR_TO
30017: IFFALSE 30105
// begin k := j + d ;
30019: LD_ADDR_VAR 0 8
30023: PUSH
30024: LD_VAR 0 7
30028: PUSH
30029: LD_VAR 0 9
30033: PLUS
30034: ST_TO_ADDR
// if k > array then
30035: LD_VAR 0 8
30039: PUSH
30040: LD_VAR 0 1
30044: GREATER
30045: IFFALSE 30055
// k := 1 ;
30047: LD_ADDR_VAR 0 8
30051: PUSH
30052: LD_INT 1
30054: ST_TO_ADDR
// if not k then
30055: LD_VAR 0 8
30059: NOT
30060: IFFALSE 30072
// k := array ;
30062: LD_ADDR_VAR 0 8
30066: PUSH
30067: LD_VAR 0 1
30071: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30072: LD_ADDR_VAR 0 10
30076: PUSH
30077: LD_VAR 0 10
30081: PPUSH
30082: LD_VAR 0 8
30086: PPUSH
30087: LD_VAR 0 1
30091: PUSH
30092: LD_VAR 0 7
30096: ARRAY
30097: PPUSH
30098: CALL_OW 1
30102: ST_TO_ADDR
// end ;
30103: GO 30016
30105: POP
30106: POP
// array := tmp ;
30107: LD_ADDR_VAR 0 1
30111: PUSH
30112: LD_VAR 0 10
30116: ST_TO_ADDR
// end ;
30117: GO 29998
30119: POP
30120: POP
// result := array ;
30121: LD_ADDR_VAR 0 5
30125: PUSH
30126: LD_VAR 0 1
30130: ST_TO_ADDR
// end ;
30131: LD_VAR 0 5
30135: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
// result := 0 ;
30140: LD_ADDR_VAR 0 3
30144: PUSH
30145: LD_INT 0
30147: ST_TO_ADDR
// if not array or not value in array then
30148: LD_VAR 0 1
30152: NOT
30153: PUSH
30154: LD_VAR 0 2
30158: PUSH
30159: LD_VAR 0 1
30163: IN
30164: NOT
30165: OR
30166: IFFALSE 30170
// exit ;
30168: GO 30224
// for i = 1 to array do
30170: LD_ADDR_VAR 0 4
30174: PUSH
30175: DOUBLE
30176: LD_INT 1
30178: DEC
30179: ST_TO_ADDR
30180: LD_VAR 0 1
30184: PUSH
30185: FOR_TO
30186: IFFALSE 30222
// if value = array [ i ] then
30188: LD_VAR 0 2
30192: PUSH
30193: LD_VAR 0 1
30197: PUSH
30198: LD_VAR 0 4
30202: ARRAY
30203: EQUAL
30204: IFFALSE 30220
// begin result := i ;
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_VAR 0 4
30215: ST_TO_ADDR
// exit ;
30216: POP
30217: POP
30218: GO 30224
// end ;
30220: GO 30185
30222: POP
30223: POP
// end ;
30224: LD_VAR 0 3
30228: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30229: LD_INT 0
30231: PPUSH
// vc_chassis := chassis ;
30232: LD_ADDR_OWVAR 37
30236: PUSH
30237: LD_VAR 0 1
30241: ST_TO_ADDR
// vc_engine := engine ;
30242: LD_ADDR_OWVAR 39
30246: PUSH
30247: LD_VAR 0 2
30251: ST_TO_ADDR
// vc_control := control ;
30252: LD_ADDR_OWVAR 38
30256: PUSH
30257: LD_VAR 0 3
30261: ST_TO_ADDR
// vc_weapon := weapon ;
30262: LD_ADDR_OWVAR 40
30266: PUSH
30267: LD_VAR 0 4
30271: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30272: LD_ADDR_OWVAR 41
30276: PUSH
30277: LD_VAR 0 5
30281: ST_TO_ADDR
// end ;
30282: LD_VAR 0 6
30286: RET
// export function WantPlant ( unit ) ; var task ; begin
30287: LD_INT 0
30289: PPUSH
30290: PPUSH
// result := false ;
30291: LD_ADDR_VAR 0 2
30295: PUSH
30296: LD_INT 0
30298: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30299: LD_ADDR_VAR 0 3
30303: PUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: CALL_OW 437
30313: ST_TO_ADDR
// if task then
30314: LD_VAR 0 3
30318: IFFALSE 30346
// if task [ 1 ] [ 1 ] = p then
30320: LD_VAR 0 3
30324: PUSH
30325: LD_INT 1
30327: ARRAY
30328: PUSH
30329: LD_INT 1
30331: ARRAY
30332: PUSH
30333: LD_STRING p
30335: EQUAL
30336: IFFALSE 30346
// result := true ;
30338: LD_ADDR_VAR 0 2
30342: PUSH
30343: LD_INT 1
30345: ST_TO_ADDR
// end ;
30346: LD_VAR 0 2
30350: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30351: LD_INT 0
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
// if pos < 1 then
30357: LD_VAR 0 2
30361: PUSH
30362: LD_INT 1
30364: LESS
30365: IFFALSE 30369
// exit ;
30367: GO 30672
// if pos = 1 then
30369: LD_VAR 0 2
30373: PUSH
30374: LD_INT 1
30376: EQUAL
30377: IFFALSE 30410
// result := Replace ( arr , pos [ 1 ] , value ) else
30379: LD_ADDR_VAR 0 4
30383: PUSH
30384: LD_VAR 0 1
30388: PPUSH
30389: LD_VAR 0 2
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: PPUSH
30398: LD_VAR 0 3
30402: PPUSH
30403: CALL_OW 1
30407: ST_TO_ADDR
30408: GO 30672
// begin tmp := arr ;
30410: LD_ADDR_VAR 0 6
30414: PUSH
30415: LD_VAR 0 1
30419: ST_TO_ADDR
// s_arr := [ tmp ] ;
30420: LD_ADDR_VAR 0 7
30424: PUSH
30425: LD_VAR 0 6
30429: PUSH
30430: EMPTY
30431: LIST
30432: ST_TO_ADDR
// for i = 1 to pos - 1 do
30433: LD_ADDR_VAR 0 5
30437: PUSH
30438: DOUBLE
30439: LD_INT 1
30441: DEC
30442: ST_TO_ADDR
30443: LD_VAR 0 2
30447: PUSH
30448: LD_INT 1
30450: MINUS
30451: PUSH
30452: FOR_TO
30453: IFFALSE 30498
// begin tmp := tmp [ pos [ i ] ] ;
30455: LD_ADDR_VAR 0 6
30459: PUSH
30460: LD_VAR 0 6
30464: PUSH
30465: LD_VAR 0 2
30469: PUSH
30470: LD_VAR 0 5
30474: ARRAY
30475: ARRAY
30476: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30477: LD_ADDR_VAR 0 7
30481: PUSH
30482: LD_VAR 0 7
30486: PUSH
30487: LD_VAR 0 6
30491: PUSH
30492: EMPTY
30493: LIST
30494: ADD
30495: ST_TO_ADDR
// end ;
30496: GO 30452
30498: POP
30499: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30500: LD_ADDR_VAR 0 6
30504: PUSH
30505: LD_VAR 0 6
30509: PPUSH
30510: LD_VAR 0 2
30514: PUSH
30515: LD_VAR 0 2
30519: ARRAY
30520: PPUSH
30521: LD_VAR 0 3
30525: PPUSH
30526: CALL_OW 1
30530: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30531: LD_ADDR_VAR 0 7
30535: PUSH
30536: LD_VAR 0 7
30540: PPUSH
30541: LD_VAR 0 7
30545: PPUSH
30546: LD_VAR 0 6
30550: PPUSH
30551: CALL_OW 1
30555: ST_TO_ADDR
// for i = s_arr downto 2 do
30556: LD_ADDR_VAR 0 5
30560: PUSH
30561: DOUBLE
30562: LD_VAR 0 7
30566: INC
30567: ST_TO_ADDR
30568: LD_INT 2
30570: PUSH
30571: FOR_DOWNTO
30572: IFFALSE 30656
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30574: LD_ADDR_VAR 0 6
30578: PUSH
30579: LD_VAR 0 7
30583: PUSH
30584: LD_VAR 0 5
30588: PUSH
30589: LD_INT 1
30591: MINUS
30592: ARRAY
30593: PPUSH
30594: LD_VAR 0 2
30598: PUSH
30599: LD_VAR 0 5
30603: PUSH
30604: LD_INT 1
30606: MINUS
30607: ARRAY
30608: PPUSH
30609: LD_VAR 0 7
30613: PUSH
30614: LD_VAR 0 5
30618: ARRAY
30619: PPUSH
30620: CALL_OW 1
30624: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30625: LD_ADDR_VAR 0 7
30629: PUSH
30630: LD_VAR 0 7
30634: PPUSH
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 1
30642: MINUS
30643: PPUSH
30644: LD_VAR 0 6
30648: PPUSH
30649: CALL_OW 1
30653: ST_TO_ADDR
// end ;
30654: GO 30571
30656: POP
30657: POP
// result := s_arr [ 1 ] ;
30658: LD_ADDR_VAR 0 4
30662: PUSH
30663: LD_VAR 0 7
30667: PUSH
30668: LD_INT 1
30670: ARRAY
30671: ST_TO_ADDR
// end ; end ;
30672: LD_VAR 0 4
30676: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30677: LD_INT 0
30679: PPUSH
30680: PPUSH
// if not list then
30681: LD_VAR 0 1
30685: NOT
30686: IFFALSE 30690
// exit ;
30688: GO 30781
// i := list [ pos1 ] ;
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_VAR 0 1
30699: PUSH
30700: LD_VAR 0 2
30704: ARRAY
30705: ST_TO_ADDR
// if not i then
30706: LD_VAR 0 5
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 30781
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30715: LD_ADDR_VAR 0 1
30719: PUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: LD_VAR 0 1
30734: PUSH
30735: LD_VAR 0 3
30739: ARRAY
30740: PPUSH
30741: CALL_OW 1
30745: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: LD_VAR 0 1
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: CALL_OW 1
30770: ST_TO_ADDR
// result := list ;
30771: LD_ADDR_VAR 0 4
30775: PUSH
30776: LD_VAR 0 1
30780: ST_TO_ADDR
// end ;
30781: LD_VAR 0 4
30785: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30786: LD_INT 0
30788: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 1
30798: PPUSH
30799: CALL_OW 250
30803: PPUSH
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 251
30813: PPUSH
30814: LD_VAR 0 2
30818: PPUSH
30819: LD_VAR 0 3
30823: PPUSH
30824: LD_VAR 0 4
30828: PPUSH
30829: CALL 30839 0 5
30833: ST_TO_ADDR
// end ;
30834: LD_VAR 0 5
30838: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
// if not list then
30845: LD_VAR 0 3
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 31242
// result := [ ] ;
30854: LD_ADDR_VAR 0 6
30858: PUSH
30859: EMPTY
30860: ST_TO_ADDR
// for i in list do
30861: LD_ADDR_VAR 0 7
30865: PUSH
30866: LD_VAR 0 3
30870: PUSH
30871: FOR_IN
30872: IFFALSE 31074
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30874: LD_ADDR_VAR 0 9
30878: PUSH
30879: LD_VAR 0 7
30883: PPUSH
30884: LD_VAR 0 1
30888: PPUSH
30889: LD_VAR 0 2
30893: PPUSH
30894: CALL_OW 297
30898: ST_TO_ADDR
// if not result then
30899: LD_VAR 0 6
30903: NOT
30904: IFFALSE 30930
// result := [ [ i , tmp ] ] else
30906: LD_ADDR_VAR 0 6
30910: PUSH
30911: LD_VAR 0 7
30915: PUSH
30916: LD_VAR 0 9
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: ST_TO_ADDR
30928: GO 31072
// begin if result [ result ] [ 2 ] < tmp then
30930: LD_VAR 0 6
30934: PUSH
30935: LD_VAR 0 6
30939: ARRAY
30940: PUSH
30941: LD_INT 2
30943: ARRAY
30944: PUSH
30945: LD_VAR 0 9
30949: LESS
30950: IFFALSE 30992
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30952: LD_ADDR_VAR 0 6
30956: PUSH
30957: LD_VAR 0 6
30961: PPUSH
30962: LD_VAR 0 6
30966: PUSH
30967: LD_INT 1
30969: PLUS
30970: PPUSH
30971: LD_VAR 0 7
30975: PUSH
30976: LD_VAR 0 9
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 2
30989: ST_TO_ADDR
30990: GO 31072
// for j = 1 to result do
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: DOUBLE
30998: LD_INT 1
31000: DEC
31001: ST_TO_ADDR
31002: LD_VAR 0 6
31006: PUSH
31007: FOR_TO
31008: IFFALSE 31070
// begin if tmp < result [ j ] [ 2 ] then
31010: LD_VAR 0 9
31014: PUSH
31015: LD_VAR 0 6
31019: PUSH
31020: LD_VAR 0 8
31024: ARRAY
31025: PUSH
31026: LD_INT 2
31028: ARRAY
31029: LESS
31030: IFFALSE 31068
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31032: LD_ADDR_VAR 0 6
31036: PUSH
31037: LD_VAR 0 6
31041: PPUSH
31042: LD_VAR 0 8
31046: PPUSH
31047: LD_VAR 0 7
31051: PUSH
31052: LD_VAR 0 9
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PPUSH
31061: CALL_OW 2
31065: ST_TO_ADDR
// break ;
31066: GO 31070
// end ; end ;
31068: GO 31007
31070: POP
31071: POP
// end ; end ;
31072: GO 30871
31074: POP
31075: POP
// if result and not asc then
31076: LD_VAR 0 6
31080: PUSH
31081: LD_VAR 0 4
31085: NOT
31086: AND
31087: IFFALSE 31162
// begin tmp := result ;
31089: LD_ADDR_VAR 0 9
31093: PUSH
31094: LD_VAR 0 6
31098: ST_TO_ADDR
// for i = tmp downto 1 do
31099: LD_ADDR_VAR 0 7
31103: PUSH
31104: DOUBLE
31105: LD_VAR 0 9
31109: INC
31110: ST_TO_ADDR
31111: LD_INT 1
31113: PUSH
31114: FOR_DOWNTO
31115: IFFALSE 31160
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31117: LD_ADDR_VAR 0 6
31121: PUSH
31122: LD_VAR 0 6
31126: PPUSH
31127: LD_VAR 0 9
31131: PUSH
31132: LD_VAR 0 7
31136: MINUS
31137: PUSH
31138: LD_INT 1
31140: PLUS
31141: PPUSH
31142: LD_VAR 0 9
31146: PUSH
31147: LD_VAR 0 7
31151: ARRAY
31152: PPUSH
31153: CALL_OW 1
31157: ST_TO_ADDR
31158: GO 31114
31160: POP
31161: POP
// end ; tmp := [ ] ;
31162: LD_ADDR_VAR 0 9
31166: PUSH
31167: EMPTY
31168: ST_TO_ADDR
// if mode then
31169: LD_VAR 0 5
31173: IFFALSE 31242
// begin for i = 1 to result do
31175: LD_ADDR_VAR 0 7
31179: PUSH
31180: DOUBLE
31181: LD_INT 1
31183: DEC
31184: ST_TO_ADDR
31185: LD_VAR 0 6
31189: PUSH
31190: FOR_TO
31191: IFFALSE 31230
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31193: LD_ADDR_VAR 0 9
31197: PUSH
31198: LD_VAR 0 9
31202: PPUSH
31203: LD_VAR 0 7
31207: PPUSH
31208: LD_VAR 0 6
31212: PUSH
31213: LD_VAR 0 7
31217: ARRAY
31218: PUSH
31219: LD_INT 1
31221: ARRAY
31222: PPUSH
31223: CALL_OW 1
31227: ST_TO_ADDR
31228: GO 31190
31230: POP
31231: POP
// result := tmp ;
31232: LD_ADDR_VAR 0 6
31236: PUSH
31237: LD_VAR 0 9
31241: ST_TO_ADDR
// end ; end ;
31242: LD_VAR 0 6
31246: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// if not x or not y then
31277: LD_VAR 0 2
31281: NOT
31282: PUSH
31283: LD_VAR 0 3
31287: NOT
31288: OR
31289: IFFALSE 31293
// exit ;
31291: GO 32943
// if not range then
31293: LD_VAR 0 4
31297: NOT
31298: IFFALSE 31308
// range := 10 ;
31300: LD_ADDR_VAR 0 4
31304: PUSH
31305: LD_INT 10
31307: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31308: LD_ADDR_VAR 0 8
31312: PUSH
31313: LD_INT 81
31315: PUSH
31316: LD_VAR 0 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 92
31327: PUSH
31328: LD_VAR 0 2
31332: PUSH
31333: LD_VAR 0 3
31337: PUSH
31338: LD_VAR 0 4
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 21
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: PPUSH
31371: CALL_OW 69
31375: ST_TO_ADDR
// if not tmp then
31376: LD_VAR 0 8
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 32943
// for i in tmp do
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_VAR 0 8
31394: PUSH
31395: FOR_IN
31396: IFFALSE 32918
// begin points := [ 0 , 0 , 0 ] ;
31398: LD_ADDR_VAR 0 9
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: ST_TO_ADDR
// bpoints := 1 ;
31417: LD_ADDR_VAR 0 10
31421: PUSH
31422: LD_INT 1
31424: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31425: LD_VAR 0 6
31429: PPUSH
31430: CALL_OW 247
31434: PUSH
31435: LD_INT 1
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 32021
31443: POP
// begin if GetClass ( i ) = 1 then
31444: LD_VAR 0 6
31448: PPUSH
31449: CALL_OW 257
31453: PUSH
31454: LD_INT 1
31456: EQUAL
31457: IFFALSE 31478
// points := [ 10 , 5 , 3 ] ;
31459: LD_ADDR_VAR 0 9
31463: PUSH
31464: LD_INT 10
31466: PUSH
31467: LD_INT 5
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31478: LD_VAR 0 6
31482: PPUSH
31483: CALL_OW 257
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 4
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: IN
31502: IFFALSE 31523
// points := [ 3 , 2 , 1 ] ;
31504: LD_ADDR_VAR 0 9
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 257
31532: PUSH
31533: LD_INT 5
31535: EQUAL
31536: IFFALSE 31557
// points := [ 130 , 5 , 2 ] ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_INT 130
31545: PUSH
31546: LD_INT 5
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31557: LD_VAR 0 6
31561: PPUSH
31562: CALL_OW 257
31566: PUSH
31567: LD_INT 8
31569: EQUAL
31570: IFFALSE 31591
// points := [ 35 , 35 , 30 ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_INT 35
31579: PUSH
31580: LD_INT 35
31582: PUSH
31583: LD_INT 30
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 257
31600: PUSH
31601: LD_INT 9
31603: EQUAL
31604: IFFALSE 31625
// points := [ 20 , 55 , 40 ] ;
31606: LD_ADDR_VAR 0 9
31610: PUSH
31611: LD_INT 20
31613: PUSH
31614: LD_INT 55
31616: PUSH
31617: LD_INT 40
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31625: LD_VAR 0 6
31629: PPUSH
31630: CALL_OW 257
31634: PUSH
31635: LD_INT 12
31637: PUSH
31638: LD_INT 16
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: IN
31645: IFFALSE 31666
// points := [ 5 , 3 , 2 ] ;
31647: LD_ADDR_VAR 0 9
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31666: LD_VAR 0 6
31670: PPUSH
31671: CALL_OW 257
31675: PUSH
31676: LD_INT 17
31678: EQUAL
31679: IFFALSE 31700
// points := [ 100 , 50 , 75 ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_INT 100
31688: PUSH
31689: LD_INT 50
31691: PUSH
31692: LD_INT 75
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31700: LD_VAR 0 6
31704: PPUSH
31705: CALL_OW 257
31709: PUSH
31710: LD_INT 15
31712: EQUAL
31713: IFFALSE 31734
// points := [ 10 , 5 , 3 ] ;
31715: LD_ADDR_VAR 0 9
31719: PUSH
31720: LD_INT 10
31722: PUSH
31723: LD_INT 5
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31734: LD_VAR 0 6
31738: PPUSH
31739: CALL_OW 257
31743: PUSH
31744: LD_INT 14
31746: EQUAL
31747: IFFALSE 31768
// points := [ 10 , 0 , 0 ] ;
31749: LD_ADDR_VAR 0 9
31753: PUSH
31754: LD_INT 10
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31768: LD_VAR 0 6
31772: PPUSH
31773: CALL_OW 257
31777: PUSH
31778: LD_INT 11
31780: EQUAL
31781: IFFALSE 31802
// points := [ 30 , 10 , 5 ] ;
31783: LD_ADDR_VAR 0 9
31787: PUSH
31788: LD_INT 30
31790: PUSH
31791: LD_INT 10
31793: PUSH
31794: LD_INT 5
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31802: LD_VAR 0 1
31806: PPUSH
31807: LD_INT 5
31809: PPUSH
31810: CALL_OW 321
31814: PUSH
31815: LD_INT 2
31817: EQUAL
31818: IFFALSE 31835
// bpoints := bpoints * 1.8 ;
31820: LD_ADDR_VAR 0 10
31824: PUSH
31825: LD_VAR 0 10
31829: PUSH
31830: LD_REAL  1.80000000000000E+0000
31833: MUL
31834: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31835: LD_VAR 0 6
31839: PPUSH
31840: CALL_OW 257
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: IN
31863: PUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_INT 51
31871: PPUSH
31872: CALL_OW 321
31876: PUSH
31877: LD_INT 2
31879: EQUAL
31880: AND
31881: IFFALSE 31898
// bpoints := bpoints * 1.2 ;
31883: LD_ADDR_VAR 0 10
31887: PUSH
31888: LD_VAR 0 10
31892: PUSH
31893: LD_REAL  1.20000000000000E+0000
31896: MUL
31897: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31898: LD_VAR 0 6
31902: PPUSH
31903: CALL_OW 257
31907: PUSH
31908: LD_INT 5
31910: PUSH
31911: LD_INT 7
31913: PUSH
31914: LD_INT 9
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: IN
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: LD_INT 52
31930: PPUSH
31931: CALL_OW 321
31935: PUSH
31936: LD_INT 2
31938: EQUAL
31939: AND
31940: IFFALSE 31957
// bpoints := bpoints * 1.5 ;
31942: LD_ADDR_VAR 0 10
31946: PUSH
31947: LD_VAR 0 10
31951: PUSH
31952: LD_REAL  1.50000000000000E+0000
31955: MUL
31956: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31957: LD_VAR 0 1
31961: PPUSH
31962: LD_INT 66
31964: PPUSH
31965: CALL_OW 321
31969: PUSH
31970: LD_INT 2
31972: EQUAL
31973: IFFALSE 31990
// bpoints := bpoints * 1.1 ;
31975: LD_ADDR_VAR 0 10
31979: PUSH
31980: LD_VAR 0 10
31984: PUSH
31985: LD_REAL  1.10000000000000E+0000
31988: MUL
31989: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31990: LD_ADDR_VAR 0 10
31994: PUSH
31995: LD_VAR 0 10
31999: PUSH
32000: LD_VAR 0 6
32004: PPUSH
32005: LD_INT 1
32007: PPUSH
32008: CALL_OW 259
32012: PUSH
32013: LD_REAL  1.15000000000000E+0000
32016: MUL
32017: MUL
32018: ST_TO_ADDR
// end ; unit_vehicle :
32019: GO 32847
32021: LD_INT 2
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32835
32029: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32030: LD_VAR 0 6
32034: PPUSH
32035: CALL_OW 264
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 42
32045: PUSH
32046: LD_INT 24
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: IN
32054: IFFALSE 32075
// points := [ 25 , 5 , 3 ] ;
32056: LD_ADDR_VAR 0 9
32060: PUSH
32061: LD_INT 25
32063: PUSH
32064: LD_INT 5
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32075: LD_VAR 0 6
32079: PPUSH
32080: CALL_OW 264
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: LD_INT 43
32090: PUSH
32091: LD_INT 25
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: IN
32099: IFFALSE 32120
// points := [ 40 , 15 , 5 ] ;
32101: LD_ADDR_VAR 0 9
32105: PUSH
32106: LD_INT 40
32108: PUSH
32109: LD_INT 15
32111: PUSH
32112: LD_INT 5
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32120: LD_VAR 0 6
32124: PPUSH
32125: CALL_OW 264
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 23
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: IN
32140: IFFALSE 32161
// points := [ 7 , 25 , 8 ] ;
32142: LD_ADDR_VAR 0 9
32146: PUSH
32147: LD_INT 7
32149: PUSH
32150: LD_INT 25
32152: PUSH
32153: LD_INT 8
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32161: LD_VAR 0 6
32165: PPUSH
32166: CALL_OW 264
32170: PUSH
32171: LD_INT 5
32173: PUSH
32174: LD_INT 27
32176: PUSH
32177: LD_INT 44
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: IN
32185: IFFALSE 32206
// points := [ 14 , 50 , 16 ] ;
32187: LD_ADDR_VAR 0 9
32191: PUSH
32192: LD_INT 14
32194: PUSH
32195: LD_INT 50
32197: PUSH
32198: LD_INT 16
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32206: LD_VAR 0 6
32210: PPUSH
32211: CALL_OW 264
32215: PUSH
32216: LD_INT 6
32218: PUSH
32219: LD_INT 46
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: IN
32226: IFFALSE 32247
// points := [ 32 , 120 , 70 ] ;
32228: LD_ADDR_VAR 0 9
32232: PUSH
32233: LD_INT 32
32235: PUSH
32236: LD_INT 120
32238: PUSH
32239: LD_INT 70
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32247: LD_VAR 0 6
32251: PPUSH
32252: CALL_OW 264
32256: PUSH
32257: LD_INT 7
32259: PUSH
32260: LD_INT 28
32262: PUSH
32263: LD_INT 45
32265: PUSH
32266: LD_INT 92
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: IN
32275: IFFALSE 32296
// points := [ 35 , 20 , 45 ] ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_INT 35
32284: PUSH
32285: LD_INT 20
32287: PUSH
32288: LD_INT 45
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32296: LD_VAR 0 6
32300: PPUSH
32301: CALL_OW 264
32305: PUSH
32306: LD_INT 47
32308: PUSH
32309: EMPTY
32310: LIST
32311: IN
32312: IFFALSE 32333
// points := [ 67 , 45 , 75 ] ;
32314: LD_ADDR_VAR 0 9
32318: PUSH
32319: LD_INT 67
32321: PUSH
32322: LD_INT 45
32324: PUSH
32325: LD_INT 75
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32333: LD_VAR 0 6
32337: PPUSH
32338: CALL_OW 264
32342: PUSH
32343: LD_INT 26
32345: PUSH
32346: EMPTY
32347: LIST
32348: IN
32349: IFFALSE 32370
// points := [ 120 , 30 , 80 ] ;
32351: LD_ADDR_VAR 0 9
32355: PUSH
32356: LD_INT 120
32358: PUSH
32359: LD_INT 30
32361: PUSH
32362: LD_INT 80
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32370: LD_VAR 0 6
32374: PPUSH
32375: CALL_OW 264
32379: PUSH
32380: LD_INT 22
32382: PUSH
32383: EMPTY
32384: LIST
32385: IN
32386: IFFALSE 32407
// points := [ 40 , 1 , 1 ] ;
32388: LD_ADDR_VAR 0 9
32392: PUSH
32393: LD_INT 40
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32407: LD_VAR 0 6
32411: PPUSH
32412: CALL_OW 264
32416: PUSH
32417: LD_INT 29
32419: PUSH
32420: EMPTY
32421: LIST
32422: IN
32423: IFFALSE 32444
// points := [ 70 , 200 , 400 ] ;
32425: LD_ADDR_VAR 0 9
32429: PUSH
32430: LD_INT 70
32432: PUSH
32433: LD_INT 200
32435: PUSH
32436: LD_INT 400
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32444: LD_VAR 0 6
32448: PPUSH
32449: CALL_OW 264
32453: PUSH
32454: LD_INT 14
32456: PUSH
32457: LD_INT 53
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: IN
32464: IFFALSE 32485
// points := [ 40 , 10 , 20 ] ;
32466: LD_ADDR_VAR 0 9
32470: PUSH
32471: LD_INT 40
32473: PUSH
32474: LD_INT 10
32476: PUSH
32477: LD_INT 20
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32485: LD_VAR 0 6
32489: PPUSH
32490: CALL_OW 264
32494: PUSH
32495: LD_INT 9
32497: PUSH
32498: EMPTY
32499: LIST
32500: IN
32501: IFFALSE 32522
// points := [ 5 , 70 , 20 ] ;
32503: LD_ADDR_VAR 0 9
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: LD_INT 70
32513: PUSH
32514: LD_INT 20
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32522: LD_VAR 0 6
32526: PPUSH
32527: CALL_OW 264
32531: PUSH
32532: LD_INT 10
32534: PUSH
32535: EMPTY
32536: LIST
32537: IN
32538: IFFALSE 32559
// points := [ 35 , 110 , 70 ] ;
32540: LD_ADDR_VAR 0 9
32544: PUSH
32545: LD_INT 35
32547: PUSH
32548: LD_INT 110
32550: PUSH
32551: LD_INT 70
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32559: LD_VAR 0 6
32563: PPUSH
32564: CALL_OW 265
32568: PUSH
32569: LD_INT 25
32571: EQUAL
32572: IFFALSE 32593
// points := [ 80 , 65 , 100 ] ;
32574: LD_ADDR_VAR 0 9
32578: PUSH
32579: LD_INT 80
32581: PUSH
32582: LD_INT 65
32584: PUSH
32585: LD_INT 100
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32593: LD_VAR 0 6
32597: PPUSH
32598: CALL_OW 263
32602: PUSH
32603: LD_INT 1
32605: EQUAL
32606: IFFALSE 32641
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32608: LD_ADDR_VAR 0 10
32612: PUSH
32613: LD_VAR 0 10
32617: PUSH
32618: LD_VAR 0 6
32622: PPUSH
32623: CALL_OW 311
32627: PPUSH
32628: LD_INT 3
32630: PPUSH
32631: CALL_OW 259
32635: PUSH
32636: LD_INT 4
32638: MUL
32639: MUL
32640: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32641: LD_VAR 0 6
32645: PPUSH
32646: CALL_OW 263
32650: PUSH
32651: LD_INT 2
32653: EQUAL
32654: IFFALSE 32705
// begin j := IsControledBy ( i ) ;
32656: LD_ADDR_VAR 0 7
32660: PUSH
32661: LD_VAR 0 6
32665: PPUSH
32666: CALL_OW 312
32670: ST_TO_ADDR
// if j then
32671: LD_VAR 0 7
32675: IFFALSE 32705
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32677: LD_ADDR_VAR 0 10
32681: PUSH
32682: LD_VAR 0 10
32686: PUSH
32687: LD_VAR 0 7
32691: PPUSH
32692: LD_INT 3
32694: PPUSH
32695: CALL_OW 259
32699: PUSH
32700: LD_INT 3
32702: MUL
32703: MUL
32704: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32705: LD_VAR 0 6
32709: PPUSH
32710: CALL_OW 264
32714: PUSH
32715: LD_INT 5
32717: PUSH
32718: LD_INT 6
32720: PUSH
32721: LD_INT 46
32723: PUSH
32724: LD_INT 44
32726: PUSH
32727: LD_INT 47
32729: PUSH
32730: LD_INT 45
32732: PUSH
32733: LD_INT 28
32735: PUSH
32736: LD_INT 7
32738: PUSH
32739: LD_INT 27
32741: PUSH
32742: LD_INT 29
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: IN
32757: PUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: LD_INT 52
32765: PPUSH
32766: CALL_OW 321
32770: PUSH
32771: LD_INT 2
32773: EQUAL
32774: AND
32775: IFFALSE 32792
// bpoints := bpoints * 1.2 ;
32777: LD_ADDR_VAR 0 10
32781: PUSH
32782: LD_VAR 0 10
32786: PUSH
32787: LD_REAL  1.20000000000000E+0000
32790: MUL
32791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32792: LD_VAR 0 6
32796: PPUSH
32797: CALL_OW 264
32801: PUSH
32802: LD_INT 6
32804: PUSH
32805: LD_INT 46
32807: PUSH
32808: LD_INT 47
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: IN
32816: IFFALSE 32833
// bpoints := bpoints * 1.2 ;
32818: LD_ADDR_VAR 0 10
32822: PUSH
32823: LD_VAR 0 10
32827: PUSH
32828: LD_REAL  1.20000000000000E+0000
32831: MUL
32832: ST_TO_ADDR
// end ; unit_building :
32833: GO 32847
32835: LD_INT 3
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32846
32843: POP
// ; end ;
32844: GO 32847
32846: POP
// for j = 1 to 3 do
32847: LD_ADDR_VAR 0 7
32851: PUSH
32852: DOUBLE
32853: LD_INT 1
32855: DEC
32856: ST_TO_ADDR
32857: LD_INT 3
32859: PUSH
32860: FOR_TO
32861: IFFALSE 32914
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32863: LD_ADDR_VAR 0 5
32867: PUSH
32868: LD_VAR 0 5
32872: PPUSH
32873: LD_VAR 0 7
32877: PPUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_VAR 0 7
32887: ARRAY
32888: PUSH
32889: LD_VAR 0 9
32893: PUSH
32894: LD_VAR 0 7
32898: ARRAY
32899: PUSH
32900: LD_VAR 0 10
32904: MUL
32905: PLUS
32906: PPUSH
32907: CALL_OW 1
32911: ST_TO_ADDR
32912: GO 32860
32914: POP
32915: POP
// end ;
32916: GO 31395
32918: POP
32919: POP
// result := Replace ( result , 4 , tmp ) ;
32920: LD_ADDR_VAR 0 5
32924: PUSH
32925: LD_VAR 0 5
32929: PPUSH
32930: LD_INT 4
32932: PPUSH
32933: LD_VAR 0 8
32937: PPUSH
32938: CALL_OW 1
32942: ST_TO_ADDR
// end ;
32943: LD_VAR 0 5
32947: RET
// export function DangerAtRange ( unit , range ) ; begin
32948: LD_INT 0
32950: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 255
32965: PPUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 250
32975: PPUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL_OW 251
32985: PPUSH
32986: LD_VAR 0 2
32990: PPUSH
32991: CALL 31247 0 4
32995: ST_TO_ADDR
// end ;
32996: LD_VAR 0 3
33000: RET
// export function DangerInArea ( side , area ) ; begin
33001: LD_INT 0
33003: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_VAR 0 2
33013: PPUSH
33014: LD_INT 81
33016: PUSH
33017: LD_VAR 0 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PPUSH
33026: CALL_OW 70
33030: ST_TO_ADDR
// end ;
33031: LD_VAR 0 3
33035: RET
// export function IsExtension ( b ) ; begin
33036: LD_INT 0
33038: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33039: LD_ADDR_VAR 0 2
33043: PUSH
33044: LD_VAR 0 1
33048: PUSH
33049: LD_INT 23
33051: PUSH
33052: LD_INT 20
33054: PUSH
33055: LD_INT 22
33057: PUSH
33058: LD_INT 17
33060: PUSH
33061: LD_INT 24
33063: PUSH
33064: LD_INT 21
33066: PUSH
33067: LD_INT 19
33069: PUSH
33070: LD_INT 16
33072: PUSH
33073: LD_INT 25
33075: PUSH
33076: LD_INT 18
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: IN
33091: ST_TO_ADDR
// end ;
33092: LD_VAR 0 2
33096: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
33101: PPUSH
// result := [ ] ;
33102: LD_ADDR_VAR 0 4
33106: PUSH
33107: EMPTY
33108: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33109: LD_ADDR_VAR 0 5
33113: PUSH
33114: LD_VAR 0 2
33118: PPUSH
33119: LD_INT 21
33121: PUSH
33122: LD_INT 3
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 70
33133: ST_TO_ADDR
// if not tmp then
33134: LD_VAR 0 5
33138: NOT
33139: IFFALSE 33143
// exit ;
33141: GO 33207
// if checkLink then
33143: LD_VAR 0 3
33147: IFFALSE 33197
// begin for i in tmp do
33149: LD_ADDR_VAR 0 6
33153: PUSH
33154: LD_VAR 0 5
33158: PUSH
33159: FOR_IN
33160: IFFALSE 33195
// if GetBase ( i ) <> base then
33162: LD_VAR 0 6
33166: PPUSH
33167: CALL_OW 274
33171: PUSH
33172: LD_VAR 0 1
33176: NONEQUAL
33177: IFFALSE 33193
// ComLinkToBase ( base , i ) ;
33179: LD_VAR 0 1
33183: PPUSH
33184: LD_VAR 0 6
33188: PPUSH
33189: CALL_OW 169
33193: GO 33159
33195: POP
33196: POP
// end ; result := tmp ;
33197: LD_ADDR_VAR 0 4
33201: PUSH
33202: LD_VAR 0 5
33206: ST_TO_ADDR
// end ;
33207: LD_VAR 0 4
33211: RET
// export function ComComplete ( units , b ) ; var i ; begin
33212: LD_INT 0
33214: PPUSH
33215: PPUSH
// if not units then
33216: LD_VAR 0 1
33220: NOT
33221: IFFALSE 33225
// exit ;
33223: GO 33315
// for i in units do
33225: LD_ADDR_VAR 0 4
33229: PUSH
33230: LD_VAR 0 1
33234: PUSH
33235: FOR_IN
33236: IFFALSE 33313
// if BuildingStatus ( b ) = bs_build then
33238: LD_VAR 0 2
33242: PPUSH
33243: CALL_OW 461
33247: PUSH
33248: LD_INT 1
33250: EQUAL
33251: IFFALSE 33311
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33253: LD_VAR 0 4
33257: PPUSH
33258: LD_STRING h
33260: PUSH
33261: LD_VAR 0 2
33265: PPUSH
33266: CALL_OW 250
33270: PUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: CALL_OW 251
33280: PUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: PPUSH
33307: CALL_OW 446
33311: GO 33235
33313: POP
33314: POP
// end ;
33315: LD_VAR 0 3
33319: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33320: LD_INT 0
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33328: LD_VAR 0 1
33332: NOT
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 263
33343: PUSH
33344: LD_INT 2
33346: NONEQUAL
33347: OR
33348: IFFALSE 33352
// exit ;
33350: GO 33668
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33352: LD_ADDR_VAR 0 6
33356: PUSH
33357: LD_INT 22
33359: PUSH
33360: LD_VAR 0 1
33364: PPUSH
33365: CALL_OW 255
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 36
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 34
33389: PUSH
33390: LD_INT 31
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 69
33410: ST_TO_ADDR
// if not tmp then
33411: LD_VAR 0 6
33415: NOT
33416: IFFALSE 33420
// exit ;
33418: GO 33668
// result := [ ] ;
33420: LD_ADDR_VAR 0 2
33424: PUSH
33425: EMPTY
33426: ST_TO_ADDR
// for i in tmp do
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_VAR 0 6
33436: PUSH
33437: FOR_IN
33438: IFFALSE 33509
// begin t := UnitsInside ( i ) ;
33440: LD_ADDR_VAR 0 4
33444: PUSH
33445: LD_VAR 0 3
33449: PPUSH
33450: CALL_OW 313
33454: ST_TO_ADDR
// if t then
33455: LD_VAR 0 4
33459: IFFALSE 33507
// for j in t do
33461: LD_ADDR_VAR 0 7
33465: PUSH
33466: LD_VAR 0 4
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33505
// result := Replace ( result , result + 1 , j ) ;
33474: LD_ADDR_VAR 0 2
33478: PUSH
33479: LD_VAR 0 2
33483: PPUSH
33484: LD_VAR 0 2
33488: PUSH
33489: LD_INT 1
33491: PLUS
33492: PPUSH
33493: LD_VAR 0 7
33497: PPUSH
33498: CALL_OW 1
33502: ST_TO_ADDR
33503: GO 33471
33505: POP
33506: POP
// end ;
33507: GO 33437
33509: POP
33510: POP
// if not result then
33511: LD_VAR 0 2
33515: NOT
33516: IFFALSE 33520
// exit ;
33518: GO 33668
// mech := result [ 1 ] ;
33520: LD_ADDR_VAR 0 5
33524: PUSH
33525: LD_VAR 0 2
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: ST_TO_ADDR
// if result > 1 then
33534: LD_VAR 0 2
33538: PUSH
33539: LD_INT 1
33541: GREATER
33542: IFFALSE 33654
// begin for i = 2 to result do
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: DOUBLE
33550: LD_INT 2
33552: DEC
33553: ST_TO_ADDR
33554: LD_VAR 0 2
33558: PUSH
33559: FOR_TO
33560: IFFALSE 33652
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33562: LD_ADDR_VAR 0 4
33566: PUSH
33567: LD_VAR 0 2
33571: PUSH
33572: LD_VAR 0 3
33576: ARRAY
33577: PPUSH
33578: LD_INT 3
33580: PPUSH
33581: CALL_OW 259
33585: PUSH
33586: LD_VAR 0 2
33590: PUSH
33591: LD_VAR 0 3
33595: ARRAY
33596: PPUSH
33597: CALL_OW 432
33601: MINUS
33602: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33603: LD_VAR 0 4
33607: PUSH
33608: LD_VAR 0 5
33612: PPUSH
33613: LD_INT 3
33615: PPUSH
33616: CALL_OW 259
33620: PUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL_OW 432
33630: MINUS
33631: GREATEREQUAL
33632: IFFALSE 33650
// mech := result [ i ] ;
33634: LD_ADDR_VAR 0 5
33638: PUSH
33639: LD_VAR 0 2
33643: PUSH
33644: LD_VAR 0 3
33648: ARRAY
33649: ST_TO_ADDR
// end ;
33650: GO 33559
33652: POP
33653: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33654: LD_VAR 0 1
33658: PPUSH
33659: LD_VAR 0 5
33663: PPUSH
33664: CALL_OW 135
// end ;
33668: LD_VAR 0 2
33672: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33673: LD_INT 0
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
33687: PPUSH
// result := [ ] ;
33688: LD_ADDR_VAR 0 7
33692: PUSH
33693: EMPTY
33694: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 266
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: IN
33715: NOT
33716: IFFALSE 33720
// exit ;
33718: GO 35354
// if name then
33720: LD_VAR 0 3
33724: IFFALSE 33740
// SetBName ( base_dep , name ) ;
33726: LD_VAR 0 1
33730: PPUSH
33731: LD_VAR 0 3
33735: PPUSH
33736: CALL_OW 500
// base := GetBase ( base_dep ) ;
33740: LD_ADDR_VAR 0 15
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 274
33754: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33755: LD_ADDR_VAR 0 16
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 255
33769: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33770: LD_ADDR_VAR 0 17
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 248
33784: ST_TO_ADDR
// if sources then
33785: LD_VAR 0 5
33789: IFFALSE 33836
// for i = 1 to 3 do
33791: LD_ADDR_VAR 0 8
33795: PUSH
33796: DOUBLE
33797: LD_INT 1
33799: DEC
33800: ST_TO_ADDR
33801: LD_INT 3
33803: PUSH
33804: FOR_TO
33805: IFFALSE 33834
// AddResourceType ( base , i , sources [ i ] ) ;
33807: LD_VAR 0 15
33811: PPUSH
33812: LD_VAR 0 8
33816: PPUSH
33817: LD_VAR 0 5
33821: PUSH
33822: LD_VAR 0 8
33826: ARRAY
33827: PPUSH
33828: CALL_OW 276
33832: GO 33804
33834: POP
33835: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33836: LD_ADDR_VAR 0 18
33840: PUSH
33841: LD_VAR 0 15
33845: PPUSH
33846: LD_VAR 0 2
33850: PPUSH
33851: LD_INT 1
33853: PPUSH
33854: CALL 33097 0 3
33858: ST_TO_ADDR
// InitHc ;
33859: CALL_OW 19
// InitUc ;
33863: CALL_OW 18
// uc_side := side ;
33867: LD_ADDR_OWVAR 20
33871: PUSH
33872: LD_VAR 0 16
33876: ST_TO_ADDR
// uc_nation := nation ;
33877: LD_ADDR_OWVAR 21
33881: PUSH
33882: LD_VAR 0 17
33886: ST_TO_ADDR
// if buildings then
33887: LD_VAR 0 18
33891: IFFALSE 35213
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33893: LD_ADDR_VAR 0 19
33897: PUSH
33898: LD_VAR 0 18
33902: PPUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 30
33908: PUSH
33909: LD_INT 29
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 30
33918: PUSH
33919: LD_INT 30
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: PPUSH
33931: CALL_OW 72
33935: ST_TO_ADDR
// if tmp then
33936: LD_VAR 0 19
33940: IFFALSE 33988
// for i in tmp do
33942: LD_ADDR_VAR 0 8
33946: PUSH
33947: LD_VAR 0 19
33951: PUSH
33952: FOR_IN
33953: IFFALSE 33986
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33955: LD_VAR 0 8
33959: PPUSH
33960: CALL_OW 250
33964: PPUSH
33965: LD_VAR 0 8
33969: PPUSH
33970: CALL_OW 251
33974: PPUSH
33975: LD_VAR 0 16
33979: PPUSH
33980: CALL_OW 441
33984: GO 33952
33986: POP
33987: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33988: LD_VAR 0 18
33992: PPUSH
33993: LD_INT 2
33995: PUSH
33996: LD_INT 30
33998: PUSH
33999: LD_INT 32
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 30
34008: PUSH
34009: LD_INT 33
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: PPUSH
34021: CALL_OW 72
34025: IFFALSE 34113
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34027: LD_ADDR_VAR 0 8
34031: PUSH
34032: LD_VAR 0 18
34036: PPUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 32
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 30
34052: PUSH
34053: LD_INT 33
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: PPUSH
34065: CALL_OW 72
34069: PUSH
34070: FOR_IN
34071: IFFALSE 34111
// begin if not GetBWeapon ( i ) then
34073: LD_VAR 0 8
34077: PPUSH
34078: CALL_OW 269
34082: NOT
34083: IFFALSE 34109
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34085: LD_VAR 0 8
34089: PPUSH
34090: LD_VAR 0 8
34094: PPUSH
34095: LD_VAR 0 2
34099: PPUSH
34100: CALL 35359 0 2
34104: PPUSH
34105: CALL_OW 431
// end ;
34109: GO 34070
34111: POP
34112: POP
// end ; for i = 1 to personel do
34113: LD_ADDR_VAR 0 8
34117: PUSH
34118: DOUBLE
34119: LD_INT 1
34121: DEC
34122: ST_TO_ADDR
34123: LD_VAR 0 6
34127: PUSH
34128: FOR_TO
34129: IFFALSE 35193
// begin if i > 4 then
34131: LD_VAR 0 8
34135: PUSH
34136: LD_INT 4
34138: GREATER
34139: IFFALSE 34143
// break ;
34141: GO 35193
// case i of 1 :
34143: LD_VAR 0 8
34147: PUSH
34148: LD_INT 1
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34236
34156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34157: LD_ADDR_VAR 0 12
34161: PUSH
34162: LD_VAR 0 18
34166: PPUSH
34167: LD_INT 22
34169: PUSH
34170: LD_VAR 0 16
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 58
34181: PUSH
34182: EMPTY
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 30
34190: PUSH
34191: LD_INT 32
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 30
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 30
34210: PUSH
34211: LD_INT 5
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PPUSH
34229: CALL_OW 72
34233: ST_TO_ADDR
34234: GO 34458
34236: LD_INT 2
34238: DOUBLE
34239: EQUAL
34240: IFTRUE 34244
34242: GO 34306
34244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34245: LD_ADDR_VAR 0 12
34249: PUSH
34250: LD_VAR 0 18
34254: PPUSH
34255: LD_INT 22
34257: PUSH
34258: LD_VAR 0 16
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 30
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 30
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PPUSH
34299: CALL_OW 72
34303: ST_TO_ADDR
34304: GO 34458
34306: LD_INT 3
34308: DOUBLE
34309: EQUAL
34310: IFTRUE 34314
34312: GO 34376
34314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34315: LD_ADDR_VAR 0 12
34319: PUSH
34320: LD_VAR 0 18
34324: PPUSH
34325: LD_INT 22
34327: PUSH
34328: LD_VAR 0 16
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: LD_INT 30
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 30
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PPUSH
34369: CALL_OW 72
34373: ST_TO_ADDR
34374: GO 34458
34376: LD_INT 4
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34457
34384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34385: LD_ADDR_VAR 0 12
34389: PUSH
34390: LD_VAR 0 18
34394: PPUSH
34395: LD_INT 22
34397: PUSH
34398: LD_VAR 0 16
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 30
34412: PUSH
34413: LD_INT 6
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 30
34422: PUSH
34423: LD_INT 7
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 30
34432: PUSH
34433: LD_INT 8
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PPUSH
34450: CALL_OW 72
34454: ST_TO_ADDR
34455: GO 34458
34457: POP
// if i = 1 then
34458: LD_VAR 0 8
34462: PUSH
34463: LD_INT 1
34465: EQUAL
34466: IFFALSE 34577
// begin tmp := [ ] ;
34468: LD_ADDR_VAR 0 19
34472: PUSH
34473: EMPTY
34474: ST_TO_ADDR
// for j in f do
34475: LD_ADDR_VAR 0 9
34479: PUSH
34480: LD_VAR 0 12
34484: PUSH
34485: FOR_IN
34486: IFFALSE 34559
// if GetBType ( j ) = b_bunker then
34488: LD_VAR 0 9
34492: PPUSH
34493: CALL_OW 266
34497: PUSH
34498: LD_INT 32
34500: EQUAL
34501: IFFALSE 34528
// tmp := Insert ( tmp , 1 , j ) else
34503: LD_ADDR_VAR 0 19
34507: PUSH
34508: LD_VAR 0 19
34512: PPUSH
34513: LD_INT 1
34515: PPUSH
34516: LD_VAR 0 9
34520: PPUSH
34521: CALL_OW 2
34525: ST_TO_ADDR
34526: GO 34557
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34528: LD_ADDR_VAR 0 19
34532: PUSH
34533: LD_VAR 0 19
34537: PPUSH
34538: LD_VAR 0 19
34542: PUSH
34543: LD_INT 1
34545: PLUS
34546: PPUSH
34547: LD_VAR 0 9
34551: PPUSH
34552: CALL_OW 2
34556: ST_TO_ADDR
34557: GO 34485
34559: POP
34560: POP
// if tmp then
34561: LD_VAR 0 19
34565: IFFALSE 34577
// f := tmp ;
34567: LD_ADDR_VAR 0 12
34571: PUSH
34572: LD_VAR 0 19
34576: ST_TO_ADDR
// end ; x := personel [ i ] ;
34577: LD_ADDR_VAR 0 13
34581: PUSH
34582: LD_VAR 0 6
34586: PUSH
34587: LD_VAR 0 8
34591: ARRAY
34592: ST_TO_ADDR
// if x = - 1 then
34593: LD_VAR 0 13
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: EQUAL
34602: IFFALSE 34811
// begin for j in f do
34604: LD_ADDR_VAR 0 9
34608: PUSH
34609: LD_VAR 0 12
34613: PUSH
34614: FOR_IN
34615: IFFALSE 34807
// repeat InitHc ;
34617: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34621: LD_VAR 0 9
34625: PPUSH
34626: CALL_OW 266
34630: PUSH
34631: LD_INT 5
34633: EQUAL
34634: IFFALSE 34704
// begin if UnitsInside ( j ) < 3 then
34636: LD_VAR 0 9
34640: PPUSH
34641: CALL_OW 313
34645: PUSH
34646: LD_INT 3
34648: LESS
34649: IFFALSE 34685
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34651: LD_INT 0
34653: PPUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 8
34659: PUSH
34660: LD_INT 9
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: PUSH
34668: LD_VAR 0 17
34672: ARRAY
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: CALL_OW 380
34683: GO 34702
// PrepareHuman ( false , i , skill ) ;
34685: LD_INT 0
34687: PPUSH
34688: LD_VAR 0 8
34692: PPUSH
34693: LD_VAR 0 4
34697: PPUSH
34698: CALL_OW 380
// end else
34702: GO 34721
// PrepareHuman ( false , i , skill ) ;
34704: LD_INT 0
34706: PPUSH
34707: LD_VAR 0 8
34711: PPUSH
34712: LD_VAR 0 4
34716: PPUSH
34717: CALL_OW 380
// un := CreateHuman ;
34721: LD_ADDR_VAR 0 14
34725: PUSH
34726: CALL_OW 44
34730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34731: LD_ADDR_VAR 0 7
34735: PUSH
34736: LD_VAR 0 7
34740: PPUSH
34741: LD_INT 1
34743: PPUSH
34744: LD_VAR 0 14
34748: PPUSH
34749: CALL_OW 2
34753: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34754: LD_VAR 0 14
34758: PPUSH
34759: LD_VAR 0 9
34763: PPUSH
34764: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34768: LD_VAR 0 9
34772: PPUSH
34773: CALL_OW 313
34777: PUSH
34778: LD_INT 6
34780: EQUAL
34781: PUSH
34782: LD_VAR 0 9
34786: PPUSH
34787: CALL_OW 266
34791: PUSH
34792: LD_INT 32
34794: PUSH
34795: LD_INT 31
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: IN
34802: OR
34803: IFFALSE 34617
34805: GO 34614
34807: POP
34808: POP
// end else
34809: GO 35191
// for j = 1 to x do
34811: LD_ADDR_VAR 0 9
34815: PUSH
34816: DOUBLE
34817: LD_INT 1
34819: DEC
34820: ST_TO_ADDR
34821: LD_VAR 0 13
34825: PUSH
34826: FOR_TO
34827: IFFALSE 35189
// begin InitHc ;
34829: CALL_OW 19
// if not f then
34833: LD_VAR 0 12
34837: NOT
34838: IFFALSE 34927
// begin PrepareHuman ( false , i , skill ) ;
34840: LD_INT 0
34842: PPUSH
34843: LD_VAR 0 8
34847: PPUSH
34848: LD_VAR 0 4
34852: PPUSH
34853: CALL_OW 380
// un := CreateHuman ;
34857: LD_ADDR_VAR 0 14
34861: PUSH
34862: CALL_OW 44
34866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34867: LD_ADDR_VAR 0 7
34871: PUSH
34872: LD_VAR 0 7
34876: PPUSH
34877: LD_INT 1
34879: PPUSH
34880: LD_VAR 0 14
34884: PPUSH
34885: CALL_OW 2
34889: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34890: LD_VAR 0 14
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 250
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 251
34914: PPUSH
34915: LD_INT 10
34917: PPUSH
34918: LD_INT 0
34920: PPUSH
34921: CALL_OW 50
// continue ;
34925: GO 34826
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34927: LD_VAR 0 12
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: PPUSH
34936: CALL_OW 313
34940: PUSH
34941: LD_VAR 0 12
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: PPUSH
34950: CALL_OW 266
34954: PUSH
34955: LD_INT 32
34957: PUSH
34958: LD_INT 31
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: IN
34965: AND
34966: PUSH
34967: LD_VAR 0 12
34971: PUSH
34972: LD_INT 1
34974: ARRAY
34975: PPUSH
34976: CALL_OW 313
34980: PUSH
34981: LD_INT 6
34983: EQUAL
34984: OR
34985: IFFALSE 35005
// f := Delete ( f , 1 ) ;
34987: LD_ADDR_VAR 0 12
34991: PUSH
34992: LD_VAR 0 12
34996: PPUSH
34997: LD_INT 1
34999: PPUSH
35000: CALL_OW 3
35004: ST_TO_ADDR
// if not f then
35005: LD_VAR 0 12
35009: NOT
35010: IFFALSE 35028
// begin x := x + 2 ;
35012: LD_ADDR_VAR 0 13
35016: PUSH
35017: LD_VAR 0 13
35021: PUSH
35022: LD_INT 2
35024: PLUS
35025: ST_TO_ADDR
// continue ;
35026: GO 34826
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35028: LD_VAR 0 12
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: PPUSH
35037: CALL_OW 266
35041: PUSH
35042: LD_INT 5
35044: EQUAL
35045: IFFALSE 35119
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35047: LD_VAR 0 12
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: PPUSH
35056: CALL_OW 313
35060: PUSH
35061: LD_INT 3
35063: LESS
35064: IFFALSE 35100
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35066: LD_INT 0
35068: PPUSH
35069: LD_INT 5
35071: PUSH
35072: LD_INT 8
35074: PUSH
35075: LD_INT 9
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: PUSH
35083: LD_VAR 0 17
35087: ARRAY
35088: PPUSH
35089: LD_VAR 0 4
35093: PPUSH
35094: CALL_OW 380
35098: GO 35117
// PrepareHuman ( false , i , skill ) ;
35100: LD_INT 0
35102: PPUSH
35103: LD_VAR 0 8
35107: PPUSH
35108: LD_VAR 0 4
35112: PPUSH
35113: CALL_OW 380
// end else
35117: GO 35136
// PrepareHuman ( false , i , skill ) ;
35119: LD_INT 0
35121: PPUSH
35122: LD_VAR 0 8
35126: PPUSH
35127: LD_VAR 0 4
35131: PPUSH
35132: CALL_OW 380
// un := CreateHuman ;
35136: LD_ADDR_VAR 0 14
35140: PUSH
35141: CALL_OW 44
35145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35146: LD_ADDR_VAR 0 7
35150: PUSH
35151: LD_VAR 0 7
35155: PPUSH
35156: LD_INT 1
35158: PPUSH
35159: LD_VAR 0 14
35163: PPUSH
35164: CALL_OW 2
35168: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35169: LD_VAR 0 14
35173: PPUSH
35174: LD_VAR 0 12
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PPUSH
35183: CALL_OW 52
// end ;
35187: GO 34826
35189: POP
35190: POP
// end ;
35191: GO 34128
35193: POP
35194: POP
// result := result ^ buildings ;
35195: LD_ADDR_VAR 0 7
35199: PUSH
35200: LD_VAR 0 7
35204: PUSH
35205: LD_VAR 0 18
35209: ADD
35210: ST_TO_ADDR
// end else
35211: GO 35354
// begin for i = 1 to personel do
35213: LD_ADDR_VAR 0 8
35217: PUSH
35218: DOUBLE
35219: LD_INT 1
35221: DEC
35222: ST_TO_ADDR
35223: LD_VAR 0 6
35227: PUSH
35228: FOR_TO
35229: IFFALSE 35352
// begin if i > 4 then
35231: LD_VAR 0 8
35235: PUSH
35236: LD_INT 4
35238: GREATER
35239: IFFALSE 35243
// break ;
35241: GO 35352
// x := personel [ i ] ;
35243: LD_ADDR_VAR 0 13
35247: PUSH
35248: LD_VAR 0 6
35252: PUSH
35253: LD_VAR 0 8
35257: ARRAY
35258: ST_TO_ADDR
// if x = - 1 then
35259: LD_VAR 0 13
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: EQUAL
35268: IFFALSE 35272
// continue ;
35270: GO 35228
// PrepareHuman ( false , i , skill ) ;
35272: LD_INT 0
35274: PPUSH
35275: LD_VAR 0 8
35279: PPUSH
35280: LD_VAR 0 4
35284: PPUSH
35285: CALL_OW 380
// un := CreateHuman ;
35289: LD_ADDR_VAR 0 14
35293: PUSH
35294: CALL_OW 44
35298: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35299: LD_VAR 0 14
35303: PPUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 250
35313: PPUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 251
35323: PPUSH
35324: LD_INT 10
35326: PPUSH
35327: LD_INT 0
35329: PPUSH
35330: CALL_OW 50
// result := result ^ un ;
35334: LD_ADDR_VAR 0 7
35338: PUSH
35339: LD_VAR 0 7
35343: PUSH
35344: LD_VAR 0 14
35348: ADD
35349: ST_TO_ADDR
// end ;
35350: GO 35228
35352: POP
35353: POP
// end ; end ;
35354: LD_VAR 0 7
35358: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
// result := false ;
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 0
35384: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35385: LD_VAR 0 1
35389: NOT
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 266
35400: PUSH
35401: LD_INT 32
35403: PUSH
35404: LD_INT 33
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: IN
35411: NOT
35412: OR
35413: IFFALSE 35417
// exit ;
35415: GO 36526
// nat := GetNation ( tower ) ;
35417: LD_ADDR_VAR 0 12
35421: PUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: CALL_OW 248
35431: ST_TO_ADDR
// side := GetSide ( tower ) ;
35432: LD_ADDR_VAR 0 16
35436: PUSH
35437: LD_VAR 0 1
35441: PPUSH
35442: CALL_OW 255
35446: ST_TO_ADDR
// x := GetX ( tower ) ;
35447: LD_ADDR_VAR 0 10
35451: PUSH
35452: LD_VAR 0 1
35456: PPUSH
35457: CALL_OW 250
35461: ST_TO_ADDR
// y := GetY ( tower ) ;
35462: LD_ADDR_VAR 0 11
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 251
35476: ST_TO_ADDR
// if not x or not y then
35477: LD_VAR 0 10
35481: NOT
35482: PUSH
35483: LD_VAR 0 11
35487: NOT
35488: OR
35489: IFFALSE 35493
// exit ;
35491: GO 36526
// weapon := 0 ;
35493: LD_ADDR_VAR 0 18
35497: PUSH
35498: LD_INT 0
35500: ST_TO_ADDR
// fac_list := [ ] ;
35501: LD_ADDR_VAR 0 17
35505: PUSH
35506: EMPTY
35507: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35508: LD_ADDR_VAR 0 6
35512: PUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 274
35522: PPUSH
35523: LD_VAR 0 2
35527: PPUSH
35528: LD_INT 0
35530: PPUSH
35531: CALL 33097 0 3
35535: PPUSH
35536: LD_INT 30
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 72
35550: ST_TO_ADDR
// if not factories then
35551: LD_VAR 0 6
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 36526
// for i in factories do
35560: LD_ADDR_VAR 0 8
35564: PUSH
35565: LD_VAR 0 6
35569: PUSH
35570: FOR_IN
35571: IFFALSE 35596
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35573: LD_ADDR_VAR 0 17
35577: PUSH
35578: LD_VAR 0 17
35582: PUSH
35583: LD_VAR 0 8
35587: PPUSH
35588: CALL_OW 478
35592: UNION
35593: ST_TO_ADDR
35594: GO 35570
35596: POP
35597: POP
// if not fac_list then
35598: LD_VAR 0 17
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 36526
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35607: LD_ADDR_VAR 0 5
35611: PUSH
35612: LD_INT 4
35614: PUSH
35615: LD_INT 5
35617: PUSH
35618: LD_INT 9
35620: PUSH
35621: LD_INT 10
35623: PUSH
35624: LD_INT 6
35626: PUSH
35627: LD_INT 7
35629: PUSH
35630: LD_INT 11
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 27
35644: PUSH
35645: LD_INT 28
35647: PUSH
35648: LD_INT 26
35650: PUSH
35651: LD_INT 30
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 43
35662: PUSH
35663: LD_INT 44
35665: PUSH
35666: LD_INT 46
35668: PUSH
35669: LD_INT 45
35671: PUSH
35672: LD_INT 47
35674: PUSH
35675: LD_INT 49
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: PUSH
35691: LD_VAR 0 12
35695: ARRAY
35696: ST_TO_ADDR
// list := list isect fac_list ;
35697: LD_ADDR_VAR 0 5
35701: PUSH
35702: LD_VAR 0 5
35706: PUSH
35707: LD_VAR 0 17
35711: ISECT
35712: ST_TO_ADDR
// if not list then
35713: LD_VAR 0 5
35717: NOT
35718: IFFALSE 35722
// exit ;
35720: GO 36526
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35722: LD_VAR 0 12
35726: PUSH
35727: LD_INT 3
35729: EQUAL
35730: PUSH
35731: LD_INT 49
35733: PUSH
35734: LD_VAR 0 5
35738: IN
35739: AND
35740: PUSH
35741: LD_INT 31
35743: PPUSH
35744: LD_VAR 0 16
35748: PPUSH
35749: CALL_OW 321
35753: PUSH
35754: LD_INT 2
35756: EQUAL
35757: AND
35758: IFFALSE 35818
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35760: LD_INT 22
35762: PUSH
35763: LD_VAR 0 16
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 35
35774: PUSH
35775: LD_INT 49
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 91
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: LD_INT 10
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: PPUSH
35803: CALL_OW 69
35807: NOT
35808: IFFALSE 35818
// weapon := ru_time_lapser ;
35810: LD_ADDR_VAR 0 18
35814: PUSH
35815: LD_INT 49
35817: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35818: LD_VAR 0 12
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: IN
35833: PUSH
35834: LD_INT 11
35836: PUSH
35837: LD_VAR 0 5
35841: IN
35842: PUSH
35843: LD_INT 30
35845: PUSH
35846: LD_VAR 0 5
35850: IN
35851: OR
35852: AND
35853: PUSH
35854: LD_INT 6
35856: PPUSH
35857: LD_VAR 0 16
35861: PPUSH
35862: CALL_OW 321
35866: PUSH
35867: LD_INT 2
35869: EQUAL
35870: AND
35871: IFFALSE 36036
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35873: LD_INT 22
35875: PUSH
35876: LD_VAR 0 16
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 35
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 35
35900: PUSH
35901: LD_INT 30
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 91
35915: PUSH
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 18
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: PPUSH
35934: CALL_OW 69
35938: NOT
35939: PUSH
35940: LD_INT 22
35942: PUSH
35943: LD_VAR 0 16
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: LD_INT 30
35957: PUSH
35958: LD_INT 32
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 30
35967: PUSH
35968: LD_INT 33
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 91
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_INT 12
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: PUSH
36001: EMPTY
36002: LIST
36003: PPUSH
36004: CALL_OW 69
36008: PUSH
36009: LD_INT 2
36011: GREATER
36012: AND
36013: IFFALSE 36036
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36015: LD_ADDR_VAR 0 18
36019: PUSH
36020: LD_INT 11
36022: PUSH
36023: LD_INT 30
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_VAR 0 12
36034: ARRAY
36035: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36036: LD_VAR 0 18
36040: NOT
36041: PUSH
36042: LD_INT 40
36044: PPUSH
36045: LD_VAR 0 16
36049: PPUSH
36050: CALL_OW 321
36054: PUSH
36055: LD_INT 2
36057: EQUAL
36058: AND
36059: PUSH
36060: LD_INT 7
36062: PUSH
36063: LD_VAR 0 5
36067: IN
36068: PUSH
36069: LD_INT 28
36071: PUSH
36072: LD_VAR 0 5
36076: IN
36077: OR
36078: PUSH
36079: LD_INT 45
36081: PUSH
36082: LD_VAR 0 5
36086: IN
36087: OR
36088: AND
36089: IFFALSE 36343
// begin hex := GetHexInfo ( x , y ) ;
36091: LD_ADDR_VAR 0 4
36095: PUSH
36096: LD_VAR 0 10
36100: PPUSH
36101: LD_VAR 0 11
36105: PPUSH
36106: CALL_OW 546
36110: ST_TO_ADDR
// if hex [ 1 ] then
36111: LD_VAR 0 4
36115: PUSH
36116: LD_INT 1
36118: ARRAY
36119: IFFALSE 36123
// exit ;
36121: GO 36526
// height := hex [ 2 ] ;
36123: LD_ADDR_VAR 0 15
36127: PUSH
36128: LD_VAR 0 4
36132: PUSH
36133: LD_INT 2
36135: ARRAY
36136: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36137: LD_ADDR_VAR 0 14
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: LD_INT 5
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// for i in tmp do
36160: LD_ADDR_VAR 0 8
36164: PUSH
36165: LD_VAR 0 14
36169: PUSH
36170: FOR_IN
36171: IFFALSE 36341
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36173: LD_ADDR_VAR 0 9
36177: PUSH
36178: LD_VAR 0 10
36182: PPUSH
36183: LD_VAR 0 8
36187: PPUSH
36188: LD_INT 5
36190: PPUSH
36191: CALL_OW 272
36195: PUSH
36196: LD_VAR 0 11
36200: PPUSH
36201: LD_VAR 0 8
36205: PPUSH
36206: LD_INT 5
36208: PPUSH
36209: CALL_OW 273
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36218: LD_VAR 0 9
36222: PUSH
36223: LD_INT 1
36225: ARRAY
36226: PPUSH
36227: LD_VAR 0 9
36231: PUSH
36232: LD_INT 2
36234: ARRAY
36235: PPUSH
36236: CALL_OW 488
36240: IFFALSE 36339
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36242: LD_ADDR_VAR 0 4
36246: PUSH
36247: LD_VAR 0 9
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: LD_VAR 0 9
36260: PUSH
36261: LD_INT 2
36263: ARRAY
36264: PPUSH
36265: CALL_OW 546
36269: ST_TO_ADDR
// if hex [ 1 ] then
36270: LD_VAR 0 4
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: IFFALSE 36282
// continue ;
36280: GO 36170
// h := hex [ 2 ] ;
36282: LD_ADDR_VAR 0 13
36286: PUSH
36287: LD_VAR 0 4
36291: PUSH
36292: LD_INT 2
36294: ARRAY
36295: ST_TO_ADDR
// if h + 7 < height then
36296: LD_VAR 0 13
36300: PUSH
36301: LD_INT 7
36303: PLUS
36304: PUSH
36305: LD_VAR 0 15
36309: LESS
36310: IFFALSE 36339
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36312: LD_ADDR_VAR 0 18
36316: PUSH
36317: LD_INT 7
36319: PUSH
36320: LD_INT 28
36322: PUSH
36323: LD_INT 45
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 12
36335: ARRAY
36336: ST_TO_ADDR
// break ;
36337: GO 36341
// end ; end ; end ;
36339: GO 36170
36341: POP
36342: POP
// end ; if not weapon then
36343: LD_VAR 0 18
36347: NOT
36348: IFFALSE 36408
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36350: LD_ADDR_VAR 0 5
36354: PUSH
36355: LD_VAR 0 5
36359: PUSH
36360: LD_INT 11
36362: PUSH
36363: LD_INT 30
36365: PUSH
36366: LD_INT 49
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: DIFF
36374: ST_TO_ADDR
// if not list then
36375: LD_VAR 0 5
36379: NOT
36380: IFFALSE 36384
// exit ;
36382: GO 36526
// weapon := list [ rand ( 1 , list ) ] ;
36384: LD_ADDR_VAR 0 18
36388: PUSH
36389: LD_VAR 0 5
36393: PUSH
36394: LD_INT 1
36396: PPUSH
36397: LD_VAR 0 5
36401: PPUSH
36402: CALL_OW 12
36406: ARRAY
36407: ST_TO_ADDR
// end ; if weapon then
36408: LD_VAR 0 18
36412: IFFALSE 36526
// begin tmp := CostOfWeapon ( weapon ) ;
36414: LD_ADDR_VAR 0 14
36418: PUSH
36419: LD_VAR 0 18
36423: PPUSH
36424: CALL_OW 451
36428: ST_TO_ADDR
// j := GetBase ( tower ) ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 274
36443: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36444: LD_VAR 0 9
36448: PPUSH
36449: LD_INT 1
36451: PPUSH
36452: CALL_OW 275
36456: PUSH
36457: LD_VAR 0 14
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: GREATEREQUAL
36466: PUSH
36467: LD_VAR 0 9
36471: PPUSH
36472: LD_INT 2
36474: PPUSH
36475: CALL_OW 275
36479: PUSH
36480: LD_VAR 0 14
36484: PUSH
36485: LD_INT 2
36487: ARRAY
36488: GREATEREQUAL
36489: AND
36490: PUSH
36491: LD_VAR 0 9
36495: PPUSH
36496: LD_INT 3
36498: PPUSH
36499: CALL_OW 275
36503: PUSH
36504: LD_VAR 0 14
36508: PUSH
36509: LD_INT 3
36511: ARRAY
36512: GREATEREQUAL
36513: AND
36514: IFFALSE 36526
// result := weapon ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_VAR 0 18
36525: ST_TO_ADDR
// end ; end ;
36526: LD_VAR 0 3
36530: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36531: LD_INT 0
36533: PPUSH
36534: PPUSH
// result := true ;
36535: LD_ADDR_VAR 0 3
36539: PUSH
36540: LD_INT 1
36542: ST_TO_ADDR
// if array1 = array2 then
36543: LD_VAR 0 1
36547: PUSH
36548: LD_VAR 0 2
36552: EQUAL
36553: IFFALSE 36613
// begin for i = 1 to array1 do
36555: LD_ADDR_VAR 0 4
36559: PUSH
36560: DOUBLE
36561: LD_INT 1
36563: DEC
36564: ST_TO_ADDR
36565: LD_VAR 0 1
36569: PUSH
36570: FOR_TO
36571: IFFALSE 36609
// if array1 [ i ] <> array2 [ i ] then
36573: LD_VAR 0 1
36577: PUSH
36578: LD_VAR 0 4
36582: ARRAY
36583: PUSH
36584: LD_VAR 0 2
36588: PUSH
36589: LD_VAR 0 4
36593: ARRAY
36594: NONEQUAL
36595: IFFALSE 36607
// begin result := false ;
36597: LD_ADDR_VAR 0 3
36601: PUSH
36602: LD_INT 0
36604: ST_TO_ADDR
// break ;
36605: GO 36609
// end ;
36607: GO 36570
36609: POP
36610: POP
// end else
36611: GO 36621
// result := false ;
36613: LD_ADDR_VAR 0 3
36617: PUSH
36618: LD_INT 0
36620: ST_TO_ADDR
// end ;
36621: LD_VAR 0 3
36625: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36626: LD_INT 0
36628: PPUSH
36629: PPUSH
// if not array1 or not array2 then
36630: LD_VAR 0 1
36634: NOT
36635: PUSH
36636: LD_VAR 0 2
36640: NOT
36641: OR
36642: IFFALSE 36646
// exit ;
36644: GO 36710
// result := true ;
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 1
36653: ST_TO_ADDR
// for i = 1 to array1 do
36654: LD_ADDR_VAR 0 4
36658: PUSH
36659: DOUBLE
36660: LD_INT 1
36662: DEC
36663: ST_TO_ADDR
36664: LD_VAR 0 1
36668: PUSH
36669: FOR_TO
36670: IFFALSE 36708
// if array1 [ i ] <> array2 [ i ] then
36672: LD_VAR 0 1
36676: PUSH
36677: LD_VAR 0 4
36681: ARRAY
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_VAR 0 4
36692: ARRAY
36693: NONEQUAL
36694: IFFALSE 36706
// begin result := false ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// break ;
36704: GO 36708
// end ;
36706: GO 36669
36708: POP
36709: POP
// end ;
36710: LD_VAR 0 3
36714: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36715: LD_INT 0
36717: PPUSH
36718: PPUSH
36719: PPUSH
// pom := GetBase ( fac ) ;
36720: LD_ADDR_VAR 0 5
36724: PUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 274
36734: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36735: LD_ADDR_VAR 0 4
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: PPUSH
36749: LD_VAR 0 2
36753: PUSH
36754: LD_INT 2
36756: ARRAY
36757: PPUSH
36758: LD_VAR 0 2
36762: PUSH
36763: LD_INT 3
36765: ARRAY
36766: PPUSH
36767: LD_VAR 0 2
36771: PUSH
36772: LD_INT 4
36774: ARRAY
36775: PPUSH
36776: CALL_OW 449
36780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36781: LD_ADDR_VAR 0 3
36785: PUSH
36786: LD_VAR 0 5
36790: PPUSH
36791: LD_INT 1
36793: PPUSH
36794: CALL_OW 275
36798: PUSH
36799: LD_VAR 0 4
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: GREATEREQUAL
36808: PUSH
36809: LD_VAR 0 5
36813: PPUSH
36814: LD_INT 2
36816: PPUSH
36817: CALL_OW 275
36821: PUSH
36822: LD_VAR 0 4
36826: PUSH
36827: LD_INT 2
36829: ARRAY
36830: GREATEREQUAL
36831: AND
36832: PUSH
36833: LD_VAR 0 5
36837: PPUSH
36838: LD_INT 3
36840: PPUSH
36841: CALL_OW 275
36845: PUSH
36846: LD_VAR 0 4
36850: PUSH
36851: LD_INT 3
36853: ARRAY
36854: GREATEREQUAL
36855: AND
36856: ST_TO_ADDR
// end ;
36857: LD_VAR 0 3
36861: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36862: LD_INT 0
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
// pom := GetBase ( building ) ;
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 274
36882: ST_TO_ADDR
// if not pom then
36883: LD_VAR 0 3
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 37062
// btype := GetBType ( building ) ;
36892: LD_ADDR_VAR 0 5
36896: PUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 266
36906: ST_TO_ADDR
// if btype = b_armoury then
36907: LD_VAR 0 5
36911: PUSH
36912: LD_INT 4
36914: EQUAL
36915: IFFALSE 36925
// btype := b_barracks ;
36917: LD_ADDR_VAR 0 5
36921: PUSH
36922: LD_INT 5
36924: ST_TO_ADDR
// if btype = b_depot then
36925: LD_VAR 0 5
36929: PUSH
36930: LD_INT 0
36932: EQUAL
36933: IFFALSE 36943
// btype := b_warehouse ;
36935: LD_ADDR_VAR 0 5
36939: PUSH
36940: LD_INT 1
36942: ST_TO_ADDR
// if btype = b_workshop then
36943: LD_VAR 0 5
36947: PUSH
36948: LD_INT 2
36950: EQUAL
36951: IFFALSE 36961
// btype := b_factory ;
36953: LD_ADDR_VAR 0 5
36957: PUSH
36958: LD_INT 3
36960: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36961: LD_ADDR_VAR 0 4
36965: PUSH
36966: LD_VAR 0 5
36970: PPUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 248
36980: PPUSH
36981: CALL_OW 450
36985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36986: LD_ADDR_VAR 0 2
36990: PUSH
36991: LD_VAR 0 3
36995: PPUSH
36996: LD_INT 1
36998: PPUSH
36999: CALL_OW 275
37003: PUSH
37004: LD_VAR 0 4
37008: PUSH
37009: LD_INT 1
37011: ARRAY
37012: GREATEREQUAL
37013: PUSH
37014: LD_VAR 0 3
37018: PPUSH
37019: LD_INT 2
37021: PPUSH
37022: CALL_OW 275
37026: PUSH
37027: LD_VAR 0 4
37031: PUSH
37032: LD_INT 2
37034: ARRAY
37035: GREATEREQUAL
37036: AND
37037: PUSH
37038: LD_VAR 0 3
37042: PPUSH
37043: LD_INT 3
37045: PPUSH
37046: CALL_OW 275
37050: PUSH
37051: LD_VAR 0 4
37055: PUSH
37056: LD_INT 3
37058: ARRAY
37059: GREATEREQUAL
37060: AND
37061: ST_TO_ADDR
// end ;
37062: LD_VAR 0 2
37066: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37067: LD_INT 0
37069: PPUSH
37070: PPUSH
37071: PPUSH
// pom := GetBase ( building ) ;
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 274
37086: ST_TO_ADDR
// if not pom then
37087: LD_VAR 0 4
37091: NOT
37092: IFFALSE 37096
// exit ;
37094: GO 37197
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37096: LD_ADDR_VAR 0 5
37100: PUSH
37101: LD_VAR 0 2
37105: PPUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 248
37115: PPUSH
37116: CALL_OW 450
37120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37121: LD_ADDR_VAR 0 3
37125: PUSH
37126: LD_VAR 0 4
37130: PPUSH
37131: LD_INT 1
37133: PPUSH
37134: CALL_OW 275
37138: PUSH
37139: LD_VAR 0 5
37143: PUSH
37144: LD_INT 1
37146: ARRAY
37147: GREATEREQUAL
37148: PUSH
37149: LD_VAR 0 4
37153: PPUSH
37154: LD_INT 2
37156: PPUSH
37157: CALL_OW 275
37161: PUSH
37162: LD_VAR 0 5
37166: PUSH
37167: LD_INT 2
37169: ARRAY
37170: GREATEREQUAL
37171: AND
37172: PUSH
37173: LD_VAR 0 4
37177: PPUSH
37178: LD_INT 3
37180: PPUSH
37181: CALL_OW 275
37185: PUSH
37186: LD_VAR 0 5
37190: PUSH
37191: LD_INT 3
37193: ARRAY
37194: GREATEREQUAL
37195: AND
37196: ST_TO_ADDR
// end ;
37197: LD_VAR 0 3
37201: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37202: LD_INT 0
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
// result := false ;
37215: LD_ADDR_VAR 0 8
37219: PUSH
37220: LD_INT 0
37222: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37223: LD_VAR 0 5
37227: NOT
37228: PUSH
37229: LD_VAR 0 1
37233: NOT
37234: OR
37235: PUSH
37236: LD_VAR 0 2
37240: NOT
37241: OR
37242: PUSH
37243: LD_VAR 0 3
37247: NOT
37248: OR
37249: IFFALSE 37253
// exit ;
37251: GO 38067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37253: LD_ADDR_VAR 0 14
37257: PUSH
37258: LD_VAR 0 1
37262: PPUSH
37263: LD_VAR 0 2
37267: PPUSH
37268: LD_VAR 0 3
37272: PPUSH
37273: LD_VAR 0 4
37277: PPUSH
37278: LD_VAR 0 5
37282: PUSH
37283: LD_INT 1
37285: ARRAY
37286: PPUSH
37287: CALL_OW 248
37291: PPUSH
37292: LD_INT 0
37294: PPUSH
37295: CALL 39300 0 6
37299: ST_TO_ADDR
// if not hexes then
37300: LD_VAR 0 14
37304: NOT
37305: IFFALSE 37309
// exit ;
37307: GO 38067
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37309: LD_ADDR_VAR 0 17
37313: PUSH
37314: LD_VAR 0 5
37318: PPUSH
37319: LD_INT 22
37321: PUSH
37322: LD_VAR 0 13
37326: PPUSH
37327: CALL_OW 255
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 30
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 30
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PPUSH
37368: CALL_OW 72
37372: ST_TO_ADDR
// for i = 1 to hexes do
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: DOUBLE
37379: LD_INT 1
37381: DEC
37382: ST_TO_ADDR
37383: LD_VAR 0 14
37387: PUSH
37388: FOR_TO
37389: IFFALSE 38065
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37391: LD_ADDR_VAR 0 13
37395: PUSH
37396: LD_VAR 0 14
37400: PUSH
37401: LD_VAR 0 9
37405: ARRAY
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 14
37415: PUSH
37416: LD_VAR 0 9
37420: ARRAY
37421: PUSH
37422: LD_INT 2
37424: ARRAY
37425: PPUSH
37426: CALL_OW 428
37430: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37431: LD_VAR 0 14
37435: PUSH
37436: LD_VAR 0 9
37440: ARRAY
37441: PUSH
37442: LD_INT 1
37444: ARRAY
37445: PPUSH
37446: LD_VAR 0 14
37450: PUSH
37451: LD_VAR 0 9
37455: ARRAY
37456: PUSH
37457: LD_INT 2
37459: ARRAY
37460: PPUSH
37461: CALL_OW 351
37465: PUSH
37466: LD_VAR 0 14
37470: PUSH
37471: LD_VAR 0 9
37475: ARRAY
37476: PUSH
37477: LD_INT 1
37479: ARRAY
37480: PPUSH
37481: LD_VAR 0 14
37485: PUSH
37486: LD_VAR 0 9
37490: ARRAY
37491: PUSH
37492: LD_INT 2
37494: ARRAY
37495: PPUSH
37496: CALL_OW 488
37500: NOT
37501: OR
37502: PUSH
37503: LD_VAR 0 13
37507: PPUSH
37508: CALL_OW 247
37512: PUSH
37513: LD_INT 3
37515: EQUAL
37516: OR
37517: IFFALSE 37523
// exit ;
37519: POP
37520: POP
37521: GO 38067
// if not tmp then
37523: LD_VAR 0 13
37527: NOT
37528: IFFALSE 37532
// continue ;
37530: GO 37388
// result := true ;
37532: LD_ADDR_VAR 0 8
37536: PUSH
37537: LD_INT 1
37539: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37540: LD_VAR 0 6
37544: PUSH
37545: LD_VAR 0 13
37549: PPUSH
37550: CALL_OW 247
37554: PUSH
37555: LD_INT 2
37557: EQUAL
37558: AND
37559: PUSH
37560: LD_VAR 0 13
37564: PPUSH
37565: CALL_OW 263
37569: PUSH
37570: LD_INT 1
37572: EQUAL
37573: AND
37574: IFFALSE 37738
// begin if IsDrivenBy ( tmp ) then
37576: LD_VAR 0 13
37580: PPUSH
37581: CALL_OW 311
37585: IFFALSE 37589
// continue ;
37587: GO 37388
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37589: LD_VAR 0 6
37593: PPUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 60
37599: PUSH
37600: EMPTY
37601: LIST
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 55
37612: PUSH
37613: EMPTY
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 72
37628: IFFALSE 37736
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37630: LD_ADDR_VAR 0 18
37634: PUSH
37635: LD_VAR 0 6
37639: PPUSH
37640: LD_INT 3
37642: PUSH
37643: LD_INT 60
37645: PUSH
37646: EMPTY
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 55
37658: PUSH
37659: EMPTY
37660: LIST
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PPUSH
37670: CALL_OW 72
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: ST_TO_ADDR
// if IsInUnit ( driver ) then
37679: LD_VAR 0 18
37683: PPUSH
37684: CALL_OW 310
37688: IFFALSE 37699
// ComExit ( driver ) ;
37690: LD_VAR 0 18
37694: PPUSH
37695: CALL 63080 0 1
// AddComEnterUnit ( driver , tmp ) ;
37699: LD_VAR 0 18
37703: PPUSH
37704: LD_VAR 0 13
37708: PPUSH
37709: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37713: LD_VAR 0 18
37717: PPUSH
37718: LD_VAR 0 7
37722: PPUSH
37723: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37727: LD_VAR 0 18
37731: PPUSH
37732: CALL_OW 181
// end ; continue ;
37736: GO 37388
// end ; if not cleaners or not tmp in cleaners then
37738: LD_VAR 0 6
37742: NOT
37743: PUSH
37744: LD_VAR 0 13
37748: PUSH
37749: LD_VAR 0 6
37753: IN
37754: NOT
37755: OR
37756: IFFALSE 38063
// begin if dep then
37758: LD_VAR 0 17
37762: IFFALSE 37898
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37764: LD_ADDR_VAR 0 16
37768: PUSH
37769: LD_VAR 0 17
37773: PUSH
37774: LD_INT 1
37776: ARRAY
37777: PPUSH
37778: CALL_OW 250
37782: PPUSH
37783: LD_VAR 0 17
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PPUSH
37792: CALL_OW 254
37796: PPUSH
37797: LD_INT 5
37799: PPUSH
37800: CALL_OW 272
37804: PUSH
37805: LD_VAR 0 17
37809: PUSH
37810: LD_INT 1
37812: ARRAY
37813: PPUSH
37814: CALL_OW 251
37818: PPUSH
37819: LD_VAR 0 17
37823: PUSH
37824: LD_INT 1
37826: ARRAY
37827: PPUSH
37828: CALL_OW 254
37832: PPUSH
37833: LD_INT 5
37835: PPUSH
37836: CALL_OW 273
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37845: LD_VAR 0 16
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: LD_VAR 0 16
37858: PUSH
37859: LD_INT 2
37861: ARRAY
37862: PPUSH
37863: CALL_OW 488
37867: IFFALSE 37898
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37869: LD_VAR 0 13
37873: PPUSH
37874: LD_VAR 0 16
37878: PUSH
37879: LD_INT 1
37881: ARRAY
37882: PPUSH
37883: LD_VAR 0 16
37887: PUSH
37888: LD_INT 2
37890: ARRAY
37891: PPUSH
37892: CALL_OW 111
// continue ;
37896: GO 37388
// end ; end ; r := GetDir ( tmp ) ;
37898: LD_ADDR_VAR 0 15
37902: PUSH
37903: LD_VAR 0 13
37907: PPUSH
37908: CALL_OW 254
37912: ST_TO_ADDR
// if r = 5 then
37913: LD_VAR 0 15
37917: PUSH
37918: LD_INT 5
37920: EQUAL
37921: IFFALSE 37931
// r := 0 ;
37923: LD_ADDR_VAR 0 15
37927: PUSH
37928: LD_INT 0
37930: ST_TO_ADDR
// for j = r to 5 do
37931: LD_ADDR_VAR 0 10
37935: PUSH
37936: DOUBLE
37937: LD_VAR 0 15
37941: DEC
37942: ST_TO_ADDR
37943: LD_INT 5
37945: PUSH
37946: FOR_TO
37947: IFFALSE 38061
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37949: LD_ADDR_VAR 0 11
37953: PUSH
37954: LD_VAR 0 13
37958: PPUSH
37959: CALL_OW 250
37963: PPUSH
37964: LD_VAR 0 10
37968: PPUSH
37969: LD_INT 2
37971: PPUSH
37972: CALL_OW 272
37976: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37977: LD_ADDR_VAR 0 12
37981: PUSH
37982: LD_VAR 0 13
37986: PPUSH
37987: CALL_OW 251
37991: PPUSH
37992: LD_VAR 0 10
37996: PPUSH
37997: LD_INT 2
37999: PPUSH
38000: CALL_OW 273
38004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38005: LD_VAR 0 11
38009: PPUSH
38010: LD_VAR 0 12
38014: PPUSH
38015: CALL_OW 488
38019: PUSH
38020: LD_VAR 0 11
38024: PPUSH
38025: LD_VAR 0 12
38029: PPUSH
38030: CALL_OW 428
38034: NOT
38035: AND
38036: IFFALSE 38059
// begin ComMoveXY ( tmp , _x , _y ) ;
38038: LD_VAR 0 13
38042: PPUSH
38043: LD_VAR 0 11
38047: PPUSH
38048: LD_VAR 0 12
38052: PPUSH
38053: CALL_OW 111
// break ;
38057: GO 38061
// end ; end ;
38059: GO 37946
38061: POP
38062: POP
// end ; end ;
38063: GO 37388
38065: POP
38066: POP
// end ;
38067: LD_VAR 0 8
38071: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38072: LD_INT 0
38074: PPUSH
// result := true ;
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_INT 1
38082: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38083: LD_VAR 0 2
38087: PUSH
38088: LD_INT 24
38090: DOUBLE
38091: EQUAL
38092: IFTRUE 38102
38094: LD_INT 33
38096: DOUBLE
38097: EQUAL
38098: IFTRUE 38102
38100: GO 38127
38102: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38103: LD_ADDR_VAR 0 3
38107: PUSH
38108: LD_INT 32
38110: PPUSH
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 321
38120: PUSH
38121: LD_INT 2
38123: EQUAL
38124: ST_TO_ADDR
38125: GO 38443
38127: LD_INT 20
38129: DOUBLE
38130: EQUAL
38131: IFTRUE 38135
38133: GO 38160
38135: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_INT 6
38143: PPUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: CALL_OW 321
38153: PUSH
38154: LD_INT 2
38156: EQUAL
38157: ST_TO_ADDR
38158: GO 38443
38160: LD_INT 22
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38174
38166: LD_INT 36
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38199
38174: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_INT 15
38182: PPUSH
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 321
38192: PUSH
38193: LD_INT 2
38195: EQUAL
38196: ST_TO_ADDR
38197: GO 38443
38199: LD_INT 30
38201: DOUBLE
38202: EQUAL
38203: IFTRUE 38207
38205: GO 38232
38207: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38208: LD_ADDR_VAR 0 3
38212: PUSH
38213: LD_INT 20
38215: PPUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 321
38225: PUSH
38226: LD_INT 2
38228: EQUAL
38229: ST_TO_ADDR
38230: GO 38443
38232: LD_INT 28
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38246
38238: LD_INT 21
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38271
38246: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38247: LD_ADDR_VAR 0 3
38251: PUSH
38252: LD_INT 21
38254: PPUSH
38255: LD_VAR 0 1
38259: PPUSH
38260: CALL_OW 321
38264: PUSH
38265: LD_INT 2
38267: EQUAL
38268: ST_TO_ADDR
38269: GO 38443
38271: LD_INT 16
38273: DOUBLE
38274: EQUAL
38275: IFTRUE 38279
38277: GO 38304
38279: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38280: LD_ADDR_VAR 0 3
38284: PUSH
38285: LD_INT 84
38287: PPUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 321
38297: PUSH
38298: LD_INT 2
38300: EQUAL
38301: ST_TO_ADDR
38302: GO 38443
38304: LD_INT 19
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38318
38310: LD_INT 23
38312: DOUBLE
38313: EQUAL
38314: IFTRUE 38318
38316: GO 38343
38318: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38319: LD_ADDR_VAR 0 3
38323: PUSH
38324: LD_INT 83
38326: PPUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 321
38336: PUSH
38337: LD_INT 2
38339: EQUAL
38340: ST_TO_ADDR
38341: GO 38443
38343: LD_INT 17
38345: DOUBLE
38346: EQUAL
38347: IFTRUE 38351
38349: GO 38376
38351: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38352: LD_ADDR_VAR 0 3
38356: PUSH
38357: LD_INT 39
38359: PPUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 321
38369: PUSH
38370: LD_INT 2
38372: EQUAL
38373: ST_TO_ADDR
38374: GO 38443
38376: LD_INT 18
38378: DOUBLE
38379: EQUAL
38380: IFTRUE 38384
38382: GO 38409
38384: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38385: LD_ADDR_VAR 0 3
38389: PUSH
38390: LD_INT 40
38392: PPUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: CALL_OW 321
38402: PUSH
38403: LD_INT 2
38405: EQUAL
38406: ST_TO_ADDR
38407: GO 38443
38409: LD_INT 27
38411: DOUBLE
38412: EQUAL
38413: IFTRUE 38417
38415: GO 38442
38417: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38418: LD_ADDR_VAR 0 3
38422: PUSH
38423: LD_INT 35
38425: PPUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 321
38435: PUSH
38436: LD_INT 2
38438: EQUAL
38439: ST_TO_ADDR
38440: GO 38443
38442: POP
// end ;
38443: LD_VAR 0 3
38447: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38448: LD_INT 0
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
// result := false ;
38461: LD_ADDR_VAR 0 6
38465: PUSH
38466: LD_INT 0
38468: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38469: LD_VAR 0 1
38473: NOT
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 266
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: IN
38495: NOT
38496: OR
38497: PUSH
38498: LD_VAR 0 2
38502: NOT
38503: OR
38504: PUSH
38505: LD_VAR 0 5
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: LD_INT 5
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: IN
38536: NOT
38537: OR
38538: PUSH
38539: LD_VAR 0 3
38543: PPUSH
38544: LD_VAR 0 4
38548: PPUSH
38549: CALL_OW 488
38553: NOT
38554: OR
38555: IFFALSE 38559
// exit ;
38557: GO 39295
// side := GetSide ( depot ) ;
38559: LD_ADDR_VAR 0 9
38563: PUSH
38564: LD_VAR 0 1
38568: PPUSH
38569: CALL_OW 255
38573: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38574: LD_VAR 0 9
38578: PPUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: CALL 38072 0 2
38588: NOT
38589: IFFALSE 38593
// exit ;
38591: GO 39295
// pom := GetBase ( depot ) ;
38593: LD_ADDR_VAR 0 10
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 274
38607: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38608: LD_ADDR_VAR 0 11
38612: PUSH
38613: LD_VAR 0 2
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 248
38627: PPUSH
38628: CALL_OW 450
38632: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38633: LD_VAR 0 10
38637: PPUSH
38638: LD_INT 1
38640: PPUSH
38641: CALL_OW 275
38645: PUSH
38646: LD_VAR 0 11
38650: PUSH
38651: LD_INT 1
38653: ARRAY
38654: GREATEREQUAL
38655: PUSH
38656: LD_VAR 0 10
38660: PPUSH
38661: LD_INT 2
38663: PPUSH
38664: CALL_OW 275
38668: PUSH
38669: LD_VAR 0 11
38673: PUSH
38674: LD_INT 2
38676: ARRAY
38677: GREATEREQUAL
38678: AND
38679: PUSH
38680: LD_VAR 0 10
38684: PPUSH
38685: LD_INT 3
38687: PPUSH
38688: CALL_OW 275
38692: PUSH
38693: LD_VAR 0 11
38697: PUSH
38698: LD_INT 3
38700: ARRAY
38701: GREATEREQUAL
38702: AND
38703: NOT
38704: IFFALSE 38708
// exit ;
38706: GO 39295
// if GetBType ( depot ) = b_depot then
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 266
38717: PUSH
38718: LD_INT 0
38720: EQUAL
38721: IFFALSE 38733
// dist := 28 else
38723: LD_ADDR_VAR 0 14
38727: PUSH
38728: LD_INT 28
38730: ST_TO_ADDR
38731: GO 38741
// dist := 36 ;
38733: LD_ADDR_VAR 0 14
38737: PUSH
38738: LD_INT 36
38740: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38741: LD_VAR 0 1
38745: PPUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: LD_VAR 0 4
38755: PPUSH
38756: CALL_OW 297
38760: PUSH
38761: LD_VAR 0 14
38765: GREATER
38766: IFFALSE 38770
// exit ;
38768: GO 39295
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38770: LD_ADDR_VAR 0 12
38774: PUSH
38775: LD_VAR 0 2
38779: PPUSH
38780: LD_VAR 0 3
38784: PPUSH
38785: LD_VAR 0 4
38789: PPUSH
38790: LD_VAR 0 5
38794: PPUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 248
38804: PPUSH
38805: LD_INT 0
38807: PPUSH
38808: CALL 39300 0 6
38812: ST_TO_ADDR
// if not hexes then
38813: LD_VAR 0 12
38817: NOT
38818: IFFALSE 38822
// exit ;
38820: GO 39295
// hex := GetHexInfo ( x , y ) ;
38822: LD_ADDR_VAR 0 15
38826: PUSH
38827: LD_VAR 0 3
38831: PPUSH
38832: LD_VAR 0 4
38836: PPUSH
38837: CALL_OW 546
38841: ST_TO_ADDR
// if hex [ 1 ] then
38842: LD_VAR 0 15
38846: PUSH
38847: LD_INT 1
38849: ARRAY
38850: IFFALSE 38854
// exit ;
38852: GO 39295
// height := hex [ 2 ] ;
38854: LD_ADDR_VAR 0 13
38858: PUSH
38859: LD_VAR 0 15
38863: PUSH
38864: LD_INT 2
38866: ARRAY
38867: ST_TO_ADDR
// for i = 1 to hexes do
38868: LD_ADDR_VAR 0 7
38872: PUSH
38873: DOUBLE
38874: LD_INT 1
38876: DEC
38877: ST_TO_ADDR
38878: LD_VAR 0 12
38882: PUSH
38883: FOR_TO
38884: IFFALSE 39214
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38886: LD_VAR 0 12
38890: PUSH
38891: LD_VAR 0 7
38895: ARRAY
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: PPUSH
38901: LD_VAR 0 12
38905: PUSH
38906: LD_VAR 0 7
38910: ARRAY
38911: PUSH
38912: LD_INT 2
38914: ARRAY
38915: PPUSH
38916: CALL_OW 488
38920: NOT
38921: PUSH
38922: LD_VAR 0 12
38926: PUSH
38927: LD_VAR 0 7
38931: ARRAY
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: LD_VAR 0 12
38941: PUSH
38942: LD_VAR 0 7
38946: ARRAY
38947: PUSH
38948: LD_INT 2
38950: ARRAY
38951: PPUSH
38952: CALL_OW 428
38956: PUSH
38957: LD_INT 0
38959: GREATER
38960: OR
38961: PUSH
38962: LD_VAR 0 12
38966: PUSH
38967: LD_VAR 0 7
38971: ARRAY
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PPUSH
38977: LD_VAR 0 12
38981: PUSH
38982: LD_VAR 0 7
38986: ARRAY
38987: PUSH
38988: LD_INT 2
38990: ARRAY
38991: PPUSH
38992: CALL_OW 351
38996: OR
38997: IFFALSE 39003
// exit ;
38999: POP
39000: POP
39001: GO 39295
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39003: LD_ADDR_VAR 0 8
39007: PUSH
39008: LD_VAR 0 12
39012: PUSH
39013: LD_VAR 0 7
39017: ARRAY
39018: PUSH
39019: LD_INT 1
39021: ARRAY
39022: PPUSH
39023: LD_VAR 0 12
39027: PUSH
39028: LD_VAR 0 7
39032: ARRAY
39033: PUSH
39034: LD_INT 2
39036: ARRAY
39037: PPUSH
39038: CALL_OW 546
39042: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39043: LD_VAR 0 8
39047: PUSH
39048: LD_INT 1
39050: ARRAY
39051: PUSH
39052: LD_VAR 0 8
39056: PUSH
39057: LD_INT 2
39059: ARRAY
39060: PUSH
39061: LD_VAR 0 13
39065: PUSH
39066: LD_INT 2
39068: PLUS
39069: GREATER
39070: OR
39071: PUSH
39072: LD_VAR 0 8
39076: PUSH
39077: LD_INT 2
39079: ARRAY
39080: PUSH
39081: LD_VAR 0 13
39085: PUSH
39086: LD_INT 2
39088: MINUS
39089: LESS
39090: OR
39091: PUSH
39092: LD_VAR 0 8
39096: PUSH
39097: LD_INT 3
39099: ARRAY
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: LD_INT 8
39106: PUSH
39107: LD_INT 9
39109: PUSH
39110: LD_INT 10
39112: PUSH
39113: LD_INT 11
39115: PUSH
39116: LD_INT 12
39118: PUSH
39119: LD_INT 13
39121: PUSH
39122: LD_INT 16
39124: PUSH
39125: LD_INT 17
39127: PUSH
39128: LD_INT 18
39130: PUSH
39131: LD_INT 19
39133: PUSH
39134: LD_INT 20
39136: PUSH
39137: LD_INT 21
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: IN
39155: NOT
39156: OR
39157: PUSH
39158: LD_VAR 0 8
39162: PUSH
39163: LD_INT 5
39165: ARRAY
39166: NOT
39167: OR
39168: PUSH
39169: LD_VAR 0 8
39173: PUSH
39174: LD_INT 6
39176: ARRAY
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 7
39186: PUSH
39187: LD_INT 9
39189: PUSH
39190: LD_INT 10
39192: PUSH
39193: LD_INT 11
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: IN
39204: NOT
39205: OR
39206: IFFALSE 39212
// exit ;
39208: POP
39209: POP
39210: GO 39295
// end ;
39212: GO 38883
39214: POP
39215: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39216: LD_VAR 0 9
39220: PPUSH
39221: LD_VAR 0 3
39225: PPUSH
39226: LD_VAR 0 4
39230: PPUSH
39231: LD_INT 20
39233: PPUSH
39234: CALL 31247 0 4
39238: PUSH
39239: LD_INT 4
39241: ARRAY
39242: IFFALSE 39246
// exit ;
39244: GO 39295
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39246: LD_VAR 0 2
39250: PUSH
39251: LD_INT 29
39253: PUSH
39254: LD_INT 30
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: IN
39261: PUSH
39262: LD_VAR 0 3
39266: PPUSH
39267: LD_VAR 0 4
39271: PPUSH
39272: LD_VAR 0 9
39276: PPUSH
39277: CALL_OW 440
39281: NOT
39282: AND
39283: IFFALSE 39287
// exit ;
39285: GO 39295
// result := true ;
39287: LD_ADDR_VAR 0 6
39291: PUSH
39292: LD_INT 1
39294: ST_TO_ADDR
// end ;
39295: LD_VAR 0 6
39299: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39300: LD_INT 0
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
// result = [ ] ;
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: EMPTY
39366: ST_TO_ADDR
// temp_list = [ ] ;
39367: LD_ADDR_VAR 0 9
39371: PUSH
39372: EMPTY
39373: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39374: LD_VAR 0 4
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: LD_INT 4
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: IN
39405: NOT
39406: PUSH
39407: LD_VAR 0 1
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: IN
39422: PUSH
39423: LD_VAR 0 5
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: IN
39442: NOT
39443: AND
39444: OR
39445: IFFALSE 39449
// exit ;
39447: GO 57840
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39449: LD_VAR 0 1
39453: PUSH
39454: LD_INT 6
39456: PUSH
39457: LD_INT 7
39459: PUSH
39460: LD_INT 8
39462: PUSH
39463: LD_INT 13
39465: PUSH
39466: LD_INT 12
39468: PUSH
39469: LD_INT 15
39471: PUSH
39472: LD_INT 11
39474: PUSH
39475: LD_INT 14
39477: PUSH
39478: LD_INT 10
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: IN
39492: IFFALSE 39502
// btype = b_lab ;
39494: LD_ADDR_VAR 0 1
39498: PUSH
39499: LD_INT 6
39501: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39502: LD_VAR 0 6
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: IN
39521: NOT
39522: PUSH
39523: LD_VAR 0 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: LD_INT 6
39542: PUSH
39543: LD_INT 36
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: LD_INT 5
39551: PUSH
39552: LD_INT 31
39554: PUSH
39555: LD_INT 32
39557: PUSH
39558: LD_INT 33
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: IN
39574: NOT
39575: PUSH
39576: LD_VAR 0 6
39580: PUSH
39581: LD_INT 1
39583: EQUAL
39584: AND
39585: OR
39586: PUSH
39587: LD_VAR 0 1
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: IN
39602: NOT
39603: PUSH
39604: LD_VAR 0 6
39608: PUSH
39609: LD_INT 2
39611: EQUAL
39612: AND
39613: OR
39614: IFFALSE 39624
// mode = 0 ;
39616: LD_ADDR_VAR 0 6
39620: PUSH
39621: LD_INT 0
39623: ST_TO_ADDR
// case mode of 0 :
39624: LD_VAR 0 6
39628: PUSH
39629: LD_INT 0
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39637
39635: GO 51090
39637: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39638: LD_ADDR_VAR 0 11
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39831: LD_ADDR_VAR 0 12
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40027: LD_ADDR_VAR 0 13
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: NEG
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40226: LD_ADDR_VAR 0 14
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 3
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40422: LD_ADDR_VAR 0 15
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 3
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40615: LD_ADDR_VAR 0 16
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 3
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40808: LD_ADDR_VAR 0 17
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41038: LD_ADDR_VAR 0 18
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41268: LD_ADDR_VAR 0 19
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41498: LD_ADDR_VAR 0 20
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41728: LD_ADDR_VAR 0 21
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41958: LD_ADDR_VAR 0 22
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42188: LD_ADDR_VAR 0 23
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42468: LD_ADDR_VAR 0 24
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42744: LD_ADDR_VAR 0 25
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43018: LD_ADDR_VAR 0 26
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43294: LD_ADDR_VAR 0 27
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43574: LD_ADDR_VAR 0 28
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43856: LD_ADDR_VAR 0 29
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 3
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: NEG
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44135: LD_ADDR_VAR 0 30
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 3
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 3
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44413: LD_ADDR_VAR 0 31
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44691: LD_ADDR_VAR 0 32
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44969: LD_ADDR_VAR 0 33
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 3
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 3
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 3
45213: NEG
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45248: LD_ADDR_VAR 0 34
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 3
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45528: LD_ADDR_VAR 0 35
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45640: LD_ADDR_VAR 0 36
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45752: LD_ADDR_VAR 0 37
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45864: LD_ADDR_VAR 0 38
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45976: LD_ADDR_VAR 0 39
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46088: LD_ADDR_VAR 0 40
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46200: LD_ADDR_VAR 0 41
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: NEG
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46550: LD_ADDR_VAR 0 42
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 3
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 3
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46900: LD_ADDR_VAR 0 43
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 3
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47248: LD_ADDR_VAR 0 44
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 3
47557: NEG
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47598: LD_ADDR_VAR 0 45
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47948: LD_ADDR_VAR 0 46
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 3
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 3
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48296: LD_ADDR_VAR 0 47
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48447: LD_ADDR_VAR 0 48
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48594: LD_ADDR_VAR 0 49
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48738: LD_ADDR_VAR 0 50
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48882: LD_ADDR_VAR 0 51
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49029: LD_ADDR_VAR 0 52
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49180: LD_ADDR_VAR 0 53
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49410: LD_ADDR_VAR 0 54
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49640: LD_ADDR_VAR 0 55
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49870: LD_ADDR_VAR 0 56
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50100: LD_ADDR_VAR 0 57
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50330: LD_ADDR_VAR 0 58
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50560: LD_ADDR_VAR 0 59
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50648: LD_ADDR_VAR 0 60
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50736: LD_ADDR_VAR 0 61
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50824: LD_ADDR_VAR 0 62
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50912: LD_ADDR_VAR 0 63
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51000: LD_ADDR_VAR 0 64
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: ST_TO_ADDR
// end ; 1 :
51088: GO 56985
51090: LD_INT 1
51092: DOUBLE
51093: EQUAL
51094: IFTRUE 51098
51096: GO 53721
51098: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51099: LD_ADDR_VAR 0 11
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51143: LD_ADDR_VAR 0 12
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51184: LD_ADDR_VAR 0 13
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51224: LD_ADDR_VAR 0 14
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 3
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51265: LD_ADDR_VAR 0 15
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51309: LD_ADDR_VAR 0 16
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51355: LD_ADDR_VAR 0 17
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51399: LD_ADDR_VAR 0 18
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51440: LD_ADDR_VAR 0 19
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51480: LD_ADDR_VAR 0 20
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51521: LD_ADDR_VAR 0 21
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51565: LD_ADDR_VAR 0 22
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51611: LD_ADDR_VAR 0 23
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 4
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51655: LD_ADDR_VAR 0 24
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51696: LD_ADDR_VAR 0 25
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 4
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51736: LD_ADDR_VAR 0 26
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 4
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 3
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51777: LD_ADDR_VAR 0 27
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 4
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51821: LD_ADDR_VAR 0 28
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51867: LD_ADDR_VAR 0 29
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 4
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 4
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 5
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 5
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 6
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 6
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 5
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52022: LD_ADDR_VAR 0 30
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 4
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 5
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 5
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 6
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 6
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52165: LD_ADDR_VAR 0 31
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 4
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 4
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 5
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 5
52242: PUSH
52243: LD_INT 5
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 4
52252: PUSH
52253: LD_INT 5
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 6
52262: PUSH
52263: LD_INT 5
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 6
52272: PUSH
52273: LD_INT 6
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 5
52282: PUSH
52283: LD_INT 6
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52304: LD_ADDR_VAR 0 32
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 4
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 4
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 5
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 6
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 6
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 5
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52447: LD_ADDR_VAR 0 33
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 5
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 5
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 6
52567: NEG
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 6
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52602: LD_ADDR_VAR 0 34
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 4
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 4
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 4
52669: NEG
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 4
52681: NEG
52682: PUSH
52683: LD_INT 5
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 5
52693: NEG
52694: PUSH
52695: LD_INT 4
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 5
52705: NEG
52706: PUSH
52707: LD_INT 5
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 5
52717: NEG
52718: PUSH
52719: LD_INT 6
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 6
52729: NEG
52730: PUSH
52731: LD_INT 5
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 6
52741: NEG
52742: PUSH
52743: LD_INT 6
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52765: LD_ADDR_VAR 0 41
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52809: LD_ADDR_VAR 0 42
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52850: LD_ADDR_VAR 0 43
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52890: LD_ADDR_VAR 0 44
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52931: LD_ADDR_VAR 0 45
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52975: LD_ADDR_VAR 0 46
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53021: LD_ADDR_VAR 0 47
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53054: LD_ADDR_VAR 0 48
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53085: LD_ADDR_VAR 0 49
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53114: LD_ADDR_VAR 0 50
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53143: LD_ADDR_VAR 0 51
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53174: LD_ADDR_VAR 0 52
53178: PUSH
53179: LD_INT 3
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53207: LD_ADDR_VAR 0 53
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53251: LD_ADDR_VAR 0 54
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53292: LD_ADDR_VAR 0 55
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53332: LD_ADDR_VAR 0 56
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53373: LD_ADDR_VAR 0 57
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53417: LD_ADDR_VAR 0 58
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53463: LD_ADDR_VAR 0 59
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53507: LD_ADDR_VAR 0 60
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53548: LD_ADDR_VAR 0 61
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53588: LD_ADDR_VAR 0 62
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53629: LD_ADDR_VAR 0 63
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53673: LD_ADDR_VAR 0 64
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// end ; 2 :
53719: GO 56985
53721: LD_INT 2
53723: DOUBLE
53724: EQUAL
53725: IFTRUE 53729
53727: GO 56984
53729: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53730: LD_ADDR_VAR 0 29
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 5
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 4
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 5
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 4
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 4
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 4
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 4
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 3
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 4
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 5
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 5
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 4
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 4
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 4
54127: NEG
54128: PUSH
54129: LD_INT 5
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: LD_INT 4
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 4
54163: NEG
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 5
54175: NEG
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 5
54187: NEG
54188: PUSH
54189: LD_INT 5
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: LD_INT 5
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54268: LD_ADDR_VAR 0 30
54272: PUSH
54273: LD_INT 4
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 4
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 5
54295: PUSH
54296: LD_INT 4
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 5
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: LD_INT 5
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 5
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 5
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 4
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 4
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 4
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 4
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 5
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 5
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 5
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 3
54560: NEG
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: LD_INT 4
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: NEG
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 4
54632: NEG
54633: PUSH
54634: LD_INT 4
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 4
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 4
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 5
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 5
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54815: LD_ADDR_VAR 0 31
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 5
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 5
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 3
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 4
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 4
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: LD_INT 4
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 5
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 4
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 5
55077: NEG
55078: PUSH
55079: LD_INT 4
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 5
55089: NEG
55090: PUSH
55091: LD_INT 5
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 5
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 5
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 4
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 5
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 4
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 5
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55365: LD_ADDR_VAR 0 32
55369: PUSH
55370: LD_INT 4
55372: NEG
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 4
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 5
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 5
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: NEG
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 4
55534: NEG
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: NEG
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 4
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 5
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 4
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 5
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 5
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 4
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 5
55797: PUSH
55798: LD_INT 4
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 5
55807: PUSH
55808: LD_INT 5
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: LD_INT 5
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 5
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 5
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55912: LD_ADDR_VAR 0 33
55916: PUSH
55917: LD_INT 4
55919: NEG
55920: PUSH
55921: LD_INT 4
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: LD_INT 5
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 4
55967: NEG
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 5
55979: NEG
55980: PUSH
55981: LD_INT 4
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: NEG
55992: PUSH
55993: LD_INT 5
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 5
56015: NEG
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 4
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 4
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 4
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 5
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 5
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 5
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 4
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 5
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 5
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 4
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56450: LD_ADDR_VAR 0 34
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 4
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 5
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 4
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 4
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 5
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 3
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 5
56672: PUSH
56673: LD_INT 4
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 5
56682: PUSH
56683: LD_INT 5
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: LD_INT 5
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 5
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: LD_INT 5
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 4
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 4
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 4
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 4
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 5
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 5
56914: NEG
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// end ; end ;
56982: GO 56985
56984: POP
// case btype of b_depot , b_warehouse :
56985: LD_VAR 0 1
56989: PUSH
56990: LD_INT 0
56992: DOUBLE
56993: EQUAL
56994: IFTRUE 57004
56996: LD_INT 1
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57004
57002: GO 57205
57004: POP
// case nation of nation_american :
57005: LD_VAR 0 5
57009: PUSH
57010: LD_INT 1
57012: DOUBLE
57013: EQUAL
57014: IFTRUE 57018
57016: GO 57074
57018: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57019: LD_ADDR_VAR 0 9
57023: PUSH
57024: LD_VAR 0 11
57028: PUSH
57029: LD_VAR 0 12
57033: PUSH
57034: LD_VAR 0 13
57038: PUSH
57039: LD_VAR 0 14
57043: PUSH
57044: LD_VAR 0 15
57048: PUSH
57049: LD_VAR 0 16
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: PUSH
57062: LD_VAR 0 4
57066: PUSH
57067: LD_INT 1
57069: PLUS
57070: ARRAY
57071: ST_TO_ADDR
57072: GO 57203
57074: LD_INT 2
57076: DOUBLE
57077: EQUAL
57078: IFTRUE 57082
57080: GO 57138
57082: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57083: LD_ADDR_VAR 0 9
57087: PUSH
57088: LD_VAR 0 17
57092: PUSH
57093: LD_VAR 0 18
57097: PUSH
57098: LD_VAR 0 19
57102: PUSH
57103: LD_VAR 0 20
57107: PUSH
57108: LD_VAR 0 21
57112: PUSH
57113: LD_VAR 0 22
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: PUSH
57126: LD_VAR 0 4
57130: PUSH
57131: LD_INT 1
57133: PLUS
57134: ARRAY
57135: ST_TO_ADDR
57136: GO 57203
57138: LD_INT 3
57140: DOUBLE
57141: EQUAL
57142: IFTRUE 57146
57144: GO 57202
57146: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57147: LD_ADDR_VAR 0 9
57151: PUSH
57152: LD_VAR 0 23
57156: PUSH
57157: LD_VAR 0 24
57161: PUSH
57162: LD_VAR 0 25
57166: PUSH
57167: LD_VAR 0 26
57171: PUSH
57172: LD_VAR 0 27
57176: PUSH
57177: LD_VAR 0 28
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 4
57194: PUSH
57195: LD_INT 1
57197: PLUS
57198: ARRAY
57199: ST_TO_ADDR
57200: GO 57203
57202: POP
57203: GO 57758
57205: LD_INT 2
57207: DOUBLE
57208: EQUAL
57209: IFTRUE 57219
57211: LD_INT 3
57213: DOUBLE
57214: EQUAL
57215: IFTRUE 57219
57217: GO 57275
57219: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57220: LD_ADDR_VAR 0 9
57224: PUSH
57225: LD_VAR 0 29
57229: PUSH
57230: LD_VAR 0 30
57234: PUSH
57235: LD_VAR 0 31
57239: PUSH
57240: LD_VAR 0 32
57244: PUSH
57245: LD_VAR 0 33
57249: PUSH
57250: LD_VAR 0 34
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: PUSH
57263: LD_VAR 0 4
57267: PUSH
57268: LD_INT 1
57270: PLUS
57271: ARRAY
57272: ST_TO_ADDR
57273: GO 57758
57275: LD_INT 16
57277: DOUBLE
57278: EQUAL
57279: IFTRUE 57337
57281: LD_INT 17
57283: DOUBLE
57284: EQUAL
57285: IFTRUE 57337
57287: LD_INT 18
57289: DOUBLE
57290: EQUAL
57291: IFTRUE 57337
57293: LD_INT 19
57295: DOUBLE
57296: EQUAL
57297: IFTRUE 57337
57299: LD_INT 22
57301: DOUBLE
57302: EQUAL
57303: IFTRUE 57337
57305: LD_INT 20
57307: DOUBLE
57308: EQUAL
57309: IFTRUE 57337
57311: LD_INT 21
57313: DOUBLE
57314: EQUAL
57315: IFTRUE 57337
57317: LD_INT 23
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57337
57323: LD_INT 24
57325: DOUBLE
57326: EQUAL
57327: IFTRUE 57337
57329: LD_INT 25
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57337
57335: GO 57393
57337: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57338: LD_ADDR_VAR 0 9
57342: PUSH
57343: LD_VAR 0 35
57347: PUSH
57348: LD_VAR 0 36
57352: PUSH
57353: LD_VAR 0 37
57357: PUSH
57358: LD_VAR 0 38
57362: PUSH
57363: LD_VAR 0 39
57367: PUSH
57368: LD_VAR 0 40
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: PUSH
57381: LD_VAR 0 4
57385: PUSH
57386: LD_INT 1
57388: PLUS
57389: ARRAY
57390: ST_TO_ADDR
57391: GO 57758
57393: LD_INT 6
57395: DOUBLE
57396: EQUAL
57397: IFTRUE 57449
57399: LD_INT 7
57401: DOUBLE
57402: EQUAL
57403: IFTRUE 57449
57405: LD_INT 8
57407: DOUBLE
57408: EQUAL
57409: IFTRUE 57449
57411: LD_INT 13
57413: DOUBLE
57414: EQUAL
57415: IFTRUE 57449
57417: LD_INT 12
57419: DOUBLE
57420: EQUAL
57421: IFTRUE 57449
57423: LD_INT 15
57425: DOUBLE
57426: EQUAL
57427: IFTRUE 57449
57429: LD_INT 11
57431: DOUBLE
57432: EQUAL
57433: IFTRUE 57449
57435: LD_INT 14
57437: DOUBLE
57438: EQUAL
57439: IFTRUE 57449
57441: LD_INT 10
57443: DOUBLE
57444: EQUAL
57445: IFTRUE 57449
57447: GO 57505
57449: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57450: LD_ADDR_VAR 0 9
57454: PUSH
57455: LD_VAR 0 41
57459: PUSH
57460: LD_VAR 0 42
57464: PUSH
57465: LD_VAR 0 43
57469: PUSH
57470: LD_VAR 0 44
57474: PUSH
57475: LD_VAR 0 45
57479: PUSH
57480: LD_VAR 0 46
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: PUSH
57493: LD_VAR 0 4
57497: PUSH
57498: LD_INT 1
57500: PLUS
57501: ARRAY
57502: ST_TO_ADDR
57503: GO 57758
57505: LD_INT 36
57507: DOUBLE
57508: EQUAL
57509: IFTRUE 57513
57511: GO 57569
57513: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57514: LD_ADDR_VAR 0 9
57518: PUSH
57519: LD_VAR 0 47
57523: PUSH
57524: LD_VAR 0 48
57528: PUSH
57529: LD_VAR 0 49
57533: PUSH
57534: LD_VAR 0 50
57538: PUSH
57539: LD_VAR 0 51
57543: PUSH
57544: LD_VAR 0 52
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: PUSH
57557: LD_VAR 0 4
57561: PUSH
57562: LD_INT 1
57564: PLUS
57565: ARRAY
57566: ST_TO_ADDR
57567: GO 57758
57569: LD_INT 4
57571: DOUBLE
57572: EQUAL
57573: IFTRUE 57595
57575: LD_INT 5
57577: DOUBLE
57578: EQUAL
57579: IFTRUE 57595
57581: LD_INT 34
57583: DOUBLE
57584: EQUAL
57585: IFTRUE 57595
57587: LD_INT 37
57589: DOUBLE
57590: EQUAL
57591: IFTRUE 57595
57593: GO 57651
57595: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57596: LD_ADDR_VAR 0 9
57600: PUSH
57601: LD_VAR 0 53
57605: PUSH
57606: LD_VAR 0 54
57610: PUSH
57611: LD_VAR 0 55
57615: PUSH
57616: LD_VAR 0 56
57620: PUSH
57621: LD_VAR 0 57
57625: PUSH
57626: LD_VAR 0 58
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: LD_VAR 0 4
57643: PUSH
57644: LD_INT 1
57646: PLUS
57647: ARRAY
57648: ST_TO_ADDR
57649: GO 57758
57651: LD_INT 31
57653: DOUBLE
57654: EQUAL
57655: IFTRUE 57701
57657: LD_INT 32
57659: DOUBLE
57660: EQUAL
57661: IFTRUE 57701
57663: LD_INT 33
57665: DOUBLE
57666: EQUAL
57667: IFTRUE 57701
57669: LD_INT 27
57671: DOUBLE
57672: EQUAL
57673: IFTRUE 57701
57675: LD_INT 26
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57701
57681: LD_INT 28
57683: DOUBLE
57684: EQUAL
57685: IFTRUE 57701
57687: LD_INT 29
57689: DOUBLE
57690: EQUAL
57691: IFTRUE 57701
57693: LD_INT 30
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57701
57699: GO 57757
57701: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57702: LD_ADDR_VAR 0 9
57706: PUSH
57707: LD_VAR 0 59
57711: PUSH
57712: LD_VAR 0 60
57716: PUSH
57717: LD_VAR 0 61
57721: PUSH
57722: LD_VAR 0 62
57726: PUSH
57727: LD_VAR 0 63
57731: PUSH
57732: LD_VAR 0 64
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: PUSH
57745: LD_VAR 0 4
57749: PUSH
57750: LD_INT 1
57752: PLUS
57753: ARRAY
57754: ST_TO_ADDR
57755: GO 57758
57757: POP
// temp_list2 = [ ] ;
57758: LD_ADDR_VAR 0 10
57762: PUSH
57763: EMPTY
57764: ST_TO_ADDR
// for i in temp_list do
57765: LD_ADDR_VAR 0 8
57769: PUSH
57770: LD_VAR 0 9
57774: PUSH
57775: FOR_IN
57776: IFFALSE 57828
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57778: LD_ADDR_VAR 0 10
57782: PUSH
57783: LD_VAR 0 10
57787: PUSH
57788: LD_VAR 0 8
57792: PUSH
57793: LD_INT 1
57795: ARRAY
57796: PUSH
57797: LD_VAR 0 2
57801: PLUS
57802: PUSH
57803: LD_VAR 0 8
57807: PUSH
57808: LD_INT 2
57810: ARRAY
57811: PUSH
57812: LD_VAR 0 3
57816: PLUS
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: ADD
57825: ST_TO_ADDR
57826: GO 57775
57828: POP
57829: POP
// result = temp_list2 ;
57830: LD_ADDR_VAR 0 7
57834: PUSH
57835: LD_VAR 0 10
57839: ST_TO_ADDR
// end ;
57840: LD_VAR 0 7
57844: RET
// export function EnemyInRange ( unit , dist ) ; begin
57845: LD_INT 0
57847: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57848: LD_ADDR_VAR 0 3
57852: PUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL_OW 255
57862: PPUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 250
57872: PPUSH
57873: LD_VAR 0 1
57877: PPUSH
57878: CALL_OW 251
57882: PPUSH
57883: LD_VAR 0 2
57887: PPUSH
57888: CALL 31247 0 4
57892: PUSH
57893: LD_INT 4
57895: ARRAY
57896: ST_TO_ADDR
// end ;
57897: LD_VAR 0 3
57901: RET
// export function PlayerSeeMe ( unit ) ; begin
57902: LD_INT 0
57904: PPUSH
// result := See ( your_side , unit ) ;
57905: LD_ADDR_VAR 0 2
57909: PUSH
57910: LD_OWVAR 2
57914: PPUSH
57915: LD_VAR 0 1
57919: PPUSH
57920: CALL_OW 292
57924: ST_TO_ADDR
// end ;
57925: LD_VAR 0 2
57929: RET
// export function ReverseDir ( unit ) ; begin
57930: LD_INT 0
57932: PPUSH
// if not unit then
57933: LD_VAR 0 1
57937: NOT
57938: IFFALSE 57942
// exit ;
57940: GO 57965
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57942: LD_ADDR_VAR 0 2
57946: PUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 254
57956: PUSH
57957: LD_INT 3
57959: PLUS
57960: PUSH
57961: LD_INT 6
57963: MOD
57964: ST_TO_ADDR
// end ;
57965: LD_VAR 0 2
57969: RET
// export function ReverseArray ( array ) ; var i ; begin
57970: LD_INT 0
57972: PPUSH
57973: PPUSH
// if not array then
57974: LD_VAR 0 1
57978: NOT
57979: IFFALSE 57983
// exit ;
57981: GO 58038
// result := [ ] ;
57983: LD_ADDR_VAR 0 2
57987: PUSH
57988: EMPTY
57989: ST_TO_ADDR
// for i := array downto 1 do
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: DOUBLE
57996: LD_VAR 0 1
58000: INC
58001: ST_TO_ADDR
58002: LD_INT 1
58004: PUSH
58005: FOR_DOWNTO
58006: IFFALSE 58036
// result := Join ( result , array [ i ] ) ;
58008: LD_ADDR_VAR 0 2
58012: PUSH
58013: LD_VAR 0 2
58017: PPUSH
58018: LD_VAR 0 1
58022: PUSH
58023: LD_VAR 0 3
58027: ARRAY
58028: PPUSH
58029: CALL 62682 0 2
58033: ST_TO_ADDR
58034: GO 58005
58036: POP
58037: POP
// end ;
58038: LD_VAR 0 2
58042: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58043: LD_INT 0
58045: PPUSH
58046: PPUSH
58047: PPUSH
58048: PPUSH
58049: PPUSH
58050: PPUSH
// if not unit or not hexes then
58051: LD_VAR 0 1
58055: NOT
58056: PUSH
58057: LD_VAR 0 2
58061: NOT
58062: OR
58063: IFFALSE 58067
// exit ;
58065: GO 58190
// dist := 9999 ;
58067: LD_ADDR_VAR 0 5
58071: PUSH
58072: LD_INT 9999
58074: ST_TO_ADDR
// for i = 1 to hexes do
58075: LD_ADDR_VAR 0 4
58079: PUSH
58080: DOUBLE
58081: LD_INT 1
58083: DEC
58084: ST_TO_ADDR
58085: LD_VAR 0 2
58089: PUSH
58090: FOR_TO
58091: IFFALSE 58178
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58093: LD_ADDR_VAR 0 6
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: LD_VAR 0 2
58107: PUSH
58108: LD_VAR 0 4
58112: ARRAY
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 2
58122: PUSH
58123: LD_VAR 0 4
58127: ARRAY
58128: PUSH
58129: LD_INT 2
58131: ARRAY
58132: PPUSH
58133: CALL_OW 297
58137: ST_TO_ADDR
// if tdist < dist then
58138: LD_VAR 0 6
58142: PUSH
58143: LD_VAR 0 5
58147: LESS
58148: IFFALSE 58176
// begin hex := hexes [ i ] ;
58150: LD_ADDR_VAR 0 8
58154: PUSH
58155: LD_VAR 0 2
58159: PUSH
58160: LD_VAR 0 4
58164: ARRAY
58165: ST_TO_ADDR
// dist := tdist ;
58166: LD_ADDR_VAR 0 5
58170: PUSH
58171: LD_VAR 0 6
58175: ST_TO_ADDR
// end ; end ;
58176: GO 58090
58178: POP
58179: POP
// result := hex ;
58180: LD_ADDR_VAR 0 3
58184: PUSH
58185: LD_VAR 0 8
58189: ST_TO_ADDR
// end ;
58190: LD_VAR 0 3
58194: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58195: LD_INT 0
58197: PPUSH
58198: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58199: LD_VAR 0 1
58203: NOT
58204: PUSH
58205: LD_VAR 0 1
58209: PUSH
58210: LD_INT 21
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 23
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PPUSH
58234: CALL_OW 69
58238: IN
58239: NOT
58240: OR
58241: IFFALSE 58245
// exit ;
58243: GO 58292
// for i = 1 to 3 do
58245: LD_ADDR_VAR 0 3
58249: PUSH
58250: DOUBLE
58251: LD_INT 1
58253: DEC
58254: ST_TO_ADDR
58255: LD_INT 3
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58290
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58261: LD_VAR 0 1
58265: PPUSH
58266: CALL_OW 250
58270: PPUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL_OW 251
58280: PPUSH
58281: LD_INT 1
58283: PPUSH
58284: CALL_OW 453
58288: GO 58258
58290: POP
58291: POP
// end ;
58292: LD_VAR 0 2
58296: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58297: LD_INT 0
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58305: LD_VAR 0 1
58309: NOT
58310: PUSH
58311: LD_VAR 0 2
58315: NOT
58316: OR
58317: PUSH
58318: LD_VAR 0 1
58322: PPUSH
58323: CALL_OW 314
58327: OR
58328: IFFALSE 58332
// exit ;
58330: GO 58799
// if GetLives ( i ) < 250 then
58332: LD_VAR 0 4
58336: PPUSH
58337: CALL_OW 256
58341: PUSH
58342: LD_INT 250
58344: LESS
58345: IFFALSE 58358
// begin ComAutodestruct ( i ) ;
58347: LD_VAR 0 4
58351: PPUSH
58352: CALL 58195 0 1
// exit ;
58356: GO 58799
// end ; x := GetX ( enemy_unit ) ;
58358: LD_ADDR_VAR 0 7
58362: PUSH
58363: LD_VAR 0 2
58367: PPUSH
58368: CALL_OW 250
58372: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58373: LD_ADDR_VAR 0 8
58377: PUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: CALL_OW 251
58387: ST_TO_ADDR
// if not x or not y then
58388: LD_VAR 0 7
58392: NOT
58393: PUSH
58394: LD_VAR 0 8
58398: NOT
58399: OR
58400: IFFALSE 58404
// exit ;
58402: GO 58799
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58404: LD_ADDR_VAR 0 6
58408: PUSH
58409: LD_VAR 0 7
58413: PPUSH
58414: LD_INT 0
58416: PPUSH
58417: LD_INT 4
58419: PPUSH
58420: CALL_OW 272
58424: PUSH
58425: LD_VAR 0 8
58429: PPUSH
58430: LD_INT 0
58432: PPUSH
58433: LD_INT 4
58435: PPUSH
58436: CALL_OW 273
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_VAR 0 7
58449: PPUSH
58450: LD_INT 1
58452: PPUSH
58453: LD_INT 4
58455: PPUSH
58456: CALL_OW 272
58460: PUSH
58461: LD_VAR 0 8
58465: PPUSH
58466: LD_INT 1
58468: PPUSH
58469: LD_INT 4
58471: PPUSH
58472: CALL_OW 273
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_VAR 0 7
58485: PPUSH
58486: LD_INT 2
58488: PPUSH
58489: LD_INT 4
58491: PPUSH
58492: CALL_OW 272
58496: PUSH
58497: LD_VAR 0 8
58501: PPUSH
58502: LD_INT 2
58504: PPUSH
58505: LD_INT 4
58507: PPUSH
58508: CALL_OW 273
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_VAR 0 7
58521: PPUSH
58522: LD_INT 3
58524: PPUSH
58525: LD_INT 4
58527: PPUSH
58528: CALL_OW 272
58532: PUSH
58533: LD_VAR 0 8
58537: PPUSH
58538: LD_INT 3
58540: PPUSH
58541: LD_INT 4
58543: PPUSH
58544: CALL_OW 273
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_VAR 0 7
58557: PPUSH
58558: LD_INT 4
58560: PPUSH
58561: LD_INT 4
58563: PPUSH
58564: CALL_OW 272
58568: PUSH
58569: LD_VAR 0 8
58573: PPUSH
58574: LD_INT 4
58576: PPUSH
58577: LD_INT 4
58579: PPUSH
58580: CALL_OW 273
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_VAR 0 7
58593: PPUSH
58594: LD_INT 5
58596: PPUSH
58597: LD_INT 4
58599: PPUSH
58600: CALL_OW 272
58604: PUSH
58605: LD_VAR 0 8
58609: PPUSH
58610: LD_INT 5
58612: PPUSH
58613: LD_INT 4
58615: PPUSH
58616: CALL_OW 273
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// for i = tmp downto 1 do
58633: LD_ADDR_VAR 0 4
58637: PUSH
58638: DOUBLE
58639: LD_VAR 0 6
58643: INC
58644: ST_TO_ADDR
58645: LD_INT 1
58647: PUSH
58648: FOR_DOWNTO
58649: IFFALSE 58750
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58651: LD_VAR 0 6
58655: PUSH
58656: LD_VAR 0 4
58660: ARRAY
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PPUSH
58666: LD_VAR 0 6
58670: PUSH
58671: LD_VAR 0 4
58675: ARRAY
58676: PUSH
58677: LD_INT 2
58679: ARRAY
58680: PPUSH
58681: CALL_OW 488
58685: NOT
58686: PUSH
58687: LD_VAR 0 6
58691: PUSH
58692: LD_VAR 0 4
58696: ARRAY
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PPUSH
58702: LD_VAR 0 6
58706: PUSH
58707: LD_VAR 0 4
58711: ARRAY
58712: PUSH
58713: LD_INT 2
58715: ARRAY
58716: PPUSH
58717: CALL_OW 428
58721: PUSH
58722: LD_INT 0
58724: NONEQUAL
58725: OR
58726: IFFALSE 58748
// tmp := Delete ( tmp , i ) ;
58728: LD_ADDR_VAR 0 6
58732: PUSH
58733: LD_VAR 0 6
58737: PPUSH
58738: LD_VAR 0 4
58742: PPUSH
58743: CALL_OW 3
58747: ST_TO_ADDR
58748: GO 58648
58750: POP
58751: POP
// j := GetClosestHex ( unit , tmp ) ;
58752: LD_ADDR_VAR 0 5
58756: PUSH
58757: LD_VAR 0 1
58761: PPUSH
58762: LD_VAR 0 6
58766: PPUSH
58767: CALL 58043 0 2
58771: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58772: LD_VAR 0 1
58776: PPUSH
58777: LD_VAR 0 5
58781: PUSH
58782: LD_INT 1
58784: ARRAY
58785: PPUSH
58786: LD_VAR 0 5
58790: PUSH
58791: LD_INT 2
58793: ARRAY
58794: PPUSH
58795: CALL_OW 111
// end ;
58799: LD_VAR 0 3
58803: RET
// export function PrepareApemanSoldier ( ) ; begin
58804: LD_INT 0
58806: PPUSH
// uc_nation := 0 ;
58807: LD_ADDR_OWVAR 21
58811: PUSH
58812: LD_INT 0
58814: ST_TO_ADDR
// hc_sex := sex_male ;
58815: LD_ADDR_OWVAR 27
58819: PUSH
58820: LD_INT 1
58822: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58823: LD_ADDR_OWVAR 28
58827: PUSH
58828: LD_INT 15
58830: ST_TO_ADDR
// hc_gallery :=  ;
58831: LD_ADDR_OWVAR 33
58835: PUSH
58836: LD_STRING 
58838: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58839: LD_ADDR_OWVAR 31
58843: PUSH
58844: LD_INT 0
58846: PPUSH
58847: LD_INT 3
58849: PPUSH
58850: CALL_OW 12
58854: PUSH
58855: LD_INT 0
58857: PPUSH
58858: LD_INT 3
58860: PPUSH
58861: CALL_OW 12
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// end ;
58878: LD_VAR 0 1
58882: RET
// export function PrepareApemanEngineer ( ) ; begin
58883: LD_INT 0
58885: PPUSH
// uc_nation := 0 ;
58886: LD_ADDR_OWVAR 21
58890: PUSH
58891: LD_INT 0
58893: ST_TO_ADDR
// hc_sex := sex_male ;
58894: LD_ADDR_OWVAR 27
58898: PUSH
58899: LD_INT 1
58901: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58902: LD_ADDR_OWVAR 28
58906: PUSH
58907: LD_INT 16
58909: ST_TO_ADDR
// hc_gallery :=  ;
58910: LD_ADDR_OWVAR 33
58914: PUSH
58915: LD_STRING 
58917: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58918: LD_ADDR_OWVAR 31
58922: PUSH
58923: LD_INT 0
58925: PPUSH
58926: LD_INT 3
58928: PPUSH
58929: CALL_OW 12
58933: PUSH
58934: LD_INT 0
58936: PPUSH
58937: LD_INT 3
58939: PPUSH
58940: CALL_OW 12
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// end ;
58957: LD_VAR 0 1
58961: RET
// export function PrepareApeman ( agressivity ) ; begin
58962: LD_INT 0
58964: PPUSH
// uc_side := 0 ;
58965: LD_ADDR_OWVAR 20
58969: PUSH
58970: LD_INT 0
58972: ST_TO_ADDR
// uc_nation := 0 ;
58973: LD_ADDR_OWVAR 21
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// hc_sex := sex_male ;
58981: LD_ADDR_OWVAR 27
58985: PUSH
58986: LD_INT 1
58988: ST_TO_ADDR
// hc_class := class_apeman ;
58989: LD_ADDR_OWVAR 28
58993: PUSH
58994: LD_INT 12
58996: ST_TO_ADDR
// hc_gallery :=  ;
58997: LD_ADDR_OWVAR 33
59001: PUSH
59002: LD_STRING 
59004: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59005: LD_ADDR_OWVAR 35
59009: PUSH
59010: LD_VAR 0 1
59014: NEG
59015: PPUSH
59016: LD_VAR 0 1
59020: PPUSH
59021: CALL_OW 12
59025: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59026: LD_ADDR_OWVAR 31
59030: PUSH
59031: LD_INT 0
59033: PPUSH
59034: LD_INT 3
59036: PPUSH
59037: CALL_OW 12
59041: PUSH
59042: LD_INT 0
59044: PPUSH
59045: LD_INT 3
59047: PPUSH
59048: CALL_OW 12
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: ST_TO_ADDR
// end ;
59065: LD_VAR 0 2
59069: RET
// export function PrepareTiger ( agressivity ) ; begin
59070: LD_INT 0
59072: PPUSH
// uc_side := 0 ;
59073: LD_ADDR_OWVAR 20
59077: PUSH
59078: LD_INT 0
59080: ST_TO_ADDR
// uc_nation := 0 ;
59081: LD_ADDR_OWVAR 21
59085: PUSH
59086: LD_INT 0
59088: ST_TO_ADDR
// hc_class := class_tiger ;
59089: LD_ADDR_OWVAR 28
59093: PUSH
59094: LD_INT 14
59096: ST_TO_ADDR
// hc_gallery :=  ;
59097: LD_ADDR_OWVAR 33
59101: PUSH
59102: LD_STRING 
59104: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59105: LD_ADDR_OWVAR 35
59109: PUSH
59110: LD_VAR 0 1
59114: NEG
59115: PPUSH
59116: LD_VAR 0 1
59120: PPUSH
59121: CALL_OW 12
59125: ST_TO_ADDR
// end ;
59126: LD_VAR 0 2
59130: RET
// export function PrepareEnchidna ( ) ; begin
59131: LD_INT 0
59133: PPUSH
// uc_side := 0 ;
59134: LD_ADDR_OWVAR 20
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
// uc_nation := 0 ;
59142: LD_ADDR_OWVAR 21
59146: PUSH
59147: LD_INT 0
59149: ST_TO_ADDR
// hc_class := class_baggie ;
59150: LD_ADDR_OWVAR 28
59154: PUSH
59155: LD_INT 13
59157: ST_TO_ADDR
// hc_gallery :=  ;
59158: LD_ADDR_OWVAR 33
59162: PUSH
59163: LD_STRING 
59165: ST_TO_ADDR
// end ;
59166: LD_VAR 0 1
59170: RET
// export function PrepareFrog ( ) ; begin
59171: LD_INT 0
59173: PPUSH
// uc_side := 0 ;
59174: LD_ADDR_OWVAR 20
59178: PUSH
59179: LD_INT 0
59181: ST_TO_ADDR
// uc_nation := 0 ;
59182: LD_ADDR_OWVAR 21
59186: PUSH
59187: LD_INT 0
59189: ST_TO_ADDR
// hc_class := class_frog ;
59190: LD_ADDR_OWVAR 28
59194: PUSH
59195: LD_INT 19
59197: ST_TO_ADDR
// hc_gallery :=  ;
59198: LD_ADDR_OWVAR 33
59202: PUSH
59203: LD_STRING 
59205: ST_TO_ADDR
// end ;
59206: LD_VAR 0 1
59210: RET
// export function PrepareFish ( ) ; begin
59211: LD_INT 0
59213: PPUSH
// uc_side := 0 ;
59214: LD_ADDR_OWVAR 20
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
// uc_nation := 0 ;
59222: LD_ADDR_OWVAR 21
59226: PUSH
59227: LD_INT 0
59229: ST_TO_ADDR
// hc_class := class_fish ;
59230: LD_ADDR_OWVAR 28
59234: PUSH
59235: LD_INT 20
59237: ST_TO_ADDR
// hc_gallery :=  ;
59238: LD_ADDR_OWVAR 33
59242: PUSH
59243: LD_STRING 
59245: ST_TO_ADDR
// end ;
59246: LD_VAR 0 1
59250: RET
// export function PrepareBird ( ) ; begin
59251: LD_INT 0
59253: PPUSH
// uc_side := 0 ;
59254: LD_ADDR_OWVAR 20
59258: PUSH
59259: LD_INT 0
59261: ST_TO_ADDR
// uc_nation := 0 ;
59262: LD_ADDR_OWVAR 21
59266: PUSH
59267: LD_INT 0
59269: ST_TO_ADDR
// hc_class := class_phororhacos ;
59270: LD_ADDR_OWVAR 28
59274: PUSH
59275: LD_INT 18
59277: ST_TO_ADDR
// hc_gallery :=  ;
59278: LD_ADDR_OWVAR 33
59282: PUSH
59283: LD_STRING 
59285: ST_TO_ADDR
// end ;
59286: LD_VAR 0 1
59290: RET
// export function PrepareHorse ( ) ; begin
59291: LD_INT 0
59293: PPUSH
// uc_side := 0 ;
59294: LD_ADDR_OWVAR 20
59298: PUSH
59299: LD_INT 0
59301: ST_TO_ADDR
// uc_nation := 0 ;
59302: LD_ADDR_OWVAR 21
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// hc_class := class_horse ;
59310: LD_ADDR_OWVAR 28
59314: PUSH
59315: LD_INT 21
59317: ST_TO_ADDR
// hc_gallery :=  ;
59318: LD_ADDR_OWVAR 33
59322: PUSH
59323: LD_STRING 
59325: ST_TO_ADDR
// end ;
59326: LD_VAR 0 1
59330: RET
// export function PrepareMastodont ( ) ; begin
59331: LD_INT 0
59333: PPUSH
// uc_side := 0 ;
59334: LD_ADDR_OWVAR 20
59338: PUSH
59339: LD_INT 0
59341: ST_TO_ADDR
// uc_nation := 0 ;
59342: LD_ADDR_OWVAR 21
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59350: LD_ADDR_OWVAR 37
59354: PUSH
59355: LD_INT 31
59357: ST_TO_ADDR
// vc_control := control_rider ;
59358: LD_ADDR_OWVAR 38
59362: PUSH
59363: LD_INT 4
59365: ST_TO_ADDR
// end ;
59366: LD_VAR 0 1
59370: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
59375: PPUSH
// uc_side = 0 ;
59376: LD_ADDR_OWVAR 20
59380: PUSH
59381: LD_INT 0
59383: ST_TO_ADDR
// uc_nation = 0 ;
59384: LD_ADDR_OWVAR 21
59388: PUSH
59389: LD_INT 0
59391: ST_TO_ADDR
// InitHc_All ( ) ;
59392: CALL_OW 584
// InitVc ;
59396: CALL_OW 20
// if mastodonts then
59400: LD_VAR 0 6
59404: IFFALSE 59471
// for i = 1 to mastodonts do
59406: LD_ADDR_VAR 0 11
59410: PUSH
59411: DOUBLE
59412: LD_INT 1
59414: DEC
59415: ST_TO_ADDR
59416: LD_VAR 0 6
59420: PUSH
59421: FOR_TO
59422: IFFALSE 59469
// begin vc_chassis := 31 ;
59424: LD_ADDR_OWVAR 37
59428: PUSH
59429: LD_INT 31
59431: ST_TO_ADDR
// vc_control := control_rider ;
59432: LD_ADDR_OWVAR 38
59436: PUSH
59437: LD_INT 4
59439: ST_TO_ADDR
// animal := CreateVehicle ;
59440: LD_ADDR_VAR 0 12
59444: PUSH
59445: CALL_OW 45
59449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59450: LD_VAR 0 12
59454: PPUSH
59455: LD_VAR 0 8
59459: PPUSH
59460: LD_INT 0
59462: PPUSH
59463: CALL 61599 0 3
// end ;
59467: GO 59421
59469: POP
59470: POP
// if horses then
59471: LD_VAR 0 5
59475: IFFALSE 59542
// for i = 1 to horses do
59477: LD_ADDR_VAR 0 11
59481: PUSH
59482: DOUBLE
59483: LD_INT 1
59485: DEC
59486: ST_TO_ADDR
59487: LD_VAR 0 5
59491: PUSH
59492: FOR_TO
59493: IFFALSE 59540
// begin hc_class := 21 ;
59495: LD_ADDR_OWVAR 28
59499: PUSH
59500: LD_INT 21
59502: ST_TO_ADDR
// hc_gallery :=  ;
59503: LD_ADDR_OWVAR 33
59507: PUSH
59508: LD_STRING 
59510: ST_TO_ADDR
// animal := CreateHuman ;
59511: LD_ADDR_VAR 0 12
59515: PUSH
59516: CALL_OW 44
59520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59521: LD_VAR 0 12
59525: PPUSH
59526: LD_VAR 0 8
59530: PPUSH
59531: LD_INT 0
59533: PPUSH
59534: CALL 61599 0 3
// end ;
59538: GO 59492
59540: POP
59541: POP
// if birds then
59542: LD_VAR 0 1
59546: IFFALSE 59613
// for i = 1 to birds do
59548: LD_ADDR_VAR 0 11
59552: PUSH
59553: DOUBLE
59554: LD_INT 1
59556: DEC
59557: ST_TO_ADDR
59558: LD_VAR 0 1
59562: PUSH
59563: FOR_TO
59564: IFFALSE 59611
// begin hc_class = 18 ;
59566: LD_ADDR_OWVAR 28
59570: PUSH
59571: LD_INT 18
59573: ST_TO_ADDR
// hc_gallery =  ;
59574: LD_ADDR_OWVAR 33
59578: PUSH
59579: LD_STRING 
59581: ST_TO_ADDR
// animal := CreateHuman ;
59582: LD_ADDR_VAR 0 12
59586: PUSH
59587: CALL_OW 44
59591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59592: LD_VAR 0 12
59596: PPUSH
59597: LD_VAR 0 8
59601: PPUSH
59602: LD_INT 0
59604: PPUSH
59605: CALL 61599 0 3
// end ;
59609: GO 59563
59611: POP
59612: POP
// if tigers then
59613: LD_VAR 0 2
59617: IFFALSE 59701
// for i = 1 to tigers do
59619: LD_ADDR_VAR 0 11
59623: PUSH
59624: DOUBLE
59625: LD_INT 1
59627: DEC
59628: ST_TO_ADDR
59629: LD_VAR 0 2
59633: PUSH
59634: FOR_TO
59635: IFFALSE 59699
// begin hc_class = class_tiger ;
59637: LD_ADDR_OWVAR 28
59641: PUSH
59642: LD_INT 14
59644: ST_TO_ADDR
// hc_gallery =  ;
59645: LD_ADDR_OWVAR 33
59649: PUSH
59650: LD_STRING 
59652: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59653: LD_ADDR_OWVAR 35
59657: PUSH
59658: LD_INT 7
59660: NEG
59661: PPUSH
59662: LD_INT 7
59664: PPUSH
59665: CALL_OW 12
59669: ST_TO_ADDR
// animal := CreateHuman ;
59670: LD_ADDR_VAR 0 12
59674: PUSH
59675: CALL_OW 44
59679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59680: LD_VAR 0 12
59684: PPUSH
59685: LD_VAR 0 8
59689: PPUSH
59690: LD_INT 0
59692: PPUSH
59693: CALL 61599 0 3
// end ;
59697: GO 59634
59699: POP
59700: POP
// if apemans then
59701: LD_VAR 0 3
59705: IFFALSE 59828
// for i = 1 to apemans do
59707: LD_ADDR_VAR 0 11
59711: PUSH
59712: DOUBLE
59713: LD_INT 1
59715: DEC
59716: ST_TO_ADDR
59717: LD_VAR 0 3
59721: PUSH
59722: FOR_TO
59723: IFFALSE 59826
// begin hc_class = class_apeman ;
59725: LD_ADDR_OWVAR 28
59729: PUSH
59730: LD_INT 12
59732: ST_TO_ADDR
// hc_gallery =  ;
59733: LD_ADDR_OWVAR 33
59737: PUSH
59738: LD_STRING 
59740: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59741: LD_ADDR_OWVAR 35
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PPUSH
59750: LD_INT 2
59752: PPUSH
59753: CALL_OW 12
59757: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59758: LD_ADDR_OWVAR 31
59762: PUSH
59763: LD_INT 1
59765: PPUSH
59766: LD_INT 3
59768: PPUSH
59769: CALL_OW 12
59773: PUSH
59774: LD_INT 1
59776: PPUSH
59777: LD_INT 3
59779: PPUSH
59780: CALL_OW 12
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: ST_TO_ADDR
// animal := CreateHuman ;
59797: LD_ADDR_VAR 0 12
59801: PUSH
59802: CALL_OW 44
59806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59807: LD_VAR 0 12
59811: PPUSH
59812: LD_VAR 0 8
59816: PPUSH
59817: LD_INT 0
59819: PPUSH
59820: CALL 61599 0 3
// end ;
59824: GO 59722
59826: POP
59827: POP
// if enchidnas then
59828: LD_VAR 0 4
59832: IFFALSE 59899
// for i = 1 to enchidnas do
59834: LD_ADDR_VAR 0 11
59838: PUSH
59839: DOUBLE
59840: LD_INT 1
59842: DEC
59843: ST_TO_ADDR
59844: LD_VAR 0 4
59848: PUSH
59849: FOR_TO
59850: IFFALSE 59897
// begin hc_class = 13 ;
59852: LD_ADDR_OWVAR 28
59856: PUSH
59857: LD_INT 13
59859: ST_TO_ADDR
// hc_gallery =  ;
59860: LD_ADDR_OWVAR 33
59864: PUSH
59865: LD_STRING 
59867: ST_TO_ADDR
// animal := CreateHuman ;
59868: LD_ADDR_VAR 0 12
59872: PUSH
59873: CALL_OW 44
59877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59878: LD_VAR 0 12
59882: PPUSH
59883: LD_VAR 0 8
59887: PPUSH
59888: LD_INT 0
59890: PPUSH
59891: CALL 61599 0 3
// end ;
59895: GO 59849
59897: POP
59898: POP
// if fishes then
59899: LD_VAR 0 7
59903: IFFALSE 59970
// for i = 1 to fishes do
59905: LD_ADDR_VAR 0 11
59909: PUSH
59910: DOUBLE
59911: LD_INT 1
59913: DEC
59914: ST_TO_ADDR
59915: LD_VAR 0 7
59919: PUSH
59920: FOR_TO
59921: IFFALSE 59968
// begin hc_class = 20 ;
59923: LD_ADDR_OWVAR 28
59927: PUSH
59928: LD_INT 20
59930: ST_TO_ADDR
// hc_gallery =  ;
59931: LD_ADDR_OWVAR 33
59935: PUSH
59936: LD_STRING 
59938: ST_TO_ADDR
// animal := CreateHuman ;
59939: LD_ADDR_VAR 0 12
59943: PUSH
59944: CALL_OW 44
59948: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59949: LD_VAR 0 12
59953: PPUSH
59954: LD_VAR 0 9
59958: PPUSH
59959: LD_INT 0
59961: PPUSH
59962: CALL 61599 0 3
// end ;
59966: GO 59920
59968: POP
59969: POP
// end ;
59970: LD_VAR 0 10
59974: RET
// export function WantHeal ( sci , unit ) ; begin
59975: LD_INT 0
59977: PPUSH
// if GetTaskList ( sci ) > 0 then
59978: LD_VAR 0 1
59982: PPUSH
59983: CALL_OW 437
59987: PUSH
59988: LD_INT 0
59990: GREATER
59991: IFFALSE 60061
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59993: LD_VAR 0 1
59997: PPUSH
59998: CALL_OW 437
60002: PUSH
60003: LD_INT 1
60005: ARRAY
60006: PUSH
60007: LD_INT 1
60009: ARRAY
60010: PUSH
60011: LD_STRING l
60013: EQUAL
60014: PUSH
60015: LD_VAR 0 1
60019: PPUSH
60020: CALL_OW 437
60024: PUSH
60025: LD_INT 1
60027: ARRAY
60028: PUSH
60029: LD_INT 4
60031: ARRAY
60032: PUSH
60033: LD_VAR 0 2
60037: EQUAL
60038: AND
60039: IFFALSE 60051
// result := true else
60041: LD_ADDR_VAR 0 3
60045: PUSH
60046: LD_INT 1
60048: ST_TO_ADDR
60049: GO 60059
// result := false ;
60051: LD_ADDR_VAR 0 3
60055: PUSH
60056: LD_INT 0
60058: ST_TO_ADDR
// end else
60059: GO 60069
// result := false ;
60061: LD_ADDR_VAR 0 3
60065: PUSH
60066: LD_INT 0
60068: ST_TO_ADDR
// end ;
60069: LD_VAR 0 3
60073: RET
// export function HealTarget ( sci ) ; begin
60074: LD_INT 0
60076: PPUSH
// if not sci then
60077: LD_VAR 0 1
60081: NOT
60082: IFFALSE 60086
// exit ;
60084: GO 60151
// result := 0 ;
60086: LD_ADDR_VAR 0 2
60090: PUSH
60091: LD_INT 0
60093: ST_TO_ADDR
// if GetTaskList ( sci ) then
60094: LD_VAR 0 1
60098: PPUSH
60099: CALL_OW 437
60103: IFFALSE 60151
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 437
60114: PUSH
60115: LD_INT 1
60117: ARRAY
60118: PUSH
60119: LD_INT 1
60121: ARRAY
60122: PUSH
60123: LD_STRING l
60125: EQUAL
60126: IFFALSE 60151
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60128: LD_ADDR_VAR 0 2
60132: PUSH
60133: LD_VAR 0 1
60137: PPUSH
60138: CALL_OW 437
60142: PUSH
60143: LD_INT 1
60145: ARRAY
60146: PUSH
60147: LD_INT 4
60149: ARRAY
60150: ST_TO_ADDR
// end ;
60151: LD_VAR 0 2
60155: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60156: LD_INT 0
60158: PPUSH
60159: PPUSH
60160: PPUSH
60161: PPUSH
// if not base_units then
60162: LD_VAR 0 1
60166: NOT
60167: IFFALSE 60171
// exit ;
60169: GO 60258
// result := false ;
60171: LD_ADDR_VAR 0 2
60175: PUSH
60176: LD_INT 0
60178: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60179: LD_ADDR_VAR 0 5
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_INT 21
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PPUSH
60199: CALL_OW 72
60203: ST_TO_ADDR
// if not tmp then
60204: LD_VAR 0 5
60208: NOT
60209: IFFALSE 60213
// exit ;
60211: GO 60258
// for i in tmp do
60213: LD_ADDR_VAR 0 3
60217: PUSH
60218: LD_VAR 0 5
60222: PUSH
60223: FOR_IN
60224: IFFALSE 60256
// begin result := EnemyInRange ( i , 22 ) ;
60226: LD_ADDR_VAR 0 2
60230: PUSH
60231: LD_VAR 0 3
60235: PPUSH
60236: LD_INT 22
60238: PPUSH
60239: CALL 57845 0 2
60243: ST_TO_ADDR
// if result then
60244: LD_VAR 0 2
60248: IFFALSE 60254
// exit ;
60250: POP
60251: POP
60252: GO 60258
// end ;
60254: GO 60223
60256: POP
60257: POP
// end ;
60258: LD_VAR 0 2
60262: RET
// export function FilterByTag ( units , tag ) ; begin
60263: LD_INT 0
60265: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60266: LD_ADDR_VAR 0 3
60270: PUSH
60271: LD_VAR 0 1
60275: PPUSH
60276: LD_INT 120
60278: PUSH
60279: LD_VAR 0 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PPUSH
60288: CALL_OW 72
60292: ST_TO_ADDR
// end ;
60293: LD_VAR 0 3
60297: RET
// export function IsDriver ( un ) ; begin
60298: LD_INT 0
60300: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60301: LD_ADDR_VAR 0 2
60305: PUSH
60306: LD_VAR 0 1
60310: PUSH
60311: LD_INT 55
60313: PUSH
60314: EMPTY
60315: LIST
60316: PPUSH
60317: CALL_OW 69
60321: IN
60322: ST_TO_ADDR
// end ;
60323: LD_VAR 0 2
60327: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60328: LD_INT 0
60330: PPUSH
60331: PPUSH
// list := [ ] ;
60332: LD_ADDR_VAR 0 5
60336: PUSH
60337: EMPTY
60338: ST_TO_ADDR
// case d of 0 :
60339: LD_VAR 0 3
60343: PUSH
60344: LD_INT 0
60346: DOUBLE
60347: EQUAL
60348: IFTRUE 60352
60350: GO 60485
60352: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60353: LD_ADDR_VAR 0 5
60357: PUSH
60358: LD_VAR 0 1
60362: PUSH
60363: LD_INT 4
60365: MINUS
60366: PUSH
60367: LD_VAR 0 2
60371: PUSH
60372: LD_INT 4
60374: MINUS
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: PUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 3
60391: MINUS
60392: PUSH
60393: LD_VAR 0 2
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: PUSH
60406: LD_VAR 0 1
60410: PUSH
60411: LD_INT 4
60413: PLUS
60414: PUSH
60415: LD_VAR 0 2
60419: PUSH
60420: LD_INT 4
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: PUSH
60428: LD_VAR 0 1
60432: PUSH
60433: LD_INT 3
60435: PLUS
60436: PUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_INT 3
60444: PLUS
60445: PUSH
60446: LD_INT 5
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_VAR 0 2
60463: PUSH
60464: LD_INT 4
60466: PLUS
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// end ; 1 :
60483: GO 61183
60485: LD_INT 1
60487: DOUBLE
60488: EQUAL
60489: IFTRUE 60493
60491: GO 60626
60493: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60494: LD_ADDR_VAR 0 5
60498: PUSH
60499: LD_VAR 0 1
60503: PUSH
60504: LD_VAR 0 2
60508: PUSH
60509: LD_INT 4
60511: MINUS
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: LIST
60520: PUSH
60521: LD_VAR 0 1
60525: PUSH
60526: LD_INT 3
60528: MINUS
60529: PUSH
60530: LD_VAR 0 2
60534: PUSH
60535: LD_INT 3
60537: MINUS
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: PUSH
60547: LD_VAR 0 1
60551: PUSH
60552: LD_INT 4
60554: MINUS
60555: PUSH
60556: LD_VAR 0 2
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: PUSH
60569: LD_VAR 0 1
60573: PUSH
60574: LD_VAR 0 2
60578: PUSH
60579: LD_INT 3
60581: PLUS
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: PUSH
60591: LD_VAR 0 1
60595: PUSH
60596: LD_INT 4
60598: PLUS
60599: PUSH
60600: LD_VAR 0 2
60604: PUSH
60605: LD_INT 4
60607: PLUS
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: ST_TO_ADDR
// end ; 2 :
60624: GO 61183
60626: LD_INT 2
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60634
60632: GO 60763
60634: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60635: LD_ADDR_VAR 0 5
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_VAR 0 2
60649: PUSH
60650: LD_INT 3
60652: MINUS
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: PUSH
60662: LD_VAR 0 1
60666: PUSH
60667: LD_INT 4
60669: PLUS
60670: PUSH
60671: LD_VAR 0 2
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_VAR 0 2
60693: PUSH
60694: LD_INT 4
60696: PLUS
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: PUSH
60706: LD_VAR 0 1
60710: PUSH
60711: LD_INT 3
60713: MINUS
60714: PUSH
60715: LD_VAR 0 2
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 1
60732: PUSH
60733: LD_INT 4
60735: MINUS
60736: PUSH
60737: LD_VAR 0 2
60741: PUSH
60742: LD_INT 4
60744: MINUS
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// end ; 3 :
60761: GO 61183
60763: LD_INT 3
60765: DOUBLE
60766: EQUAL
60767: IFTRUE 60771
60769: GO 60904
60771: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60772: LD_ADDR_VAR 0 5
60776: PUSH
60777: LD_VAR 0 1
60781: PUSH
60782: LD_INT 3
60784: PLUS
60785: PUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 4
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: PUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_INT 4
60806: PLUS
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: LD_INT 4
60815: PLUS
60816: PUSH
60817: LD_INT 5
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: LD_VAR 0 1
60829: PUSH
60830: LD_INT 4
60832: MINUS
60833: PUSH
60834: LD_VAR 0 2
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: LD_VAR 0 1
60851: PUSH
60852: LD_VAR 0 2
60856: PUSH
60857: LD_INT 4
60859: MINUS
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: LIST
60868: PUSH
60869: LD_VAR 0 1
60873: PUSH
60874: LD_INT 3
60876: MINUS
60877: PUSH
60878: LD_VAR 0 2
60882: PUSH
60883: LD_INT 3
60885: MINUS
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: ST_TO_ADDR
// end ; 4 :
60902: GO 61183
60904: LD_INT 4
60906: DOUBLE
60907: EQUAL
60908: IFTRUE 60912
60910: GO 61045
60912: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60913: LD_ADDR_VAR 0 5
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_INT 4
60930: PLUS
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: PUSH
60940: LD_VAR 0 1
60944: PUSH
60945: LD_INT 3
60947: PLUS
60948: PUSH
60949: LD_VAR 0 2
60953: PUSH
60954: LD_INT 3
60956: PLUS
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 4
60973: PLUS
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: PUSH
60988: LD_VAR 0 1
60992: PUSH
60993: LD_VAR 0 2
60997: PUSH
60998: LD_INT 3
61000: MINUS
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: PUSH
61010: LD_VAR 0 1
61014: PUSH
61015: LD_INT 4
61017: MINUS
61018: PUSH
61019: LD_VAR 0 2
61023: PUSH
61024: LD_INT 4
61026: MINUS
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// end ; 5 :
61043: GO 61183
61045: LD_INT 5
61047: DOUBLE
61048: EQUAL
61049: IFTRUE 61053
61051: GO 61182
61053: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61054: LD_ADDR_VAR 0 5
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: LD_INT 4
61066: MINUS
61067: PUSH
61068: LD_VAR 0 2
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_VAR 0 2
61090: PUSH
61091: LD_INT 4
61093: MINUS
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_INT 4
61110: PLUS
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 4
61119: PLUS
61120: PUSH
61121: LD_INT 5
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: LD_VAR 0 1
61133: PUSH
61134: LD_INT 3
61136: PLUS
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_VAR 0 1
61155: PUSH
61156: LD_VAR 0 2
61160: PUSH
61161: LD_INT 3
61163: PLUS
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// end ; end ;
61180: GO 61183
61182: POP
// result := list ;
61183: LD_ADDR_VAR 0 4
61187: PUSH
61188: LD_VAR 0 5
61192: ST_TO_ADDR
// end ;
61193: LD_VAR 0 4
61197: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61198: LD_INT 0
61200: PPUSH
61201: PPUSH
61202: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61203: LD_VAR 0 1
61207: NOT
61208: PUSH
61209: LD_VAR 0 2
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: IN
61232: NOT
61233: OR
61234: IFFALSE 61238
// exit ;
61236: GO 61321
// tmp := [ ] ;
61238: LD_ADDR_VAR 0 5
61242: PUSH
61243: EMPTY
61244: ST_TO_ADDR
// for i in units do
61245: LD_ADDR_VAR 0 4
61249: PUSH
61250: LD_VAR 0 1
61254: PUSH
61255: FOR_IN
61256: IFFALSE 61290
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61258: LD_ADDR_VAR 0 5
61262: PUSH
61263: LD_VAR 0 5
61267: PPUSH
61268: LD_VAR 0 4
61272: PPUSH
61273: LD_VAR 0 2
61277: PPUSH
61278: CALL_OW 259
61282: PPUSH
61283: CALL 62682 0 2
61287: ST_TO_ADDR
61288: GO 61255
61290: POP
61291: POP
// if not tmp then
61292: LD_VAR 0 5
61296: NOT
61297: IFFALSE 61301
// exit ;
61299: GO 61321
// result := SortListByListDesc ( units , tmp ) ;
61301: LD_ADDR_VAR 0 3
61305: PUSH
61306: LD_VAR 0 1
61310: PPUSH
61311: LD_VAR 0 5
61315: PPUSH
61316: CALL_OW 77
61320: ST_TO_ADDR
// end ;
61321: LD_VAR 0 3
61325: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61326: LD_INT 0
61328: PPUSH
61329: PPUSH
61330: PPUSH
// result := false ;
61331: LD_ADDR_VAR 0 3
61335: PUSH
61336: LD_INT 0
61338: ST_TO_ADDR
// if not building then
61339: LD_VAR 0 2
61343: NOT
61344: IFFALSE 61348
// exit ;
61346: GO 61486
// x := GetX ( building ) ;
61348: LD_ADDR_VAR 0 4
61352: PUSH
61353: LD_VAR 0 2
61357: PPUSH
61358: CALL_OW 250
61362: ST_TO_ADDR
// y := GetY ( building ) ;
61363: LD_ADDR_VAR 0 5
61367: PUSH
61368: LD_VAR 0 2
61372: PPUSH
61373: CALL_OW 251
61377: ST_TO_ADDR
// if not x or not y then
61378: LD_VAR 0 4
61382: NOT
61383: PUSH
61384: LD_VAR 0 5
61388: NOT
61389: OR
61390: IFFALSE 61394
// exit ;
61392: GO 61486
// if GetTaskList ( unit ) then
61394: LD_VAR 0 1
61398: PPUSH
61399: CALL_OW 437
61403: IFFALSE 61486
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61405: LD_STRING e
61407: PUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: CALL_OW 437
61417: PUSH
61418: LD_INT 1
61420: ARRAY
61421: PUSH
61422: LD_INT 1
61424: ARRAY
61425: EQUAL
61426: PUSH
61427: LD_VAR 0 4
61431: PUSH
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 437
61441: PUSH
61442: LD_INT 1
61444: ARRAY
61445: PUSH
61446: LD_INT 2
61448: ARRAY
61449: EQUAL
61450: AND
61451: PUSH
61452: LD_VAR 0 5
61456: PUSH
61457: LD_VAR 0 1
61461: PPUSH
61462: CALL_OW 437
61466: PUSH
61467: LD_INT 1
61469: ARRAY
61470: PUSH
61471: LD_INT 3
61473: ARRAY
61474: EQUAL
61475: AND
61476: IFFALSE 61486
// result := true end ;
61478: LD_ADDR_VAR 0 3
61482: PUSH
61483: LD_INT 1
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 3
61490: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61491: LD_INT 0
61493: PPUSH
// result := false ;
61494: LD_ADDR_VAR 0 4
61498: PUSH
61499: LD_INT 0
61501: ST_TO_ADDR
// if GetTaskList ( unit ) then
61502: LD_VAR 0 1
61506: PPUSH
61507: CALL_OW 437
61511: IFFALSE 61594
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61513: LD_STRING M
61515: PUSH
61516: LD_VAR 0 1
61520: PPUSH
61521: CALL_OW 437
61525: PUSH
61526: LD_INT 1
61528: ARRAY
61529: PUSH
61530: LD_INT 1
61532: ARRAY
61533: EQUAL
61534: PUSH
61535: LD_VAR 0 2
61539: PUSH
61540: LD_VAR 0 1
61544: PPUSH
61545: CALL_OW 437
61549: PUSH
61550: LD_INT 1
61552: ARRAY
61553: PUSH
61554: LD_INT 2
61556: ARRAY
61557: EQUAL
61558: AND
61559: PUSH
61560: LD_VAR 0 3
61564: PUSH
61565: LD_VAR 0 1
61569: PPUSH
61570: CALL_OW 437
61574: PUSH
61575: LD_INT 1
61577: ARRAY
61578: PUSH
61579: LD_INT 3
61581: ARRAY
61582: EQUAL
61583: AND
61584: IFFALSE 61594
// result := true ;
61586: LD_ADDR_VAR 0 4
61590: PUSH
61591: LD_INT 1
61593: ST_TO_ADDR
// end ; end ;
61594: LD_VAR 0 4
61598: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61599: LD_INT 0
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
// if not unit or not area then
61605: LD_VAR 0 1
61609: NOT
61610: PUSH
61611: LD_VAR 0 2
61615: NOT
61616: OR
61617: IFFALSE 61621
// exit ;
61619: GO 61785
// tmp := AreaToList ( area , i ) ;
61621: LD_ADDR_VAR 0 6
61625: PUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: LD_VAR 0 5
61635: PPUSH
61636: CALL_OW 517
61640: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61641: LD_ADDR_VAR 0 5
61645: PUSH
61646: DOUBLE
61647: LD_INT 1
61649: DEC
61650: ST_TO_ADDR
61651: LD_VAR 0 6
61655: PUSH
61656: LD_INT 1
61658: ARRAY
61659: PUSH
61660: FOR_TO
61661: IFFALSE 61783
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61663: LD_ADDR_VAR 0 7
61667: PUSH
61668: LD_VAR 0 6
61672: PUSH
61673: LD_INT 1
61675: ARRAY
61676: PUSH
61677: LD_VAR 0 5
61681: ARRAY
61682: PUSH
61683: LD_VAR 0 6
61687: PUSH
61688: LD_INT 2
61690: ARRAY
61691: PUSH
61692: LD_VAR 0 5
61696: ARRAY
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61702: LD_VAR 0 7
61706: PUSH
61707: LD_INT 1
61709: ARRAY
61710: PPUSH
61711: LD_VAR 0 7
61715: PUSH
61716: LD_INT 2
61718: ARRAY
61719: PPUSH
61720: CALL_OW 428
61724: PUSH
61725: LD_INT 0
61727: EQUAL
61728: IFFALSE 61781
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61730: LD_VAR 0 1
61734: PPUSH
61735: LD_VAR 0 7
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PPUSH
61744: LD_VAR 0 7
61748: PUSH
61749: LD_INT 2
61751: ARRAY
61752: PPUSH
61753: LD_VAR 0 3
61757: PPUSH
61758: CALL_OW 48
// result := IsPlaced ( unit ) ;
61762: LD_ADDR_VAR 0 4
61766: PUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 305
61776: ST_TO_ADDR
// exit ;
61777: POP
61778: POP
61779: GO 61785
// end ; end ;
61781: GO 61660
61783: POP
61784: POP
// end ;
61785: LD_VAR 0 4
61789: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61790: LD_INT 0
61792: PPUSH
61793: PPUSH
61794: PPUSH
// if not side or side > 8 then
61795: LD_VAR 0 1
61799: NOT
61800: PUSH
61801: LD_VAR 0 1
61805: PUSH
61806: LD_INT 8
61808: GREATER
61809: OR
61810: IFFALSE 61814
// exit ;
61812: GO 62001
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61814: LD_ADDR_VAR 0 4
61818: PUSH
61819: LD_INT 22
61821: PUSH
61822: LD_VAR 0 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 21
61833: PUSH
61834: LD_INT 3
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PPUSH
61845: CALL_OW 69
61849: ST_TO_ADDR
// if not tmp then
61850: LD_VAR 0 4
61854: NOT
61855: IFFALSE 61859
// exit ;
61857: GO 62001
// enable_addtolog := true ;
61859: LD_ADDR_OWVAR 81
61863: PUSH
61864: LD_INT 1
61866: ST_TO_ADDR
// AddToLog ( [ ) ;
61867: LD_STRING [
61869: PPUSH
61870: CALL_OW 561
// for i in tmp do
61874: LD_ADDR_VAR 0 3
61878: PUSH
61879: LD_VAR 0 4
61883: PUSH
61884: FOR_IN
61885: IFFALSE 61992
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61887: LD_STRING [
61889: PUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: CALL_OW 266
61899: STR
61900: PUSH
61901: LD_STRING , 
61903: STR
61904: PUSH
61905: LD_VAR 0 3
61909: PPUSH
61910: CALL_OW 250
61914: STR
61915: PUSH
61916: LD_STRING , 
61918: STR
61919: PUSH
61920: LD_VAR 0 3
61924: PPUSH
61925: CALL_OW 251
61929: STR
61930: PUSH
61931: LD_STRING , 
61933: STR
61934: PUSH
61935: LD_VAR 0 3
61939: PPUSH
61940: CALL_OW 254
61944: STR
61945: PUSH
61946: LD_STRING , 
61948: STR
61949: PUSH
61950: LD_VAR 0 3
61954: PPUSH
61955: LD_INT 1
61957: PPUSH
61958: CALL_OW 268
61962: STR
61963: PUSH
61964: LD_STRING , 
61966: STR
61967: PUSH
61968: LD_VAR 0 3
61972: PPUSH
61973: LD_INT 2
61975: PPUSH
61976: CALL_OW 268
61980: STR
61981: PUSH
61982: LD_STRING ],
61984: STR
61985: PPUSH
61986: CALL_OW 561
// end ;
61990: GO 61884
61992: POP
61993: POP
// AddToLog ( ]; ) ;
61994: LD_STRING ];
61996: PPUSH
61997: CALL_OW 561
// end ;
62001: LD_VAR 0 2
62005: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62006: LD_INT 0
62008: PPUSH
62009: PPUSH
62010: PPUSH
62011: PPUSH
62012: PPUSH
// if not area or not rate or not max then
62013: LD_VAR 0 1
62017: NOT
62018: PUSH
62019: LD_VAR 0 2
62023: NOT
62024: OR
62025: PUSH
62026: LD_VAR 0 4
62030: NOT
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62225
// while 1 do
62036: LD_INT 1
62038: IFFALSE 62225
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62040: LD_ADDR_VAR 0 9
62044: PUSH
62045: LD_VAR 0 1
62049: PPUSH
62050: LD_INT 1
62052: PPUSH
62053: CALL_OW 287
62057: PUSH
62058: LD_INT 10
62060: MUL
62061: ST_TO_ADDR
// r := rate / 10 ;
62062: LD_ADDR_VAR 0 7
62066: PUSH
62067: LD_VAR 0 2
62071: PUSH
62072: LD_INT 10
62074: DIVREAL
62075: ST_TO_ADDR
// time := 1 1$00 ;
62076: LD_ADDR_VAR 0 8
62080: PUSH
62081: LD_INT 2100
62083: ST_TO_ADDR
// if amount < min then
62084: LD_VAR 0 9
62088: PUSH
62089: LD_VAR 0 3
62093: LESS
62094: IFFALSE 62112
// r := r * 2 else
62096: LD_ADDR_VAR 0 7
62100: PUSH
62101: LD_VAR 0 7
62105: PUSH
62106: LD_INT 2
62108: MUL
62109: ST_TO_ADDR
62110: GO 62138
// if amount > max then
62112: LD_VAR 0 9
62116: PUSH
62117: LD_VAR 0 4
62121: GREATER
62122: IFFALSE 62138
// r := r / 2 ;
62124: LD_ADDR_VAR 0 7
62128: PUSH
62129: LD_VAR 0 7
62133: PUSH
62134: LD_INT 2
62136: DIVREAL
62137: ST_TO_ADDR
// time := time / r ;
62138: LD_ADDR_VAR 0 8
62142: PUSH
62143: LD_VAR 0 8
62147: PUSH
62148: LD_VAR 0 7
62152: DIVREAL
62153: ST_TO_ADDR
// if time < 0 then
62154: LD_VAR 0 8
62158: PUSH
62159: LD_INT 0
62161: LESS
62162: IFFALSE 62179
// time := time * - 1 ;
62164: LD_ADDR_VAR 0 8
62168: PUSH
62169: LD_VAR 0 8
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: MUL
62178: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62179: LD_VAR 0 8
62183: PUSH
62184: LD_INT 35
62186: PPUSH
62187: LD_INT 875
62189: PPUSH
62190: CALL_OW 12
62194: PLUS
62195: PPUSH
62196: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62200: LD_INT 1
62202: PPUSH
62203: LD_INT 5
62205: PPUSH
62206: CALL_OW 12
62210: PPUSH
62211: LD_VAR 0 1
62215: PPUSH
62216: LD_INT 1
62218: PPUSH
62219: CALL_OW 55
// end ;
62223: GO 62036
// end ;
62225: LD_VAR 0 5
62229: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62230: LD_INT 0
62232: PPUSH
62233: PPUSH
62234: PPUSH
62235: PPUSH
62236: PPUSH
62237: PPUSH
62238: PPUSH
62239: PPUSH
// if not turrets or not factories then
62240: LD_VAR 0 1
62244: NOT
62245: PUSH
62246: LD_VAR 0 2
62250: NOT
62251: OR
62252: IFFALSE 62256
// exit ;
62254: GO 62563
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62256: LD_ADDR_VAR 0 10
62260: PUSH
62261: LD_INT 5
62263: PUSH
62264: LD_INT 6
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: LD_INT 4
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 24
62298: PUSH
62299: LD_INT 25
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 23
62308: PUSH
62309: LD_INT 27
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 42
62322: PUSH
62323: LD_INT 43
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 44
62332: PUSH
62333: LD_INT 46
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 45
62342: PUSH
62343: LD_INT 47
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: ST_TO_ADDR
// result := [ ] ;
62360: LD_ADDR_VAR 0 3
62364: PUSH
62365: EMPTY
62366: ST_TO_ADDR
// for i in turrets do
62367: LD_ADDR_VAR 0 4
62371: PUSH
62372: LD_VAR 0 1
62376: PUSH
62377: FOR_IN
62378: IFFALSE 62561
// begin nat := GetNation ( i ) ;
62380: LD_ADDR_VAR 0 7
62384: PUSH
62385: LD_VAR 0 4
62389: PPUSH
62390: CALL_OW 248
62394: ST_TO_ADDR
// weapon := 0 ;
62395: LD_ADDR_VAR 0 8
62399: PUSH
62400: LD_INT 0
62402: ST_TO_ADDR
// if not nat then
62403: LD_VAR 0 7
62407: NOT
62408: IFFALSE 62412
// continue ;
62410: GO 62377
// for j in list [ nat ] do
62412: LD_ADDR_VAR 0 5
62416: PUSH
62417: LD_VAR 0 10
62421: PUSH
62422: LD_VAR 0 7
62426: ARRAY
62427: PUSH
62428: FOR_IN
62429: IFFALSE 62470
// if GetBWeapon ( i ) = j [ 1 ] then
62431: LD_VAR 0 4
62435: PPUSH
62436: CALL_OW 269
62440: PUSH
62441: LD_VAR 0 5
62445: PUSH
62446: LD_INT 1
62448: ARRAY
62449: EQUAL
62450: IFFALSE 62468
// begin weapon := j [ 2 ] ;
62452: LD_ADDR_VAR 0 8
62456: PUSH
62457: LD_VAR 0 5
62461: PUSH
62462: LD_INT 2
62464: ARRAY
62465: ST_TO_ADDR
// break ;
62466: GO 62470
// end ;
62468: GO 62428
62470: POP
62471: POP
// if not weapon then
62472: LD_VAR 0 8
62476: NOT
62477: IFFALSE 62481
// continue ;
62479: GO 62377
// for k in factories do
62481: LD_ADDR_VAR 0 6
62485: PUSH
62486: LD_VAR 0 2
62490: PUSH
62491: FOR_IN
62492: IFFALSE 62557
// begin weapons := AvailableWeaponList ( k ) ;
62494: LD_ADDR_VAR 0 9
62498: PUSH
62499: LD_VAR 0 6
62503: PPUSH
62504: CALL_OW 478
62508: ST_TO_ADDR
// if not weapons then
62509: LD_VAR 0 9
62513: NOT
62514: IFFALSE 62518
// continue ;
62516: GO 62491
// if weapon in weapons then
62518: LD_VAR 0 8
62522: PUSH
62523: LD_VAR 0 9
62527: IN
62528: IFFALSE 62555
// begin result := [ i , weapon ] ;
62530: LD_ADDR_VAR 0 3
62534: PUSH
62535: LD_VAR 0 4
62539: PUSH
62540: LD_VAR 0 8
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: ST_TO_ADDR
// exit ;
62549: POP
62550: POP
62551: POP
62552: POP
62553: GO 62563
// end ; end ;
62555: GO 62491
62557: POP
62558: POP
// end ;
62559: GO 62377
62561: POP
62562: POP
// end ;
62563: LD_VAR 0 3
62567: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62568: LD_INT 0
62570: PPUSH
// if not side or side > 8 then
62571: LD_VAR 0 3
62575: NOT
62576: PUSH
62577: LD_VAR 0 3
62581: PUSH
62582: LD_INT 8
62584: GREATER
62585: OR
62586: IFFALSE 62590
// exit ;
62588: GO 62649
// if not range then
62590: LD_VAR 0 4
62594: NOT
62595: IFFALSE 62606
// range := - 12 ;
62597: LD_ADDR_VAR 0 4
62601: PUSH
62602: LD_INT 12
62604: NEG
62605: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62606: LD_VAR 0 1
62610: PPUSH
62611: LD_VAR 0 2
62615: PPUSH
62616: LD_VAR 0 3
62620: PPUSH
62621: LD_VAR 0 4
62625: PPUSH
62626: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_VAR 0 2
62639: PPUSH
62640: LD_VAR 0 3
62644: PPUSH
62645: CALL_OW 331
// end ;
62649: LD_VAR 0 5
62653: RET
// export function Video ( mode ) ; begin
62654: LD_INT 0
62656: PPUSH
// ingame_video = mode ;
62657: LD_ADDR_OWVAR 52
62661: PUSH
62662: LD_VAR 0 1
62666: ST_TO_ADDR
// interface_hidden = mode ;
62667: LD_ADDR_OWVAR 54
62671: PUSH
62672: LD_VAR 0 1
62676: ST_TO_ADDR
// end ;
62677: LD_VAR 0 2
62681: RET
// export function Join ( array , element ) ; begin
62682: LD_INT 0
62684: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62685: LD_ADDR_VAR 0 3
62689: PUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: LD_VAR 0 1
62699: PUSH
62700: LD_INT 1
62702: PLUS
62703: PPUSH
62704: LD_VAR 0 2
62708: PPUSH
62709: CALL_OW 1
62713: ST_TO_ADDR
// end ;
62714: LD_VAR 0 3
62718: RET
// export function JoinUnion ( array , element ) ; begin
62719: LD_INT 0
62721: PPUSH
// result := array union element ;
62722: LD_ADDR_VAR 0 3
62726: PUSH
62727: LD_VAR 0 1
62731: PUSH
62732: LD_VAR 0 2
62736: UNION
62737: ST_TO_ADDR
// end ;
62738: LD_VAR 0 3
62742: RET
// export function GetBehemoths ( side ) ; begin
62743: LD_INT 0
62745: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62746: LD_ADDR_VAR 0 2
62750: PUSH
62751: LD_INT 22
62753: PUSH
62754: LD_VAR 0 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 31
62765: PUSH
62766: LD_INT 25
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PPUSH
62777: CALL_OW 69
62781: ST_TO_ADDR
// end ;
62782: LD_VAR 0 2
62786: RET
// export function Shuffle ( array ) ; var i , index ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
62791: PPUSH
// result := [ ] ;
62792: LD_ADDR_VAR 0 2
62796: PUSH
62797: EMPTY
62798: ST_TO_ADDR
// if not array then
62799: LD_VAR 0 1
62803: NOT
62804: IFFALSE 62808
// exit ;
62806: GO 62907
// Randomize ;
62808: CALL_OW 10
// for i = array downto 1 do
62812: LD_ADDR_VAR 0 3
62816: PUSH
62817: DOUBLE
62818: LD_VAR 0 1
62822: INC
62823: ST_TO_ADDR
62824: LD_INT 1
62826: PUSH
62827: FOR_DOWNTO
62828: IFFALSE 62905
// begin index := rand ( 1 , array ) ;
62830: LD_ADDR_VAR 0 4
62834: PUSH
62835: LD_INT 1
62837: PPUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: CALL_OW 12
62847: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62848: LD_ADDR_VAR 0 2
62852: PUSH
62853: LD_VAR 0 2
62857: PPUSH
62858: LD_VAR 0 2
62862: PUSH
62863: LD_INT 1
62865: PLUS
62866: PPUSH
62867: LD_VAR 0 1
62871: PUSH
62872: LD_VAR 0 4
62876: ARRAY
62877: PPUSH
62878: CALL_OW 2
62882: ST_TO_ADDR
// array := Delete ( array , index ) ;
62883: LD_ADDR_VAR 0 1
62887: PUSH
62888: LD_VAR 0 1
62892: PPUSH
62893: LD_VAR 0 4
62897: PPUSH
62898: CALL_OW 3
62902: ST_TO_ADDR
// end ;
62903: GO 62827
62905: POP
62906: POP
// end ;
62907: LD_VAR 0 2
62911: RET
// export function GetBaseMaterials ( base ) ; begin
62912: LD_INT 0
62914: PPUSH
// result := [ 0 , 0 , 0 ] ;
62915: LD_ADDR_VAR 0 2
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: ST_TO_ADDR
// if not base then
62934: LD_VAR 0 1
62938: NOT
62939: IFFALSE 62943
// exit ;
62941: GO 62992
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62943: LD_ADDR_VAR 0 2
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: LD_INT 1
62955: PPUSH
62956: CALL_OW 275
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_INT 2
62968: PPUSH
62969: CALL_OW 275
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: LD_INT 3
62981: PPUSH
62982: CALL_OW 275
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: ST_TO_ADDR
// end ;
62992: LD_VAR 0 2
62996: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62997: LD_INT 0
62999: PPUSH
63000: PPUSH
// result := array ;
63001: LD_ADDR_VAR 0 3
63005: PUSH
63006: LD_VAR 0 1
63010: ST_TO_ADDR
// if size >= result then
63011: LD_VAR 0 2
63015: PUSH
63016: LD_VAR 0 3
63020: GREATEREQUAL
63021: IFFALSE 63025
// exit ;
63023: GO 63075
// if size then
63025: LD_VAR 0 2
63029: IFFALSE 63075
// for i := array downto size do
63031: LD_ADDR_VAR 0 4
63035: PUSH
63036: DOUBLE
63037: LD_VAR 0 1
63041: INC
63042: ST_TO_ADDR
63043: LD_VAR 0 2
63047: PUSH
63048: FOR_DOWNTO
63049: IFFALSE 63073
// result := Delete ( result , result ) ;
63051: LD_ADDR_VAR 0 3
63055: PUSH
63056: LD_VAR 0 3
63060: PPUSH
63061: LD_VAR 0 3
63065: PPUSH
63066: CALL_OW 3
63070: ST_TO_ADDR
63071: GO 63048
63073: POP
63074: POP
// end ;
63075: LD_VAR 0 3
63079: RET
// export function ComExit ( unit ) ; var tmp ; begin
63080: LD_INT 0
63082: PPUSH
63083: PPUSH
// if not IsInUnit ( unit ) then
63084: LD_VAR 0 1
63088: PPUSH
63089: CALL_OW 310
63093: NOT
63094: IFFALSE 63098
// exit ;
63096: GO 63158
// tmp := IsInUnit ( unit ) ;
63098: LD_ADDR_VAR 0 3
63102: PUSH
63103: LD_VAR 0 1
63107: PPUSH
63108: CALL_OW 310
63112: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63113: LD_VAR 0 3
63117: PPUSH
63118: CALL_OW 247
63122: PUSH
63123: LD_INT 2
63125: EQUAL
63126: IFFALSE 63139
// ComExitVehicle ( unit ) else
63128: LD_VAR 0 1
63132: PPUSH
63133: CALL_OW 121
63137: GO 63148
// ComExitBuilding ( unit ) ;
63139: LD_VAR 0 1
63143: PPUSH
63144: CALL_OW 122
// result := tmp ;
63148: LD_ADDR_VAR 0 2
63152: PUSH
63153: LD_VAR 0 3
63157: ST_TO_ADDR
// end ;
63158: LD_VAR 0 2
63162: RET
// export function ComExitAll ( units ) ; var i ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
// if not units then
63167: LD_VAR 0 1
63171: NOT
63172: IFFALSE 63176
// exit ;
63174: GO 63202
// for i in units do
63176: LD_ADDR_VAR 0 3
63180: PUSH
63181: LD_VAR 0 1
63185: PUSH
63186: FOR_IN
63187: IFFALSE 63200
// ComExit ( i ) ;
63189: LD_VAR 0 3
63193: PPUSH
63194: CALL 63080 0 1
63198: GO 63186
63200: POP
63201: POP
// end ;
63202: LD_VAR 0 2
63206: RET
// export function ResetHc ; begin
63207: LD_INT 0
63209: PPUSH
// InitHc ;
63210: CALL_OW 19
// hc_importance := 0 ;
63214: LD_ADDR_OWVAR 32
63218: PUSH
63219: LD_INT 0
63221: ST_TO_ADDR
// end ;
63222: LD_VAR 0 1
63226: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63227: LD_INT 0
63229: PPUSH
63230: PPUSH
63231: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63232: LD_ADDR_VAR 0 6
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_VAR 0 3
63246: PLUS
63247: PUSH
63248: LD_INT 2
63250: DIV
63251: ST_TO_ADDR
// if _x < 0 then
63252: LD_VAR 0 6
63256: PUSH
63257: LD_INT 0
63259: LESS
63260: IFFALSE 63277
// _x := _x * - 1 ;
63262: LD_ADDR_VAR 0 6
63266: PUSH
63267: LD_VAR 0 6
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: MUL
63276: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63277: LD_ADDR_VAR 0 7
63281: PUSH
63282: LD_VAR 0 2
63286: PUSH
63287: LD_VAR 0 4
63291: PLUS
63292: PUSH
63293: LD_INT 2
63295: DIV
63296: ST_TO_ADDR
// if _y < 0 then
63297: LD_VAR 0 7
63301: PUSH
63302: LD_INT 0
63304: LESS
63305: IFFALSE 63322
// _y := _y * - 1 ;
63307: LD_ADDR_VAR 0 7
63311: PUSH
63312: LD_VAR 0 7
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: MUL
63321: ST_TO_ADDR
// result := [ _x , _y ] ;
63322: LD_ADDR_VAR 0 5
63326: PUSH
63327: LD_VAR 0 6
63331: PUSH
63332: LD_VAR 0 7
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// end ;
63341: LD_VAR 0 5
63345: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
// task := GetTaskList ( unit ) ;
63352: LD_ADDR_VAR 0 7
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: CALL_OW 437
63366: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63367: LD_VAR 0 7
63371: NOT
63372: PUSH
63373: LD_VAR 0 1
63377: PPUSH
63378: LD_VAR 0 2
63382: PPUSH
63383: CALL_OW 308
63387: NOT
63388: AND
63389: IFFALSE 63393
// exit ;
63391: GO 63511
// if IsInArea ( unit , area ) then
63393: LD_VAR 0 1
63397: PPUSH
63398: LD_VAR 0 2
63402: PPUSH
63403: CALL_OW 308
63407: IFFALSE 63425
// begin ComMoveToArea ( unit , goAway ) ;
63409: LD_VAR 0 1
63413: PPUSH
63414: LD_VAR 0 3
63418: PPUSH
63419: CALL_OW 113
// exit ;
63423: GO 63511
// end ; if task [ 1 ] [ 1 ] <> M then
63425: LD_VAR 0 7
63429: PUSH
63430: LD_INT 1
63432: ARRAY
63433: PUSH
63434: LD_INT 1
63436: ARRAY
63437: PUSH
63438: LD_STRING M
63440: NONEQUAL
63441: IFFALSE 63445
// exit ;
63443: GO 63511
// x := task [ 1 ] [ 2 ] ;
63445: LD_ADDR_VAR 0 5
63449: PUSH
63450: LD_VAR 0 7
63454: PUSH
63455: LD_INT 1
63457: ARRAY
63458: PUSH
63459: LD_INT 2
63461: ARRAY
63462: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63463: LD_ADDR_VAR 0 6
63467: PUSH
63468: LD_VAR 0 7
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: PUSH
63477: LD_INT 3
63479: ARRAY
63480: ST_TO_ADDR
// if InArea ( x , y , area ) then
63481: LD_VAR 0 5
63485: PPUSH
63486: LD_VAR 0 6
63490: PPUSH
63491: LD_VAR 0 2
63495: PPUSH
63496: CALL_OW 309
63500: IFFALSE 63511
// ComStop ( unit ) ;
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 141
// end ;
63511: LD_VAR 0 4
63515: RET
// export function Abs ( value ) ; begin
63516: LD_INT 0
63518: PPUSH
// result := value ;
63519: LD_ADDR_VAR 0 2
63523: PUSH
63524: LD_VAR 0 1
63528: ST_TO_ADDR
// if value < 0 then
63529: LD_VAR 0 1
63533: PUSH
63534: LD_INT 0
63536: LESS
63537: IFFALSE 63554
// result := value * - 1 ;
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: LD_VAR 0 1
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: MUL
63553: ST_TO_ADDR
// end ;
63554: LD_VAR 0 2
63558: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63559: LD_INT 0
63561: PPUSH
63562: PPUSH
63563: PPUSH
63564: PPUSH
63565: PPUSH
63566: PPUSH
63567: PPUSH
63568: PPUSH
// if not unit or not building then
63569: LD_VAR 0 1
63573: NOT
63574: PUSH
63575: LD_VAR 0 2
63579: NOT
63580: OR
63581: IFFALSE 63585
// exit ;
63583: GO 63811
// x := GetX ( building ) ;
63585: LD_ADDR_VAR 0 4
63589: PUSH
63590: LD_VAR 0 2
63594: PPUSH
63595: CALL_OW 250
63599: ST_TO_ADDR
// y := GetY ( building ) ;
63600: LD_ADDR_VAR 0 6
63604: PUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: CALL_OW 251
63614: ST_TO_ADDR
// d := GetDir ( building ) ;
63615: LD_ADDR_VAR 0 8
63619: PUSH
63620: LD_VAR 0 2
63624: PPUSH
63625: CALL_OW 254
63629: ST_TO_ADDR
// r := 4 ;
63630: LD_ADDR_VAR 0 9
63634: PUSH
63635: LD_INT 4
63637: ST_TO_ADDR
// for i := 1 to 5 do
63638: LD_ADDR_VAR 0 10
63642: PUSH
63643: DOUBLE
63644: LD_INT 1
63646: DEC
63647: ST_TO_ADDR
63648: LD_INT 5
63650: PUSH
63651: FOR_TO
63652: IFFALSE 63809
// begin _x := ShiftX ( x , d , r + i ) ;
63654: LD_ADDR_VAR 0 5
63658: PUSH
63659: LD_VAR 0 4
63663: PPUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: LD_VAR 0 9
63673: PUSH
63674: LD_VAR 0 10
63678: PLUS
63679: PPUSH
63680: CALL_OW 272
63684: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63685: LD_ADDR_VAR 0 7
63689: PUSH
63690: LD_VAR 0 6
63694: PPUSH
63695: LD_VAR 0 8
63699: PPUSH
63700: LD_VAR 0 9
63704: PUSH
63705: LD_VAR 0 10
63709: PLUS
63710: PPUSH
63711: CALL_OW 273
63715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63716: LD_VAR 0 5
63720: PPUSH
63721: LD_VAR 0 7
63725: PPUSH
63726: CALL_OW 488
63730: PUSH
63731: LD_VAR 0 5
63735: PPUSH
63736: LD_VAR 0 7
63740: PPUSH
63741: CALL_OW 428
63745: PPUSH
63746: CALL_OW 247
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: IN
63761: NOT
63762: AND
63763: IFFALSE 63807
// begin ComMoveXY ( unit , _x , _y ) ;
63765: LD_VAR 0 1
63769: PPUSH
63770: LD_VAR 0 5
63774: PPUSH
63775: LD_VAR 0 7
63779: PPUSH
63780: CALL_OW 111
// result := [ _x , _y ] ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 5
63793: PUSH
63794: LD_VAR 0 7
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// exit ;
63803: POP
63804: POP
63805: GO 63811
// end ; end ;
63807: GO 63651
63809: POP
63810: POP
// end ;
63811: LD_VAR 0 3
63815: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63816: LD_INT 0
63818: PPUSH
63819: PPUSH
63820: PPUSH
// result := 0 ;
63821: LD_ADDR_VAR 0 3
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63829: LD_VAR 0 1
63833: PUSH
63834: LD_INT 0
63836: LESS
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_INT 8
63845: GREATER
63846: OR
63847: PUSH
63848: LD_VAR 0 2
63852: PUSH
63853: LD_INT 0
63855: LESS
63856: OR
63857: PUSH
63858: LD_VAR 0 2
63862: PUSH
63863: LD_INT 8
63865: GREATER
63866: OR
63867: IFFALSE 63871
// exit ;
63869: GO 63946
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63871: LD_ADDR_VAR 0 4
63875: PUSH
63876: LD_INT 22
63878: PUSH
63879: LD_VAR 0 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PPUSH
63888: CALL_OW 69
63892: PUSH
63893: FOR_IN
63894: IFFALSE 63944
// begin un := UnitShoot ( i ) ;
63896: LD_ADDR_VAR 0 5
63900: PUSH
63901: LD_VAR 0 4
63905: PPUSH
63906: CALL_OW 504
63910: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63911: LD_VAR 0 5
63915: PPUSH
63916: CALL_OW 255
63920: PUSH
63921: LD_VAR 0 1
63925: EQUAL
63926: IFFALSE 63942
// begin result := un ;
63928: LD_ADDR_VAR 0 3
63932: PUSH
63933: LD_VAR 0 5
63937: ST_TO_ADDR
// exit ;
63938: POP
63939: POP
63940: GO 63946
// end ; end ;
63942: GO 63893
63944: POP
63945: POP
// end ;
63946: LD_VAR 0 3
63950: RET
// export function GetCargoBay ( units ) ; begin
63951: LD_INT 0
63953: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63954: LD_ADDR_VAR 0 2
63958: PUSH
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 34
63969: PUSH
63970: LD_INT 12
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 34
63979: PUSH
63980: LD_INT 51
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 34
63989: PUSH
63990: LD_INT 32
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 34
63999: PUSH
64000: LD_INT 89
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: PPUSH
64014: CALL_OW 72
64018: ST_TO_ADDR
// end ;
64019: LD_VAR 0 2
64023: RET
// export function Negate ( value ) ; begin
64024: LD_INT 0
64026: PPUSH
// result := not value ;
64027: LD_ADDR_VAR 0 2
64031: PUSH
64032: LD_VAR 0 1
64036: NOT
64037: ST_TO_ADDR
// end ;
64038: LD_VAR 0 2
64042: RET
// export function Inc ( value ) ; begin
64043: LD_INT 0
64045: PPUSH
// result := value + 1 ;
64046: LD_ADDR_VAR 0 2
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_INT 1
64058: PLUS
64059: ST_TO_ADDR
// end ;
64060: LD_VAR 0 2
64064: RET
// export function Dec ( value ) ; begin
64065: LD_INT 0
64067: PPUSH
// result := value - 1 ;
64068: LD_ADDR_VAR 0 2
64072: PUSH
64073: LD_VAR 0 1
64077: PUSH
64078: LD_INT 1
64080: MINUS
64081: ST_TO_ADDR
// end ;
64082: LD_VAR 0 2
64086: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
64091: PPUSH
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64097: LD_VAR 0 1
64101: PPUSH
64102: LD_VAR 0 2
64106: PPUSH
64107: CALL_OW 488
64111: NOT
64112: PUSH
64113: LD_VAR 0 3
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 488
64127: NOT
64128: OR
64129: IFFALSE 64142
// begin result := - 1 ;
64131: LD_ADDR_VAR 0 5
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: ST_TO_ADDR
// exit ;
64140: GO 64377
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64142: LD_ADDR_VAR 0 12
64146: PUSH
64147: LD_VAR 0 1
64151: PPUSH
64152: LD_VAR 0 2
64156: PPUSH
64157: LD_VAR 0 3
64161: PPUSH
64162: LD_VAR 0 4
64166: PPUSH
64167: CALL 63227 0 4
64171: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64172: LD_ADDR_VAR 0 11
64176: PUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: LD_VAR 0 2
64186: PPUSH
64187: LD_VAR 0 12
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: PPUSH
64196: LD_VAR 0 12
64200: PUSH
64201: LD_INT 2
64203: ARRAY
64204: PPUSH
64205: CALL_OW 298
64209: ST_TO_ADDR
// distance := 9999 ;
64210: LD_ADDR_VAR 0 10
64214: PUSH
64215: LD_INT 9999
64217: ST_TO_ADDR
// for i := 0 to 5 do
64218: LD_ADDR_VAR 0 6
64222: PUSH
64223: DOUBLE
64224: LD_INT 0
64226: DEC
64227: ST_TO_ADDR
64228: LD_INT 5
64230: PUSH
64231: FOR_TO
64232: IFFALSE 64375
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64234: LD_ADDR_VAR 0 7
64238: PUSH
64239: LD_VAR 0 1
64243: PPUSH
64244: LD_VAR 0 6
64248: PPUSH
64249: LD_VAR 0 11
64253: PPUSH
64254: CALL_OW 272
64258: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64259: LD_ADDR_VAR 0 8
64263: PUSH
64264: LD_VAR 0 2
64268: PPUSH
64269: LD_VAR 0 6
64273: PPUSH
64274: LD_VAR 0 11
64278: PPUSH
64279: CALL_OW 273
64283: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64284: LD_VAR 0 7
64288: PPUSH
64289: LD_VAR 0 8
64293: PPUSH
64294: CALL_OW 488
64298: NOT
64299: IFFALSE 64303
// continue ;
64301: GO 64231
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64303: LD_ADDR_VAR 0 9
64307: PUSH
64308: LD_VAR 0 12
64312: PUSH
64313: LD_INT 1
64315: ARRAY
64316: PPUSH
64317: LD_VAR 0 12
64321: PUSH
64322: LD_INT 2
64324: ARRAY
64325: PPUSH
64326: LD_VAR 0 7
64330: PPUSH
64331: LD_VAR 0 8
64335: PPUSH
64336: CALL_OW 298
64340: ST_TO_ADDR
// if tmp < distance then
64341: LD_VAR 0 9
64345: PUSH
64346: LD_VAR 0 10
64350: LESS
64351: IFFALSE 64373
// begin result := i ;
64353: LD_ADDR_VAR 0 5
64357: PUSH
64358: LD_VAR 0 6
64362: ST_TO_ADDR
// distance := tmp ;
64363: LD_ADDR_VAR 0 10
64367: PUSH
64368: LD_VAR 0 9
64372: ST_TO_ADDR
// end ; end ;
64373: GO 64231
64375: POP
64376: POP
// end ;
64377: LD_VAR 0 5
64381: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64382: LD_INT 0
64384: PPUSH
64385: PPUSH
// if not driver or not IsInUnit ( driver ) then
64386: LD_VAR 0 1
64390: NOT
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: CALL_OW 310
64401: NOT
64402: OR
64403: IFFALSE 64407
// exit ;
64405: GO 64497
// vehicle := IsInUnit ( driver ) ;
64407: LD_ADDR_VAR 0 3
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 310
64421: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64422: LD_VAR 0 1
64426: PPUSH
64427: LD_STRING \
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: PUSH
64457: LD_STRING E
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_VAR 0 3
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PPUSH
64493: CALL_OW 446
// end ;
64497: LD_VAR 0 2
64501: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64502: LD_INT 0
64504: PPUSH
64505: PPUSH
// if not driver or not IsInUnit ( driver ) then
64506: LD_VAR 0 1
64510: NOT
64511: PUSH
64512: LD_VAR 0 1
64516: PPUSH
64517: CALL_OW 310
64521: NOT
64522: OR
64523: IFFALSE 64527
// exit ;
64525: GO 64617
// vehicle := IsInUnit ( driver ) ;
64527: LD_ADDR_VAR 0 3
64531: PUSH
64532: LD_VAR 0 1
64536: PPUSH
64537: CALL_OW 310
64541: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64542: LD_VAR 0 1
64546: PPUSH
64547: LD_STRING \
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: PUSH
64577: LD_STRING E
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_VAR 0 3
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PPUSH
64613: CALL_OW 447
// end ;
64617: LD_VAR 0 2
64621: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64622: LD_INT 0
64624: PPUSH
64625: PPUSH
64626: PPUSH
// tmp := [ ] ;
64627: LD_ADDR_VAR 0 5
64631: PUSH
64632: EMPTY
64633: ST_TO_ADDR
// for i in units do
64634: LD_ADDR_VAR 0 4
64638: PUSH
64639: LD_VAR 0 1
64643: PUSH
64644: FOR_IN
64645: IFFALSE 64683
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64647: LD_ADDR_VAR 0 5
64651: PUSH
64652: LD_VAR 0 5
64656: PPUSH
64657: LD_VAR 0 5
64661: PUSH
64662: LD_INT 1
64664: PLUS
64665: PPUSH
64666: LD_VAR 0 4
64670: PPUSH
64671: CALL_OW 256
64675: PPUSH
64676: CALL_OW 2
64680: ST_TO_ADDR
64681: GO 64644
64683: POP
64684: POP
// if not tmp then
64685: LD_VAR 0 5
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 64742
// if asc then
64694: LD_VAR 0 2
64698: IFFALSE 64722
// result := SortListByListAsc ( units , tmp ) else
64700: LD_ADDR_VAR 0 3
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: LD_VAR 0 5
64714: PPUSH
64715: CALL_OW 76
64719: ST_TO_ADDR
64720: GO 64742
// result := SortListByListDesc ( units , tmp ) ;
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: LD_VAR 0 1
64731: PPUSH
64732: LD_VAR 0 5
64736: PPUSH
64737: CALL_OW 77
64741: ST_TO_ADDR
// end ;
64742: LD_VAR 0 3
64746: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64747: LD_INT 0
64749: PPUSH
64750: PPUSH
// task := GetTaskList ( mech ) ;
64751: LD_ADDR_VAR 0 4
64755: PUSH
64756: LD_VAR 0 1
64760: PPUSH
64761: CALL_OW 437
64765: ST_TO_ADDR
// if not task then
64766: LD_VAR 0 4
64770: NOT
64771: IFFALSE 64775
// exit ;
64773: GO 64817
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64775: LD_ADDR_VAR 0 3
64779: PUSH
64780: LD_VAR 0 4
64784: PUSH
64785: LD_INT 1
64787: ARRAY
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: PUSH
64793: LD_STRING r
64795: EQUAL
64796: PUSH
64797: LD_VAR 0 4
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PUSH
64806: LD_INT 4
64808: ARRAY
64809: PUSH
64810: LD_VAR 0 2
64814: EQUAL
64815: AND
64816: ST_TO_ADDR
// end ;
64817: LD_VAR 0 3
64821: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64822: LD_INT 0
64824: PPUSH
// SetDir ( unit , d ) ;
64825: LD_VAR 0 1
64829: PPUSH
64830: LD_VAR 0 4
64834: PPUSH
64835: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64839: LD_VAR 0 1
64843: PPUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: LD_VAR 0 3
64853: PPUSH
64854: LD_VAR 0 5
64858: PPUSH
64859: CALL_OW 48
// end ;
64863: LD_VAR 0 6
64867: RET
// export function ToNaturalNumber ( number ) ; begin
64868: LD_INT 0
64870: PPUSH
// result := number div 1 ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: LD_INT 1
64883: DIV
64884: ST_TO_ADDR
// if number < 0 then
64885: LD_VAR 0 1
64889: PUSH
64890: LD_INT 0
64892: LESS
64893: IFFALSE 64903
// result := 0 ;
64895: LD_ADDR_VAR 0 2
64899: PUSH
64900: LD_INT 0
64902: ST_TO_ADDR
// end ;
64903: LD_VAR 0 2
64907: RET
// export function SortByClass ( units , class ) ; var un ; begin
64908: LD_INT 0
64910: PPUSH
64911: PPUSH
// if not units or not class then
64912: LD_VAR 0 1
64916: NOT
64917: PUSH
64918: LD_VAR 0 2
64922: NOT
64923: OR
64924: IFFALSE 64928
// exit ;
64926: GO 65023
// result := [ ] ;
64928: LD_ADDR_VAR 0 3
64932: PUSH
64933: EMPTY
64934: ST_TO_ADDR
// for un in units do
64935: LD_ADDR_VAR 0 4
64939: PUSH
64940: LD_VAR 0 1
64944: PUSH
64945: FOR_IN
64946: IFFALSE 65021
// if GetClass ( un ) = class then
64948: LD_VAR 0 4
64952: PPUSH
64953: CALL_OW 257
64957: PUSH
64958: LD_VAR 0 2
64962: EQUAL
64963: IFFALSE 64990
// result := Insert ( result , 1 , un ) else
64965: LD_ADDR_VAR 0 3
64969: PUSH
64970: LD_VAR 0 3
64974: PPUSH
64975: LD_INT 1
64977: PPUSH
64978: LD_VAR 0 4
64982: PPUSH
64983: CALL_OW 2
64987: ST_TO_ADDR
64988: GO 65019
// result := Replace ( result , result + 1 , un ) ;
64990: LD_ADDR_VAR 0 3
64994: PUSH
64995: LD_VAR 0 3
64999: PPUSH
65000: LD_VAR 0 3
65004: PUSH
65005: LD_INT 1
65007: PLUS
65008: PPUSH
65009: LD_VAR 0 4
65013: PPUSH
65014: CALL_OW 1
65018: ST_TO_ADDR
65019: GO 64945
65021: POP
65022: POP
// end ;
65023: LD_VAR 0 3
65027: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65028: LD_INT 0
65030: PPUSH
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
// result := [ ] ;
65037: LD_ADDR_VAR 0 4
65041: PUSH
65042: EMPTY
65043: ST_TO_ADDR
// if x - r < 0 then
65044: LD_VAR 0 1
65048: PUSH
65049: LD_VAR 0 3
65053: MINUS
65054: PUSH
65055: LD_INT 0
65057: LESS
65058: IFFALSE 65070
// min_x := 0 else
65060: LD_ADDR_VAR 0 8
65064: PUSH
65065: LD_INT 0
65067: ST_TO_ADDR
65068: GO 65086
// min_x := x - r ;
65070: LD_ADDR_VAR 0 8
65074: PUSH
65075: LD_VAR 0 1
65079: PUSH
65080: LD_VAR 0 3
65084: MINUS
65085: ST_TO_ADDR
// if y - r < 0 then
65086: LD_VAR 0 2
65090: PUSH
65091: LD_VAR 0 3
65095: MINUS
65096: PUSH
65097: LD_INT 0
65099: LESS
65100: IFFALSE 65112
// min_y := 0 else
65102: LD_ADDR_VAR 0 7
65106: PUSH
65107: LD_INT 0
65109: ST_TO_ADDR
65110: GO 65128
// min_y := y - r ;
65112: LD_ADDR_VAR 0 7
65116: PUSH
65117: LD_VAR 0 2
65121: PUSH
65122: LD_VAR 0 3
65126: MINUS
65127: ST_TO_ADDR
// max_x := x + r ;
65128: LD_ADDR_VAR 0 9
65132: PUSH
65133: LD_VAR 0 1
65137: PUSH
65138: LD_VAR 0 3
65142: PLUS
65143: ST_TO_ADDR
// max_y := y + r ;
65144: LD_ADDR_VAR 0 10
65148: PUSH
65149: LD_VAR 0 2
65153: PUSH
65154: LD_VAR 0 3
65158: PLUS
65159: ST_TO_ADDR
// for _x = min_x to max_x do
65160: LD_ADDR_VAR 0 5
65164: PUSH
65165: DOUBLE
65166: LD_VAR 0 8
65170: DEC
65171: ST_TO_ADDR
65172: LD_VAR 0 9
65176: PUSH
65177: FOR_TO
65178: IFFALSE 65279
// for _y = min_y to max_y do
65180: LD_ADDR_VAR 0 6
65184: PUSH
65185: DOUBLE
65186: LD_VAR 0 7
65190: DEC
65191: ST_TO_ADDR
65192: LD_VAR 0 10
65196: PUSH
65197: FOR_TO
65198: IFFALSE 65275
// begin if not ValidHex ( _x , _y ) then
65200: LD_VAR 0 5
65204: PPUSH
65205: LD_VAR 0 6
65209: PPUSH
65210: CALL_OW 488
65214: NOT
65215: IFFALSE 65219
// continue ;
65217: GO 65197
// if GetResourceTypeXY ( _x , _y ) then
65219: LD_VAR 0 5
65223: PPUSH
65224: LD_VAR 0 6
65228: PPUSH
65229: CALL_OW 283
65233: IFFALSE 65273
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65235: LD_ADDR_VAR 0 4
65239: PUSH
65240: LD_VAR 0 4
65244: PPUSH
65245: LD_VAR 0 4
65249: PUSH
65250: LD_INT 1
65252: PLUS
65253: PPUSH
65254: LD_VAR 0 5
65258: PUSH
65259: LD_VAR 0 6
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PPUSH
65268: CALL_OW 1
65272: ST_TO_ADDR
// end ;
65273: GO 65197
65275: POP
65276: POP
65277: GO 65177
65279: POP
65280: POP
// end ;
65281: LD_VAR 0 4
65285: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65286: LD_INT 0
65288: PPUSH
65289: PPUSH
65290: PPUSH
65291: PPUSH
65292: PPUSH
65293: PPUSH
65294: PPUSH
65295: PPUSH
// if not units then
65296: LD_VAR 0 1
65300: NOT
65301: IFFALSE 65305
// exit ;
65303: GO 65829
// result := UnitFilter ( units , [ f_ok ] ) ;
65305: LD_ADDR_VAR 0 3
65309: PUSH
65310: LD_VAR 0 1
65314: PPUSH
65315: LD_INT 50
65317: PUSH
65318: EMPTY
65319: LIST
65320: PPUSH
65321: CALL_OW 72
65325: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65326: LD_ADDR_VAR 0 8
65330: PUSH
65331: LD_VAR 0 1
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PPUSH
65340: CALL_OW 255
65344: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65345: LD_ADDR_VAR 0 10
65349: PUSH
65350: LD_INT 29
65352: PUSH
65353: LD_INT 91
65355: PUSH
65356: LD_INT 49
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// if not result then
65364: LD_VAR 0 3
65368: NOT
65369: IFFALSE 65373
// exit ;
65371: GO 65829
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65373: LD_ADDR_VAR 0 5
65377: PUSH
65378: LD_INT 81
65380: PUSH
65381: LD_VAR 0 8
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PPUSH
65390: CALL_OW 69
65394: ST_TO_ADDR
// for i in result do
65395: LD_ADDR_VAR 0 4
65399: PUSH
65400: LD_VAR 0 3
65404: PUSH
65405: FOR_IN
65406: IFFALSE 65827
// begin tag := GetTag ( i ) + 1 ;
65408: LD_ADDR_VAR 0 9
65412: PUSH
65413: LD_VAR 0 4
65417: PPUSH
65418: CALL_OW 110
65422: PUSH
65423: LD_INT 1
65425: PLUS
65426: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65427: LD_ADDR_VAR 0 7
65431: PUSH
65432: LD_VAR 0 4
65436: PPUSH
65437: CALL_OW 250
65441: PPUSH
65442: LD_VAR 0 4
65446: PPUSH
65447: CALL_OW 251
65451: PPUSH
65452: LD_INT 6
65454: PPUSH
65455: CALL 65028 0 3
65459: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65460: LD_VAR 0 4
65464: PPUSH
65465: CALL_OW 247
65469: PUSH
65470: LD_INT 2
65472: EQUAL
65473: PUSH
65474: LD_VAR 0 7
65478: AND
65479: PUSH
65480: LD_VAR 0 4
65484: PPUSH
65485: CALL_OW 264
65489: PUSH
65490: LD_VAR 0 10
65494: IN
65495: NOT
65496: AND
65497: IFFALSE 65536
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65499: LD_VAR 0 4
65503: PPUSH
65504: LD_VAR 0 7
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PPUSH
65517: LD_VAR 0 7
65521: PUSH
65522: LD_INT 1
65524: ARRAY
65525: PUSH
65526: LD_INT 2
65528: ARRAY
65529: PPUSH
65530: CALL_OW 116
65534: GO 65825
// if path > tag then
65536: LD_VAR 0 2
65540: PUSH
65541: LD_VAR 0 9
65545: GREATER
65546: IFFALSE 65754
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65548: LD_ADDR_VAR 0 6
65552: PUSH
65553: LD_VAR 0 5
65557: PPUSH
65558: LD_INT 91
65560: PUSH
65561: LD_VAR 0 4
65565: PUSH
65566: LD_INT 8
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PPUSH
65574: CALL_OW 72
65578: ST_TO_ADDR
// if nearEnemy then
65579: LD_VAR 0 6
65583: IFFALSE 65652
// begin if GetWeapon ( i ) = ru_time_lapser then
65585: LD_VAR 0 4
65589: PPUSH
65590: CALL_OW 264
65594: PUSH
65595: LD_INT 49
65597: EQUAL
65598: IFFALSE 65626
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65600: LD_VAR 0 4
65604: PPUSH
65605: LD_VAR 0 6
65609: PPUSH
65610: LD_VAR 0 4
65614: PPUSH
65615: CALL_OW 74
65619: PPUSH
65620: CALL_OW 112
65624: GO 65650
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65626: LD_VAR 0 4
65630: PPUSH
65631: LD_VAR 0 6
65635: PPUSH
65636: LD_VAR 0 4
65640: PPUSH
65641: CALL_OW 74
65645: PPUSH
65646: CALL_OW 115
// end else
65650: GO 65752
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65652: LD_VAR 0 4
65656: PPUSH
65657: LD_VAR 0 2
65661: PUSH
65662: LD_VAR 0 9
65666: ARRAY
65667: PUSH
65668: LD_INT 1
65670: ARRAY
65671: PPUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_VAR 0 9
65681: ARRAY
65682: PUSH
65683: LD_INT 2
65685: ARRAY
65686: PPUSH
65687: CALL_OW 297
65691: PUSH
65692: LD_INT 6
65694: GREATER
65695: IFFALSE 65738
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65697: LD_VAR 0 4
65701: PPUSH
65702: LD_VAR 0 2
65706: PUSH
65707: LD_VAR 0 9
65711: ARRAY
65712: PUSH
65713: LD_INT 1
65715: ARRAY
65716: PPUSH
65717: LD_VAR 0 2
65721: PUSH
65722: LD_VAR 0 9
65726: ARRAY
65727: PUSH
65728: LD_INT 2
65730: ARRAY
65731: PPUSH
65732: CALL_OW 114
65736: GO 65752
// SetTag ( i , tag ) ;
65738: LD_VAR 0 4
65742: PPUSH
65743: LD_VAR 0 9
65747: PPUSH
65748: CALL_OW 109
// end else
65752: GO 65825
// if enemy then
65754: LD_VAR 0 5
65758: IFFALSE 65825
// begin if GetWeapon ( i ) = ru_time_lapser then
65760: LD_VAR 0 4
65764: PPUSH
65765: CALL_OW 264
65769: PUSH
65770: LD_INT 49
65772: EQUAL
65773: IFFALSE 65801
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65775: LD_VAR 0 4
65779: PPUSH
65780: LD_VAR 0 5
65784: PPUSH
65785: LD_VAR 0 4
65789: PPUSH
65790: CALL_OW 74
65794: PPUSH
65795: CALL_OW 112
65799: GO 65825
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65801: LD_VAR 0 4
65805: PPUSH
65806: LD_VAR 0 5
65810: PPUSH
65811: LD_VAR 0 4
65815: PPUSH
65816: CALL_OW 74
65820: PPUSH
65821: CALL_OW 115
// end ; end ;
65825: GO 65405
65827: POP
65828: POP
// end ;
65829: LD_VAR 0 3
65833: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65834: LD_INT 0
65836: PPUSH
65837: PPUSH
65838: PPUSH
// if not unit or IsInUnit ( unit ) then
65839: LD_VAR 0 1
65843: NOT
65844: PUSH
65845: LD_VAR 0 1
65849: PPUSH
65850: CALL_OW 310
65854: OR
65855: IFFALSE 65859
// exit ;
65857: GO 65950
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65859: LD_ADDR_VAR 0 4
65863: PUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: CALL_OW 250
65873: PPUSH
65874: LD_VAR 0 2
65878: PPUSH
65879: LD_INT 1
65881: PPUSH
65882: CALL_OW 272
65886: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65887: LD_ADDR_VAR 0 5
65891: PUSH
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 251
65901: PPUSH
65902: LD_VAR 0 2
65906: PPUSH
65907: LD_INT 1
65909: PPUSH
65910: CALL_OW 273
65914: ST_TO_ADDR
// if ValidHex ( x , y ) then
65915: LD_VAR 0 4
65919: PPUSH
65920: LD_VAR 0 5
65924: PPUSH
65925: CALL_OW 488
65929: IFFALSE 65950
// ComTurnXY ( unit , x , y ) ;
65931: LD_VAR 0 1
65935: PPUSH
65936: LD_VAR 0 4
65940: PPUSH
65941: LD_VAR 0 5
65945: PPUSH
65946: CALL_OW 118
// end ;
65950: LD_VAR 0 3
65954: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65955: LD_INT 0
65957: PPUSH
65958: PPUSH
// result := false ;
65959: LD_ADDR_VAR 0 3
65963: PUSH
65964: LD_INT 0
65966: ST_TO_ADDR
// if not units then
65967: LD_VAR 0 2
65971: NOT
65972: IFFALSE 65976
// exit ;
65974: GO 66021
// for i in units do
65976: LD_ADDR_VAR 0 4
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: FOR_IN
65987: IFFALSE 66019
// if See ( side , i ) then
65989: LD_VAR 0 1
65993: PPUSH
65994: LD_VAR 0 4
65998: PPUSH
65999: CALL_OW 292
66003: IFFALSE 66017
// begin result := true ;
66005: LD_ADDR_VAR 0 3
66009: PUSH
66010: LD_INT 1
66012: ST_TO_ADDR
// exit ;
66013: POP
66014: POP
66015: GO 66021
// end ;
66017: GO 65986
66019: POP
66020: POP
// end ;
66021: LD_VAR 0 3
66025: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66026: LD_INT 0
66028: PPUSH
66029: PPUSH
66030: PPUSH
66031: PPUSH
// if not unit or not points then
66032: LD_VAR 0 1
66036: NOT
66037: PUSH
66038: LD_VAR 0 2
66042: NOT
66043: OR
66044: IFFALSE 66048
// exit ;
66046: GO 66138
// dist := 99999 ;
66048: LD_ADDR_VAR 0 5
66052: PUSH
66053: LD_INT 99999
66055: ST_TO_ADDR
// for i in points do
66056: LD_ADDR_VAR 0 4
66060: PUSH
66061: LD_VAR 0 2
66065: PUSH
66066: FOR_IN
66067: IFFALSE 66136
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66069: LD_ADDR_VAR 0 6
66073: PUSH
66074: LD_VAR 0 1
66078: PPUSH
66079: LD_VAR 0 4
66083: PUSH
66084: LD_INT 1
66086: ARRAY
66087: PPUSH
66088: LD_VAR 0 4
66092: PUSH
66093: LD_INT 2
66095: ARRAY
66096: PPUSH
66097: CALL_OW 297
66101: ST_TO_ADDR
// if tmpDist < dist then
66102: LD_VAR 0 6
66106: PUSH
66107: LD_VAR 0 5
66111: LESS
66112: IFFALSE 66134
// begin result := i ;
66114: LD_ADDR_VAR 0 3
66118: PUSH
66119: LD_VAR 0 4
66123: ST_TO_ADDR
// dist := tmpDist ;
66124: LD_ADDR_VAR 0 5
66128: PUSH
66129: LD_VAR 0 6
66133: ST_TO_ADDR
// end ; end ;
66134: GO 66066
66136: POP
66137: POP
// end ;
66138: LD_VAR 0 3
66142: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66143: LD_INT 0
66145: PPUSH
// uc_side := side ;
66146: LD_ADDR_OWVAR 20
66150: PUSH
66151: LD_VAR 0 1
66155: ST_TO_ADDR
// uc_nation := 3 ;
66156: LD_ADDR_OWVAR 21
66160: PUSH
66161: LD_INT 3
66163: ST_TO_ADDR
// vc_chassis := 25 ;
66164: LD_ADDR_OWVAR 37
66168: PUSH
66169: LD_INT 25
66171: ST_TO_ADDR
// vc_engine := engine_siberite ;
66172: LD_ADDR_OWVAR 39
66176: PUSH
66177: LD_INT 3
66179: ST_TO_ADDR
// vc_control := control_computer ;
66180: LD_ADDR_OWVAR 38
66184: PUSH
66185: LD_INT 3
66187: ST_TO_ADDR
// vc_weapon := 59 ;
66188: LD_ADDR_OWVAR 40
66192: PUSH
66193: LD_INT 59
66195: ST_TO_ADDR
// result := CreateVehicle ;
66196: LD_ADDR_VAR 0 5
66200: PUSH
66201: CALL_OW 45
66205: ST_TO_ADDR
// SetDir ( result , d ) ;
66206: LD_VAR 0 5
66210: PPUSH
66211: LD_VAR 0 4
66215: PPUSH
66216: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66220: LD_VAR 0 5
66224: PPUSH
66225: LD_VAR 0 2
66229: PPUSH
66230: LD_VAR 0 3
66234: PPUSH
66235: LD_INT 0
66237: PPUSH
66238: CALL_OW 48
// end ;
66242: LD_VAR 0 5
66246: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66247: LD_INT 0
66249: PPUSH
66250: PPUSH
66251: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66252: LD_ADDR_VAR 0 2
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66275: LD_VAR 0 1
66279: NOT
66280: PUSH
66281: LD_VAR 0 1
66285: PPUSH
66286: CALL_OW 264
66290: PUSH
66291: LD_INT 12
66293: PUSH
66294: LD_INT 51
66296: PUSH
66297: LD_INT 32
66299: PUSH
66300: LD_INT 89
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: IN
66309: NOT
66310: OR
66311: IFFALSE 66315
// exit ;
66313: GO 66413
// for i := 1 to 3 do
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: DOUBLE
66321: LD_INT 1
66323: DEC
66324: ST_TO_ADDR
66325: LD_INT 3
66327: PUSH
66328: FOR_TO
66329: IFFALSE 66411
// begin tmp := GetCargo ( cargo , i ) ;
66331: LD_ADDR_VAR 0 4
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_VAR 0 3
66345: PPUSH
66346: CALL_OW 289
66350: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66351: LD_ADDR_VAR 0 2
66355: PUSH
66356: LD_VAR 0 2
66360: PPUSH
66361: LD_VAR 0 3
66365: PPUSH
66366: LD_VAR 0 4
66370: PPUSH
66371: CALL_OW 1
66375: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66376: LD_ADDR_VAR 0 2
66380: PUSH
66381: LD_VAR 0 2
66385: PPUSH
66386: LD_INT 4
66388: PPUSH
66389: LD_VAR 0 2
66393: PUSH
66394: LD_INT 4
66396: ARRAY
66397: PUSH
66398: LD_VAR 0 4
66402: PLUS
66403: PPUSH
66404: CALL_OW 1
66408: ST_TO_ADDR
// end ;
66409: GO 66328
66411: POP
66412: POP
// end ;
66413: LD_VAR 0 2
66417: RET
// export function Length ( array ) ; begin
66418: LD_INT 0
66420: PPUSH
// result := array + 0 ;
66421: LD_ADDR_VAR 0 2
66425: PUSH
66426: LD_VAR 0 1
66430: PUSH
66431: LD_INT 0
66433: PLUS
66434: ST_TO_ADDR
// end ;
66435: LD_VAR 0 2
66439: RET
// export function PrepareArray ( array ) ; begin
66440: LD_INT 0
66442: PPUSH
// result := array diff 0 ;
66443: LD_ADDR_VAR 0 2
66447: PUSH
66448: LD_VAR 0 1
66452: PUSH
66453: LD_INT 0
66455: DIFF
66456: ST_TO_ADDR
// if not result [ 1 ] then
66457: LD_VAR 0 2
66461: PUSH
66462: LD_INT 1
66464: ARRAY
66465: NOT
66466: IFFALSE 66486
// result := Delete ( result , 1 ) ;
66468: LD_ADDR_VAR 0 2
66472: PUSH
66473: LD_VAR 0 2
66477: PPUSH
66478: LD_INT 1
66480: PPUSH
66481: CALL_OW 3
66485: ST_TO_ADDR
// end ;
66486: LD_VAR 0 2
66490: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66491: LD_INT 0
66493: PPUSH
66494: PPUSH
66495: PPUSH
66496: PPUSH
// sibRocketRange := 25 ;
66497: LD_ADDR_VAR 0 6
66501: PUSH
66502: LD_INT 25
66504: ST_TO_ADDR
// result := false ;
66505: LD_ADDR_VAR 0 4
66509: PUSH
66510: LD_INT 0
66512: ST_TO_ADDR
// for i := 0 to 5 do
66513: LD_ADDR_VAR 0 5
66517: PUSH
66518: DOUBLE
66519: LD_INT 0
66521: DEC
66522: ST_TO_ADDR
66523: LD_INT 5
66525: PUSH
66526: FOR_TO
66527: IFFALSE 66594
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66529: LD_VAR 0 1
66533: PPUSH
66534: LD_VAR 0 5
66538: PPUSH
66539: LD_VAR 0 6
66543: PPUSH
66544: CALL_OW 272
66548: PPUSH
66549: LD_VAR 0 2
66553: PPUSH
66554: LD_VAR 0 5
66558: PPUSH
66559: LD_VAR 0 6
66563: PPUSH
66564: CALL_OW 273
66568: PPUSH
66569: LD_VAR 0 3
66573: PPUSH
66574: CALL_OW 309
66578: IFFALSE 66592
// begin result := true ;
66580: LD_ADDR_VAR 0 4
66584: PUSH
66585: LD_INT 1
66587: ST_TO_ADDR
// exit ;
66588: POP
66589: POP
66590: GO 66596
// end ;
66592: GO 66526
66594: POP
66595: POP
// end ;
66596: LD_VAR 0 4
66600: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66601: LD_INT 0
66603: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66604: LD_VAR 0 1
66608: PPUSH
66609: LD_VAR 0 2
66613: PPUSH
66614: LD_INT 0
66616: PPUSH
66617: LD_INT 0
66619: PPUSH
66620: LD_INT 1
66622: PPUSH
66623: LD_INT 0
66625: PPUSH
66626: CALL_OW 587
// end ; end_of_file
66630: LD_VAR 0 3
66634: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66635: LD_VAR 0 1
66639: PPUSH
66640: LD_VAR 0 2
66644: PPUSH
66645: LD_VAR 0 3
66649: PPUSH
66650: LD_VAR 0 4
66654: PPUSH
66655: LD_VAR 0 5
66659: PPUSH
66660: LD_VAR 0 6
66664: PPUSH
66665: CALL 5091 0 6
// end ;
66669: PPOPN 6
66671: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66672: LD_INT 0
66674: PPUSH
// begin if not units then
66675: LD_VAR 0 1
66679: NOT
66680: IFFALSE 66684
// exit ;
66682: GO 66684
// end ;
66684: PPOPN 7
66686: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66687: CALL 4985 0 0
// end ;
66691: PPOPN 1
66693: END
