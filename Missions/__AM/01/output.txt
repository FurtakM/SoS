// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// export function SOS_MapStart ( ) ; begin
4985: LD_INT 0
4987: PPUSH
// if streamModeActive then
4988: LD_EXP 15
4992: IFFALSE 5001
// DefineStreamItems ( true ) ;
4994: LD_INT 1
4996: PPUSH
4997: CALL 6655 0 1
// UpdateFactoryWaypoints ( ) ;
5001: CALL 19516 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5005: CALL 19773 0 0
// end ;
5009: LD_VAR 0 1
5013: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5014: LD_INT 0
5016: PPUSH
// if p2 = 100 then
5017: LD_VAR 0 2
5021: PUSH
5022: LD_INT 100
5024: EQUAL
5025: IFFALSE 6028
// begin if not StreamModeActive then
5027: LD_EXP 15
5031: NOT
5032: IFFALSE 5042
// StreamModeActive := true ;
5034: LD_ADDR_EXP 15
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 0 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 0
5049: EQUAL
5050: IFFALSE 5056
// InitStreamMode ;
5052: CALL 6191 0 0
// if p3 = 1 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 1
5063: EQUAL
5064: IFFALSE 5074
// sRocket := true ;
5066: LD_ADDR_EXP 20
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 2 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: IFFALSE 5092
// sSpeed := true ;
5084: LD_ADDR_EXP 19
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 3 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 3
5099: EQUAL
5100: IFFALSE 5110
// sEngine := true ;
5102: LD_ADDR_EXP 21
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 4 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 4
5117: EQUAL
5118: IFFALSE 5128
// sSpec := true ;
5120: LD_ADDR_EXP 18
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 5 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 5
5135: EQUAL
5136: IFFALSE 5146
// sLevel := true ;
5138: LD_ADDR_EXP 22
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 6 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 6
5153: EQUAL
5154: IFFALSE 5164
// sArmoury := true ;
5156: LD_ADDR_EXP 23
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 7 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 7
5171: EQUAL
5172: IFFALSE 5182
// sRadar := true ;
5174: LD_ADDR_EXP 24
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 8 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 8
5189: EQUAL
5190: IFFALSE 5200
// sBunker := true ;
5192: LD_ADDR_EXP 25
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 9 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 9
5207: EQUAL
5208: IFFALSE 5218
// sHack := true ;
5210: LD_ADDR_EXP 26
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 10 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 10
5225: EQUAL
5226: IFFALSE 5236
// sFire := true ;
5228: LD_ADDR_EXP 27
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 11 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 11
5243: EQUAL
5244: IFFALSE 5254
// sRefresh := true ;
5246: LD_ADDR_EXP 28
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 12 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5272
// sExp := true ;
5264: LD_ADDR_EXP 29
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 13 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 13
5279: EQUAL
5280: IFFALSE 5290
// sDepot := true ;
5282: LD_ADDR_EXP 30
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 14 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 14
5297: EQUAL
5298: IFFALSE 5308
// sFlag := true ;
5300: LD_ADDR_EXP 31
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 15 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 15
5315: EQUAL
5316: IFFALSE 5326
// sKamikadze := true ;
5318: LD_ADDR_EXP 39
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 16 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 16
5333: EQUAL
5334: IFFALSE 5344
// sTroll := true ;
5336: LD_ADDR_EXP 40
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 17 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 17
5351: EQUAL
5352: IFFALSE 5362
// sSlow := true ;
5354: LD_ADDR_EXP 41
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 18 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 18
5369: EQUAL
5370: IFFALSE 5380
// sLack := true ;
5372: LD_ADDR_EXP 42
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 19 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 19
5387: EQUAL
5388: IFFALSE 5398
// sTank := true ;
5390: LD_ADDR_EXP 44
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 20 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 20
5405: EQUAL
5406: IFFALSE 5416
// sRemote := true ;
5408: LD_ADDR_EXP 45
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 21 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 21
5423: EQUAL
5424: IFFALSE 5434
// sPowell := true ;
5426: LD_ADDR_EXP 46
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 22 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 22
5441: EQUAL
5442: IFFALSE 5452
// sTeleport := true ;
5444: LD_ADDR_EXP 49
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 23 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 23
5459: EQUAL
5460: IFFALSE 5470
// sOilTower := true ;
5462: LD_ADDR_EXP 51
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 24 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 24
5477: EQUAL
5478: IFFALSE 5488
// sShovel := true ;
5480: LD_ADDR_EXP 52
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 25 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 25
5495: EQUAL
5496: IFFALSE 5506
// sSheik := true ;
5498: LD_ADDR_EXP 53
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 26 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 26
5513: EQUAL
5514: IFFALSE 5524
// sEarthquake := true ;
5516: LD_ADDR_EXP 55
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 27 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 27
5531: EQUAL
5532: IFFALSE 5542
// sAI := true ;
5534: LD_ADDR_EXP 56
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 28 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 28
5549: EQUAL
5550: IFFALSE 5560
// sCargo := true ;
5552: LD_ADDR_EXP 59
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 29 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 29
5567: EQUAL
5568: IFFALSE 5578
// sDLaser := true ;
5570: LD_ADDR_EXP 60
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 30 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 30
5585: EQUAL
5586: IFFALSE 5596
// sExchange := true ;
5588: LD_ADDR_EXP 61
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 31 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 31
5603: EQUAL
5604: IFFALSE 5614
// sFac := true ;
5606: LD_ADDR_EXP 62
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 32 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 32
5621: EQUAL
5622: IFFALSE 5632
// sPower := true ;
5624: LD_ADDR_EXP 63
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 33 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 33
5639: EQUAL
5640: IFFALSE 5650
// sRandom := true ;
5642: LD_ADDR_EXP 64
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 34 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 34
5657: EQUAL
5658: IFFALSE 5668
// sShield := true ;
5660: LD_ADDR_EXP 65
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 35 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 35
5675: EQUAL
5676: IFFALSE 5686
// sTime := true ;
5678: LD_ADDR_EXP 66
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 36 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 36
5693: EQUAL
5694: IFFALSE 5704
// sTools := true ;
5696: LD_ADDR_EXP 67
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 101 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 101
5711: EQUAL
5712: IFFALSE 5722
// sSold := true ;
5714: LD_ADDR_EXP 32
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 102 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 102
5729: EQUAL
5730: IFFALSE 5740
// sDiff := true ;
5732: LD_ADDR_EXP 33
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 103 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 103
5747: EQUAL
5748: IFFALSE 5758
// sFog := true ;
5750: LD_ADDR_EXP 36
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 104 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 104
5765: EQUAL
5766: IFFALSE 5776
// sReset := true ;
5768: LD_ADDR_EXP 37
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 105 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 105
5783: EQUAL
5784: IFFALSE 5794
// sSun := true ;
5786: LD_ADDR_EXP 38
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 106 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 106
5801: EQUAL
5802: IFFALSE 5812
// sTiger := true ;
5804: LD_ADDR_EXP 34
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 107 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 107
5819: EQUAL
5820: IFFALSE 5830
// sBomb := true ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 108 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 108
5837: EQUAL
5838: IFFALSE 5848
// sWound := true ;
5840: LD_ADDR_EXP 43
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 109 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 109
5855: EQUAL
5856: IFFALSE 5866
// sBetray := true ;
5858: LD_ADDR_EXP 47
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 110 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 110
5873: EQUAL
5874: IFFALSE 5884
// sContamin := true ;
5876: LD_ADDR_EXP 48
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 111 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 111
5891: EQUAL
5892: IFFALSE 5902
// sOil := true ;
5894: LD_ADDR_EXP 50
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 112 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 112
5909: EQUAL
5910: IFFALSE 5920
// sStu := true ;
5912: LD_ADDR_EXP 54
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// if p3 = 113 then
5920: LD_VAR 0 3
5924: PUSH
5925: LD_INT 113
5927: EQUAL
5928: IFFALSE 5938
// sBazooka := true ;
5930: LD_ADDR_EXP 57
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// if p3 = 114 then
5938: LD_VAR 0 3
5942: PUSH
5943: LD_INT 114
5945: EQUAL
5946: IFFALSE 5956
// sMortar := true ;
5948: LD_ADDR_EXP 58
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// if p3 = 115 then
5956: LD_VAR 0 3
5960: PUSH
5961: LD_INT 115
5963: EQUAL
5964: IFFALSE 5974
// sRanger := true ;
5966: LD_ADDR_EXP 68
5970: PUSH
5971: LD_INT 1
5973: ST_TO_ADDR
// if p3 = 116 then
5974: LD_VAR 0 3
5978: PUSH
5979: LD_INT 116
5981: EQUAL
5982: IFFALSE 5992
// sComputer := true ;
5984: LD_ADDR_EXP 69
5988: PUSH
5989: LD_INT 1
5991: ST_TO_ADDR
// if p3 = 117 then
5992: LD_VAR 0 3
5996: PUSH
5997: LD_INT 117
5999: EQUAL
6000: IFFALSE 6010
// s30 := true ;
6002: LD_ADDR_EXP 70
6006: PUSH
6007: LD_INT 1
6009: ST_TO_ADDR
// if p3 = 118 then
6010: LD_VAR 0 3
6014: PUSH
6015: LD_INT 118
6017: EQUAL
6018: IFFALSE 6028
// s60 := true ;
6020: LD_ADDR_EXP 71
6024: PUSH
6025: LD_INT 1
6027: ST_TO_ADDR
// end ; if p2 = 101 then
6028: LD_VAR 0 2
6032: PUSH
6033: LD_INT 101
6035: EQUAL
6036: IFFALSE 6164
// begin case p3 of 1 :
6038: LD_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6058
6051: POP
// hHackUnlimitedResources ; 2 :
6052: CALL 18262 0 0
6056: GO 6164
6058: LD_INT 2
6060: DOUBLE
6061: EQUAL
6062: IFTRUE 6066
6064: GO 6073
6066: POP
// hHackSetLevel10 ; 3 :
6067: CALL 18395 0 0
6071: GO 6164
6073: LD_INT 3
6075: DOUBLE
6076: EQUAL
6077: IFTRUE 6081
6079: GO 6088
6081: POP
// hHackSetLevel10YourUnits ; 4 :
6082: CALL 18480 0 0
6086: GO 6164
6088: LD_INT 4
6090: DOUBLE
6091: EQUAL
6092: IFTRUE 6096
6094: GO 6103
6096: POP
// hHackInvincible ; 5 :
6097: CALL 18928 0 0
6101: GO 6164
6103: LD_INT 5
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6111
6109: GO 6118
6111: POP
// hHackInvisible ; 6 :
6112: CALL 19039 0 0
6116: GO 6164
6118: LD_INT 6
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6133
6126: POP
// hHackChangeYourSide ; 7 :
6127: CALL 19096 0 0
6131: GO 6164
6133: LD_INT 7
6135: DOUBLE
6136: EQUAL
6137: IFTRUE 6141
6139: GO 6148
6141: POP
// hHackChangeUnitSide ; 8 :
6142: CALL 19138 0 0
6146: GO 6164
6148: LD_INT 8
6150: DOUBLE
6151: EQUAL
6152: IFTRUE 6156
6154: GO 6163
6156: POP
// hHackFog ; end ;
6157: CALL 19239 0 0
6161: GO 6164
6163: POP
// end ; end ;
6164: LD_VAR 0 7
6168: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6169: GO 6171
6171: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6172: LD_STRING initStreamRollete();
6174: PPUSH
6175: CALL_OW 559
// InitStreamMode ;
6179: CALL 6191 0 0
// DefineStreamItems ( false ) ;
6183: LD_INT 0
6185: PPUSH
6186: CALL 6655 0 1
// end ;
6190: END
// function InitStreamMode ; begin
6191: LD_INT 0
6193: PPUSH
// streamModeActive := false ;
6194: LD_ADDR_EXP 15
6198: PUSH
6199: LD_INT 0
6201: ST_TO_ADDR
// normalCounter := 36 ;
6202: LD_ADDR_EXP 16
6206: PUSH
6207: LD_INT 36
6209: ST_TO_ADDR
// hardcoreCounter := 18 ;
6210: LD_ADDR_EXP 17
6214: PUSH
6215: LD_INT 18
6217: ST_TO_ADDR
// sRocket := false ;
6218: LD_ADDR_EXP 20
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// sSpeed := false ;
6226: LD_ADDR_EXP 19
6230: PUSH
6231: LD_INT 0
6233: ST_TO_ADDR
// sEngine := false ;
6234: LD_ADDR_EXP 21
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// sSpec := false ;
6242: LD_ADDR_EXP 18
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// sLevel := false ;
6250: LD_ADDR_EXP 22
6254: PUSH
6255: LD_INT 0
6257: ST_TO_ADDR
// sArmoury := false ;
6258: LD_ADDR_EXP 23
6262: PUSH
6263: LD_INT 0
6265: ST_TO_ADDR
// sRadar := false ;
6266: LD_ADDR_EXP 24
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
// sBunker := false ;
6274: LD_ADDR_EXP 25
6278: PUSH
6279: LD_INT 0
6281: ST_TO_ADDR
// sHack := false ;
6282: LD_ADDR_EXP 26
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
// sFire := false ;
6290: LD_ADDR_EXP 27
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// sRefresh := false ;
6298: LD_ADDR_EXP 28
6302: PUSH
6303: LD_INT 0
6305: ST_TO_ADDR
// sExp := false ;
6306: LD_ADDR_EXP 29
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// sDepot := false ;
6314: LD_ADDR_EXP 30
6318: PUSH
6319: LD_INT 0
6321: ST_TO_ADDR
// sFlag := false ;
6322: LD_ADDR_EXP 31
6326: PUSH
6327: LD_INT 0
6329: ST_TO_ADDR
// sKamikadze := false ;
6330: LD_ADDR_EXP 39
6334: PUSH
6335: LD_INT 0
6337: ST_TO_ADDR
// sTroll := false ;
6338: LD_ADDR_EXP 40
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// sSlow := false ;
6346: LD_ADDR_EXP 41
6350: PUSH
6351: LD_INT 0
6353: ST_TO_ADDR
// sLack := false ;
6354: LD_ADDR_EXP 42
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// sTank := false ;
6362: LD_ADDR_EXP 44
6366: PUSH
6367: LD_INT 0
6369: ST_TO_ADDR
// sRemote := false ;
6370: LD_ADDR_EXP 45
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// sPowell := false ;
6378: LD_ADDR_EXP 46
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// sTeleport := false ;
6386: LD_ADDR_EXP 49
6390: PUSH
6391: LD_INT 0
6393: ST_TO_ADDR
// sOilTower := false ;
6394: LD_ADDR_EXP 51
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// sShovel := false ;
6402: LD_ADDR_EXP 52
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// sSheik := false ;
6410: LD_ADDR_EXP 53
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// sEarthquake := false ;
6418: LD_ADDR_EXP 55
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
// sAI := false ;
6426: LD_ADDR_EXP 56
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// sCargo := false ;
6434: LD_ADDR_EXP 59
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// sDLaser := false ;
6442: LD_ADDR_EXP 60
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// sExchange := false ;
6450: LD_ADDR_EXP 61
6454: PUSH
6455: LD_INT 0
6457: ST_TO_ADDR
// sFac := false ;
6458: LD_ADDR_EXP 62
6462: PUSH
6463: LD_INT 0
6465: ST_TO_ADDR
// sPower := false ;
6466: LD_ADDR_EXP 63
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// sRandom := false ;
6474: LD_ADDR_EXP 64
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// sShield := false ;
6482: LD_ADDR_EXP 65
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// sTime := false ;
6490: LD_ADDR_EXP 66
6494: PUSH
6495: LD_INT 0
6497: ST_TO_ADDR
// sTools := false ;
6498: LD_ADDR_EXP 67
6502: PUSH
6503: LD_INT 0
6505: ST_TO_ADDR
// sSold := false ;
6506: LD_ADDR_EXP 32
6510: PUSH
6511: LD_INT 0
6513: ST_TO_ADDR
// sDiff := false ;
6514: LD_ADDR_EXP 33
6518: PUSH
6519: LD_INT 0
6521: ST_TO_ADDR
// sFog := false ;
6522: LD_ADDR_EXP 36
6526: PUSH
6527: LD_INT 0
6529: ST_TO_ADDR
// sReset := false ;
6530: LD_ADDR_EXP 37
6534: PUSH
6535: LD_INT 0
6537: ST_TO_ADDR
// sSun := false ;
6538: LD_ADDR_EXP 38
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// sTiger := false ;
6546: LD_ADDR_EXP 34
6550: PUSH
6551: LD_INT 0
6553: ST_TO_ADDR
// sBomb := false ;
6554: LD_ADDR_EXP 35
6558: PUSH
6559: LD_INT 0
6561: ST_TO_ADDR
// sWound := false ;
6562: LD_ADDR_EXP 43
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// sBetray := false ;
6570: LD_ADDR_EXP 47
6574: PUSH
6575: LD_INT 0
6577: ST_TO_ADDR
// sContamin := false ;
6578: LD_ADDR_EXP 48
6582: PUSH
6583: LD_INT 0
6585: ST_TO_ADDR
// sOil := false ;
6586: LD_ADDR_EXP 50
6590: PUSH
6591: LD_INT 0
6593: ST_TO_ADDR
// sStu := false ;
6594: LD_ADDR_EXP 54
6598: PUSH
6599: LD_INT 0
6601: ST_TO_ADDR
// sBazooka := false ;
6602: LD_ADDR_EXP 57
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// sMortar := false ;
6610: LD_ADDR_EXP 58
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// sRanger := false ;
6618: LD_ADDR_EXP 68
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// sComputer := false ;
6626: LD_ADDR_EXP 69
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// s30 := false ;
6634: LD_ADDR_EXP 70
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// s60 := false ;
6642: LD_ADDR_EXP 71
6646: PUSH
6647: LD_INT 0
6649: ST_TO_ADDR
// end ;
6650: LD_VAR 0 1
6654: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
// result := [ ] ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: EMPTY
6670: ST_TO_ADDR
// if campaign_id = 1 then
6671: LD_OWVAR 69
6675: PUSH
6676: LD_INT 1
6678: EQUAL
6679: IFFALSE 9845
// begin case mission_number of 1 :
6681: LD_OWVAR 70
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6770
6694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6695: LD_ADDR_VAR 0 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 4
6705: PUSH
6706: LD_INT 11
6708: PUSH
6709: LD_INT 12
6711: PUSH
6712: LD_INT 15
6714: PUSH
6715: LD_INT 16
6717: PUSH
6718: LD_INT 22
6720: PUSH
6721: LD_INT 23
6723: PUSH
6724: LD_INT 26
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 101
6740: PUSH
6741: LD_INT 102
6743: PUSH
6744: LD_INT 106
6746: PUSH
6747: LD_INT 116
6749: PUSH
6750: LD_INT 117
6752: PUSH
6753: LD_INT 118
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 9843
6770: LD_INT 2
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6862
6778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 4
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 12
6795: PUSH
6796: LD_INT 15
6798: PUSH
6799: LD_INT 16
6801: PUSH
6802: LD_INT 22
6804: PUSH
6805: LD_INT 23
6807: PUSH
6808: LD_INT 26
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 101
6824: PUSH
6825: LD_INT 102
6827: PUSH
6828: LD_INT 105
6830: PUSH
6831: LD_INT 106
6833: PUSH
6834: LD_INT 108
6836: PUSH
6837: LD_INT 116
6839: PUSH
6840: LD_INT 117
6842: PUSH
6843: LD_INT 118
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: ST_TO_ADDR
6860: GO 9843
6862: LD_INT 3
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6958
6870: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PUSH
6879: LD_INT 4
6881: PUSH
6882: LD_INT 5
6884: PUSH
6885: LD_INT 11
6887: PUSH
6888: LD_INT 12
6890: PUSH
6891: LD_INT 15
6893: PUSH
6894: LD_INT 16
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 26
6902: PUSH
6903: LD_INT 36
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 101
6920: PUSH
6921: LD_INT 102
6923: PUSH
6924: LD_INT 105
6926: PUSH
6927: LD_INT 106
6929: PUSH
6930: LD_INT 108
6932: PUSH
6933: LD_INT 116
6935: PUSH
6936: LD_INT 117
6938: PUSH
6939: LD_INT 118
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 9843
6958: LD_INT 4
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 7062
6966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6967: LD_ADDR_VAR 0 2
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: LD_INT 11
6986: PUSH
6987: LD_INT 12
6989: PUSH
6990: LD_INT 15
6992: PUSH
6993: LD_INT 16
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 23
7001: PUSH
7002: LD_INT 26
7004: PUSH
7005: LD_INT 36
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 101
7024: PUSH
7025: LD_INT 102
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 116
7039: PUSH
7040: LD_INT 117
7042: PUSH
7043: LD_INT 118
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: ST_TO_ADDR
7060: GO 9843
7062: LD_INT 5
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7182
7070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_INT 2
7078: PUSH
7079: LD_INT 4
7081: PUSH
7082: LD_INT 5
7084: PUSH
7085: LD_INT 6
7087: PUSH
7088: LD_INT 8
7090: PUSH
7091: LD_INT 11
7093: PUSH
7094: LD_INT 12
7096: PUSH
7097: LD_INT 15
7099: PUSH
7100: LD_INT 16
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 26
7114: PUSH
7115: LD_INT 36
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 101
7136: PUSH
7137: LD_INT 102
7139: PUSH
7140: LD_INT 105
7142: PUSH
7143: LD_INT 106
7145: PUSH
7146: LD_INT 108
7148: PUSH
7149: LD_INT 109
7151: PUSH
7152: LD_INT 112
7154: PUSH
7155: LD_INT 116
7157: PUSH
7158: LD_INT 117
7160: PUSH
7161: LD_INT 118
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: ST_TO_ADDR
7180: GO 9843
7182: LD_INT 6
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7322
7190: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 4
7201: PUSH
7202: LD_INT 5
7204: PUSH
7205: LD_INT 6
7207: PUSH
7208: LD_INT 8
7210: PUSH
7211: LD_INT 11
7213: PUSH
7214: LD_INT 12
7216: PUSH
7217: LD_INT 15
7219: PUSH
7220: LD_INT 16
7222: PUSH
7223: LD_INT 20
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 30
7243: PUSH
7244: LD_INT 31
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 101
7276: PUSH
7277: LD_INT 102
7279: PUSH
7280: LD_INT 105
7282: PUSH
7283: LD_INT 106
7285: PUSH
7286: LD_INT 108
7288: PUSH
7289: LD_INT 109
7291: PUSH
7292: LD_INT 112
7294: PUSH
7295: LD_INT 116
7297: PUSH
7298: LD_INT 117
7300: PUSH
7301: LD_INT 118
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: ST_TO_ADDR
7320: GO 9843
7322: LD_INT 7
7324: DOUBLE
7325: EQUAL
7326: IFTRUE 7330
7328: GO 7442
7330: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7331: LD_ADDR_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: LD_INT 7
7347: PUSH
7348: LD_INT 11
7350: PUSH
7351: LD_INT 12
7353: PUSH
7354: LD_INT 15
7356: PUSH
7357: LD_INT 16
7359: PUSH
7360: LD_INT 20
7362: PUSH
7363: LD_INT 21
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 23
7371: PUSH
7372: LD_INT 25
7374: PUSH
7375: LD_INT 26
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 101
7396: PUSH
7397: LD_INT 102
7399: PUSH
7400: LD_INT 103
7402: PUSH
7403: LD_INT 105
7405: PUSH
7406: LD_INT 106
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 112
7414: PUSH
7415: LD_INT 116
7417: PUSH
7418: LD_INT 117
7420: PUSH
7421: LD_INT 118
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: ST_TO_ADDR
7440: GO 9843
7442: LD_INT 8
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7590
7450: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: LD_INT 2
7458: PUSH
7459: LD_INT 4
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: LD_INT 6
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: LD_INT 8
7473: PUSH
7474: LD_INT 11
7476: PUSH
7477: LD_INT 12
7479: PUSH
7480: LD_INT 15
7482: PUSH
7483: LD_INT 16
7485: PUSH
7486: LD_INT 20
7488: PUSH
7489: LD_INT 21
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 23
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 26
7503: PUSH
7504: LD_INT 30
7506: PUSH
7507: LD_INT 31
7509: PUSH
7510: LD_INT 32
7512: PUSH
7513: LD_INT 36
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 101
7540: PUSH
7541: LD_INT 102
7543: PUSH
7544: LD_INT 103
7546: PUSH
7547: LD_INT 105
7549: PUSH
7550: LD_INT 106
7552: PUSH
7553: LD_INT 108
7555: PUSH
7556: LD_INT 109
7558: PUSH
7559: LD_INT 112
7561: PUSH
7562: LD_INT 116
7564: PUSH
7565: LD_INT 117
7567: PUSH
7568: LD_INT 118
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: ST_TO_ADDR
7588: GO 9843
7590: LD_INT 9
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7746
7598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 4
7609: PUSH
7610: LD_INT 5
7612: PUSH
7613: LD_INT 6
7615: PUSH
7616: LD_INT 7
7618: PUSH
7619: LD_INT 8
7621: PUSH
7622: LD_INT 11
7624: PUSH
7625: LD_INT 12
7627: PUSH
7628: LD_INT 15
7630: PUSH
7631: LD_INT 16
7633: PUSH
7634: LD_INT 20
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 22
7642: PUSH
7643: LD_INT 23
7645: PUSH
7646: LD_INT 25
7648: PUSH
7649: LD_INT 26
7651: PUSH
7652: LD_INT 28
7654: PUSH
7655: LD_INT 30
7657: PUSH
7658: LD_INT 31
7660: PUSH
7661: LD_INT 32
7663: PUSH
7664: LD_INT 36
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 101
7692: PUSH
7693: LD_INT 102
7695: PUSH
7696: LD_INT 103
7698: PUSH
7699: LD_INT 105
7701: PUSH
7702: LD_INT 106
7704: PUSH
7705: LD_INT 108
7707: PUSH
7708: LD_INT 109
7710: PUSH
7711: LD_INT 112
7713: PUSH
7714: LD_INT 114
7716: PUSH
7717: LD_INT 116
7719: PUSH
7720: LD_INT 117
7722: PUSH
7723: LD_INT 118
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: ST_TO_ADDR
7744: GO 9843
7746: LD_INT 10
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7950
7754: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 4
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: LD_INT 6
7771: PUSH
7772: LD_INT 7
7774: PUSH
7775: LD_INT 8
7777: PUSH
7778: LD_INT 9
7780: PUSH
7781: LD_INT 10
7783: PUSH
7784: LD_INT 11
7786: PUSH
7787: LD_INT 12
7789: PUSH
7790: LD_INT 13
7792: PUSH
7793: LD_INT 14
7795: PUSH
7796: LD_INT 15
7798: PUSH
7799: LD_INT 16
7801: PUSH
7802: LD_INT 17
7804: PUSH
7805: LD_INT 18
7807: PUSH
7808: LD_INT 19
7810: PUSH
7811: LD_INT 20
7813: PUSH
7814: LD_INT 21
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_INT 23
7822: PUSH
7823: LD_INT 24
7825: PUSH
7826: LD_INT 25
7828: PUSH
7829: LD_INT 26
7831: PUSH
7832: LD_INT 28
7834: PUSH
7835: LD_INT 30
7837: PUSH
7838: LD_INT 31
7840: PUSH
7841: LD_INT 32
7843: PUSH
7844: LD_INT 36
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 101
7880: PUSH
7881: LD_INT 102
7883: PUSH
7884: LD_INT 103
7886: PUSH
7887: LD_INT 104
7889: PUSH
7890: LD_INT 105
7892: PUSH
7893: LD_INT 106
7895: PUSH
7896: LD_INT 107
7898: PUSH
7899: LD_INT 108
7901: PUSH
7902: LD_INT 109
7904: PUSH
7905: LD_INT 110
7907: PUSH
7908: LD_INT 111
7910: PUSH
7911: LD_INT 112
7913: PUSH
7914: LD_INT 114
7916: PUSH
7917: LD_INT 116
7919: PUSH
7920: LD_INT 117
7922: PUSH
7923: LD_INT 118
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 9843
7950: LD_INT 11
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 8162
7958: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: LD_INT 6
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 13
7999: PUSH
8000: LD_INT 14
8002: PUSH
8003: LD_INT 15
8005: PUSH
8006: LD_INT 16
8008: PUSH
8009: LD_INT 17
8011: PUSH
8012: LD_INT 18
8014: PUSH
8015: LD_INT 19
8017: PUSH
8018: LD_INT 20
8020: PUSH
8021: LD_INT 21
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_INT 23
8029: PUSH
8030: LD_INT 24
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 26
8038: PUSH
8039: LD_INT 28
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: LD_INT 32
8050: PUSH
8051: LD_INT 34
8053: PUSH
8054: LD_INT 36
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 101
8092: PUSH
8093: LD_INT 102
8095: PUSH
8096: LD_INT 103
8098: PUSH
8099: LD_INT 104
8101: PUSH
8102: LD_INT 105
8104: PUSH
8105: LD_INT 106
8107: PUSH
8108: LD_INT 107
8110: PUSH
8111: LD_INT 108
8113: PUSH
8114: LD_INT 109
8116: PUSH
8117: LD_INT 110
8119: PUSH
8120: LD_INT 111
8122: PUSH
8123: LD_INT 112
8125: PUSH
8126: LD_INT 114
8128: PUSH
8129: LD_INT 116
8131: PUSH
8132: LD_INT 117
8134: PUSH
8135: LD_INT 118
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: ST_TO_ADDR
8160: GO 9843
8162: LD_INT 12
8164: DOUBLE
8165: EQUAL
8166: IFTRUE 8170
8168: GO 8390
8170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: LD_INT 3
8184: PUSH
8185: LD_INT 4
8187: PUSH
8188: LD_INT 5
8190: PUSH
8191: LD_INT 6
8193: PUSH
8194: LD_INT 7
8196: PUSH
8197: LD_INT 8
8199: PUSH
8200: LD_INT 9
8202: PUSH
8203: LD_INT 10
8205: PUSH
8206: LD_INT 11
8208: PUSH
8209: LD_INT 12
8211: PUSH
8212: LD_INT 13
8214: PUSH
8215: LD_INT 14
8217: PUSH
8218: LD_INT 15
8220: PUSH
8221: LD_INT 16
8223: PUSH
8224: LD_INT 17
8226: PUSH
8227: LD_INT 18
8229: PUSH
8230: LD_INT 19
8232: PUSH
8233: LD_INT 20
8235: PUSH
8236: LD_INT 21
8238: PUSH
8239: LD_INT 22
8241: PUSH
8242: LD_INT 23
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: LD_INT 25
8250: PUSH
8251: LD_INT 26
8253: PUSH
8254: LD_INT 27
8256: PUSH
8257: LD_INT 28
8259: PUSH
8260: LD_INT 30
8262: PUSH
8263: LD_INT 31
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 33
8271: PUSH
8272: LD_INT 34
8274: PUSH
8275: LD_INT 36
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 101
8316: PUSH
8317: LD_INT 102
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 104
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 107
8334: PUSH
8335: LD_INT 108
8337: PUSH
8338: LD_INT 109
8340: PUSH
8341: LD_INT 110
8343: PUSH
8344: LD_INT 111
8346: PUSH
8347: LD_INT 112
8349: PUSH
8350: LD_INT 113
8352: PUSH
8353: LD_INT 114
8355: PUSH
8356: LD_INT 116
8358: PUSH
8359: LD_INT 117
8361: PUSH
8362: LD_INT 118
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: ST_TO_ADDR
8388: GO 9843
8390: LD_INT 13
8392: DOUBLE
8393: EQUAL
8394: IFTRUE 8398
8396: GO 8606
8398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8399: LD_ADDR_VAR 0 2
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: LD_INT 4
8415: PUSH
8416: LD_INT 5
8418: PUSH
8419: LD_INT 8
8421: PUSH
8422: LD_INT 9
8424: PUSH
8425: LD_INT 10
8427: PUSH
8428: LD_INT 11
8430: PUSH
8431: LD_INT 12
8433: PUSH
8434: LD_INT 14
8436: PUSH
8437: LD_INT 15
8439: PUSH
8440: LD_INT 16
8442: PUSH
8443: LD_INT 17
8445: PUSH
8446: LD_INT 18
8448: PUSH
8449: LD_INT 19
8451: PUSH
8452: LD_INT 20
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 22
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 24
8466: PUSH
8467: LD_INT 25
8469: PUSH
8470: LD_INT 26
8472: PUSH
8473: LD_INT 27
8475: PUSH
8476: LD_INT 28
8478: PUSH
8479: LD_INT 30
8481: PUSH
8482: LD_INT 31
8484: PUSH
8485: LD_INT 32
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 34
8493: PUSH
8494: LD_INT 36
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 101
8532: PUSH
8533: LD_INT 102
8535: PUSH
8536: LD_INT 103
8538: PUSH
8539: LD_INT 104
8541: PUSH
8542: LD_INT 105
8544: PUSH
8545: LD_INT 106
8547: PUSH
8548: LD_INT 107
8550: PUSH
8551: LD_INT 108
8553: PUSH
8554: LD_INT 109
8556: PUSH
8557: LD_INT 110
8559: PUSH
8560: LD_INT 111
8562: PUSH
8563: LD_INT 112
8565: PUSH
8566: LD_INT 113
8568: PUSH
8569: LD_INT 114
8571: PUSH
8572: LD_INT 116
8574: PUSH
8575: LD_INT 117
8577: PUSH
8578: LD_INT 118
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: ST_TO_ADDR
8604: GO 9843
8606: LD_INT 14
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8838
8614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: LD_INT 6
8637: PUSH
8638: LD_INT 7
8640: PUSH
8641: LD_INT 8
8643: PUSH
8644: LD_INT 9
8646: PUSH
8647: LD_INT 10
8649: PUSH
8650: LD_INT 11
8652: PUSH
8653: LD_INT 12
8655: PUSH
8656: LD_INT 13
8658: PUSH
8659: LD_INT 14
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 17
8670: PUSH
8671: LD_INT 18
8673: PUSH
8674: LD_INT 19
8676: PUSH
8677: LD_INT 20
8679: PUSH
8680: LD_INT 21
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_INT 23
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 27
8700: PUSH
8701: LD_INT 28
8703: PUSH
8704: LD_INT 29
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 31
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: LD_INT 33
8718: PUSH
8719: LD_INT 34
8721: PUSH
8722: LD_INT 36
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 101
8764: PUSH
8765: LD_INT 102
8767: PUSH
8768: LD_INT 103
8770: PUSH
8771: LD_INT 104
8773: PUSH
8774: LD_INT 105
8776: PUSH
8777: LD_INT 106
8779: PUSH
8780: LD_INT 107
8782: PUSH
8783: LD_INT 108
8785: PUSH
8786: LD_INT 109
8788: PUSH
8789: LD_INT 110
8791: PUSH
8792: LD_INT 111
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: LD_INT 113
8800: PUSH
8801: LD_INT 114
8803: PUSH
8804: LD_INT 116
8806: PUSH
8807: LD_INT 117
8809: PUSH
8810: LD_INT 118
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 9843
8838: LD_INT 15
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 9070
8846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: LD_INT 6
8869: PUSH
8870: LD_INT 7
8872: PUSH
8873: LD_INT 8
8875: PUSH
8876: LD_INT 9
8878: PUSH
8879: LD_INT 10
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 13
8890: PUSH
8891: LD_INT 14
8893: PUSH
8894: LD_INT 15
8896: PUSH
8897: LD_INT 16
8899: PUSH
8900: LD_INT 17
8902: PUSH
8903: LD_INT 18
8905: PUSH
8906: LD_INT 19
8908: PUSH
8909: LD_INT 20
8911: PUSH
8912: LD_INT 21
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_INT 23
8920: PUSH
8921: LD_INT 24
8923: PUSH
8924: LD_INT 25
8926: PUSH
8927: LD_INT 26
8929: PUSH
8930: LD_INT 27
8932: PUSH
8933: LD_INT 28
8935: PUSH
8936: LD_INT 29
8938: PUSH
8939: LD_INT 30
8941: PUSH
8942: LD_INT 31
8944: PUSH
8945: LD_INT 32
8947: PUSH
8948: LD_INT 33
8950: PUSH
8951: LD_INT 34
8953: PUSH
8954: LD_INT 36
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 101
8996: PUSH
8997: LD_INT 102
8999: PUSH
9000: LD_INT 103
9002: PUSH
9003: LD_INT 104
9005: PUSH
9006: LD_INT 105
9008: PUSH
9009: LD_INT 106
9011: PUSH
9012: LD_INT 107
9014: PUSH
9015: LD_INT 108
9017: PUSH
9018: LD_INT 109
9020: PUSH
9021: LD_INT 110
9023: PUSH
9024: LD_INT 111
9026: PUSH
9027: LD_INT 112
9029: PUSH
9030: LD_INT 113
9032: PUSH
9033: LD_INT 114
9035: PUSH
9036: LD_INT 116
9038: PUSH
9039: LD_INT 117
9041: PUSH
9042: LD_INT 118
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: ST_TO_ADDR
9068: GO 9843
9070: LD_INT 16
9072: DOUBLE
9073: EQUAL
9074: IFTRUE 9078
9076: GO 9214
9078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_INT 2
9086: PUSH
9087: LD_INT 4
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 11
9098: PUSH
9099: LD_INT 12
9101: PUSH
9102: LD_INT 15
9104: PUSH
9105: LD_INT 16
9107: PUSH
9108: LD_INT 20
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 25
9122: PUSH
9123: LD_INT 26
9125: PUSH
9126: LD_INT 30
9128: PUSH
9129: LD_INT 31
9131: PUSH
9132: LD_INT 32
9134: PUSH
9135: LD_INT 33
9137: PUSH
9138: LD_INT 34
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 101
9164: PUSH
9165: LD_INT 102
9167: PUSH
9168: LD_INT 103
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 108
9176: PUSH
9177: LD_INT 112
9179: PUSH
9180: LD_INT 113
9182: PUSH
9183: LD_INT 114
9185: PUSH
9186: LD_INT 116
9188: PUSH
9189: LD_INT 117
9191: PUSH
9192: LD_INT 118
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: ST_TO_ADDR
9212: GO 9843
9214: LD_INT 17
9216: DOUBLE
9217: EQUAL
9218: IFTRUE 9222
9220: GO 9446
9222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9223: LD_ADDR_VAR 0 2
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: LD_INT 3
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 6
9245: PUSH
9246: LD_INT 7
9248: PUSH
9249: LD_INT 8
9251: PUSH
9252: LD_INT 9
9254: PUSH
9255: LD_INT 10
9257: PUSH
9258: LD_INT 11
9260: PUSH
9261: LD_INT 12
9263: PUSH
9264: LD_INT 13
9266: PUSH
9267: LD_INT 14
9269: PUSH
9270: LD_INT 15
9272: PUSH
9273: LD_INT 16
9275: PUSH
9276: LD_INT 17
9278: PUSH
9279: LD_INT 18
9281: PUSH
9282: LD_INT 19
9284: PUSH
9285: LD_INT 20
9287: PUSH
9288: LD_INT 21
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 23
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 26
9305: PUSH
9306: LD_INT 27
9308: PUSH
9309: LD_INT 28
9311: PUSH
9312: LD_INT 29
9314: PUSH
9315: LD_INT 30
9317: PUSH
9318: LD_INT 31
9320: PUSH
9321: LD_INT 32
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 34
9329: PUSH
9330: LD_INT 36
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 101
9372: PUSH
9373: LD_INT 102
9375: PUSH
9376: LD_INT 103
9378: PUSH
9379: LD_INT 104
9381: PUSH
9382: LD_INT 105
9384: PUSH
9385: LD_INT 106
9387: PUSH
9388: LD_INT 107
9390: PUSH
9391: LD_INT 108
9393: PUSH
9394: LD_INT 109
9396: PUSH
9397: LD_INT 110
9399: PUSH
9400: LD_INT 111
9402: PUSH
9403: LD_INT 112
9405: PUSH
9406: LD_INT 113
9408: PUSH
9409: LD_INT 114
9411: PUSH
9412: LD_INT 116
9414: PUSH
9415: LD_INT 117
9417: PUSH
9418: LD_INT 118
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: ST_TO_ADDR
9444: GO 9843
9446: LD_INT 18
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9602
9454: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9455: LD_ADDR_VAR 0 2
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 4
9465: PUSH
9466: LD_INT 5
9468: PUSH
9469: LD_INT 7
9471: PUSH
9472: LD_INT 11
9474: PUSH
9475: LD_INT 12
9477: PUSH
9478: LD_INT 15
9480: PUSH
9481: LD_INT 16
9483: PUSH
9484: LD_INT 20
9486: PUSH
9487: LD_INT 21
9489: PUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 23
9495: PUSH
9496: LD_INT 25
9498: PUSH
9499: LD_INT 26
9501: PUSH
9502: LD_INT 30
9504: PUSH
9505: LD_INT 31
9507: PUSH
9508: LD_INT 32
9510: PUSH
9511: LD_INT 33
9513: PUSH
9514: LD_INT 34
9516: PUSH
9517: LD_INT 35
9519: PUSH
9520: LD_INT 36
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 101
9548: PUSH
9549: LD_INT 102
9551: PUSH
9552: LD_INT 103
9554: PUSH
9555: LD_INT 106
9557: PUSH
9558: LD_INT 108
9560: PUSH
9561: LD_INT 112
9563: PUSH
9564: LD_INT 113
9566: PUSH
9567: LD_INT 114
9569: PUSH
9570: LD_INT 115
9572: PUSH
9573: LD_INT 116
9575: PUSH
9576: LD_INT 117
9578: PUSH
9579: LD_INT 118
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: ST_TO_ADDR
9600: GO 9843
9602: LD_INT 19
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9842
9610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9611: LD_ADDR_VAR 0 2
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 6
9633: PUSH
9634: LD_INT 7
9636: PUSH
9637: LD_INT 8
9639: PUSH
9640: LD_INT 9
9642: PUSH
9643: LD_INT 10
9645: PUSH
9646: LD_INT 11
9648: PUSH
9649: LD_INT 12
9651: PUSH
9652: LD_INT 13
9654: PUSH
9655: LD_INT 14
9657: PUSH
9658: LD_INT 15
9660: PUSH
9661: LD_INT 16
9663: PUSH
9664: LD_INT 17
9666: PUSH
9667: LD_INT 18
9669: PUSH
9670: LD_INT 19
9672: PUSH
9673: LD_INT 20
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 22
9681: PUSH
9682: LD_INT 23
9684: PUSH
9685: LD_INT 24
9687: PUSH
9688: LD_INT 25
9690: PUSH
9691: LD_INT 26
9693: PUSH
9694: LD_INT 27
9696: PUSH
9697: LD_INT 28
9699: PUSH
9700: LD_INT 29
9702: PUSH
9703: LD_INT 30
9705: PUSH
9706: LD_INT 31
9708: PUSH
9709: LD_INT 32
9711: PUSH
9712: LD_INT 33
9714: PUSH
9715: LD_INT 34
9717: PUSH
9718: LD_INT 35
9720: PUSH
9721: LD_INT 36
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 101
9764: PUSH
9765: LD_INT 102
9767: PUSH
9768: LD_INT 103
9770: PUSH
9771: LD_INT 104
9773: PUSH
9774: LD_INT 105
9776: PUSH
9777: LD_INT 106
9779: PUSH
9780: LD_INT 107
9782: PUSH
9783: LD_INT 108
9785: PUSH
9786: LD_INT 109
9788: PUSH
9789: LD_INT 110
9791: PUSH
9792: LD_INT 111
9794: PUSH
9795: LD_INT 112
9797: PUSH
9798: LD_INT 113
9800: PUSH
9801: LD_INT 114
9803: PUSH
9804: LD_INT 115
9806: PUSH
9807: LD_INT 116
9809: PUSH
9810: LD_INT 117
9812: PUSH
9813: LD_INT 118
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: ST_TO_ADDR
9840: GO 9843
9842: POP
// end else
9843: GO 10074
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9845: LD_ADDR_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 4
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: LD_INT 6
9867: PUSH
9868: LD_INT 7
9870: PUSH
9871: LD_INT 8
9873: PUSH
9874: LD_INT 9
9876: PUSH
9877: LD_INT 10
9879: PUSH
9880: LD_INT 11
9882: PUSH
9883: LD_INT 12
9885: PUSH
9886: LD_INT 13
9888: PUSH
9889: LD_INT 14
9891: PUSH
9892: LD_INT 15
9894: PUSH
9895: LD_INT 16
9897: PUSH
9898: LD_INT 17
9900: PUSH
9901: LD_INT 18
9903: PUSH
9904: LD_INT 19
9906: PUSH
9907: LD_INT 20
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 23
9918: PUSH
9919: LD_INT 24
9921: PUSH
9922: LD_INT 25
9924: PUSH
9925: LD_INT 26
9927: PUSH
9928: LD_INT 27
9930: PUSH
9931: LD_INT 28
9933: PUSH
9934: LD_INT 29
9936: PUSH
9937: LD_INT 30
9939: PUSH
9940: LD_INT 31
9942: PUSH
9943: LD_INT 32
9945: PUSH
9946: LD_INT 33
9948: PUSH
9949: LD_INT 34
9951: PUSH
9952: LD_INT 35
9954: PUSH
9955: LD_INT 36
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 104
10007: PUSH
10008: LD_INT 105
10010: PUSH
10011: LD_INT 106
10013: PUSH
10014: LD_INT 107
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 109
10022: PUSH
10023: LD_INT 110
10025: PUSH
10026: LD_INT 111
10028: PUSH
10029: LD_INT 112
10031: PUSH
10032: LD_INT 113
10034: PUSH
10035: LD_INT 114
10037: PUSH
10038: LD_INT 115
10040: PUSH
10041: LD_INT 116
10043: PUSH
10044: LD_INT 117
10046: PUSH
10047: LD_INT 118
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if result then
10074: LD_VAR 0 2
10078: IFFALSE 10864
// begin normal :=  ;
10080: LD_ADDR_VAR 0 5
10084: PUSH
10085: LD_STRING 
10087: ST_TO_ADDR
// hardcore :=  ;
10088: LD_ADDR_VAR 0 6
10092: PUSH
10093: LD_STRING 
10095: ST_TO_ADDR
// active :=  ;
10096: LD_ADDR_VAR 0 7
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// for i = 1 to normalCounter do
10104: LD_ADDR_VAR 0 8
10108: PUSH
10109: DOUBLE
10110: LD_INT 1
10112: DEC
10113: ST_TO_ADDR
10114: LD_EXP 16
10118: PUSH
10119: FOR_TO
10120: IFFALSE 10221
// begin tmp := 0 ;
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: LD_STRING 0
10129: ST_TO_ADDR
// if result [ 1 ] then
10130: LD_VAR 0 2
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: IFFALSE 10203
// if result [ 1 ] [ 1 ] = i then
10140: LD_VAR 0 2
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PUSH
10153: LD_VAR 0 8
10157: EQUAL
10158: IFFALSE 10203
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10160: LD_ADDR_VAR 0 2
10164: PUSH
10165: LD_VAR 0 2
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: LD_VAR 0 2
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 3
10189: PPUSH
10190: CALL_OW 1
10194: ST_TO_ADDR
// tmp := 1 ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_STRING 1
10202: ST_TO_ADDR
// end ; normal := normal & tmp ;
10203: LD_ADDR_VAR 0 5
10207: PUSH
10208: LD_VAR 0 5
10212: PUSH
10213: LD_VAR 0 3
10217: STR
10218: ST_TO_ADDR
// end ;
10219: GO 10119
10221: POP
10222: POP
// for i = 1 to hardcoreCounter do
10223: LD_ADDR_VAR 0 8
10227: PUSH
10228: DOUBLE
10229: LD_INT 1
10231: DEC
10232: ST_TO_ADDR
10233: LD_EXP 17
10237: PUSH
10238: FOR_TO
10239: IFFALSE 10344
// begin tmp := 0 ;
10241: LD_ADDR_VAR 0 3
10245: PUSH
10246: LD_STRING 0
10248: ST_TO_ADDR
// if result [ 2 ] then
10249: LD_VAR 0 2
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: IFFALSE 10326
// if result [ 2 ] [ 1 ] = 100 + i then
10259: LD_VAR 0 2
10263: PUSH
10264: LD_INT 2
10266: ARRAY
10267: PUSH
10268: LD_INT 1
10270: ARRAY
10271: PUSH
10272: LD_INT 100
10274: PUSH
10275: LD_VAR 0 8
10279: PLUS
10280: EQUAL
10281: IFFALSE 10326
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: LD_VAR 0 2
10292: PPUSH
10293: LD_INT 2
10295: PPUSH
10296: LD_VAR 0 2
10300: PUSH
10301: LD_INT 2
10303: ARRAY
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 3
10312: PPUSH
10313: CALL_OW 1
10317: ST_TO_ADDR
// tmp := 1 ;
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_STRING 1
10325: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10326: LD_ADDR_VAR 0 6
10330: PUSH
10331: LD_VAR 0 6
10335: PUSH
10336: LD_VAR 0 3
10340: STR
10341: ST_TO_ADDR
// end ;
10342: GO 10238
10344: POP
10345: POP
// if isGameLoad then
10346: LD_VAR 0 1
10350: IFFALSE 10825
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10352: LD_ADDR_VAR 0 4
10356: PUSH
10357: LD_EXP 20
10361: PUSH
10362: LD_EXP 19
10366: PUSH
10367: LD_EXP 21
10371: PUSH
10372: LD_EXP 18
10376: PUSH
10377: LD_EXP 22
10381: PUSH
10382: LD_EXP 23
10386: PUSH
10387: LD_EXP 24
10391: PUSH
10392: LD_EXP 25
10396: PUSH
10397: LD_EXP 26
10401: PUSH
10402: LD_EXP 27
10406: PUSH
10407: LD_EXP 28
10411: PUSH
10412: LD_EXP 29
10416: PUSH
10417: LD_EXP 30
10421: PUSH
10422: LD_EXP 31
10426: PUSH
10427: LD_EXP 39
10431: PUSH
10432: LD_EXP 40
10436: PUSH
10437: LD_EXP 41
10441: PUSH
10442: LD_EXP 42
10446: PUSH
10447: LD_EXP 44
10451: PUSH
10452: LD_EXP 45
10456: PUSH
10457: LD_EXP 46
10461: PUSH
10462: LD_EXP 49
10466: PUSH
10467: LD_EXP 51
10471: PUSH
10472: LD_EXP 52
10476: PUSH
10477: LD_EXP 53
10481: PUSH
10482: LD_EXP 55
10486: PUSH
10487: LD_EXP 56
10491: PUSH
10492: LD_EXP 59
10496: PUSH
10497: LD_EXP 60
10501: PUSH
10502: LD_EXP 61
10506: PUSH
10507: LD_EXP 62
10511: PUSH
10512: LD_EXP 63
10516: PUSH
10517: LD_EXP 64
10521: PUSH
10522: LD_EXP 65
10526: PUSH
10527: LD_EXP 66
10531: PUSH
10532: LD_EXP 67
10536: PUSH
10537: LD_EXP 32
10541: PUSH
10542: LD_EXP 33
10546: PUSH
10547: LD_EXP 36
10551: PUSH
10552: LD_EXP 37
10556: PUSH
10557: LD_EXP 38
10561: PUSH
10562: LD_EXP 34
10566: PUSH
10567: LD_EXP 35
10571: PUSH
10572: LD_EXP 43
10576: PUSH
10577: LD_EXP 47
10581: PUSH
10582: LD_EXP 48
10586: PUSH
10587: LD_EXP 50
10591: PUSH
10592: LD_EXP 54
10596: PUSH
10597: LD_EXP 57
10601: PUSH
10602: LD_EXP 58
10606: PUSH
10607: LD_EXP 68
10611: PUSH
10612: LD_EXP 69
10616: PUSH
10617: LD_EXP 70
10621: PUSH
10622: LD_EXP 71
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
// tmp :=  ;
10683: LD_ADDR_VAR 0 3
10687: PUSH
10688: LD_STRING 
10690: ST_TO_ADDR
// for i = 1 to normalCounter do
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: DOUBLE
10697: LD_INT 1
10699: DEC
10700: ST_TO_ADDR
10701: LD_EXP 16
10705: PUSH
10706: FOR_TO
10707: IFFALSE 10743
// begin if flags [ i ] then
10709: LD_VAR 0 4
10713: PUSH
10714: LD_VAR 0 8
10718: ARRAY
10719: IFFALSE 10741
// tmp := tmp & i & ; ;
10721: LD_ADDR_VAR 0 3
10725: PUSH
10726: LD_VAR 0 3
10730: PUSH
10731: LD_VAR 0 8
10735: STR
10736: PUSH
10737: LD_STRING ;
10739: STR
10740: ST_TO_ADDR
// end ;
10741: GO 10706
10743: POP
10744: POP
// for i = 1 to hardcoreCounter do
10745: LD_ADDR_VAR 0 8
10749: PUSH
10750: DOUBLE
10751: LD_INT 1
10753: DEC
10754: ST_TO_ADDR
10755: LD_EXP 17
10759: PUSH
10760: FOR_TO
10761: IFFALSE 10807
// begin if flags [ normalCounter + i ] then
10763: LD_VAR 0 4
10767: PUSH
10768: LD_EXP 16
10772: PUSH
10773: LD_VAR 0 8
10777: PLUS
10778: ARRAY
10779: IFFALSE 10805
// tmp := tmp & ( 100 + i ) & ; ;
10781: LD_ADDR_VAR 0 3
10785: PUSH
10786: LD_VAR 0 3
10790: PUSH
10791: LD_INT 100
10793: PUSH
10794: LD_VAR 0 8
10798: PLUS
10799: STR
10800: PUSH
10801: LD_STRING ;
10803: STR
10804: ST_TO_ADDR
// end ;
10805: GO 10760
10807: POP
10808: POP
// if tmp then
10809: LD_VAR 0 3
10813: IFFALSE 10825
// active := tmp ;
10815: LD_ADDR_VAR 0 7
10819: PUSH
10820: LD_VAR 0 3
10824: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10825: LD_STRING getStreamItemsFromMission("
10827: PUSH
10828: LD_VAR 0 5
10832: STR
10833: PUSH
10834: LD_STRING ","
10836: STR
10837: PUSH
10838: LD_VAR 0 6
10842: STR
10843: PUSH
10844: LD_STRING ","
10846: STR
10847: PUSH
10848: LD_VAR 0 7
10852: STR
10853: PUSH
10854: LD_STRING ")
10856: STR
10857: PPUSH
10858: CALL_OW 559
// end else
10862: GO 10871
// ToLua ( getStreamItemsFromMission("","","") ) ;
10864: LD_STRING getStreamItemsFromMission("","","")
10866: PPUSH
10867: CALL_OW 559
// end ;
10871: LD_VAR 0 2
10875: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10876: LD_EXP 15
10880: PUSH
10881: LD_EXP 20
10885: AND
10886: IFFALSE 11010
10888: GO 10890
10890: DISABLE
10891: LD_INT 0
10893: PPUSH
10894: PPUSH
// begin enable ;
10895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_INT 22
10903: PUSH
10904: LD_OWVAR 2
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 2
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 7
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 34
10928: PUSH
10929: LD_INT 45
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 34
10938: PUSH
10939: LD_INT 28
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 34
10948: PUSH
10949: LD_INT 47
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PPUSH
10967: CALL_OW 69
10971: ST_TO_ADDR
// if not tmp then
10972: LD_VAR 0 2
10976: NOT
10977: IFFALSE 10981
// exit ;
10979: GO 11010
// for i in tmp do
10981: LD_ADDR_VAR 0 1
10985: PUSH
10986: LD_VAR 0 2
10990: PUSH
10991: FOR_IN
10992: IFFALSE 11008
// begin SetLives ( i , 0 ) ;
10994: LD_VAR 0 1
10998: PPUSH
10999: LD_INT 0
11001: PPUSH
11002: CALL_OW 234
// end ;
11006: GO 10991
11008: POP
11009: POP
// end ;
11010: PPOPN 2
11012: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11013: LD_EXP 15
11017: PUSH
11018: LD_EXP 21
11022: AND
11023: IFFALSE 11107
11025: GO 11027
11027: DISABLE
11028: LD_INT 0
11030: PPUSH
11031: PPUSH
// begin enable ;
11032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11033: LD_ADDR_VAR 0 2
11037: PUSH
11038: LD_INT 22
11040: PUSH
11041: LD_OWVAR 2
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 32
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: ST_TO_ADDR
// if not tmp then
11069: LD_VAR 0 2
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11107
// for i in tmp do
11078: LD_ADDR_VAR 0 1
11082: PUSH
11083: LD_VAR 0 2
11087: PUSH
11088: FOR_IN
11089: IFFALSE 11105
// begin SetLives ( i , 0 ) ;
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_INT 0
11098: PPUSH
11099: CALL_OW 234
// end ;
11103: GO 11088
11105: POP
11106: POP
// end ;
11107: PPOPN 2
11109: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11110: LD_EXP 15
11114: PUSH
11115: LD_EXP 18
11119: AND
11120: IFFALSE 11213
11122: GO 11124
11124: DISABLE
11125: LD_INT 0
11127: PPUSH
// begin enable ;
11128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: LD_INT 22
11136: PUSH
11137: LD_OWVAR 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 2
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 8
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: PUSH
11194: FOR_IN
11195: IFFALSE 11211
// begin SetClass ( i , 1 ) ;
11197: LD_VAR 0 1
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 336
// end ;
11209: GO 11194
11211: POP
11212: POP
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 19
11225: AND
11226: PUSH
11227: LD_OWVAR 65
11231: PUSH
11232: LD_INT 7
11234: LESS
11235: AND
11236: IFFALSE 11250
11238: GO 11240
11240: DISABLE
// begin enable ;
11241: ENABLE
// game_speed := 7 ;
11242: LD_ADDR_OWVAR 65
11246: PUSH
11247: LD_INT 7
11249: ST_TO_ADDR
// end ;
11250: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11251: LD_EXP 15
11255: PUSH
11256: LD_EXP 22
11260: AND
11261: IFFALSE 11463
11263: GO 11265
11265: DISABLE
11266: LD_INT 0
11268: PPUSH
11269: PPUSH
11270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_INT 81
11278: PUSH
11279: LD_OWVAR 2
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: ST_TO_ADDR
// if not tmp then
11307: LD_VAR 0 3
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11463
// if tmp > 5 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 5
11323: GREATER
11324: IFFALSE 11336
// k := 5 else
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 5
11333: ST_TO_ADDR
11334: GO 11346
// k := tmp ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_VAR 0 3
11345: ST_TO_ADDR
// for i := 1 to k do
11346: LD_ADDR_VAR 0 1
11350: PUSH
11351: DOUBLE
11352: LD_INT 1
11354: DEC
11355: ST_TO_ADDR
11356: LD_VAR 0 2
11360: PUSH
11361: FOR_TO
11362: IFFALSE 11461
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11364: LD_VAR 0 3
11368: PUSH
11369: LD_VAR 0 1
11373: ARRAY
11374: PPUSH
11375: LD_VAR 0 1
11379: PUSH
11380: LD_INT 4
11382: MOD
11383: PUSH
11384: LD_INT 1
11386: PLUS
11387: PPUSH
11388: CALL_OW 259
11392: PUSH
11393: LD_INT 10
11395: LESS
11396: IFFALSE 11459
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11398: LD_VAR 0 3
11402: PUSH
11403: LD_VAR 0 1
11407: ARRAY
11408: PPUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_INT 4
11416: MOD
11417: PUSH
11418: LD_INT 1
11420: PLUS
11421: PPUSH
11422: LD_VAR 0 3
11426: PUSH
11427: LD_VAR 0 1
11431: ARRAY
11432: PPUSH
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 4
11440: MOD
11441: PUSH
11442: LD_INT 1
11444: PLUS
11445: PPUSH
11446: CALL_OW 259
11450: PUSH
11451: LD_INT 1
11453: PLUS
11454: PPUSH
11455: CALL_OW 237
11459: GO 11361
11461: POP
11462: POP
// end ;
11463: PPOPN 3
11465: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11466: LD_EXP 15
11470: PUSH
11471: LD_EXP 23
11475: AND
11476: IFFALSE 11496
11478: GO 11480
11480: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11481: LD_INT 4
11483: PPUSH
11484: LD_OWVAR 2
11488: PPUSH
11489: LD_INT 0
11491: PPUSH
11492: CALL_OW 324
11496: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11497: LD_EXP 15
11501: PUSH
11502: LD_EXP 52
11506: AND
11507: IFFALSE 11527
11509: GO 11511
11511: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11512: LD_INT 19
11514: PPUSH
11515: LD_OWVAR 2
11519: PPUSH
11520: LD_INT 0
11522: PPUSH
11523: CALL_OW 324
11527: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11528: LD_EXP 15
11532: PUSH
11533: LD_EXP 24
11537: AND
11538: IFFALSE 11640
11540: GO 11542
11542: DISABLE
11543: LD_INT 0
11545: PPUSH
11546: PPUSH
// begin enable ;
11547: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_OWVAR 2
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 34
11570: PUSH
11571: LD_INT 11
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 34
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 69
11601: ST_TO_ADDR
// if not tmp then
11602: LD_VAR 0 2
11606: NOT
11607: IFFALSE 11611
// exit ;
11609: GO 11640
// for i in tmp do
11611: LD_ADDR_VAR 0 1
11615: PUSH
11616: LD_VAR 0 2
11620: PUSH
11621: FOR_IN
11622: IFFALSE 11638
// begin SetLives ( i , 0 ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: LD_INT 0
11631: PPUSH
11632: CALL_OW 234
// end ;
11636: GO 11621
11638: POP
11639: POP
// end ;
11640: PPOPN 2
11642: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11643: LD_EXP 15
11647: PUSH
11648: LD_EXP 25
11652: AND
11653: IFFALSE 11673
11655: GO 11657
11657: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11658: LD_INT 32
11660: PPUSH
11661: LD_OWVAR 2
11665: PPUSH
11666: LD_INT 0
11668: PPUSH
11669: CALL_OW 324
11673: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11674: LD_EXP 15
11678: PUSH
11679: LD_EXP 26
11683: AND
11684: IFFALSE 11865
11686: GO 11688
11688: DISABLE
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_INT 22
11701: PUSH
11702: LD_OWVAR 2
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 33
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 69
11729: ST_TO_ADDR
// if not tmp then
11730: LD_VAR 0 2
11734: NOT
11735: IFFALSE 11739
// exit ;
11737: GO 11865
// side := 0 ;
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_INT 0
11746: ST_TO_ADDR
// for i := 1 to 8 do
11747: LD_ADDR_VAR 0 1
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_INT 8
11759: PUSH
11760: FOR_TO
11761: IFFALSE 11809
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11763: LD_OWVAR 2
11767: PUSH
11768: LD_VAR 0 1
11772: NONEQUAL
11773: PUSH
11774: LD_OWVAR 2
11778: PPUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 81
11788: PUSH
11789: LD_INT 2
11791: EQUAL
11792: AND
11793: IFFALSE 11807
// begin side := i ;
11795: LD_ADDR_VAR 0 3
11799: PUSH
11800: LD_VAR 0 1
11804: ST_TO_ADDR
// break ;
11805: GO 11809
// end ;
11807: GO 11760
11809: POP
11810: POP
// if not side then
11811: LD_VAR 0 3
11815: NOT
11816: IFFALSE 11820
// exit ;
11818: GO 11865
// for i := 1 to tmp do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: DOUBLE
11826: LD_INT 1
11828: DEC
11829: ST_TO_ADDR
11830: LD_VAR 0 2
11834: PUSH
11835: FOR_TO
11836: IFFALSE 11863
// if Prob ( 60 ) then
11838: LD_INT 60
11840: PPUSH
11841: CALL_OW 13
11845: IFFALSE 11861
// SetSide ( i , side ) ;
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: CALL_OW 235
11861: GO 11835
11863: POP
11864: POP
// end ;
11865: PPOPN 3
11867: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11868: LD_EXP 15
11872: PUSH
11873: LD_EXP 28
11877: AND
11878: IFFALSE 11997
11880: GO 11882
11882: DISABLE
11883: LD_INT 0
11885: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11886: LD_ADDR_VAR 0 1
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_OWVAR 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 21
11905: PUSH
11906: LD_INT 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: LD_INT 23
11918: PUSH
11919: LD_INT 0
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11995
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 257
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 3
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: IN
11971: IFFALSE 11993
// SetClass ( un , rand ( 1 , 4 ) ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_INT 4
11983: PPUSH
11984: CALL_OW 12
11988: PPUSH
11989: CALL_OW 336
11993: GO 11940
11995: POP
11996: POP
// end ;
11997: PPOPN 1
11999: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12000: LD_EXP 15
12004: PUSH
12005: LD_EXP 27
12009: AND
12010: IFFALSE 12089
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 21
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: ST_TO_ADDR
// if not tmp then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: PPUSH
12082: LD_INT 100
12084: PPUSH
12085: CALL_OW 234
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12092: LD_EXP 15
12096: PUSH
12097: LD_EXP 29
12101: AND
12102: IFFALSE 12200
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 1
12114: PUSH
12115: LD_INT 22
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// if not tmp then
12146: LD_VAR 0 1
12150: NOT
12151: IFFALSE 12155
// exit ;
12153: GO 12200
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12155: LD_VAR 0 1
12159: PUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL_OW 12
12172: ARRAY
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: LD_INT 4
12179: PPUSH
12180: CALL_OW 12
12184: PPUSH
12185: LD_INT 3000
12187: PPUSH
12188: LD_INT 9000
12190: PPUSH
12191: CALL_OW 12
12195: PPUSH
12196: CALL_OW 492
// end ;
12200: PPOPN 1
12202: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12203: LD_EXP 15
12207: PUSH
12208: LD_EXP 30
12212: AND
12213: IFFALSE 12233
12215: GO 12217
12217: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12218: LD_INT 1
12220: PPUSH
12221: LD_OWVAR 2
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 324
12233: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12234: LD_EXP 15
12238: PUSH
12239: LD_EXP 31
12243: AND
12244: IFFALSE 12327
12246: GO 12248
12248: DISABLE
12249: LD_INT 0
12251: PPUSH
12252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_OWVAR 2
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: ST_TO_ADDR
// if not tmp then
12289: LD_VAR 0 2
12293: NOT
12294: IFFALSE 12298
// exit ;
12296: GO 12327
// for i in tmp do
12298: LD_ADDR_VAR 0 1
12302: PUSH
12303: LD_VAR 0 2
12307: PUSH
12308: FOR_IN
12309: IFFALSE 12325
// SetBLevel ( i , 10 ) ;
12311: LD_VAR 0 1
12315: PPUSH
12316: LD_INT 10
12318: PPUSH
12319: CALL_OW 241
12323: GO 12308
12325: POP
12326: POP
// end ;
12327: PPOPN 2
12329: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12330: LD_EXP 15
12334: PUSH
12335: LD_EXP 32
12339: AND
12340: IFFALSE 12451
12342: GO 12344
12344: DISABLE
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_OWVAR 2
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: ST_TO_ADDR
// if not tmp then
12386: LD_VAR 0 3
12390: NOT
12391: IFFALSE 12395
// exit ;
12393: GO 12451
// un := tmp [ rand ( 1 , tmp ) ] ;
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_VAR 0 3
12404: PUSH
12405: LD_INT 1
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: CALL_OW 12
12417: ARRAY
12418: ST_TO_ADDR
// if Crawls ( un ) then
12419: LD_VAR 0 2
12423: PPUSH
12424: CALL_OW 318
12428: IFFALSE 12439
// ComWalk ( un ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12439: LD_VAR 0 2
12443: PPUSH
12444: LD_INT 5
12446: PPUSH
12447: CALL_OW 336
// end ;
12451: PPOPN 3
12453: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12454: LD_EXP 15
12458: PUSH
12459: LD_EXP 33
12463: AND
12464: PUSH
12465: LD_OWVAR 67
12469: PUSH
12470: LD_INT 4
12472: LESS
12473: AND
12474: IFFALSE 12493
12476: GO 12478
12478: DISABLE
// begin Difficulty := Difficulty + 1 ;
12479: LD_ADDR_OWVAR 67
12483: PUSH
12484: LD_OWVAR 67
12488: PUSH
12489: LD_INT 1
12491: PLUS
12492: ST_TO_ADDR
// end ;
12493: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12494: LD_EXP 15
12498: PUSH
12499: LD_EXP 34
12503: AND
12504: IFFALSE 12607
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
// begin for i := 1 to 5 do
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: DOUBLE
12518: LD_INT 1
12520: DEC
12521: ST_TO_ADDR
12522: LD_INT 5
12524: PUSH
12525: FOR_TO
12526: IFFALSE 12605
// begin uc_nation := nation_nature ;
12528: LD_ADDR_OWVAR 21
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// uc_side := 0 ;
12536: LD_ADDR_OWVAR 20
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12544: LD_ADDR_OWVAR 29
12548: PUSH
12549: LD_INT 12
12551: PUSH
12552: LD_INT 12
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: ST_TO_ADDR
// hc_agressivity := 20 ;
12559: LD_ADDR_OWVAR 35
12563: PUSH
12564: LD_INT 20
12566: ST_TO_ADDR
// hc_class := class_tiger ;
12567: LD_ADDR_OWVAR 28
12571: PUSH
12572: LD_INT 14
12574: ST_TO_ADDR
// hc_gallery :=  ;
12575: LD_ADDR_OWVAR 33
12579: PUSH
12580: LD_STRING 
12582: ST_TO_ADDR
// hc_name :=  ;
12583: LD_ADDR_OWVAR 26
12587: PUSH
12588: LD_STRING 
12590: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12591: CALL_OW 44
12595: PPUSH
12596: LD_INT 0
12598: PPUSH
12599: CALL_OW 51
// end ;
12603: GO 12525
12605: POP
12606: POP
// end ;
12607: PPOPN 1
12609: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12610: LD_EXP 15
12614: PUSH
12615: LD_EXP 35
12619: AND
12620: IFFALSE 12629
12622: GO 12624
12624: DISABLE
// StreamSibBomb ;
12625: CALL 12630 0 0
12629: END
// export function StreamSibBomb ; var i , x , y ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
// result := false ;
12636: LD_ADDR_VAR 0 1
12640: PUSH
12641: LD_INT 0
12643: ST_TO_ADDR
// for i := 1 to 16 do
12644: LD_ADDR_VAR 0 2
12648: PUSH
12649: DOUBLE
12650: LD_INT 1
12652: DEC
12653: ST_TO_ADDR
12654: LD_INT 16
12656: PUSH
12657: FOR_TO
12658: IFFALSE 12857
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12660: LD_ADDR_VAR 0 3
12664: PUSH
12665: LD_INT 10
12667: PUSH
12668: LD_INT 20
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: LD_INT 40
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: LD_INT 60
12682: PUSH
12683: LD_INT 70
12685: PUSH
12686: LD_INT 80
12688: PUSH
12689: LD_INT 90
12691: PUSH
12692: LD_INT 100
12694: PUSH
12695: LD_INT 110
12697: PUSH
12698: LD_INT 120
12700: PUSH
12701: LD_INT 130
12703: PUSH
12704: LD_INT 140
12706: PUSH
12707: LD_INT 150
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 1
12729: PPUSH
12730: LD_INT 15
12732: PPUSH
12733: CALL_OW 12
12737: ARRAY
12738: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12739: LD_ADDR_VAR 0 4
12743: PUSH
12744: LD_INT 10
12746: PUSH
12747: LD_INT 20
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: LD_INT 40
12755: PUSH
12756: LD_INT 50
12758: PUSH
12759: LD_INT 60
12761: PUSH
12762: LD_INT 70
12764: PUSH
12765: LD_INT 80
12767: PUSH
12768: LD_INT 90
12770: PUSH
12771: LD_INT 100
12773: PUSH
12774: LD_INT 110
12776: PUSH
12777: LD_INT 120
12779: PUSH
12780: LD_INT 130
12782: PUSH
12783: LD_INT 140
12785: PUSH
12786: LD_INT 150
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 1
12808: PPUSH
12809: LD_INT 15
12811: PPUSH
12812: CALL_OW 12
12816: ARRAY
12817: ST_TO_ADDR
// if ValidHex ( x , y ) then
12818: LD_VAR 0 3
12822: PPUSH
12823: LD_VAR 0 4
12827: PPUSH
12828: CALL_OW 488
12832: IFFALSE 12855
// begin result := [ x , y ] ;
12834: LD_ADDR_VAR 0 1
12838: PUSH
12839: LD_VAR 0 3
12843: PUSH
12844: LD_VAR 0 4
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: ST_TO_ADDR
// break ;
12853: GO 12857
// end ; end ;
12855: GO 12657
12857: POP
12858: POP
// if result then
12859: LD_VAR 0 1
12863: IFFALSE 12923
// begin ToLua ( playSibBomb() ) ;
12865: LD_STRING playSibBomb()
12867: PPUSH
12868: CALL_OW 559
// wait ( 0 0$14 ) ;
12872: LD_INT 490
12874: PPUSH
12875: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 2
12895: ARRAY
12896: PPUSH
12897: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ARRAY
12918: PPUSH
12919: CALL_OW 429
// end ; end ;
12923: LD_VAR 0 1
12927: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12928: LD_EXP 15
12932: PUSH
12933: LD_EXP 37
12937: AND
12938: IFFALSE 12950
12940: GO 12942
12942: DISABLE
// YouLost (  ) ;
12943: LD_STRING 
12945: PPUSH
12946: CALL_OW 104
12950: END
// every 0 0$1 trigger StreamModeActive and sFog do
12951: LD_EXP 15
12955: PUSH
12956: LD_EXP 36
12960: AND
12961: IFFALSE 12975
12963: GO 12965
12965: DISABLE
// FogOff ( your_side ) ;
12966: LD_OWVAR 2
12970: PPUSH
12971: CALL_OW 344
12975: END
// every 0 0$1 trigger StreamModeActive and sSun do
12976: LD_EXP 15
12980: PUSH
12981: LD_EXP 38
12985: AND
12986: IFFALSE 13014
12988: GO 12990
12990: DISABLE
// begin solar_recharge_percent := 0 ;
12991: LD_ADDR_OWVAR 79
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12999: LD_INT 10500
13001: PPUSH
13002: CALL_OW 67
// solar_recharge_percent := 100 ;
13006: LD_ADDR_OWVAR 79
13010: PUSH
13011: LD_INT 100
13013: ST_TO_ADDR
// end ;
13014: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13015: LD_EXP 15
13019: PUSH
13020: LD_EXP 39
13024: AND
13025: IFFALSE 13264
13027: GO 13029
13029: DISABLE
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
13034: PPUSH
// begin tmp := [ ] ;
13035: LD_ADDR_VAR 0 3
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// for i := 1 to 6 do
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_INT 6
13054: PUSH
13055: FOR_TO
13056: IFFALSE 13161
// begin uc_nation := nation_nature ;
13058: LD_ADDR_OWVAR 21
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// uc_side := 0 ;
13066: LD_ADDR_OWVAR 20
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13074: LD_ADDR_OWVAR 29
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: ST_TO_ADDR
// hc_agressivity := 20 ;
13089: LD_ADDR_OWVAR 35
13093: PUSH
13094: LD_INT 20
13096: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13097: LD_ADDR_OWVAR 28
13101: PUSH
13102: LD_INT 17
13104: ST_TO_ADDR
// hc_gallery :=  ;
13105: LD_ADDR_OWVAR 33
13109: PUSH
13110: LD_STRING 
13112: ST_TO_ADDR
// hc_name :=  ;
13113: LD_ADDR_OWVAR 26
13117: PUSH
13118: LD_STRING 
13120: ST_TO_ADDR
// un := CreateHuman ;
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: CALL_OW 44
13130: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13131: LD_VAR 0 2
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 51
// tmp := tmp ^ un ;
13143: LD_ADDR_VAR 0 3
13147: PUSH
13148: LD_VAR 0 3
13152: PUSH
13153: LD_VAR 0 2
13157: ADD
13158: ST_TO_ADDR
// end ;
13159: GO 13055
13161: POP
13162: POP
// repeat wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// for un in tmp do
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 3
13179: PUSH
13180: FOR_IN
13181: IFFALSE 13255
// begin if IsDead ( un ) then
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 301
13192: IFFALSE 13212
// begin tmp := tmp diff un ;
13194: LD_ADDR_VAR 0 3
13198: PUSH
13199: LD_VAR 0 3
13203: PUSH
13204: LD_VAR 0 2
13208: DIFF
13209: ST_TO_ADDR
// continue ;
13210: GO 13180
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13212: LD_VAR 0 2
13216: PPUSH
13217: LD_INT 3
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_INT 0
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 69
13238: PPUSH
13239: LD_VAR 0 2
13243: PPUSH
13244: CALL_OW 74
13248: PPUSH
13249: CALL_OW 115
// end ;
13253: GO 13180
13255: POP
13256: POP
// until not tmp ;
13257: LD_VAR 0 3
13261: NOT
13262: IFFALSE 13163
// end ;
13264: PPOPN 3
13266: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13267: LD_EXP 15
13271: PUSH
13272: LD_EXP 40
13276: AND
13277: IFFALSE 13331
13279: GO 13281
13281: DISABLE
// begin ToLua ( displayTroll(); ) ;
13282: LD_STRING displayTroll();
13284: PPUSH
13285: CALL_OW 559
// wait ( 3 3$00 ) ;
13289: LD_INT 6300
13291: PPUSH
13292: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13296: LD_STRING hideTroll();
13298: PPUSH
13299: CALL_OW 559
// wait ( 1 1$00 ) ;
13303: LD_INT 2100
13305: PPUSH
13306: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13310: LD_STRING displayTroll();
13312: PPUSH
13313: CALL_OW 559
// wait ( 1 1$00 ) ;
13317: LD_INT 2100
13319: PPUSH
13320: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13324: LD_STRING hideTroll();
13326: PPUSH
13327: CALL_OW 559
// end ;
13331: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13332: LD_EXP 15
13336: PUSH
13337: LD_EXP 41
13341: AND
13342: IFFALSE 13405
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
// begin p := 0 ;
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 0
13357: ST_TO_ADDR
// repeat game_speed := 1 ;
13358: LD_ADDR_OWVAR 65
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// p := p + 1 ;
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 1
13385: PLUS
13386: ST_TO_ADDR
// until p >= 60 ;
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 60
13394: GREATEREQUAL
13395: IFFALSE 13358
// game_speed := 4 ;
13397: LD_ADDR_OWVAR 65
13401: PUSH
13402: LD_INT 4
13404: ST_TO_ADDR
// end ;
13405: PPOPN 1
13407: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13408: LD_EXP 15
13412: PUSH
13413: LD_EXP 42
13417: AND
13418: IFFALSE 13564
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_OWVAR 2
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_INT 0
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 69
13480: ST_TO_ADDR
// if not depot then
13481: LD_VAR 0 1
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 13564
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_VAR 0 1
13499: PUSH
13500: LD_INT 1
13502: PPUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: CALL_OW 274
13518: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13519: LD_VAR 0 2
13523: PPUSH
13524: LD_INT 1
13526: PPUSH
13527: LD_INT 0
13529: PPUSH
13530: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 2
13541: PPUSH
13542: LD_INT 0
13544: PPUSH
13545: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13549: LD_VAR 0 2
13553: PPUSH
13554: LD_INT 3
13556: PPUSH
13557: LD_INT 0
13559: PPUSH
13560: CALL_OW 277
// end ;
13564: PPOPN 2
13566: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13567: LD_EXP 15
13571: PUSH
13572: LD_EXP 43
13576: AND
13577: IFFALSE 13674
13579: GO 13581
13581: DISABLE
13582: LD_INT 0
13584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_OWVAR 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 21
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 3
13614: PUSH
13615: LD_INT 23
13617: PUSH
13618: LD_INT 0
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: ST_TO_ADDR
// if not tmp then
13639: LD_VAR 0 1
13643: NOT
13644: IFFALSE 13648
// exit ;
13646: GO 13674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13648: LD_VAR 0 1
13652: PUSH
13653: LD_INT 1
13655: PPUSH
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 12
13665: ARRAY
13666: PPUSH
13667: LD_INT 200
13669: PPUSH
13670: CALL_OW 234
// end ;
13674: PPOPN 1
13676: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13677: LD_EXP 15
13681: PUSH
13682: LD_EXP 44
13686: AND
13687: IFFALSE 13766
13689: GO 13691
13691: DISABLE
13692: LD_INT 0
13694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_OWVAR 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 21
13714: PUSH
13715: LD_INT 2
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: ST_TO_ADDR
// if not tmp then
13731: LD_VAR 0 1
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 13766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13740: LD_VAR 0 1
13744: PUSH
13745: LD_INT 1
13747: PPUSH
13748: LD_VAR 0 1
13752: PPUSH
13753: CALL_OW 12
13757: ARRAY
13758: PPUSH
13759: LD_INT 60
13761: PPUSH
13762: CALL_OW 234
// end ;
13766: PPOPN 1
13768: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13769: LD_EXP 15
13773: PUSH
13774: LD_EXP 45
13778: AND
13779: IFFALSE 13878
13781: GO 13783
13783: DISABLE
13784: LD_INT 0
13786: PPUSH
13787: PPUSH
// begin enable ;
13788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13789: LD_ADDR_VAR 0 1
13793: PUSH
13794: LD_INT 22
13796: PUSH
13797: LD_OWVAR 2
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 61
13808: PUSH
13809: EMPTY
13810: LIST
13811: PUSH
13812: LD_INT 33
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: ST_TO_ADDR
// if not tmp then
13832: LD_VAR 0 1
13836: NOT
13837: IFFALSE 13841
// exit ;
13839: GO 13878
// for i in tmp do
13841: LD_ADDR_VAR 0 2
13845: PUSH
13846: LD_VAR 0 1
13850: PUSH
13851: FOR_IN
13852: IFFALSE 13876
// if IsControledBy ( i ) then
13854: LD_VAR 0 2
13858: PPUSH
13859: CALL_OW 312
13863: IFFALSE 13874
// ComUnlink ( i ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 136
13874: GO 13851
13876: POP
13877: POP
// end ;
13878: PPOPN 2
13880: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13881: LD_EXP 15
13885: PUSH
13886: LD_EXP 46
13890: AND
13891: IFFALSE 14031
13893: GO 13895
13895: DISABLE
13896: LD_INT 0
13898: PPUSH
13899: PPUSH
// begin ToLua ( displayPowell(); ) ;
13900: LD_STRING displayPowell();
13902: PPUSH
13903: CALL_OW 559
// uc_side := 0 ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// uc_nation := 2 ;
13915: LD_ADDR_OWVAR 21
13919: PUSH
13920: LD_INT 2
13922: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13923: LD_ADDR_OWVAR 37
13927: PUSH
13928: LD_INT 14
13930: ST_TO_ADDR
// vc_engine := engine_siberite ;
13931: LD_ADDR_OWVAR 39
13935: PUSH
13936: LD_INT 3
13938: ST_TO_ADDR
// vc_control := control_apeman ;
13939: LD_ADDR_OWVAR 38
13943: PUSH
13944: LD_INT 5
13946: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13947: LD_ADDR_OWVAR 40
13951: PUSH
13952: LD_INT 29
13954: ST_TO_ADDR
// un := CreateVehicle ;
13955: LD_ADDR_VAR 0 2
13959: PUSH
13960: CALL_OW 45
13964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13984: LD_VAR 0 2
13988: PPUSH
13989: LD_INT 22
13991: PUSH
13992: LD_OWVAR 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PPUSH
14006: LD_VAR 0 2
14010: PPUSH
14011: CALL_OW 74
14015: PPUSH
14016: CALL_OW 115
// until IsDead ( un ) ;
14020: LD_VAR 0 2
14024: PPUSH
14025: CALL_OW 301
14029: IFFALSE 13977
// end ;
14031: PPOPN 2
14033: END
// every 0 0$1 trigger StreamModeActive and sStu do
14034: LD_EXP 15
14038: PUSH
14039: LD_EXP 54
14043: AND
14044: IFFALSE 14060
14046: GO 14048
14048: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14049: LD_STRING displayStucuk();
14051: PPUSH
14052: CALL_OW 559
// ResetFog ;
14056: CALL_OW 335
// end ;
14060: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14061: LD_EXP 15
14065: PUSH
14066: LD_EXP 47
14070: AND
14071: IFFALSE 14212
14073: GO 14075
14075: DISABLE
14076: LD_INT 0
14078: PPUSH
14079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_OWVAR 2
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: ST_TO_ADDR
// if not tmp then
14116: LD_VAR 0 2
14120: NOT
14121: IFFALSE 14125
// exit ;
14123: GO 14212
// un := tmp [ rand ( 1 , tmp ) ] ;
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_VAR 0 2
14142: PPUSH
14143: CALL_OW 12
14147: ARRAY
14148: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_INT 0
14156: PPUSH
14157: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_OWVAR 3
14170: PUSH
14171: LD_VAR 0 1
14175: DIFF
14176: PPUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 74
14186: PPUSH
14187: CALL_OW 115
// wait ( 0 0$20 ) ;
14191: LD_INT 700
14193: PPUSH
14194: CALL_OW 67
// SetSide ( un , your_side ) ;
14198: LD_VAR 0 1
14202: PPUSH
14203: LD_OWVAR 2
14207: PPUSH
14208: CALL_OW 235
// end ;
14212: PPOPN 2
14214: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14215: LD_EXP 15
14219: PUSH
14220: LD_EXP 48
14224: AND
14225: IFFALSE 14331
14227: GO 14229
14229: DISABLE
14230: LD_INT 0
14232: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14233: LD_ADDR_VAR 0 1
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_OWVAR 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 30
14255: PUSH
14256: LD_INT 0
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 30
14265: PUSH
14266: LD_INT 1
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: ST_TO_ADDR
// if not depot then
14287: LD_VAR 0 1
14291: NOT
14292: IFFALSE 14296
// exit ;
14294: GO 14331
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: CALL_OW 250
14309: PPUSH
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PPUSH
14319: CALL_OW 251
14323: PPUSH
14324: LD_INT 70
14326: PPUSH
14327: CALL_OW 495
// end ;
14331: PPOPN 1
14333: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14334: LD_EXP 15
14338: PUSH
14339: LD_EXP 49
14343: AND
14344: IFFALSE 14555
14346: GO 14348
14348: DISABLE
14349: LD_INT 0
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_OWVAR 2
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 21
14375: PUSH
14376: LD_INT 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: ST_TO_ADDR
// if not tmp then
14392: LD_VAR 0 5
14396: NOT
14397: IFFALSE 14401
// exit ;
14399: GO 14555
// for i in tmp do
14401: LD_ADDR_VAR 0 1
14405: PUSH
14406: LD_VAR 0 5
14410: PUSH
14411: FOR_IN
14412: IFFALSE 14553
// begin d := rand ( 0 , 5 ) ;
14414: LD_ADDR_VAR 0 4
14418: PUSH
14419: LD_INT 0
14421: PPUSH
14422: LD_INT 5
14424: PPUSH
14425: CALL_OW 12
14429: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14430: LD_ADDR_VAR 0 2
14434: PUSH
14435: LD_VAR 0 1
14439: PPUSH
14440: CALL_OW 250
14444: PPUSH
14445: LD_VAR 0 4
14449: PPUSH
14450: LD_INT 3
14452: PPUSH
14453: LD_INT 12
14455: PPUSH
14456: CALL_OW 12
14460: PPUSH
14461: CALL_OW 272
14465: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 251
14480: PPUSH
14481: LD_VAR 0 4
14485: PPUSH
14486: LD_INT 3
14488: PPUSH
14489: LD_INT 12
14491: PPUSH
14492: CALL_OW 12
14496: PPUSH
14497: CALL_OW 273
14501: ST_TO_ADDR
// if ValidHex ( x , y ) then
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: CALL_OW 488
14516: IFFALSE 14551
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14518: LD_VAR 0 1
14522: PPUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: LD_INT 3
14535: PPUSH
14536: LD_INT 6
14538: PPUSH
14539: CALL_OW 12
14543: PPUSH
14544: LD_INT 1
14546: PPUSH
14547: CALL_OW 483
// end ;
14551: GO 14411
14553: POP
14554: POP
// end ;
14555: PPOPN 5
14557: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14558: LD_EXP 15
14562: PUSH
14563: LD_EXP 50
14567: AND
14568: IFFALSE 14662
14570: GO 14572
14572: DISABLE
14573: LD_INT 0
14575: PPUSH
14576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_OWVAR 2
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 32
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 21
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: PPUSH
14619: CALL_OW 69
14623: ST_TO_ADDR
// if not tmp then
14624: LD_VAR 0 2
14628: NOT
14629: IFFALSE 14633
// exit ;
14631: GO 14662
// for i in tmp do
14633: LD_ADDR_VAR 0 1
14637: PUSH
14638: LD_VAR 0 2
14642: PUSH
14643: FOR_IN
14644: IFFALSE 14660
// SetFuel ( i , 0 ) ;
14646: LD_VAR 0 1
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 240
14658: GO 14643
14660: POP
14661: POP
// end ;
14662: PPOPN 2
14664: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14665: LD_EXP 15
14669: PUSH
14670: LD_EXP 51
14674: AND
14675: IFFALSE 14741
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14683: LD_ADDR_VAR 0 1
14687: PUSH
14688: LD_INT 22
14690: PUSH
14691: LD_OWVAR 2
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 29
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PPUSH
14714: CALL_OW 69
14718: ST_TO_ADDR
// if not tmp then
14719: LD_VAR 0 1
14723: NOT
14724: IFFALSE 14728
// exit ;
14726: GO 14741
// DestroyUnit ( tmp [ 1 ] ) ;
14728: LD_VAR 0 1
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: CALL_OW 65
// end ;
14741: PPOPN 1
14743: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14744: LD_EXP 15
14748: PUSH
14749: LD_EXP 53
14753: AND
14754: IFFALSE 14883
14756: GO 14758
14758: DISABLE
14759: LD_INT 0
14761: PPUSH
// begin uc_side := 0 ;
14762: LD_ADDR_OWVAR 20
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// uc_nation := nation_arabian ;
14770: LD_ADDR_OWVAR 21
14774: PUSH
14775: LD_INT 2
14777: ST_TO_ADDR
// hc_gallery :=  ;
14778: LD_ADDR_OWVAR 33
14782: PUSH
14783: LD_STRING 
14785: ST_TO_ADDR
// hc_name :=  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 11
14799: PPUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 380
// un := CreateHuman ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: CALL_OW 44
14816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14817: LD_VAR 0 1
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14829: LD_INT 35
14831: PPUSH
14832: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: LD_INT 22
14843: PUSH
14844: LD_OWVAR 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 74
14867: PPUSH
14868: CALL_OW 115
// until IsDead ( un ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 301
14881: IFFALSE 14829
// end ;
14883: PPOPN 1
14885: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14886: LD_EXP 15
14890: PUSH
14891: LD_EXP 55
14895: AND
14896: IFFALSE 14908
14898: GO 14900
14900: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14901: LD_STRING earthquake(getX(game), 0, 32)
14903: PPUSH
14904: CALL_OW 559
14908: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14909: LD_EXP 15
14913: PUSH
14914: LD_EXP 56
14918: AND
14919: IFFALSE 15010
14921: GO 14923
14923: DISABLE
14924: LD_INT 0
14926: PPUSH
// begin enable ;
14927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: ST_TO_ADDR
// if not tmp then
14975: LD_VAR 0 1
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14984: LD_VAR 0 1
14988: PUSH
14989: LD_INT 1
14991: PPUSH
14992: LD_VAR 0 1
14996: PPUSH
14997: CALL_OW 12
15001: ARRAY
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 234
// end ;
15010: PPOPN 1
15012: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15013: LD_EXP 15
15017: PUSH
15018: LD_EXP 57
15022: AND
15023: IFFALSE 15164
15025: GO 15027
15027: DISABLE
15028: LD_INT 0
15030: PPUSH
15031: PPUSH
15032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_INT 22
15040: PUSH
15041: LD_OWVAR 2
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 25
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// if not tmp then
15069: LD_VAR 0 3
15073: NOT
15074: IFFALSE 15078
// exit ;
15076: GO 15164
// un := tmp [ rand ( 1 , tmp ) ] ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 1
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: CALL_OW 12
15100: ARRAY
15101: ST_TO_ADDR
// if Crawls ( un ) then
15102: LD_VAR 0 2
15106: PPUSH
15107: CALL_OW 318
15111: IFFALSE 15122
// ComWalk ( un ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_INT 9
15129: PPUSH
15130: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15134: LD_INT 28
15136: PPUSH
15137: LD_OWVAR 2
15141: PPUSH
15142: LD_INT 2
15144: PPUSH
15145: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15149: LD_INT 29
15151: PPUSH
15152: LD_OWVAR 2
15156: PPUSH
15157: LD_INT 2
15159: PPUSH
15160: CALL_OW 322
// end ;
15164: PPOPN 3
15166: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15167: LD_EXP 15
15171: PUSH
15172: LD_EXP 58
15176: AND
15177: IFFALSE 15288
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
15185: PPUSH
15186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: LD_INT 22
15194: PUSH
15195: LD_OWVAR 2
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: ST_TO_ADDR
// if not tmp then
15223: LD_VAR 0 3
15227: NOT
15228: IFFALSE 15232
// exit ;
15230: GO 15288
// un := tmp [ rand ( 1 , tmp ) ] ;
15232: LD_ADDR_VAR 0 2
15236: PUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_INT 1
15244: PPUSH
15245: LD_VAR 0 3
15249: PPUSH
15250: CALL_OW 12
15254: ARRAY
15255: ST_TO_ADDR
// if Crawls ( un ) then
15256: LD_VAR 0 2
15260: PPUSH
15261: CALL_OW 318
15265: IFFALSE 15276
// ComWalk ( un ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15276: LD_VAR 0 2
15280: PPUSH
15281: LD_INT 8
15283: PPUSH
15284: CALL_OW 336
// end ;
15288: PPOPN 3
15290: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15291: LD_EXP 15
15295: PUSH
15296: LD_EXP 59
15300: AND
15301: IFFALSE 15445
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 2
15339: PUSH
15340: LD_INT 34
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 34
15352: PUSH
15353: LD_INT 51
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 34
15362: PUSH
15363: LD_INT 32
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PPUSH
15381: CALL_OW 69
15385: ST_TO_ADDR
// if not tmp then
15386: LD_VAR 0 2
15390: NOT
15391: IFFALSE 15395
// exit ;
15393: GO 15445
// for i in tmp do
15395: LD_ADDR_VAR 0 1
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: FOR_IN
15406: IFFALSE 15443
// if GetCargo ( i , mat_artifact ) = 0 then
15408: LD_VAR 0 1
15412: PPUSH
15413: LD_INT 4
15415: PPUSH
15416: CALL_OW 289
15420: PUSH
15421: LD_INT 0
15423: EQUAL
15424: IFFALSE 15441
// SetCargo ( i , mat_siberit , 100 ) ;
15426: LD_VAR 0 1
15430: PPUSH
15431: LD_INT 3
15433: PPUSH
15434: LD_INT 100
15436: PPUSH
15437: CALL_OW 290
15441: GO 15405
15443: POP
15444: POP
// end ;
15445: PPOPN 2
15447: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15448: LD_EXP 15
15452: PUSH
15453: LD_EXP 60
15457: AND
15458: IFFALSE 15641
15460: GO 15462
15462: DISABLE
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 22
15474: PUSH
15475: LD_OWVAR 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: ST_TO_ADDR
// if not tmp then
15489: LD_VAR 0 2
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15641
// for i := 1 to 2 do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: DOUBLE
15504: LD_INT 1
15506: DEC
15507: ST_TO_ADDR
15508: LD_INT 2
15510: PUSH
15511: FOR_TO
15512: IFFALSE 15639
// begin uc_side := your_side ;
15514: LD_ADDR_OWVAR 20
15518: PUSH
15519: LD_OWVAR 2
15523: ST_TO_ADDR
// uc_nation := nation_american ;
15524: LD_ADDR_OWVAR 21
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// vc_chassis := us_morphling ;
15532: LD_ADDR_OWVAR 37
15536: PUSH
15537: LD_INT 5
15539: ST_TO_ADDR
// vc_engine := engine_siberite ;
15540: LD_ADDR_OWVAR 39
15544: PUSH
15545: LD_INT 3
15547: ST_TO_ADDR
// vc_control := control_computer ;
15548: LD_ADDR_OWVAR 38
15552: PUSH
15553: LD_INT 3
15555: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15556: LD_ADDR_OWVAR 40
15560: PUSH
15561: LD_INT 10
15563: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15564: LD_VAR 0 2
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: PPUSH
15573: CALL_OW 310
15577: NOT
15578: IFFALSE 15625
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15580: CALL_OW 45
15584: PPUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: CALL_OW 250
15598: PPUSH
15599: LD_VAR 0 2
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PPUSH
15608: CALL_OW 251
15612: PPUSH
15613: LD_INT 12
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 50
15623: GO 15637
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15625: CALL_OW 45
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: CALL_OW 51
// end ;
15637: GO 15511
15639: POP
15640: POP
// end ;
15641: PPOPN 2
15643: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15644: LD_EXP 15
15648: PUSH
15649: LD_EXP 61
15653: AND
15654: IFFALSE 15876
15656: GO 15658
15658: DISABLE
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15667: LD_ADDR_VAR 0 6
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 23
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 6
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 15876
// s1 := rand ( 1 , 4 ) ;
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: LD_INT 1
15737: PPUSH
15738: LD_INT 4
15740: PPUSH
15741: CALL_OW 12
15745: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15746: LD_ADDR_VAR 0 4
15750: PUSH
15751: LD_VAR 0 6
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: CALL_OW 259
15769: ST_TO_ADDR
// if s1 = 1 then
15770: LD_VAR 0 2
15774: PUSH
15775: LD_INT 1
15777: EQUAL
15778: IFFALSE 15798
// s2 := rand ( 2 , 4 ) else
15780: LD_ADDR_VAR 0 3
15784: PUSH
15785: LD_INT 2
15787: PPUSH
15788: LD_INT 4
15790: PPUSH
15791: CALL_OW 12
15795: ST_TO_ADDR
15796: GO 15806
// s2 := 1 ;
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15806: LD_ADDR_VAR 0 5
15810: PUSH
15811: LD_VAR 0 6
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 3
15824: PPUSH
15825: CALL_OW 259
15829: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15830: LD_VAR 0 6
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 5
15848: PPUSH
15849: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15853: LD_VAR 0 6
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_VAR 0 4
15871: PPUSH
15872: CALL_OW 237
// end ;
15876: PPOPN 6
15878: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15879: LD_EXP 15
15883: PUSH
15884: LD_EXP 62
15888: AND
15889: IFFALSE 15968
15891: GO 15893
15893: DISABLE
15894: LD_INT 0
15896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15897: LD_ADDR_VAR 0 1
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_OWVAR 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 30
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: ST_TO_ADDR
// if not tmp then
15933: LD_VAR 0 1
15937: NOT
15938: IFFALSE 15942
// exit ;
15940: GO 15968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15942: LD_VAR 0 1
15946: PUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 12
15959: ARRAY
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 234
// end ;
15968: PPOPN 1
15970: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15971: LD_EXP 15
15975: PUSH
15976: LD_EXP 63
15980: AND
15981: IFFALSE 16093
15983: GO 15985
15985: DISABLE
15986: LD_INT 0
15988: PPUSH
15989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: LD_INT 22
15997: PUSH
15998: LD_OWVAR 2
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: LD_INT 30
16012: PUSH
16013: LD_INT 27
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 30
16022: PUSH
16023: LD_INT 26
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 30
16032: PUSH
16033: LD_INT 28
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: ST_TO_ADDR
// if not tmp then
16055: LD_VAR 0 2
16059: NOT
16060: IFFALSE 16064
// exit ;
16062: GO 16093
// for i in tmp do
16064: LD_ADDR_VAR 0 1
16068: PUSH
16069: LD_VAR 0 2
16073: PUSH
16074: FOR_IN
16075: IFFALSE 16091
// SetLives ( i , 1 ) ;
16077: LD_VAR 0 1
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 234
16089: GO 16074
16091: POP
16092: POP
// end ;
16093: PPOPN 2
16095: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16096: LD_EXP 15
16100: PUSH
16101: LD_EXP 64
16105: AND
16106: IFFALSE 16393
16108: GO 16110
16110: DISABLE
16111: LD_INT 0
16113: PPUSH
16114: PPUSH
16115: PPUSH
// begin i := rand ( 1 , 7 ) ;
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PPUSH
16124: LD_INT 7
16126: PPUSH
16127: CALL_OW 12
16131: ST_TO_ADDR
// case i of 1 :
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16155
16145: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16146: LD_STRING earthquake(getX(game), 0, 32)
16148: PPUSH
16149: CALL_OW 559
16153: GO 16393
16155: LD_INT 2
16157: DOUBLE
16158: EQUAL
16159: IFTRUE 16163
16161: GO 16177
16163: POP
// begin ToLua ( displayStucuk(); ) ;
16164: LD_STRING displayStucuk();
16166: PPUSH
16167: CALL_OW 559
// ResetFog ;
16171: CALL_OW 335
// end ; 3 :
16175: GO 16393
16177: LD_INT 3
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16289
16185: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_OWVAR 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 25
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: ST_TO_ADDR
// if not tmp then
16222: LD_VAR 0 2
16226: NOT
16227: IFFALSE 16231
// exit ;
16229: GO 16393
// un := tmp [ rand ( 1 , tmp ) ] ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_VAR 0 2
16240: PUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 2
16248: PPUSH
16249: CALL_OW 12
16253: ARRAY
16254: ST_TO_ADDR
// if Crawls ( un ) then
16255: LD_VAR 0 3
16259: PPUSH
16260: CALL_OW 318
16264: IFFALSE 16275
// ComWalk ( un ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16275: LD_VAR 0 3
16279: PPUSH
16280: LD_INT 8
16282: PPUSH
16283: CALL_OW 336
// end ; 4 :
16287: GO 16393
16289: LD_INT 4
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16371
16297: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16298: LD_ADDR_VAR 0 2
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: LD_OWVAR 2
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 30
16317: PUSH
16318: LD_INT 29
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: ST_TO_ADDR
// if not tmp then
16334: LD_VAR 0 2
16338: NOT
16339: IFFALSE 16343
// exit ;
16341: GO 16393
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 1
16350: ARRAY
16351: PPUSH
16352: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16356: LD_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: CALL_OW 65
// end ; 5 .. 7 :
16369: GO 16393
16371: LD_INT 5
16373: DOUBLE
16374: GREATEREQUAL
16375: IFFALSE 16383
16377: LD_INT 7
16379: DOUBLE
16380: LESSEQUAL
16381: IFTRUE 16385
16383: GO 16392
16385: POP
// StreamSibBomb ; end ;
16386: CALL 12630 0 0
16390: GO 16393
16392: POP
// end ;
16393: PPOPN 3
16395: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16396: LD_EXP 15
16400: PUSH
16401: LD_EXP 65
16405: AND
16406: IFFALSE 16562
16408: GO 16410
16410: DISABLE
16411: LD_INT 0
16413: PPUSH
16414: PPUSH
16415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: LD_INT 81
16423: PUSH
16424: LD_OWVAR 2
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 21
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PPUSH
16465: CALL_OW 69
16469: ST_TO_ADDR
// if not tmp then
16470: LD_VAR 0 2
16474: NOT
16475: IFFALSE 16479
// exit ;
16477: GO 16562
// p := 0 ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16487: LD_INT 35
16489: PPUSH
16490: CALL_OW 67
// p := p + 1 ;
16494: LD_ADDR_VAR 0 3
16498: PUSH
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 1
16506: PLUS
16507: ST_TO_ADDR
// for i in tmp do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16550
// if GetLives ( i ) < 1000 then
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 256
16530: PUSH
16531: LD_INT 1000
16533: LESS
16534: IFFALSE 16548
// SetLives ( i , 1000 ) ;
16536: LD_VAR 0 1
16540: PPUSH
16541: LD_INT 1000
16543: PPUSH
16544: CALL_OW 234
16548: GO 16518
16550: POP
16551: POP
// until p > 20 ;
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 20
16559: GREATER
16560: IFFALSE 16487
// end ;
16562: PPOPN 3
16564: END
// every 0 0$1 trigger StreamModeActive and sTime do
16565: LD_EXP 15
16569: PUSH
16570: LD_EXP 66
16574: AND
16575: IFFALSE 16610
16577: GO 16579
16579: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16580: LD_INT 28
16582: PPUSH
16583: LD_OWVAR 2
16587: PPUSH
16588: LD_INT 2
16590: PPUSH
16591: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16595: LD_INT 30
16597: PPUSH
16598: LD_OWVAR 2
16602: PPUSH
16603: LD_INT 2
16605: PPUSH
16606: CALL_OW 322
// end ;
16610: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16611: LD_EXP 15
16615: PUSH
16616: LD_EXP 67
16620: AND
16621: IFFALSE 16742
16623: GO 16625
16625: DISABLE
16626: LD_INT 0
16628: PPUSH
16629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16630: LD_ADDR_VAR 0 2
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_OWVAR 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 23
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PPUSH
16679: CALL_OW 69
16683: ST_TO_ADDR
// if not tmp then
16684: LD_VAR 0 2
16688: NOT
16689: IFFALSE 16693
// exit ;
16691: GO 16742
// for i in tmp do
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_VAR 0 2
16702: PUSH
16703: FOR_IN
16704: IFFALSE 16740
// begin if Crawls ( i ) then
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 318
16715: IFFALSE 16726
// ComWalk ( i ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 138
// SetClass ( i , 2 ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 2
16733: PPUSH
16734: CALL_OW 336
// end ;
16738: GO 16703
16740: POP
16741: POP
// end ;
16742: PPOPN 2
16744: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16745: LD_EXP 15
16749: PUSH
16750: LD_EXP 68
16754: AND
16755: IFFALSE 17043
16757: GO 16759
16759: DISABLE
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16765: LD_OWVAR 2
16769: PPUSH
16770: LD_INT 9
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16783: LD_INT 9
16785: PPUSH
16786: LD_OWVAR 2
16790: PPUSH
16791: CALL_OW 343
// uc_side := 9 ;
16795: LD_ADDR_OWVAR 20
16799: PUSH
16800: LD_INT 9
16802: ST_TO_ADDR
// uc_nation := 2 ;
16803: LD_ADDR_OWVAR 21
16807: PUSH
16808: LD_INT 2
16810: ST_TO_ADDR
// hc_name := Dark Warrior ;
16811: LD_ADDR_OWVAR 26
16815: PUSH
16816: LD_STRING Dark Warrior
16818: ST_TO_ADDR
// hc_gallery :=  ;
16819: LD_ADDR_OWVAR 33
16823: PUSH
16824: LD_STRING 
16826: ST_TO_ADDR
// hc_noskilllimit := true ;
16827: LD_ADDR_OWVAR 76
16831: PUSH
16832: LD_INT 1
16834: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16835: LD_ADDR_OWVAR 31
16839: PUSH
16840: LD_INT 30
16842: PUSH
16843: LD_INT 30
16845: PUSH
16846: LD_INT 30
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: ST_TO_ADDR
// un := CreateHuman ;
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: CALL_OW 44
16867: ST_TO_ADDR
// hc_noskilllimit := false ;
16868: LD_ADDR_OWVAR 76
16872: PUSH
16873: LD_INT 0
16875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: CALL_OW 51
// ToLua ( playRanger() ) ;
16888: LD_STRING playRanger()
16890: PPUSH
16891: CALL_OW 559
// p := 0 ;
16895: LD_ADDR_VAR 0 2
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16903: LD_INT 35
16905: PPUSH
16906: CALL_OW 67
// p := p + 1 ;
16910: LD_ADDR_VAR 0 2
16914: PUSH
16915: LD_VAR 0 2
16919: PUSH
16920: LD_INT 1
16922: PLUS
16923: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16924: LD_VAR 0 3
16928: PPUSH
16929: CALL_OW 256
16933: PUSH
16934: LD_INT 1000
16936: LESS
16937: IFFALSE 16951
// SetLives ( un , 1000 ) ;
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1000
16946: PPUSH
16947: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 81
16958: PUSH
16959: LD_OWVAR 2
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 91
16970: PUSH
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: CALL_OW 74
17002: PPUSH
17003: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17007: LD_VAR 0 2
17011: PUSH
17012: LD_INT 80
17014: GREATER
17015: PUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: CALL_OW 301
17025: OR
17026: IFFALSE 16903
// if un then
17028: LD_VAR 0 3
17032: IFFALSE 17043
// RemoveUnit ( un ) ;
17034: LD_VAR 0 3
17038: PPUSH
17039: CALL_OW 64
// end ;
17043: PPOPN 3
17045: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17046: LD_EXP 69
17050: IFFALSE 17166
17052: GO 17054
17054: DISABLE
17055: LD_INT 0
17057: PPUSH
17058: PPUSH
17059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17060: LD_ADDR_VAR 0 2
17064: PUSH
17065: LD_INT 81
17067: PUSH
17068: LD_OWVAR 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 21
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17096: LD_STRING playComputer()
17098: PPUSH
17099: CALL_OW 559
// if not tmp then
17103: LD_VAR 0 2
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17166
// for i in tmp do
17112: LD_ADDR_VAR 0 1
17116: PUSH
17117: LD_VAR 0 2
17121: PUSH
17122: FOR_IN
17123: IFFALSE 17164
// for j := 1 to 4 do
17125: LD_ADDR_VAR 0 3
17129: PUSH
17130: DOUBLE
17131: LD_INT 1
17133: DEC
17134: ST_TO_ADDR
17135: LD_INT 4
17137: PUSH
17138: FOR_TO
17139: IFFALSE 17160
// SetSkill ( i , j , 10 ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 10
17153: PPUSH
17154: CALL_OW 237
17158: GO 17138
17160: POP
17161: POP
17162: GO 17122
17164: POP
17165: POP
// end ;
17166: PPOPN 3
17168: END
// every 0 0$1 trigger s30 do var i , tmp ;
17169: LD_EXP 70
17173: IFFALSE 17242
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
17181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// SetLives ( i , 300 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 300
17233: PPUSH
17234: CALL_OW 234
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger s60 do var i , tmp ;
17245: LD_EXP 71
17249: IFFALSE 17318
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 22
17265: PUSH
17266: LD_OWVAR 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: ST_TO_ADDR
// if not tmp then
17280: LD_VAR 0 2
17284: NOT
17285: IFFALSE 17289
// exit ;
17287: GO 17318
// for i in tmp do
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: LD_VAR 0 2
17298: PUSH
17299: FOR_IN
17300: IFFALSE 17316
// SetLives ( i , 600 ) ;
17302: LD_VAR 0 1
17306: PPUSH
17307: LD_INT 600
17309: PPUSH
17310: CALL_OW 234
17314: GO 17299
17316: POP
17317: POP
// end ;
17318: PPOPN 2
17320: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17321: LD_INT 0
17323: PPUSH
// case cmd of 301 :
17324: LD_VAR 0 1
17328: PUSH
17329: LD_INT 301
17331: DOUBLE
17332: EQUAL
17333: IFTRUE 17337
17335: GO 17369
17337: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17338: LD_VAR 0 6
17342: PPUSH
17343: LD_VAR 0 7
17347: PPUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 4
17357: PPUSH
17358: LD_VAR 0 5
17362: PPUSH
17363: CALL 18570 0 5
17367: GO 17490
17369: LD_INT 302
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17414
17377: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17378: LD_VAR 0 6
17382: PPUSH
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: LD_VAR 0 9
17397: PPUSH
17398: LD_VAR 0 4
17402: PPUSH
17403: LD_VAR 0 5
17407: PPUSH
17408: CALL 18661 0 6
17412: GO 17490
17414: LD_INT 303
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17459
17422: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17423: LD_VAR 0 6
17427: PPUSH
17428: LD_VAR 0 7
17432: PPUSH
17433: LD_VAR 0 8
17437: PPUSH
17438: LD_VAR 0 9
17442: PPUSH
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL 17495 0 6
17457: GO 17490
17459: LD_INT 304
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17467
17465: GO 17489
17467: POP
// hHackTeleport ( unit , x , y ) ; end ;
17468: LD_VAR 0 2
17472: PPUSH
17473: LD_VAR 0 4
17477: PPUSH
17478: LD_VAR 0 5
17482: PPUSH
17483: CALL 19254 0 3
17487: GO 17490
17489: POP
// end ;
17490: LD_VAR 0 12
17494: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17499: LD_VAR 0 1
17503: PUSH
17504: LD_INT 1
17506: LESS
17507: PUSH
17508: LD_VAR 0 1
17512: PUSH
17513: LD_INT 3
17515: GREATER
17516: OR
17517: PUSH
17518: LD_VAR 0 5
17522: PPUSH
17523: LD_VAR 0 6
17527: PPUSH
17528: CALL_OW 428
17532: OR
17533: IFFALSE 17537
// exit ;
17535: GO 18257
// uc_side := your_side ;
17537: LD_ADDR_OWVAR 20
17541: PUSH
17542: LD_OWVAR 2
17546: ST_TO_ADDR
// uc_nation := nation ;
17547: LD_ADDR_OWVAR 21
17551: PUSH
17552: LD_VAR 0 1
17556: ST_TO_ADDR
// bc_level = 1 ;
17557: LD_ADDR_OWVAR 43
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// case btype of 1 :
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 1
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17589
17578: POP
// bc_type := b_depot ; 2 :
17579: LD_ADDR_OWVAR 42
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
17587: GO 18201
17589: LD_INT 2
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17608
17597: POP
// bc_type := b_warehouse ; 3 :
17598: LD_ADDR_OWVAR 42
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
17606: GO 18201
17608: LD_INT 3
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17627
17616: POP
// bc_type := b_lab ; 4 .. 9 :
17617: LD_ADDR_OWVAR 42
17621: PUSH
17622: LD_INT 6
17624: ST_TO_ADDR
17625: GO 18201
17627: LD_INT 4
17629: DOUBLE
17630: GREATEREQUAL
17631: IFFALSE 17639
17633: LD_INT 9
17635: DOUBLE
17636: LESSEQUAL
17637: IFTRUE 17641
17639: GO 17693
17641: POP
// begin bc_type := b_lab_half ;
17642: LD_ADDR_OWVAR 42
17646: PUSH
17647: LD_INT 7
17649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17650: LD_ADDR_OWVAR 44
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: LD_INT 11
17660: PUSH
17661: LD_INT 12
17663: PUSH
17664: LD_INT 15
17666: PUSH
17667: LD_INT 14
17669: PUSH
17670: LD_INT 13
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_VAR 0 2
17685: PUSH
17686: LD_INT 3
17688: MINUS
17689: ARRAY
17690: ST_TO_ADDR
// end ; 10 .. 13 :
17691: GO 18201
17693: LD_INT 10
17695: DOUBLE
17696: GREATEREQUAL
17697: IFFALSE 17705
17699: LD_INT 13
17701: DOUBLE
17702: LESSEQUAL
17703: IFTRUE 17707
17705: GO 17784
17707: POP
// begin bc_type := b_lab_full ;
17708: LD_ADDR_OWVAR 42
17712: PUSH
17713: LD_INT 8
17715: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17716: LD_ADDR_OWVAR 44
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: LD_INT 12
17726: PUSH
17727: LD_INT 14
17729: PUSH
17730: LD_INT 13
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: PUSH
17739: LD_VAR 0 2
17743: PUSH
17744: LD_INT 9
17746: MINUS
17747: ARRAY
17748: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17749: LD_ADDR_OWVAR 45
17753: PUSH
17754: LD_INT 11
17756: PUSH
17757: LD_INT 15
17759: PUSH
17760: LD_INT 12
17762: PUSH
17763: LD_INT 15
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: PUSH
17772: LD_VAR 0 2
17776: PUSH
17777: LD_INT 9
17779: MINUS
17780: ARRAY
17781: ST_TO_ADDR
// end ; 14 :
17782: GO 18201
17784: LD_INT 14
17786: DOUBLE
17787: EQUAL
17788: IFTRUE 17792
17790: GO 17803
17792: POP
// bc_type := b_workshop ; 15 :
17793: LD_ADDR_OWVAR 42
17797: PUSH
17798: LD_INT 2
17800: ST_TO_ADDR
17801: GO 18201
17803: LD_INT 15
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17822
17811: POP
// bc_type := b_factory ; 16 :
17812: LD_ADDR_OWVAR 42
17816: PUSH
17817: LD_INT 3
17819: ST_TO_ADDR
17820: GO 18201
17822: LD_INT 16
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17841
17830: POP
// bc_type := b_ext_gun ; 17 :
17831: LD_ADDR_OWVAR 42
17835: PUSH
17836: LD_INT 17
17838: ST_TO_ADDR
17839: GO 18201
17841: LD_INT 17
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 17877
17849: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17850: LD_ADDR_OWVAR 42
17854: PUSH
17855: LD_INT 19
17857: PUSH
17858: LD_INT 23
17860: PUSH
17861: LD_INT 19
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: LD_VAR 0 1
17873: ARRAY
17874: ST_TO_ADDR
17875: GO 18201
17877: LD_INT 18
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_ext_radar ; 19 :
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 20
17893: ST_TO_ADDR
17894: GO 18201
17896: LD_INT 19
17898: DOUBLE
17899: EQUAL
17900: IFTRUE 17904
17902: GO 17915
17904: POP
// bc_type := b_ext_radio ; 20 :
17905: LD_ADDR_OWVAR 42
17909: PUSH
17910: LD_INT 22
17912: ST_TO_ADDR
17913: GO 18201
17915: LD_INT 20
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17934
17923: POP
// bc_type := b_ext_siberium ; 21 :
17924: LD_ADDR_OWVAR 42
17928: PUSH
17929: LD_INT 21
17931: ST_TO_ADDR
17932: GO 18201
17934: LD_INT 21
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 17953
17942: POP
// bc_type := b_ext_computer ; 22 :
17943: LD_ADDR_OWVAR 42
17947: PUSH
17948: LD_INT 24
17950: ST_TO_ADDR
17951: GO 18201
17953: LD_INT 22
17955: DOUBLE
17956: EQUAL
17957: IFTRUE 17961
17959: GO 17972
17961: POP
// bc_type := b_ext_track ; 23 :
17962: LD_ADDR_OWVAR 42
17966: PUSH
17967: LD_INT 16
17969: ST_TO_ADDR
17970: GO 18201
17972: LD_INT 23
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 17991
17980: POP
// bc_type := b_ext_laser ; 24 :
17981: LD_ADDR_OWVAR 42
17985: PUSH
17986: LD_INT 25
17988: ST_TO_ADDR
17989: GO 18201
17991: LD_INT 24
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 18010
17999: POP
// bc_type := b_control_tower ; 25 :
18000: LD_ADDR_OWVAR 42
18004: PUSH
18005: LD_INT 36
18007: ST_TO_ADDR
18008: GO 18201
18010: LD_INT 25
18012: DOUBLE
18013: EQUAL
18014: IFTRUE 18018
18016: GO 18029
18018: POP
// bc_type := b_breastwork ; 26 :
18019: LD_ADDR_OWVAR 42
18023: PUSH
18024: LD_INT 31
18026: ST_TO_ADDR
18027: GO 18201
18029: LD_INT 26
18031: DOUBLE
18032: EQUAL
18033: IFTRUE 18037
18035: GO 18048
18037: POP
// bc_type := b_bunker ; 27 :
18038: LD_ADDR_OWVAR 42
18042: PUSH
18043: LD_INT 32
18045: ST_TO_ADDR
18046: GO 18201
18048: LD_INT 27
18050: DOUBLE
18051: EQUAL
18052: IFTRUE 18056
18054: GO 18067
18056: POP
// bc_type := b_turret ; 28 :
18057: LD_ADDR_OWVAR 42
18061: PUSH
18062: LD_INT 33
18064: ST_TO_ADDR
18065: GO 18201
18067: LD_INT 28
18069: DOUBLE
18070: EQUAL
18071: IFTRUE 18075
18073: GO 18086
18075: POP
// bc_type := b_armoury ; 29 :
18076: LD_ADDR_OWVAR 42
18080: PUSH
18081: LD_INT 4
18083: ST_TO_ADDR
18084: GO 18201
18086: LD_INT 29
18088: DOUBLE
18089: EQUAL
18090: IFTRUE 18094
18092: GO 18105
18094: POP
// bc_type := b_barracks ; 30 :
18095: LD_ADDR_OWVAR 42
18099: PUSH
18100: LD_INT 5
18102: ST_TO_ADDR
18103: GO 18201
18105: LD_INT 30
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18124
18113: POP
// bc_type := b_solar_power ; 31 :
18114: LD_ADDR_OWVAR 42
18118: PUSH
18119: LD_INT 27
18121: ST_TO_ADDR
18122: GO 18201
18124: LD_INT 31
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18143
18132: POP
// bc_type := b_oil_power ; 32 :
18133: LD_ADDR_OWVAR 42
18137: PUSH
18138: LD_INT 26
18140: ST_TO_ADDR
18141: GO 18201
18143: LD_INT 32
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18162
18151: POP
// bc_type := b_siberite_power ; 33 :
18152: LD_ADDR_OWVAR 42
18156: PUSH
18157: LD_INT 28
18159: ST_TO_ADDR
18160: GO 18201
18162: LD_INT 33
18164: DOUBLE
18165: EQUAL
18166: IFTRUE 18170
18168: GO 18181
18170: POP
// bc_type := b_oil_mine ; 34 :
18171: LD_ADDR_OWVAR 42
18175: PUSH
18176: LD_INT 29
18178: ST_TO_ADDR
18179: GO 18201
18181: LD_INT 34
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18200
18189: POP
// bc_type := b_siberite_mine ; end ;
18190: LD_ADDR_OWVAR 42
18194: PUSH
18195: LD_INT 30
18197: ST_TO_ADDR
18198: GO 18201
18200: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18201: LD_ADDR_VAR 0 8
18205: PUSH
18206: LD_VAR 0 5
18210: PPUSH
18211: LD_VAR 0 6
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: CALL_OW 47
18225: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18226: LD_OWVAR 42
18230: PUSH
18231: LD_INT 32
18233: PUSH
18234: LD_INT 33
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: IN
18241: IFFALSE 18257
// PlaceWeaponTurret ( b , weapon ) ;
18243: LD_VAR 0 8
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: CALL_OW 431
// end ;
18257: LD_VAR 0 7
18261: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18262: LD_INT 0
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18268: LD_ADDR_VAR 0 4
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 30
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PPUSH
18317: CALL_OW 69
18321: ST_TO_ADDR
// if not tmp then
18322: LD_VAR 0 4
18326: NOT
18327: IFFALSE 18331
// exit ;
18329: GO 18390
// for i in tmp do
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_VAR 0 4
18340: PUSH
18341: FOR_IN
18342: IFFALSE 18388
// for j = 1 to 3 do
18344: LD_ADDR_VAR 0 3
18348: PUSH
18349: DOUBLE
18350: LD_INT 1
18352: DEC
18353: ST_TO_ADDR
18354: LD_INT 3
18356: PUSH
18357: FOR_TO
18358: IFFALSE 18384
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL_OW 274
18369: PPUSH
18370: LD_VAR 0 3
18374: PPUSH
18375: LD_INT 99999
18377: PPUSH
18378: CALL_OW 277
18382: GO 18357
18384: POP
18385: POP
18386: GO 18341
18388: POP
18389: POP
// end ;
18390: LD_VAR 0 1
18394: RET
// export function hHackSetLevel10 ; var i , j ; begin
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
18399: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: PUSH
18420: FOR_IN
18421: IFFALSE 18473
// if IsSelected ( i ) then
18423: LD_VAR 0 2
18427: PPUSH
18428: CALL_OW 306
18432: IFFALSE 18471
// begin for j := 1 to 4 do
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: DOUBLE
18440: LD_INT 1
18442: DEC
18443: ST_TO_ADDR
18444: LD_INT 4
18446: PUSH
18447: FOR_TO
18448: IFFALSE 18469
// SetSkill ( i , j , 10 ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 10
18462: PPUSH
18463: CALL_OW 237
18467: GO 18447
18469: POP
18470: POP
// end ;
18471: GO 18420
18473: POP
18474: POP
// end ;
18475: LD_VAR 0 1
18479: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: PUSH
18521: FOR_IN
18522: IFFALSE 18563
// begin for j := 1 to 4 do
18524: LD_ADDR_VAR 0 3
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_INT 4
18536: PUSH
18537: FOR_TO
18538: IFFALSE 18559
// SetSkill ( i , j , 10 ) ;
18540: LD_VAR 0 2
18544: PPUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 10
18552: PPUSH
18553: CALL_OW 237
18557: GO 18537
18559: POP
18560: POP
// end ;
18561: GO 18521
18563: POP
18564: POP
// end ;
18565: LD_VAR 0 1
18569: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18570: LD_INT 0
18572: PPUSH
// uc_side := your_side ;
18573: LD_ADDR_OWVAR 20
18577: PUSH
18578: LD_OWVAR 2
18582: ST_TO_ADDR
// uc_nation := nation ;
18583: LD_ADDR_OWVAR 21
18587: PUSH
18588: LD_VAR 0 1
18592: ST_TO_ADDR
// InitHc ;
18593: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18597: LD_INT 0
18599: PPUSH
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18614: LD_VAR 0 4
18618: PPUSH
18619: LD_VAR 0 5
18623: PPUSH
18624: CALL_OW 428
18628: PUSH
18629: LD_INT 0
18631: EQUAL
18632: IFFALSE 18656
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18634: CALL_OW 44
18638: PPUSH
18639: LD_VAR 0 4
18643: PPUSH
18644: LD_VAR 0 5
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 48
// end ;
18656: LD_VAR 0 6
18660: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18661: LD_INT 0
18663: PPUSH
18664: PPUSH
// uc_side := your_side ;
18665: LD_ADDR_OWVAR 20
18669: PUSH
18670: LD_OWVAR 2
18674: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18675: LD_VAR 0 1
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: LD_INT 3
18688: PUSH
18689: LD_INT 4
18691: PUSH
18692: LD_INT 5
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: IN
18702: IFFALSE 18714
// uc_nation := nation_american else
18704: LD_ADDR_OWVAR 21
18708: PUSH
18709: LD_INT 1
18711: ST_TO_ADDR
18712: GO 18757
// if chassis in [ 11 , 12 , 13 , 14 ] then
18714: LD_VAR 0 1
18718: PUSH
18719: LD_INT 11
18721: PUSH
18722: LD_INT 12
18724: PUSH
18725: LD_INT 13
18727: PUSH
18728: LD_INT 14
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: IN
18737: IFFALSE 18749
// uc_nation := nation_arabian else
18739: LD_ADDR_OWVAR 21
18743: PUSH
18744: LD_INT 2
18746: ST_TO_ADDR
18747: GO 18757
// uc_nation := nation_russian ;
18749: LD_ADDR_OWVAR 21
18753: PUSH
18754: LD_INT 3
18756: ST_TO_ADDR
// vc_chassis := chassis ;
18757: LD_ADDR_OWVAR 37
18761: PUSH
18762: LD_VAR 0 1
18766: ST_TO_ADDR
// vc_engine := engine ;
18767: LD_ADDR_OWVAR 39
18771: PUSH
18772: LD_VAR 0 2
18776: ST_TO_ADDR
// vc_control := control ;
18777: LD_ADDR_OWVAR 38
18781: PUSH
18782: LD_VAR 0 3
18786: ST_TO_ADDR
// vc_weapon := weapon ;
18787: LD_ADDR_OWVAR 40
18791: PUSH
18792: LD_VAR 0 4
18796: ST_TO_ADDR
// un := CreateVehicle ;
18797: LD_ADDR_VAR 0 8
18801: PUSH
18802: CALL_OW 45
18806: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18807: LD_VAR 0 8
18811: PPUSH
18812: LD_INT 0
18814: PPUSH
18815: LD_INT 5
18817: PPUSH
18818: CALL_OW 12
18822: PPUSH
18823: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18827: LD_VAR 0 8
18831: PPUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: LD_VAR 0 6
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 48
// end ;
18849: LD_VAR 0 7
18853: RET
// export hInvincible ; every 1 do
18854: GO 18856
18856: DISABLE
// hInvincible := [ ] ;
18857: LD_ADDR_EXP 72
18861: PUSH
18862: EMPTY
18863: ST_TO_ADDR
18864: END
// every 10 do var i ;
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
// begin enable ;
18871: ENABLE
// if not hInvincible then
18872: LD_EXP 72
18876: NOT
18877: IFFALSE 18881
// exit ;
18879: GO 18925
// for i in hInvincible do
18881: LD_ADDR_VAR 0 1
18885: PUSH
18886: LD_EXP 72
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18923
// if GetLives ( i ) < 1000 then
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 256
18903: PUSH
18904: LD_INT 1000
18906: LESS
18907: IFFALSE 18921
// SetLives ( i , 1000 ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_INT 1000
18916: PPUSH
18917: CALL_OW 234
18921: GO 18891
18923: POP
18924: POP
// end ;
18925: PPOPN 1
18927: END
// export function hHackInvincible ; var i ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 21
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: PUSH
18970: FOR_IN
18971: IFFALSE 19032
// if IsSelected ( i ) then
18973: LD_VAR 0 2
18977: PPUSH
18978: CALL_OW 306
18982: IFFALSE 19030
// begin if i in hInvincible then
18984: LD_VAR 0 2
18988: PUSH
18989: LD_EXP 72
18993: IN
18994: IFFALSE 19014
// hInvincible := hInvincible diff i else
18996: LD_ADDR_EXP 72
19000: PUSH
19001: LD_EXP 72
19005: PUSH
19006: LD_VAR 0 2
19010: DIFF
19011: ST_TO_ADDR
19012: GO 19030
// hInvincible := hInvincible union i ;
19014: LD_ADDR_EXP 72
19018: PUSH
19019: LD_EXP 72
19023: PUSH
19024: LD_VAR 0 2
19028: UNION
19029: ST_TO_ADDR
// end ;
19030: GO 18970
19032: POP
19033: POP
// end ;
19034: LD_VAR 0 1
19038: RET
// export function hHackInvisible ; var i , j ; begin
19039: LD_INT 0
19041: PPUSH
19042: PPUSH
19043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19044: LD_ADDR_VAR 0 2
19048: PUSH
19049: LD_INT 21
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: FOR_IN
19065: IFFALSE 19089
// if IsSelected ( i ) then
19067: LD_VAR 0 2
19071: PPUSH
19072: CALL_OW 306
19076: IFFALSE 19087
// ComForceInvisible ( i ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 496
19087: GO 19064
19089: POP
19090: POP
// end ;
19091: LD_VAR 0 1
19095: RET
// export function hHackChangeYourSide ; begin
19096: LD_INT 0
19098: PPUSH
// if your_side = 8 then
19099: LD_OWVAR 2
19103: PUSH
19104: LD_INT 8
19106: EQUAL
19107: IFFALSE 19119
// your_side := 0 else
19109: LD_ADDR_OWVAR 2
19113: PUSH
19114: LD_INT 0
19116: ST_TO_ADDR
19117: GO 19133
// your_side := your_side + 1 ;
19119: LD_ADDR_OWVAR 2
19123: PUSH
19124: LD_OWVAR 2
19128: PUSH
19129: LD_INT 1
19131: PLUS
19132: ST_TO_ADDR
// end ;
19133: LD_VAR 0 1
19137: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19138: LD_INT 0
19140: PPUSH
19141: PPUSH
19142: PPUSH
// for i in all_units do
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_OWVAR 3
19152: PUSH
19153: FOR_IN
19154: IFFALSE 19232
// if IsSelected ( i ) then
19156: LD_VAR 0 2
19160: PPUSH
19161: CALL_OW 306
19165: IFFALSE 19230
// begin j := GetSide ( i ) ;
19167: LD_ADDR_VAR 0 3
19171: PUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: CALL_OW 255
19181: ST_TO_ADDR
// if j = 8 then
19182: LD_VAR 0 3
19186: PUSH
19187: LD_INT 8
19189: EQUAL
19190: IFFALSE 19202
// j := 0 else
19192: LD_ADDR_VAR 0 3
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
19200: GO 19216
// j := j + 1 ;
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 1
19214: PLUS
19215: ST_TO_ADDR
// SetSide ( i , j ) ;
19216: LD_VAR 0 2
19220: PPUSH
19221: LD_VAR 0 3
19225: PPUSH
19226: CALL_OW 235
// end ;
19230: GO 19153
19232: POP
19233: POP
// end ;
19234: LD_VAR 0 1
19238: RET
// export function hHackFog ; begin
19239: LD_INT 0
19241: PPUSH
// FogOff ( true ) ;
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 344
// end ;
19249: LD_VAR 0 1
19253: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19254: LD_INT 0
19256: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_VAR 0 2
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 483
// CenterOnXY ( x , y ) ;
19282: LD_VAR 0 2
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 84
// end ;
19296: LD_VAR 0 4
19300: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19305: LD_VAR 0 1
19309: NOT
19310: PUSH
19311: LD_VAR 0 2
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: CALL_OW 488
19325: NOT
19326: OR
19327: PUSH
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL_OW 266
19337: PUSH
19338: LD_INT 3
19340: NONEQUAL
19341: PUSH
19342: LD_VAR 0 1
19346: PPUSH
19347: CALL_OW 247
19351: PUSH
19352: LD_INT 1
19354: EQUAL
19355: NOT
19356: AND
19357: OR
19358: IFFALSE 19362
// exit ;
19360: GO 19511
// if GetType ( factory ) = unit_human then
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 247
19371: PUSH
19372: LD_INT 1
19374: EQUAL
19375: IFFALSE 19392
// factory := IsInUnit ( factory ) ;
19377: LD_ADDR_VAR 0 1
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 310
19391: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 266
19401: PUSH
19402: LD_INT 3
19404: NONEQUAL
19405: IFFALSE 19409
// exit ;
19407: GO 19511
// if HexInfo ( x , y ) = factory then
19409: LD_VAR 0 2
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 428
19423: PUSH
19424: LD_VAR 0 1
19428: EQUAL
19429: IFFALSE 19456
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19431: LD_ADDR_EXP 73
19435: PUSH
19436: LD_EXP 73
19440: PPUSH
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: CALL_OW 1
19453: ST_TO_ADDR
19454: GO 19507
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19456: LD_ADDR_EXP 73
19460: PUSH
19461: LD_EXP 73
19465: PPUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 255
19480: PUSH
19481: LD_VAR 0 1
19485: PUSH
19486: LD_VAR 0 2
19490: PUSH
19491: LD_VAR 0 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 1
19506: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19507: CALL 19516 0 0
// end ;
19511: LD_VAR 0 4
19515: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
19520: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19521: LD_STRING resetFactoryWaypoint();
19523: PPUSH
19524: CALL_OW 559
// if factoryWaypoints then
19528: LD_EXP 73
19532: IFFALSE 19658
// begin list := PrepareArray ( factoryWaypoints ) ;
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_EXP 73
19543: PPUSH
19544: CALL 66198 0 1
19548: ST_TO_ADDR
// for i := 1 to list do
19549: LD_ADDR_VAR 0 2
19553: PUSH
19554: DOUBLE
19555: LD_INT 1
19557: DEC
19558: ST_TO_ADDR
19559: LD_VAR 0 3
19563: PUSH
19564: FOR_TO
19565: IFFALSE 19656
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19567: LD_STRING setFactoryWaypointXY(
19569: PUSH
19570: LD_VAR 0 3
19574: PUSH
19575: LD_VAR 0 2
19579: ARRAY
19580: PUSH
19581: LD_INT 1
19583: ARRAY
19584: STR
19585: PUSH
19586: LD_STRING ,
19588: STR
19589: PUSH
19590: LD_VAR 0 3
19594: PUSH
19595: LD_VAR 0 2
19599: ARRAY
19600: PUSH
19601: LD_INT 2
19603: ARRAY
19604: STR
19605: PUSH
19606: LD_STRING ,
19608: STR
19609: PUSH
19610: LD_VAR 0 3
19614: PUSH
19615: LD_VAR 0 2
19619: ARRAY
19620: PUSH
19621: LD_INT 3
19623: ARRAY
19624: STR
19625: PUSH
19626: LD_STRING ,
19628: STR
19629: PUSH
19630: LD_VAR 0 3
19634: PUSH
19635: LD_VAR 0 2
19639: ARRAY
19640: PUSH
19641: LD_INT 4
19643: ARRAY
19644: STR
19645: PUSH
19646: LD_STRING )
19648: STR
19649: PPUSH
19650: CALL_OW 559
19654: GO 19564
19656: POP
19657: POP
// end ; end ;
19658: LD_VAR 0 1
19662: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19663: LD_INT 0
19665: PPUSH
// if HexInfo ( x , y ) = warehouse then
19666: LD_VAR 0 2
19670: PPUSH
19671: LD_VAR 0 3
19675: PPUSH
19676: CALL_OW 428
19680: PUSH
19681: LD_VAR 0 1
19685: EQUAL
19686: IFFALSE 19713
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19688: LD_ADDR_EXP 74
19692: PUSH
19693: LD_EXP 74
19697: PPUSH
19698: LD_VAR 0 1
19702: PPUSH
19703: LD_INT 0
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
19711: GO 19764
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19713: LD_ADDR_EXP 74
19717: PUSH
19718: LD_EXP 74
19722: PPUSH
19723: LD_VAR 0 1
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: LD_VAR 0 1
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 3
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: PPUSH
19759: CALL_OW 1
19763: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19764: CALL 19773 0 0
// end ;
19768: LD_VAR 0 4
19772: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19773: LD_INT 0
19775: PPUSH
19776: PPUSH
19777: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19778: LD_STRING resetWarehouseGatheringPoints();
19780: PPUSH
19781: CALL_OW 559
// if warehouseGatheringPoints then
19785: LD_EXP 74
19789: IFFALSE 19915
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_EXP 74
19800: PPUSH
19801: CALL 66198 0 1
19805: ST_TO_ADDR
// for i := 1 to list do
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: DOUBLE
19812: LD_INT 1
19814: DEC
19815: ST_TO_ADDR
19816: LD_VAR 0 3
19820: PUSH
19821: FOR_TO
19822: IFFALSE 19913
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19824: LD_STRING setWarehouseGatheringPointXY(
19826: PUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_VAR 0 2
19836: ARRAY
19837: PUSH
19838: LD_INT 1
19840: ARRAY
19841: STR
19842: PUSH
19843: LD_STRING ,
19845: STR
19846: PUSH
19847: LD_VAR 0 3
19851: PUSH
19852: LD_VAR 0 2
19856: ARRAY
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: STR
19862: PUSH
19863: LD_STRING ,
19865: STR
19866: PUSH
19867: LD_VAR 0 3
19871: PUSH
19872: LD_VAR 0 2
19876: ARRAY
19877: PUSH
19878: LD_INT 3
19880: ARRAY
19881: STR
19882: PUSH
19883: LD_STRING ,
19885: STR
19886: PUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_VAR 0 2
19896: ARRAY
19897: PUSH
19898: LD_INT 4
19900: ARRAY
19901: STR
19902: PUSH
19903: LD_STRING )
19905: STR
19906: PPUSH
19907: CALL_OW 559
19911: GO 19821
19913: POP
19914: POP
// end ; end ;
19915: LD_VAR 0 1
19919: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19920: LD_EXP 74
19924: IFFALSE 20609
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
19937: PPUSH
19938: PPUSH
19939: PPUSH
// begin enable ;
19940: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_EXP 74
19950: PPUSH
19951: CALL 66198 0 1
19955: ST_TO_ADDR
// if not list then
19956: LD_VAR 0 3
19960: NOT
19961: IFFALSE 19965
// exit ;
19963: GO 20609
// for i := 1 to list do
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: DOUBLE
19971: LD_INT 1
19973: DEC
19974: ST_TO_ADDR
19975: LD_VAR 0 3
19979: PUSH
19980: FOR_TO
19981: IFFALSE 20607
// begin depot := list [ i ] [ 2 ] ;
19983: LD_ADDR_VAR 0 8
19987: PUSH
19988: LD_VAR 0 3
19992: PUSH
19993: LD_VAR 0 1
19997: ARRAY
19998: PUSH
19999: LD_INT 2
20001: ARRAY
20002: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20003: LD_ADDR_VAR 0 5
20007: PUSH
20008: LD_VAR 0 3
20012: PUSH
20013: LD_VAR 0 1
20017: ARRAY
20018: PUSH
20019: LD_INT 1
20021: ARRAY
20022: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20023: LD_VAR 0 8
20027: PPUSH
20028: CALL_OW 301
20032: PUSH
20033: LD_VAR 0 5
20037: PUSH
20038: LD_VAR 0 8
20042: PPUSH
20043: CALL_OW 255
20047: NONEQUAL
20048: OR
20049: IFFALSE 20078
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20051: LD_ADDR_EXP 74
20055: PUSH
20056: LD_EXP 74
20060: PPUSH
20061: LD_VAR 0 8
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 1
20073: ST_TO_ADDR
// exit ;
20074: POP
20075: POP
20076: GO 20609
// end ; x := list [ i ] [ 3 ] ;
20078: LD_ADDR_VAR 0 6
20082: PUSH
20083: LD_VAR 0 3
20087: PUSH
20088: LD_VAR 0 1
20092: ARRAY
20093: PUSH
20094: LD_INT 3
20096: ARRAY
20097: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20098: LD_ADDR_VAR 0 7
20102: PUSH
20103: LD_VAR 0 3
20107: PUSH
20108: LD_VAR 0 1
20112: ARRAY
20113: PUSH
20114: LD_INT 4
20116: ARRAY
20117: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20118: LD_ADDR_VAR 0 9
20122: PUSH
20123: LD_VAR 0 6
20127: PPUSH
20128: LD_VAR 0 7
20132: PPUSH
20133: LD_INT 16
20135: PPUSH
20136: CALL 64786 0 3
20140: ST_TO_ADDR
// if not cratesNearbyPoint then
20141: LD_VAR 0 9
20145: NOT
20146: IFFALSE 20152
// exit ;
20148: POP
20149: POP
20150: GO 20609
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20152: LD_ADDR_VAR 0 4
20156: PUSH
20157: LD_INT 22
20159: PUSH
20160: LD_VAR 0 5
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 3
20171: PUSH
20172: LD_INT 60
20174: PUSH
20175: EMPTY
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 91
20184: PUSH
20185: LD_VAR 0 8
20189: PUSH
20190: LD_INT 6
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 25
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 25
20213: PUSH
20214: LD_INT 16
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: PUSH
20237: LD_VAR 0 8
20241: PPUSH
20242: CALL_OW 313
20246: PPUSH
20247: LD_INT 3
20249: PUSH
20250: LD_INT 60
20252: PUSH
20253: EMPTY
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: LD_INT 25
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 25
20275: PUSH
20276: LD_INT 16
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: UNION
20297: ST_TO_ADDR
// if tmp then
20298: LD_VAR 0 4
20302: IFFALSE 20382
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20304: LD_ADDR_VAR 0 4
20308: PUSH
20309: LD_VAR 0 4
20313: PPUSH
20314: LD_INT 3
20316: PPUSH
20317: CALL 62755 0 2
20321: ST_TO_ADDR
// for j in tmp do
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_VAR 0 4
20331: PUSH
20332: FOR_IN
20333: IFFALSE 20376
// begin if IsInUnit ( j ) then
20335: LD_VAR 0 2
20339: PPUSH
20340: CALL_OW 310
20344: IFFALSE 20355
// ComExit ( j ) ;
20346: LD_VAR 0 2
20350: PPUSH
20351: CALL 62838 0 1
// AddComCollect ( j , x , y ) ;
20355: LD_VAR 0 2
20359: PPUSH
20360: LD_VAR 0 6
20364: PPUSH
20365: LD_VAR 0 7
20369: PPUSH
20370: CALL_OW 177
// end ;
20374: GO 20332
20376: POP
20377: POP
// exit ;
20378: POP
20379: POP
20380: GO 20609
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20382: LD_ADDR_VAR 0 4
20386: PUSH
20387: LD_INT 22
20389: PUSH
20390: LD_VAR 0 5
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 91
20401: PUSH
20402: LD_VAR 0 8
20406: PUSH
20407: LD_INT 8
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 34
20420: PUSH
20421: LD_INT 12
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 34
20430: PUSH
20431: LD_INT 51
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 34
20440: PUSH
20441: LD_INT 32
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 34
20450: PUSH
20451: LD_INT 89
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: PPUSH
20470: CALL_OW 69
20474: ST_TO_ADDR
// if tmp then
20475: LD_VAR 0 4
20479: IFFALSE 20605
// begin for j in tmp do
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 4
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20603
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20494: LD_VAR 0 2
20498: PPUSH
20499: CALL_OW 262
20503: PUSH
20504: LD_INT 3
20506: EQUAL
20507: PUSH
20508: LD_VAR 0 2
20512: PPUSH
20513: CALL_OW 261
20517: PUSH
20518: LD_INT 20
20520: GREATER
20521: OR
20522: PUSH
20523: LD_VAR 0 2
20527: PPUSH
20528: CALL_OW 314
20532: NOT
20533: AND
20534: PUSH
20535: LD_VAR 0 2
20539: PPUSH
20540: CALL_OW 263
20544: PUSH
20545: LD_INT 1
20547: NONEQUAL
20548: PUSH
20549: LD_VAR 0 2
20553: PPUSH
20554: CALL_OW 311
20558: OR
20559: AND
20560: IFFALSE 20601
// begin ComCollect ( j , x , y ) ;
20562: LD_VAR 0 2
20566: PPUSH
20567: LD_VAR 0 6
20571: PPUSH
20572: LD_VAR 0 7
20576: PPUSH
20577: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20581: LD_VAR 0 2
20585: PPUSH
20586: LD_VAR 0 8
20590: PPUSH
20591: CALL_OW 172
// exit ;
20595: POP
20596: POP
20597: POP
20598: POP
20599: GO 20609
// end ;
20601: GO 20491
20603: POP
20604: POP
// end ; end ;
20605: GO 19980
20607: POP
20608: POP
// end ; end_of_file
20609: PPOPN 9
20611: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20612: LD_INT 0
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 264
20627: PUSH
20628: LD_INT 91
20630: EQUAL
20631: IFFALSE 20703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20633: LD_INT 68
20635: PPUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: CALL_OW 255
20645: PPUSH
20646: CALL_OW 321
20650: PUSH
20651: LD_INT 2
20653: EQUAL
20654: IFFALSE 20666
// eff := 70 else
20656: LD_ADDR_VAR 0 4
20660: PUSH
20661: LD_INT 70
20663: ST_TO_ADDR
20664: GO 20674
// eff := 30 ;
20666: LD_ADDR_VAR 0 4
20670: PUSH
20671: LD_INT 30
20673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 250
20683: PPUSH
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 251
20693: PPUSH
20694: LD_VAR 0 4
20698: PPUSH
20699: CALL_OW 495
// end ; end ;
20703: LD_VAR 0 2
20707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20708: LD_INT 0
20710: PPUSH
// end ;
20711: LD_VAR 0 4
20715: RET
// export function SOS_Command ( cmd ) ; begin
20716: LD_INT 0
20718: PPUSH
// end ;
20719: LD_VAR 0 2
20723: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20724: LD_INT 0
20726: PPUSH
// end ;
20727: LD_VAR 0 6
20731: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20732: LD_INT 0
20734: PPUSH
20735: PPUSH
// if not vehicle or not factory then
20736: LD_VAR 0 1
20740: NOT
20741: PUSH
20742: LD_VAR 0 2
20746: NOT
20747: OR
20748: IFFALSE 20752
// exit ;
20750: GO 20983
// if factoryWaypoints >= factory then
20752: LD_EXP 73
20756: PUSH
20757: LD_VAR 0 2
20761: GREATEREQUAL
20762: IFFALSE 20983
// if factoryWaypoints [ factory ] then
20764: LD_EXP 73
20768: PUSH
20769: LD_VAR 0 2
20773: ARRAY
20774: IFFALSE 20983
// begin if GetControl ( vehicle ) = control_manual then
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 263
20785: PUSH
20786: LD_INT 1
20788: EQUAL
20789: IFFALSE 20870
// begin driver := IsDrivenBy ( vehicle ) ;
20791: LD_ADDR_VAR 0 4
20795: PUSH
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 311
20805: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20806: LD_VAR 0 4
20810: PPUSH
20811: LD_EXP 73
20815: PUSH
20816: LD_VAR 0 2
20820: ARRAY
20821: PUSH
20822: LD_INT 3
20824: ARRAY
20825: PPUSH
20826: LD_EXP 73
20830: PUSH
20831: LD_VAR 0 2
20835: ARRAY
20836: PUSH
20837: LD_INT 4
20839: ARRAY
20840: PPUSH
20841: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20845: LD_VAR 0 4
20849: PPUSH
20850: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20854: LD_VAR 0 4
20858: PPUSH
20859: LD_VAR 0 2
20863: PPUSH
20864: CALL_OW 180
// end else
20868: GO 20983
// if GetControl ( vehicle ) = control_remote then
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 263
20879: PUSH
20880: LD_INT 2
20882: EQUAL
20883: IFFALSE 20944
// begin wait ( 0 0$2 ) ;
20885: LD_INT 70
20887: PPUSH
20888: CALL_OW 67
// if Connect ( vehicle ) then
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL 33170 0 1
20901: IFFALSE 20942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20903: LD_VAR 0 1
20907: PPUSH
20908: LD_EXP 73
20912: PUSH
20913: LD_VAR 0 2
20917: ARRAY
20918: PUSH
20919: LD_INT 3
20921: ARRAY
20922: PPUSH
20923: LD_EXP 73
20927: PUSH
20928: LD_VAR 0 2
20932: ARRAY
20933: PUSH
20934: LD_INT 4
20936: ARRAY
20937: PPUSH
20938: CALL_OW 171
// end else
20942: GO 20983
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20944: LD_VAR 0 1
20948: PPUSH
20949: LD_EXP 73
20953: PUSH
20954: LD_VAR 0 2
20958: ARRAY
20959: PUSH
20960: LD_INT 3
20962: ARRAY
20963: PPUSH
20964: LD_EXP 73
20968: PUSH
20969: LD_VAR 0 2
20973: ARRAY
20974: PUSH
20975: LD_INT 4
20977: ARRAY
20978: PPUSH
20979: CALL_OW 171
// end ; end ;
20983: LD_VAR 0 3
20987: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20988: LD_INT 0
20990: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20991: LD_VAR 0 1
20995: PUSH
20996: LD_INT 250
20998: EQUAL
20999: PUSH
21000: LD_VAR 0 2
21004: PPUSH
21005: CALL_OW 264
21009: PUSH
21010: LD_INT 81
21012: EQUAL
21013: AND
21014: IFFALSE 21035
// MinerPlaceMine ( unit , x , y ) ;
21016: LD_VAR 0 2
21020: PPUSH
21021: LD_VAR 0 4
21025: PPUSH
21026: LD_VAR 0 5
21030: PPUSH
21031: CALL 23420 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21035: LD_VAR 0 1
21039: PUSH
21040: LD_INT 251
21042: EQUAL
21043: PUSH
21044: LD_VAR 0 2
21048: PPUSH
21049: CALL_OW 264
21053: PUSH
21054: LD_INT 81
21056: EQUAL
21057: AND
21058: IFFALSE 21079
// MinerDetonateMine ( unit , x , y ) ;
21060: LD_VAR 0 2
21064: PPUSH
21065: LD_VAR 0 4
21069: PPUSH
21070: LD_VAR 0 5
21074: PPUSH
21075: CALL 23695 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21079: LD_VAR 0 1
21083: PUSH
21084: LD_INT 252
21086: EQUAL
21087: PUSH
21088: LD_VAR 0 2
21092: PPUSH
21093: CALL_OW 264
21097: PUSH
21098: LD_INT 81
21100: EQUAL
21101: AND
21102: IFFALSE 21123
// MinerCreateMinefield ( unit , x , y ) ;
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 4
21113: PPUSH
21114: LD_VAR 0 5
21118: PPUSH
21119: CALL 24112 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21123: LD_VAR 0 1
21127: PUSH
21128: LD_INT 253
21130: EQUAL
21131: PUSH
21132: LD_VAR 0 2
21136: PPUSH
21137: CALL_OW 257
21141: PUSH
21142: LD_INT 5
21144: EQUAL
21145: AND
21146: IFFALSE 21167
// ComBinocular ( unit , x , y ) ;
21148: LD_VAR 0 2
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: LD_VAR 0 5
21162: PPUSH
21163: CALL 24481 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21167: LD_VAR 0 1
21171: PUSH
21172: LD_INT 254
21174: EQUAL
21175: PUSH
21176: LD_VAR 0 2
21180: PPUSH
21181: CALL_OW 264
21185: PUSH
21186: LD_INT 99
21188: EQUAL
21189: AND
21190: PUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 263
21200: PUSH
21201: LD_INT 3
21203: EQUAL
21204: AND
21205: IFFALSE 21221
// HackDestroyVehicle ( unit , selectedUnit ) ;
21207: LD_VAR 0 2
21211: PPUSH
21212: LD_VAR 0 3
21216: PPUSH
21217: CALL 22784 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21221: LD_VAR 0 1
21225: PUSH
21226: LD_INT 255
21228: EQUAL
21229: PUSH
21230: LD_VAR 0 2
21234: PPUSH
21235: CALL_OW 264
21239: PUSH
21240: LD_INT 14
21242: PUSH
21243: LD_INT 53
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: IN
21250: AND
21251: PUSH
21252: LD_VAR 0 4
21256: PPUSH
21257: LD_VAR 0 5
21261: PPUSH
21262: CALL_OW 488
21266: AND
21267: IFFALSE 21291
// CutTreeXYR ( unit , x , y , 12 ) ;
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: LD_INT 12
21286: PPUSH
21287: CALL 21354 0 4
// if cmd = 256 then
21291: LD_VAR 0 1
21295: PUSH
21296: LD_INT 256
21298: EQUAL
21299: IFFALSE 21320
// SetFactoryWaypoint ( unit , x , y ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: LD_VAR 0 4
21310: PPUSH
21311: LD_VAR 0 5
21315: PPUSH
21316: CALL 19301 0 3
// if cmd = 257 then
21320: LD_VAR 0 1
21324: PUSH
21325: LD_INT 257
21327: EQUAL
21328: IFFALSE 21349
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21330: LD_VAR 0 2
21334: PPUSH
21335: LD_VAR 0 4
21339: PPUSH
21340: LD_VAR 0 5
21344: PPUSH
21345: CALL 19663 0 3
// end ;
21349: LD_VAR 0 6
21353: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21354: LD_INT 0
21356: PPUSH
21357: PPUSH
21358: PPUSH
21359: PPUSH
21360: PPUSH
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21365: LD_VAR 0 1
21369: NOT
21370: PUSH
21371: LD_VAR 0 2
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: CALL_OW 488
21385: NOT
21386: OR
21387: PUSH
21388: LD_VAR 0 4
21392: NOT
21393: OR
21394: IFFALSE 21398
// exit ;
21396: GO 21738
// list := [ ] ;
21398: LD_ADDR_VAR 0 13
21402: PUSH
21403: EMPTY
21404: ST_TO_ADDR
// if x - r < 0 then
21405: LD_VAR 0 2
21409: PUSH
21410: LD_VAR 0 4
21414: MINUS
21415: PUSH
21416: LD_INT 0
21418: LESS
21419: IFFALSE 21431
// min_x := 0 else
21421: LD_ADDR_VAR 0 7
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
21429: GO 21447
// min_x := x - r ;
21431: LD_ADDR_VAR 0 7
21435: PUSH
21436: LD_VAR 0 2
21440: PUSH
21441: LD_VAR 0 4
21445: MINUS
21446: ST_TO_ADDR
// if y - r < 0 then
21447: LD_VAR 0 3
21451: PUSH
21452: LD_VAR 0 4
21456: MINUS
21457: PUSH
21458: LD_INT 0
21460: LESS
21461: IFFALSE 21473
// min_y := 0 else
21463: LD_ADDR_VAR 0 8
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
21471: GO 21489
// min_y := y - r ;
21473: LD_ADDR_VAR 0 8
21477: PUSH
21478: LD_VAR 0 3
21482: PUSH
21483: LD_VAR 0 4
21487: MINUS
21488: ST_TO_ADDR
// max_x := x + r ;
21489: LD_ADDR_VAR 0 9
21493: PUSH
21494: LD_VAR 0 2
21498: PUSH
21499: LD_VAR 0 4
21503: PLUS
21504: ST_TO_ADDR
// max_y := y + r ;
21505: LD_ADDR_VAR 0 10
21509: PUSH
21510: LD_VAR 0 3
21514: PUSH
21515: LD_VAR 0 4
21519: PLUS
21520: ST_TO_ADDR
// for _x = min_x to max_x do
21521: LD_ADDR_VAR 0 11
21525: PUSH
21526: DOUBLE
21527: LD_VAR 0 7
21531: DEC
21532: ST_TO_ADDR
21533: LD_VAR 0 9
21537: PUSH
21538: FOR_TO
21539: IFFALSE 21656
// for _y = min_y to max_y do
21541: LD_ADDR_VAR 0 12
21545: PUSH
21546: DOUBLE
21547: LD_VAR 0 8
21551: DEC
21552: ST_TO_ADDR
21553: LD_VAR 0 10
21557: PUSH
21558: FOR_TO
21559: IFFALSE 21652
// begin if not ValidHex ( _x , _y ) then
21561: LD_VAR 0 11
21565: PPUSH
21566: LD_VAR 0 12
21570: PPUSH
21571: CALL_OW 488
21575: NOT
21576: IFFALSE 21580
// continue ;
21578: GO 21558
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21580: LD_VAR 0 11
21584: PPUSH
21585: LD_VAR 0 12
21589: PPUSH
21590: CALL_OW 351
21594: PUSH
21595: LD_VAR 0 11
21599: PPUSH
21600: LD_VAR 0 12
21604: PPUSH
21605: CALL_OW 554
21609: AND
21610: IFFALSE 21650
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21612: LD_ADDR_VAR 0 13
21616: PUSH
21617: LD_VAR 0 13
21621: PPUSH
21622: LD_VAR 0 13
21626: PUSH
21627: LD_INT 1
21629: PLUS
21630: PPUSH
21631: LD_VAR 0 11
21635: PUSH
21636: LD_VAR 0 12
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PPUSH
21645: CALL_OW 2
21649: ST_TO_ADDR
// end ;
21650: GO 21558
21652: POP
21653: POP
21654: GO 21538
21656: POP
21657: POP
// if not list then
21658: LD_VAR 0 13
21662: NOT
21663: IFFALSE 21667
// exit ;
21665: GO 21738
// for i in list do
21667: LD_ADDR_VAR 0 6
21671: PUSH
21672: LD_VAR 0 13
21676: PUSH
21677: FOR_IN
21678: IFFALSE 21736
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_STRING M
21687: PUSH
21688: LD_VAR 0 6
21692: PUSH
21693: LD_INT 1
21695: ARRAY
21696: PUSH
21697: LD_VAR 0 6
21701: PUSH
21702: LD_INT 2
21704: ARRAY
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: PPUSH
21730: CALL_OW 447
21734: GO 21677
21736: POP
21737: POP
// end ;
21738: LD_VAR 0 5
21742: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21743: LD_EXP 76
21747: NOT
21748: IFFALSE 21798
21750: GO 21752
21752: DISABLE
// begin initHack := true ;
21753: LD_ADDR_EXP 76
21757: PUSH
21758: LD_INT 1
21760: ST_TO_ADDR
// hackTanks := [ ] ;
21761: LD_ADDR_EXP 77
21765: PUSH
21766: EMPTY
21767: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21768: LD_ADDR_EXP 78
21772: PUSH
21773: EMPTY
21774: ST_TO_ADDR
// hackLimit := 3 ;
21775: LD_ADDR_EXP 79
21779: PUSH
21780: LD_INT 3
21782: ST_TO_ADDR
// hackDist := 12 ;
21783: LD_ADDR_EXP 80
21787: PUSH
21788: LD_INT 12
21790: ST_TO_ADDR
// hackCounter := [ ] ;
21791: LD_ADDR_EXP 81
21795: PUSH
21796: EMPTY
21797: ST_TO_ADDR
// end ;
21798: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21799: LD_EXP 76
21803: PUSH
21804: LD_INT 34
21806: PUSH
21807: LD_INT 99
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PPUSH
21814: CALL_OW 69
21818: AND
21819: IFFALSE 22072
21821: GO 21823
21823: DISABLE
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
// begin enable ;
21828: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21829: LD_ADDR_VAR 0 1
21833: PUSH
21834: LD_INT 34
21836: PUSH
21837: LD_INT 99
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PPUSH
21844: CALL_OW 69
21848: PUSH
21849: FOR_IN
21850: IFFALSE 22070
// begin if not i in hackTanks then
21852: LD_VAR 0 1
21856: PUSH
21857: LD_EXP 77
21861: IN
21862: NOT
21863: IFFALSE 21946
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21865: LD_ADDR_EXP 77
21869: PUSH
21870: LD_EXP 77
21874: PPUSH
21875: LD_EXP 77
21879: PUSH
21880: LD_INT 1
21882: PLUS
21883: PPUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: CALL_OW 1
21893: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21894: LD_ADDR_EXP 78
21898: PUSH
21899: LD_EXP 78
21903: PPUSH
21904: LD_EXP 78
21908: PUSH
21909: LD_INT 1
21911: PLUS
21912: PPUSH
21913: EMPTY
21914: PPUSH
21915: CALL_OW 1
21919: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21920: LD_ADDR_EXP 81
21924: PUSH
21925: LD_EXP 81
21929: PPUSH
21930: LD_EXP 81
21934: PUSH
21935: LD_INT 1
21937: PLUS
21938: PPUSH
21939: EMPTY
21940: PPUSH
21941: CALL_OW 1
21945: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21946: LD_VAR 0 1
21950: PPUSH
21951: CALL_OW 302
21955: NOT
21956: IFFALSE 21969
// begin HackUnlinkAll ( i ) ;
21958: LD_VAR 0 1
21962: PPUSH
21963: CALL 22075 0 1
// continue ;
21967: GO 21849
// end ; HackCheckCapturedStatus ( i ) ;
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL 22518 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21978: LD_ADDR_VAR 0 2
21982: PUSH
21983: LD_INT 81
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 255
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 91
22012: PUSH
22013: LD_VAR 0 1
22017: PUSH
22018: LD_EXP 80
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 50
22030: PUSH
22031: EMPTY
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: ST_TO_ADDR
// if not tmp then
22045: LD_VAR 0 2
22049: NOT
22050: IFFALSE 22054
// continue ;
22052: GO 21849
// HackLink ( i , tmp ) ;
22054: LD_VAR 0 1
22058: PPUSH
22059: LD_VAR 0 2
22063: PPUSH
22064: CALL 22211 0 2
// end ;
22068: GO 21849
22070: POP
22071: POP
// end ;
22072: PPOPN 2
22074: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22075: LD_INT 0
22077: PPUSH
22078: PPUSH
22079: PPUSH
// if not hack in hackTanks then
22080: LD_VAR 0 1
22084: PUSH
22085: LD_EXP 77
22089: IN
22090: NOT
22091: IFFALSE 22095
// exit ;
22093: GO 22206
// index := GetElementIndex ( hackTanks , hack ) ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_EXP 77
22104: PPUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL 29986 0 2
22114: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22115: LD_EXP 78
22119: PUSH
22120: LD_VAR 0 4
22124: ARRAY
22125: IFFALSE 22206
// begin for i in hackTanksCaptured [ index ] do
22127: LD_ADDR_VAR 0 3
22131: PUSH
22132: LD_EXP 78
22136: PUSH
22137: LD_VAR 0 4
22141: ARRAY
22142: PUSH
22143: FOR_IN
22144: IFFALSE 22170
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22146: LD_VAR 0 3
22150: PUSH
22151: LD_INT 1
22153: ARRAY
22154: PPUSH
22155: LD_VAR 0 3
22159: PUSH
22160: LD_INT 2
22162: ARRAY
22163: PPUSH
22164: CALL_OW 235
22168: GO 22143
22170: POP
22171: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22172: LD_ADDR_EXP 78
22176: PUSH
22177: LD_EXP 78
22181: PPUSH
22182: LD_VAR 0 4
22186: PPUSH
22187: EMPTY
22188: PPUSH
22189: CALL_OW 1
22193: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 505
// end ; end ;
22206: LD_VAR 0 2
22210: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
// if not hack in hackTanks or not vehicles then
22216: LD_VAR 0 1
22220: PUSH
22221: LD_EXP 77
22225: IN
22226: NOT
22227: PUSH
22228: LD_VAR 0 2
22232: NOT
22233: OR
22234: IFFALSE 22238
// exit ;
22236: GO 22513
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: LD_VAR 0 2
22252: PPUSH
22253: LD_INT 1
22255: PPUSH
22256: LD_INT 1
22258: PPUSH
22259: CALL 30636 0 4
22263: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22264: LD_ADDR_VAR 0 5
22268: PUSH
22269: LD_EXP 77
22273: PPUSH
22274: LD_VAR 0 1
22278: PPUSH
22279: CALL 29986 0 2
22283: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22284: LD_EXP 78
22288: PUSH
22289: LD_VAR 0 5
22293: ARRAY
22294: PUSH
22295: LD_EXP 79
22299: LESS
22300: IFFALSE 22489
// begin for i := 1 to vehicles do
22302: LD_ADDR_VAR 0 4
22306: PUSH
22307: DOUBLE
22308: LD_INT 1
22310: DEC
22311: ST_TO_ADDR
22312: LD_VAR 0 2
22316: PUSH
22317: FOR_TO
22318: IFFALSE 22487
// begin if hackTanksCaptured [ index ] = hackLimit then
22320: LD_EXP 78
22324: PUSH
22325: LD_VAR 0 5
22329: ARRAY
22330: PUSH
22331: LD_EXP 79
22335: EQUAL
22336: IFFALSE 22340
// break ;
22338: GO 22487
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22340: LD_ADDR_EXP 81
22344: PUSH
22345: LD_EXP 81
22349: PPUSH
22350: LD_VAR 0 5
22354: PPUSH
22355: LD_EXP 81
22359: PUSH
22360: LD_VAR 0 5
22364: ARRAY
22365: PUSH
22366: LD_INT 1
22368: PLUS
22369: PPUSH
22370: CALL_OW 1
22374: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22375: LD_ADDR_EXP 78
22379: PUSH
22380: LD_EXP 78
22384: PPUSH
22385: LD_VAR 0 5
22389: PUSH
22390: LD_EXP 78
22394: PUSH
22395: LD_VAR 0 5
22399: ARRAY
22400: PUSH
22401: LD_INT 1
22403: PLUS
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PPUSH
22409: LD_VAR 0 2
22413: PUSH
22414: LD_VAR 0 4
22418: ARRAY
22419: PUSH
22420: LD_VAR 0 2
22424: PUSH
22425: LD_VAR 0 4
22429: ARRAY
22430: PPUSH
22431: CALL_OW 255
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL 30201 0 3
22444: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22445: LD_VAR 0 2
22449: PUSH
22450: LD_VAR 0 4
22454: ARRAY
22455: PPUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 255
22465: PPUSH
22466: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22470: LD_VAR 0 2
22474: PUSH
22475: LD_VAR 0 4
22479: ARRAY
22480: PPUSH
22481: CALL_OW 141
// end ;
22485: GO 22317
22487: POP
22488: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22489: LD_VAR 0 1
22493: PPUSH
22494: LD_EXP 78
22498: PUSH
22499: LD_VAR 0 5
22503: ARRAY
22504: PUSH
22505: LD_INT 0
22507: PLUS
22508: PPUSH
22509: CALL_OW 505
// end ;
22513: LD_VAR 0 3
22517: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22518: LD_INT 0
22520: PPUSH
22521: PPUSH
22522: PPUSH
22523: PPUSH
// if not hack in hackTanks then
22524: LD_VAR 0 1
22528: PUSH
22529: LD_EXP 77
22533: IN
22534: NOT
22535: IFFALSE 22539
// exit ;
22537: GO 22779
// index := GetElementIndex ( hackTanks , hack ) ;
22539: LD_ADDR_VAR 0 4
22543: PUSH
22544: LD_EXP 77
22548: PPUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL 29986 0 2
22558: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22559: LD_ADDR_VAR 0 3
22563: PUSH
22564: DOUBLE
22565: LD_EXP 78
22569: PUSH
22570: LD_VAR 0 4
22574: ARRAY
22575: INC
22576: ST_TO_ADDR
22577: LD_INT 1
22579: PUSH
22580: FOR_DOWNTO
22581: IFFALSE 22753
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22583: LD_ADDR_VAR 0 5
22587: PUSH
22588: LD_EXP 78
22592: PUSH
22593: LD_VAR 0 4
22597: ARRAY
22598: PUSH
22599: LD_VAR 0 3
22603: ARRAY
22604: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22605: LD_VAR 0 5
22609: PUSH
22610: LD_INT 1
22612: ARRAY
22613: PPUSH
22614: CALL_OW 302
22618: NOT
22619: PUSH
22620: LD_VAR 0 5
22624: PUSH
22625: LD_INT 1
22627: ARRAY
22628: PPUSH
22629: CALL_OW 255
22633: PUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL_OW 255
22643: NONEQUAL
22644: OR
22645: IFFALSE 22751
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22647: LD_VAR 0 5
22651: PUSH
22652: LD_INT 1
22654: ARRAY
22655: PPUSH
22656: CALL_OW 305
22660: PUSH
22661: LD_VAR 0 5
22665: PUSH
22666: LD_INT 1
22668: ARRAY
22669: PPUSH
22670: CALL_OW 255
22674: PUSH
22675: LD_VAR 0 1
22679: PPUSH
22680: CALL_OW 255
22684: EQUAL
22685: AND
22686: IFFALSE 22710
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22688: LD_VAR 0 5
22692: PUSH
22693: LD_INT 1
22695: ARRAY
22696: PPUSH
22697: LD_VAR 0 5
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PPUSH
22706: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22710: LD_ADDR_EXP 78
22714: PUSH
22715: LD_EXP 78
22719: PPUSH
22720: LD_VAR 0 4
22724: PPUSH
22725: LD_EXP 78
22729: PUSH
22730: LD_VAR 0 4
22734: ARRAY
22735: PPUSH
22736: LD_VAR 0 3
22740: PPUSH
22741: CALL_OW 3
22745: PPUSH
22746: CALL_OW 1
22750: ST_TO_ADDR
// end ; end ;
22751: GO 22580
22753: POP
22754: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_EXP 78
22764: PUSH
22765: LD_VAR 0 4
22769: ARRAY
22770: PUSH
22771: LD_INT 0
22773: PLUS
22774: PPUSH
22775: CALL_OW 505
// end ;
22779: LD_VAR 0 2
22783: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22784: LD_INT 0
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
// if not hack in hackTanks then
22790: LD_VAR 0 1
22794: PUSH
22795: LD_EXP 77
22799: IN
22800: NOT
22801: IFFALSE 22805
// exit ;
22803: GO 22890
// index := GetElementIndex ( hackTanks , hack ) ;
22805: LD_ADDR_VAR 0 5
22809: PUSH
22810: LD_EXP 77
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL 29986 0 2
22824: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22825: LD_ADDR_VAR 0 4
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_EXP 78
22839: PUSH
22840: LD_VAR 0 5
22844: ARRAY
22845: PUSH
22846: FOR_TO
22847: IFFALSE 22888
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22849: LD_EXP 78
22853: PUSH
22854: LD_VAR 0 5
22858: ARRAY
22859: PUSH
22860: LD_VAR 0 4
22864: ARRAY
22865: PUSH
22866: LD_INT 1
22868: ARRAY
22869: PUSH
22870: LD_VAR 0 2
22874: EQUAL
22875: IFFALSE 22886
// KillUnit ( vehicle ) ;
22877: LD_VAR 0 2
22881: PPUSH
22882: CALL_OW 66
22886: GO 22846
22888: POP
22889: POP
// end ;
22890: LD_VAR 0 3
22894: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22895: LD_EXP 82
22899: NOT
22900: IFFALSE 22935
22902: GO 22904
22904: DISABLE
// begin initMiner := true ;
22905: LD_ADDR_EXP 82
22909: PUSH
22910: LD_INT 1
22912: ST_TO_ADDR
// minersList := [ ] ;
22913: LD_ADDR_EXP 83
22917: PUSH
22918: EMPTY
22919: ST_TO_ADDR
// minerMinesList := [ ] ;
22920: LD_ADDR_EXP 84
22924: PUSH
22925: EMPTY
22926: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22927: LD_ADDR_EXP 85
22931: PUSH
22932: LD_INT 5
22934: ST_TO_ADDR
// end ;
22935: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22936: LD_EXP 82
22940: PUSH
22941: LD_INT 34
22943: PUSH
22944: LD_INT 81
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PPUSH
22951: CALL_OW 69
22955: AND
22956: IFFALSE 23417
22958: GO 22960
22960: DISABLE
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
// begin enable ;
22967: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: LD_INT 34
22975: PUSH
22976: LD_INT 81
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: PUSH
22988: FOR_IN
22989: IFFALSE 23061
// begin if not i in minersList then
22991: LD_VAR 0 1
22995: PUSH
22996: LD_EXP 83
23000: IN
23001: NOT
23002: IFFALSE 23059
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23004: LD_ADDR_EXP 83
23008: PUSH
23009: LD_EXP 83
23013: PPUSH
23014: LD_EXP 83
23018: PUSH
23019: LD_INT 1
23021: PLUS
23022: PPUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 1
23032: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23033: LD_ADDR_EXP 84
23037: PUSH
23038: LD_EXP 84
23042: PPUSH
23043: LD_EXP 84
23047: PUSH
23048: LD_INT 1
23050: PLUS
23051: PPUSH
23052: EMPTY
23053: PPUSH
23054: CALL_OW 1
23058: ST_TO_ADDR
// end end ;
23059: GO 22988
23061: POP
23062: POP
// for i := minerMinesList downto 1 do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: DOUBLE
23069: LD_EXP 84
23073: INC
23074: ST_TO_ADDR
23075: LD_INT 1
23077: PUSH
23078: FOR_DOWNTO
23079: IFFALSE 23415
// begin if IsLive ( minersList [ i ] ) then
23081: LD_EXP 83
23085: PUSH
23086: LD_VAR 0 1
23090: ARRAY
23091: PPUSH
23092: CALL_OW 300
23096: IFFALSE 23124
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23098: LD_EXP 83
23102: PUSH
23103: LD_VAR 0 1
23107: ARRAY
23108: PPUSH
23109: LD_EXP 84
23113: PUSH
23114: LD_VAR 0 1
23118: ARRAY
23119: PPUSH
23120: CALL_OW 505
// if not minerMinesList [ i ] then
23124: LD_EXP 84
23128: PUSH
23129: LD_VAR 0 1
23133: ARRAY
23134: NOT
23135: IFFALSE 23139
// continue ;
23137: GO 23078
// for j := minerMinesList [ i ] downto 1 do
23139: LD_ADDR_VAR 0 2
23143: PUSH
23144: DOUBLE
23145: LD_EXP 84
23149: PUSH
23150: LD_VAR 0 1
23154: ARRAY
23155: INC
23156: ST_TO_ADDR
23157: LD_INT 1
23159: PUSH
23160: FOR_DOWNTO
23161: IFFALSE 23411
// begin side := GetSide ( minersList [ i ] ) ;
23163: LD_ADDR_VAR 0 3
23167: PUSH
23168: LD_EXP 83
23172: PUSH
23173: LD_VAR 0 1
23177: ARRAY
23178: PPUSH
23179: CALL_OW 255
23183: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23184: LD_ADDR_VAR 0 4
23188: PUSH
23189: LD_EXP 84
23193: PUSH
23194: LD_VAR 0 1
23198: ARRAY
23199: PUSH
23200: LD_VAR 0 2
23204: ARRAY
23205: PUSH
23206: LD_INT 1
23208: ARRAY
23209: PPUSH
23210: LD_EXP 84
23214: PUSH
23215: LD_VAR 0 1
23219: ARRAY
23220: PUSH
23221: LD_VAR 0 2
23225: ARRAY
23226: PUSH
23227: LD_INT 2
23229: ARRAY
23230: PPUSH
23231: CALL_OW 428
23235: ST_TO_ADDR
// if not tmp then
23236: LD_VAR 0 4
23240: NOT
23241: IFFALSE 23245
// continue ;
23243: GO 23160
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23245: LD_VAR 0 4
23249: PUSH
23250: LD_INT 81
23252: PUSH
23253: LD_VAR 0 3
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PPUSH
23262: CALL_OW 69
23266: IN
23267: PUSH
23268: LD_EXP 84
23272: PUSH
23273: LD_VAR 0 1
23277: ARRAY
23278: PUSH
23279: LD_VAR 0 2
23283: ARRAY
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: LD_EXP 84
23293: PUSH
23294: LD_VAR 0 1
23298: ARRAY
23299: PUSH
23300: LD_VAR 0 2
23304: ARRAY
23305: PUSH
23306: LD_INT 2
23308: ARRAY
23309: PPUSH
23310: CALL_OW 458
23314: AND
23315: IFFALSE 23409
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23317: LD_EXP 84
23321: PUSH
23322: LD_VAR 0 1
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 2
23332: ARRAY
23333: PUSH
23334: LD_INT 1
23336: ARRAY
23337: PPUSH
23338: LD_EXP 84
23342: PUSH
23343: LD_VAR 0 1
23347: ARRAY
23348: PUSH
23349: LD_VAR 0 2
23353: ARRAY
23354: PUSH
23355: LD_INT 2
23357: ARRAY
23358: PPUSH
23359: LD_VAR 0 3
23363: PPUSH
23364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23368: LD_ADDR_EXP 84
23372: PUSH
23373: LD_EXP 84
23377: PPUSH
23378: LD_VAR 0 1
23382: PPUSH
23383: LD_EXP 84
23387: PUSH
23388: LD_VAR 0 1
23392: ARRAY
23393: PPUSH
23394: LD_VAR 0 2
23398: PPUSH
23399: CALL_OW 3
23403: PPUSH
23404: CALL_OW 1
23408: ST_TO_ADDR
// end ; end ;
23409: GO 23160
23411: POP
23412: POP
// end ;
23413: GO 23078
23415: POP
23416: POP
// end ;
23417: PPOPN 4
23419: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23420: LD_INT 0
23422: PPUSH
23423: PPUSH
// result := false ;
23424: LD_ADDR_VAR 0 4
23428: PUSH
23429: LD_INT 0
23431: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 264
23441: PUSH
23442: LD_INT 81
23444: EQUAL
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23690
// index := GetElementIndex ( minersList , unit ) ;
23450: LD_ADDR_VAR 0 5
23454: PUSH
23455: LD_EXP 83
23459: PPUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL 29986 0 2
23469: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23470: LD_EXP 84
23474: PUSH
23475: LD_VAR 0 5
23479: ARRAY
23480: PUSH
23481: LD_EXP 85
23485: GREATEREQUAL
23486: IFFALSE 23490
// exit ;
23488: GO 23690
// ComMoveXY ( unit , x , y ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_VAR 0 2
23499: PPUSH
23500: LD_VAR 0 3
23504: PPUSH
23505: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23509: LD_INT 35
23511: PPUSH
23512: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23516: LD_VAR 0 1
23520: PPUSH
23521: LD_VAR 0 2
23525: PPUSH
23526: LD_VAR 0 3
23530: PPUSH
23531: CALL 61249 0 3
23535: NOT
23536: PUSH
23537: LD_VAR 0 1
23541: PPUSH
23542: CALL_OW 314
23546: AND
23547: IFFALSE 23551
// exit ;
23549: GO 23690
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23551: LD_VAR 0 2
23555: PPUSH
23556: LD_VAR 0 3
23560: PPUSH
23561: CALL_OW 428
23565: PUSH
23566: LD_VAR 0 1
23570: EQUAL
23571: PUSH
23572: LD_VAR 0 1
23576: PPUSH
23577: CALL_OW 314
23581: NOT
23582: AND
23583: IFFALSE 23509
// PlaySoundXY ( x , y , PlantMine ) ;
23585: LD_VAR 0 2
23589: PPUSH
23590: LD_VAR 0 3
23594: PPUSH
23595: LD_STRING PlantMine
23597: PPUSH
23598: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23602: LD_VAR 0 2
23606: PPUSH
23607: LD_VAR 0 3
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 255
23621: PPUSH
23622: LD_INT 0
23624: PPUSH
23625: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23629: LD_ADDR_EXP 84
23633: PUSH
23634: LD_EXP 84
23638: PPUSH
23639: LD_VAR 0 5
23643: PUSH
23644: LD_EXP 84
23648: PUSH
23649: LD_VAR 0 5
23653: ARRAY
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: LD_VAR 0 2
23667: PUSH
23668: LD_VAR 0 3
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PPUSH
23677: CALL 30201 0 3
23681: ST_TO_ADDR
// result := true ;
23682: LD_ADDR_VAR 0 4
23686: PUSH
23687: LD_INT 1
23689: ST_TO_ADDR
// end ;
23690: LD_VAR 0 4
23694: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23695: LD_INT 0
23697: PPUSH
23698: PPUSH
23699: PPUSH
// if not unit in minersList then
23700: LD_VAR 0 1
23704: PUSH
23705: LD_EXP 83
23709: IN
23710: NOT
23711: IFFALSE 23715
// exit ;
23713: GO 24107
// index := GetElementIndex ( minersList , unit ) ;
23715: LD_ADDR_VAR 0 6
23719: PUSH
23720: LD_EXP 83
23724: PPUSH
23725: LD_VAR 0 1
23729: PPUSH
23730: CALL 29986 0 2
23734: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23735: LD_ADDR_VAR 0 5
23739: PUSH
23740: DOUBLE
23741: LD_EXP 84
23745: PUSH
23746: LD_VAR 0 6
23750: ARRAY
23751: INC
23752: ST_TO_ADDR
23753: LD_INT 1
23755: PUSH
23756: FOR_DOWNTO
23757: IFFALSE 23918
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23759: LD_EXP 84
23763: PUSH
23764: LD_VAR 0 6
23768: ARRAY
23769: PUSH
23770: LD_VAR 0 5
23774: ARRAY
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PUSH
23780: LD_VAR 0 2
23784: EQUAL
23785: PUSH
23786: LD_EXP 84
23790: PUSH
23791: LD_VAR 0 6
23795: ARRAY
23796: PUSH
23797: LD_VAR 0 5
23801: ARRAY
23802: PUSH
23803: LD_INT 2
23805: ARRAY
23806: PUSH
23807: LD_VAR 0 3
23811: EQUAL
23812: AND
23813: IFFALSE 23916
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23815: LD_EXP 84
23819: PUSH
23820: LD_VAR 0 6
23824: ARRAY
23825: PUSH
23826: LD_VAR 0 5
23830: ARRAY
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PPUSH
23836: LD_EXP 84
23840: PUSH
23841: LD_VAR 0 6
23845: ARRAY
23846: PUSH
23847: LD_VAR 0 5
23851: ARRAY
23852: PUSH
23853: LD_INT 2
23855: ARRAY
23856: PPUSH
23857: LD_VAR 0 1
23861: PPUSH
23862: CALL_OW 255
23866: PPUSH
23867: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23871: LD_ADDR_EXP 84
23875: PUSH
23876: LD_EXP 84
23880: PPUSH
23881: LD_VAR 0 6
23885: PPUSH
23886: LD_EXP 84
23890: PUSH
23891: LD_VAR 0 6
23895: ARRAY
23896: PPUSH
23897: LD_VAR 0 5
23901: PPUSH
23902: CALL_OW 3
23906: PPUSH
23907: CALL_OW 1
23911: ST_TO_ADDR
// exit ;
23912: POP
23913: POP
23914: GO 24107
// end ; end ;
23916: GO 23756
23918: POP
23919: POP
// for i := minerMinesList [ index ] downto 1 do
23920: LD_ADDR_VAR 0 5
23924: PUSH
23925: DOUBLE
23926: LD_EXP 84
23930: PUSH
23931: LD_VAR 0 6
23935: ARRAY
23936: INC
23937: ST_TO_ADDR
23938: LD_INT 1
23940: PUSH
23941: FOR_DOWNTO
23942: IFFALSE 24105
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23944: LD_EXP 84
23948: PUSH
23949: LD_VAR 0 6
23953: ARRAY
23954: PUSH
23955: LD_VAR 0 5
23959: ARRAY
23960: PUSH
23961: LD_INT 1
23963: ARRAY
23964: PPUSH
23965: LD_EXP 84
23969: PUSH
23970: LD_VAR 0 6
23974: ARRAY
23975: PUSH
23976: LD_VAR 0 5
23980: ARRAY
23981: PUSH
23982: LD_INT 2
23984: ARRAY
23985: PPUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: CALL_OW 298
24000: PUSH
24001: LD_INT 6
24003: LESS
24004: IFFALSE 24103
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24006: LD_EXP 84
24010: PUSH
24011: LD_VAR 0 6
24015: ARRAY
24016: PUSH
24017: LD_VAR 0 5
24021: ARRAY
24022: PUSH
24023: LD_INT 1
24025: ARRAY
24026: PPUSH
24027: LD_EXP 84
24031: PUSH
24032: LD_VAR 0 6
24036: ARRAY
24037: PUSH
24038: LD_VAR 0 5
24042: ARRAY
24043: PUSH
24044: LD_INT 2
24046: ARRAY
24047: PPUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 255
24057: PPUSH
24058: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24062: LD_ADDR_EXP 84
24066: PUSH
24067: LD_EXP 84
24071: PPUSH
24072: LD_VAR 0 6
24076: PPUSH
24077: LD_EXP 84
24081: PUSH
24082: LD_VAR 0 6
24086: ARRAY
24087: PPUSH
24088: LD_VAR 0 5
24092: PPUSH
24093: CALL_OW 3
24097: PPUSH
24098: CALL_OW 1
24102: ST_TO_ADDR
// end ; end ;
24103: GO 23941
24105: POP
24106: POP
// end ;
24107: LD_VAR 0 4
24111: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
24116: PPUSH
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 264
24132: PUSH
24133: LD_INT 81
24135: EQUAL
24136: NOT
24137: PUSH
24138: LD_VAR 0 1
24142: PUSH
24143: LD_EXP 83
24147: IN
24148: NOT
24149: OR
24150: IFFALSE 24154
// exit ;
24152: GO 24476
// index := GetElementIndex ( minersList , unit ) ;
24154: LD_ADDR_VAR 0 6
24158: PUSH
24159: LD_EXP 83
24163: PPUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL 29986 0 2
24173: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24174: LD_ADDR_VAR 0 8
24178: PUSH
24179: LD_EXP 85
24183: PUSH
24184: LD_EXP 84
24188: PUSH
24189: LD_VAR 0 6
24193: ARRAY
24194: MINUS
24195: ST_TO_ADDR
// if not minesFreeAmount then
24196: LD_VAR 0 8
24200: NOT
24201: IFFALSE 24205
// exit ;
24203: GO 24476
// tmp := [ ] ;
24205: LD_ADDR_VAR 0 7
24209: PUSH
24210: EMPTY
24211: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24212: LD_ADDR_VAR 0 5
24216: PUSH
24217: DOUBLE
24218: LD_INT 1
24220: DEC
24221: ST_TO_ADDR
24222: LD_VAR 0 8
24226: PUSH
24227: FOR_TO
24228: IFFALSE 24423
// begin _d := rand ( 0 , 5 ) ;
24230: LD_ADDR_VAR 0 11
24234: PUSH
24235: LD_INT 0
24237: PPUSH
24238: LD_INT 5
24240: PPUSH
24241: CALL_OW 12
24245: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24246: LD_ADDR_VAR 0 12
24250: PUSH
24251: LD_INT 2
24253: PPUSH
24254: LD_INT 6
24256: PPUSH
24257: CALL_OW 12
24261: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24262: LD_ADDR_VAR 0 9
24266: PUSH
24267: LD_VAR 0 2
24271: PPUSH
24272: LD_VAR 0 11
24276: PPUSH
24277: LD_VAR 0 12
24281: PPUSH
24282: CALL_OW 272
24286: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24287: LD_ADDR_VAR 0 10
24291: PUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: LD_VAR 0 11
24301: PPUSH
24302: LD_VAR 0 12
24306: PPUSH
24307: CALL_OW 273
24311: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24312: LD_VAR 0 9
24316: PPUSH
24317: LD_VAR 0 10
24321: PPUSH
24322: CALL_OW 488
24326: PUSH
24327: LD_VAR 0 9
24331: PUSH
24332: LD_VAR 0 10
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_VAR 0 7
24345: IN
24346: NOT
24347: AND
24348: PUSH
24349: LD_VAR 0 9
24353: PPUSH
24354: LD_VAR 0 10
24358: PPUSH
24359: CALL_OW 458
24363: NOT
24364: AND
24365: IFFALSE 24407
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24367: LD_ADDR_VAR 0 7
24371: PUSH
24372: LD_VAR 0 7
24376: PPUSH
24377: LD_VAR 0 7
24381: PUSH
24382: LD_INT 1
24384: PLUS
24385: PPUSH
24386: LD_VAR 0 9
24390: PUSH
24391: LD_VAR 0 10
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 1
24404: ST_TO_ADDR
24405: GO 24421
// i := i - 1 ;
24407: LD_ADDR_VAR 0 5
24411: PUSH
24412: LD_VAR 0 5
24416: PUSH
24417: LD_INT 1
24419: MINUS
24420: ST_TO_ADDR
// end ;
24421: GO 24227
24423: POP
24424: POP
// for i in tmp do
24425: LD_ADDR_VAR 0 5
24429: PUSH
24430: LD_VAR 0 7
24434: PUSH
24435: FOR_IN
24436: IFFALSE 24474
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24438: LD_VAR 0 1
24442: PPUSH
24443: LD_VAR 0 5
24447: PUSH
24448: LD_INT 1
24450: ARRAY
24451: PPUSH
24452: LD_VAR 0 5
24456: PUSH
24457: LD_INT 2
24459: ARRAY
24460: PPUSH
24461: CALL 23420 0 3
24465: NOT
24466: IFFALSE 24472
// exit ;
24468: POP
24469: POP
24470: GO 24476
24472: GO 24435
24474: POP
24475: POP
// end ;
24476: LD_VAR 0 4
24480: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
// if not GetClass ( unit ) = class_sniper then
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 257
24499: PUSH
24500: LD_INT 5
24502: EQUAL
24503: NOT
24504: IFFALSE 24508
// exit ;
24506: GO 24896
// dist := 8 ;
24508: LD_ADDR_VAR 0 5
24512: PUSH
24513: LD_INT 8
24515: ST_TO_ADDR
// viewRange := 12 ;
24516: LD_ADDR_VAR 0 7
24520: PUSH
24521: LD_INT 12
24523: ST_TO_ADDR
// side := GetSide ( unit ) ;
24524: LD_ADDR_VAR 0 6
24528: PUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: CALL_OW 255
24538: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24539: LD_INT 61
24541: PPUSH
24542: LD_VAR 0 6
24546: PPUSH
24547: CALL_OW 321
24551: PUSH
24552: LD_INT 2
24554: EQUAL
24555: IFFALSE 24565
// viewRange := 16 ;
24557: LD_ADDR_VAR 0 7
24561: PUSH
24562: LD_INT 16
24564: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24565: LD_VAR 0 1
24569: PPUSH
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: CALL_OW 297
24584: PUSH
24585: LD_VAR 0 5
24589: GREATER
24590: IFFALSE 24669
// begin ComMoveXY ( unit , x , y ) ;
24592: LD_VAR 0 1
24596: PPUSH
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_VAR 0 3
24606: PPUSH
24607: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24611: LD_INT 35
24613: PPUSH
24614: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24618: LD_VAR 0 1
24622: PPUSH
24623: LD_VAR 0 2
24627: PPUSH
24628: LD_VAR 0 3
24632: PPUSH
24633: CALL 61249 0 3
24637: NOT
24638: IFFALSE 24642
// exit ;
24640: GO 24896
// until GetDistUnitXY ( unit , x , y ) < dist ;
24642: LD_VAR 0 1
24646: PPUSH
24647: LD_VAR 0 2
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: CALL_OW 297
24661: PUSH
24662: LD_VAR 0 5
24666: LESS
24667: IFFALSE 24611
// end ; ComTurnXY ( unit , x , y ) ;
24669: LD_VAR 0 1
24673: PPUSH
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_VAR 0 3
24683: PPUSH
24684: CALL_OW 118
// wait ( 5 ) ;
24688: LD_INT 5
24690: PPUSH
24691: CALL_OW 67
// _d := GetDir ( unit ) ;
24695: LD_ADDR_VAR 0 10
24699: PUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 254
24709: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24710: LD_ADDR_VAR 0 8
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL_OW 250
24724: PPUSH
24725: LD_VAR 0 10
24729: PPUSH
24730: LD_VAR 0 5
24734: PPUSH
24735: CALL_OW 272
24739: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24740: LD_ADDR_VAR 0 9
24744: PUSH
24745: LD_VAR 0 1
24749: PPUSH
24750: CALL_OW 251
24754: PPUSH
24755: LD_VAR 0 10
24759: PPUSH
24760: LD_VAR 0 5
24764: PPUSH
24765: CALL_OW 273
24769: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24770: LD_VAR 0 8
24774: PPUSH
24775: LD_VAR 0 9
24779: PPUSH
24780: CALL_OW 488
24784: NOT
24785: IFFALSE 24789
// exit ;
24787: GO 24896
// ComAnimCustom ( unit , 1 ) ;
24789: LD_VAR 0 1
24793: PPUSH
24794: LD_INT 1
24796: PPUSH
24797: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24801: LD_VAR 0 8
24805: PPUSH
24806: LD_VAR 0 9
24810: PPUSH
24811: LD_VAR 0 6
24815: PPUSH
24816: LD_VAR 0 7
24820: PPUSH
24821: CALL_OW 330
// repeat wait ( 1 ) ;
24825: LD_INT 1
24827: PPUSH
24828: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24832: LD_VAR 0 1
24836: PPUSH
24837: CALL_OW 316
24841: PUSH
24842: LD_VAR 0 1
24846: PPUSH
24847: CALL_OW 314
24851: OR
24852: PUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 302
24862: NOT
24863: OR
24864: PUSH
24865: LD_VAR 0 1
24869: PPUSH
24870: CALL_OW 301
24874: OR
24875: IFFALSE 24825
// RemoveSeeing ( _x , _y , side ) ;
24877: LD_VAR 0 8
24881: PPUSH
24882: LD_VAR 0 9
24886: PPUSH
24887: LD_VAR 0 6
24891: PPUSH
24892: CALL_OW 331
// end ; end_of_file
24896: LD_VAR 0 4
24900: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24901: LD_VAR 0 1
24905: PUSH
24906: LD_INT 200
24908: DOUBLE
24909: GREATEREQUAL
24910: IFFALSE 24918
24912: LD_INT 299
24914: DOUBLE
24915: LESSEQUAL
24916: IFTRUE 24920
24918: GO 24952
24920: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: LD_VAR 0 3
24935: PPUSH
24936: LD_VAR 0 4
24940: PPUSH
24941: LD_VAR 0 5
24945: PPUSH
24946: CALL 20988 0 5
24950: GO 25029
24952: LD_INT 300
24954: DOUBLE
24955: GREATEREQUAL
24956: IFFALSE 24964
24958: LD_INT 399
24960: DOUBLE
24961: LESSEQUAL
24962: IFTRUE 24966
24964: GO 25028
24966: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24967: LD_VAR 0 1
24971: PPUSH
24972: LD_VAR 0 2
24976: PPUSH
24977: LD_VAR 0 3
24981: PPUSH
24982: LD_VAR 0 4
24986: PPUSH
24987: LD_VAR 0 5
24991: PPUSH
24992: LD_VAR 0 6
24996: PPUSH
24997: LD_VAR 0 7
25001: PPUSH
25002: LD_VAR 0 8
25006: PPUSH
25007: LD_VAR 0 9
25011: PPUSH
25012: LD_VAR 0 10
25016: PPUSH
25017: LD_VAR 0 11
25021: PPUSH
25022: CALL 17321 0 11
25026: GO 25029
25028: POP
// end ;
25029: PPOPN 11
25031: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 2
25041: PPUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: LD_VAR 0 4
25051: PPUSH
25052: LD_VAR 0 5
25056: PPUSH
25057: CALL 20724 0 5
// end ; end_of_file
25061: PPOPN 5
25063: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25064: LD_INT 0
25066: PPUSH
25067: PPUSH
// if exist_mode then
25068: LD_VAR 0 2
25072: IFFALSE 25097
// unit := CreateCharacter ( prefix & ident ) else
25074: LD_ADDR_VAR 0 5
25078: PUSH
25079: LD_VAR 0 3
25083: PUSH
25084: LD_VAR 0 1
25088: STR
25089: PPUSH
25090: CALL_OW 34
25094: ST_TO_ADDR
25095: GO 25112
// unit := NewCharacter ( ident ) ;
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_VAR 0 1
25106: PPUSH
25107: CALL_OW 25
25111: ST_TO_ADDR
// result := unit ;
25112: LD_ADDR_VAR 0 4
25116: PUSH
25117: LD_VAR 0 5
25121: ST_TO_ADDR
// end ;
25122: LD_VAR 0 4
25126: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25127: LD_INT 0
25129: PPUSH
25130: PPUSH
// if not side or not nation then
25131: LD_VAR 0 1
25135: NOT
25136: PUSH
25137: LD_VAR 0 2
25141: NOT
25142: OR
25143: IFFALSE 25147
// exit ;
25145: GO 25915
// case nation of nation_american :
25147: LD_VAR 0 2
25151: PUSH
25152: LD_INT 1
25154: DOUBLE
25155: EQUAL
25156: IFTRUE 25160
25158: GO 25374
25160: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25161: LD_ADDR_VAR 0 4
25165: PUSH
25166: LD_INT 35
25168: PUSH
25169: LD_INT 45
25171: PUSH
25172: LD_INT 46
25174: PUSH
25175: LD_INT 47
25177: PUSH
25178: LD_INT 82
25180: PUSH
25181: LD_INT 83
25183: PUSH
25184: LD_INT 84
25186: PUSH
25187: LD_INT 85
25189: PUSH
25190: LD_INT 86
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 6
25201: PUSH
25202: LD_INT 15
25204: PUSH
25205: LD_INT 16
25207: PUSH
25208: LD_INT 7
25210: PUSH
25211: LD_INT 12
25213: PUSH
25214: LD_INT 13
25216: PUSH
25217: LD_INT 10
25219: PUSH
25220: LD_INT 14
25222: PUSH
25223: LD_INT 20
25225: PUSH
25226: LD_INT 21
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 32
25237: PUSH
25238: LD_INT 27
25240: PUSH
25241: LD_INT 36
25243: PUSH
25244: LD_INT 69
25246: PUSH
25247: LD_INT 39
25249: PUSH
25250: LD_INT 34
25252: PUSH
25253: LD_INT 40
25255: PUSH
25256: LD_INT 48
25258: PUSH
25259: LD_INT 49
25261: PUSH
25262: LD_INT 50
25264: PUSH
25265: LD_INT 51
25267: PUSH
25268: LD_INT 52
25270: PUSH
25271: LD_INT 53
25273: PUSH
25274: LD_INT 54
25276: PUSH
25277: LD_INT 55
25279: PUSH
25280: LD_INT 56
25282: PUSH
25283: LD_INT 57
25285: PUSH
25286: LD_INT 58
25288: PUSH
25289: LD_INT 59
25291: PUSH
25292: LD_INT 60
25294: PUSH
25295: LD_INT 61
25297: PUSH
25298: LD_INT 62
25300: PUSH
25301: LD_INT 80
25303: PUSH
25304: LD_INT 82
25306: PUSH
25307: LD_INT 83
25309: PUSH
25310: LD_INT 84
25312: PUSH
25313: LD_INT 85
25315: PUSH
25316: LD_INT 86
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: ST_TO_ADDR
25372: GO 25839
25374: LD_INT 2
25376: DOUBLE
25377: EQUAL
25378: IFTRUE 25382
25380: GO 25608
25382: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25383: LD_ADDR_VAR 0 4
25387: PUSH
25388: LD_INT 35
25390: PUSH
25391: LD_INT 45
25393: PUSH
25394: LD_INT 46
25396: PUSH
25397: LD_INT 47
25399: PUSH
25400: LD_INT 82
25402: PUSH
25403: LD_INT 83
25405: PUSH
25406: LD_INT 84
25408: PUSH
25409: LD_INT 85
25411: PUSH
25412: LD_INT 87
25414: PUSH
25415: LD_INT 70
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 11
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: LD_INT 4
25429: PUSH
25430: LD_INT 5
25432: PUSH
25433: LD_INT 6
25435: PUSH
25436: LD_INT 15
25438: PUSH
25439: LD_INT 18
25441: PUSH
25442: LD_INT 7
25444: PUSH
25445: LD_INT 17
25447: PUSH
25448: LD_INT 8
25450: PUSH
25451: LD_INT 20
25453: PUSH
25454: LD_INT 21
25456: PUSH
25457: LD_INT 22
25459: PUSH
25460: LD_INT 72
25462: PUSH
25463: LD_INT 26
25465: PUSH
25466: LD_INT 69
25468: PUSH
25469: LD_INT 39
25471: PUSH
25472: LD_INT 40
25474: PUSH
25475: LD_INT 41
25477: PUSH
25478: LD_INT 42
25480: PUSH
25481: LD_INT 43
25483: PUSH
25484: LD_INT 48
25486: PUSH
25487: LD_INT 49
25489: PUSH
25490: LD_INT 50
25492: PUSH
25493: LD_INT 51
25495: PUSH
25496: LD_INT 52
25498: PUSH
25499: LD_INT 53
25501: PUSH
25502: LD_INT 54
25504: PUSH
25505: LD_INT 55
25507: PUSH
25508: LD_INT 56
25510: PUSH
25511: LD_INT 60
25513: PUSH
25514: LD_INT 61
25516: PUSH
25517: LD_INT 62
25519: PUSH
25520: LD_INT 66
25522: PUSH
25523: LD_INT 67
25525: PUSH
25526: LD_INT 68
25528: PUSH
25529: LD_INT 81
25531: PUSH
25532: LD_INT 82
25534: PUSH
25535: LD_INT 83
25537: PUSH
25538: LD_INT 84
25540: PUSH
25541: LD_INT 85
25543: PUSH
25544: LD_INT 87
25546: PUSH
25547: LD_INT 88
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
25606: GO 25839
25608: LD_INT 3
25610: DOUBLE
25611: EQUAL
25612: IFTRUE 25616
25614: GO 25838
25616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25617: LD_ADDR_VAR 0 4
25621: PUSH
25622: LD_INT 46
25624: PUSH
25625: LD_INT 47
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: LD_INT 82
25636: PUSH
25637: LD_INT 83
25639: PUSH
25640: LD_INT 84
25642: PUSH
25643: LD_INT 85
25645: PUSH
25646: LD_INT 86
25648: PUSH
25649: LD_INT 11
25651: PUSH
25652: LD_INT 9
25654: PUSH
25655: LD_INT 20
25657: PUSH
25658: LD_INT 19
25660: PUSH
25661: LD_INT 21
25663: PUSH
25664: LD_INT 24
25666: PUSH
25667: LD_INT 22
25669: PUSH
25670: LD_INT 25
25672: PUSH
25673: LD_INT 28
25675: PUSH
25676: LD_INT 29
25678: PUSH
25679: LD_INT 30
25681: PUSH
25682: LD_INT 31
25684: PUSH
25685: LD_INT 37
25687: PUSH
25688: LD_INT 38
25690: PUSH
25691: LD_INT 32
25693: PUSH
25694: LD_INT 27
25696: PUSH
25697: LD_INT 33
25699: PUSH
25700: LD_INT 69
25702: PUSH
25703: LD_INT 39
25705: PUSH
25706: LD_INT 34
25708: PUSH
25709: LD_INT 40
25711: PUSH
25712: LD_INT 71
25714: PUSH
25715: LD_INT 23
25717: PUSH
25718: LD_INT 44
25720: PUSH
25721: LD_INT 48
25723: PUSH
25724: LD_INT 49
25726: PUSH
25727: LD_INT 50
25729: PUSH
25730: LD_INT 51
25732: PUSH
25733: LD_INT 52
25735: PUSH
25736: LD_INT 53
25738: PUSH
25739: LD_INT 54
25741: PUSH
25742: LD_INT 55
25744: PUSH
25745: LD_INT 56
25747: PUSH
25748: LD_INT 57
25750: PUSH
25751: LD_INT 58
25753: PUSH
25754: LD_INT 59
25756: PUSH
25757: LD_INT 63
25759: PUSH
25760: LD_INT 64
25762: PUSH
25763: LD_INT 65
25765: PUSH
25766: LD_INT 82
25768: PUSH
25769: LD_INT 83
25771: PUSH
25772: LD_INT 84
25774: PUSH
25775: LD_INT 85
25777: PUSH
25778: LD_INT 86
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: ST_TO_ADDR
25836: GO 25839
25838: POP
// if state > - 1 and state < 3 then
25839: LD_VAR 0 3
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: GREATER
25848: PUSH
25849: LD_VAR 0 3
25853: PUSH
25854: LD_INT 3
25856: LESS
25857: AND
25858: IFFALSE 25915
// for i in result do
25860: LD_ADDR_VAR 0 5
25864: PUSH
25865: LD_VAR 0 4
25869: PUSH
25870: FOR_IN
25871: IFFALSE 25913
// if GetTech ( i , side ) <> state then
25873: LD_VAR 0 5
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 321
25887: PUSH
25888: LD_VAR 0 3
25892: NONEQUAL
25893: IFFALSE 25911
// result := result diff i ;
25895: LD_ADDR_VAR 0 4
25899: PUSH
25900: LD_VAR 0 4
25904: PUSH
25905: LD_VAR 0 5
25909: DIFF
25910: ST_TO_ADDR
25911: GO 25870
25913: POP
25914: POP
// end ;
25915: LD_VAR 0 4
25919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
25924: PPUSH
// result := true ;
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 1
25932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25933: LD_ADDR_VAR 0 5
25937: PUSH
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 480
25947: ST_TO_ADDR
// if not tmp then
25948: LD_VAR 0 5
25952: NOT
25953: IFFALSE 25957
// exit ;
25955: GO 26006
// for i in tmp do
25957: LD_ADDR_VAR 0 4
25961: PUSH
25962: LD_VAR 0 5
25966: PUSH
25967: FOR_IN
25968: IFFALSE 26004
// if GetTech ( i , side ) <> state_researched then
25970: LD_VAR 0 4
25974: PPUSH
25975: LD_VAR 0 1
25979: PPUSH
25980: CALL_OW 321
25984: PUSH
25985: LD_INT 2
25987: NONEQUAL
25988: IFFALSE 26002
// begin result := false ;
25990: LD_ADDR_VAR 0 3
25994: PUSH
25995: LD_INT 0
25997: ST_TO_ADDR
// exit ;
25998: POP
25999: POP
26000: GO 26006
// end ;
26002: GO 25967
26004: POP
26005: POP
// end ;
26006: LD_VAR 0 3
26010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26011: LD_INT 0
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26026: LD_VAR 0 1
26030: NOT
26031: PUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL_OW 257
26041: PUSH
26042: LD_INT 9
26044: NONEQUAL
26045: OR
26046: IFFALSE 26050
// exit ;
26048: GO 26623
// side := GetSide ( unit ) ;
26050: LD_ADDR_VAR 0 9
26054: PUSH
26055: LD_VAR 0 1
26059: PPUSH
26060: CALL_OW 255
26064: ST_TO_ADDR
// tech_space := tech_spacanom ;
26065: LD_ADDR_VAR 0 12
26069: PUSH
26070: LD_INT 29
26072: ST_TO_ADDR
// tech_time := tech_taurad ;
26073: LD_ADDR_VAR 0 13
26077: PUSH
26078: LD_INT 28
26080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26081: LD_ADDR_VAR 0 11
26085: PUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 310
26095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26096: LD_VAR 0 11
26100: PPUSH
26101: CALL_OW 247
26105: PUSH
26106: LD_INT 2
26108: EQUAL
26109: IFFALSE 26113
// exit ;
26111: GO 26623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26113: LD_ADDR_VAR 0 8
26117: PUSH
26118: LD_INT 81
26120: PUSH
26121: LD_VAR 0 9
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 21
26135: PUSH
26136: LD_INT 3
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PPUSH
26151: CALL_OW 69
26155: ST_TO_ADDR
// if not tmp then
26156: LD_VAR 0 8
26160: NOT
26161: IFFALSE 26165
// exit ;
26163: GO 26623
// if in_unit then
26165: LD_VAR 0 11
26169: IFFALSE 26193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26171: LD_ADDR_VAR 0 10
26175: PUSH
26176: LD_VAR 0 8
26180: PPUSH
26181: LD_VAR 0 11
26185: PPUSH
26186: CALL_OW 74
26190: ST_TO_ADDR
26191: GO 26213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26193: LD_ADDR_VAR 0 10
26197: PUSH
26198: LD_VAR 0 8
26202: PPUSH
26203: LD_VAR 0 1
26207: PPUSH
26208: CALL_OW 74
26212: ST_TO_ADDR
// if not enemy then
26213: LD_VAR 0 10
26217: NOT
26218: IFFALSE 26222
// exit ;
26220: GO 26623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26222: LD_VAR 0 11
26226: PUSH
26227: LD_VAR 0 11
26231: PPUSH
26232: LD_VAR 0 10
26236: PPUSH
26237: CALL_OW 296
26241: PUSH
26242: LD_INT 13
26244: GREATER
26245: AND
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: LD_VAR 0 10
26256: PPUSH
26257: CALL_OW 296
26261: PUSH
26262: LD_INT 12
26264: GREATER
26265: OR
26266: IFFALSE 26270
// exit ;
26268: GO 26623
// missile := [ 1 ] ;
26270: LD_ADDR_VAR 0 14
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26281: LD_VAR 0 9
26285: PPUSH
26286: LD_VAR 0 12
26290: PPUSH
26291: CALL_OW 325
26295: IFFALSE 26324
// missile := Replace ( missile , missile + 1 , 2 ) ;
26297: LD_ADDR_VAR 0 14
26301: PUSH
26302: LD_VAR 0 14
26306: PPUSH
26307: LD_VAR 0 14
26311: PUSH
26312: LD_INT 1
26314: PLUS
26315: PPUSH
26316: LD_INT 2
26318: PPUSH
26319: CALL_OW 1
26323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26324: LD_VAR 0 9
26328: PPUSH
26329: LD_VAR 0 13
26333: PPUSH
26334: CALL_OW 325
26338: PUSH
26339: LD_VAR 0 10
26343: PPUSH
26344: CALL_OW 255
26348: PPUSH
26349: LD_VAR 0 13
26353: PPUSH
26354: CALL_OW 325
26358: NOT
26359: AND
26360: IFFALSE 26389
// missile := Replace ( missile , missile + 1 , 3 ) ;
26362: LD_ADDR_VAR 0 14
26366: PUSH
26367: LD_VAR 0 14
26371: PPUSH
26372: LD_VAR 0 14
26376: PUSH
26377: LD_INT 1
26379: PLUS
26380: PPUSH
26381: LD_INT 3
26383: PPUSH
26384: CALL_OW 1
26388: ST_TO_ADDR
// if missile < 2 then
26389: LD_VAR 0 14
26393: PUSH
26394: LD_INT 2
26396: LESS
26397: IFFALSE 26401
// exit ;
26399: GO 26623
// x := GetX ( enemy ) ;
26401: LD_ADDR_VAR 0 4
26405: PUSH
26406: LD_VAR 0 10
26410: PPUSH
26411: CALL_OW 250
26415: ST_TO_ADDR
// y := GetY ( enemy ) ;
26416: LD_ADDR_VAR 0 5
26420: PUSH
26421: LD_VAR 0 10
26425: PPUSH
26426: CALL_OW 251
26430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26431: LD_ADDR_VAR 0 6
26435: PUSH
26436: LD_VAR 0 4
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PPUSH
26445: LD_INT 1
26447: PPUSH
26448: CALL_OW 12
26452: PLUS
26453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26454: LD_ADDR_VAR 0 7
26458: PUSH
26459: LD_VAR 0 5
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PPUSH
26468: LD_INT 1
26470: PPUSH
26471: CALL_OW 12
26475: PLUS
26476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26477: LD_VAR 0 6
26481: PPUSH
26482: LD_VAR 0 7
26486: PPUSH
26487: CALL_OW 488
26491: NOT
26492: IFFALSE 26514
// begin _x := x ;
26494: LD_ADDR_VAR 0 6
26498: PUSH
26499: LD_VAR 0 4
26503: ST_TO_ADDR
// _y := y ;
26504: LD_ADDR_VAR 0 7
26508: PUSH
26509: LD_VAR 0 5
26513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_INT 1
26521: PPUSH
26522: LD_VAR 0 14
26526: PPUSH
26527: CALL_OW 12
26531: ST_TO_ADDR
// case i of 1 :
26532: LD_VAR 0 3
26536: PUSH
26537: LD_INT 1
26539: DOUBLE
26540: EQUAL
26541: IFTRUE 26545
26543: GO 26562
26545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26546: LD_VAR 0 1
26550: PPUSH
26551: LD_VAR 0 10
26555: PPUSH
26556: CALL_OW 115
26560: GO 26623
26562: LD_INT 2
26564: DOUBLE
26565: EQUAL
26566: IFTRUE 26570
26568: GO 26592
26570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26571: LD_VAR 0 1
26575: PPUSH
26576: LD_VAR 0 6
26580: PPUSH
26581: LD_VAR 0 7
26585: PPUSH
26586: CALL_OW 153
26590: GO 26623
26592: LD_INT 3
26594: DOUBLE
26595: EQUAL
26596: IFTRUE 26600
26598: GO 26622
26600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_VAR 0 6
26610: PPUSH
26611: LD_VAR 0 7
26615: PPUSH
26616: CALL_OW 154
26620: GO 26623
26622: POP
// end ;
26623: LD_VAR 0 2
26627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26628: LD_INT 0
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
// if not unit or not building then
26636: LD_VAR 0 1
26640: NOT
26641: PUSH
26642: LD_VAR 0 2
26646: NOT
26647: OR
26648: IFFALSE 26652
// exit ;
26650: GO 26810
// x := GetX ( building ) ;
26652: LD_ADDR_VAR 0 5
26656: PUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: CALL_OW 250
26666: ST_TO_ADDR
// y := GetY ( building ) ;
26667: LD_ADDR_VAR 0 6
26671: PUSH
26672: LD_VAR 0 2
26676: PPUSH
26677: CALL_OW 251
26681: ST_TO_ADDR
// for i = 0 to 5 do
26682: LD_ADDR_VAR 0 4
26686: PUSH
26687: DOUBLE
26688: LD_INT 0
26690: DEC
26691: ST_TO_ADDR
26692: LD_INT 5
26694: PUSH
26695: FOR_TO
26696: IFFALSE 26808
// begin _x := ShiftX ( x , i , 3 ) ;
26698: LD_ADDR_VAR 0 7
26702: PUSH
26703: LD_VAR 0 5
26707: PPUSH
26708: LD_VAR 0 4
26712: PPUSH
26713: LD_INT 3
26715: PPUSH
26716: CALL_OW 272
26720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26721: LD_ADDR_VAR 0 8
26725: PUSH
26726: LD_VAR 0 6
26730: PPUSH
26731: LD_VAR 0 4
26735: PPUSH
26736: LD_INT 3
26738: PPUSH
26739: CALL_OW 273
26743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26744: LD_VAR 0 7
26748: PPUSH
26749: LD_VAR 0 8
26753: PPUSH
26754: CALL_OW 488
26758: NOT
26759: IFFALSE 26763
// continue ;
26761: GO 26695
// if HexInfo ( _x , _y ) = 0 then
26763: LD_VAR 0 7
26767: PPUSH
26768: LD_VAR 0 8
26772: PPUSH
26773: CALL_OW 428
26777: PUSH
26778: LD_INT 0
26780: EQUAL
26781: IFFALSE 26806
// begin ComMoveXY ( unit , _x , _y ) ;
26783: LD_VAR 0 1
26787: PPUSH
26788: LD_VAR 0 7
26792: PPUSH
26793: LD_VAR 0 8
26797: PPUSH
26798: CALL_OW 111
// exit ;
26802: POP
26803: POP
26804: GO 26810
// end ; end ;
26806: GO 26695
26808: POP
26809: POP
// end ;
26810: LD_VAR 0 3
26814: RET
// export function ScanBase ( side , base_area ) ; begin
26815: LD_INT 0
26817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26818: LD_ADDR_VAR 0 3
26822: PUSH
26823: LD_VAR 0 2
26827: PPUSH
26828: LD_INT 81
26830: PUSH
26831: LD_VAR 0 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 70
26844: ST_TO_ADDR
// end ;
26845: LD_VAR 0 3
26849: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// result := false ;
26856: LD_ADDR_VAR 0 2
26860: PUSH
26861: LD_INT 0
26863: ST_TO_ADDR
// side := GetSide ( unit ) ;
26864: LD_ADDR_VAR 0 3
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 255
26878: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26879: LD_ADDR_VAR 0 4
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 248
26893: ST_TO_ADDR
// case nat of 1 :
26894: LD_VAR 0 4
26898: PUSH
26899: LD_INT 1
26901: DOUBLE
26902: EQUAL
26903: IFTRUE 26907
26905: GO 26918
26907: POP
// tech := tech_lassight ; 2 :
26908: LD_ADDR_VAR 0 5
26912: PUSH
26913: LD_INT 12
26915: ST_TO_ADDR
26916: GO 26957
26918: LD_INT 2
26920: DOUBLE
26921: EQUAL
26922: IFTRUE 26926
26924: GO 26937
26926: POP
// tech := tech_mortar ; 3 :
26927: LD_ADDR_VAR 0 5
26931: PUSH
26932: LD_INT 41
26934: ST_TO_ADDR
26935: GO 26957
26937: LD_INT 3
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 26956
26945: POP
// tech := tech_bazooka ; end ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_INT 44
26953: ST_TO_ADDR
26954: GO 26957
26956: POP
// if Researched ( side , tech ) then
26957: LD_VAR 0 3
26961: PPUSH
26962: LD_VAR 0 5
26966: PPUSH
26967: CALL_OW 325
26971: IFFALSE 26998
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26973: LD_ADDR_VAR 0 2
26977: PUSH
26978: LD_INT 5
26980: PUSH
26981: LD_INT 8
26983: PUSH
26984: LD_INT 9
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: PUSH
26992: LD_VAR 0 4
26996: ARRAY
26997: ST_TO_ADDR
// end ;
26998: LD_VAR 0 2
27002: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27003: LD_INT 0
27005: PPUSH
27006: PPUSH
27007: PPUSH
// if not mines then
27008: LD_VAR 0 2
27012: NOT
27013: IFFALSE 27017
// exit ;
27015: GO 27161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27017: LD_ADDR_VAR 0 5
27021: PUSH
27022: LD_INT 81
27024: PUSH
27025: LD_VAR 0 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 3
27036: PUSH
27037: LD_INT 21
27039: PUSH
27040: LD_INT 3
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PPUSH
27055: CALL_OW 69
27059: ST_TO_ADDR
// for i in mines do
27060: LD_ADDR_VAR 0 4
27064: PUSH
27065: LD_VAR 0 2
27069: PUSH
27070: FOR_IN
27071: IFFALSE 27159
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27073: LD_VAR 0 4
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PPUSH
27082: LD_VAR 0 4
27086: PUSH
27087: LD_INT 2
27089: ARRAY
27090: PPUSH
27091: CALL_OW 458
27095: NOT
27096: IFFALSE 27100
// continue ;
27098: GO 27070
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27100: LD_VAR 0 4
27104: PUSH
27105: LD_INT 1
27107: ARRAY
27108: PPUSH
27109: LD_VAR 0 4
27113: PUSH
27114: LD_INT 2
27116: ARRAY
27117: PPUSH
27118: CALL_OW 428
27122: PUSH
27123: LD_VAR 0 5
27127: IN
27128: IFFALSE 27157
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27130: LD_VAR 0 4
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: LD_VAR 0 4
27143: PUSH
27144: LD_INT 2
27146: ARRAY
27147: PPUSH
27148: LD_VAR 0 1
27152: PPUSH
27153: CALL_OW 456
// end ;
27157: GO 27070
27159: POP
27160: POP
// end ;
27161: LD_VAR 0 3
27165: RET
// export function Count ( array ) ; var i ; begin
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
// result := 0 ;
27170: LD_ADDR_VAR 0 2
27174: PUSH
27175: LD_INT 0
27177: ST_TO_ADDR
// for i in array do
27178: LD_ADDR_VAR 0 3
27182: PUSH
27183: LD_VAR 0 1
27187: PUSH
27188: FOR_IN
27189: IFFALSE 27213
// if i then
27191: LD_VAR 0 3
27195: IFFALSE 27211
// result := result + 1 ;
27197: LD_ADDR_VAR 0 2
27201: PUSH
27202: LD_VAR 0 2
27206: PUSH
27207: LD_INT 1
27209: PLUS
27210: ST_TO_ADDR
27211: GO 27188
27213: POP
27214: POP
// end ;
27215: LD_VAR 0 2
27219: RET
// export function IsEmpty ( building ) ; begin
27220: LD_INT 0
27222: PPUSH
// if not building then
27223: LD_VAR 0 1
27227: NOT
27228: IFFALSE 27232
// exit ;
27230: GO 27275
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27232: LD_ADDR_VAR 0 2
27236: PUSH
27237: LD_VAR 0 1
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 255
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 58
27261: PUSH
27262: EMPTY
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: IN
27274: ST_TO_ADDR
// end ;
27275: LD_VAR 0 2
27279: RET
// export function IsNotFull ( building ) ; var places ; begin
27280: LD_INT 0
27282: PPUSH
27283: PPUSH
// if not building then
27284: LD_VAR 0 1
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27464
// result := false ;
27293: LD_ADDR_VAR 0 2
27297: PUSH
27298: LD_INT 0
27300: ST_TO_ADDR
// places := 0 ;
27301: LD_ADDR_VAR 0 3
27305: PUSH
27306: LD_INT 0
27308: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 266
27318: PUSH
27319: LD_INT 0
27321: DOUBLE
27322: EQUAL
27323: IFTRUE 27381
27325: LD_INT 1
27327: DOUBLE
27328: EQUAL
27329: IFTRUE 27381
27331: LD_INT 6
27333: DOUBLE
27334: EQUAL
27335: IFTRUE 27381
27337: LD_INT 7
27339: DOUBLE
27340: EQUAL
27341: IFTRUE 27381
27343: LD_INT 8
27345: DOUBLE
27346: EQUAL
27347: IFTRUE 27381
27349: LD_INT 4
27351: DOUBLE
27352: EQUAL
27353: IFTRUE 27381
27355: LD_INT 5
27357: DOUBLE
27358: EQUAL
27359: IFTRUE 27381
27361: LD_INT 2
27363: DOUBLE
27364: EQUAL
27365: IFTRUE 27381
27367: LD_INT 3
27369: DOUBLE
27370: EQUAL
27371: IFTRUE 27381
27373: LD_INT 35
27375: DOUBLE
27376: EQUAL
27377: IFTRUE 27381
27379: GO 27392
27381: POP
// places := 6 ; b_bunker , b_breastwork :
27382: LD_ADDR_VAR 0 3
27386: PUSH
27387: LD_INT 6
27389: ST_TO_ADDR
27390: GO 27437
27392: LD_INT 32
27394: DOUBLE
27395: EQUAL
27396: IFTRUE 27406
27398: LD_INT 31
27400: DOUBLE
27401: EQUAL
27402: IFTRUE 27406
27404: GO 27417
27406: POP
// places := 1 ; b_control_tower :
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_INT 1
27414: ST_TO_ADDR
27415: GO 27437
27417: LD_INT 36
27419: DOUBLE
27420: EQUAL
27421: IFTRUE 27425
27423: GO 27436
27425: POP
// places := 3 ; end ;
27426: LD_ADDR_VAR 0 3
27430: PUSH
27431: LD_INT 3
27433: ST_TO_ADDR
27434: GO 27437
27436: POP
// if places then
27437: LD_VAR 0 3
27441: IFFALSE 27464
// result := UnitsInside ( building ) < places ;
27443: LD_ADDR_VAR 0 2
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 313
27457: PUSH
27458: LD_VAR 0 3
27462: LESS
27463: ST_TO_ADDR
// end ;
27464: LD_VAR 0 2
27468: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
27473: PPUSH
27474: PPUSH
// tmp := [ ] ;
27475: LD_ADDR_VAR 0 3
27479: PUSH
27480: EMPTY
27481: ST_TO_ADDR
// list := [ ] ;
27482: LD_ADDR_VAR 0 5
27486: PUSH
27487: EMPTY
27488: ST_TO_ADDR
// for i = 16 to 25 do
27489: LD_ADDR_VAR 0 4
27493: PUSH
27494: DOUBLE
27495: LD_INT 16
27497: DEC
27498: ST_TO_ADDR
27499: LD_INT 25
27501: PUSH
27502: FOR_TO
27503: IFFALSE 27576
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: LD_VAR 0 3
27514: PUSH
27515: LD_INT 22
27517: PUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 255
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 91
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 6
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 30
27550: PUSH
27551: LD_VAR 0 4
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: PUSH
27565: EMPTY
27566: LIST
27567: PPUSH
27568: CALL_OW 69
27572: ADD
27573: ST_TO_ADDR
27574: GO 27502
27576: POP
27577: POP
// for i = 1 to tmp do
27578: LD_ADDR_VAR 0 4
27582: PUSH
27583: DOUBLE
27584: LD_INT 1
27586: DEC
27587: ST_TO_ADDR
27588: LD_VAR 0 3
27592: PUSH
27593: FOR_TO
27594: IFFALSE 27682
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27596: LD_ADDR_VAR 0 5
27600: PUSH
27601: LD_VAR 0 5
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_VAR 0 4
27615: ARRAY
27616: PPUSH
27617: CALL_OW 266
27621: PUSH
27622: LD_VAR 0 3
27626: PUSH
27627: LD_VAR 0 4
27631: ARRAY
27632: PPUSH
27633: CALL_OW 250
27637: PUSH
27638: LD_VAR 0 3
27642: PUSH
27643: LD_VAR 0 4
27647: ARRAY
27648: PPUSH
27649: CALL_OW 251
27653: PUSH
27654: LD_VAR 0 3
27658: PUSH
27659: LD_VAR 0 4
27663: ARRAY
27664: PPUSH
27665: CALL_OW 254
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: ADD
27679: ST_TO_ADDR
27680: GO 27593
27682: POP
27683: POP
// result := list ;
27684: LD_ADDR_VAR 0 2
27688: PUSH
27689: LD_VAR 0 5
27693: ST_TO_ADDR
// end ;
27694: LD_VAR 0 2
27698: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27699: LD_INT 0
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
// if not factory then
27708: LD_VAR 0 1
27712: NOT
27713: IFFALSE 27717
// exit ;
27715: GO 28310
// if control = control_apeman then
27717: LD_VAR 0 4
27721: PUSH
27722: LD_INT 5
27724: EQUAL
27725: IFFALSE 27834
// begin tmp := UnitsInside ( factory ) ;
27727: LD_ADDR_VAR 0 8
27731: PUSH
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 313
27741: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27742: LD_VAR 0 8
27746: PPUSH
27747: LD_INT 25
27749: PUSH
27750: LD_INT 12
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 72
27761: NOT
27762: IFFALSE 27772
// control := control_manual ;
27764: LD_ADDR_VAR 0 4
27768: PUSH
27769: LD_INT 1
27771: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27772: LD_ADDR_VAR 0 8
27776: PUSH
27777: LD_VAR 0 1
27781: PPUSH
27782: CALL 27469 0 1
27786: ST_TO_ADDR
// if tmp then
27787: LD_VAR 0 8
27791: IFFALSE 27834
// begin for i in tmp do
27793: LD_ADDR_VAR 0 7
27797: PUSH
27798: LD_VAR 0 8
27802: PUSH
27803: FOR_IN
27804: IFFALSE 27832
// if i [ 1 ] = b_ext_radio then
27806: LD_VAR 0 7
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: PUSH
27815: LD_INT 22
27817: EQUAL
27818: IFFALSE 27830
// begin control := control_remote ;
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_INT 2
27827: ST_TO_ADDR
// break ;
27828: GO 27832
// end ;
27830: GO 27803
27832: POP
27833: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27834: LD_VAR 0 1
27838: PPUSH
27839: LD_VAR 0 2
27843: PPUSH
27844: LD_VAR 0 3
27848: PPUSH
27849: LD_VAR 0 4
27853: PPUSH
27854: LD_VAR 0 5
27858: PPUSH
27859: CALL_OW 448
27863: IFFALSE 27898
// begin result := [ chassis , engine , control , weapon ] ;
27865: LD_ADDR_VAR 0 6
27869: PUSH
27870: LD_VAR 0 2
27874: PUSH
27875: LD_VAR 0 3
27879: PUSH
27880: LD_VAR 0 4
27884: PUSH
27885: LD_VAR 0 5
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
// exit ;
27896: GO 28310
// end ; _chassis := AvailableChassisList ( factory ) ;
27898: LD_ADDR_VAR 0 9
27902: PUSH
27903: LD_VAR 0 1
27907: PPUSH
27908: CALL_OW 475
27912: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27913: LD_ADDR_VAR 0 11
27917: PUSH
27918: LD_VAR 0 1
27922: PPUSH
27923: CALL_OW 476
27927: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27928: LD_ADDR_VAR 0 12
27932: PUSH
27933: LD_VAR 0 1
27937: PPUSH
27938: CALL_OW 477
27942: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27943: LD_ADDR_VAR 0 10
27947: PUSH
27948: LD_VAR 0 1
27952: PPUSH
27953: CALL_OW 478
27957: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27958: LD_VAR 0 9
27962: NOT
27963: PUSH
27964: LD_VAR 0 11
27968: NOT
27969: OR
27970: PUSH
27971: LD_VAR 0 12
27975: NOT
27976: OR
27977: PUSH
27978: LD_VAR 0 10
27982: NOT
27983: OR
27984: IFFALSE 28019
// begin result := [ chassis , engine , control , weapon ] ;
27986: LD_ADDR_VAR 0 6
27990: PUSH
27991: LD_VAR 0 2
27995: PUSH
27996: LD_VAR 0 3
28000: PUSH
28001: LD_VAR 0 4
28005: PUSH
28006: LD_VAR 0 5
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: ST_TO_ADDR
// exit ;
28017: GO 28310
// end ; if not chassis in _chassis then
28019: LD_VAR 0 2
28023: PUSH
28024: LD_VAR 0 9
28028: IN
28029: NOT
28030: IFFALSE 28056
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28032: LD_ADDR_VAR 0 2
28036: PUSH
28037: LD_VAR 0 9
28041: PUSH
28042: LD_INT 1
28044: PPUSH
28045: LD_VAR 0 9
28049: PPUSH
28050: CALL_OW 12
28054: ARRAY
28055: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28056: LD_VAR 0 2
28060: PPUSH
28061: LD_VAR 0 3
28065: PPUSH
28066: CALL 28315 0 2
28070: NOT
28071: IFFALSE 28130
// repeat engine := _engine [ 1 ] ;
28073: LD_ADDR_VAR 0 3
28077: PUSH
28078: LD_VAR 0 11
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28087: LD_ADDR_VAR 0 11
28091: PUSH
28092: LD_VAR 0 11
28096: PPUSH
28097: LD_INT 1
28099: PPUSH
28100: CALL_OW 3
28104: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28105: LD_VAR 0 2
28109: PPUSH
28110: LD_VAR 0 3
28114: PPUSH
28115: CALL 28315 0 2
28119: PUSH
28120: LD_VAR 0 11
28124: PUSH
28125: EMPTY
28126: EQUAL
28127: OR
28128: IFFALSE 28073
// if not control in _control then
28130: LD_VAR 0 4
28134: PUSH
28135: LD_VAR 0 12
28139: IN
28140: NOT
28141: IFFALSE 28167
// control := _control [ rand ( 1 , _control ) ] ;
28143: LD_ADDR_VAR 0 4
28147: PUSH
28148: LD_VAR 0 12
28152: PUSH
28153: LD_INT 1
28155: PPUSH
28156: LD_VAR 0 12
28160: PPUSH
28161: CALL_OW 12
28165: ARRAY
28166: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: CALL 28535 0 2
28181: NOT
28182: IFFALSE 28241
// repeat weapon := _weapon [ 1 ] ;
28184: LD_ADDR_VAR 0 5
28188: PUSH
28189: LD_VAR 0 10
28193: PUSH
28194: LD_INT 1
28196: ARRAY
28197: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28198: LD_ADDR_VAR 0 10
28202: PUSH
28203: LD_VAR 0 10
28207: PPUSH
28208: LD_INT 1
28210: PPUSH
28211: CALL_OW 3
28215: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 5
28225: PPUSH
28226: CALL 28535 0 2
28230: PUSH
28231: LD_VAR 0 10
28235: PUSH
28236: EMPTY
28237: EQUAL
28238: OR
28239: IFFALSE 28184
// result := [ ] ;
28241: LD_ADDR_VAR 0 6
28245: PUSH
28246: EMPTY
28247: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_VAR 0 2
28257: PPUSH
28258: LD_VAR 0 3
28262: PPUSH
28263: LD_VAR 0 4
28267: PPUSH
28268: LD_VAR 0 5
28272: PPUSH
28273: CALL_OW 448
28277: IFFALSE 28310
// result := [ chassis , engine , control , weapon ] ;
28279: LD_ADDR_VAR 0 6
28283: PUSH
28284: LD_VAR 0 2
28288: PUSH
28289: LD_VAR 0 3
28293: PUSH
28294: LD_VAR 0 4
28298: PUSH
28299: LD_VAR 0 5
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// end ;
28310: LD_VAR 0 6
28314: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28315: LD_INT 0
28317: PPUSH
// if not chassis or not engine then
28318: LD_VAR 0 1
28322: NOT
28323: PUSH
28324: LD_VAR 0 2
28328: NOT
28329: OR
28330: IFFALSE 28334
// exit ;
28332: GO 28530
// case engine of engine_solar :
28334: LD_VAR 0 2
28338: PUSH
28339: LD_INT 2
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28385
28347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_INT 11
28355: PUSH
28356: LD_INT 12
28358: PUSH
28359: LD_INT 13
28361: PUSH
28362: LD_INT 14
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
28383: GO 28514
28385: LD_INT 1
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28455
28393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 11
28401: PUSH
28402: LD_INT 12
28404: PUSH
28405: LD_INT 13
28407: PUSH
28408: LD_INT 14
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: LD_INT 4
28422: PUSH
28423: LD_INT 5
28425: PUSH
28426: LD_INT 21
28428: PUSH
28429: LD_INT 23
28431: PUSH
28432: LD_INT 22
28434: PUSH
28435: LD_INT 24
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: ST_TO_ADDR
28453: GO 28514
28455: LD_INT 3
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28513
28463: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_INT 13
28471: PUSH
28472: LD_INT 14
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: LD_INT 21
28489: PUSH
28490: LD_INT 22
28492: PUSH
28493: LD_INT 23
28495: PUSH
28496: LD_INT 24
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: ST_TO_ADDR
28511: GO 28514
28513: POP
// result := ( chassis in result ) ;
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_VAR 0 1
28523: PUSH
28524: LD_VAR 0 3
28528: IN
28529: ST_TO_ADDR
// end ;
28530: LD_VAR 0 3
28534: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28535: LD_INT 0
28537: PPUSH
// if not chassis or not weapon then
28538: LD_VAR 0 1
28542: NOT
28543: PUSH
28544: LD_VAR 0 2
28548: NOT
28549: OR
28550: IFFALSE 28554
// exit ;
28552: GO 29614
// case weapon of us_machine_gun :
28554: LD_VAR 0 2
28558: PUSH
28559: LD_INT 2
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28597
28567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 3
28581: PUSH
28582: LD_INT 4
28584: PUSH
28585: LD_INT 5
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
28595: GO 29598
28597: LD_INT 3
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28635
28605: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 3
28619: PUSH
28620: LD_INT 4
28622: PUSH
28623: LD_INT 5
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
28633: GO 29598
28635: LD_INT 11
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28673
28643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: LD_INT 4
28660: PUSH
28661: LD_INT 5
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
28671: GO 29598
28673: LD_INT 4
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28707
28681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28682: LD_ADDR_VAR 0 3
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 3
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: LD_INT 5
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
28705: GO 29598
28707: LD_INT 5
28709: DOUBLE
28710: EQUAL
28711: IFTRUE 28715
28713: GO 28741
28715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 3
28726: PUSH
28727: LD_INT 4
28729: PUSH
28730: LD_INT 5
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: ST_TO_ADDR
28739: GO 29598
28741: LD_INT 9
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28775
28749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: LD_INT 5
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: ST_TO_ADDR
28773: GO 29598
28775: LD_INT 7
28777: DOUBLE
28778: EQUAL
28779: IFTRUE 28783
28781: GO 28809
28783: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 3
28794: PUSH
28795: LD_INT 4
28797: PUSH
28798: LD_INT 5
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: ST_TO_ADDR
28807: GO 29598
28809: LD_INT 12
28811: DOUBLE
28812: EQUAL
28813: IFTRUE 28817
28815: GO 28843
28817: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28818: LD_ADDR_VAR 0 3
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: LD_INT 3
28828: PUSH
28829: LD_INT 4
28831: PUSH
28832: LD_INT 5
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: ST_TO_ADDR
28841: GO 29598
28843: LD_INT 13
28845: DOUBLE
28846: EQUAL
28847: IFTRUE 28851
28849: GO 28877
28851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28852: LD_ADDR_VAR 0 3
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 3
28862: PUSH
28863: LD_INT 4
28865: PUSH
28866: LD_INT 5
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: ST_TO_ADDR
28875: GO 29598
28877: LD_INT 14
28879: DOUBLE
28880: EQUAL
28881: IFTRUE 28885
28883: GO 28903
28885: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28886: LD_ADDR_VAR 0 3
28890: PUSH
28891: LD_INT 4
28893: PUSH
28894: LD_INT 5
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: ST_TO_ADDR
28901: GO 29598
28903: LD_INT 6
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28929
28911: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 4
28919: PUSH
28920: LD_INT 5
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: ST_TO_ADDR
28927: GO 29598
28929: LD_INT 10
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 28955
28937: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28938: LD_ADDR_VAR 0 3
28942: PUSH
28943: LD_INT 4
28945: PUSH
28946: LD_INT 5
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: ST_TO_ADDR
28953: GO 29598
28955: LD_INT 22
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28963
28961: GO 28989
28963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28964: LD_ADDR_VAR 0 3
28968: PUSH
28969: LD_INT 11
28971: PUSH
28972: LD_INT 12
28974: PUSH
28975: LD_INT 13
28977: PUSH
28978: LD_INT 14
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
28987: GO 29598
28989: LD_INT 23
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29023
28997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_INT 11
29005: PUSH
29006: LD_INT 12
29008: PUSH
29009: LD_INT 13
29011: PUSH
29012: LD_INT 14
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
29021: GO 29598
29023: LD_INT 24
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29057
29031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 11
29039: PUSH
29040: LD_INT 12
29042: PUSH
29043: LD_INT 13
29045: PUSH
29046: LD_INT 14
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
29055: GO 29598
29057: LD_INT 30
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29091
29065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29066: LD_ADDR_VAR 0 3
29070: PUSH
29071: LD_INT 11
29073: PUSH
29074: LD_INT 12
29076: PUSH
29077: LD_INT 13
29079: PUSH
29080: LD_INT 14
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
29089: GO 29598
29091: LD_INT 25
29093: DOUBLE
29094: EQUAL
29095: IFTRUE 29099
29097: GO 29117
29099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29100: LD_ADDR_VAR 0 3
29104: PUSH
29105: LD_INT 13
29107: PUSH
29108: LD_INT 14
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: ST_TO_ADDR
29115: GO 29598
29117: LD_INT 27
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29143
29125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29126: LD_ADDR_VAR 0 3
29130: PUSH
29131: LD_INT 13
29133: PUSH
29134: LD_INT 14
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: ST_TO_ADDR
29141: GO 29598
29143: LD_INT 92
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29151
29149: GO 29177
29151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: LD_INT 11
29159: PUSH
29160: LD_INT 12
29162: PUSH
29163: LD_INT 13
29165: PUSH
29166: LD_INT 14
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: ST_TO_ADDR
29175: GO 29598
29177: LD_INT 28
29179: DOUBLE
29180: EQUAL
29181: IFTRUE 29185
29183: GO 29203
29185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_INT 13
29193: PUSH
29194: LD_INT 14
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: ST_TO_ADDR
29201: GO 29598
29203: LD_INT 29
29205: DOUBLE
29206: EQUAL
29207: IFTRUE 29211
29209: GO 29229
29211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29212: LD_ADDR_VAR 0 3
29216: PUSH
29217: LD_INT 13
29219: PUSH
29220: LD_INT 14
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: ST_TO_ADDR
29227: GO 29598
29229: LD_INT 31
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29255
29237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 13
29245: PUSH
29246: LD_INT 14
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: ST_TO_ADDR
29253: GO 29598
29255: LD_INT 26
29257: DOUBLE
29258: EQUAL
29259: IFTRUE 29263
29261: GO 29281
29263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29264: LD_ADDR_VAR 0 3
29268: PUSH
29269: LD_INT 13
29271: PUSH
29272: LD_INT 14
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: ST_TO_ADDR
29279: GO 29598
29281: LD_INT 42
29283: DOUBLE
29284: EQUAL
29285: IFTRUE 29289
29287: GO 29315
29289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_INT 21
29297: PUSH
29298: LD_INT 22
29300: PUSH
29301: LD_INT 23
29303: PUSH
29304: LD_INT 24
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
29313: GO 29598
29315: LD_INT 43
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29349
29323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: LD_INT 21
29331: PUSH
29332: LD_INT 22
29334: PUSH
29335: LD_INT 23
29337: PUSH
29338: LD_INT 24
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: ST_TO_ADDR
29347: GO 29598
29349: LD_INT 44
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29357
29355: GO 29383
29357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_INT 21
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_INT 23
29371: PUSH
29372: LD_INT 24
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
29381: GO 29598
29383: LD_INT 45
29385: DOUBLE
29386: EQUAL
29387: IFTRUE 29391
29389: GO 29417
29391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_INT 21
29399: PUSH
29400: LD_INT 22
29402: PUSH
29403: LD_INT 23
29405: PUSH
29406: LD_INT 24
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
29415: GO 29598
29417: LD_INT 49
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29451
29425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 21
29433: PUSH
29434: LD_INT 22
29436: PUSH
29437: LD_INT 23
29439: PUSH
29440: LD_INT 24
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
29449: GO 29598
29451: LD_INT 51
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29485
29459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_INT 21
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_INT 23
29473: PUSH
29474: LD_INT 24
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
29483: GO 29598
29485: LD_INT 52
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29519
29493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 21
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_INT 23
29507: PUSH
29508: LD_INT 24
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 29598
29519: LD_INT 53
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29545
29527: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29528: LD_ADDR_VAR 0 3
29532: PUSH
29533: LD_INT 23
29535: PUSH
29536: LD_INT 24
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: ST_TO_ADDR
29543: GO 29598
29545: LD_INT 46
29547: DOUBLE
29548: EQUAL
29549: IFTRUE 29553
29551: GO 29571
29553: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: LD_INT 23
29561: PUSH
29562: LD_INT 24
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: ST_TO_ADDR
29569: GO 29598
29571: LD_INT 47
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 29597
29579: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 23
29587: PUSH
29588: LD_INT 24
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: ST_TO_ADDR
29595: GO 29598
29597: POP
// result := ( chassis in result ) ;
29598: LD_ADDR_VAR 0 3
29602: PUSH
29603: LD_VAR 0 1
29607: PUSH
29608: LD_VAR 0 3
29612: IN
29613: ST_TO_ADDR
// end ;
29614: LD_VAR 0 3
29618: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29619: LD_INT 0
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
// result := array ;
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: LD_VAR 0 1
29637: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29638: LD_VAR 0 1
29642: NOT
29643: PUSH
29644: LD_VAR 0 2
29648: NOT
29649: OR
29650: PUSH
29651: LD_VAR 0 3
29655: NOT
29656: OR
29657: PUSH
29658: LD_VAR 0 2
29662: PUSH
29663: LD_VAR 0 1
29667: GREATER
29668: OR
29669: PUSH
29670: LD_VAR 0 3
29674: PUSH
29675: LD_VAR 0 1
29679: GREATER
29680: OR
29681: IFFALSE 29685
// exit ;
29683: GO 29981
// if direction then
29685: LD_VAR 0 4
29689: IFFALSE 29753
// begin d := 1 ;
29691: LD_ADDR_VAR 0 9
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// if i_from > i_to then
29699: LD_VAR 0 2
29703: PUSH
29704: LD_VAR 0 3
29708: GREATER
29709: IFFALSE 29735
// length := ( array - i_from ) + i_to else
29711: LD_ADDR_VAR 0 11
29715: PUSH
29716: LD_VAR 0 1
29720: PUSH
29721: LD_VAR 0 2
29725: MINUS
29726: PUSH
29727: LD_VAR 0 3
29731: PLUS
29732: ST_TO_ADDR
29733: GO 29751
// length := i_to - i_from ;
29735: LD_ADDR_VAR 0 11
29739: PUSH
29740: LD_VAR 0 3
29744: PUSH
29745: LD_VAR 0 2
29749: MINUS
29750: ST_TO_ADDR
// end else
29751: GO 29814
// begin d := - 1 ;
29753: LD_ADDR_VAR 0 9
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: ST_TO_ADDR
// if i_from > i_to then
29762: LD_VAR 0 2
29766: PUSH
29767: LD_VAR 0 3
29771: GREATER
29772: IFFALSE 29792
// length := i_from - i_to else
29774: LD_ADDR_VAR 0 11
29778: PUSH
29779: LD_VAR 0 2
29783: PUSH
29784: LD_VAR 0 3
29788: MINUS
29789: ST_TO_ADDR
29790: GO 29814
// length := ( array - i_to ) + i_from ;
29792: LD_ADDR_VAR 0 11
29796: PUSH
29797: LD_VAR 0 1
29801: PUSH
29802: LD_VAR 0 3
29806: MINUS
29807: PUSH
29808: LD_VAR 0 2
29812: PLUS
29813: ST_TO_ADDR
// end ; if not length then
29814: LD_VAR 0 11
29818: NOT
29819: IFFALSE 29823
// exit ;
29821: GO 29981
// tmp := array ;
29823: LD_ADDR_VAR 0 10
29827: PUSH
29828: LD_VAR 0 1
29832: ST_TO_ADDR
// for i = 1 to length do
29833: LD_ADDR_VAR 0 6
29837: PUSH
29838: DOUBLE
29839: LD_INT 1
29841: DEC
29842: ST_TO_ADDR
29843: LD_VAR 0 11
29847: PUSH
29848: FOR_TO
29849: IFFALSE 29969
// begin for j = 1 to array do
29851: LD_ADDR_VAR 0 7
29855: PUSH
29856: DOUBLE
29857: LD_INT 1
29859: DEC
29860: ST_TO_ADDR
29861: LD_VAR 0 1
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29955
// begin k := j + d ;
29869: LD_ADDR_VAR 0 8
29873: PUSH
29874: LD_VAR 0 7
29878: PUSH
29879: LD_VAR 0 9
29883: PLUS
29884: ST_TO_ADDR
// if k > array then
29885: LD_VAR 0 8
29889: PUSH
29890: LD_VAR 0 1
29894: GREATER
29895: IFFALSE 29905
// k := 1 ;
29897: LD_ADDR_VAR 0 8
29901: PUSH
29902: LD_INT 1
29904: ST_TO_ADDR
// if not k then
29905: LD_VAR 0 8
29909: NOT
29910: IFFALSE 29922
// k := array ;
29912: LD_ADDR_VAR 0 8
29916: PUSH
29917: LD_VAR 0 1
29921: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29922: LD_ADDR_VAR 0 10
29926: PUSH
29927: LD_VAR 0 10
29931: PPUSH
29932: LD_VAR 0 8
29936: PPUSH
29937: LD_VAR 0 1
29941: PUSH
29942: LD_VAR 0 7
29946: ARRAY
29947: PPUSH
29948: CALL_OW 1
29952: ST_TO_ADDR
// end ;
29953: GO 29866
29955: POP
29956: POP
// array := tmp ;
29957: LD_ADDR_VAR 0 1
29961: PUSH
29962: LD_VAR 0 10
29966: ST_TO_ADDR
// end ;
29967: GO 29848
29969: POP
29970: POP
// result := array ;
29971: LD_ADDR_VAR 0 5
29975: PUSH
29976: LD_VAR 0 1
29980: ST_TO_ADDR
// end ;
29981: LD_VAR 0 5
29985: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29986: LD_INT 0
29988: PPUSH
29989: PPUSH
// result := 0 ;
29990: LD_ADDR_VAR 0 3
29994: PUSH
29995: LD_INT 0
29997: ST_TO_ADDR
// if not array or not value in array then
29998: LD_VAR 0 1
30002: NOT
30003: PUSH
30004: LD_VAR 0 2
30008: PUSH
30009: LD_VAR 0 1
30013: IN
30014: NOT
30015: OR
30016: IFFALSE 30020
// exit ;
30018: GO 30074
// for i = 1 to array do
30020: LD_ADDR_VAR 0 4
30024: PUSH
30025: DOUBLE
30026: LD_INT 1
30028: DEC
30029: ST_TO_ADDR
30030: LD_VAR 0 1
30034: PUSH
30035: FOR_TO
30036: IFFALSE 30072
// if value = array [ i ] then
30038: LD_VAR 0 2
30042: PUSH
30043: LD_VAR 0 1
30047: PUSH
30048: LD_VAR 0 4
30052: ARRAY
30053: EQUAL
30054: IFFALSE 30070
// begin result := i ;
30056: LD_ADDR_VAR 0 3
30060: PUSH
30061: LD_VAR 0 4
30065: ST_TO_ADDR
// exit ;
30066: POP
30067: POP
30068: GO 30074
// end ;
30070: GO 30035
30072: POP
30073: POP
// end ;
30074: LD_VAR 0 3
30078: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30079: LD_INT 0
30081: PPUSH
// vc_chassis := chassis ;
30082: LD_ADDR_OWVAR 37
30086: PUSH
30087: LD_VAR 0 1
30091: ST_TO_ADDR
// vc_engine := engine ;
30092: LD_ADDR_OWVAR 39
30096: PUSH
30097: LD_VAR 0 2
30101: ST_TO_ADDR
// vc_control := control ;
30102: LD_ADDR_OWVAR 38
30106: PUSH
30107: LD_VAR 0 3
30111: ST_TO_ADDR
// vc_weapon := weapon ;
30112: LD_ADDR_OWVAR 40
30116: PUSH
30117: LD_VAR 0 4
30121: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30122: LD_ADDR_OWVAR 41
30126: PUSH
30127: LD_VAR 0 5
30131: ST_TO_ADDR
// end ;
30132: LD_VAR 0 6
30136: RET
// export function WantPlant ( unit ) ; var task ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
// result := false ;
30141: LD_ADDR_VAR 0 2
30145: PUSH
30146: LD_INT 0
30148: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL_OW 437
30163: ST_TO_ADDR
// if task then
30164: LD_VAR 0 3
30168: IFFALSE 30196
// if task [ 1 ] [ 1 ] = p then
30170: LD_VAR 0 3
30174: PUSH
30175: LD_INT 1
30177: ARRAY
30178: PUSH
30179: LD_INT 1
30181: ARRAY
30182: PUSH
30183: LD_STRING p
30185: EQUAL
30186: IFFALSE 30196
// result := true ;
30188: LD_ADDR_VAR 0 2
30192: PUSH
30193: LD_INT 1
30195: ST_TO_ADDR
// end ;
30196: LD_VAR 0 2
30200: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
// if pos < 1 then
30207: LD_VAR 0 2
30211: PUSH
30212: LD_INT 1
30214: LESS
30215: IFFALSE 30219
// exit ;
30217: GO 30522
// if pos = 1 then
30219: LD_VAR 0 2
30223: PUSH
30224: LD_INT 1
30226: EQUAL
30227: IFFALSE 30260
// result := Replace ( arr , pos [ 1 ] , value ) else
30229: LD_ADDR_VAR 0 4
30233: PUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: LD_VAR 0 2
30243: PUSH
30244: LD_INT 1
30246: ARRAY
30247: PPUSH
30248: LD_VAR 0 3
30252: PPUSH
30253: CALL_OW 1
30257: ST_TO_ADDR
30258: GO 30522
// begin tmp := arr ;
30260: LD_ADDR_VAR 0 6
30264: PUSH
30265: LD_VAR 0 1
30269: ST_TO_ADDR
// s_arr := [ tmp ] ;
30270: LD_ADDR_VAR 0 7
30274: PUSH
30275: LD_VAR 0 6
30279: PUSH
30280: EMPTY
30281: LIST
30282: ST_TO_ADDR
// for i = 1 to pos - 1 do
30283: LD_ADDR_VAR 0 5
30287: PUSH
30288: DOUBLE
30289: LD_INT 1
30291: DEC
30292: ST_TO_ADDR
30293: LD_VAR 0 2
30297: PUSH
30298: LD_INT 1
30300: MINUS
30301: PUSH
30302: FOR_TO
30303: IFFALSE 30348
// begin tmp := tmp [ pos [ i ] ] ;
30305: LD_ADDR_VAR 0 6
30309: PUSH
30310: LD_VAR 0 6
30314: PUSH
30315: LD_VAR 0 2
30319: PUSH
30320: LD_VAR 0 5
30324: ARRAY
30325: ARRAY
30326: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30327: LD_ADDR_VAR 0 7
30331: PUSH
30332: LD_VAR 0 7
30336: PUSH
30337: LD_VAR 0 6
30341: PUSH
30342: EMPTY
30343: LIST
30344: ADD
30345: ST_TO_ADDR
// end ;
30346: GO 30302
30348: POP
30349: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30350: LD_ADDR_VAR 0 6
30354: PUSH
30355: LD_VAR 0 6
30359: PPUSH
30360: LD_VAR 0 2
30364: PUSH
30365: LD_VAR 0 2
30369: ARRAY
30370: PPUSH
30371: LD_VAR 0 3
30375: PPUSH
30376: CALL_OW 1
30380: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30381: LD_ADDR_VAR 0 7
30385: PUSH
30386: LD_VAR 0 7
30390: PPUSH
30391: LD_VAR 0 7
30395: PPUSH
30396: LD_VAR 0 6
30400: PPUSH
30401: CALL_OW 1
30405: ST_TO_ADDR
// for i = s_arr downto 2 do
30406: LD_ADDR_VAR 0 5
30410: PUSH
30411: DOUBLE
30412: LD_VAR 0 7
30416: INC
30417: ST_TO_ADDR
30418: LD_INT 2
30420: PUSH
30421: FOR_DOWNTO
30422: IFFALSE 30506
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30424: LD_ADDR_VAR 0 6
30428: PUSH
30429: LD_VAR 0 7
30433: PUSH
30434: LD_VAR 0 5
30438: PUSH
30439: LD_INT 1
30441: MINUS
30442: ARRAY
30443: PPUSH
30444: LD_VAR 0 2
30448: PUSH
30449: LD_VAR 0 5
30453: PUSH
30454: LD_INT 1
30456: MINUS
30457: ARRAY
30458: PPUSH
30459: LD_VAR 0 7
30463: PUSH
30464: LD_VAR 0 5
30468: ARRAY
30469: PPUSH
30470: CALL_OW 1
30474: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30475: LD_ADDR_VAR 0 7
30479: PUSH
30480: LD_VAR 0 7
30484: PPUSH
30485: LD_VAR 0 5
30489: PUSH
30490: LD_INT 1
30492: MINUS
30493: PPUSH
30494: LD_VAR 0 6
30498: PPUSH
30499: CALL_OW 1
30503: ST_TO_ADDR
// end ;
30504: GO 30421
30506: POP
30507: POP
// result := s_arr [ 1 ] ;
30508: LD_ADDR_VAR 0 4
30512: PUSH
30513: LD_VAR 0 7
30517: PUSH
30518: LD_INT 1
30520: ARRAY
30521: ST_TO_ADDR
// end ; end ;
30522: LD_VAR 0 4
30526: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30527: LD_INT 0
30529: PPUSH
30530: PPUSH
// if not list then
30531: LD_VAR 0 1
30535: NOT
30536: IFFALSE 30540
// exit ;
30538: GO 30631
// i := list [ pos1 ] ;
30540: LD_ADDR_VAR 0 5
30544: PUSH
30545: LD_VAR 0 1
30549: PUSH
30550: LD_VAR 0 2
30554: ARRAY
30555: ST_TO_ADDR
// if not i then
30556: LD_VAR 0 5
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 30631
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30565: LD_ADDR_VAR 0 1
30569: PUSH
30570: LD_VAR 0 1
30574: PPUSH
30575: LD_VAR 0 2
30579: PPUSH
30580: LD_VAR 0 1
30584: PUSH
30585: LD_VAR 0 3
30589: ARRAY
30590: PPUSH
30591: CALL_OW 1
30595: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30596: LD_ADDR_VAR 0 1
30600: PUSH
30601: LD_VAR 0 1
30605: PPUSH
30606: LD_VAR 0 3
30610: PPUSH
30611: LD_VAR 0 5
30615: PPUSH
30616: CALL_OW 1
30620: ST_TO_ADDR
// result := list ;
30621: LD_ADDR_VAR 0 4
30625: PUSH
30626: LD_VAR 0 1
30630: ST_TO_ADDR
// end ;
30631: LD_VAR 0 4
30635: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30636: LD_INT 0
30638: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30639: LD_ADDR_VAR 0 5
30643: PUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 250
30653: PPUSH
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL_OW 251
30663: PPUSH
30664: LD_VAR 0 2
30668: PPUSH
30669: LD_VAR 0 3
30673: PPUSH
30674: LD_VAR 0 4
30678: PPUSH
30679: CALL 30689 0 5
30683: ST_TO_ADDR
// end ;
30684: LD_VAR 0 5
30688: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
// if not list then
30695: LD_VAR 0 3
30699: NOT
30700: IFFALSE 30704
// exit ;
30702: GO 31092
// result := [ ] ;
30704: LD_ADDR_VAR 0 6
30708: PUSH
30709: EMPTY
30710: ST_TO_ADDR
// for i in list do
30711: LD_ADDR_VAR 0 7
30715: PUSH
30716: LD_VAR 0 3
30720: PUSH
30721: FOR_IN
30722: IFFALSE 30924
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30724: LD_ADDR_VAR 0 9
30728: PUSH
30729: LD_VAR 0 7
30733: PPUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 297
30748: ST_TO_ADDR
// if not result then
30749: LD_VAR 0 6
30753: NOT
30754: IFFALSE 30780
// result := [ [ i , tmp ] ] else
30756: LD_ADDR_VAR 0 6
30760: PUSH
30761: LD_VAR 0 7
30765: PUSH
30766: LD_VAR 0 9
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: ST_TO_ADDR
30778: GO 30922
// begin if result [ result ] [ 2 ] < tmp then
30780: LD_VAR 0 6
30784: PUSH
30785: LD_VAR 0 6
30789: ARRAY
30790: PUSH
30791: LD_INT 2
30793: ARRAY
30794: PUSH
30795: LD_VAR 0 9
30799: LESS
30800: IFFALSE 30842
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30802: LD_ADDR_VAR 0 6
30806: PUSH
30807: LD_VAR 0 6
30811: PPUSH
30812: LD_VAR 0 6
30816: PUSH
30817: LD_INT 1
30819: PLUS
30820: PPUSH
30821: LD_VAR 0 7
30825: PUSH
30826: LD_VAR 0 9
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PPUSH
30835: CALL_OW 2
30839: ST_TO_ADDR
30840: GO 30922
// for j = 1 to result do
30842: LD_ADDR_VAR 0 8
30846: PUSH
30847: DOUBLE
30848: LD_INT 1
30850: DEC
30851: ST_TO_ADDR
30852: LD_VAR 0 6
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30920
// begin if tmp < result [ j ] [ 2 ] then
30860: LD_VAR 0 9
30864: PUSH
30865: LD_VAR 0 6
30869: PUSH
30870: LD_VAR 0 8
30874: ARRAY
30875: PUSH
30876: LD_INT 2
30878: ARRAY
30879: LESS
30880: IFFALSE 30918
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30882: LD_ADDR_VAR 0 6
30886: PUSH
30887: LD_VAR 0 6
30891: PPUSH
30892: LD_VAR 0 8
30896: PPUSH
30897: LD_VAR 0 7
30901: PUSH
30902: LD_VAR 0 9
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PPUSH
30911: CALL_OW 2
30915: ST_TO_ADDR
// break ;
30916: GO 30920
// end ; end ;
30918: GO 30857
30920: POP
30921: POP
// end ; end ;
30922: GO 30721
30924: POP
30925: POP
// if result and not asc then
30926: LD_VAR 0 6
30930: PUSH
30931: LD_VAR 0 4
30935: NOT
30936: AND
30937: IFFALSE 31012
// begin tmp := result ;
30939: LD_ADDR_VAR 0 9
30943: PUSH
30944: LD_VAR 0 6
30948: ST_TO_ADDR
// for i = tmp downto 1 do
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: DOUBLE
30955: LD_VAR 0 9
30959: INC
30960: ST_TO_ADDR
30961: LD_INT 1
30963: PUSH
30964: FOR_DOWNTO
30965: IFFALSE 31010
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30967: LD_ADDR_VAR 0 6
30971: PUSH
30972: LD_VAR 0 6
30976: PPUSH
30977: LD_VAR 0 9
30981: PUSH
30982: LD_VAR 0 7
30986: MINUS
30987: PUSH
30988: LD_INT 1
30990: PLUS
30991: PPUSH
30992: LD_VAR 0 9
30996: PUSH
30997: LD_VAR 0 7
31001: ARRAY
31002: PPUSH
31003: CALL_OW 1
31007: ST_TO_ADDR
31008: GO 30964
31010: POP
31011: POP
// end ; tmp := [ ] ;
31012: LD_ADDR_VAR 0 9
31016: PUSH
31017: EMPTY
31018: ST_TO_ADDR
// if mode then
31019: LD_VAR 0 5
31023: IFFALSE 31092
// begin for i = 1 to result do
31025: LD_ADDR_VAR 0 7
31029: PUSH
31030: DOUBLE
31031: LD_INT 1
31033: DEC
31034: ST_TO_ADDR
31035: LD_VAR 0 6
31039: PUSH
31040: FOR_TO
31041: IFFALSE 31080
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31043: LD_ADDR_VAR 0 9
31047: PUSH
31048: LD_VAR 0 9
31052: PPUSH
31053: LD_VAR 0 7
31057: PPUSH
31058: LD_VAR 0 6
31062: PUSH
31063: LD_VAR 0 7
31067: ARRAY
31068: PUSH
31069: LD_INT 1
31071: ARRAY
31072: PPUSH
31073: CALL_OW 1
31077: ST_TO_ADDR
31078: GO 31040
31080: POP
31081: POP
// result := tmp ;
31082: LD_ADDR_VAR 0 6
31086: PUSH
31087: LD_VAR 0 9
31091: ST_TO_ADDR
// end ; end ;
31092: LD_VAR 0 6
31096: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31097: LD_INT 0
31099: PPUSH
31100: PPUSH
31101: PPUSH
31102: PPUSH
31103: PPUSH
31104: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: ST_TO_ADDR
// if not x or not y then
31127: LD_VAR 0 2
31131: NOT
31132: PUSH
31133: LD_VAR 0 3
31137: NOT
31138: OR
31139: IFFALSE 31143
// exit ;
31141: GO 32793
// if not range then
31143: LD_VAR 0 4
31147: NOT
31148: IFFALSE 31158
// range := 10 ;
31150: LD_ADDR_VAR 0 4
31154: PUSH
31155: LD_INT 10
31157: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31158: LD_ADDR_VAR 0 8
31162: PUSH
31163: LD_INT 81
31165: PUSH
31166: LD_VAR 0 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 92
31177: PUSH
31178: LD_VAR 0 2
31182: PUSH
31183: LD_VAR 0 3
31187: PUSH
31188: LD_VAR 0 4
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 3
31201: PUSH
31202: LD_INT 21
31204: PUSH
31205: LD_INT 3
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 69
31225: ST_TO_ADDR
// if not tmp then
31226: LD_VAR 0 8
31230: NOT
31231: IFFALSE 31235
// exit ;
31233: GO 32793
// for i in tmp do
31235: LD_ADDR_VAR 0 6
31239: PUSH
31240: LD_VAR 0 8
31244: PUSH
31245: FOR_IN
31246: IFFALSE 32768
// begin points := [ 0 , 0 , 0 ] ;
31248: LD_ADDR_VAR 0 9
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: ST_TO_ADDR
// bpoints := 1 ;
31267: LD_ADDR_VAR 0 10
31271: PUSH
31272: LD_INT 1
31274: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31275: LD_VAR 0 6
31279: PPUSH
31280: CALL_OW 247
31284: PUSH
31285: LD_INT 1
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31871
31293: POP
// begin if GetClass ( i ) = 1 then
31294: LD_VAR 0 6
31298: PPUSH
31299: CALL_OW 257
31303: PUSH
31304: LD_INT 1
31306: EQUAL
31307: IFFALSE 31328
// points := [ 10 , 5 , 3 ] ;
31309: LD_ADDR_VAR 0 9
31313: PUSH
31314: LD_INT 10
31316: PUSH
31317: LD_INT 5
31319: PUSH
31320: LD_INT 3
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31328: LD_VAR 0 6
31332: PPUSH
31333: CALL_OW 257
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 4
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: IN
31352: IFFALSE 31373
// points := [ 3 , 2 , 1 ] ;
31354: LD_ADDR_VAR 0 9
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31373: LD_VAR 0 6
31377: PPUSH
31378: CALL_OW 257
31382: PUSH
31383: LD_INT 5
31385: EQUAL
31386: IFFALSE 31407
// points := [ 130 , 5 , 2 ] ;
31388: LD_ADDR_VAR 0 9
31392: PUSH
31393: LD_INT 130
31395: PUSH
31396: LD_INT 5
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31407: LD_VAR 0 6
31411: PPUSH
31412: CALL_OW 257
31416: PUSH
31417: LD_INT 8
31419: EQUAL
31420: IFFALSE 31441
// points := [ 35 , 35 , 30 ] ;
31422: LD_ADDR_VAR 0 9
31426: PUSH
31427: LD_INT 35
31429: PUSH
31430: LD_INT 35
31432: PUSH
31433: LD_INT 30
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31441: LD_VAR 0 6
31445: PPUSH
31446: CALL_OW 257
31450: PUSH
31451: LD_INT 9
31453: EQUAL
31454: IFFALSE 31475
// points := [ 20 , 55 , 40 ] ;
31456: LD_ADDR_VAR 0 9
31460: PUSH
31461: LD_INT 20
31463: PUSH
31464: LD_INT 55
31466: PUSH
31467: LD_INT 40
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31475: LD_VAR 0 6
31479: PPUSH
31480: CALL_OW 257
31484: PUSH
31485: LD_INT 12
31487: PUSH
31488: LD_INT 16
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: IN
31495: IFFALSE 31516
// points := [ 5 , 3 , 2 ] ;
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: LD_INT 5
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 257
31525: PUSH
31526: LD_INT 17
31528: EQUAL
31529: IFFALSE 31550
// points := [ 100 , 50 , 75 ] ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 100
31538: PUSH
31539: LD_INT 50
31541: PUSH
31542: LD_INT 75
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31550: LD_VAR 0 6
31554: PPUSH
31555: CALL_OW 257
31559: PUSH
31560: LD_INT 15
31562: EQUAL
31563: IFFALSE 31584
// points := [ 10 , 5 , 3 ] ;
31565: LD_ADDR_VAR 0 9
31569: PUSH
31570: LD_INT 10
31572: PUSH
31573: LD_INT 5
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31584: LD_VAR 0 6
31588: PPUSH
31589: CALL_OW 257
31593: PUSH
31594: LD_INT 14
31596: EQUAL
31597: IFFALSE 31618
// points := [ 10 , 0 , 0 ] ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_INT 10
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 257
31627: PUSH
31628: LD_INT 11
31630: EQUAL
31631: IFFALSE 31652
// points := [ 30 , 10 , 5 ] ;
31633: LD_ADDR_VAR 0 9
31637: PUSH
31638: LD_INT 30
31640: PUSH
31641: LD_INT 10
31643: PUSH
31644: LD_INT 5
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31652: LD_VAR 0 1
31656: PPUSH
31657: LD_INT 5
31659: PPUSH
31660: CALL_OW 321
31664: PUSH
31665: LD_INT 2
31667: EQUAL
31668: IFFALSE 31685
// bpoints := bpoints * 1.8 ;
31670: LD_ADDR_VAR 0 10
31674: PUSH
31675: LD_VAR 0 10
31679: PUSH
31680: LD_REAL  1.80000000000000E+0000
31683: MUL
31684: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31685: LD_VAR 0 6
31689: PPUSH
31690: CALL_OW 257
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: LD_INT 4
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: IN
31713: PUSH
31714: LD_VAR 0 1
31718: PPUSH
31719: LD_INT 51
31721: PPUSH
31722: CALL_OW 321
31726: PUSH
31727: LD_INT 2
31729: EQUAL
31730: AND
31731: IFFALSE 31748
// bpoints := bpoints * 1.2 ;
31733: LD_ADDR_VAR 0 10
31737: PUSH
31738: LD_VAR 0 10
31742: PUSH
31743: LD_REAL  1.20000000000000E+0000
31746: MUL
31747: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31748: LD_VAR 0 6
31752: PPUSH
31753: CALL_OW 257
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: LD_INT 7
31763: PUSH
31764: LD_INT 9
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: IN
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: LD_INT 52
31780: PPUSH
31781: CALL_OW 321
31785: PUSH
31786: LD_INT 2
31788: EQUAL
31789: AND
31790: IFFALSE 31807
// bpoints := bpoints * 1.5 ;
31792: LD_ADDR_VAR 0 10
31796: PUSH
31797: LD_VAR 0 10
31801: PUSH
31802: LD_REAL  1.50000000000000E+0000
31805: MUL
31806: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31807: LD_VAR 0 1
31811: PPUSH
31812: LD_INT 66
31814: PPUSH
31815: CALL_OW 321
31819: PUSH
31820: LD_INT 2
31822: EQUAL
31823: IFFALSE 31840
// bpoints := bpoints * 1.1 ;
31825: LD_ADDR_VAR 0 10
31829: PUSH
31830: LD_VAR 0 10
31834: PUSH
31835: LD_REAL  1.10000000000000E+0000
31838: MUL
31839: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31840: LD_ADDR_VAR 0 10
31844: PUSH
31845: LD_VAR 0 10
31849: PUSH
31850: LD_VAR 0 6
31854: PPUSH
31855: LD_INT 1
31857: PPUSH
31858: CALL_OW 259
31862: PUSH
31863: LD_REAL  1.15000000000000E+0000
31866: MUL
31867: MUL
31868: ST_TO_ADDR
// end ; unit_vehicle :
31869: GO 32697
31871: LD_INT 2
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 32685
31879: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31880: LD_VAR 0 6
31884: PPUSH
31885: CALL_OW 264
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: LD_INT 42
31895: PUSH
31896: LD_INT 24
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: IN
31904: IFFALSE 31925
// points := [ 25 , 5 , 3 ] ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_INT 25
31913: PUSH
31914: LD_INT 5
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 264
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: LD_INT 43
31940: PUSH
31941: LD_INT 25
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: IN
31949: IFFALSE 31970
// points := [ 40 , 15 , 5 ] ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_INT 40
31958: PUSH
31959: LD_INT 15
31961: PUSH
31962: LD_INT 5
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31970: LD_VAR 0 6
31974: PPUSH
31975: CALL_OW 264
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: IN
31990: IFFALSE 32011
// points := [ 7 , 25 , 8 ] ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_INT 7
31999: PUSH
32000: LD_INT 25
32002: PUSH
32003: LD_INT 8
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32011: LD_VAR 0 6
32015: PPUSH
32016: CALL_OW 264
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: LD_INT 27
32026: PUSH
32027: LD_INT 44
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: IN
32035: IFFALSE 32056
// points := [ 14 , 50 , 16 ] ;
32037: LD_ADDR_VAR 0 9
32041: PUSH
32042: LD_INT 14
32044: PUSH
32045: LD_INT 50
32047: PUSH
32048: LD_INT 16
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32056: LD_VAR 0 6
32060: PPUSH
32061: CALL_OW 264
32065: PUSH
32066: LD_INT 6
32068: PUSH
32069: LD_INT 46
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: IN
32076: IFFALSE 32097
// points := [ 32 , 120 , 70 ] ;
32078: LD_ADDR_VAR 0 9
32082: PUSH
32083: LD_INT 32
32085: PUSH
32086: LD_INT 120
32088: PUSH
32089: LD_INT 70
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32097: LD_VAR 0 6
32101: PPUSH
32102: CALL_OW 264
32106: PUSH
32107: LD_INT 7
32109: PUSH
32110: LD_INT 28
32112: PUSH
32113: LD_INT 45
32115: PUSH
32116: LD_INT 92
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: IN
32125: IFFALSE 32146
// points := [ 35 , 20 , 45 ] ;
32127: LD_ADDR_VAR 0 9
32131: PUSH
32132: LD_INT 35
32134: PUSH
32135: LD_INT 20
32137: PUSH
32138: LD_INT 45
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32146: LD_VAR 0 6
32150: PPUSH
32151: CALL_OW 264
32155: PUSH
32156: LD_INT 47
32158: PUSH
32159: EMPTY
32160: LIST
32161: IN
32162: IFFALSE 32183
// points := [ 67 , 45 , 75 ] ;
32164: LD_ADDR_VAR 0 9
32168: PUSH
32169: LD_INT 67
32171: PUSH
32172: LD_INT 45
32174: PUSH
32175: LD_INT 75
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32183: LD_VAR 0 6
32187: PPUSH
32188: CALL_OW 264
32192: PUSH
32193: LD_INT 26
32195: PUSH
32196: EMPTY
32197: LIST
32198: IN
32199: IFFALSE 32220
// points := [ 120 , 30 , 80 ] ;
32201: LD_ADDR_VAR 0 9
32205: PUSH
32206: LD_INT 120
32208: PUSH
32209: LD_INT 30
32211: PUSH
32212: LD_INT 80
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32220: LD_VAR 0 6
32224: PPUSH
32225: CALL_OW 264
32229: PUSH
32230: LD_INT 22
32232: PUSH
32233: EMPTY
32234: LIST
32235: IN
32236: IFFALSE 32257
// points := [ 40 , 1 , 1 ] ;
32238: LD_ADDR_VAR 0 9
32242: PUSH
32243: LD_INT 40
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32257: LD_VAR 0 6
32261: PPUSH
32262: CALL_OW 264
32266: PUSH
32267: LD_INT 29
32269: PUSH
32270: EMPTY
32271: LIST
32272: IN
32273: IFFALSE 32294
// points := [ 70 , 200 , 400 ] ;
32275: LD_ADDR_VAR 0 9
32279: PUSH
32280: LD_INT 70
32282: PUSH
32283: LD_INT 200
32285: PUSH
32286: LD_INT 400
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32294: LD_VAR 0 6
32298: PPUSH
32299: CALL_OW 264
32303: PUSH
32304: LD_INT 14
32306: PUSH
32307: LD_INT 53
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: IN
32314: IFFALSE 32335
// points := [ 40 , 10 , 20 ] ;
32316: LD_ADDR_VAR 0 9
32320: PUSH
32321: LD_INT 40
32323: PUSH
32324: LD_INT 10
32326: PUSH
32327: LD_INT 20
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 264
32344: PUSH
32345: LD_INT 9
32347: PUSH
32348: EMPTY
32349: LIST
32350: IN
32351: IFFALSE 32372
// points := [ 5 , 70 , 20 ] ;
32353: LD_ADDR_VAR 0 9
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: LD_INT 70
32363: PUSH
32364: LD_INT 20
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32372: LD_VAR 0 6
32376: PPUSH
32377: CALL_OW 264
32381: PUSH
32382: LD_INT 10
32384: PUSH
32385: EMPTY
32386: LIST
32387: IN
32388: IFFALSE 32409
// points := [ 35 , 110 , 70 ] ;
32390: LD_ADDR_VAR 0 9
32394: PUSH
32395: LD_INT 35
32397: PUSH
32398: LD_INT 110
32400: PUSH
32401: LD_INT 70
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32409: LD_VAR 0 6
32413: PPUSH
32414: CALL_OW 265
32418: PUSH
32419: LD_INT 25
32421: EQUAL
32422: IFFALSE 32443
// points := [ 80 , 65 , 100 ] ;
32424: LD_ADDR_VAR 0 9
32428: PUSH
32429: LD_INT 80
32431: PUSH
32432: LD_INT 65
32434: PUSH
32435: LD_INT 100
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32443: LD_VAR 0 6
32447: PPUSH
32448: CALL_OW 263
32452: PUSH
32453: LD_INT 1
32455: EQUAL
32456: IFFALSE 32491
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32458: LD_ADDR_VAR 0 10
32462: PUSH
32463: LD_VAR 0 10
32467: PUSH
32468: LD_VAR 0 6
32472: PPUSH
32473: CALL_OW 311
32477: PPUSH
32478: LD_INT 3
32480: PPUSH
32481: CALL_OW 259
32485: PUSH
32486: LD_INT 4
32488: MUL
32489: MUL
32490: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32491: LD_VAR 0 6
32495: PPUSH
32496: CALL_OW 263
32500: PUSH
32501: LD_INT 2
32503: EQUAL
32504: IFFALSE 32555
// begin j := IsControledBy ( i ) ;
32506: LD_ADDR_VAR 0 7
32510: PUSH
32511: LD_VAR 0 6
32515: PPUSH
32516: CALL_OW 312
32520: ST_TO_ADDR
// if j then
32521: LD_VAR 0 7
32525: IFFALSE 32555
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32527: LD_ADDR_VAR 0 10
32531: PUSH
32532: LD_VAR 0 10
32536: PUSH
32537: LD_VAR 0 7
32541: PPUSH
32542: LD_INT 3
32544: PPUSH
32545: CALL_OW 259
32549: PUSH
32550: LD_INT 3
32552: MUL
32553: MUL
32554: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32555: LD_VAR 0 6
32559: PPUSH
32560: CALL_OW 264
32564: PUSH
32565: LD_INT 5
32567: PUSH
32568: LD_INT 6
32570: PUSH
32571: LD_INT 46
32573: PUSH
32574: LD_INT 44
32576: PUSH
32577: LD_INT 47
32579: PUSH
32580: LD_INT 45
32582: PUSH
32583: LD_INT 28
32585: PUSH
32586: LD_INT 7
32588: PUSH
32589: LD_INT 27
32591: PUSH
32592: LD_INT 29
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: IN
32607: PUSH
32608: LD_VAR 0 1
32612: PPUSH
32613: LD_INT 52
32615: PPUSH
32616: CALL_OW 321
32620: PUSH
32621: LD_INT 2
32623: EQUAL
32624: AND
32625: IFFALSE 32642
// bpoints := bpoints * 1.2 ;
32627: LD_ADDR_VAR 0 10
32631: PUSH
32632: LD_VAR 0 10
32636: PUSH
32637: LD_REAL  1.20000000000000E+0000
32640: MUL
32641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 264
32651: PUSH
32652: LD_INT 6
32654: PUSH
32655: LD_INT 46
32657: PUSH
32658: LD_INT 47
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: IN
32666: IFFALSE 32683
// bpoints := bpoints * 1.2 ;
32668: LD_ADDR_VAR 0 10
32672: PUSH
32673: LD_VAR 0 10
32677: PUSH
32678: LD_REAL  1.20000000000000E+0000
32681: MUL
32682: ST_TO_ADDR
// end ; unit_building :
32683: GO 32697
32685: LD_INT 3
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32696
32693: POP
// ; end ;
32694: GO 32697
32696: POP
// for j = 1 to 3 do
32697: LD_ADDR_VAR 0 7
32701: PUSH
32702: DOUBLE
32703: LD_INT 1
32705: DEC
32706: ST_TO_ADDR
32707: LD_INT 3
32709: PUSH
32710: FOR_TO
32711: IFFALSE 32764
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32713: LD_ADDR_VAR 0 5
32717: PUSH
32718: LD_VAR 0 5
32722: PPUSH
32723: LD_VAR 0 7
32727: PPUSH
32728: LD_VAR 0 5
32732: PUSH
32733: LD_VAR 0 7
32737: ARRAY
32738: PUSH
32739: LD_VAR 0 9
32743: PUSH
32744: LD_VAR 0 7
32748: ARRAY
32749: PUSH
32750: LD_VAR 0 10
32754: MUL
32755: PLUS
32756: PPUSH
32757: CALL_OW 1
32761: ST_TO_ADDR
32762: GO 32710
32764: POP
32765: POP
// end ;
32766: GO 31245
32768: POP
32769: POP
// result := Replace ( result , 4 , tmp ) ;
32770: LD_ADDR_VAR 0 5
32774: PUSH
32775: LD_VAR 0 5
32779: PPUSH
32780: LD_INT 4
32782: PPUSH
32783: LD_VAR 0 8
32787: PPUSH
32788: CALL_OW 1
32792: ST_TO_ADDR
// end ;
32793: LD_VAR 0 5
32797: RET
// export function DangerAtRange ( unit , range ) ; begin
32798: LD_INT 0
32800: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_VAR 0 1
32810: PPUSH
32811: CALL_OW 255
32815: PPUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 250
32825: PPUSH
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 251
32835: PPUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: CALL 31097 0 4
32845: ST_TO_ADDR
// end ;
32846: LD_VAR 0 3
32850: RET
// export function DangerInArea ( side , area ) ; begin
32851: LD_INT 0
32853: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_VAR 0 2
32863: PPUSH
32864: LD_INT 81
32866: PUSH
32867: LD_VAR 0 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PPUSH
32876: CALL_OW 70
32880: ST_TO_ADDR
// end ;
32881: LD_VAR 0 3
32885: RET
// export function IsExtension ( b ) ; begin
32886: LD_INT 0
32888: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32889: LD_ADDR_VAR 0 2
32893: PUSH
32894: LD_VAR 0 1
32898: PUSH
32899: LD_INT 23
32901: PUSH
32902: LD_INT 20
32904: PUSH
32905: LD_INT 22
32907: PUSH
32908: LD_INT 17
32910: PUSH
32911: LD_INT 24
32913: PUSH
32914: LD_INT 21
32916: PUSH
32917: LD_INT 19
32919: PUSH
32920: LD_INT 16
32922: PUSH
32923: LD_INT 25
32925: PUSH
32926: LD_INT 18
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: IN
32941: ST_TO_ADDR
// end ;
32942: LD_VAR 0 2
32946: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32947: LD_INT 0
32949: PPUSH
32950: PPUSH
32951: PPUSH
// result := [ ] ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: EMPTY
32958: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32959: LD_ADDR_VAR 0 5
32963: PUSH
32964: LD_VAR 0 2
32968: PPUSH
32969: LD_INT 21
32971: PUSH
32972: LD_INT 3
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PPUSH
32979: CALL_OW 70
32983: ST_TO_ADDR
// if not tmp then
32984: LD_VAR 0 5
32988: NOT
32989: IFFALSE 32993
// exit ;
32991: GO 33057
// if checkLink then
32993: LD_VAR 0 3
32997: IFFALSE 33047
// begin for i in tmp do
32999: LD_ADDR_VAR 0 6
33003: PUSH
33004: LD_VAR 0 5
33008: PUSH
33009: FOR_IN
33010: IFFALSE 33045
// if GetBase ( i ) <> base then
33012: LD_VAR 0 6
33016: PPUSH
33017: CALL_OW 274
33021: PUSH
33022: LD_VAR 0 1
33026: NONEQUAL
33027: IFFALSE 33043
// ComLinkToBase ( base , i ) ;
33029: LD_VAR 0 1
33033: PPUSH
33034: LD_VAR 0 6
33038: PPUSH
33039: CALL_OW 169
33043: GO 33009
33045: POP
33046: POP
// end ; result := tmp ;
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: LD_VAR 0 5
33056: ST_TO_ADDR
// end ;
33057: LD_VAR 0 4
33061: RET
// export function ComComplete ( units , b ) ; var i ; begin
33062: LD_INT 0
33064: PPUSH
33065: PPUSH
// if not units then
33066: LD_VAR 0 1
33070: NOT
33071: IFFALSE 33075
// exit ;
33073: GO 33165
// for i in units do
33075: LD_ADDR_VAR 0 4
33079: PUSH
33080: LD_VAR 0 1
33084: PUSH
33085: FOR_IN
33086: IFFALSE 33163
// if BuildingStatus ( b ) = bs_build then
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 461
33097: PUSH
33098: LD_INT 1
33100: EQUAL
33101: IFFALSE 33161
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33103: LD_VAR 0 4
33107: PPUSH
33108: LD_STRING h
33110: PUSH
33111: LD_VAR 0 2
33115: PPUSH
33116: CALL_OW 250
33120: PUSH
33121: LD_VAR 0 2
33125: PPUSH
33126: CALL_OW 251
33130: PUSH
33131: LD_VAR 0 2
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: EMPTY
33155: LIST
33156: PPUSH
33157: CALL_OW 446
33161: GO 33085
33163: POP
33164: POP
// end ;
33165: LD_VAR 0 3
33169: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33170: LD_INT 0
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33178: LD_VAR 0 1
33182: NOT
33183: PUSH
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 263
33193: PUSH
33194: LD_INT 2
33196: NONEQUAL
33197: OR
33198: IFFALSE 33202
// exit ;
33200: GO 33518
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33202: LD_ADDR_VAR 0 6
33206: PUSH
33207: LD_INT 22
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 255
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 30
33229: PUSH
33230: LD_INT 36
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 34
33239: PUSH
33240: LD_INT 31
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PPUSH
33256: CALL_OW 69
33260: ST_TO_ADDR
// if not tmp then
33261: LD_VAR 0 6
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33518
// result := [ ] ;
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: EMPTY
33276: ST_TO_ADDR
// for i in tmp do
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_VAR 0 6
33286: PUSH
33287: FOR_IN
33288: IFFALSE 33359
// begin t := UnitsInside ( i ) ;
33290: LD_ADDR_VAR 0 4
33294: PUSH
33295: LD_VAR 0 3
33299: PPUSH
33300: CALL_OW 313
33304: ST_TO_ADDR
// if t then
33305: LD_VAR 0 4
33309: IFFALSE 33357
// for j in t do
33311: LD_ADDR_VAR 0 7
33315: PUSH
33316: LD_VAR 0 4
33320: PUSH
33321: FOR_IN
33322: IFFALSE 33355
// result := Replace ( result , result + 1 , j ) ;
33324: LD_ADDR_VAR 0 2
33328: PUSH
33329: LD_VAR 0 2
33333: PPUSH
33334: LD_VAR 0 2
33338: PUSH
33339: LD_INT 1
33341: PLUS
33342: PPUSH
33343: LD_VAR 0 7
33347: PPUSH
33348: CALL_OW 1
33352: ST_TO_ADDR
33353: GO 33321
33355: POP
33356: POP
// end ;
33357: GO 33287
33359: POP
33360: POP
// if not result then
33361: LD_VAR 0 2
33365: NOT
33366: IFFALSE 33370
// exit ;
33368: GO 33518
// mech := result [ 1 ] ;
33370: LD_ADDR_VAR 0 5
33374: PUSH
33375: LD_VAR 0 2
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: ST_TO_ADDR
// if result > 1 then
33384: LD_VAR 0 2
33388: PUSH
33389: LD_INT 1
33391: GREATER
33392: IFFALSE 33504
// begin for i = 2 to result do
33394: LD_ADDR_VAR 0 3
33398: PUSH
33399: DOUBLE
33400: LD_INT 2
33402: DEC
33403: ST_TO_ADDR
33404: LD_VAR 0 2
33408: PUSH
33409: FOR_TO
33410: IFFALSE 33502
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33412: LD_ADDR_VAR 0 4
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: LD_VAR 0 3
33426: ARRAY
33427: PPUSH
33428: LD_INT 3
33430: PPUSH
33431: CALL_OW 259
33435: PUSH
33436: LD_VAR 0 2
33440: PUSH
33441: LD_VAR 0 3
33445: ARRAY
33446: PPUSH
33447: CALL_OW 432
33451: MINUS
33452: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33453: LD_VAR 0 4
33457: PUSH
33458: LD_VAR 0 5
33462: PPUSH
33463: LD_INT 3
33465: PPUSH
33466: CALL_OW 259
33470: PUSH
33471: LD_VAR 0 5
33475: PPUSH
33476: CALL_OW 432
33480: MINUS
33481: GREATEREQUAL
33482: IFFALSE 33500
// mech := result [ i ] ;
33484: LD_ADDR_VAR 0 5
33488: PUSH
33489: LD_VAR 0 2
33493: PUSH
33494: LD_VAR 0 3
33498: ARRAY
33499: ST_TO_ADDR
// end ;
33500: GO 33409
33502: POP
33503: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33504: LD_VAR 0 1
33508: PPUSH
33509: LD_VAR 0 5
33513: PPUSH
33514: CALL_OW 135
// end ;
33518: LD_VAR 0 2
33522: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33523: LD_INT 0
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
33537: PPUSH
// result := [ ] ;
33538: LD_ADDR_VAR 0 7
33542: PUSH
33543: EMPTY
33544: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL_OW 266
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: IN
33565: NOT
33566: IFFALSE 33570
// exit ;
33568: GO 35204
// if name then
33570: LD_VAR 0 3
33574: IFFALSE 33590
// SetBName ( base_dep , name ) ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: CALL_OW 500
// base := GetBase ( base_dep ) ;
33590: LD_ADDR_VAR 0 15
33594: PUSH
33595: LD_VAR 0 1
33599: PPUSH
33600: CALL_OW 274
33604: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33605: LD_ADDR_VAR 0 16
33609: PUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: CALL_OW 255
33619: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33620: LD_ADDR_VAR 0 17
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: CALL_OW 248
33634: ST_TO_ADDR
// if sources then
33635: LD_VAR 0 5
33639: IFFALSE 33686
// for i = 1 to 3 do
33641: LD_ADDR_VAR 0 8
33645: PUSH
33646: DOUBLE
33647: LD_INT 1
33649: DEC
33650: ST_TO_ADDR
33651: LD_INT 3
33653: PUSH
33654: FOR_TO
33655: IFFALSE 33684
// AddResourceType ( base , i , sources [ i ] ) ;
33657: LD_VAR 0 15
33661: PPUSH
33662: LD_VAR 0 8
33666: PPUSH
33667: LD_VAR 0 5
33671: PUSH
33672: LD_VAR 0 8
33676: ARRAY
33677: PPUSH
33678: CALL_OW 276
33682: GO 33654
33684: POP
33685: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33686: LD_ADDR_VAR 0 18
33690: PUSH
33691: LD_VAR 0 15
33695: PPUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: LD_INT 1
33703: PPUSH
33704: CALL 32947 0 3
33708: ST_TO_ADDR
// InitHc ;
33709: CALL_OW 19
// InitUc ;
33713: CALL_OW 18
// uc_side := side ;
33717: LD_ADDR_OWVAR 20
33721: PUSH
33722: LD_VAR 0 16
33726: ST_TO_ADDR
// uc_nation := nation ;
33727: LD_ADDR_OWVAR 21
33731: PUSH
33732: LD_VAR 0 17
33736: ST_TO_ADDR
// if buildings then
33737: LD_VAR 0 18
33741: IFFALSE 35063
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33743: LD_ADDR_VAR 0 19
33747: PUSH
33748: LD_VAR 0 18
33752: PPUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 30
33758: PUSH
33759: LD_INT 29
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 30
33768: PUSH
33769: LD_INT 30
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: PPUSH
33781: CALL_OW 72
33785: ST_TO_ADDR
// if tmp then
33786: LD_VAR 0 19
33790: IFFALSE 33838
// for i in tmp do
33792: LD_ADDR_VAR 0 8
33796: PUSH
33797: LD_VAR 0 19
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33836
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33805: LD_VAR 0 8
33809: PPUSH
33810: CALL_OW 250
33814: PPUSH
33815: LD_VAR 0 8
33819: PPUSH
33820: CALL_OW 251
33824: PPUSH
33825: LD_VAR 0 16
33829: PPUSH
33830: CALL_OW 441
33834: GO 33802
33836: POP
33837: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33838: LD_VAR 0 18
33842: PPUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 30
33848: PUSH
33849: LD_INT 32
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 30
33858: PUSH
33859: LD_INT 33
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PPUSH
33871: CALL_OW 72
33875: IFFALSE 33963
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33877: LD_ADDR_VAR 0 8
33881: PUSH
33882: LD_VAR 0 18
33886: PPUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 30
33892: PUSH
33893: LD_INT 32
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 30
33902: PUSH
33903: LD_INT 33
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: PPUSH
33915: CALL_OW 72
33919: PUSH
33920: FOR_IN
33921: IFFALSE 33961
// begin if not GetBWeapon ( i ) then
33923: LD_VAR 0 8
33927: PPUSH
33928: CALL_OW 269
33932: NOT
33933: IFFALSE 33959
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33935: LD_VAR 0 8
33939: PPUSH
33940: LD_VAR 0 8
33944: PPUSH
33945: LD_VAR 0 2
33949: PPUSH
33950: CALL 35209 0 2
33954: PPUSH
33955: CALL_OW 431
// end ;
33959: GO 33920
33961: POP
33962: POP
// end ; for i = 1 to personel do
33963: LD_ADDR_VAR 0 8
33967: PUSH
33968: DOUBLE
33969: LD_INT 1
33971: DEC
33972: ST_TO_ADDR
33973: LD_VAR 0 6
33977: PUSH
33978: FOR_TO
33979: IFFALSE 35043
// begin if i > 4 then
33981: LD_VAR 0 8
33985: PUSH
33986: LD_INT 4
33988: GREATER
33989: IFFALSE 33993
// break ;
33991: GO 35043
// case i of 1 :
33993: LD_VAR 0 8
33997: PUSH
33998: LD_INT 1
34000: DOUBLE
34001: EQUAL
34002: IFTRUE 34006
34004: GO 34086
34006: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34007: LD_ADDR_VAR 0 12
34011: PUSH
34012: LD_VAR 0 18
34016: PPUSH
34017: LD_INT 22
34019: PUSH
34020: LD_VAR 0 16
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 58
34031: PUSH
34032: EMPTY
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: LD_INT 30
34040: PUSH
34041: LD_INT 32
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 30
34050: PUSH
34051: LD_INT 4
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 30
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: PPUSH
34079: CALL_OW 72
34083: ST_TO_ADDR
34084: GO 34308
34086: LD_INT 2
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34156
34094: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34095: LD_ADDR_VAR 0 12
34099: PUSH
34100: LD_VAR 0 18
34104: PPUSH
34105: LD_INT 22
34107: PUSH
34108: LD_VAR 0 16
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 30
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 30
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PPUSH
34149: CALL_OW 72
34153: ST_TO_ADDR
34154: GO 34308
34156: LD_INT 3
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 34226
34164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34165: LD_ADDR_VAR 0 12
34169: PUSH
34170: LD_VAR 0 18
34174: PPUSH
34175: LD_INT 22
34177: PUSH
34178: LD_VAR 0 16
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 30
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 30
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PPUSH
34219: CALL_OW 72
34223: ST_TO_ADDR
34224: GO 34308
34226: LD_INT 4
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34234
34232: GO 34307
34234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34235: LD_ADDR_VAR 0 12
34239: PUSH
34240: LD_VAR 0 18
34244: PPUSH
34245: LD_INT 22
34247: PUSH
34248: LD_VAR 0 16
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 30
34262: PUSH
34263: LD_INT 6
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 30
34272: PUSH
34273: LD_INT 7
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 30
34282: PUSH
34283: LD_INT 8
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PPUSH
34300: CALL_OW 72
34304: ST_TO_ADDR
34305: GO 34308
34307: POP
// if i = 1 then
34308: LD_VAR 0 8
34312: PUSH
34313: LD_INT 1
34315: EQUAL
34316: IFFALSE 34427
// begin tmp := [ ] ;
34318: LD_ADDR_VAR 0 19
34322: PUSH
34323: EMPTY
34324: ST_TO_ADDR
// for j in f do
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_VAR 0 12
34334: PUSH
34335: FOR_IN
34336: IFFALSE 34409
// if GetBType ( j ) = b_bunker then
34338: LD_VAR 0 9
34342: PPUSH
34343: CALL_OW 266
34347: PUSH
34348: LD_INT 32
34350: EQUAL
34351: IFFALSE 34378
// tmp := Insert ( tmp , 1 , j ) else
34353: LD_ADDR_VAR 0 19
34357: PUSH
34358: LD_VAR 0 19
34362: PPUSH
34363: LD_INT 1
34365: PPUSH
34366: LD_VAR 0 9
34370: PPUSH
34371: CALL_OW 2
34375: ST_TO_ADDR
34376: GO 34407
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34378: LD_ADDR_VAR 0 19
34382: PUSH
34383: LD_VAR 0 19
34387: PPUSH
34388: LD_VAR 0 19
34392: PUSH
34393: LD_INT 1
34395: PLUS
34396: PPUSH
34397: LD_VAR 0 9
34401: PPUSH
34402: CALL_OW 2
34406: ST_TO_ADDR
34407: GO 34335
34409: POP
34410: POP
// if tmp then
34411: LD_VAR 0 19
34415: IFFALSE 34427
// f := tmp ;
34417: LD_ADDR_VAR 0 12
34421: PUSH
34422: LD_VAR 0 19
34426: ST_TO_ADDR
// end ; x := personel [ i ] ;
34427: LD_ADDR_VAR 0 13
34431: PUSH
34432: LD_VAR 0 6
34436: PUSH
34437: LD_VAR 0 8
34441: ARRAY
34442: ST_TO_ADDR
// if x = - 1 then
34443: LD_VAR 0 13
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: EQUAL
34452: IFFALSE 34661
// begin for j in f do
34454: LD_ADDR_VAR 0 9
34458: PUSH
34459: LD_VAR 0 12
34463: PUSH
34464: FOR_IN
34465: IFFALSE 34657
// repeat InitHc ;
34467: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34471: LD_VAR 0 9
34475: PPUSH
34476: CALL_OW 266
34480: PUSH
34481: LD_INT 5
34483: EQUAL
34484: IFFALSE 34554
// begin if UnitsInside ( j ) < 3 then
34486: LD_VAR 0 9
34490: PPUSH
34491: CALL_OW 313
34495: PUSH
34496: LD_INT 3
34498: LESS
34499: IFFALSE 34535
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34501: LD_INT 0
34503: PPUSH
34504: LD_INT 5
34506: PUSH
34507: LD_INT 8
34509: PUSH
34510: LD_INT 9
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: PUSH
34518: LD_VAR 0 17
34522: ARRAY
34523: PPUSH
34524: LD_VAR 0 4
34528: PPUSH
34529: CALL_OW 380
34533: GO 34552
// PrepareHuman ( false , i , skill ) ;
34535: LD_INT 0
34537: PPUSH
34538: LD_VAR 0 8
34542: PPUSH
34543: LD_VAR 0 4
34547: PPUSH
34548: CALL_OW 380
// end else
34552: GO 34571
// PrepareHuman ( false , i , skill ) ;
34554: LD_INT 0
34556: PPUSH
34557: LD_VAR 0 8
34561: PPUSH
34562: LD_VAR 0 4
34566: PPUSH
34567: CALL_OW 380
// un := CreateHuman ;
34571: LD_ADDR_VAR 0 14
34575: PUSH
34576: CALL_OW 44
34580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34581: LD_ADDR_VAR 0 7
34585: PUSH
34586: LD_VAR 0 7
34590: PPUSH
34591: LD_INT 1
34593: PPUSH
34594: LD_VAR 0 14
34598: PPUSH
34599: CALL_OW 2
34603: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34604: LD_VAR 0 14
34608: PPUSH
34609: LD_VAR 0 9
34613: PPUSH
34614: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34618: LD_VAR 0 9
34622: PPUSH
34623: CALL_OW 313
34627: PUSH
34628: LD_INT 6
34630: EQUAL
34631: PUSH
34632: LD_VAR 0 9
34636: PPUSH
34637: CALL_OW 266
34641: PUSH
34642: LD_INT 32
34644: PUSH
34645: LD_INT 31
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: IN
34652: OR
34653: IFFALSE 34467
34655: GO 34464
34657: POP
34658: POP
// end else
34659: GO 35041
// for j = 1 to x do
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: DOUBLE
34667: LD_INT 1
34669: DEC
34670: ST_TO_ADDR
34671: LD_VAR 0 13
34675: PUSH
34676: FOR_TO
34677: IFFALSE 35039
// begin InitHc ;
34679: CALL_OW 19
// if not f then
34683: LD_VAR 0 12
34687: NOT
34688: IFFALSE 34777
// begin PrepareHuman ( false , i , skill ) ;
34690: LD_INT 0
34692: PPUSH
34693: LD_VAR 0 8
34697: PPUSH
34698: LD_VAR 0 4
34702: PPUSH
34703: CALL_OW 380
// un := CreateHuman ;
34707: LD_ADDR_VAR 0 14
34711: PUSH
34712: CALL_OW 44
34716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34717: LD_ADDR_VAR 0 7
34721: PUSH
34722: LD_VAR 0 7
34726: PPUSH
34727: LD_INT 1
34729: PPUSH
34730: LD_VAR 0 14
34734: PPUSH
34735: CALL_OW 2
34739: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34740: LD_VAR 0 14
34744: PPUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: CALL_OW 250
34754: PPUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 251
34764: PPUSH
34765: LD_INT 10
34767: PPUSH
34768: LD_INT 0
34770: PPUSH
34771: CALL_OW 50
// continue ;
34775: GO 34676
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34777: LD_VAR 0 12
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: PPUSH
34786: CALL_OW 313
34790: PUSH
34791: LD_VAR 0 12
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: PPUSH
34800: CALL_OW 266
34804: PUSH
34805: LD_INT 32
34807: PUSH
34808: LD_INT 31
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: IN
34815: AND
34816: PUSH
34817: LD_VAR 0 12
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: PPUSH
34826: CALL_OW 313
34830: PUSH
34831: LD_INT 6
34833: EQUAL
34834: OR
34835: IFFALSE 34855
// f := Delete ( f , 1 ) ;
34837: LD_ADDR_VAR 0 12
34841: PUSH
34842: LD_VAR 0 12
34846: PPUSH
34847: LD_INT 1
34849: PPUSH
34850: CALL_OW 3
34854: ST_TO_ADDR
// if not f then
34855: LD_VAR 0 12
34859: NOT
34860: IFFALSE 34878
// begin x := x + 2 ;
34862: LD_ADDR_VAR 0 13
34866: PUSH
34867: LD_VAR 0 13
34871: PUSH
34872: LD_INT 2
34874: PLUS
34875: ST_TO_ADDR
// continue ;
34876: GO 34676
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34878: LD_VAR 0 12
34882: PUSH
34883: LD_INT 1
34885: ARRAY
34886: PPUSH
34887: CALL_OW 266
34891: PUSH
34892: LD_INT 5
34894: EQUAL
34895: IFFALSE 34969
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34897: LD_VAR 0 12
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: PPUSH
34906: CALL_OW 313
34910: PUSH
34911: LD_INT 3
34913: LESS
34914: IFFALSE 34950
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34916: LD_INT 0
34918: PPUSH
34919: LD_INT 5
34921: PUSH
34922: LD_INT 8
34924: PUSH
34925: LD_INT 9
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: PUSH
34933: LD_VAR 0 17
34937: ARRAY
34938: PPUSH
34939: LD_VAR 0 4
34943: PPUSH
34944: CALL_OW 380
34948: GO 34967
// PrepareHuman ( false , i , skill ) ;
34950: LD_INT 0
34952: PPUSH
34953: LD_VAR 0 8
34957: PPUSH
34958: LD_VAR 0 4
34962: PPUSH
34963: CALL_OW 380
// end else
34967: GO 34986
// PrepareHuman ( false , i , skill ) ;
34969: LD_INT 0
34971: PPUSH
34972: LD_VAR 0 8
34976: PPUSH
34977: LD_VAR 0 4
34981: PPUSH
34982: CALL_OW 380
// un := CreateHuman ;
34986: LD_ADDR_VAR 0 14
34990: PUSH
34991: CALL_OW 44
34995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34996: LD_ADDR_VAR 0 7
35000: PUSH
35001: LD_VAR 0 7
35005: PPUSH
35006: LD_INT 1
35008: PPUSH
35009: LD_VAR 0 14
35013: PPUSH
35014: CALL_OW 2
35018: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35019: LD_VAR 0 14
35023: PPUSH
35024: LD_VAR 0 12
35028: PUSH
35029: LD_INT 1
35031: ARRAY
35032: PPUSH
35033: CALL_OW 52
// end ;
35037: GO 34676
35039: POP
35040: POP
// end ;
35041: GO 33978
35043: POP
35044: POP
// result := result ^ buildings ;
35045: LD_ADDR_VAR 0 7
35049: PUSH
35050: LD_VAR 0 7
35054: PUSH
35055: LD_VAR 0 18
35059: ADD
35060: ST_TO_ADDR
// end else
35061: GO 35204
// begin for i = 1 to personel do
35063: LD_ADDR_VAR 0 8
35067: PUSH
35068: DOUBLE
35069: LD_INT 1
35071: DEC
35072: ST_TO_ADDR
35073: LD_VAR 0 6
35077: PUSH
35078: FOR_TO
35079: IFFALSE 35202
// begin if i > 4 then
35081: LD_VAR 0 8
35085: PUSH
35086: LD_INT 4
35088: GREATER
35089: IFFALSE 35093
// break ;
35091: GO 35202
// x := personel [ i ] ;
35093: LD_ADDR_VAR 0 13
35097: PUSH
35098: LD_VAR 0 6
35102: PUSH
35103: LD_VAR 0 8
35107: ARRAY
35108: ST_TO_ADDR
// if x = - 1 then
35109: LD_VAR 0 13
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: EQUAL
35118: IFFALSE 35122
// continue ;
35120: GO 35078
// PrepareHuman ( false , i , skill ) ;
35122: LD_INT 0
35124: PPUSH
35125: LD_VAR 0 8
35129: PPUSH
35130: LD_VAR 0 4
35134: PPUSH
35135: CALL_OW 380
// un := CreateHuman ;
35139: LD_ADDR_VAR 0 14
35143: PUSH
35144: CALL_OW 44
35148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35149: LD_VAR 0 14
35153: PPUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 250
35163: PPUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 251
35173: PPUSH
35174: LD_INT 10
35176: PPUSH
35177: LD_INT 0
35179: PPUSH
35180: CALL_OW 50
// result := result ^ un ;
35184: LD_ADDR_VAR 0 7
35188: PUSH
35189: LD_VAR 0 7
35193: PUSH
35194: LD_VAR 0 14
35198: ADD
35199: ST_TO_ADDR
// end ;
35200: GO 35078
35202: POP
35203: POP
// end ; end ;
35204: LD_VAR 0 7
35208: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
// result := false ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_INT 0
35234: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35235: LD_VAR 0 1
35239: NOT
35240: PUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: CALL_OW 266
35250: PUSH
35251: LD_INT 32
35253: PUSH
35254: LD_INT 33
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: IN
35261: NOT
35262: OR
35263: IFFALSE 35267
// exit ;
35265: GO 36376
// nat := GetNation ( tower ) ;
35267: LD_ADDR_VAR 0 12
35271: PUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 248
35281: ST_TO_ADDR
// side := GetSide ( tower ) ;
35282: LD_ADDR_VAR 0 16
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 255
35296: ST_TO_ADDR
// x := GetX ( tower ) ;
35297: LD_ADDR_VAR 0 10
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 250
35311: ST_TO_ADDR
// y := GetY ( tower ) ;
35312: LD_ADDR_VAR 0 11
35316: PUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 251
35326: ST_TO_ADDR
// if not x or not y then
35327: LD_VAR 0 10
35331: NOT
35332: PUSH
35333: LD_VAR 0 11
35337: NOT
35338: OR
35339: IFFALSE 35343
// exit ;
35341: GO 36376
// weapon := 0 ;
35343: LD_ADDR_VAR 0 18
35347: PUSH
35348: LD_INT 0
35350: ST_TO_ADDR
// fac_list := [ ] ;
35351: LD_ADDR_VAR 0 17
35355: PUSH
35356: EMPTY
35357: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35358: LD_ADDR_VAR 0 6
35362: PUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: CALL_OW 274
35372: PPUSH
35373: LD_VAR 0 2
35377: PPUSH
35378: LD_INT 0
35380: PPUSH
35381: CALL 32947 0 3
35385: PPUSH
35386: LD_INT 30
35388: PUSH
35389: LD_INT 3
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PPUSH
35396: CALL_OW 72
35400: ST_TO_ADDR
// if not factories then
35401: LD_VAR 0 6
35405: NOT
35406: IFFALSE 35410
// exit ;
35408: GO 36376
// for i in factories do
35410: LD_ADDR_VAR 0 8
35414: PUSH
35415: LD_VAR 0 6
35419: PUSH
35420: FOR_IN
35421: IFFALSE 35446
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35423: LD_ADDR_VAR 0 17
35427: PUSH
35428: LD_VAR 0 17
35432: PUSH
35433: LD_VAR 0 8
35437: PPUSH
35438: CALL_OW 478
35442: UNION
35443: ST_TO_ADDR
35444: GO 35420
35446: POP
35447: POP
// if not fac_list then
35448: LD_VAR 0 17
35452: NOT
35453: IFFALSE 35457
// exit ;
35455: GO 36376
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35457: LD_ADDR_VAR 0 5
35461: PUSH
35462: LD_INT 4
35464: PUSH
35465: LD_INT 5
35467: PUSH
35468: LD_INT 9
35470: PUSH
35471: LD_INT 10
35473: PUSH
35474: LD_INT 6
35476: PUSH
35477: LD_INT 7
35479: PUSH
35480: LD_INT 11
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 27
35494: PUSH
35495: LD_INT 28
35497: PUSH
35498: LD_INT 26
35500: PUSH
35501: LD_INT 30
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 43
35512: PUSH
35513: LD_INT 44
35515: PUSH
35516: LD_INT 46
35518: PUSH
35519: LD_INT 45
35521: PUSH
35522: LD_INT 47
35524: PUSH
35525: LD_INT 49
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: LD_VAR 0 12
35545: ARRAY
35546: ST_TO_ADDR
// list := list isect fac_list ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 5
35556: PUSH
35557: LD_VAR 0 17
35561: ISECT
35562: ST_TO_ADDR
// if not list then
35563: LD_VAR 0 5
35567: NOT
35568: IFFALSE 35572
// exit ;
35570: GO 36376
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35572: LD_VAR 0 12
35576: PUSH
35577: LD_INT 3
35579: EQUAL
35580: PUSH
35581: LD_INT 49
35583: PUSH
35584: LD_VAR 0 5
35588: IN
35589: AND
35590: PUSH
35591: LD_INT 31
35593: PPUSH
35594: LD_VAR 0 16
35598: PPUSH
35599: CALL_OW 321
35603: PUSH
35604: LD_INT 2
35606: EQUAL
35607: AND
35608: IFFALSE 35668
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35610: LD_INT 22
35612: PUSH
35613: LD_VAR 0 16
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 35
35624: PUSH
35625: LD_INT 49
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 91
35634: PUSH
35635: LD_VAR 0 1
35639: PUSH
35640: LD_INT 10
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: PPUSH
35653: CALL_OW 69
35657: NOT
35658: IFFALSE 35668
// weapon := ru_time_lapser ;
35660: LD_ADDR_VAR 0 18
35664: PUSH
35665: LD_INT 49
35667: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35668: LD_VAR 0 12
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: IN
35683: PUSH
35684: LD_INT 11
35686: PUSH
35687: LD_VAR 0 5
35691: IN
35692: PUSH
35693: LD_INT 30
35695: PUSH
35696: LD_VAR 0 5
35700: IN
35701: OR
35702: AND
35703: PUSH
35704: LD_INT 6
35706: PPUSH
35707: LD_VAR 0 16
35711: PPUSH
35712: CALL_OW 321
35716: PUSH
35717: LD_INT 2
35719: EQUAL
35720: AND
35721: IFFALSE 35886
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35723: LD_INT 22
35725: PUSH
35726: LD_VAR 0 16
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 35
35740: PUSH
35741: LD_INT 11
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 35
35750: PUSH
35751: LD_INT 30
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 91
35765: PUSH
35766: LD_VAR 0 1
35770: PUSH
35771: LD_INT 18
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PPUSH
35784: CALL_OW 69
35788: NOT
35789: PUSH
35790: LD_INT 22
35792: PUSH
35793: LD_VAR 0 16
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 30
35807: PUSH
35808: LD_INT 32
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: LD_INT 33
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 91
35832: PUSH
35833: LD_VAR 0 1
35837: PUSH
35838: LD_INT 12
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: PPUSH
35854: CALL_OW 69
35858: PUSH
35859: LD_INT 2
35861: GREATER
35862: AND
35863: IFFALSE 35886
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35865: LD_ADDR_VAR 0 18
35869: PUSH
35870: LD_INT 11
35872: PUSH
35873: LD_INT 30
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_VAR 0 12
35884: ARRAY
35885: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35886: LD_VAR 0 18
35890: NOT
35891: PUSH
35892: LD_INT 40
35894: PPUSH
35895: LD_VAR 0 16
35899: PPUSH
35900: CALL_OW 321
35904: PUSH
35905: LD_INT 2
35907: EQUAL
35908: AND
35909: PUSH
35910: LD_INT 7
35912: PUSH
35913: LD_VAR 0 5
35917: IN
35918: PUSH
35919: LD_INT 28
35921: PUSH
35922: LD_VAR 0 5
35926: IN
35927: OR
35928: PUSH
35929: LD_INT 45
35931: PUSH
35932: LD_VAR 0 5
35936: IN
35937: OR
35938: AND
35939: IFFALSE 36193
// begin hex := GetHexInfo ( x , y ) ;
35941: LD_ADDR_VAR 0 4
35945: PUSH
35946: LD_VAR 0 10
35950: PPUSH
35951: LD_VAR 0 11
35955: PPUSH
35956: CALL_OW 546
35960: ST_TO_ADDR
// if hex [ 1 ] then
35961: LD_VAR 0 4
35965: PUSH
35966: LD_INT 1
35968: ARRAY
35969: IFFALSE 35973
// exit ;
35971: GO 36376
// height := hex [ 2 ] ;
35973: LD_ADDR_VAR 0 15
35977: PUSH
35978: LD_VAR 0 4
35982: PUSH
35983: LD_INT 2
35985: ARRAY
35986: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35987: LD_ADDR_VAR 0 14
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: LD_INT 5
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: ST_TO_ADDR
// for i in tmp do
36010: LD_ADDR_VAR 0 8
36014: PUSH
36015: LD_VAR 0 14
36019: PUSH
36020: FOR_IN
36021: IFFALSE 36191
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36023: LD_ADDR_VAR 0 9
36027: PUSH
36028: LD_VAR 0 10
36032: PPUSH
36033: LD_VAR 0 8
36037: PPUSH
36038: LD_INT 5
36040: PPUSH
36041: CALL_OW 272
36045: PUSH
36046: LD_VAR 0 11
36050: PPUSH
36051: LD_VAR 0 8
36055: PPUSH
36056: LD_INT 5
36058: PPUSH
36059: CALL_OW 273
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36068: LD_VAR 0 9
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: PPUSH
36077: LD_VAR 0 9
36081: PUSH
36082: LD_INT 2
36084: ARRAY
36085: PPUSH
36086: CALL_OW 488
36090: IFFALSE 36189
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36092: LD_ADDR_VAR 0 4
36096: PUSH
36097: LD_VAR 0 9
36101: PUSH
36102: LD_INT 1
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 9
36110: PUSH
36111: LD_INT 2
36113: ARRAY
36114: PPUSH
36115: CALL_OW 546
36119: ST_TO_ADDR
// if hex [ 1 ] then
36120: LD_VAR 0 4
36124: PUSH
36125: LD_INT 1
36127: ARRAY
36128: IFFALSE 36132
// continue ;
36130: GO 36020
// h := hex [ 2 ] ;
36132: LD_ADDR_VAR 0 13
36136: PUSH
36137: LD_VAR 0 4
36141: PUSH
36142: LD_INT 2
36144: ARRAY
36145: ST_TO_ADDR
// if h + 7 < height then
36146: LD_VAR 0 13
36150: PUSH
36151: LD_INT 7
36153: PLUS
36154: PUSH
36155: LD_VAR 0 15
36159: LESS
36160: IFFALSE 36189
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36162: LD_ADDR_VAR 0 18
36166: PUSH
36167: LD_INT 7
36169: PUSH
36170: LD_INT 28
36172: PUSH
36173: LD_INT 45
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: PUSH
36181: LD_VAR 0 12
36185: ARRAY
36186: ST_TO_ADDR
// break ;
36187: GO 36191
// end ; end ; end ;
36189: GO 36020
36191: POP
36192: POP
// end ; if not weapon then
36193: LD_VAR 0 18
36197: NOT
36198: IFFALSE 36258
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36200: LD_ADDR_VAR 0 5
36204: PUSH
36205: LD_VAR 0 5
36209: PUSH
36210: LD_INT 11
36212: PUSH
36213: LD_INT 30
36215: PUSH
36216: LD_INT 49
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: DIFF
36224: ST_TO_ADDR
// if not list then
36225: LD_VAR 0 5
36229: NOT
36230: IFFALSE 36234
// exit ;
36232: GO 36376
// weapon := list [ rand ( 1 , list ) ] ;
36234: LD_ADDR_VAR 0 18
36238: PUSH
36239: LD_VAR 0 5
36243: PUSH
36244: LD_INT 1
36246: PPUSH
36247: LD_VAR 0 5
36251: PPUSH
36252: CALL_OW 12
36256: ARRAY
36257: ST_TO_ADDR
// end ; if weapon then
36258: LD_VAR 0 18
36262: IFFALSE 36376
// begin tmp := CostOfWeapon ( weapon ) ;
36264: LD_ADDR_VAR 0 14
36268: PUSH
36269: LD_VAR 0 18
36273: PPUSH
36274: CALL_OW 451
36278: ST_TO_ADDR
// j := GetBase ( tower ) ;
36279: LD_ADDR_VAR 0 9
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 274
36293: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36294: LD_VAR 0 9
36298: PPUSH
36299: LD_INT 1
36301: PPUSH
36302: CALL_OW 275
36306: PUSH
36307: LD_VAR 0 14
36311: PUSH
36312: LD_INT 1
36314: ARRAY
36315: GREATEREQUAL
36316: PUSH
36317: LD_VAR 0 9
36321: PPUSH
36322: LD_INT 2
36324: PPUSH
36325: CALL_OW 275
36329: PUSH
36330: LD_VAR 0 14
36334: PUSH
36335: LD_INT 2
36337: ARRAY
36338: GREATEREQUAL
36339: AND
36340: PUSH
36341: LD_VAR 0 9
36345: PPUSH
36346: LD_INT 3
36348: PPUSH
36349: CALL_OW 275
36353: PUSH
36354: LD_VAR 0 14
36358: PUSH
36359: LD_INT 3
36361: ARRAY
36362: GREATEREQUAL
36363: AND
36364: IFFALSE 36376
// result := weapon ;
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_VAR 0 18
36375: ST_TO_ADDR
// end ; end ;
36376: LD_VAR 0 3
36380: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36381: LD_INT 0
36383: PPUSH
36384: PPUSH
// result := true ;
36385: LD_ADDR_VAR 0 3
36389: PUSH
36390: LD_INT 1
36392: ST_TO_ADDR
// if array1 = array2 then
36393: LD_VAR 0 1
36397: PUSH
36398: LD_VAR 0 2
36402: EQUAL
36403: IFFALSE 36463
// begin for i = 1 to array1 do
36405: LD_ADDR_VAR 0 4
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 1
36419: PUSH
36420: FOR_TO
36421: IFFALSE 36459
// if array1 [ i ] <> array2 [ i ] then
36423: LD_VAR 0 1
36427: PUSH
36428: LD_VAR 0 4
36432: ARRAY
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_VAR 0 4
36443: ARRAY
36444: NONEQUAL
36445: IFFALSE 36457
// begin result := false ;
36447: LD_ADDR_VAR 0 3
36451: PUSH
36452: LD_INT 0
36454: ST_TO_ADDR
// break ;
36455: GO 36459
// end ;
36457: GO 36420
36459: POP
36460: POP
// end else
36461: GO 36471
// result := false ;
36463: LD_ADDR_VAR 0 3
36467: PUSH
36468: LD_INT 0
36470: ST_TO_ADDR
// end ;
36471: LD_VAR 0 3
36475: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36476: LD_INT 0
36478: PPUSH
36479: PPUSH
// if not array1 or not array2 then
36480: LD_VAR 0 1
36484: NOT
36485: PUSH
36486: LD_VAR 0 2
36490: NOT
36491: OR
36492: IFFALSE 36496
// exit ;
36494: GO 36560
// result := true ;
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 1
36503: ST_TO_ADDR
// for i = 1 to array1 do
36504: LD_ADDR_VAR 0 4
36508: PUSH
36509: DOUBLE
36510: LD_INT 1
36512: DEC
36513: ST_TO_ADDR
36514: LD_VAR 0 1
36518: PUSH
36519: FOR_TO
36520: IFFALSE 36558
// if array1 [ i ] <> array2 [ i ] then
36522: LD_VAR 0 1
36526: PUSH
36527: LD_VAR 0 4
36531: ARRAY
36532: PUSH
36533: LD_VAR 0 2
36537: PUSH
36538: LD_VAR 0 4
36542: ARRAY
36543: NONEQUAL
36544: IFFALSE 36556
// begin result := false ;
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_INT 0
36553: ST_TO_ADDR
// break ;
36554: GO 36558
// end ;
36556: GO 36519
36558: POP
36559: POP
// end ;
36560: LD_VAR 0 3
36564: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36565: LD_INT 0
36567: PPUSH
36568: PPUSH
36569: PPUSH
// pom := GetBase ( fac ) ;
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 274
36584: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36585: LD_ADDR_VAR 0 4
36589: PUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_INT 1
36597: ARRAY
36598: PPUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 2
36606: ARRAY
36607: PPUSH
36608: LD_VAR 0 2
36612: PUSH
36613: LD_INT 3
36615: ARRAY
36616: PPUSH
36617: LD_VAR 0 2
36621: PUSH
36622: LD_INT 4
36624: ARRAY
36625: PPUSH
36626: CALL_OW 449
36630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36631: LD_ADDR_VAR 0 3
36635: PUSH
36636: LD_VAR 0 5
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: CALL_OW 275
36648: PUSH
36649: LD_VAR 0 4
36653: PUSH
36654: LD_INT 1
36656: ARRAY
36657: GREATEREQUAL
36658: PUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: LD_INT 2
36666: PPUSH
36667: CALL_OW 275
36671: PUSH
36672: LD_VAR 0 4
36676: PUSH
36677: LD_INT 2
36679: ARRAY
36680: GREATEREQUAL
36681: AND
36682: PUSH
36683: LD_VAR 0 5
36687: PPUSH
36688: LD_INT 3
36690: PPUSH
36691: CALL_OW 275
36695: PUSH
36696: LD_VAR 0 4
36700: PUSH
36701: LD_INT 3
36703: ARRAY
36704: GREATEREQUAL
36705: AND
36706: ST_TO_ADDR
// end ;
36707: LD_VAR 0 3
36711: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36712: LD_INT 0
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
// pom := GetBase ( building ) ;
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 274
36732: ST_TO_ADDR
// if not pom then
36733: LD_VAR 0 3
36737: NOT
36738: IFFALSE 36742
// exit ;
36740: GO 36912
// btype := GetBType ( building ) ;
36742: LD_ADDR_VAR 0 5
36746: PUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 266
36756: ST_TO_ADDR
// if btype = b_armoury then
36757: LD_VAR 0 5
36761: PUSH
36762: LD_INT 4
36764: EQUAL
36765: IFFALSE 36775
// btype := b_barracks ;
36767: LD_ADDR_VAR 0 5
36771: PUSH
36772: LD_INT 5
36774: ST_TO_ADDR
// if btype = b_depot then
36775: LD_VAR 0 5
36779: PUSH
36780: LD_INT 0
36782: EQUAL
36783: IFFALSE 36793
// btype := b_warehouse ;
36785: LD_ADDR_VAR 0 5
36789: PUSH
36790: LD_INT 1
36792: ST_TO_ADDR
// if btype = b_workshop then
36793: LD_VAR 0 5
36797: PUSH
36798: LD_INT 2
36800: EQUAL
36801: IFFALSE 36811
// btype := b_factory ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_INT 3
36810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36811: LD_ADDR_VAR 0 4
36815: PUSH
36816: LD_VAR 0 5
36820: PPUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 248
36830: PPUSH
36831: CALL_OW 450
36835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: LD_VAR 0 3
36845: PPUSH
36846: LD_INT 1
36848: PPUSH
36849: CALL_OW 275
36853: PUSH
36854: LD_VAR 0 4
36858: PUSH
36859: LD_INT 1
36861: ARRAY
36862: GREATEREQUAL
36863: PUSH
36864: LD_VAR 0 3
36868: PPUSH
36869: LD_INT 2
36871: PPUSH
36872: CALL_OW 275
36876: PUSH
36877: LD_VAR 0 4
36881: PUSH
36882: LD_INT 2
36884: ARRAY
36885: GREATEREQUAL
36886: AND
36887: PUSH
36888: LD_VAR 0 3
36892: PPUSH
36893: LD_INT 3
36895: PPUSH
36896: CALL_OW 275
36900: PUSH
36901: LD_VAR 0 4
36905: PUSH
36906: LD_INT 3
36908: ARRAY
36909: GREATEREQUAL
36910: AND
36911: ST_TO_ADDR
// end ;
36912: LD_VAR 0 2
36916: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36917: LD_INT 0
36919: PPUSH
36920: PPUSH
36921: PPUSH
// pom := GetBase ( building ) ;
36922: LD_ADDR_VAR 0 4
36926: PUSH
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL_OW 274
36936: ST_TO_ADDR
// if not pom then
36937: LD_VAR 0 4
36941: NOT
36942: IFFALSE 36946
// exit ;
36944: GO 37047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36946: LD_ADDR_VAR 0 5
36950: PUSH
36951: LD_VAR 0 2
36955: PPUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 248
36965: PPUSH
36966: CALL_OW 450
36970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_VAR 0 4
36980: PPUSH
36981: LD_INT 1
36983: PPUSH
36984: CALL_OW 275
36988: PUSH
36989: LD_VAR 0 5
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: GREATEREQUAL
36998: PUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: LD_INT 2
37006: PPUSH
37007: CALL_OW 275
37011: PUSH
37012: LD_VAR 0 5
37016: PUSH
37017: LD_INT 2
37019: ARRAY
37020: GREATEREQUAL
37021: AND
37022: PUSH
37023: LD_VAR 0 4
37027: PPUSH
37028: LD_INT 3
37030: PPUSH
37031: CALL_OW 275
37035: PUSH
37036: LD_VAR 0 5
37040: PUSH
37041: LD_INT 3
37043: ARRAY
37044: GREATEREQUAL
37045: AND
37046: ST_TO_ADDR
// end ;
37047: LD_VAR 0 3
37051: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
// result := false ;
37065: LD_ADDR_VAR 0 8
37069: PUSH
37070: LD_INT 0
37072: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37073: LD_VAR 0 5
37077: NOT
37078: PUSH
37079: LD_VAR 0 1
37083: NOT
37084: OR
37085: PUSH
37086: LD_VAR 0 2
37090: NOT
37091: OR
37092: PUSH
37093: LD_VAR 0 3
37097: NOT
37098: OR
37099: IFFALSE 37103
// exit ;
37101: GO 37917
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37103: LD_ADDR_VAR 0 14
37107: PUSH
37108: LD_VAR 0 1
37112: PPUSH
37113: LD_VAR 0 2
37117: PPUSH
37118: LD_VAR 0 3
37122: PPUSH
37123: LD_VAR 0 4
37127: PPUSH
37128: LD_VAR 0 5
37132: PUSH
37133: LD_INT 1
37135: ARRAY
37136: PPUSH
37137: CALL_OW 248
37141: PPUSH
37142: LD_INT 0
37144: PPUSH
37145: CALL 39150 0 6
37149: ST_TO_ADDR
// if not hexes then
37150: LD_VAR 0 14
37154: NOT
37155: IFFALSE 37159
// exit ;
37157: GO 37917
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37159: LD_ADDR_VAR 0 17
37163: PUSH
37164: LD_VAR 0 5
37168: PPUSH
37169: LD_INT 22
37171: PUSH
37172: LD_VAR 0 13
37176: PPUSH
37177: CALL_OW 255
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 30
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 30
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PPUSH
37218: CALL_OW 72
37222: ST_TO_ADDR
// for i = 1 to hexes do
37223: LD_ADDR_VAR 0 9
37227: PUSH
37228: DOUBLE
37229: LD_INT 1
37231: DEC
37232: ST_TO_ADDR
37233: LD_VAR 0 14
37237: PUSH
37238: FOR_TO
37239: IFFALSE 37915
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37241: LD_ADDR_VAR 0 13
37245: PUSH
37246: LD_VAR 0 14
37250: PUSH
37251: LD_VAR 0 9
37255: ARRAY
37256: PUSH
37257: LD_INT 1
37259: ARRAY
37260: PPUSH
37261: LD_VAR 0 14
37265: PUSH
37266: LD_VAR 0 9
37270: ARRAY
37271: PUSH
37272: LD_INT 2
37274: ARRAY
37275: PPUSH
37276: CALL_OW 428
37280: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37281: LD_VAR 0 14
37285: PUSH
37286: LD_VAR 0 9
37290: ARRAY
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 14
37300: PUSH
37301: LD_VAR 0 9
37305: ARRAY
37306: PUSH
37307: LD_INT 2
37309: ARRAY
37310: PPUSH
37311: CALL_OW 351
37315: PUSH
37316: LD_VAR 0 14
37320: PUSH
37321: LD_VAR 0 9
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 14
37335: PUSH
37336: LD_VAR 0 9
37340: ARRAY
37341: PUSH
37342: LD_INT 2
37344: ARRAY
37345: PPUSH
37346: CALL_OW 488
37350: NOT
37351: OR
37352: PUSH
37353: LD_VAR 0 13
37357: PPUSH
37358: CALL_OW 247
37362: PUSH
37363: LD_INT 3
37365: EQUAL
37366: OR
37367: IFFALSE 37373
// exit ;
37369: POP
37370: POP
37371: GO 37917
// if not tmp then
37373: LD_VAR 0 13
37377: NOT
37378: IFFALSE 37382
// continue ;
37380: GO 37238
// result := true ;
37382: LD_ADDR_VAR 0 8
37386: PUSH
37387: LD_INT 1
37389: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37390: LD_VAR 0 6
37394: PUSH
37395: LD_VAR 0 13
37399: PPUSH
37400: CALL_OW 247
37404: PUSH
37405: LD_INT 2
37407: EQUAL
37408: AND
37409: PUSH
37410: LD_VAR 0 13
37414: PPUSH
37415: CALL_OW 263
37419: PUSH
37420: LD_INT 1
37422: EQUAL
37423: AND
37424: IFFALSE 37588
// begin if IsDrivenBy ( tmp ) then
37426: LD_VAR 0 13
37430: PPUSH
37431: CALL_OW 311
37435: IFFALSE 37439
// continue ;
37437: GO 37238
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37439: LD_VAR 0 6
37443: PPUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 60
37449: PUSH
37450: EMPTY
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 55
37462: PUSH
37463: EMPTY
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PPUSH
37474: CALL_OW 72
37478: IFFALSE 37586
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37480: LD_ADDR_VAR 0 18
37484: PUSH
37485: LD_VAR 0 6
37489: PPUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 60
37495: PUSH
37496: EMPTY
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: LD_INT 55
37508: PUSH
37509: EMPTY
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PPUSH
37520: CALL_OW 72
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: ST_TO_ADDR
// if IsInUnit ( driver ) then
37529: LD_VAR 0 18
37533: PPUSH
37534: CALL_OW 310
37538: IFFALSE 37549
// ComExit ( driver ) ;
37540: LD_VAR 0 18
37544: PPUSH
37545: CALL 62838 0 1
// AddComEnterUnit ( driver , tmp ) ;
37549: LD_VAR 0 18
37553: PPUSH
37554: LD_VAR 0 13
37558: PPUSH
37559: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37563: LD_VAR 0 18
37567: PPUSH
37568: LD_VAR 0 7
37572: PPUSH
37573: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37577: LD_VAR 0 18
37581: PPUSH
37582: CALL_OW 181
// end ; continue ;
37586: GO 37238
// end ; if not cleaners or not tmp in cleaners then
37588: LD_VAR 0 6
37592: NOT
37593: PUSH
37594: LD_VAR 0 13
37598: PUSH
37599: LD_VAR 0 6
37603: IN
37604: NOT
37605: OR
37606: IFFALSE 37913
// begin if dep then
37608: LD_VAR 0 17
37612: IFFALSE 37748
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37614: LD_ADDR_VAR 0 16
37618: PUSH
37619: LD_VAR 0 17
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PPUSH
37628: CALL_OW 250
37632: PPUSH
37633: LD_VAR 0 17
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PPUSH
37642: CALL_OW 254
37646: PPUSH
37647: LD_INT 5
37649: PPUSH
37650: CALL_OW 272
37654: PUSH
37655: LD_VAR 0 17
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: CALL_OW 251
37668: PPUSH
37669: LD_VAR 0 17
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PPUSH
37678: CALL_OW 254
37682: PPUSH
37683: LD_INT 5
37685: PPUSH
37686: CALL_OW 273
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37695: LD_VAR 0 16
37699: PUSH
37700: LD_INT 1
37702: ARRAY
37703: PPUSH
37704: LD_VAR 0 16
37708: PUSH
37709: LD_INT 2
37711: ARRAY
37712: PPUSH
37713: CALL_OW 488
37717: IFFALSE 37748
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37719: LD_VAR 0 13
37723: PPUSH
37724: LD_VAR 0 16
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PPUSH
37733: LD_VAR 0 16
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: CALL_OW 111
// continue ;
37746: GO 37238
// end ; end ; r := GetDir ( tmp ) ;
37748: LD_ADDR_VAR 0 15
37752: PUSH
37753: LD_VAR 0 13
37757: PPUSH
37758: CALL_OW 254
37762: ST_TO_ADDR
// if r = 5 then
37763: LD_VAR 0 15
37767: PUSH
37768: LD_INT 5
37770: EQUAL
37771: IFFALSE 37781
// r := 0 ;
37773: LD_ADDR_VAR 0 15
37777: PUSH
37778: LD_INT 0
37780: ST_TO_ADDR
// for j = r to 5 do
37781: LD_ADDR_VAR 0 10
37785: PUSH
37786: DOUBLE
37787: LD_VAR 0 15
37791: DEC
37792: ST_TO_ADDR
37793: LD_INT 5
37795: PUSH
37796: FOR_TO
37797: IFFALSE 37911
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37799: LD_ADDR_VAR 0 11
37803: PUSH
37804: LD_VAR 0 13
37808: PPUSH
37809: CALL_OW 250
37813: PPUSH
37814: LD_VAR 0 10
37818: PPUSH
37819: LD_INT 2
37821: PPUSH
37822: CALL_OW 272
37826: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37827: LD_ADDR_VAR 0 12
37831: PUSH
37832: LD_VAR 0 13
37836: PPUSH
37837: CALL_OW 251
37841: PPUSH
37842: LD_VAR 0 10
37846: PPUSH
37847: LD_INT 2
37849: PPUSH
37850: CALL_OW 273
37854: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37855: LD_VAR 0 11
37859: PPUSH
37860: LD_VAR 0 12
37864: PPUSH
37865: CALL_OW 488
37869: PUSH
37870: LD_VAR 0 11
37874: PPUSH
37875: LD_VAR 0 12
37879: PPUSH
37880: CALL_OW 428
37884: NOT
37885: AND
37886: IFFALSE 37909
// begin ComMoveXY ( tmp , _x , _y ) ;
37888: LD_VAR 0 13
37892: PPUSH
37893: LD_VAR 0 11
37897: PPUSH
37898: LD_VAR 0 12
37902: PPUSH
37903: CALL_OW 111
// break ;
37907: GO 37911
// end ; end ;
37909: GO 37796
37911: POP
37912: POP
// end ; end ;
37913: GO 37238
37915: POP
37916: POP
// end ;
37917: LD_VAR 0 8
37921: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37922: LD_INT 0
37924: PPUSH
// result := true ;
37925: LD_ADDR_VAR 0 3
37929: PUSH
37930: LD_INT 1
37932: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37933: LD_VAR 0 2
37937: PUSH
37938: LD_INT 24
37940: DOUBLE
37941: EQUAL
37942: IFTRUE 37952
37944: LD_INT 33
37946: DOUBLE
37947: EQUAL
37948: IFTRUE 37952
37950: GO 37977
37952: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_INT 32
37960: PPUSH
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 321
37970: PUSH
37971: LD_INT 2
37973: EQUAL
37974: ST_TO_ADDR
37975: GO 38293
37977: LD_INT 20
37979: DOUBLE
37980: EQUAL
37981: IFTRUE 37985
37983: GO 38010
37985: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_INT 6
37993: PPUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 321
38003: PUSH
38004: LD_INT 2
38006: EQUAL
38007: ST_TO_ADDR
38008: GO 38293
38010: LD_INT 22
38012: DOUBLE
38013: EQUAL
38014: IFTRUE 38024
38016: LD_INT 36
38018: DOUBLE
38019: EQUAL
38020: IFTRUE 38024
38022: GO 38049
38024: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38025: LD_ADDR_VAR 0 3
38029: PUSH
38030: LD_INT 15
38032: PPUSH
38033: LD_VAR 0 1
38037: PPUSH
38038: CALL_OW 321
38042: PUSH
38043: LD_INT 2
38045: EQUAL
38046: ST_TO_ADDR
38047: GO 38293
38049: LD_INT 30
38051: DOUBLE
38052: EQUAL
38053: IFTRUE 38057
38055: GO 38082
38057: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_INT 20
38065: PPUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 321
38075: PUSH
38076: LD_INT 2
38078: EQUAL
38079: ST_TO_ADDR
38080: GO 38293
38082: LD_INT 28
38084: DOUBLE
38085: EQUAL
38086: IFTRUE 38096
38088: LD_INT 21
38090: DOUBLE
38091: EQUAL
38092: IFTRUE 38096
38094: GO 38121
38096: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_INT 21
38104: PPUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 321
38114: PUSH
38115: LD_INT 2
38117: EQUAL
38118: ST_TO_ADDR
38119: GO 38293
38121: LD_INT 16
38123: DOUBLE
38124: EQUAL
38125: IFTRUE 38129
38127: GO 38154
38129: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38130: LD_ADDR_VAR 0 3
38134: PUSH
38135: LD_INT 84
38137: PPUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: CALL_OW 321
38147: PUSH
38148: LD_INT 2
38150: EQUAL
38151: ST_TO_ADDR
38152: GO 38293
38154: LD_INT 19
38156: DOUBLE
38157: EQUAL
38158: IFTRUE 38168
38160: LD_INT 23
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38168
38166: GO 38193
38168: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38169: LD_ADDR_VAR 0 3
38173: PUSH
38174: LD_INT 83
38176: PPUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 321
38186: PUSH
38187: LD_INT 2
38189: EQUAL
38190: ST_TO_ADDR
38191: GO 38293
38193: LD_INT 17
38195: DOUBLE
38196: EQUAL
38197: IFTRUE 38201
38199: GO 38226
38201: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38202: LD_ADDR_VAR 0 3
38206: PUSH
38207: LD_INT 39
38209: PPUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 321
38219: PUSH
38220: LD_INT 2
38222: EQUAL
38223: ST_TO_ADDR
38224: GO 38293
38226: LD_INT 18
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38259
38234: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 40
38242: PPUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 321
38252: PUSH
38253: LD_INT 2
38255: EQUAL
38256: ST_TO_ADDR
38257: GO 38293
38259: LD_INT 27
38261: DOUBLE
38262: EQUAL
38263: IFTRUE 38267
38265: GO 38292
38267: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38268: LD_ADDR_VAR 0 3
38272: PUSH
38273: LD_INT 35
38275: PPUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 321
38285: PUSH
38286: LD_INT 2
38288: EQUAL
38289: ST_TO_ADDR
38290: GO 38293
38292: POP
// end ;
38293: LD_VAR 0 3
38297: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38298: LD_INT 0
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
// result := false ;
38311: LD_ADDR_VAR 0 6
38315: PUSH
38316: LD_INT 0
38318: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38319: LD_VAR 0 1
38323: NOT
38324: PUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL_OW 266
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: IN
38345: NOT
38346: OR
38347: PUSH
38348: LD_VAR 0 2
38352: NOT
38353: OR
38354: PUSH
38355: LD_VAR 0 5
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: LD_INT 4
38374: PUSH
38375: LD_INT 5
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: IN
38386: NOT
38387: OR
38388: PUSH
38389: LD_VAR 0 3
38393: PPUSH
38394: LD_VAR 0 4
38398: PPUSH
38399: CALL_OW 488
38403: NOT
38404: OR
38405: IFFALSE 38409
// exit ;
38407: GO 39145
// side := GetSide ( depot ) ;
38409: LD_ADDR_VAR 0 9
38413: PUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 255
38423: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38424: LD_VAR 0 9
38428: PPUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: CALL 37922 0 2
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 39145
// pom := GetBase ( depot ) ;
38443: LD_ADDR_VAR 0 10
38447: PUSH
38448: LD_VAR 0 1
38452: PPUSH
38453: CALL_OW 274
38457: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38458: LD_ADDR_VAR 0 11
38462: PUSH
38463: LD_VAR 0 2
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 248
38477: PPUSH
38478: CALL_OW 450
38482: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38483: LD_VAR 0 10
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL_OW 275
38495: PUSH
38496: LD_VAR 0 11
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: GREATEREQUAL
38505: PUSH
38506: LD_VAR 0 10
38510: PPUSH
38511: LD_INT 2
38513: PPUSH
38514: CALL_OW 275
38518: PUSH
38519: LD_VAR 0 11
38523: PUSH
38524: LD_INT 2
38526: ARRAY
38527: GREATEREQUAL
38528: AND
38529: PUSH
38530: LD_VAR 0 10
38534: PPUSH
38535: LD_INT 3
38537: PPUSH
38538: CALL_OW 275
38542: PUSH
38543: LD_VAR 0 11
38547: PUSH
38548: LD_INT 3
38550: ARRAY
38551: GREATEREQUAL
38552: AND
38553: NOT
38554: IFFALSE 38558
// exit ;
38556: GO 39145
// if GetBType ( depot ) = b_depot then
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 266
38567: PUSH
38568: LD_INT 0
38570: EQUAL
38571: IFFALSE 38583
// dist := 28 else
38573: LD_ADDR_VAR 0 14
38577: PUSH
38578: LD_INT 28
38580: ST_TO_ADDR
38581: GO 38591
// dist := 36 ;
38583: LD_ADDR_VAR 0 14
38587: PUSH
38588: LD_INT 36
38590: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38591: LD_VAR 0 1
38595: PPUSH
38596: LD_VAR 0 3
38600: PPUSH
38601: LD_VAR 0 4
38605: PPUSH
38606: CALL_OW 297
38610: PUSH
38611: LD_VAR 0 14
38615: GREATER
38616: IFFALSE 38620
// exit ;
38618: GO 39145
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38620: LD_ADDR_VAR 0 12
38624: PUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: LD_VAR 0 3
38634: PPUSH
38635: LD_VAR 0 4
38639: PPUSH
38640: LD_VAR 0 5
38644: PPUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 248
38654: PPUSH
38655: LD_INT 0
38657: PPUSH
38658: CALL 39150 0 6
38662: ST_TO_ADDR
// if not hexes then
38663: LD_VAR 0 12
38667: NOT
38668: IFFALSE 38672
// exit ;
38670: GO 39145
// hex := GetHexInfo ( x , y ) ;
38672: LD_ADDR_VAR 0 15
38676: PUSH
38677: LD_VAR 0 3
38681: PPUSH
38682: LD_VAR 0 4
38686: PPUSH
38687: CALL_OW 546
38691: ST_TO_ADDR
// if hex [ 1 ] then
38692: LD_VAR 0 15
38696: PUSH
38697: LD_INT 1
38699: ARRAY
38700: IFFALSE 38704
// exit ;
38702: GO 39145
// height := hex [ 2 ] ;
38704: LD_ADDR_VAR 0 13
38708: PUSH
38709: LD_VAR 0 15
38713: PUSH
38714: LD_INT 2
38716: ARRAY
38717: ST_TO_ADDR
// for i = 1 to hexes do
38718: LD_ADDR_VAR 0 7
38722: PUSH
38723: DOUBLE
38724: LD_INT 1
38726: DEC
38727: ST_TO_ADDR
38728: LD_VAR 0 12
38732: PUSH
38733: FOR_TO
38734: IFFALSE 39064
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38736: LD_VAR 0 12
38740: PUSH
38741: LD_VAR 0 7
38745: ARRAY
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 12
38755: PUSH
38756: LD_VAR 0 7
38760: ARRAY
38761: PUSH
38762: LD_INT 2
38764: ARRAY
38765: PPUSH
38766: CALL_OW 488
38770: NOT
38771: PUSH
38772: LD_VAR 0 12
38776: PUSH
38777: LD_VAR 0 7
38781: ARRAY
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: PPUSH
38787: LD_VAR 0 12
38791: PUSH
38792: LD_VAR 0 7
38796: ARRAY
38797: PUSH
38798: LD_INT 2
38800: ARRAY
38801: PPUSH
38802: CALL_OW 428
38806: PUSH
38807: LD_INT 0
38809: GREATER
38810: OR
38811: PUSH
38812: LD_VAR 0 12
38816: PUSH
38817: LD_VAR 0 7
38821: ARRAY
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 12
38831: PUSH
38832: LD_VAR 0 7
38836: ARRAY
38837: PUSH
38838: LD_INT 2
38840: ARRAY
38841: PPUSH
38842: CALL_OW 351
38846: OR
38847: IFFALSE 38853
// exit ;
38849: POP
38850: POP
38851: GO 39145
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38853: LD_ADDR_VAR 0 8
38857: PUSH
38858: LD_VAR 0 12
38862: PUSH
38863: LD_VAR 0 7
38867: ARRAY
38868: PUSH
38869: LD_INT 1
38871: ARRAY
38872: PPUSH
38873: LD_VAR 0 12
38877: PUSH
38878: LD_VAR 0 7
38882: ARRAY
38883: PUSH
38884: LD_INT 2
38886: ARRAY
38887: PPUSH
38888: CALL_OW 546
38892: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38893: LD_VAR 0 8
38897: PUSH
38898: LD_INT 1
38900: ARRAY
38901: PUSH
38902: LD_VAR 0 8
38906: PUSH
38907: LD_INT 2
38909: ARRAY
38910: PUSH
38911: LD_VAR 0 13
38915: PUSH
38916: LD_INT 2
38918: PLUS
38919: GREATER
38920: OR
38921: PUSH
38922: LD_VAR 0 8
38926: PUSH
38927: LD_INT 2
38929: ARRAY
38930: PUSH
38931: LD_VAR 0 13
38935: PUSH
38936: LD_INT 2
38938: MINUS
38939: LESS
38940: OR
38941: PUSH
38942: LD_VAR 0 8
38946: PUSH
38947: LD_INT 3
38949: ARRAY
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 8
38956: PUSH
38957: LD_INT 9
38959: PUSH
38960: LD_INT 10
38962: PUSH
38963: LD_INT 11
38965: PUSH
38966: LD_INT 12
38968: PUSH
38969: LD_INT 13
38971: PUSH
38972: LD_INT 16
38974: PUSH
38975: LD_INT 17
38977: PUSH
38978: LD_INT 18
38980: PUSH
38981: LD_INT 19
38983: PUSH
38984: LD_INT 20
38986: PUSH
38987: LD_INT 21
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: IN
39005: NOT
39006: OR
39007: PUSH
39008: LD_VAR 0 8
39012: PUSH
39013: LD_INT 5
39015: ARRAY
39016: NOT
39017: OR
39018: PUSH
39019: LD_VAR 0 8
39023: PUSH
39024: LD_INT 6
39026: ARRAY
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: LD_INT 7
39036: PUSH
39037: LD_INT 9
39039: PUSH
39040: LD_INT 10
39042: PUSH
39043: LD_INT 11
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: IN
39054: NOT
39055: OR
39056: IFFALSE 39062
// exit ;
39058: POP
39059: POP
39060: GO 39145
// end ;
39062: GO 38733
39064: POP
39065: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39066: LD_VAR 0 9
39070: PPUSH
39071: LD_VAR 0 3
39075: PPUSH
39076: LD_VAR 0 4
39080: PPUSH
39081: LD_INT 20
39083: PPUSH
39084: CALL 31097 0 4
39088: PUSH
39089: LD_INT 4
39091: ARRAY
39092: IFFALSE 39096
// exit ;
39094: GO 39145
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39096: LD_VAR 0 2
39100: PUSH
39101: LD_INT 29
39103: PUSH
39104: LD_INT 30
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: IN
39111: PUSH
39112: LD_VAR 0 3
39116: PPUSH
39117: LD_VAR 0 4
39121: PPUSH
39122: LD_VAR 0 9
39126: PPUSH
39127: CALL_OW 440
39131: NOT
39132: AND
39133: IFFALSE 39137
// exit ;
39135: GO 39145
// result := true ;
39137: LD_ADDR_VAR 0 6
39141: PUSH
39142: LD_INT 1
39144: ST_TO_ADDR
// end ;
39145: LD_VAR 0 6
39149: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
// result = [ ] ;
39210: LD_ADDR_VAR 0 7
39214: PUSH
39215: EMPTY
39216: ST_TO_ADDR
// temp_list = [ ] ;
39217: LD_ADDR_VAR 0 9
39221: PUSH
39222: EMPTY
39223: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39224: LD_VAR 0 4
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: LD_INT 5
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: IN
39255: NOT
39256: PUSH
39257: LD_VAR 0 1
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: IN
39272: PUSH
39273: LD_VAR 0 5
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: IN
39292: NOT
39293: AND
39294: OR
39295: IFFALSE 39299
// exit ;
39297: GO 57690
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39299: LD_VAR 0 1
39303: PUSH
39304: LD_INT 6
39306: PUSH
39307: LD_INT 7
39309: PUSH
39310: LD_INT 8
39312: PUSH
39313: LD_INT 13
39315: PUSH
39316: LD_INT 12
39318: PUSH
39319: LD_INT 15
39321: PUSH
39322: LD_INT 11
39324: PUSH
39325: LD_INT 14
39327: PUSH
39328: LD_INT 10
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: IN
39342: IFFALSE 39352
// btype = b_lab ;
39344: LD_ADDR_VAR 0 1
39348: PUSH
39349: LD_INT 6
39351: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39352: LD_VAR 0 6
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: IN
39371: NOT
39372: PUSH
39373: LD_VAR 0 1
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: LD_INT 6
39392: PUSH
39393: LD_INT 36
39395: PUSH
39396: LD_INT 4
39398: PUSH
39399: LD_INT 5
39401: PUSH
39402: LD_INT 31
39404: PUSH
39405: LD_INT 32
39407: PUSH
39408: LD_INT 33
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: IN
39424: NOT
39425: PUSH
39426: LD_VAR 0 6
39430: PUSH
39431: LD_INT 1
39433: EQUAL
39434: AND
39435: OR
39436: PUSH
39437: LD_VAR 0 1
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: IN
39452: NOT
39453: PUSH
39454: LD_VAR 0 6
39458: PUSH
39459: LD_INT 2
39461: EQUAL
39462: AND
39463: OR
39464: IFFALSE 39474
// mode = 0 ;
39466: LD_ADDR_VAR 0 6
39470: PUSH
39471: LD_INT 0
39473: ST_TO_ADDR
// case mode of 0 :
39474: LD_VAR 0 6
39478: PUSH
39479: LD_INT 0
39481: DOUBLE
39482: EQUAL
39483: IFTRUE 39487
39485: GO 50940
39487: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39488: LD_ADDR_VAR 0 11
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39681: LD_ADDR_VAR 0 12
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39877: LD_ADDR_VAR 0 13
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 3
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 3
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40076: LD_ADDR_VAR 0 14
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 3
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 3
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40272: LD_ADDR_VAR 0 15
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40465: LD_ADDR_VAR 0 16
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 3
40622: PUSH
40623: LD_INT 3
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40658: LD_ADDR_VAR 0 17
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40888: LD_ADDR_VAR 0 18
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41118: LD_ADDR_VAR 0 19
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41348: LD_ADDR_VAR 0 20
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41578: LD_ADDR_VAR 0 21
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41808: LD_ADDR_VAR 0 22
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42038: LD_ADDR_VAR 0 23
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42318: LD_ADDR_VAR 0 24
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42594: LD_ADDR_VAR 0 25
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 3
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42868: LD_ADDR_VAR 0 26
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43144: LD_ADDR_VAR 0 27
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43424: LD_ADDR_VAR 0 28
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43706: LD_ADDR_VAR 0 29
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43985: LD_ADDR_VAR 0 30
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44263: LD_ADDR_VAR 0 31
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44541: LD_ADDR_VAR 0 32
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44819: LD_ADDR_VAR 0 33
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 3
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45098: LD_ADDR_VAR 0 34
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45378: LD_ADDR_VAR 0 35
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45490: LD_ADDR_VAR 0 36
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45602: LD_ADDR_VAR 0 37
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45714: LD_ADDR_VAR 0 38
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45826: LD_ADDR_VAR 0 39
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45938: LD_ADDR_VAR 0 40
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46050: LD_ADDR_VAR 0 41
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: LD_INT 3
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46400: LD_ADDR_VAR 0 42
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46750: LD_ADDR_VAR 0 43
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47098: LD_ADDR_VAR 0 44
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: LD_INT 3
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47448: LD_ADDR_VAR 0 45
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 3
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 3
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47798: LD_ADDR_VAR 0 46
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48146: LD_ADDR_VAR 0 47
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48297: LD_ADDR_VAR 0 48
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48444: LD_ADDR_VAR 0 49
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48588: LD_ADDR_VAR 0 50
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48732: LD_ADDR_VAR 0 51
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48879: LD_ADDR_VAR 0 52
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49030: LD_ADDR_VAR 0 53
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49260: LD_ADDR_VAR 0 54
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49490: LD_ADDR_VAR 0 55
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49720: LD_ADDR_VAR 0 56
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49950: LD_ADDR_VAR 0 57
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50180: LD_ADDR_VAR 0 58
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50410: LD_ADDR_VAR 0 59
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50498: LD_ADDR_VAR 0 60
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50586: LD_ADDR_VAR 0 61
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50674: LD_ADDR_VAR 0 62
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50762: LD_ADDR_VAR 0 63
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50850: LD_ADDR_VAR 0 64
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// end ; 1 :
50938: GO 56835
50940: LD_INT 1
50942: DOUBLE
50943: EQUAL
50944: IFTRUE 50948
50946: GO 53571
50948: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50949: LD_ADDR_VAR 0 11
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50993: LD_ADDR_VAR 0 12
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51034: LD_ADDR_VAR 0 13
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51074: LD_ADDR_VAR 0 14
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51115: LD_ADDR_VAR 0 15
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51159: LD_ADDR_VAR 0 16
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51205: LD_ADDR_VAR 0 17
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51249: LD_ADDR_VAR 0 18
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51290: LD_ADDR_VAR 0 19
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51330: LD_ADDR_VAR 0 20
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51371: LD_ADDR_VAR 0 21
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51415: LD_ADDR_VAR 0 22
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51461: LD_ADDR_VAR 0 23
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 4
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51505: LD_ADDR_VAR 0 24
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51546: LD_ADDR_VAR 0 25
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51586: LD_ADDR_VAR 0 26
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51627: LD_ADDR_VAR 0 27
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 4
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51671: LD_ADDR_VAR 0 28
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: LD_INT 4
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51717: LD_ADDR_VAR 0 29
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 4
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 5
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 5
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 4
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 6
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 6
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 5
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51872: LD_ADDR_VAR 0 30
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 4
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 5
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 5
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 5
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 6
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 6
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52015: LD_ADDR_VAR 0 31
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 4
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 4
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: LD_INT 4
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 5
52092: PUSH
52093: LD_INT 5
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: PUSH
52103: LD_INT 5
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 6
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 6
52122: PUSH
52123: LD_INT 6
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 5
52132: PUSH
52133: LD_INT 6
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52154: LD_ADDR_VAR 0 32
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 4
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 5
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 5
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 6
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 6
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 5
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52297: LD_ADDR_VAR 0 33
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 3
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 4
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 5
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 5
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 5
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 6
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 6
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52452: LD_ADDR_VAR 0 34
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 3
52495: NEG
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 4
52507: NEG
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 4
52519: NEG
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 4
52531: NEG
52532: PUSH
52533: LD_INT 5
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 5
52543: NEG
52544: PUSH
52545: LD_INT 4
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 5
52555: NEG
52556: PUSH
52557: LD_INT 5
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 5
52567: NEG
52568: PUSH
52569: LD_INT 6
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 6
52579: NEG
52580: PUSH
52581: LD_INT 5
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 6
52591: NEG
52592: PUSH
52593: LD_INT 6
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52615: LD_ADDR_VAR 0 41
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52659: LD_ADDR_VAR 0 42
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52700: LD_ADDR_VAR 0 43
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52740: LD_ADDR_VAR 0 44
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52781: LD_ADDR_VAR 0 45
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52825: LD_ADDR_VAR 0 46
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52871: LD_ADDR_VAR 0 47
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52904: LD_ADDR_VAR 0 48
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52935: LD_ADDR_VAR 0 49
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52964: LD_ADDR_VAR 0 50
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52993: LD_ADDR_VAR 0 51
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53024: LD_ADDR_VAR 0 52
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53057: LD_ADDR_VAR 0 53
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53101: LD_ADDR_VAR 0 54
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53142: LD_ADDR_VAR 0 55
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53182: LD_ADDR_VAR 0 56
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53223: LD_ADDR_VAR 0 57
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53267: LD_ADDR_VAR 0 58
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53313: LD_ADDR_VAR 0 59
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53357: LD_ADDR_VAR 0 60
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53398: LD_ADDR_VAR 0 61
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53438: LD_ADDR_VAR 0 62
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53479: LD_ADDR_VAR 0 63
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53523: LD_ADDR_VAR 0 64
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// end ; 2 :
53569: GO 56835
53571: LD_INT 2
53573: DOUBLE
53574: EQUAL
53575: IFTRUE 53579
53577: GO 56834
53579: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53580: LD_ADDR_VAR 0 29
53584: PUSH
53585: LD_INT 4
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 4
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 5
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 4
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 5
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 4
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 4
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 4
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 4
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 4
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 5
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 5
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 4
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 4
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 4
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 4
53965: NEG
53966: PUSH
53967: LD_INT 4
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: LD_INT 5
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: LD_INT 4
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: NEG
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 5
54025: NEG
54026: PUSH
54027: LD_INT 4
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 5
54037: NEG
54038: PUSH
54039: LD_INT 5
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: LD_INT 5
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 5
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54118: LD_ADDR_VAR 0 30
54122: PUSH
54123: LD_INT 4
54125: PUSH
54126: LD_INT 4
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 5
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: LD_INT 5
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: LD_INT 5
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: LD_INT 4
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 5
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 5
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 4
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 4
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 4
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 5
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 5
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 5
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: LD_INT 4
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 4
54482: NEG
54483: PUSH
54484: LD_INT 4
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: LD_INT 4
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 4
54506: NEG
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 4
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 5
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 4
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 4
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 5
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 5
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54665: LD_ADDR_VAR 0 31
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 4
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 5
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 5
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 4
54867: NEG
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: LD_INT 5
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 4
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 4
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 5
54939: NEG
54940: PUSH
54941: LD_INT 5
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: LD_INT 5
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 5
54963: NEG
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 4
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 3
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 4
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 4
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 5
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 3
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 5
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55215: LD_ADDR_VAR 0 32
55219: PUSH
55220: LD_INT 4
55222: NEG
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 4
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 4
55267: NEG
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 5
55278: NEG
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 5
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 5
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 4
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: NEG
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 4
55396: NEG
55397: PUSH
55398: LD_INT 4
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 4
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 5
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 4
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 4
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 5
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 5
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 4
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 4
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 4
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: LD_INT 5
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: LD_INT 5
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 4
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: LD_INT 5
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55762: LD_ADDR_VAR 0 33
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: LD_INT 4
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: LD_INT 5
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 4
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 3
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 5
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 5
55841: NEG
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: LD_INT 5
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 4
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 4
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 5
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 5
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: LD_INT 4
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: LD_INT 4
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 4
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 4
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 4
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 5
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56300: LD_ADDR_VAR 0 34
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 4
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 5
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 4
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 5
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 5
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 4
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 4
56502: PUSH
56503: LD_INT 4
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: LD_INT 4
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 5
56532: PUSH
56533: LD_INT 5
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 4
56542: PUSH
56543: LD_INT 5
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 5
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 4
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 5
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 5
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 5
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// end ; end ;
56832: GO 56835
56834: POP
// case btype of b_depot , b_warehouse :
56835: LD_VAR 0 1
56839: PUSH
56840: LD_INT 0
56842: DOUBLE
56843: EQUAL
56844: IFTRUE 56854
56846: LD_INT 1
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56854
56852: GO 57055
56854: POP
// case nation of nation_american :
56855: LD_VAR 0 5
56859: PUSH
56860: LD_INT 1
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56868
56866: GO 56924
56868: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56869: LD_ADDR_VAR 0 9
56873: PUSH
56874: LD_VAR 0 11
56878: PUSH
56879: LD_VAR 0 12
56883: PUSH
56884: LD_VAR 0 13
56888: PUSH
56889: LD_VAR 0 14
56893: PUSH
56894: LD_VAR 0 15
56898: PUSH
56899: LD_VAR 0 16
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 4
56916: PUSH
56917: LD_INT 1
56919: PLUS
56920: ARRAY
56921: ST_TO_ADDR
56922: GO 57053
56924: LD_INT 2
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56932
56930: GO 56988
56932: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56933: LD_ADDR_VAR 0 9
56937: PUSH
56938: LD_VAR 0 17
56942: PUSH
56943: LD_VAR 0 18
56947: PUSH
56948: LD_VAR 0 19
56952: PUSH
56953: LD_VAR 0 20
56957: PUSH
56958: LD_VAR 0 21
56962: PUSH
56963: LD_VAR 0 22
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: PUSH
56976: LD_VAR 0 4
56980: PUSH
56981: LD_INT 1
56983: PLUS
56984: ARRAY
56985: ST_TO_ADDR
56986: GO 57053
56988: LD_INT 3
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 56996
56994: GO 57052
56996: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56997: LD_ADDR_VAR 0 9
57001: PUSH
57002: LD_VAR 0 23
57006: PUSH
57007: LD_VAR 0 24
57011: PUSH
57012: LD_VAR 0 25
57016: PUSH
57017: LD_VAR 0 26
57021: PUSH
57022: LD_VAR 0 27
57026: PUSH
57027: LD_VAR 0 28
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: PUSH
57040: LD_VAR 0 4
57044: PUSH
57045: LD_INT 1
57047: PLUS
57048: ARRAY
57049: ST_TO_ADDR
57050: GO 57053
57052: POP
57053: GO 57608
57055: LD_INT 2
57057: DOUBLE
57058: EQUAL
57059: IFTRUE 57069
57061: LD_INT 3
57063: DOUBLE
57064: EQUAL
57065: IFTRUE 57069
57067: GO 57125
57069: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57070: LD_ADDR_VAR 0 9
57074: PUSH
57075: LD_VAR 0 29
57079: PUSH
57080: LD_VAR 0 30
57084: PUSH
57085: LD_VAR 0 31
57089: PUSH
57090: LD_VAR 0 32
57094: PUSH
57095: LD_VAR 0 33
57099: PUSH
57100: LD_VAR 0 34
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: PUSH
57113: LD_VAR 0 4
57117: PUSH
57118: LD_INT 1
57120: PLUS
57121: ARRAY
57122: ST_TO_ADDR
57123: GO 57608
57125: LD_INT 16
57127: DOUBLE
57128: EQUAL
57129: IFTRUE 57187
57131: LD_INT 17
57133: DOUBLE
57134: EQUAL
57135: IFTRUE 57187
57137: LD_INT 18
57139: DOUBLE
57140: EQUAL
57141: IFTRUE 57187
57143: LD_INT 19
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57187
57149: LD_INT 22
57151: DOUBLE
57152: EQUAL
57153: IFTRUE 57187
57155: LD_INT 20
57157: DOUBLE
57158: EQUAL
57159: IFTRUE 57187
57161: LD_INT 21
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57187
57167: LD_INT 23
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57187
57173: LD_INT 24
57175: DOUBLE
57176: EQUAL
57177: IFTRUE 57187
57179: LD_INT 25
57181: DOUBLE
57182: EQUAL
57183: IFTRUE 57187
57185: GO 57243
57187: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57188: LD_ADDR_VAR 0 9
57192: PUSH
57193: LD_VAR 0 35
57197: PUSH
57198: LD_VAR 0 36
57202: PUSH
57203: LD_VAR 0 37
57207: PUSH
57208: LD_VAR 0 38
57212: PUSH
57213: LD_VAR 0 39
57217: PUSH
57218: LD_VAR 0 40
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: PUSH
57231: LD_VAR 0 4
57235: PUSH
57236: LD_INT 1
57238: PLUS
57239: ARRAY
57240: ST_TO_ADDR
57241: GO 57608
57243: LD_INT 6
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57299
57249: LD_INT 7
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57299
57255: LD_INT 8
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57299
57261: LD_INT 13
57263: DOUBLE
57264: EQUAL
57265: IFTRUE 57299
57267: LD_INT 12
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57299
57273: LD_INT 15
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57299
57279: LD_INT 11
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57299
57285: LD_INT 14
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57299
57291: LD_INT 10
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57299
57297: GO 57355
57299: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57300: LD_ADDR_VAR 0 9
57304: PUSH
57305: LD_VAR 0 41
57309: PUSH
57310: LD_VAR 0 42
57314: PUSH
57315: LD_VAR 0 43
57319: PUSH
57320: LD_VAR 0 44
57324: PUSH
57325: LD_VAR 0 45
57329: PUSH
57330: LD_VAR 0 46
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: PUSH
57343: LD_VAR 0 4
57347: PUSH
57348: LD_INT 1
57350: PLUS
57351: ARRAY
57352: ST_TO_ADDR
57353: GO 57608
57355: LD_INT 36
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57363
57361: GO 57419
57363: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57364: LD_ADDR_VAR 0 9
57368: PUSH
57369: LD_VAR 0 47
57373: PUSH
57374: LD_VAR 0 48
57378: PUSH
57379: LD_VAR 0 49
57383: PUSH
57384: LD_VAR 0 50
57388: PUSH
57389: LD_VAR 0 51
57393: PUSH
57394: LD_VAR 0 52
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: PUSH
57407: LD_VAR 0 4
57411: PUSH
57412: LD_INT 1
57414: PLUS
57415: ARRAY
57416: ST_TO_ADDR
57417: GO 57608
57419: LD_INT 4
57421: DOUBLE
57422: EQUAL
57423: IFTRUE 57445
57425: LD_INT 5
57427: DOUBLE
57428: EQUAL
57429: IFTRUE 57445
57431: LD_INT 34
57433: DOUBLE
57434: EQUAL
57435: IFTRUE 57445
57437: LD_INT 37
57439: DOUBLE
57440: EQUAL
57441: IFTRUE 57445
57443: GO 57501
57445: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57446: LD_ADDR_VAR 0 9
57450: PUSH
57451: LD_VAR 0 53
57455: PUSH
57456: LD_VAR 0 54
57460: PUSH
57461: LD_VAR 0 55
57465: PUSH
57466: LD_VAR 0 56
57470: PUSH
57471: LD_VAR 0 57
57475: PUSH
57476: LD_VAR 0 58
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: PUSH
57489: LD_VAR 0 4
57493: PUSH
57494: LD_INT 1
57496: PLUS
57497: ARRAY
57498: ST_TO_ADDR
57499: GO 57608
57501: LD_INT 31
57503: DOUBLE
57504: EQUAL
57505: IFTRUE 57551
57507: LD_INT 32
57509: DOUBLE
57510: EQUAL
57511: IFTRUE 57551
57513: LD_INT 33
57515: DOUBLE
57516: EQUAL
57517: IFTRUE 57551
57519: LD_INT 27
57521: DOUBLE
57522: EQUAL
57523: IFTRUE 57551
57525: LD_INT 26
57527: DOUBLE
57528: EQUAL
57529: IFTRUE 57551
57531: LD_INT 28
57533: DOUBLE
57534: EQUAL
57535: IFTRUE 57551
57537: LD_INT 29
57539: DOUBLE
57540: EQUAL
57541: IFTRUE 57551
57543: LD_INT 30
57545: DOUBLE
57546: EQUAL
57547: IFTRUE 57551
57549: GO 57607
57551: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57552: LD_ADDR_VAR 0 9
57556: PUSH
57557: LD_VAR 0 59
57561: PUSH
57562: LD_VAR 0 60
57566: PUSH
57567: LD_VAR 0 61
57571: PUSH
57572: LD_VAR 0 62
57576: PUSH
57577: LD_VAR 0 63
57581: PUSH
57582: LD_VAR 0 64
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: PUSH
57595: LD_VAR 0 4
57599: PUSH
57600: LD_INT 1
57602: PLUS
57603: ARRAY
57604: ST_TO_ADDR
57605: GO 57608
57607: POP
// temp_list2 = [ ] ;
57608: LD_ADDR_VAR 0 10
57612: PUSH
57613: EMPTY
57614: ST_TO_ADDR
// for i in temp_list do
57615: LD_ADDR_VAR 0 8
57619: PUSH
57620: LD_VAR 0 9
57624: PUSH
57625: FOR_IN
57626: IFFALSE 57678
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57628: LD_ADDR_VAR 0 10
57632: PUSH
57633: LD_VAR 0 10
57637: PUSH
57638: LD_VAR 0 8
57642: PUSH
57643: LD_INT 1
57645: ARRAY
57646: PUSH
57647: LD_VAR 0 2
57651: PLUS
57652: PUSH
57653: LD_VAR 0 8
57657: PUSH
57658: LD_INT 2
57660: ARRAY
57661: PUSH
57662: LD_VAR 0 3
57666: PLUS
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: ADD
57675: ST_TO_ADDR
57676: GO 57625
57678: POP
57679: POP
// result = temp_list2 ;
57680: LD_ADDR_VAR 0 7
57684: PUSH
57685: LD_VAR 0 10
57689: ST_TO_ADDR
// end ;
57690: LD_VAR 0 7
57694: RET
// export function EnemyInRange ( unit , dist ) ; begin
57695: LD_INT 0
57697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57698: LD_ADDR_VAR 0 3
57702: PUSH
57703: LD_VAR 0 1
57707: PPUSH
57708: CALL_OW 255
57712: PPUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 250
57722: PPUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 251
57732: PPUSH
57733: LD_VAR 0 2
57737: PPUSH
57738: CALL 31097 0 4
57742: PUSH
57743: LD_INT 4
57745: ARRAY
57746: ST_TO_ADDR
// end ;
57747: LD_VAR 0 3
57751: RET
// export function PlayerSeeMe ( unit ) ; begin
57752: LD_INT 0
57754: PPUSH
// result := See ( your_side , unit ) ;
57755: LD_ADDR_VAR 0 2
57759: PUSH
57760: LD_OWVAR 2
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 292
57774: ST_TO_ADDR
// end ;
57775: LD_VAR 0 2
57779: RET
// export function ReverseDir ( unit ) ; begin
57780: LD_INT 0
57782: PPUSH
// if not unit then
57783: LD_VAR 0 1
57787: NOT
57788: IFFALSE 57792
// exit ;
57790: GO 57815
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57792: LD_ADDR_VAR 0 2
57796: PUSH
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 254
57806: PUSH
57807: LD_INT 3
57809: PLUS
57810: PUSH
57811: LD_INT 6
57813: MOD
57814: ST_TO_ADDR
// end ;
57815: LD_VAR 0 2
57819: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57820: LD_INT 0
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
// if not unit or not hexes then
57828: LD_VAR 0 1
57832: NOT
57833: PUSH
57834: LD_VAR 0 2
57838: NOT
57839: OR
57840: IFFALSE 57844
// exit ;
57842: GO 57967
// dist := 9999 ;
57844: LD_ADDR_VAR 0 5
57848: PUSH
57849: LD_INT 9999
57851: ST_TO_ADDR
// for i = 1 to hexes do
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: DOUBLE
57858: LD_INT 1
57860: DEC
57861: ST_TO_ADDR
57862: LD_VAR 0 2
57866: PUSH
57867: FOR_TO
57868: IFFALSE 57955
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57870: LD_ADDR_VAR 0 6
57874: PUSH
57875: LD_VAR 0 1
57879: PPUSH
57880: LD_VAR 0 2
57884: PUSH
57885: LD_VAR 0 4
57889: ARRAY
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PPUSH
57895: LD_VAR 0 2
57899: PUSH
57900: LD_VAR 0 4
57904: ARRAY
57905: PUSH
57906: LD_INT 2
57908: ARRAY
57909: PPUSH
57910: CALL_OW 297
57914: ST_TO_ADDR
// if tdist < dist then
57915: LD_VAR 0 6
57919: PUSH
57920: LD_VAR 0 5
57924: LESS
57925: IFFALSE 57953
// begin hex := hexes [ i ] ;
57927: LD_ADDR_VAR 0 8
57931: PUSH
57932: LD_VAR 0 2
57936: PUSH
57937: LD_VAR 0 4
57941: ARRAY
57942: ST_TO_ADDR
// dist := tdist ;
57943: LD_ADDR_VAR 0 5
57947: PUSH
57948: LD_VAR 0 6
57952: ST_TO_ADDR
// end ; end ;
57953: GO 57867
57955: POP
57956: POP
// result := hex ;
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: LD_VAR 0 8
57966: ST_TO_ADDR
// end ;
57967: LD_VAR 0 3
57971: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57972: LD_INT 0
57974: PPUSH
57975: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57976: LD_VAR 0 1
57980: NOT
57981: PUSH
57982: LD_VAR 0 1
57986: PUSH
57987: LD_INT 21
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 23
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PPUSH
58011: CALL_OW 69
58015: IN
58016: NOT
58017: OR
58018: IFFALSE 58022
// exit ;
58020: GO 58069
// for i = 1 to 3 do
58022: LD_ADDR_VAR 0 3
58026: PUSH
58027: DOUBLE
58028: LD_INT 1
58030: DEC
58031: ST_TO_ADDR
58032: LD_INT 3
58034: PUSH
58035: FOR_TO
58036: IFFALSE 58067
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58038: LD_VAR 0 1
58042: PPUSH
58043: CALL_OW 250
58047: PPUSH
58048: LD_VAR 0 1
58052: PPUSH
58053: CALL_OW 251
58057: PPUSH
58058: LD_INT 1
58060: PPUSH
58061: CALL_OW 453
58065: GO 58035
58067: POP
58068: POP
// end ;
58069: LD_VAR 0 2
58073: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58074: LD_INT 0
58076: PPUSH
58077: PPUSH
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58082: LD_VAR 0 1
58086: NOT
58087: PUSH
58088: LD_VAR 0 2
58092: NOT
58093: OR
58094: PUSH
58095: LD_VAR 0 1
58099: PPUSH
58100: CALL_OW 314
58104: OR
58105: IFFALSE 58109
// exit ;
58107: GO 58550
// x := GetX ( enemy_unit ) ;
58109: LD_ADDR_VAR 0 7
58113: PUSH
58114: LD_VAR 0 2
58118: PPUSH
58119: CALL_OW 250
58123: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58124: LD_ADDR_VAR 0 8
58128: PUSH
58129: LD_VAR 0 2
58133: PPUSH
58134: CALL_OW 251
58138: ST_TO_ADDR
// if not x or not y then
58139: LD_VAR 0 7
58143: NOT
58144: PUSH
58145: LD_VAR 0 8
58149: NOT
58150: OR
58151: IFFALSE 58155
// exit ;
58153: GO 58550
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58155: LD_ADDR_VAR 0 6
58159: PUSH
58160: LD_VAR 0 7
58164: PPUSH
58165: LD_INT 0
58167: PPUSH
58168: LD_INT 4
58170: PPUSH
58171: CALL_OW 272
58175: PUSH
58176: LD_VAR 0 8
58180: PPUSH
58181: LD_INT 0
58183: PPUSH
58184: LD_INT 4
58186: PPUSH
58187: CALL_OW 273
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_VAR 0 7
58200: PPUSH
58201: LD_INT 1
58203: PPUSH
58204: LD_INT 4
58206: PPUSH
58207: CALL_OW 272
58211: PUSH
58212: LD_VAR 0 8
58216: PPUSH
58217: LD_INT 1
58219: PPUSH
58220: LD_INT 4
58222: PPUSH
58223: CALL_OW 273
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_VAR 0 7
58236: PPUSH
58237: LD_INT 2
58239: PPUSH
58240: LD_INT 4
58242: PPUSH
58243: CALL_OW 272
58247: PUSH
58248: LD_VAR 0 8
58252: PPUSH
58253: LD_INT 2
58255: PPUSH
58256: LD_INT 4
58258: PPUSH
58259: CALL_OW 273
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_VAR 0 7
58272: PPUSH
58273: LD_INT 3
58275: PPUSH
58276: LD_INT 4
58278: PPUSH
58279: CALL_OW 272
58283: PUSH
58284: LD_VAR 0 8
58288: PPUSH
58289: LD_INT 3
58291: PPUSH
58292: LD_INT 4
58294: PPUSH
58295: CALL_OW 273
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_VAR 0 7
58308: PPUSH
58309: LD_INT 4
58311: PPUSH
58312: LD_INT 4
58314: PPUSH
58315: CALL_OW 272
58319: PUSH
58320: LD_VAR 0 8
58324: PPUSH
58325: LD_INT 4
58327: PPUSH
58328: LD_INT 4
58330: PPUSH
58331: CALL_OW 273
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_VAR 0 7
58344: PPUSH
58345: LD_INT 5
58347: PPUSH
58348: LD_INT 4
58350: PPUSH
58351: CALL_OW 272
58355: PUSH
58356: LD_VAR 0 8
58360: PPUSH
58361: LD_INT 5
58363: PPUSH
58364: LD_INT 4
58366: PPUSH
58367: CALL_OW 273
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// for i = tmp downto 1 do
58384: LD_ADDR_VAR 0 4
58388: PUSH
58389: DOUBLE
58390: LD_VAR 0 6
58394: INC
58395: ST_TO_ADDR
58396: LD_INT 1
58398: PUSH
58399: FOR_DOWNTO
58400: IFFALSE 58501
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58402: LD_VAR 0 6
58406: PUSH
58407: LD_VAR 0 4
58411: ARRAY
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PPUSH
58417: LD_VAR 0 6
58421: PUSH
58422: LD_VAR 0 4
58426: ARRAY
58427: PUSH
58428: LD_INT 2
58430: ARRAY
58431: PPUSH
58432: CALL_OW 488
58436: NOT
58437: PUSH
58438: LD_VAR 0 6
58442: PUSH
58443: LD_VAR 0 4
58447: ARRAY
58448: PUSH
58449: LD_INT 1
58451: ARRAY
58452: PPUSH
58453: LD_VAR 0 6
58457: PUSH
58458: LD_VAR 0 4
58462: ARRAY
58463: PUSH
58464: LD_INT 2
58466: ARRAY
58467: PPUSH
58468: CALL_OW 428
58472: PUSH
58473: LD_INT 0
58475: NONEQUAL
58476: OR
58477: IFFALSE 58499
// tmp := Delete ( tmp , i ) ;
58479: LD_ADDR_VAR 0 6
58483: PUSH
58484: LD_VAR 0 6
58488: PPUSH
58489: LD_VAR 0 4
58493: PPUSH
58494: CALL_OW 3
58498: ST_TO_ADDR
58499: GO 58399
58501: POP
58502: POP
// j := GetClosestHex ( unit , tmp ) ;
58503: LD_ADDR_VAR 0 5
58507: PUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: LD_VAR 0 6
58517: PPUSH
58518: CALL 57820 0 2
58522: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58523: LD_VAR 0 1
58527: PPUSH
58528: LD_VAR 0 5
58532: PUSH
58533: LD_INT 1
58535: ARRAY
58536: PPUSH
58537: LD_VAR 0 5
58541: PUSH
58542: LD_INT 2
58544: ARRAY
58545: PPUSH
58546: CALL_OW 111
// end ;
58550: LD_VAR 0 3
58554: RET
// export function PrepareApemanSoldier ( ) ; begin
58555: LD_INT 0
58557: PPUSH
// uc_nation := 0 ;
58558: LD_ADDR_OWVAR 21
58562: PUSH
58563: LD_INT 0
58565: ST_TO_ADDR
// hc_sex := sex_male ;
58566: LD_ADDR_OWVAR 27
58570: PUSH
58571: LD_INT 1
58573: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58574: LD_ADDR_OWVAR 28
58578: PUSH
58579: LD_INT 15
58581: ST_TO_ADDR
// hc_gallery :=  ;
58582: LD_ADDR_OWVAR 33
58586: PUSH
58587: LD_STRING 
58589: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58590: LD_ADDR_OWVAR 31
58594: PUSH
58595: LD_INT 0
58597: PPUSH
58598: LD_INT 3
58600: PPUSH
58601: CALL_OW 12
58605: PUSH
58606: LD_INT 0
58608: PPUSH
58609: LD_INT 3
58611: PPUSH
58612: CALL_OW 12
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: ST_TO_ADDR
// end ;
58629: LD_VAR 0 1
58633: RET
// export function PrepareApemanEngineer ( ) ; begin
58634: LD_INT 0
58636: PPUSH
// uc_nation := 0 ;
58637: LD_ADDR_OWVAR 21
58641: PUSH
58642: LD_INT 0
58644: ST_TO_ADDR
// hc_sex := sex_male ;
58645: LD_ADDR_OWVAR 27
58649: PUSH
58650: LD_INT 1
58652: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58653: LD_ADDR_OWVAR 28
58657: PUSH
58658: LD_INT 16
58660: ST_TO_ADDR
// hc_gallery :=  ;
58661: LD_ADDR_OWVAR 33
58665: PUSH
58666: LD_STRING 
58668: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58669: LD_ADDR_OWVAR 31
58673: PUSH
58674: LD_INT 0
58676: PPUSH
58677: LD_INT 3
58679: PPUSH
58680: CALL_OW 12
58684: PUSH
58685: LD_INT 0
58687: PPUSH
58688: LD_INT 3
58690: PPUSH
58691: CALL_OW 12
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// end ;
58708: LD_VAR 0 1
58712: RET
// export function PrepareApeman ( agressivity ) ; begin
58713: LD_INT 0
58715: PPUSH
// uc_side := 0 ;
58716: LD_ADDR_OWVAR 20
58720: PUSH
58721: LD_INT 0
58723: ST_TO_ADDR
// uc_nation := 0 ;
58724: LD_ADDR_OWVAR 21
58728: PUSH
58729: LD_INT 0
58731: ST_TO_ADDR
// hc_sex := sex_male ;
58732: LD_ADDR_OWVAR 27
58736: PUSH
58737: LD_INT 1
58739: ST_TO_ADDR
// hc_class := class_apeman ;
58740: LD_ADDR_OWVAR 28
58744: PUSH
58745: LD_INT 12
58747: ST_TO_ADDR
// hc_gallery :=  ;
58748: LD_ADDR_OWVAR 33
58752: PUSH
58753: LD_STRING 
58755: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58756: LD_ADDR_OWVAR 35
58760: PUSH
58761: LD_VAR 0 1
58765: NEG
58766: PPUSH
58767: LD_VAR 0 1
58771: PPUSH
58772: CALL_OW 12
58776: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58777: LD_ADDR_OWVAR 31
58781: PUSH
58782: LD_INT 0
58784: PPUSH
58785: LD_INT 3
58787: PPUSH
58788: CALL_OW 12
58792: PUSH
58793: LD_INT 0
58795: PPUSH
58796: LD_INT 3
58798: PPUSH
58799: CALL_OW 12
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// end ;
58816: LD_VAR 0 2
58820: RET
// export function PrepareTiger ( agressivity ) ; begin
58821: LD_INT 0
58823: PPUSH
// uc_side := 0 ;
58824: LD_ADDR_OWVAR 20
58828: PUSH
58829: LD_INT 0
58831: ST_TO_ADDR
// uc_nation := 0 ;
58832: LD_ADDR_OWVAR 21
58836: PUSH
58837: LD_INT 0
58839: ST_TO_ADDR
// hc_class := class_tiger ;
58840: LD_ADDR_OWVAR 28
58844: PUSH
58845: LD_INT 14
58847: ST_TO_ADDR
// hc_gallery :=  ;
58848: LD_ADDR_OWVAR 33
58852: PUSH
58853: LD_STRING 
58855: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58856: LD_ADDR_OWVAR 35
58860: PUSH
58861: LD_VAR 0 1
58865: NEG
58866: PPUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: CALL_OW 12
58876: ST_TO_ADDR
// end ;
58877: LD_VAR 0 2
58881: RET
// export function PrepareEnchidna ( ) ; begin
58882: LD_INT 0
58884: PPUSH
// uc_side := 0 ;
58885: LD_ADDR_OWVAR 20
58889: PUSH
58890: LD_INT 0
58892: ST_TO_ADDR
// uc_nation := 0 ;
58893: LD_ADDR_OWVAR 21
58897: PUSH
58898: LD_INT 0
58900: ST_TO_ADDR
// hc_class := class_baggie ;
58901: LD_ADDR_OWVAR 28
58905: PUSH
58906: LD_INT 13
58908: ST_TO_ADDR
// hc_gallery :=  ;
58909: LD_ADDR_OWVAR 33
58913: PUSH
58914: LD_STRING 
58916: ST_TO_ADDR
// end ;
58917: LD_VAR 0 1
58921: RET
// export function PrepareFrog ( ) ; begin
58922: LD_INT 0
58924: PPUSH
// uc_side := 0 ;
58925: LD_ADDR_OWVAR 20
58929: PUSH
58930: LD_INT 0
58932: ST_TO_ADDR
// uc_nation := 0 ;
58933: LD_ADDR_OWVAR 21
58937: PUSH
58938: LD_INT 0
58940: ST_TO_ADDR
// hc_class := class_frog ;
58941: LD_ADDR_OWVAR 28
58945: PUSH
58946: LD_INT 19
58948: ST_TO_ADDR
// hc_gallery :=  ;
58949: LD_ADDR_OWVAR 33
58953: PUSH
58954: LD_STRING 
58956: ST_TO_ADDR
// end ;
58957: LD_VAR 0 1
58961: RET
// export function PrepareFish ( ) ; begin
58962: LD_INT 0
58964: PPUSH
// uc_side := 0 ;
58965: LD_ADDR_OWVAR 20
58969: PUSH
58970: LD_INT 0
58972: ST_TO_ADDR
// uc_nation := 0 ;
58973: LD_ADDR_OWVAR 21
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// hc_class := class_fish ;
58981: LD_ADDR_OWVAR 28
58985: PUSH
58986: LD_INT 20
58988: ST_TO_ADDR
// hc_gallery :=  ;
58989: LD_ADDR_OWVAR 33
58993: PUSH
58994: LD_STRING 
58996: ST_TO_ADDR
// end ;
58997: LD_VAR 0 1
59001: RET
// export function PrepareBird ( ) ; begin
59002: LD_INT 0
59004: PPUSH
// uc_side := 0 ;
59005: LD_ADDR_OWVAR 20
59009: PUSH
59010: LD_INT 0
59012: ST_TO_ADDR
// uc_nation := 0 ;
59013: LD_ADDR_OWVAR 21
59017: PUSH
59018: LD_INT 0
59020: ST_TO_ADDR
// hc_class := class_phororhacos ;
59021: LD_ADDR_OWVAR 28
59025: PUSH
59026: LD_INT 18
59028: ST_TO_ADDR
// hc_gallery :=  ;
59029: LD_ADDR_OWVAR 33
59033: PUSH
59034: LD_STRING 
59036: ST_TO_ADDR
// end ;
59037: LD_VAR 0 1
59041: RET
// export function PrepareHorse ( ) ; begin
59042: LD_INT 0
59044: PPUSH
// uc_side := 0 ;
59045: LD_ADDR_OWVAR 20
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// uc_nation := 0 ;
59053: LD_ADDR_OWVAR 21
59057: PUSH
59058: LD_INT 0
59060: ST_TO_ADDR
// hc_class := class_horse ;
59061: LD_ADDR_OWVAR 28
59065: PUSH
59066: LD_INT 21
59068: ST_TO_ADDR
// hc_gallery :=  ;
59069: LD_ADDR_OWVAR 33
59073: PUSH
59074: LD_STRING 
59076: ST_TO_ADDR
// end ;
59077: LD_VAR 0 1
59081: RET
// export function PrepareMastodont ( ) ; begin
59082: LD_INT 0
59084: PPUSH
// uc_side := 0 ;
59085: LD_ADDR_OWVAR 20
59089: PUSH
59090: LD_INT 0
59092: ST_TO_ADDR
// uc_nation := 0 ;
59093: LD_ADDR_OWVAR 21
59097: PUSH
59098: LD_INT 0
59100: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59101: LD_ADDR_OWVAR 37
59105: PUSH
59106: LD_INT 31
59108: ST_TO_ADDR
// vc_control := control_rider ;
59109: LD_ADDR_OWVAR 38
59113: PUSH
59114: LD_INT 4
59116: ST_TO_ADDR
// end ;
59117: LD_VAR 0 1
59121: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59122: LD_INT 0
59124: PPUSH
59125: PPUSH
59126: PPUSH
// uc_side = 0 ;
59127: LD_ADDR_OWVAR 20
59131: PUSH
59132: LD_INT 0
59134: ST_TO_ADDR
// uc_nation = 0 ;
59135: LD_ADDR_OWVAR 21
59139: PUSH
59140: LD_INT 0
59142: ST_TO_ADDR
// InitHc_All ( ) ;
59143: CALL_OW 584
// InitVc ;
59147: CALL_OW 20
// if mastodonts then
59151: LD_VAR 0 6
59155: IFFALSE 59222
// for i = 1 to mastodonts do
59157: LD_ADDR_VAR 0 11
59161: PUSH
59162: DOUBLE
59163: LD_INT 1
59165: DEC
59166: ST_TO_ADDR
59167: LD_VAR 0 6
59171: PUSH
59172: FOR_TO
59173: IFFALSE 59220
// begin vc_chassis := 31 ;
59175: LD_ADDR_OWVAR 37
59179: PUSH
59180: LD_INT 31
59182: ST_TO_ADDR
// vc_control := control_rider ;
59183: LD_ADDR_OWVAR 38
59187: PUSH
59188: LD_INT 4
59190: ST_TO_ADDR
// animal := CreateVehicle ;
59191: LD_ADDR_VAR 0 12
59195: PUSH
59196: CALL_OW 45
59200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59201: LD_VAR 0 12
59205: PPUSH
59206: LD_VAR 0 8
59210: PPUSH
59211: LD_INT 0
59213: PPUSH
59214: CALL 61357 0 3
// end ;
59218: GO 59172
59220: POP
59221: POP
// if horses then
59222: LD_VAR 0 5
59226: IFFALSE 59293
// for i = 1 to horses do
59228: LD_ADDR_VAR 0 11
59232: PUSH
59233: DOUBLE
59234: LD_INT 1
59236: DEC
59237: ST_TO_ADDR
59238: LD_VAR 0 5
59242: PUSH
59243: FOR_TO
59244: IFFALSE 59291
// begin hc_class := 21 ;
59246: LD_ADDR_OWVAR 28
59250: PUSH
59251: LD_INT 21
59253: ST_TO_ADDR
// hc_gallery :=  ;
59254: LD_ADDR_OWVAR 33
59258: PUSH
59259: LD_STRING 
59261: ST_TO_ADDR
// animal := CreateHuman ;
59262: LD_ADDR_VAR 0 12
59266: PUSH
59267: CALL_OW 44
59271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59272: LD_VAR 0 12
59276: PPUSH
59277: LD_VAR 0 8
59281: PPUSH
59282: LD_INT 0
59284: PPUSH
59285: CALL 61357 0 3
// end ;
59289: GO 59243
59291: POP
59292: POP
// if birds then
59293: LD_VAR 0 1
59297: IFFALSE 59364
// for i = 1 to birds do
59299: LD_ADDR_VAR 0 11
59303: PUSH
59304: DOUBLE
59305: LD_INT 1
59307: DEC
59308: ST_TO_ADDR
59309: LD_VAR 0 1
59313: PUSH
59314: FOR_TO
59315: IFFALSE 59362
// begin hc_class = 18 ;
59317: LD_ADDR_OWVAR 28
59321: PUSH
59322: LD_INT 18
59324: ST_TO_ADDR
// hc_gallery =  ;
59325: LD_ADDR_OWVAR 33
59329: PUSH
59330: LD_STRING 
59332: ST_TO_ADDR
// animal := CreateHuman ;
59333: LD_ADDR_VAR 0 12
59337: PUSH
59338: CALL_OW 44
59342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59343: LD_VAR 0 12
59347: PPUSH
59348: LD_VAR 0 8
59352: PPUSH
59353: LD_INT 0
59355: PPUSH
59356: CALL 61357 0 3
// end ;
59360: GO 59314
59362: POP
59363: POP
// if tigers then
59364: LD_VAR 0 2
59368: IFFALSE 59452
// for i = 1 to tigers do
59370: LD_ADDR_VAR 0 11
59374: PUSH
59375: DOUBLE
59376: LD_INT 1
59378: DEC
59379: ST_TO_ADDR
59380: LD_VAR 0 2
59384: PUSH
59385: FOR_TO
59386: IFFALSE 59450
// begin hc_class = class_tiger ;
59388: LD_ADDR_OWVAR 28
59392: PUSH
59393: LD_INT 14
59395: ST_TO_ADDR
// hc_gallery =  ;
59396: LD_ADDR_OWVAR 33
59400: PUSH
59401: LD_STRING 
59403: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59404: LD_ADDR_OWVAR 35
59408: PUSH
59409: LD_INT 7
59411: NEG
59412: PPUSH
59413: LD_INT 7
59415: PPUSH
59416: CALL_OW 12
59420: ST_TO_ADDR
// animal := CreateHuman ;
59421: LD_ADDR_VAR 0 12
59425: PUSH
59426: CALL_OW 44
59430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59431: LD_VAR 0 12
59435: PPUSH
59436: LD_VAR 0 8
59440: PPUSH
59441: LD_INT 0
59443: PPUSH
59444: CALL 61357 0 3
// end ;
59448: GO 59385
59450: POP
59451: POP
// if apemans then
59452: LD_VAR 0 3
59456: IFFALSE 59579
// for i = 1 to apemans do
59458: LD_ADDR_VAR 0 11
59462: PUSH
59463: DOUBLE
59464: LD_INT 1
59466: DEC
59467: ST_TO_ADDR
59468: LD_VAR 0 3
59472: PUSH
59473: FOR_TO
59474: IFFALSE 59577
// begin hc_class = class_apeman ;
59476: LD_ADDR_OWVAR 28
59480: PUSH
59481: LD_INT 12
59483: ST_TO_ADDR
// hc_gallery =  ;
59484: LD_ADDR_OWVAR 33
59488: PUSH
59489: LD_STRING 
59491: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59492: LD_ADDR_OWVAR 35
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PPUSH
59501: LD_INT 2
59503: PPUSH
59504: CALL_OW 12
59508: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59509: LD_ADDR_OWVAR 31
59513: PUSH
59514: LD_INT 1
59516: PPUSH
59517: LD_INT 3
59519: PPUSH
59520: CALL_OW 12
59524: PUSH
59525: LD_INT 1
59527: PPUSH
59528: LD_INT 3
59530: PPUSH
59531: CALL_OW 12
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: ST_TO_ADDR
// animal := CreateHuman ;
59548: LD_ADDR_VAR 0 12
59552: PUSH
59553: CALL_OW 44
59557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59558: LD_VAR 0 12
59562: PPUSH
59563: LD_VAR 0 8
59567: PPUSH
59568: LD_INT 0
59570: PPUSH
59571: CALL 61357 0 3
// end ;
59575: GO 59473
59577: POP
59578: POP
// if enchidnas then
59579: LD_VAR 0 4
59583: IFFALSE 59650
// for i = 1 to enchidnas do
59585: LD_ADDR_VAR 0 11
59589: PUSH
59590: DOUBLE
59591: LD_INT 1
59593: DEC
59594: ST_TO_ADDR
59595: LD_VAR 0 4
59599: PUSH
59600: FOR_TO
59601: IFFALSE 59648
// begin hc_class = 13 ;
59603: LD_ADDR_OWVAR 28
59607: PUSH
59608: LD_INT 13
59610: ST_TO_ADDR
// hc_gallery =  ;
59611: LD_ADDR_OWVAR 33
59615: PUSH
59616: LD_STRING 
59618: ST_TO_ADDR
// animal := CreateHuman ;
59619: LD_ADDR_VAR 0 12
59623: PUSH
59624: CALL_OW 44
59628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59629: LD_VAR 0 12
59633: PPUSH
59634: LD_VAR 0 8
59638: PPUSH
59639: LD_INT 0
59641: PPUSH
59642: CALL 61357 0 3
// end ;
59646: GO 59600
59648: POP
59649: POP
// if fishes then
59650: LD_VAR 0 7
59654: IFFALSE 59721
// for i = 1 to fishes do
59656: LD_ADDR_VAR 0 11
59660: PUSH
59661: DOUBLE
59662: LD_INT 1
59664: DEC
59665: ST_TO_ADDR
59666: LD_VAR 0 7
59670: PUSH
59671: FOR_TO
59672: IFFALSE 59719
// begin hc_class = 20 ;
59674: LD_ADDR_OWVAR 28
59678: PUSH
59679: LD_INT 20
59681: ST_TO_ADDR
// hc_gallery =  ;
59682: LD_ADDR_OWVAR 33
59686: PUSH
59687: LD_STRING 
59689: ST_TO_ADDR
// animal := CreateHuman ;
59690: LD_ADDR_VAR 0 12
59694: PUSH
59695: CALL_OW 44
59699: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59700: LD_VAR 0 12
59704: PPUSH
59705: LD_VAR 0 9
59709: PPUSH
59710: LD_INT 0
59712: PPUSH
59713: CALL 61357 0 3
// end ;
59717: GO 59671
59719: POP
59720: POP
// end ;
59721: LD_VAR 0 10
59725: RET
// export function WantHeal ( sci , unit ) ; begin
59726: LD_INT 0
59728: PPUSH
// if GetTaskList ( sci ) > 0 then
59729: LD_VAR 0 1
59733: PPUSH
59734: CALL_OW 437
59738: PUSH
59739: LD_INT 0
59741: GREATER
59742: IFFALSE 59812
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59744: LD_VAR 0 1
59748: PPUSH
59749: CALL_OW 437
59753: PUSH
59754: LD_INT 1
59756: ARRAY
59757: PUSH
59758: LD_INT 1
59760: ARRAY
59761: PUSH
59762: LD_STRING l
59764: EQUAL
59765: PUSH
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL_OW 437
59775: PUSH
59776: LD_INT 1
59778: ARRAY
59779: PUSH
59780: LD_INT 4
59782: ARRAY
59783: PUSH
59784: LD_VAR 0 2
59788: EQUAL
59789: AND
59790: IFFALSE 59802
// result := true else
59792: LD_ADDR_VAR 0 3
59796: PUSH
59797: LD_INT 1
59799: ST_TO_ADDR
59800: GO 59810
// result := false ;
59802: LD_ADDR_VAR 0 3
59806: PUSH
59807: LD_INT 0
59809: ST_TO_ADDR
// end else
59810: GO 59820
// result := false ;
59812: LD_ADDR_VAR 0 3
59816: PUSH
59817: LD_INT 0
59819: ST_TO_ADDR
// end ;
59820: LD_VAR 0 3
59824: RET
// export function HealTarget ( sci ) ; begin
59825: LD_INT 0
59827: PPUSH
// if not sci then
59828: LD_VAR 0 1
59832: NOT
59833: IFFALSE 59837
// exit ;
59835: GO 59902
// result := 0 ;
59837: LD_ADDR_VAR 0 2
59841: PUSH
59842: LD_INT 0
59844: ST_TO_ADDR
// if GetTaskList ( sci ) then
59845: LD_VAR 0 1
59849: PPUSH
59850: CALL_OW 437
59854: IFFALSE 59902
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59856: LD_VAR 0 1
59860: PPUSH
59861: CALL_OW 437
59865: PUSH
59866: LD_INT 1
59868: ARRAY
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: PUSH
59874: LD_STRING l
59876: EQUAL
59877: IFFALSE 59902
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59879: LD_ADDR_VAR 0 2
59883: PUSH
59884: LD_VAR 0 1
59888: PPUSH
59889: CALL_OW 437
59893: PUSH
59894: LD_INT 1
59896: ARRAY
59897: PUSH
59898: LD_INT 4
59900: ARRAY
59901: ST_TO_ADDR
// end ;
59902: LD_VAR 0 2
59906: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
// if not base_units then
59913: LD_VAR 0 1
59917: NOT
59918: IFFALSE 59922
// exit ;
59920: GO 60009
// result := false ;
59922: LD_ADDR_VAR 0 2
59926: PUSH
59927: LD_INT 0
59929: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59930: LD_ADDR_VAR 0 5
59934: PUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: LD_INT 21
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PPUSH
59950: CALL_OW 72
59954: ST_TO_ADDR
// if not tmp then
59955: LD_VAR 0 5
59959: NOT
59960: IFFALSE 59964
// exit ;
59962: GO 60009
// for i in tmp do
59964: LD_ADDR_VAR 0 3
59968: PUSH
59969: LD_VAR 0 5
59973: PUSH
59974: FOR_IN
59975: IFFALSE 60007
// begin result := EnemyInRange ( i , 22 ) ;
59977: LD_ADDR_VAR 0 2
59981: PUSH
59982: LD_VAR 0 3
59986: PPUSH
59987: LD_INT 22
59989: PPUSH
59990: CALL 57695 0 2
59994: ST_TO_ADDR
// if result then
59995: LD_VAR 0 2
59999: IFFALSE 60005
// exit ;
60001: POP
60002: POP
60003: GO 60009
// end ;
60005: GO 59974
60007: POP
60008: POP
// end ;
60009: LD_VAR 0 2
60013: RET
// export function FilterByTag ( units , tag ) ; begin
60014: LD_INT 0
60016: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60017: LD_ADDR_VAR 0 3
60021: PUSH
60022: LD_VAR 0 1
60026: PPUSH
60027: LD_INT 120
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PPUSH
60039: CALL_OW 72
60043: ST_TO_ADDR
// end ;
60044: LD_VAR 0 3
60048: RET
// export function IsDriver ( un ) ; begin
60049: LD_INT 0
60051: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60052: LD_ADDR_VAR 0 2
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_INT 55
60064: PUSH
60065: EMPTY
60066: LIST
60067: PPUSH
60068: CALL_OW 69
60072: IN
60073: ST_TO_ADDR
// end ;
60074: LD_VAR 0 2
60078: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60079: LD_INT 0
60081: PPUSH
60082: PPUSH
// list := [ ] ;
60083: LD_ADDR_VAR 0 5
60087: PUSH
60088: EMPTY
60089: ST_TO_ADDR
// case d of 0 :
60090: LD_VAR 0 3
60094: PUSH
60095: LD_INT 0
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60103
60101: GO 60236
60103: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60104: LD_ADDR_VAR 0 5
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_INT 4
60116: MINUS
60117: PUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_INT 4
60125: MINUS
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: PUSH
60135: LD_VAR 0 1
60139: PUSH
60140: LD_INT 3
60142: MINUS
60143: PUSH
60144: LD_VAR 0 2
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: LD_VAR 0 1
60161: PUSH
60162: LD_INT 4
60164: PLUS
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: PUSH
60179: LD_VAR 0 1
60183: PUSH
60184: LD_INT 3
60186: PLUS
60187: PUSH
60188: LD_VAR 0 2
60192: PUSH
60193: LD_INT 3
60195: PLUS
60196: PUSH
60197: LD_INT 5
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: PUSH
60205: LD_VAR 0 1
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: LD_INT 4
60217: PLUS
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// end ; 1 :
60234: GO 60934
60236: LD_INT 1
60238: DOUBLE
60239: EQUAL
60240: IFTRUE 60244
60242: GO 60377
60244: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60245: LD_ADDR_VAR 0 5
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_VAR 0 2
60259: PUSH
60260: LD_INT 4
60262: MINUS
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: LD_INT 3
60279: MINUS
60280: PUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_INT 3
60288: MINUS
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: PUSH
60298: LD_VAR 0 1
60302: PUSH
60303: LD_INT 4
60305: MINUS
60306: PUSH
60307: LD_VAR 0 2
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: LD_VAR 0 2
60329: PUSH
60330: LD_INT 3
60332: PLUS
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: PUSH
60342: LD_VAR 0 1
60346: PUSH
60347: LD_INT 4
60349: PLUS
60350: PUSH
60351: LD_VAR 0 2
60355: PUSH
60356: LD_INT 4
60358: PLUS
60359: PUSH
60360: LD_INT 5
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: ST_TO_ADDR
// end ; 2 :
60375: GO 60934
60377: LD_INT 2
60379: DOUBLE
60380: EQUAL
60381: IFTRUE 60385
60383: GO 60514
60385: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60386: LD_ADDR_VAR 0 5
60390: PUSH
60391: LD_VAR 0 1
60395: PUSH
60396: LD_VAR 0 2
60400: PUSH
60401: LD_INT 3
60403: MINUS
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: PUSH
60413: LD_VAR 0 1
60417: PUSH
60418: LD_INT 4
60420: PLUS
60421: PUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_INT 4
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: PUSH
60435: LD_VAR 0 1
60439: PUSH
60440: LD_VAR 0 2
60444: PUSH
60445: LD_INT 4
60447: PLUS
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: PUSH
60457: LD_VAR 0 1
60461: PUSH
60462: LD_INT 3
60464: MINUS
60465: PUSH
60466: LD_VAR 0 2
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: PUSH
60479: LD_VAR 0 1
60483: PUSH
60484: LD_INT 4
60486: MINUS
60487: PUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_INT 4
60495: MINUS
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// end ; 3 :
60512: GO 60934
60514: LD_INT 3
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60522
60520: GO 60655
60522: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60523: LD_ADDR_VAR 0 5
60527: PUSH
60528: LD_VAR 0 1
60532: PUSH
60533: LD_INT 3
60535: PLUS
60536: PUSH
60537: LD_VAR 0 2
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: PUSH
60550: LD_VAR 0 1
60554: PUSH
60555: LD_INT 4
60557: PLUS
60558: PUSH
60559: LD_VAR 0 2
60563: PUSH
60564: LD_INT 4
60566: PLUS
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: PUSH
60576: LD_VAR 0 1
60580: PUSH
60581: LD_INT 4
60583: MINUS
60584: PUSH
60585: LD_VAR 0 2
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 1
60602: PUSH
60603: LD_VAR 0 2
60607: PUSH
60608: LD_INT 4
60610: MINUS
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: PUSH
60620: LD_VAR 0 1
60624: PUSH
60625: LD_INT 3
60627: MINUS
60628: PUSH
60629: LD_VAR 0 2
60633: PUSH
60634: LD_INT 3
60636: MINUS
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: ST_TO_ADDR
// end ; 4 :
60653: GO 60934
60655: LD_INT 4
60657: DOUBLE
60658: EQUAL
60659: IFTRUE 60663
60661: GO 60796
60663: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60664: LD_ADDR_VAR 0 5
60668: PUSH
60669: LD_VAR 0 1
60673: PUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_INT 4
60681: PLUS
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: PUSH
60691: LD_VAR 0 1
60695: PUSH
60696: LD_INT 3
60698: PLUS
60699: PUSH
60700: LD_VAR 0 2
60704: PUSH
60705: LD_INT 3
60707: PLUS
60708: PUSH
60709: LD_INT 5
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: PUSH
60717: LD_VAR 0 1
60721: PUSH
60722: LD_INT 4
60724: PLUS
60725: PUSH
60726: LD_VAR 0 2
60730: PUSH
60731: LD_INT 4
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: PUSH
60739: LD_VAR 0 1
60743: PUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_INT 3
60751: MINUS
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: PUSH
60761: LD_VAR 0 1
60765: PUSH
60766: LD_INT 4
60768: MINUS
60769: PUSH
60770: LD_VAR 0 2
60774: PUSH
60775: LD_INT 4
60777: MINUS
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// end ; 5 :
60794: GO 60934
60796: LD_INT 5
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60804
60802: GO 60933
60804: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60805: LD_ADDR_VAR 0 5
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_INT 4
60817: MINUS
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: LD_VAR 0 1
60836: PUSH
60837: LD_VAR 0 2
60841: PUSH
60842: LD_INT 4
60844: MINUS
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: LIST
60853: PUSH
60854: LD_VAR 0 1
60858: PUSH
60859: LD_INT 4
60861: PLUS
60862: PUSH
60863: LD_VAR 0 2
60867: PUSH
60868: LD_INT 4
60870: PLUS
60871: PUSH
60872: LD_INT 5
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: PUSH
60880: LD_VAR 0 1
60884: PUSH
60885: LD_INT 3
60887: PLUS
60888: PUSH
60889: LD_VAR 0 2
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: PUSH
60902: LD_VAR 0 1
60906: PUSH
60907: LD_VAR 0 2
60911: PUSH
60912: LD_INT 3
60914: PLUS
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: ST_TO_ADDR
// end ; end ;
60931: GO 60934
60933: POP
// result := list ;
60934: LD_ADDR_VAR 0 4
60938: PUSH
60939: LD_VAR 0 5
60943: ST_TO_ADDR
// end ;
60944: LD_VAR 0 4
60948: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60949: LD_INT 0
60951: PPUSH
60952: PPUSH
60953: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60954: LD_VAR 0 1
60958: NOT
60959: PUSH
60960: LD_VAR 0 2
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: IN
60983: NOT
60984: OR
60985: IFFALSE 60989
// exit ;
60987: GO 61081
// tmp := [ ] ;
60989: LD_ADDR_VAR 0 5
60993: PUSH
60994: EMPTY
60995: ST_TO_ADDR
// for i in units do
60996: LD_ADDR_VAR 0 4
61000: PUSH
61001: LD_VAR 0 1
61005: PUSH
61006: FOR_IN
61007: IFFALSE 61050
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61009: LD_ADDR_VAR 0 5
61013: PUSH
61014: LD_VAR 0 5
61018: PPUSH
61019: LD_VAR 0 5
61023: PUSH
61024: LD_INT 1
61026: PLUS
61027: PPUSH
61028: LD_VAR 0 4
61032: PPUSH
61033: LD_VAR 0 2
61037: PPUSH
61038: CALL_OW 259
61042: PPUSH
61043: CALL_OW 2
61047: ST_TO_ADDR
61048: GO 61006
61050: POP
61051: POP
// if not tmp then
61052: LD_VAR 0 5
61056: NOT
61057: IFFALSE 61061
// exit ;
61059: GO 61081
// result := SortListByListDesc ( units , tmp ) ;
61061: LD_ADDR_VAR 0 3
61065: PUSH
61066: LD_VAR 0 1
61070: PPUSH
61071: LD_VAR 0 5
61075: PPUSH
61076: CALL_OW 77
61080: ST_TO_ADDR
// end ;
61081: LD_VAR 0 3
61085: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
61090: PPUSH
// result := false ;
61091: LD_ADDR_VAR 0 3
61095: PUSH
61096: LD_INT 0
61098: ST_TO_ADDR
// x := GetX ( building ) ;
61099: LD_ADDR_VAR 0 4
61103: PUSH
61104: LD_VAR 0 2
61108: PPUSH
61109: CALL_OW 250
61113: ST_TO_ADDR
// y := GetY ( building ) ;
61114: LD_ADDR_VAR 0 5
61118: PUSH
61119: LD_VAR 0 2
61123: PPUSH
61124: CALL_OW 251
61128: ST_TO_ADDR
// if not building or not x or not y then
61129: LD_VAR 0 2
61133: NOT
61134: PUSH
61135: LD_VAR 0 4
61139: NOT
61140: OR
61141: PUSH
61142: LD_VAR 0 5
61146: NOT
61147: OR
61148: IFFALSE 61152
// exit ;
61150: GO 61244
// if GetTaskList ( unit ) then
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 437
61161: IFFALSE 61244
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61163: LD_STRING e
61165: PUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 437
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: PUSH
61180: LD_INT 1
61182: ARRAY
61183: EQUAL
61184: PUSH
61185: LD_VAR 0 4
61189: PUSH
61190: LD_VAR 0 1
61194: PPUSH
61195: CALL_OW 437
61199: PUSH
61200: LD_INT 1
61202: ARRAY
61203: PUSH
61204: LD_INT 2
61206: ARRAY
61207: EQUAL
61208: AND
61209: PUSH
61210: LD_VAR 0 5
61214: PUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: CALL_OW 437
61224: PUSH
61225: LD_INT 1
61227: ARRAY
61228: PUSH
61229: LD_INT 3
61231: ARRAY
61232: EQUAL
61233: AND
61234: IFFALSE 61244
// result := true end ;
61236: LD_ADDR_VAR 0 3
61240: PUSH
61241: LD_INT 1
61243: ST_TO_ADDR
// end ;
61244: LD_VAR 0 3
61248: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61249: LD_INT 0
61251: PPUSH
// result := false ;
61252: LD_ADDR_VAR 0 4
61256: PUSH
61257: LD_INT 0
61259: ST_TO_ADDR
// if GetTaskList ( unit ) then
61260: LD_VAR 0 1
61264: PPUSH
61265: CALL_OW 437
61269: IFFALSE 61352
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61271: LD_STRING M
61273: PUSH
61274: LD_VAR 0 1
61278: PPUSH
61279: CALL_OW 437
61283: PUSH
61284: LD_INT 1
61286: ARRAY
61287: PUSH
61288: LD_INT 1
61290: ARRAY
61291: EQUAL
61292: PUSH
61293: LD_VAR 0 2
61297: PUSH
61298: LD_VAR 0 1
61302: PPUSH
61303: CALL_OW 437
61307: PUSH
61308: LD_INT 1
61310: ARRAY
61311: PUSH
61312: LD_INT 2
61314: ARRAY
61315: EQUAL
61316: AND
61317: PUSH
61318: LD_VAR 0 3
61322: PUSH
61323: LD_VAR 0 1
61327: PPUSH
61328: CALL_OW 437
61332: PUSH
61333: LD_INT 1
61335: ARRAY
61336: PUSH
61337: LD_INT 3
61339: ARRAY
61340: EQUAL
61341: AND
61342: IFFALSE 61352
// result := true ;
61344: LD_ADDR_VAR 0 4
61348: PUSH
61349: LD_INT 1
61351: ST_TO_ADDR
// end ; end ;
61352: LD_VAR 0 4
61356: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61357: LD_INT 0
61359: PPUSH
61360: PPUSH
61361: PPUSH
61362: PPUSH
// if not unit or not area then
61363: LD_VAR 0 1
61367: NOT
61368: PUSH
61369: LD_VAR 0 2
61373: NOT
61374: OR
61375: IFFALSE 61379
// exit ;
61377: GO 61543
// tmp := AreaToList ( area , i ) ;
61379: LD_ADDR_VAR 0 6
61383: PUSH
61384: LD_VAR 0 2
61388: PPUSH
61389: LD_VAR 0 5
61393: PPUSH
61394: CALL_OW 517
61398: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61399: LD_ADDR_VAR 0 5
61403: PUSH
61404: DOUBLE
61405: LD_INT 1
61407: DEC
61408: ST_TO_ADDR
61409: LD_VAR 0 6
61413: PUSH
61414: LD_INT 1
61416: ARRAY
61417: PUSH
61418: FOR_TO
61419: IFFALSE 61541
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61421: LD_ADDR_VAR 0 7
61425: PUSH
61426: LD_VAR 0 6
61430: PUSH
61431: LD_INT 1
61433: ARRAY
61434: PUSH
61435: LD_VAR 0 5
61439: ARRAY
61440: PUSH
61441: LD_VAR 0 6
61445: PUSH
61446: LD_INT 2
61448: ARRAY
61449: PUSH
61450: LD_VAR 0 5
61454: ARRAY
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61460: LD_VAR 0 7
61464: PUSH
61465: LD_INT 1
61467: ARRAY
61468: PPUSH
61469: LD_VAR 0 7
61473: PUSH
61474: LD_INT 2
61476: ARRAY
61477: PPUSH
61478: CALL_OW 428
61482: PUSH
61483: LD_INT 0
61485: EQUAL
61486: IFFALSE 61539
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61488: LD_VAR 0 1
61492: PPUSH
61493: LD_VAR 0 7
61497: PUSH
61498: LD_INT 1
61500: ARRAY
61501: PPUSH
61502: LD_VAR 0 7
61506: PUSH
61507: LD_INT 2
61509: ARRAY
61510: PPUSH
61511: LD_VAR 0 3
61515: PPUSH
61516: CALL_OW 48
// result := IsPlaced ( unit ) ;
61520: LD_ADDR_VAR 0 4
61524: PUSH
61525: LD_VAR 0 1
61529: PPUSH
61530: CALL_OW 305
61534: ST_TO_ADDR
// exit ;
61535: POP
61536: POP
61537: GO 61543
// end ; end ;
61539: GO 61418
61541: POP
61542: POP
// end ;
61543: LD_VAR 0 4
61547: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
61552: PPUSH
// if not side or side > 8 then
61553: LD_VAR 0 1
61557: NOT
61558: PUSH
61559: LD_VAR 0 1
61563: PUSH
61564: LD_INT 8
61566: GREATER
61567: OR
61568: IFFALSE 61572
// exit ;
61570: GO 61759
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61572: LD_ADDR_VAR 0 4
61576: PUSH
61577: LD_INT 22
61579: PUSH
61580: LD_VAR 0 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 21
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PPUSH
61603: CALL_OW 69
61607: ST_TO_ADDR
// if not tmp then
61608: LD_VAR 0 4
61612: NOT
61613: IFFALSE 61617
// exit ;
61615: GO 61759
// enable_addtolog := true ;
61617: LD_ADDR_OWVAR 81
61621: PUSH
61622: LD_INT 1
61624: ST_TO_ADDR
// AddToLog ( [ ) ;
61625: LD_STRING [
61627: PPUSH
61628: CALL_OW 561
// for i in tmp do
61632: LD_ADDR_VAR 0 3
61636: PUSH
61637: LD_VAR 0 4
61641: PUSH
61642: FOR_IN
61643: IFFALSE 61750
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61645: LD_STRING [
61647: PUSH
61648: LD_VAR 0 3
61652: PPUSH
61653: CALL_OW 266
61657: STR
61658: PUSH
61659: LD_STRING , 
61661: STR
61662: PUSH
61663: LD_VAR 0 3
61667: PPUSH
61668: CALL_OW 250
61672: STR
61673: PUSH
61674: LD_STRING , 
61676: STR
61677: PUSH
61678: LD_VAR 0 3
61682: PPUSH
61683: CALL_OW 251
61687: STR
61688: PUSH
61689: LD_STRING , 
61691: STR
61692: PUSH
61693: LD_VAR 0 3
61697: PPUSH
61698: CALL_OW 254
61702: STR
61703: PUSH
61704: LD_STRING , 
61706: STR
61707: PUSH
61708: LD_VAR 0 3
61712: PPUSH
61713: LD_INT 1
61715: PPUSH
61716: CALL_OW 268
61720: STR
61721: PUSH
61722: LD_STRING , 
61724: STR
61725: PUSH
61726: LD_VAR 0 3
61730: PPUSH
61731: LD_INT 2
61733: PPUSH
61734: CALL_OW 268
61738: STR
61739: PUSH
61740: LD_STRING ],
61742: STR
61743: PPUSH
61744: CALL_OW 561
// end ;
61748: GO 61642
61750: POP
61751: POP
// AddToLog ( ]; ) ;
61752: LD_STRING ];
61754: PPUSH
61755: CALL_OW 561
// end ;
61759: LD_VAR 0 2
61763: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61764: LD_INT 0
61766: PPUSH
61767: PPUSH
61768: PPUSH
61769: PPUSH
61770: PPUSH
// if not area or not rate or not max then
61771: LD_VAR 0 1
61775: NOT
61776: PUSH
61777: LD_VAR 0 2
61781: NOT
61782: OR
61783: PUSH
61784: LD_VAR 0 4
61788: NOT
61789: OR
61790: IFFALSE 61794
// exit ;
61792: GO 61983
// while 1 do
61794: LD_INT 1
61796: IFFALSE 61983
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61798: LD_ADDR_VAR 0 9
61802: PUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_INT 1
61810: PPUSH
61811: CALL_OW 287
61815: PUSH
61816: LD_INT 10
61818: MUL
61819: ST_TO_ADDR
// r := rate / 10 ;
61820: LD_ADDR_VAR 0 7
61824: PUSH
61825: LD_VAR 0 2
61829: PUSH
61830: LD_INT 10
61832: DIVREAL
61833: ST_TO_ADDR
// time := 1 1$00 ;
61834: LD_ADDR_VAR 0 8
61838: PUSH
61839: LD_INT 2100
61841: ST_TO_ADDR
// if amount < min then
61842: LD_VAR 0 9
61846: PUSH
61847: LD_VAR 0 3
61851: LESS
61852: IFFALSE 61870
// r := r * 2 else
61854: LD_ADDR_VAR 0 7
61858: PUSH
61859: LD_VAR 0 7
61863: PUSH
61864: LD_INT 2
61866: MUL
61867: ST_TO_ADDR
61868: GO 61896
// if amount > max then
61870: LD_VAR 0 9
61874: PUSH
61875: LD_VAR 0 4
61879: GREATER
61880: IFFALSE 61896
// r := r / 2 ;
61882: LD_ADDR_VAR 0 7
61886: PUSH
61887: LD_VAR 0 7
61891: PUSH
61892: LD_INT 2
61894: DIVREAL
61895: ST_TO_ADDR
// time := time / r ;
61896: LD_ADDR_VAR 0 8
61900: PUSH
61901: LD_VAR 0 8
61905: PUSH
61906: LD_VAR 0 7
61910: DIVREAL
61911: ST_TO_ADDR
// if time < 0 then
61912: LD_VAR 0 8
61916: PUSH
61917: LD_INT 0
61919: LESS
61920: IFFALSE 61937
// time := time * - 1 ;
61922: LD_ADDR_VAR 0 8
61926: PUSH
61927: LD_VAR 0 8
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: MUL
61936: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61937: LD_VAR 0 8
61941: PUSH
61942: LD_INT 35
61944: PPUSH
61945: LD_INT 875
61947: PPUSH
61948: CALL_OW 12
61952: PLUS
61953: PPUSH
61954: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61958: LD_INT 1
61960: PPUSH
61961: LD_INT 5
61963: PPUSH
61964: CALL_OW 12
61968: PPUSH
61969: LD_VAR 0 1
61973: PPUSH
61974: LD_INT 1
61976: PPUSH
61977: CALL_OW 55
// end ;
61981: GO 61794
// end ;
61983: LD_VAR 0 5
61987: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
61993: PPUSH
61994: PPUSH
61995: PPUSH
61996: PPUSH
61997: PPUSH
// if not turrets or not factories then
61998: LD_VAR 0 1
62002: NOT
62003: PUSH
62004: LD_VAR 0 2
62008: NOT
62009: OR
62010: IFFALSE 62014
// exit ;
62012: GO 62321
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62014: LD_ADDR_VAR 0 10
62018: PUSH
62019: LD_INT 5
62021: PUSH
62022: LD_INT 6
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 4
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 5
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 24
62056: PUSH
62057: LD_INT 25
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 23
62066: PUSH
62067: LD_INT 27
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 42
62080: PUSH
62081: LD_INT 43
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 44
62090: PUSH
62091: LD_INT 46
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 45
62100: PUSH
62101: LD_INT 47
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// result := [ ] ;
62118: LD_ADDR_VAR 0 3
62122: PUSH
62123: EMPTY
62124: ST_TO_ADDR
// for i in turrets do
62125: LD_ADDR_VAR 0 4
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: FOR_IN
62136: IFFALSE 62319
// begin nat := GetNation ( i ) ;
62138: LD_ADDR_VAR 0 7
62142: PUSH
62143: LD_VAR 0 4
62147: PPUSH
62148: CALL_OW 248
62152: ST_TO_ADDR
// weapon := 0 ;
62153: LD_ADDR_VAR 0 8
62157: PUSH
62158: LD_INT 0
62160: ST_TO_ADDR
// if not nat then
62161: LD_VAR 0 7
62165: NOT
62166: IFFALSE 62170
// continue ;
62168: GO 62135
// for j in list [ nat ] do
62170: LD_ADDR_VAR 0 5
62174: PUSH
62175: LD_VAR 0 10
62179: PUSH
62180: LD_VAR 0 7
62184: ARRAY
62185: PUSH
62186: FOR_IN
62187: IFFALSE 62228
// if GetBWeapon ( i ) = j [ 1 ] then
62189: LD_VAR 0 4
62193: PPUSH
62194: CALL_OW 269
62198: PUSH
62199: LD_VAR 0 5
62203: PUSH
62204: LD_INT 1
62206: ARRAY
62207: EQUAL
62208: IFFALSE 62226
// begin weapon := j [ 2 ] ;
62210: LD_ADDR_VAR 0 8
62214: PUSH
62215: LD_VAR 0 5
62219: PUSH
62220: LD_INT 2
62222: ARRAY
62223: ST_TO_ADDR
// break ;
62224: GO 62228
// end ;
62226: GO 62186
62228: POP
62229: POP
// if not weapon then
62230: LD_VAR 0 8
62234: NOT
62235: IFFALSE 62239
// continue ;
62237: GO 62135
// for k in factories do
62239: LD_ADDR_VAR 0 6
62243: PUSH
62244: LD_VAR 0 2
62248: PUSH
62249: FOR_IN
62250: IFFALSE 62315
// begin weapons := AvailableWeaponList ( k ) ;
62252: LD_ADDR_VAR 0 9
62256: PUSH
62257: LD_VAR 0 6
62261: PPUSH
62262: CALL_OW 478
62266: ST_TO_ADDR
// if not weapons then
62267: LD_VAR 0 9
62271: NOT
62272: IFFALSE 62276
// continue ;
62274: GO 62249
// if weapon in weapons then
62276: LD_VAR 0 8
62280: PUSH
62281: LD_VAR 0 9
62285: IN
62286: IFFALSE 62313
// begin result := [ i , weapon ] ;
62288: LD_ADDR_VAR 0 3
62292: PUSH
62293: LD_VAR 0 4
62297: PUSH
62298: LD_VAR 0 8
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// exit ;
62307: POP
62308: POP
62309: POP
62310: POP
62311: GO 62321
// end ; end ;
62313: GO 62249
62315: POP
62316: POP
// end ;
62317: GO 62135
62319: POP
62320: POP
// end ;
62321: LD_VAR 0 3
62325: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62326: LD_INT 0
62328: PPUSH
// if not side or side > 8 then
62329: LD_VAR 0 3
62333: NOT
62334: PUSH
62335: LD_VAR 0 3
62339: PUSH
62340: LD_INT 8
62342: GREATER
62343: OR
62344: IFFALSE 62348
// exit ;
62346: GO 62407
// if not range then
62348: LD_VAR 0 4
62352: NOT
62353: IFFALSE 62364
// range := - 12 ;
62355: LD_ADDR_VAR 0 4
62359: PUSH
62360: LD_INT 12
62362: NEG
62363: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62364: LD_VAR 0 1
62368: PPUSH
62369: LD_VAR 0 2
62373: PPUSH
62374: LD_VAR 0 3
62378: PPUSH
62379: LD_VAR 0 4
62383: PPUSH
62384: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62388: LD_VAR 0 1
62392: PPUSH
62393: LD_VAR 0 2
62397: PPUSH
62398: LD_VAR 0 3
62402: PPUSH
62403: CALL_OW 331
// end ;
62407: LD_VAR 0 5
62411: RET
// export function Video ( mode ) ; begin
62412: LD_INT 0
62414: PPUSH
// ingame_video = mode ;
62415: LD_ADDR_OWVAR 52
62419: PUSH
62420: LD_VAR 0 1
62424: ST_TO_ADDR
// interface_hidden = mode ;
62425: LD_ADDR_OWVAR 54
62429: PUSH
62430: LD_VAR 0 1
62434: ST_TO_ADDR
// end ;
62435: LD_VAR 0 2
62439: RET
// export function Join ( array , element ) ; begin
62440: LD_INT 0
62442: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62443: LD_ADDR_VAR 0 3
62447: PUSH
62448: LD_VAR 0 1
62452: PPUSH
62453: LD_VAR 0 1
62457: PUSH
62458: LD_INT 1
62460: PLUS
62461: PPUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: CALL_OW 1
62471: ST_TO_ADDR
// end ;
62472: LD_VAR 0 3
62476: RET
// export function JoinUnion ( array , element ) ; begin
62477: LD_INT 0
62479: PPUSH
// result := array union element ;
62480: LD_ADDR_VAR 0 3
62484: PUSH
62485: LD_VAR 0 1
62489: PUSH
62490: LD_VAR 0 2
62494: UNION
62495: ST_TO_ADDR
// end ;
62496: LD_VAR 0 3
62500: RET
// export function GetBehemoths ( side ) ; begin
62501: LD_INT 0
62503: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62504: LD_ADDR_VAR 0 2
62508: PUSH
62509: LD_INT 22
62511: PUSH
62512: LD_VAR 0 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 31
62523: PUSH
62524: LD_INT 25
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PPUSH
62535: CALL_OW 69
62539: ST_TO_ADDR
// end ;
62540: LD_VAR 0 2
62544: RET
// export function Shuffle ( array ) ; var i , index ; begin
62545: LD_INT 0
62547: PPUSH
62548: PPUSH
62549: PPUSH
// result := [ ] ;
62550: LD_ADDR_VAR 0 2
62554: PUSH
62555: EMPTY
62556: ST_TO_ADDR
// if not array then
62557: LD_VAR 0 1
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62665
// Randomize ;
62566: CALL_OW 10
// for i = array downto 1 do
62570: LD_ADDR_VAR 0 3
62574: PUSH
62575: DOUBLE
62576: LD_VAR 0 1
62580: INC
62581: ST_TO_ADDR
62582: LD_INT 1
62584: PUSH
62585: FOR_DOWNTO
62586: IFFALSE 62663
// begin index := rand ( 1 , array ) ;
62588: LD_ADDR_VAR 0 4
62592: PUSH
62593: LD_INT 1
62595: PPUSH
62596: LD_VAR 0 1
62600: PPUSH
62601: CALL_OW 12
62605: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62606: LD_ADDR_VAR 0 2
62610: PUSH
62611: LD_VAR 0 2
62615: PPUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 1
62623: PLUS
62624: PPUSH
62625: LD_VAR 0 1
62629: PUSH
62630: LD_VAR 0 4
62634: ARRAY
62635: PPUSH
62636: CALL_OW 2
62640: ST_TO_ADDR
// array := Delete ( array , index ) ;
62641: LD_ADDR_VAR 0 1
62645: PUSH
62646: LD_VAR 0 1
62650: PPUSH
62651: LD_VAR 0 4
62655: PPUSH
62656: CALL_OW 3
62660: ST_TO_ADDR
// end ;
62661: GO 62585
62663: POP
62664: POP
// end ;
62665: LD_VAR 0 2
62669: RET
// export function GetBaseMaterials ( base ) ; begin
62670: LD_INT 0
62672: PPUSH
// result := [ 0 , 0 , 0 ] ;
62673: LD_ADDR_VAR 0 2
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// if not base then
62692: LD_VAR 0 1
62696: NOT
62697: IFFALSE 62701
// exit ;
62699: GO 62750
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62701: LD_ADDR_VAR 0 2
62705: PUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_INT 1
62713: PPUSH
62714: CALL_OW 275
62718: PUSH
62719: LD_VAR 0 1
62723: PPUSH
62724: LD_INT 2
62726: PPUSH
62727: CALL_OW 275
62731: PUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: LD_INT 3
62739: PPUSH
62740: CALL_OW 275
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// end ;
62750: LD_VAR 0 2
62754: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62755: LD_INT 0
62757: PPUSH
62758: PPUSH
// result := array ;
62759: LD_ADDR_VAR 0 3
62763: PUSH
62764: LD_VAR 0 1
62768: ST_TO_ADDR
// if size >= result then
62769: LD_VAR 0 2
62773: PUSH
62774: LD_VAR 0 3
62778: GREATEREQUAL
62779: IFFALSE 62783
// exit ;
62781: GO 62833
// if size then
62783: LD_VAR 0 2
62787: IFFALSE 62833
// for i := array downto size do
62789: LD_ADDR_VAR 0 4
62793: PUSH
62794: DOUBLE
62795: LD_VAR 0 1
62799: INC
62800: ST_TO_ADDR
62801: LD_VAR 0 2
62805: PUSH
62806: FOR_DOWNTO
62807: IFFALSE 62831
// result := Delete ( result , result ) ;
62809: LD_ADDR_VAR 0 3
62813: PUSH
62814: LD_VAR 0 3
62818: PPUSH
62819: LD_VAR 0 3
62823: PPUSH
62824: CALL_OW 3
62828: ST_TO_ADDR
62829: GO 62806
62831: POP
62832: POP
// end ;
62833: LD_VAR 0 3
62837: RET
// export function ComExit ( unit ) ; var tmp ; begin
62838: LD_INT 0
62840: PPUSH
62841: PPUSH
// if not IsInUnit ( unit ) then
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 310
62851: NOT
62852: IFFALSE 62856
// exit ;
62854: GO 62916
// tmp := IsInUnit ( unit ) ;
62856: LD_ADDR_VAR 0 3
62860: PUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 310
62870: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62871: LD_VAR 0 3
62875: PPUSH
62876: CALL_OW 247
62880: PUSH
62881: LD_INT 2
62883: EQUAL
62884: IFFALSE 62897
// ComExitVehicle ( unit ) else
62886: LD_VAR 0 1
62890: PPUSH
62891: CALL_OW 121
62895: GO 62906
// ComExitBuilding ( unit ) ;
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 122
// result := tmp ;
62906: LD_ADDR_VAR 0 2
62910: PUSH
62911: LD_VAR 0 3
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 2
62920: RET
// export function ComExitAll ( units ) ; var i ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
// if not units then
62925: LD_VAR 0 1
62929: NOT
62930: IFFALSE 62934
// exit ;
62932: GO 62960
// for i in units do
62934: LD_ADDR_VAR 0 3
62938: PUSH
62939: LD_VAR 0 1
62943: PUSH
62944: FOR_IN
62945: IFFALSE 62958
// ComExit ( i ) ;
62947: LD_VAR 0 3
62951: PPUSH
62952: CALL 62838 0 1
62956: GO 62944
62958: POP
62959: POP
// end ;
62960: LD_VAR 0 2
62964: RET
// export function ResetHc ; begin
62965: LD_INT 0
62967: PPUSH
// InitHc ;
62968: CALL_OW 19
// hc_importance := 0 ;
62972: LD_ADDR_OWVAR 32
62976: PUSH
62977: LD_INT 0
62979: ST_TO_ADDR
// end ;
62980: LD_VAR 0 1
62984: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62985: LD_INT 0
62987: PPUSH
62988: PPUSH
62989: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62990: LD_ADDR_VAR 0 6
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_VAR 0 3
63004: PLUS
63005: PUSH
63006: LD_INT 2
63008: DIV
63009: ST_TO_ADDR
// if _x < 0 then
63010: LD_VAR 0 6
63014: PUSH
63015: LD_INT 0
63017: LESS
63018: IFFALSE 63035
// _x := _x * - 1 ;
63020: LD_ADDR_VAR 0 6
63024: PUSH
63025: LD_VAR 0 6
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: MUL
63034: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63035: LD_ADDR_VAR 0 7
63039: PUSH
63040: LD_VAR 0 2
63044: PUSH
63045: LD_VAR 0 4
63049: PLUS
63050: PUSH
63051: LD_INT 2
63053: DIV
63054: ST_TO_ADDR
// if _y < 0 then
63055: LD_VAR 0 7
63059: PUSH
63060: LD_INT 0
63062: LESS
63063: IFFALSE 63080
// _y := _y * - 1 ;
63065: LD_ADDR_VAR 0 7
63069: PUSH
63070: LD_VAR 0 7
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: MUL
63079: ST_TO_ADDR
// result := [ _x , _y ] ;
63080: LD_ADDR_VAR 0 5
63084: PUSH
63085: LD_VAR 0 6
63089: PUSH
63090: LD_VAR 0 7
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: ST_TO_ADDR
// end ;
63099: LD_VAR 0 5
63103: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63104: LD_INT 0
63106: PPUSH
63107: PPUSH
63108: PPUSH
63109: PPUSH
// task := GetTaskList ( unit ) ;
63110: LD_ADDR_VAR 0 7
63114: PUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 437
63124: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63125: LD_VAR 0 7
63129: NOT
63130: PUSH
63131: LD_VAR 0 1
63135: PPUSH
63136: LD_VAR 0 2
63140: PPUSH
63141: CALL_OW 308
63145: NOT
63146: AND
63147: IFFALSE 63151
// exit ;
63149: GO 63269
// if IsInArea ( unit , area ) then
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_VAR 0 2
63160: PPUSH
63161: CALL_OW 308
63165: IFFALSE 63183
// begin ComMoveToArea ( unit , goAway ) ;
63167: LD_VAR 0 1
63171: PPUSH
63172: LD_VAR 0 3
63176: PPUSH
63177: CALL_OW 113
// exit ;
63181: GO 63269
// end ; if task [ 1 ] [ 1 ] <> M then
63183: LD_VAR 0 7
63187: PUSH
63188: LD_INT 1
63190: ARRAY
63191: PUSH
63192: LD_INT 1
63194: ARRAY
63195: PUSH
63196: LD_STRING M
63198: NONEQUAL
63199: IFFALSE 63203
// exit ;
63201: GO 63269
// x := task [ 1 ] [ 2 ] ;
63203: LD_ADDR_VAR 0 5
63207: PUSH
63208: LD_VAR 0 7
63212: PUSH
63213: LD_INT 1
63215: ARRAY
63216: PUSH
63217: LD_INT 2
63219: ARRAY
63220: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63221: LD_ADDR_VAR 0 6
63225: PUSH
63226: LD_VAR 0 7
63230: PUSH
63231: LD_INT 1
63233: ARRAY
63234: PUSH
63235: LD_INT 3
63237: ARRAY
63238: ST_TO_ADDR
// if InArea ( x , y , area ) then
63239: LD_VAR 0 5
63243: PPUSH
63244: LD_VAR 0 6
63248: PPUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: CALL_OW 309
63258: IFFALSE 63269
// ComStop ( unit ) ;
63260: LD_VAR 0 1
63264: PPUSH
63265: CALL_OW 141
// end ;
63269: LD_VAR 0 4
63273: RET
// export function Abs ( value ) ; begin
63274: LD_INT 0
63276: PPUSH
// result := value ;
63277: LD_ADDR_VAR 0 2
63281: PUSH
63282: LD_VAR 0 1
63286: ST_TO_ADDR
// if value < 0 then
63287: LD_VAR 0 1
63291: PUSH
63292: LD_INT 0
63294: LESS
63295: IFFALSE 63312
// result := value * - 1 ;
63297: LD_ADDR_VAR 0 2
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: MUL
63311: ST_TO_ADDR
// end ;
63312: LD_VAR 0 2
63316: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63317: LD_INT 0
63319: PPUSH
63320: PPUSH
63321: PPUSH
63322: PPUSH
63323: PPUSH
63324: PPUSH
63325: PPUSH
63326: PPUSH
// if not unit or not building then
63327: LD_VAR 0 1
63331: NOT
63332: PUSH
63333: LD_VAR 0 2
63337: NOT
63338: OR
63339: IFFALSE 63343
// exit ;
63341: GO 63569
// x := GetX ( building ) ;
63343: LD_ADDR_VAR 0 4
63347: PUSH
63348: LD_VAR 0 2
63352: PPUSH
63353: CALL_OW 250
63357: ST_TO_ADDR
// y := GetY ( building ) ;
63358: LD_ADDR_VAR 0 6
63362: PUSH
63363: LD_VAR 0 2
63367: PPUSH
63368: CALL_OW 251
63372: ST_TO_ADDR
// d := GetDir ( building ) ;
63373: LD_ADDR_VAR 0 8
63377: PUSH
63378: LD_VAR 0 2
63382: PPUSH
63383: CALL_OW 254
63387: ST_TO_ADDR
// r := 4 ;
63388: LD_ADDR_VAR 0 9
63392: PUSH
63393: LD_INT 4
63395: ST_TO_ADDR
// for i := 1 to 5 do
63396: LD_ADDR_VAR 0 10
63400: PUSH
63401: DOUBLE
63402: LD_INT 1
63404: DEC
63405: ST_TO_ADDR
63406: LD_INT 5
63408: PUSH
63409: FOR_TO
63410: IFFALSE 63567
// begin _x := ShiftX ( x , d , r + i ) ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_VAR 0 4
63421: PPUSH
63422: LD_VAR 0 8
63426: PPUSH
63427: LD_VAR 0 9
63431: PUSH
63432: LD_VAR 0 10
63436: PLUS
63437: PPUSH
63438: CALL_OW 272
63442: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63443: LD_ADDR_VAR 0 7
63447: PUSH
63448: LD_VAR 0 6
63452: PPUSH
63453: LD_VAR 0 8
63457: PPUSH
63458: LD_VAR 0 9
63462: PUSH
63463: LD_VAR 0 10
63467: PLUS
63468: PPUSH
63469: CALL_OW 273
63473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63474: LD_VAR 0 5
63478: PPUSH
63479: LD_VAR 0 7
63483: PPUSH
63484: CALL_OW 488
63488: PUSH
63489: LD_VAR 0 5
63493: PPUSH
63494: LD_VAR 0 7
63498: PPUSH
63499: CALL_OW 428
63503: PPUSH
63504: CALL_OW 247
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: IN
63519: NOT
63520: AND
63521: IFFALSE 63565
// begin ComMoveXY ( unit , _x , _y ) ;
63523: LD_VAR 0 1
63527: PPUSH
63528: LD_VAR 0 5
63532: PPUSH
63533: LD_VAR 0 7
63537: PPUSH
63538: CALL_OW 111
// result := [ _x , _y ] ;
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_VAR 0 5
63551: PUSH
63552: LD_VAR 0 7
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// exit ;
63561: POP
63562: POP
63563: GO 63569
// end ; end ;
63565: GO 63409
63567: POP
63568: POP
// end ;
63569: LD_VAR 0 3
63573: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
63578: PPUSH
// result := 0 ;
63579: LD_ADDR_VAR 0 3
63583: PUSH
63584: LD_INT 0
63586: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63587: LD_VAR 0 1
63591: PUSH
63592: LD_INT 0
63594: LESS
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_INT 8
63603: GREATER
63604: OR
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_INT 0
63613: LESS
63614: OR
63615: PUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_INT 8
63623: GREATER
63624: OR
63625: IFFALSE 63629
// exit ;
63627: GO 63704
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63629: LD_ADDR_VAR 0 4
63633: PUSH
63634: LD_INT 22
63636: PUSH
63637: LD_VAR 0 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PPUSH
63646: CALL_OW 69
63650: PUSH
63651: FOR_IN
63652: IFFALSE 63702
// begin un := UnitShoot ( i ) ;
63654: LD_ADDR_VAR 0 5
63658: PUSH
63659: LD_VAR 0 4
63663: PPUSH
63664: CALL_OW 504
63668: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63669: LD_VAR 0 5
63673: PPUSH
63674: CALL_OW 255
63678: PUSH
63679: LD_VAR 0 1
63683: EQUAL
63684: IFFALSE 63700
// begin result := un ;
63686: LD_ADDR_VAR 0 3
63690: PUSH
63691: LD_VAR 0 5
63695: ST_TO_ADDR
// exit ;
63696: POP
63697: POP
63698: GO 63704
// end ; end ;
63700: GO 63651
63702: POP
63703: POP
// end ;
63704: LD_VAR 0 3
63708: RET
// export function GetCargoBay ( units ) ; begin
63709: LD_INT 0
63711: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63712: LD_ADDR_VAR 0 2
63716: PUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: LD_INT 2
63724: PUSH
63725: LD_INT 34
63727: PUSH
63728: LD_INT 12
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 34
63737: PUSH
63738: LD_INT 51
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 34
63747: PUSH
63748: LD_INT 32
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 34
63757: PUSH
63758: LD_INT 89
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: PPUSH
63772: CALL_OW 72
63776: ST_TO_ADDR
// end ;
63777: LD_VAR 0 2
63781: RET
// export function Negate ( value ) ; begin
63782: LD_INT 0
63784: PPUSH
// result := not value ;
63785: LD_ADDR_VAR 0 2
63789: PUSH
63790: LD_VAR 0 1
63794: NOT
63795: ST_TO_ADDR
// end ;
63796: LD_VAR 0 2
63800: RET
// export function Inc ( value ) ; begin
63801: LD_INT 0
63803: PPUSH
// result := value + 1 ;
63804: LD_ADDR_VAR 0 2
63808: PUSH
63809: LD_VAR 0 1
63813: PUSH
63814: LD_INT 1
63816: PLUS
63817: ST_TO_ADDR
// end ;
63818: LD_VAR 0 2
63822: RET
// export function Dec ( value ) ; begin
63823: LD_INT 0
63825: PPUSH
// result := value - 1 ;
63826: LD_ADDR_VAR 0 2
63830: PUSH
63831: LD_VAR 0 1
63835: PUSH
63836: LD_INT 1
63838: MINUS
63839: ST_TO_ADDR
// end ;
63840: LD_VAR 0 2
63844: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63845: LD_INT 0
63847: PPUSH
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63855: LD_VAR 0 1
63859: PPUSH
63860: LD_VAR 0 2
63864: PPUSH
63865: CALL_OW 488
63869: NOT
63870: PUSH
63871: LD_VAR 0 3
63875: PPUSH
63876: LD_VAR 0 4
63880: PPUSH
63881: CALL_OW 488
63885: NOT
63886: OR
63887: IFFALSE 63900
// begin result := - 1 ;
63889: LD_ADDR_VAR 0 5
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: ST_TO_ADDR
// exit ;
63898: GO 64135
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63900: LD_ADDR_VAR 0 12
63904: PUSH
63905: LD_VAR 0 1
63909: PPUSH
63910: LD_VAR 0 2
63914: PPUSH
63915: LD_VAR 0 3
63919: PPUSH
63920: LD_VAR 0 4
63924: PPUSH
63925: CALL 62985 0 4
63929: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63930: LD_ADDR_VAR 0 11
63934: PUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: LD_VAR 0 12
63949: PUSH
63950: LD_INT 1
63952: ARRAY
63953: PPUSH
63954: LD_VAR 0 12
63958: PUSH
63959: LD_INT 2
63961: ARRAY
63962: PPUSH
63963: CALL_OW 298
63967: ST_TO_ADDR
// distance := 9999 ;
63968: LD_ADDR_VAR 0 10
63972: PUSH
63973: LD_INT 9999
63975: ST_TO_ADDR
// for i := 0 to 5 do
63976: LD_ADDR_VAR 0 6
63980: PUSH
63981: DOUBLE
63982: LD_INT 0
63984: DEC
63985: ST_TO_ADDR
63986: LD_INT 5
63988: PUSH
63989: FOR_TO
63990: IFFALSE 64133
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63992: LD_ADDR_VAR 0 7
63996: PUSH
63997: LD_VAR 0 1
64001: PPUSH
64002: LD_VAR 0 6
64006: PPUSH
64007: LD_VAR 0 11
64011: PPUSH
64012: CALL_OW 272
64016: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64017: LD_ADDR_VAR 0 8
64021: PUSH
64022: LD_VAR 0 2
64026: PPUSH
64027: LD_VAR 0 6
64031: PPUSH
64032: LD_VAR 0 11
64036: PPUSH
64037: CALL_OW 273
64041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64042: LD_VAR 0 7
64046: PPUSH
64047: LD_VAR 0 8
64051: PPUSH
64052: CALL_OW 488
64056: NOT
64057: IFFALSE 64061
// continue ;
64059: GO 63989
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64061: LD_ADDR_VAR 0 9
64065: PUSH
64066: LD_VAR 0 12
64070: PUSH
64071: LD_INT 1
64073: ARRAY
64074: PPUSH
64075: LD_VAR 0 12
64079: PUSH
64080: LD_INT 2
64082: ARRAY
64083: PPUSH
64084: LD_VAR 0 7
64088: PPUSH
64089: LD_VAR 0 8
64093: PPUSH
64094: CALL_OW 298
64098: ST_TO_ADDR
// if tmp < distance then
64099: LD_VAR 0 9
64103: PUSH
64104: LD_VAR 0 10
64108: LESS
64109: IFFALSE 64131
// begin result := i ;
64111: LD_ADDR_VAR 0 5
64115: PUSH
64116: LD_VAR 0 6
64120: ST_TO_ADDR
// distance := tmp ;
64121: LD_ADDR_VAR 0 10
64125: PUSH
64126: LD_VAR 0 9
64130: ST_TO_ADDR
// end ; end ;
64131: GO 63989
64133: POP
64134: POP
// end ;
64135: LD_VAR 0 5
64139: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64140: LD_INT 0
64142: PPUSH
64143: PPUSH
// if not driver or not IsInUnit ( driver ) then
64144: LD_VAR 0 1
64148: NOT
64149: PUSH
64150: LD_VAR 0 1
64154: PPUSH
64155: CALL_OW 310
64159: NOT
64160: OR
64161: IFFALSE 64165
// exit ;
64163: GO 64255
// vehicle := IsInUnit ( driver ) ;
64165: LD_ADDR_VAR 0 3
64169: PUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: CALL_OW 310
64179: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64180: LD_VAR 0 1
64184: PPUSH
64185: LD_STRING \
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: PUSH
64215: LD_STRING E
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_VAR 0 3
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PPUSH
64251: CALL_OW 446
// end ;
64255: LD_VAR 0 2
64259: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64260: LD_INT 0
64262: PPUSH
64263: PPUSH
// if not driver or not IsInUnit ( driver ) then
64264: LD_VAR 0 1
64268: NOT
64269: PUSH
64270: LD_VAR 0 1
64274: PPUSH
64275: CALL_OW 310
64279: NOT
64280: OR
64281: IFFALSE 64285
// exit ;
64283: GO 64375
// vehicle := IsInUnit ( driver ) ;
64285: LD_ADDR_VAR 0 3
64289: PUSH
64290: LD_VAR 0 1
64294: PPUSH
64295: CALL_OW 310
64299: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64300: LD_VAR 0 1
64304: PPUSH
64305: LD_STRING \
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: PUSH
64335: LD_STRING E
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_VAR 0 3
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PPUSH
64371: CALL_OW 447
// end ;
64375: LD_VAR 0 2
64379: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64380: LD_INT 0
64382: PPUSH
64383: PPUSH
64384: PPUSH
// tmp := [ ] ;
64385: LD_ADDR_VAR 0 5
64389: PUSH
64390: EMPTY
64391: ST_TO_ADDR
// for i in units do
64392: LD_ADDR_VAR 0 4
64396: PUSH
64397: LD_VAR 0 1
64401: PUSH
64402: FOR_IN
64403: IFFALSE 64441
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64405: LD_ADDR_VAR 0 5
64409: PUSH
64410: LD_VAR 0 5
64414: PPUSH
64415: LD_VAR 0 5
64419: PUSH
64420: LD_INT 1
64422: PLUS
64423: PPUSH
64424: LD_VAR 0 4
64428: PPUSH
64429: CALL_OW 256
64433: PPUSH
64434: CALL_OW 2
64438: ST_TO_ADDR
64439: GO 64402
64441: POP
64442: POP
// if not tmp then
64443: LD_VAR 0 5
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64500
// if asc then
64452: LD_VAR 0 2
64456: IFFALSE 64480
// result := SortListByListAsc ( units , tmp ) else
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_VAR 0 1
64467: PPUSH
64468: LD_VAR 0 5
64472: PPUSH
64473: CALL_OW 76
64477: ST_TO_ADDR
64478: GO 64500
// result := SortListByListDesc ( units , tmp ) ;
64480: LD_ADDR_VAR 0 3
64484: PUSH
64485: LD_VAR 0 1
64489: PPUSH
64490: LD_VAR 0 5
64494: PPUSH
64495: CALL_OW 77
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 3
64504: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64505: LD_INT 0
64507: PPUSH
64508: PPUSH
// task := GetTaskList ( mech ) ;
64509: LD_ADDR_VAR 0 4
64513: PUSH
64514: LD_VAR 0 1
64518: PPUSH
64519: CALL_OW 437
64523: ST_TO_ADDR
// if not task then
64524: LD_VAR 0 4
64528: NOT
64529: IFFALSE 64533
// exit ;
64531: GO 64575
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64533: LD_ADDR_VAR 0 3
64537: PUSH
64538: LD_VAR 0 4
64542: PUSH
64543: LD_INT 1
64545: ARRAY
64546: PUSH
64547: LD_INT 1
64549: ARRAY
64550: PUSH
64551: LD_STRING r
64553: EQUAL
64554: PUSH
64555: LD_VAR 0 4
64559: PUSH
64560: LD_INT 1
64562: ARRAY
64563: PUSH
64564: LD_INT 4
64566: ARRAY
64567: PUSH
64568: LD_VAR 0 2
64572: EQUAL
64573: AND
64574: ST_TO_ADDR
// end ;
64575: LD_VAR 0 3
64579: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64580: LD_INT 0
64582: PPUSH
// SetDir ( unit , d ) ;
64583: LD_VAR 0 1
64587: PPUSH
64588: LD_VAR 0 4
64592: PPUSH
64593: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_VAR 0 2
64606: PPUSH
64607: LD_VAR 0 3
64611: PPUSH
64612: LD_VAR 0 5
64616: PPUSH
64617: CALL_OW 48
// end ;
64621: LD_VAR 0 6
64625: RET
// export function ToNaturalNumber ( number ) ; begin
64626: LD_INT 0
64628: PPUSH
// result := number div 1 ;
64629: LD_ADDR_VAR 0 2
64633: PUSH
64634: LD_VAR 0 1
64638: PUSH
64639: LD_INT 1
64641: DIV
64642: ST_TO_ADDR
// if number < 0 then
64643: LD_VAR 0 1
64647: PUSH
64648: LD_INT 0
64650: LESS
64651: IFFALSE 64661
// result := 0 ;
64653: LD_ADDR_VAR 0 2
64657: PUSH
64658: LD_INT 0
64660: ST_TO_ADDR
// end ;
64661: LD_VAR 0 2
64665: RET
// export function SortByClass ( units , class ) ; var un ; begin
64666: LD_INT 0
64668: PPUSH
64669: PPUSH
// if not units or not class then
64670: LD_VAR 0 1
64674: NOT
64675: PUSH
64676: LD_VAR 0 2
64680: NOT
64681: OR
64682: IFFALSE 64686
// exit ;
64684: GO 64781
// result := [ ] ;
64686: LD_ADDR_VAR 0 3
64690: PUSH
64691: EMPTY
64692: ST_TO_ADDR
// for un in units do
64693: LD_ADDR_VAR 0 4
64697: PUSH
64698: LD_VAR 0 1
64702: PUSH
64703: FOR_IN
64704: IFFALSE 64779
// if GetClass ( un ) = class then
64706: LD_VAR 0 4
64710: PPUSH
64711: CALL_OW 257
64715: PUSH
64716: LD_VAR 0 2
64720: EQUAL
64721: IFFALSE 64748
// result := Insert ( result , 1 , un ) else
64723: LD_ADDR_VAR 0 3
64727: PUSH
64728: LD_VAR 0 3
64732: PPUSH
64733: LD_INT 1
64735: PPUSH
64736: LD_VAR 0 4
64740: PPUSH
64741: CALL_OW 2
64745: ST_TO_ADDR
64746: GO 64777
// result := Replace ( result , result + 1 , un ) ;
64748: LD_ADDR_VAR 0 3
64752: PUSH
64753: LD_VAR 0 3
64757: PPUSH
64758: LD_VAR 0 3
64762: PUSH
64763: LD_INT 1
64765: PLUS
64766: PPUSH
64767: LD_VAR 0 4
64771: PPUSH
64772: CALL_OW 1
64776: ST_TO_ADDR
64777: GO 64703
64779: POP
64780: POP
// end ;
64781: LD_VAR 0 3
64785: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64786: LD_INT 0
64788: PPUSH
64789: PPUSH
64790: PPUSH
64791: PPUSH
64792: PPUSH
64793: PPUSH
64794: PPUSH
// result := [ ] ;
64795: LD_ADDR_VAR 0 4
64799: PUSH
64800: EMPTY
64801: ST_TO_ADDR
// if x - r < 0 then
64802: LD_VAR 0 1
64806: PUSH
64807: LD_VAR 0 3
64811: MINUS
64812: PUSH
64813: LD_INT 0
64815: LESS
64816: IFFALSE 64828
// min_x := 0 else
64818: LD_ADDR_VAR 0 8
64822: PUSH
64823: LD_INT 0
64825: ST_TO_ADDR
64826: GO 64844
// min_x := x - r ;
64828: LD_ADDR_VAR 0 8
64832: PUSH
64833: LD_VAR 0 1
64837: PUSH
64838: LD_VAR 0 3
64842: MINUS
64843: ST_TO_ADDR
// if y - r < 0 then
64844: LD_VAR 0 2
64848: PUSH
64849: LD_VAR 0 3
64853: MINUS
64854: PUSH
64855: LD_INT 0
64857: LESS
64858: IFFALSE 64870
// min_y := 0 else
64860: LD_ADDR_VAR 0 7
64864: PUSH
64865: LD_INT 0
64867: ST_TO_ADDR
64868: GO 64886
// min_y := y - r ;
64870: LD_ADDR_VAR 0 7
64874: PUSH
64875: LD_VAR 0 2
64879: PUSH
64880: LD_VAR 0 3
64884: MINUS
64885: ST_TO_ADDR
// max_x := x + r ;
64886: LD_ADDR_VAR 0 9
64890: PUSH
64891: LD_VAR 0 1
64895: PUSH
64896: LD_VAR 0 3
64900: PLUS
64901: ST_TO_ADDR
// max_y := y + r ;
64902: LD_ADDR_VAR 0 10
64906: PUSH
64907: LD_VAR 0 2
64911: PUSH
64912: LD_VAR 0 3
64916: PLUS
64917: ST_TO_ADDR
// for _x = min_x to max_x do
64918: LD_ADDR_VAR 0 5
64922: PUSH
64923: DOUBLE
64924: LD_VAR 0 8
64928: DEC
64929: ST_TO_ADDR
64930: LD_VAR 0 9
64934: PUSH
64935: FOR_TO
64936: IFFALSE 65037
// for _y = min_y to max_y do
64938: LD_ADDR_VAR 0 6
64942: PUSH
64943: DOUBLE
64944: LD_VAR 0 7
64948: DEC
64949: ST_TO_ADDR
64950: LD_VAR 0 10
64954: PUSH
64955: FOR_TO
64956: IFFALSE 65033
// begin if not ValidHex ( _x , _y ) then
64958: LD_VAR 0 5
64962: PPUSH
64963: LD_VAR 0 6
64967: PPUSH
64968: CALL_OW 488
64972: NOT
64973: IFFALSE 64977
// continue ;
64975: GO 64955
// if GetResourceTypeXY ( _x , _y ) then
64977: LD_VAR 0 5
64981: PPUSH
64982: LD_VAR 0 6
64986: PPUSH
64987: CALL_OW 283
64991: IFFALSE 65031
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64993: LD_ADDR_VAR 0 4
64997: PUSH
64998: LD_VAR 0 4
65002: PPUSH
65003: LD_VAR 0 4
65007: PUSH
65008: LD_INT 1
65010: PLUS
65011: PPUSH
65012: LD_VAR 0 5
65016: PUSH
65017: LD_VAR 0 6
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PPUSH
65026: CALL_OW 1
65030: ST_TO_ADDR
// end ;
65031: GO 64955
65033: POP
65034: POP
65035: GO 64935
65037: POP
65038: POP
// end ;
65039: LD_VAR 0 4
65043: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65044: LD_INT 0
65046: PPUSH
65047: PPUSH
65048: PPUSH
65049: PPUSH
65050: PPUSH
65051: PPUSH
65052: PPUSH
65053: PPUSH
// if not units then
65054: LD_VAR 0 1
65058: NOT
65059: IFFALSE 65063
// exit ;
65061: GO 65587
// result := UnitFilter ( units , [ f_ok ] ) ;
65063: LD_ADDR_VAR 0 3
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: LD_INT 50
65075: PUSH
65076: EMPTY
65077: LIST
65078: PPUSH
65079: CALL_OW 72
65083: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65084: LD_ADDR_VAR 0 8
65088: PUSH
65089: LD_VAR 0 1
65093: PUSH
65094: LD_INT 1
65096: ARRAY
65097: PPUSH
65098: CALL_OW 255
65102: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65103: LD_ADDR_VAR 0 10
65107: PUSH
65108: LD_INT 29
65110: PUSH
65111: LD_INT 91
65113: PUSH
65114: LD_INT 49
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: ST_TO_ADDR
// if not result then
65122: LD_VAR 0 3
65126: NOT
65127: IFFALSE 65131
// exit ;
65129: GO 65587
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65131: LD_ADDR_VAR 0 5
65135: PUSH
65136: LD_INT 81
65138: PUSH
65139: LD_VAR 0 8
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PPUSH
65148: CALL_OW 69
65152: ST_TO_ADDR
// for i in result do
65153: LD_ADDR_VAR 0 4
65157: PUSH
65158: LD_VAR 0 3
65162: PUSH
65163: FOR_IN
65164: IFFALSE 65585
// begin tag := GetTag ( i ) + 1 ;
65166: LD_ADDR_VAR 0 9
65170: PUSH
65171: LD_VAR 0 4
65175: PPUSH
65176: CALL_OW 110
65180: PUSH
65181: LD_INT 1
65183: PLUS
65184: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65185: LD_ADDR_VAR 0 7
65189: PUSH
65190: LD_VAR 0 4
65194: PPUSH
65195: CALL_OW 250
65199: PPUSH
65200: LD_VAR 0 4
65204: PPUSH
65205: CALL_OW 251
65209: PPUSH
65210: LD_INT 6
65212: PPUSH
65213: CALL 64786 0 3
65217: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65218: LD_VAR 0 4
65222: PPUSH
65223: CALL_OW 247
65227: PUSH
65228: LD_INT 2
65230: EQUAL
65231: PUSH
65232: LD_VAR 0 7
65236: AND
65237: PUSH
65238: LD_VAR 0 4
65242: PPUSH
65243: CALL_OW 264
65247: PUSH
65248: LD_VAR 0 10
65252: IN
65253: NOT
65254: AND
65255: IFFALSE 65294
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65257: LD_VAR 0 4
65261: PPUSH
65262: LD_VAR 0 7
65266: PUSH
65267: LD_INT 1
65269: ARRAY
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PPUSH
65275: LD_VAR 0 7
65279: PUSH
65280: LD_INT 1
65282: ARRAY
65283: PUSH
65284: LD_INT 2
65286: ARRAY
65287: PPUSH
65288: CALL_OW 116
65292: GO 65583
// if path > tag then
65294: LD_VAR 0 2
65298: PUSH
65299: LD_VAR 0 9
65303: GREATER
65304: IFFALSE 65512
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65306: LD_ADDR_VAR 0 6
65310: PUSH
65311: LD_VAR 0 5
65315: PPUSH
65316: LD_INT 91
65318: PUSH
65319: LD_VAR 0 4
65323: PUSH
65324: LD_INT 8
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: PPUSH
65332: CALL_OW 72
65336: ST_TO_ADDR
// if nearEnemy then
65337: LD_VAR 0 6
65341: IFFALSE 65410
// begin if GetWeapon ( i ) = ru_time_lapser then
65343: LD_VAR 0 4
65347: PPUSH
65348: CALL_OW 264
65352: PUSH
65353: LD_INT 49
65355: EQUAL
65356: IFFALSE 65384
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65358: LD_VAR 0 4
65362: PPUSH
65363: LD_VAR 0 6
65367: PPUSH
65368: LD_VAR 0 4
65372: PPUSH
65373: CALL_OW 74
65377: PPUSH
65378: CALL_OW 112
65382: GO 65408
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65384: LD_VAR 0 4
65388: PPUSH
65389: LD_VAR 0 6
65393: PPUSH
65394: LD_VAR 0 4
65398: PPUSH
65399: CALL_OW 74
65403: PPUSH
65404: CALL_OW 115
// end else
65408: GO 65510
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65410: LD_VAR 0 4
65414: PPUSH
65415: LD_VAR 0 2
65419: PUSH
65420: LD_VAR 0 9
65424: ARRAY
65425: PUSH
65426: LD_INT 1
65428: ARRAY
65429: PPUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_VAR 0 9
65439: ARRAY
65440: PUSH
65441: LD_INT 2
65443: ARRAY
65444: PPUSH
65445: CALL_OW 297
65449: PUSH
65450: LD_INT 6
65452: GREATER
65453: IFFALSE 65496
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65455: LD_VAR 0 4
65459: PPUSH
65460: LD_VAR 0 2
65464: PUSH
65465: LD_VAR 0 9
65469: ARRAY
65470: PUSH
65471: LD_INT 1
65473: ARRAY
65474: PPUSH
65475: LD_VAR 0 2
65479: PUSH
65480: LD_VAR 0 9
65484: ARRAY
65485: PUSH
65486: LD_INT 2
65488: ARRAY
65489: PPUSH
65490: CALL_OW 114
65494: GO 65510
// SetTag ( i , tag ) ;
65496: LD_VAR 0 4
65500: PPUSH
65501: LD_VAR 0 9
65505: PPUSH
65506: CALL_OW 109
// end else
65510: GO 65583
// if enemy then
65512: LD_VAR 0 5
65516: IFFALSE 65583
// begin if GetWeapon ( i ) = ru_time_lapser then
65518: LD_VAR 0 4
65522: PPUSH
65523: CALL_OW 264
65527: PUSH
65528: LD_INT 49
65530: EQUAL
65531: IFFALSE 65559
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65533: LD_VAR 0 4
65537: PPUSH
65538: LD_VAR 0 5
65542: PPUSH
65543: LD_VAR 0 4
65547: PPUSH
65548: CALL_OW 74
65552: PPUSH
65553: CALL_OW 112
65557: GO 65583
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65559: LD_VAR 0 4
65563: PPUSH
65564: LD_VAR 0 5
65568: PPUSH
65569: LD_VAR 0 4
65573: PPUSH
65574: CALL_OW 74
65578: PPUSH
65579: CALL_OW 115
// end ; end ;
65583: GO 65163
65585: POP
65586: POP
// end ;
65587: LD_VAR 0 3
65591: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65592: LD_INT 0
65594: PPUSH
65595: PPUSH
65596: PPUSH
// if not unit or IsInUnit ( unit ) then
65597: LD_VAR 0 1
65601: NOT
65602: PUSH
65603: LD_VAR 0 1
65607: PPUSH
65608: CALL_OW 310
65612: OR
65613: IFFALSE 65617
// exit ;
65615: GO 65708
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65617: LD_ADDR_VAR 0 4
65621: PUSH
65622: LD_VAR 0 1
65626: PPUSH
65627: CALL_OW 250
65631: PPUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: LD_INT 1
65639: PPUSH
65640: CALL_OW 272
65644: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65645: LD_ADDR_VAR 0 5
65649: PUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: CALL_OW 251
65659: PPUSH
65660: LD_VAR 0 2
65664: PPUSH
65665: LD_INT 1
65667: PPUSH
65668: CALL_OW 273
65672: ST_TO_ADDR
// if ValidHex ( x , y ) then
65673: LD_VAR 0 4
65677: PPUSH
65678: LD_VAR 0 5
65682: PPUSH
65683: CALL_OW 488
65687: IFFALSE 65708
// ComTurnXY ( unit , x , y ) ;
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_VAR 0 4
65698: PPUSH
65699: LD_VAR 0 5
65703: PPUSH
65704: CALL_OW 118
// end ;
65708: LD_VAR 0 3
65712: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65713: LD_INT 0
65715: PPUSH
65716: PPUSH
// result := false ;
65717: LD_ADDR_VAR 0 3
65721: PUSH
65722: LD_INT 0
65724: ST_TO_ADDR
// if not units then
65725: LD_VAR 0 2
65729: NOT
65730: IFFALSE 65734
// exit ;
65732: GO 65779
// for i in units do
65734: LD_ADDR_VAR 0 4
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: FOR_IN
65745: IFFALSE 65777
// if See ( side , i ) then
65747: LD_VAR 0 1
65751: PPUSH
65752: LD_VAR 0 4
65756: PPUSH
65757: CALL_OW 292
65761: IFFALSE 65775
// begin result := true ;
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: LD_INT 1
65770: ST_TO_ADDR
// exit ;
65771: POP
65772: POP
65773: GO 65779
// end ;
65775: GO 65744
65777: POP
65778: POP
// end ;
65779: LD_VAR 0 3
65783: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65784: LD_INT 0
65786: PPUSH
65787: PPUSH
65788: PPUSH
65789: PPUSH
// if not unit or not points then
65790: LD_VAR 0 1
65794: NOT
65795: PUSH
65796: LD_VAR 0 2
65800: NOT
65801: OR
65802: IFFALSE 65806
// exit ;
65804: GO 65896
// dist := 99999 ;
65806: LD_ADDR_VAR 0 5
65810: PUSH
65811: LD_INT 99999
65813: ST_TO_ADDR
// for i in points do
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: LD_VAR 0 2
65823: PUSH
65824: FOR_IN
65825: IFFALSE 65894
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65827: LD_ADDR_VAR 0 6
65831: PUSH
65832: LD_VAR 0 1
65836: PPUSH
65837: LD_VAR 0 4
65841: PUSH
65842: LD_INT 1
65844: ARRAY
65845: PPUSH
65846: LD_VAR 0 4
65850: PUSH
65851: LD_INT 2
65853: ARRAY
65854: PPUSH
65855: CALL_OW 297
65859: ST_TO_ADDR
// if tmpDist < dist then
65860: LD_VAR 0 6
65864: PUSH
65865: LD_VAR 0 5
65869: LESS
65870: IFFALSE 65892
// begin result := i ;
65872: LD_ADDR_VAR 0 3
65876: PUSH
65877: LD_VAR 0 4
65881: ST_TO_ADDR
// dist := tmpDist ;
65882: LD_ADDR_VAR 0 5
65886: PUSH
65887: LD_VAR 0 6
65891: ST_TO_ADDR
// end ; end ;
65892: GO 65824
65894: POP
65895: POP
// end ;
65896: LD_VAR 0 3
65900: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65901: LD_INT 0
65903: PPUSH
// uc_side := side ;
65904: LD_ADDR_OWVAR 20
65908: PUSH
65909: LD_VAR 0 1
65913: ST_TO_ADDR
// uc_nation := 3 ;
65914: LD_ADDR_OWVAR 21
65918: PUSH
65919: LD_INT 3
65921: ST_TO_ADDR
// vc_chassis := 25 ;
65922: LD_ADDR_OWVAR 37
65926: PUSH
65927: LD_INT 25
65929: ST_TO_ADDR
// vc_engine := engine_siberite ;
65930: LD_ADDR_OWVAR 39
65934: PUSH
65935: LD_INT 3
65937: ST_TO_ADDR
// vc_control := control_computer ;
65938: LD_ADDR_OWVAR 38
65942: PUSH
65943: LD_INT 3
65945: ST_TO_ADDR
// vc_weapon := 59 ;
65946: LD_ADDR_OWVAR 40
65950: PUSH
65951: LD_INT 59
65953: ST_TO_ADDR
// result := CreateVehicle ;
65954: LD_ADDR_VAR 0 5
65958: PUSH
65959: CALL_OW 45
65963: ST_TO_ADDR
// SetDir ( result , d ) ;
65964: LD_VAR 0 5
65968: PPUSH
65969: LD_VAR 0 4
65973: PPUSH
65974: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65978: LD_VAR 0 5
65982: PPUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: LD_VAR 0 3
65992: PPUSH
65993: LD_INT 0
65995: PPUSH
65996: CALL_OW 48
// end ;
66000: LD_VAR 0 5
66004: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66005: LD_INT 0
66007: PPUSH
66008: PPUSH
66009: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66010: LD_ADDR_VAR 0 2
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66033: LD_VAR 0 1
66037: NOT
66038: PUSH
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 264
66048: PUSH
66049: LD_INT 12
66051: PUSH
66052: LD_INT 51
66054: PUSH
66055: LD_INT 32
66057: PUSH
66058: LD_INT 89
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: IN
66067: NOT
66068: OR
66069: IFFALSE 66073
// exit ;
66071: GO 66171
// for i := 1 to 3 do
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: DOUBLE
66079: LD_INT 1
66081: DEC
66082: ST_TO_ADDR
66083: LD_INT 3
66085: PUSH
66086: FOR_TO
66087: IFFALSE 66169
// begin tmp := GetCargo ( cargo , i ) ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: LD_VAR 0 3
66103: PPUSH
66104: CALL_OW 289
66108: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66109: LD_ADDR_VAR 0 2
66113: PUSH
66114: LD_VAR 0 2
66118: PPUSH
66119: LD_VAR 0 3
66123: PPUSH
66124: LD_VAR 0 4
66128: PPUSH
66129: CALL_OW 1
66133: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66134: LD_ADDR_VAR 0 2
66138: PUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: LD_INT 4
66146: PPUSH
66147: LD_VAR 0 2
66151: PUSH
66152: LD_INT 4
66154: ARRAY
66155: PUSH
66156: LD_VAR 0 4
66160: PLUS
66161: PPUSH
66162: CALL_OW 1
66166: ST_TO_ADDR
// end ;
66167: GO 66086
66169: POP
66170: POP
// end ;
66171: LD_VAR 0 2
66175: RET
// export function Length ( array ) ; begin
66176: LD_INT 0
66178: PPUSH
// result := array + 0 ;
66179: LD_ADDR_VAR 0 2
66183: PUSH
66184: LD_VAR 0 1
66188: PUSH
66189: LD_INT 0
66191: PLUS
66192: ST_TO_ADDR
// end ;
66193: LD_VAR 0 2
66197: RET
// export function PrepareArray ( array ) ; begin
66198: LD_INT 0
66200: PPUSH
// result := array diff 0 ;
66201: LD_ADDR_VAR 0 2
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_INT 0
66213: DIFF
66214: ST_TO_ADDR
// if not result [ 1 ] then
66215: LD_VAR 0 2
66219: PUSH
66220: LD_INT 1
66222: ARRAY
66223: NOT
66224: IFFALSE 66244
// result := Delete ( result , 1 ) ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: LD_VAR 0 2
66235: PPUSH
66236: LD_INT 1
66238: PPUSH
66239: CALL_OW 3
66243: ST_TO_ADDR
// end ; end_of_file
66244: LD_VAR 0 2
66248: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66249: LD_VAR 0 1
66253: PPUSH
66254: LD_VAR 0 2
66258: PPUSH
66259: LD_VAR 0 3
66263: PPUSH
66264: LD_VAR 0 4
66268: PPUSH
66269: LD_VAR 0 5
66273: PPUSH
66274: LD_VAR 0 6
66278: PPUSH
66279: CALL 5014 0 6
// end ;
66283: PPOPN 6
66285: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66286: LD_INT 0
66288: PPUSH
// begin if not units then
66289: LD_VAR 0 1
66293: NOT
66294: IFFALSE 66298
// exit ;
66296: GO 66298
// end ;
66298: PPOPN 7
66300: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66301: CALL 4985 0 0
// end ;
66305: PPOPN 1
66307: END
