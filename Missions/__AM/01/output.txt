// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export globalGameSaveCounter ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// every 0 0$1 do
4985: GO 4987
4987: DISABLE
// begin globalGameSaveCounter := 0 ;
4988: LD_ADDR_EXP 15
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4996: LD_STRING setGameSaveCounter(0)
4998: PPUSH
4999: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5003: LD_STRING initStreamRollete();
5005: PPUSH
5006: CALL_OW 559
// InitStreamMode ;
5010: CALL 6336 0 0
// DefineStreamItems ( false ) ;
5014: LD_INT 0
5016: PPUSH
5017: CALL 6800 0 1
// end ;
5021: END
// export function SOS_MapStart ( ) ; begin
5022: LD_INT 0
5024: PPUSH
// if streamModeActive then
5025: LD_EXP 16
5029: IFFALSE 5038
// DefineStreamItems ( true ) ;
5031: LD_INT 1
5033: PPUSH
5034: CALL 6800 0 1
// UpdateLuaVariables ( ) ;
5038: CALL 5055 0 0
// UpdateFactoryWaypoints ( ) ;
5042: CALL 19669 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5046: CALL 19926 0 0
// end ;
5050: LD_VAR 0 1
5054: RET
// function UpdateLuaVariables ( ) ; begin
5055: LD_INT 0
5057: PPUSH
// if globalGameSaveCounter then
5058: LD_EXP 15
5062: IFFALSE 5096
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_EXP 15
5073: PPUSH
5074: CALL 63899 0 1
5078: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5079: LD_STRING setGameSaveCounter(
5081: PUSH
5082: LD_EXP 15
5086: STR
5087: PUSH
5088: LD_STRING )
5090: STR
5091: PPUSH
5092: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5096: LD_STRING setGameDifficulty(
5098: PUSH
5099: LD_OWVAR 67
5103: STR
5104: PUSH
5105: LD_STRING )
5107: STR
5108: PPUSH
5109: CALL_OW 559
// end ;
5113: LD_VAR 0 1
5117: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5118: LD_INT 0
5120: PPUSH
// if p2 = stream_mode then
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 100
5128: EQUAL
5129: IFFALSE 6132
// begin if not StreamModeActive then
5131: LD_EXP 16
5135: NOT
5136: IFFALSE 5146
// StreamModeActive := true ;
5138: LD_ADDR_EXP 16
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 0 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: IFFALSE 5160
// InitStreamMode ;
5156: CALL 6336 0 0
// if p3 = 1 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 1
5167: EQUAL
5168: IFFALSE 5178
// sRocket := true ;
5170: LD_ADDR_EXP 21
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 2 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 2
5185: EQUAL
5186: IFFALSE 5196
// sSpeed := true ;
5188: LD_ADDR_EXP 20
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 3 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 3
5203: EQUAL
5204: IFFALSE 5214
// sEngine := true ;
5206: LD_ADDR_EXP 22
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 4 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 4
5221: EQUAL
5222: IFFALSE 5232
// sSpec := true ;
5224: LD_ADDR_EXP 19
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 5 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 5
5239: EQUAL
5240: IFFALSE 5250
// sLevel := true ;
5242: LD_ADDR_EXP 23
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 6 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: IFFALSE 5268
// sArmoury := true ;
5260: LD_ADDR_EXP 24
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 7 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 7
5275: EQUAL
5276: IFFALSE 5286
// sRadar := true ;
5278: LD_ADDR_EXP 25
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 8 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 8
5293: EQUAL
5294: IFFALSE 5304
// sBunker := true ;
5296: LD_ADDR_EXP 26
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 9 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 9
5311: EQUAL
5312: IFFALSE 5322
// sHack := true ;
5314: LD_ADDR_EXP 27
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 10 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 10
5329: EQUAL
5330: IFFALSE 5340
// sFire := true ;
5332: LD_ADDR_EXP 28
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if p3 = 11 then
5340: LD_VAR 0 3
5344: PUSH
5345: LD_INT 11
5347: EQUAL
5348: IFFALSE 5358
// sRefresh := true ;
5350: LD_ADDR_EXP 29
5354: PUSH
5355: LD_INT 1
5357: ST_TO_ADDR
// if p3 = 12 then
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 12
5365: EQUAL
5366: IFFALSE 5376
// sExp := true ;
5368: LD_ADDR_EXP 30
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if p3 = 13 then
5376: LD_VAR 0 3
5380: PUSH
5381: LD_INT 13
5383: EQUAL
5384: IFFALSE 5394
// sDepot := true ;
5386: LD_ADDR_EXP 31
5390: PUSH
5391: LD_INT 1
5393: ST_TO_ADDR
// if p3 = 14 then
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 14
5401: EQUAL
5402: IFFALSE 5412
// sFlag := true ;
5404: LD_ADDR_EXP 32
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// if p3 = 15 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_INT 15
5419: EQUAL
5420: IFFALSE 5430
// sKamikadze := true ;
5422: LD_ADDR_EXP 40
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// if p3 = 16 then
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 16
5437: EQUAL
5438: IFFALSE 5448
// sTroll := true ;
5440: LD_ADDR_EXP 41
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// if p3 = 17 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 17
5455: EQUAL
5456: IFFALSE 5466
// sSlow := true ;
5458: LD_ADDR_EXP 42
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// if p3 = 18 then
5466: LD_VAR 0 3
5470: PUSH
5471: LD_INT 18
5473: EQUAL
5474: IFFALSE 5484
// sLack := true ;
5476: LD_ADDR_EXP 43
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// if p3 = 19 then
5484: LD_VAR 0 3
5488: PUSH
5489: LD_INT 19
5491: EQUAL
5492: IFFALSE 5502
// sTank := true ;
5494: LD_ADDR_EXP 45
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// if p3 = 20 then
5502: LD_VAR 0 3
5506: PUSH
5507: LD_INT 20
5509: EQUAL
5510: IFFALSE 5520
// sRemote := true ;
5512: LD_ADDR_EXP 46
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// if p3 = 21 then
5520: LD_VAR 0 3
5524: PUSH
5525: LD_INT 21
5527: EQUAL
5528: IFFALSE 5538
// sPowell := true ;
5530: LD_ADDR_EXP 47
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// if p3 = 22 then
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 22
5545: EQUAL
5546: IFFALSE 5556
// sTeleport := true ;
5548: LD_ADDR_EXP 50
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if p3 = 23 then
5556: LD_VAR 0 3
5560: PUSH
5561: LD_INT 23
5563: EQUAL
5564: IFFALSE 5574
// sOilTower := true ;
5566: LD_ADDR_EXP 52
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// if p3 = 24 then
5574: LD_VAR 0 3
5578: PUSH
5579: LD_INT 24
5581: EQUAL
5582: IFFALSE 5592
// sShovel := true ;
5584: LD_ADDR_EXP 53
5588: PUSH
5589: LD_INT 1
5591: ST_TO_ADDR
// if p3 = 25 then
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 25
5599: EQUAL
5600: IFFALSE 5610
// sSheik := true ;
5602: LD_ADDR_EXP 54
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// if p3 = 26 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_INT 26
5617: EQUAL
5618: IFFALSE 5628
// sEarthquake := true ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// if p3 = 27 then
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 27
5635: EQUAL
5636: IFFALSE 5646
// sAI := true ;
5638: LD_ADDR_EXP 57
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// if p3 = 28 then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 28
5653: EQUAL
5654: IFFALSE 5664
// sCargo := true ;
5656: LD_ADDR_EXP 60
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// if p3 = 29 then
5664: LD_VAR 0 3
5668: PUSH
5669: LD_INT 29
5671: EQUAL
5672: IFFALSE 5682
// sDLaser := true ;
5674: LD_ADDR_EXP 61
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// if p3 = 30 then
5682: LD_VAR 0 3
5686: PUSH
5687: LD_INT 30
5689: EQUAL
5690: IFFALSE 5700
// sExchange := true ;
5692: LD_ADDR_EXP 62
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// if p3 = 31 then
5700: LD_VAR 0 3
5704: PUSH
5705: LD_INT 31
5707: EQUAL
5708: IFFALSE 5718
// sFac := true ;
5710: LD_ADDR_EXP 63
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// if p3 = 32 then
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 32
5725: EQUAL
5726: IFFALSE 5736
// sPower := true ;
5728: LD_ADDR_EXP 64
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// if p3 = 33 then
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 33
5743: EQUAL
5744: IFFALSE 5754
// sRandom := true ;
5746: LD_ADDR_EXP 65
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// if p3 = 34 then
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 34
5761: EQUAL
5762: IFFALSE 5772
// sShield := true ;
5764: LD_ADDR_EXP 66
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// if p3 = 35 then
5772: LD_VAR 0 3
5776: PUSH
5777: LD_INT 35
5779: EQUAL
5780: IFFALSE 5790
// sTime := true ;
5782: LD_ADDR_EXP 67
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// if p3 = 36 then
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 36
5797: EQUAL
5798: IFFALSE 5808
// sTools := true ;
5800: LD_ADDR_EXP 68
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// if p3 = 101 then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 101
5815: EQUAL
5816: IFFALSE 5826
// sSold := true ;
5818: LD_ADDR_EXP 33
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// if p3 = 102 then
5826: LD_VAR 0 3
5830: PUSH
5831: LD_INT 102
5833: EQUAL
5834: IFFALSE 5844
// sDiff := true ;
5836: LD_ADDR_EXP 34
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// if p3 = 103 then
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 103
5851: EQUAL
5852: IFFALSE 5862
// sFog := true ;
5854: LD_ADDR_EXP 37
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// if p3 = 104 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 104
5869: EQUAL
5870: IFFALSE 5880
// sReset := true ;
5872: LD_ADDR_EXP 38
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// if p3 = 105 then
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 105
5887: EQUAL
5888: IFFALSE 5898
// sSun := true ;
5890: LD_ADDR_EXP 39
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// if p3 = 106 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 106
5905: EQUAL
5906: IFFALSE 5916
// sTiger := true ;
5908: LD_ADDR_EXP 35
5912: PUSH
5913: LD_INT 1
5915: ST_TO_ADDR
// if p3 = 107 then
5916: LD_VAR 0 3
5920: PUSH
5921: LD_INT 107
5923: EQUAL
5924: IFFALSE 5934
// sBomb := true ;
5926: LD_ADDR_EXP 36
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// if p3 = 108 then
5934: LD_VAR 0 3
5938: PUSH
5939: LD_INT 108
5941: EQUAL
5942: IFFALSE 5952
// sWound := true ;
5944: LD_ADDR_EXP 44
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if p3 = 109 then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 109
5959: EQUAL
5960: IFFALSE 5970
// sBetray := true ;
5962: LD_ADDR_EXP 48
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// if p3 = 110 then
5970: LD_VAR 0 3
5974: PUSH
5975: LD_INT 110
5977: EQUAL
5978: IFFALSE 5988
// sContamin := true ;
5980: LD_ADDR_EXP 49
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// if p3 = 111 then
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 111
5995: EQUAL
5996: IFFALSE 6006
// sOil := true ;
5998: LD_ADDR_EXP 51
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if p3 = 112 then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 112
6013: EQUAL
6014: IFFALSE 6024
// sStu := true ;
6016: LD_ADDR_EXP 55
6020: PUSH
6021: LD_INT 1
6023: ST_TO_ADDR
// if p3 = 113 then
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 113
6031: EQUAL
6032: IFFALSE 6042
// sBazooka := true ;
6034: LD_ADDR_EXP 58
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if p3 = 114 then
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 114
6049: EQUAL
6050: IFFALSE 6060
// sMortar := true ;
6052: LD_ADDR_EXP 59
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// if p3 = 115 then
6060: LD_VAR 0 3
6064: PUSH
6065: LD_INT 115
6067: EQUAL
6068: IFFALSE 6078
// sRanger := true ;
6070: LD_ADDR_EXP 69
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// if p3 = 116 then
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 116
6085: EQUAL
6086: IFFALSE 6096
// sComputer := true ;
6088: LD_ADDR_EXP 70
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// if p3 = 117 then
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 117
6103: EQUAL
6104: IFFALSE 6114
// s30 := true ;
6106: LD_ADDR_EXP 71
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// if p3 = 118 then
6114: LD_VAR 0 3
6118: PUSH
6119: LD_INT 118
6121: EQUAL
6122: IFFALSE 6132
// s60 := true ;
6124: LD_ADDR_EXP 72
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// end ; if p2 = hack_mode then
6132: LD_VAR 0 2
6136: PUSH
6137: LD_INT 101
6139: EQUAL
6140: IFFALSE 6268
// begin case p3 of 1 :
6142: LD_VAR 0 3
6146: PUSH
6147: LD_INT 1
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6162
6155: POP
// hHackUnlimitedResources ; 2 :
6156: CALL 18415 0 0
6160: GO 6268
6162: LD_INT 2
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6177
6170: POP
// hHackSetLevel10 ; 3 :
6171: CALL 18548 0 0
6175: GO 6268
6177: LD_INT 3
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6192
6185: POP
// hHackSetLevel10YourUnits ; 4 :
6186: CALL 18633 0 0
6190: GO 6268
6192: LD_INT 4
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6207
6200: POP
// hHackInvincible ; 5 :
6201: CALL 19081 0 0
6205: GO 6268
6207: LD_INT 5
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6222
6215: POP
// hHackInvisible ; 6 :
6216: CALL 19192 0 0
6220: GO 6268
6222: LD_INT 6
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6230
6228: GO 6237
6230: POP
// hHackChangeYourSide ; 7 :
6231: CALL 19249 0 0
6235: GO 6268
6237: LD_INT 7
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6252
6245: POP
// hHackChangeUnitSide ; 8 :
6246: CALL 19291 0 0
6250: GO 6268
6252: LD_INT 8
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6267
6260: POP
// hHackFog ; end ;
6261: CALL 19392 0 0
6265: GO 6268
6267: POP
// end ; if p2 = game_save_mode then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 102
6275: EQUAL
6276: IFFALSE 6331
// begin if p3 = 1 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6298
// globalGameSaveCounter := p4 ;
6288: LD_ADDR_EXP 15
6292: PUSH
6293: LD_VAR 0 4
6297: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 2
6305: EQUAL
6306: PUSH
6307: LD_EXP 15
6311: AND
6312: IFFALSE 6331
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6314: LD_STRING setGameSaveCounter(
6316: PUSH
6317: LD_EXP 15
6321: STR
6322: PUSH
6323: LD_STRING )
6325: STR
6326: PPUSH
6327: CALL_OW 559
// end ; end ;
6331: LD_VAR 0 7
6335: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6336: LD_INT 0
6338: PPUSH
// streamModeActive := false ;
6339: LD_ADDR_EXP 16
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// normalCounter := 36 ;
6347: LD_ADDR_EXP 17
6351: PUSH
6352: LD_INT 36
6354: ST_TO_ADDR
// hardcoreCounter := 18 ;
6355: LD_ADDR_EXP 18
6359: PUSH
6360: LD_INT 18
6362: ST_TO_ADDR
// sRocket := false ;
6363: LD_ADDR_EXP 21
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sSpeed := false ;
6371: LD_ADDR_EXP 20
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sEngine := false ;
6379: LD_ADDR_EXP 22
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sSpec := false ;
6387: LD_ADDR_EXP 19
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sLevel := false ;
6395: LD_ADDR_EXP 23
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sArmoury := false ;
6403: LD_ADDR_EXP 24
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sRadar := false ;
6411: LD_ADDR_EXP 25
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sBunker := false ;
6419: LD_ADDR_EXP 26
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sHack := false ;
6427: LD_ADDR_EXP 27
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sFire := false ;
6435: LD_ADDR_EXP 28
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sRefresh := false ;
6443: LD_ADDR_EXP 29
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// sExp := false ;
6451: LD_ADDR_EXP 30
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// sDepot := false ;
6459: LD_ADDR_EXP 31
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// sFlag := false ;
6467: LD_ADDR_EXP 32
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// sKamikadze := false ;
6475: LD_ADDR_EXP 40
6479: PUSH
6480: LD_INT 0
6482: ST_TO_ADDR
// sTroll := false ;
6483: LD_ADDR_EXP 41
6487: PUSH
6488: LD_INT 0
6490: ST_TO_ADDR
// sSlow := false ;
6491: LD_ADDR_EXP 42
6495: PUSH
6496: LD_INT 0
6498: ST_TO_ADDR
// sLack := false ;
6499: LD_ADDR_EXP 43
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// sTank := false ;
6507: LD_ADDR_EXP 45
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
// sRemote := false ;
6515: LD_ADDR_EXP 46
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// sPowell := false ;
6523: LD_ADDR_EXP 47
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// sTeleport := false ;
6531: LD_ADDR_EXP 50
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// sOilTower := false ;
6539: LD_ADDR_EXP 52
6543: PUSH
6544: LD_INT 0
6546: ST_TO_ADDR
// sShovel := false ;
6547: LD_ADDR_EXP 53
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
// sSheik := false ;
6555: LD_ADDR_EXP 54
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// sEarthquake := false ;
6563: LD_ADDR_EXP 56
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// sAI := false ;
6571: LD_ADDR_EXP 57
6575: PUSH
6576: LD_INT 0
6578: ST_TO_ADDR
// sCargo := false ;
6579: LD_ADDR_EXP 60
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// sDLaser := false ;
6587: LD_ADDR_EXP 61
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// sExchange := false ;
6595: LD_ADDR_EXP 62
6599: PUSH
6600: LD_INT 0
6602: ST_TO_ADDR
// sFac := false ;
6603: LD_ADDR_EXP 63
6607: PUSH
6608: LD_INT 0
6610: ST_TO_ADDR
// sPower := false ;
6611: LD_ADDR_EXP 64
6615: PUSH
6616: LD_INT 0
6618: ST_TO_ADDR
// sRandom := false ;
6619: LD_ADDR_EXP 65
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// sShield := false ;
6627: LD_ADDR_EXP 66
6631: PUSH
6632: LD_INT 0
6634: ST_TO_ADDR
// sTime := false ;
6635: LD_ADDR_EXP 67
6639: PUSH
6640: LD_INT 0
6642: ST_TO_ADDR
// sTools := false ;
6643: LD_ADDR_EXP 68
6647: PUSH
6648: LD_INT 0
6650: ST_TO_ADDR
// sSold := false ;
6651: LD_ADDR_EXP 33
6655: PUSH
6656: LD_INT 0
6658: ST_TO_ADDR
// sDiff := false ;
6659: LD_ADDR_EXP 34
6663: PUSH
6664: LD_INT 0
6666: ST_TO_ADDR
// sFog := false ;
6667: LD_ADDR_EXP 37
6671: PUSH
6672: LD_INT 0
6674: ST_TO_ADDR
// sReset := false ;
6675: LD_ADDR_EXP 38
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// sSun := false ;
6683: LD_ADDR_EXP 39
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// sTiger := false ;
6691: LD_ADDR_EXP 35
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// sBomb := false ;
6699: LD_ADDR_EXP 36
6703: PUSH
6704: LD_INT 0
6706: ST_TO_ADDR
// sWound := false ;
6707: LD_ADDR_EXP 44
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// sBetray := false ;
6715: LD_ADDR_EXP 48
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// sContamin := false ;
6723: LD_ADDR_EXP 49
6727: PUSH
6728: LD_INT 0
6730: ST_TO_ADDR
// sOil := false ;
6731: LD_ADDR_EXP 51
6735: PUSH
6736: LD_INT 0
6738: ST_TO_ADDR
// sStu := false ;
6739: LD_ADDR_EXP 55
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// sBazooka := false ;
6747: LD_ADDR_EXP 58
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// sMortar := false ;
6755: LD_ADDR_EXP 59
6759: PUSH
6760: LD_INT 0
6762: ST_TO_ADDR
// sRanger := false ;
6763: LD_ADDR_EXP 69
6767: PUSH
6768: LD_INT 0
6770: ST_TO_ADDR
// sComputer := false ;
6771: LD_ADDR_EXP 70
6775: PUSH
6776: LD_INT 0
6778: ST_TO_ADDR
// s30 := false ;
6779: LD_ADDR_EXP 71
6783: PUSH
6784: LD_INT 0
6786: ST_TO_ADDR
// s60 := false ;
6787: LD_ADDR_EXP 72
6791: PUSH
6792: LD_INT 0
6794: ST_TO_ADDR
// end ;
6795: LD_VAR 0 1
6799: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
// result := [ ] ;
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: EMPTY
6815: ST_TO_ADDR
// if campaign_id = 1 then
6816: LD_OWVAR 69
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: IFFALSE 9990
// begin case mission_number of 1 :
6826: LD_OWVAR 70
6830: PUSH
6831: LD_INT 1
6833: DOUBLE
6834: EQUAL
6835: IFTRUE 6839
6837: GO 6915
6839: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 4
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 15
6859: PUSH
6860: LD_INT 16
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 26
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 101
6885: PUSH
6886: LD_INT 102
6888: PUSH
6889: LD_INT 106
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 9988
6915: LD_INT 2
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 7007
6923: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: LD_INT 2
6931: PUSH
6932: LD_INT 4
6934: PUSH
6935: LD_INT 11
6937: PUSH
6938: LD_INT 12
6940: PUSH
6941: LD_INT 15
6943: PUSH
6944: LD_INT 16
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 26
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 101
6969: PUSH
6970: LD_INT 102
6972: PUSH
6973: LD_INT 105
6975: PUSH
6976: LD_INT 106
6978: PUSH
6979: LD_INT 108
6981: PUSH
6982: LD_INT 116
6984: PUSH
6985: LD_INT 117
6987: PUSH
6988: LD_INT 118
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 9988
7007: LD_INT 3
7009: DOUBLE
7010: EQUAL
7011: IFTRUE 7015
7013: GO 7103
7015: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: LD_INT 5
7029: PUSH
7030: LD_INT 11
7032: PUSH
7033: LD_INT 12
7035: PUSH
7036: LD_INT 15
7038: PUSH
7039: LD_INT 16
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_INT 26
7047: PUSH
7048: LD_INT 36
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 101
7065: PUSH
7066: LD_INT 102
7068: PUSH
7069: LD_INT 105
7071: PUSH
7072: LD_INT 106
7074: PUSH
7075: LD_INT 108
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 9988
7103: LD_INT 4
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7207
7111: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 4
7122: PUSH
7123: LD_INT 5
7125: PUSH
7126: LD_INT 8
7128: PUSH
7129: LD_INT 11
7131: PUSH
7132: LD_INT 12
7134: PUSH
7135: LD_INT 15
7137: PUSH
7138: LD_INT 16
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_INT 23
7146: PUSH
7147: LD_INT 26
7149: PUSH
7150: LD_INT 36
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 101
7169: PUSH
7170: LD_INT 102
7172: PUSH
7173: LD_INT 105
7175: PUSH
7176: LD_INT 106
7178: PUSH
7179: LD_INT 108
7181: PUSH
7182: LD_INT 116
7184: PUSH
7185: LD_INT 117
7187: PUSH
7188: LD_INT 118
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: ST_TO_ADDR
7205: GO 9988
7207: LD_INT 5
7209: DOUBLE
7210: EQUAL
7211: IFTRUE 7215
7213: GO 7327
7215: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7216: LD_ADDR_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 5
7229: PUSH
7230: LD_INT 6
7232: PUSH
7233: LD_INT 8
7235: PUSH
7236: LD_INT 11
7238: PUSH
7239: LD_INT 12
7241: PUSH
7242: LD_INT 15
7244: PUSH
7245: LD_INT 16
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 36
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 101
7281: PUSH
7282: LD_INT 102
7284: PUSH
7285: LD_INT 105
7287: PUSH
7288: LD_INT 106
7290: PUSH
7291: LD_INT 108
7293: PUSH
7294: LD_INT 109
7296: PUSH
7297: LD_INT 112
7299: PUSH
7300: LD_INT 116
7302: PUSH
7303: LD_INT 117
7305: PUSH
7306: LD_INT 118
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9988
7327: LD_INT 6
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7467
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 8
7355: PUSH
7356: LD_INT 11
7358: PUSH
7359: LD_INT 12
7361: PUSH
7362: LD_INT 15
7364: PUSH
7365: LD_INT 16
7367: PUSH
7368: LD_INT 20
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 25
7382: PUSH
7383: LD_INT 26
7385: PUSH
7386: LD_INT 30
7388: PUSH
7389: LD_INT 31
7391: PUSH
7392: LD_INT 32
7394: PUSH
7395: LD_INT 36
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 101
7421: PUSH
7422: LD_INT 102
7424: PUSH
7425: LD_INT 105
7427: PUSH
7428: LD_INT 106
7430: PUSH
7431: LD_INT 108
7433: PUSH
7434: LD_INT 109
7436: PUSH
7437: LD_INT 112
7439: PUSH
7440: LD_INT 116
7442: PUSH
7443: LD_INT 117
7445: PUSH
7446: LD_INT 118
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: ST_TO_ADDR
7465: GO 9988
7467: LD_INT 7
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7587
7475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 15
7501: PUSH
7502: LD_INT 16
7504: PUSH
7505: LD_INT 20
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 23
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 26
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 101
7541: PUSH
7542: LD_INT 102
7544: PUSH
7545: LD_INT 103
7547: PUSH
7548: LD_INT 105
7550: PUSH
7551: LD_INT 106
7553: PUSH
7554: LD_INT 108
7556: PUSH
7557: LD_INT 112
7559: PUSH
7560: LD_INT 116
7562: PUSH
7563: LD_INT 117
7565: PUSH
7566: LD_INT 118
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 9988
7587: LD_INT 8
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7735
7595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: LD_INT 6
7612: PUSH
7613: LD_INT 7
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: LD_INT 11
7621: PUSH
7622: LD_INT 12
7624: PUSH
7625: LD_INT 15
7627: PUSH
7628: LD_INT 16
7630: PUSH
7631: LD_INT 20
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_INT 23
7642: PUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 26
7648: PUSH
7649: LD_INT 30
7651: PUSH
7652: LD_INT 31
7654: PUSH
7655: LD_INT 32
7657: PUSH
7658: LD_INT 36
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 101
7685: PUSH
7686: LD_INT 102
7688: PUSH
7689: LD_INT 103
7691: PUSH
7692: LD_INT 105
7694: PUSH
7695: LD_INT 106
7697: PUSH
7698: LD_INT 108
7700: PUSH
7701: LD_INT 109
7703: PUSH
7704: LD_INT 112
7706: PUSH
7707: LD_INT 116
7709: PUSH
7710: LD_INT 117
7712: PUSH
7713: LD_INT 118
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 9988
7735: LD_INT 9
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7891
7743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7744: LD_ADDR_VAR 0 2
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 4
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: LD_INT 6
7760: PUSH
7761: LD_INT 7
7763: PUSH
7764: LD_INT 8
7766: PUSH
7767: LD_INT 11
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 15
7775: PUSH
7776: LD_INT 16
7778: PUSH
7779: LD_INT 20
7781: PUSH
7782: LD_INT 21
7784: PUSH
7785: LD_INT 22
7787: PUSH
7788: LD_INT 23
7790: PUSH
7791: LD_INT 25
7793: PUSH
7794: LD_INT 26
7796: PUSH
7797: LD_INT 28
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 31
7805: PUSH
7806: LD_INT 32
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 105
7846: PUSH
7847: LD_INT 106
7849: PUSH
7850: LD_INT 108
7852: PUSH
7853: LD_INT 109
7855: PUSH
7856: LD_INT 112
7858: PUSH
7859: LD_INT 114
7861: PUSH
7862: LD_INT 116
7864: PUSH
7865: LD_INT 117
7867: PUSH
7868: LD_INT 118
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9988
7891: LD_INT 10
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8095
7899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 4
7910: PUSH
7911: LD_INT 5
7913: PUSH
7914: LD_INT 6
7916: PUSH
7917: LD_INT 7
7919: PUSH
7920: LD_INT 8
7922: PUSH
7923: LD_INT 9
7925: PUSH
7926: LD_INT 10
7928: PUSH
7929: LD_INT 11
7931: PUSH
7932: LD_INT 12
7934: PUSH
7935: LD_INT 13
7937: PUSH
7938: LD_INT 14
7940: PUSH
7941: LD_INT 15
7943: PUSH
7944: LD_INT 16
7946: PUSH
7947: LD_INT 17
7949: PUSH
7950: LD_INT 18
7952: PUSH
7953: LD_INT 19
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 24
7970: PUSH
7971: LD_INT 25
7973: PUSH
7974: LD_INT 26
7976: PUSH
7977: LD_INT 28
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 31
7985: PUSH
7986: LD_INT 32
7988: PUSH
7989: LD_INT 36
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 101
8025: PUSH
8026: LD_INT 102
8028: PUSH
8029: LD_INT 103
8031: PUSH
8032: LD_INT 104
8034: PUSH
8035: LD_INT 105
8037: PUSH
8038: LD_INT 106
8040: PUSH
8041: LD_INT 107
8043: PUSH
8044: LD_INT 108
8046: PUSH
8047: LD_INT 109
8049: PUSH
8050: LD_INT 110
8052: PUSH
8053: LD_INT 111
8055: PUSH
8056: LD_INT 112
8058: PUSH
8059: LD_INT 114
8061: PUSH
8062: LD_INT 116
8064: PUSH
8065: LD_INT 117
8067: PUSH
8068: LD_INT 118
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
8093: GO 9988
8095: LD_INT 11
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8307
8103: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: LD_INT 5
8120: PUSH
8121: LD_INT 6
8123: PUSH
8124: LD_INT 7
8126: PUSH
8127: LD_INT 8
8129: PUSH
8130: LD_INT 9
8132: PUSH
8133: LD_INT 10
8135: PUSH
8136: LD_INT 11
8138: PUSH
8139: LD_INT 12
8141: PUSH
8142: LD_INT 13
8144: PUSH
8145: LD_INT 14
8147: PUSH
8148: LD_INT 15
8150: PUSH
8151: LD_INT 16
8153: PUSH
8154: LD_INT 17
8156: PUSH
8157: LD_INT 18
8159: PUSH
8160: LD_INT 19
8162: PUSH
8163: LD_INT 20
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_INT 23
8174: PUSH
8175: LD_INT 24
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 26
8183: PUSH
8184: LD_INT 28
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 31
8192: PUSH
8193: LD_INT 32
8195: PUSH
8196: LD_INT 34
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 101
8237: PUSH
8238: LD_INT 102
8240: PUSH
8241: LD_INT 103
8243: PUSH
8244: LD_INT 104
8246: PUSH
8247: LD_INT 105
8249: PUSH
8250: LD_INT 106
8252: PUSH
8253: LD_INT 107
8255: PUSH
8256: LD_INT 108
8258: PUSH
8259: LD_INT 109
8261: PUSH
8262: LD_INT 110
8264: PUSH
8265: LD_INT 111
8267: PUSH
8268: LD_INT 112
8270: PUSH
8271: LD_INT 114
8273: PUSH
8274: LD_INT 116
8276: PUSH
8277: LD_INT 117
8279: PUSH
8280: LD_INT 118
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
8305: GO 9988
8307: LD_INT 12
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8535
8315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8316: LD_ADDR_VAR 0 2
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 4
8332: PUSH
8333: LD_INT 5
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: LD_INT 7
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: LD_INT 10
8350: PUSH
8351: LD_INT 11
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: LD_INT 13
8359: PUSH
8360: LD_INT 14
8362: PUSH
8363: LD_INT 15
8365: PUSH
8366: LD_INT 16
8368: PUSH
8369: LD_INT 17
8371: PUSH
8372: LD_INT 18
8374: PUSH
8375: LD_INT 19
8377: PUSH
8378: LD_INT 20
8380: PUSH
8381: LD_INT 21
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 23
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 26
8398: PUSH
8399: LD_INT 27
8401: PUSH
8402: LD_INT 28
8404: PUSH
8405: LD_INT 30
8407: PUSH
8408: LD_INT 31
8410: PUSH
8411: LD_INT 32
8413: PUSH
8414: LD_INT 33
8416: PUSH
8417: LD_INT 34
8419: PUSH
8420: LD_INT 36
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 101
8461: PUSH
8462: LD_INT 102
8464: PUSH
8465: LD_INT 103
8467: PUSH
8468: LD_INT 104
8470: PUSH
8471: LD_INT 105
8473: PUSH
8474: LD_INT 106
8476: PUSH
8477: LD_INT 107
8479: PUSH
8480: LD_INT 108
8482: PUSH
8483: LD_INT 109
8485: PUSH
8486: LD_INT 110
8488: PUSH
8489: LD_INT 111
8491: PUSH
8492: LD_INT 112
8494: PUSH
8495: LD_INT 113
8497: PUSH
8498: LD_INT 114
8500: PUSH
8501: LD_INT 116
8503: PUSH
8504: LD_INT 117
8506: PUSH
8507: LD_INT 118
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: ST_TO_ADDR
8533: GO 9988
8535: LD_INT 13
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8751
8543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: LD_INT 2
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: LD_INT 4
8560: PUSH
8561: LD_INT 5
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 11
8575: PUSH
8576: LD_INT 12
8578: PUSH
8579: LD_INT 14
8581: PUSH
8582: LD_INT 15
8584: PUSH
8585: LD_INT 16
8587: PUSH
8588: LD_INT 17
8590: PUSH
8591: LD_INT 18
8593: PUSH
8594: LD_INT 19
8596: PUSH
8597: LD_INT 20
8599: PUSH
8600: LD_INT 21
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 23
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 26
8617: PUSH
8618: LD_INT 27
8620: PUSH
8621: LD_INT 28
8623: PUSH
8624: LD_INT 30
8626: PUSH
8627: LD_INT 31
8629: PUSH
8630: LD_INT 32
8632: PUSH
8633: LD_INT 33
8635: PUSH
8636: LD_INT 34
8638: PUSH
8639: LD_INT 36
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 101
8677: PUSH
8678: LD_INT 102
8680: PUSH
8681: LD_INT 103
8683: PUSH
8684: LD_INT 104
8686: PUSH
8687: LD_INT 105
8689: PUSH
8690: LD_INT 106
8692: PUSH
8693: LD_INT 107
8695: PUSH
8696: LD_INT 108
8698: PUSH
8699: LD_INT 109
8701: PUSH
8702: LD_INT 110
8704: PUSH
8705: LD_INT 111
8707: PUSH
8708: LD_INT 112
8710: PUSH
8711: LD_INT 113
8713: PUSH
8714: LD_INT 114
8716: PUSH
8717: LD_INT 116
8719: PUSH
8720: LD_INT 117
8722: PUSH
8723: LD_INT 118
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9988
8751: LD_INT 14
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8983
8759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: LD_INT 4
8776: PUSH
8777: LD_INT 5
8779: PUSH
8780: LD_INT 6
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 8
8788: PUSH
8789: LD_INT 9
8791: PUSH
8792: LD_INT 10
8794: PUSH
8795: LD_INT 11
8797: PUSH
8798: LD_INT 12
8800: PUSH
8801: LD_INT 13
8803: PUSH
8804: LD_INT 14
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 17
8815: PUSH
8816: LD_INT 18
8818: PUSH
8819: LD_INT 19
8821: PUSH
8822: LD_INT 20
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 27
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 29
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: LD_INT 32
8860: PUSH
8861: LD_INT 33
8863: PUSH
8864: LD_INT 34
8866: PUSH
8867: LD_INT 36
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 101
8909: PUSH
8910: LD_INT 102
8912: PUSH
8913: LD_INT 103
8915: PUSH
8916: LD_INT 104
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 107
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 109
8933: PUSH
8934: LD_INT 110
8936: PUSH
8937: LD_INT 111
8939: PUSH
8940: LD_INT 112
8942: PUSH
8943: LD_INT 113
8945: PUSH
8946: LD_INT 114
8948: PUSH
8949: LD_INT 116
8951: PUSH
8952: LD_INT 117
8954: PUSH
8955: LD_INT 118
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: ST_TO_ADDR
8981: GO 9988
8983: LD_INT 15
8985: DOUBLE
8986: EQUAL
8987: IFTRUE 8991
8989: GO 9215
8991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8992: LD_ADDR_VAR 0 2
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: LD_INT 6
9014: PUSH
9015: LD_INT 7
9017: PUSH
9018: LD_INT 8
9020: PUSH
9021: LD_INT 9
9023: PUSH
9024: LD_INT 10
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 13
9035: PUSH
9036: LD_INT 14
9038: PUSH
9039: LD_INT 15
9041: PUSH
9042: LD_INT 16
9044: PUSH
9045: LD_INT 17
9047: PUSH
9048: LD_INT 18
9050: PUSH
9051: LD_INT 19
9053: PUSH
9054: LD_INT 20
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 24
9068: PUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 26
9074: PUSH
9075: LD_INT 27
9077: PUSH
9078: LD_INT 28
9080: PUSH
9081: LD_INT 29
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 31
9089: PUSH
9090: LD_INT 32
9092: PUSH
9093: LD_INT 33
9095: PUSH
9096: LD_INT 34
9098: PUSH
9099: LD_INT 36
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 101
9141: PUSH
9142: LD_INT 102
9144: PUSH
9145: LD_INT 103
9147: PUSH
9148: LD_INT 104
9150: PUSH
9151: LD_INT 105
9153: PUSH
9154: LD_INT 106
9156: PUSH
9157: LD_INT 107
9159: PUSH
9160: LD_INT 108
9162: PUSH
9163: LD_INT 109
9165: PUSH
9166: LD_INT 110
9168: PUSH
9169: LD_INT 111
9171: PUSH
9172: LD_INT 112
9174: PUSH
9175: LD_INT 113
9177: PUSH
9178: LD_INT 114
9180: PUSH
9181: LD_INT 116
9183: PUSH
9184: LD_INT 117
9186: PUSH
9187: LD_INT 118
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 9988
9215: LD_INT 16
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9359
9223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 4
9234: PUSH
9235: LD_INT 5
9237: PUSH
9238: LD_INT 7
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 12
9246: PUSH
9247: LD_INT 15
9249: PUSH
9250: LD_INT 16
9252: PUSH
9253: LD_INT 20
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_INT 23
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 26
9270: PUSH
9271: LD_INT 30
9273: PUSH
9274: LD_INT 31
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: LD_INT 33
9282: PUSH
9283: LD_INT 34
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 101
9309: PUSH
9310: LD_INT 102
9312: PUSH
9313: LD_INT 103
9315: PUSH
9316: LD_INT 106
9318: PUSH
9319: LD_INT 108
9321: PUSH
9322: LD_INT 112
9324: PUSH
9325: LD_INT 113
9327: PUSH
9328: LD_INT 114
9330: PUSH
9331: LD_INT 116
9333: PUSH
9334: LD_INT 117
9336: PUSH
9337: LD_INT 118
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: ST_TO_ADDR
9357: GO 9988
9359: LD_INT 17
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9591
9367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: LD_INT 6
9390: PUSH
9391: LD_INT 7
9393: PUSH
9394: LD_INT 8
9396: PUSH
9397: LD_INT 9
9399: PUSH
9400: LD_INT 10
9402: PUSH
9403: LD_INT 11
9405: PUSH
9406: LD_INT 12
9408: PUSH
9409: LD_INT 13
9411: PUSH
9412: LD_INT 14
9414: PUSH
9415: LD_INT 15
9417: PUSH
9418: LD_INT 16
9420: PUSH
9421: LD_INT 17
9423: PUSH
9424: LD_INT 18
9426: PUSH
9427: LD_INT 19
9429: PUSH
9430: LD_INT 20
9432: PUSH
9433: LD_INT 21
9435: PUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 25
9447: PUSH
9448: LD_INT 26
9450: PUSH
9451: LD_INT 27
9453: PUSH
9454: LD_INT 28
9456: PUSH
9457: LD_INT 29
9459: PUSH
9460: LD_INT 30
9462: PUSH
9463: LD_INT 31
9465: PUSH
9466: LD_INT 32
9468: PUSH
9469: LD_INT 33
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 101
9517: PUSH
9518: LD_INT 102
9520: PUSH
9521: LD_INT 103
9523: PUSH
9524: LD_INT 104
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 107
9535: PUSH
9536: LD_INT 108
9538: PUSH
9539: LD_INT 109
9541: PUSH
9542: LD_INT 110
9544: PUSH
9545: LD_INT 111
9547: PUSH
9548: LD_INT 112
9550: PUSH
9551: LD_INT 113
9553: PUSH
9554: LD_INT 114
9556: PUSH
9557: LD_INT 116
9559: PUSH
9560: LD_INT 117
9562: PUSH
9563: LD_INT 118
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: ST_TO_ADDR
9589: GO 9988
9591: LD_INT 18
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9747
9599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: LD_INT 7
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 15
9625: PUSH
9626: LD_INT 16
9628: PUSH
9629: LD_INT 20
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 22
9637: PUSH
9638: LD_INT 23
9640: PUSH
9641: LD_INT 25
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: LD_INT 31
9652: PUSH
9653: LD_INT 32
9655: PUSH
9656: LD_INT 33
9658: PUSH
9659: LD_INT 34
9661: PUSH
9662: LD_INT 35
9664: PUSH
9665: LD_INT 36
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 101
9693: PUSH
9694: LD_INT 102
9696: PUSH
9697: LD_INT 103
9699: PUSH
9700: LD_INT 106
9702: PUSH
9703: LD_INT 108
9705: PUSH
9706: LD_INT 112
9708: PUSH
9709: LD_INT 113
9711: PUSH
9712: LD_INT 114
9714: PUSH
9715: LD_INT 115
9717: PUSH
9718: LD_INT 116
9720: PUSH
9721: LD_INT 117
9723: PUSH
9724: LD_INT 118
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
9745: GO 9988
9747: LD_INT 19
9749: DOUBLE
9750: EQUAL
9751: IFTRUE 9755
9753: GO 9987
9755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: LD_INT 2
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: LD_INT 5
9775: PUSH
9776: LD_INT 6
9778: PUSH
9779: LD_INT 7
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: LD_INT 10
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 13
9799: PUSH
9800: LD_INT 14
9802: PUSH
9803: LD_INT 15
9805: PUSH
9806: LD_INT 16
9808: PUSH
9809: LD_INT 17
9811: PUSH
9812: LD_INT 18
9814: PUSH
9815: LD_INT 19
9817: PUSH
9818: LD_INT 20
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 26
9838: PUSH
9839: LD_INT 27
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 29
9847: PUSH
9848: LD_INT 30
9850: PUSH
9851: LD_INT 31
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 33
9859: PUSH
9860: LD_INT 34
9862: PUSH
9863: LD_INT 35
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 101
9909: PUSH
9910: LD_INT 102
9912: PUSH
9913: LD_INT 103
9915: PUSH
9916: LD_INT 104
9918: PUSH
9919: LD_INT 105
9921: PUSH
9922: LD_INT 106
9924: PUSH
9925: LD_INT 107
9927: PUSH
9928: LD_INT 108
9930: PUSH
9931: LD_INT 109
9933: PUSH
9934: LD_INT 110
9936: PUSH
9937: LD_INT 111
9939: PUSH
9940: LD_INT 112
9942: PUSH
9943: LD_INT 113
9945: PUSH
9946: LD_INT 114
9948: PUSH
9949: LD_INT 115
9951: PUSH
9952: LD_INT 116
9954: PUSH
9955: LD_INT 117
9957: PUSH
9958: LD_INT 118
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: ST_TO_ADDR
9985: GO 9988
9987: POP
// end else
9988: GO 10219
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: LD_INT 4
10006: PUSH
10007: LD_INT 5
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: LD_INT 7
10015: PUSH
10016: LD_INT 8
10018: PUSH
10019: LD_INT 9
10021: PUSH
10022: LD_INT 10
10024: PUSH
10025: LD_INT 11
10027: PUSH
10028: LD_INT 12
10030: PUSH
10031: LD_INT 13
10033: PUSH
10034: LD_INT 14
10036: PUSH
10037: LD_INT 15
10039: PUSH
10040: LD_INT 16
10042: PUSH
10043: LD_INT 17
10045: PUSH
10046: LD_INT 18
10048: PUSH
10049: LD_INT 19
10051: PUSH
10052: LD_INT 20
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_INT 23
10063: PUSH
10064: LD_INT 24
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 26
10072: PUSH
10073: LD_INT 27
10075: PUSH
10076: LD_INT 28
10078: PUSH
10079: LD_INT 29
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 33
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 35
10099: PUSH
10100: LD_INT 36
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 101
10143: PUSH
10144: LD_INT 102
10146: PUSH
10147: LD_INT 103
10149: PUSH
10150: LD_INT 104
10152: PUSH
10153: LD_INT 105
10155: PUSH
10156: LD_INT 106
10158: PUSH
10159: LD_INT 107
10161: PUSH
10162: LD_INT 108
10164: PUSH
10165: LD_INT 109
10167: PUSH
10168: LD_INT 110
10170: PUSH
10171: LD_INT 111
10173: PUSH
10174: LD_INT 112
10176: PUSH
10177: LD_INT 113
10179: PUSH
10180: LD_INT 114
10182: PUSH
10183: LD_INT 115
10185: PUSH
10186: LD_INT 116
10188: PUSH
10189: LD_INT 117
10191: PUSH
10192: LD_INT 118
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: ST_TO_ADDR
// if result then
10219: LD_VAR 0 2
10223: IFFALSE 11009
// begin normal :=  ;
10225: LD_ADDR_VAR 0 5
10229: PUSH
10230: LD_STRING 
10232: ST_TO_ADDR
// hardcore :=  ;
10233: LD_ADDR_VAR 0 6
10237: PUSH
10238: LD_STRING 
10240: ST_TO_ADDR
// active :=  ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_STRING 
10248: ST_TO_ADDR
// for i = 1 to normalCounter do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_EXP 17
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10366
// begin tmp := 0 ;
10267: LD_ADDR_VAR 0 3
10271: PUSH
10272: LD_STRING 0
10274: ST_TO_ADDR
// if result [ 1 ] then
10275: LD_VAR 0 2
10279: PUSH
10280: LD_INT 1
10282: ARRAY
10283: IFFALSE 10348
// if result [ 1 ] [ 1 ] = i then
10285: LD_VAR 0 2
10289: PUSH
10290: LD_INT 1
10292: ARRAY
10293: PUSH
10294: LD_INT 1
10296: ARRAY
10297: PUSH
10298: LD_VAR 0 8
10302: EQUAL
10303: IFFALSE 10348
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10305: LD_ADDR_VAR 0 2
10309: PUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: LD_VAR 0 2
10322: PUSH
10323: LD_INT 1
10325: ARRAY
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 3
10334: PPUSH
10335: CALL_OW 1
10339: ST_TO_ADDR
// tmp := 1 ;
10340: LD_ADDR_VAR 0 3
10344: PUSH
10345: LD_STRING 1
10347: ST_TO_ADDR
// end ; normal := normal & tmp ;
10348: LD_ADDR_VAR 0 5
10352: PUSH
10353: LD_VAR 0 5
10357: PUSH
10358: LD_VAR 0 3
10362: STR
10363: ST_TO_ADDR
// end ;
10364: GO 10264
10366: POP
10367: POP
// for i = 1 to hardcoreCounter do
10368: LD_ADDR_VAR 0 8
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_EXP 18
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10489
// begin tmp := 0 ;
10386: LD_ADDR_VAR 0 3
10390: PUSH
10391: LD_STRING 0
10393: ST_TO_ADDR
// if result [ 2 ] then
10394: LD_VAR 0 2
10398: PUSH
10399: LD_INT 2
10401: ARRAY
10402: IFFALSE 10471
// if result [ 2 ] [ 1 ] = 100 + i then
10404: LD_VAR 0 2
10408: PUSH
10409: LD_INT 2
10411: ARRAY
10412: PUSH
10413: LD_INT 1
10415: ARRAY
10416: PUSH
10417: LD_INT 100
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: EQUAL
10426: IFFALSE 10471
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_VAR 0 2
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 3
10457: PPUSH
10458: CALL_OW 1
10462: ST_TO_ADDR
// tmp := 1 ;
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_STRING 1
10470: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10471: LD_ADDR_VAR 0 6
10475: PUSH
10476: LD_VAR 0 6
10480: PUSH
10481: LD_VAR 0 3
10485: STR
10486: ST_TO_ADDR
// end ;
10487: GO 10383
10489: POP
10490: POP
// if isGameLoad then
10491: LD_VAR 0 1
10495: IFFALSE 10970
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10497: LD_ADDR_VAR 0 4
10501: PUSH
10502: LD_EXP 21
10506: PUSH
10507: LD_EXP 20
10511: PUSH
10512: LD_EXP 22
10516: PUSH
10517: LD_EXP 19
10521: PUSH
10522: LD_EXP 23
10526: PUSH
10527: LD_EXP 24
10531: PUSH
10532: LD_EXP 25
10536: PUSH
10537: LD_EXP 26
10541: PUSH
10542: LD_EXP 27
10546: PUSH
10547: LD_EXP 28
10551: PUSH
10552: LD_EXP 29
10556: PUSH
10557: LD_EXP 30
10561: PUSH
10562: LD_EXP 31
10566: PUSH
10567: LD_EXP 32
10571: PUSH
10572: LD_EXP 40
10576: PUSH
10577: LD_EXP 41
10581: PUSH
10582: LD_EXP 42
10586: PUSH
10587: LD_EXP 43
10591: PUSH
10592: LD_EXP 45
10596: PUSH
10597: LD_EXP 46
10601: PUSH
10602: LD_EXP 47
10606: PUSH
10607: LD_EXP 50
10611: PUSH
10612: LD_EXP 52
10616: PUSH
10617: LD_EXP 53
10621: PUSH
10622: LD_EXP 54
10626: PUSH
10627: LD_EXP 56
10631: PUSH
10632: LD_EXP 57
10636: PUSH
10637: LD_EXP 60
10641: PUSH
10642: LD_EXP 61
10646: PUSH
10647: LD_EXP 62
10651: PUSH
10652: LD_EXP 63
10656: PUSH
10657: LD_EXP 64
10661: PUSH
10662: LD_EXP 65
10666: PUSH
10667: LD_EXP 66
10671: PUSH
10672: LD_EXP 67
10676: PUSH
10677: LD_EXP 68
10681: PUSH
10682: LD_EXP 33
10686: PUSH
10687: LD_EXP 34
10691: PUSH
10692: LD_EXP 37
10696: PUSH
10697: LD_EXP 38
10701: PUSH
10702: LD_EXP 39
10706: PUSH
10707: LD_EXP 35
10711: PUSH
10712: LD_EXP 36
10716: PUSH
10717: LD_EXP 44
10721: PUSH
10722: LD_EXP 48
10726: PUSH
10727: LD_EXP 49
10731: PUSH
10732: LD_EXP 51
10736: PUSH
10737: LD_EXP 55
10741: PUSH
10742: LD_EXP 58
10746: PUSH
10747: LD_EXP 59
10751: PUSH
10752: LD_EXP 69
10756: PUSH
10757: LD_EXP 70
10761: PUSH
10762: LD_EXP 71
10766: PUSH
10767: LD_EXP 72
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// tmp :=  ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_STRING 
10835: ST_TO_ADDR
// for i = 1 to normalCounter do
10836: LD_ADDR_VAR 0 8
10840: PUSH
10841: DOUBLE
10842: LD_INT 1
10844: DEC
10845: ST_TO_ADDR
10846: LD_EXP 17
10850: PUSH
10851: FOR_TO
10852: IFFALSE 10888
// begin if flags [ i ] then
10854: LD_VAR 0 4
10858: PUSH
10859: LD_VAR 0 8
10863: ARRAY
10864: IFFALSE 10886
// tmp := tmp & i & ; ;
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: LD_VAR 0 3
10875: PUSH
10876: LD_VAR 0 8
10880: STR
10881: PUSH
10882: LD_STRING ;
10884: STR
10885: ST_TO_ADDR
// end ;
10886: GO 10851
10888: POP
10889: POP
// for i = 1 to hardcoreCounter do
10890: LD_ADDR_VAR 0 8
10894: PUSH
10895: DOUBLE
10896: LD_INT 1
10898: DEC
10899: ST_TO_ADDR
10900: LD_EXP 18
10904: PUSH
10905: FOR_TO
10906: IFFALSE 10952
// begin if flags [ normalCounter + i ] then
10908: LD_VAR 0 4
10912: PUSH
10913: LD_EXP 17
10917: PUSH
10918: LD_VAR 0 8
10922: PLUS
10923: ARRAY
10924: IFFALSE 10950
// tmp := tmp & ( 100 + i ) & ; ;
10926: LD_ADDR_VAR 0 3
10930: PUSH
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 100
10938: PUSH
10939: LD_VAR 0 8
10943: PLUS
10944: STR
10945: PUSH
10946: LD_STRING ;
10948: STR
10949: ST_TO_ADDR
// end ;
10950: GO 10905
10952: POP
10953: POP
// if tmp then
10954: LD_VAR 0 3
10958: IFFALSE 10970
// active := tmp ;
10960: LD_ADDR_VAR 0 7
10964: PUSH
10965: LD_VAR 0 3
10969: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10970: LD_STRING getStreamItemsFromMission("
10972: PUSH
10973: LD_VAR 0 5
10977: STR
10978: PUSH
10979: LD_STRING ","
10981: STR
10982: PUSH
10983: LD_VAR 0 6
10987: STR
10988: PUSH
10989: LD_STRING ","
10991: STR
10992: PUSH
10993: LD_VAR 0 7
10997: STR
10998: PUSH
10999: LD_STRING ")
11001: STR
11002: PPUSH
11003: CALL_OW 559
// end else
11007: GO 11016
// ToLua ( getStreamItemsFromMission("","","") ) ;
11009: LD_STRING getStreamItemsFromMission("","","")
11011: PPUSH
11012: CALL_OW 559
// end ;
11016: LD_VAR 0 2
11020: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11021: LD_EXP 16
11025: PUSH
11026: LD_EXP 21
11030: AND
11031: IFFALSE 11155
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin enable ;
11040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11041: LD_ADDR_VAR 0 2
11045: PUSH
11046: LD_INT 22
11048: PUSH
11049: LD_OWVAR 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: LD_INT 34
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 34
11073: PUSH
11074: LD_INT 45
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 34
11083: PUSH
11084: LD_INT 28
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 34
11093: PUSH
11094: LD_INT 47
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 2
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11155
// for i in tmp do
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11153
// begin SetLives ( i , 0 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 0
11146: PPUSH
11147: CALL_OW 234
// end ;
11151: GO 11136
11153: POP
11154: POP
// end ;
11155: PPOPN 2
11157: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11158: LD_EXP 16
11162: PUSH
11163: LD_EXP 22
11167: AND
11168: IFFALSE 11252
11170: GO 11172
11172: DISABLE
11173: LD_INT 0
11175: PPUSH
11176: PPUSH
// begin enable ;
11177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_OWVAR 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 32
11197: PUSH
11198: LD_INT 3
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: ST_TO_ADDR
// if not tmp then
11214: LD_VAR 0 2
11218: NOT
11219: IFFALSE 11223
// exit ;
11221: GO 11252
// for i in tmp do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_VAR 0 2
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11250
// begin SetLives ( i , 0 ) ;
11236: LD_VAR 0 1
11240: PPUSH
11241: LD_INT 0
11243: PPUSH
11244: CALL_OW 234
// end ;
11248: GO 11233
11250: POP
11251: POP
// end ;
11252: PPOPN 2
11254: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11255: LD_EXP 16
11259: PUSH
11260: LD_EXP 19
11264: AND
11265: IFFALSE 11358
11267: GO 11269
11269: DISABLE
11270: LD_INT 0
11272: PPUSH
// begin enable ;
11273: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11274: LD_ADDR_VAR 0 1
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_OWVAR 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 25
11296: PUSH
11297: LD_INT 5
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 9
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: PUSH
11339: FOR_IN
11340: IFFALSE 11356
// begin SetClass ( i , 1 ) ;
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 336
// end ;
11354: GO 11339
11356: POP
11357: POP
// end ;
11358: PPOPN 1
11360: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11361: LD_EXP 16
11365: PUSH
11366: LD_EXP 20
11370: AND
11371: PUSH
11372: LD_OWVAR 65
11376: PUSH
11377: LD_INT 7
11379: LESS
11380: AND
11381: IFFALSE 11395
11383: GO 11385
11385: DISABLE
// begin enable ;
11386: ENABLE
// game_speed := 7 ;
11387: LD_ADDR_OWVAR 65
11391: PUSH
11392: LD_INT 7
11394: ST_TO_ADDR
// end ;
11395: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11396: LD_EXP 16
11400: PUSH
11401: LD_EXP 23
11405: AND
11406: IFFALSE 11608
11408: GO 11410
11410: DISABLE
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
11415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_INT 81
11423: PUSH
11424: LD_OWVAR 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: ST_TO_ADDR
// if not tmp then
11452: LD_VAR 0 3
11456: NOT
11457: IFFALSE 11461
// exit ;
11459: GO 11608
// if tmp > 5 then
11461: LD_VAR 0 3
11465: PUSH
11466: LD_INT 5
11468: GREATER
11469: IFFALSE 11481
// k := 5 else
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_INT 5
11478: ST_TO_ADDR
11479: GO 11491
// k := tmp ;
11481: LD_ADDR_VAR 0 2
11485: PUSH
11486: LD_VAR 0 3
11490: ST_TO_ADDR
// for i := 1 to k do
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: DOUBLE
11497: LD_INT 1
11499: DEC
11500: ST_TO_ADDR
11501: LD_VAR 0 2
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11606
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PPUSH
11520: LD_VAR 0 1
11524: PUSH
11525: LD_INT 4
11527: MOD
11528: PUSH
11529: LD_INT 1
11531: PLUS
11532: PPUSH
11533: CALL_OW 259
11537: PUSH
11538: LD_INT 10
11540: LESS
11541: IFFALSE 11604
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11543: LD_VAR 0 3
11547: PUSH
11548: LD_VAR 0 1
11552: ARRAY
11553: PPUSH
11554: LD_VAR 0 1
11558: PUSH
11559: LD_INT 4
11561: MOD
11562: PUSH
11563: LD_INT 1
11565: PLUS
11566: PPUSH
11567: LD_VAR 0 3
11571: PUSH
11572: LD_VAR 0 1
11576: ARRAY
11577: PPUSH
11578: LD_VAR 0 1
11582: PUSH
11583: LD_INT 4
11585: MOD
11586: PUSH
11587: LD_INT 1
11589: PLUS
11590: PPUSH
11591: CALL_OW 259
11595: PUSH
11596: LD_INT 1
11598: PLUS
11599: PPUSH
11600: CALL_OW 237
11604: GO 11506
11606: POP
11607: POP
// end ;
11608: PPOPN 3
11610: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11611: LD_EXP 16
11615: PUSH
11616: LD_EXP 24
11620: AND
11621: IFFALSE 11641
11623: GO 11625
11625: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11626: LD_INT 4
11628: PPUSH
11629: LD_OWVAR 2
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 324
11641: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11642: LD_EXP 16
11646: PUSH
11647: LD_EXP 53
11651: AND
11652: IFFALSE 11672
11654: GO 11656
11656: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11657: LD_INT 19
11659: PPUSH
11660: LD_OWVAR 2
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 324
11672: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11673: LD_EXP 16
11677: PUSH
11678: LD_EXP 25
11682: AND
11683: IFFALSE 11785
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
// begin enable ;
11692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_OWVAR 2
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 34
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 69
11746: ST_TO_ADDR
// if not tmp then
11747: LD_VAR 0 2
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11785
// for i in tmp do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11783
// begin SetLives ( i , 0 ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 234
// end ;
11781: GO 11766
11783: POP
11784: POP
// end ;
11785: PPOPN 2
11787: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11788: LD_EXP 16
11792: PUSH
11793: LD_EXP 26
11797: AND
11798: IFFALSE 11818
11800: GO 11802
11802: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11803: LD_INT 32
11805: PPUSH
11806: LD_OWVAR 2
11810: PPUSH
11811: LD_INT 0
11813: PPUSH
11814: CALL_OW 324
11818: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11819: LD_EXP 16
11823: PUSH
11824: LD_EXP 27
11828: AND
11829: IFFALSE 12010
11831: GO 11833
11833: DISABLE
11834: LD_INT 0
11836: PPUSH
11837: PPUSH
11838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: LD_INT 22
11846: PUSH
11847: LD_OWVAR 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 33
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: ST_TO_ADDR
// if not tmp then
11875: LD_VAR 0 2
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 12010
// side := 0 ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_INT 0
11891: ST_TO_ADDR
// for i := 1 to 8 do
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: DOUBLE
11898: LD_INT 1
11900: DEC
11901: ST_TO_ADDR
11902: LD_INT 8
11904: PUSH
11905: FOR_TO
11906: IFFALSE 11954
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11908: LD_OWVAR 2
11912: PUSH
11913: LD_VAR 0 1
11917: NONEQUAL
11918: PUSH
11919: LD_OWVAR 2
11923: PPUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 81
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: AND
11938: IFFALSE 11952
// begin side := i ;
11940: LD_ADDR_VAR 0 3
11944: PUSH
11945: LD_VAR 0 1
11949: ST_TO_ADDR
// break ;
11950: GO 11954
// end ;
11952: GO 11905
11954: POP
11955: POP
// if not side then
11956: LD_VAR 0 3
11960: NOT
11961: IFFALSE 11965
// exit ;
11963: GO 12010
// for i := 1 to tmp do
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: DOUBLE
11971: LD_INT 1
11973: DEC
11974: ST_TO_ADDR
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12008
// if Prob ( 60 ) then
11983: LD_INT 60
11985: PPUSH
11986: CALL_OW 13
11990: IFFALSE 12006
// SetSide ( i , side ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: CALL_OW 235
12006: GO 11980
12008: POP
12009: POP
// end ;
12010: PPOPN 3
12012: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12013: LD_EXP 16
12017: PUSH
12018: LD_EXP 29
12022: AND
12023: IFFALSE 12142
12025: GO 12027
12027: DISABLE
12028: LD_INT 0
12030: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12031: LD_ADDR_VAR 0 1
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_OWVAR 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: LD_INT 23
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 69
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12140
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 257
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 3
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: IN
12116: IFFALSE 12138
// SetClass ( un , rand ( 1 , 4 ) ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 4
12128: PPUSH
12129: CALL_OW 12
12133: PPUSH
12134: CALL_OW 336
12138: GO 12085
12140: POP
12141: POP
// end ;
12142: PPOPN 1
12144: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12145: LD_EXP 16
12149: PUSH
12150: LD_EXP 28
12154: AND
12155: IFFALSE 12234
12157: GO 12159
12159: DISABLE
12160: LD_INT 0
12162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_OWVAR 2
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 3
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 69
12198: ST_TO_ADDR
// if not tmp then
12199: LD_VAR 0 1
12203: NOT
12204: IFFALSE 12208
// exit ;
12206: GO 12234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 12
12225: ARRAY
12226: PPUSH
12227: LD_INT 100
12229: PPUSH
12230: CALL_OW 234
// end ;
12234: PPOPN 1
12236: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12237: LD_EXP 16
12241: PUSH
12242: LD_EXP 30
12246: AND
12247: IFFALSE 12345
12249: GO 12251
12251: DISABLE
12252: LD_INT 0
12254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12255: LD_ADDR_VAR 0 1
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_OWVAR 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: ST_TO_ADDR
// if not tmp then
12291: LD_VAR 0 1
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 12345
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12300: LD_VAR 0 1
12304: PUSH
12305: LD_INT 1
12307: PPUSH
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 12
12317: ARRAY
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 4
12324: PPUSH
12325: CALL_OW 12
12329: PPUSH
12330: LD_INT 3000
12332: PPUSH
12333: LD_INT 9000
12335: PPUSH
12336: CALL_OW 12
12340: PPUSH
12341: CALL_OW 492
// end ;
12345: PPOPN 1
12347: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12348: LD_EXP 16
12352: PUSH
12353: LD_EXP 31
12357: AND
12358: IFFALSE 12378
12360: GO 12362
12362: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12363: LD_INT 1
12365: PPUSH
12366: LD_OWVAR 2
12370: PPUSH
12371: LD_INT 0
12373: PPUSH
12374: CALL_OW 324
12378: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12379: LD_EXP 16
12383: PUSH
12384: LD_EXP 32
12388: AND
12389: IFFALSE 12472
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: ST_TO_ADDR
// if not tmp then
12434: LD_VAR 0 2
12438: NOT
12439: IFFALSE 12443
// exit ;
12441: GO 12472
// for i in tmp do
12443: LD_ADDR_VAR 0 1
12447: PUSH
12448: LD_VAR 0 2
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12470
// SetBLevel ( i , 10 ) ;
12456: LD_VAR 0 1
12460: PPUSH
12461: LD_INT 10
12463: PPUSH
12464: CALL_OW 241
12468: GO 12453
12470: POP
12471: POP
// end ;
12472: PPOPN 2
12474: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12475: LD_EXP 16
12479: PUSH
12480: LD_EXP 33
12484: AND
12485: IFFALSE 12596
12487: GO 12489
12489: DISABLE
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12495: LD_ADDR_VAR 0 3
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_OWVAR 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 25
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: ST_TO_ADDR
// if not tmp then
12531: LD_VAR 0 3
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12596
// un := tmp [ rand ( 1 , tmp ) ] ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_VAR 0 3
12549: PUSH
12550: LD_INT 1
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: CALL_OW 12
12562: ARRAY
12563: ST_TO_ADDR
// if Crawls ( un ) then
12564: LD_VAR 0 2
12568: PPUSH
12569: CALL_OW 318
12573: IFFALSE 12584
// ComWalk ( un ) ;
12575: LD_VAR 0 2
12579: PPUSH
12580: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12584: LD_VAR 0 2
12588: PPUSH
12589: LD_INT 5
12591: PPUSH
12592: CALL_OW 336
// end ;
12596: PPOPN 3
12598: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12599: LD_EXP 16
12603: PUSH
12604: LD_EXP 34
12608: AND
12609: PUSH
12610: LD_OWVAR 67
12614: PUSH
12615: LD_INT 4
12617: LESS
12618: AND
12619: IFFALSE 12638
12621: GO 12623
12623: DISABLE
// begin Difficulty := Difficulty + 1 ;
12624: LD_ADDR_OWVAR 67
12628: PUSH
12629: LD_OWVAR 67
12633: PUSH
12634: LD_INT 1
12636: PLUS
12637: ST_TO_ADDR
// end ;
12638: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12639: LD_EXP 16
12643: PUSH
12644: LD_EXP 35
12648: AND
12649: IFFALSE 12752
12651: GO 12653
12653: DISABLE
12654: LD_INT 0
12656: PPUSH
// begin for i := 1 to 5 do
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: DOUBLE
12663: LD_INT 1
12665: DEC
12666: ST_TO_ADDR
12667: LD_INT 5
12669: PUSH
12670: FOR_TO
12671: IFFALSE 12750
// begin uc_nation := nation_nature ;
12673: LD_ADDR_OWVAR 21
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// uc_side := 0 ;
12681: LD_ADDR_OWVAR 20
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12689: LD_ADDR_OWVAR 29
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 12
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: ST_TO_ADDR
// hc_agressivity := 20 ;
12704: LD_ADDR_OWVAR 35
12708: PUSH
12709: LD_INT 20
12711: ST_TO_ADDR
// hc_class := class_tiger ;
12712: LD_ADDR_OWVAR 28
12716: PUSH
12717: LD_INT 14
12719: ST_TO_ADDR
// hc_gallery :=  ;
12720: LD_ADDR_OWVAR 33
12724: PUSH
12725: LD_STRING 
12727: ST_TO_ADDR
// hc_name :=  ;
12728: LD_ADDR_OWVAR 26
12732: PUSH
12733: LD_STRING 
12735: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12736: CALL_OW 44
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 51
// end ;
12748: GO 12670
12750: POP
12751: POP
// end ;
12752: PPOPN 1
12754: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12755: LD_EXP 16
12759: PUSH
12760: LD_EXP 36
12764: AND
12765: IFFALSE 12774
12767: GO 12769
12769: DISABLE
// StreamSibBomb ;
12770: CALL 12775 0 0
12774: END
// export function StreamSibBomb ; var i , x , y ; begin
12775: LD_INT 0
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// result := false ;
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// for i := 1 to 16 do
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: DOUBLE
12795: LD_INT 1
12797: DEC
12798: ST_TO_ADDR
12799: LD_INT 16
12801: PUSH
12802: FOR_TO
12803: IFFALSE 13002
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_INT 10
12812: PUSH
12813: LD_INT 20
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 40
12821: PUSH
12822: LD_INT 50
12824: PUSH
12825: LD_INT 60
12827: PUSH
12828: LD_INT 70
12830: PUSH
12831: LD_INT 80
12833: PUSH
12834: LD_INT 90
12836: PUSH
12837: LD_INT 100
12839: PUSH
12840: LD_INT 110
12842: PUSH
12843: LD_INT 120
12845: PUSH
12846: LD_INT 130
12848: PUSH
12849: LD_INT 140
12851: PUSH
12852: LD_INT 150
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 15
12877: PPUSH
12878: CALL_OW 12
12882: ARRAY
12883: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 20
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 40
12900: PUSH
12901: LD_INT 50
12903: PUSH
12904: LD_INT 60
12906: PUSH
12907: LD_INT 70
12909: PUSH
12910: LD_INT 80
12912: PUSH
12913: LD_INT 90
12915: PUSH
12916: LD_INT 100
12918: PUSH
12919: LD_INT 110
12921: PUSH
12922: LD_INT 120
12924: PUSH
12925: LD_INT 130
12927: PUSH
12928: LD_INT 140
12930: PUSH
12931: LD_INT 150
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_INT 15
12956: PPUSH
12957: CALL_OW 12
12961: ARRAY
12962: ST_TO_ADDR
// if ValidHex ( x , y ) then
12963: LD_VAR 0 3
12967: PPUSH
12968: LD_VAR 0 4
12972: PPUSH
12973: CALL_OW 488
12977: IFFALSE 13000
// begin result := [ x , y ] ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_VAR 0 3
12988: PUSH
12989: LD_VAR 0 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// break ;
12998: GO 13002
// end ; end ;
13000: GO 12802
13002: POP
13003: POP
// if result then
13004: LD_VAR 0 1
13008: IFFALSE 13068
// begin ToLua ( playSibBomb() ) ;
13010: LD_STRING playSibBomb()
13012: PPUSH
13013: CALL_OW 559
// wait ( 0 0$14 ) ;
13017: LD_INT 490
13019: PPUSH
13020: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13024: LD_VAR 0 1
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 2
13040: ARRAY
13041: PPUSH
13042: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: PPUSH
13064: CALL_OW 429
// end ; end ;
13068: LD_VAR 0 1
13072: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13073: LD_EXP 16
13077: PUSH
13078: LD_EXP 38
13082: AND
13083: IFFALSE 13095
13085: GO 13087
13087: DISABLE
// YouLost (  ) ;
13088: LD_STRING 
13090: PPUSH
13091: CALL_OW 104
13095: END
// every 0 0$1 trigger StreamModeActive and sFog do
13096: LD_EXP 16
13100: PUSH
13101: LD_EXP 37
13105: AND
13106: IFFALSE 13120
13108: GO 13110
13110: DISABLE
// FogOff ( your_side ) ;
13111: LD_OWVAR 2
13115: PPUSH
13116: CALL_OW 344
13120: END
// every 0 0$1 trigger StreamModeActive and sSun do
13121: LD_EXP 16
13125: PUSH
13126: LD_EXP 39
13130: AND
13131: IFFALSE 13159
13133: GO 13135
13135: DISABLE
// begin solar_recharge_percent := 0 ;
13136: LD_ADDR_OWVAR 79
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13144: LD_INT 10500
13146: PPUSH
13147: CALL_OW 67
// solar_recharge_percent := 100 ;
13151: LD_ADDR_OWVAR 79
13155: PUSH
13156: LD_INT 100
13158: ST_TO_ADDR
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13160: LD_EXP 16
13164: PUSH
13165: LD_EXP 40
13169: AND
13170: IFFALSE 13409
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
13179: PPUSH
// begin tmp := [ ] ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: EMPTY
13186: ST_TO_ADDR
// for i := 1 to 6 do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_INT 6
13199: PUSH
13200: FOR_TO
13201: IFFALSE 13306
// begin uc_nation := nation_nature ;
13203: LD_ADDR_OWVAR 21
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// uc_side := 0 ;
13211: LD_ADDR_OWVAR 20
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13219: LD_ADDR_OWVAR 29
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 12
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// hc_agressivity := 20 ;
13234: LD_ADDR_OWVAR 35
13238: PUSH
13239: LD_INT 20
13241: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13242: LD_ADDR_OWVAR 28
13246: PUSH
13247: LD_INT 17
13249: ST_TO_ADDR
// hc_gallery :=  ;
13250: LD_ADDR_OWVAR 33
13254: PUSH
13255: LD_STRING 
13257: ST_TO_ADDR
// hc_name :=  ;
13258: LD_ADDR_OWVAR 26
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// un := CreateHuman ;
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: CALL_OW 44
13275: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 51
// tmp := tmp ^ un ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_VAR 0 3
13297: PUSH
13298: LD_VAR 0 2
13302: ADD
13303: ST_TO_ADDR
// end ;
13304: GO 13200
13306: POP
13307: POP
// repeat wait ( 0 0$1 ) ;
13308: LD_INT 35
13310: PPUSH
13311: CALL_OW 67
// for un in tmp do
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: LD_VAR 0 3
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13400
// begin if IsDead ( un ) then
13328: LD_VAR 0 2
13332: PPUSH
13333: CALL_OW 301
13337: IFFALSE 13357
// begin tmp := tmp diff un ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_VAR 0 3
13348: PUSH
13349: LD_VAR 0 2
13353: DIFF
13354: ST_TO_ADDR
// continue ;
13355: GO 13325
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13357: LD_VAR 0 2
13361: PPUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 0
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PPUSH
13384: LD_VAR 0 2
13388: PPUSH
13389: CALL_OW 74
13393: PPUSH
13394: CALL_OW 115
// end ;
13398: GO 13325
13400: POP
13401: POP
// until not tmp ;
13402: LD_VAR 0 3
13406: NOT
13407: IFFALSE 13308
// end ;
13409: PPOPN 3
13411: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13412: LD_EXP 16
13416: PUSH
13417: LD_EXP 41
13421: AND
13422: IFFALSE 13476
13424: GO 13426
13426: DISABLE
// begin ToLua ( displayTroll(); ) ;
13427: LD_STRING displayTroll();
13429: PPUSH
13430: CALL_OW 559
// wait ( 3 3$00 ) ;
13434: LD_INT 6300
13436: PPUSH
13437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13441: LD_STRING hideTroll();
13443: PPUSH
13444: CALL_OW 559
// wait ( 1 1$00 ) ;
13448: LD_INT 2100
13450: PPUSH
13451: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13455: LD_STRING displayTroll();
13457: PPUSH
13458: CALL_OW 559
// wait ( 1 1$00 ) ;
13462: LD_INT 2100
13464: PPUSH
13465: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13469: LD_STRING hideTroll();
13471: PPUSH
13472: CALL_OW 559
// end ;
13476: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13477: LD_EXP 16
13481: PUSH
13482: LD_EXP 42
13486: AND
13487: IFFALSE 13550
13489: GO 13491
13491: DISABLE
13492: LD_INT 0
13494: PPUSH
// begin p := 0 ;
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// repeat game_speed := 1 ;
13503: LD_ADDR_OWVAR 65
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13511: LD_INT 35
13513: PPUSH
13514: CALL_OW 67
// p := p + 1 ;
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: LD_INT 1
13530: PLUS
13531: ST_TO_ADDR
// until p >= 60 ;
13532: LD_VAR 0 1
13536: PUSH
13537: LD_INT 60
13539: GREATEREQUAL
13540: IFFALSE 13503
// game_speed := 4 ;
13542: LD_ADDR_OWVAR 65
13546: PUSH
13547: LD_INT 4
13549: ST_TO_ADDR
// end ;
13550: PPOPN 1
13552: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13553: LD_EXP 16
13557: PUSH
13558: LD_EXP 43
13562: AND
13563: IFFALSE 13709
13565: GO 13567
13567: DISABLE
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_OWVAR 2
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 0
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: ST_TO_ADDR
// if not depot then
13626: LD_VAR 0 1
13630: NOT
13631: IFFALSE 13635
// exit ;
13633: GO 13709
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: CALL_OW 274
13663: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13664: LD_VAR 0 2
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 0
13674: PPUSH
13675: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13679: LD_VAR 0 2
13683: PPUSH
13684: LD_INT 2
13686: PPUSH
13687: LD_INT 0
13689: PPUSH
13690: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 3
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 277
// end ;
13709: PPOPN 2
13711: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13712: LD_EXP 16
13716: PUSH
13717: LD_EXP 44
13721: AND
13722: IFFALSE 13819
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_INT 22
13737: PUSH
13738: LD_OWVAR 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 21
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 3
13759: PUSH
13760: LD_INT 23
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: ST_TO_ADDR
// if not tmp then
13784: LD_VAR 0 1
13788: NOT
13789: IFFALSE 13793
// exit ;
13791: GO 13819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13793: LD_VAR 0 1
13797: PUSH
13798: LD_INT 1
13800: PPUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 12
13810: ARRAY
13811: PPUSH
13812: LD_INT 200
13814: PPUSH
13815: CALL_OW 234
// end ;
13819: PPOPN 1
13821: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13822: LD_EXP 16
13826: PUSH
13827: LD_EXP 45
13831: AND
13832: IFFALSE 13911
13834: GO 13836
13836: DISABLE
13837: LD_INT 0
13839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 22
13847: PUSH
13848: LD_OWVAR 2
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 21
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 69
13875: ST_TO_ADDR
// if not tmp then
13876: LD_VAR 0 1
13880: NOT
13881: IFFALSE 13885
// exit ;
13883: GO 13911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13885: LD_VAR 0 1
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: PPUSH
13904: LD_INT 60
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: PPOPN 1
13913: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13914: LD_EXP 16
13918: PUSH
13919: LD_EXP 46
13923: AND
13924: IFFALSE 14023
13926: GO 13928
13928: DISABLE
13929: LD_INT 0
13931: PPUSH
13932: PPUSH
// begin enable ;
13933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13934: LD_ADDR_VAR 0 1
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_OWVAR 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 61
13953: PUSH
13954: EMPTY
13955: LIST
13956: PUSH
13957: LD_INT 33
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 1
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14023
// for i in tmp do
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_VAR 0 1
13995: PUSH
13996: FOR_IN
13997: IFFALSE 14021
// if IsControledBy ( i ) then
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 312
14008: IFFALSE 14019
// ComUnlink ( i ) ;
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 136
14019: GO 13996
14021: POP
14022: POP
// end ;
14023: PPOPN 2
14025: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14026: LD_EXP 16
14030: PUSH
14031: LD_EXP 47
14035: AND
14036: IFFALSE 14176
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
// begin ToLua ( displayPowell(); ) ;
14045: LD_STRING displayPowell();
14047: PPUSH
14048: CALL_OW 559
// uc_side := 0 ;
14052: LD_ADDR_OWVAR 20
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// uc_nation := 2 ;
14060: LD_ADDR_OWVAR 21
14064: PUSH
14065: LD_INT 2
14067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14068: LD_ADDR_OWVAR 37
14072: PUSH
14073: LD_INT 14
14075: ST_TO_ADDR
// vc_engine := engine_siberite ;
14076: LD_ADDR_OWVAR 39
14080: PUSH
14081: LD_INT 3
14083: ST_TO_ADDR
// vc_control := control_apeman ;
14084: LD_ADDR_OWVAR 38
14088: PUSH
14089: LD_INT 5
14091: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14092: LD_ADDR_OWVAR 40
14096: PUSH
14097: LD_INT 29
14099: ST_TO_ADDR
// un := CreateVehicle ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: CALL_OW 45
14109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14122: LD_INT 35
14124: PPUSH
14125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14129: LD_VAR 0 2
14133: PPUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: PPUSH
14151: LD_VAR 0 2
14155: PPUSH
14156: CALL_OW 74
14160: PPUSH
14161: CALL_OW 115
// until IsDead ( un ) ;
14165: LD_VAR 0 2
14169: PPUSH
14170: CALL_OW 301
14174: IFFALSE 14122
// end ;
14176: PPOPN 2
14178: END
// every 0 0$1 trigger StreamModeActive and sStu do
14179: LD_EXP 16
14183: PUSH
14184: LD_EXP 55
14188: AND
14189: IFFALSE 14205
14191: GO 14193
14193: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14194: LD_STRING displayStucuk();
14196: PPUSH
14197: CALL_OW 559
// ResetFog ;
14201: CALL_OW 335
// end ;
14205: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14206: LD_EXP 16
14210: PUSH
14211: LD_EXP 48
14215: AND
14216: IFFALSE 14357
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14225: LD_ADDR_VAR 0 2
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 2
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14357
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 2
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_INT 0
14301: PPUSH
14302: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_OWVAR 3
14315: PUSH
14316: LD_VAR 0 1
14320: DIFF
14321: PPUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 74
14331: PPUSH
14332: CALL_OW 115
// wait ( 0 0$20 ) ;
14336: LD_INT 700
14338: PPUSH
14339: CALL_OW 67
// SetSide ( un , your_side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_OWVAR 2
14352: PPUSH
14353: CALL_OW 235
// end ;
14357: PPOPN 2
14359: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14360: LD_EXP 16
14364: PUSH
14365: LD_EXP 49
14369: AND
14370: IFFALSE 14476
14372: GO 14374
14374: DISABLE
14375: LD_INT 0
14377: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_OWVAR 2
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 30
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not depot then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14476
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14441: LD_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: CALL_OW 250
14454: PPUSH
14455: LD_VAR 0 1
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: CALL_OW 251
14468: PPUSH
14469: LD_INT 70
14471: PPUSH
14472: CALL_OW 495
// end ;
14476: PPOPN 1
14478: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14479: LD_EXP 16
14483: PUSH
14484: LD_EXP 50
14488: AND
14489: IFFALSE 14700
14491: GO 14493
14493: DISABLE
14494: LD_INT 0
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14501: LD_ADDR_VAR 0 5
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_OWVAR 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 21
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// if not tmp then
14537: LD_VAR 0 5
14541: NOT
14542: IFFALSE 14546
// exit ;
14544: GO 14700
// for i in tmp do
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_VAR 0 5
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14698
// begin d := rand ( 0 , 5 ) ;
14559: LD_ADDR_VAR 0 4
14563: PUSH
14564: LD_INT 0
14566: PPUSH
14567: LD_INT 5
14569: PPUSH
14570: CALL_OW 12
14574: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 250
14589: PPUSH
14590: LD_VAR 0 4
14594: PPUSH
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 12
14600: PPUSH
14601: CALL_OW 12
14605: PPUSH
14606: CALL_OW 272
14610: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 251
14625: PPUSH
14626: LD_VAR 0 4
14630: PPUSH
14631: LD_INT 3
14633: PPUSH
14634: LD_INT 12
14636: PPUSH
14637: CALL_OW 12
14641: PPUSH
14642: CALL_OW 273
14646: ST_TO_ADDR
// if ValidHex ( x , y ) then
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_VAR 0 3
14656: PPUSH
14657: CALL_OW 488
14661: IFFALSE 14696
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_VAR 0 3
14677: PPUSH
14678: LD_INT 3
14680: PPUSH
14681: LD_INT 6
14683: PPUSH
14684: CALL_OW 12
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 483
// end ;
14696: GO 14556
14698: POP
14699: POP
// end ;
14700: PPOPN 5
14702: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14703: LD_EXP 16
14707: PUSH
14708: LD_EXP 51
14712: AND
14713: IFFALSE 14807
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_OWVAR 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 32
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: ST_TO_ADDR
// if not tmp then
14769: LD_VAR 0 2
14773: NOT
14774: IFFALSE 14778
// exit ;
14776: GO 14807
// for i in tmp do
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_VAR 0 2
14787: PUSH
14788: FOR_IN
14789: IFFALSE 14805
// SetFuel ( i , 0 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: LD_INT 0
14798: PPUSH
14799: CALL_OW 240
14803: GO 14788
14805: POP
14806: POP
// end ;
14807: PPOPN 2
14809: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14810: LD_EXP 16
14814: PUSH
14815: LD_EXP 52
14819: AND
14820: IFFALSE 14886
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_OWVAR 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 29
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: ST_TO_ADDR
// if not tmp then
14864: LD_VAR 0 1
14868: NOT
14869: IFFALSE 14873
// exit ;
14871: GO 14886
// DestroyUnit ( tmp [ 1 ] ) ;
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: PPUSH
14882: CALL_OW 65
// end ;
14886: PPOPN 1
14888: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14889: LD_EXP 16
14893: PUSH
14894: LD_EXP 54
14898: AND
14899: IFFALSE 15028
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
// begin uc_side := 0 ;
14907: LD_ADDR_OWVAR 20
14911: PUSH
14912: LD_INT 0
14914: ST_TO_ADDR
// uc_nation := nation_arabian ;
14915: LD_ADDR_OWVAR 21
14919: PUSH
14920: LD_INT 2
14922: ST_TO_ADDR
// hc_gallery :=  ;
14923: LD_ADDR_OWVAR 33
14927: PUSH
14928: LD_STRING 
14930: ST_TO_ADDR
// hc_name :=  ;
14931: LD_ADDR_OWVAR 26
14935: PUSH
14936: LD_STRING 
14938: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14939: LD_INT 1
14941: PPUSH
14942: LD_INT 11
14944: PPUSH
14945: LD_INT 10
14947: PPUSH
14948: CALL_OW 380
// un := CreateHuman ;
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: CALL_OW 44
14961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14974: LD_INT 35
14976: PPUSH
14977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14981: LD_VAR 0 1
14985: PPUSH
14986: LD_INT 22
14988: PUSH
14989: LD_OWVAR 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PPUSH
14998: CALL_OW 69
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 74
15012: PPUSH
15013: CALL_OW 115
// until IsDead ( un ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 301
15026: IFFALSE 14974
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15031: LD_EXP 16
15035: PUSH
15036: LD_EXP 56
15040: AND
15041: IFFALSE 15053
15043: GO 15045
15045: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15046: LD_STRING earthquake(getX(game), 0, 32)
15048: PPUSH
15049: CALL_OW 559
15053: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15054: LD_EXP 16
15058: PUSH
15059: LD_EXP 57
15063: AND
15064: IFFALSE 15155
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
// begin enable ;
15072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15073: LD_ADDR_VAR 0 1
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// if not tmp then
15120: LD_VAR 0 1
15124: NOT
15125: IFFALSE 15129
// exit ;
15127: GO 15155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15129: LD_VAR 0 1
15133: PUSH
15134: LD_INT 1
15136: PPUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 12
15146: ARRAY
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 234
// end ;
15155: PPOPN 1
15157: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15158: LD_EXP 16
15162: PUSH
15163: LD_EXP 58
15167: AND
15168: IFFALSE 15309
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15309
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 9
15274: PPUSH
15275: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15279: LD_INT 28
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15294: LD_INT 29
15296: PPUSH
15297: LD_OWVAR 2
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 322
// end ;
15309: PPOPN 3
15311: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15312: LD_EXP 16
15316: PUSH
15317: LD_EXP 59
15321: AND
15322: IFFALSE 15433
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_INT 22
15339: PUSH
15340: LD_OWVAR 2
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 25
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 3
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15433
// un := tmp [ rand ( 1 , tmp ) ] ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 12
15399: ARRAY
15400: ST_TO_ADDR
// if Crawls ( un ) then
15401: LD_VAR 0 2
15405: PPUSH
15406: CALL_OW 318
15410: IFFALSE 15421
// ComWalk ( un ) ;
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15421: LD_VAR 0 2
15425: PPUSH
15426: LD_INT 8
15428: PPUSH
15429: CALL_OW 336
// end ;
15433: PPOPN 3
15435: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15436: LD_EXP 16
15440: PUSH
15441: LD_EXP 60
15445: AND
15446: IFFALSE 15590
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_OWVAR 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 12
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 34
15497: PUSH
15498: LD_INT 51
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 34
15507: PUSH
15508: LD_INT 32
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15590
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15588
// if GetCargo ( i , mat_artifact ) = 0 then
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 4
15560: PPUSH
15561: CALL_OW 289
15565: PUSH
15566: LD_INT 0
15568: EQUAL
15569: IFFALSE 15586
// SetCargo ( i , mat_siberit , 100 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 3
15578: PPUSH
15579: LD_INT 100
15581: PPUSH
15582: CALL_OW 290
15586: GO 15550
15588: POP
15589: POP
// end ;
15590: PPOPN 2
15592: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15593: LD_EXP 16
15597: PUSH
15598: LD_EXP 61
15602: AND
15603: IFFALSE 15786
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_OWVAR 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// if not tmp then
15634: LD_VAR 0 2
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 15786
// for i := 1 to 2 do
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_INT 2
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15784
// begin uc_side := your_side ;
15659: LD_ADDR_OWVAR 20
15663: PUSH
15664: LD_OWVAR 2
15668: ST_TO_ADDR
// uc_nation := nation_american ;
15669: LD_ADDR_OWVAR 21
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// vc_chassis := us_morphling ;
15677: LD_ADDR_OWVAR 37
15681: PUSH
15682: LD_INT 5
15684: ST_TO_ADDR
// vc_engine := engine_siberite ;
15685: LD_ADDR_OWVAR 39
15689: PUSH
15690: LD_INT 3
15692: ST_TO_ADDR
// vc_control := control_computer ;
15693: LD_ADDR_OWVAR 38
15697: PUSH
15698: LD_INT 3
15700: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15701: LD_ADDR_OWVAR 40
15705: PUSH
15706: LD_INT 10
15708: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 310
15722: NOT
15723: IFFALSE 15770
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15725: CALL_OW 45
15729: PPUSH
15730: LD_VAR 0 2
15734: PUSH
15735: LD_INT 1
15737: ARRAY
15738: PPUSH
15739: CALL_OW 250
15743: PPUSH
15744: LD_VAR 0 2
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 251
15757: PPUSH
15758: LD_INT 12
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 50
15768: GO 15782
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15770: CALL_OW 45
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 51
// end ;
15782: GO 15656
15784: POP
15785: POP
// end ;
15786: PPOPN 2
15788: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15789: LD_EXP 16
15793: PUSH
15794: LD_EXP 62
15798: AND
15799: IFFALSE 16021
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15812: LD_ADDR_VAR 0 6
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_OWVAR 2
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 21
15831: PUSH
15832: LD_INT 1
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 23
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 6
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 16021
// s1 := rand ( 1 , 4 ) ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 12
15890: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15891: LD_ADDR_VAR 0 4
15895: PUSH
15896: LD_VAR 0 6
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PPUSH
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 259
15914: ST_TO_ADDR
// if s1 = 1 then
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 1
15922: EQUAL
15923: IFFALSE 15943
// s2 := rand ( 2 , 4 ) else
15925: LD_ADDR_VAR 0 3
15929: PUSH
15930: LD_INT 2
15932: PPUSH
15933: LD_INT 4
15935: PPUSH
15936: CALL_OW 12
15940: ST_TO_ADDR
15941: GO 15951
// s2 := 1 ;
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15951: LD_ADDR_VAR 0 5
15955: PUSH
15956: LD_VAR 0 6
15960: PUSH
15961: LD_INT 1
15963: ARRAY
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: CALL_OW 259
15974: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15975: LD_VAR 0 6
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_VAR 0 5
15993: PPUSH
15994: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15998: LD_VAR 0 6
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 237
// end ;
16021: PPOPN 6
16023: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16024: LD_EXP 16
16028: PUSH
16029: LD_EXP 63
16033: AND
16034: IFFALSE 16113
16036: GO 16038
16038: DISABLE
16039: LD_INT 0
16041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_OWVAR 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 234
// end ;
16113: PPOPN 1
16115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16116: LD_EXP 16
16120: PUSH
16121: LD_EXP 64
16125: AND
16126: IFFALSE 16238
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_OWVAR 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: LD_INT 27
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 30
16167: PUSH
16168: LD_INT 26
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 69
16199: ST_TO_ADDR
// if not tmp then
16200: LD_VAR 0 2
16204: NOT
16205: IFFALSE 16209
// exit ;
16207: GO 16238
// for i in tmp do
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_IN
16220: IFFALSE 16236
// SetLives ( i , 1 ) ;
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 234
16234: GO 16219
16236: POP
16237: POP
// end ;
16238: PPOPN 2
16240: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16241: LD_EXP 16
16245: PUSH
16246: LD_EXP 65
16250: AND
16251: IFFALSE 16538
16253: GO 16255
16255: DISABLE
16256: LD_INT 0
16258: PPUSH
16259: PPUSH
16260: PPUSH
// begin i := rand ( 1 , 7 ) ;
16261: LD_ADDR_VAR 0 1
16265: PUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: CALL_OW 12
16276: ST_TO_ADDR
// case i of 1 :
16277: LD_VAR 0 1
16281: PUSH
16282: LD_INT 1
16284: DOUBLE
16285: EQUAL
16286: IFTRUE 16290
16288: GO 16300
16290: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16291: LD_STRING earthquake(getX(game), 0, 32)
16293: PPUSH
16294: CALL_OW 559
16298: GO 16538
16300: LD_INT 2
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16322
16308: POP
// begin ToLua ( displayStucuk(); ) ;
16309: LD_STRING displayStucuk();
16311: PPUSH
16312: CALL_OW 559
// ResetFog ;
16316: CALL_OW 335
// end ; 3 :
16320: GO 16538
16322: LD_INT 3
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16434
16330: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_OWVAR 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 25
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// if not tmp then
16367: LD_VAR 0 2
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 16538
// un := tmp [ rand ( 1 , tmp ) ] ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_VAR 0 2
16385: PUSH
16386: LD_INT 1
16388: PPUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: CALL_OW 12
16398: ARRAY
16399: ST_TO_ADDR
// if Crawls ( un ) then
16400: LD_VAR 0 3
16404: PPUSH
16405: CALL_OW 318
16409: IFFALSE 16420
// ComWalk ( un ) ;
16411: LD_VAR 0 3
16415: PPUSH
16416: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 8
16427: PPUSH
16428: CALL_OW 336
// end ; 4 :
16432: GO 16538
16434: LD_INT 4
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16516
16442: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 30
16462: PUSH
16463: LD_INT 29
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// if not tmp then
16479: LD_VAR 0 2
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16538
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: PPUSH
16497: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16501: LD_VAR 0 2
16505: PUSH
16506: LD_INT 1
16508: ARRAY
16509: PPUSH
16510: CALL_OW 65
// end ; 5 .. 7 :
16514: GO 16538
16516: LD_INT 5
16518: DOUBLE
16519: GREATEREQUAL
16520: IFFALSE 16528
16522: LD_INT 7
16524: DOUBLE
16525: LESSEQUAL
16526: IFTRUE 16530
16528: GO 16537
16530: POP
// StreamSibBomb ; end ;
16531: CALL 12775 0 0
16535: GO 16538
16537: POP
// end ;
16538: PPOPN 3
16540: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16541: LD_EXP 16
16545: PUSH
16546: LD_EXP 66
16550: AND
16551: IFFALSE 16707
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 81
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if not tmp then
16615: LD_VAR 0 2
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16707
// p := 0 ;
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16632: LD_INT 35
16634: PPUSH
16635: CALL_OW 67
// p := p + 1 ;
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_INT 1
16651: PLUS
16652: ST_TO_ADDR
// for i in tmp do
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_VAR 0 2
16662: PUSH
16663: FOR_IN
16664: IFFALSE 16695
// if GetLives ( i ) < 1000 then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 256
16675: PUSH
16676: LD_INT 1000
16678: LESS
16679: IFFALSE 16693
// SetLives ( i , 1000 ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 1000
16688: PPUSH
16689: CALL_OW 234
16693: GO 16663
16695: POP
16696: POP
// until p > 20 ;
16697: LD_VAR 0 3
16701: PUSH
16702: LD_INT 20
16704: GREATER
16705: IFFALSE 16632
// end ;
16707: PPOPN 3
16709: END
// every 0 0$1 trigger StreamModeActive and sTime do
16710: LD_EXP 16
16714: PUSH
16715: LD_EXP 67
16719: AND
16720: IFFALSE 16755
16722: GO 16724
16724: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16725: LD_INT 28
16727: PPUSH
16728: LD_OWVAR 2
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16740: LD_INT 30
16742: PPUSH
16743: LD_OWVAR 2
16747: PPUSH
16748: LD_INT 2
16750: PPUSH
16751: CALL_OW 322
// end ;
16755: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16756: LD_EXP 16
16760: PUSH
16761: LD_EXP 68
16765: AND
16766: IFFALSE 16887
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16775: LD_ADDR_VAR 0 2
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_OWVAR 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 21
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: ST_TO_ADDR
// if not tmp then
16829: LD_VAR 0 2
16833: NOT
16834: IFFALSE 16838
// exit ;
16836: GO 16887
// for i in tmp do
16838: LD_ADDR_VAR 0 1
16842: PUSH
16843: LD_VAR 0 2
16847: PUSH
16848: FOR_IN
16849: IFFALSE 16885
// begin if Crawls ( i ) then
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 318
16860: IFFALSE 16871
// ComWalk ( i ) ;
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 138
// SetClass ( i , 2 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 2
16878: PPUSH
16879: CALL_OW 336
// end ;
16883: GO 16848
16885: POP
16886: POP
// end ;
16887: PPOPN 2
16889: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16890: LD_EXP 16
16894: PUSH
16895: LD_EXP 69
16899: AND
16900: IFFALSE 17188
16902: GO 16904
16904: DISABLE
16905: LD_INT 0
16907: PPUSH
16908: PPUSH
16909: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16910: LD_OWVAR 2
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16928: LD_INT 9
16930: PPUSH
16931: LD_OWVAR 2
16935: PPUSH
16936: CALL_OW 343
// uc_side := 9 ;
16940: LD_ADDR_OWVAR 20
16944: PUSH
16945: LD_INT 9
16947: ST_TO_ADDR
// uc_nation := 2 ;
16948: LD_ADDR_OWVAR 21
16952: PUSH
16953: LD_INT 2
16955: ST_TO_ADDR
// hc_name := Dark Warrior ;
16956: LD_ADDR_OWVAR 26
16960: PUSH
16961: LD_STRING Dark Warrior
16963: ST_TO_ADDR
// hc_gallery :=  ;
16964: LD_ADDR_OWVAR 33
16968: PUSH
16969: LD_STRING 
16971: ST_TO_ADDR
// hc_noskilllimit := true ;
16972: LD_ADDR_OWVAR 76
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16980: LD_ADDR_OWVAR 31
16984: PUSH
16985: LD_INT 30
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// un := CreateHuman ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: CALL_OW 44
17012: ST_TO_ADDR
// hc_noskilllimit := false ;
17013: LD_ADDR_OWVAR 76
17017: PUSH
17018: LD_INT 0
17020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 51
// ToLua ( playRanger() ) ;
17033: LD_STRING playRanger()
17035: PPUSH
17036: CALL_OW 559
// p := 0 ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17048: LD_INT 35
17050: PPUSH
17051: CALL_OW 67
// p := p + 1 ;
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: LD_INT 1
17067: PLUS
17068: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL_OW 256
17078: PUSH
17079: LD_INT 1000
17081: LESS
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17096: LD_VAR 0 3
17100: PPUSH
17101: LD_INT 81
17103: PUSH
17104: LD_OWVAR 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 91
17115: PUSH
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 30
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 74
17147: PPUSH
17148: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17152: LD_VAR 0 2
17156: PUSH
17157: LD_INT 80
17159: GREATER
17160: PUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: CALL_OW 301
17170: OR
17171: IFFALSE 17048
// if un then
17173: LD_VAR 0 3
17177: IFFALSE 17188
// RemoveUnit ( un ) ;
17179: LD_VAR 0 3
17183: PPUSH
17184: CALL_OW 64
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17191: LD_EXP 70
17195: IFFALSE 17311
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17241: LD_STRING playComputer()
17243: PPUSH
17244: CALL_OW 559
// if not tmp then
17248: LD_VAR 0 2
17252: NOT
17253: IFFALSE 17257
// exit ;
17255: GO 17311
// for i in tmp do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_VAR 0 2
17266: PUSH
17267: FOR_IN
17268: IFFALSE 17309
// for j := 1 to 4 do
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: DOUBLE
17276: LD_INT 1
17278: DEC
17279: ST_TO_ADDR
17280: LD_INT 4
17282: PUSH
17283: FOR_TO
17284: IFFALSE 17305
// SetSkill ( i , j , 10 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 237
17303: GO 17283
17305: POP
17306: POP
17307: GO 17267
17309: POP
17310: POP
// end ;
17311: PPOPN 3
17313: END
// every 0 0$1 trigger s30 do var i , tmp ;
17314: LD_EXP 71
17318: IFFALSE 17387
17320: GO 17322
17322: DISABLE
17323: LD_INT 0
17325: PPUSH
17326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_OWVAR 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: ST_TO_ADDR
// if not tmp then
17349: LD_VAR 0 2
17353: NOT
17354: IFFALSE 17358
// exit ;
17356: GO 17387
// for i in tmp do
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17385
// SetLives ( i , 300 ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 300
17378: PPUSH
17379: CALL_OW 234
17383: GO 17368
17385: POP
17386: POP
// end ;
17387: PPOPN 2
17389: END
// every 0 0$1 trigger s60 do var i , tmp ;
17390: LD_EXP 72
17394: IFFALSE 17463
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17403: LD_ADDR_VAR 0 2
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not tmp then
17425: LD_VAR 0 2
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17463
// for i in tmp do
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: FOR_IN
17445: IFFALSE 17461
// SetLives ( i , 600 ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 600
17454: PPUSH
17455: CALL_OW 234
17459: GO 17444
17461: POP
17462: POP
// end ;
17463: PPOPN 2
17465: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17466: LD_INT 0
17468: PPUSH
// case cmd of 301 :
17469: LD_VAR 0 1
17473: PUSH
17474: LD_INT 301
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17514
17482: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17483: LD_VAR 0 6
17487: PPUSH
17488: LD_VAR 0 7
17492: PPUSH
17493: LD_VAR 0 8
17497: PPUSH
17498: LD_VAR 0 4
17502: PPUSH
17503: LD_VAR 0 5
17507: PPUSH
17508: CALL 18723 0 5
17512: GO 17635
17514: LD_INT 302
17516: DOUBLE
17517: EQUAL
17518: IFTRUE 17522
17520: GO 17559
17522: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17523: LD_VAR 0 6
17527: PPUSH
17528: LD_VAR 0 7
17532: PPUSH
17533: LD_VAR 0 8
17537: PPUSH
17538: LD_VAR 0 9
17542: PPUSH
17543: LD_VAR 0 4
17547: PPUSH
17548: LD_VAR 0 5
17552: PPUSH
17553: CALL 18814 0 6
17557: GO 17635
17559: LD_INT 303
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17604
17567: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17568: LD_VAR 0 6
17572: PPUSH
17573: LD_VAR 0 7
17577: PPUSH
17578: LD_VAR 0 8
17582: PPUSH
17583: LD_VAR 0 9
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: LD_VAR 0 5
17597: PPUSH
17598: CALL 17640 0 6
17602: GO 17635
17604: LD_INT 304
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17612
17610: GO 17634
17612: POP
// hHackTeleport ( unit , x , y ) ; end ;
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_VAR 0 4
17622: PPUSH
17623: LD_VAR 0 5
17627: PPUSH
17628: CALL 19407 0 3
17632: GO 17635
17634: POP
// end ;
17635: LD_VAR 0 12
17639: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17644: LD_VAR 0 1
17648: PUSH
17649: LD_INT 1
17651: LESS
17652: PUSH
17653: LD_VAR 0 1
17657: PUSH
17658: LD_INT 3
17660: GREATER
17661: OR
17662: PUSH
17663: LD_VAR 0 5
17667: PPUSH
17668: LD_VAR 0 6
17672: PPUSH
17673: CALL_OW 428
17677: OR
17678: IFFALSE 17682
// exit ;
17680: GO 18410
// uc_side := your_side ;
17682: LD_ADDR_OWVAR 20
17686: PUSH
17687: LD_OWVAR 2
17691: ST_TO_ADDR
// uc_nation := nation ;
17692: LD_ADDR_OWVAR 21
17696: PUSH
17697: LD_VAR 0 1
17701: ST_TO_ADDR
// bc_level = 1 ;
17702: LD_ADDR_OWVAR 43
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// case btype of 1 :
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 1
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// bc_type := b_depot ; 2 :
17724: LD_ADDR_OWVAR 42
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
17732: GO 18354
17734: LD_INT 2
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17753
17742: POP
// bc_type := b_warehouse ; 3 :
17743: LD_ADDR_OWVAR 42
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
17751: GO 18354
17753: LD_INT 3
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17772
17761: POP
// bc_type := b_lab ; 4 .. 9 :
17762: LD_ADDR_OWVAR 42
17766: PUSH
17767: LD_INT 6
17769: ST_TO_ADDR
17770: GO 18354
17772: LD_INT 4
17774: DOUBLE
17775: GREATEREQUAL
17776: IFFALSE 17784
17778: LD_INT 9
17780: DOUBLE
17781: LESSEQUAL
17782: IFTRUE 17786
17784: GO 17846
17786: POP
// begin bc_type := b_lab_half ;
17787: LD_ADDR_OWVAR 42
17791: PUSH
17792: LD_INT 7
17794: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17795: LD_ADDR_OWVAR 44
17799: PUSH
17800: LD_INT 10
17802: PUSH
17803: LD_INT 11
17805: PUSH
17806: LD_INT 12
17808: PUSH
17809: LD_INT 15
17811: PUSH
17812: LD_INT 14
17814: PUSH
17815: LD_INT 13
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 3
17833: MINUS
17834: ARRAY
17835: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17836: LD_ADDR_OWVAR 45
17840: PUSH
17841: LD_INT 9
17843: ST_TO_ADDR
// end ; 10 .. 13 :
17844: GO 18354
17846: LD_INT 10
17848: DOUBLE
17849: GREATEREQUAL
17850: IFFALSE 17858
17852: LD_INT 13
17854: DOUBLE
17855: LESSEQUAL
17856: IFTRUE 17860
17858: GO 17937
17860: POP
// begin bc_type := b_lab_full ;
17861: LD_ADDR_OWVAR 42
17865: PUSH
17866: LD_INT 8
17868: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17869: LD_ADDR_OWVAR 44
17873: PUSH
17874: LD_INT 10
17876: PUSH
17877: LD_INT 12
17879: PUSH
17880: LD_INT 14
17882: PUSH
17883: LD_INT 13
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: LD_VAR 0 2
17896: PUSH
17897: LD_INT 9
17899: MINUS
17900: ARRAY
17901: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17902: LD_ADDR_OWVAR 45
17906: PUSH
17907: LD_INT 11
17909: PUSH
17910: LD_INT 15
17912: PUSH
17913: LD_INT 12
17915: PUSH
17916: LD_INT 15
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 9
17932: MINUS
17933: ARRAY
17934: ST_TO_ADDR
// end ; 14 :
17935: GO 18354
17937: LD_INT 14
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 17956
17945: POP
// bc_type := b_workshop ; 15 :
17946: LD_ADDR_OWVAR 42
17950: PUSH
17951: LD_INT 2
17953: ST_TO_ADDR
17954: GO 18354
17956: LD_INT 15
17958: DOUBLE
17959: EQUAL
17960: IFTRUE 17964
17962: GO 17975
17964: POP
// bc_type := b_factory ; 16 :
17965: LD_ADDR_OWVAR 42
17969: PUSH
17970: LD_INT 3
17972: ST_TO_ADDR
17973: GO 18354
17975: LD_INT 16
17977: DOUBLE
17978: EQUAL
17979: IFTRUE 17983
17981: GO 17994
17983: POP
// bc_type := b_ext_gun ; 17 :
17984: LD_ADDR_OWVAR 42
17988: PUSH
17989: LD_INT 17
17991: ST_TO_ADDR
17992: GO 18354
17994: LD_INT 17
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18030
18002: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18003: LD_ADDR_OWVAR 42
18007: PUSH
18008: LD_INT 19
18010: PUSH
18011: LD_INT 23
18013: PUSH
18014: LD_INT 19
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: LD_VAR 0 1
18026: ARRAY
18027: ST_TO_ADDR
18028: GO 18354
18030: LD_INT 18
18032: DOUBLE
18033: EQUAL
18034: IFTRUE 18038
18036: GO 18049
18038: POP
// bc_type := b_ext_radar ; 19 :
18039: LD_ADDR_OWVAR 42
18043: PUSH
18044: LD_INT 20
18046: ST_TO_ADDR
18047: GO 18354
18049: LD_INT 19
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18068
18057: POP
// bc_type := b_ext_radio ; 20 :
18058: LD_ADDR_OWVAR 42
18062: PUSH
18063: LD_INT 22
18065: ST_TO_ADDR
18066: GO 18354
18068: LD_INT 20
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18087
18076: POP
// bc_type := b_ext_siberium ; 21 :
18077: LD_ADDR_OWVAR 42
18081: PUSH
18082: LD_INT 21
18084: ST_TO_ADDR
18085: GO 18354
18087: LD_INT 21
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18106
18095: POP
// bc_type := b_ext_computer ; 22 :
18096: LD_ADDR_OWVAR 42
18100: PUSH
18101: LD_INT 24
18103: ST_TO_ADDR
18104: GO 18354
18106: LD_INT 22
18108: DOUBLE
18109: EQUAL
18110: IFTRUE 18114
18112: GO 18125
18114: POP
// bc_type := b_ext_track ; 23 :
18115: LD_ADDR_OWVAR 42
18119: PUSH
18120: LD_INT 16
18122: ST_TO_ADDR
18123: GO 18354
18125: LD_INT 23
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18133
18131: GO 18144
18133: POP
// bc_type := b_ext_laser ; 24 :
18134: LD_ADDR_OWVAR 42
18138: PUSH
18139: LD_INT 25
18141: ST_TO_ADDR
18142: GO 18354
18144: LD_INT 24
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18163
18152: POP
// bc_type := b_control_tower ; 25 :
18153: LD_ADDR_OWVAR 42
18157: PUSH
18158: LD_INT 36
18160: ST_TO_ADDR
18161: GO 18354
18163: LD_INT 25
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18182
18171: POP
// bc_type := b_breastwork ; 26 :
18172: LD_ADDR_OWVAR 42
18176: PUSH
18177: LD_INT 31
18179: ST_TO_ADDR
18180: GO 18354
18182: LD_INT 26
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// bc_type := b_bunker ; 27 :
18191: LD_ADDR_OWVAR 42
18195: PUSH
18196: LD_INT 32
18198: ST_TO_ADDR
18199: GO 18354
18201: LD_INT 27
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18220
18209: POP
// bc_type := b_turret ; 28 :
18210: LD_ADDR_OWVAR 42
18214: PUSH
18215: LD_INT 33
18217: ST_TO_ADDR
18218: GO 18354
18220: LD_INT 28
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18239
18228: POP
// bc_type := b_armoury ; 29 :
18229: LD_ADDR_OWVAR 42
18233: PUSH
18234: LD_INT 4
18236: ST_TO_ADDR
18237: GO 18354
18239: LD_INT 29
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18258
18247: POP
// bc_type := b_barracks ; 30 :
18248: LD_ADDR_OWVAR 42
18252: PUSH
18253: LD_INT 5
18255: ST_TO_ADDR
18256: GO 18354
18258: LD_INT 30
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18277
18266: POP
// bc_type := b_solar_power ; 31 :
18267: LD_ADDR_OWVAR 42
18271: PUSH
18272: LD_INT 27
18274: ST_TO_ADDR
18275: GO 18354
18277: LD_INT 31
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18296
18285: POP
// bc_type := b_oil_power ; 32 :
18286: LD_ADDR_OWVAR 42
18290: PUSH
18291: LD_INT 26
18293: ST_TO_ADDR
18294: GO 18354
18296: LD_INT 32
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18315
18304: POP
// bc_type := b_siberite_power ; 33 :
18305: LD_ADDR_OWVAR 42
18309: PUSH
18310: LD_INT 28
18312: ST_TO_ADDR
18313: GO 18354
18315: LD_INT 33
18317: DOUBLE
18318: EQUAL
18319: IFTRUE 18323
18321: GO 18334
18323: POP
// bc_type := b_oil_mine ; 34 :
18324: LD_ADDR_OWVAR 42
18328: PUSH
18329: LD_INT 29
18331: ST_TO_ADDR
18332: GO 18354
18334: LD_INT 34
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18353
18342: POP
// bc_type := b_siberite_mine ; end ;
18343: LD_ADDR_OWVAR 42
18347: PUSH
18348: LD_INT 30
18350: ST_TO_ADDR
18351: GO 18354
18353: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18354: LD_ADDR_VAR 0 8
18358: PUSH
18359: LD_VAR 0 5
18363: PPUSH
18364: LD_VAR 0 6
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: CALL_OW 47
18378: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18379: LD_OWVAR 42
18383: PUSH
18384: LD_INT 32
18386: PUSH
18387: LD_INT 33
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: IN
18394: IFFALSE 18410
// PlaceWeaponTurret ( b , weapon ) ;
18396: LD_VAR 0 8
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: CALL_OW 431
// end ;
18410: LD_VAR 0 7
18414: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18415: LD_INT 0
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18421: LD_ADDR_VAR 0 4
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_OWVAR 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 30
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: ST_TO_ADDR
// if not tmp then
18475: LD_VAR 0 4
18479: NOT
18480: IFFALSE 18484
// exit ;
18482: GO 18543
// for i in tmp do
18484: LD_ADDR_VAR 0 2
18488: PUSH
18489: LD_VAR 0 4
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18541
// for j = 1 to 3 do
18497: LD_ADDR_VAR 0 3
18501: PUSH
18502: DOUBLE
18503: LD_INT 1
18505: DEC
18506: ST_TO_ADDR
18507: LD_INT 3
18509: PUSH
18510: FOR_TO
18511: IFFALSE 18537
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 274
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: LD_INT 99999
18530: PPUSH
18531: CALL_OW 277
18535: GO 18510
18537: POP
18538: POP
18539: GO 18494
18541: POP
18542: POP
// end ;
18543: LD_VAR 0 1
18547: RET
// export function hHackSetLevel10 ; var i , j ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
18552: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18553: LD_ADDR_VAR 0 2
18557: PUSH
18558: LD_INT 21
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PPUSH
18568: CALL_OW 69
18572: PUSH
18573: FOR_IN
18574: IFFALSE 18626
// if IsSelected ( i ) then
18576: LD_VAR 0 2
18580: PPUSH
18581: CALL_OW 306
18585: IFFALSE 18624
// begin for j := 1 to 4 do
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: DOUBLE
18593: LD_INT 1
18595: DEC
18596: ST_TO_ADDR
18597: LD_INT 4
18599: PUSH
18600: FOR_TO
18601: IFFALSE 18622
// SetSkill ( i , j , 10 ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 10
18615: PPUSH
18616: CALL_OW 237
18620: GO 18600
18622: POP
18623: POP
// end ;
18624: GO 18573
18626: POP
18627: POP
// end ;
18628: LD_VAR 0 1
18632: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18633: LD_INT 0
18635: PPUSH
18636: PPUSH
18637: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18638: LD_ADDR_VAR 0 2
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_OWVAR 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 21
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: PUSH
18674: FOR_IN
18675: IFFALSE 18716
// begin for j := 1 to 4 do
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: DOUBLE
18683: LD_INT 1
18685: DEC
18686: ST_TO_ADDR
18687: LD_INT 4
18689: PUSH
18690: FOR_TO
18691: IFFALSE 18712
// SetSkill ( i , j , 10 ) ;
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 10
18705: PPUSH
18706: CALL_OW 237
18710: GO 18690
18712: POP
18713: POP
// end ;
18714: GO 18674
18716: POP
18717: POP
// end ;
18718: LD_VAR 0 1
18722: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18723: LD_INT 0
18725: PPUSH
// uc_side := your_side ;
18726: LD_ADDR_OWVAR 20
18730: PUSH
18731: LD_OWVAR 2
18735: ST_TO_ADDR
// uc_nation := nation ;
18736: LD_ADDR_OWVAR 21
18740: PUSH
18741: LD_VAR 0 1
18745: ST_TO_ADDR
// InitHc ;
18746: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18750: LD_INT 0
18752: PPUSH
18753: LD_VAR 0 2
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18767: LD_VAR 0 4
18771: PPUSH
18772: LD_VAR 0 5
18776: PPUSH
18777: CALL_OW 428
18781: PUSH
18782: LD_INT 0
18784: EQUAL
18785: IFFALSE 18809
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18787: CALL_OW 44
18791: PPUSH
18792: LD_VAR 0 4
18796: PPUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 48
// end ;
18809: LD_VAR 0 6
18813: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
// uc_side := your_side ;
18818: LD_ADDR_OWVAR 20
18822: PUSH
18823: LD_OWVAR 2
18827: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18828: LD_VAR 0 1
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: LD_INT 4
18844: PUSH
18845: LD_INT 5
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: IN
18855: IFFALSE 18867
// uc_nation := nation_american else
18857: LD_ADDR_OWVAR 21
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
18865: GO 18910
// if chassis in [ 11 , 12 , 13 , 14 ] then
18867: LD_VAR 0 1
18871: PUSH
18872: LD_INT 11
18874: PUSH
18875: LD_INT 12
18877: PUSH
18878: LD_INT 13
18880: PUSH
18881: LD_INT 14
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: IN
18890: IFFALSE 18902
// uc_nation := nation_arabian else
18892: LD_ADDR_OWVAR 21
18896: PUSH
18897: LD_INT 2
18899: ST_TO_ADDR
18900: GO 18910
// uc_nation := nation_russian ;
18902: LD_ADDR_OWVAR 21
18906: PUSH
18907: LD_INT 3
18909: ST_TO_ADDR
// vc_chassis := chassis ;
18910: LD_ADDR_OWVAR 37
18914: PUSH
18915: LD_VAR 0 1
18919: ST_TO_ADDR
// vc_engine := engine ;
18920: LD_ADDR_OWVAR 39
18924: PUSH
18925: LD_VAR 0 2
18929: ST_TO_ADDR
// vc_control := control ;
18930: LD_ADDR_OWVAR 38
18934: PUSH
18935: LD_VAR 0 3
18939: ST_TO_ADDR
// vc_weapon := weapon ;
18940: LD_ADDR_OWVAR 40
18944: PUSH
18945: LD_VAR 0 4
18949: ST_TO_ADDR
// un := CreateVehicle ;
18950: LD_ADDR_VAR 0 8
18954: PUSH
18955: CALL_OW 45
18959: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18960: LD_VAR 0 8
18964: PPUSH
18965: LD_INT 0
18967: PPUSH
18968: LD_INT 5
18970: PPUSH
18971: CALL_OW 12
18975: PPUSH
18976: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18980: LD_VAR 0 8
18984: PPUSH
18985: LD_VAR 0 5
18989: PPUSH
18990: LD_VAR 0 6
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 48
// end ;
19002: LD_VAR 0 7
19006: RET
// export hInvincible ; every 1 do
19007: GO 19009
19009: DISABLE
// hInvincible := [ ] ;
19010: LD_ADDR_EXP 73
19014: PUSH
19015: EMPTY
19016: ST_TO_ADDR
19017: END
// every 10 do var i ;
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
// begin enable ;
19024: ENABLE
// if not hInvincible then
19025: LD_EXP 73
19029: NOT
19030: IFFALSE 19034
// exit ;
19032: GO 19078
// for i in hInvincible do
19034: LD_ADDR_VAR 0 1
19038: PUSH
19039: LD_EXP 73
19043: PUSH
19044: FOR_IN
19045: IFFALSE 19076
// if GetLives ( i ) < 1000 then
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 256
19056: PUSH
19057: LD_INT 1000
19059: LESS
19060: IFFALSE 19074
// SetLives ( i , 1000 ) ;
19062: LD_VAR 0 1
19066: PPUSH
19067: LD_INT 1000
19069: PPUSH
19070: CALL_OW 234
19074: GO 19044
19076: POP
19077: POP
// end ;
19078: PPOPN 1
19080: END
// export function hHackInvincible ; var i ; begin
19081: LD_INT 0
19083: PPUSH
19084: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: LD_INT 21
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 21
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: PUSH
19123: FOR_IN
19124: IFFALSE 19185
// if IsSelected ( i ) then
19126: LD_VAR 0 2
19130: PPUSH
19131: CALL_OW 306
19135: IFFALSE 19183
// begin if i in hInvincible then
19137: LD_VAR 0 2
19141: PUSH
19142: LD_EXP 73
19146: IN
19147: IFFALSE 19167
// hInvincible := hInvincible diff i else
19149: LD_ADDR_EXP 73
19153: PUSH
19154: LD_EXP 73
19158: PUSH
19159: LD_VAR 0 2
19163: DIFF
19164: ST_TO_ADDR
19165: GO 19183
// hInvincible := hInvincible union i ;
19167: LD_ADDR_EXP 73
19171: PUSH
19172: LD_EXP 73
19176: PUSH
19177: LD_VAR 0 2
19181: UNION
19182: ST_TO_ADDR
// end ;
19183: GO 19123
19185: POP
19186: POP
// end ;
19187: LD_VAR 0 1
19191: RET
// export function hHackInvisible ; var i , j ; begin
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
19196: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 21
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19242
// if IsSelected ( i ) then
19220: LD_VAR 0 2
19224: PPUSH
19225: CALL_OW 306
19229: IFFALSE 19240
// ComForceInvisible ( i ) ;
19231: LD_VAR 0 2
19235: PPUSH
19236: CALL_OW 496
19240: GO 19217
19242: POP
19243: POP
// end ;
19244: LD_VAR 0 1
19248: RET
// export function hHackChangeYourSide ; begin
19249: LD_INT 0
19251: PPUSH
// if your_side = 8 then
19252: LD_OWVAR 2
19256: PUSH
19257: LD_INT 8
19259: EQUAL
19260: IFFALSE 19272
// your_side := 0 else
19262: LD_ADDR_OWVAR 2
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
19270: GO 19286
// your_side := your_side + 1 ;
19272: LD_ADDR_OWVAR 2
19276: PUSH
19277: LD_OWVAR 2
19281: PUSH
19282: LD_INT 1
19284: PLUS
19285: ST_TO_ADDR
// end ;
19286: LD_VAR 0 1
19290: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19291: LD_INT 0
19293: PPUSH
19294: PPUSH
19295: PPUSH
// for i in all_units do
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_OWVAR 3
19305: PUSH
19306: FOR_IN
19307: IFFALSE 19385
// if IsSelected ( i ) then
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 306
19318: IFFALSE 19383
// begin j := GetSide ( i ) ;
19320: LD_ADDR_VAR 0 3
19324: PUSH
19325: LD_VAR 0 2
19329: PPUSH
19330: CALL_OW 255
19334: ST_TO_ADDR
// if j = 8 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 8
19342: EQUAL
19343: IFFALSE 19355
// j := 0 else
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
19353: GO 19369
// j := j + 1 ;
19355: LD_ADDR_VAR 0 3
19359: PUSH
19360: LD_VAR 0 3
19364: PUSH
19365: LD_INT 1
19367: PLUS
19368: ST_TO_ADDR
// SetSide ( i , j ) ;
19369: LD_VAR 0 2
19373: PPUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 235
// end ;
19383: GO 19306
19385: POP
19386: POP
// end ;
19387: LD_VAR 0 1
19391: RET
// export function hHackFog ; begin
19392: LD_INT 0
19394: PPUSH
// FogOff ( true ) ;
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 344
// end ;
19402: LD_VAR 0 1
19406: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19407: LD_INT 0
19409: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19410: LD_VAR 0 1
19414: PPUSH
19415: LD_VAR 0 2
19419: PPUSH
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 483
// CenterOnXY ( x , y ) ;
19435: LD_VAR 0 2
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: CALL_OW 84
// end ;
19449: LD_VAR 0 4
19453: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19458: LD_VAR 0 1
19462: NOT
19463: PUSH
19464: LD_VAR 0 2
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 488
19478: NOT
19479: OR
19480: PUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 266
19490: PUSH
19491: LD_INT 3
19493: NONEQUAL
19494: PUSH
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 247
19504: PUSH
19505: LD_INT 1
19507: EQUAL
19508: NOT
19509: AND
19510: OR
19511: IFFALSE 19515
// exit ;
19513: GO 19664
// if GetType ( factory ) = unit_human then
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL_OW 247
19524: PUSH
19525: LD_INT 1
19527: EQUAL
19528: IFFALSE 19545
// factory := IsInUnit ( factory ) ;
19530: LD_ADDR_VAR 0 1
19534: PUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 310
19544: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 266
19554: PUSH
19555: LD_INT 3
19557: NONEQUAL
19558: IFFALSE 19562
// exit ;
19560: GO 19664
// if HexInfo ( x , y ) = factory then
19562: LD_VAR 0 2
19566: PPUSH
19567: LD_VAR 0 3
19571: PPUSH
19572: CALL_OW 428
19576: PUSH
19577: LD_VAR 0 1
19581: EQUAL
19582: IFFALSE 19609
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19584: LD_ADDR_EXP 74
19588: PUSH
19589: LD_EXP 74
19593: PPUSH
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_INT 0
19601: PPUSH
19602: CALL_OW 1
19606: ST_TO_ADDR
19607: GO 19660
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19609: LD_ADDR_EXP 74
19613: PUSH
19614: LD_EXP 74
19618: PPUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 255
19633: PUSH
19634: LD_VAR 0 1
19638: PUSH
19639: LD_VAR 0 2
19643: PUSH
19644: LD_VAR 0 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 1
19659: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19660: CALL 19669 0 0
// end ;
19664: LD_VAR 0 4
19668: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
19673: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19674: LD_STRING resetFactoryWaypoint();
19676: PPUSH
19677: CALL_OW 559
// if factoryWaypoints then
19681: LD_EXP 74
19685: IFFALSE 19811
// begin list := PrepareArray ( factoryWaypoints ) ;
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_EXP 74
19696: PPUSH
19697: CALL 66296 0 1
19701: ST_TO_ADDR
// for i := 1 to list do
19702: LD_ADDR_VAR 0 2
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_VAR 0 3
19716: PUSH
19717: FOR_TO
19718: IFFALSE 19809
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19720: LD_STRING setFactoryWaypointXY(
19722: PUSH
19723: LD_VAR 0 3
19727: PUSH
19728: LD_VAR 0 2
19732: ARRAY
19733: PUSH
19734: LD_INT 1
19736: ARRAY
19737: STR
19738: PUSH
19739: LD_STRING ,
19741: STR
19742: PUSH
19743: LD_VAR 0 3
19747: PUSH
19748: LD_VAR 0 2
19752: ARRAY
19753: PUSH
19754: LD_INT 2
19756: ARRAY
19757: STR
19758: PUSH
19759: LD_STRING ,
19761: STR
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 2
19772: ARRAY
19773: PUSH
19774: LD_INT 3
19776: ARRAY
19777: STR
19778: PUSH
19779: LD_STRING ,
19781: STR
19782: PUSH
19783: LD_VAR 0 3
19787: PUSH
19788: LD_VAR 0 2
19792: ARRAY
19793: PUSH
19794: LD_INT 4
19796: ARRAY
19797: STR
19798: PUSH
19799: LD_STRING )
19801: STR
19802: PPUSH
19803: CALL_OW 559
19807: GO 19717
19809: POP
19810: POP
// end ; end ;
19811: LD_VAR 0 1
19815: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19816: LD_INT 0
19818: PPUSH
// if HexInfo ( x , y ) = warehouse then
19819: LD_VAR 0 2
19823: PPUSH
19824: LD_VAR 0 3
19828: PPUSH
19829: CALL_OW 428
19833: PUSH
19834: LD_VAR 0 1
19838: EQUAL
19839: IFFALSE 19866
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19841: LD_ADDR_EXP 75
19845: PUSH
19846: LD_EXP 75
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: LD_INT 0
19858: PPUSH
19859: CALL_OW 1
19863: ST_TO_ADDR
19864: GO 19917
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19866: LD_ADDR_EXP 75
19870: PUSH
19871: LD_EXP 75
19875: PPUSH
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 255
19890: PUSH
19891: LD_VAR 0 1
19895: PUSH
19896: LD_VAR 0 2
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 1
19916: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19917: CALL 19926 0 0
// end ;
19921: LD_VAR 0 4
19925: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19931: LD_STRING resetWarehouseGatheringPoints();
19933: PPUSH
19934: CALL_OW 559
// if warehouseGatheringPoints then
19938: LD_EXP 75
19942: IFFALSE 20068
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_EXP 75
19953: PPUSH
19954: CALL 66296 0 1
19958: ST_TO_ADDR
// for i := 1 to list do
19959: LD_ADDR_VAR 0 2
19963: PUSH
19964: DOUBLE
19965: LD_INT 1
19967: DEC
19968: ST_TO_ADDR
19969: LD_VAR 0 3
19973: PUSH
19974: FOR_TO
19975: IFFALSE 20066
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19977: LD_STRING setWarehouseGatheringPointXY(
19979: PUSH
19980: LD_VAR 0 3
19984: PUSH
19985: LD_VAR 0 2
19989: ARRAY
19990: PUSH
19991: LD_INT 1
19993: ARRAY
19994: STR
19995: PUSH
19996: LD_STRING ,
19998: STR
19999: PUSH
20000: LD_VAR 0 3
20004: PUSH
20005: LD_VAR 0 2
20009: ARRAY
20010: PUSH
20011: LD_INT 2
20013: ARRAY
20014: STR
20015: PUSH
20016: LD_STRING ,
20018: STR
20019: PUSH
20020: LD_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: ARRAY
20030: PUSH
20031: LD_INT 3
20033: ARRAY
20034: STR
20035: PUSH
20036: LD_STRING ,
20038: STR
20039: PUSH
20040: LD_VAR 0 3
20044: PUSH
20045: LD_VAR 0 2
20049: ARRAY
20050: PUSH
20051: LD_INT 4
20053: ARRAY
20054: STR
20055: PUSH
20056: LD_STRING )
20058: STR
20059: PPUSH
20060: CALL_OW 559
20064: GO 19974
20066: POP
20067: POP
// end ; end ;
20068: LD_VAR 0 1
20072: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20073: LD_EXP 75
20077: IFFALSE 20762
20079: GO 20081
20081: DISABLE
20082: LD_INT 0
20084: PPUSH
20085: PPUSH
20086: PPUSH
20087: PPUSH
20088: PPUSH
20089: PPUSH
20090: PPUSH
20091: PPUSH
20092: PPUSH
// begin enable ;
20093: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20094: LD_ADDR_VAR 0 3
20098: PUSH
20099: LD_EXP 75
20103: PPUSH
20104: CALL 66296 0 1
20108: ST_TO_ADDR
// if not list then
20109: LD_VAR 0 3
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20762
// for i := 1 to list do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_VAR 0 3
20132: PUSH
20133: FOR_TO
20134: IFFALSE 20760
// begin depot := list [ i ] [ 2 ] ;
20136: LD_ADDR_VAR 0 8
20140: PUSH
20141: LD_VAR 0 3
20145: PUSH
20146: LD_VAR 0 1
20150: ARRAY
20151: PUSH
20152: LD_INT 2
20154: ARRAY
20155: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20156: LD_ADDR_VAR 0 5
20160: PUSH
20161: LD_VAR 0 3
20165: PUSH
20166: LD_VAR 0 1
20170: ARRAY
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20176: LD_VAR 0 8
20180: PPUSH
20181: CALL_OW 301
20185: PUSH
20186: LD_VAR 0 5
20190: PUSH
20191: LD_VAR 0 8
20195: PPUSH
20196: CALL_OW 255
20200: NONEQUAL
20201: OR
20202: IFFALSE 20231
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20204: LD_ADDR_EXP 75
20208: PUSH
20209: LD_EXP 75
20213: PPUSH
20214: LD_VAR 0 8
20218: PPUSH
20219: LD_INT 0
20221: PPUSH
20222: CALL_OW 1
20226: ST_TO_ADDR
// exit ;
20227: POP
20228: POP
20229: GO 20762
// end ; x := list [ i ] [ 3 ] ;
20231: LD_ADDR_VAR 0 6
20235: PUSH
20236: LD_VAR 0 3
20240: PUSH
20241: LD_VAR 0 1
20245: ARRAY
20246: PUSH
20247: LD_INT 3
20249: ARRAY
20250: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20251: LD_ADDR_VAR 0 7
20255: PUSH
20256: LD_VAR 0 3
20260: PUSH
20261: LD_VAR 0 1
20265: ARRAY
20266: PUSH
20267: LD_INT 4
20269: ARRAY
20270: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20271: LD_ADDR_VAR 0 9
20275: PUSH
20276: LD_VAR 0 6
20280: PPUSH
20281: LD_VAR 0 7
20285: PPUSH
20286: LD_INT 16
20288: PPUSH
20289: CALL 64884 0 3
20293: ST_TO_ADDR
// if not cratesNearbyPoint then
20294: LD_VAR 0 9
20298: NOT
20299: IFFALSE 20305
// exit ;
20301: POP
20302: POP
20303: GO 20762
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20305: LD_ADDR_VAR 0 4
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_VAR 0 5
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 3
20324: PUSH
20325: LD_INT 60
20327: PUSH
20328: EMPTY
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 91
20337: PUSH
20338: LD_VAR 0 8
20342: PUSH
20343: LD_INT 6
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 25
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 25
20366: PUSH
20367: LD_INT 16
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: PPUSH
20385: CALL_OW 69
20389: PUSH
20390: LD_VAR 0 8
20394: PPUSH
20395: CALL_OW 313
20399: PPUSH
20400: LD_INT 3
20402: PUSH
20403: LD_INT 60
20405: PUSH
20406: EMPTY
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 25
20428: PUSH
20429: LD_INT 16
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PPUSH
20445: CALL_OW 72
20449: UNION
20450: ST_TO_ADDR
// if tmp then
20451: LD_VAR 0 4
20455: IFFALSE 20535
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20457: LD_ADDR_VAR 0 4
20461: PUSH
20462: LD_VAR 0 4
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL 62853 0 2
20474: ST_TO_ADDR
// for j in tmp do
20475: LD_ADDR_VAR 0 2
20479: PUSH
20480: LD_VAR 0 4
20484: PUSH
20485: FOR_IN
20486: IFFALSE 20529
// begin if IsInUnit ( j ) then
20488: LD_VAR 0 2
20492: PPUSH
20493: CALL_OW 310
20497: IFFALSE 20508
// ComExit ( j ) ;
20499: LD_VAR 0 2
20503: PPUSH
20504: CALL 62936 0 1
// AddComCollect ( j , x , y ) ;
20508: LD_VAR 0 2
20512: PPUSH
20513: LD_VAR 0 6
20517: PPUSH
20518: LD_VAR 0 7
20522: PPUSH
20523: CALL_OW 177
// end ;
20527: GO 20485
20529: POP
20530: POP
// exit ;
20531: POP
20532: POP
20533: GO 20762
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20535: LD_ADDR_VAR 0 4
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_VAR 0 5
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 91
20554: PUSH
20555: LD_VAR 0 8
20559: PUSH
20560: LD_INT 8
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: LD_INT 34
20573: PUSH
20574: LD_INT 12
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 34
20583: PUSH
20584: LD_INT 51
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 34
20593: PUSH
20594: LD_INT 32
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 34
20603: PUSH
20604: LD_INT 89
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 69
20627: ST_TO_ADDR
// if tmp then
20628: LD_VAR 0 4
20632: IFFALSE 20758
// begin for j in tmp do
20634: LD_ADDR_VAR 0 2
20638: PUSH
20639: LD_VAR 0 4
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20756
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 262
20656: PUSH
20657: LD_INT 3
20659: EQUAL
20660: PUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: CALL_OW 261
20670: PUSH
20671: LD_INT 20
20673: GREATER
20674: OR
20675: PUSH
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 314
20685: NOT
20686: AND
20687: PUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 263
20697: PUSH
20698: LD_INT 1
20700: NONEQUAL
20701: PUSH
20702: LD_VAR 0 2
20706: PPUSH
20707: CALL_OW 311
20711: OR
20712: AND
20713: IFFALSE 20754
// begin ComCollect ( j , x , y ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 6
20724: PPUSH
20725: LD_VAR 0 7
20729: PPUSH
20730: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20734: LD_VAR 0 2
20738: PPUSH
20739: LD_VAR 0 8
20743: PPUSH
20744: CALL_OW 172
// exit ;
20748: POP
20749: POP
20750: POP
20751: POP
20752: GO 20762
// end ;
20754: GO 20644
20756: POP
20757: POP
// end ; end ;
20758: GO 20133
20760: POP
20761: POP
// end ; end_of_file
20762: PPOPN 9
20764: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20765: LD_INT 0
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 264
20780: PUSH
20781: LD_INT 91
20783: EQUAL
20784: IFFALSE 20856
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20786: LD_INT 68
20788: PPUSH
20789: LD_VAR 0 1
20793: PPUSH
20794: CALL_OW 255
20798: PPUSH
20799: CALL_OW 321
20803: PUSH
20804: LD_INT 2
20806: EQUAL
20807: IFFALSE 20819
// eff := 70 else
20809: LD_ADDR_VAR 0 4
20813: PUSH
20814: LD_INT 70
20816: ST_TO_ADDR
20817: GO 20827
// eff := 30 ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_INT 30
20826: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 250
20836: PPUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 251
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: CALL_OW 495
// end ; end ;
20856: LD_VAR 0 2
20860: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20861: LD_INT 0
20863: PPUSH
// end ;
20864: LD_VAR 0 4
20868: RET
// export function SOS_Command ( cmd ) ; begin
20869: LD_INT 0
20871: PPUSH
// end ;
20872: LD_VAR 0 2
20876: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20877: LD_INT 0
20879: PPUSH
// end ;
20880: LD_VAR 0 6
20884: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20885: LD_INT 0
20887: PPUSH
20888: PPUSH
// if not vehicle or not factory then
20889: LD_VAR 0 1
20893: NOT
20894: PUSH
20895: LD_VAR 0 2
20899: NOT
20900: OR
20901: IFFALSE 20905
// exit ;
20903: GO 21136
// if factoryWaypoints >= factory then
20905: LD_EXP 74
20909: PUSH
20910: LD_VAR 0 2
20914: GREATEREQUAL
20915: IFFALSE 21136
// if factoryWaypoints [ factory ] then
20917: LD_EXP 74
20921: PUSH
20922: LD_VAR 0 2
20926: ARRAY
20927: IFFALSE 21136
// begin if GetControl ( vehicle ) = control_manual then
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 263
20938: PUSH
20939: LD_INT 1
20941: EQUAL
20942: IFFALSE 21023
// begin driver := IsDrivenBy ( vehicle ) ;
20944: LD_ADDR_VAR 0 4
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 311
20958: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_EXP 74
20968: PUSH
20969: LD_VAR 0 2
20973: ARRAY
20974: PUSH
20975: LD_INT 3
20977: ARRAY
20978: PPUSH
20979: LD_EXP 74
20983: PUSH
20984: LD_VAR 0 2
20988: ARRAY
20989: PUSH
20990: LD_INT 4
20992: ARRAY
20993: PPUSH
20994: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20998: LD_VAR 0 4
21002: PPUSH
21003: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21007: LD_VAR 0 4
21011: PPUSH
21012: LD_VAR 0 2
21016: PPUSH
21017: CALL_OW 180
// end else
21021: GO 21136
// if GetControl ( vehicle ) = control_remote then
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 263
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21097
// begin wait ( 0 0$2 ) ;
21038: LD_INT 70
21040: PPUSH
21041: CALL_OW 67
// if Connect ( vehicle ) then
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL 33157 0 1
21054: IFFALSE 21095
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_EXP 74
21065: PUSH
21066: LD_VAR 0 2
21070: ARRAY
21071: PUSH
21072: LD_INT 3
21074: ARRAY
21075: PPUSH
21076: LD_EXP 74
21080: PUSH
21081: LD_VAR 0 2
21085: ARRAY
21086: PUSH
21087: LD_INT 4
21089: ARRAY
21090: PPUSH
21091: CALL_OW 171
// end else
21095: GO 21136
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21097: LD_VAR 0 1
21101: PPUSH
21102: LD_EXP 74
21106: PUSH
21107: LD_VAR 0 2
21111: ARRAY
21112: PUSH
21113: LD_INT 3
21115: ARRAY
21116: PPUSH
21117: LD_EXP 74
21121: PUSH
21122: LD_VAR 0 2
21126: ARRAY
21127: PUSH
21128: LD_INT 4
21130: ARRAY
21131: PPUSH
21132: CALL_OW 171
// end ; end ;
21136: LD_VAR 0 3
21140: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21141: LD_INT 0
21143: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21144: LD_VAR 0 1
21148: PUSH
21149: LD_INT 250
21151: EQUAL
21152: PUSH
21153: LD_VAR 0 2
21157: PPUSH
21158: CALL_OW 264
21162: PUSH
21163: LD_INT 81
21165: EQUAL
21166: AND
21167: IFFALSE 21188
// MinerPlaceMine ( unit , x , y ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 4
21178: PPUSH
21179: LD_VAR 0 5
21183: PPUSH
21184: CALL 23573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21188: LD_VAR 0 1
21192: PUSH
21193: LD_INT 251
21195: EQUAL
21196: PUSH
21197: LD_VAR 0 2
21201: PPUSH
21202: CALL_OW 264
21206: PUSH
21207: LD_INT 81
21209: EQUAL
21210: AND
21211: IFFALSE 21232
// MinerDetonateMine ( unit , x , y ) ;
21213: LD_VAR 0 2
21217: PPUSH
21218: LD_VAR 0 4
21222: PPUSH
21223: LD_VAR 0 5
21227: PPUSH
21228: CALL 23848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21232: LD_VAR 0 1
21236: PUSH
21237: LD_INT 252
21239: EQUAL
21240: PUSH
21241: LD_VAR 0 2
21245: PPUSH
21246: CALL_OW 264
21250: PUSH
21251: LD_INT 81
21253: EQUAL
21254: AND
21255: IFFALSE 21276
// MinerCreateMinefield ( unit , x , y ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL 24265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21276: LD_VAR 0 1
21280: PUSH
21281: LD_INT 253
21283: EQUAL
21284: PUSH
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 257
21294: PUSH
21295: LD_INT 5
21297: EQUAL
21298: AND
21299: IFFALSE 21320
// ComBinocular ( unit , x , y ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: LD_VAR 0 4
21310: PPUSH
21311: LD_VAR 0 5
21315: PPUSH
21316: CALL 24634 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21320: LD_VAR 0 1
21324: PUSH
21325: LD_INT 254
21327: EQUAL
21328: PUSH
21329: LD_VAR 0 2
21333: PPUSH
21334: CALL_OW 264
21338: PUSH
21339: LD_INT 99
21341: EQUAL
21342: AND
21343: PUSH
21344: LD_VAR 0 3
21348: PPUSH
21349: CALL_OW 263
21353: PUSH
21354: LD_INT 3
21356: EQUAL
21357: AND
21358: IFFALSE 21374
// HackDestroyVehicle ( unit , selectedUnit ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: CALL 22937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21374: LD_VAR 0 1
21378: PUSH
21379: LD_INT 255
21381: EQUAL
21382: PUSH
21383: LD_VAR 0 2
21387: PPUSH
21388: CALL_OW 264
21392: PUSH
21393: LD_INT 14
21395: PUSH
21396: LD_INT 53
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: IN
21403: AND
21404: PUSH
21405: LD_VAR 0 4
21409: PPUSH
21410: LD_VAR 0 5
21414: PPUSH
21415: CALL_OW 488
21419: AND
21420: IFFALSE 21444
// CutTreeXYR ( unit , x , y , 12 ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 4
21431: PPUSH
21432: LD_VAR 0 5
21436: PPUSH
21437: LD_INT 12
21439: PPUSH
21440: CALL 21507 0 4
// if cmd = 256 then
21444: LD_VAR 0 1
21448: PUSH
21449: LD_INT 256
21451: EQUAL
21452: IFFALSE 21473
// SetFactoryWaypoint ( unit , x , y ) ;
21454: LD_VAR 0 2
21458: PPUSH
21459: LD_VAR 0 4
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL 19454 0 3
// if cmd = 257 then
21473: LD_VAR 0 1
21477: PUSH
21478: LD_INT 257
21480: EQUAL
21481: IFFALSE 21502
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21483: LD_VAR 0 2
21487: PPUSH
21488: LD_VAR 0 4
21492: PPUSH
21493: LD_VAR 0 5
21497: PPUSH
21498: CALL 19816 0 3
// end ;
21502: LD_VAR 0 6
21506: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21507: LD_INT 0
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
21514: PPUSH
21515: PPUSH
21516: PPUSH
21517: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21518: LD_VAR 0 1
21522: NOT
21523: PUSH
21524: LD_VAR 0 2
21528: PPUSH
21529: LD_VAR 0 3
21533: PPUSH
21534: CALL_OW 488
21538: NOT
21539: OR
21540: PUSH
21541: LD_VAR 0 4
21545: NOT
21546: OR
21547: IFFALSE 21551
// exit ;
21549: GO 21891
// list := [ ] ;
21551: LD_ADDR_VAR 0 13
21555: PUSH
21556: EMPTY
21557: ST_TO_ADDR
// if x - r < 0 then
21558: LD_VAR 0 2
21562: PUSH
21563: LD_VAR 0 4
21567: MINUS
21568: PUSH
21569: LD_INT 0
21571: LESS
21572: IFFALSE 21584
// min_x := 0 else
21574: LD_ADDR_VAR 0 7
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
21582: GO 21600
// min_x := x - r ;
21584: LD_ADDR_VAR 0 7
21588: PUSH
21589: LD_VAR 0 2
21593: PUSH
21594: LD_VAR 0 4
21598: MINUS
21599: ST_TO_ADDR
// if y - r < 0 then
21600: LD_VAR 0 3
21604: PUSH
21605: LD_VAR 0 4
21609: MINUS
21610: PUSH
21611: LD_INT 0
21613: LESS
21614: IFFALSE 21626
// min_y := 0 else
21616: LD_ADDR_VAR 0 8
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
21624: GO 21642
// min_y := y - r ;
21626: LD_ADDR_VAR 0 8
21630: PUSH
21631: LD_VAR 0 3
21635: PUSH
21636: LD_VAR 0 4
21640: MINUS
21641: ST_TO_ADDR
// max_x := x + r ;
21642: LD_ADDR_VAR 0 9
21646: PUSH
21647: LD_VAR 0 2
21651: PUSH
21652: LD_VAR 0 4
21656: PLUS
21657: ST_TO_ADDR
// max_y := y + r ;
21658: LD_ADDR_VAR 0 10
21662: PUSH
21663: LD_VAR 0 3
21667: PUSH
21668: LD_VAR 0 4
21672: PLUS
21673: ST_TO_ADDR
// for _x = min_x to max_x do
21674: LD_ADDR_VAR 0 11
21678: PUSH
21679: DOUBLE
21680: LD_VAR 0 7
21684: DEC
21685: ST_TO_ADDR
21686: LD_VAR 0 9
21690: PUSH
21691: FOR_TO
21692: IFFALSE 21809
// for _y = min_y to max_y do
21694: LD_ADDR_VAR 0 12
21698: PUSH
21699: DOUBLE
21700: LD_VAR 0 8
21704: DEC
21705: ST_TO_ADDR
21706: LD_VAR 0 10
21710: PUSH
21711: FOR_TO
21712: IFFALSE 21805
// begin if not ValidHex ( _x , _y ) then
21714: LD_VAR 0 11
21718: PPUSH
21719: LD_VAR 0 12
21723: PPUSH
21724: CALL_OW 488
21728: NOT
21729: IFFALSE 21733
// continue ;
21731: GO 21711
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21733: LD_VAR 0 11
21737: PPUSH
21738: LD_VAR 0 12
21742: PPUSH
21743: CALL_OW 351
21747: PUSH
21748: LD_VAR 0 11
21752: PPUSH
21753: LD_VAR 0 12
21757: PPUSH
21758: CALL_OW 554
21762: AND
21763: IFFALSE 21803
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21765: LD_ADDR_VAR 0 13
21769: PUSH
21770: LD_VAR 0 13
21774: PPUSH
21775: LD_VAR 0 13
21779: PUSH
21780: LD_INT 1
21782: PLUS
21783: PPUSH
21784: LD_VAR 0 11
21788: PUSH
21789: LD_VAR 0 12
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 2
21802: ST_TO_ADDR
// end ;
21803: GO 21711
21805: POP
21806: POP
21807: GO 21691
21809: POP
21810: POP
// if not list then
21811: LD_VAR 0 13
21815: NOT
21816: IFFALSE 21820
// exit ;
21818: GO 21891
// for i in list do
21820: LD_ADDR_VAR 0 6
21824: PUSH
21825: LD_VAR 0 13
21829: PUSH
21830: FOR_IN
21831: IFFALSE 21889
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_STRING M
21840: PUSH
21841: LD_VAR 0 6
21845: PUSH
21846: LD_INT 1
21848: ARRAY
21849: PUSH
21850: LD_VAR 0 6
21854: PUSH
21855: LD_INT 2
21857: ARRAY
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: PPUSH
21883: CALL_OW 447
21887: GO 21830
21889: POP
21890: POP
// end ;
21891: LD_VAR 0 5
21895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21896: LD_EXP 77
21900: NOT
21901: IFFALSE 21951
21903: GO 21905
21905: DISABLE
// begin initHack := true ;
21906: LD_ADDR_EXP 77
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// hackTanks := [ ] ;
21914: LD_ADDR_EXP 78
21918: PUSH
21919: EMPTY
21920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21921: LD_ADDR_EXP 79
21925: PUSH
21926: EMPTY
21927: ST_TO_ADDR
// hackLimit := 3 ;
21928: LD_ADDR_EXP 80
21932: PUSH
21933: LD_INT 3
21935: ST_TO_ADDR
// hackDist := 12 ;
21936: LD_ADDR_EXP 81
21940: PUSH
21941: LD_INT 12
21943: ST_TO_ADDR
// hackCounter := [ ] ;
21944: LD_ADDR_EXP 82
21948: PUSH
21949: EMPTY
21950: ST_TO_ADDR
// end ;
21951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21952: LD_EXP 77
21956: PUSH
21957: LD_INT 34
21959: PUSH
21960: LD_INT 99
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PPUSH
21967: CALL_OW 69
21971: AND
21972: IFFALSE 22225
21974: GO 21976
21976: DISABLE
21977: LD_INT 0
21979: PPUSH
21980: PPUSH
// begin enable ;
21981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21982: LD_ADDR_VAR 0 1
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: LD_INT 99
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: PUSH
22002: FOR_IN
22003: IFFALSE 22223
// begin if not i in hackTanks then
22005: LD_VAR 0 1
22009: PUSH
22010: LD_EXP 78
22014: IN
22015: NOT
22016: IFFALSE 22099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22018: LD_ADDR_EXP 78
22022: PUSH
22023: LD_EXP 78
22027: PPUSH
22028: LD_EXP 78
22032: PUSH
22033: LD_INT 1
22035: PLUS
22036: PPUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 1
22046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22047: LD_ADDR_EXP 79
22051: PUSH
22052: LD_EXP 79
22056: PPUSH
22057: LD_EXP 79
22061: PUSH
22062: LD_INT 1
22064: PLUS
22065: PPUSH
22066: EMPTY
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22073: LD_ADDR_EXP 82
22077: PUSH
22078: LD_EXP 82
22082: PPUSH
22083: LD_EXP 82
22087: PUSH
22088: LD_INT 1
22090: PLUS
22091: PPUSH
22092: EMPTY
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 302
22108: NOT
22109: IFFALSE 22122
// begin HackUnlinkAll ( i ) ;
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL 22228 0 1
// continue ;
22120: GO 22002
// end ; HackCheckCapturedStatus ( i ) ;
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL 22671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22131: LD_ADDR_VAR 0 2
22135: PUSH
22136: LD_INT 81
22138: PUSH
22139: LD_VAR 0 1
22143: PPUSH
22144: CALL_OW 255
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 33
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 91
22165: PUSH
22166: LD_VAR 0 1
22170: PUSH
22171: LD_EXP 81
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 50
22183: PUSH
22184: EMPTY
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: ST_TO_ADDR
// if not tmp then
22198: LD_VAR 0 2
22202: NOT
22203: IFFALSE 22207
// continue ;
22205: GO 22002
// HackLink ( i , tmp ) ;
22207: LD_VAR 0 1
22211: PPUSH
22212: LD_VAR 0 2
22216: PPUSH
22217: CALL 22364 0 2
// end ;
22221: GO 22002
22223: POP
22224: POP
// end ;
22225: PPOPN 2
22227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
22232: PPUSH
// if not hack in hackTanks then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_EXP 78
22242: IN
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 22359
// index := GetElementIndex ( hackTanks , hack ) ;
22248: LD_ADDR_VAR 0 4
22252: PUSH
22253: LD_EXP 78
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL 29964 0 2
22267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22268: LD_EXP 79
22272: PUSH
22273: LD_VAR 0 4
22277: ARRAY
22278: IFFALSE 22359
// begin for i in hackTanksCaptured [ index ] do
22280: LD_ADDR_VAR 0 3
22284: PUSH
22285: LD_EXP 79
22289: PUSH
22290: LD_VAR 0 4
22294: ARRAY
22295: PUSH
22296: FOR_IN
22297: IFFALSE 22323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22299: LD_VAR 0 3
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: LD_VAR 0 3
22312: PUSH
22313: LD_INT 2
22315: ARRAY
22316: PPUSH
22317: CALL_OW 235
22321: GO 22296
22323: POP
22324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22325: LD_ADDR_EXP 79
22329: PUSH
22330: LD_EXP 79
22334: PPUSH
22335: LD_VAR 0 4
22339: PPUSH
22340: EMPTY
22341: PPUSH
22342: CALL_OW 1
22346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22347: LD_VAR 0 1
22351: PPUSH
22352: LD_INT 0
22354: PPUSH
22355: CALL_OW 505
// end ; end ;
22359: LD_VAR 0 2
22363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
// if not hack in hackTanks or not vehicles then
22369: LD_VAR 0 1
22373: PUSH
22374: LD_EXP 78
22378: IN
22379: NOT
22380: PUSH
22381: LD_VAR 0 2
22385: NOT
22386: OR
22387: IFFALSE 22391
// exit ;
22389: GO 22666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: LD_INT 1
22408: PPUSH
22409: LD_INT 1
22411: PPUSH
22412: CALL 30614 0 4
22416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22417: LD_ADDR_VAR 0 5
22421: PUSH
22422: LD_EXP 78
22426: PPUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: CALL 29964 0 2
22436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22437: LD_EXP 79
22441: PUSH
22442: LD_VAR 0 5
22446: ARRAY
22447: PUSH
22448: LD_EXP 80
22452: LESS
22453: IFFALSE 22642
// begin for i := 1 to vehicles do
22455: LD_ADDR_VAR 0 4
22459: PUSH
22460: DOUBLE
22461: LD_INT 1
22463: DEC
22464: ST_TO_ADDR
22465: LD_VAR 0 2
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22640
// begin if hackTanksCaptured [ index ] = hackLimit then
22473: LD_EXP 79
22477: PUSH
22478: LD_VAR 0 5
22482: ARRAY
22483: PUSH
22484: LD_EXP 80
22488: EQUAL
22489: IFFALSE 22493
// break ;
22491: GO 22640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22493: LD_ADDR_EXP 82
22497: PUSH
22498: LD_EXP 82
22502: PPUSH
22503: LD_VAR 0 5
22507: PPUSH
22508: LD_EXP 82
22512: PUSH
22513: LD_VAR 0 5
22517: ARRAY
22518: PUSH
22519: LD_INT 1
22521: PLUS
22522: PPUSH
22523: CALL_OW 1
22527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22528: LD_ADDR_EXP 79
22532: PUSH
22533: LD_EXP 79
22537: PPUSH
22538: LD_VAR 0 5
22542: PUSH
22543: LD_EXP 79
22547: PUSH
22548: LD_VAR 0 5
22552: ARRAY
22553: PUSH
22554: LD_INT 1
22556: PLUS
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PPUSH
22562: LD_VAR 0 2
22566: PUSH
22567: LD_VAR 0 4
22571: ARRAY
22572: PUSH
22573: LD_VAR 0 2
22577: PUSH
22578: LD_VAR 0 4
22582: ARRAY
22583: PPUSH
22584: CALL_OW 255
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL 30179 0 3
22597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22598: LD_VAR 0 2
22602: PUSH
22603: LD_VAR 0 4
22607: ARRAY
22608: PPUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 255
22618: PPUSH
22619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22623: LD_VAR 0 2
22627: PUSH
22628: LD_VAR 0 4
22632: ARRAY
22633: PPUSH
22634: CALL_OW 141
// end ;
22638: GO 22470
22640: POP
22641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22642: LD_VAR 0 1
22646: PPUSH
22647: LD_EXP 79
22651: PUSH
22652: LD_VAR 0 5
22656: ARRAY
22657: PUSH
22658: LD_INT 0
22660: PLUS
22661: PPUSH
22662: CALL_OW 505
// end ;
22666: LD_VAR 0 3
22670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22671: LD_INT 0
22673: PPUSH
22674: PPUSH
22675: PPUSH
22676: PPUSH
// if not hack in hackTanks then
22677: LD_VAR 0 1
22681: PUSH
22682: LD_EXP 78
22686: IN
22687: NOT
22688: IFFALSE 22692
// exit ;
22690: GO 22932
// index := GetElementIndex ( hackTanks , hack ) ;
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_EXP 78
22701: PPUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL 29964 0 2
22711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: DOUBLE
22718: LD_EXP 79
22722: PUSH
22723: LD_VAR 0 4
22727: ARRAY
22728: INC
22729: ST_TO_ADDR
22730: LD_INT 1
22732: PUSH
22733: FOR_DOWNTO
22734: IFFALSE 22906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22736: LD_ADDR_VAR 0 5
22740: PUSH
22741: LD_EXP 79
22745: PUSH
22746: LD_VAR 0 4
22750: ARRAY
22751: PUSH
22752: LD_VAR 0 3
22756: ARRAY
22757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22758: LD_VAR 0 5
22762: PUSH
22763: LD_INT 1
22765: ARRAY
22766: PPUSH
22767: CALL_OW 302
22771: NOT
22772: PUSH
22773: LD_VAR 0 5
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 255
22796: NONEQUAL
22797: OR
22798: IFFALSE 22904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22800: LD_VAR 0 5
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: PPUSH
22809: CALL_OW 305
22813: PUSH
22814: LD_VAR 0 5
22818: PUSH
22819: LD_INT 1
22821: ARRAY
22822: PPUSH
22823: CALL_OW 255
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 255
22837: EQUAL
22838: AND
22839: IFFALSE 22863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22841: LD_VAR 0 5
22845: PUSH
22846: LD_INT 1
22848: ARRAY
22849: PPUSH
22850: LD_VAR 0 5
22854: PUSH
22855: LD_INT 2
22857: ARRAY
22858: PPUSH
22859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22863: LD_ADDR_EXP 79
22867: PUSH
22868: LD_EXP 79
22872: PPUSH
22873: LD_VAR 0 4
22877: PPUSH
22878: LD_EXP 79
22882: PUSH
22883: LD_VAR 0 4
22887: ARRAY
22888: PPUSH
22889: LD_VAR 0 3
22893: PPUSH
22894: CALL_OW 3
22898: PPUSH
22899: CALL_OW 1
22903: ST_TO_ADDR
// end ; end ;
22904: GO 22733
22906: POP
22907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22908: LD_VAR 0 1
22912: PPUSH
22913: LD_EXP 79
22917: PUSH
22918: LD_VAR 0 4
22922: ARRAY
22923: PUSH
22924: LD_INT 0
22926: PLUS
22927: PPUSH
22928: CALL_OW 505
// end ;
22932: LD_VAR 0 2
22936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
// if not hack in hackTanks then
22943: LD_VAR 0 1
22947: PUSH
22948: LD_EXP 78
22952: IN
22953: NOT
22954: IFFALSE 22958
// exit ;
22956: GO 23043
// index := GetElementIndex ( hackTanks , hack ) ;
22958: LD_ADDR_VAR 0 5
22962: PUSH
22963: LD_EXP 78
22967: PPUSH
22968: LD_VAR 0 1
22972: PPUSH
22973: CALL 29964 0 2
22977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: DOUBLE
22984: LD_INT 1
22986: DEC
22987: ST_TO_ADDR
22988: LD_EXP 79
22992: PUSH
22993: LD_VAR 0 5
22997: ARRAY
22998: PUSH
22999: FOR_TO
23000: IFFALSE 23041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23002: LD_EXP 79
23006: PUSH
23007: LD_VAR 0 5
23011: ARRAY
23012: PUSH
23013: LD_VAR 0 4
23017: ARRAY
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PUSH
23023: LD_VAR 0 2
23027: EQUAL
23028: IFFALSE 23039
// KillUnit ( vehicle ) ;
23030: LD_VAR 0 2
23034: PPUSH
23035: CALL_OW 66
23039: GO 22999
23041: POP
23042: POP
// end ;
23043: LD_VAR 0 3
23047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23048: LD_EXP 83
23052: NOT
23053: IFFALSE 23088
23055: GO 23057
23057: DISABLE
// begin initMiner := true ;
23058: LD_ADDR_EXP 83
23062: PUSH
23063: LD_INT 1
23065: ST_TO_ADDR
// minersList := [ ] ;
23066: LD_ADDR_EXP 84
23070: PUSH
23071: EMPTY
23072: ST_TO_ADDR
// minerMinesList := [ ] ;
23073: LD_ADDR_EXP 85
23077: PUSH
23078: EMPTY
23079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23080: LD_ADDR_EXP 86
23084: PUSH
23085: LD_INT 5
23087: ST_TO_ADDR
// end ;
23088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23089: LD_EXP 83
23093: PUSH
23094: LD_INT 34
23096: PUSH
23097: LD_INT 81
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PPUSH
23104: CALL_OW 69
23108: AND
23109: IFFALSE 23570
23111: GO 23113
23113: DISABLE
23114: LD_INT 0
23116: PPUSH
23117: PPUSH
23118: PPUSH
23119: PPUSH
// begin enable ;
23120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23121: LD_ADDR_VAR 0 1
23125: PUSH
23126: LD_INT 34
23128: PUSH
23129: LD_INT 81
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 69
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23214
// begin if not i in minersList then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_EXP 84
23153: IN
23154: NOT
23155: IFFALSE 23212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23157: LD_ADDR_EXP 84
23161: PUSH
23162: LD_EXP 84
23166: PPUSH
23167: LD_EXP 84
23171: PUSH
23172: LD_INT 1
23174: PLUS
23175: PPUSH
23176: LD_VAR 0 1
23180: PPUSH
23181: CALL_OW 1
23185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23186: LD_ADDR_EXP 85
23190: PUSH
23191: LD_EXP 85
23195: PPUSH
23196: LD_EXP 85
23200: PUSH
23201: LD_INT 1
23203: PLUS
23204: PPUSH
23205: EMPTY
23206: PPUSH
23207: CALL_OW 1
23211: ST_TO_ADDR
// end end ;
23212: GO 23141
23214: POP
23215: POP
// for i := minerMinesList downto 1 do
23216: LD_ADDR_VAR 0 1
23220: PUSH
23221: DOUBLE
23222: LD_EXP 85
23226: INC
23227: ST_TO_ADDR
23228: LD_INT 1
23230: PUSH
23231: FOR_DOWNTO
23232: IFFALSE 23568
// begin if IsLive ( minersList [ i ] ) then
23234: LD_EXP 84
23238: PUSH
23239: LD_VAR 0 1
23243: ARRAY
23244: PPUSH
23245: CALL_OW 300
23249: IFFALSE 23277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23251: LD_EXP 84
23255: PUSH
23256: LD_VAR 0 1
23260: ARRAY
23261: PPUSH
23262: LD_EXP 85
23266: PUSH
23267: LD_VAR 0 1
23271: ARRAY
23272: PPUSH
23273: CALL_OW 505
// if not minerMinesList [ i ] then
23277: LD_EXP 85
23281: PUSH
23282: LD_VAR 0 1
23286: ARRAY
23287: NOT
23288: IFFALSE 23292
// continue ;
23290: GO 23231
// for j := minerMinesList [ i ] downto 1 do
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: DOUBLE
23298: LD_EXP 85
23302: PUSH
23303: LD_VAR 0 1
23307: ARRAY
23308: INC
23309: ST_TO_ADDR
23310: LD_INT 1
23312: PUSH
23313: FOR_DOWNTO
23314: IFFALSE 23564
// begin side := GetSide ( minersList [ i ] ) ;
23316: LD_ADDR_VAR 0 3
23320: PUSH
23321: LD_EXP 84
23325: PUSH
23326: LD_VAR 0 1
23330: ARRAY
23331: PPUSH
23332: CALL_OW 255
23336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23337: LD_ADDR_VAR 0 4
23341: PUSH
23342: LD_EXP 85
23346: PUSH
23347: LD_VAR 0 1
23351: ARRAY
23352: PUSH
23353: LD_VAR 0 2
23357: ARRAY
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_EXP 85
23367: PUSH
23368: LD_VAR 0 1
23372: ARRAY
23373: PUSH
23374: LD_VAR 0 2
23378: ARRAY
23379: PUSH
23380: LD_INT 2
23382: ARRAY
23383: PPUSH
23384: CALL_OW 428
23388: ST_TO_ADDR
// if not tmp then
23389: LD_VAR 0 4
23393: NOT
23394: IFFALSE 23398
// continue ;
23396: GO 23313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23398: LD_VAR 0 4
23402: PUSH
23403: LD_INT 81
23405: PUSH
23406: LD_VAR 0 3
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PPUSH
23415: CALL_OW 69
23419: IN
23420: PUSH
23421: LD_EXP 85
23425: PUSH
23426: LD_VAR 0 1
23430: ARRAY
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: PUSH
23438: LD_INT 1
23440: ARRAY
23441: PPUSH
23442: LD_EXP 85
23446: PUSH
23447: LD_VAR 0 1
23451: ARRAY
23452: PUSH
23453: LD_VAR 0 2
23457: ARRAY
23458: PUSH
23459: LD_INT 2
23461: ARRAY
23462: PPUSH
23463: CALL_OW 458
23467: AND
23468: IFFALSE 23562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23470: LD_EXP 85
23474: PUSH
23475: LD_VAR 0 1
23479: ARRAY
23480: PUSH
23481: LD_VAR 0 2
23485: ARRAY
23486: PUSH
23487: LD_INT 1
23489: ARRAY
23490: PPUSH
23491: LD_EXP 85
23495: PUSH
23496: LD_VAR 0 1
23500: ARRAY
23501: PUSH
23502: LD_VAR 0 2
23506: ARRAY
23507: PUSH
23508: LD_INT 2
23510: ARRAY
23511: PPUSH
23512: LD_VAR 0 3
23516: PPUSH
23517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23521: LD_ADDR_EXP 85
23525: PUSH
23526: LD_EXP 85
23530: PPUSH
23531: LD_VAR 0 1
23535: PPUSH
23536: LD_EXP 85
23540: PUSH
23541: LD_VAR 0 1
23545: ARRAY
23546: PPUSH
23547: LD_VAR 0 2
23551: PPUSH
23552: CALL_OW 3
23556: PPUSH
23557: CALL_OW 1
23561: ST_TO_ADDR
// end ; end ;
23562: GO 23313
23564: POP
23565: POP
// end ;
23566: GO 23231
23568: POP
23569: POP
// end ;
23570: PPOPN 4
23572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23573: LD_INT 0
23575: PPUSH
23576: PPUSH
// result := false ;
23577: LD_ADDR_VAR 0 4
23581: PUSH
23582: LD_INT 0
23584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 264
23594: PUSH
23595: LD_INT 81
23597: EQUAL
23598: NOT
23599: IFFALSE 23603
// exit ;
23601: GO 23843
// index := GetElementIndex ( minersList , unit ) ;
23603: LD_ADDR_VAR 0 5
23607: PUSH
23608: LD_EXP 84
23612: PPUSH
23613: LD_VAR 0 1
23617: PPUSH
23618: CALL 29964 0 2
23622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23623: LD_EXP 85
23627: PUSH
23628: LD_VAR 0 5
23632: ARRAY
23633: PUSH
23634: LD_EXP 86
23638: GREATEREQUAL
23639: IFFALSE 23643
// exit ;
23641: GO 23843
// ComMoveXY ( unit , x , y ) ;
23643: LD_VAR 0 1
23647: PPUSH
23648: LD_VAR 0 2
23652: PPUSH
23653: LD_VAR 0 3
23657: PPUSH
23658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23662: LD_INT 35
23664: PPUSH
23665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23669: LD_VAR 0 1
23673: PPUSH
23674: LD_VAR 0 2
23678: PPUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: CALL 61348 0 3
23688: NOT
23689: PUSH
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 314
23699: AND
23700: IFFALSE 23704
// exit ;
23702: GO 23843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: CALL_OW 428
23718: PUSH
23719: LD_VAR 0 1
23723: EQUAL
23724: PUSH
23725: LD_VAR 0 1
23729: PPUSH
23730: CALL_OW 314
23734: NOT
23735: AND
23736: IFFALSE 23662
// PlaySoundXY ( x , y , PlantMine ) ;
23738: LD_VAR 0 2
23742: PPUSH
23743: LD_VAR 0 3
23747: PPUSH
23748: LD_STRING PlantMine
23750: PPUSH
23751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23755: LD_VAR 0 2
23759: PPUSH
23760: LD_VAR 0 3
23764: PPUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 255
23774: PPUSH
23775: LD_INT 0
23777: PPUSH
23778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23782: LD_ADDR_EXP 85
23786: PUSH
23787: LD_EXP 85
23791: PPUSH
23792: LD_VAR 0 5
23796: PUSH
23797: LD_EXP 85
23801: PUSH
23802: LD_VAR 0 5
23806: ARRAY
23807: PUSH
23808: LD_INT 1
23810: PLUS
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PPUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_VAR 0 3
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL 30179 0 3
23834: ST_TO_ADDR
// result := true ;
23835: LD_ADDR_VAR 0 4
23839: PUSH
23840: LD_INT 1
23842: ST_TO_ADDR
// end ;
23843: LD_VAR 0 4
23847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23848: LD_INT 0
23850: PPUSH
23851: PPUSH
23852: PPUSH
// if not unit in minersList then
23853: LD_VAR 0 1
23857: PUSH
23858: LD_EXP 84
23862: IN
23863: NOT
23864: IFFALSE 23868
// exit ;
23866: GO 24260
// index := GetElementIndex ( minersList , unit ) ;
23868: LD_ADDR_VAR 0 6
23872: PUSH
23873: LD_EXP 84
23877: PPUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL 29964 0 2
23887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23888: LD_ADDR_VAR 0 5
23892: PUSH
23893: DOUBLE
23894: LD_EXP 85
23898: PUSH
23899: LD_VAR 0 6
23903: ARRAY
23904: INC
23905: ST_TO_ADDR
23906: LD_INT 1
23908: PUSH
23909: FOR_DOWNTO
23910: IFFALSE 24071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23912: LD_EXP 85
23916: PUSH
23917: LD_VAR 0 6
23921: ARRAY
23922: PUSH
23923: LD_VAR 0 5
23927: ARRAY
23928: PUSH
23929: LD_INT 1
23931: ARRAY
23932: PUSH
23933: LD_VAR 0 2
23937: EQUAL
23938: PUSH
23939: LD_EXP 85
23943: PUSH
23944: LD_VAR 0 6
23948: ARRAY
23949: PUSH
23950: LD_VAR 0 5
23954: ARRAY
23955: PUSH
23956: LD_INT 2
23958: ARRAY
23959: PUSH
23960: LD_VAR 0 3
23964: EQUAL
23965: AND
23966: IFFALSE 24069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23968: LD_EXP 85
23972: PUSH
23973: LD_VAR 0 6
23977: ARRAY
23978: PUSH
23979: LD_VAR 0 5
23983: ARRAY
23984: PUSH
23985: LD_INT 1
23987: ARRAY
23988: PPUSH
23989: LD_EXP 85
23993: PUSH
23994: LD_VAR 0 6
23998: ARRAY
23999: PUSH
24000: LD_VAR 0 5
24004: ARRAY
24005: PUSH
24006: LD_INT 2
24008: ARRAY
24009: PPUSH
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 255
24019: PPUSH
24020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24024: LD_ADDR_EXP 85
24028: PUSH
24029: LD_EXP 85
24033: PPUSH
24034: LD_VAR 0 6
24038: PPUSH
24039: LD_EXP 85
24043: PUSH
24044: LD_VAR 0 6
24048: ARRAY
24049: PPUSH
24050: LD_VAR 0 5
24054: PPUSH
24055: CALL_OW 3
24059: PPUSH
24060: CALL_OW 1
24064: ST_TO_ADDR
// exit ;
24065: POP
24066: POP
24067: GO 24260
// end ; end ;
24069: GO 23909
24071: POP
24072: POP
// for i := minerMinesList [ index ] downto 1 do
24073: LD_ADDR_VAR 0 5
24077: PUSH
24078: DOUBLE
24079: LD_EXP 85
24083: PUSH
24084: LD_VAR 0 6
24088: ARRAY
24089: INC
24090: ST_TO_ADDR
24091: LD_INT 1
24093: PUSH
24094: FOR_DOWNTO
24095: IFFALSE 24258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24097: LD_EXP 85
24101: PUSH
24102: LD_VAR 0 6
24106: ARRAY
24107: PUSH
24108: LD_VAR 0 5
24112: ARRAY
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PPUSH
24118: LD_EXP 85
24122: PUSH
24123: LD_VAR 0 6
24127: ARRAY
24128: PUSH
24129: LD_VAR 0 5
24133: ARRAY
24134: PUSH
24135: LD_INT 2
24137: ARRAY
24138: PPUSH
24139: LD_VAR 0 2
24143: PPUSH
24144: LD_VAR 0 3
24148: PPUSH
24149: CALL_OW 298
24153: PUSH
24154: LD_INT 6
24156: LESS
24157: IFFALSE 24256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24159: LD_EXP 85
24163: PUSH
24164: LD_VAR 0 6
24168: ARRAY
24169: PUSH
24170: LD_VAR 0 5
24174: ARRAY
24175: PUSH
24176: LD_INT 1
24178: ARRAY
24179: PPUSH
24180: LD_EXP 85
24184: PUSH
24185: LD_VAR 0 6
24189: ARRAY
24190: PUSH
24191: LD_VAR 0 5
24195: ARRAY
24196: PUSH
24197: LD_INT 2
24199: ARRAY
24200: PPUSH
24201: LD_VAR 0 1
24205: PPUSH
24206: CALL_OW 255
24210: PPUSH
24211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24215: LD_ADDR_EXP 85
24219: PUSH
24220: LD_EXP 85
24224: PPUSH
24225: LD_VAR 0 6
24229: PPUSH
24230: LD_EXP 85
24234: PUSH
24235: LD_VAR 0 6
24239: ARRAY
24240: PPUSH
24241: LD_VAR 0 5
24245: PPUSH
24246: CALL_OW 3
24250: PPUSH
24251: CALL_OW 1
24255: ST_TO_ADDR
// end ; end ;
24256: GO 24094
24258: POP
24259: POP
// end ;
24260: LD_VAR 0 4
24264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24265: LD_INT 0
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
24274: PPUSH
24275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 264
24285: PUSH
24286: LD_INT 81
24288: EQUAL
24289: NOT
24290: PUSH
24291: LD_VAR 0 1
24295: PUSH
24296: LD_EXP 84
24300: IN
24301: NOT
24302: OR
24303: IFFALSE 24307
// exit ;
24305: GO 24629
// index := GetElementIndex ( minersList , unit ) ;
24307: LD_ADDR_VAR 0 6
24311: PUSH
24312: LD_EXP 84
24316: PPUSH
24317: LD_VAR 0 1
24321: PPUSH
24322: CALL 29964 0 2
24326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24327: LD_ADDR_VAR 0 8
24331: PUSH
24332: LD_EXP 86
24336: PUSH
24337: LD_EXP 85
24341: PUSH
24342: LD_VAR 0 6
24346: ARRAY
24347: MINUS
24348: ST_TO_ADDR
// if not minesFreeAmount then
24349: LD_VAR 0 8
24353: NOT
24354: IFFALSE 24358
// exit ;
24356: GO 24629
// tmp := [ ] ;
24358: LD_ADDR_VAR 0 7
24362: PUSH
24363: EMPTY
24364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24365: LD_ADDR_VAR 0 5
24369: PUSH
24370: DOUBLE
24371: LD_INT 1
24373: DEC
24374: ST_TO_ADDR
24375: LD_VAR 0 8
24379: PUSH
24380: FOR_TO
24381: IFFALSE 24576
// begin _d := rand ( 0 , 5 ) ;
24383: LD_ADDR_VAR 0 11
24387: PUSH
24388: LD_INT 0
24390: PPUSH
24391: LD_INT 5
24393: PPUSH
24394: CALL_OW 12
24398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24399: LD_ADDR_VAR 0 12
24403: PUSH
24404: LD_INT 2
24406: PPUSH
24407: LD_INT 6
24409: PPUSH
24410: CALL_OW 12
24414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24415: LD_ADDR_VAR 0 9
24419: PUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_VAR 0 11
24429: PPUSH
24430: LD_VAR 0 12
24434: PPUSH
24435: CALL_OW 272
24439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24440: LD_ADDR_VAR 0 10
24444: PUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_VAR 0 11
24454: PPUSH
24455: LD_VAR 0 12
24459: PPUSH
24460: CALL_OW 273
24464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24465: LD_VAR 0 9
24469: PPUSH
24470: LD_VAR 0 10
24474: PPUSH
24475: CALL_OW 488
24479: PUSH
24480: LD_VAR 0 9
24484: PUSH
24485: LD_VAR 0 10
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_VAR 0 7
24498: IN
24499: NOT
24500: AND
24501: PUSH
24502: LD_VAR 0 9
24506: PPUSH
24507: LD_VAR 0 10
24511: PPUSH
24512: CALL_OW 458
24516: NOT
24517: AND
24518: IFFALSE 24560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24520: LD_ADDR_VAR 0 7
24524: PUSH
24525: LD_VAR 0 7
24529: PPUSH
24530: LD_VAR 0 7
24534: PUSH
24535: LD_INT 1
24537: PLUS
24538: PPUSH
24539: LD_VAR 0 9
24543: PUSH
24544: LD_VAR 0 10
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PPUSH
24553: CALL_OW 1
24557: ST_TO_ADDR
24558: GO 24574
// i := i - 1 ;
24560: LD_ADDR_VAR 0 5
24564: PUSH
24565: LD_VAR 0 5
24569: PUSH
24570: LD_INT 1
24572: MINUS
24573: ST_TO_ADDR
// end ;
24574: GO 24380
24576: POP
24577: POP
// for i in tmp do
24578: LD_ADDR_VAR 0 5
24582: PUSH
24583: LD_VAR 0 7
24587: PUSH
24588: FOR_IN
24589: IFFALSE 24627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24591: LD_VAR 0 1
24595: PPUSH
24596: LD_VAR 0 5
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: PPUSH
24605: LD_VAR 0 5
24609: PUSH
24610: LD_INT 2
24612: ARRAY
24613: PPUSH
24614: CALL 23573 0 3
24618: NOT
24619: IFFALSE 24625
// exit ;
24621: POP
24622: POP
24623: GO 24629
24625: GO 24588
24627: POP
24628: POP
// end ;
24629: LD_VAR 0 4
24633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24634: LD_INT 0
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
// if not GetClass ( unit ) = class_sniper then
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 257
24652: PUSH
24653: LD_INT 5
24655: EQUAL
24656: NOT
24657: IFFALSE 24661
// exit ;
24659: GO 25049
// dist := 8 ;
24661: LD_ADDR_VAR 0 5
24665: PUSH
24666: LD_INT 8
24668: ST_TO_ADDR
// viewRange := 12 ;
24669: LD_ADDR_VAR 0 7
24673: PUSH
24674: LD_INT 12
24676: ST_TO_ADDR
// side := GetSide ( unit ) ;
24677: LD_ADDR_VAR 0 6
24681: PUSH
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 255
24691: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24692: LD_INT 61
24694: PPUSH
24695: LD_VAR 0 6
24699: PPUSH
24700: CALL_OW 321
24704: PUSH
24705: LD_INT 2
24707: EQUAL
24708: IFFALSE 24718
// viewRange := 16 ;
24710: LD_ADDR_VAR 0 7
24714: PUSH
24715: LD_INT 16
24717: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24718: LD_VAR 0 1
24722: PPUSH
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 3
24732: PPUSH
24733: CALL_OW 297
24737: PUSH
24738: LD_VAR 0 5
24742: GREATER
24743: IFFALSE 24822
// begin ComMoveXY ( unit , x , y ) ;
24745: LD_VAR 0 1
24749: PPUSH
24750: LD_VAR 0 2
24754: PPUSH
24755: LD_VAR 0 3
24759: PPUSH
24760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24764: LD_INT 35
24766: PPUSH
24767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24771: LD_VAR 0 1
24775: PPUSH
24776: LD_VAR 0 2
24780: PPUSH
24781: LD_VAR 0 3
24785: PPUSH
24786: CALL 61348 0 3
24790: NOT
24791: IFFALSE 24795
// exit ;
24793: GO 25049
// until GetDistUnitXY ( unit , x , y ) < dist ;
24795: LD_VAR 0 1
24799: PPUSH
24800: LD_VAR 0 2
24804: PPUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 297
24814: PUSH
24815: LD_VAR 0 5
24819: LESS
24820: IFFALSE 24764
// end ; ComTurnXY ( unit , x , y ) ;
24822: LD_VAR 0 1
24826: PPUSH
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: CALL_OW 118
// wait ( 5 ) ;
24841: LD_INT 5
24843: PPUSH
24844: CALL_OW 67
// _d := GetDir ( unit ) ;
24848: LD_ADDR_VAR 0 10
24852: PUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 254
24862: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24863: LD_ADDR_VAR 0 8
24867: PUSH
24868: LD_VAR 0 1
24872: PPUSH
24873: CALL_OW 250
24877: PPUSH
24878: LD_VAR 0 10
24882: PPUSH
24883: LD_VAR 0 5
24887: PPUSH
24888: CALL_OW 272
24892: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24893: LD_ADDR_VAR 0 9
24897: PUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 251
24907: PPUSH
24908: LD_VAR 0 10
24912: PPUSH
24913: LD_VAR 0 5
24917: PPUSH
24918: CALL_OW 273
24922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 9
24932: PPUSH
24933: CALL_OW 488
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 25049
// ComAnimCustom ( unit , 1 ) ;
24942: LD_VAR 0 1
24946: PPUSH
24947: LD_INT 1
24949: PPUSH
24950: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24954: LD_VAR 0 8
24958: PPUSH
24959: LD_VAR 0 9
24963: PPUSH
24964: LD_VAR 0 6
24968: PPUSH
24969: LD_VAR 0 7
24973: PPUSH
24974: CALL_OW 330
// repeat wait ( 1 ) ;
24978: LD_INT 1
24980: PPUSH
24981: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 316
24994: PUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 314
25004: OR
25005: PUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL_OW 302
25015: NOT
25016: OR
25017: PUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 301
25027: OR
25028: IFFALSE 24978
// RemoveSeeing ( _x , _y , side ) ;
25030: LD_VAR 0 8
25034: PPUSH
25035: LD_VAR 0 9
25039: PPUSH
25040: LD_VAR 0 6
25044: PPUSH
25045: CALL_OW 331
// end ; end_of_file
25049: LD_VAR 0 4
25053: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 200
25061: DOUBLE
25062: GREATEREQUAL
25063: IFFALSE 25071
25065: LD_INT 299
25067: DOUBLE
25068: LESSEQUAL
25069: IFTRUE 25073
25071: GO 25105
25073: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25074: LD_VAR 0 1
25078: PPUSH
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: LD_VAR 0 4
25093: PPUSH
25094: LD_VAR 0 5
25098: PPUSH
25099: CALL 21141 0 5
25103: GO 25182
25105: LD_INT 300
25107: DOUBLE
25108: GREATEREQUAL
25109: IFFALSE 25117
25111: LD_INT 399
25113: DOUBLE
25114: LESSEQUAL
25115: IFTRUE 25119
25117: GO 25181
25119: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25120: LD_VAR 0 1
25124: PPUSH
25125: LD_VAR 0 2
25129: PPUSH
25130: LD_VAR 0 3
25134: PPUSH
25135: LD_VAR 0 4
25139: PPUSH
25140: LD_VAR 0 5
25144: PPUSH
25145: LD_VAR 0 6
25149: PPUSH
25150: LD_VAR 0 7
25154: PPUSH
25155: LD_VAR 0 8
25159: PPUSH
25160: LD_VAR 0 9
25164: PPUSH
25165: LD_VAR 0 10
25169: PPUSH
25170: LD_VAR 0 11
25174: PPUSH
25175: CALL 17466 0 11
25179: GO 25182
25181: POP
// end ;
25182: PPOPN 11
25184: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25185: LD_VAR 0 1
25189: PPUSH
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: LD_VAR 0 4
25204: PPUSH
25205: LD_VAR 0 5
25209: PPUSH
25210: CALL 20877 0 5
// end ; end_of_file
25214: PPOPN 5
25216: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25217: LD_INT 0
25219: PPUSH
25220: PPUSH
// if exist_mode then
25221: LD_VAR 0 2
25225: IFFALSE 25250
// unit := CreateCharacter ( prefix & ident ) else
25227: LD_ADDR_VAR 0 5
25231: PUSH
25232: LD_VAR 0 3
25236: PUSH
25237: LD_VAR 0 1
25241: STR
25242: PPUSH
25243: CALL_OW 34
25247: ST_TO_ADDR
25248: GO 25265
// unit := NewCharacter ( ident ) ;
25250: LD_ADDR_VAR 0 5
25254: PUSH
25255: LD_VAR 0 1
25259: PPUSH
25260: CALL_OW 25
25264: ST_TO_ADDR
// result := unit ;
25265: LD_ADDR_VAR 0 4
25269: PUSH
25270: LD_VAR 0 5
25274: ST_TO_ADDR
// end ;
25275: LD_VAR 0 4
25279: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
// if not side or not nation then
25284: LD_VAR 0 1
25288: NOT
25289: PUSH
25290: LD_VAR 0 2
25294: NOT
25295: OR
25296: IFFALSE 25300
// exit ;
25298: GO 26068
// case nation of nation_american :
25300: LD_VAR 0 2
25304: PUSH
25305: LD_INT 1
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25527
25313: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25314: LD_ADDR_VAR 0 4
25318: PUSH
25319: LD_INT 35
25321: PUSH
25322: LD_INT 45
25324: PUSH
25325: LD_INT 46
25327: PUSH
25328: LD_INT 47
25330: PUSH
25331: LD_INT 82
25333: PUSH
25334: LD_INT 83
25336: PUSH
25337: LD_INT 84
25339: PUSH
25340: LD_INT 85
25342: PUSH
25343: LD_INT 86
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 6
25354: PUSH
25355: LD_INT 15
25357: PUSH
25358: LD_INT 16
25360: PUSH
25361: LD_INT 7
25363: PUSH
25364: LD_INT 12
25366: PUSH
25367: LD_INT 13
25369: PUSH
25370: LD_INT 10
25372: PUSH
25373: LD_INT 14
25375: PUSH
25376: LD_INT 20
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_INT 25
25387: PUSH
25388: LD_INT 32
25390: PUSH
25391: LD_INT 27
25393: PUSH
25394: LD_INT 36
25396: PUSH
25397: LD_INT 69
25399: PUSH
25400: LD_INT 39
25402: PUSH
25403: LD_INT 34
25405: PUSH
25406: LD_INT 40
25408: PUSH
25409: LD_INT 48
25411: PUSH
25412: LD_INT 49
25414: PUSH
25415: LD_INT 50
25417: PUSH
25418: LD_INT 51
25420: PUSH
25421: LD_INT 52
25423: PUSH
25424: LD_INT 53
25426: PUSH
25427: LD_INT 54
25429: PUSH
25430: LD_INT 55
25432: PUSH
25433: LD_INT 56
25435: PUSH
25436: LD_INT 57
25438: PUSH
25439: LD_INT 58
25441: PUSH
25442: LD_INT 59
25444: PUSH
25445: LD_INT 60
25447: PUSH
25448: LD_INT 61
25450: PUSH
25451: LD_INT 62
25453: PUSH
25454: LD_INT 80
25456: PUSH
25457: LD_INT 82
25459: PUSH
25460: LD_INT 83
25462: PUSH
25463: LD_INT 84
25465: PUSH
25466: LD_INT 85
25468: PUSH
25469: LD_INT 86
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
25525: GO 25992
25527: LD_INT 2
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25761
25535: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: LD_INT 35
25543: PUSH
25544: LD_INT 45
25546: PUSH
25547: LD_INT 46
25549: PUSH
25550: LD_INT 47
25552: PUSH
25553: LD_INT 82
25555: PUSH
25556: LD_INT 83
25558: PUSH
25559: LD_INT 84
25561: PUSH
25562: LD_INT 85
25564: PUSH
25565: LD_INT 87
25567: PUSH
25568: LD_INT 70
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 11
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: LD_INT 6
25588: PUSH
25589: LD_INT 15
25591: PUSH
25592: LD_INT 18
25594: PUSH
25595: LD_INT 7
25597: PUSH
25598: LD_INT 17
25600: PUSH
25601: LD_INT 8
25603: PUSH
25604: LD_INT 20
25606: PUSH
25607: LD_INT 21
25609: PUSH
25610: LD_INT 22
25612: PUSH
25613: LD_INT 72
25615: PUSH
25616: LD_INT 26
25618: PUSH
25619: LD_INT 69
25621: PUSH
25622: LD_INT 39
25624: PUSH
25625: LD_INT 40
25627: PUSH
25628: LD_INT 41
25630: PUSH
25631: LD_INT 42
25633: PUSH
25634: LD_INT 43
25636: PUSH
25637: LD_INT 48
25639: PUSH
25640: LD_INT 49
25642: PUSH
25643: LD_INT 50
25645: PUSH
25646: LD_INT 51
25648: PUSH
25649: LD_INT 52
25651: PUSH
25652: LD_INT 53
25654: PUSH
25655: LD_INT 54
25657: PUSH
25658: LD_INT 55
25660: PUSH
25661: LD_INT 56
25663: PUSH
25664: LD_INT 60
25666: PUSH
25667: LD_INT 61
25669: PUSH
25670: LD_INT 62
25672: PUSH
25673: LD_INT 66
25675: PUSH
25676: LD_INT 67
25678: PUSH
25679: LD_INT 68
25681: PUSH
25682: LD_INT 81
25684: PUSH
25685: LD_INT 82
25687: PUSH
25688: LD_INT 83
25690: PUSH
25691: LD_INT 84
25693: PUSH
25694: LD_INT 85
25696: PUSH
25697: LD_INT 87
25699: PUSH
25700: LD_INT 88
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
25759: GO 25992
25761: LD_INT 3
25763: DOUBLE
25764: EQUAL
25765: IFTRUE 25769
25767: GO 25991
25769: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25770: LD_ADDR_VAR 0 4
25774: PUSH
25775: LD_INT 46
25777: PUSH
25778: LD_INT 47
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 82
25789: PUSH
25790: LD_INT 83
25792: PUSH
25793: LD_INT 84
25795: PUSH
25796: LD_INT 85
25798: PUSH
25799: LD_INT 86
25801: PUSH
25802: LD_INT 11
25804: PUSH
25805: LD_INT 9
25807: PUSH
25808: LD_INT 20
25810: PUSH
25811: LD_INT 19
25813: PUSH
25814: LD_INT 21
25816: PUSH
25817: LD_INT 24
25819: PUSH
25820: LD_INT 22
25822: PUSH
25823: LD_INT 25
25825: PUSH
25826: LD_INT 28
25828: PUSH
25829: LD_INT 29
25831: PUSH
25832: LD_INT 30
25834: PUSH
25835: LD_INT 31
25837: PUSH
25838: LD_INT 37
25840: PUSH
25841: LD_INT 38
25843: PUSH
25844: LD_INT 32
25846: PUSH
25847: LD_INT 27
25849: PUSH
25850: LD_INT 33
25852: PUSH
25853: LD_INT 69
25855: PUSH
25856: LD_INT 39
25858: PUSH
25859: LD_INT 34
25861: PUSH
25862: LD_INT 40
25864: PUSH
25865: LD_INT 71
25867: PUSH
25868: LD_INT 23
25870: PUSH
25871: LD_INT 44
25873: PUSH
25874: LD_INT 48
25876: PUSH
25877: LD_INT 49
25879: PUSH
25880: LD_INT 50
25882: PUSH
25883: LD_INT 51
25885: PUSH
25886: LD_INT 52
25888: PUSH
25889: LD_INT 53
25891: PUSH
25892: LD_INT 54
25894: PUSH
25895: LD_INT 55
25897: PUSH
25898: LD_INT 56
25900: PUSH
25901: LD_INT 57
25903: PUSH
25904: LD_INT 58
25906: PUSH
25907: LD_INT 59
25909: PUSH
25910: LD_INT 63
25912: PUSH
25913: LD_INT 64
25915: PUSH
25916: LD_INT 65
25918: PUSH
25919: LD_INT 82
25921: PUSH
25922: LD_INT 83
25924: PUSH
25925: LD_INT 84
25927: PUSH
25928: LD_INT 85
25930: PUSH
25931: LD_INT 86
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: ST_TO_ADDR
25989: GO 25992
25991: POP
// if state > - 1 and state < 3 then
25992: LD_VAR 0 3
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: GREATER
26001: PUSH
26002: LD_VAR 0 3
26006: PUSH
26007: LD_INT 3
26009: LESS
26010: AND
26011: IFFALSE 26068
// for i in result do
26013: LD_ADDR_VAR 0 5
26017: PUSH
26018: LD_VAR 0 4
26022: PUSH
26023: FOR_IN
26024: IFFALSE 26066
// if GetTech ( i , side ) <> state then
26026: LD_VAR 0 5
26030: PPUSH
26031: LD_VAR 0 1
26035: PPUSH
26036: CALL_OW 321
26040: PUSH
26041: LD_VAR 0 3
26045: NONEQUAL
26046: IFFALSE 26064
// result := result diff i ;
26048: LD_ADDR_VAR 0 4
26052: PUSH
26053: LD_VAR 0 4
26057: PUSH
26058: LD_VAR 0 5
26062: DIFF
26063: ST_TO_ADDR
26064: GO 26023
26066: POP
26067: POP
// end ;
26068: LD_VAR 0 4
26072: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26073: LD_INT 0
26075: PPUSH
26076: PPUSH
26077: PPUSH
// result := true ;
26078: LD_ADDR_VAR 0 3
26082: PUSH
26083: LD_INT 1
26085: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: LD_VAR 0 2
26095: PPUSH
26096: CALL_OW 480
26100: ST_TO_ADDR
// if not tmp then
26101: LD_VAR 0 5
26105: NOT
26106: IFFALSE 26110
// exit ;
26108: GO 26159
// for i in tmp do
26110: LD_ADDR_VAR 0 4
26114: PUSH
26115: LD_VAR 0 5
26119: PUSH
26120: FOR_IN
26121: IFFALSE 26157
// if GetTech ( i , side ) <> state_researched then
26123: LD_VAR 0 4
26127: PPUSH
26128: LD_VAR 0 1
26132: PPUSH
26133: CALL_OW 321
26137: PUSH
26138: LD_INT 2
26140: NONEQUAL
26141: IFFALSE 26155
// begin result := false ;
26143: LD_ADDR_VAR 0 3
26147: PUSH
26148: LD_INT 0
26150: ST_TO_ADDR
// exit ;
26151: POP
26152: POP
26153: GO 26159
// end ;
26155: GO 26120
26157: POP
26158: POP
// end ;
26159: LD_VAR 0 3
26163: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26164: LD_INT 0
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26179: LD_VAR 0 1
26183: NOT
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 257
26194: PUSH
26195: LD_INT 9
26197: NONEQUAL
26198: OR
26199: IFFALSE 26203
// exit ;
26201: GO 26776
// side := GetSide ( unit ) ;
26203: LD_ADDR_VAR 0 9
26207: PUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 255
26217: ST_TO_ADDR
// tech_space := tech_spacanom ;
26218: LD_ADDR_VAR 0 12
26222: PUSH
26223: LD_INT 29
26225: ST_TO_ADDR
// tech_time := tech_taurad ;
26226: LD_ADDR_VAR 0 13
26230: PUSH
26231: LD_INT 28
26233: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26234: LD_ADDR_VAR 0 11
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 310
26248: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26249: LD_VAR 0 11
26253: PPUSH
26254: CALL_OW 247
26258: PUSH
26259: LD_INT 2
26261: EQUAL
26262: IFFALSE 26266
// exit ;
26264: GO 26776
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26266: LD_ADDR_VAR 0 8
26270: PUSH
26271: LD_INT 81
26273: PUSH
26274: LD_VAR 0 9
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 3
26285: PUSH
26286: LD_INT 21
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 69
26308: ST_TO_ADDR
// if not tmp then
26309: LD_VAR 0 8
26313: NOT
26314: IFFALSE 26318
// exit ;
26316: GO 26776
// if in_unit then
26318: LD_VAR 0 11
26322: IFFALSE 26346
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26324: LD_ADDR_VAR 0 10
26328: PUSH
26329: LD_VAR 0 8
26333: PPUSH
26334: LD_VAR 0 11
26338: PPUSH
26339: CALL_OW 74
26343: ST_TO_ADDR
26344: GO 26366
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26346: LD_ADDR_VAR 0 10
26350: PUSH
26351: LD_VAR 0 8
26355: PPUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 74
26365: ST_TO_ADDR
// if not enemy then
26366: LD_VAR 0 10
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26776
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26375: LD_VAR 0 11
26379: PUSH
26380: LD_VAR 0 11
26384: PPUSH
26385: LD_VAR 0 10
26389: PPUSH
26390: CALL_OW 296
26394: PUSH
26395: LD_INT 13
26397: GREATER
26398: AND
26399: PUSH
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_VAR 0 10
26409: PPUSH
26410: CALL_OW 296
26414: PUSH
26415: LD_INT 12
26417: GREATER
26418: OR
26419: IFFALSE 26423
// exit ;
26421: GO 26776
// missile := [ 1 ] ;
26423: LD_ADDR_VAR 0 14
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26434: LD_VAR 0 9
26438: PPUSH
26439: LD_VAR 0 12
26443: PPUSH
26444: CALL_OW 325
26448: IFFALSE 26477
// missile := Replace ( missile , missile + 1 , 2 ) ;
26450: LD_ADDR_VAR 0 14
26454: PUSH
26455: LD_VAR 0 14
26459: PPUSH
26460: LD_VAR 0 14
26464: PUSH
26465: LD_INT 1
26467: PLUS
26468: PPUSH
26469: LD_INT 2
26471: PPUSH
26472: CALL_OW 1
26476: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26477: LD_VAR 0 9
26481: PPUSH
26482: LD_VAR 0 13
26486: PPUSH
26487: CALL_OW 325
26491: PUSH
26492: LD_VAR 0 10
26496: PPUSH
26497: CALL_OW 255
26501: PPUSH
26502: LD_VAR 0 13
26506: PPUSH
26507: CALL_OW 325
26511: NOT
26512: AND
26513: IFFALSE 26542
// missile := Replace ( missile , missile + 1 , 3 ) ;
26515: LD_ADDR_VAR 0 14
26519: PUSH
26520: LD_VAR 0 14
26524: PPUSH
26525: LD_VAR 0 14
26529: PUSH
26530: LD_INT 1
26532: PLUS
26533: PPUSH
26534: LD_INT 3
26536: PPUSH
26537: CALL_OW 1
26541: ST_TO_ADDR
// if missile < 2 then
26542: LD_VAR 0 14
26546: PUSH
26547: LD_INT 2
26549: LESS
26550: IFFALSE 26554
// exit ;
26552: GO 26776
// x := GetX ( enemy ) ;
26554: LD_ADDR_VAR 0 4
26558: PUSH
26559: LD_VAR 0 10
26563: PPUSH
26564: CALL_OW 250
26568: ST_TO_ADDR
// y := GetY ( enemy ) ;
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_VAR 0 10
26578: PPUSH
26579: CALL_OW 251
26583: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: LD_VAR 0 4
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PPUSH
26598: LD_INT 1
26600: PPUSH
26601: CALL_OW 12
26605: PLUS
26606: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26607: LD_ADDR_VAR 0 7
26611: PUSH
26612: LD_VAR 0 5
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PPUSH
26621: LD_INT 1
26623: PPUSH
26624: CALL_OW 12
26628: PLUS
26629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26630: LD_VAR 0 6
26634: PPUSH
26635: LD_VAR 0 7
26639: PPUSH
26640: CALL_OW 488
26644: NOT
26645: IFFALSE 26667
// begin _x := x ;
26647: LD_ADDR_VAR 0 6
26651: PUSH
26652: LD_VAR 0 4
26656: ST_TO_ADDR
// _y := y ;
26657: LD_ADDR_VAR 0 7
26661: PUSH
26662: LD_VAR 0 5
26666: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_INT 1
26674: PPUSH
26675: LD_VAR 0 14
26679: PPUSH
26680: CALL_OW 12
26684: ST_TO_ADDR
// case i of 1 :
26685: LD_VAR 0 3
26689: PUSH
26690: LD_INT 1
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26698
26696: GO 26715
26698: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26699: LD_VAR 0 1
26703: PPUSH
26704: LD_VAR 0 10
26708: PPUSH
26709: CALL_OW 115
26713: GO 26776
26715: LD_INT 2
26717: DOUBLE
26718: EQUAL
26719: IFTRUE 26723
26721: GO 26745
26723: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26724: LD_VAR 0 1
26728: PPUSH
26729: LD_VAR 0 6
26733: PPUSH
26734: LD_VAR 0 7
26738: PPUSH
26739: CALL_OW 153
26743: GO 26776
26745: LD_INT 3
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26775
26753: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_VAR 0 6
26763: PPUSH
26764: LD_VAR 0 7
26768: PPUSH
26769: CALL_OW 154
26773: GO 26776
26775: POP
// end ;
26776: LD_VAR 0 2
26780: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
// if not unit or not building then
26789: LD_VAR 0 1
26793: NOT
26794: PUSH
26795: LD_VAR 0 2
26799: NOT
26800: OR
26801: IFFALSE 26805
// exit ;
26803: GO 26963
// x := GetX ( building ) ;
26805: LD_ADDR_VAR 0 5
26809: PUSH
26810: LD_VAR 0 2
26814: PPUSH
26815: CALL_OW 250
26819: ST_TO_ADDR
// y := GetY ( building ) ;
26820: LD_ADDR_VAR 0 6
26824: PUSH
26825: LD_VAR 0 2
26829: PPUSH
26830: CALL_OW 251
26834: ST_TO_ADDR
// for i = 0 to 5 do
26835: LD_ADDR_VAR 0 4
26839: PUSH
26840: DOUBLE
26841: LD_INT 0
26843: DEC
26844: ST_TO_ADDR
26845: LD_INT 5
26847: PUSH
26848: FOR_TO
26849: IFFALSE 26961
// begin _x := ShiftX ( x , i , 3 ) ;
26851: LD_ADDR_VAR 0 7
26855: PUSH
26856: LD_VAR 0 5
26860: PPUSH
26861: LD_VAR 0 4
26865: PPUSH
26866: LD_INT 3
26868: PPUSH
26869: CALL_OW 272
26873: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26874: LD_ADDR_VAR 0 8
26878: PUSH
26879: LD_VAR 0 6
26883: PPUSH
26884: LD_VAR 0 4
26888: PPUSH
26889: LD_INT 3
26891: PPUSH
26892: CALL_OW 273
26896: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26897: LD_VAR 0 7
26901: PPUSH
26902: LD_VAR 0 8
26906: PPUSH
26907: CALL_OW 488
26911: NOT
26912: IFFALSE 26916
// continue ;
26914: GO 26848
// if HexInfo ( _x , _y ) = 0 then
26916: LD_VAR 0 7
26920: PPUSH
26921: LD_VAR 0 8
26925: PPUSH
26926: CALL_OW 428
26930: PUSH
26931: LD_INT 0
26933: EQUAL
26934: IFFALSE 26959
// begin ComMoveXY ( unit , _x , _y ) ;
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_VAR 0 7
26945: PPUSH
26946: LD_VAR 0 8
26950: PPUSH
26951: CALL_OW 111
// exit ;
26955: POP
26956: POP
26957: GO 26963
// end ; end ;
26959: GO 26848
26961: POP
26962: POP
// end ;
26963: LD_VAR 0 3
26967: RET
// export function ScanBase ( side , base_area ) ; begin
26968: LD_INT 0
26970: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26971: LD_ADDR_VAR 0 3
26975: PUSH
26976: LD_VAR 0 2
26980: PPUSH
26981: LD_INT 81
26983: PUSH
26984: LD_VAR 0 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 70
26997: ST_TO_ADDR
// end ;
26998: LD_VAR 0 3
27002: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27003: LD_INT 0
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
// result := false ;
27009: LD_ADDR_VAR 0 2
27013: PUSH
27014: LD_INT 0
27016: ST_TO_ADDR
// side := GetSide ( unit ) ;
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_VAR 0 1
27026: PPUSH
27027: CALL_OW 255
27031: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27032: LD_ADDR_VAR 0 4
27036: PUSH
27037: LD_VAR 0 1
27041: PPUSH
27042: CALL_OW 248
27046: ST_TO_ADDR
// case nat of 1 :
27047: LD_VAR 0 4
27051: PUSH
27052: LD_INT 1
27054: DOUBLE
27055: EQUAL
27056: IFTRUE 27060
27058: GO 27071
27060: POP
// tech := tech_lassight ; 2 :
27061: LD_ADDR_VAR 0 5
27065: PUSH
27066: LD_INT 12
27068: ST_TO_ADDR
27069: GO 27110
27071: LD_INT 2
27073: DOUBLE
27074: EQUAL
27075: IFTRUE 27079
27077: GO 27090
27079: POP
// tech := tech_mortar ; 3 :
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_INT 41
27087: ST_TO_ADDR
27088: GO 27110
27090: LD_INT 3
27092: DOUBLE
27093: EQUAL
27094: IFTRUE 27098
27096: GO 27109
27098: POP
// tech := tech_bazooka ; end ;
27099: LD_ADDR_VAR 0 5
27103: PUSH
27104: LD_INT 44
27106: ST_TO_ADDR
27107: GO 27110
27109: POP
// if Researched ( side , tech ) then
27110: LD_VAR 0 3
27114: PPUSH
27115: LD_VAR 0 5
27119: PPUSH
27120: CALL_OW 325
27124: IFFALSE 27151
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27126: LD_ADDR_VAR 0 2
27130: PUSH
27131: LD_INT 5
27133: PUSH
27134: LD_INT 8
27136: PUSH
27137: LD_INT 9
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: PUSH
27145: LD_VAR 0 4
27149: ARRAY
27150: ST_TO_ADDR
// end ;
27151: LD_VAR 0 2
27155: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27156: LD_INT 0
27158: PPUSH
27159: PPUSH
27160: PPUSH
// if not mines then
27161: LD_VAR 0 2
27165: NOT
27166: IFFALSE 27170
// exit ;
27168: GO 27314
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27170: LD_ADDR_VAR 0 5
27174: PUSH
27175: LD_INT 81
27177: PUSH
27178: LD_VAR 0 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 3
27189: PUSH
27190: LD_INT 21
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PPUSH
27208: CALL_OW 69
27212: ST_TO_ADDR
// for i in mines do
27213: LD_ADDR_VAR 0 4
27217: PUSH
27218: LD_VAR 0 2
27222: PUSH
27223: FOR_IN
27224: IFFALSE 27312
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27226: LD_VAR 0 4
27230: PUSH
27231: LD_INT 1
27233: ARRAY
27234: PPUSH
27235: LD_VAR 0 4
27239: PUSH
27240: LD_INT 2
27242: ARRAY
27243: PPUSH
27244: CALL_OW 458
27248: NOT
27249: IFFALSE 27253
// continue ;
27251: GO 27223
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27253: LD_VAR 0 4
27257: PUSH
27258: LD_INT 1
27260: ARRAY
27261: PPUSH
27262: LD_VAR 0 4
27266: PUSH
27267: LD_INT 2
27269: ARRAY
27270: PPUSH
27271: CALL_OW 428
27275: PUSH
27276: LD_VAR 0 5
27280: IN
27281: IFFALSE 27310
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27283: LD_VAR 0 4
27287: PUSH
27288: LD_INT 1
27290: ARRAY
27291: PPUSH
27292: LD_VAR 0 4
27296: PUSH
27297: LD_INT 2
27299: ARRAY
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 456
// end ;
27310: GO 27223
27312: POP
27313: POP
// end ;
27314: LD_VAR 0 3
27318: RET
// export function Count ( array ) ; begin
27319: LD_INT 0
27321: PPUSH
// result := array + 0 ;
27322: LD_ADDR_VAR 0 2
27326: PUSH
27327: LD_VAR 0 1
27331: PUSH
27332: LD_INT 0
27334: PLUS
27335: ST_TO_ADDR
// end ;
27336: LD_VAR 0 2
27340: RET
// export function IsEmpty ( building ) ; begin
27341: LD_INT 0
27343: PPUSH
// if not building then
27344: LD_VAR 0 1
27348: NOT
27349: IFFALSE 27353
// exit ;
27351: GO 27396
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27353: LD_ADDR_VAR 0 2
27357: PUSH
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 22
27365: PUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 255
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 58
27382: PUSH
27383: EMPTY
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 69
27394: IN
27395: ST_TO_ADDR
// end ;
27396: LD_VAR 0 2
27400: RET
// export function IsNotFull ( building ) ; var places ; begin
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
// if not building then
27405: LD_VAR 0 1
27409: NOT
27410: IFFALSE 27414
// exit ;
27412: GO 27442
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27414: LD_ADDR_VAR 0 2
27418: PUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: LD_INT 3
27426: PUSH
27427: LD_INT 62
27429: PUSH
27430: EMPTY
27431: LIST
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PPUSH
27437: CALL_OW 72
27441: ST_TO_ADDR
// end ;
27442: LD_VAR 0 2
27446: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27447: LD_INT 0
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
// tmp := [ ] ;
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: EMPTY
27459: ST_TO_ADDR
// list := [ ] ;
27460: LD_ADDR_VAR 0 5
27464: PUSH
27465: EMPTY
27466: ST_TO_ADDR
// for i = 16 to 25 do
27467: LD_ADDR_VAR 0 4
27471: PUSH
27472: DOUBLE
27473: LD_INT 16
27475: DEC
27476: ST_TO_ADDR
27477: LD_INT 25
27479: PUSH
27480: FOR_TO
27481: IFFALSE 27554
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27483: LD_ADDR_VAR 0 3
27487: PUSH
27488: LD_VAR 0 3
27492: PUSH
27493: LD_INT 22
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 255
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 91
27512: PUSH
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 6
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 30
27528: PUSH
27529: LD_VAR 0 4
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: PUSH
27543: EMPTY
27544: LIST
27545: PPUSH
27546: CALL_OW 69
27550: ADD
27551: ST_TO_ADDR
27552: GO 27480
27554: POP
27555: POP
// for i = 1 to tmp do
27556: LD_ADDR_VAR 0 4
27560: PUSH
27561: DOUBLE
27562: LD_INT 1
27564: DEC
27565: ST_TO_ADDR
27566: LD_VAR 0 3
27570: PUSH
27571: FOR_TO
27572: IFFALSE 27660
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27574: LD_ADDR_VAR 0 5
27578: PUSH
27579: LD_VAR 0 5
27583: PUSH
27584: LD_VAR 0 3
27588: PUSH
27589: LD_VAR 0 4
27593: ARRAY
27594: PPUSH
27595: CALL_OW 266
27599: PUSH
27600: LD_VAR 0 3
27604: PUSH
27605: LD_VAR 0 4
27609: ARRAY
27610: PPUSH
27611: CALL_OW 250
27615: PUSH
27616: LD_VAR 0 3
27620: PUSH
27621: LD_VAR 0 4
27625: ARRAY
27626: PPUSH
27627: CALL_OW 251
27631: PUSH
27632: LD_VAR 0 3
27636: PUSH
27637: LD_VAR 0 4
27641: ARRAY
27642: PPUSH
27643: CALL_OW 254
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: ADD
27657: ST_TO_ADDR
27658: GO 27571
27660: POP
27661: POP
// result := list ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: LD_VAR 0 5
27671: ST_TO_ADDR
// end ;
27672: LD_VAR 0 2
27676: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not factory then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 28288
// if control = control_apeman then
27695: LD_VAR 0 4
27699: PUSH
27700: LD_INT 5
27702: EQUAL
27703: IFFALSE 27812
// begin tmp := UnitsInside ( factory ) ;
27705: LD_ADDR_VAR 0 8
27709: PUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: CALL_OW 313
27719: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_INT 25
27727: PUSH
27728: LD_INT 12
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 72
27739: NOT
27740: IFFALSE 27750
// control := control_manual ;
27742: LD_ADDR_VAR 0 4
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27750: LD_ADDR_VAR 0 8
27754: PUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: CALL 27447 0 1
27764: ST_TO_ADDR
// if tmp then
27765: LD_VAR 0 8
27769: IFFALSE 27812
// begin for i in tmp do
27771: LD_ADDR_VAR 0 7
27775: PUSH
27776: LD_VAR 0 8
27780: PUSH
27781: FOR_IN
27782: IFFALSE 27810
// if i [ 1 ] = b_ext_radio then
27784: LD_VAR 0 7
27788: PUSH
27789: LD_INT 1
27791: ARRAY
27792: PUSH
27793: LD_INT 22
27795: EQUAL
27796: IFFALSE 27808
// begin control := control_remote ;
27798: LD_ADDR_VAR 0 4
27802: PUSH
27803: LD_INT 2
27805: ST_TO_ADDR
// break ;
27806: GO 27810
// end ;
27808: GO 27781
27810: POP
27811: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27812: LD_VAR 0 1
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_VAR 0 4
27831: PPUSH
27832: LD_VAR 0 5
27836: PPUSH
27837: CALL_OW 448
27841: IFFALSE 27876
// begin result := [ chassis , engine , control , weapon ] ;
27843: LD_ADDR_VAR 0 6
27847: PUSH
27848: LD_VAR 0 2
27852: PUSH
27853: LD_VAR 0 3
27857: PUSH
27858: LD_VAR 0 4
27862: PUSH
27863: LD_VAR 0 5
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// exit ;
27874: GO 28288
// end ; _chassis := AvailableChassisList ( factory ) ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL_OW 475
27890: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27891: LD_ADDR_VAR 0 11
27895: PUSH
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 476
27905: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27906: LD_ADDR_VAR 0 12
27910: PUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 477
27920: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27921: LD_ADDR_VAR 0 10
27925: PUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 478
27935: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27936: LD_VAR 0 9
27940: NOT
27941: PUSH
27942: LD_VAR 0 11
27946: NOT
27947: OR
27948: PUSH
27949: LD_VAR 0 12
27953: NOT
27954: OR
27955: PUSH
27956: LD_VAR 0 10
27960: NOT
27961: OR
27962: IFFALSE 27997
// begin result := [ chassis , engine , control , weapon ] ;
27964: LD_ADDR_VAR 0 6
27968: PUSH
27969: LD_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_VAR 0 4
27983: PUSH
27984: LD_VAR 0 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: ST_TO_ADDR
// exit ;
27995: GO 28288
// end ; if not chassis in _chassis then
27997: LD_VAR 0 2
28001: PUSH
28002: LD_VAR 0 9
28006: IN
28007: NOT
28008: IFFALSE 28034
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28010: LD_ADDR_VAR 0 2
28014: PUSH
28015: LD_VAR 0 9
28019: PUSH
28020: LD_INT 1
28022: PPUSH
28023: LD_VAR 0 9
28027: PPUSH
28028: CALL_OW 12
28032: ARRAY
28033: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL 28293 0 2
28048: NOT
28049: IFFALSE 28108
// repeat engine := _engine [ 1 ] ;
28051: LD_ADDR_VAR 0 3
28055: PUSH
28056: LD_VAR 0 11
28060: PUSH
28061: LD_INT 1
28063: ARRAY
28064: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28065: LD_ADDR_VAR 0 11
28069: PUSH
28070: LD_VAR 0 11
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: CALL_OW 3
28082: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL 28293 0 2
28097: PUSH
28098: LD_VAR 0 11
28102: PUSH
28103: EMPTY
28104: EQUAL
28105: OR
28106: IFFALSE 28051
// if not control in _control then
28108: LD_VAR 0 4
28112: PUSH
28113: LD_VAR 0 12
28117: IN
28118: NOT
28119: IFFALSE 28145
// control := _control [ rand ( 1 , _control ) ] ;
28121: LD_ADDR_VAR 0 4
28125: PUSH
28126: LD_VAR 0 12
28130: PUSH
28131: LD_INT 1
28133: PPUSH
28134: LD_VAR 0 12
28138: PPUSH
28139: CALL_OW 12
28143: ARRAY
28144: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_VAR 0 5
28154: PPUSH
28155: CALL 28513 0 2
28159: NOT
28160: IFFALSE 28219
// repeat weapon := _weapon [ 1 ] ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: LD_VAR 0 10
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28176: LD_ADDR_VAR 0 10
28180: PUSH
28181: LD_VAR 0 10
28185: PPUSH
28186: LD_INT 1
28188: PPUSH
28189: CALL_OW 3
28193: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_VAR 0 5
28203: PPUSH
28204: CALL 28513 0 2
28208: PUSH
28209: LD_VAR 0 10
28213: PUSH
28214: EMPTY
28215: EQUAL
28216: OR
28217: IFFALSE 28162
// result := [ ] ;
28219: LD_ADDR_VAR 0 6
28223: PUSH
28224: EMPTY
28225: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28226: LD_VAR 0 1
28230: PPUSH
28231: LD_VAR 0 2
28235: PPUSH
28236: LD_VAR 0 3
28240: PPUSH
28241: LD_VAR 0 4
28245: PPUSH
28246: LD_VAR 0 5
28250: PPUSH
28251: CALL_OW 448
28255: IFFALSE 28288
// result := [ chassis , engine , control , weapon ] ;
28257: LD_ADDR_VAR 0 6
28261: PUSH
28262: LD_VAR 0 2
28266: PUSH
28267: LD_VAR 0 3
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: LD_VAR 0 5
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// end ;
28288: LD_VAR 0 6
28292: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28293: LD_INT 0
28295: PPUSH
// if not chassis or not engine then
28296: LD_VAR 0 1
28300: NOT
28301: PUSH
28302: LD_VAR 0 2
28306: NOT
28307: OR
28308: IFFALSE 28312
// exit ;
28310: GO 28508
// case engine of engine_solar :
28312: LD_VAR 0 2
28316: PUSH
28317: LD_INT 2
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28363
28325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 11
28333: PUSH
28334: LD_INT 12
28336: PUSH
28337: LD_INT 13
28339: PUSH
28340: LD_INT 14
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
28361: GO 28492
28363: LD_INT 1
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28433
28371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: LD_INT 11
28379: PUSH
28380: LD_INT 12
28382: PUSH
28383: LD_INT 13
28385: PUSH
28386: LD_INT 14
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: LD_INT 21
28406: PUSH
28407: LD_INT 23
28409: PUSH
28410: LD_INT 22
28412: PUSH
28413: LD_INT 24
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
28431: GO 28492
28433: LD_INT 3
28435: DOUBLE
28436: EQUAL
28437: IFTRUE 28441
28439: GO 28491
28441: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_INT 13
28449: PUSH
28450: LD_INT 14
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 3
28458: PUSH
28459: LD_INT 4
28461: PUSH
28462: LD_INT 5
28464: PUSH
28465: LD_INT 21
28467: PUSH
28468: LD_INT 22
28470: PUSH
28471: LD_INT 23
28473: PUSH
28474: LD_INT 24
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: ST_TO_ADDR
28489: GO 28492
28491: POP
// result := ( chassis in result ) ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_VAR 0 1
28501: PUSH
28502: LD_VAR 0 3
28506: IN
28507: ST_TO_ADDR
// end ;
28508: LD_VAR 0 3
28512: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28513: LD_INT 0
28515: PPUSH
// if not chassis or not weapon then
28516: LD_VAR 0 1
28520: NOT
28521: PUSH
28522: LD_VAR 0 2
28526: NOT
28527: OR
28528: IFFALSE 28532
// exit ;
28530: GO 29592
// case weapon of us_machine_gun :
28532: LD_VAR 0 2
28536: PUSH
28537: LD_INT 2
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28575
28545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28546: LD_ADDR_VAR 0 3
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: LD_INT 5
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 29576
28575: LD_INT 3
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28613
28583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 4
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
28611: GO 29576
28613: LD_INT 11
28615: DOUBLE
28616: EQUAL
28617: IFTRUE 28621
28619: GO 28651
28621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28622: LD_ADDR_VAR 0 3
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: LD_INT 4
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
28649: GO 29576
28651: LD_INT 4
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28685
28659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: LD_INT 4
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29576
28685: LD_INT 5
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 4
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 29576
28719: LD_INT 9
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29576
28753: LD_INT 7
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29576
28787: LD_INT 12
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28821
28795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: LD_INT 4
28809: PUSH
28810: LD_INT 5
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29576
28821: LD_INT 13
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28855
28829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 4
28843: PUSH
28844: LD_INT 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
28853: GO 29576
28855: LD_INT 14
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28881
28863: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 4
28871: PUSH
28872: LD_INT 5
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: ST_TO_ADDR
28879: GO 29576
28881: LD_INT 6
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28907
28889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28890: LD_ADDR_VAR 0 3
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: LD_INT 5
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: ST_TO_ADDR
28905: GO 29576
28907: LD_INT 10
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28933
28915: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28916: LD_ADDR_VAR 0 3
28920: PUSH
28921: LD_INT 4
28923: PUSH
28924: LD_INT 5
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: ST_TO_ADDR
28931: GO 29576
28933: LD_INT 22
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28967
28941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 11
28949: PUSH
28950: LD_INT 12
28952: PUSH
28953: LD_INT 13
28955: PUSH
28956: LD_INT 14
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 29576
28967: LD_INT 23
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29001
28975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 11
28983: PUSH
28984: LD_INT 12
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29576
29001: LD_INT 24
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29035
29009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 11
29017: PUSH
29018: LD_INT 12
29020: PUSH
29021: LD_INT 13
29023: PUSH
29024: LD_INT 14
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29576
29035: LD_INT 30
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29069
29043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 11
29051: PUSH
29052: LD_INT 12
29054: PUSH
29055: LD_INT 13
29057: PUSH
29058: LD_INT 14
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29576
29069: LD_INT 25
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29095
29077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 13
29085: PUSH
29086: LD_INT 14
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: ST_TO_ADDR
29093: GO 29576
29095: LD_INT 27
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29121
29103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 14
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: ST_TO_ADDR
29119: GO 29576
29121: LD_INT 92
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29155
29129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_INT 11
29137: PUSH
29138: LD_INT 12
29140: PUSH
29141: LD_INT 13
29143: PUSH
29144: LD_INT 14
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
29153: GO 29576
29155: LD_INT 28
29157: DOUBLE
29158: EQUAL
29159: IFTRUE 29163
29161: GO 29181
29163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29164: LD_ADDR_VAR 0 3
29168: PUSH
29169: LD_INT 13
29171: PUSH
29172: LD_INT 14
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: ST_TO_ADDR
29179: GO 29576
29181: LD_INT 29
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29207
29189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_INT 13
29197: PUSH
29198: LD_INT 14
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: ST_TO_ADDR
29205: GO 29576
29207: LD_INT 31
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29233
29215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 13
29223: PUSH
29224: LD_INT 14
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: ST_TO_ADDR
29231: GO 29576
29233: LD_INT 26
29235: DOUBLE
29236: EQUAL
29237: IFTRUE 29241
29239: GO 29259
29241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 13
29249: PUSH
29250: LD_INT 14
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 29576
29259: LD_INT 42
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 21
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_INT 23
29281: PUSH
29282: LD_INT 24
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29576
29293: LD_INT 43
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 21
29309: PUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 23
29315: PUSH
29316: LD_INT 24
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29576
29327: LD_INT 44
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 21
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_INT 23
29349: PUSH
29350: LD_INT 24
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 29576
29361: LD_INT 45
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29395
29369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 21
29377: PUSH
29378: LD_INT 22
29380: PUSH
29381: LD_INT 23
29383: PUSH
29384: LD_INT 24
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 29576
29395: LD_INT 49
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29429
29403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 21
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_INT 23
29417: PUSH
29418: LD_INT 24
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
29427: GO 29576
29429: LD_INT 51
29431: DOUBLE
29432: EQUAL
29433: IFTRUE 29437
29435: GO 29463
29437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29438: LD_ADDR_VAR 0 3
29442: PUSH
29443: LD_INT 21
29445: PUSH
29446: LD_INT 22
29448: PUSH
29449: LD_INT 23
29451: PUSH
29452: LD_INT 24
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
29461: GO 29576
29463: LD_INT 52
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29497
29471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 22
29482: PUSH
29483: LD_INT 23
29485: PUSH
29486: LD_INT 24
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: ST_TO_ADDR
29495: GO 29576
29497: LD_INT 53
29499: DOUBLE
29500: EQUAL
29501: IFTRUE 29505
29503: GO 29523
29505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29506: LD_ADDR_VAR 0 3
29510: PUSH
29511: LD_INT 23
29513: PUSH
29514: LD_INT 24
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: ST_TO_ADDR
29521: GO 29576
29523: LD_INT 46
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29549
29531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29532: LD_ADDR_VAR 0 3
29536: PUSH
29537: LD_INT 23
29539: PUSH
29540: LD_INT 24
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: ST_TO_ADDR
29547: GO 29576
29549: LD_INT 47
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29575
29557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29558: LD_ADDR_VAR 0 3
29562: PUSH
29563: LD_INT 23
29565: PUSH
29566: LD_INT 24
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 29576
29575: POP
// result := ( chassis in result ) ;
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_VAR 0 1
29585: PUSH
29586: LD_VAR 0 3
29590: IN
29591: ST_TO_ADDR
// end ;
29592: LD_VAR 0 3
29596: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29597: LD_INT 0
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
// result := array ;
29606: LD_ADDR_VAR 0 5
29610: PUSH
29611: LD_VAR 0 1
29615: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29616: LD_VAR 0 1
29620: NOT
29621: PUSH
29622: LD_VAR 0 2
29626: NOT
29627: OR
29628: PUSH
29629: LD_VAR 0 3
29633: NOT
29634: OR
29635: PUSH
29636: LD_VAR 0 2
29640: PUSH
29641: LD_VAR 0 1
29645: GREATER
29646: OR
29647: PUSH
29648: LD_VAR 0 3
29652: PUSH
29653: LD_VAR 0 1
29657: GREATER
29658: OR
29659: IFFALSE 29663
// exit ;
29661: GO 29959
// if direction then
29663: LD_VAR 0 4
29667: IFFALSE 29731
// begin d := 1 ;
29669: LD_ADDR_VAR 0 9
29673: PUSH
29674: LD_INT 1
29676: ST_TO_ADDR
// if i_from > i_to then
29677: LD_VAR 0 2
29681: PUSH
29682: LD_VAR 0 3
29686: GREATER
29687: IFFALSE 29713
// length := ( array - i_from ) + i_to else
29689: LD_ADDR_VAR 0 11
29693: PUSH
29694: LD_VAR 0 1
29698: PUSH
29699: LD_VAR 0 2
29703: MINUS
29704: PUSH
29705: LD_VAR 0 3
29709: PLUS
29710: ST_TO_ADDR
29711: GO 29729
// length := i_to - i_from ;
29713: LD_ADDR_VAR 0 11
29717: PUSH
29718: LD_VAR 0 3
29722: PUSH
29723: LD_VAR 0 2
29727: MINUS
29728: ST_TO_ADDR
// end else
29729: GO 29792
// begin d := - 1 ;
29731: LD_ADDR_VAR 0 9
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: ST_TO_ADDR
// if i_from > i_to then
29740: LD_VAR 0 2
29744: PUSH
29745: LD_VAR 0 3
29749: GREATER
29750: IFFALSE 29770
// length := i_from - i_to else
29752: LD_ADDR_VAR 0 11
29756: PUSH
29757: LD_VAR 0 2
29761: PUSH
29762: LD_VAR 0 3
29766: MINUS
29767: ST_TO_ADDR
29768: GO 29792
// length := ( array - i_to ) + i_from ;
29770: LD_ADDR_VAR 0 11
29774: PUSH
29775: LD_VAR 0 1
29779: PUSH
29780: LD_VAR 0 3
29784: MINUS
29785: PUSH
29786: LD_VAR 0 2
29790: PLUS
29791: ST_TO_ADDR
// end ; if not length then
29792: LD_VAR 0 11
29796: NOT
29797: IFFALSE 29801
// exit ;
29799: GO 29959
// tmp := array ;
29801: LD_ADDR_VAR 0 10
29805: PUSH
29806: LD_VAR 0 1
29810: ST_TO_ADDR
// for i = 1 to length do
29811: LD_ADDR_VAR 0 6
29815: PUSH
29816: DOUBLE
29817: LD_INT 1
29819: DEC
29820: ST_TO_ADDR
29821: LD_VAR 0 11
29825: PUSH
29826: FOR_TO
29827: IFFALSE 29947
// begin for j = 1 to array do
29829: LD_ADDR_VAR 0 7
29833: PUSH
29834: DOUBLE
29835: LD_INT 1
29837: DEC
29838: ST_TO_ADDR
29839: LD_VAR 0 1
29843: PUSH
29844: FOR_TO
29845: IFFALSE 29933
// begin k := j + d ;
29847: LD_ADDR_VAR 0 8
29851: PUSH
29852: LD_VAR 0 7
29856: PUSH
29857: LD_VAR 0 9
29861: PLUS
29862: ST_TO_ADDR
// if k > array then
29863: LD_VAR 0 8
29867: PUSH
29868: LD_VAR 0 1
29872: GREATER
29873: IFFALSE 29883
// k := 1 ;
29875: LD_ADDR_VAR 0 8
29879: PUSH
29880: LD_INT 1
29882: ST_TO_ADDR
// if not k then
29883: LD_VAR 0 8
29887: NOT
29888: IFFALSE 29900
// k := array ;
29890: LD_ADDR_VAR 0 8
29894: PUSH
29895: LD_VAR 0 1
29899: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29900: LD_ADDR_VAR 0 10
29904: PUSH
29905: LD_VAR 0 10
29909: PPUSH
29910: LD_VAR 0 8
29914: PPUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_VAR 0 7
29924: ARRAY
29925: PPUSH
29926: CALL_OW 1
29930: ST_TO_ADDR
// end ;
29931: GO 29844
29933: POP
29934: POP
// array := tmp ;
29935: LD_ADDR_VAR 0 1
29939: PUSH
29940: LD_VAR 0 10
29944: ST_TO_ADDR
// end ;
29945: GO 29826
29947: POP
29948: POP
// result := array ;
29949: LD_ADDR_VAR 0 5
29953: PUSH
29954: LD_VAR 0 1
29958: ST_TO_ADDR
// end ;
29959: LD_VAR 0 5
29963: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29964: LD_INT 0
29966: PPUSH
29967: PPUSH
// result := 0 ;
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_INT 0
29975: ST_TO_ADDR
// if not array or not value in array then
29976: LD_VAR 0 1
29980: NOT
29981: PUSH
29982: LD_VAR 0 2
29986: PUSH
29987: LD_VAR 0 1
29991: IN
29992: NOT
29993: OR
29994: IFFALSE 29998
// exit ;
29996: GO 30052
// for i = 1 to array do
29998: LD_ADDR_VAR 0 4
30002: PUSH
30003: DOUBLE
30004: LD_INT 1
30006: DEC
30007: ST_TO_ADDR
30008: LD_VAR 0 1
30012: PUSH
30013: FOR_TO
30014: IFFALSE 30050
// if value = array [ i ] then
30016: LD_VAR 0 2
30020: PUSH
30021: LD_VAR 0 1
30025: PUSH
30026: LD_VAR 0 4
30030: ARRAY
30031: EQUAL
30032: IFFALSE 30048
// begin result := i ;
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: LD_VAR 0 4
30043: ST_TO_ADDR
// exit ;
30044: POP
30045: POP
30046: GO 30052
// end ;
30048: GO 30013
30050: POP
30051: POP
// end ;
30052: LD_VAR 0 3
30056: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30057: LD_INT 0
30059: PPUSH
// vc_chassis := chassis ;
30060: LD_ADDR_OWVAR 37
30064: PUSH
30065: LD_VAR 0 1
30069: ST_TO_ADDR
// vc_engine := engine ;
30070: LD_ADDR_OWVAR 39
30074: PUSH
30075: LD_VAR 0 2
30079: ST_TO_ADDR
// vc_control := control ;
30080: LD_ADDR_OWVAR 38
30084: PUSH
30085: LD_VAR 0 3
30089: ST_TO_ADDR
// vc_weapon := weapon ;
30090: LD_ADDR_OWVAR 40
30094: PUSH
30095: LD_VAR 0 4
30099: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30100: LD_ADDR_OWVAR 41
30104: PUSH
30105: LD_VAR 0 5
30109: ST_TO_ADDR
// end ;
30110: LD_VAR 0 6
30114: RET
// export function WantPlant ( unit ) ; var task ; begin
30115: LD_INT 0
30117: PPUSH
30118: PPUSH
// result := false ;
30119: LD_ADDR_VAR 0 2
30123: PUSH
30124: LD_INT 0
30126: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 437
30141: ST_TO_ADDR
// if task then
30142: LD_VAR 0 3
30146: IFFALSE 30174
// if task [ 1 ] [ 1 ] = p then
30148: LD_VAR 0 3
30152: PUSH
30153: LD_INT 1
30155: ARRAY
30156: PUSH
30157: LD_INT 1
30159: ARRAY
30160: PUSH
30161: LD_STRING p
30163: EQUAL
30164: IFFALSE 30174
// result := true ;
30166: LD_ADDR_VAR 0 2
30170: PUSH
30171: LD_INT 1
30173: ST_TO_ADDR
// end ;
30174: LD_VAR 0 2
30178: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30179: LD_INT 0
30181: PPUSH
30182: PPUSH
30183: PPUSH
30184: PPUSH
// if pos < 1 then
30185: LD_VAR 0 2
30189: PUSH
30190: LD_INT 1
30192: LESS
30193: IFFALSE 30197
// exit ;
30195: GO 30500
// if pos = 1 then
30197: LD_VAR 0 2
30201: PUSH
30202: LD_INT 1
30204: EQUAL
30205: IFFALSE 30238
// result := Replace ( arr , pos [ 1 ] , value ) else
30207: LD_ADDR_VAR 0 4
30211: PUSH
30212: LD_VAR 0 1
30216: PPUSH
30217: LD_VAR 0 2
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 3
30230: PPUSH
30231: CALL_OW 1
30235: ST_TO_ADDR
30236: GO 30500
// begin tmp := arr ;
30238: LD_ADDR_VAR 0 6
30242: PUSH
30243: LD_VAR 0 1
30247: ST_TO_ADDR
// s_arr := [ tmp ] ;
30248: LD_ADDR_VAR 0 7
30252: PUSH
30253: LD_VAR 0 6
30257: PUSH
30258: EMPTY
30259: LIST
30260: ST_TO_ADDR
// for i = 1 to pos - 1 do
30261: LD_ADDR_VAR 0 5
30265: PUSH
30266: DOUBLE
30267: LD_INT 1
30269: DEC
30270: ST_TO_ADDR
30271: LD_VAR 0 2
30275: PUSH
30276: LD_INT 1
30278: MINUS
30279: PUSH
30280: FOR_TO
30281: IFFALSE 30326
// begin tmp := tmp [ pos [ i ] ] ;
30283: LD_ADDR_VAR 0 6
30287: PUSH
30288: LD_VAR 0 6
30292: PUSH
30293: LD_VAR 0 2
30297: PUSH
30298: LD_VAR 0 5
30302: ARRAY
30303: ARRAY
30304: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30305: LD_ADDR_VAR 0 7
30309: PUSH
30310: LD_VAR 0 7
30314: PUSH
30315: LD_VAR 0 6
30319: PUSH
30320: EMPTY
30321: LIST
30322: ADD
30323: ST_TO_ADDR
// end ;
30324: GO 30280
30326: POP
30327: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30328: LD_ADDR_VAR 0 6
30332: PUSH
30333: LD_VAR 0 6
30337: PPUSH
30338: LD_VAR 0 2
30342: PUSH
30343: LD_VAR 0 2
30347: ARRAY
30348: PPUSH
30349: LD_VAR 0 3
30353: PPUSH
30354: CALL_OW 1
30358: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30359: LD_ADDR_VAR 0 7
30363: PUSH
30364: LD_VAR 0 7
30368: PPUSH
30369: LD_VAR 0 7
30373: PPUSH
30374: LD_VAR 0 6
30378: PPUSH
30379: CALL_OW 1
30383: ST_TO_ADDR
// for i = s_arr downto 2 do
30384: LD_ADDR_VAR 0 5
30388: PUSH
30389: DOUBLE
30390: LD_VAR 0 7
30394: INC
30395: ST_TO_ADDR
30396: LD_INT 2
30398: PUSH
30399: FOR_DOWNTO
30400: IFFALSE 30484
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30402: LD_ADDR_VAR 0 6
30406: PUSH
30407: LD_VAR 0 7
30411: PUSH
30412: LD_VAR 0 5
30416: PUSH
30417: LD_INT 1
30419: MINUS
30420: ARRAY
30421: PPUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_VAR 0 5
30431: PUSH
30432: LD_INT 1
30434: MINUS
30435: ARRAY
30436: PPUSH
30437: LD_VAR 0 7
30441: PUSH
30442: LD_VAR 0 5
30446: ARRAY
30447: PPUSH
30448: CALL_OW 1
30452: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30453: LD_ADDR_VAR 0 7
30457: PUSH
30458: LD_VAR 0 7
30462: PPUSH
30463: LD_VAR 0 5
30467: PUSH
30468: LD_INT 1
30470: MINUS
30471: PPUSH
30472: LD_VAR 0 6
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
// end ;
30482: GO 30399
30484: POP
30485: POP
// result := s_arr [ 1 ] ;
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_VAR 0 7
30495: PUSH
30496: LD_INT 1
30498: ARRAY
30499: ST_TO_ADDR
// end ; end ;
30500: LD_VAR 0 4
30504: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30505: LD_INT 0
30507: PPUSH
30508: PPUSH
// if not list then
30509: LD_VAR 0 1
30513: NOT
30514: IFFALSE 30518
// exit ;
30516: GO 30609
// i := list [ pos1 ] ;
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: LD_VAR 0 1
30527: PUSH
30528: LD_VAR 0 2
30532: ARRAY
30533: ST_TO_ADDR
// if not i then
30534: LD_VAR 0 5
30538: NOT
30539: IFFALSE 30543
// exit ;
30541: GO 30609
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30543: LD_ADDR_VAR 0 1
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: LD_VAR 0 2
30557: PPUSH
30558: LD_VAR 0 1
30562: PUSH
30563: LD_VAR 0 3
30567: ARRAY
30568: PPUSH
30569: CALL_OW 1
30573: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30574: LD_ADDR_VAR 0 1
30578: PUSH
30579: LD_VAR 0 1
30583: PPUSH
30584: LD_VAR 0 3
30588: PPUSH
30589: LD_VAR 0 5
30593: PPUSH
30594: CALL_OW 1
30598: ST_TO_ADDR
// result := list ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_VAR 0 1
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 4
30613: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30614: LD_INT 0
30616: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30617: LD_ADDR_VAR 0 5
30621: PUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 250
30631: PPUSH
30632: LD_VAR 0 1
30636: PPUSH
30637: CALL_OW 251
30641: PPUSH
30642: LD_VAR 0 2
30646: PPUSH
30647: LD_VAR 0 3
30651: PPUSH
30652: LD_VAR 0 4
30656: PPUSH
30657: CALL 30667 0 5
30661: ST_TO_ADDR
// end ;
30662: LD_VAR 0 5
30666: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// if not list then
30673: LD_VAR 0 3
30677: NOT
30678: IFFALSE 30682
// exit ;
30680: GO 31070
// result := [ ] ;
30682: LD_ADDR_VAR 0 6
30686: PUSH
30687: EMPTY
30688: ST_TO_ADDR
// for i in list do
30689: LD_ADDR_VAR 0 7
30693: PUSH
30694: LD_VAR 0 3
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30902
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30702: LD_ADDR_VAR 0 9
30706: PUSH
30707: LD_VAR 0 7
30711: PPUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_VAR 0 2
30721: PPUSH
30722: CALL_OW 297
30726: ST_TO_ADDR
// if not result then
30727: LD_VAR 0 6
30731: NOT
30732: IFFALSE 30758
// result := [ [ i , tmp ] ] else
30734: LD_ADDR_VAR 0 6
30738: PUSH
30739: LD_VAR 0 7
30743: PUSH
30744: LD_VAR 0 9
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: ST_TO_ADDR
30756: GO 30900
// begin if result [ result ] [ 2 ] < tmp then
30758: LD_VAR 0 6
30762: PUSH
30763: LD_VAR 0 6
30767: ARRAY
30768: PUSH
30769: LD_INT 2
30771: ARRAY
30772: PUSH
30773: LD_VAR 0 9
30777: LESS
30778: IFFALSE 30820
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30780: LD_ADDR_VAR 0 6
30784: PUSH
30785: LD_VAR 0 6
30789: PPUSH
30790: LD_VAR 0 6
30794: PUSH
30795: LD_INT 1
30797: PLUS
30798: PPUSH
30799: LD_VAR 0 7
30803: PUSH
30804: LD_VAR 0 9
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 2
30817: ST_TO_ADDR
30818: GO 30900
// for j = 1 to result do
30820: LD_ADDR_VAR 0 8
30824: PUSH
30825: DOUBLE
30826: LD_INT 1
30828: DEC
30829: ST_TO_ADDR
30830: LD_VAR 0 6
30834: PUSH
30835: FOR_TO
30836: IFFALSE 30898
// begin if tmp < result [ j ] [ 2 ] then
30838: LD_VAR 0 9
30842: PUSH
30843: LD_VAR 0 6
30847: PUSH
30848: LD_VAR 0 8
30852: ARRAY
30853: PUSH
30854: LD_INT 2
30856: ARRAY
30857: LESS
30858: IFFALSE 30896
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30860: LD_ADDR_VAR 0 6
30864: PUSH
30865: LD_VAR 0 6
30869: PPUSH
30870: LD_VAR 0 8
30874: PPUSH
30875: LD_VAR 0 7
30879: PUSH
30880: LD_VAR 0 9
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PPUSH
30889: CALL_OW 2
30893: ST_TO_ADDR
// break ;
30894: GO 30898
// end ; end ;
30896: GO 30835
30898: POP
30899: POP
// end ; end ;
30900: GO 30699
30902: POP
30903: POP
// if result and not asc then
30904: LD_VAR 0 6
30908: PUSH
30909: LD_VAR 0 4
30913: NOT
30914: AND
30915: IFFALSE 30990
// begin tmp := result ;
30917: LD_ADDR_VAR 0 9
30921: PUSH
30922: LD_VAR 0 6
30926: ST_TO_ADDR
// for i = tmp downto 1 do
30927: LD_ADDR_VAR 0 7
30931: PUSH
30932: DOUBLE
30933: LD_VAR 0 9
30937: INC
30938: ST_TO_ADDR
30939: LD_INT 1
30941: PUSH
30942: FOR_DOWNTO
30943: IFFALSE 30988
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30945: LD_ADDR_VAR 0 6
30949: PUSH
30950: LD_VAR 0 6
30954: PPUSH
30955: LD_VAR 0 9
30959: PUSH
30960: LD_VAR 0 7
30964: MINUS
30965: PUSH
30966: LD_INT 1
30968: PLUS
30969: PPUSH
30970: LD_VAR 0 9
30974: PUSH
30975: LD_VAR 0 7
30979: ARRAY
30980: PPUSH
30981: CALL_OW 1
30985: ST_TO_ADDR
30986: GO 30942
30988: POP
30989: POP
// end ; tmp := [ ] ;
30990: LD_ADDR_VAR 0 9
30994: PUSH
30995: EMPTY
30996: ST_TO_ADDR
// if mode then
30997: LD_VAR 0 5
31001: IFFALSE 31070
// begin for i = 1 to result do
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: DOUBLE
31009: LD_INT 1
31011: DEC
31012: ST_TO_ADDR
31013: LD_VAR 0 6
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31058
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: LD_VAR 0 9
31030: PPUSH
31031: LD_VAR 0 7
31035: PPUSH
31036: LD_VAR 0 6
31040: PUSH
31041: LD_VAR 0 7
31045: ARRAY
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: CALL_OW 1
31055: ST_TO_ADDR
31056: GO 31018
31058: POP
31059: POP
// result := tmp ;
31060: LD_ADDR_VAR 0 6
31064: PUSH
31065: LD_VAR 0 9
31069: ST_TO_ADDR
// end ; end ;
31070: LD_VAR 0 6
31074: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31075: LD_INT 0
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31083: LD_ADDR_VAR 0 5
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: EMPTY
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// if not x or not y then
31105: LD_VAR 0 2
31109: NOT
31110: PUSH
31111: LD_VAR 0 3
31115: NOT
31116: OR
31117: IFFALSE 31121
// exit ;
31119: GO 32771
// if not range then
31121: LD_VAR 0 4
31125: NOT
31126: IFFALSE 31136
// range := 10 ;
31128: LD_ADDR_VAR 0 4
31132: PUSH
31133: LD_INT 10
31135: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31136: LD_ADDR_VAR 0 8
31140: PUSH
31141: LD_INT 81
31143: PUSH
31144: LD_VAR 0 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 92
31155: PUSH
31156: LD_VAR 0 2
31160: PUSH
31161: LD_VAR 0 3
31165: PUSH
31166: LD_VAR 0 4
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PPUSH
31199: CALL_OW 69
31203: ST_TO_ADDR
// if not tmp then
31204: LD_VAR 0 8
31208: NOT
31209: IFFALSE 31213
// exit ;
31211: GO 32771
// for i in tmp do
31213: LD_ADDR_VAR 0 6
31217: PUSH
31218: LD_VAR 0 8
31222: PUSH
31223: FOR_IN
31224: IFFALSE 32746
// begin points := [ 0 , 0 , 0 ] ;
31226: LD_ADDR_VAR 0 9
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// bpoints := 1 ;
31245: LD_ADDR_VAR 0 10
31249: PUSH
31250: LD_INT 1
31252: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31253: LD_VAR 0 6
31257: PPUSH
31258: CALL_OW 247
31262: PUSH
31263: LD_INT 1
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31849
31271: POP
// begin if GetClass ( i ) = 1 then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 257
31281: PUSH
31282: LD_INT 1
31284: EQUAL
31285: IFFALSE 31306
// points := [ 10 , 5 , 3 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 10
31294: PUSH
31295: LD_INT 5
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 257
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: IN
31330: IFFALSE 31351
// points := [ 3 , 2 , 1 ] ;
31332: LD_ADDR_VAR 0 9
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31351: LD_VAR 0 6
31355: PPUSH
31356: CALL_OW 257
31360: PUSH
31361: LD_INT 5
31363: EQUAL
31364: IFFALSE 31385
// points := [ 130 , 5 , 2 ] ;
31366: LD_ADDR_VAR 0 9
31370: PUSH
31371: LD_INT 130
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31385: LD_VAR 0 6
31389: PPUSH
31390: CALL_OW 257
31394: PUSH
31395: LD_INT 8
31397: EQUAL
31398: IFFALSE 31419
// points := [ 35 , 35 , 30 ] ;
31400: LD_ADDR_VAR 0 9
31404: PUSH
31405: LD_INT 35
31407: PUSH
31408: LD_INT 35
31410: PUSH
31411: LD_INT 30
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: LIST
31418: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31419: LD_VAR 0 6
31423: PPUSH
31424: CALL_OW 257
31428: PUSH
31429: LD_INT 9
31431: EQUAL
31432: IFFALSE 31453
// points := [ 20 , 55 , 40 ] ;
31434: LD_ADDR_VAR 0 9
31438: PUSH
31439: LD_INT 20
31441: PUSH
31442: LD_INT 55
31444: PUSH
31445: LD_INT 40
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31453: LD_VAR 0 6
31457: PPUSH
31458: CALL_OW 257
31462: PUSH
31463: LD_INT 12
31465: PUSH
31466: LD_INT 16
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: IN
31473: IFFALSE 31494
// points := [ 5 , 3 , 2 ] ;
31475: LD_ADDR_VAR 0 9
31479: PUSH
31480: LD_INT 5
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31494: LD_VAR 0 6
31498: PPUSH
31499: CALL_OW 257
31503: PUSH
31504: LD_INT 17
31506: EQUAL
31507: IFFALSE 31528
// points := [ 100 , 50 , 75 ] ;
31509: LD_ADDR_VAR 0 9
31513: PUSH
31514: LD_INT 100
31516: PUSH
31517: LD_INT 50
31519: PUSH
31520: LD_INT 75
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31528: LD_VAR 0 6
31532: PPUSH
31533: CALL_OW 257
31537: PUSH
31538: LD_INT 15
31540: EQUAL
31541: IFFALSE 31562
// points := [ 10 , 5 , 3 ] ;
31543: LD_ADDR_VAR 0 9
31547: PUSH
31548: LD_INT 10
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31562: LD_VAR 0 6
31566: PPUSH
31567: CALL_OW 257
31571: PUSH
31572: LD_INT 14
31574: EQUAL
31575: IFFALSE 31596
// points := [ 10 , 0 , 0 ] ;
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_INT 10
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31596: LD_VAR 0 6
31600: PPUSH
31601: CALL_OW 257
31605: PUSH
31606: LD_INT 11
31608: EQUAL
31609: IFFALSE 31630
// points := [ 30 , 10 , 5 ] ;
31611: LD_ADDR_VAR 0 9
31615: PUSH
31616: LD_INT 30
31618: PUSH
31619: LD_INT 10
31621: PUSH
31622: LD_INT 5
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31630: LD_VAR 0 1
31634: PPUSH
31635: LD_INT 5
31637: PPUSH
31638: CALL_OW 321
31642: PUSH
31643: LD_INT 2
31645: EQUAL
31646: IFFALSE 31663
// bpoints := bpoints * 1.8 ;
31648: LD_ADDR_VAR 0 10
31652: PUSH
31653: LD_VAR 0 10
31657: PUSH
31658: LD_REAL  1.80000000000000E+0000
31661: MUL
31662: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31663: LD_VAR 0 6
31667: PPUSH
31668: CALL_OW 257
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: IN
31691: PUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_INT 51
31699: PPUSH
31700: CALL_OW 321
31704: PUSH
31705: LD_INT 2
31707: EQUAL
31708: AND
31709: IFFALSE 31726
// bpoints := bpoints * 1.2 ;
31711: LD_ADDR_VAR 0 10
31715: PUSH
31716: LD_VAR 0 10
31720: PUSH
31721: LD_REAL  1.20000000000000E+0000
31724: MUL
31725: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31726: LD_VAR 0 6
31730: PPUSH
31731: CALL_OW 257
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: LD_INT 7
31741: PUSH
31742: LD_INT 9
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: IN
31750: PUSH
31751: LD_VAR 0 1
31755: PPUSH
31756: LD_INT 52
31758: PPUSH
31759: CALL_OW 321
31763: PUSH
31764: LD_INT 2
31766: EQUAL
31767: AND
31768: IFFALSE 31785
// bpoints := bpoints * 1.5 ;
31770: LD_ADDR_VAR 0 10
31774: PUSH
31775: LD_VAR 0 10
31779: PUSH
31780: LD_REAL  1.50000000000000E+0000
31783: MUL
31784: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31785: LD_VAR 0 1
31789: PPUSH
31790: LD_INT 66
31792: PPUSH
31793: CALL_OW 321
31797: PUSH
31798: LD_INT 2
31800: EQUAL
31801: IFFALSE 31818
// bpoints := bpoints * 1.1 ;
31803: LD_ADDR_VAR 0 10
31807: PUSH
31808: LD_VAR 0 10
31812: PUSH
31813: LD_REAL  1.10000000000000E+0000
31816: MUL
31817: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31818: LD_ADDR_VAR 0 10
31822: PUSH
31823: LD_VAR 0 10
31827: PUSH
31828: LD_VAR 0 6
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 259
31840: PUSH
31841: LD_REAL  1.15000000000000E+0000
31844: MUL
31845: MUL
31846: ST_TO_ADDR
// end ; unit_vehicle :
31847: GO 32675
31849: LD_INT 2
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 32663
31857: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31858: LD_VAR 0 6
31862: PPUSH
31863: CALL_OW 264
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 42
31873: PUSH
31874: LD_INT 24
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: IN
31882: IFFALSE 31903
// points := [ 25 , 5 , 3 ] ;
31884: LD_ADDR_VAR 0 9
31888: PUSH
31889: LD_INT 25
31891: PUSH
31892: LD_INT 5
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31903: LD_VAR 0 6
31907: PPUSH
31908: CALL_OW 264
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: LD_INT 43
31918: PUSH
31919: LD_INT 25
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: IN
31927: IFFALSE 31948
// points := [ 40 , 15 , 5 ] ;
31929: LD_ADDR_VAR 0 9
31933: PUSH
31934: LD_INT 40
31936: PUSH
31937: LD_INT 15
31939: PUSH
31940: LD_INT 5
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31948: LD_VAR 0 6
31952: PPUSH
31953: CALL_OW 264
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 23
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: IN
31968: IFFALSE 31989
// points := [ 7 , 25 , 8 ] ;
31970: LD_ADDR_VAR 0 9
31974: PUSH
31975: LD_INT 7
31977: PUSH
31978: LD_INT 25
31980: PUSH
31981: LD_INT 8
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 264
31998: PUSH
31999: LD_INT 5
32001: PUSH
32002: LD_INT 27
32004: PUSH
32005: LD_INT 44
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: IN
32013: IFFALSE 32034
// points := [ 14 , 50 , 16 ] ;
32015: LD_ADDR_VAR 0 9
32019: PUSH
32020: LD_INT 14
32022: PUSH
32023: LD_INT 50
32025: PUSH
32026: LD_INT 16
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32034: LD_VAR 0 6
32038: PPUSH
32039: CALL_OW 264
32043: PUSH
32044: LD_INT 6
32046: PUSH
32047: LD_INT 46
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: IN
32054: IFFALSE 32075
// points := [ 32 , 120 , 70 ] ;
32056: LD_ADDR_VAR 0 9
32060: PUSH
32061: LD_INT 32
32063: PUSH
32064: LD_INT 120
32066: PUSH
32067: LD_INT 70
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32075: LD_VAR 0 6
32079: PPUSH
32080: CALL_OW 264
32084: PUSH
32085: LD_INT 7
32087: PUSH
32088: LD_INT 28
32090: PUSH
32091: LD_INT 45
32093: PUSH
32094: LD_INT 92
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: IN
32103: IFFALSE 32124
// points := [ 35 , 20 , 45 ] ;
32105: LD_ADDR_VAR 0 9
32109: PUSH
32110: LD_INT 35
32112: PUSH
32113: LD_INT 20
32115: PUSH
32116: LD_INT 45
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32124: LD_VAR 0 6
32128: PPUSH
32129: CALL_OW 264
32133: PUSH
32134: LD_INT 47
32136: PUSH
32137: EMPTY
32138: LIST
32139: IN
32140: IFFALSE 32161
// points := [ 67 , 45 , 75 ] ;
32142: LD_ADDR_VAR 0 9
32146: PUSH
32147: LD_INT 67
32149: PUSH
32150: LD_INT 45
32152: PUSH
32153: LD_INT 75
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32161: LD_VAR 0 6
32165: PPUSH
32166: CALL_OW 264
32170: PUSH
32171: LD_INT 26
32173: PUSH
32174: EMPTY
32175: LIST
32176: IN
32177: IFFALSE 32198
// points := [ 120 , 30 , 80 ] ;
32179: LD_ADDR_VAR 0 9
32183: PUSH
32184: LD_INT 120
32186: PUSH
32187: LD_INT 30
32189: PUSH
32190: LD_INT 80
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 264
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: EMPTY
32212: LIST
32213: IN
32214: IFFALSE 32235
// points := [ 40 , 1 , 1 ] ;
32216: LD_ADDR_VAR 0 9
32220: PUSH
32221: LD_INT 40
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32235: LD_VAR 0 6
32239: PPUSH
32240: CALL_OW 264
32244: PUSH
32245: LD_INT 29
32247: PUSH
32248: EMPTY
32249: LIST
32250: IN
32251: IFFALSE 32272
// points := [ 70 , 200 , 400 ] ;
32253: LD_ADDR_VAR 0 9
32257: PUSH
32258: LD_INT 70
32260: PUSH
32261: LD_INT 200
32263: PUSH
32264: LD_INT 400
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32272: LD_VAR 0 6
32276: PPUSH
32277: CALL_OW 264
32281: PUSH
32282: LD_INT 14
32284: PUSH
32285: LD_INT 53
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: IN
32292: IFFALSE 32313
// points := [ 40 , 10 , 20 ] ;
32294: LD_ADDR_VAR 0 9
32298: PUSH
32299: LD_INT 40
32301: PUSH
32302: LD_INT 10
32304: PUSH
32305: LD_INT 20
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32313: LD_VAR 0 6
32317: PPUSH
32318: CALL_OW 264
32322: PUSH
32323: LD_INT 9
32325: PUSH
32326: EMPTY
32327: LIST
32328: IN
32329: IFFALSE 32350
// points := [ 5 , 70 , 20 ] ;
32331: LD_ADDR_VAR 0 9
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: LD_INT 70
32341: PUSH
32342: LD_INT 20
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32350: LD_VAR 0 6
32354: PPUSH
32355: CALL_OW 264
32359: PUSH
32360: LD_INT 10
32362: PUSH
32363: EMPTY
32364: LIST
32365: IN
32366: IFFALSE 32387
// points := [ 35 , 110 , 70 ] ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_INT 35
32375: PUSH
32376: LD_INT 110
32378: PUSH
32379: LD_INT 70
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32387: LD_VAR 0 6
32391: PPUSH
32392: CALL_OW 265
32396: PUSH
32397: LD_INT 25
32399: EQUAL
32400: IFFALSE 32421
// points := [ 80 , 65 , 100 ] ;
32402: LD_ADDR_VAR 0 9
32406: PUSH
32407: LD_INT 80
32409: PUSH
32410: LD_INT 65
32412: PUSH
32413: LD_INT 100
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32421: LD_VAR 0 6
32425: PPUSH
32426: CALL_OW 263
32430: PUSH
32431: LD_INT 1
32433: EQUAL
32434: IFFALSE 32469
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32436: LD_ADDR_VAR 0 10
32440: PUSH
32441: LD_VAR 0 10
32445: PUSH
32446: LD_VAR 0 6
32450: PPUSH
32451: CALL_OW 311
32455: PPUSH
32456: LD_INT 3
32458: PPUSH
32459: CALL_OW 259
32463: PUSH
32464: LD_INT 4
32466: MUL
32467: MUL
32468: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32469: LD_VAR 0 6
32473: PPUSH
32474: CALL_OW 263
32478: PUSH
32479: LD_INT 2
32481: EQUAL
32482: IFFALSE 32533
// begin j := IsControledBy ( i ) ;
32484: LD_ADDR_VAR 0 7
32488: PUSH
32489: LD_VAR 0 6
32493: PPUSH
32494: CALL_OW 312
32498: ST_TO_ADDR
// if j then
32499: LD_VAR 0 7
32503: IFFALSE 32533
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32505: LD_ADDR_VAR 0 10
32509: PUSH
32510: LD_VAR 0 10
32514: PUSH
32515: LD_VAR 0 7
32519: PPUSH
32520: LD_INT 3
32522: PPUSH
32523: CALL_OW 259
32527: PUSH
32528: LD_INT 3
32530: MUL
32531: MUL
32532: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32533: LD_VAR 0 6
32537: PPUSH
32538: CALL_OW 264
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: LD_INT 6
32548: PUSH
32549: LD_INT 46
32551: PUSH
32552: LD_INT 44
32554: PUSH
32555: LD_INT 47
32557: PUSH
32558: LD_INT 45
32560: PUSH
32561: LD_INT 28
32563: PUSH
32564: LD_INT 7
32566: PUSH
32567: LD_INT 27
32569: PUSH
32570: LD_INT 29
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: IN
32585: PUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: LD_INT 52
32593: PPUSH
32594: CALL_OW 321
32598: PUSH
32599: LD_INT 2
32601: EQUAL
32602: AND
32603: IFFALSE 32620
// bpoints := bpoints * 1.2 ;
32605: LD_ADDR_VAR 0 10
32609: PUSH
32610: LD_VAR 0 10
32614: PUSH
32615: LD_REAL  1.20000000000000E+0000
32618: MUL
32619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32620: LD_VAR 0 6
32624: PPUSH
32625: CALL_OW 264
32629: PUSH
32630: LD_INT 6
32632: PUSH
32633: LD_INT 46
32635: PUSH
32636: LD_INT 47
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: IN
32644: IFFALSE 32661
// bpoints := bpoints * 1.2 ;
32646: LD_ADDR_VAR 0 10
32650: PUSH
32651: LD_VAR 0 10
32655: PUSH
32656: LD_REAL  1.20000000000000E+0000
32659: MUL
32660: ST_TO_ADDR
// end ; unit_building :
32661: GO 32675
32663: LD_INT 3
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32674
32671: POP
// ; end ;
32672: GO 32675
32674: POP
// for j = 1 to 3 do
32675: LD_ADDR_VAR 0 7
32679: PUSH
32680: DOUBLE
32681: LD_INT 1
32683: DEC
32684: ST_TO_ADDR
32685: LD_INT 3
32687: PUSH
32688: FOR_TO
32689: IFFALSE 32742
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32691: LD_ADDR_VAR 0 5
32695: PUSH
32696: LD_VAR 0 5
32700: PPUSH
32701: LD_VAR 0 7
32705: PPUSH
32706: LD_VAR 0 5
32710: PUSH
32711: LD_VAR 0 7
32715: ARRAY
32716: PUSH
32717: LD_VAR 0 9
32721: PUSH
32722: LD_VAR 0 7
32726: ARRAY
32727: PUSH
32728: LD_VAR 0 10
32732: MUL
32733: PLUS
32734: PPUSH
32735: CALL_OW 1
32739: ST_TO_ADDR
32740: GO 32688
32742: POP
32743: POP
// end ;
32744: GO 31223
32746: POP
32747: POP
// result := Replace ( result , 4 , tmp ) ;
32748: LD_ADDR_VAR 0 5
32752: PUSH
32753: LD_VAR 0 5
32757: PPUSH
32758: LD_INT 4
32760: PPUSH
32761: LD_VAR 0 8
32765: PPUSH
32766: CALL_OW 1
32770: ST_TO_ADDR
// end ;
32771: LD_VAR 0 5
32775: RET
// export function DangerAtRange ( unit , range ) ; begin
32776: LD_INT 0
32778: PPUSH
// if not unit then
32779: LD_VAR 0 1
32783: NOT
32784: IFFALSE 32788
// exit ;
32786: GO 32833
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 255
32802: PPUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL_OW 250
32812: PPUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 251
32822: PPUSH
32823: LD_VAR 0 2
32827: PPUSH
32828: CALL 31075 0 4
32832: ST_TO_ADDR
// end ;
32833: LD_VAR 0 3
32837: RET
// export function DangerInArea ( side , area ) ; begin
32838: LD_INT 0
32840: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_VAR 0 2
32850: PPUSH
32851: LD_INT 81
32853: PUSH
32854: LD_VAR 0 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PPUSH
32863: CALL_OW 70
32867: ST_TO_ADDR
// end ;
32868: LD_VAR 0 3
32872: RET
// export function IsExtension ( b ) ; begin
32873: LD_INT 0
32875: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_VAR 0 1
32885: PUSH
32886: LD_INT 23
32888: PUSH
32889: LD_INT 20
32891: PUSH
32892: LD_INT 22
32894: PUSH
32895: LD_INT 17
32897: PUSH
32898: LD_INT 24
32900: PUSH
32901: LD_INT 21
32903: PUSH
32904: LD_INT 19
32906: PUSH
32907: LD_INT 16
32909: PUSH
32910: LD_INT 25
32912: PUSH
32913: LD_INT 18
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: IN
32928: ST_TO_ADDR
// end ;
32929: LD_VAR 0 2
32933: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
// result := [ ] ;
32939: LD_ADDR_VAR 0 4
32943: PUSH
32944: EMPTY
32945: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32946: LD_ADDR_VAR 0 5
32950: PUSH
32951: LD_VAR 0 2
32955: PPUSH
32956: LD_INT 21
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PPUSH
32966: CALL_OW 70
32970: ST_TO_ADDR
// if not tmp then
32971: LD_VAR 0 5
32975: NOT
32976: IFFALSE 32980
// exit ;
32978: GO 33044
// if checkLink then
32980: LD_VAR 0 3
32984: IFFALSE 33034
// begin for i in tmp do
32986: LD_ADDR_VAR 0 6
32990: PUSH
32991: LD_VAR 0 5
32995: PUSH
32996: FOR_IN
32997: IFFALSE 33032
// if GetBase ( i ) <> base then
32999: LD_VAR 0 6
33003: PPUSH
33004: CALL_OW 274
33008: PUSH
33009: LD_VAR 0 1
33013: NONEQUAL
33014: IFFALSE 33030
// ComLinkToBase ( base , i ) ;
33016: LD_VAR 0 1
33020: PPUSH
33021: LD_VAR 0 6
33025: PPUSH
33026: CALL_OW 169
33030: GO 32996
33032: POP
33033: POP
// end ; result := tmp ;
33034: LD_ADDR_VAR 0 4
33038: PUSH
33039: LD_VAR 0 5
33043: ST_TO_ADDR
// end ;
33044: LD_VAR 0 4
33048: RET
// export function ComComplete ( units , b ) ; var i ; begin
33049: LD_INT 0
33051: PPUSH
33052: PPUSH
// if not units then
33053: LD_VAR 0 1
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33152
// for i in units do
33062: LD_ADDR_VAR 0 4
33066: PUSH
33067: LD_VAR 0 1
33071: PUSH
33072: FOR_IN
33073: IFFALSE 33150
// if BuildingStatus ( b ) = bs_build then
33075: LD_VAR 0 2
33079: PPUSH
33080: CALL_OW 461
33084: PUSH
33085: LD_INT 1
33087: EQUAL
33088: IFFALSE 33148
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33090: LD_VAR 0 4
33094: PPUSH
33095: LD_STRING h
33097: PUSH
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 250
33107: PUSH
33108: LD_VAR 0 2
33112: PPUSH
33113: CALL_OW 251
33117: PUSH
33118: LD_VAR 0 2
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: PPUSH
33144: CALL_OW 446
33148: GO 33072
33150: POP
33151: POP
// end ;
33152: LD_VAR 0 3
33156: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33157: LD_INT 0
33159: PPUSH
33160: PPUSH
33161: PPUSH
33162: PPUSH
33163: PPUSH
33164: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33165: LD_VAR 0 1
33169: NOT
33170: PUSH
33171: LD_VAR 0 1
33175: PPUSH
33176: CALL_OW 263
33180: PUSH
33181: LD_INT 2
33183: NONEQUAL
33184: OR
33185: IFFALSE 33189
// exit ;
33187: GO 33505
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33189: LD_ADDR_VAR 0 6
33193: PUSH
33194: LD_INT 22
33196: PUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: CALL_OW 255
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 30
33216: PUSH
33217: LD_INT 36
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 34
33226: PUSH
33227: LD_INT 31
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PPUSH
33243: CALL_OW 69
33247: ST_TO_ADDR
// if not tmp then
33248: LD_VAR 0 6
33252: NOT
33253: IFFALSE 33257
// exit ;
33255: GO 33505
// result := [ ] ;
33257: LD_ADDR_VAR 0 2
33261: PUSH
33262: EMPTY
33263: ST_TO_ADDR
// for i in tmp do
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_VAR 0 6
33273: PUSH
33274: FOR_IN
33275: IFFALSE 33346
// begin t := UnitsInside ( i ) ;
33277: LD_ADDR_VAR 0 4
33281: PUSH
33282: LD_VAR 0 3
33286: PPUSH
33287: CALL_OW 313
33291: ST_TO_ADDR
// if t then
33292: LD_VAR 0 4
33296: IFFALSE 33344
// for j in t do
33298: LD_ADDR_VAR 0 7
33302: PUSH
33303: LD_VAR 0 4
33307: PUSH
33308: FOR_IN
33309: IFFALSE 33342
// result := Replace ( result , result + 1 , j ) ;
33311: LD_ADDR_VAR 0 2
33315: PUSH
33316: LD_VAR 0 2
33320: PPUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_INT 1
33328: PLUS
33329: PPUSH
33330: LD_VAR 0 7
33334: PPUSH
33335: CALL_OW 1
33339: ST_TO_ADDR
33340: GO 33308
33342: POP
33343: POP
// end ;
33344: GO 33274
33346: POP
33347: POP
// if not result then
33348: LD_VAR 0 2
33352: NOT
33353: IFFALSE 33357
// exit ;
33355: GO 33505
// mech := result [ 1 ] ;
33357: LD_ADDR_VAR 0 5
33361: PUSH
33362: LD_VAR 0 2
33366: PUSH
33367: LD_INT 1
33369: ARRAY
33370: ST_TO_ADDR
// if result > 1 then
33371: LD_VAR 0 2
33375: PUSH
33376: LD_INT 1
33378: GREATER
33379: IFFALSE 33491
// begin for i = 2 to result do
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: DOUBLE
33387: LD_INT 2
33389: DEC
33390: ST_TO_ADDR
33391: LD_VAR 0 2
33395: PUSH
33396: FOR_TO
33397: IFFALSE 33489
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33399: LD_ADDR_VAR 0 4
33403: PUSH
33404: LD_VAR 0 2
33408: PUSH
33409: LD_VAR 0 3
33413: ARRAY
33414: PPUSH
33415: LD_INT 3
33417: PPUSH
33418: CALL_OW 259
33422: PUSH
33423: LD_VAR 0 2
33427: PUSH
33428: LD_VAR 0 3
33432: ARRAY
33433: PPUSH
33434: CALL_OW 432
33438: MINUS
33439: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33440: LD_VAR 0 4
33444: PUSH
33445: LD_VAR 0 5
33449: PPUSH
33450: LD_INT 3
33452: PPUSH
33453: CALL_OW 259
33457: PUSH
33458: LD_VAR 0 5
33462: PPUSH
33463: CALL_OW 432
33467: MINUS
33468: GREATEREQUAL
33469: IFFALSE 33487
// mech := result [ i ] ;
33471: LD_ADDR_VAR 0 5
33475: PUSH
33476: LD_VAR 0 2
33480: PUSH
33481: LD_VAR 0 3
33485: ARRAY
33486: ST_TO_ADDR
// end ;
33487: GO 33396
33489: POP
33490: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_VAR 0 5
33500: PPUSH
33501: CALL_OW 135
// end ;
33505: LD_VAR 0 2
33509: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33510: LD_INT 0
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
// result := [ ] ;
33525: LD_ADDR_VAR 0 7
33529: PUSH
33530: EMPTY
33531: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 266
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: LD_INT 1
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: IN
33552: NOT
33553: IFFALSE 33557
// exit ;
33555: GO 35191
// if name then
33557: LD_VAR 0 3
33561: IFFALSE 33577
// SetBName ( base_dep , name ) ;
33563: LD_VAR 0 1
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: CALL_OW 500
// base := GetBase ( base_dep ) ;
33577: LD_ADDR_VAR 0 15
33581: PUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 274
33591: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33592: LD_ADDR_VAR 0 16
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 255
33606: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33607: LD_ADDR_VAR 0 17
33611: PUSH
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 248
33621: ST_TO_ADDR
// if sources then
33622: LD_VAR 0 5
33626: IFFALSE 33673
// for i = 1 to 3 do
33628: LD_ADDR_VAR 0 8
33632: PUSH
33633: DOUBLE
33634: LD_INT 1
33636: DEC
33637: ST_TO_ADDR
33638: LD_INT 3
33640: PUSH
33641: FOR_TO
33642: IFFALSE 33671
// AddResourceType ( base , i , sources [ i ] ) ;
33644: LD_VAR 0 15
33648: PPUSH
33649: LD_VAR 0 8
33653: PPUSH
33654: LD_VAR 0 5
33658: PUSH
33659: LD_VAR 0 8
33663: ARRAY
33664: PPUSH
33665: CALL_OW 276
33669: GO 33641
33671: POP
33672: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33673: LD_ADDR_VAR 0 18
33677: PUSH
33678: LD_VAR 0 15
33682: PPUSH
33683: LD_VAR 0 2
33687: PPUSH
33688: LD_INT 1
33690: PPUSH
33691: CALL 32934 0 3
33695: ST_TO_ADDR
// InitHc ;
33696: CALL_OW 19
// InitUc ;
33700: CALL_OW 18
// uc_side := side ;
33704: LD_ADDR_OWVAR 20
33708: PUSH
33709: LD_VAR 0 16
33713: ST_TO_ADDR
// uc_nation := nation ;
33714: LD_ADDR_OWVAR 21
33718: PUSH
33719: LD_VAR 0 17
33723: ST_TO_ADDR
// if buildings then
33724: LD_VAR 0 18
33728: IFFALSE 35050
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33730: LD_ADDR_VAR 0 19
33734: PUSH
33735: LD_VAR 0 18
33739: PPUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 30
33745: PUSH
33746: LD_INT 29
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 30
33755: PUSH
33756: LD_INT 30
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: PPUSH
33768: CALL_OW 72
33772: ST_TO_ADDR
// if tmp then
33773: LD_VAR 0 19
33777: IFFALSE 33825
// for i in tmp do
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_VAR 0 19
33788: PUSH
33789: FOR_IN
33790: IFFALSE 33823
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33792: LD_VAR 0 8
33796: PPUSH
33797: CALL_OW 250
33801: PPUSH
33802: LD_VAR 0 8
33806: PPUSH
33807: CALL_OW 251
33811: PPUSH
33812: LD_VAR 0 16
33816: PPUSH
33817: CALL_OW 441
33821: GO 33789
33823: POP
33824: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33825: LD_VAR 0 18
33829: PPUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 30
33835: PUSH
33836: LD_INT 32
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 30
33845: PUSH
33846: LD_INT 33
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL_OW 72
33862: IFFALSE 33950
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33864: LD_ADDR_VAR 0 8
33868: PUSH
33869: LD_VAR 0 18
33873: PPUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 30
33879: PUSH
33880: LD_INT 32
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 30
33889: PUSH
33890: LD_INT 33
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: PPUSH
33902: CALL_OW 72
33906: PUSH
33907: FOR_IN
33908: IFFALSE 33948
// begin if not GetBWeapon ( i ) then
33910: LD_VAR 0 8
33914: PPUSH
33915: CALL_OW 269
33919: NOT
33920: IFFALSE 33946
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33922: LD_VAR 0 8
33926: PPUSH
33927: LD_VAR 0 8
33931: PPUSH
33932: LD_VAR 0 2
33936: PPUSH
33937: CALL 35196 0 2
33941: PPUSH
33942: CALL_OW 431
// end ;
33946: GO 33907
33948: POP
33949: POP
// end ; for i = 1 to personel do
33950: LD_ADDR_VAR 0 8
33954: PUSH
33955: DOUBLE
33956: LD_INT 1
33958: DEC
33959: ST_TO_ADDR
33960: LD_VAR 0 6
33964: PUSH
33965: FOR_TO
33966: IFFALSE 35030
// begin if i > 4 then
33968: LD_VAR 0 8
33972: PUSH
33973: LD_INT 4
33975: GREATER
33976: IFFALSE 33980
// break ;
33978: GO 35030
// case i of 1 :
33980: LD_VAR 0 8
33984: PUSH
33985: LD_INT 1
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34073
33993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33994: LD_ADDR_VAR 0 12
33998: PUSH
33999: LD_VAR 0 18
34003: PPUSH
34004: LD_INT 22
34006: PUSH
34007: LD_VAR 0 16
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 58
34018: PUSH
34019: EMPTY
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 30
34027: PUSH
34028: LD_INT 32
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 30
34037: PUSH
34038: LD_INT 4
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 30
34047: PUSH
34048: LD_INT 5
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: PPUSH
34066: CALL_OW 72
34070: ST_TO_ADDR
34071: GO 34295
34073: LD_INT 2
34075: DOUBLE
34076: EQUAL
34077: IFTRUE 34081
34079: GO 34143
34081: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34082: LD_ADDR_VAR 0 12
34086: PUSH
34087: LD_VAR 0 18
34091: PPUSH
34092: LD_INT 22
34094: PUSH
34095: LD_VAR 0 16
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 30
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 30
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PPUSH
34136: CALL_OW 72
34140: ST_TO_ADDR
34141: GO 34295
34143: LD_INT 3
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34213
34151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34152: LD_ADDR_VAR 0 12
34156: PUSH
34157: LD_VAR 0 18
34161: PPUSH
34162: LD_INT 22
34164: PUSH
34165: LD_VAR 0 16
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 30
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PPUSH
34206: CALL_OW 72
34210: ST_TO_ADDR
34211: GO 34295
34213: LD_INT 4
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34294
34221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34222: LD_ADDR_VAR 0 12
34226: PUSH
34227: LD_VAR 0 18
34231: PPUSH
34232: LD_INT 22
34234: PUSH
34235: LD_VAR 0 16
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 30
34249: PUSH
34250: LD_INT 6
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 30
34259: PUSH
34260: LD_INT 7
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 30
34269: PUSH
34270: LD_INT 8
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 72
34291: ST_TO_ADDR
34292: GO 34295
34294: POP
// if i = 1 then
34295: LD_VAR 0 8
34299: PUSH
34300: LD_INT 1
34302: EQUAL
34303: IFFALSE 34414
// begin tmp := [ ] ;
34305: LD_ADDR_VAR 0 19
34309: PUSH
34310: EMPTY
34311: ST_TO_ADDR
// for j in f do
34312: LD_ADDR_VAR 0 9
34316: PUSH
34317: LD_VAR 0 12
34321: PUSH
34322: FOR_IN
34323: IFFALSE 34396
// if GetBType ( j ) = b_bunker then
34325: LD_VAR 0 9
34329: PPUSH
34330: CALL_OW 266
34334: PUSH
34335: LD_INT 32
34337: EQUAL
34338: IFFALSE 34365
// tmp := Insert ( tmp , 1 , j ) else
34340: LD_ADDR_VAR 0 19
34344: PUSH
34345: LD_VAR 0 19
34349: PPUSH
34350: LD_INT 1
34352: PPUSH
34353: LD_VAR 0 9
34357: PPUSH
34358: CALL_OW 2
34362: ST_TO_ADDR
34363: GO 34394
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34365: LD_ADDR_VAR 0 19
34369: PUSH
34370: LD_VAR 0 19
34374: PPUSH
34375: LD_VAR 0 19
34379: PUSH
34380: LD_INT 1
34382: PLUS
34383: PPUSH
34384: LD_VAR 0 9
34388: PPUSH
34389: CALL_OW 2
34393: ST_TO_ADDR
34394: GO 34322
34396: POP
34397: POP
// if tmp then
34398: LD_VAR 0 19
34402: IFFALSE 34414
// f := tmp ;
34404: LD_ADDR_VAR 0 12
34408: PUSH
34409: LD_VAR 0 19
34413: ST_TO_ADDR
// end ; x := personel [ i ] ;
34414: LD_ADDR_VAR 0 13
34418: PUSH
34419: LD_VAR 0 6
34423: PUSH
34424: LD_VAR 0 8
34428: ARRAY
34429: ST_TO_ADDR
// if x = - 1 then
34430: LD_VAR 0 13
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: EQUAL
34439: IFFALSE 34648
// begin for j in f do
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_VAR 0 12
34450: PUSH
34451: FOR_IN
34452: IFFALSE 34644
// repeat InitHc ;
34454: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34458: LD_VAR 0 9
34462: PPUSH
34463: CALL_OW 266
34467: PUSH
34468: LD_INT 5
34470: EQUAL
34471: IFFALSE 34541
// begin if UnitsInside ( j ) < 3 then
34473: LD_VAR 0 9
34477: PPUSH
34478: CALL_OW 313
34482: PUSH
34483: LD_INT 3
34485: LESS
34486: IFFALSE 34522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34488: LD_INT 0
34490: PPUSH
34491: LD_INT 5
34493: PUSH
34494: LD_INT 8
34496: PUSH
34497: LD_INT 9
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: PUSH
34505: LD_VAR 0 17
34509: ARRAY
34510: PPUSH
34511: LD_VAR 0 4
34515: PPUSH
34516: CALL_OW 380
34520: GO 34539
// PrepareHuman ( false , i , skill ) ;
34522: LD_INT 0
34524: PPUSH
34525: LD_VAR 0 8
34529: PPUSH
34530: LD_VAR 0 4
34534: PPUSH
34535: CALL_OW 380
// end else
34539: GO 34558
// PrepareHuman ( false , i , skill ) ;
34541: LD_INT 0
34543: PPUSH
34544: LD_VAR 0 8
34548: PPUSH
34549: LD_VAR 0 4
34553: PPUSH
34554: CALL_OW 380
// un := CreateHuman ;
34558: LD_ADDR_VAR 0 14
34562: PUSH
34563: CALL_OW 44
34567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34568: LD_ADDR_VAR 0 7
34572: PUSH
34573: LD_VAR 0 7
34577: PPUSH
34578: LD_INT 1
34580: PPUSH
34581: LD_VAR 0 14
34585: PPUSH
34586: CALL_OW 2
34590: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34591: LD_VAR 0 14
34595: PPUSH
34596: LD_VAR 0 9
34600: PPUSH
34601: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34605: LD_VAR 0 9
34609: PPUSH
34610: CALL_OW 313
34614: PUSH
34615: LD_INT 6
34617: EQUAL
34618: PUSH
34619: LD_VAR 0 9
34623: PPUSH
34624: CALL_OW 266
34628: PUSH
34629: LD_INT 32
34631: PUSH
34632: LD_INT 31
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: IN
34639: OR
34640: IFFALSE 34454
34642: GO 34451
34644: POP
34645: POP
// end else
34646: GO 35028
// for j = 1 to x do
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: DOUBLE
34654: LD_INT 1
34656: DEC
34657: ST_TO_ADDR
34658: LD_VAR 0 13
34662: PUSH
34663: FOR_TO
34664: IFFALSE 35026
// begin InitHc ;
34666: CALL_OW 19
// if not f then
34670: LD_VAR 0 12
34674: NOT
34675: IFFALSE 34764
// begin PrepareHuman ( false , i , skill ) ;
34677: LD_INT 0
34679: PPUSH
34680: LD_VAR 0 8
34684: PPUSH
34685: LD_VAR 0 4
34689: PPUSH
34690: CALL_OW 380
// un := CreateHuman ;
34694: LD_ADDR_VAR 0 14
34698: PUSH
34699: CALL_OW 44
34703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34704: LD_ADDR_VAR 0 7
34708: PUSH
34709: LD_VAR 0 7
34713: PPUSH
34714: LD_INT 1
34716: PPUSH
34717: LD_VAR 0 14
34721: PPUSH
34722: CALL_OW 2
34726: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34727: LD_VAR 0 14
34731: PPUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 250
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 251
34751: PPUSH
34752: LD_INT 10
34754: PPUSH
34755: LD_INT 0
34757: PPUSH
34758: CALL_OW 50
// continue ;
34762: GO 34663
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34764: LD_VAR 0 12
34768: PUSH
34769: LD_INT 1
34771: ARRAY
34772: PPUSH
34773: CALL_OW 313
34777: PUSH
34778: LD_VAR 0 12
34782: PUSH
34783: LD_INT 1
34785: ARRAY
34786: PPUSH
34787: CALL_OW 266
34791: PUSH
34792: LD_INT 32
34794: PUSH
34795: LD_INT 31
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: IN
34802: AND
34803: PUSH
34804: LD_VAR 0 12
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: PPUSH
34813: CALL_OW 313
34817: PUSH
34818: LD_INT 6
34820: EQUAL
34821: OR
34822: IFFALSE 34842
// f := Delete ( f , 1 ) ;
34824: LD_ADDR_VAR 0 12
34828: PUSH
34829: LD_VAR 0 12
34833: PPUSH
34834: LD_INT 1
34836: PPUSH
34837: CALL_OW 3
34841: ST_TO_ADDR
// if not f then
34842: LD_VAR 0 12
34846: NOT
34847: IFFALSE 34865
// begin x := x + 2 ;
34849: LD_ADDR_VAR 0 13
34853: PUSH
34854: LD_VAR 0 13
34858: PUSH
34859: LD_INT 2
34861: PLUS
34862: ST_TO_ADDR
// continue ;
34863: GO 34663
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34865: LD_VAR 0 12
34869: PUSH
34870: LD_INT 1
34872: ARRAY
34873: PPUSH
34874: CALL_OW 266
34878: PUSH
34879: LD_INT 5
34881: EQUAL
34882: IFFALSE 34956
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34884: LD_VAR 0 12
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: PPUSH
34893: CALL_OW 313
34897: PUSH
34898: LD_INT 3
34900: LESS
34901: IFFALSE 34937
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34903: LD_INT 0
34905: PPUSH
34906: LD_INT 5
34908: PUSH
34909: LD_INT 8
34911: PUSH
34912: LD_INT 9
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: PUSH
34920: LD_VAR 0 17
34924: ARRAY
34925: PPUSH
34926: LD_VAR 0 4
34930: PPUSH
34931: CALL_OW 380
34935: GO 34954
// PrepareHuman ( false , i , skill ) ;
34937: LD_INT 0
34939: PPUSH
34940: LD_VAR 0 8
34944: PPUSH
34945: LD_VAR 0 4
34949: PPUSH
34950: CALL_OW 380
// end else
34954: GO 34973
// PrepareHuman ( false , i , skill ) ;
34956: LD_INT 0
34958: PPUSH
34959: LD_VAR 0 8
34963: PPUSH
34964: LD_VAR 0 4
34968: PPUSH
34969: CALL_OW 380
// un := CreateHuman ;
34973: LD_ADDR_VAR 0 14
34977: PUSH
34978: CALL_OW 44
34982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34983: LD_ADDR_VAR 0 7
34987: PUSH
34988: LD_VAR 0 7
34992: PPUSH
34993: LD_INT 1
34995: PPUSH
34996: LD_VAR 0 14
35000: PPUSH
35001: CALL_OW 2
35005: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35006: LD_VAR 0 14
35010: PPUSH
35011: LD_VAR 0 12
35015: PUSH
35016: LD_INT 1
35018: ARRAY
35019: PPUSH
35020: CALL_OW 52
// end ;
35024: GO 34663
35026: POP
35027: POP
// end ;
35028: GO 33965
35030: POP
35031: POP
// result := result ^ buildings ;
35032: LD_ADDR_VAR 0 7
35036: PUSH
35037: LD_VAR 0 7
35041: PUSH
35042: LD_VAR 0 18
35046: ADD
35047: ST_TO_ADDR
// end else
35048: GO 35191
// begin for i = 1 to personel do
35050: LD_ADDR_VAR 0 8
35054: PUSH
35055: DOUBLE
35056: LD_INT 1
35058: DEC
35059: ST_TO_ADDR
35060: LD_VAR 0 6
35064: PUSH
35065: FOR_TO
35066: IFFALSE 35189
// begin if i > 4 then
35068: LD_VAR 0 8
35072: PUSH
35073: LD_INT 4
35075: GREATER
35076: IFFALSE 35080
// break ;
35078: GO 35189
// x := personel [ i ] ;
35080: LD_ADDR_VAR 0 13
35084: PUSH
35085: LD_VAR 0 6
35089: PUSH
35090: LD_VAR 0 8
35094: ARRAY
35095: ST_TO_ADDR
// if x = - 1 then
35096: LD_VAR 0 13
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: EQUAL
35105: IFFALSE 35109
// continue ;
35107: GO 35065
// PrepareHuman ( false , i , skill ) ;
35109: LD_INT 0
35111: PPUSH
35112: LD_VAR 0 8
35116: PPUSH
35117: LD_VAR 0 4
35121: PPUSH
35122: CALL_OW 380
// un := CreateHuman ;
35126: LD_ADDR_VAR 0 14
35130: PUSH
35131: CALL_OW 44
35135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35136: LD_VAR 0 14
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 250
35150: PPUSH
35151: LD_VAR 0 1
35155: PPUSH
35156: CALL_OW 251
35160: PPUSH
35161: LD_INT 10
35163: PPUSH
35164: LD_INT 0
35166: PPUSH
35167: CALL_OW 50
// result := result ^ un ;
35171: LD_ADDR_VAR 0 7
35175: PUSH
35176: LD_VAR 0 7
35180: PUSH
35181: LD_VAR 0 14
35185: ADD
35186: ST_TO_ADDR
// end ;
35187: GO 35065
35189: POP
35190: POP
// end ; end ;
35191: LD_VAR 0 7
35195: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35196: LD_INT 0
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
// result := false ;
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_INT 0
35221: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35222: LD_VAR 0 1
35226: NOT
35227: PUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 266
35237: PUSH
35238: LD_INT 32
35240: PUSH
35241: LD_INT 33
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: IN
35248: NOT
35249: OR
35250: IFFALSE 35254
// exit ;
35252: GO 36363
// nat := GetNation ( tower ) ;
35254: LD_ADDR_VAR 0 12
35258: PUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 248
35268: ST_TO_ADDR
// side := GetSide ( tower ) ;
35269: LD_ADDR_VAR 0 16
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 255
35283: ST_TO_ADDR
// x := GetX ( tower ) ;
35284: LD_ADDR_VAR 0 10
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 250
35298: ST_TO_ADDR
// y := GetY ( tower ) ;
35299: LD_ADDR_VAR 0 11
35303: PUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 251
35313: ST_TO_ADDR
// if not x or not y then
35314: LD_VAR 0 10
35318: NOT
35319: PUSH
35320: LD_VAR 0 11
35324: NOT
35325: OR
35326: IFFALSE 35330
// exit ;
35328: GO 36363
// weapon := 0 ;
35330: LD_ADDR_VAR 0 18
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// fac_list := [ ] ;
35338: LD_ADDR_VAR 0 17
35342: PUSH
35343: EMPTY
35344: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35345: LD_ADDR_VAR 0 6
35349: PUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 274
35359: PPUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_INT 0
35367: PPUSH
35368: CALL 32934 0 3
35372: PPUSH
35373: LD_INT 30
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PPUSH
35383: CALL_OW 72
35387: ST_TO_ADDR
// if not factories then
35388: LD_VAR 0 6
35392: NOT
35393: IFFALSE 35397
// exit ;
35395: GO 36363
// for i in factories do
35397: LD_ADDR_VAR 0 8
35401: PUSH
35402: LD_VAR 0 6
35406: PUSH
35407: FOR_IN
35408: IFFALSE 35433
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35410: LD_ADDR_VAR 0 17
35414: PUSH
35415: LD_VAR 0 17
35419: PUSH
35420: LD_VAR 0 8
35424: PPUSH
35425: CALL_OW 478
35429: UNION
35430: ST_TO_ADDR
35431: GO 35407
35433: POP
35434: POP
// if not fac_list then
35435: LD_VAR 0 17
35439: NOT
35440: IFFALSE 35444
// exit ;
35442: GO 36363
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35444: LD_ADDR_VAR 0 5
35448: PUSH
35449: LD_INT 4
35451: PUSH
35452: LD_INT 5
35454: PUSH
35455: LD_INT 9
35457: PUSH
35458: LD_INT 10
35460: PUSH
35461: LD_INT 6
35463: PUSH
35464: LD_INT 7
35466: PUSH
35467: LD_INT 11
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 27
35481: PUSH
35482: LD_INT 28
35484: PUSH
35485: LD_INT 26
35487: PUSH
35488: LD_INT 30
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 43
35499: PUSH
35500: LD_INT 44
35502: PUSH
35503: LD_INT 46
35505: PUSH
35506: LD_INT 45
35508: PUSH
35509: LD_INT 47
35511: PUSH
35512: LD_INT 49
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: LD_VAR 0 12
35532: ARRAY
35533: ST_TO_ADDR
// list := list isect fac_list ;
35534: LD_ADDR_VAR 0 5
35538: PUSH
35539: LD_VAR 0 5
35543: PUSH
35544: LD_VAR 0 17
35548: ISECT
35549: ST_TO_ADDR
// if not list then
35550: LD_VAR 0 5
35554: NOT
35555: IFFALSE 35559
// exit ;
35557: GO 36363
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35559: LD_VAR 0 12
35563: PUSH
35564: LD_INT 3
35566: EQUAL
35567: PUSH
35568: LD_INT 49
35570: PUSH
35571: LD_VAR 0 5
35575: IN
35576: AND
35577: PUSH
35578: LD_INT 31
35580: PPUSH
35581: LD_VAR 0 16
35585: PPUSH
35586: CALL_OW 321
35590: PUSH
35591: LD_INT 2
35593: EQUAL
35594: AND
35595: IFFALSE 35655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35597: LD_INT 22
35599: PUSH
35600: LD_VAR 0 16
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 35
35611: PUSH
35612: LD_INT 49
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 91
35621: PUSH
35622: LD_VAR 0 1
35626: PUSH
35627: LD_INT 10
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: PPUSH
35640: CALL_OW 69
35644: NOT
35645: IFFALSE 35655
// weapon := ru_time_lapser ;
35647: LD_ADDR_VAR 0 18
35651: PUSH
35652: LD_INT 49
35654: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35655: LD_VAR 0 12
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: IN
35670: PUSH
35671: LD_INT 11
35673: PUSH
35674: LD_VAR 0 5
35678: IN
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_VAR 0 5
35687: IN
35688: OR
35689: AND
35690: PUSH
35691: LD_INT 6
35693: PPUSH
35694: LD_VAR 0 16
35698: PPUSH
35699: CALL_OW 321
35703: PUSH
35704: LD_INT 2
35706: EQUAL
35707: AND
35708: IFFALSE 35873
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35710: LD_INT 22
35712: PUSH
35713: LD_VAR 0 16
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 35
35727: PUSH
35728: LD_INT 11
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 35
35737: PUSH
35738: LD_INT 30
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 91
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: LD_INT 18
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: PPUSH
35771: CALL_OW 69
35775: NOT
35776: PUSH
35777: LD_INT 22
35779: PUSH
35780: LD_VAR 0 16
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 30
35794: PUSH
35795: LD_INT 32
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 30
35804: PUSH
35805: LD_INT 33
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 91
35819: PUSH
35820: LD_VAR 0 1
35824: PUSH
35825: LD_INT 12
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: PPUSH
35841: CALL_OW 69
35845: PUSH
35846: LD_INT 2
35848: GREATER
35849: AND
35850: IFFALSE 35873
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35852: LD_ADDR_VAR 0 18
35856: PUSH
35857: LD_INT 11
35859: PUSH
35860: LD_INT 30
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_VAR 0 12
35871: ARRAY
35872: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35873: LD_VAR 0 18
35877: NOT
35878: PUSH
35879: LD_INT 40
35881: PPUSH
35882: LD_VAR 0 16
35886: PPUSH
35887: CALL_OW 321
35891: PUSH
35892: LD_INT 2
35894: EQUAL
35895: AND
35896: PUSH
35897: LD_INT 7
35899: PUSH
35900: LD_VAR 0 5
35904: IN
35905: PUSH
35906: LD_INT 28
35908: PUSH
35909: LD_VAR 0 5
35913: IN
35914: OR
35915: PUSH
35916: LD_INT 45
35918: PUSH
35919: LD_VAR 0 5
35923: IN
35924: OR
35925: AND
35926: IFFALSE 36180
// begin hex := GetHexInfo ( x , y ) ;
35928: LD_ADDR_VAR 0 4
35932: PUSH
35933: LD_VAR 0 10
35937: PPUSH
35938: LD_VAR 0 11
35942: PPUSH
35943: CALL_OW 546
35947: ST_TO_ADDR
// if hex [ 1 ] then
35948: LD_VAR 0 4
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: IFFALSE 35960
// exit ;
35958: GO 36363
// height := hex [ 2 ] ;
35960: LD_ADDR_VAR 0 15
35964: PUSH
35965: LD_VAR 0 4
35969: PUSH
35970: LD_INT 2
35972: ARRAY
35973: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35974: LD_ADDR_VAR 0 14
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: LD_INT 3
35987: PUSH
35988: LD_INT 5
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// for i in tmp do
35997: LD_ADDR_VAR 0 8
36001: PUSH
36002: LD_VAR 0 14
36006: PUSH
36007: FOR_IN
36008: IFFALSE 36178
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36010: LD_ADDR_VAR 0 9
36014: PUSH
36015: LD_VAR 0 10
36019: PPUSH
36020: LD_VAR 0 8
36024: PPUSH
36025: LD_INT 5
36027: PPUSH
36028: CALL_OW 272
36032: PUSH
36033: LD_VAR 0 11
36037: PPUSH
36038: LD_VAR 0 8
36042: PPUSH
36043: LD_INT 5
36045: PPUSH
36046: CALL_OW 273
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36055: LD_VAR 0 9
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: PPUSH
36064: LD_VAR 0 9
36068: PUSH
36069: LD_INT 2
36071: ARRAY
36072: PPUSH
36073: CALL_OW 488
36077: IFFALSE 36176
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36079: LD_ADDR_VAR 0 4
36083: PUSH
36084: LD_VAR 0 9
36088: PUSH
36089: LD_INT 1
36091: ARRAY
36092: PPUSH
36093: LD_VAR 0 9
36097: PUSH
36098: LD_INT 2
36100: ARRAY
36101: PPUSH
36102: CALL_OW 546
36106: ST_TO_ADDR
// if hex [ 1 ] then
36107: LD_VAR 0 4
36111: PUSH
36112: LD_INT 1
36114: ARRAY
36115: IFFALSE 36119
// continue ;
36117: GO 36007
// h := hex [ 2 ] ;
36119: LD_ADDR_VAR 0 13
36123: PUSH
36124: LD_VAR 0 4
36128: PUSH
36129: LD_INT 2
36131: ARRAY
36132: ST_TO_ADDR
// if h + 7 < height then
36133: LD_VAR 0 13
36137: PUSH
36138: LD_INT 7
36140: PLUS
36141: PUSH
36142: LD_VAR 0 15
36146: LESS
36147: IFFALSE 36176
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36149: LD_ADDR_VAR 0 18
36153: PUSH
36154: LD_INT 7
36156: PUSH
36157: LD_INT 28
36159: PUSH
36160: LD_INT 45
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: PUSH
36168: LD_VAR 0 12
36172: ARRAY
36173: ST_TO_ADDR
// break ;
36174: GO 36178
// end ; end ; end ;
36176: GO 36007
36178: POP
36179: POP
// end ; if not weapon then
36180: LD_VAR 0 18
36184: NOT
36185: IFFALSE 36245
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36187: LD_ADDR_VAR 0 5
36191: PUSH
36192: LD_VAR 0 5
36196: PUSH
36197: LD_INT 11
36199: PUSH
36200: LD_INT 30
36202: PUSH
36203: LD_INT 49
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: DIFF
36211: ST_TO_ADDR
// if not list then
36212: LD_VAR 0 5
36216: NOT
36217: IFFALSE 36221
// exit ;
36219: GO 36363
// weapon := list [ rand ( 1 , list ) ] ;
36221: LD_ADDR_VAR 0 18
36225: PUSH
36226: LD_VAR 0 5
36230: PUSH
36231: LD_INT 1
36233: PPUSH
36234: LD_VAR 0 5
36238: PPUSH
36239: CALL_OW 12
36243: ARRAY
36244: ST_TO_ADDR
// end ; if weapon then
36245: LD_VAR 0 18
36249: IFFALSE 36363
// begin tmp := CostOfWeapon ( weapon ) ;
36251: LD_ADDR_VAR 0 14
36255: PUSH
36256: LD_VAR 0 18
36260: PPUSH
36261: CALL_OW 451
36265: ST_TO_ADDR
// j := GetBase ( tower ) ;
36266: LD_ADDR_VAR 0 9
36270: PUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL_OW 274
36280: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36281: LD_VAR 0 9
36285: PPUSH
36286: LD_INT 1
36288: PPUSH
36289: CALL_OW 275
36293: PUSH
36294: LD_VAR 0 14
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: GREATEREQUAL
36303: PUSH
36304: LD_VAR 0 9
36308: PPUSH
36309: LD_INT 2
36311: PPUSH
36312: CALL_OW 275
36316: PUSH
36317: LD_VAR 0 14
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: GREATEREQUAL
36326: AND
36327: PUSH
36328: LD_VAR 0 9
36332: PPUSH
36333: LD_INT 3
36335: PPUSH
36336: CALL_OW 275
36340: PUSH
36341: LD_VAR 0 14
36345: PUSH
36346: LD_INT 3
36348: ARRAY
36349: GREATEREQUAL
36350: AND
36351: IFFALSE 36363
// result := weapon ;
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: LD_VAR 0 18
36362: ST_TO_ADDR
// end ; end ;
36363: LD_VAR 0 3
36367: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36368: LD_INT 0
36370: PPUSH
36371: PPUSH
// result := true ;
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_INT 1
36379: ST_TO_ADDR
// if array1 = array2 then
36380: LD_VAR 0 1
36384: PUSH
36385: LD_VAR 0 2
36389: EQUAL
36390: IFFALSE 36450
// begin for i = 1 to array1 do
36392: LD_ADDR_VAR 0 4
36396: PUSH
36397: DOUBLE
36398: LD_INT 1
36400: DEC
36401: ST_TO_ADDR
36402: LD_VAR 0 1
36406: PUSH
36407: FOR_TO
36408: IFFALSE 36446
// if array1 [ i ] <> array2 [ i ] then
36410: LD_VAR 0 1
36414: PUSH
36415: LD_VAR 0 4
36419: ARRAY
36420: PUSH
36421: LD_VAR 0 2
36425: PUSH
36426: LD_VAR 0 4
36430: ARRAY
36431: NONEQUAL
36432: IFFALSE 36444
// begin result := false ;
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: LD_INT 0
36441: ST_TO_ADDR
// break ;
36442: GO 36446
// end ;
36444: GO 36407
36446: POP
36447: POP
// end else
36448: GO 36458
// result := false ;
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_INT 0
36457: ST_TO_ADDR
// end ;
36458: LD_VAR 0 3
36462: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36463: LD_INT 0
36465: PPUSH
36466: PPUSH
// if not array1 or not array2 then
36467: LD_VAR 0 1
36471: NOT
36472: PUSH
36473: LD_VAR 0 2
36477: NOT
36478: OR
36479: IFFALSE 36483
// exit ;
36481: GO 36547
// result := true ;
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_INT 1
36490: ST_TO_ADDR
// for i = 1 to array1 do
36491: LD_ADDR_VAR 0 4
36495: PUSH
36496: DOUBLE
36497: LD_INT 1
36499: DEC
36500: ST_TO_ADDR
36501: LD_VAR 0 1
36505: PUSH
36506: FOR_TO
36507: IFFALSE 36545
// if array1 [ i ] <> array2 [ i ] then
36509: LD_VAR 0 1
36513: PUSH
36514: LD_VAR 0 4
36518: ARRAY
36519: PUSH
36520: LD_VAR 0 2
36524: PUSH
36525: LD_VAR 0 4
36529: ARRAY
36530: NONEQUAL
36531: IFFALSE 36543
// begin result := false ;
36533: LD_ADDR_VAR 0 3
36537: PUSH
36538: LD_INT 0
36540: ST_TO_ADDR
// break ;
36541: GO 36545
// end ;
36543: GO 36506
36545: POP
36546: POP
// end ;
36547: LD_VAR 0 3
36551: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36552: LD_INT 0
36554: PPUSH
36555: PPUSH
36556: PPUSH
// pom := GetBase ( fac ) ;
36557: LD_ADDR_VAR 0 5
36561: PUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL_OW 274
36571: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: LD_VAR 0 2
36581: PUSH
36582: LD_INT 1
36584: ARRAY
36585: PPUSH
36586: LD_VAR 0 2
36590: PUSH
36591: LD_INT 2
36593: ARRAY
36594: PPUSH
36595: LD_VAR 0 2
36599: PUSH
36600: LD_INT 3
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_INT 4
36611: ARRAY
36612: PPUSH
36613: CALL_OW 449
36617: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36618: LD_ADDR_VAR 0 3
36622: PUSH
36623: LD_VAR 0 5
36627: PPUSH
36628: LD_INT 1
36630: PPUSH
36631: CALL_OW 275
36635: PUSH
36636: LD_VAR 0 4
36640: PUSH
36641: LD_INT 1
36643: ARRAY
36644: GREATEREQUAL
36645: PUSH
36646: LD_VAR 0 5
36650: PPUSH
36651: LD_INT 2
36653: PPUSH
36654: CALL_OW 275
36658: PUSH
36659: LD_VAR 0 4
36663: PUSH
36664: LD_INT 2
36666: ARRAY
36667: GREATEREQUAL
36668: AND
36669: PUSH
36670: LD_VAR 0 5
36674: PPUSH
36675: LD_INT 3
36677: PPUSH
36678: CALL_OW 275
36682: PUSH
36683: LD_VAR 0 4
36687: PUSH
36688: LD_INT 3
36690: ARRAY
36691: GREATEREQUAL
36692: AND
36693: ST_TO_ADDR
// end ;
36694: LD_VAR 0 3
36698: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36699: LD_INT 0
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
// pom := GetBase ( building ) ;
36705: LD_ADDR_VAR 0 3
36709: PUSH
36710: LD_VAR 0 1
36714: PPUSH
36715: CALL_OW 274
36719: ST_TO_ADDR
// if not pom then
36720: LD_VAR 0 3
36724: NOT
36725: IFFALSE 36729
// exit ;
36727: GO 36899
// btype := GetBType ( building ) ;
36729: LD_ADDR_VAR 0 5
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 266
36743: ST_TO_ADDR
// if btype = b_armoury then
36744: LD_VAR 0 5
36748: PUSH
36749: LD_INT 4
36751: EQUAL
36752: IFFALSE 36762
// btype := b_barracks ;
36754: LD_ADDR_VAR 0 5
36758: PUSH
36759: LD_INT 5
36761: ST_TO_ADDR
// if btype = b_depot then
36762: LD_VAR 0 5
36766: PUSH
36767: LD_INT 0
36769: EQUAL
36770: IFFALSE 36780
// btype := b_warehouse ;
36772: LD_ADDR_VAR 0 5
36776: PUSH
36777: LD_INT 1
36779: ST_TO_ADDR
// if btype = b_workshop then
36780: LD_VAR 0 5
36784: PUSH
36785: LD_INT 2
36787: EQUAL
36788: IFFALSE 36798
// btype := b_factory ;
36790: LD_ADDR_VAR 0 5
36794: PUSH
36795: LD_INT 3
36797: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36798: LD_ADDR_VAR 0 4
36802: PUSH
36803: LD_VAR 0 5
36807: PPUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 248
36817: PPUSH
36818: CALL_OW 450
36822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36823: LD_ADDR_VAR 0 2
36827: PUSH
36828: LD_VAR 0 3
36832: PPUSH
36833: LD_INT 1
36835: PPUSH
36836: CALL_OW 275
36840: PUSH
36841: LD_VAR 0 4
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: GREATEREQUAL
36850: PUSH
36851: LD_VAR 0 3
36855: PPUSH
36856: LD_INT 2
36858: PPUSH
36859: CALL_OW 275
36863: PUSH
36864: LD_VAR 0 4
36868: PUSH
36869: LD_INT 2
36871: ARRAY
36872: GREATEREQUAL
36873: AND
36874: PUSH
36875: LD_VAR 0 3
36879: PPUSH
36880: LD_INT 3
36882: PPUSH
36883: CALL_OW 275
36887: PUSH
36888: LD_VAR 0 4
36892: PUSH
36893: LD_INT 3
36895: ARRAY
36896: GREATEREQUAL
36897: AND
36898: ST_TO_ADDR
// end ;
36899: LD_VAR 0 2
36903: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36904: LD_INT 0
36906: PPUSH
36907: PPUSH
36908: PPUSH
// pom := GetBase ( building ) ;
36909: LD_ADDR_VAR 0 4
36913: PUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 274
36923: ST_TO_ADDR
// if not pom then
36924: LD_VAR 0 4
36928: NOT
36929: IFFALSE 36933
// exit ;
36931: GO 37034
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36933: LD_ADDR_VAR 0 5
36937: PUSH
36938: LD_VAR 0 2
36942: PPUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 248
36952: PPUSH
36953: CALL_OW 450
36957: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36958: LD_ADDR_VAR 0 3
36962: PUSH
36963: LD_VAR 0 4
36967: PPUSH
36968: LD_INT 1
36970: PPUSH
36971: CALL_OW 275
36975: PUSH
36976: LD_VAR 0 5
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: GREATEREQUAL
36985: PUSH
36986: LD_VAR 0 4
36990: PPUSH
36991: LD_INT 2
36993: PPUSH
36994: CALL_OW 275
36998: PUSH
36999: LD_VAR 0 5
37003: PUSH
37004: LD_INT 2
37006: ARRAY
37007: GREATEREQUAL
37008: AND
37009: PUSH
37010: LD_VAR 0 4
37014: PPUSH
37015: LD_INT 3
37017: PPUSH
37018: CALL_OW 275
37022: PUSH
37023: LD_VAR 0 5
37027: PUSH
37028: LD_INT 3
37030: ARRAY
37031: GREATEREQUAL
37032: AND
37033: ST_TO_ADDR
// end ;
37034: LD_VAR 0 3
37038: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37039: LD_INT 0
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
37051: PPUSH
// result := false ;
37052: LD_ADDR_VAR 0 8
37056: PUSH
37057: LD_INT 0
37059: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37060: LD_VAR 0 5
37064: NOT
37065: PUSH
37066: LD_VAR 0 1
37070: NOT
37071: OR
37072: PUSH
37073: LD_VAR 0 2
37077: NOT
37078: OR
37079: PUSH
37080: LD_VAR 0 3
37084: NOT
37085: OR
37086: IFFALSE 37090
// exit ;
37088: GO 37904
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37090: LD_ADDR_VAR 0 14
37094: PUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: LD_VAR 0 2
37104: PPUSH
37105: LD_VAR 0 3
37109: PPUSH
37110: LD_VAR 0 4
37114: PPUSH
37115: LD_VAR 0 5
37119: PUSH
37120: LD_INT 1
37122: ARRAY
37123: PPUSH
37124: CALL_OW 248
37128: PPUSH
37129: LD_INT 0
37131: PPUSH
37132: CALL 39157 0 6
37136: ST_TO_ADDR
// if not hexes then
37137: LD_VAR 0 14
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 37904
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37146: LD_ADDR_VAR 0 17
37150: PUSH
37151: LD_VAR 0 5
37155: PPUSH
37156: LD_INT 22
37158: PUSH
37159: LD_VAR 0 13
37163: PPUSH
37164: CALL_OW 255
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 30
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 72
37209: ST_TO_ADDR
// for i = 1 to hexes do
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: DOUBLE
37216: LD_INT 1
37218: DEC
37219: ST_TO_ADDR
37220: LD_VAR 0 14
37224: PUSH
37225: FOR_TO
37226: IFFALSE 37902
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37228: LD_ADDR_VAR 0 13
37232: PUSH
37233: LD_VAR 0 14
37237: PUSH
37238: LD_VAR 0 9
37242: ARRAY
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PPUSH
37248: LD_VAR 0 14
37252: PUSH
37253: LD_VAR 0 9
37257: ARRAY
37258: PUSH
37259: LD_INT 2
37261: ARRAY
37262: PPUSH
37263: CALL_OW 428
37267: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37268: LD_VAR 0 14
37272: PUSH
37273: LD_VAR 0 9
37277: ARRAY
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: PPUSH
37283: LD_VAR 0 14
37287: PUSH
37288: LD_VAR 0 9
37292: ARRAY
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: CALL_OW 351
37302: PUSH
37303: LD_VAR 0 14
37307: PUSH
37308: LD_VAR 0 9
37312: ARRAY
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: LD_VAR 0 14
37322: PUSH
37323: LD_VAR 0 9
37327: ARRAY
37328: PUSH
37329: LD_INT 2
37331: ARRAY
37332: PPUSH
37333: CALL_OW 488
37337: NOT
37338: OR
37339: PUSH
37340: LD_VAR 0 13
37344: PPUSH
37345: CALL_OW 247
37349: PUSH
37350: LD_INT 3
37352: EQUAL
37353: OR
37354: IFFALSE 37360
// exit ;
37356: POP
37357: POP
37358: GO 37904
// if not tmp then
37360: LD_VAR 0 13
37364: NOT
37365: IFFALSE 37369
// continue ;
37367: GO 37225
// result := true ;
37369: LD_ADDR_VAR 0 8
37373: PUSH
37374: LD_INT 1
37376: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37377: LD_VAR 0 6
37381: PUSH
37382: LD_VAR 0 13
37386: PPUSH
37387: CALL_OW 247
37391: PUSH
37392: LD_INT 2
37394: EQUAL
37395: AND
37396: PUSH
37397: LD_VAR 0 13
37401: PPUSH
37402: CALL_OW 263
37406: PUSH
37407: LD_INT 1
37409: EQUAL
37410: AND
37411: IFFALSE 37575
// begin if IsDrivenBy ( tmp ) then
37413: LD_VAR 0 13
37417: PPUSH
37418: CALL_OW 311
37422: IFFALSE 37426
// continue ;
37424: GO 37225
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37426: LD_VAR 0 6
37430: PPUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 60
37436: PUSH
37437: EMPTY
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 55
37449: PUSH
37450: EMPTY
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PPUSH
37461: CALL_OW 72
37465: IFFALSE 37573
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37467: LD_ADDR_VAR 0 18
37471: PUSH
37472: LD_VAR 0 6
37476: PPUSH
37477: LD_INT 3
37479: PUSH
37480: LD_INT 60
37482: PUSH
37483: EMPTY
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 55
37495: PUSH
37496: EMPTY
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PPUSH
37507: CALL_OW 72
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: ST_TO_ADDR
// if IsInUnit ( driver ) then
37516: LD_VAR 0 18
37520: PPUSH
37521: CALL_OW 310
37525: IFFALSE 37536
// ComExit ( driver ) ;
37527: LD_VAR 0 18
37531: PPUSH
37532: CALL 62936 0 1
// AddComEnterUnit ( driver , tmp ) ;
37536: LD_VAR 0 18
37540: PPUSH
37541: LD_VAR 0 13
37545: PPUSH
37546: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37550: LD_VAR 0 18
37554: PPUSH
37555: LD_VAR 0 7
37559: PPUSH
37560: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37564: LD_VAR 0 18
37568: PPUSH
37569: CALL_OW 181
// end ; continue ;
37573: GO 37225
// end ; if not cleaners or not tmp in cleaners then
37575: LD_VAR 0 6
37579: NOT
37580: PUSH
37581: LD_VAR 0 13
37585: PUSH
37586: LD_VAR 0 6
37590: IN
37591: NOT
37592: OR
37593: IFFALSE 37900
// begin if dep then
37595: LD_VAR 0 17
37599: IFFALSE 37735
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37601: LD_ADDR_VAR 0 16
37605: PUSH
37606: LD_VAR 0 17
37610: PUSH
37611: LD_INT 1
37613: ARRAY
37614: PPUSH
37615: CALL_OW 250
37619: PPUSH
37620: LD_VAR 0 17
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PPUSH
37629: CALL_OW 254
37633: PPUSH
37634: LD_INT 5
37636: PPUSH
37637: CALL_OW 272
37641: PUSH
37642: LD_VAR 0 17
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: CALL_OW 251
37655: PPUSH
37656: LD_VAR 0 17
37660: PUSH
37661: LD_INT 1
37663: ARRAY
37664: PPUSH
37665: CALL_OW 254
37669: PPUSH
37670: LD_INT 5
37672: PPUSH
37673: CALL_OW 273
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37682: LD_VAR 0 16
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: PPUSH
37691: LD_VAR 0 16
37695: PUSH
37696: LD_INT 2
37698: ARRAY
37699: PPUSH
37700: CALL_OW 488
37704: IFFALSE 37735
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37706: LD_VAR 0 13
37710: PPUSH
37711: LD_VAR 0 16
37715: PUSH
37716: LD_INT 1
37718: ARRAY
37719: PPUSH
37720: LD_VAR 0 16
37724: PUSH
37725: LD_INT 2
37727: ARRAY
37728: PPUSH
37729: CALL_OW 111
// continue ;
37733: GO 37225
// end ; end ; r := GetDir ( tmp ) ;
37735: LD_ADDR_VAR 0 15
37739: PUSH
37740: LD_VAR 0 13
37744: PPUSH
37745: CALL_OW 254
37749: ST_TO_ADDR
// if r = 5 then
37750: LD_VAR 0 15
37754: PUSH
37755: LD_INT 5
37757: EQUAL
37758: IFFALSE 37768
// r := 0 ;
37760: LD_ADDR_VAR 0 15
37764: PUSH
37765: LD_INT 0
37767: ST_TO_ADDR
// for j = r to 5 do
37768: LD_ADDR_VAR 0 10
37772: PUSH
37773: DOUBLE
37774: LD_VAR 0 15
37778: DEC
37779: ST_TO_ADDR
37780: LD_INT 5
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37898
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37786: LD_ADDR_VAR 0 11
37790: PUSH
37791: LD_VAR 0 13
37795: PPUSH
37796: CALL_OW 250
37800: PPUSH
37801: LD_VAR 0 10
37805: PPUSH
37806: LD_INT 2
37808: PPUSH
37809: CALL_OW 272
37813: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37814: LD_ADDR_VAR 0 12
37818: PUSH
37819: LD_VAR 0 13
37823: PPUSH
37824: CALL_OW 251
37828: PPUSH
37829: LD_VAR 0 10
37833: PPUSH
37834: LD_INT 2
37836: PPUSH
37837: CALL_OW 273
37841: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37842: LD_VAR 0 11
37846: PPUSH
37847: LD_VAR 0 12
37851: PPUSH
37852: CALL_OW 488
37856: PUSH
37857: LD_VAR 0 11
37861: PPUSH
37862: LD_VAR 0 12
37866: PPUSH
37867: CALL_OW 428
37871: NOT
37872: AND
37873: IFFALSE 37896
// begin ComMoveXY ( tmp , _x , _y ) ;
37875: LD_VAR 0 13
37879: PPUSH
37880: LD_VAR 0 11
37884: PPUSH
37885: LD_VAR 0 12
37889: PPUSH
37890: CALL_OW 111
// break ;
37894: GO 37898
// end ; end ;
37896: GO 37783
37898: POP
37899: POP
// end ; end ;
37900: GO 37225
37902: POP
37903: POP
// end ;
37904: LD_VAR 0 8
37908: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37909: LD_INT 0
37911: PPUSH
// result := true ;
37912: LD_ADDR_VAR 0 3
37916: PUSH
37917: LD_INT 1
37919: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37920: LD_VAR 0 2
37924: PUSH
37925: LD_INT 24
37927: DOUBLE
37928: EQUAL
37929: IFTRUE 37939
37931: LD_INT 33
37933: DOUBLE
37934: EQUAL
37935: IFTRUE 37939
37937: GO 37964
37939: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37940: LD_ADDR_VAR 0 3
37944: PUSH
37945: LD_INT 32
37947: PPUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 321
37957: PUSH
37958: LD_INT 2
37960: EQUAL
37961: ST_TO_ADDR
37962: GO 38280
37964: LD_INT 20
37966: DOUBLE
37967: EQUAL
37968: IFTRUE 37972
37970: GO 37997
37972: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37973: LD_ADDR_VAR 0 3
37977: PUSH
37978: LD_INT 6
37980: PPUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 321
37990: PUSH
37991: LD_INT 2
37993: EQUAL
37994: ST_TO_ADDR
37995: GO 38280
37997: LD_INT 22
37999: DOUBLE
38000: EQUAL
38001: IFTRUE 38011
38003: LD_INT 36
38005: DOUBLE
38006: EQUAL
38007: IFTRUE 38011
38009: GO 38036
38011: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_INT 15
38019: PPUSH
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 321
38029: PUSH
38030: LD_INT 2
38032: EQUAL
38033: ST_TO_ADDR
38034: GO 38280
38036: LD_INT 30
38038: DOUBLE
38039: EQUAL
38040: IFTRUE 38044
38042: GO 38069
38044: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38045: LD_ADDR_VAR 0 3
38049: PUSH
38050: LD_INT 20
38052: PPUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL_OW 321
38062: PUSH
38063: LD_INT 2
38065: EQUAL
38066: ST_TO_ADDR
38067: GO 38280
38069: LD_INT 28
38071: DOUBLE
38072: EQUAL
38073: IFTRUE 38083
38075: LD_INT 21
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38083
38081: GO 38108
38083: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38084: LD_ADDR_VAR 0 3
38088: PUSH
38089: LD_INT 21
38091: PPUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 321
38101: PUSH
38102: LD_INT 2
38104: EQUAL
38105: ST_TO_ADDR
38106: GO 38280
38108: LD_INT 16
38110: DOUBLE
38111: EQUAL
38112: IFTRUE 38116
38114: GO 38141
38116: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38117: LD_ADDR_VAR 0 3
38121: PUSH
38122: LD_INT 84
38124: PPUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 321
38134: PUSH
38135: LD_INT 2
38137: EQUAL
38138: ST_TO_ADDR
38139: GO 38280
38141: LD_INT 19
38143: DOUBLE
38144: EQUAL
38145: IFTRUE 38155
38147: LD_INT 23
38149: DOUBLE
38150: EQUAL
38151: IFTRUE 38155
38153: GO 38180
38155: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38156: LD_ADDR_VAR 0 3
38160: PUSH
38161: LD_INT 83
38163: PPUSH
38164: LD_VAR 0 1
38168: PPUSH
38169: CALL_OW 321
38173: PUSH
38174: LD_INT 2
38176: EQUAL
38177: ST_TO_ADDR
38178: GO 38280
38180: LD_INT 17
38182: DOUBLE
38183: EQUAL
38184: IFTRUE 38188
38186: GO 38213
38188: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38189: LD_ADDR_VAR 0 3
38193: PUSH
38194: LD_INT 39
38196: PPUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 321
38206: PUSH
38207: LD_INT 2
38209: EQUAL
38210: ST_TO_ADDR
38211: GO 38280
38213: LD_INT 18
38215: DOUBLE
38216: EQUAL
38217: IFTRUE 38221
38219: GO 38246
38221: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38222: LD_ADDR_VAR 0 3
38226: PUSH
38227: LD_INT 40
38229: PPUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 321
38239: PUSH
38240: LD_INT 2
38242: EQUAL
38243: ST_TO_ADDR
38244: GO 38280
38246: LD_INT 27
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38279
38254: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_INT 35
38262: PPUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 321
38272: PUSH
38273: LD_INT 2
38275: EQUAL
38276: ST_TO_ADDR
38277: GO 38280
38279: POP
// end ;
38280: LD_VAR 0 3
38284: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
// result := false ;
38298: LD_ADDR_VAR 0 6
38302: PUSH
38303: LD_INT 0
38305: ST_TO_ADDR
// if btype = b_depot then
38306: LD_VAR 0 2
38310: PUSH
38311: LD_INT 0
38313: EQUAL
38314: IFFALSE 38326
// begin result := true ;
38316: LD_ADDR_VAR 0 6
38320: PUSH
38321: LD_INT 1
38323: ST_TO_ADDR
// exit ;
38324: GO 39152
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38326: LD_VAR 0 1
38330: NOT
38331: PUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 266
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: IN
38352: NOT
38353: OR
38354: PUSH
38355: LD_VAR 0 2
38359: NOT
38360: OR
38361: PUSH
38362: LD_VAR 0 5
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: LD_INT 4
38381: PUSH
38382: LD_INT 5
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: IN
38393: NOT
38394: OR
38395: PUSH
38396: LD_VAR 0 3
38400: PPUSH
38401: LD_VAR 0 4
38405: PPUSH
38406: CALL_OW 488
38410: NOT
38411: OR
38412: IFFALSE 38416
// exit ;
38414: GO 39152
// side := GetSide ( depot ) ;
38416: LD_ADDR_VAR 0 9
38420: PUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 255
38430: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38431: LD_VAR 0 9
38435: PPUSH
38436: LD_VAR 0 2
38440: PPUSH
38441: CALL 37909 0 2
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 39152
// pom := GetBase ( depot ) ;
38450: LD_ADDR_VAR 0 10
38454: PUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 274
38464: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38465: LD_ADDR_VAR 0 11
38469: PUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 248
38484: PPUSH
38485: CALL_OW 450
38489: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38490: LD_VAR 0 10
38494: PPUSH
38495: LD_INT 1
38497: PPUSH
38498: CALL_OW 275
38502: PUSH
38503: LD_VAR 0 11
38507: PUSH
38508: LD_INT 1
38510: ARRAY
38511: GREATEREQUAL
38512: PUSH
38513: LD_VAR 0 10
38517: PPUSH
38518: LD_INT 2
38520: PPUSH
38521: CALL_OW 275
38525: PUSH
38526: LD_VAR 0 11
38530: PUSH
38531: LD_INT 2
38533: ARRAY
38534: GREATEREQUAL
38535: AND
38536: PUSH
38537: LD_VAR 0 10
38541: PPUSH
38542: LD_INT 3
38544: PPUSH
38545: CALL_OW 275
38549: PUSH
38550: LD_VAR 0 11
38554: PUSH
38555: LD_INT 3
38557: ARRAY
38558: GREATEREQUAL
38559: AND
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 39152
// if GetBType ( depot ) = b_depot then
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 266
38574: PUSH
38575: LD_INT 0
38577: EQUAL
38578: IFFALSE 38590
// dist := 28 else
38580: LD_ADDR_VAR 0 14
38584: PUSH
38585: LD_INT 28
38587: ST_TO_ADDR
38588: GO 38598
// dist := 36 ;
38590: LD_ADDR_VAR 0 14
38594: PUSH
38595: LD_INT 36
38597: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 3
38607: PPUSH
38608: LD_VAR 0 4
38612: PPUSH
38613: CALL_OW 297
38617: PUSH
38618: LD_VAR 0 14
38622: GREATER
38623: IFFALSE 38627
// exit ;
38625: GO 39152
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38627: LD_ADDR_VAR 0 12
38631: PUSH
38632: LD_VAR 0 2
38636: PPUSH
38637: LD_VAR 0 3
38641: PPUSH
38642: LD_VAR 0 4
38646: PPUSH
38647: LD_VAR 0 5
38651: PPUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 248
38661: PPUSH
38662: LD_INT 0
38664: PPUSH
38665: CALL 39157 0 6
38669: ST_TO_ADDR
// if not hexes then
38670: LD_VAR 0 12
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 39152
// hex := GetHexInfo ( x , y ) ;
38679: LD_ADDR_VAR 0 15
38683: PUSH
38684: LD_VAR 0 3
38688: PPUSH
38689: LD_VAR 0 4
38693: PPUSH
38694: CALL_OW 546
38698: ST_TO_ADDR
// if hex [ 1 ] then
38699: LD_VAR 0 15
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: IFFALSE 38711
// exit ;
38709: GO 39152
// height := hex [ 2 ] ;
38711: LD_ADDR_VAR 0 13
38715: PUSH
38716: LD_VAR 0 15
38720: PUSH
38721: LD_INT 2
38723: ARRAY
38724: ST_TO_ADDR
// for i = 1 to hexes do
38725: LD_ADDR_VAR 0 7
38729: PUSH
38730: DOUBLE
38731: LD_INT 1
38733: DEC
38734: ST_TO_ADDR
38735: LD_VAR 0 12
38739: PUSH
38740: FOR_TO
38741: IFFALSE 39071
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38743: LD_VAR 0 12
38747: PUSH
38748: LD_VAR 0 7
38752: ARRAY
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: PPUSH
38758: LD_VAR 0 12
38762: PUSH
38763: LD_VAR 0 7
38767: ARRAY
38768: PUSH
38769: LD_INT 2
38771: ARRAY
38772: PPUSH
38773: CALL_OW 488
38777: NOT
38778: PUSH
38779: LD_VAR 0 12
38783: PUSH
38784: LD_VAR 0 7
38788: ARRAY
38789: PUSH
38790: LD_INT 1
38792: ARRAY
38793: PPUSH
38794: LD_VAR 0 12
38798: PUSH
38799: LD_VAR 0 7
38803: ARRAY
38804: PUSH
38805: LD_INT 2
38807: ARRAY
38808: PPUSH
38809: CALL_OW 428
38813: PUSH
38814: LD_INT 0
38816: GREATER
38817: OR
38818: PUSH
38819: LD_VAR 0 12
38823: PUSH
38824: LD_VAR 0 7
38828: ARRAY
38829: PUSH
38830: LD_INT 1
38832: ARRAY
38833: PPUSH
38834: LD_VAR 0 12
38838: PUSH
38839: LD_VAR 0 7
38843: ARRAY
38844: PUSH
38845: LD_INT 2
38847: ARRAY
38848: PPUSH
38849: CALL_OW 351
38853: OR
38854: IFFALSE 38860
// exit ;
38856: POP
38857: POP
38858: GO 39152
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38860: LD_ADDR_VAR 0 8
38864: PUSH
38865: LD_VAR 0 12
38869: PUSH
38870: LD_VAR 0 7
38874: ARRAY
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: LD_VAR 0 12
38884: PUSH
38885: LD_VAR 0 7
38889: ARRAY
38890: PUSH
38891: LD_INT 2
38893: ARRAY
38894: PPUSH
38895: CALL_OW 546
38899: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38900: LD_VAR 0 8
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: PUSH
38909: LD_VAR 0 8
38913: PUSH
38914: LD_INT 2
38916: ARRAY
38917: PUSH
38918: LD_VAR 0 13
38922: PUSH
38923: LD_INT 2
38925: PLUS
38926: GREATER
38927: OR
38928: PUSH
38929: LD_VAR 0 8
38933: PUSH
38934: LD_INT 2
38936: ARRAY
38937: PUSH
38938: LD_VAR 0 13
38942: PUSH
38943: LD_INT 2
38945: MINUS
38946: LESS
38947: OR
38948: PUSH
38949: LD_VAR 0 8
38953: PUSH
38954: LD_INT 3
38956: ARRAY
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 8
38963: PUSH
38964: LD_INT 9
38966: PUSH
38967: LD_INT 10
38969: PUSH
38970: LD_INT 11
38972: PUSH
38973: LD_INT 12
38975: PUSH
38976: LD_INT 13
38978: PUSH
38979: LD_INT 16
38981: PUSH
38982: LD_INT 17
38984: PUSH
38985: LD_INT 18
38987: PUSH
38988: LD_INT 19
38990: PUSH
38991: LD_INT 20
38993: PUSH
38994: LD_INT 21
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: IN
39012: NOT
39013: OR
39014: PUSH
39015: LD_VAR 0 8
39019: PUSH
39020: LD_INT 5
39022: ARRAY
39023: NOT
39024: OR
39025: PUSH
39026: LD_VAR 0 8
39030: PUSH
39031: LD_INT 6
39033: ARRAY
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 7
39043: PUSH
39044: LD_INT 9
39046: PUSH
39047: LD_INT 10
39049: PUSH
39050: LD_INT 11
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: IN
39061: NOT
39062: OR
39063: IFFALSE 39069
// exit ;
39065: POP
39066: POP
39067: GO 39152
// end ;
39069: GO 38740
39071: POP
39072: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39073: LD_VAR 0 9
39077: PPUSH
39078: LD_VAR 0 3
39082: PPUSH
39083: LD_VAR 0 4
39087: PPUSH
39088: LD_INT 20
39090: PPUSH
39091: CALL 31075 0 4
39095: PUSH
39096: LD_INT 4
39098: ARRAY
39099: IFFALSE 39103
// exit ;
39101: GO 39152
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39103: LD_VAR 0 2
39107: PUSH
39108: LD_INT 29
39110: PUSH
39111: LD_INT 30
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: IN
39118: PUSH
39119: LD_VAR 0 3
39123: PPUSH
39124: LD_VAR 0 4
39128: PPUSH
39129: LD_VAR 0 9
39133: PPUSH
39134: CALL_OW 440
39138: NOT
39139: AND
39140: IFFALSE 39144
// exit ;
39142: GO 39152
// result := true ;
39144: LD_ADDR_VAR 0 6
39148: PUSH
39149: LD_INT 1
39151: ST_TO_ADDR
// end ;
39152: LD_VAR 0 6
39156: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
// result = [ ] ;
39217: LD_ADDR_VAR 0 7
39221: PUSH
39222: EMPTY
39223: ST_TO_ADDR
// temp_list = [ ] ;
39224: LD_ADDR_VAR 0 9
39228: PUSH
39229: EMPTY
39230: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39231: LD_VAR 0 4
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: LD_INT 3
39247: PUSH
39248: LD_INT 4
39250: PUSH
39251: LD_INT 5
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: IN
39262: NOT
39263: PUSH
39264: LD_VAR 0 1
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: IN
39279: PUSH
39280: LD_VAR 0 5
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: IN
39299: NOT
39300: AND
39301: OR
39302: IFFALSE 39306
// exit ;
39304: GO 57697
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 6
39313: PUSH
39314: LD_INT 7
39316: PUSH
39317: LD_INT 8
39319: PUSH
39320: LD_INT 13
39322: PUSH
39323: LD_INT 12
39325: PUSH
39326: LD_INT 15
39328: PUSH
39329: LD_INT 11
39331: PUSH
39332: LD_INT 14
39334: PUSH
39335: LD_INT 10
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: IN
39349: IFFALSE 39359
// btype = b_lab ;
39351: LD_ADDR_VAR 0 1
39355: PUSH
39356: LD_INT 6
39358: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39359: LD_VAR 0 6
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: IN
39378: NOT
39379: PUSH
39380: LD_VAR 0 1
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: LD_INT 6
39399: PUSH
39400: LD_INT 36
39402: PUSH
39403: LD_INT 4
39405: PUSH
39406: LD_INT 5
39408: PUSH
39409: LD_INT 31
39411: PUSH
39412: LD_INT 32
39414: PUSH
39415: LD_INT 33
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: IN
39431: NOT
39432: PUSH
39433: LD_VAR 0 6
39437: PUSH
39438: LD_INT 1
39440: EQUAL
39441: AND
39442: OR
39443: PUSH
39444: LD_VAR 0 1
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: IN
39459: NOT
39460: PUSH
39461: LD_VAR 0 6
39465: PUSH
39466: LD_INT 2
39468: EQUAL
39469: AND
39470: OR
39471: IFFALSE 39481
// mode = 0 ;
39473: LD_ADDR_VAR 0 6
39477: PUSH
39478: LD_INT 0
39480: ST_TO_ADDR
// case mode of 0 :
39481: LD_VAR 0 6
39485: PUSH
39486: LD_INT 0
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39494
39492: GO 50947
39494: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39495: LD_ADDR_VAR 0 11
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 2
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39688: LD_ADDR_VAR 0 12
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 3
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39884: LD_ADDR_VAR 0 13
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 3
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 3
40055: NEG
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40083: LD_ADDR_VAR 0 14
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 3
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40279: LD_ADDR_VAR 0 15
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40472: LD_ADDR_VAR 0 16
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 3
40629: PUSH
40630: LD_INT 3
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40665: LD_ADDR_VAR 0 17
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40895: LD_ADDR_VAR 0 18
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41125: LD_ADDR_VAR 0 19
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41355: LD_ADDR_VAR 0 20
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41585: LD_ADDR_VAR 0 21
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41815: LD_ADDR_VAR 0 22
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42045: LD_ADDR_VAR 0 23
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 3
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42325: LD_ADDR_VAR 0 24
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42601: LD_ADDR_VAR 0 25
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42875: LD_ADDR_VAR 0 26
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43151: LD_ADDR_VAR 0 27
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43431: LD_ADDR_VAR 0 28
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 3
43678: NEG
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43713: LD_ADDR_VAR 0 29
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43992: LD_ADDR_VAR 0 30
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44270: LD_ADDR_VAR 0 31
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 3
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 3
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44548: LD_ADDR_VAR 0 32
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44826: LD_ADDR_VAR 0 33
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 3
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45105: LD_ADDR_VAR 0 34
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45385: LD_ADDR_VAR 0 35
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45497: LD_ADDR_VAR 0 36
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45609: LD_ADDR_VAR 0 37
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45721: LD_ADDR_VAR 0 38
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45833: LD_ADDR_VAR 0 39
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45945: LD_ADDR_VAR 0 40
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46057: LD_ADDR_VAR 0 41
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46407: LD_ADDR_VAR 0 42
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 3
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46757: LD_ADDR_VAR 0 43
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47105: LD_ADDR_VAR 0 44
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 3
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47455: LD_ADDR_VAR 0 45
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 3
47764: NEG
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47805: LD_ADDR_VAR 0 46
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48153: LD_ADDR_VAR 0 47
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48304: LD_ADDR_VAR 0 48
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48451: LD_ADDR_VAR 0 49
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48595: LD_ADDR_VAR 0 50
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48739: LD_ADDR_VAR 0 51
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48886: LD_ADDR_VAR 0 52
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49037: LD_ADDR_VAR 0 53
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49267: LD_ADDR_VAR 0 54
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49497: LD_ADDR_VAR 0 55
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49727: LD_ADDR_VAR 0 56
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49957: LD_ADDR_VAR 0 57
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50187: LD_ADDR_VAR 0 58
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50417: LD_ADDR_VAR 0 59
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50505: LD_ADDR_VAR 0 60
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50593: LD_ADDR_VAR 0 61
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50681: LD_ADDR_VAR 0 62
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50769: LD_ADDR_VAR 0 63
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50857: LD_ADDR_VAR 0 64
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// end ; 1 :
50945: GO 56842
50947: LD_INT 1
50949: DOUBLE
50950: EQUAL
50951: IFTRUE 50955
50953: GO 53578
50955: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50956: LD_ADDR_VAR 0 11
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 3
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51000: LD_ADDR_VAR 0 12
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51041: LD_ADDR_VAR 0 13
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51081: LD_ADDR_VAR 0 14
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51122: LD_ADDR_VAR 0 15
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51166: LD_ADDR_VAR 0 16
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51212: LD_ADDR_VAR 0 17
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51256: LD_ADDR_VAR 0 18
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51297: LD_ADDR_VAR 0 19
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51337: LD_ADDR_VAR 0 20
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51378: LD_ADDR_VAR 0 21
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51422: LD_ADDR_VAR 0 22
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51468: LD_ADDR_VAR 0 23
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51512: LD_ADDR_VAR 0 24
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51553: LD_ADDR_VAR 0 25
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 4
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: LD_INT 4
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51593: LD_ADDR_VAR 0 26
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 4
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51634: LD_ADDR_VAR 0 27
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51678: LD_ADDR_VAR 0 28
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: LD_INT 4
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 4
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51724: LD_ADDR_VAR 0 29
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 3
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 3
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 4
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 5
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 5
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 4
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 6
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 6
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 5
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51879: LD_ADDR_VAR 0 30
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 4
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 4
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 5
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 6
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 6
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52022: LD_ADDR_VAR 0 31
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 4
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 5
52089: PUSH
52090: LD_INT 4
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 5
52099: PUSH
52100: LD_INT 5
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 4
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 6
52119: PUSH
52120: LD_INT 5
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 6
52129: PUSH
52130: LD_INT 6
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 5
52139: PUSH
52140: LD_INT 6
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52161: LD_ADDR_VAR 0 32
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 4
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 4
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 5
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 6
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 6
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 5
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52304: LD_ADDR_VAR 0 33
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 4
52356: NEG
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 4
52367: NEG
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 4
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 5
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 5
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 5
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 6
52424: NEG
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 6
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52459: LD_ADDR_VAR 0 34
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 4
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: NEG
52527: PUSH
52528: LD_INT 4
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: LD_INT 5
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: LD_INT 4
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 5
52562: NEG
52563: PUSH
52564: LD_INT 5
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 5
52574: NEG
52575: PUSH
52576: LD_INT 6
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 6
52586: NEG
52587: PUSH
52588: LD_INT 5
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 6
52598: NEG
52599: PUSH
52600: LD_INT 6
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 41
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52666: LD_ADDR_VAR 0 42
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52707: LD_ADDR_VAR 0 43
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52747: LD_ADDR_VAR 0 44
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52788: LD_ADDR_VAR 0 45
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52832: LD_ADDR_VAR 0 46
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52878: LD_ADDR_VAR 0 47
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52911: LD_ADDR_VAR 0 48
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52942: LD_ADDR_VAR 0 49
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52971: LD_ADDR_VAR 0 50
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53000: LD_ADDR_VAR 0 51
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53031: LD_ADDR_VAR 0 52
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53064: LD_ADDR_VAR 0 53
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53108: LD_ADDR_VAR 0 54
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53149: LD_ADDR_VAR 0 55
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53189: LD_ADDR_VAR 0 56
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53230: LD_ADDR_VAR 0 57
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53274: LD_ADDR_VAR 0 58
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53320: LD_ADDR_VAR 0 59
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53364: LD_ADDR_VAR 0 60
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53405: LD_ADDR_VAR 0 61
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53445: LD_ADDR_VAR 0 62
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53486: LD_ADDR_VAR 0 63
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53530: LD_ADDR_VAR 0 64
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// end ; 2 :
53576: GO 56842
53578: LD_INT 2
53580: DOUBLE
53581: EQUAL
53582: IFTRUE 53586
53584: GO 56841
53586: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53587: LD_ADDR_VAR 0 29
53591: PUSH
53592: LD_INT 4
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 4
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 5
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 5
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 4
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 5
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 4
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 4
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 4
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 5
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 5
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 4
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 5
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 4
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 4
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 4
53949: NEG
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: NEG
53973: PUSH
53974: LD_INT 4
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 5
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: LD_INT 3
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: NEG
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 5
54044: NEG
54045: PUSH
54046: LD_INT 5
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: NEG
54057: PUSH
54058: LD_INT 5
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54125: LD_ADDR_VAR 0 30
54129: PUSH
54130: LD_INT 4
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 4
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 5
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 5
54162: PUSH
54163: LD_INT 5
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: PUSH
54173: LD_INT 5
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 4
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 3
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 5
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: LD_INT 5
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 4
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 4
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: NEG
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 4
54360: NEG
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 5
54371: NEG
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 5
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 5
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: LD_INT 4
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 4
54477: NEG
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 4
54489: NEG
54490: PUSH
54491: LD_INT 4
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 4
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 4
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 5
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 4
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 4
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 5
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: LD_INT 5
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54672: LD_ADDR_VAR 0 31
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 4
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 5
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 5
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 4
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 5
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 4
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 4
54874: NEG
54875: PUSH
54876: LD_INT 4
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 5
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 4
54922: NEG
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: LD_INT 4
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 5
54946: NEG
54947: PUSH
54948: LD_INT 5
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 5
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 5
54970: NEG
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 4
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 4
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 5
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 5
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55222: LD_ADDR_VAR 0 32
55226: PUSH
55227: LD_INT 4
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 4
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 5
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 5
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: LD_INT 4
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 4
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 4
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 5
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 4
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 4
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 5
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 5
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 4
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 5
55654: PUSH
55655: LD_INT 4
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 5
55664: PUSH
55665: LD_INT 5
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: LD_INT 5
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55769: LD_ADDR_VAR 0 33
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: LD_INT 4
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 4
55788: NEG
55789: PUSH
55790: LD_INT 5
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 5
55836: NEG
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: LD_INT 5
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 5
55872: NEG
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 4
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 4
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 5
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 4
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: PUSH
56110: LD_INT 4
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 4
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 4
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 4
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 5
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 5
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 5
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56307: LD_ADDR_VAR 0 34
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 4
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 4
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 4
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 5
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: LD_INT 5
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: PUSH
56530: LD_INT 4
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 5
56539: PUSH
56540: LD_INT 5
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: PUSH
56550: LD_INT 5
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 4
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 5
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 5
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 4
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 4
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 4
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 5
56748: NEG
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 5
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 5
56771: NEG
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: NEG
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// end ; end ;
56839: GO 56842
56841: POP
// case btype of b_depot , b_warehouse :
56842: LD_VAR 0 1
56846: PUSH
56847: LD_INT 0
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56861
56853: LD_INT 1
56855: DOUBLE
56856: EQUAL
56857: IFTRUE 56861
56859: GO 57062
56861: POP
// case nation of nation_american :
56862: LD_VAR 0 5
56866: PUSH
56867: LD_INT 1
56869: DOUBLE
56870: EQUAL
56871: IFTRUE 56875
56873: GO 56931
56875: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56876: LD_ADDR_VAR 0 9
56880: PUSH
56881: LD_VAR 0 11
56885: PUSH
56886: LD_VAR 0 12
56890: PUSH
56891: LD_VAR 0 13
56895: PUSH
56896: LD_VAR 0 14
56900: PUSH
56901: LD_VAR 0 15
56905: PUSH
56906: LD_VAR 0 16
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: PUSH
56919: LD_VAR 0 4
56923: PUSH
56924: LD_INT 1
56926: PLUS
56927: ARRAY
56928: ST_TO_ADDR
56929: GO 57060
56931: LD_INT 2
56933: DOUBLE
56934: EQUAL
56935: IFTRUE 56939
56937: GO 56995
56939: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56940: LD_ADDR_VAR 0 9
56944: PUSH
56945: LD_VAR 0 17
56949: PUSH
56950: LD_VAR 0 18
56954: PUSH
56955: LD_VAR 0 19
56959: PUSH
56960: LD_VAR 0 20
56964: PUSH
56965: LD_VAR 0 21
56969: PUSH
56970: LD_VAR 0 22
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: LD_VAR 0 4
56987: PUSH
56988: LD_INT 1
56990: PLUS
56991: ARRAY
56992: ST_TO_ADDR
56993: GO 57060
56995: LD_INT 3
56997: DOUBLE
56998: EQUAL
56999: IFTRUE 57003
57001: GO 57059
57003: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57004: LD_ADDR_VAR 0 9
57008: PUSH
57009: LD_VAR 0 23
57013: PUSH
57014: LD_VAR 0 24
57018: PUSH
57019: LD_VAR 0 25
57023: PUSH
57024: LD_VAR 0 26
57028: PUSH
57029: LD_VAR 0 27
57033: PUSH
57034: LD_VAR 0 28
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: PUSH
57047: LD_VAR 0 4
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: ARRAY
57056: ST_TO_ADDR
57057: GO 57060
57059: POP
57060: GO 57615
57062: LD_INT 2
57064: DOUBLE
57065: EQUAL
57066: IFTRUE 57076
57068: LD_INT 3
57070: DOUBLE
57071: EQUAL
57072: IFTRUE 57076
57074: GO 57132
57076: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57077: LD_ADDR_VAR 0 9
57081: PUSH
57082: LD_VAR 0 29
57086: PUSH
57087: LD_VAR 0 30
57091: PUSH
57092: LD_VAR 0 31
57096: PUSH
57097: LD_VAR 0 32
57101: PUSH
57102: LD_VAR 0 33
57106: PUSH
57107: LD_VAR 0 34
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: PUSH
57120: LD_VAR 0 4
57124: PUSH
57125: LD_INT 1
57127: PLUS
57128: ARRAY
57129: ST_TO_ADDR
57130: GO 57615
57132: LD_INT 16
57134: DOUBLE
57135: EQUAL
57136: IFTRUE 57194
57138: LD_INT 17
57140: DOUBLE
57141: EQUAL
57142: IFTRUE 57194
57144: LD_INT 18
57146: DOUBLE
57147: EQUAL
57148: IFTRUE 57194
57150: LD_INT 19
57152: DOUBLE
57153: EQUAL
57154: IFTRUE 57194
57156: LD_INT 22
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57194
57162: LD_INT 20
57164: DOUBLE
57165: EQUAL
57166: IFTRUE 57194
57168: LD_INT 21
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57194
57174: LD_INT 23
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57194
57180: LD_INT 24
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57194
57186: LD_INT 25
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57194
57192: GO 57250
57194: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57195: LD_ADDR_VAR 0 9
57199: PUSH
57200: LD_VAR 0 35
57204: PUSH
57205: LD_VAR 0 36
57209: PUSH
57210: LD_VAR 0 37
57214: PUSH
57215: LD_VAR 0 38
57219: PUSH
57220: LD_VAR 0 39
57224: PUSH
57225: LD_VAR 0 40
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: PUSH
57238: LD_VAR 0 4
57242: PUSH
57243: LD_INT 1
57245: PLUS
57246: ARRAY
57247: ST_TO_ADDR
57248: GO 57615
57250: LD_INT 6
57252: DOUBLE
57253: EQUAL
57254: IFTRUE 57306
57256: LD_INT 7
57258: DOUBLE
57259: EQUAL
57260: IFTRUE 57306
57262: LD_INT 8
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57306
57268: LD_INT 13
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57306
57274: LD_INT 12
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57306
57280: LD_INT 15
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57306
57286: LD_INT 11
57288: DOUBLE
57289: EQUAL
57290: IFTRUE 57306
57292: LD_INT 14
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57306
57298: LD_INT 10
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57306
57304: GO 57362
57306: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57307: LD_ADDR_VAR 0 9
57311: PUSH
57312: LD_VAR 0 41
57316: PUSH
57317: LD_VAR 0 42
57321: PUSH
57322: LD_VAR 0 43
57326: PUSH
57327: LD_VAR 0 44
57331: PUSH
57332: LD_VAR 0 45
57336: PUSH
57337: LD_VAR 0 46
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: PUSH
57350: LD_VAR 0 4
57354: PUSH
57355: LD_INT 1
57357: PLUS
57358: ARRAY
57359: ST_TO_ADDR
57360: GO 57615
57362: LD_INT 36
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57370
57368: GO 57426
57370: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57371: LD_ADDR_VAR 0 9
57375: PUSH
57376: LD_VAR 0 47
57380: PUSH
57381: LD_VAR 0 48
57385: PUSH
57386: LD_VAR 0 49
57390: PUSH
57391: LD_VAR 0 50
57395: PUSH
57396: LD_VAR 0 51
57400: PUSH
57401: LD_VAR 0 52
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: PUSH
57414: LD_VAR 0 4
57418: PUSH
57419: LD_INT 1
57421: PLUS
57422: ARRAY
57423: ST_TO_ADDR
57424: GO 57615
57426: LD_INT 4
57428: DOUBLE
57429: EQUAL
57430: IFTRUE 57452
57432: LD_INT 5
57434: DOUBLE
57435: EQUAL
57436: IFTRUE 57452
57438: LD_INT 34
57440: DOUBLE
57441: EQUAL
57442: IFTRUE 57452
57444: LD_INT 37
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57452
57450: GO 57508
57452: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57453: LD_ADDR_VAR 0 9
57457: PUSH
57458: LD_VAR 0 53
57462: PUSH
57463: LD_VAR 0 54
57467: PUSH
57468: LD_VAR 0 55
57472: PUSH
57473: LD_VAR 0 56
57477: PUSH
57478: LD_VAR 0 57
57482: PUSH
57483: LD_VAR 0 58
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: PUSH
57496: LD_VAR 0 4
57500: PUSH
57501: LD_INT 1
57503: PLUS
57504: ARRAY
57505: ST_TO_ADDR
57506: GO 57615
57508: LD_INT 31
57510: DOUBLE
57511: EQUAL
57512: IFTRUE 57558
57514: LD_INT 32
57516: DOUBLE
57517: EQUAL
57518: IFTRUE 57558
57520: LD_INT 33
57522: DOUBLE
57523: EQUAL
57524: IFTRUE 57558
57526: LD_INT 27
57528: DOUBLE
57529: EQUAL
57530: IFTRUE 57558
57532: LD_INT 26
57534: DOUBLE
57535: EQUAL
57536: IFTRUE 57558
57538: LD_INT 28
57540: DOUBLE
57541: EQUAL
57542: IFTRUE 57558
57544: LD_INT 29
57546: DOUBLE
57547: EQUAL
57548: IFTRUE 57558
57550: LD_INT 30
57552: DOUBLE
57553: EQUAL
57554: IFTRUE 57558
57556: GO 57614
57558: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57559: LD_ADDR_VAR 0 9
57563: PUSH
57564: LD_VAR 0 59
57568: PUSH
57569: LD_VAR 0 60
57573: PUSH
57574: LD_VAR 0 61
57578: PUSH
57579: LD_VAR 0 62
57583: PUSH
57584: LD_VAR 0 63
57588: PUSH
57589: LD_VAR 0 64
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: PUSH
57602: LD_VAR 0 4
57606: PUSH
57607: LD_INT 1
57609: PLUS
57610: ARRAY
57611: ST_TO_ADDR
57612: GO 57615
57614: POP
// temp_list2 = [ ] ;
57615: LD_ADDR_VAR 0 10
57619: PUSH
57620: EMPTY
57621: ST_TO_ADDR
// for i in temp_list do
57622: LD_ADDR_VAR 0 8
57626: PUSH
57627: LD_VAR 0 9
57631: PUSH
57632: FOR_IN
57633: IFFALSE 57685
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57635: LD_ADDR_VAR 0 10
57639: PUSH
57640: LD_VAR 0 10
57644: PUSH
57645: LD_VAR 0 8
57649: PUSH
57650: LD_INT 1
57652: ARRAY
57653: PUSH
57654: LD_VAR 0 2
57658: PLUS
57659: PUSH
57660: LD_VAR 0 8
57664: PUSH
57665: LD_INT 2
57667: ARRAY
57668: PUSH
57669: LD_VAR 0 3
57673: PLUS
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: ADD
57682: ST_TO_ADDR
57683: GO 57632
57685: POP
57686: POP
// result = temp_list2 ;
57687: LD_ADDR_VAR 0 7
57691: PUSH
57692: LD_VAR 0 10
57696: ST_TO_ADDR
// end ;
57697: LD_VAR 0 7
57701: RET
// export function EnemyInRange ( unit , dist ) ; begin
57702: LD_INT 0
57704: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57705: LD_ADDR_VAR 0 3
57709: PUSH
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 255
57719: PPUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 250
57729: PPUSH
57730: LD_VAR 0 1
57734: PPUSH
57735: CALL_OW 251
57739: PPUSH
57740: LD_VAR 0 2
57744: PPUSH
57745: CALL 31075 0 4
57749: PUSH
57750: LD_INT 4
57752: ARRAY
57753: ST_TO_ADDR
// end ;
57754: LD_VAR 0 3
57758: RET
// export function PlayerSeeMe ( unit ) ; begin
57759: LD_INT 0
57761: PPUSH
// result := See ( your_side , unit ) ;
57762: LD_ADDR_VAR 0 2
57766: PUSH
57767: LD_OWVAR 2
57771: PPUSH
57772: LD_VAR 0 1
57776: PPUSH
57777: CALL_OW 292
57781: ST_TO_ADDR
// end ;
57782: LD_VAR 0 2
57786: RET
// export function ReverseDir ( unit ) ; begin
57787: LD_INT 0
57789: PPUSH
// if not unit then
57790: LD_VAR 0 1
57794: NOT
57795: IFFALSE 57799
// exit ;
57797: GO 57822
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57799: LD_ADDR_VAR 0 2
57803: PUSH
57804: LD_VAR 0 1
57808: PPUSH
57809: CALL_OW 254
57813: PUSH
57814: LD_INT 3
57816: PLUS
57817: PUSH
57818: LD_INT 6
57820: MOD
57821: ST_TO_ADDR
// end ;
57822: LD_VAR 0 2
57826: RET
// export function ReverseArray ( array ) ; var i ; begin
57827: LD_INT 0
57829: PPUSH
57830: PPUSH
// if not array then
57831: LD_VAR 0 1
57835: NOT
57836: IFFALSE 57840
// exit ;
57838: GO 57895
// result := [ ] ;
57840: LD_ADDR_VAR 0 2
57844: PUSH
57845: EMPTY
57846: ST_TO_ADDR
// for i := array downto 1 do
57847: LD_ADDR_VAR 0 3
57851: PUSH
57852: DOUBLE
57853: LD_VAR 0 1
57857: INC
57858: ST_TO_ADDR
57859: LD_INT 1
57861: PUSH
57862: FOR_DOWNTO
57863: IFFALSE 57893
// result := Join ( result , array [ i ] ) ;
57865: LD_ADDR_VAR 0 2
57869: PUSH
57870: LD_VAR 0 2
57874: PPUSH
57875: LD_VAR 0 1
57879: PUSH
57880: LD_VAR 0 3
57884: ARRAY
57885: PPUSH
57886: CALL 62538 0 2
57890: ST_TO_ADDR
57891: GO 57862
57893: POP
57894: POP
// end ;
57895: LD_VAR 0 2
57899: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
57904: PPUSH
57905: PPUSH
57906: PPUSH
57907: PPUSH
// if not unit or not hexes then
57908: LD_VAR 0 1
57912: NOT
57913: PUSH
57914: LD_VAR 0 2
57918: NOT
57919: OR
57920: IFFALSE 57924
// exit ;
57922: GO 58047
// dist := 9999 ;
57924: LD_ADDR_VAR 0 5
57928: PUSH
57929: LD_INT 9999
57931: ST_TO_ADDR
// for i = 1 to hexes do
57932: LD_ADDR_VAR 0 4
57936: PUSH
57937: DOUBLE
57938: LD_INT 1
57940: DEC
57941: ST_TO_ADDR
57942: LD_VAR 0 2
57946: PUSH
57947: FOR_TO
57948: IFFALSE 58035
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57950: LD_ADDR_VAR 0 6
57954: PUSH
57955: LD_VAR 0 1
57959: PPUSH
57960: LD_VAR 0 2
57964: PUSH
57965: LD_VAR 0 4
57969: ARRAY
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PPUSH
57975: LD_VAR 0 2
57979: PUSH
57980: LD_VAR 0 4
57984: ARRAY
57985: PUSH
57986: LD_INT 2
57988: ARRAY
57989: PPUSH
57990: CALL_OW 297
57994: ST_TO_ADDR
// if tdist < dist then
57995: LD_VAR 0 6
57999: PUSH
58000: LD_VAR 0 5
58004: LESS
58005: IFFALSE 58033
// begin hex := hexes [ i ] ;
58007: LD_ADDR_VAR 0 8
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_VAR 0 4
58021: ARRAY
58022: ST_TO_ADDR
// dist := tdist ;
58023: LD_ADDR_VAR 0 5
58027: PUSH
58028: LD_VAR 0 6
58032: ST_TO_ADDR
// end ; end ;
58033: GO 57947
58035: POP
58036: POP
// result := hex ;
58037: LD_ADDR_VAR 0 3
58041: PUSH
58042: LD_VAR 0 8
58046: ST_TO_ADDR
// end ;
58047: LD_VAR 0 3
58051: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58052: LD_INT 0
58054: PPUSH
58055: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58056: LD_VAR 0 1
58060: NOT
58061: PUSH
58062: LD_VAR 0 1
58066: PUSH
58067: LD_INT 21
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 23
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PPUSH
58091: CALL_OW 69
58095: IN
58096: NOT
58097: OR
58098: IFFALSE 58102
// exit ;
58100: GO 58149
// for i = 1 to 3 do
58102: LD_ADDR_VAR 0 3
58106: PUSH
58107: DOUBLE
58108: LD_INT 1
58110: DEC
58111: ST_TO_ADDR
58112: LD_INT 3
58114: PUSH
58115: FOR_TO
58116: IFFALSE 58147
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58118: LD_VAR 0 1
58122: PPUSH
58123: CALL_OW 250
58127: PPUSH
58128: LD_VAR 0 1
58132: PPUSH
58133: CALL_OW 251
58137: PPUSH
58138: LD_INT 1
58140: PPUSH
58141: CALL_OW 453
58145: GO 58115
58147: POP
58148: POP
// end ;
58149: LD_VAR 0 2
58153: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58154: LD_INT 0
58156: PPUSH
58157: PPUSH
58158: PPUSH
58159: PPUSH
58160: PPUSH
58161: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58162: LD_VAR 0 1
58166: NOT
58167: PUSH
58168: LD_VAR 0 2
58172: NOT
58173: OR
58174: PUSH
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 314
58184: OR
58185: IFFALSE 58189
// exit ;
58187: GO 58656
// if GetLives ( i ) < 250 then
58189: LD_VAR 0 4
58193: PPUSH
58194: CALL_OW 256
58198: PUSH
58199: LD_INT 250
58201: LESS
58202: IFFALSE 58215
// begin ComAutodestruct ( i ) ;
58204: LD_VAR 0 4
58208: PPUSH
58209: CALL 58052 0 1
// exit ;
58213: GO 58656
// end ; x := GetX ( enemy_unit ) ;
58215: LD_ADDR_VAR 0 7
58219: PUSH
58220: LD_VAR 0 2
58224: PPUSH
58225: CALL_OW 250
58229: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58230: LD_ADDR_VAR 0 8
58234: PUSH
58235: LD_VAR 0 2
58239: PPUSH
58240: CALL_OW 251
58244: ST_TO_ADDR
// if not x or not y then
58245: LD_VAR 0 7
58249: NOT
58250: PUSH
58251: LD_VAR 0 8
58255: NOT
58256: OR
58257: IFFALSE 58261
// exit ;
58259: GO 58656
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58261: LD_ADDR_VAR 0 6
58265: PUSH
58266: LD_VAR 0 7
58270: PPUSH
58271: LD_INT 0
58273: PPUSH
58274: LD_INT 4
58276: PPUSH
58277: CALL_OW 272
58281: PUSH
58282: LD_VAR 0 8
58286: PPUSH
58287: LD_INT 0
58289: PPUSH
58290: LD_INT 4
58292: PPUSH
58293: CALL_OW 273
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_VAR 0 7
58306: PPUSH
58307: LD_INT 1
58309: PPUSH
58310: LD_INT 4
58312: PPUSH
58313: CALL_OW 272
58317: PUSH
58318: LD_VAR 0 8
58322: PPUSH
58323: LD_INT 1
58325: PPUSH
58326: LD_INT 4
58328: PPUSH
58329: CALL_OW 273
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_VAR 0 7
58342: PPUSH
58343: LD_INT 2
58345: PPUSH
58346: LD_INT 4
58348: PPUSH
58349: CALL_OW 272
58353: PUSH
58354: LD_VAR 0 8
58358: PPUSH
58359: LD_INT 2
58361: PPUSH
58362: LD_INT 4
58364: PPUSH
58365: CALL_OW 273
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_VAR 0 7
58378: PPUSH
58379: LD_INT 3
58381: PPUSH
58382: LD_INT 4
58384: PPUSH
58385: CALL_OW 272
58389: PUSH
58390: LD_VAR 0 8
58394: PPUSH
58395: LD_INT 3
58397: PPUSH
58398: LD_INT 4
58400: PPUSH
58401: CALL_OW 273
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_VAR 0 7
58414: PPUSH
58415: LD_INT 4
58417: PPUSH
58418: LD_INT 4
58420: PPUSH
58421: CALL_OW 272
58425: PUSH
58426: LD_VAR 0 8
58430: PPUSH
58431: LD_INT 4
58433: PPUSH
58434: LD_INT 4
58436: PPUSH
58437: CALL_OW 273
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_VAR 0 7
58450: PPUSH
58451: LD_INT 5
58453: PPUSH
58454: LD_INT 4
58456: PPUSH
58457: CALL_OW 272
58461: PUSH
58462: LD_VAR 0 8
58466: PPUSH
58467: LD_INT 5
58469: PPUSH
58470: LD_INT 4
58472: PPUSH
58473: CALL_OW 273
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// for i = tmp downto 1 do
58490: LD_ADDR_VAR 0 4
58494: PUSH
58495: DOUBLE
58496: LD_VAR 0 6
58500: INC
58501: ST_TO_ADDR
58502: LD_INT 1
58504: PUSH
58505: FOR_DOWNTO
58506: IFFALSE 58607
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58508: LD_VAR 0 6
58512: PUSH
58513: LD_VAR 0 4
58517: ARRAY
58518: PUSH
58519: LD_INT 1
58521: ARRAY
58522: PPUSH
58523: LD_VAR 0 6
58527: PUSH
58528: LD_VAR 0 4
58532: ARRAY
58533: PUSH
58534: LD_INT 2
58536: ARRAY
58537: PPUSH
58538: CALL_OW 488
58542: NOT
58543: PUSH
58544: LD_VAR 0 6
58548: PUSH
58549: LD_VAR 0 4
58553: ARRAY
58554: PUSH
58555: LD_INT 1
58557: ARRAY
58558: PPUSH
58559: LD_VAR 0 6
58563: PUSH
58564: LD_VAR 0 4
58568: ARRAY
58569: PUSH
58570: LD_INT 2
58572: ARRAY
58573: PPUSH
58574: CALL_OW 428
58578: PUSH
58579: LD_INT 0
58581: NONEQUAL
58582: OR
58583: IFFALSE 58605
// tmp := Delete ( tmp , i ) ;
58585: LD_ADDR_VAR 0 6
58589: PUSH
58590: LD_VAR 0 6
58594: PPUSH
58595: LD_VAR 0 4
58599: PPUSH
58600: CALL_OW 3
58604: ST_TO_ADDR
58605: GO 58505
58607: POP
58608: POP
// j := GetClosestHex ( unit , tmp ) ;
58609: LD_ADDR_VAR 0 5
58613: PUSH
58614: LD_VAR 0 1
58618: PPUSH
58619: LD_VAR 0 6
58623: PPUSH
58624: CALL 57900 0 2
58628: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58629: LD_VAR 0 1
58633: PPUSH
58634: LD_VAR 0 5
58638: PUSH
58639: LD_INT 1
58641: ARRAY
58642: PPUSH
58643: LD_VAR 0 5
58647: PUSH
58648: LD_INT 2
58650: ARRAY
58651: PPUSH
58652: CALL_OW 111
// end ;
58656: LD_VAR 0 3
58660: RET
// export function PrepareApemanSoldier ( ) ; begin
58661: LD_INT 0
58663: PPUSH
// uc_nation := 0 ;
58664: LD_ADDR_OWVAR 21
58668: PUSH
58669: LD_INT 0
58671: ST_TO_ADDR
// hc_sex := sex_male ;
58672: LD_ADDR_OWVAR 27
58676: PUSH
58677: LD_INT 1
58679: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58680: LD_ADDR_OWVAR 28
58684: PUSH
58685: LD_INT 15
58687: ST_TO_ADDR
// hc_gallery :=  ;
58688: LD_ADDR_OWVAR 33
58692: PUSH
58693: LD_STRING 
58695: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58696: LD_ADDR_OWVAR 31
58700: PUSH
58701: LD_INT 0
58703: PPUSH
58704: LD_INT 3
58706: PPUSH
58707: CALL_OW 12
58711: PUSH
58712: LD_INT 0
58714: PPUSH
58715: LD_INT 3
58717: PPUSH
58718: CALL_OW 12
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: ST_TO_ADDR
// end ;
58735: LD_VAR 0 1
58739: RET
// export function PrepareApemanEngineer ( ) ; begin
58740: LD_INT 0
58742: PPUSH
// uc_nation := 0 ;
58743: LD_ADDR_OWVAR 21
58747: PUSH
58748: LD_INT 0
58750: ST_TO_ADDR
// hc_sex := sex_male ;
58751: LD_ADDR_OWVAR 27
58755: PUSH
58756: LD_INT 1
58758: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58759: LD_ADDR_OWVAR 28
58763: PUSH
58764: LD_INT 16
58766: ST_TO_ADDR
// hc_gallery :=  ;
58767: LD_ADDR_OWVAR 33
58771: PUSH
58772: LD_STRING 
58774: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58775: LD_ADDR_OWVAR 31
58779: PUSH
58780: LD_INT 0
58782: PPUSH
58783: LD_INT 3
58785: PPUSH
58786: CALL_OW 12
58790: PUSH
58791: LD_INT 0
58793: PPUSH
58794: LD_INT 3
58796: PPUSH
58797: CALL_OW 12
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// end ;
58814: LD_VAR 0 1
58818: RET
// export function PrepareApeman ( agressivity ) ; begin
58819: LD_INT 0
58821: PPUSH
// uc_side := 0 ;
58822: LD_ADDR_OWVAR 20
58826: PUSH
58827: LD_INT 0
58829: ST_TO_ADDR
// uc_nation := 0 ;
58830: LD_ADDR_OWVAR 21
58834: PUSH
58835: LD_INT 0
58837: ST_TO_ADDR
// hc_sex := sex_male ;
58838: LD_ADDR_OWVAR 27
58842: PUSH
58843: LD_INT 1
58845: ST_TO_ADDR
// hc_class := class_apeman ;
58846: LD_ADDR_OWVAR 28
58850: PUSH
58851: LD_INT 12
58853: ST_TO_ADDR
// hc_gallery :=  ;
58854: LD_ADDR_OWVAR 33
58858: PUSH
58859: LD_STRING 
58861: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58862: LD_ADDR_OWVAR 35
58866: PUSH
58867: LD_VAR 0 1
58871: NEG
58872: PPUSH
58873: LD_VAR 0 1
58877: PPUSH
58878: CALL_OW 12
58882: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58883: LD_ADDR_OWVAR 31
58887: PUSH
58888: LD_INT 0
58890: PPUSH
58891: LD_INT 3
58893: PPUSH
58894: CALL_OW 12
58898: PUSH
58899: LD_INT 0
58901: PPUSH
58902: LD_INT 3
58904: PPUSH
58905: CALL_OW 12
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// end ;
58922: LD_VAR 0 2
58926: RET
// export function PrepareTiger ( agressivity ) ; begin
58927: LD_INT 0
58929: PPUSH
// uc_side := 0 ;
58930: LD_ADDR_OWVAR 20
58934: PUSH
58935: LD_INT 0
58937: ST_TO_ADDR
// uc_nation := 0 ;
58938: LD_ADDR_OWVAR 21
58942: PUSH
58943: LD_INT 0
58945: ST_TO_ADDR
// hc_class := class_tiger ;
58946: LD_ADDR_OWVAR 28
58950: PUSH
58951: LD_INT 14
58953: ST_TO_ADDR
// hc_gallery :=  ;
58954: LD_ADDR_OWVAR 33
58958: PUSH
58959: LD_STRING 
58961: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58962: LD_ADDR_OWVAR 35
58966: PUSH
58967: LD_VAR 0 1
58971: NEG
58972: PPUSH
58973: LD_VAR 0 1
58977: PPUSH
58978: CALL_OW 12
58982: ST_TO_ADDR
// end ;
58983: LD_VAR 0 2
58987: RET
// export function PrepareEnchidna ( ) ; begin
58988: LD_INT 0
58990: PPUSH
// uc_side := 0 ;
58991: LD_ADDR_OWVAR 20
58995: PUSH
58996: LD_INT 0
58998: ST_TO_ADDR
// uc_nation := 0 ;
58999: LD_ADDR_OWVAR 21
59003: PUSH
59004: LD_INT 0
59006: ST_TO_ADDR
// hc_class := class_baggie ;
59007: LD_ADDR_OWVAR 28
59011: PUSH
59012: LD_INT 13
59014: ST_TO_ADDR
// hc_gallery :=  ;
59015: LD_ADDR_OWVAR 33
59019: PUSH
59020: LD_STRING 
59022: ST_TO_ADDR
// end ;
59023: LD_VAR 0 1
59027: RET
// export function PrepareFrog ( ) ; begin
59028: LD_INT 0
59030: PPUSH
// uc_side := 0 ;
59031: LD_ADDR_OWVAR 20
59035: PUSH
59036: LD_INT 0
59038: ST_TO_ADDR
// uc_nation := 0 ;
59039: LD_ADDR_OWVAR 21
59043: PUSH
59044: LD_INT 0
59046: ST_TO_ADDR
// hc_class := class_frog ;
59047: LD_ADDR_OWVAR 28
59051: PUSH
59052: LD_INT 19
59054: ST_TO_ADDR
// hc_gallery :=  ;
59055: LD_ADDR_OWVAR 33
59059: PUSH
59060: LD_STRING 
59062: ST_TO_ADDR
// end ;
59063: LD_VAR 0 1
59067: RET
// export function PrepareFish ( ) ; begin
59068: LD_INT 0
59070: PPUSH
// uc_side := 0 ;
59071: LD_ADDR_OWVAR 20
59075: PUSH
59076: LD_INT 0
59078: ST_TO_ADDR
// uc_nation := 0 ;
59079: LD_ADDR_OWVAR 21
59083: PUSH
59084: LD_INT 0
59086: ST_TO_ADDR
// hc_class := class_fish ;
59087: LD_ADDR_OWVAR 28
59091: PUSH
59092: LD_INT 20
59094: ST_TO_ADDR
// hc_gallery :=  ;
59095: LD_ADDR_OWVAR 33
59099: PUSH
59100: LD_STRING 
59102: ST_TO_ADDR
// end ;
59103: LD_VAR 0 1
59107: RET
// export function PrepareBird ( ) ; begin
59108: LD_INT 0
59110: PPUSH
// uc_side := 0 ;
59111: LD_ADDR_OWVAR 20
59115: PUSH
59116: LD_INT 0
59118: ST_TO_ADDR
// uc_nation := 0 ;
59119: LD_ADDR_OWVAR 21
59123: PUSH
59124: LD_INT 0
59126: ST_TO_ADDR
// hc_class := class_phororhacos ;
59127: LD_ADDR_OWVAR 28
59131: PUSH
59132: LD_INT 18
59134: ST_TO_ADDR
// hc_gallery :=  ;
59135: LD_ADDR_OWVAR 33
59139: PUSH
59140: LD_STRING 
59142: ST_TO_ADDR
// end ;
59143: LD_VAR 0 1
59147: RET
// export function PrepareHorse ( ) ; begin
59148: LD_INT 0
59150: PPUSH
// uc_side := 0 ;
59151: LD_ADDR_OWVAR 20
59155: PUSH
59156: LD_INT 0
59158: ST_TO_ADDR
// uc_nation := 0 ;
59159: LD_ADDR_OWVAR 21
59163: PUSH
59164: LD_INT 0
59166: ST_TO_ADDR
// hc_class := class_horse ;
59167: LD_ADDR_OWVAR 28
59171: PUSH
59172: LD_INT 21
59174: ST_TO_ADDR
// hc_gallery :=  ;
59175: LD_ADDR_OWVAR 33
59179: PUSH
59180: LD_STRING 
59182: ST_TO_ADDR
// end ;
59183: LD_VAR 0 1
59187: RET
// export function PrepareMastodont ( ) ; begin
59188: LD_INT 0
59190: PPUSH
// uc_side := 0 ;
59191: LD_ADDR_OWVAR 20
59195: PUSH
59196: LD_INT 0
59198: ST_TO_ADDR
// uc_nation := 0 ;
59199: LD_ADDR_OWVAR 21
59203: PUSH
59204: LD_INT 0
59206: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59207: LD_ADDR_OWVAR 37
59211: PUSH
59212: LD_INT 31
59214: ST_TO_ADDR
// vc_control := control_rider ;
59215: LD_ADDR_OWVAR 38
59219: PUSH
59220: LD_INT 4
59222: ST_TO_ADDR
// end ;
59223: LD_VAR 0 1
59227: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59228: LD_INT 0
59230: PPUSH
59231: PPUSH
59232: PPUSH
// uc_side = 0 ;
59233: LD_ADDR_OWVAR 20
59237: PUSH
59238: LD_INT 0
59240: ST_TO_ADDR
// uc_nation = 0 ;
59241: LD_ADDR_OWVAR 21
59245: PUSH
59246: LD_INT 0
59248: ST_TO_ADDR
// InitHc_All ( ) ;
59249: CALL_OW 584
// InitVc ;
59253: CALL_OW 20
// if mastodonts then
59257: LD_VAR 0 6
59261: IFFALSE 59328
// for i = 1 to mastodonts do
59263: LD_ADDR_VAR 0 11
59267: PUSH
59268: DOUBLE
59269: LD_INT 1
59271: DEC
59272: ST_TO_ADDR
59273: LD_VAR 0 6
59277: PUSH
59278: FOR_TO
59279: IFFALSE 59326
// begin vc_chassis := 31 ;
59281: LD_ADDR_OWVAR 37
59285: PUSH
59286: LD_INT 31
59288: ST_TO_ADDR
// vc_control := control_rider ;
59289: LD_ADDR_OWVAR 38
59293: PUSH
59294: LD_INT 4
59296: ST_TO_ADDR
// animal := CreateVehicle ;
59297: LD_ADDR_VAR 0 12
59301: PUSH
59302: CALL_OW 45
59306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59307: LD_VAR 0 12
59311: PPUSH
59312: LD_VAR 0 8
59316: PPUSH
59317: LD_INT 0
59319: PPUSH
59320: CALL 61456 0 3
// end ;
59324: GO 59278
59326: POP
59327: POP
// if horses then
59328: LD_VAR 0 5
59332: IFFALSE 59399
// for i = 1 to horses do
59334: LD_ADDR_VAR 0 11
59338: PUSH
59339: DOUBLE
59340: LD_INT 1
59342: DEC
59343: ST_TO_ADDR
59344: LD_VAR 0 5
59348: PUSH
59349: FOR_TO
59350: IFFALSE 59397
// begin hc_class := 21 ;
59352: LD_ADDR_OWVAR 28
59356: PUSH
59357: LD_INT 21
59359: ST_TO_ADDR
// hc_gallery :=  ;
59360: LD_ADDR_OWVAR 33
59364: PUSH
59365: LD_STRING 
59367: ST_TO_ADDR
// animal := CreateHuman ;
59368: LD_ADDR_VAR 0 12
59372: PUSH
59373: CALL_OW 44
59377: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59378: LD_VAR 0 12
59382: PPUSH
59383: LD_VAR 0 8
59387: PPUSH
59388: LD_INT 0
59390: PPUSH
59391: CALL 61456 0 3
// end ;
59395: GO 59349
59397: POP
59398: POP
// if birds then
59399: LD_VAR 0 1
59403: IFFALSE 59470
// for i = 1 to birds do
59405: LD_ADDR_VAR 0 11
59409: PUSH
59410: DOUBLE
59411: LD_INT 1
59413: DEC
59414: ST_TO_ADDR
59415: LD_VAR 0 1
59419: PUSH
59420: FOR_TO
59421: IFFALSE 59468
// begin hc_class := 18 ;
59423: LD_ADDR_OWVAR 28
59427: PUSH
59428: LD_INT 18
59430: ST_TO_ADDR
// hc_gallery =  ;
59431: LD_ADDR_OWVAR 33
59435: PUSH
59436: LD_STRING 
59438: ST_TO_ADDR
// animal := CreateHuman ;
59439: LD_ADDR_VAR 0 12
59443: PUSH
59444: CALL_OW 44
59448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59449: LD_VAR 0 12
59453: PPUSH
59454: LD_VAR 0 8
59458: PPUSH
59459: LD_INT 0
59461: PPUSH
59462: CALL 61456 0 3
// end ;
59466: GO 59420
59468: POP
59469: POP
// if tigers then
59470: LD_VAR 0 2
59474: IFFALSE 59558
// for i = 1 to tigers do
59476: LD_ADDR_VAR 0 11
59480: PUSH
59481: DOUBLE
59482: LD_INT 1
59484: DEC
59485: ST_TO_ADDR
59486: LD_VAR 0 2
59490: PUSH
59491: FOR_TO
59492: IFFALSE 59556
// begin hc_class = class_tiger ;
59494: LD_ADDR_OWVAR 28
59498: PUSH
59499: LD_INT 14
59501: ST_TO_ADDR
// hc_gallery =  ;
59502: LD_ADDR_OWVAR 33
59506: PUSH
59507: LD_STRING 
59509: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59510: LD_ADDR_OWVAR 35
59514: PUSH
59515: LD_INT 7
59517: NEG
59518: PPUSH
59519: LD_INT 7
59521: PPUSH
59522: CALL_OW 12
59526: ST_TO_ADDR
// animal := CreateHuman ;
59527: LD_ADDR_VAR 0 12
59531: PUSH
59532: CALL_OW 44
59536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59537: LD_VAR 0 12
59541: PPUSH
59542: LD_VAR 0 8
59546: PPUSH
59547: LD_INT 0
59549: PPUSH
59550: CALL 61456 0 3
// end ;
59554: GO 59491
59556: POP
59557: POP
// if apemans then
59558: LD_VAR 0 3
59562: IFFALSE 59685
// for i = 1 to apemans do
59564: LD_ADDR_VAR 0 11
59568: PUSH
59569: DOUBLE
59570: LD_INT 1
59572: DEC
59573: ST_TO_ADDR
59574: LD_VAR 0 3
59578: PUSH
59579: FOR_TO
59580: IFFALSE 59683
// begin hc_class = class_apeman ;
59582: LD_ADDR_OWVAR 28
59586: PUSH
59587: LD_INT 12
59589: ST_TO_ADDR
// hc_gallery =  ;
59590: LD_ADDR_OWVAR 33
59594: PUSH
59595: LD_STRING 
59597: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59598: LD_ADDR_OWVAR 35
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PPUSH
59607: LD_INT 2
59609: PPUSH
59610: CALL_OW 12
59614: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59615: LD_ADDR_OWVAR 31
59619: PUSH
59620: LD_INT 1
59622: PPUSH
59623: LD_INT 3
59625: PPUSH
59626: CALL_OW 12
59630: PUSH
59631: LD_INT 1
59633: PPUSH
59634: LD_INT 3
59636: PPUSH
59637: CALL_OW 12
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// animal := CreateHuman ;
59654: LD_ADDR_VAR 0 12
59658: PUSH
59659: CALL_OW 44
59663: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59664: LD_VAR 0 12
59668: PPUSH
59669: LD_VAR 0 8
59673: PPUSH
59674: LD_INT 0
59676: PPUSH
59677: CALL 61456 0 3
// end ;
59681: GO 59579
59683: POP
59684: POP
// if enchidnas then
59685: LD_VAR 0 4
59689: IFFALSE 59756
// for i = 1 to enchidnas do
59691: LD_ADDR_VAR 0 11
59695: PUSH
59696: DOUBLE
59697: LD_INT 1
59699: DEC
59700: ST_TO_ADDR
59701: LD_VAR 0 4
59705: PUSH
59706: FOR_TO
59707: IFFALSE 59754
// begin hc_class = 13 ;
59709: LD_ADDR_OWVAR 28
59713: PUSH
59714: LD_INT 13
59716: ST_TO_ADDR
// hc_gallery =  ;
59717: LD_ADDR_OWVAR 33
59721: PUSH
59722: LD_STRING 
59724: ST_TO_ADDR
// animal := CreateHuman ;
59725: LD_ADDR_VAR 0 12
59729: PUSH
59730: CALL_OW 44
59734: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59735: LD_VAR 0 12
59739: PPUSH
59740: LD_VAR 0 8
59744: PPUSH
59745: LD_INT 0
59747: PPUSH
59748: CALL 61456 0 3
// end ;
59752: GO 59706
59754: POP
59755: POP
// if fishes then
59756: LD_VAR 0 7
59760: IFFALSE 59827
// for i = 1 to fishes do
59762: LD_ADDR_VAR 0 11
59766: PUSH
59767: DOUBLE
59768: LD_INT 1
59770: DEC
59771: ST_TO_ADDR
59772: LD_VAR 0 7
59776: PUSH
59777: FOR_TO
59778: IFFALSE 59825
// begin hc_class = 20 ;
59780: LD_ADDR_OWVAR 28
59784: PUSH
59785: LD_INT 20
59787: ST_TO_ADDR
// hc_gallery =  ;
59788: LD_ADDR_OWVAR 33
59792: PUSH
59793: LD_STRING 
59795: ST_TO_ADDR
// animal := CreateHuman ;
59796: LD_ADDR_VAR 0 12
59800: PUSH
59801: CALL_OW 44
59805: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59806: LD_VAR 0 12
59810: PPUSH
59811: LD_VAR 0 9
59815: PPUSH
59816: LD_INT 0
59818: PPUSH
59819: CALL 61456 0 3
// end ;
59823: GO 59777
59825: POP
59826: POP
// end ;
59827: LD_VAR 0 10
59831: RET
// export function WantHeal ( sci , unit ) ; begin
59832: LD_INT 0
59834: PPUSH
// if GetTaskList ( sci ) > 0 then
59835: LD_VAR 0 1
59839: PPUSH
59840: CALL_OW 437
59844: PUSH
59845: LD_INT 0
59847: GREATER
59848: IFFALSE 59918
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59850: LD_VAR 0 1
59854: PPUSH
59855: CALL_OW 437
59859: PUSH
59860: LD_INT 1
59862: ARRAY
59863: PUSH
59864: LD_INT 1
59866: ARRAY
59867: PUSH
59868: LD_STRING l
59870: EQUAL
59871: PUSH
59872: LD_VAR 0 1
59876: PPUSH
59877: CALL_OW 437
59881: PUSH
59882: LD_INT 1
59884: ARRAY
59885: PUSH
59886: LD_INT 4
59888: ARRAY
59889: PUSH
59890: LD_VAR 0 2
59894: EQUAL
59895: AND
59896: IFFALSE 59908
// result := true else
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_INT 1
59905: ST_TO_ADDR
59906: GO 59916
// result := false ;
59908: LD_ADDR_VAR 0 3
59912: PUSH
59913: LD_INT 0
59915: ST_TO_ADDR
// end else
59916: GO 59926
// result := false ;
59918: LD_ADDR_VAR 0 3
59922: PUSH
59923: LD_INT 0
59925: ST_TO_ADDR
// end ;
59926: LD_VAR 0 3
59930: RET
// export function HealTarget ( sci ) ; begin
59931: LD_INT 0
59933: PPUSH
// if not sci then
59934: LD_VAR 0 1
59938: NOT
59939: IFFALSE 59943
// exit ;
59941: GO 60008
// result := 0 ;
59943: LD_ADDR_VAR 0 2
59947: PUSH
59948: LD_INT 0
59950: ST_TO_ADDR
// if GetTaskList ( sci ) then
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 437
59960: IFFALSE 60008
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59962: LD_VAR 0 1
59966: PPUSH
59967: CALL_OW 437
59971: PUSH
59972: LD_INT 1
59974: ARRAY
59975: PUSH
59976: LD_INT 1
59978: ARRAY
59979: PUSH
59980: LD_STRING l
59982: EQUAL
59983: IFFALSE 60008
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59985: LD_ADDR_VAR 0 2
59989: PUSH
59990: LD_VAR 0 1
59994: PPUSH
59995: CALL_OW 437
59999: PUSH
60000: LD_INT 1
60002: ARRAY
60003: PUSH
60004: LD_INT 4
60006: ARRAY
60007: ST_TO_ADDR
// end ;
60008: LD_VAR 0 2
60012: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60013: LD_INT 0
60015: PPUSH
60016: PPUSH
60017: PPUSH
60018: PPUSH
// if not base_units then
60019: LD_VAR 0 1
60023: NOT
60024: IFFALSE 60028
// exit ;
60026: GO 60115
// result := false ;
60028: LD_ADDR_VAR 0 2
60032: PUSH
60033: LD_INT 0
60035: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60036: LD_ADDR_VAR 0 5
60040: PUSH
60041: LD_VAR 0 1
60045: PPUSH
60046: LD_INT 21
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PPUSH
60056: CALL_OW 72
60060: ST_TO_ADDR
// if not tmp then
60061: LD_VAR 0 5
60065: NOT
60066: IFFALSE 60070
// exit ;
60068: GO 60115
// for i in tmp do
60070: LD_ADDR_VAR 0 3
60074: PUSH
60075: LD_VAR 0 5
60079: PUSH
60080: FOR_IN
60081: IFFALSE 60113
// begin result := EnemyInRange ( i , 22 ) ;
60083: LD_ADDR_VAR 0 2
60087: PUSH
60088: LD_VAR 0 3
60092: PPUSH
60093: LD_INT 22
60095: PPUSH
60096: CALL 57702 0 2
60100: ST_TO_ADDR
// if result then
60101: LD_VAR 0 2
60105: IFFALSE 60111
// exit ;
60107: POP
60108: POP
60109: GO 60115
// end ;
60111: GO 60080
60113: POP
60114: POP
// end ;
60115: LD_VAR 0 2
60119: RET
// export function FilterByTag ( units , tag ) ; begin
60120: LD_INT 0
60122: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_VAR 0 1
60132: PPUSH
60133: LD_INT 120
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 72
60149: ST_TO_ADDR
// end ;
60150: LD_VAR 0 3
60154: RET
// export function IsDriver ( un ) ; begin
60155: LD_INT 0
60157: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60158: LD_ADDR_VAR 0 2
60162: PUSH
60163: LD_VAR 0 1
60167: PUSH
60168: LD_INT 55
60170: PUSH
60171: EMPTY
60172: LIST
60173: PPUSH
60174: CALL_OW 69
60178: IN
60179: ST_TO_ADDR
// end ;
60180: LD_VAR 0 2
60184: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60185: LD_INT 0
60187: PPUSH
60188: PPUSH
// list := [ ] ;
60189: LD_ADDR_VAR 0 5
60193: PUSH
60194: EMPTY
60195: ST_TO_ADDR
// case d of 0 :
60196: LD_VAR 0 3
60200: PUSH
60201: LD_INT 0
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60209
60207: GO 60342
60209: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60210: LD_ADDR_VAR 0 5
60214: PUSH
60215: LD_VAR 0 1
60219: PUSH
60220: LD_INT 4
60222: MINUS
60223: PUSH
60224: LD_VAR 0 2
60228: PUSH
60229: LD_INT 4
60231: MINUS
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_INT 3
60248: MINUS
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: PUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_INT 4
60270: PLUS
60271: PUSH
60272: LD_VAR 0 2
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: LD_INT 3
60292: PLUS
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 3
60301: PLUS
60302: PUSH
60303: LD_INT 5
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 4
60323: PLUS
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: ST_TO_ADDR
// end ; 1 :
60340: GO 61040
60342: LD_INT 1
60344: DOUBLE
60345: EQUAL
60346: IFTRUE 60350
60348: GO 60483
60350: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60351: LD_ADDR_VAR 0 5
60355: PUSH
60356: LD_VAR 0 1
60360: PUSH
60361: LD_VAR 0 2
60365: PUSH
60366: LD_INT 4
60368: MINUS
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: PUSH
60378: LD_VAR 0 1
60382: PUSH
60383: LD_INT 3
60385: MINUS
60386: PUSH
60387: LD_VAR 0 2
60391: PUSH
60392: LD_INT 3
60394: MINUS
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: LD_INT 4
60411: MINUS
60412: PUSH
60413: LD_VAR 0 2
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: PUSH
60426: LD_VAR 0 1
60430: PUSH
60431: LD_VAR 0 2
60435: PUSH
60436: LD_INT 3
60438: PLUS
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 4
60455: PLUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 4
60464: PLUS
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// end ; 2 :
60481: GO 61040
60483: LD_INT 2
60485: DOUBLE
60486: EQUAL
60487: IFTRUE 60491
60489: GO 60620
60491: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60492: LD_ADDR_VAR 0 5
60496: PUSH
60497: LD_VAR 0 1
60501: PUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_INT 3
60509: MINUS
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: PUSH
60519: LD_VAR 0 1
60523: PUSH
60524: LD_INT 4
60526: PLUS
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: PUSH
60541: LD_VAR 0 1
60545: PUSH
60546: LD_VAR 0 2
60550: PUSH
60551: LD_INT 4
60553: PLUS
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: PUSH
60563: LD_VAR 0 1
60567: PUSH
60568: LD_INT 3
60570: MINUS
60571: PUSH
60572: LD_VAR 0 2
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: LD_VAR 0 1
60589: PUSH
60590: LD_INT 4
60592: MINUS
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 4
60601: MINUS
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// end ; 3 :
60618: GO 61040
60620: LD_INT 3
60622: DOUBLE
60623: EQUAL
60624: IFTRUE 60628
60626: GO 60761
60628: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60629: LD_ADDR_VAR 0 5
60633: PUSH
60634: LD_VAR 0 1
60638: PUSH
60639: LD_INT 3
60641: PLUS
60642: PUSH
60643: LD_VAR 0 2
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: LIST
60655: PUSH
60656: LD_VAR 0 1
60660: PUSH
60661: LD_INT 4
60663: PLUS
60664: PUSH
60665: LD_VAR 0 2
60669: PUSH
60670: LD_INT 4
60672: PLUS
60673: PUSH
60674: LD_INT 5
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: PUSH
60682: LD_VAR 0 1
60686: PUSH
60687: LD_INT 4
60689: MINUS
60690: PUSH
60691: LD_VAR 0 2
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: PUSH
60704: LD_VAR 0 1
60708: PUSH
60709: LD_VAR 0 2
60713: PUSH
60714: LD_INT 4
60716: MINUS
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_VAR 0 1
60730: PUSH
60731: LD_INT 3
60733: MINUS
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 3
60742: MINUS
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// end ; 4 :
60759: GO 61040
60761: LD_INT 4
60763: DOUBLE
60764: EQUAL
60765: IFTRUE 60769
60767: GO 60902
60769: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60770: LD_ADDR_VAR 0 5
60774: PUSH
60775: LD_VAR 0 1
60779: PUSH
60780: LD_VAR 0 2
60784: PUSH
60785: LD_INT 4
60787: PLUS
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: PUSH
60797: LD_VAR 0 1
60801: PUSH
60802: LD_INT 3
60804: PLUS
60805: PUSH
60806: LD_VAR 0 2
60810: PUSH
60811: LD_INT 3
60813: PLUS
60814: PUSH
60815: LD_INT 5
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: PUSH
60823: LD_VAR 0 1
60827: PUSH
60828: LD_INT 4
60830: PLUS
60831: PUSH
60832: LD_VAR 0 2
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: PUSH
60845: LD_VAR 0 1
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_INT 3
60857: MINUS
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: PUSH
60867: LD_VAR 0 1
60871: PUSH
60872: LD_INT 4
60874: MINUS
60875: PUSH
60876: LD_VAR 0 2
60880: PUSH
60881: LD_INT 4
60883: MINUS
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: ST_TO_ADDR
// end ; 5 :
60900: GO 61040
60902: LD_INT 5
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60910
60908: GO 61039
60910: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60911: LD_ADDR_VAR 0 5
60915: PUSH
60916: LD_VAR 0 1
60920: PUSH
60921: LD_INT 4
60923: MINUS
60924: PUSH
60925: LD_VAR 0 2
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: LIST
60937: PUSH
60938: LD_VAR 0 1
60942: PUSH
60943: LD_VAR 0 2
60947: PUSH
60948: LD_INT 4
60950: MINUS
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: LIST
60959: PUSH
60960: LD_VAR 0 1
60964: PUSH
60965: LD_INT 4
60967: PLUS
60968: PUSH
60969: LD_VAR 0 2
60973: PUSH
60974: LD_INT 4
60976: PLUS
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: PUSH
60986: LD_VAR 0 1
60990: PUSH
60991: LD_INT 3
60993: PLUS
60994: PUSH
60995: LD_VAR 0 2
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_VAR 0 2
61017: PUSH
61018: LD_INT 3
61020: PLUS
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: ST_TO_ADDR
// end ; end ;
61037: GO 61040
61039: POP
// result := list ;
61040: LD_ADDR_VAR 0 4
61044: PUSH
61045: LD_VAR 0 5
61049: ST_TO_ADDR
// end ;
61050: LD_VAR 0 4
61054: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61055: LD_INT 0
61057: PPUSH
61058: PPUSH
61059: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61060: LD_VAR 0 1
61064: NOT
61065: PUSH
61066: LD_VAR 0 2
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 4
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: IN
61089: NOT
61090: OR
61091: IFFALSE 61095
// exit ;
61093: GO 61178
// tmp := [ ] ;
61095: LD_ADDR_VAR 0 5
61099: PUSH
61100: EMPTY
61101: ST_TO_ADDR
// for i in units do
61102: LD_ADDR_VAR 0 4
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: FOR_IN
61113: IFFALSE 61147
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61115: LD_ADDR_VAR 0 5
61119: PUSH
61120: LD_VAR 0 5
61124: PPUSH
61125: LD_VAR 0 4
61129: PPUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: CALL_OW 259
61139: PPUSH
61140: CALL 62538 0 2
61144: ST_TO_ADDR
61145: GO 61112
61147: POP
61148: POP
// if not tmp then
61149: LD_VAR 0 5
61153: NOT
61154: IFFALSE 61158
// exit ;
61156: GO 61178
// result := SortListByListDesc ( units , tmp ) ;
61158: LD_ADDR_VAR 0 3
61162: PUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: LD_VAR 0 5
61172: PPUSH
61173: CALL_OW 77
61177: ST_TO_ADDR
// end ;
61178: LD_VAR 0 3
61182: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61183: LD_INT 0
61185: PPUSH
61186: PPUSH
61187: PPUSH
// result := false ;
61188: LD_ADDR_VAR 0 3
61192: PUSH
61193: LD_INT 0
61195: ST_TO_ADDR
// if not building then
61196: LD_VAR 0 2
61200: NOT
61201: IFFALSE 61205
// exit ;
61203: GO 61343
// x := GetX ( building ) ;
61205: LD_ADDR_VAR 0 4
61209: PUSH
61210: LD_VAR 0 2
61214: PPUSH
61215: CALL_OW 250
61219: ST_TO_ADDR
// y := GetY ( building ) ;
61220: LD_ADDR_VAR 0 5
61224: PUSH
61225: LD_VAR 0 2
61229: PPUSH
61230: CALL_OW 251
61234: ST_TO_ADDR
// if not x or not y then
61235: LD_VAR 0 4
61239: NOT
61240: PUSH
61241: LD_VAR 0 5
61245: NOT
61246: OR
61247: IFFALSE 61251
// exit ;
61249: GO 61343
// if GetTaskList ( unit ) then
61251: LD_VAR 0 1
61255: PPUSH
61256: CALL_OW 437
61260: IFFALSE 61343
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61262: LD_STRING e
61264: PUSH
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL_OW 437
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PUSH
61279: LD_INT 1
61281: ARRAY
61282: EQUAL
61283: PUSH
61284: LD_VAR 0 4
61288: PUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: CALL_OW 437
61298: PUSH
61299: LD_INT 1
61301: ARRAY
61302: PUSH
61303: LD_INT 2
61305: ARRAY
61306: EQUAL
61307: AND
61308: PUSH
61309: LD_VAR 0 5
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 437
61323: PUSH
61324: LD_INT 1
61326: ARRAY
61327: PUSH
61328: LD_INT 3
61330: ARRAY
61331: EQUAL
61332: AND
61333: IFFALSE 61343
// result := true end ;
61335: LD_ADDR_VAR 0 3
61339: PUSH
61340: LD_INT 1
61342: ST_TO_ADDR
// end ;
61343: LD_VAR 0 3
61347: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61348: LD_INT 0
61350: PPUSH
// result := false ;
61351: LD_ADDR_VAR 0 4
61355: PUSH
61356: LD_INT 0
61358: ST_TO_ADDR
// if GetTaskList ( unit ) then
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 437
61368: IFFALSE 61451
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61370: LD_STRING M
61372: PUSH
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 437
61382: PUSH
61383: LD_INT 1
61385: ARRAY
61386: PUSH
61387: LD_INT 1
61389: ARRAY
61390: EQUAL
61391: PUSH
61392: LD_VAR 0 2
61396: PUSH
61397: LD_VAR 0 1
61401: PPUSH
61402: CALL_OW 437
61406: PUSH
61407: LD_INT 1
61409: ARRAY
61410: PUSH
61411: LD_INT 2
61413: ARRAY
61414: EQUAL
61415: AND
61416: PUSH
61417: LD_VAR 0 3
61421: PUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 437
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: PUSH
61436: LD_INT 3
61438: ARRAY
61439: EQUAL
61440: AND
61441: IFFALSE 61451
// result := true ;
61443: LD_ADDR_VAR 0 4
61447: PUSH
61448: LD_INT 1
61450: ST_TO_ADDR
// end ; end ;
61451: LD_VAR 0 4
61455: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61456: LD_INT 0
61458: PPUSH
61459: PPUSH
61460: PPUSH
61461: PPUSH
// if not unit or not area then
61462: LD_VAR 0 1
61466: NOT
61467: PUSH
61468: LD_VAR 0 2
61472: NOT
61473: OR
61474: IFFALSE 61478
// exit ;
61476: GO 61641
// tmp := AreaToList ( area , i ) ;
61478: LD_ADDR_VAR 0 6
61482: PUSH
61483: LD_VAR 0 2
61487: PPUSH
61488: LD_VAR 0 5
61492: PPUSH
61493: CALL_OW 517
61497: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61498: LD_ADDR_VAR 0 5
61502: PUSH
61503: DOUBLE
61504: LD_INT 1
61506: DEC
61507: ST_TO_ADDR
61508: LD_VAR 0 6
61512: PUSH
61513: LD_INT 1
61515: ARRAY
61516: PUSH
61517: FOR_TO
61518: IFFALSE 61639
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61520: LD_ADDR_VAR 0 7
61524: PUSH
61525: LD_VAR 0 6
61529: PUSH
61530: LD_INT 1
61532: ARRAY
61533: PUSH
61534: LD_VAR 0 5
61538: ARRAY
61539: PUSH
61540: LD_VAR 0 6
61544: PUSH
61545: LD_INT 2
61547: ARRAY
61548: PUSH
61549: LD_VAR 0 5
61553: ARRAY
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
61559: LD_INT 92
61561: PUSH
61562: LD_VAR 0 7
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PUSH
61571: LD_VAR 0 7
61575: PUSH
61576: LD_INT 2
61578: ARRAY
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: PPUSH
61589: CALL_OW 69
61593: PUSH
61594: LD_INT 0
61596: EQUAL
61597: IFFALSE 61637
// begin PlaceUnitArea ( unit , area , mode ) ;
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_VAR 0 2
61608: PPUSH
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 49
// result := IsPlaced ( unit ) ;
61618: LD_ADDR_VAR 0 4
61622: PUSH
61623: LD_VAR 0 1
61627: PPUSH
61628: CALL_OW 305
61632: ST_TO_ADDR
// exit ;
61633: POP
61634: POP
61635: GO 61641
// end ; end ;
61637: GO 61517
61639: POP
61640: POP
// end ;
61641: LD_VAR 0 4
61645: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61646: LD_INT 0
61648: PPUSH
61649: PPUSH
61650: PPUSH
// if not side or side > 8 then
61651: LD_VAR 0 1
61655: NOT
61656: PUSH
61657: LD_VAR 0 1
61661: PUSH
61662: LD_INT 8
61664: GREATER
61665: OR
61666: IFFALSE 61670
// exit ;
61668: GO 61857
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61670: LD_ADDR_VAR 0 4
61674: PUSH
61675: LD_INT 22
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 21
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PPUSH
61701: CALL_OW 69
61705: ST_TO_ADDR
// if not tmp then
61706: LD_VAR 0 4
61710: NOT
61711: IFFALSE 61715
// exit ;
61713: GO 61857
// enable_addtolog := true ;
61715: LD_ADDR_OWVAR 81
61719: PUSH
61720: LD_INT 1
61722: ST_TO_ADDR
// AddToLog ( [ ) ;
61723: LD_STRING [
61725: PPUSH
61726: CALL_OW 561
// for i in tmp do
61730: LD_ADDR_VAR 0 3
61734: PUSH
61735: LD_VAR 0 4
61739: PUSH
61740: FOR_IN
61741: IFFALSE 61848
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61743: LD_STRING [
61745: PUSH
61746: LD_VAR 0 3
61750: PPUSH
61751: CALL_OW 266
61755: STR
61756: PUSH
61757: LD_STRING , 
61759: STR
61760: PUSH
61761: LD_VAR 0 3
61765: PPUSH
61766: CALL_OW 250
61770: STR
61771: PUSH
61772: LD_STRING , 
61774: STR
61775: PUSH
61776: LD_VAR 0 3
61780: PPUSH
61781: CALL_OW 251
61785: STR
61786: PUSH
61787: LD_STRING , 
61789: STR
61790: PUSH
61791: LD_VAR 0 3
61795: PPUSH
61796: CALL_OW 254
61800: STR
61801: PUSH
61802: LD_STRING , 
61804: STR
61805: PUSH
61806: LD_VAR 0 3
61810: PPUSH
61811: LD_INT 1
61813: PPUSH
61814: CALL_OW 268
61818: STR
61819: PUSH
61820: LD_STRING , 
61822: STR
61823: PUSH
61824: LD_VAR 0 3
61828: PPUSH
61829: LD_INT 2
61831: PPUSH
61832: CALL_OW 268
61836: STR
61837: PUSH
61838: LD_STRING ],
61840: STR
61841: PPUSH
61842: CALL_OW 561
// end ;
61846: GO 61740
61848: POP
61849: POP
// AddToLog ( ]; ) ;
61850: LD_STRING ];
61852: PPUSH
61853: CALL_OW 561
// end ;
61857: LD_VAR 0 2
61861: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61862: LD_INT 0
61864: PPUSH
61865: PPUSH
61866: PPUSH
61867: PPUSH
61868: PPUSH
// if not area or not rate or not max then
61869: LD_VAR 0 1
61873: NOT
61874: PUSH
61875: LD_VAR 0 2
61879: NOT
61880: OR
61881: PUSH
61882: LD_VAR 0 4
61886: NOT
61887: OR
61888: IFFALSE 61892
// exit ;
61890: GO 62081
// while 1 do
61892: LD_INT 1
61894: IFFALSE 62081
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61896: LD_ADDR_VAR 0 9
61900: PUSH
61901: LD_VAR 0 1
61905: PPUSH
61906: LD_INT 1
61908: PPUSH
61909: CALL_OW 287
61913: PUSH
61914: LD_INT 10
61916: MUL
61917: ST_TO_ADDR
// r := rate / 10 ;
61918: LD_ADDR_VAR 0 7
61922: PUSH
61923: LD_VAR 0 2
61927: PUSH
61928: LD_INT 10
61930: DIVREAL
61931: ST_TO_ADDR
// time := 1 1$00 ;
61932: LD_ADDR_VAR 0 8
61936: PUSH
61937: LD_INT 2100
61939: ST_TO_ADDR
// if amount < min then
61940: LD_VAR 0 9
61944: PUSH
61945: LD_VAR 0 3
61949: LESS
61950: IFFALSE 61968
// r := r * 2 else
61952: LD_ADDR_VAR 0 7
61956: PUSH
61957: LD_VAR 0 7
61961: PUSH
61962: LD_INT 2
61964: MUL
61965: ST_TO_ADDR
61966: GO 61994
// if amount > max then
61968: LD_VAR 0 9
61972: PUSH
61973: LD_VAR 0 4
61977: GREATER
61978: IFFALSE 61994
// r := r / 2 ;
61980: LD_ADDR_VAR 0 7
61984: PUSH
61985: LD_VAR 0 7
61989: PUSH
61990: LD_INT 2
61992: DIVREAL
61993: ST_TO_ADDR
// time := time / r ;
61994: LD_ADDR_VAR 0 8
61998: PUSH
61999: LD_VAR 0 8
62003: PUSH
62004: LD_VAR 0 7
62008: DIVREAL
62009: ST_TO_ADDR
// if time < 0 then
62010: LD_VAR 0 8
62014: PUSH
62015: LD_INT 0
62017: LESS
62018: IFFALSE 62035
// time := time * - 1 ;
62020: LD_ADDR_VAR 0 8
62024: PUSH
62025: LD_VAR 0 8
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: MUL
62034: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62035: LD_VAR 0 8
62039: PUSH
62040: LD_INT 35
62042: PPUSH
62043: LD_INT 875
62045: PPUSH
62046: CALL_OW 12
62050: PLUS
62051: PPUSH
62052: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62056: LD_INT 1
62058: PPUSH
62059: LD_INT 5
62061: PPUSH
62062: CALL_OW 12
62066: PPUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: LD_INT 1
62074: PPUSH
62075: CALL_OW 55
// end ;
62079: GO 61892
// end ;
62081: LD_VAR 0 5
62085: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62086: LD_INT 0
62088: PPUSH
62089: PPUSH
62090: PPUSH
62091: PPUSH
62092: PPUSH
62093: PPUSH
62094: PPUSH
62095: PPUSH
// if not turrets or not factories then
62096: LD_VAR 0 1
62100: NOT
62101: PUSH
62102: LD_VAR 0 2
62106: NOT
62107: OR
62108: IFFALSE 62112
// exit ;
62110: GO 62419
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62112: LD_ADDR_VAR 0 10
62116: PUSH
62117: LD_INT 5
62119: PUSH
62120: LD_INT 6
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: LD_INT 5
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 24
62154: PUSH
62155: LD_INT 25
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 23
62164: PUSH
62165: LD_INT 27
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 42
62178: PUSH
62179: LD_INT 43
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 44
62188: PUSH
62189: LD_INT 46
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 45
62198: PUSH
62199: LD_INT 47
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// result := [ ] ;
62216: LD_ADDR_VAR 0 3
62220: PUSH
62221: EMPTY
62222: ST_TO_ADDR
// for i in turrets do
62223: LD_ADDR_VAR 0 4
62227: PUSH
62228: LD_VAR 0 1
62232: PUSH
62233: FOR_IN
62234: IFFALSE 62417
// begin nat := GetNation ( i ) ;
62236: LD_ADDR_VAR 0 7
62240: PUSH
62241: LD_VAR 0 4
62245: PPUSH
62246: CALL_OW 248
62250: ST_TO_ADDR
// weapon := 0 ;
62251: LD_ADDR_VAR 0 8
62255: PUSH
62256: LD_INT 0
62258: ST_TO_ADDR
// if not nat then
62259: LD_VAR 0 7
62263: NOT
62264: IFFALSE 62268
// continue ;
62266: GO 62233
// for j in list [ nat ] do
62268: LD_ADDR_VAR 0 5
62272: PUSH
62273: LD_VAR 0 10
62277: PUSH
62278: LD_VAR 0 7
62282: ARRAY
62283: PUSH
62284: FOR_IN
62285: IFFALSE 62326
// if GetBWeapon ( i ) = j [ 1 ] then
62287: LD_VAR 0 4
62291: PPUSH
62292: CALL_OW 269
62296: PUSH
62297: LD_VAR 0 5
62301: PUSH
62302: LD_INT 1
62304: ARRAY
62305: EQUAL
62306: IFFALSE 62324
// begin weapon := j [ 2 ] ;
62308: LD_ADDR_VAR 0 8
62312: PUSH
62313: LD_VAR 0 5
62317: PUSH
62318: LD_INT 2
62320: ARRAY
62321: ST_TO_ADDR
// break ;
62322: GO 62326
// end ;
62324: GO 62284
62326: POP
62327: POP
// if not weapon then
62328: LD_VAR 0 8
62332: NOT
62333: IFFALSE 62337
// continue ;
62335: GO 62233
// for k in factories do
62337: LD_ADDR_VAR 0 6
62341: PUSH
62342: LD_VAR 0 2
62346: PUSH
62347: FOR_IN
62348: IFFALSE 62413
// begin weapons := AvailableWeaponList ( k ) ;
62350: LD_ADDR_VAR 0 9
62354: PUSH
62355: LD_VAR 0 6
62359: PPUSH
62360: CALL_OW 478
62364: ST_TO_ADDR
// if not weapons then
62365: LD_VAR 0 9
62369: NOT
62370: IFFALSE 62374
// continue ;
62372: GO 62347
// if weapon in weapons then
62374: LD_VAR 0 8
62378: PUSH
62379: LD_VAR 0 9
62383: IN
62384: IFFALSE 62411
// begin result := [ i , weapon ] ;
62386: LD_ADDR_VAR 0 3
62390: PUSH
62391: LD_VAR 0 4
62395: PUSH
62396: LD_VAR 0 8
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: ST_TO_ADDR
// exit ;
62405: POP
62406: POP
62407: POP
62408: POP
62409: GO 62419
// end ; end ;
62411: GO 62347
62413: POP
62414: POP
// end ;
62415: GO 62233
62417: POP
62418: POP
// end ;
62419: LD_VAR 0 3
62423: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62424: LD_INT 0
62426: PPUSH
// if not side or side > 8 then
62427: LD_VAR 0 3
62431: NOT
62432: PUSH
62433: LD_VAR 0 3
62437: PUSH
62438: LD_INT 8
62440: GREATER
62441: OR
62442: IFFALSE 62446
// exit ;
62444: GO 62505
// if not range then
62446: LD_VAR 0 4
62450: NOT
62451: IFFALSE 62462
// range := - 12 ;
62453: LD_ADDR_VAR 0 4
62457: PUSH
62458: LD_INT 12
62460: NEG
62461: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62462: LD_VAR 0 1
62466: PPUSH
62467: LD_VAR 0 2
62471: PPUSH
62472: LD_VAR 0 3
62476: PPUSH
62477: LD_VAR 0 4
62481: PPUSH
62482: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62486: LD_VAR 0 1
62490: PPUSH
62491: LD_VAR 0 2
62495: PPUSH
62496: LD_VAR 0 3
62500: PPUSH
62501: CALL_OW 331
// end ;
62505: LD_VAR 0 5
62509: RET
// export function Video ( mode ) ; begin
62510: LD_INT 0
62512: PPUSH
// ingame_video = mode ;
62513: LD_ADDR_OWVAR 52
62517: PUSH
62518: LD_VAR 0 1
62522: ST_TO_ADDR
// interface_hidden = mode ;
62523: LD_ADDR_OWVAR 54
62527: PUSH
62528: LD_VAR 0 1
62532: ST_TO_ADDR
// end ;
62533: LD_VAR 0 2
62537: RET
// export function Join ( array , element ) ; begin
62538: LD_INT 0
62540: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62541: LD_ADDR_VAR 0 3
62545: PUSH
62546: LD_VAR 0 1
62550: PPUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 1
62558: PLUS
62559: PPUSH
62560: LD_VAR 0 2
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
// end ;
62570: LD_VAR 0 3
62574: RET
// export function JoinUnion ( array , element ) ; begin
62575: LD_INT 0
62577: PPUSH
// result := array union element ;
62578: LD_ADDR_VAR 0 3
62582: PUSH
62583: LD_VAR 0 1
62587: PUSH
62588: LD_VAR 0 2
62592: UNION
62593: ST_TO_ADDR
// end ;
62594: LD_VAR 0 3
62598: RET
// export function GetBehemoths ( side ) ; begin
62599: LD_INT 0
62601: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62602: LD_ADDR_VAR 0 2
62606: PUSH
62607: LD_INT 22
62609: PUSH
62610: LD_VAR 0 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 31
62621: PUSH
62622: LD_INT 25
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PPUSH
62633: CALL_OW 69
62637: ST_TO_ADDR
// end ;
62638: LD_VAR 0 2
62642: RET
// export function Shuffle ( array ) ; var i , index ; begin
62643: LD_INT 0
62645: PPUSH
62646: PPUSH
62647: PPUSH
// result := [ ] ;
62648: LD_ADDR_VAR 0 2
62652: PUSH
62653: EMPTY
62654: ST_TO_ADDR
// if not array then
62655: LD_VAR 0 1
62659: NOT
62660: IFFALSE 62664
// exit ;
62662: GO 62763
// Randomize ;
62664: CALL_OW 10
// for i = array downto 1 do
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: DOUBLE
62674: LD_VAR 0 1
62678: INC
62679: ST_TO_ADDR
62680: LD_INT 1
62682: PUSH
62683: FOR_DOWNTO
62684: IFFALSE 62761
// begin index := rand ( 1 , array ) ;
62686: LD_ADDR_VAR 0 4
62690: PUSH
62691: LD_INT 1
62693: PPUSH
62694: LD_VAR 0 1
62698: PPUSH
62699: CALL_OW 12
62703: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62704: LD_ADDR_VAR 0 2
62708: PUSH
62709: LD_VAR 0 2
62713: PPUSH
62714: LD_VAR 0 2
62718: PUSH
62719: LD_INT 1
62721: PLUS
62722: PPUSH
62723: LD_VAR 0 1
62727: PUSH
62728: LD_VAR 0 4
62732: ARRAY
62733: PPUSH
62734: CALL_OW 2
62738: ST_TO_ADDR
// array := Delete ( array , index ) ;
62739: LD_ADDR_VAR 0 1
62743: PUSH
62744: LD_VAR 0 1
62748: PPUSH
62749: LD_VAR 0 4
62753: PPUSH
62754: CALL_OW 3
62758: ST_TO_ADDR
// end ;
62759: GO 62683
62761: POP
62762: POP
// end ;
62763: LD_VAR 0 2
62767: RET
// export function GetBaseMaterials ( base ) ; begin
62768: LD_INT 0
62770: PPUSH
// result := [ 0 , 0 , 0 ] ;
62771: LD_ADDR_VAR 0 2
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// if not base then
62790: LD_VAR 0 1
62794: NOT
62795: IFFALSE 62799
// exit ;
62797: GO 62848
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62799: LD_ADDR_VAR 0 2
62803: PUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: LD_INT 1
62811: PPUSH
62812: CALL_OW 275
62816: PUSH
62817: LD_VAR 0 1
62821: PPUSH
62822: LD_INT 2
62824: PPUSH
62825: CALL_OW 275
62829: PUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: LD_INT 3
62837: PPUSH
62838: CALL_OW 275
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: ST_TO_ADDR
// end ;
62848: LD_VAR 0 2
62852: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62853: LD_INT 0
62855: PPUSH
62856: PPUSH
// result := array ;
62857: LD_ADDR_VAR 0 3
62861: PUSH
62862: LD_VAR 0 1
62866: ST_TO_ADDR
// if size >= result then
62867: LD_VAR 0 2
62871: PUSH
62872: LD_VAR 0 3
62876: GREATEREQUAL
62877: IFFALSE 62881
// exit ;
62879: GO 62931
// if size then
62881: LD_VAR 0 2
62885: IFFALSE 62931
// for i := array downto size do
62887: LD_ADDR_VAR 0 4
62891: PUSH
62892: DOUBLE
62893: LD_VAR 0 1
62897: INC
62898: ST_TO_ADDR
62899: LD_VAR 0 2
62903: PUSH
62904: FOR_DOWNTO
62905: IFFALSE 62929
// result := Delete ( result , result ) ;
62907: LD_ADDR_VAR 0 3
62911: PUSH
62912: LD_VAR 0 3
62916: PPUSH
62917: LD_VAR 0 3
62921: PPUSH
62922: CALL_OW 3
62926: ST_TO_ADDR
62927: GO 62904
62929: POP
62930: POP
// end ;
62931: LD_VAR 0 3
62935: RET
// export function ComExit ( unit ) ; var tmp ; begin
62936: LD_INT 0
62938: PPUSH
62939: PPUSH
// if not IsInUnit ( unit ) then
62940: LD_VAR 0 1
62944: PPUSH
62945: CALL_OW 310
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 63014
// tmp := IsInUnit ( unit ) ;
62954: LD_ADDR_VAR 0 3
62958: PUSH
62959: LD_VAR 0 1
62963: PPUSH
62964: CALL_OW 310
62968: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62969: LD_VAR 0 3
62973: PPUSH
62974: CALL_OW 247
62978: PUSH
62979: LD_INT 2
62981: EQUAL
62982: IFFALSE 62995
// ComExitVehicle ( unit ) else
62984: LD_VAR 0 1
62988: PPUSH
62989: CALL_OW 121
62993: GO 63004
// ComExitBuilding ( unit ) ;
62995: LD_VAR 0 1
62999: PPUSH
63000: CALL_OW 122
// result := tmp ;
63004: LD_ADDR_VAR 0 2
63008: PUSH
63009: LD_VAR 0 3
63013: ST_TO_ADDR
// end ;
63014: LD_VAR 0 2
63018: RET
// export function ComExitAll ( units ) ; var i ; begin
63019: LD_INT 0
63021: PPUSH
63022: PPUSH
// if not units then
63023: LD_VAR 0 1
63027: NOT
63028: IFFALSE 63032
// exit ;
63030: GO 63058
// for i in units do
63032: LD_ADDR_VAR 0 3
63036: PUSH
63037: LD_VAR 0 1
63041: PUSH
63042: FOR_IN
63043: IFFALSE 63056
// ComExit ( i ) ;
63045: LD_VAR 0 3
63049: PPUSH
63050: CALL 62936 0 1
63054: GO 63042
63056: POP
63057: POP
// end ;
63058: LD_VAR 0 2
63062: RET
// export function ResetHc ; begin
63063: LD_INT 0
63065: PPUSH
// InitHc ;
63066: CALL_OW 19
// hc_importance := 0 ;
63070: LD_ADDR_OWVAR 32
63074: PUSH
63075: LD_INT 0
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 1
63082: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63083: LD_INT 0
63085: PPUSH
63086: PPUSH
63087: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63088: LD_ADDR_VAR 0 6
63092: PUSH
63093: LD_VAR 0 1
63097: PUSH
63098: LD_VAR 0 3
63102: PLUS
63103: PUSH
63104: LD_INT 2
63106: DIV
63107: ST_TO_ADDR
// if _x < 0 then
63108: LD_VAR 0 6
63112: PUSH
63113: LD_INT 0
63115: LESS
63116: IFFALSE 63133
// _x := _x * - 1 ;
63118: LD_ADDR_VAR 0 6
63122: PUSH
63123: LD_VAR 0 6
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: MUL
63132: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63133: LD_ADDR_VAR 0 7
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_VAR 0 4
63147: PLUS
63148: PUSH
63149: LD_INT 2
63151: DIV
63152: ST_TO_ADDR
// if _y < 0 then
63153: LD_VAR 0 7
63157: PUSH
63158: LD_INT 0
63160: LESS
63161: IFFALSE 63178
// _y := _y * - 1 ;
63163: LD_ADDR_VAR 0 7
63167: PUSH
63168: LD_VAR 0 7
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: MUL
63177: ST_TO_ADDR
// result := [ _x , _y ] ;
63178: LD_ADDR_VAR 0 5
63182: PUSH
63183: LD_VAR 0 6
63187: PUSH
63188: LD_VAR 0 7
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: ST_TO_ADDR
// end ;
63197: LD_VAR 0 5
63201: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63202: LD_INT 0
63204: PPUSH
63205: PPUSH
63206: PPUSH
63207: PPUSH
// task := GetTaskList ( unit ) ;
63208: LD_ADDR_VAR 0 7
63212: PUSH
63213: LD_VAR 0 1
63217: PPUSH
63218: CALL_OW 437
63222: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63223: LD_VAR 0 7
63227: NOT
63228: PUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: LD_VAR 0 2
63238: PPUSH
63239: CALL_OW 308
63243: NOT
63244: AND
63245: IFFALSE 63249
// exit ;
63247: GO 63367
// if IsInArea ( unit , area ) then
63249: LD_VAR 0 1
63253: PPUSH
63254: LD_VAR 0 2
63258: PPUSH
63259: CALL_OW 308
63263: IFFALSE 63281
// begin ComMoveToArea ( unit , goAway ) ;
63265: LD_VAR 0 1
63269: PPUSH
63270: LD_VAR 0 3
63274: PPUSH
63275: CALL_OW 113
// exit ;
63279: GO 63367
// end ; if task [ 1 ] [ 1 ] <> M then
63281: LD_VAR 0 7
63285: PUSH
63286: LD_INT 1
63288: ARRAY
63289: PUSH
63290: LD_INT 1
63292: ARRAY
63293: PUSH
63294: LD_STRING M
63296: NONEQUAL
63297: IFFALSE 63301
// exit ;
63299: GO 63367
// x := task [ 1 ] [ 2 ] ;
63301: LD_ADDR_VAR 0 5
63305: PUSH
63306: LD_VAR 0 7
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: PUSH
63315: LD_INT 2
63317: ARRAY
63318: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63319: LD_ADDR_VAR 0 6
63323: PUSH
63324: LD_VAR 0 7
63328: PUSH
63329: LD_INT 1
63331: ARRAY
63332: PUSH
63333: LD_INT 3
63335: ARRAY
63336: ST_TO_ADDR
// if InArea ( x , y , area ) then
63337: LD_VAR 0 5
63341: PPUSH
63342: LD_VAR 0 6
63346: PPUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: CALL_OW 309
63356: IFFALSE 63367
// ComStop ( unit ) ;
63358: LD_VAR 0 1
63362: PPUSH
63363: CALL_OW 141
// end ;
63367: LD_VAR 0 4
63371: RET
// export function Abs ( value ) ; begin
63372: LD_INT 0
63374: PPUSH
// result := value ;
63375: LD_ADDR_VAR 0 2
63379: PUSH
63380: LD_VAR 0 1
63384: ST_TO_ADDR
// if value < 0 then
63385: LD_VAR 0 1
63389: PUSH
63390: LD_INT 0
63392: LESS
63393: IFFALSE 63410
// result := value * - 1 ;
63395: LD_ADDR_VAR 0 2
63399: PUSH
63400: LD_VAR 0 1
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: MUL
63409: ST_TO_ADDR
// end ;
63410: LD_VAR 0 2
63414: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63415: LD_INT 0
63417: PPUSH
63418: PPUSH
63419: PPUSH
63420: PPUSH
63421: PPUSH
63422: PPUSH
63423: PPUSH
63424: PPUSH
// if not unit or not building then
63425: LD_VAR 0 1
63429: NOT
63430: PUSH
63431: LD_VAR 0 2
63435: NOT
63436: OR
63437: IFFALSE 63441
// exit ;
63439: GO 63667
// x := GetX ( building ) ;
63441: LD_ADDR_VAR 0 4
63445: PUSH
63446: LD_VAR 0 2
63450: PPUSH
63451: CALL_OW 250
63455: ST_TO_ADDR
// y := GetY ( building ) ;
63456: LD_ADDR_VAR 0 6
63460: PUSH
63461: LD_VAR 0 2
63465: PPUSH
63466: CALL_OW 251
63470: ST_TO_ADDR
// d := GetDir ( building ) ;
63471: LD_ADDR_VAR 0 8
63475: PUSH
63476: LD_VAR 0 2
63480: PPUSH
63481: CALL_OW 254
63485: ST_TO_ADDR
// r := 4 ;
63486: LD_ADDR_VAR 0 9
63490: PUSH
63491: LD_INT 4
63493: ST_TO_ADDR
// for i := 1 to 5 do
63494: LD_ADDR_VAR 0 10
63498: PUSH
63499: DOUBLE
63500: LD_INT 1
63502: DEC
63503: ST_TO_ADDR
63504: LD_INT 5
63506: PUSH
63507: FOR_TO
63508: IFFALSE 63665
// begin _x := ShiftX ( x , d , r + i ) ;
63510: LD_ADDR_VAR 0 5
63514: PUSH
63515: LD_VAR 0 4
63519: PPUSH
63520: LD_VAR 0 8
63524: PPUSH
63525: LD_VAR 0 9
63529: PUSH
63530: LD_VAR 0 10
63534: PLUS
63535: PPUSH
63536: CALL_OW 272
63540: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63541: LD_ADDR_VAR 0 7
63545: PUSH
63546: LD_VAR 0 6
63550: PPUSH
63551: LD_VAR 0 8
63555: PPUSH
63556: LD_VAR 0 9
63560: PUSH
63561: LD_VAR 0 10
63565: PLUS
63566: PPUSH
63567: CALL_OW 273
63571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63572: LD_VAR 0 5
63576: PPUSH
63577: LD_VAR 0 7
63581: PPUSH
63582: CALL_OW 488
63586: PUSH
63587: LD_VAR 0 5
63591: PPUSH
63592: LD_VAR 0 7
63596: PPUSH
63597: CALL_OW 428
63601: PPUSH
63602: CALL_OW 247
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: LD_INT 2
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: IN
63617: NOT
63618: AND
63619: IFFALSE 63663
// begin ComMoveXY ( unit , _x , _y ) ;
63621: LD_VAR 0 1
63625: PPUSH
63626: LD_VAR 0 5
63630: PPUSH
63631: LD_VAR 0 7
63635: PPUSH
63636: CALL_OW 111
// result := [ _x , _y ] ;
63640: LD_ADDR_VAR 0 3
63644: PUSH
63645: LD_VAR 0 5
63649: PUSH
63650: LD_VAR 0 7
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// exit ;
63659: POP
63660: POP
63661: GO 63667
// end ; end ;
63663: GO 63507
63665: POP
63666: POP
// end ;
63667: LD_VAR 0 3
63671: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63672: LD_INT 0
63674: PPUSH
63675: PPUSH
63676: PPUSH
// result := 0 ;
63677: LD_ADDR_VAR 0 3
63681: PUSH
63682: LD_INT 0
63684: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63685: LD_VAR 0 1
63689: PUSH
63690: LD_INT 0
63692: LESS
63693: PUSH
63694: LD_VAR 0 1
63698: PUSH
63699: LD_INT 8
63701: GREATER
63702: OR
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_INT 0
63711: LESS
63712: OR
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 8
63721: GREATER
63722: OR
63723: IFFALSE 63727
// exit ;
63725: GO 63802
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63727: LD_ADDR_VAR 0 4
63731: PUSH
63732: LD_INT 22
63734: PUSH
63735: LD_VAR 0 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PPUSH
63744: CALL_OW 69
63748: PUSH
63749: FOR_IN
63750: IFFALSE 63800
// begin un := UnitShoot ( i ) ;
63752: LD_ADDR_VAR 0 5
63756: PUSH
63757: LD_VAR 0 4
63761: PPUSH
63762: CALL_OW 504
63766: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63767: LD_VAR 0 5
63771: PPUSH
63772: CALL_OW 255
63776: PUSH
63777: LD_VAR 0 1
63781: EQUAL
63782: IFFALSE 63798
// begin result := un ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 5
63793: ST_TO_ADDR
// exit ;
63794: POP
63795: POP
63796: GO 63802
// end ; end ;
63798: GO 63749
63800: POP
63801: POP
// end ;
63802: LD_VAR 0 3
63806: RET
// export function GetCargoBay ( units ) ; begin
63807: LD_INT 0
63809: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 34
63825: PUSH
63826: LD_INT 12
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 34
63835: PUSH
63836: LD_INT 51
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 34
63845: PUSH
63846: LD_INT 32
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 34
63855: PUSH
63856: LD_INT 89
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: PPUSH
63870: CALL_OW 72
63874: ST_TO_ADDR
// end ;
63875: LD_VAR 0 2
63879: RET
// export function Negate ( value ) ; begin
63880: LD_INT 0
63882: PPUSH
// result := not value ;
63883: LD_ADDR_VAR 0 2
63887: PUSH
63888: LD_VAR 0 1
63892: NOT
63893: ST_TO_ADDR
// end ;
63894: LD_VAR 0 2
63898: RET
// export function Inc ( value ) ; begin
63899: LD_INT 0
63901: PPUSH
// result := value + 1 ;
63902: LD_ADDR_VAR 0 2
63906: PUSH
63907: LD_VAR 0 1
63911: PUSH
63912: LD_INT 1
63914: PLUS
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 2
63920: RET
// export function Dec ( value ) ; begin
63921: LD_INT 0
63923: PPUSH
// result := value - 1 ;
63924: LD_ADDR_VAR 0 2
63928: PUSH
63929: LD_VAR 0 1
63933: PUSH
63934: LD_INT 1
63936: MINUS
63937: ST_TO_ADDR
// end ;
63938: LD_VAR 0 2
63942: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63943: LD_INT 0
63945: PPUSH
63946: PPUSH
63947: PPUSH
63948: PPUSH
63949: PPUSH
63950: PPUSH
63951: PPUSH
63952: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63953: LD_VAR 0 1
63957: PPUSH
63958: LD_VAR 0 2
63962: PPUSH
63963: CALL_OW 488
63967: NOT
63968: PUSH
63969: LD_VAR 0 3
63973: PPUSH
63974: LD_VAR 0 4
63978: PPUSH
63979: CALL_OW 488
63983: NOT
63984: OR
63985: IFFALSE 63998
// begin result := - 1 ;
63987: LD_ADDR_VAR 0 5
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: ST_TO_ADDR
// exit ;
63996: GO 64233
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63998: LD_ADDR_VAR 0 12
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: LD_VAR 0 3
64017: PPUSH
64018: LD_VAR 0 4
64022: PPUSH
64023: CALL 63083 0 4
64027: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64028: LD_ADDR_VAR 0 11
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_VAR 0 12
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: PPUSH
64052: LD_VAR 0 12
64056: PUSH
64057: LD_INT 2
64059: ARRAY
64060: PPUSH
64061: CALL_OW 298
64065: ST_TO_ADDR
// distance := 9999 ;
64066: LD_ADDR_VAR 0 10
64070: PUSH
64071: LD_INT 9999
64073: ST_TO_ADDR
// for i := 0 to 5 do
64074: LD_ADDR_VAR 0 6
64078: PUSH
64079: DOUBLE
64080: LD_INT 0
64082: DEC
64083: ST_TO_ADDR
64084: LD_INT 5
64086: PUSH
64087: FOR_TO
64088: IFFALSE 64231
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64090: LD_ADDR_VAR 0 7
64094: PUSH
64095: LD_VAR 0 1
64099: PPUSH
64100: LD_VAR 0 6
64104: PPUSH
64105: LD_VAR 0 11
64109: PPUSH
64110: CALL_OW 272
64114: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64115: LD_ADDR_VAR 0 8
64119: PUSH
64120: LD_VAR 0 2
64124: PPUSH
64125: LD_VAR 0 6
64129: PPUSH
64130: LD_VAR 0 11
64134: PPUSH
64135: CALL_OW 273
64139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64140: LD_VAR 0 7
64144: PPUSH
64145: LD_VAR 0 8
64149: PPUSH
64150: CALL_OW 488
64154: NOT
64155: IFFALSE 64159
// continue ;
64157: GO 64087
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64159: LD_ADDR_VAR 0 9
64163: PUSH
64164: LD_VAR 0 12
64168: PUSH
64169: LD_INT 1
64171: ARRAY
64172: PPUSH
64173: LD_VAR 0 12
64177: PUSH
64178: LD_INT 2
64180: ARRAY
64181: PPUSH
64182: LD_VAR 0 7
64186: PPUSH
64187: LD_VAR 0 8
64191: PPUSH
64192: CALL_OW 298
64196: ST_TO_ADDR
// if tmp < distance then
64197: LD_VAR 0 9
64201: PUSH
64202: LD_VAR 0 10
64206: LESS
64207: IFFALSE 64229
// begin result := i ;
64209: LD_ADDR_VAR 0 5
64213: PUSH
64214: LD_VAR 0 6
64218: ST_TO_ADDR
// distance := tmp ;
64219: LD_ADDR_VAR 0 10
64223: PUSH
64224: LD_VAR 0 9
64228: ST_TO_ADDR
// end ; end ;
64229: GO 64087
64231: POP
64232: POP
// end ;
64233: LD_VAR 0 5
64237: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64238: LD_INT 0
64240: PPUSH
64241: PPUSH
// if not driver or not IsInUnit ( driver ) then
64242: LD_VAR 0 1
64246: NOT
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 310
64257: NOT
64258: OR
64259: IFFALSE 64263
// exit ;
64261: GO 64353
// vehicle := IsInUnit ( driver ) ;
64263: LD_ADDR_VAR 0 3
64267: PUSH
64268: LD_VAR 0 1
64272: PPUSH
64273: CALL_OW 310
64277: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64278: LD_VAR 0 1
64282: PPUSH
64283: LD_STRING \
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: PUSH
64313: LD_STRING E
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_VAR 0 3
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PPUSH
64349: CALL_OW 446
// end ;
64353: LD_VAR 0 2
64357: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64358: LD_INT 0
64360: PPUSH
64361: PPUSH
// if not driver or not IsInUnit ( driver ) then
64362: LD_VAR 0 1
64366: NOT
64367: PUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: CALL_OW 310
64377: NOT
64378: OR
64379: IFFALSE 64383
// exit ;
64381: GO 64473
// vehicle := IsInUnit ( driver ) ;
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 1
64392: PPUSH
64393: CALL_OW 310
64397: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64398: LD_VAR 0 1
64402: PPUSH
64403: LD_STRING \
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: PUSH
64433: LD_STRING E
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_VAR 0 3
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PPUSH
64469: CALL_OW 447
// end ;
64473: LD_VAR 0 2
64477: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64478: LD_INT 0
64480: PPUSH
64481: PPUSH
64482: PPUSH
// tmp := [ ] ;
64483: LD_ADDR_VAR 0 5
64487: PUSH
64488: EMPTY
64489: ST_TO_ADDR
// for i in units do
64490: LD_ADDR_VAR 0 4
64494: PUSH
64495: LD_VAR 0 1
64499: PUSH
64500: FOR_IN
64501: IFFALSE 64539
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64503: LD_ADDR_VAR 0 5
64507: PUSH
64508: LD_VAR 0 5
64512: PPUSH
64513: LD_VAR 0 5
64517: PUSH
64518: LD_INT 1
64520: PLUS
64521: PPUSH
64522: LD_VAR 0 4
64526: PPUSH
64527: CALL_OW 256
64531: PPUSH
64532: CALL_OW 2
64536: ST_TO_ADDR
64537: GO 64500
64539: POP
64540: POP
// if not tmp then
64541: LD_VAR 0 5
64545: NOT
64546: IFFALSE 64550
// exit ;
64548: GO 64598
// if asc then
64550: LD_VAR 0 2
64554: IFFALSE 64578
// result := SortListByListAsc ( units , tmp ) else
64556: LD_ADDR_VAR 0 3
64560: PUSH
64561: LD_VAR 0 1
64565: PPUSH
64566: LD_VAR 0 5
64570: PPUSH
64571: CALL_OW 76
64575: ST_TO_ADDR
64576: GO 64598
// result := SortListByListDesc ( units , tmp ) ;
64578: LD_ADDR_VAR 0 3
64582: PUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: LD_VAR 0 5
64592: PPUSH
64593: CALL_OW 77
64597: ST_TO_ADDR
// end ;
64598: LD_VAR 0 3
64602: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64603: LD_INT 0
64605: PPUSH
64606: PPUSH
// task := GetTaskList ( mech ) ;
64607: LD_ADDR_VAR 0 4
64611: PUSH
64612: LD_VAR 0 1
64616: PPUSH
64617: CALL_OW 437
64621: ST_TO_ADDR
// if not task then
64622: LD_VAR 0 4
64626: NOT
64627: IFFALSE 64631
// exit ;
64629: GO 64673
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64631: LD_ADDR_VAR 0 3
64635: PUSH
64636: LD_VAR 0 4
64640: PUSH
64641: LD_INT 1
64643: ARRAY
64644: PUSH
64645: LD_INT 1
64647: ARRAY
64648: PUSH
64649: LD_STRING r
64651: EQUAL
64652: PUSH
64653: LD_VAR 0 4
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: LD_INT 4
64664: ARRAY
64665: PUSH
64666: LD_VAR 0 2
64670: EQUAL
64671: AND
64672: ST_TO_ADDR
// end ;
64673: LD_VAR 0 3
64677: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64678: LD_INT 0
64680: PPUSH
// SetDir ( unit , d ) ;
64681: LD_VAR 0 1
64685: PPUSH
64686: LD_VAR 0 4
64690: PPUSH
64691: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: LD_VAR 0 5
64714: PPUSH
64715: CALL_OW 48
// end ;
64719: LD_VAR 0 6
64723: RET
// export function ToNaturalNumber ( number ) ; begin
64724: LD_INT 0
64726: PPUSH
// result := number div 1 ;
64727: LD_ADDR_VAR 0 2
64731: PUSH
64732: LD_VAR 0 1
64736: PUSH
64737: LD_INT 1
64739: DIV
64740: ST_TO_ADDR
// if number < 0 then
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 0
64748: LESS
64749: IFFALSE 64759
// result := 0 ;
64751: LD_ADDR_VAR 0 2
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// end ;
64759: LD_VAR 0 2
64763: RET
// export function SortByClass ( units , class ) ; var un ; begin
64764: LD_INT 0
64766: PPUSH
64767: PPUSH
// if not units or not class then
64768: LD_VAR 0 1
64772: NOT
64773: PUSH
64774: LD_VAR 0 2
64778: NOT
64779: OR
64780: IFFALSE 64784
// exit ;
64782: GO 64879
// result := [ ] ;
64784: LD_ADDR_VAR 0 3
64788: PUSH
64789: EMPTY
64790: ST_TO_ADDR
// for un in units do
64791: LD_ADDR_VAR 0 4
64795: PUSH
64796: LD_VAR 0 1
64800: PUSH
64801: FOR_IN
64802: IFFALSE 64877
// if GetClass ( un ) = class then
64804: LD_VAR 0 4
64808: PPUSH
64809: CALL_OW 257
64813: PUSH
64814: LD_VAR 0 2
64818: EQUAL
64819: IFFALSE 64846
// result := Insert ( result , 1 , un ) else
64821: LD_ADDR_VAR 0 3
64825: PUSH
64826: LD_VAR 0 3
64830: PPUSH
64831: LD_INT 1
64833: PPUSH
64834: LD_VAR 0 4
64838: PPUSH
64839: CALL_OW 2
64843: ST_TO_ADDR
64844: GO 64875
// result := Replace ( result , result + 1 , un ) ;
64846: LD_ADDR_VAR 0 3
64850: PUSH
64851: LD_VAR 0 3
64855: PPUSH
64856: LD_VAR 0 3
64860: PUSH
64861: LD_INT 1
64863: PLUS
64864: PPUSH
64865: LD_VAR 0 4
64869: PPUSH
64870: CALL_OW 1
64874: ST_TO_ADDR
64875: GO 64801
64877: POP
64878: POP
// end ;
64879: LD_VAR 0 3
64883: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64884: LD_INT 0
64886: PPUSH
64887: PPUSH
64888: PPUSH
64889: PPUSH
64890: PPUSH
64891: PPUSH
64892: PPUSH
// result := [ ] ;
64893: LD_ADDR_VAR 0 4
64897: PUSH
64898: EMPTY
64899: ST_TO_ADDR
// if x - r < 0 then
64900: LD_VAR 0 1
64904: PUSH
64905: LD_VAR 0 3
64909: MINUS
64910: PUSH
64911: LD_INT 0
64913: LESS
64914: IFFALSE 64926
// min_x := 0 else
64916: LD_ADDR_VAR 0 8
64920: PUSH
64921: LD_INT 0
64923: ST_TO_ADDR
64924: GO 64942
// min_x := x - r ;
64926: LD_ADDR_VAR 0 8
64930: PUSH
64931: LD_VAR 0 1
64935: PUSH
64936: LD_VAR 0 3
64940: MINUS
64941: ST_TO_ADDR
// if y - r < 0 then
64942: LD_VAR 0 2
64946: PUSH
64947: LD_VAR 0 3
64951: MINUS
64952: PUSH
64953: LD_INT 0
64955: LESS
64956: IFFALSE 64968
// min_y := 0 else
64958: LD_ADDR_VAR 0 7
64962: PUSH
64963: LD_INT 0
64965: ST_TO_ADDR
64966: GO 64984
// min_y := y - r ;
64968: LD_ADDR_VAR 0 7
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_VAR 0 3
64982: MINUS
64983: ST_TO_ADDR
// max_x := x + r ;
64984: LD_ADDR_VAR 0 9
64988: PUSH
64989: LD_VAR 0 1
64993: PUSH
64994: LD_VAR 0 3
64998: PLUS
64999: ST_TO_ADDR
// max_y := y + r ;
65000: LD_ADDR_VAR 0 10
65004: PUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_VAR 0 3
65014: PLUS
65015: ST_TO_ADDR
// for _x = min_x to max_x do
65016: LD_ADDR_VAR 0 5
65020: PUSH
65021: DOUBLE
65022: LD_VAR 0 8
65026: DEC
65027: ST_TO_ADDR
65028: LD_VAR 0 9
65032: PUSH
65033: FOR_TO
65034: IFFALSE 65135
// for _y = min_y to max_y do
65036: LD_ADDR_VAR 0 6
65040: PUSH
65041: DOUBLE
65042: LD_VAR 0 7
65046: DEC
65047: ST_TO_ADDR
65048: LD_VAR 0 10
65052: PUSH
65053: FOR_TO
65054: IFFALSE 65131
// begin if not ValidHex ( _x , _y ) then
65056: LD_VAR 0 5
65060: PPUSH
65061: LD_VAR 0 6
65065: PPUSH
65066: CALL_OW 488
65070: NOT
65071: IFFALSE 65075
// continue ;
65073: GO 65053
// if GetResourceTypeXY ( _x , _y ) then
65075: LD_VAR 0 5
65079: PPUSH
65080: LD_VAR 0 6
65084: PPUSH
65085: CALL_OW 283
65089: IFFALSE 65129
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65091: LD_ADDR_VAR 0 4
65095: PUSH
65096: LD_VAR 0 4
65100: PPUSH
65101: LD_VAR 0 4
65105: PUSH
65106: LD_INT 1
65108: PLUS
65109: PPUSH
65110: LD_VAR 0 5
65114: PUSH
65115: LD_VAR 0 6
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PPUSH
65124: CALL_OW 1
65128: ST_TO_ADDR
// end ;
65129: GO 65053
65131: POP
65132: POP
65133: GO 65033
65135: POP
65136: POP
// end ;
65137: LD_VAR 0 4
65141: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65142: LD_INT 0
65144: PPUSH
65145: PPUSH
65146: PPUSH
65147: PPUSH
65148: PPUSH
65149: PPUSH
65150: PPUSH
65151: PPUSH
// if not units then
65152: LD_VAR 0 1
65156: NOT
65157: IFFALSE 65161
// exit ;
65159: GO 65685
// result := UnitFilter ( units , [ f_ok ] ) ;
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: LD_VAR 0 1
65170: PPUSH
65171: LD_INT 50
65173: PUSH
65174: EMPTY
65175: LIST
65176: PPUSH
65177: CALL_OW 72
65181: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65182: LD_ADDR_VAR 0 8
65186: PUSH
65187: LD_VAR 0 1
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: PPUSH
65196: CALL_OW 255
65200: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65201: LD_ADDR_VAR 0 10
65205: PUSH
65206: LD_INT 29
65208: PUSH
65209: LD_INT 91
65211: PUSH
65212: LD_INT 49
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: ST_TO_ADDR
// if not result then
65220: LD_VAR 0 3
65224: NOT
65225: IFFALSE 65229
// exit ;
65227: GO 65685
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65229: LD_ADDR_VAR 0 5
65233: PUSH
65234: LD_INT 81
65236: PUSH
65237: LD_VAR 0 8
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PPUSH
65246: CALL_OW 69
65250: ST_TO_ADDR
// for i in result do
65251: LD_ADDR_VAR 0 4
65255: PUSH
65256: LD_VAR 0 3
65260: PUSH
65261: FOR_IN
65262: IFFALSE 65683
// begin tag := GetTag ( i ) + 1 ;
65264: LD_ADDR_VAR 0 9
65268: PUSH
65269: LD_VAR 0 4
65273: PPUSH
65274: CALL_OW 110
65278: PUSH
65279: LD_INT 1
65281: PLUS
65282: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65283: LD_ADDR_VAR 0 7
65287: PUSH
65288: LD_VAR 0 4
65292: PPUSH
65293: CALL_OW 250
65297: PPUSH
65298: LD_VAR 0 4
65302: PPUSH
65303: CALL_OW 251
65307: PPUSH
65308: LD_INT 6
65310: PPUSH
65311: CALL 64884 0 3
65315: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65316: LD_VAR 0 4
65320: PPUSH
65321: CALL_OW 247
65325: PUSH
65326: LD_INT 2
65328: EQUAL
65329: PUSH
65330: LD_VAR 0 7
65334: AND
65335: PUSH
65336: LD_VAR 0 4
65340: PPUSH
65341: CALL_OW 264
65345: PUSH
65346: LD_VAR 0 10
65350: IN
65351: NOT
65352: AND
65353: IFFALSE 65392
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65355: LD_VAR 0 4
65359: PPUSH
65360: LD_VAR 0 7
65364: PUSH
65365: LD_INT 1
65367: ARRAY
65368: PUSH
65369: LD_INT 1
65371: ARRAY
65372: PPUSH
65373: LD_VAR 0 7
65377: PUSH
65378: LD_INT 1
65380: ARRAY
65381: PUSH
65382: LD_INT 2
65384: ARRAY
65385: PPUSH
65386: CALL_OW 116
65390: GO 65681
// if path > tag then
65392: LD_VAR 0 2
65396: PUSH
65397: LD_VAR 0 9
65401: GREATER
65402: IFFALSE 65610
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65404: LD_ADDR_VAR 0 6
65408: PUSH
65409: LD_VAR 0 5
65413: PPUSH
65414: LD_INT 91
65416: PUSH
65417: LD_VAR 0 4
65421: PUSH
65422: LD_INT 8
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: PPUSH
65430: CALL_OW 72
65434: ST_TO_ADDR
// if nearEnemy then
65435: LD_VAR 0 6
65439: IFFALSE 65508
// begin if GetWeapon ( i ) = ru_time_lapser then
65441: LD_VAR 0 4
65445: PPUSH
65446: CALL_OW 264
65450: PUSH
65451: LD_INT 49
65453: EQUAL
65454: IFFALSE 65482
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65456: LD_VAR 0 4
65460: PPUSH
65461: LD_VAR 0 6
65465: PPUSH
65466: LD_VAR 0 4
65470: PPUSH
65471: CALL_OW 74
65475: PPUSH
65476: CALL_OW 112
65480: GO 65506
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65482: LD_VAR 0 4
65486: PPUSH
65487: LD_VAR 0 6
65491: PPUSH
65492: LD_VAR 0 4
65496: PPUSH
65497: CALL_OW 74
65501: PPUSH
65502: CALL 66610 0 2
// end else
65506: GO 65608
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65508: LD_VAR 0 4
65512: PPUSH
65513: LD_VAR 0 2
65517: PUSH
65518: LD_VAR 0 9
65522: ARRAY
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: PPUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_VAR 0 9
65537: ARRAY
65538: PUSH
65539: LD_INT 2
65541: ARRAY
65542: PPUSH
65543: CALL_OW 297
65547: PUSH
65548: LD_INT 6
65550: GREATER
65551: IFFALSE 65594
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65553: LD_VAR 0 4
65557: PPUSH
65558: LD_VAR 0 2
65562: PUSH
65563: LD_VAR 0 9
65567: ARRAY
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: PPUSH
65573: LD_VAR 0 2
65577: PUSH
65578: LD_VAR 0 9
65582: ARRAY
65583: PUSH
65584: LD_INT 2
65586: ARRAY
65587: PPUSH
65588: CALL_OW 114
65592: GO 65608
// SetTag ( i , tag ) ;
65594: LD_VAR 0 4
65598: PPUSH
65599: LD_VAR 0 9
65603: PPUSH
65604: CALL_OW 109
// end else
65608: GO 65681
// if enemy then
65610: LD_VAR 0 5
65614: IFFALSE 65681
// begin if GetWeapon ( i ) = ru_time_lapser then
65616: LD_VAR 0 4
65620: PPUSH
65621: CALL_OW 264
65625: PUSH
65626: LD_INT 49
65628: EQUAL
65629: IFFALSE 65657
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65631: LD_VAR 0 4
65635: PPUSH
65636: LD_VAR 0 5
65640: PPUSH
65641: LD_VAR 0 4
65645: PPUSH
65646: CALL_OW 74
65650: PPUSH
65651: CALL_OW 112
65655: GO 65681
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65657: LD_VAR 0 4
65661: PPUSH
65662: LD_VAR 0 5
65666: PPUSH
65667: LD_VAR 0 4
65671: PPUSH
65672: CALL_OW 74
65676: PPUSH
65677: CALL 66610 0 2
// end ; end ;
65681: GO 65261
65683: POP
65684: POP
// end ;
65685: LD_VAR 0 3
65689: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
// if not unit or IsInUnit ( unit ) then
65695: LD_VAR 0 1
65699: NOT
65700: PUSH
65701: LD_VAR 0 1
65705: PPUSH
65706: CALL_OW 310
65710: OR
65711: IFFALSE 65715
// exit ;
65713: GO 65806
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65715: LD_ADDR_VAR 0 4
65719: PUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: CALL_OW 250
65729: PPUSH
65730: LD_VAR 0 2
65734: PPUSH
65735: LD_INT 1
65737: PPUSH
65738: CALL_OW 272
65742: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65743: LD_ADDR_VAR 0 5
65747: PUSH
65748: LD_VAR 0 1
65752: PPUSH
65753: CALL_OW 251
65757: PPUSH
65758: LD_VAR 0 2
65762: PPUSH
65763: LD_INT 1
65765: PPUSH
65766: CALL_OW 273
65770: ST_TO_ADDR
// if ValidHex ( x , y ) then
65771: LD_VAR 0 4
65775: PPUSH
65776: LD_VAR 0 5
65780: PPUSH
65781: CALL_OW 488
65785: IFFALSE 65806
// ComTurnXY ( unit , x , y ) ;
65787: LD_VAR 0 1
65791: PPUSH
65792: LD_VAR 0 4
65796: PPUSH
65797: LD_VAR 0 5
65801: PPUSH
65802: CALL_OW 118
// end ;
65806: LD_VAR 0 3
65810: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65811: LD_INT 0
65813: PPUSH
65814: PPUSH
// result := false ;
65815: LD_ADDR_VAR 0 3
65819: PUSH
65820: LD_INT 0
65822: ST_TO_ADDR
// if not units then
65823: LD_VAR 0 2
65827: NOT
65828: IFFALSE 65832
// exit ;
65830: GO 65877
// for i in units do
65832: LD_ADDR_VAR 0 4
65836: PUSH
65837: LD_VAR 0 2
65841: PUSH
65842: FOR_IN
65843: IFFALSE 65875
// if See ( side , i ) then
65845: LD_VAR 0 1
65849: PPUSH
65850: LD_VAR 0 4
65854: PPUSH
65855: CALL_OW 292
65859: IFFALSE 65873
// begin result := true ;
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_INT 1
65868: ST_TO_ADDR
// exit ;
65869: POP
65870: POP
65871: GO 65877
// end ;
65873: GO 65842
65875: POP
65876: POP
// end ;
65877: LD_VAR 0 3
65881: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65882: LD_INT 0
65884: PPUSH
65885: PPUSH
65886: PPUSH
65887: PPUSH
// if not unit or not points then
65888: LD_VAR 0 1
65892: NOT
65893: PUSH
65894: LD_VAR 0 2
65898: NOT
65899: OR
65900: IFFALSE 65904
// exit ;
65902: GO 65994
// dist := 99999 ;
65904: LD_ADDR_VAR 0 5
65908: PUSH
65909: LD_INT 99999
65911: ST_TO_ADDR
// for i in points do
65912: LD_ADDR_VAR 0 4
65916: PUSH
65917: LD_VAR 0 2
65921: PUSH
65922: FOR_IN
65923: IFFALSE 65992
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65925: LD_ADDR_VAR 0 6
65929: PUSH
65930: LD_VAR 0 1
65934: PPUSH
65935: LD_VAR 0 4
65939: PUSH
65940: LD_INT 1
65942: ARRAY
65943: PPUSH
65944: LD_VAR 0 4
65948: PUSH
65949: LD_INT 2
65951: ARRAY
65952: PPUSH
65953: CALL_OW 297
65957: ST_TO_ADDR
// if tmpDist < dist then
65958: LD_VAR 0 6
65962: PUSH
65963: LD_VAR 0 5
65967: LESS
65968: IFFALSE 65990
// begin result := i ;
65970: LD_ADDR_VAR 0 3
65974: PUSH
65975: LD_VAR 0 4
65979: ST_TO_ADDR
// dist := tmpDist ;
65980: LD_ADDR_VAR 0 5
65984: PUSH
65985: LD_VAR 0 6
65989: ST_TO_ADDR
// end ; end ;
65990: GO 65922
65992: POP
65993: POP
// end ;
65994: LD_VAR 0 3
65998: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65999: LD_INT 0
66001: PPUSH
// uc_side := side ;
66002: LD_ADDR_OWVAR 20
66006: PUSH
66007: LD_VAR 0 1
66011: ST_TO_ADDR
// uc_nation := 3 ;
66012: LD_ADDR_OWVAR 21
66016: PUSH
66017: LD_INT 3
66019: ST_TO_ADDR
// vc_chassis := 25 ;
66020: LD_ADDR_OWVAR 37
66024: PUSH
66025: LD_INT 25
66027: ST_TO_ADDR
// vc_engine := engine_siberite ;
66028: LD_ADDR_OWVAR 39
66032: PUSH
66033: LD_INT 3
66035: ST_TO_ADDR
// vc_control := control_computer ;
66036: LD_ADDR_OWVAR 38
66040: PUSH
66041: LD_INT 3
66043: ST_TO_ADDR
// vc_weapon := 59 ;
66044: LD_ADDR_OWVAR 40
66048: PUSH
66049: LD_INT 59
66051: ST_TO_ADDR
// result := CreateVehicle ;
66052: LD_ADDR_VAR 0 5
66056: PUSH
66057: CALL_OW 45
66061: ST_TO_ADDR
// SetDir ( result , d ) ;
66062: LD_VAR 0 5
66066: PPUSH
66067: LD_VAR 0 4
66071: PPUSH
66072: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66076: LD_VAR 0 5
66080: PPUSH
66081: LD_VAR 0 2
66085: PPUSH
66086: LD_VAR 0 3
66090: PPUSH
66091: LD_INT 0
66093: PPUSH
66094: CALL_OW 48
// end ;
66098: LD_VAR 0 5
66102: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66103: LD_INT 0
66105: PPUSH
66106: PPUSH
66107: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66108: LD_ADDR_VAR 0 2
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66131: LD_VAR 0 1
66135: NOT
66136: PUSH
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 264
66146: PUSH
66147: LD_INT 12
66149: PUSH
66150: LD_INT 51
66152: PUSH
66153: LD_INT 32
66155: PUSH
66156: LD_INT 89
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: IN
66165: NOT
66166: OR
66167: IFFALSE 66171
// exit ;
66169: GO 66269
// for i := 1 to 3 do
66171: LD_ADDR_VAR 0 3
66175: PUSH
66176: DOUBLE
66177: LD_INT 1
66179: DEC
66180: ST_TO_ADDR
66181: LD_INT 3
66183: PUSH
66184: FOR_TO
66185: IFFALSE 66267
// begin tmp := GetCargo ( cargo , i ) ;
66187: LD_ADDR_VAR 0 4
66191: PUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_VAR 0 3
66201: PPUSH
66202: CALL_OW 289
66206: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66207: LD_ADDR_VAR 0 2
66211: PUSH
66212: LD_VAR 0 2
66216: PPUSH
66217: LD_VAR 0 3
66221: PPUSH
66222: LD_VAR 0 4
66226: PPUSH
66227: CALL_OW 1
66231: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66232: LD_ADDR_VAR 0 2
66236: PUSH
66237: LD_VAR 0 2
66241: PPUSH
66242: LD_INT 4
66244: PPUSH
66245: LD_VAR 0 2
66249: PUSH
66250: LD_INT 4
66252: ARRAY
66253: PUSH
66254: LD_VAR 0 4
66258: PLUS
66259: PPUSH
66260: CALL_OW 1
66264: ST_TO_ADDR
// end ;
66265: GO 66184
66267: POP
66268: POP
// end ;
66269: LD_VAR 0 2
66273: RET
// export function Length ( array ) ; begin
66274: LD_INT 0
66276: PPUSH
// result := array + 0 ;
66277: LD_ADDR_VAR 0 2
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 0
66289: PLUS
66290: ST_TO_ADDR
// end ;
66291: LD_VAR 0 2
66295: RET
// export function PrepareArray ( array ) ; begin
66296: LD_INT 0
66298: PPUSH
// result := array diff 0 ;
66299: LD_ADDR_VAR 0 2
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 0
66311: DIFF
66312: ST_TO_ADDR
// if not result [ 1 ] then
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 1
66320: ARRAY
66321: NOT
66322: IFFALSE 66342
// result := Delete ( result , 1 ) ;
66324: LD_ADDR_VAR 0 2
66328: PUSH
66329: LD_VAR 0 2
66333: PPUSH
66334: LD_INT 1
66336: PPUSH
66337: CALL_OW 3
66341: ST_TO_ADDR
// end ;
66342: LD_VAR 0 2
66346: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66347: LD_INT 0
66349: PPUSH
66350: PPUSH
66351: PPUSH
66352: PPUSH
// sibRocketRange := 25 ;
66353: LD_ADDR_VAR 0 6
66357: PUSH
66358: LD_INT 25
66360: ST_TO_ADDR
// result := false ;
66361: LD_ADDR_VAR 0 4
66365: PUSH
66366: LD_INT 0
66368: ST_TO_ADDR
// for i := 0 to 5 do
66369: LD_ADDR_VAR 0 5
66373: PUSH
66374: DOUBLE
66375: LD_INT 0
66377: DEC
66378: ST_TO_ADDR
66379: LD_INT 5
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66450
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66385: LD_VAR 0 1
66389: PPUSH
66390: LD_VAR 0 5
66394: PPUSH
66395: LD_VAR 0 6
66399: PPUSH
66400: CALL_OW 272
66404: PPUSH
66405: LD_VAR 0 2
66409: PPUSH
66410: LD_VAR 0 5
66414: PPUSH
66415: LD_VAR 0 6
66419: PPUSH
66420: CALL_OW 273
66424: PPUSH
66425: LD_VAR 0 3
66429: PPUSH
66430: CALL_OW 309
66434: IFFALSE 66448
// begin result := true ;
66436: LD_ADDR_VAR 0 4
66440: PUSH
66441: LD_INT 1
66443: ST_TO_ADDR
// exit ;
66444: POP
66445: POP
66446: GO 66452
// end ;
66448: GO 66382
66450: POP
66451: POP
// end ;
66452: LD_VAR 0 4
66456: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66457: LD_INT 0
66459: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66460: LD_VAR 0 1
66464: PPUSH
66465: LD_VAR 0 2
66469: PPUSH
66470: LD_INT 0
66472: PPUSH
66473: LD_INT 0
66475: PPUSH
66476: LD_INT 1
66478: PPUSH
66479: LD_INT 0
66481: PPUSH
66482: CALL_OW 587
// end ;
66486: LD_VAR 0 3
66490: RET
// export function CenterOnNow ( unit ) ; begin
66491: LD_INT 0
66493: PPUSH
// result := IsInUnit ( unit ) ;
66494: LD_ADDR_VAR 0 2
66498: PUSH
66499: LD_VAR 0 1
66503: PPUSH
66504: CALL_OW 310
66508: ST_TO_ADDR
// if not result then
66509: LD_VAR 0 2
66513: NOT
66514: IFFALSE 66526
// result := unit ;
66516: LD_ADDR_VAR 0 2
66520: PUSH
66521: LD_VAR 0 1
66525: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66526: LD_VAR 0 1
66530: PPUSH
66531: CALL_OW 87
// end ;
66535: LD_VAR 0 2
66539: RET
// export function ComMoveHex ( unit , hex ) ; begin
66540: LD_INT 0
66542: PPUSH
// if not hex then
66543: LD_VAR 0 2
66547: NOT
66548: IFFALSE 66552
// exit ;
66550: GO 66605
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66552: LD_VAR 0 2
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PPUSH
66561: LD_VAR 0 2
66565: PUSH
66566: LD_INT 2
66568: ARRAY
66569: PPUSH
66570: CALL_OW 428
66574: IFFALSE 66578
// exit ;
66576: GO 66605
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66578: LD_VAR 0 1
66582: PPUSH
66583: LD_VAR 0 2
66587: PUSH
66588: LD_INT 1
66590: ARRAY
66591: PPUSH
66592: LD_VAR 0 2
66596: PUSH
66597: LD_INT 2
66599: ARRAY
66600: PPUSH
66601: CALL_OW 111
// end ;
66605: LD_VAR 0 3
66609: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66610: LD_INT 0
66612: PPUSH
66613: PPUSH
66614: PPUSH
// if not unit or not enemy then
66615: LD_VAR 0 1
66619: NOT
66620: PUSH
66621: LD_VAR 0 2
66625: NOT
66626: OR
66627: IFFALSE 66631
// exit ;
66629: GO 66755
// x := GetX ( enemy ) ;
66631: LD_ADDR_VAR 0 4
66635: PUSH
66636: LD_VAR 0 2
66640: PPUSH
66641: CALL_OW 250
66645: ST_TO_ADDR
// y := GetY ( enemy ) ;
66646: LD_ADDR_VAR 0 5
66650: PUSH
66651: LD_VAR 0 2
66655: PPUSH
66656: CALL_OW 251
66660: ST_TO_ADDR
// if ValidHex ( x , y ) then
66661: LD_VAR 0 4
66665: PPUSH
66666: LD_VAR 0 5
66670: PPUSH
66671: CALL_OW 488
66675: IFFALSE 66755
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
66677: LD_VAR 0 2
66681: PPUSH
66682: CALL_OW 247
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: IN
66697: PUSH
66698: LD_VAR 0 1
66702: PPUSH
66703: CALL_OW 255
66707: PPUSH
66708: LD_VAR 0 2
66712: PPUSH
66713: CALL_OW 292
66717: AND
66718: IFFALSE 66736
// ComAttackUnit ( unit , enemy ) else
66720: LD_VAR 0 1
66724: PPUSH
66725: LD_VAR 0 2
66729: PPUSH
66730: CALL_OW 115
66734: GO 66755
// ComAgressiveMove ( unit , x , y ) ;
66736: LD_VAR 0 1
66740: PPUSH
66741: LD_VAR 0 4
66745: PPUSH
66746: LD_VAR 0 5
66750: PPUSH
66751: CALL_OW 114
// end ; end_of_file
66755: LD_VAR 0 3
66759: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66760: LD_VAR 0 1
66764: PPUSH
66765: LD_VAR 0 2
66769: PPUSH
66770: LD_VAR 0 3
66774: PPUSH
66775: LD_VAR 0 4
66779: PPUSH
66780: LD_VAR 0 5
66784: PPUSH
66785: LD_VAR 0 6
66789: PPUSH
66790: CALL 5118 0 6
// end ;
66794: PPOPN 6
66796: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66797: LD_INT 0
66799: PPUSH
// begin if not units then
66800: LD_VAR 0 1
66804: NOT
66805: IFFALSE 66809
// exit ;
66807: GO 66809
// end ;
66809: PPOPN 7
66811: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66812: CALL 5022 0 0
// end ;
66816: PPOPN 1
66818: END
