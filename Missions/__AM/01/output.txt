// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4870 0 0
// end ;
4869: END
// function InitStreamMode ; begin
4870: LD_INT 0
4872: PPUSH
// streamModeActive := false ;
4873: LD_ADDR_EXP 15
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// sRocket := false ;
4881: LD_ADDR_EXP 18
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// sSpeed := false ;
4889: LD_ADDR_EXP 17
4893: PUSH
4894: LD_INT 0
4896: ST_TO_ADDR
// sEngine := false ;
4897: LD_ADDR_EXP 19
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// sSpec := false ;
4905: LD_ADDR_EXP 16
4909: PUSH
4910: LD_INT 0
4912: ST_TO_ADDR
// sLevel := false ;
4913: LD_ADDR_EXP 20
4917: PUSH
4918: LD_INT 0
4920: ST_TO_ADDR
// sArmoury := false ;
4921: LD_ADDR_EXP 21
4925: PUSH
4926: LD_INT 0
4928: ST_TO_ADDR
// sRadar := false ;
4929: LD_ADDR_EXP 22
4933: PUSH
4934: LD_INT 0
4936: ST_TO_ADDR
// sBunker := false ;
4937: LD_ADDR_EXP 23
4941: PUSH
4942: LD_INT 0
4944: ST_TO_ADDR
// sHack := false ;
4945: LD_ADDR_EXP 24
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// sFire := false ;
4953: LD_ADDR_EXP 25
4957: PUSH
4958: LD_INT 0
4960: ST_TO_ADDR
// sRefresh := false ;
4961: LD_ADDR_EXP 26
4965: PUSH
4966: LD_INT 0
4968: ST_TO_ADDR
// sExp := false ;
4969: LD_ADDR_EXP 27
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// sDepot := false ;
4977: LD_ADDR_EXP 28
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// sFlag := false ;
4985: LD_ADDR_EXP 29
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// sKamikadze := false ;
4993: LD_ADDR_EXP 37
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// sTroll := false ;
5001: LD_ADDR_EXP 38
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// sSlow := false ;
5009: LD_ADDR_EXP 39
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sLack := false ;
5017: LD_ADDR_EXP 40
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sTank := false ;
5025: LD_ADDR_EXP 42
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sRemote := false ;
5033: LD_ADDR_EXP 43
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sPowell := false ;
5041: LD_ADDR_EXP 44
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sTeleport := false ;
5049: LD_ADDR_EXP 47
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sOilTower := false ;
5057: LD_ADDR_EXP 49
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sShovel := false ;
5065: LD_ADDR_EXP 50
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// sSheik := false ;
5073: LD_ADDR_EXP 51
5077: PUSH
5078: LD_INT 0
5080: ST_TO_ADDR
// sSold := false ;
5081: LD_ADDR_EXP 30
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// sDiff := false ;
5089: LD_ADDR_EXP 31
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// sFog := false ;
5097: LD_ADDR_EXP 34
5101: PUSH
5102: LD_INT 0
5104: ST_TO_ADDR
// sReset := false ;
5105: LD_ADDR_EXP 35
5109: PUSH
5110: LD_INT 0
5112: ST_TO_ADDR
// sSun := false ;
5113: LD_ADDR_EXP 36
5117: PUSH
5118: LD_INT 0
5120: ST_TO_ADDR
// sTiger := false ;
5121: LD_ADDR_EXP 32
5125: PUSH
5126: LD_INT 0
5128: ST_TO_ADDR
// sBomb := false ;
5129: LD_ADDR_EXP 33
5133: PUSH
5134: LD_INT 0
5136: ST_TO_ADDR
// sWound := false ;
5137: LD_ADDR_EXP 41
5141: PUSH
5142: LD_INT 0
5144: ST_TO_ADDR
// sBetray := false ;
5145: LD_ADDR_EXP 45
5149: PUSH
5150: LD_INT 0
5152: ST_TO_ADDR
// sContamin := false ;
5153: LD_ADDR_EXP 46
5157: PUSH
5158: LD_INT 0
5160: ST_TO_ADDR
// sOil := false ;
5161: LD_ADDR_EXP 48
5165: PUSH
5166: LD_INT 0
5168: ST_TO_ADDR
// sStu := false ;
5169: LD_ADDR_EXP 52
5173: PUSH
5174: LD_INT 0
5176: ST_TO_ADDR
// end ;
5177: LD_VAR 0 1
5181: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5182: LD_VAR 0 2
5186: PUSH
5187: LD_INT 100
5189: EQUAL
5190: IFFALSE 5887
// begin if not StreamModeActive then
5192: LD_EXP 15
5196: NOT
5197: IFFALSE 5207
// StreamModeActive := true ;
5199: LD_ADDR_EXP 15
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// if p3 = 0 then
5207: LD_VAR 0 3
5211: PUSH
5212: LD_INT 0
5214: EQUAL
5215: IFFALSE 5221
// InitStreamMode ;
5217: CALL 4870 0 0
// if p3 = 1 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 1
5228: EQUAL
5229: IFFALSE 5239
// sRocket := true ;
5231: LD_ADDR_EXP 18
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 2 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 2
5246: EQUAL
5247: IFFALSE 5257
// sSpeed := true ;
5249: LD_ADDR_EXP 17
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 3 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 3
5264: EQUAL
5265: IFFALSE 5275
// sEngine := true ;
5267: LD_ADDR_EXP 19
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 4 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 4
5282: EQUAL
5283: IFFALSE 5293
// sSpec := true ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 5 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 5
5300: EQUAL
5301: IFFALSE 5311
// sLevel := true ;
5303: LD_ADDR_EXP 20
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 6 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 6
5318: EQUAL
5319: IFFALSE 5329
// sArmoury := true ;
5321: LD_ADDR_EXP 21
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 7 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 7
5336: EQUAL
5337: IFFALSE 5347
// sRadar := true ;
5339: LD_ADDR_EXP 22
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 8 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 8
5354: EQUAL
5355: IFFALSE 5365
// sBunker := true ;
5357: LD_ADDR_EXP 23
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 9 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 9
5372: EQUAL
5373: IFFALSE 5383
// sHack := true ;
5375: LD_ADDR_EXP 24
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 10 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 10
5390: EQUAL
5391: IFFALSE 5401
// sFire := true ;
5393: LD_ADDR_EXP 25
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 11 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 11
5408: EQUAL
5409: IFFALSE 5419
// sRefresh := true ;
5411: LD_ADDR_EXP 26
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 12 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 12
5426: EQUAL
5427: IFFALSE 5437
// sExp := true ;
5429: LD_ADDR_EXP 27
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 13 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 13
5444: EQUAL
5445: IFFALSE 5455
// sDepot := true ;
5447: LD_ADDR_EXP 28
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 14 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 14
5462: EQUAL
5463: IFFALSE 5473
// sFlag := true ;
5465: LD_ADDR_EXP 29
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 15 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 15
5480: EQUAL
5481: IFFALSE 5491
// sKamikadze := true ;
5483: LD_ADDR_EXP 37
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 16 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 16
5498: EQUAL
5499: IFFALSE 5509
// sTroll := true ;
5501: LD_ADDR_EXP 38
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 17 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 17
5516: EQUAL
5517: IFFALSE 5527
// sSlow := true ;
5519: LD_ADDR_EXP 39
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 18 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 18
5534: EQUAL
5535: IFFALSE 5545
// sLack := true ;
5537: LD_ADDR_EXP 40
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 19 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 19
5552: EQUAL
5553: IFFALSE 5563
// sTank := true ;
5555: LD_ADDR_EXP 42
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 20 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 20
5570: EQUAL
5571: IFFALSE 5581
// sRemote := true ;
5573: LD_ADDR_EXP 43
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 21 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 21
5588: EQUAL
5589: IFFALSE 5599
// sPowell := true ;
5591: LD_ADDR_EXP 44
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 22 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 22
5606: EQUAL
5607: IFFALSE 5617
// sTeleport := true ;
5609: LD_ADDR_EXP 47
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 23 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 23
5624: EQUAL
5625: IFFALSE 5635
// sOilTower := true ;
5627: LD_ADDR_EXP 49
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 24 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 24
5642: EQUAL
5643: IFFALSE 5653
// sShovel := true ;
5645: LD_ADDR_EXP 50
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// if p3 = 25 then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 25
5660: EQUAL
5661: IFFALSE 5671
// sSheik := true ;
5663: LD_ADDR_EXP 51
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// if p3 = 101 then
5671: LD_VAR 0 3
5675: PUSH
5676: LD_INT 101
5678: EQUAL
5679: IFFALSE 5689
// sSold := true ;
5681: LD_ADDR_EXP 30
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// if p3 = 102 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 102
5696: EQUAL
5697: IFFALSE 5707
// sDiff := true ;
5699: LD_ADDR_EXP 31
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// if p3 = 103 then
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 103
5714: EQUAL
5715: IFFALSE 5725
// sFog := true ;
5717: LD_ADDR_EXP 34
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// if p3 = 104 then
5725: LD_VAR 0 3
5729: PUSH
5730: LD_INT 104
5732: EQUAL
5733: IFFALSE 5743
// sReset := true ;
5735: LD_ADDR_EXP 35
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// if p3 = 105 then
5743: LD_VAR 0 3
5747: PUSH
5748: LD_INT 105
5750: EQUAL
5751: IFFALSE 5761
// sSun := true ;
5753: LD_ADDR_EXP 36
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// if p3 = 106 then
5761: LD_VAR 0 3
5765: PUSH
5766: LD_INT 106
5768: EQUAL
5769: IFFALSE 5779
// sTiger := true ;
5771: LD_ADDR_EXP 32
5775: PUSH
5776: LD_INT 1
5778: ST_TO_ADDR
// if p3 = 107 then
5779: LD_VAR 0 3
5783: PUSH
5784: LD_INT 107
5786: EQUAL
5787: IFFALSE 5797
// sBomb := true ;
5789: LD_ADDR_EXP 33
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// if p3 = 108 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 108
5804: EQUAL
5805: IFFALSE 5815
// sWound := true ;
5807: LD_ADDR_EXP 41
5811: PUSH
5812: LD_INT 1
5814: ST_TO_ADDR
// if p3 = 109 then
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 109
5822: EQUAL
5823: IFFALSE 5833
// sBetray := true ;
5825: LD_ADDR_EXP 45
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 110 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 110
5840: EQUAL
5841: IFFALSE 5851
// sContamin := true ;
5843: LD_ADDR_EXP 46
5847: PUSH
5848: LD_INT 1
5850: ST_TO_ADDR
// if p3 = 111 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 111
5858: EQUAL
5859: IFFALSE 5869
// sOil := true ;
5861: LD_ADDR_EXP 48
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// if p3 = 112 then
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 112
5876: EQUAL
5877: IFFALSE 5887
// sStu := true ;
5879: LD_ADDR_EXP 52
5883: PUSH
5884: LD_INT 1
5886: ST_TO_ADDR
// end ; end ;
5887: PPOPN 6
5889: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5890: LD_EXP 15
5894: PUSH
5895: LD_EXP 18
5899: AND
5900: IFFALSE 6024
5902: GO 5904
5904: DISABLE
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
// begin enable ;
5909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: LD_INT 22
5917: PUSH
5918: LD_OWVAR 2
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 2
5929: PUSH
5930: LD_INT 34
5932: PUSH
5933: LD_INT 7
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 34
5942: PUSH
5943: LD_INT 45
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 34
5952: PUSH
5953: LD_INT 28
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 34
5962: PUSH
5963: LD_INT 47
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PPUSH
5981: CALL_OW 69
5985: ST_TO_ADDR
// if not tmp then
5986: LD_VAR 0 2
5990: NOT
5991: IFFALSE 5995
// exit ;
5993: GO 6024
// for i in tmp do
5995: LD_ADDR_VAR 0 1
5999: PUSH
6000: LD_VAR 0 2
6004: PUSH
6005: FOR_IN
6006: IFFALSE 6022
// begin SetLives ( i , 0 ) ;
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 0
6015: PPUSH
6016: CALL_OW 234
// end ;
6020: GO 6005
6022: POP
6023: POP
// end ;
6024: PPOPN 2
6026: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6027: LD_EXP 15
6031: PUSH
6032: LD_EXP 19
6036: AND
6037: IFFALSE 6118
6039: GO 6041
6041: DISABLE
6042: LD_INT 0
6044: PPUSH
6045: PPUSH
// begin enable ;
6046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6047: LD_ADDR_VAR 0 2
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_OWVAR 2
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 32
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PPUSH
6078: CALL_OW 69
6082: ST_TO_ADDR
// if not tmp then
6083: LD_VAR 0 2
6087: NOT
6088: IFFALSE 6092
// exit ;
6090: GO 6118
// for i in tmp do
6092: LD_ADDR_VAR 0 1
6096: PUSH
6097: LD_VAR 0 2
6101: PUSH
6102: FOR_IN
6103: IFFALSE 6116
// begin DestroyUnit ( i ) ;
6105: LD_VAR 0 1
6109: PPUSH
6110: CALL_OW 65
// end ;
6114: GO 6102
6116: POP
6117: POP
// end ;
6118: PPOPN 2
6120: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6121: LD_EXP 15
6125: PUSH
6126: LD_EXP 16
6130: AND
6131: IFFALSE 6224
6133: GO 6135
6135: DISABLE
6136: LD_INT 0
6138: PPUSH
// begin enable ;
6139: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6140: LD_ADDR_VAR 0 1
6144: PUSH
6145: LD_INT 22
6147: PUSH
6148: LD_OWVAR 2
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 2
6159: PUSH
6160: LD_INT 25
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 25
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 25
6182: PUSH
6183: LD_INT 8
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6222
// begin SetClass ( i , 1 ) ;
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_INT 1
6215: PPUSH
6216: CALL_OW 336
// end ;
6220: GO 6205
6222: POP
6223: POP
// end ;
6224: PPOPN 1
6226: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6227: LD_EXP 15
6231: PUSH
6232: LD_EXP 17
6236: AND
6237: PUSH
6238: LD_OWVAR 65
6242: PUSH
6243: LD_INT 7
6245: LESS
6246: AND
6247: IFFALSE 6261
6249: GO 6251
6251: DISABLE
// begin enable ;
6252: ENABLE
// game_speed := 7 ;
6253: LD_ADDR_OWVAR 65
6257: PUSH
6258: LD_INT 7
6260: ST_TO_ADDR
// end ;
6261: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6262: LD_EXP 15
6266: PUSH
6267: LD_EXP 20
6271: AND
6272: IFFALSE 6474
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: LD_INT 81
6289: PUSH
6290: LD_OWVAR 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 21
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 69
6317: ST_TO_ADDR
// if not tmp then
6318: LD_VAR 0 3
6322: NOT
6323: IFFALSE 6327
// exit ;
6325: GO 6474
// if tmp > 5 then
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 5
6334: GREATER
6335: IFFALSE 6347
// k := 5 else
6337: LD_ADDR_VAR 0 2
6341: PUSH
6342: LD_INT 5
6344: ST_TO_ADDR
6345: GO 6357
// k := tmp ;
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_VAR 0 3
6356: ST_TO_ADDR
// for i := 1 to k do
6357: LD_ADDR_VAR 0 1
6361: PUSH
6362: DOUBLE
6363: LD_INT 1
6365: DEC
6366: ST_TO_ADDR
6367: LD_VAR 0 2
6371: PUSH
6372: FOR_TO
6373: IFFALSE 6472
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6375: LD_VAR 0 3
6379: PUSH
6380: LD_VAR 0 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 1
6390: PUSH
6391: LD_INT 4
6393: MOD
6394: PUSH
6395: LD_INT 1
6397: PLUS
6398: PPUSH
6399: CALL_OW 259
6403: PUSH
6404: LD_INT 10
6406: LESS
6407: IFFALSE 6470
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6409: LD_VAR 0 3
6413: PUSH
6414: LD_VAR 0 1
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 1
6424: PUSH
6425: LD_INT 4
6427: MOD
6428: PUSH
6429: LD_INT 1
6431: PLUS
6432: PPUSH
6433: LD_VAR 0 3
6437: PUSH
6438: LD_VAR 0 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 1
6448: PUSH
6449: LD_INT 4
6451: MOD
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: CALL_OW 259
6461: PUSH
6462: LD_INT 1
6464: PLUS
6465: PPUSH
6466: CALL_OW 237
6470: GO 6372
6472: POP
6473: POP
// end ;
6474: PPOPN 3
6476: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6477: LD_EXP 15
6481: PUSH
6482: LD_EXP 21
6486: AND
6487: IFFALSE 6507
6489: GO 6491
6491: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6492: LD_INT 4
6494: PPUSH
6495: LD_OWVAR 2
6499: PPUSH
6500: LD_INT 0
6502: PPUSH
6503: CALL_OW 324
6507: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6508: LD_EXP 15
6512: PUSH
6513: LD_EXP 50
6517: AND
6518: IFFALSE 6538
6520: GO 6522
6522: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6523: LD_INT 19
6525: PPUSH
6526: LD_OWVAR 2
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 324
6538: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6539: LD_EXP 15
6543: PUSH
6544: LD_EXP 22
6548: AND
6549: IFFALSE 6648
6551: GO 6553
6553: DISABLE
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
// begin enable ;
6558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: LD_INT 22
6566: PUSH
6567: LD_OWVAR 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 34
6581: PUSH
6582: LD_INT 11
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 34
6591: PUSH
6592: LD_INT 30
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: ST_TO_ADDR
// if not tmp then
6613: LD_VAR 0 2
6617: NOT
6618: IFFALSE 6622
// exit ;
6620: GO 6648
// for i in tmp do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_VAR 0 2
6631: PUSH
6632: FOR_IN
6633: IFFALSE 6646
// begin DestroyUnit ( i ) ;
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 65
// end ;
6644: GO 6632
6646: POP
6647: POP
// end ;
6648: PPOPN 2
6650: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6651: LD_EXP 15
6655: PUSH
6656: LD_EXP 23
6660: AND
6661: IFFALSE 6681
6663: GO 6665
6665: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6666: LD_INT 32
6668: PPUSH
6669: LD_OWVAR 2
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 324
6681: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6682: LD_EXP 15
6686: PUSH
6687: LD_EXP 24
6691: AND
6692: IFFALSE 6873
6694: GO 6696
6696: DISABLE
6697: LD_INT 0
6699: PPUSH
6700: PPUSH
6701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_OWVAR 2
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 33
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: ST_TO_ADDR
// if not tmp then
6738: LD_VAR 0 2
6742: NOT
6743: IFFALSE 6747
// exit ;
6745: GO 6873
// side := 0 ;
6747: LD_ADDR_VAR 0 3
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// for i := 1 to 8 do
6755: LD_ADDR_VAR 0 1
6759: PUSH
6760: DOUBLE
6761: LD_INT 1
6763: DEC
6764: ST_TO_ADDR
6765: LD_INT 8
6767: PUSH
6768: FOR_TO
6769: IFFALSE 6817
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6771: LD_OWVAR 2
6775: PUSH
6776: LD_VAR 0 1
6780: NONEQUAL
6781: PUSH
6782: LD_OWVAR 2
6786: PPUSH
6787: LD_VAR 0 1
6791: PPUSH
6792: CALL_OW 81
6796: PUSH
6797: LD_INT 2
6799: EQUAL
6800: AND
6801: IFFALSE 6815
// begin side := i ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: LD_VAR 0 1
6812: ST_TO_ADDR
// break ;
6813: GO 6817
// end ;
6815: GO 6768
6817: POP
6818: POP
// if not side then
6819: LD_VAR 0 3
6823: NOT
6824: IFFALSE 6828
// exit ;
6826: GO 6873
// for i := 1 to tmp do
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: DOUBLE
6834: LD_INT 1
6836: DEC
6837: ST_TO_ADDR
6838: LD_VAR 0 2
6842: PUSH
6843: FOR_TO
6844: IFFALSE 6871
// if Prob ( 30 ) then
6846: LD_INT 30
6848: PPUSH
6849: CALL_OW 13
6853: IFFALSE 6869
// SetSide ( i , side ) ;
6855: LD_VAR 0 1
6859: PPUSH
6860: LD_VAR 0 3
6864: PPUSH
6865: CALL_OW 235
6869: GO 6843
6871: POP
6872: POP
// end ;
6873: PPOPN 3
6875: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6876: LD_EXP 15
6880: PUSH
6881: LD_EXP 26
6885: AND
6886: IFFALSE 7005
6888: GO 6890
6890: DISABLE
6891: LD_INT 0
6893: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6894: LD_ADDR_VAR 0 1
6898: PUSH
6899: LD_INT 22
6901: PUSH
6902: LD_OWVAR 2
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 21
6913: PUSH
6914: LD_INT 1
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 3
6923: PUSH
6924: LD_INT 23
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: PUSH
6948: FOR_IN
6949: IFFALSE 7003
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 257
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: LD_INT 2
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: LD_INT 4
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: IN
6979: IFFALSE 7001
// SetClass ( un , rand ( 1 , 4 ) ) ;
6981: LD_VAR 0 1
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_INT 4
6991: PPUSH
6992: CALL_OW 12
6996: PPUSH
6997: CALL_OW 336
7001: GO 6948
7003: POP
7004: POP
// end ;
7005: PPOPN 1
7007: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7008: LD_EXP 15
7012: PUSH
7013: LD_EXP 25
7017: AND
7018: IFFALSE 7097
7020: GO 7022
7022: DISABLE
7023: LD_INT 0
7025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7026: LD_ADDR_VAR 0 1
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_OWVAR 2
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 21
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PPUSH
7057: CALL_OW 69
7061: ST_TO_ADDR
// if not tmp then
7062: LD_VAR 0 1
7066: NOT
7067: IFFALSE 7071
// exit ;
7069: GO 7097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7071: LD_VAR 0 1
7075: PUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_VAR 0 1
7083: PPUSH
7084: CALL_OW 12
7088: ARRAY
7089: PPUSH
7090: LD_INT 100
7092: PPUSH
7093: CALL_OW 234
// end ;
7097: PPOPN 1
7099: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7100: LD_EXP 15
7104: PUSH
7105: LD_EXP 27
7109: AND
7110: IFFALSE 7208
7112: GO 7114
7114: DISABLE
7115: LD_INT 0
7117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_INT 22
7125: PUSH
7126: LD_OWVAR 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 69
7153: ST_TO_ADDR
// if not tmp then
7154: LD_VAR 0 1
7158: NOT
7159: IFFALSE 7163
// exit ;
7161: GO 7208
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7163: LD_VAR 0 1
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: CALL_OW 12
7192: PPUSH
7193: LD_INT 3000
7195: PPUSH
7196: LD_INT 9000
7198: PPUSH
7199: CALL_OW 12
7203: PPUSH
7204: CALL_OW 492
// end ;
7208: PPOPN 1
7210: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7211: LD_EXP 15
7215: PUSH
7216: LD_EXP 28
7220: AND
7221: IFFALSE 7241
7223: GO 7225
7225: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7226: LD_INT 1
7228: PPUSH
7229: LD_OWVAR 2
7233: PPUSH
7234: LD_INT 0
7236: PPUSH
7237: CALL_OW 324
7241: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7242: LD_EXP 15
7246: PUSH
7247: LD_EXP 29
7251: AND
7252: IFFALSE 7335
7254: GO 7256
7256: DISABLE
7257: LD_INT 0
7259: PPUSH
7260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_INT 22
7268: PUSH
7269: LD_OWVAR 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: ST_TO_ADDR
// if not tmp then
7297: LD_VAR 0 2
7301: NOT
7302: IFFALSE 7306
// exit ;
7304: GO 7335
// for i in tmp do
7306: LD_ADDR_VAR 0 1
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: FOR_IN
7317: IFFALSE 7333
// SetBLevel ( i , 10 ) ;
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_INT 10
7326: PPUSH
7327: CALL_OW 241
7331: GO 7316
7333: POP
7334: POP
// end ;
7335: PPOPN 2
7337: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7338: LD_EXP 15
7342: PUSH
7343: LD_EXP 30
7347: AND
7348: IFFALSE 7459
7350: GO 7352
7352: DISABLE
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
7357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7358: LD_ADDR_VAR 0 3
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_OWVAR 2
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: ST_TO_ADDR
// if not tmp then
7394: LD_VAR 0 3
7398: NOT
7399: IFFALSE 7403
// exit ;
7401: GO 7459
// un := tmp [ rand ( 1 , tmp ) ] ;
7403: LD_ADDR_VAR 0 2
7407: PUSH
7408: LD_VAR 0 3
7412: PUSH
7413: LD_INT 1
7415: PPUSH
7416: LD_VAR 0 3
7420: PPUSH
7421: CALL_OW 12
7425: ARRAY
7426: ST_TO_ADDR
// if Crawls ( un ) then
7427: LD_VAR 0 2
7431: PPUSH
7432: CALL_OW 318
7436: IFFALSE 7447
// ComWalk ( un ) ;
7438: LD_VAR 0 2
7442: PPUSH
7443: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7447: LD_VAR 0 2
7451: PPUSH
7452: LD_INT 5
7454: PPUSH
7455: CALL_OW 336
// end ;
7459: PPOPN 3
7461: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
7462: LD_EXP 15
7466: PUSH
7467: LD_EXP 31
7471: AND
7472: PUSH
7473: LD_OWVAR 67
7477: PUSH
7478: LD_INT 3
7480: LESS
7481: AND
7482: IFFALSE 7501
7484: GO 7486
7486: DISABLE
// Difficulty := Difficulty + 1 ;
7487: LD_ADDR_OWVAR 67
7491: PUSH
7492: LD_OWVAR 67
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
7501: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7502: LD_EXP 15
7506: PUSH
7507: LD_EXP 32
7511: AND
7512: IFFALSE 7615
7514: GO 7516
7516: DISABLE
7517: LD_INT 0
7519: PPUSH
// begin for i := 1 to 5 do
7520: LD_ADDR_VAR 0 1
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_INT 5
7532: PUSH
7533: FOR_TO
7534: IFFALSE 7613
// begin uc_nation := nation_nature ;
7536: LD_ADDR_OWVAR 21
7540: PUSH
7541: LD_INT 0
7543: ST_TO_ADDR
// uc_side := 0 ;
7544: LD_ADDR_OWVAR 20
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7552: LD_ADDR_OWVAR 29
7556: PUSH
7557: LD_INT 12
7559: PUSH
7560: LD_INT 12
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: ST_TO_ADDR
// hc_agressivity := 20 ;
7567: LD_ADDR_OWVAR 35
7571: PUSH
7572: LD_INT 20
7574: ST_TO_ADDR
// hc_class := class_tiger ;
7575: LD_ADDR_OWVAR 28
7579: PUSH
7580: LD_INT 14
7582: ST_TO_ADDR
// hc_gallery :=  ;
7583: LD_ADDR_OWVAR 33
7587: PUSH
7588: LD_STRING 
7590: ST_TO_ADDR
// hc_name :=  ;
7591: LD_ADDR_OWVAR 26
7595: PUSH
7596: LD_STRING 
7598: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7599: CALL_OW 44
7603: PPUSH
7604: LD_INT 0
7606: PPUSH
7607: CALL_OW 51
// end ;
7611: GO 7533
7613: POP
7614: POP
// end ;
7615: PPOPN 1
7617: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
7618: LD_EXP 15
7622: PUSH
7623: LD_EXP 33
7627: AND
7628: IFFALSE 7802
7630: GO 7632
7632: DISABLE
7633: LD_INT 0
7635: PPUSH
7636: PPUSH
7637: PPUSH
7638: PPUSH
// begin result := false ;
7639: LD_ADDR_VAR 0 4
7643: PUSH
7644: LD_INT 0
7646: ST_TO_ADDR
// for i := 1 to 8 do
7647: LD_ADDR_VAR 0 1
7651: PUSH
7652: DOUBLE
7653: LD_INT 1
7655: DEC
7656: ST_TO_ADDR
7657: LD_INT 8
7659: PUSH
7660: FOR_TO
7661: IFFALSE 7772
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
7663: LD_ADDR_VAR 0 2
7667: PUSH
7668: LD_INT 10
7670: PUSH
7671: LD_INT 50
7673: PUSH
7674: LD_INT 90
7676: PUSH
7677: LD_INT 140
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 1
7688: PPUSH
7689: LD_INT 4
7691: PPUSH
7692: CALL_OW 12
7696: ARRAY
7697: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_INT 10
7705: PUSH
7706: LD_INT 50
7708: PUSH
7709: LD_INT 90
7711: PUSH
7712: LD_INT 140
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 1
7723: PPUSH
7724: LD_INT 4
7726: PPUSH
7727: CALL_OW 12
7731: ARRAY
7732: ST_TO_ADDR
// if ValidHex ( x , y ) then
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 3
7742: PPUSH
7743: CALL_OW 488
7747: IFFALSE 7770
// begin result := [ x , y ] ;
7749: LD_ADDR_VAR 0 4
7753: PUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_VAR 0 3
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// break ;
7768: GO 7772
// end ; end ;
7770: GO 7660
7772: POP
7773: POP
// if result then
7774: LD_VAR 0 4
7778: IFFALSE 7802
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7780: LD_VAR 0 4
7784: PUSH
7785: LD_INT 1
7787: ARRAY
7788: PPUSH
7789: LD_VAR 0 4
7793: PUSH
7794: LD_INT 2
7796: ARRAY
7797: PPUSH
7798: CALL_OW 429
// end ;
7802: PPOPN 4
7804: END
// every 0 0$1 trigger StreamModeActive and sReset do
7805: LD_EXP 15
7809: PUSH
7810: LD_EXP 35
7814: AND
7815: IFFALSE 7827
7817: GO 7819
7819: DISABLE
// YouLost (  ) ;
7820: LD_STRING 
7822: PPUSH
7823: CALL_OW 104
7827: END
// every 0 0$1 trigger StreamModeActive and sFog do
7828: LD_EXP 15
7832: PUSH
7833: LD_EXP 34
7837: AND
7838: IFFALSE 7852
7840: GO 7842
7842: DISABLE
// FogOff ( your_side ) ;
7843: LD_OWVAR 2
7847: PPUSH
7848: CALL_OW 344
7852: END
// every 0 0$1 trigger StreamModeActive and sSun do
7853: LD_EXP 15
7857: PUSH
7858: LD_EXP 36
7862: AND
7863: IFFALSE 7891
7865: GO 7867
7867: DISABLE
// begin solar_recharge_percent := 0 ;
7868: LD_ADDR_OWVAR 79
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7876: LD_INT 10500
7878: PPUSH
7879: CALL_OW 67
// solar_recharge_percent := 100 ;
7883: LD_ADDR_OWVAR 79
7887: PUSH
7888: LD_INT 100
7890: ST_TO_ADDR
// end ;
7891: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
7892: LD_EXP 15
7896: PUSH
7897: LD_EXP 37
7901: AND
7902: IFFALSE 8141
7904: GO 7906
7906: DISABLE
7907: LD_INT 0
7909: PPUSH
7910: PPUSH
7911: PPUSH
// begin tmp := [ ] ;
7912: LD_ADDR_VAR 0 3
7916: PUSH
7917: EMPTY
7918: ST_TO_ADDR
// for i := 1 to 6 do
7919: LD_ADDR_VAR 0 1
7923: PUSH
7924: DOUBLE
7925: LD_INT 1
7927: DEC
7928: ST_TO_ADDR
7929: LD_INT 6
7931: PUSH
7932: FOR_TO
7933: IFFALSE 8038
// begin uc_nation := nation_nature ;
7935: LD_ADDR_OWVAR 21
7939: PUSH
7940: LD_INT 0
7942: ST_TO_ADDR
// uc_side := 0 ;
7943: LD_ADDR_OWVAR 20
7947: PUSH
7948: LD_INT 0
7950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7951: LD_ADDR_OWVAR 29
7955: PUSH
7956: LD_INT 12
7958: PUSH
7959: LD_INT 12
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// hc_agressivity := 20 ;
7966: LD_ADDR_OWVAR 35
7970: PUSH
7971: LD_INT 20
7973: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
7974: LD_ADDR_OWVAR 28
7978: PUSH
7979: LD_INT 17
7981: ST_TO_ADDR
// hc_gallery :=  ;
7982: LD_ADDR_OWVAR 33
7986: PUSH
7987: LD_STRING 
7989: ST_TO_ADDR
// hc_name :=  ;
7990: LD_ADDR_OWVAR 26
7994: PUSH
7995: LD_STRING 
7997: ST_TO_ADDR
// un := CreateHuman ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: CALL_OW 44
8007: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: CALL_OW 51
// tmp := tmp * un ;
8020: LD_ADDR_VAR 0 3
8024: PUSH
8025: LD_VAR 0 3
8029: PUSH
8030: LD_VAR 0 2
8034: MUL
8035: ST_TO_ADDR
// end ;
8036: GO 7932
8038: POP
8039: POP
// repeat wait ( 0 0$1 ) ;
8040: LD_INT 35
8042: PPUSH
8043: CALL_OW 67
// for un in tmp do
8047: LD_ADDR_VAR 0 2
8051: PUSH
8052: LD_VAR 0 3
8056: PUSH
8057: FOR_IN
8058: IFFALSE 8132
// begin if IsDead ( un ) then
8060: LD_VAR 0 2
8064: PPUSH
8065: CALL_OW 301
8069: IFFALSE 8089
// begin tmp := tmp diff un ;
8071: LD_ADDR_VAR 0 3
8075: PUSH
8076: LD_VAR 0 3
8080: PUSH
8081: LD_VAR 0 2
8085: DIFF
8086: ST_TO_ADDR
// continue ;
8087: GO 8057
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8089: LD_VAR 0 2
8093: PPUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 22
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: PPUSH
8116: LD_VAR 0 2
8120: PPUSH
8121: CALL_OW 74
8125: PPUSH
8126: CALL_OW 115
// end ;
8130: GO 8057
8132: POP
8133: POP
// until not tmp ;
8134: LD_VAR 0 3
8138: NOT
8139: IFFALSE 8040
// end ;
8141: PPOPN 3
8143: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8144: LD_EXP 15
8148: PUSH
8149: LD_EXP 38
8153: AND
8154: IFFALSE 8180
8156: GO 8158
8158: DISABLE
// begin ToLua ( displayTroll(); ) ;
8159: LD_STRING displayTroll();
8161: PPUSH
8162: CALL_OW 559
// wait ( 3 3$00 ) ;
8166: LD_INT 6300
8168: PPUSH
8169: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8173: LD_STRING hideTroll();
8175: PPUSH
8176: CALL_OW 559
// end ;
8180: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8181: LD_EXP 15
8185: PUSH
8186: LD_EXP 39
8190: AND
8191: IFFALSE 8254
8193: GO 8195
8195: DISABLE
8196: LD_INT 0
8198: PPUSH
// begin p := 0 ;
8199: LD_ADDR_VAR 0 1
8203: PUSH
8204: LD_INT 0
8206: ST_TO_ADDR
// repeat game_speed := 1 ;
8207: LD_ADDR_OWVAR 65
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8215: LD_INT 35
8217: PPUSH
8218: CALL_OW 67
// p := p + 1 ;
8222: LD_ADDR_VAR 0 1
8226: PUSH
8227: LD_VAR 0 1
8231: PUSH
8232: LD_INT 1
8234: PLUS
8235: ST_TO_ADDR
// until p >= 60 ;
8236: LD_VAR 0 1
8240: PUSH
8241: LD_INT 60
8243: GREATEREQUAL
8244: IFFALSE 8207
// game_speed := 4 ;
8246: LD_ADDR_OWVAR 65
8250: PUSH
8251: LD_INT 4
8253: ST_TO_ADDR
// end ;
8254: PPOPN 1
8256: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8257: LD_EXP 15
8261: PUSH
8262: LD_EXP 40
8266: AND
8267: IFFALSE 8413
8269: GO 8271
8271: DISABLE
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8276: LD_ADDR_VAR 0 1
8280: PUSH
8281: LD_INT 22
8283: PUSH
8284: LD_OWVAR 2
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: LD_INT 30
8298: PUSH
8299: LD_INT 0
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 30
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: CALL_OW 69
8329: ST_TO_ADDR
// if not depot then
8330: LD_VAR 0 1
8334: NOT
8335: IFFALSE 8339
// exit ;
8337: GO 8413
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8339: LD_ADDR_VAR 0 2
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 12
8361: ARRAY
8362: PPUSH
8363: CALL_OW 274
8367: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8368: LD_VAR 0 2
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_INT 0
8378: PPUSH
8379: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8383: LD_VAR 0 2
8387: PPUSH
8388: LD_INT 2
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8398: LD_VAR 0 2
8402: PPUSH
8403: LD_INT 3
8405: PPUSH
8406: LD_INT 0
8408: PPUSH
8409: CALL_OW 277
// end ;
8413: PPOPN 2
8415: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8416: LD_EXP 15
8420: PUSH
8421: LD_EXP 41
8425: AND
8426: IFFALSE 8523
8428: GO 8430
8430: DISABLE
8431: LD_INT 0
8433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8434: LD_ADDR_VAR 0 1
8438: PUSH
8439: LD_INT 22
8441: PUSH
8442: LD_OWVAR 2
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 21
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 3
8463: PUSH
8464: LD_INT 23
8466: PUSH
8467: LD_INT 0
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: PPUSH
8483: CALL_OW 69
8487: ST_TO_ADDR
// if not tmp then
8488: LD_VAR 0 1
8492: NOT
8493: IFFALSE 8497
// exit ;
8495: GO 8523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8497: LD_VAR 0 1
8501: PUSH
8502: LD_INT 1
8504: PPUSH
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 12
8514: ARRAY
8515: PPUSH
8516: LD_INT 200
8518: PPUSH
8519: CALL_OW 234
// end ;
8523: PPOPN 1
8525: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8526: LD_EXP 15
8530: PUSH
8531: LD_EXP 42
8535: AND
8536: IFFALSE 8615
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8544: LD_ADDR_VAR 0 1
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_OWVAR 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 69
8579: ST_TO_ADDR
// if not tmp then
8580: LD_VAR 0 1
8584: NOT
8585: IFFALSE 8589
// exit ;
8587: GO 8615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8589: LD_VAR 0 1
8593: PUSH
8594: LD_INT 1
8596: PPUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 12
8606: ARRAY
8607: PPUSH
8608: LD_INT 60
8610: PPUSH
8611: CALL_OW 234
// end ;
8615: PPOPN 1
8617: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8618: LD_EXP 15
8622: PUSH
8623: LD_EXP 43
8627: AND
8628: IFFALSE 8727
8630: GO 8632
8632: DISABLE
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
// begin enable ;
8637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8638: LD_ADDR_VAR 0 1
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_OWVAR 2
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 61
8657: PUSH
8658: EMPTY
8659: LIST
8660: PUSH
8661: LD_INT 33
8663: PUSH
8664: LD_INT 2
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: PPUSH
8676: CALL_OW 69
8680: ST_TO_ADDR
// if not tmp then
8681: LD_VAR 0 1
8685: NOT
8686: IFFALSE 8690
// exit ;
8688: GO 8727
// for i in tmp do
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_VAR 0 1
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8725
// if IsControledBy ( i ) then
8703: LD_VAR 0 2
8707: PPUSH
8708: CALL_OW 312
8712: IFFALSE 8723
// ComUnlink ( i ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: CALL_OW 136
8723: GO 8700
8725: POP
8726: POP
// end ;
8727: PPOPN 2
8729: END
// every 0 0$1 trigger StreamModeActive and sPowell do
8730: LD_EXP 15
8734: PUSH
8735: LD_EXP 44
8739: AND
8740: IFFALSE 8780
8742: GO 8744
8744: DISABLE
// begin ToLua ( displayPowell(); ) ;
8745: LD_STRING displayPowell();
8747: PPUSH
8748: CALL_OW 559
// wait ( 0 0$20 ) ;
8752: LD_INT 700
8754: PPUSH
8755: CALL_OW 67
// ToLua ( displayPowell(); ) ;
8759: LD_STRING displayPowell();
8761: PPUSH
8762: CALL_OW 559
// wait ( 0 0$40 ) ;
8766: LD_INT 1400
8768: PPUSH
8769: CALL_OW 67
// ToLua ( displayPowell(); ) ;
8773: LD_STRING displayPowell();
8775: PPUSH
8776: CALL_OW 559
// end ;
8780: END
// every 0 0$1 trigger StreamModeActive and sStu do
8781: LD_EXP 15
8785: PUSH
8786: LD_EXP 52
8790: AND
8791: IFFALSE 8803
8793: GO 8795
8795: DISABLE
// begin ToLua ( displayStucuk(); ) ;
8796: LD_STRING displayStucuk();
8798: PPUSH
8799: CALL_OW 559
// end ;
8803: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
8804: LD_EXP 15
8808: PUSH
8809: LD_EXP 45
8813: AND
8814: IFFALSE 8955
8816: GO 8818
8818: DISABLE
8819: LD_INT 0
8821: PPUSH
8822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8823: LD_ADDR_VAR 0 2
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_OWVAR 2
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 21
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 69
8858: ST_TO_ADDR
// if not tmp then
8859: LD_VAR 0 2
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 8955
// un := tmp [ rand ( 1 , tmp ) ] ;
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: LD_VAR 0 2
8877: PUSH
8878: LD_INT 1
8880: PPUSH
8881: LD_VAR 0 2
8885: PPUSH
8886: CALL_OW 12
8890: ARRAY
8891: ST_TO_ADDR
// SetSide ( un , 0 ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_INT 0
8899: PPUSH
8900: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
8904: LD_VAR 0 1
8908: PPUSH
8909: LD_OWVAR 3
8913: PUSH
8914: LD_VAR 0 1
8918: DIFF
8919: PPUSH
8920: LD_VAR 0 1
8924: PPUSH
8925: CALL_OW 74
8929: PPUSH
8930: CALL_OW 115
// wait ( 0 0$20 ) ;
8934: LD_INT 700
8936: PPUSH
8937: CALL_OW 67
// SetSide ( un , your_side ) ;
8941: LD_VAR 0 1
8945: PPUSH
8946: LD_OWVAR 2
8950: PPUSH
8951: CALL_OW 235
// end ;
8955: PPOPN 2
8957: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
8958: LD_EXP 15
8962: PUSH
8963: LD_EXP 46
8967: AND
8968: IFFALSE 9074
8970: GO 8972
8972: DISABLE
8973: LD_INT 0
8975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_OWVAR 2
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 30
8998: PUSH
8999: LD_INT 0
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 30
9008: PUSH
9009: LD_INT 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: ST_TO_ADDR
// if not depot then
9030: LD_VAR 0 1
9034: NOT
9035: IFFALSE 9039
// exit ;
9037: GO 9074
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9039: LD_VAR 0 1
9043: PUSH
9044: LD_INT 1
9046: ARRAY
9047: PPUSH
9048: CALL_OW 250
9052: PPUSH
9053: LD_VAR 0 1
9057: PUSH
9058: LD_INT 1
9060: ARRAY
9061: PPUSH
9062: CALL_OW 251
9066: PPUSH
9067: LD_INT 70
9069: PPUSH
9070: CALL_OW 495
// end ;
9074: PPOPN 1
9076: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9077: LD_EXP 15
9081: PUSH
9082: LD_EXP 47
9086: AND
9087: IFFALSE 9298
9089: GO 9091
9091: DISABLE
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
9098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9099: LD_ADDR_VAR 0 5
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_OWVAR 2
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 21
9118: PUSH
9119: LD_INT 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PPUSH
9130: CALL_OW 69
9134: ST_TO_ADDR
// if not tmp then
9135: LD_VAR 0 5
9139: NOT
9140: IFFALSE 9144
// exit ;
9142: GO 9298
// for i in tmp do
9144: LD_ADDR_VAR 0 1
9148: PUSH
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_IN
9155: IFFALSE 9296
// begin d := rand ( 0 , 5 ) ;
9157: LD_ADDR_VAR 0 4
9161: PUSH
9162: LD_INT 0
9164: PPUSH
9165: LD_INT 5
9167: PPUSH
9168: CALL_OW 12
9172: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9173: LD_ADDR_VAR 0 2
9177: PUSH
9178: LD_VAR 0 1
9182: PPUSH
9183: CALL_OW 250
9187: PPUSH
9188: LD_VAR 0 4
9192: PPUSH
9193: LD_INT 3
9195: PPUSH
9196: LD_INT 12
9198: PPUSH
9199: CALL_OW 12
9203: PPUSH
9204: CALL_OW 272
9208: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL_OW 251
9223: PPUSH
9224: LD_VAR 0 4
9228: PPUSH
9229: LD_INT 3
9231: PPUSH
9232: LD_INT 12
9234: PPUSH
9235: CALL_OW 12
9239: PPUSH
9240: CALL_OW 273
9244: ST_TO_ADDR
// if ValidHex ( x , y ) then
9245: LD_VAR 0 2
9249: PPUSH
9250: LD_VAR 0 3
9254: PPUSH
9255: CALL_OW 488
9259: IFFALSE 9294
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_VAR 0 2
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 3
9278: PPUSH
9279: LD_INT 6
9281: PPUSH
9282: CALL_OW 12
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: CALL_OW 483
// end ;
9294: GO 9154
9296: POP
9297: POP
// end ;
9298: PPOPN 5
9300: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9301: LD_EXP 15
9305: PUSH
9306: LD_EXP 48
9310: AND
9311: IFFALSE 9405
9313: GO 9315
9315: DISABLE
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_OWVAR 2
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 32
9339: PUSH
9340: LD_INT 1
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 21
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: ST_TO_ADDR
// if not tmp then
9367: LD_VAR 0 2
9371: NOT
9372: IFFALSE 9376
// exit ;
9374: GO 9405
// for i in tmp do
9376: LD_ADDR_VAR 0 1
9380: PUSH
9381: LD_VAR 0 2
9385: PUSH
9386: FOR_IN
9387: IFFALSE 9403
// SetFuel ( i , 0 ) ;
9389: LD_VAR 0 1
9393: PPUSH
9394: LD_INT 0
9396: PPUSH
9397: CALL_OW 240
9401: GO 9386
9403: POP
9404: POP
// end ;
9405: PPOPN 2
9407: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9408: LD_EXP 15
9412: PUSH
9413: LD_EXP 49
9417: AND
9418: IFFALSE 9484
9420: GO 9422
9422: DISABLE
9423: LD_INT 0
9425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9426: LD_ADDR_VAR 0 1
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_OWVAR 2
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 30
9445: PUSH
9446: LD_INT 29
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: ST_TO_ADDR
// if not tmp then
9462: LD_VAR 0 1
9466: NOT
9467: IFFALSE 9471
// exit ;
9469: GO 9484
// DestroyUnit ( tmp [ 1 ] ) ;
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 65
// end ;
9484: PPOPN 1
9486: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9487: LD_EXP 15
9491: PUSH
9492: LD_EXP 51
9496: AND
9497: IFFALSE 9610
9499: GO 9501
9501: DISABLE
9502: LD_INT 0
9504: PPUSH
// begin uc_side := 0 ;
9505: LD_ADDR_OWVAR 20
9509: PUSH
9510: LD_INT 0
9512: ST_TO_ADDR
// uc_nation := nation_arabian ;
9513: LD_ADDR_OWVAR 21
9517: PUSH
9518: LD_INT 2
9520: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 10
9526: PPUSH
9527: LD_INT 11
9529: PPUSH
9530: CALL_OW 380
// un := CreateHuman ;
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: CALL_OW 44
9543: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9556: LD_INT 35
9558: PPUSH
9559: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9563: LD_VAR 0 1
9567: PPUSH
9568: LD_INT 22
9570: PUSH
9571: LD_OWVAR 2
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PPUSH
9580: CALL_OW 69
9584: PPUSH
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 74
9594: PPUSH
9595: CALL_OW 115
// until IsDead ( un ) ;
9599: LD_VAR 0 1
9603: PPUSH
9604: CALL_OW 301
9608: IFFALSE 9556
// end ;
9610: PPOPN 1
9612: END
